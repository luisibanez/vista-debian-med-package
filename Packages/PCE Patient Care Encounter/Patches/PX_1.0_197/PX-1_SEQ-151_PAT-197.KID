Released PX*1*197 SEQ #151
Extracted from mail message
**KIDS**:PX*1.0*197^

**INSTALL NAME**
PX*1.0*197
"BLD",8617,0)
PX*1.0*197^PCE PATIENT CARE ENCOUNTER^0^3110518^y
"BLD",8617,1,0)
^^3^3^3110518^^
"BLD",8617,1,1,0)
 This patch will prevent the credit stop visit entry from being 
"BLD",8617,1,2,0)
deleted when the primary visit receives a request to delete "ALL"
"BLD",8617,1,3,0)
entries while the visit is associated with an appointment.
"BLD",8617,4,0)
^9.64PA^^
"BLD",8617,6.3)
6
"BLD",8617,"KRN",0)
^9.67PA^779.2^20
"BLD",8617,"KRN",.4,0)
.4
"BLD",8617,"KRN",.401,0)
.401
"BLD",8617,"KRN",.402,0)
.402
"BLD",8617,"KRN",.403,0)
.403
"BLD",8617,"KRN",.5,0)
.5
"BLD",8617,"KRN",.84,0)
.84
"BLD",8617,"KRN",3.6,0)
3.6
"BLD",8617,"KRN",3.8,0)
3.8
"BLD",8617,"KRN",9.2,0)
9.2
"BLD",8617,"KRN",9.8,0)
9.8
"BLD",8617,"KRN",9.8,"NM",0)
^9.68A^2^2
"BLD",8617,"KRN",9.8,"NM",1,0)
PXAPIDEL^^0^B56745766
"BLD",8617,"KRN",9.8,"NM",2,0)
PXUTLSTP^^0^B15812153
"BLD",8617,"KRN",9.8,"NM","B","PXAPIDEL",1)

"BLD",8617,"KRN",9.8,"NM","B","PXUTLSTP",2)

"BLD",8617,"KRN",19,0)
19
"BLD",8617,"KRN",19.1,0)
19.1
"BLD",8617,"KRN",101,0)
101
"BLD",8617,"KRN",409.61,0)
409.61
"BLD",8617,"KRN",771,0)
771
"BLD",8617,"KRN",779.2,0)
779.2
"BLD",8617,"KRN",870,0)
870
"BLD",8617,"KRN",8989.51,0)
8989.51
"BLD",8617,"KRN",8989.52,0)
8989.52
"BLD",8617,"KRN",8994,0)
8994
"BLD",8617,"KRN","B",.4,.4)

"BLD",8617,"KRN","B",.401,.401)

"BLD",8617,"KRN","B",.402,.402)

"BLD",8617,"KRN","B",.403,.403)

"BLD",8617,"KRN","B",.5,.5)

"BLD",8617,"KRN","B",.84,.84)

"BLD",8617,"KRN","B",3.6,3.6)

"BLD",8617,"KRN","B",3.8,3.8)

"BLD",8617,"KRN","B",9.2,9.2)

"BLD",8617,"KRN","B",9.8,9.8)

"BLD",8617,"KRN","B",19,19)

"BLD",8617,"KRN","B",19.1,19.1)

"BLD",8617,"KRN","B",101,101)

"BLD",8617,"KRN","B",409.61,409.61)

"BLD",8617,"KRN","B",771,771)

"BLD",8617,"KRN","B",779.2,779.2)

"BLD",8617,"KRN","B",870,870)

"BLD",8617,"KRN","B",8989.51,8989.51)

"BLD",8617,"KRN","B",8989.52,8989.52)

"BLD",8617,"KRN","B",8994,8994)

"BLD",8617,"QDEF")
^^^^NO^^^^NO^^YES
"BLD",8617,"QUES",0)
^9.62^^
"BLD",8617,"REQB",0)
^9.611^2^2
"BLD",8617,"REQB",1,0)
PX*1.0*168^2
"BLD",8617,"REQB",2,0)
PX*1.0*166^2
"BLD",8617,"REQB","B","PX*1.0*166",2)

"BLD",8617,"REQB","B","PX*1.0*168",1)

"MBREQ")
0
"PKG",413,-1)
1^1
"PKG",413,0)
PCE PATIENT CARE ENCOUNTER^PX^Patient Care Encounter (VA Parent package)^
"PKG",413,20,0)
^9.402P^^
"PKG",413,22,0)
^9.49I^1^1
"PKG",413,22,1,0)
1.0^2960812^2960913^12537
"PKG",413,22,1,"PAH",1,0)
197^3110518
"PKG",413,22,1,"PAH",1,1,0)
^^3^3^3110518
"PKG",413,22,1,"PAH",1,1,1,0)
 This patch will prevent the credit stop visit entry from being 
"PKG",413,22,1,"PAH",1,1,2,0)
deleted when the primary visit receives a request to delete "ALL"
"PKG",413,22,1,"PAH",1,1,3,0)
entries while the visit is associated with an appointment.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
2
"RTN","PXAPIDEL")
0^1^B56745766^B29773660
"RTN","PXAPIDEL",1,0)
PXAPIDEL ;ISL/dee - PCE's code for the DELVFILE api ; 7/21/10 2:46pm  ; 7/28/10 10:16am
"RTN","PXAPIDEL",2,0)
 ;;1.0;PCE PATIENT CARE ENCOUNTER;**1,9,22,130,168,197**;Aug 12, 1996;Build 6
"RTN","PXAPIDEL",3,0)
 Q
"RTN","PXAPIDEL",4,0)
 ;
"RTN","PXAPIDEL",5,0)
DELVFILE(PXAWHICH,PXAVISIT,PXAPKG,PXASOURC,PXAASK,PXAECHO,PXAUSER) ;Deletes the requested data related to the visit.
"RTN","PXAPIDEL",6,0)
 ;  PXAWHICH is a ^ delimited string with the last two or three letters
"RTN","PXAPIDEL",7,0)
 ;           of the v-files to delete entries from and VISIT for the
"RTN","PXAPIDEL",8,0)
 ;           administrative data on the visit and STOP for the stop codes.
"RTN","PXAPIDEL",9,0)
 ;           (e.g. for immunization the v-file is AUPNVIMM so IMM is
"RTN","PXAPIDEL",10,0)
 ;           passed.)  Or "ALL" to delete all of the data from the 
"RTN","PXAPIDEL",11,0)
 ;           V-Files, the Stop Code and Visit.
"RTN","PXAPIDEL",12,0)
 ;  PXAVISIT is pointer to a visit for which the related data is be
"RTN","PXAPIDEL",13,0)
 ;           deleted.
"RTN","PXAPIDEL",14,0)
 ;  PACKAGE  (optional) if passed will only delete items created by
"RTN","PXAPIDEL",15,0)
 ;           this package
"RTN","PXAPIDEL",16,0)
 ;  SOURCE   (optional) if passed will only delete items created by
"RTN","PXAPIDEL",17,0)
 ;           this source
"RTN","PXAPIDEL",18,0)
 ;  PXAASK   (optional) if passed and not 0 or "" then will ask the user
"RTN","PXAPIDEL",19,0)
 ;           if they are sure that they want to delete
"RTN","PXAPIDEL",20,0)
 ;           (suggest 1 if want to ask).
"RTN","PXAPIDEL",21,0)
 ;  PXAECHO  (optional) if passed and not 0 or "" then will display to
"RTN","PXAPIDEL",22,0)
 ;           the user what is being deleted (suggest 1 if want to echo).
"RTN","PXAPIDEL",23,0)
 ;  PXAUSER  (optional) this is the duz of a user if you only want to
"RTN","PXAPIDEL",24,0)
 ;           delete entries that this user created.  If it is not passed
"RTN","PXAPIDEL",25,0)
 ;           or is 0 or "" then it will not matter who created the
"RTN","PXAPIDEL",26,0)
 ;           entries being deleted.
"RTN","PXAPIDEL",27,0)
 ;
"RTN","PXAPIDEL",28,0)
 ; Returns:
"RTN","PXAPIDEL",29,0)
 ;   1  if no errors and process completely
"RTN","PXAPIDEL",30,0)
 ;   0  if errors occurred
"RTN","PXAPIDEL",31,0)
 ;      or try to delete something that was now allowed to delete
"RTN","PXAPIDEL",32,0)
 ;      but deletion processed completely as possible
"RTN","PXAPIDEL",33,0)
 ;  -1  if user said not to delete or user up arrows out
"RTN","PXAPIDEL",34,0)
 ;        or errors out. In any case nothing was delete.
"RTN","PXAPIDEL",35,0)
 ;  -2  if could not get a visit
"RTN","PXAPIDEL",36,0)
 ;  -3  if called incorrectly
"RTN","PXAPIDEL",37,0)
 ;  -4  if dependent entry count is still greater than zer0
"RTN","PXAPIDEL",38,0)
 ;
"RTN","PXAPIDEL",39,0)
 ;Good visit?
"RTN","PXAPIDEL",40,0)
 Q:'$G(PXAVISIT) -2
"RTN","PXAPIDEL",41,0)
 Q:'($D(^AUPNVSIT(PXAVISIT,0))#2) -2
"RTN","PXAPIDEL",42,0)
 ;
"RTN","PXAPIDEL",43,0)
 ;Get package pointer
"RTN","PXAPIDEL",44,0)
 S PACKAGE=$G(PACKAGE)
"RTN","PXAPIDEL",45,0)
 I PACKAGE="" S PXAPKG=0
"RTN","PXAPIDEL",46,0)
 E  I PACKAGE=+PACKAGE S PXAPKG=PACKAGE
"RTN","PXAPIDEL",47,0)
 E  S PXAPKG=$$PKG2IEN^VSIT(PACKAGE) I PXAPKG=-1 W:'$D(ZTQUEUED) !,"Procedure ""DELVFILE^PXAPI"" was called incorrectly without a valid ""PACKAGE"", contact IRM." Q -3
"RTN","PXAPIDEL",48,0)
 I PXAPKG>0,'($D(^DIC(9.4,PXAPKG,0))#2) W:'$D(ZTQUEUED) !,"Procedure ""DELVFILE^PXAPI"" was called incorrectly without a valid ""PACKAGE"", contact IRM." Q -3
"RTN","PXAPIDEL",49,0)
 ;
"RTN","PXAPIDEL",50,0)
 ;Lookup source in PCE DATA SOURCE file (#839.7) with LAYGO
"RTN","PXAPIDEL",51,0)
 S SOURCE=$G(SOURCE)
"RTN","PXAPIDEL",52,0)
 I SOURCE="" S PXASOURC=0
"RTN","PXAPIDEL",53,0)
 E  I SOURCE=+SOURCE S PXASOURC=SOURCE
"RTN","PXAPIDEL",54,0)
 E  S PXASOURC=$$SOURCE^PXAPIUTL(SOURCE)
"RTN","PXAPIDEL",55,0)
 I +PXASOURC=-1 W:'$D(ZTQUEUED) !,"Procedure ""DELVFILE^PXAPI"" was called incorrectly without a valid ""SOURCE"", contact IRM." Q -3
"RTN","PXAPIDEL",56,0)
 ;
"RTN","PXAPIDEL",57,0)
 K ^TMP("PXK",$J)
"RTN","PXAPIDEL",58,0)
 N PXACOUNT,PXAINDX,PXAVFILE,PXAFILE,PXARET,PXAWFLAG
"RTN","PXAPIDEL",59,0)
 N PXALEN,PXAIEN,PXAPIECE,PXAMYSOR
"RTN","PXAPIDEL",60,0)
 S PXARET=1
"RTN","PXAPIDEL",61,0)
 I PXAWHICH="ALL" S PXAWHICH="VISIT^STOP^CPT^IMM^PED^POV^PRV^SK^TRT^HF^XAM"
"RTN","PXAPIDEL",62,0)
 S PXALEN=$L(PXAWHICH,"^")
"RTN","PXAPIDEL",63,0)
 Q:PXALEN<1 -3
"RTN","PXAPIDEL",64,0)
 E  F PXACOUNT=1:1:PXALEN S PXAVFILE=$P(PXAWHICH,"^",PXACOUNT) D  Q:PXARET<0
"RTN","PXAPIDEL",65,0)
 . I "~VISIT~STOP~CPT~IMM~PED~POV~PRV~SK~TRT~HF~XAM~"'[("~"_PXAVFILE_"~") S PXARET=-3
"RTN","PXAPIDEL",66,0)
 Q:PXARET<0 PXARET
"RTN","PXAPIDEL",67,0)
 I PXAASK D  Q:PXARET<0 PXARET
"RTN","PXAPIDEL",68,0)
 . N DIR,X,Y
"RTN","PXAPIDEL",69,0)
 . ;ask the user if they want to delete
"RTN","PXAPIDEL",70,0)
 . S DIR(0)="Y"
"RTN","PXAPIDEL",71,0)
 . S DIR("A")="Are you sure you want to delete the encounter information"
"RTN","PXAPIDEL",72,0)
 . S DIR("B")="NO"
"RTN","PXAPIDEL",73,0)
 . D ^DIR
"RTN","PXAPIDEL",74,0)
 . I Y'=1 S PXARET=-1 Q
"RTN","PXAPIDEL",75,0)
 S PXAMYSOR=$$SOURCE^PXAPIUTL("PCE DELETE V-FILES API")
"RTN","PXAPIDEL",76,0)
STOP  ;Do Stop Codes first
"RTN","PXAPIDEL",77,0)
  S PXAWFLAG=PXAECHO&'$D(ZTQUEUED)
"RTN","PXAPIDEL",78,0)
  I "^"_PXAWHICH_"^"["^STOP^" D
"RTN","PXAPIDEL",79,0)
 . S PXAIEN=0
"RTN","PXAPIDEL",80,0)
 . F PXACOUNT=0:1 S PXAIEN=$O(^AUPNVSIT("AD",PXAVISIT,PXAIEN)) Q:'PXAIEN  D
"RTN","PXAPIDEL",81,0)
 .. I PXAUSER>0,PXAUSER'=$P(^AUPNVSIT(PXAIEN,0),"^",23) Q
"RTN","PXAPIDEL",82,0)
 .. I $P($G(^AUPNVSIT(PXAIEN,150)),U,3)="C" Q  ; do not delete credit stop code this time
"RTN","PXAPIDEL",83,0)
 .. I $P($G(^AUPNVSIT(PXAIEN,150)),U,3)'="S" Q  ; delete only stop codes
"RTN","PXAPIDEL",84,0)
 .. I PXAWFLAG W !,"   ...deleting Stop Codes"
"RTN","PXAPIDEL",85,0)
 .. N PXST S PXST=$$STOPCODE^PXUTLSTP(PXAMYSOR,"@",PXAVISIT,PXAIEN) I PXST=-1 D
"RTN","PXAPIDEL",86,0)
 ... I PXAWFLAG W !!,$C(7),"Cannot edit at this time, try again later." D PAUSE^PXCEHELP
"RTN","PXAPIDEL",87,0)
 ;Set up the visit
"RTN","PXAPIDEL",88,0)
 S ^TMP("PXK",$J,"PKG")=PXAPKG
"RTN","PXAPIDEL",89,0)
 S ^TMP("PXK",$J,"SOR")=PXAMYSOR
"RTN","PXAPIDEL",90,0)
 S ^TMP("PXK",$J,"VST",1,"IEN")=PXAVISIT
"RTN","PXAPIDEL",91,0)
 F PXAPIECE=0,21,150,800,811 D
"RTN","PXAPIDEL",92,0)
 . S (^TMP("PXK",$J,"VST",1,PXAPIECE,"BEFORE"),^TMP("PXK",$J,"VST",1,PXAPIECE,"AFTER"))=$G(^AUPNVSIT(PXAVISIT,PXAPIECE))
"RTN","PXAPIDEL",93,0)
 ;
"RTN","PXAPIDEL",94,0)
 F PXACOUNT=1:1:PXALEN S PXAVFILE=$P(PXAWHICH,"^",PXACOUNT) D
"RTN","PXAPIDEL",95,0)
 . I PXAVFILE="VISIT" D
"RTN","PXAPIDEL",96,0)
 .. ;set fields to @
"RTN","PXAPIDEL",97,0)
 .. S $P(^TMP("PXK",$J,"VST",1,0,"AFTER"),"^",18)="@"
"RTN","PXAPIDEL",98,0)
 .. F INDEX=1:1:8 S:$P(^TMP("PXK",$J,"VST",1,800,"AFTER"),"^",INDEX)]"" $P(^TMP("PXK",$J,"VST",1,800,"AFTER"),"^",INDEX)="@"
"RTN","PXAPIDEL",99,0)
 . E  I PXAVFILE="STOP" ;skip already done
"RTN","PXAPIDEL",100,0)
 . E  D  ;the v-files
"RTN","PXAPIDEL",101,0)
 .. S PXAWFLAG=PXAECHO&'$D(ZTQUEUED)
"RTN","PXAPIDEL",102,0)
 .. S PXAFILE=$P($T(FORMAT^@("PXCE"_$S(PXAVFILE="IMM":"VIMM",1:PXAVFILE))),"~",5)
"RTN","PXAPIDEL",103,0)
 .. S PXAIEN=0
"RTN","PXAPIDEL",104,0)
 .. F PXAINDX=1:1 S PXAIEN=$O(@(PXAFILE_"(""AD"",PXAVISIT,PXAIEN)")) Q:'PXAIEN  D
"RTN","PXAPIDEL",105,0)
 ... I $P($G(@(PXAFILE_"(PXAIEN,812)")),"^",1) S PXARET=0 Q
"RTN","PXAPIDEL",106,0)
 ... I PXAUSER>0,PXAUSER'=$P($P($P($G(@(PXAFILE_"(PXAIEN,801)")),"^",2),";",1)," ",2) Q
"RTN","PXAPIDEL",107,0)
 ... I PXAPKG>0,PXAPKG'=$P($G(@(PXAFILE_"(PXAIEN,812)")),"^",2) Q
"RTN","PXAPIDEL",108,0)
 ... I PXASOURC>0,PXASOURC'=$P($G(@(PXAFILE_"(PXAIEN,812)")),"^",3) Q
"RTN","PXAPIDEL",109,0)
 ... S ^TMP("PXK",$J,PXAVFILE,PXAINDX,0,"BEFORE")=@(PXAFILE_"(PXAIEN,0)")
"RTN","PXAPIDEL",110,0)
 ... S ^TMP("PXK",$J,PXAVFILE,PXAINDX,0,"AFTER")="@"
"RTN","PXAPIDEL",111,0)
 ... S ^TMP("PXK",$J,PXAVFILE,PXAINDX,"IEN")=PXAIEN
"RTN","PXAPIDEL",112,0)
 ... I PXAWFLAG D
"RTN","PXAPIDEL",113,0)
 .... S PXAWFLAG=0
"RTN","PXAPIDEL",114,0)
 .... W !,"   ...deleting "
"RTN","PXAPIDEL",115,0)
 .... W $S("CPT"=PXAVFILE:"Procedure","IMM"=PXAVFILE:"Immunizations","PED"=PXAVFILE:"Patient Education",1:"")
"RTN","PXAPIDEL",116,0)
 .... W $S("POV"=PXAVFILE:"Diagnoses","PRV"=PXAVFILE:"Providers","SK"=PXAVFILE:"Skin Test","TRT"=PXAVFILE:"Treatments","HF"=PXAVFILE:"Health Factors","XAM"=PXAVFILE:"Exams",1:"")
"RTN","PXAPIDEL",117,0)
 ;now process all the data except the stop codes which have already been done
"RTN","PXAPIDEL",118,0)
 ;
"RTN","PXAPIDEL",119,0)
 ;
"RTN","PXAPIDEL",120,0)
 N PXKERROR
"RTN","PXAPIDEL",121,0)
 I $D(^TMP("PXK",$J)) D
"RTN","PXAPIDEL",122,0)
 . I PXAECHO,'$D(ZTQUEUED) D WAIT^DICD
"RTN","PXAPIDEL",123,0)
 . D EN1^PXKMAIN
"RTN","PXAPIDEL",124,0)
 . D EVENT^PXKMAIN
"RTN","PXAPIDEL",125,0)
 . K ^TMP("PXK",$J)
"RTN","PXAPIDEL",126,0)
 ;
"RTN","PXAPIDEL",127,0)
DELCR ;Do CREDIT Stop Code if it is the only entry except OE entry, not assoc. with apt
"RTN","PXAPIDEL",128,0)
 N SDD S SDD=$$VERAPT(PXAVISIT,.SDD) ; CHECK IF APPOINTMENT IS ASSOCIATED
"RTN","PXAPIDEL",129,0)
 I 'SDD D  ; perform IF no appointment is associated with
"RTN","PXAPIDEL",130,0)
 .S PXAWFLAG=PXAECHO&'$D(ZTQUEUED)
"RTN","PXAPIDEL",131,0)
 .I "^"_PXAWHICH_"^"["^STOP^" D
"RTN","PXAPIDEL",132,0)
 ..;VERIFY IF TO DELETE CREDIT STOP CODE AND IF SO THEN BE SURE PRIMARY VISIT WILL BE DELETED
"RTN","PXAPIDEL",133,0)
 ..;
"RTN","PXAPIDEL",134,0)
 ..S PXAIEN=0
"RTN","PXAPIDEL",135,0)
 ..F PXACOUNT=0:1 S PXAIEN=$O(^AUPNVSIT("AD",PXAVISIT,PXAIEN)) Q:'PXAIEN  D
"RTN","PXAPIDEL",136,0)
 ...I PXAUSER>0,PXAUSER'=$P(^AUPNVSIT(PXAIEN,0),"^",23) Q
"RTN","PXAPIDEL",137,0)
 ...I $P($G(^AUPNVSIT(PXAIEN,150)),U,3)'="C" Q
"RTN","PXAPIDEL",138,0)
 ...; check how many entries point to the primary visit
"RTN","PXAPIDEL",139,0)
 ...N PXPCNT S PXPCNT=$$DEC^VSITKIL(PXAVISIT) ; CHECK COUNT OF PRIMARY VISIT
"RTN","PXAPIDEL",140,0)
 ...; CONTINUE ONLY if there are less than three entries;
"RTN","PXAPIDEL",141,0)
 ...; if there are 2 entries one of them would have to be OE
"RTN","PXAPIDEL",142,0)
 ...; because if not OE then the second entry would be not PCE one
"RTN","PXAPIDEL",143,0)
 ...; and the primary visit cannot be deleted
"RTN","PXAPIDEL",144,0)
 ...I PXPCNT>2 Q  ; 
"RTN","PXAPIDEL",145,0)
 ...I '$D(^SCE("AVSIT",PXAVISIT)) Q
"RTN","PXAPIDEL",146,0)
 ...I PXAWFLAG W !,"   ...deleting Credit Stop Codes"
"RTN","PXAPIDEL",147,0)
 ...N PXST S PXST=$$STOPCODE^PXUTLSTP(PXAMYSOR,"@",PXAVISIT,PXAIEN) I PXST=-1 D
"RTN","PXAPIDEL",148,0)
 ....I PXAWFLAG W !!,$C(7),"Cannot edit/delete at this time, try again later." D PAUSE^PXCEHELP
"RTN","PXAPIDEL",149,0)
 ;
"RTN","PXAPIDEL",150,0)
 N PXAKILL
"RTN","PXAPIDEL",151,0)
 I "^"_PXAWHICH_"^"["^VISIT^" D
"RTN","PXAPIDEL",152,0)
 . S PXAKILL=$$KILL^VSITKIL(PXAVISIT)
"RTN","PXAPIDEL",153,0)
 Q $S(PXARET=0!$D(PXKERROR):0,$G(PXAKILL):-4,1:1)
"RTN","PXAPIDEL",154,0)
 ;
"RTN","PXAPIDEL",155,0)
VERAPT(PXAVISIT,SCDXPOV) ;FUNCTION CALLED TO VERIFY IF VISIT IS ASSOCIATED WITH APPOINTMENT
"RTN","PXAPIDEL",156,0)
 N SDARRAY,SDCL,SDATE,SVSTSTR,SDFN,SCDXPOV,SDAPP
"RTN","PXAPIDEL",157,0)
 K ^TMP($J,"SDAMA301")
"RTN","PXAPIDEL",158,0)
 I '$D(^AUPNVSIT(PXAVISIT,0)) Q $G(SCDXPOV)
"RTN","PXAPIDEL",159,0)
 S SVSTSTR=^AUPNVSIT(PXAVISIT,0)
"RTN","PXAPIDEL",160,0)
 S SDCL=$P(SVSTSTR,U,22),SDATE=$P(SVSTSTR,U)
"RTN","PXAPIDEL",161,0)
 S SDARRAY(1)=SDATE_";"_SDATE,SDFN=$P(SVSTSTR,U,5)
"RTN","PXAPIDEL",162,0)
 S SDARRAY(4)=SDFN
"RTN","PXAPIDEL",163,0)
 S SDARRAY(2)=SDCL
"RTN","PXAPIDEL",164,0)
 S SDARRAY("FLDS")="2;12;16"
"RTN","PXAPIDEL",165,0)
 N SDCOUNT S SDCOUNT=$$SDAPI^SDAMA301(.SDARRAY)
"RTN","PXAPIDEL",166,0)
 I '$D(^TMP($J,"SDAMA301",SDFN,SDCL,SDATE)) Q $G(SCDXPOV)
"RTN","PXAPIDEL",167,0)
 S SDAPP=^TMP($J,"SDAMA301",SDFN,SDCL,SDATE)
"RTN","PXAPIDEL",168,0)
 N SDENC S SDENC=$P(SDAPP,U,12) ; OE
"RTN","PXAPIDEL",169,0)
 ; get OE from VISIT
"RTN","PXAPIDEL",170,0)
 N SDOEP
"RTN","PXAPIDEL",171,0)
 K ^TMP($J,"SDAMA301")
"RTN","PXAPIDEL",172,0)
 D LISTVST^SDOERPC(.SDOEP,PXAVISIT)
"RTN","PXAPIDEL",173,0)
 S SDOEP=$P(SDOEP,")")_","_""""""_")"
"RTN","PXAPIDEL",174,0)
 S SDOEP=$O(@SDOEP)
"RTN","PXAPIDEL",175,0)
 I SDOEP>0 I SDENC=SDOEP S SCDXPOV=1 Q SCDXPOV  ; active appointment is associated with this visit
"RTN","PXAPIDEL",176,0)
 Q $G(SCDXPOV)
"RTN","PXAPIDEL",177,0)
 ;
"RTN","PXUTLSTP")
0^2^B15812153^B14644426
"RTN","PXUTLSTP",1,0)
PXUTLSTP ;ISL/dee,ESW - Utility routine used by PCE to add/edit/delete stop code visits ; 7/25/03 4:12pm
"RTN","PXUTLSTP",2,0)
 ;;1.0;PCE PATIENT CARE ENCOUNTER;**1,96,166,197**;Aug 12, 1996;Build 6
"RTN","PXUTLSTP",3,0)
 Q
"RTN","PXUTLSTP",4,0)
 ;
"RTN","PXUTLSTP",5,0)
STOPCODE(PXUTSOR,PXUTSTOP,PXUTVST,PXUTSVST) ;Makes or edits visit to create the secondary visit for the credit stops
"RTN","PXUTLSTP",6,0)
 ; Parameters
"RTN","PXUTLSTP",7,0)
 ;   PXUTSOR   IEN of the Data source
"RTN","PXUTLSTP",8,0)
 ;   PXUTSTOP  Pointer to Stop Code OR "@" if delete the secondary visit
"RTN","PXUTLSTP",9,0)
 ;   PXUTVST   Main visit
"RTN","PXUTLSTP",10,0)
 ;   PXUTSVST  Secondary visit
"RTN","PXUTLSTP",11,0)
 ;               if there is not one then create one
"RTN","PXUTLSTP",12,0)
 ;               if there is one then this is an edit or delete
"RTN","PXUTLSTP",13,0)
 ;
"RTN","PXUTLSTP",14,0)
 ; Returns the pointer to the secondary visit
"RTN","PXUTLSTP",15,0)
 ;   or 0 if the secondary visit was deleted
"RTN","PXUTLSTP",16,0)
 ;   or -1 if the secondary visit could not be deleted
"RTN","PXUTLSTP",17,0)
 ;   or null if visit tracking did not create the visit 
"RTN","PXUTLSTP",18,0)
 ; 
"RTN","PXUTLSTP",19,0)
 ;
"RTN","PXUTLSTP",20,0)
 D EVENT^PXKMAIN
"RTN","PXUTLSTP",21,0)
 N PXUAFTER,PXUTNODE,PXUTRET,PXKERROR,PXUTEXIT
"RTN","PXUTLSTP",22,0)
 K ^TMP("PXK",$J)
"RTN","PXUTLSTP",23,0)
 S PXUTEXIT=0
"RTN","PXUTLSTP",24,0)
 ;
"RTN","PXUTLSTP",25,0)
 I $G(PXUTSVST)>0 D  Q:PXUTEXIT -1
"RTN","PXUTLSTP",26,0)
 . L +^AUPNVSIT(PXUTSVST):$G(DILOCKTM,5) E  S PXUTEXIT=1 Q
"RTN","PXUTLSTP",27,0)
 . I PXUTSTOP="@" D
"RTN","PXUTLSTP",28,0)
 ..;--ENTERED TO TRY TO KILL STOP CODES
"RTN","PXUTLSTP",29,0)
DELETE ..;If stop code has to be killed on credit stop code visit then 
"RTN","PXUTLSTP",30,0)
 ..; the whole visit has to be killed with and pointing to it
"RTN","PXUTLSTP",31,0)
 ..; outpatient encounter.
"RTN","PXUTLSTP",32,0)
 .. F PXUTNODE=0,21,150,800,811,812 D
"RTN","PXUTLSTP",33,0)
 ... S (^TMP("PXK",$J,"VST",1,PXUTNODE,"AFTER"),^TMP("PXK",$J,"VST",1,PXUTNODE,"BEFORE"))=$G(^AUPNVSIT(PXUTSVST,PXUTNODE))
"RTN","PXUTLSTP",34,0)
 .. S $P(^TMP("PXK",$J,"VST",1,0,"AFTER"),"^",8)="@"
"RTN","PXUTLSTP",35,0)
 .. S ^TMP("PXK",$J,"VST",1,"IEN")=PXUTSVST
"RTN","PXUTLSTP",36,0)
 ..; Verify if this is really credit stop visit with only 1 dependent
"RTN","PXUTLSTP",37,0)
 ..; entry that is outpatient encounter.
"RTN","PXUTLSTP",38,0)
 .. I $$DEC^VSITKIL(PXUTVST)>2 Q  ; do not kill the secondary, visit will stay PX/197
"RTN","PXUTLSTP",39,0)
 .. ;I $$DEC^VSITKIL(PXUTSVST,0)<2,$P($G(^AUPNVSIT(PXUTSVST,150)),U,3)="C" D   ;PX/96;commented PX/197
"RTN","PXUTLSTP",40,0)
 .. I '$D(^SCE("AVSIT",PXUTVST)) Q  ; do not kill
"RTN","PXUTLSTP",41,0)
 .. S ^TMP("PXK",$J,"VST",1,0,"AFTER")="@"
"RTN","PXUTLSTP",42,0)
 ..; Find Outpatient Encounter to take care of
"RTN","PXUTLSTP",43,0)
 .. N SDOEP
"RTN","PXUTLSTP",44,0)
 .. D LISTVST^SDOERPC(.SDOEP,PXUTVST)
"RTN","PXUTLSTP",45,0)
 .. S SDOEP=$P(SDOEP,")")_","_""""""_")"
"RTN","PXUTLSTP",46,0)
 .. S SDOEP=$O(@SDOEP) D CHLD^SDCODEL(SDOEP,0)
"RTN","PXUTLSTP",47,0)
 . E  D
"RTN","PXUTLSTP",48,0)
EDIT .. F PXUTNODE=0,21,150,800,811,812 D
"RTN","PXUTLSTP",49,0)
 ... S (^TMP("PXK",$J,"VST",1,PXUTNODE,"AFTER"),^TMP("PXK",$J,"VST",1,PXUTNODE,"BEFORE"))=$G(^AUPNVSIT(PXUTSVST,PXUTNODE))
"RTN","PXUTLSTP",50,0)
 .. S $P(^TMP("PXK",$J,"VST",1,0,"AFTER"),"^",8)=PXUTSTOP
"RTN","PXUTLSTP",51,0)
 .. S ^TMP("PXK",$J,"VST",1,"IEN")=PXUTSVST
"RTN","PXUTLSTP",52,0)
 ;
"RTN","PXUTLSTP",53,0)
 E  I $G(PXUTVST)>0 D
"RTN","PXUTLSTP",54,0)
CREATE . F PXUTNODE=150,800,811 D
"RTN","PXUTLSTP",55,0)
 .. S ^TMP("PXK",$J,"VST",1,PXUTNODE,"AFTER")=""
"RTN","PXUTLSTP",56,0)
 .. S ^TMP("PXK",$J,"VST",1,PXUTNODE,"BEFORE")=""
"RTN","PXUTLSTP",57,0)
 . S ^TMP("PXK",$J,"VST",1,21,"AFTER")=$G(^AUPNVSIT(PXUTVST,21))
"RTN","PXUTLSTP",58,0)
 . S ^TMP("PXK",$J,"VST",1,21,"BEFORE")=""
"RTN","PXUTLSTP",59,0)
 . S ^TMP("PXK",$J,"VST",1,150,"AFTER")="^^S"
"RTN","PXUTLSTP",60,0)
 . S ^TMP("PXK",$J,"VST",1,150,"BEFORE")=""
"RTN","PXUTLSTP",61,0)
 . S ^TMP("PXK",$J,"VST",1,812,"AFTER")="^^"_PXUTSOR
"RTN","PXUTLSTP",62,0)
 . S ^TMP("PXK",$J,"VST",1,812,"BEFORE")=""
"RTN","PXUTLSTP",63,0)
 . S PXUAFTER=$G(^AUPNVSIT(PXUTVST,0))
"RTN","PXUTLSTP",64,0)
 . S ^TMP("PXK",$J,"VST",1,0,"AFTER")=$P(PXUAFTER,"^",1)_"^^^^"_$P(PXUAFTER,"^",5,6)_"^^"_PXUTSTOP_"^^^^"_PXUTVST_"^^^^^^^^^"_$P(PXUAFTER,"^",21,22)
"RTN","PXUTLSTP",65,0)
 . S ^TMP("PXK",$J,"VST",1,0,"BEFORE")=""
"RTN","PXUTLSTP",66,0)
 . S ^TMP("PXK",$J,"VST",1,"IEN")=""
"RTN","PXUTLSTP",67,0)
 E  Q -1
"RTN","PXUTLSTP",68,0)
 ;
"RTN","PXUTLSTP",69,0)
 S ^TMP("PXK",$J,"SOR")=PXUTSOR
"RTN","PXUTLSTP",70,0)
 D EN1^PXKMAIN
"RTN","PXUTLSTP",71,0)
 S PXUTRET=^TMP("PXK",$J,"VST",1,"IEN")
"RTN","PXUTLSTP",72,0)
 D EVENT^PXKMAIN
"RTN","PXUTLSTP",73,0)
 K ^TMP("PXK",$J)
"RTN","PXUTLSTP",74,0)
 I PXUTRET>0,$G(PXUTSVST)>0,PXUTSTOP="@" D
"RTN","PXUTLSTP",75,0)
 . N PXUTKILL
"RTN","PXUTLSTP",76,0)
 . S PXUTKILL=$$KILL^VSITKIL(PXUTSVST)
"RTN","PXUTLSTP",77,0)
 . S:'PXUTKILL PXUTRET=0  ; visit was killed
"RTN","PXUTLSTP",78,0)
 I $G(PXUTSVST)>0 L -^AUPNVSIT(PXUTSVST)
"RTN","PXUTLSTP",79,0)
 D MODIFIED^VSIT(PXUTVST)
"RTN","PXUTLSTP",80,0)
 Q PXUTRET
"RTN","PXUTLSTP",81,0)
 ;
"RTN","PXUTLSTP",82,0)
 ;
"RTN","PXUTLSTP",83,0)
 ;
"RTN","PXUTLSTP",84,0)
 ;
"RTN","PXUTLSTP",85,0)
DEAD(VSIT) ;---*** ADDED IN ALBANY BY VAUGHN
"RTN","PXUTLSTP",86,0)
 ;--TO KILL LEFT OVER CREDIT STOP ENTRY THAT IS NOT DELETED
"RTN","PXUTLSTP",87,0)
 ;-added next line to quit
"RTN","PXUTLSTP",88,0)
 Q:$G(VSIT)<1
"RTN","PXUTLSTP",89,0)
 N DEAD,CHILD
"RTN","PXUTLSTP",90,0)
 S CHILD=0 F  S CHILD=$O(^AUPNVSIT("AD",VSIT,CHILD)) Q:CHILD=""  D
"RTN","PXUTLSTP",91,0)
 .I $P($G(^AUPNVSIT(CHILD,0)),"^",8)="",$P($G(^AUPNVSIT(CHILD,0)),"^",9)<1,$P($G(^AUPNVSIT(CHILD,150)),"^",3)="C" S DEAD=$$KILL^VSITKIL(CHILD)
"RTN","PXUTLSTP",92,0)
 ;-----END OF ADDED CODE  VAUGHN----
"RTN","PXUTLSTP",93,0)
 ;
"VER")
8.0^22.0
**END**
**END**
