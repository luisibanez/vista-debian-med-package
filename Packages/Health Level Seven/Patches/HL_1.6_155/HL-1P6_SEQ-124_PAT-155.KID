Released HL*1.6*155 SEQ #124
Extracted from mail message
**KIDS**:HL*1.6*155^

**INSTALL NAME**
HL*1.6*155
"BLD",1496,0)
HL*1.6*155^HEALTH LEVEL SEVEN^0^3110218^y
"BLD",1496,1,0)
^^2^2^3110209^
"BLD",1496,1,1,0)
Please seen the National Patch Module on Forum for a complete description.
"BLD",1496,1,2,0)

"BLD",1496,4,0)
^9.64PA^870^1
"BLD",1496,4,870,0)
870
"BLD",1496,4,870,2,0)
^9.641^870^1
"BLD",1496,4,870,2,870,0)
HL LOGICAL LINK  (File-top level)
"BLD",1496,4,870,2,870,1,0)
^9.6411^23^1
"BLD",1496,4,870,2,870,1,23,0)
SINGLE THREADED
"BLD",1496,4,870,222)
y^n^p^^^^n^^n
"BLD",1496,4,870,224)

"BLD",1496,4,"APDD",870,870)

"BLD",1496,4,"APDD",870,870,23)

"BLD",1496,4,"B",870,870)

"BLD",1496,6.3)
4
"BLD",1496,"ABPKG")
n
"BLD",1496,"KRN",0)
^9.67PA^9002226^21
"BLD",1496,"KRN",.4,0)
.4
"BLD",1496,"KRN",.401,0)
.401
"BLD",1496,"KRN",.402,0)
.402
"BLD",1496,"KRN",.403,0)
.403
"BLD",1496,"KRN",.5,0)
.5
"BLD",1496,"KRN",.84,0)
.84
"BLD",1496,"KRN",3.6,0)
3.6
"BLD",1496,"KRN",3.8,0)
3.8
"BLD",1496,"KRN",9.2,0)
9.2
"BLD",1496,"KRN",9.8,0)
9.8
"BLD",1496,"KRN",9.8,"NM",0)
^9.68A^5^5
"BLD",1496,"KRN",9.8,"NM",1,0)
HLOTLNK^^0^B30609561
"BLD",1496,"KRN",9.8,"NM",2,0)
HLOCLNT^^0^B82958166
"BLD",1496,"KRN",9.8,"NM",3,0)
HLOT^^0^B6475686
"BLD",1496,"KRN",9.8,"NM",4,0)
HLOPING^^0^B25888835
"BLD",1496,"KRN",9.8,"NM",5,0)
HLOCLNT1^^0^B35977020
"BLD",1496,"KRN",9.8,"NM","B","HLOCLNT",2)

"BLD",1496,"KRN",9.8,"NM","B","HLOCLNT1",5)

"BLD",1496,"KRN",9.8,"NM","B","HLOPING",4)

"BLD",1496,"KRN",9.8,"NM","B","HLOT",3)

"BLD",1496,"KRN",9.8,"NM","B","HLOTLNK",1)

"BLD",1496,"KRN",19,0)
19
"BLD",1496,"KRN",19.1,0)
19.1
"BLD",1496,"KRN",101,0)
101
"BLD",1496,"KRN",409.61,0)
409.61
"BLD",1496,"KRN",771,0)
771
"BLD",1496,"KRN",779.2,0)
779.2
"BLD",1496,"KRN",870,0)
870
"BLD",1496,"KRN",8989.51,0)
8989.51
"BLD",1496,"KRN",8989.52,0)
8989.52
"BLD",1496,"KRN",8994,0)
8994
"BLD",1496,"KRN",9002226,0)
9002226
"BLD",1496,"KRN","B",.4,.4)

"BLD",1496,"KRN","B",.401,.401)

"BLD",1496,"KRN","B",.402,.402)

"BLD",1496,"KRN","B",.403,.403)

"BLD",1496,"KRN","B",.5,.5)

"BLD",1496,"KRN","B",.84,.84)

"BLD",1496,"KRN","B",3.6,3.6)

"BLD",1496,"KRN","B",3.8,3.8)

"BLD",1496,"KRN","B",9.2,9.2)

"BLD",1496,"KRN","B",9.8,9.8)

"BLD",1496,"KRN","B",19,19)

"BLD",1496,"KRN","B",19.1,19.1)

"BLD",1496,"KRN","B",101,101)

"BLD",1496,"KRN","B",409.61,409.61)

"BLD",1496,"KRN","B",771,771)

"BLD",1496,"KRN","B",779.2,779.2)

"BLD",1496,"KRN","B",870,870)

"BLD",1496,"KRN","B",8989.51,8989.51)

"BLD",1496,"KRN","B",8989.52,8989.52)

"BLD",1496,"KRN","B",8994,8994)

"BLD",1496,"KRN","B",9002226,9002226)

"BLD",1496,"QUES",0)
^9.62^^
"BLD",1496,"REQB",0)
^9.611^1^1
"BLD",1496,"REQB",1,0)
HL*1.6*147^2
"BLD",1496,"REQB","B","HL*1.6*147",1)

"FIA",870)
HL LOGICAL LINK
"FIA",870,0)
^HLCS(870,
"FIA",870,0,0)
870
"FIA",870,0,1)
y^n^p^^^^n^^n
"FIA",870,0,10)

"FIA",870,0,11)

"FIA",870,0,"RLRO")

"FIA",870,0,"VR")
1.6^HL
"FIA",870,870)
1
"FIA",870,870,23)

"MBREQ")
0
"PKG",9,-1)
1^1
"PKG",9,0)
HEALTH LEVEL SEVEN^HL^DHCP IMPLEMENTATION OF HEALTH LEVEL SEVEN^
"PKG",9,20,0)
^9.402P^^
"PKG",9,22,0)
^9.49I^1^1
"PKG",9,22,1,0)
1.6^2980130^2980130^6
"PKG",9,22,1,"PAH",1,0)
155^3110218
"PKG",9,22,1,"PAH",1,1,0)
^^2^2^3110218
"PKG",9,22,1,"PAH",1,1,1,0)
Please seen the National Patch Module on Forum for a complete description.
"PKG",9,22,1,"PAH",1,1,2,0)

"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
5
"RTN","HLOCLNT")
0^2^B82958166^B80403155
"RTN","HLOCLNT",1,0)
HLOCLNT ;ALB/CJM- Client for sending messages - 10/4/94 1pm ;02/10/2011
"RTN","HLOCLNT",2,0)
 ;;1.6;HEALTH LEVEL SEVEN;**126,130,131,134,137,139,143,147,155**;Oct 13, 1995;Build 4
"RTN","HLOCLNT",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","HLOCLNT",4,0)
 ;
"RTN","HLOCLNT",5,0)
 ;GET WORK function for the process running under the Process Manager
"RTN","HLOCLNT",6,0)
GETWORK(QUE) ;
"RTN","HLOCLNT",7,0)
 ;Input:
"RTN","HLOCLNT",8,0)
 ;  QUE - (pass by reference) These subscripts are used:
"RTN","HLOCLNT",9,0)
 ;    ("LINK")  - <link name>_":"_<port> last obtained
"RTN","HLOCLNT",10,0)
 ;    ("QUEUE") - name of the queue last obtained
"RTN","HLOCLNT",11,0)
 ;Output:
"RTN","HLOCLNT",12,0)
 ;  Function returns 1 if success, 0 if no more work
"RTN","HLOCLNT",13,0)
 ;  QUE -  updated to identify next queue of messages to process.
"RTN","HLOCLNT",14,0)
 ;    ("LINK") - <link name>_":"_<port>
"RTN","HLOCLNT",15,0)
 ;    ("QUEUE") - the named queue on the link
"RTN","HLOCLNT",16,0)
 ;    ("DOWN") - =1 means that the last OPEN attempt failed
"RTN","HLOCLNT",17,0)
 ;
"RTN","HLOCLNT",18,0)
 N LINK,QUEUE
"RTN","HLOCLNT",19,0)
 S LINK=$G(QUE("LINK")),QUEUE=$G(QUE("QUEUE"))
"RTN","HLOCLNT",20,0)
TRY I (LINK]""),(QUEUE]"") D
"RTN","HLOCLNT",21,0)
 .L -^HLB("QUEUE","OUT",LINK,QUEUE)
"RTN","HLOCLNT",22,0)
 .I $$IFSHUT^HLOTLNK($P(LINK,":")) S QUEUE="" Q
"RTN","HLOCLNT",23,0)
 .I '$$CNNCTD(LINK),$$FAILING(.LINK) S QUEUE="" Q
"RTN","HLOCLNT",24,0)
 .F  S QUEUE=$O(^HLB("QUEUE","OUT",LINK,QUEUE)) Q:(QUEUE="")  I '$$STOPPED^HLOQUE("OUT",QUEUE) L +^HLB("QUEUE","OUT",LINK,QUEUE):0  Q:$T
"RTN","HLOCLNT",25,0)
 I (LINK]""),(QUEUE="") D
"RTN","HLOCLNT",26,0)
 .F  S LINK=$O(^HLB("QUEUE","OUT",LINK)) Q:LINK=""  D  Q:$L(QUEUE)
"RTN","HLOCLNT",27,0)
 ..Q:$$IFSHUT^HLOTLNK($P(LINK,":"))
"RTN","HLOCLNT",28,0)
 ..I '$$CNNCTD(LINK),$$FAILING(.LINK) Q
"RTN","HLOCLNT",29,0)
 ..S QUEUE="" F  S QUEUE=$O(^HLB("QUEUE","OUT",LINK,QUEUE)) Q:(QUEUE="")  I '$$STOPPED^HLOQUE("OUT",QUEUE) L +^HLB("QUEUE","OUT",LINK,QUEUE):0 Q:$T
"RTN","HLOCLNT",30,0)
 I LINK="" D
"RTN","HLOCLNT",31,0)
 .F  S LINK=$O(^HLB("QUEUE","OUT",LINK)) Q:LINK=""  D  Q:$L(QUEUE)
"RTN","HLOCLNT",32,0)
 ..Q:$$IFSHUT^HLOTLNK($P(LINK,":"))
"RTN","HLOCLNT",33,0)
 ..I '$$CNNCTD(LINK),$$FAILING(.LINK) Q
"RTN","HLOCLNT",34,0)
 ..S QUEUE="" F  S QUEUE=$O(^HLB("QUEUE","OUT",LINK,QUEUE)) Q:(QUEUE="")  I '$$STOPPED^HLOQUE("OUT",QUEUE) L +^HLB("QUEUE","OUT",LINK,QUEUE):0 Q:$T
"RTN","HLOCLNT",35,0)
 S QUE("LINK")=LINK,QUE("QUEUE")=QUEUE,QUE("DOWN")=$G(LINK("DOWN"))
"RTN","HLOCLNT",36,0)
 ;
"RTN","HLOCLNT",37,0)
 ;** P147 START CJM
"RTN","HLOCLNT",38,0)
 I $L(QUEUE),($R(100)>$$GETPRTY^HLOQUE(QUE("QUEUE"),QUE("LINK"))) G TRY
"RTN","HLOCLNT",39,0)
 ;** P148 END CJM
"RTN","HLOCLNT",40,0)
 ;
"RTN","HLOCLNT",41,0)
 Q:$L(QUEUE) 1
"RTN","HLOCLNT",42,0)
 D:$G(HLCSTATE("CONNECTED")) CLOSE^HLOT(.HLCSTATE)
"RTN","HLOCLNT",43,0)
 Q 0
"RTN","HLOCLNT",44,0)
 ;
"RTN","HLOCLNT",45,0)
FAILING(LINK) ;
"RTN","HLOCLNT",46,0)
 ;Returns 1 if the link has failed in the last 30 seconds, 0 otherwise
"RTN","HLOCLNT",47,0)
 ;Also returns LINK("DOWN")=1 if the link was failing > 30 seconds ago, not yet known if its up
"RTN","HLOCLNT",48,0)
 ;
"RTN","HLOCLNT",49,0)
 N LASTTIME,SET
"RTN","HLOCLNT",50,0)
 S LINK("DOWN")=0
"RTN","HLOCLNT",51,0)
 S LASTTIME=$G(^HLB("QUEUE","OUT",LINK))
"RTN","HLOCLNT",52,0)
 S SET=$S(LASTTIME]"":1,1:0)
"RTN","HLOCLNT",53,0)
 I SET D
"RTN","HLOCLNT",54,0)
 .I $$HDIFF^XLFDT($H,LASTTIME,2)>30 S ^HLB("QUEUE","OUT",LINK)="",SET=0,LINK("DOWN")=1
"RTN","HLOCLNT",55,0)
 I $D(^HLTMP("FAILING LINKS",LINK)) S LINK("DOWN")=1
"RTN","HLOCLNT",56,0)
 Q SET
"RTN","HLOCLNT",57,0)
 ;
"RTN","HLOCLNT",58,0)
LINKDOWN(HLCSTATE) ;
"RTN","HLOCLNT",59,0)
 N TO
"RTN","HLOCLNT",60,0)
 D:$G(HLCSTATE("CONNECTED")) CLOSE^HLOT(.HLCSTATE)
"RTN","HLOCLNT",61,0)
 I $D(HLCSTATE("LINK","NAME")),$D(HLCSTATE("LINK","PORT")) D
"RTN","HLOCLNT",62,0)
 .S TO=HLCSTATE("LINK","NAME")_":"_HLCSTATE("LINK","PORT")
"RTN","HLOCLNT",63,0)
 .S ^HLB("QUEUE","OUT",TO)=$H
"RTN","HLOCLNT",64,0)
 .S:'$D(^HLTMP("FAILING LINKS",TO)) ^HLTMP("FAILING LINKS",TO)=$H
"RTN","HLOCLNT",65,0)
 Q
"RTN","HLOCLNT",66,0)
 ;
"RTN","HLOCLNT",67,0)
ERROR ;error trap
"RTN","HLOCLNT",68,0)
ZB3 ;
"RTN","HLOCLNT",69,0)
 ;
"RTN","HLOCLNT",70,0)
 S $ETRAP="Q:$QUIT """" Q"
"RTN","HLOCLNT",71,0)
 ;
"RTN","HLOCLNT",72,0)
 D END
"RTN","HLOCLNT",73,0)
 D LINKDOWN(.HLCSTATE)
"RTN","HLOCLNT",74,0)
 ;
"RTN","HLOCLNT",75,0)
 ;return to the Process Manager error trap
"RTN","HLOCLNT",76,0)
 D UNWIND^%ZTER
"RTN","HLOCLNT",77,0)
 Q:$QUIT "" Q
"RTN","HLOCLNT",78,0)
 ;
"RTN","HLOCLNT",79,0)
DOWORK(QUEUE) ;sends the messages on the queue
"RTN","HLOCLNT",80,0)
ZB0 ;
"RTN","HLOCLNT",81,0)
 N $ETRAP,$ESTACK S $ETRAP="G ERROR^HLOCLNT"
"RTN","HLOCLNT",82,0)
 N MSGIEN,DEQUE,SUCCESS,MSGCOUNT,MAXIMUM
"RTN","HLOCLNT",83,0)
 S DEQUE=0
"RTN","HLOCLNT",84,0)
 S SUCCESS=1
"RTN","HLOCLNT",85,0)
 ;
"RTN","HLOCLNT",86,0)
 ;
"RTN","HLOCLNT",87,0)
 I '$$CNNCTD(QUEUE("LINK")),'$$CONNECT^HLOCLNT1($P(QUEUE("LINK"),":"),$P(QUEUE("LINK"),":",2),30,.HLCSTATE) Q
"RTN","HLOCLNT",88,0)
 S (MSGCOUNT,MSGIEN)=0
"RTN","HLOCLNT",89,0)
 S MAXIMUM=$$GETPRTY^HLOQUE(QUEUE("QUEUE"),QUEUE("LINK"))*2
"RTN","HLOCLNT",90,0)
 F  S MSGIEN=$O(^HLB("QUEUE","OUT",QUEUE("LINK"),QUEUE("QUEUE"),MSGIEN)) D  Q:'SUCCESS  Q:MSGCOUNT>MAXIMUM  Q:$$STOPPED^HLOQUE("OUT",QUEUE("QUEUE"))  Q:$$IFSHUT^HLOTLNK($P(QUEUE("LINK"),":"))
"RTN","HLOCLNT",91,0)
 .S:'MSGIEN SUCCESS=0
"RTN","HLOCLNT",92,0)
ZB4 .;
"RTN","HLOCLNT",93,0)
 .Q:'SUCCESS
"RTN","HLOCLNT",94,0)
 .N UPDATE
"RTN","HLOCLNT",95,0)
 .S ^HLB(MSGIEN,"TRIES")=$G(^HLB(MSGIEN,"TRIES"))+1
"RTN","HLOCLNT",96,0)
 .S SUCCESS=0
"RTN","HLOCLNT",97,0)
 .S:$$TRANSMIT(.HLCSTATE,MSGIEN,.UPDATE) SUCCESS=1
"RTN","HLOCLNT",98,0)
 .Q:('SUCCESS)!('$D(UPDATE))
"RTN","HLOCLNT",99,0)
 .D DEQUE(.UPDATE)
"RTN","HLOCLNT",100,0)
 .S MSGCOUNT=MSGCOUNT+1
"RTN","HLOCLNT",101,0)
 .D:HLCSTATE("COUNTS")>4 SAVECNTS^HLOSTAT(.HLCSTATE)
"RTN","HLOCLNT",102,0)
 .;
"RTN","HLOCLNT",103,0)
 .;if the queue was on the down list, and not since shutdown, mark it as up, since a message has been successfully transmitted across it
"RTN","HLOCLNT",104,0)
 .I $G(QUEUE("DOWN"))!$$FAILING(QUEUE("LINK")),'$$IFSHUT^HLOTLNK(QUEUE("LINK")) S QUEUE("DOWN")=0,^HLB("QUEUE","OUT",QUEUE("LINK"))="" K ^HLTMP("FAILING LINKS",QUEUE("LINK"))
"RTN","HLOCLNT",105,0)
 ;
"RTN","HLOCLNT",106,0)
ZB5 ;
"RTN","HLOCLNT",107,0)
END ;
"RTN","HLOCLNT",108,0)
 ;** P155 START
"RTN","HLOCLNT",109,0)
 I HLCSTATE("LINK","SINGLE THREADED"),HLCSTATE("CONNECTED") D CLOSE^HLOT(.HLCSTATE)
"RTN","HLOCLNT",110,0)
 ;** P155 END
"RTN","HLOCLNT",111,0)
 ;
"RTN","HLOCLNT",112,0)
 D DEQUE()
"RTN","HLOCLNT",113,0)
 D SAVECNTS^HLOSTAT(.HLCSTATE)
"RTN","HLOCLNT",114,0)
 Q
"RTN","HLOCLNT",115,0)
CNNCTD(LINK) ;
"RTN","HLOCLNT",116,0)
 ;Connected to LINK?  HLCSTATE must be defined, LINK=<link name>:<port>
"RTN","HLOCLNT",117,0)
 ;
"RTN","HLOCLNT",118,0)
 I ($G(HLCSTATE("LINK","NAME"))=$P(LINK,":")),($G(HLCSTATE("LINK","PORT"))=$P(LINK,":",2)),$G(HLCSTATE("CONNECTED")) Q 1
"RTN","HLOCLNT",119,0)
 Q 0
"RTN","HLOCLNT",120,0)
 ;
"RTN","HLOCLNT",121,0)
DEQUE(UPDATE) ;
"RTN","HLOCLNT",122,0)
 ;**P143 START CJM
"RTN","HLOCLNT",123,0)
ZB25 ;
"RTN","HLOCLNT",124,0)
 ;**P143 END CJM
"RTN","HLOCLNT",125,0)
 I $D(UPDATE) S DEQUE=DEQUE+1,DEQUE(+UPDATE)=$P(UPDATE,"^",2,99) S:$G(UPDATE("MSA"))]"" DEQUE(+UPDATE,"MSA")=UPDATE("MSA") S:$G(UPDATE("ACTION"))]"" DEQUE(+UPDATE,"ACTION")=UPDATE("ACTION")
"RTN","HLOCLNT",126,0)
 I '$D(UPDATE)!(DEQUE>15) D
"RTN","HLOCLNT",127,0)
 .N MSGIEN S MSGIEN=0
"RTN","HLOCLNT",128,0)
 .F  S MSGIEN=$O(DEQUE(MSGIEN)) Q:'MSGIEN  D
"RTN","HLOCLNT",129,0)
 ..N NODE,TIME
"RTN","HLOCLNT",130,0)
 ..D DEQUE^HLOQUE(QUEUE("LINK"),QUEUE("QUEUE"),"OUT",MSGIEN)
"RTN","HLOCLNT",131,0)
 ..S TIME=$P(DEQUE(MSGIEN),"^")
"RTN","HLOCLNT",132,0)
 ..Q:'TIME
"RTN","HLOCLNT",133,0)
 ..S NODE=QUEUE("LINK")_"^"_QUEUE("QUEUE")_"^"_$P(DEQUE(MSGIEN),"^",2,99)
"RTN","HLOCLNT",134,0)
 ..S ^HLTMP("CLIENT UPDATES",$J,TIME,MSGIEN)=NODE
"RTN","HLOCLNT",135,0)
 ..S:$G(DEQUE(MSGIEN,"MSA"))]"" ^HLTMP("CLIENT UPDATES",$J,TIME,MSGIEN,"MSA")=DEQUE(MSGIEN,"MSA")
"RTN","HLOCLNT",136,0)
 ..S:$G(DEQUE(MSGIEN,"ACTION"))]"" ^HLTMP("CLIENT UPDATES",$J,TIME,MSGIEN,"ACTION")=DEQUE(MSGIEN,"ACTION")
"RTN","HLOCLNT",137,0)
 .K DEQUE S DEQUE=0
"RTN","HLOCLNT",138,0)
 Q
"RTN","HLOCLNT",139,0)
 ;
"RTN","HLOCLNT",140,0)
TRANSMIT(HLCSTATE,MSGIEN,UPDATE) ;
"RTN","HLOCLNT",141,0)
 ;Transmits a single message and if a commit ack was requested reads it.  Updates file 778 with the result.  Queues for the infiler the application accept action if one was requested.
"RTN","HLOCLNT",142,0)
 ;Input:
"RTN","HLOCLNT",143,0)
 ;   HLCSTATE (pass by reference)
"RTN","HLOCLNT",144,0)
 ;   MSGIEN - ien, file 778, of message to be transmitted
"RTN","HLOCLNT",145,0)
 ;Output:
"RTN","HLOCLNT",146,0)
 ;  Function returns 1 on success, 0 on failure
"RTN","HLOCLNT",147,0)
 ;  UPDATE - (pass by reference) to contain updates needed for message
"RTN","HLOCLNT",148,0)
 ;
"RTN","HLOCLNT",149,0)
 N HLMSTATE,MSA,HDR,SUCCESS
"RTN","HLOCLNT",150,0)
 ;
"RTN","HLOCLNT",151,0)
 S SUCCESS=0
"RTN","HLOCLNT",152,0)
 S HLCSTATE("ATTEMPT")=0
"RTN","HLOCLNT",153,0)
 ;
"RTN","HLOCLNT",154,0)
 ;start saving updates needed after the message is transmitted
"RTN","HLOCLNT",155,0)
 S UPDATE=MSGIEN
"RTN","HLOCLNT",156,0)
 Q:'$$GETMSG^HLOCLNT2(MSGIEN,.HLMSTATE) 1  ;returns 1 so the message will be removed from the queue
"RTN","HLOCLNT",157,0)
 I HLMSTATE("DT/TM"),HLMSTATE("STATUS","ACCEPTED")!(HLMSTATE("HDR","ACCEPT ACK TYPE")="NE") D  Q 1  ;the message was already transmitted
"RTN","HLOCLNT",158,0)
ZB20 .;**P143 START CJM
"RTN","HLOCLNT",159,0)
 .;**P143 END CJM
"RTN","HLOCLNT",160,0)
 ;
"RTN","HLOCLNT",161,0)
 ;**P143 START CJM
"RTN","HLOCLNT",162,0)
 I HLMSTATE("ACK BY")]"",HLMSTATE("STATUS")]"",$G(^HLB(MSGIEN,"TRIES"))>1 Q 1  ;The app ack was already returned, so don't keep transmitting
"RTN","HLOCLNT",163,0)
 ;**P143 END CJM
"RTN","HLOCLNT",164,0)
 ;
"RTN","HLOCLNT",165,0)
 S UPDATE=UPDATE_"^"_$$NOW^XLFDT
"RTN","HLOCLNT",166,0)
RETRY D
"RTN","HLOCLNT",167,0)
 .S HLCSTATE("ATTEMPT")=HLCSTATE("ATTEMPT")+1
"RTN","HLOCLNT",168,0)
 .I 'HLCSTATE("CONNECTED") D OPEN^HLOT(.HLCSTATE) Q:'HLCSTATE("CONNECTED")
"RTN","HLOCLNT",169,0)
 .;
"RTN","HLOCLNT",170,0)
 .;try to send the message
"RTN","HLOCLNT",171,0)
 .;
"RTN","HLOCLNT",172,0)
 .;
"RTN","HLOCLNT",173,0)
 .Q:'$$WRITEMSG^HLOCLNT1(.HLCSTATE,.HLMSTATE)
"RTN","HLOCLNT",174,0)
 .;does the message need an accept ack?
"RTN","HLOCLNT",175,0)
 .I HLMSTATE("HDR","ACCEPT ACK TYPE")="AL" D
"RTN","HLOCLNT",176,0)
 ..N FS
"RTN","HLOCLNT",177,0)
 ..Q:'$$READACK^HLOCLNT1(.HLCSTATE,.HDR,.MSA)
"RTN","HLOCLNT",178,0)
 ..;does the MSA refer to the correct control id?
"RTN","HLOCLNT",179,0)
 ..S FS=$E(HDR(1),4)
"RTN","HLOCLNT",180,0)
 ..I $P(MSA,FS,3)'=HLMSTATE("ID") D  Q
"RTN","HLOCLNT",181,0)
ZB21 ...;**P143 START CJM
"RTN","HLOCLNT",182,0)
 ...;**P43 END CJM
"RTN","HLOCLNT",183,0)
 ..N ACKID,ACKCODE
"RTN","HLOCLNT",184,0)
 ..S ACKCODE=$P(MSA,FS,2)
"RTN","HLOCLNT",185,0)
 ..S ACKID=$S($E(HDR(1),1,3)="MSH":$P(HDR(2),FS,5),1:$P(HDR(2),FS,6))
"RTN","HLOCLNT",186,0)
 ..S $P(UPDATE,"^",5)=1
"RTN","HLOCLNT",187,0)
 ..S UPDATE("MSA")=ACKID_"^"_MSA
"RTN","HLOCLNT",188,0)
 ..I '(ACKCODE="CA") D
"RTN","HLOCLNT",189,0)
 ...S $P(UPDATE,"^",3)="ER",$P(UPDATE,"^",4)=2
"RTN","HLOCLNT",190,0)
ZB22 ...;**P143 START CJM
"RTN","HLOCLNT",191,0)
 ...;**P143 END CJM
"RTN","HLOCLNT",192,0)
 ..I ACKCODE="CA",HLMSTATE("HDR","APP ACK TYPE")="NE" S $P(UPDATE,"^",3)="SU",$P(UPDATE,"^",4)=$S(HLMSTATE("BATCH"):"2",1:1)
"RTN","HLOCLNT",193,0)
 ..I ($P(UPDATE,"^",3)="ER") S $P(UPDATE,"^",6)=$P(HLMSTATE("HDR",1),FS,5) ;errors need the application for xref
"RTN","HLOCLNT",194,0)
 ..;
"RTN","HLOCLNT",195,0)
 ..;if it's from a sequence queue, timestamp the queue
"RTN","HLOCLNT",196,0)
 ..I $L($G(HLMSTATE("STATUS","SEQUENCE QUEUE"))) D
"RTN","HLOCLNT",197,0)
 ...L +^HLB("QUEUE","SEQUENCE",HLMSTATE("STATUS","SEQUENCE QUEUE")):200
"RTN","HLOCLNT",198,0)
 ...I $P($G(^HLB("QUEUE","SEQUENCE",HLMSTATE("STATUS","SEQUENCE QUEUE"))),"^")'=MSGIEN L -^HLB("QUEUE","SEQUENCE",HLMSTATE("STATUS","SEQUENCE QUEUE")) Q
"RTN","HLOCLNT",199,0)
 ...I ACKCODE="CA" D
"RTN","HLOCLNT",200,0)
 ....S $P(^HLB("QUEUE","SEQUENCE",HLMSTATE("STATUS","SEQUENCE QUEUE")),"^",2)=$$FMADD^XLFDT($P(UPDATE,"^",2),,,$$TIMEOUT^HLOAPP($$GETSAP^HLOCLNT2(MSGIEN))) L -^HLB("QUEUE","SEQUENCE",HLMSTATE("STATUS","SEQUENCE QUEUE"))
"RTN","HLOCLNT",201,0)
ZB23 ....;**P143 START CJM
"RTN","HLOCLNT",202,0)
 ....;**P143 END CJM
"RTN","HLOCLNT",203,0)
 ...;if the message wasn't accepted, need to notify without waiting
"RTN","HLOCLNT",204,0)
 ...S $P(^HLB("QUEUE","SEQUENCE",HLMSTATE("STATUS","SEQUENCE QUEUE")),"^",2)=$P(UPDATE,"^",2)
"RTN","HLOCLNT",205,0)
 ...L -^HLB("QUEUE","SEQUENCE",HLMSTATE("STATUS","SEQUENCE QUEUE"))
"RTN","HLOCLNT",206,0)
 ..;
"RTN","HLOCLNT",207,0)
 ..;does the app need notification of accept ack?
"RTN","HLOCLNT",208,0)
 ..S UPDATE("ACTION")=HLMSTATE("ACCEPT ACK RESPONSE")
"RTN","HLOCLNT",209,0)
 ..;
"RTN","HLOCLNT",210,0)
 ..S SUCCESS=1
"RTN","HLOCLNT",211,0)
 .E  D  ;accept ack wasn't requested
"RTN","HLOCLNT",212,0)
 ..S SUCCESS=1
"RTN","HLOCLNT",213,0)
 ..I HLMSTATE("HDR","APP ACK TYPE")="NE" S $P(UPDATE,"^",3)="SU",$P(UPDATE,"^",4)=$S(HLMSTATE("BATCH"):2,1:1)
"RTN","HLOCLNT",214,0)
 ;
"RTN","HLOCLNT",215,0)
 I 'SUCCESS,'HLCSTATE("CONNECTED"),(HLCSTATE("ATTEMPT")<2) G RETRY
"RTN","HLOCLNT",216,0)
 I SUCCESS D
"RTN","HLOCLNT",217,0)
 .D COUNT^HLOSTAT(.HLCSTATE,HLMSTATE("HDR","RECEIVING APPLICATION"),HLMSTATE("HDR","SENDING APPLICATION"),$S(HLMSTATE("BATCH"):"BATCH",1:HLMSTATE("HDR","MESSAGE TYPE")_"~"_HLMSTATE("HDR","EVENT")))
"RTN","HLOCLNT",218,0)
 .;if this is an ack to a message need to purge the original message, so store its ien with the purge date
"RTN","HLOCLNT",219,0)
 .S:$G(HLMSTATE("ACK TO IEN")) $P(UPDATE,"^",4)=$P(UPDATE,"^",4)_"-"_HLMSTATE("ACK TO IEN")
"RTN","HLOCLNT",220,0)
 I ('HLCSTATE("CONNECTED"))!('SUCCESS) D LINKDOWN(.HLCSTATE)
"RTN","HLOCLNT",221,0)
 Q SUCCESS
"RTN","HLOCLNT1")
0^5^B35977020^B33784645
"RTN","HLOCLNT1",1,0)
HLOCLNT1 ;IRMFO-ALB/CJM/RBN - Writing messages, reading acks;03/24/2004  14:43 ;02/18/2011
"RTN","HLOCLNT1",2,0)
 ;;1.6;HEALTH LEVEL SEVEN;**126,130,131,134,137,139,146,155**;Oct 13, 1995;Build 4
"RTN","HLOCLNT1",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","HLOCLNT1",4,0)
 ;
"RTN","HLOCLNT1",5,0)
 ;
"RTN","HLOCLNT1",6,0)
WRITEMSG(HLCSTATE,HLMSTATE) ;
"RTN","HLOCLNT1",7,0)
 ;Description:  This function uses the services offered by the transport layer to send a message over an open communication channel.
"RTN","HLOCLNT1",8,0)
 ;
"RTN","HLOCLNT1",9,0)
 ;Input:
"RTN","HLOCLNT1",10,0)
 ;  HLCSTATE (pass by reference, required) Defines the LLP & its state
"RTN","HLOCLNT1",11,0)
 ;  HLMSTATE (pass by reference, required) The message
"RTN","HLOCLNT1",12,0)
 ;Output:
"RTN","HLOCLNT1",13,0)
 ;  Function returns 1 on success, 0 on failure
"RTN","HLOCLNT1",14,0)
 ;
"RTN","HLOCLNT1",15,0)
ZB6 ;
"RTN","HLOCLNT1",16,0)
 N SEG,QUIT,HDR
"RTN","HLOCLNT1",17,0)
 S QUIT=0
"RTN","HLOCLNT1",18,0)
 I '$G(HLMSTATE("IEN")) S QUIT=1 G ZB7
"RTN","HLOCLNT1",19,0)
 S HDR(1)=HLMSTATE("HDR",1),HDR(2)=HLMSTATE("HDR",2)
"RTN","HLOCLNT1",20,0)
 I '$$WRITEHDR^HLOT(.HLCSTATE,.HDR) S QUIT=1 G ZB7
"RTN","HLOCLNT1",21,0)
 I HLMSTATE("BATCH") D
"RTN","HLOCLNT1",22,0)
 .N LAST S LAST=0
"RTN","HLOCLNT1",23,0)
 .S HLMSTATE("BATCH","CURRENT MESSAGE")=0
"RTN","HLOCLNT1",24,0)
 .F  Q:'$$NEXTMSG^HLOMSG(.HLMSTATE,.SEG)  D  Q:QUIT
"RTN","HLOCLNT1",25,0)
 ..S LAST=HLMSTATE("BATCH","CURRENT MESSAGE")
"RTN","HLOCLNT1",26,0)
 ..I '$$WRITESEG^HLOT(.HLCSTATE,.SEG) S QUIT=1 Q
"RTN","HLOCLNT1",27,0)
 ..F  Q:'$$HLNEXT^HLOMSG(.HLMSTATE,.SEG)  D  Q:QUIT
"RTN","HLOCLNT1",28,0)
 ...I '$$WRITESEG^HLOT(.HLCSTATE,.SEG) S QUIT=1 Q
"RTN","HLOCLNT1",29,0)
 .K SEG S SEG(1)="BTS"_HLMSTATE("HDR","FIELD SEPARATOR")_LAST
"RTN","HLOCLNT1",30,0)
 .S:'$$WRITESEG^HLOT(.HLCSTATE,.SEG) QUIT=1
"RTN","HLOCLNT1",31,0)
 E  D
"RTN","HLOCLNT1",32,0)
 .F  Q:'$$HLNEXT^HLOMSG(.HLMSTATE,.SEG)  D  Q:QUIT
"RTN","HLOCLNT1",33,0)
 ..S:'$$WRITESEG^HLOT(.HLCSTATE,.SEG) QUIT=1
"RTN","HLOCLNT1",34,0)
 S:'$$ENDMSG^HLOT(.HLCSTATE) QUIT=1
"RTN","HLOCLNT1",35,0)
ZB7 ;
"RTN","HLOCLNT1",36,0)
 Q 'QUIT
"RTN","HLOCLNT1",37,0)
 ;
"RTN","HLOCLNT1",38,0)
READACK(HLCSTATE,HDR,MSA) ;
"RTN","HLOCLNT1",39,0)
 ;Description:  This function uses the services offered by the transport layer to read an accept ack.
"RTN","HLOCLNT1",40,0)
 ;
"RTN","HLOCLNT1",41,0)
 ;Input:
"RTN","HLOCLNT1",42,0)
 ;  HLCSTATE (pass by reference, required) Defines the communication channel and its state.
"RTN","HLOCLNT1",43,0)
 ;Output:
"RTN","HLOCLNT1",44,0)
 ;  Function returns 1 on success, 0 on failure
"RTN","HLOCLNT1",45,0)
 ;  HDR (pass by reference) the message header:
"RTN","HLOCLNT1",46,0)
 ;   HDR(1) is components 1-6
"RTN","HLOCLNT1",47,0)
 ;   HDR(2) is components 7-end
"RTN","HLOCLNT1",48,0)
 ;  MSA (pass by reference) the MSA segment as an unsubscripted variable
"RTN","HLOCLNT1",49,0)
 ;
"RTN","HLOCLNT1",50,0)
ZB8 ;
"RTN","HLOCLNT1",51,0)
 N SEG,SUCCESS
"RTN","HLOCLNT1",52,0)
 S SUCCESS=0
"RTN","HLOCLNT1",53,0)
 K HDR,MSA,MAX,I
"RTN","HLOCLNT1",54,0)
 S MAX=HLCSTATE("SYSTEM","MAXSTRING")-40 ;MAX is the maximum that can be safely stored on a node, leaving room for the other fields stored with MSA seg
"RTN","HLOCLNT1",55,0)
 G:'$$READHDR^HLOT(.HLCSTATE,.HDR) ZB9
"RTN","HLOCLNT1",56,0)
 F  Q:'$$READSEG^HLOT(.HLCSTATE,.SEG)  D
"RTN","HLOCLNT1",57,0)
 .I $E($E(SEG(1),1,3)_$E($G(SEG(2)),1,3),1,3)="MSA" D
"RTN","HLOCLNT1",58,0)
 ..S MSA=""
"RTN","HLOCLNT1",59,0)
 ..F I=1:1 Q:'$D(SEG(I))  S MSA=MSA_$S((MAX-$L(MSA))<1:"",1:$E(SEG(I),1,MAX))
"RTN","HLOCLNT1",60,0)
 I $D(MSA),HLCSTATE("MESSAGE ENDED") D  S SUCCESS=1
"RTN","HLOCLNT1",61,0)
 .D SPLITHDR^HLOSRVR1(.HDR)
"RTN","HLOCLNT1",62,0)
 .S HLCSTATE("COUNTS","ACKS")=$G(HLCSTATE("COUNTS","ACKS"))+1
"RTN","HLOCLNT1",63,0)
ZB9 Q SUCCESS
"RTN","HLOCLNT1",64,0)
 ;
"RTN","HLOCLNT1",65,0)
CONNECT(LINK,PORT,TIMEOUT,HLCSTATE) ;
"RTN","HLOCLNT1",66,0)
ZB1 ;sets up HLCSTATE() and opens a client connection
"RTN","HLOCLNT1",67,0)
 ;Input:
"RTN","HLOCLNT1",68,0)
 ;  LINK - name of the link to connect to
"RTN","HLOCLNT1",69,0)
 ;  PORT (optional) port # to connect to, defaults to that specified by the link
"RTN","HLOCLNT1",70,0)
 ;  TIMEOUT (optional) specifies the open timeout in seconds, defaults to 30
"RTN","HLOCLNT1",71,0)
 ;Output:
"RTN","HLOCLNT1",72,0)
 ;   HLCSTATE - array to hold the connection state
"RTN","HLOCLNT1",73,0)
 ;
"RTN","HLOCLNT1",74,0)
 I '$G(HLCSTATE("CONNECTED")) S HLCSTATE("CONNECTED")=0
"RTN","HLOCLNT1",75,0)
 I HLCSTATE("CONNECTED") D  G:HLCSTATE("CONNECTED") ZB2
"RTN","HLOCLNT1",76,0)
 .I $G(HLCSTATE("LINK","NAME"))]"",($G(HLCSTATE("LINK","NAME"))'=LINK) D CLOSE^HLOT(.HLCSTATE) Q
"RTN","HLOCLNT1",77,0)
 .I $G(HLCSTATE("LINK","NAME"))]"",$G(PORT),($G(HLCSTATE("LINK","PORT"))'=PORT) D CLOSE^HLOT(.HLCSTATE) Q
"RTN","HLOCLNT1",78,0)
 .I (HLCSTATE("SYSTEM","OS")="CACHE") D  Q
"RTN","HLOCLNT1",79,0)
 ..U HLCSTATE("DEVICE") S HLCSTATE("CONNECTED")=($ZA\8192#2)
"RTN","HLOCLNT1",80,0)
 ..I 'HLCSTATE("CONNECTED") D CLOSE^HLOT(.HLCSTATE)
"RTN","HLOCLNT1",81,0)
 .;D CLOSE^HLOT(.HLCSTATE)
"RTN","HLOCLNT1",82,0)
 K HLCSTATE
"RTN","HLOCLNT1",83,0)
 N ARY,NODE
"RTN","HLOCLNT1",84,0)
 I '$$GETLINK^HLOTLNK(LINK,.ARY) S HLCSTATE("LINK","NAME")=LINK,HLCSTATE("LINK","PORT")=$G(PORT) D LINKDOWN^HLOCLNT(.HLCSTATE) G ZB2
"RTN","HLOCLNT1",85,0)
 M HLCSTATE("LINK")=ARY
"RTN","HLOCLNT1",86,0)
ZB24 ;
"RTN","HLOCLNT1",87,0)
 I HLCSTATE("LINK","SHUTDOWN") S HLCSTATE("CONNECTED")=0 D LINKDOWN^HLOCLNT(.HLCSTATE) G ZB2
"RTN","HLOCLNT1",88,0)
 ;overlay the port if supplied from the queue
"RTN","HLOCLNT1",89,0)
 S:$G(PORT) HLCSTATE("LINK","PORT")=PORT
"RTN","HLOCLNT1",90,0)
 ;
"RTN","HLOCLNT1",91,0)
 ; *** Begin HL*1.6*146 - RBN ***
"RTN","HLOCLNT1",92,0)
 ;S HLCSTATE("READ TIMEOUT")=20
"RTN","HLOCLNT1",93,0)
 ;get the dynamic value of the client read timeout
"RTN","HLOCLNT1",94,0)
 D GETTIME^HLOTCP(.HLCSTATE)
"RTN","HLOCLNT1",95,0)
 ; *** End HL*1.6*146 - RBN ***
"RTN","HLOCLNT1",96,0)
 ; ;
"RTN","HLOCLNT1",97,0)
 S HLCSTATE("OPEN TIMEOUT")=$S($G(TIMEOUT):TIMEOUT,1:30)
"RTN","HLOCLNT1",98,0)
 S HLCSTATE("COUNTS")=0
"RTN","HLOCLNT1",99,0)
 S HLCSTATE("READ")="" ;where the reads are stored
"RTN","HLOCLNT1",100,0)
 ;
"RTN","HLOCLNT1",101,0)
 ;HLCSTATE("BUFFER",<seg>,<line>) serves as a write buffer so that a lot can be written all at once
"RTN","HLOCLNT1",102,0)
 S HLCSTATE("BUFFER","BYTE COUNT")=0 ;count of BYTES in buffer
"RTN","HLOCLNT1",103,0)
 S HLCSTATE("BUFFER","SEGMENT COUNT")=0 ;count of segments in buffer
"RTN","HLOCLNT1",104,0)
 ;
"RTN","HLOCLNT1",105,0)
 S HLCSTATE("MESSAGE ENDED")=0 ;end of message flag
"RTN","HLOCLNT1",106,0)
 S NODE=^%ZOSF("OS")
"RTN","HLOCLNT1",107,0)
 S HLCSTATE("SERVER")=0
"RTN","HLOCLNT1",108,0)
 S HLCSTATE("SYSTEM","OS")=$S(NODE["DSM":"DSM",NODE["OpenM":"CACHE",NODE["G.TM":"G.TM",1:"")
"RTN","HLOCLNT1",109,0)
 I HLCSTATE("SYSTEM","OS")="" D LINKDOWN^HLOCLNT(.HLCSTATE) G ZB2
"RTN","HLOCLNT1",110,0)
 D
"RTN","HLOCLNT1",111,0)
 .N SYS
"RTN","HLOCLNT1",112,0)
 .D SYSPARMS^HLOSITE(.SYS)
"RTN","HLOCLNT1",113,0)
 .S HLCSTATE("SYSTEM","BUFFER")=SYS("HL7 BUFFER")
"RTN","HLOCLNT1",114,0)
 .S HLCSTATE("SYSTEM","MAXSTRING")=SYS("MAXSTRING")
"RTN","HLOCLNT1",115,0)
 .S HLCSTATE("SYSTEM","NORMAL PURGE")=SYS("NORMAL PURGE")
"RTN","HLOCLNT1",116,0)
 .S HLCSTATE("SYSTEM","ERROR PURGE")=SYS("ERROR PURGE")
"RTN","HLOCLNT1",117,0)
 I HLCSTATE("LINK","LLP")="TCP" D
"RTN","HLOCLNT1",118,0)
 .S HLCSTATE("OPEN")="OPEN^HLOTCP"
"RTN","HLOCLNT1",119,0)
 E  ;no other LLP implemented
"RTN","HLOCLNT1",120,0)
 D OPEN^HLOT(.HLCSTATE)
"RTN","HLOCLNT1",121,0)
 ;
"RTN","HLOCLNT1",122,0)
 ;mark the failure time for the link so other processes know not to try for a while
"RTN","HLOCLNT1",123,0)
 I 'HLCSTATE("CONNECTED"),'HLCSTATE("LINK","SINGLE THREADED") D LINKDOWN^HLOCLNT(.HLCSTATE)
"RTN","HLOCLNT1",124,0)
 I 'HLCSTATE("CONNECTED"),HLCSTATE("LINK","SINGLE THREADED"),'HLCSTATE("LOCK FAILED") D LINKDOWN^HLOCLNT(.HLCSTATE)
"RTN","HLOCLNT1",125,0)
ZB2 ;
"RTN","HLOCLNT1",126,0)
 Q HLCSTATE("CONNECTED")
"RTN","HLOCLNT1",127,0)
 ;
"RTN","HLOCLNT1",128,0)
BADMSGS(WORK) ;
"RTN","HLOCLNT1",129,0)
 ;finds messages that won't transmit after 8 hours of trying and takes them off the outgoing queue
"RTN","HLOCLNT1",130,0)
 N LINK
"RTN","HLOCLNT1",131,0)
 S LINK=""
"RTN","HLOCLNT1",132,0)
 F  S LINK=$O(^HLTMP("FAILING LINKS",LINK)) Q:LINK=""  D
"RTN","HLOCLNT1",133,0)
 .N TIME,QUE,COUNT
"RTN","HLOCLNT1",134,0)
 .S TIME=$G(^HLTMP("FAILING LINKS",LINK)) Q:TIME=""
"RTN","HLOCLNT1",135,0)
 .Q:$$HDIFF^XLFDT($H,TIME,2)<28800  ;8 hours
"RTN","HLOCLNT1",136,0)
 .Q:'$$IFOPEN^HLOUSR1(LINK)
"RTN","HLOCLNT1",137,0)
 .L +^HLB("QUEUE","OUT",LINK):0
"RTN","HLOCLNT1",138,0)
 .S QUE=""
"RTN","HLOCLNT1",139,0)
 .F  S QUE=$O(^HLB("QUEUE","OUT",LINK,QUE)) Q:QUE=""  D
"RTN","HLOCLNT1",140,0)
 ..N MSG S MSG=0
"RTN","HLOCLNT1",141,0)
 ..S MSG=$O(^HLB("QUEUE","OUT",LINK,QUE,MSG))
"RTN","HLOCLNT1",142,0)
 ..Q:'MSG
"RTN","HLOCLNT1",143,0)
 ..S COUNT=$G(^HLB(MSG,"TRIES"))
"RTN","HLOCLNT1",144,0)
 ..I COUNT>20 D
"RTN","HLOCLNT1",145,0)
 ...N NODE0,NODE1,NODE2,TIME,RAPP,SAPP,FS,CS,ACTION,MTYPE,EVENT
"RTN","HLOCLNT1",146,0)
 ...S NODE0=$G(^HLB(MSG,0))
"RTN","HLOCLNT1",147,0)
 ...Q:'$P(NODE0,"^",2)
"RTN","HLOCLNT1",148,0)
 ...S TIME=$$NOW^XLFDT
"RTN","HLOCLNT1",149,0)
 ...S NODE1=$G(^HLB(MSG,1))
"RTN","HLOCLNT1",150,0)
 ...S NODE2=$G(^HLB(MSG,2))
"RTN","HLOCLNT1",151,0)
 ...S FS=$E(NODE1,4)
"RTN","HLOCLNT1",152,0)
 ...Q:FS=""
"RTN","HLOCLNT1",153,0)
 ...S CS=$E(NODE1,5)
"RTN","HLOCLNT1",154,0)
 ...Q:CS=""
"RTN","HLOCLNT1",155,0)
 ...S SAPP=$P(NODE1,FS,3)
"RTN","HLOCLNT1",156,0)
 ...S:SAPP="" SAPP="UNKNOWN"
"RTN","HLOCLNT1",157,0)
 ...S RAPP=$P(NODE1,FS,5)
"RTN","HLOCLNT1",158,0)
 ...S MTYPE=$P($P(NODE2,FS,4),CS)
"RTN","HLOCLNT1",159,0)
 ...S EVENT=$P($P(NODE2,FS,4),CS,2)
"RTN","HLOCLNT1",160,0)
 ...S $P(^HLB(MSG,0),"^",21)=COUNT_" FAILED TRANSMISSIONS"
"RTN","HLOCLNT1",161,0)
 ...S $P(^HLB(MSG,0),"^",20)="TF"
"RTN","HLOCLNT1",162,0)
 ...S ^HLB("ERRORS",RAPP,TIME,MSG)=""
"RTN","HLOCLNT1",163,0)
 ...D COUNT^HLOESTAT("OUT",RAPP,SAPP,MTYPE,EVENT)
"RTN","HLOCLNT1",164,0)
 ...S ACTION=$P(NODE0,"^",14,15)
"RTN","HLOCLNT1",165,0)
 ...I ACTION'="^",ACTION]"" D INQUE^HLOQUE(LINK,QUE,MSG,ACTION,1)
"RTN","HLOCLNT1",166,0)
 ...D DEQUE^HLOQUE(LINK,QUE,"OUT",MSG)
"RTN","HLOCLNT1",167,0)
 .L -^HLB("QUEUE","OUT",LINK)
"RTN","HLOCLNT1",168,0)
 Q
"RTN","HLOPING")
0^4^B25888835^B23547701
"RTN","HLOPING",1,0)
HLOPING ;alb/cjm HLO PING UTILITY - 10/4/94 1pm ;02/18/2011
"RTN","HLOPING",2,0)
 ;;1.6;HEALTH LEVEL SEVEN;**147*,155*;Oct 13, 1995;Build 4
"RTN","HLOPING",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","HLOPING",4,0)
 ;
"RTN","HLOPING",5,0)
 ;
"RTN","HLOPING",6,0)
PING ;
"RTN","HLOPING",7,0)
 I '$G(DUZ) W !,"Your DUZ must be set!" Q
"RTN","HLOPING",8,0)
 N LINK,CONF,HLCSTATE,PORT,LINK,HLODONE
"RTN","HLOPING",9,0)
 S HLODONE=0
"RTN","HLOPING",10,0)
 I $P($$VERSION^%ZOSV(1),"/",1)'["Cache" D  Q
"RTN","HLOPING",11,0)
 .W !!,"   Sorry, this tool can only be used under Cache",!!
"RTN","HLOPING",12,0)
 W !,"What HL Logical Link do you want to test?"
"RTN","HLOPING",13,0)
 S LINK=$$ASKLINK^HLOUSR
"RTN","HLOPING",14,0)
 Q:LINK=""
"RTN","HLOPING",15,0)
 S PORT=$$ASKPORT(LINK)
"RTN","HLOPING",16,0)
 Q:'PORT
"RTN","HLOPING",17,0)
 L +^HLB("QUEUE","OUT",LINK_":"_PORT,"HLOPING"_$J):1
"RTN","HLOPING",18,0)
 D STOPQUE^HLOQUE("OUT","HLOPING"_$J)
"RTN","HLOPING",19,0)
 D BREAKS
"RTN","HLOPING",20,0)
 D CHECKAPP
"RTN","HLOPING",21,0)
 I $$ADDMSG(LINK) D
"RTN","HLOPING",22,0)
 .ZB /INTERRUPT:NORMAL ;disable CTRL-C breaks
"RTN","HLOPING",23,0)
 .S WORK("QUEUE")="HLOPING"_$J,WORK("LINK")=LINK_":"_PORT
"RTN","HLOPING",24,0)
 .D DOWORK^HLOCLNT(.WORK)
"RTN","HLOPING",25,0)
 .D:$G(HLCSTATE("CONNECTED")) CLOSE^HLOT(.HLCSTATE)
"RTN","HLOPING",26,0)
 .;
"RTN","HLOPING",27,0)
 .U $PRINCIPAL
"RTN","HLOPING",28,0)
 D PURGE(LINK_":"_PORT)
"RTN","HLOPING",29,0)
 ZB /CLEAR
"RTN","HLOPING",30,0)
 L -^HLB("QUEUE","OUT",LINK_":"_PORT,"HLOPING"_$J)
"RTN","HLOPING",31,0)
 D STARTQUE^HLOQUE("OUT","HLOPING"_$J)
"RTN","HLOPING",32,0)
 Q
"RTN","HLOPING",33,0)
 ;
"RTN","HLOPING",34,0)
ASKPORT(LINK) ;
"RTN","HLOPING",35,0)
 N IEN,NODE,HLOPORT,HL7PORT,DIR,X,Y
"RTN","HLOPING",36,0)
 S IEN=$O(^HLCS(870,"B",LINK,0))
"RTN","HLOPING",37,0)
 Q:'IEN ""
"RTN","HLOPING",38,0)
 S NODE=$G(^HLCS(870,IEN,400))
"RTN","HLOPING",39,0)
 S HLOPORT=$P(NODE,"^",8)
"RTN","HLOPING",40,0)
 S:'HLOPORT HLOPORT=$S($P($G(^HLD(779.1,1,0)),"^",3)="P":5001,1:5026)
"RTN","HLOPING",41,0)
 S HL7PORT=$P(NODE,"^",2)
"RTN","HLOPING",42,0)
 S:'HL7PORT HL7PORT=$S($P($G(^HLD(779.1,1,0)),"^",3)="P":5000,1:5025)
"RTN","HLOPING",43,0)
 W !,"Do you want to PING the port used by HLO or the one used by HL7 1.6?"
"RTN","HLOPING",44,0)
 S DIR(0)="S^1:HLO     --> Port #"_HLOPORT_";2:HL7 1.6 --> Port #"_HL7PORT
"RTN","HLOPING",45,0)
 S DIR("B")=1
"RTN","HLOPING",46,0)
 D ^DIR
"RTN","HLOPING",47,0)
 Q:'X ""
"RTN","HLOPING",48,0)
 Q:$D(DUOUT) ""
"RTN","HLOPING",49,0)
 Q:X=1 HLOPORT
"RTN","HLOPING",50,0)
 Q:X=2 HL7PORT
"RTN","HLOPING",51,0)
 Q ""
"RTN","HLOPING",52,0)
ADDMSG(LINK) ;
"RTN","HLOPING",53,0)
 N PARMS,MSG,SEG,ERROR
"RTN","HLOPING",54,0)
 S PARMS("MESSAGE TYPE")="ZZZ"
"RTN","HLOPING",55,0)
 S PARMS("EVENT")="ZZZ"
"RTN","HLOPING",56,0)
 I '$$NEWMSG^HLOAPI(.PARMS,.MSG,.ERROR) W !,"ERROR",ERROR Q 0
"RTN","HLOPING",57,0)
 D SET^HLOAPI(.SEG,"NTE",0)
"RTN","HLOPING",58,0)
 D SET^HLOAPI(.SEG,"This is a PING message to test connectivity.",1)
"RTN","HLOPING",59,0)
 I '$$ADDSEG^HLOAPI(.MSG,.SEG,.ERROR) W !,"ERROR",ERROR Q 0
"RTN","HLOPING",60,0)
 S PARMS("SENDING APPLICATION")="HLO PING CLIENT",WHOTO("RECEIVING APPLICATION")="HLO PING SERVER",WHOTO("FACILITY LINK NAME")=LINK
"RTN","HLOPING",61,0)
 S PARMS("ACCEPT ACK TYPE")="AL"
"RTN","HLOPING",62,0)
 S PARMS("APP ACK TYPE")="NE"
"RTN","HLOPING",63,0)
 S PARMS("QUEUE")="HLOPING"_$J
"RTN","HLOPING",64,0)
 I '$$SENDONE^HLOAPI1(.MSG,.PARMS,.WHOTO,.ERROR) W !,"There is a problem in the setup!",!,ERROR Q 0
"RTN","HLOPING",65,0)
 Q 1
"RTN","HLOPING",66,0)
 ;
"RTN","HLOPING",67,0)
PURGE(LINK) ;
"RTN","HLOPING",68,0)
 N IEN
"RTN","HLOPING",69,0)
 S IEN=0
"RTN","HLOPING",70,0)
 F  S IEN=$O(^HLB("QUEUE","OUT",LINK,"HLOPING"_$J,IEN)) Q:'IEN  D DEQUE^HLOQUE(LINK,"HLOPING"_$J,"OUT",IEN),SETPURGE^HLOAPI3(IEN)
"RTN","HLOPING",71,0)
 Q
"RTN","HLOPING",72,0)
 ;
"RTN","HLOPING",73,0)
BREAKS ;
"RTN","HLOPING",74,0)
 ZB /CLEAR
"RTN","HLOPING",75,0)
 ;
"RTN","HLOPING",76,0)
 ZB SEND^HLOAPI1:"N":1:"S HLMSTATE(""STATUS"",""PORT"")="_PORT
"RTN","HLOPING",77,0)
 ZB CHECKWHO^HLOASUB1:"N":1:"S WHO(""PORT"")="_PORT
"RTN","HLOPING",78,0)
 ZB ZB25^HLOASUB1:"N":1:"D ZB25^HLOPING"
"RTN","HLOPING",79,0)
 ;set break in $$STOPPED^HLOQUE to circumvent shutdown of the queue
"RTN","HLOPING",80,0)
 ZB ZB0^HLOQUE:"N":1:"S RET=0"
"RTN","HLOPING",81,0)
 ;set break in $$IFSHUT^HLOTLNK to circumvent shutdown of the link
"RTN","HLOPING",82,0)
 ZB ZB0^HLOTLNK:"N":1:"S RET=0"
"RTN","HLOPING",83,0)
 ;set break at ZB1 in client ($$CONNECT)
"RTN","HLOPING",84,0)
 ;
"RTN","HLOPING",85,0)
 ZB ZB1^HLOCLNT1:"N":1:"D WRITE^HLOPING(""Trying to connect..."")"
"RTN","HLOPING",86,0)
 ;
"RTN","HLOPING",87,0)
 ;set break at ZB2 in client (end of $$CONNECT)
"RTN","HLOPING",88,0)
 ZB ZB2^HLOCLNT1:"N":1:"D ZB2^HLOPING"
"RTN","HLOPING",89,0)
 ;
"RTN","HLOPING",90,0)
 ;set break at ZB6 in client (start of $$TRANSMIT^HLOCLNT1)
"RTN","HLOPING",91,0)
 ZB ZB6^HLOCLNT1:"N":1:"D WRITE^HLOPING(""Sending PING ..."")"
"RTN","HLOPING",92,0)
 ;set break at ZB7 in client (end of $$TRANSMIT^HLOCLNT1)
"RTN","HLOPING",93,0)
 ZB ZB7^HLOCLNT1:"N":1:"D WRITE^HLOPING(""PING sent!"")"
"RTN","HLOPING",94,0)
 ;set break at ZB8 in client (start of $$READACK^HLOCLNT1)
"RTN","HLOPING",95,0)
 ZB ZB8^HLOCLNT1:"N":1:"D WRITE^HLOPING(""Reading acknowledgment...."")"
"RTN","HLOPING",96,0)
 ;set break at ZB9 in client (end of $$READACK^HLOCLNT1)
"RTN","HLOPING",97,0)
 ;
"RTN","HLOPING",98,0)
 ZB ZB9^HLOCLNT1:"N":1:"D ZB9^HLOPING"
"RTN","HLOPING",99,0)
 ;
"RTN","HLOPING",100,0)
 ;set break at ZB4 in client (FOR loop on the outgoing queue)
"RTN","HLOPING",101,0)
 ZB ZB4^HLOCLNT:"N":1:"S SUCCESS=0 I 'HLODONE S (SUCCESS,HLODONE)=1"
"RTN","HLOPING",102,0)
 ;
"RTN","HLOPING",103,0)
 ;set status to SU so that the PING doesn't appear on the error report
"RTN","HLOPING",104,0)
 ZB ZB22^HLOCLNT:"N":1:"S $P(UPDATE,""^"",3)=""SU"",$P(UPDATE,""^"",4)=1"
"RTN","HLOPING",105,0)
 ;
"RTN","HLOPING",106,0)
 ZB ZB24^HLOCLNT1:"N":1:"D ZB24^HLOPING"
"RTN","HLOPING",107,0)
 ZB ZB27^HLOT:"N":1:"D ZB27^HLOPING"
"RTN","HLOPING",108,0)
 ;
"RTN","HLOPING",109,0)
 ;set break at ZB3 in client (ERROR TRAP)
"RTN","HLOPING",110,0)
 ZB ZB3^HLOCLNT:"N":1:"D ZB3^HLOPING"
"RTN","HLOPING",111,0)
 Q
"RTN","HLOPING",112,0)
 ;
"RTN","HLOPING",113,0)
CHECKAPP ;
"RTN","HLOPING",114,0)
 I '$O(^HLD(779.2,"C","HLO PING CLIENT",0)) D
"RTN","HLOPING",115,0)
 .N DATA,ERROR
"RTN","HLOPING",116,0)
 .S DATA(.01)="HLO PING CLIENT"
"RTN","HLOPING",117,0)
 .D ADD^HLOASUB1(779.2,,.DATA)
"RTN","HLOPING",118,0)
 Q
"RTN","HLOPING",119,0)
WRITE(MSG) ;
"RTN","HLOPING",120,0)
 N OLD
"RTN","HLOPING",121,0)
 S OLD=$IO
"RTN","HLOPING",122,0)
 U $PRINCIPAL
"RTN","HLOPING",123,0)
 W !,MSG
"RTN","HLOPING",124,0)
 U OLD
"RTN","HLOPING",125,0)
 Q
"RTN","HLOPING",126,0)
ZB2 ;
"RTN","HLOPING",127,0)
 D WRITE($S('HLCSTATE("CONNECTED"):"Unable to Connect!",1:"Connected!"))
"RTN","HLOPING",128,0)
 Q
"RTN","HLOPING",129,0)
ZB3 ;
"RTN","HLOPING",130,0)
 N CON,MSG
"RTN","HLOPING",131,0)
 S CON=($ZA\8192#2)
"RTN","HLOPING",132,0)
 S MSG="Error encountered, $ECODE="_$ECODE
"RTN","HLOPING",133,0)
 D WRITE(MSG)
"RTN","HLOPING",134,0)
 S MSG=$S(CON:"           TCP connection still active",1:"          TCP connection was dropped")
"RTN","HLOPING",135,0)
 D WRITE(MSG)
"RTN","HLOPING",136,0)
 D ^%ZTER
"RTN","HLOPING",137,0)
 Q
"RTN","HLOPING",138,0)
ZB9 ;
"RTN","HLOPING",139,0)
 I $G(SUCCESS) D
"RTN","HLOPING",140,0)
 .D WRITE("Acknowledgment received!")
"RTN","HLOPING",141,0)
 E  D
"RTN","HLOPING",142,0)
 .D WRITE("Acknowledgment NOT returned!")
"RTN","HLOPING",143,0)
 Q
"RTN","HLOPING",144,0)
ZB24 ;
"RTN","HLOPING",145,0)
 S HLCSTATE("LINK","SHUTDOWN")=0
"RTN","HLOPING",146,0)
 Q
"RTN","HLOPING",147,0)
ZB25 ;
"RTN","HLOPING",148,0)
 I '$L(PARMS("RECEIVING FACILITY",2)),'PARMS("RECEIVING FACILITY",1) S PARMS("RECEIVING FACILITY",2)="REMOTE FACILITY TO PING"
"RTN","HLOPING",149,0)
 Q
"RTN","HLOPING",150,0)
 ;
"RTN","HLOPING",151,0)
ZB27 ;
"RTN","HLOPING",152,0)
 Q:'$G(HLCSTATE("LOCK FAILED"))
"RTN","HLOPING",153,0)
 D WRITE("Remote server is single threaded and is locked by another process!")
"RTN","HLOPING",154,0)
 Q
"RTN","HLOT")
0^3^B6475686^B3437824
"RTN","HLOT",1,0)
HLOT ;IRMFO-ALB/CJM - Services provided by the transport layer;03/24/2004  14:43 ;02/18/2011
"RTN","HLOT",2,0)
 ;;1.6;HEALTH LEVEL SEVEN;**126,131,139,146,155**;Oct 13, 1995;Build 4
"RTN","HLOT",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","HLOT",4,0)
 ;
"RTN","HLOT",5,0)
 ;**NOTE:  tags of the format ZB* are used by the client-trace debugging tool and should not be removed
"RTN","HLOT",6,0)
 ;
"RTN","HLOT",7,0)
READHDR(HLCSTATE,HDR) ;
"RTN","HLOT",8,0)
ZB10 N SUCCESS,SEG
"RTN","HLOT",9,0)
 N MCODE
"RTN","HLOT",10,0)
 S HLCSTATE("MESSAGE ENDED")=0
"RTN","HLOT",11,0)
 ;**START P139 CJM
"RTN","HLOT",12,0)
 S HLCSTATE("MESSAGE STARTED")=0
"RTN","HLOT",13,0)
 ;**END P139
"RTN","HLOT",14,0)
 S MCODE="S SUCCESS=$$"_HLCSTATE("READ HEADER")_"(.HLCSTATE,.HDR)"
"RTN","HLOT",15,0)
 X MCODE
"RTN","HLOT",16,0)
 ;**START P139 CJM
"RTN","HLOT",17,0)
 I SUCCESS S HLCSTATE("MESSAGE STARTED")=1
"RTN","HLOT",18,0)
 ;**END P139
"RTN","HLOT",19,0)
ZB11 Q SUCCESS
"RTN","HLOT",20,0)
 ;
"RTN","HLOT",21,0)
READSEG(HLCSTATE,SEG) ;
"RTN","HLOT",22,0)
ZB12 N RETURN
"RTN","HLOT",23,0)
 N MCODE
"RTN","HLOT",24,0)
 S MCODE="S RETURN=$$"_HLCSTATE("READ SEGMENT")_"(.HLCSTATE,.SEG)"
"RTN","HLOT",25,0)
 X MCODE
"RTN","HLOT",26,0)
ZB13 Q RETURN
"RTN","HLOT",27,0)
 ;
"RTN","HLOT",28,0)
OPEN(HLCSTATE) ;
"RTN","HLOT",29,0)
 N MCODE
"RTN","HLOT",30,0)
 S HLCSTATE("CONNECTED")=0
"RTN","HLOT",31,0)
 Q:'$L(HLCSTATE("OPEN"))
"RTN","HLOT",32,0)
 I $G(HLCSTATE("LINK","SINGLE THREADED")) D  Q:HLCSTATE("LOCK FAILED")
"RTN","HLOT",33,0)
 .S HLCSTATE("LOCK FAILED")=0
"RTN","HLOT",34,0)
 .L +^HLO("OPEN LINK",HLCSTATE("LINK","NAME")_":"_HLCSTATE("LINK","PORT")):5
"RTN","HLOT",35,0)
 .I '$T S HLCSTATE("LOCK FAILED")=1 D
"RTN","HLOT",36,0)
 ..Q:'HLCSTATE("LOCK FAILED")
"RTN","HLOT",37,0)
ZB27 ..;
"RTN","HLOT",38,0)
 ..;
"RTN","HLOT",39,0)
 ;
"RTN","HLOT",40,0)
 S MCODE="D "_HLCSTATE("OPEN")_"(.HLCSTATE)"
"RTN","HLOT",41,0)
 X MCODE
"RTN","HLOT",42,0)
 I $G(HLCSTATE("LINK","SINGLE THREADED")),'HLCSTATE("CONNECTED") L -^HLO("OPEN LINK",HLCSTATE("LINK","NAME")_":"_HLCSTATE("LINK","PORT"))
"RTN","HLOT",43,0)
 Q
"RTN","HLOT",44,0)
 ;
"RTN","HLOT",45,0)
CLOSE(HLCSTATE) ;
"RTN","HLOT",46,0)
 N MCODE
"RTN","HLOT",47,0)
 S MCODE="D "_HLCSTATE("CLOSE")_"(.HLCSTATE)"
"RTN","HLOT",48,0)
 X MCODE
"RTN","HLOT",49,0)
 I $G(HLCSTATE("LINK","SINGLE THREADED")) L -^HLO("OPEN LINK",HLCSTATE("LINK","NAME")_":"_HLCSTATE("LINK","PORT"))
"RTN","HLOT",50,0)
 ;
"RTN","HLOT",51,0)
 S HLCSTATE("CONNECTED")=0
"RTN","HLOT",52,0)
 Q
"RTN","HLOT",53,0)
 ;
"RTN","HLOT",54,0)
WRITESEG(HLCSTATE,SEG) ;
"RTN","HLOT",55,0)
ZB14 N RETURN
"RTN","HLOT",56,0)
 N MCODE
"RTN","HLOT",57,0)
 S MCODE="S RETURN=$$"_HLCSTATE("WRITE SEGMENT")_"(.HLCSTATE,.SEG)"
"RTN","HLOT",58,0)
 X MCODE
"RTN","HLOT",59,0)
ZB15 Q RETURN
"RTN","HLOT",60,0)
 ;
"RTN","HLOT",61,0)
WRITEHDR(HLCSTATE,HDR) ;
"RTN","HLOT",62,0)
ZB16 N SUCCESS
"RTN","HLOT",63,0)
 N MCODE
"RTN","HLOT",64,0)
 S MCODE="S SUCCESS=$$"_HLCSTATE("WRITE HEADER")_"(.HLCSTATE,.HDR)"
"RTN","HLOT",65,0)
 X MCODE
"RTN","HLOT",66,0)
ZB17 Q SUCCESS
"RTN","HLOT",67,0)
 ;
"RTN","HLOT",68,0)
ENDMSG(HLCSTATE) ;
"RTN","HLOT",69,0)
ZB18 N RETURN
"RTN","HLOT",70,0)
 N MCODE
"RTN","HLOT",71,0)
 S MCODE="S RETURN=$$"_HLCSTATE("END MESSAGE")_"(.HLCSTATE)"
"RTN","HLOT",72,0)
 X MCODE
"RTN","HLOT",73,0)
ZB19 Q RETURN
"RTN","HLOTLNK")
0^1^B30609561^B26226165
"RTN","HLOTLNK",1,0)
HLOTLNK ;IRMFO-ALB/CJM - APIs for the HL Logical Link file;03/24/2004  14:43 ;02/11/2011
"RTN","HLOTLNK",2,0)
 ;;1.6;HEALTH LEVEL SEVEN;**126,130,131,139,146,155**;Oct 13, 1995;Build 4
"RTN","HLOTLNK",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","HLOTLNK",4,0)
 ;
"RTN","HLOTLNK",5,0)
SETSHUT(LINKIEN) ;
"RTN","HLOTLNK",6,0)
 ;sets the shutdown flag (can not fail - if the link doesn't exist, by definition its shutdown)
"RTN","HLOTLNK",7,0)
 Q:'$G(LINKIEN) 1
"RTN","HLOTLNK",8,0)
 Q:'$D(^HLCS(870,LINKIEN,0)) 1
"RTN","HLOTLNK",9,0)
 S $P(^HLCS(870,LINKIEN,0),"^",16)=1
"RTN","HLOTLNK",10,0)
 Q 1
"RTN","HLOTLNK",11,0)
SETOPEN(LINKIEN) ;
"RTN","HLOTLNK",12,0)
 ;clears the shutdown flag, returns 1 on success, 0 on failure
"RTN","HLOTLNK",13,0)
 Q:'$G(LINKIEN) 0
"RTN","HLOTLNK",14,0)
 Q:'$D(^HLCS(870,LINKIEN,0)) 0
"RTN","HLOTLNK",15,0)
 S $P(^HLCS(870,LINKIEN,0),"^",16)=""
"RTN","HLOTLNK",16,0)
 Q 1
"RTN","HLOTLNK",17,0)
 ;
"RTN","HLOTLNK",18,0)
IFSHUT(LINKNAME) ;
"RTN","HLOTLNK",19,0)
 ;returns 1 if the link was shut down to HLO
"RTN","HLOTLNK",20,0)
 N IEN,LINK,RET
"RTN","HLOTLNK",21,0)
 S RET=0
"RTN","HLOTLNK",22,0)
 S LINK=$P($G(LINKNAME),":")
"RTN","HLOTLNK",23,0)
 ;** Start HL*1.6*139 RBN **
"RTN","HLOTLNK",24,0)
 ;Q:LINK=""
"RTN","HLOTLNK",25,0)
 Q:LINK="" 1
"RTN","HLOTLNK",26,0)
 ;** END HL*1.6*139 RBN **
"RTN","HLOTLNK",27,0)
 S IEN=$O(^HLCS(870,"B",LINK,0))
"RTN","HLOTLNK",28,0)
 Q:'IEN 1
"RTN","HLOTLNK",29,0)
 S:$P($G(^HLCS(870,IEN,0)),"^",16) RET=1
"RTN","HLOTLNK",30,0)
ZB0 Q RET
"RTN","HLOTLNK",31,0)
 ;
"RTN","HLOTLNK",32,0)
DOMAIN(LINKIEN) ;
"RTN","HLOTLNK",33,0)
 ;Returns the domain associated with this link
"RTN","HLOTLNK",34,0)
 ;
"RTN","HLOTLNK",35,0)
 Q:'$G(LINKIEN) ""
"RTN","HLOTLNK",36,0)
 N NODE,DOMAIN
"RTN","HLOTLNK",37,0)
 S DOMAIN=""
"RTN","HLOTLNK",38,0)
 S NODE=$G(^HLCS(870,LINKIEN,0))
"RTN","HLOTLNK",39,0)
 I $P(NODE,"^",7) D
"RTN","HLOTLNK",40,0)
 .S DOMAIN=$P($G(^DIC(4.2,$P(NODE,"^",7),0)),"^")
"RTN","HLOTLNK",41,0)
 .S DOMAIN=$S($L(DOMAIN):"HL7."_DOMAIN,1:"")
"RTN","HLOTLNK",42,0)
 I '$L(DOMAIN) S DOMAIN=$P(NODE,"^",8)
"RTN","HLOTLNK",43,0)
 Q DOMAIN
"RTN","HLOTLNK",44,0)
 ;
"RTN","HLOTLNK",45,0)
PORT(LINKIEN) ;
"RTN","HLOTLNK",46,0)
 ;Returns the HLO port associated with this link
"RTN","HLOTLNK",47,0)
 ;
"RTN","HLOTLNK",48,0)
 Q:'$G(LINKIEN) ""
"RTN","HLOTLNK",49,0)
 N NODE,PORT
"RTN","HLOTLNK",50,0)
 S NODE=$G(^HLCS(870,LINKIEN,400))
"RTN","HLOTLNK",51,0)
 S PORT=$P(NODE,"^",8)
"RTN","HLOTLNK",52,0)
 S:'PORT PORT=$S($P($G(^HLD(779.1,1,0)),"^",3)="P":5001,1:5026)
"RTN","HLOTLNK",53,0)
 Q PORT
"RTN","HLOTLNK",54,0)
 ;
"RTN","HLOTLNK",55,0)
PORT2(LINKNAME) ;given the name of the link, returns its HLO port
"RTN","HLOTLNK",56,0)
 N PORT
"RTN","HLOTLNK",57,0)
 Q:'$L(LINKNAME) ""
"RTN","HLOTLNK",58,0)
 S PORT=$$PORT($O(^HLCS(870,"B",LINKNAME,0)))
"RTN","HLOTLNK",59,0)
 Q:'$L(PORT) ""
"RTN","HLOTLNK",60,0)
 Q PORT
"RTN","HLOTLNK",61,0)
 ;
"RTN","HLOTLNK",62,0)
STATNUM(LINKIEN) ;
"RTN","HLOTLNK",63,0)
 ;Given the ien of the link, this function returns the station #.
"RTN","HLOTLNK",64,0)
 ;
"RTN","HLOTLNK",65,0)
 Q:'$G(LINKIEN) ""
"RTN","HLOTLNK",66,0)
 N INST
"RTN","HLOTLNK",67,0)
 S INST=$P($G(^HLCS(870,LINKIEN,0)),"^",2)
"RTN","HLOTLNK",68,0)
 Q:'INST ""
"RTN","HLOTLNK",69,0)
 Q $P($G(^DIC(4,INST,99)),"^")
"RTN","HLOTLNK",70,0)
 ;
"RTN","HLOTLNK",71,0)
FINDLINK(STATN) ;
"RTN","HLOTLNK",72,0)
 ;Returns the link ien based on the station # =STATN
"RTN","HLOTLNK",73,0)
 ;The link found must have a name starting with "VA", as these are
"RTN","HLOTLNK",74,0)
 ;reserved for officially released links associated with VHA institutions
"RTN","HLOTLNK",75,0)
 ;** EXCEPTION** MPIVA is an official link associated with 200M
"RTN","HLOTLNK",76,0)
 ;
"RTN","HLOTLNK",77,0)
 Q:'$L($G(STATN)) 0
"RTN","HLOTLNK",78,0)
 ;
"RTN","HLOTLNK",79,0)
 N NAME,IEN
"RTN","HLOTLNK",80,0)
 S (NAME,IEN)=""
"RTN","HLOTLNK",81,0)
 F  S NAME=$O(^HLCS(870,"AC",STATN,NAME)) Q:NAME=""  I (NAME'="VA-VIE"),($E(NAME,1,2)="VA")!(NAME="MPIVA") S IEN=$O(^HLCS(870,"AC",STATN,NAME,0)) Q
"RTN","HLOTLNK",82,0)
 Q IEN
"RTN","HLOTLNK",83,0)
 ;
"RTN","HLOTLNK",84,0)
GETLINK(LINKNAME,LINK) ;
"RTN","HLOTLNK",85,0)
 N IEN
"RTN","HLOTLNK",86,0)
 Q:'$L(LINKNAME) 0
"RTN","HLOTLNK",87,0)
 S IEN=$O(^HLCS(870,"B",LINKNAME,0))
"RTN","HLOTLNK",88,0)
 I IEN Q $$GET(IEN,.LINK)
"RTN","HLOTLNK",89,0)
 I LINKNAME="HLO DEFAULT LISTENER" D  Q 1
"RTN","HLOTLNK",90,0)
 .N NODE
"RTN","HLOTLNK",91,0)
 .S LINK("NAME")=LINKNAME
"RTN","HLOTLNK",92,0)
 .S LINK("IEN")=0
"RTN","HLOTLNK",93,0)
 .S LINK("SHUTDOWN")=""
"RTN","HLOTLNK",94,0)
 .S LINK("LLP")="TCP"
"RTN","HLOTLNK",95,0)
 .S LINK("SERVER")="1^"_"M"
"RTN","HLOTLNK",96,0)
 .S NODE=$G(^HLD(779.1,1,0))
"RTN","HLOTLNK",97,0)
 .S LINK("DOMAIN")=$P(NODE,"^",1)
"RTN","HLOTLNK",98,0)
 .S LINK("PORT")=$S($P(NODE,"^",3)="P":5001,$P(NODE,"^",3)="T":5026,1:"")
"RTN","HLOTLNK",99,0)
 .S LINK("IP")=""
"RTN","HLOTLNK",100,0)
 Q 0
"RTN","HLOTLNK",101,0)
GET(IEN,LINK) ;
"RTN","HLOTLNK",102,0)
 N NODE,PTR
"RTN","HLOTLNK",103,0)
 K LINK
"RTN","HLOTLNK",104,0)
 S NODE=$G(^HLCS(870,IEN,0))
"RTN","HLOTLNK",105,0)
 Q:NODE="" 0
"RTN","HLOTLNK",106,0)
 S LINK("NAME")=$P(NODE,"^")
"RTN","HLOTLNK",107,0)
 S LINK("IEN")=IEN
"RTN","HLOTLNK",108,0)
 S LINK("SHUTDOWN")=+$P(NODE,"^",16)
"RTN","HLOTLNK",109,0)
 I $P(NODE,"^",23)=1 S LINK("SINGLE THREADED")=1
"RTN","HLOTLNK",110,0)
 E  S LINK("SINGLE THREADED")=0
"RTN","HLOTLNK",111,0)
 I $P(NODE,"^",7) D
"RTN","HLOTLNK",112,0)
 .S LINK("DOMAIN")=$P(^DIC(4.2,$P(NODE,"^",7),0),"^")
"RTN","HLOTLNK",113,0)
 .S LINK("DOMAIN")=$S($L(LINK("DOMAIN")):"HL7."_LINK("DOMAIN"),1:"")
"RTN","HLOTLNK",114,0)
 I $G(LINK("DOMAIN"))="" S LINK("DOMAIN")=$P(NODE,"^",8)
"RTN","HLOTLNK",115,0)
 S PTR=$P(NODE,"^",3)
"RTN","HLOTLNK",116,0)
 S LINK("LLP")=$S('PTR:"",1:$P($G(^HLCS(869.1,PTR,0)),"^"))
"RTN","HLOTLNK",117,0)
 S LINK("SERVER")=""
"RTN","HLOTLNK",118,0)
 I LINK("LLP")="TCP" D
"RTN","HLOTLNK",119,0)
 .S LINK("SERVER")=1
"RTN","HLOTLNK",120,0)
 .S NODE=$G(^HLCS(870,IEN,400))
"RTN","HLOTLNK",121,0)
 .S LINK("IP")=$P(NODE,"^")
"RTN","HLOTLNK",122,0)
 .S LINK("PORT")=$P(NODE,"^",8)
"RTN","HLOTLNK",123,0)
 .S:'LINK("PORT") LINK("PORT")=$S($P($G(^HLD(779.1,1,0)),"^",3)="P":5001,1:5026)
"RTN","HLOTLNK",124,0)
 .S:$P(NODE,"^",3)="C" LINK("SERVER")=0
"RTN","HLOTLNK",125,0)
 .I LINK("SERVER") S LINK("SERVER")=LINK("SERVER")_"^"_$P(NODE,"^",3)
"RTN","HLOTLNK",126,0)
 Q 1
"RTN","HLOTLNK",127,0)
 ;
"RTN","HLOTLNK",128,0)
SET1(LINK,MDOMAIN) ;
"RTN","HLOTLNK",129,0)
 N DOMAIN
"RTN","HLOTLNK",130,0)
 Q:'$L(MDOMAIN)
"RTN","HLOTLNK",131,0)
 S DOMAIN=$P($G(^DIC(4.2,MDOMAIN,0)),"^")
"RTN","HLOTLNK",132,0)
 S DOMAIN=$S($L(DOMAIN):"HL7."_DOMAIN,1:"")
"RTN","HLOTLNK",133,0)
 I DOMAIN'="" S ^HLCS(870,"AD","TCP",DOMAIN,LINK)=""
"RTN","HLOTLNK",134,0)
 Q
"RTN","HLOTLNK",135,0)
KILL1(LINK,MDOMAIN) ;
"RTN","HLOTLNK",136,0)
 N DOMAIN
"RTN","HLOTLNK",137,0)
 Q:'$L(MDOMAIN)
"RTN","HLOTLNK",138,0)
 S DOMAIN=$P($G(^DIC(4.2,MDOMAIN,0)),"^")
"RTN","HLOTLNK",139,0)
 S DOMAIN=$S($L(DOMAIN):"HL7."_DOMAIN,1:"")
"RTN","HLOTLNK",140,0)
 I DOMAIN'="" K ^HLCS(870,"AD","TCP",DOMAIN,LINK)
"RTN","HLOTLNK",141,0)
 Q
"RTN","HLOTLNK",142,0)
SET2(LINK,DOMAIN) ;
"RTN","HLOTLNK",143,0)
 I DOMAIN'="" S ^HLCS(870,"AD","TCP",DOMAIN,LINK)=""
"RTN","HLOTLNK",144,0)
 Q
"RTN","HLOTLNK",145,0)
KILL2(LINK,DOMAIN) ;
"RTN","HLOTLNK",146,0)
 I DOMAIN'="" K ^HLCS(870,"AD","TCP",DOMAIN,LINK)
"RTN","HLOTLNK",147,0)
 Q
"RTN","HLOTLNK",148,0)
SET3(LINK,DEVICE) ;
"RTN","HLOTLNK",149,0)
 Q:'DEVICE
"RTN","HLOTLNK",150,0)
 S ^HLCS(870,"AD","HLLP",DEVICE,LINK)=""
"RTN","HLOTLNK",151,0)
 Q
"RTN","HLOTLNK",152,0)
KILL3(LINK,DEVICE) ;
"RTN","HLOTLNK",153,0)
 Q:'DEVICE
"RTN","HLOTLNK",154,0)
 S ^HLCS(870,"AD","HLLP",DEVICE,LINK)=""
"RTN","HLOTLNK",155,0)
 Q
"RTN","HLOTLNK",156,0)
LLP(LINKNAME) ;
"RTN","HLOTLNK",157,0)
 ;finds the type of LLP for a named link
"RTN","HLOTLNK",158,0)
 N IEN,LLP
"RTN","HLOTLNK",159,0)
 S IEN=$O(^HLCS(870,"B",LINKNAME,0))
"RTN","HLOTLNK",160,0)
 Q:'IEN ""
"RTN","HLOTLNK",161,0)
 S LLP=$P($G(^HLCS(870,IEN,0)),"^",3)
"RTN","HLOTLNK",162,0)
 Q:'LLP ""
"RTN","HLOTLNK",163,0)
 Q $P($G(^HLCS(869.1,LLP,0)),"^")
"RTN","HLOTLNK",164,0)
 ;
"RTN","HLOTLNK",165,0)
DEVICE(LINKNAME) ;
"RTN","HLOTLNK",166,0)
 N IEN
"RTN","HLOTLNK",167,0)
 S IEN=$O(^HLCS(870,"B",LINKNAME,0))
"RTN","HLOTLNK",168,0)
 Q:'IEN ""
"RTN","HLOTLNK",169,0)
 Q $P($G(^HLCS(870,IEN,200)),"^")
"RTN","HLOTLNK",170,0)
 ;
"RTN","HLOTLNK",171,0)
RTRNLNK(COMP1,COMP2,COMP3) ;
"RTN","HLOTLNK",172,0)
 ;based on the sending facility from the original header, this function finds the return link, or "" if not successful
"RTN","HLOTLNK",173,0)
 ;Inputs:
"RTN","HLOTLNK",174,0)
 ;  COMP1,COMP2,COMP3 - 3 components of the sending facility from the original message
"RTN","HLOTLNK",175,0)
 ;
"RTN","HLOTLNK",176,0)
 N LINK,IEN
"RTN","HLOTLNK",177,0)
 S LINK=""
"RTN","HLOTLNK",178,0)
 I $G(COMP3)="DNS",$P($G(COMP2),":")]"" S LINK=$O(^HLCS(870,"AD","TCP",$P(COMP2,":"),""))
"RTN","HLOTLNK",179,0)
 I LINK="",$L($G(COMP1)) S IEN=$$FINDLINK(COMP1) S:IEN LINK=$P($G(^HLCS(870,IEN,0)),"^")
"RTN","HLOTLNK",180,0)
 Q LINK
"RTN","HLOTLNK",181,0)
 ;
"RTN","HLOTLNK",182,0)
 ;HLLP is not implemented in HLO
"RTN","HLOTLNK",183,0)
 ;I LLP="HLLP" N DEVICE S DEVICE=$$DEVICE(FROMLINK) I DEVICE Q $O(^HLCS(870,"AD","TCP",DEVICE,""))
"RTN","HLOTLNK",184,0)
 ;Q ""
"RTN","HLOTLNK",185,0)
 ;
"RTN","HLOTLNK",186,0)
CHKLINK(LINK) ;
"RTN","HLOTLNK",187,0)
 Q:'$L(LINK) 0
"RTN","HLOTLNK",188,0)
 Q:'$O(^HLCS(870,"B",LINK,0)) 0
"RTN","HLOTLNK",189,0)
 Q 1
"RTN","HLOTLNK",190,0)
ONETHRED(LINKNAME) ;
"RTN","HLOTLNK",191,0)
 ;Returns the value of the SINGLE THREADED flag of the HL LOGICAL LINK
"RTN","HLOTLNK",192,0)
 ;file.
"RTN","HLOTLNK",193,0)
 ;Input:
"RTN","HLOTLNK",194,0)
 ;   LINKNAME - the name given to an entry in the HL LOGICAL LINK file.
"RTN","HLOTLNK",195,0)
 ;Output:
"RTN","HLOTLNK",196,0)
 ;   The function returns 1 if the SINGLE THREADED flag is set to YES,
"RTN","HLOTLNK",197,0)
 ;   otherwiste it returns 0.
"RTN","HLOTLNK",198,0)
 N IEN
"RTN","HLOTLNK",199,0)
 S IEN=$O(^HLCS(870,"B",LINKNAME,0))
"RTN","HLOTLNK",200,0)
 Q:'IEN 0
"RTN","HLOTLNK",201,0)
 I $P($G(^HLCS(870,IEN,0)),"^",23)=1 Q 1
"RTN","HLOTLNK",202,0)
 Q 0
"RTN","HLOTLNK",203,0)
 ;
"RTN","HLOTLNK",204,0)
STHREADS(LINKNAME,ON) ;
"RTN","HLOTLNK",205,0)
 ;This function is used to turn on or off the SINGLE THREADED flag of
"RTN","HLOTLNK",206,0)
 ;the HL LOGICAL LINK file.
"RTN","HLOTLNK",207,0)
 ;
"RTN","HLOTLNK",208,0)
 ;Input:
"RTN","HLOTLNK",209,0)
 ;   LINKNAME - (required) the name of an entry in the HL LOGICAL LINK file.
"RTN","HLOTLNK",210,0)
 ;   ON - 1 will set the flag.
"RTN","HLOTLNK",211,0)
 ;        0,"", or not present will cause the flag to be deleted. 
"RTN","HLOTLNK",212,0)
 ;        Other values are not accepted and will cause an error to be returned.  
"RTN","HLOTLNK",213,0)
 ;Output:
"RTN","HLOTLNK",214,0)
 ;   function returns -1 if the inputs are invalid.  Otherwise returns
"RTN","HLOTLNK",215,0)
 ;            the new value of the SINGLE THREADED flag.
"RTN","HLOTLNK",216,0)
 N IEN
"RTN","HLOTLNK",217,0)
 I $G(ON)'="",$G(ON)'=0,$G(ON)'=1 Q -1
"RTN","HLOTLNK",218,0)
 S IEN=$O(^HLCS(870,"B",LINKNAME,0))
"RTN","HLOTLNK",219,0)
 Q:'IEN -1
"RTN","HLOTLNK",220,0)
 S $P(^HLCS(870,IEN,0),"^",23)=+$G(ON)
"RTN","HLOTLNK",221,0)
 Q +$G(ON)
"VER")
8.0^22.0
"^DD",870,870,23,0)
SINGLE THREADED^S^1:YES;0:NO;^0;23^Q
"^DD",870,870,23,3)
Enter YES if the remote server is single threaded. HLO will then limit the client to a single connection.
"^DD",870,870,23,21,0)
^^11^11^3110209^
"^DD",870,870,23,21,1,0)
HLO provides the ability to setup multiple queues of outgoing messages
"^DD",870,870,23,21,2,0)
to be transmitted over the same HL LOGICAL LINK.   However, if the remote server
"^DD",870,870,23,21,3,0)
is single threaded, trying to open multiple connections over TCP/IP may cause
"^DD",870,870,23,21,4,0)
problems.  Therefore, if the HL LOGICAL LINK is setup to communicate with a
"^DD",870,870,23,21,5,0)
single threaded server, this field should be set to YES.
"^DD",870,870,23,21,6,0)

"^DD",870,870,23,21,7,0)

"^DD",870,870,23,21,8,0)
Currently, only HLO messaging honors this field.  The older HL7 1.6 VistA
"^DD",870,870,23,21,9,0)
messaging software does not support multiple outgoing queues to be transmitted
"^DD",870,870,23,21,10,0)
over the same HL LOGICAL LINK.
"^DD",870,870,23,21,11,0)

"^DD",870,870,23,"DT")
3110211
"BLD",1496,6)
^124
**END**
**END**
