Released EDP*2*6 SEQ #3
Extracted from mail message
**KIDS**:EDP*2.0*6^

**INSTALL NAME**
EDP*2.0*6
"BLD",8920,0)
EDP*2.0*6^EMERGENCY DEPARTMENT^0^3130617^y
"BLD",8920,1,0)
^^1^1^3130517^
"BLD",8920,1,1,0)
This patch resolves multiple reported errors and issues within EDIS.
"BLD",8920,4,0)
^9.64PA^232.1^9
"BLD",8920,4,231.7,0)
231.7
"BLD",8920,4,231.7,222)
y^y^f^^^^n
"BLD",8920,4,232.1,0)
232.1
"BLD",8920,4,232.1,222)
y^y^f^^^^n
"BLD",8920,4,232.11,0)
232.11
"BLD",8920,4,232.11,222)
y^y^f^^n^^y^o^n
"BLD",8920,4,232.5,0)
232.5
"BLD",8920,4,232.5,222)
y^y^f^^n^^y^o^n
"BLD",8920,4,232.6,0)
232.6
"BLD",8920,4,232.6,222)
y^y^f^^n^^y^o^n
"BLD",8920,4,232.71,0)
232.71
"BLD",8920,4,232.71,222)
y^y^f^^n^^y^o^n
"BLD",8920,4,232.72,0)
232.72
"BLD",8920,4,232.72,222)
y^y^f^^n^^y^o^n
"BLD",8920,4,232.73,0)
232.73
"BLD",8920,4,232.73,222)
y^y^f^^n^^y^o^n
"BLD",8920,4,232.74,0)
232.74
"BLD",8920,4,232.74,222)
y^y^f^^n^^y^o^n
"BLD",8920,4,"B",231.7,231.7)

"BLD",8920,4,"B",232.1,232.1)

"BLD",8920,4,"B",232.11,232.11)

"BLD",8920,4,"B",232.5,232.5)

"BLD",8920,4,"B",232.6,232.6)

"BLD",8920,4,"B",232.71,232.71)

"BLD",8920,4,"B",232.72,232.72)

"BLD",8920,4,"B",232.73,232.73)

"BLD",8920,4,"B",232.74,232.74)

"BLD",8920,6.3)
200
"BLD",8920,"ABPKG")
n
"BLD",8920,"INI")
EDP2PRE
"BLD",8920,"INID")
n^n^n
"BLD",8920,"INIT")
EDP2PST
"BLD",8920,"KRN",0)
^9.67PA^779.2^20
"BLD",8920,"KRN",.4,0)
.4
"BLD",8920,"KRN",.401,0)
.401
"BLD",8920,"KRN",.402,0)
.402
"BLD",8920,"KRN",.403,0)
.403
"BLD",8920,"KRN",.5,0)
.5
"BLD",8920,"KRN",.84,0)
.84
"BLD",8920,"KRN",3.6,0)
3.6
"BLD",8920,"KRN",3.8,0)
3.8
"BLD",8920,"KRN",9.2,0)
9.2
"BLD",8920,"KRN",9.8,0)
9.8
"BLD",8920,"KRN",9.8,"NM",0)
^9.68A^37^33
"BLD",8920,"KRN",9.8,"NM",3,0)
EDPQPPS^^0^B4046541
"BLD",8920,"KRN",9.8,"NM",4,0)
EDPFAA^^0^B36904209
"BLD",8920,"KRN",9.8,"NM",5,0)
EDPBWS^^0^B229022529
"BLD",8920,"KRN",9.8,"NM",7,0)
EDPCTRL^^0^B89022760
"BLD",8920,"KRN",9.8,"NM",8,0)
EDPBST^^0^B9812007
"BLD",8920,"KRN",9.8,"NM",9,0)
EDPQAR^^0^B7638401
"BLD",8920,"KRN",9.8,"NM",10,0)
EDPARPT^^0^B95079217
"BLD",8920,"KRN",9.8,"NM",11,0)
EDPGLOB^^0^B4109172
"BLD",8920,"KRN",9.8,"NM",12,0)
EDPARPT1^^0^B17834740
"BLD",8920,"KRN",9.8,"NM",13,0)
EDPQPCE^^0^B3317665
"BLD",8920,"KRN",9.8,"NM",14,0)
EDPCSV^^0^B1174493
"BLD",8920,"KRN",9.8,"NM",15,0)
EDPX^^0^B12709600
"BLD",8920,"KRN",9.8,"NM",16,0)
EDPRPT2^^0^B24332800
"BLD",8920,"KRN",9.8,"NM",17,0)
EDPRPT3^^0^B14278258
"BLD",8920,"KRN",9.8,"NM",18,0)
EDPRPT1^^0^B50357723
"BLD",8920,"KRN",9.8,"NM",19,0)
EDPFPER^^0^B4359382
"BLD",8920,"KRN",9.8,"NM",20,0)
EDPRPT8^^0^B15923220
"BLD",8920,"KRN",9.8,"NM",22,0)
EDPQDB^^0^B56093021
"BLD",8920,"KRN",9.8,"NM",23,0)
EDPQDBS^^0^B7446153
"BLD",8920,"KRN",9.8,"NM",24,0)
EDPBCF^^0^B26108693
"BLD",8920,"KRN",9.8,"NM",25,0)
EDPLAB^^0^B51111821
"BLD",8920,"KRN",9.8,"NM",26,0)
EDPLOG^^0^B58048189
"BLD",8920,"KRN",9.8,"NM",27,0)
EDPLOGH^^0^B12593326
"BLD",8920,"KRN",9.8,"NM",28,0)
EDPLOGA^^0^B12583805
"BLD",8920,"KRN",9.8,"NM",29,0)
EDPBRM^^0^B26325333
"BLD",8920,"KRN",9.8,"NM",30,0)
EDPQLE^^0^B43232281
"BLD",8920,"KRN",9.8,"NM",31,0)
EDPQLE1^^0^B11912520
"BLD",8920,"KRN",9.8,"NM",32,0)
EDPRPT13^^0^B7846285
"BLD",8920,"KRN",9.8,"NM",33,0)
EDPRPT10^^0^B30220543
"BLD",8920,"KRN",9.8,"NM",34,0)
EDPRPT12^^0^B8703521
"BLD",8920,"KRN",9.8,"NM",35,0)
EDPRPT7C^^0^B22153636
"BLD",8920,"KRN",9.8,"NM",36,0)
EDPRPTBV^^0^B28273730
"BLD",8920,"KRN",9.8,"NM",37,0)
EDPRPT4^^0^B32540898
"BLD",8920,"KRN",9.8,"NM","B","EDPARPT",10)

"BLD",8920,"KRN",9.8,"NM","B","EDPARPT1",12)

"BLD",8920,"KRN",9.8,"NM","B","EDPBCF",24)

"BLD",8920,"KRN",9.8,"NM","B","EDPBRM",29)

"BLD",8920,"KRN",9.8,"NM","B","EDPBST",8)

"BLD",8920,"KRN",9.8,"NM","B","EDPBWS",5)

"BLD",8920,"KRN",9.8,"NM","B","EDPCSV",14)

"BLD",8920,"KRN",9.8,"NM","B","EDPCTRL",7)

"BLD",8920,"KRN",9.8,"NM","B","EDPFAA",4)

"BLD",8920,"KRN",9.8,"NM","B","EDPFPER",19)

"BLD",8920,"KRN",9.8,"NM","B","EDPGLOB",11)

"BLD",8920,"KRN",9.8,"NM","B","EDPLAB",25)

"BLD",8920,"KRN",9.8,"NM","B","EDPLOG",26)

"BLD",8920,"KRN",9.8,"NM","B","EDPLOGA",28)

"BLD",8920,"KRN",9.8,"NM","B","EDPLOGH",27)

"BLD",8920,"KRN",9.8,"NM","B","EDPQAR",9)

"BLD",8920,"KRN",9.8,"NM","B","EDPQDB",22)

"BLD",8920,"KRN",9.8,"NM","B","EDPQDBS",23)

"BLD",8920,"KRN",9.8,"NM","B","EDPQLE",30)

"BLD",8920,"KRN",9.8,"NM","B","EDPQLE1",31)

"BLD",8920,"KRN",9.8,"NM","B","EDPQPCE",13)

"BLD",8920,"KRN",9.8,"NM","B","EDPQPPS",3)

"BLD",8920,"KRN",9.8,"NM","B","EDPRPT1",18)

"BLD",8920,"KRN",9.8,"NM","B","EDPRPT10",33)

"BLD",8920,"KRN",9.8,"NM","B","EDPRPT12",34)

"BLD",8920,"KRN",9.8,"NM","B","EDPRPT13",32)

"BLD",8920,"KRN",9.8,"NM","B","EDPRPT2",16)

"BLD",8920,"KRN",9.8,"NM","B","EDPRPT3",17)

"BLD",8920,"KRN",9.8,"NM","B","EDPRPT4",37)

"BLD",8920,"KRN",9.8,"NM","B","EDPRPT7C",35)

"BLD",8920,"KRN",9.8,"NM","B","EDPRPT8",20)

"BLD",8920,"KRN",9.8,"NM","B","EDPRPTBV",36)

"BLD",8920,"KRN",9.8,"NM","B","EDPX",15)

"BLD",8920,"KRN",19,0)
19
"BLD",8920,"KRN",19,"NM",0)
^9.68A^1^1
"BLD",8920,"KRN",19,"NM",1,0)
EDPF TRACKING SYSTEM^^0
"BLD",8920,"KRN",19,"NM","B","EDPF TRACKING SYSTEM",1)

"BLD",8920,"KRN",19.1,0)
19.1
"BLD",8920,"KRN",19.1,"NM",0)
^9.68A^2^2
"BLD",8920,"KRN",19.1,"NM",1,0)
EDPR ADHOC^^0
"BLD",8920,"KRN",19.1,"NM",2,0)
EDPF WORKSHEETS^^0
"BLD",8920,"KRN",19.1,"NM","B","EDPF WORKSHEETS",2)

"BLD",8920,"KRN",19.1,"NM","B","EDPR ADHOC",1)

"BLD",8920,"KRN",101,0)
101
"BLD",8920,"KRN",409.61,0)
409.61
"BLD",8920,"KRN",771,0)
771
"BLD",8920,"KRN",779.2,0)
779.2
"BLD",8920,"KRN",870,0)
870
"BLD",8920,"KRN",8989.51,0)
8989.51
"BLD",8920,"KRN",8989.52,0)
8989.52
"BLD",8920,"KRN",8994,0)
8994
"BLD",8920,"KRN",8994,"NM",0)
^9.68A^1^1
"BLD",8920,"KRN",8994,"NM",1,0)
EDPGLOB RPC^^0
"BLD",8920,"KRN",8994,"NM","B","EDPGLOB RPC",1)

"BLD",8920,"KRN","B",.4,.4)

"BLD",8920,"KRN","B",.401,.401)

"BLD",8920,"KRN","B",.402,.402)

"BLD",8920,"KRN","B",.403,.403)

"BLD",8920,"KRN","B",.5,.5)

"BLD",8920,"KRN","B",.84,.84)

"BLD",8920,"KRN","B",3.6,3.6)

"BLD",8920,"KRN","B",3.8,3.8)

"BLD",8920,"KRN","B",9.2,9.2)

"BLD",8920,"KRN","B",9.8,9.8)

"BLD",8920,"KRN","B",19,19)

"BLD",8920,"KRN","B",19.1,19.1)

"BLD",8920,"KRN","B",101,101)

"BLD",8920,"KRN","B",409.61,409.61)

"BLD",8920,"KRN","B",771,771)

"BLD",8920,"KRN","B",779.2,779.2)

"BLD",8920,"KRN","B",870,870)

"BLD",8920,"KRN","B",8989.51,8989.51)

"BLD",8920,"KRN","B",8989.52,8989.52)

"BLD",8920,"KRN","B",8994,8994)

"BLD",8920,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",8920,"QUES",0)
^9.62^^
"BLD",8920,"REQB",0)
^9.611^2^1
"BLD",8920,"REQB",2,0)
EDP*2.0*5^2
"BLD",8920,"REQB","B","EDP*2.0*5",2)

"DATA",232.11,1,0)
Patient Name^230^.04^.04^Patient
"DATA",232.11,1,3)
The patient's name.
"DATA",232.11,2,0)
Patient Identifier^230^.06^^Patient ID
"DATA",232.11,2,2)
S VAL=$$PID|EDPARPT1(PAT)
"DATA",232.11,2,3)
First initial of last name and last 4 of ssn
"DATA",232.11,3,0)
Time In^230^.08^.08^Time In
"DATA",232.11,3,3)
The time at which an EDIS user identified and added the patient, or the time at which an Appointment Management user created an emergency-department appointment for the patient
"DATA",232.11,4,0)
Time Out^230^.09^.09^Time Out
"DATA",232.11,4,3)
The time at which an EDIS user closed the patient's emergency department visit and removed patient from the board.
"DATA",232.11,5,0)
Elapsed Time^230^^^Elapsed Time
"DATA",232.11,5,2)
S VAL=$$ELAPSED|EDPARPT1(LOGID)
"DATA",232.11,5,3)
Total elapsed time (from the patient's time-in to his or her time out, in minutes; asterisks indicate stays that have exceeded the current nationally recognized stay limit of 360 minutes) 
"DATA",232.11,6,0)
Complaint^230^1.1^.07^Complaint
"DATA",232.11,6,3)
The patient's display-board complaint.
"DATA",232.11,7,0)
Long Complaint^230^2^2^Long Complaint
"DATA",232.11,7,3)
The long complaint for the patient.
"DATA",232.11,8,0)
Physicians (MD's)^230^3.5^3.5^MD
"DATA",232.11,8,2)
D SMULT|EDPARPT1(LOGID,.IARRY,3.5)
"DATA",232.11,8,3)
The initials of the patient's physicians - need to display all providers associated with patient for this visit and time stamp.
"DATA",232.11,9,0)
Resident^230^3.7^3.7^Res
"DATA",232.11,9,2)
D SMULT|EDPARPT1(LOGID,.IARRY,3.7)
"DATA",232.11,9,3)
The initials of the patient's resident(s??).
"DATA",232.11,10,0)
Triage^230^^^Triage
"DATA",232.11,10,2)
S VAL=$P($$TRIAGE|EDPARPT1(LOGID),U)
"DATA",232.11,10,3)
The elapsed time between the patient's time-in and his or her initial acuity assessment.
"DATA",232.11,11,0)
Triage RN^230^^^Triage RN
"DATA",232.11,11,2)
S VAL=$P($$TRIAGE|EDPARPT1(LOGID),U,2)
"DATA",232.11,11,3)
Name of nurse documenting triage in EDIS.
"DATA",232.11,12,0)
Staff Nurses (Staff RNs)^230^3.6^3.6^RN
"DATA",232.11,12,2)
D SMULT|EDPARPT1(LOGID,.IARRY,3.6)
"DATA",232.11,13,0)
Acuity^230^3.3^3.3^Acuity
"DATA",232.11,13,1)
S VAL=$P(VAL,"edp.acuity.",2)
"DATA",232.11,13,2)
D SMULT|EDPARPT1(LOGID,.IARRY,3.3)
"DATA",232.11,13,3)
The patient's acuity level - could be multiple
"DATA",232.11,14,0)
Wait^230^^^Wait
"DATA",232.11,14,2)
S VAL=$$WAIT|EDPARPT1(LOGID,AREA)
"DATA",232.11,14,3)
The elapsed time between the patient's time-in and his or her first assignment to a location other than the waiting room 
"DATA",232.11,15,0)
Door to Doc^230^^^Door to Doc
"DATA",232.11,15,2)
S VAL=$$D2DOC|EDPARPT1(LOGID)
"DATA",232.11,15,3)
Elapsed time between patient's time-in and time provider associated him/herself with patient in EDIS.
"DATA",232.11,16,0)
Adm Dec^230^^^admDec
"DATA",232.11,16,2)
S VAL=$$ADMDECL|EDPARPT1(LOGID,"admdec")
"DATA",232.11,16,3)
The elapsed time between the patient's time-in and the status change to 'Admit to.'.
"DATA",232.11,17,0)
Adm Del^230^^^admDel
"DATA",232.11,17,2)
S VAL=$$ADMDECL|EDPARPT1(LOGID,"admdel")
"DATA",232.11,17,3)
The elapsed time between the patient's Time Out (the time the patient was removed from the board) and the time of the patient's first admitting-disposition assignment.
"DATA",232.11,18,0)
RNs^230^3.6^3.6^RNs
"DATA",232.11,18,2)
D SMULT|EDPARPT1(LOGID,.IARRY,3.6)
"DATA",232.11,18,3)
The initials of the patient's nurses.
"DATA",232.11,19,0)
DC dx text^230^^^DC dx text
"DATA",232.11,19,2)
D DXMULT|EDPARPT1(LOGID,.IARRY,AREA,2)
"DATA",232.11,19,3)
The patient's free text diagnosis.
"DATA",232.11,20,0)
Diagnosis Coded^230^^^Diagnosis Coded
"DATA",232.11,20,2)
D DXMULT|EDPARPT1(LOGID,.IARRY,AREA,1)
"DATA",232.11,20,3)
Patient's ICD-9-CM diagnosis.
"DATA",232.11,21,0)
Source^230^.1^.1^Source
"DATA",232.11,21,1)
S VAL=$P(VAL,"edp.source.",2)
"DATA",232.11,21,3)
Patient source as documented in EDIS.
"DATA",232.11,22,0)
Status^230^3.2^^Status
"DATA",232.11,22,1)
S VAL=$P(VAL,"edp.status.",2)
"DATA",232.11,22,2)
D SMULT|EDPARPT1(LOGID,.IARRY,3.2)
"DATA",232.11,22,3)
The patient's EDIS status. Could be multiple?
"DATA",232.11,23,0)
Disposition^230^1.2^.11^Disposition
"DATA",232.11,23,1)
S VAL=$P(VAL,"edp.disposition.",2)
"DATA",232.11,23,2)
D SMULT|EDPARPT1(LOGID,.IARRY,.11)
"DATA",232.11,23,3)
The patient's disposition - could be multiple.
"DATA",232.5,1,0)
Provider^P^@md^^DEFAULTBOARD^1^providers
"DATA",232.5,2,0)
Resident^R^@res^^^^residents
"DATA",232.5,3,0)
Nurse^N^@rn^^^^nurses
"DATA",232.5,4,0)
Clerk^C^@clrk^^^^clerks
"DATA",232.6,1,0)
Visit^16066^500AB^V^^^0
"DATA",232.6,1,2,0)
^232.62IA^5^5
"DATA",232.6,1,2,1,0)
1^1^1
"DATA",232.6,1,2,1,2,0)
^232.622^3^3
"DATA",232.6,1,2,1,2,1,0)
1^3^1^1^1
"DATA",232.6,1,2,1,2,2,0)
2^2^1^0^1
"DATA",232.6,1,2,1,2,3,0)
3^1^1^1^1
"DATA",232.6,1,2,2,0)
4^2^1
"DATA",232.6,1,2,2,2,0)
^232.622^7^7
"DATA",232.6,1,2,2,2,1,0)
1^4^1^1^1
"DATA",232.6,1,2,2,2,2,0)
2^5^1^1^1
"DATA",232.6,1,2,2,2,3,0)
3^6^1^1^1
"DATA",232.6,1,2,2,2,4,0)
4^7^1^1^1
"DATA",232.6,1,2,2,2,5,0)
5^8^1^1^1
"DATA",232.6,1,2,2,2,6,0)
6^9^1^1^1
"DATA",232.6,1,2,2,2,7,0)
7^22^1^1^1
"DATA",232.6,1,2,3,0)
5^3^0
"DATA",232.6,1,2,3,2,0)
^232.622^5^5
"DATA",232.6,1,2,3,2,1,0)
1^10^1^1^0
"DATA",232.6,1,2,3,2,2,0)
2^11^1^1^1
"DATA",232.6,1,2,3,2,3,0)
3^12^1^1^1
"DATA",232.6,1,2,3,2,4,0)
4^15^1^1^1
"DATA",232.6,1,2,3,2,5,0)
5^16^1^1^1
"DATA",232.6,1,2,4,0)
2^5^0
"DATA",232.6,1,2,4,2,0)
^232.622^1^1
"DATA",232.6,1,2,4,2,1,0)
1^18^1^1^1
"DATA",232.6,1,2,5,0)
3^8^0
"DATA",232.6,1,2,5,2,0)
^232.622^1^1
"DATA",232.6,1,2,5,2,1,0)
1^19^1^1^1
"DATA",232.6,1,3,0)
^232.63P^3^3
"DATA",232.6,1,3,1,0)
1
"DATA",232.6,1,3,2,0)
3
"DATA",232.6,1,3,3,0)
2
"DATA",232.6,2,0)
Assess^16066^500AB^A^^^0
"DATA",232.6,2,2,0)
^232.62IA^4^3
"DATA",232.6,2,2,1,0)
1^4^0
"DATA",232.6,2,2,1,2,0)
^232.622^1^1
"DATA",232.6,2,2,1,2,1,0)
1^17^1^1^1
"DATA",232.6,2,2,3,0)
2^6^0
"DATA",232.6,2,2,3,2,0)
^232.622^1^1
"DATA",232.6,2,2,3,2,1,0)
1^20^1^1^1
"DATA",232.6,2,2,4,0)
3^7^0
"DATA",232.6,2,2,4,2,0)
^232.622^1^1
"DATA",232.6,2,2,4,2,1,0)
1^21^1^1^1
"DATA",232.6,2,3,0)
^232.63P^3^3
"DATA",232.6,2,3,1,0)
1
"DATA",232.6,2,3,2,0)
3
"DATA",232.6,2,3,3,0)
2
"DATA",232.6,3,0)
Edit Closed^16066^500AB^E^^0^0
"DATA",232.6,3,2,0)
^232.62IA^4^3
"DATA",232.6,3,2,2,0)
1^1^1
"DATA",232.6,3,2,2,2,0)
^232.622^3^3
"DATA",232.6,3,2,2,2,1,0)
1^1^1^1^1
"DATA",232.6,3,2,2,2,2,0)
2^2^1^1^1
"DATA",232.6,3,2,2,2,3,0)
3^3^1^1^1
"DATA",232.6,3,2,3,0)
2^9^1
"DATA",232.6,3,2,3,2,0)
^232.622^7^7
"DATA",232.6,3,2,3,2,1,0)
1^4^1^1^1
"DATA",232.6,3,2,3,2,2,0)
2^5^1^1^1
"DATA",232.6,3,2,3,2,3,0)
3^6^1^1^1
"DATA",232.6,3,2,3,2,4,0)
4^7^1^1^1
"DATA",232.6,3,2,3,2,5,0)
5^8^1^1^1
"DATA",232.6,3,2,3,2,6,0)
6^9^1^1^1
"DATA",232.6,3,2,3,2,7,0)
7^22^1^1^1
"DATA",232.6,3,2,4,0)
3^10^1
"DATA",232.6,3,2,4,2,0)
^232.622^7^7
"DATA",232.6,3,2,4,2,1,0)
1^10^1^1^1
"DATA",232.6,3,2,4,2,2,0)
2^11^1^1^1
"DATA",232.6,3,2,4,2,3,0)
3^12^1^1^1
"DATA",232.6,3,2,4,2,4,0)
4^13^1^1^1
"DATA",232.6,3,2,4,2,5,0)
5^14^1^1^1
"DATA",232.6,3,2,4,2,6,0)
6^15^1^1^1
"DATA",232.6,3,2,4,2,7,0)
7^16^1^1^1
"DATA",232.6,3,3,0)
^232.63P^1^1
"DATA",232.6,3,3,1,0)
1
"DATA",232.71,1,0)
Complaint^EDP^^Complaint
"DATA",232.71,1,1,0)
^232.711PA^3^3
"DATA",232.71,1,1,1,0)
1
"DATA",232.71,1,1,2,0)
2
"DATA",232.71,1,1,3,0)
3
"DATA",232.71,1,2,0)
^232.712P^3^3
"DATA",232.71,1,2,1,0)
1
"DATA",232.71,1,2,2,0)
3
"DATA",232.71,1,2,3,0)
2
"DATA",232.71,2,0)
Status/Responsibility^EDP^^Status/Responsibility
"DATA",232.71,2,1,0)
^232.711PA^4^4
"DATA",232.71,2,1,1,0)
4
"DATA",232.71,2,1,2,0)
5
"DATA",232.71,2,1,3,0)
6
"DATA",232.71,2,1,4,0)
8
"DATA",232.71,2,2,0)
^232.712P^3^3
"DATA",232.71,2,2,1,0)
1
"DATA",232.71,2,2,2,0)
3
"DATA",232.71,2,2,3,0)
2
"DATA",232.71,3,0)
Disposition^EDP^^Disposition
"DATA",232.71,3,1,0)
^232.711PA^6^4
"DATA",232.71,3,1,1,0)
10
"DATA",232.71,3,1,2,0)
11
"DATA",232.71,3,1,5,0)
15
"DATA",232.71,3,1,6,0)
16
"DATA",232.71,3,2,0)
^232.712P^4^4
"DATA",232.71,3,2,1,0)
1
"DATA",232.71,3,2,2,0)
2
"DATA",232.71,3,2,3,0)
3
"DATA",232.71,3,2,4,0)
4
"DATA",232.71,4,0)
Labs^EDP
"DATA",232.71,4,1,0)
^232.711PA^1^1
"DATA",232.71,4,1,1,0)
17
"DATA",232.71,4,2,0)
^232.712P^2^2
"DATA",232.71,4,2,1,0)
1
"DATA",232.71,4,2,2,0)
4
"DATA",232.71,5,0)
Vitals^EDP
"DATA",232.71,5,1,0)
^232.711PA^1^1
"DATA",232.71,5,1,1,0)
18
"DATA",232.71,5,2,0)
^232.712P^4^4
"DATA",232.71,5,2,1,0)
1
"DATA",232.71,5,2,2,0)
2
"DATA",232.71,5,2,3,0)
4
"DATA",232.71,5,2,4,0)
3
"DATA",232.71,6,0)
Active Problems^EDP
"DATA",232.71,6,1,0)
^232.711PA^1^1
"DATA",232.71,6,1,1,0)
20
"DATA",232.71,6,2,0)
^232.712P^2^2
"DATA",232.71,6,2,1,0)
1
"DATA",232.71,6,2,2,0)
2
"DATA",232.71,7,0)
Active Medications^EDP
"DATA",232.71,7,1,0)
^232.711PA^1^1
"DATA",232.71,7,1,1,0)
21
"DATA",232.71,7,2,0)
^232.712P^2^2
"DATA",232.71,7,2,1,0)
1
"DATA",232.71,7,2,2,0)
2
"DATA",232.71,8,0)
Update Vitals^EDP
"DATA",232.71,8,1,0)
^232.711PA^1^1
"DATA",232.71,8,1,1,0)
19
"DATA",232.71,8,2,0)
^232.712P^3^3
"DATA",232.71,8,2,1,0)
1
"DATA",232.71,8,2,2,0)
2
"DATA",232.71,8,2,3,0)
3
"DATA",232.71,9,0)
EC Status/Responsibility^EDP^^Status/Responsibility
"DATA",232.71,9,1,0)
^232.711PA^7^7
"DATA",232.71,9,1,1,0)
4
"DATA",232.71,9,1,2,0)
5
"DATA",232.71,9,1,3,0)
6
"DATA",232.71,9,1,4,0)
7
"DATA",232.71,9,1,5,0)
8
"DATA",232.71,9,1,6,0)
9
"DATA",232.71,9,1,7,0)
22
"DATA",232.71,9,2,0)
^232.712P^2^2
"DATA",232.71,9,2,1,0)
1
"DATA",232.71,9,2,2,0)
3
"DATA",232.71,10,0)
EC Disposition^EDP^^Disposition
"DATA",232.71,10,1,0)
^232.711PA^7^7
"DATA",232.71,10,1,1,0)
10
"DATA",232.71,10,1,2,0)
11
"DATA",232.71,10,1,3,0)
15
"DATA",232.71,10,1,4,0)
16
"DATA",232.71,10,1,5,0)
12
"DATA",232.71,10,1,6,0)
13
"DATA",232.71,10,1,7,0)
14
"DATA",232.71,10,2,0)
^232.712P^3^3
"DATA",232.71,10,2,1,0)
1
"DATA",232.71,10,2,2,0)
2
"DATA",232.71,10,2,3,0)
3
"DATA",232.72,1,0)
complaint^Complaint for Display Board^^^^1^EMERGENCY DEPARTMENT
"DATA",232.72,1,1)
230^1.1
"DATA",232.72,1,8,0)
^232.728P^4^4
"DATA",232.72,1,8,1,0)
1
"DATA",232.72,1,8,2,0)
2
"DATA",232.72,1,8,3,0)
3
"DATA",232.72,1,8,4,0)
4
"DATA",232.72,1,9,0)
^232.729P^1^1
"DATA",232.72,1,9,1,0)
1^text^50^1
"DATA",232.72,1,10)
logEdit.entry.complaint^Complaint^1^1
"DATA",232.72,2,0)
longComplaint^Long Complaint (optional)^^^^1^EMERGENCY DEPARTMENT
"DATA",232.72,2,1)
230^2
"DATA",232.72,2,8,0)
^232.728P^4^4
"DATA",232.72,2,8,1,0)
1
"DATA",232.72,2,8,2,0)
2
"DATA",232.72,2,8,3,0)
3
"DATA",232.72,2,8,4,0)
4
"DATA",232.72,2,9,0)
^232.729P^1^1
"DATA",232.72,2,9,1,0)
1^text^220^0
"DATA",232.72,2,10)
logEdit.entry.longComplaint^Long Complaint^1^1
"DATA",232.72,3,0)
source^Source^logEdit.arrivals^^^2^EMERGENCY DEPARTMENT
"DATA",232.72,3,1)
230^.1
"DATA",232.72,3,8,0)
^232.728P^4^4
"DATA",232.72,3,8,1,0)
1
"DATA",232.72,3,8,2,0)
2
"DATA",232.72,3,8,3,0)
3
"DATA",232.72,3,8,4,0)
4
"DATA",232.72,3,10)
logEdit.entry.arrival^Source^1^1
"DATA",232.72,4,0)
bed^Room / Area^logEdit.beds^^^2^EMERGENCY DEPARTMENT
"DATA",232.72,4,1)
230^3.4
"DATA",232.72,4,8,0)
^232.728P^4^4
"DATA",232.72,4,8,1,0)
1
"DATA",232.72,4,8,2,0)
2
"DATA",232.72,4,8,3,0)
3
"DATA",232.72,4,8,4,0)
4
"DATA",232.72,4,9,0)
^232.729P^1^1
"DATA",232.72,4,9,1,0)
2^selectedIndex^^1^1
"DATA",232.72,4,9,1,1)
A room must be selected.
"DATA",232.72,4,10)
logEdit.entry.bed^Room / Area^1^1
"DATA",232.72,5,0)
acuity^Acuity^logEdit.acuities^^^2^EMERGENCY DEPARTMENT
"DATA",232.72,5,1)
230^3.3
"DATA",232.72,5,8,0)
^232.728P^4^4
"DATA",232.72,5,8,1,0)
1
"DATA",232.72,5,8,2,0)
2
"DATA",232.72,5,8,3,0)
3
"DATA",232.72,5,8,4,0)
4
"DATA",232.72,5,9,0)
^232.729P^1^1
"DATA",232.72,5,9,1,0)
2^selectedIndex^^1^1
"DATA",232.72,5,9,1,1)
An acuity must be selected.
"DATA",232.72,5,10)
logEdit.entry.acuity^Acuity^1^1
"DATA",232.72,6,0)
status^Status^logEdit.statuses^^^2^EMERGENCY DEPARTMENT
"DATA",232.72,6,1)
230^3.2
"DATA",232.72,6,8,0)
^232.728P^4^4
"DATA",232.72,6,8,1,0)
1
"DATA",232.72,6,8,2,0)
2
"DATA",232.72,6,8,3,0)
3
"DATA",232.72,6,8,4,0)
4
"DATA",232.72,6,10)
logEdit.entry.status^Status^1^1
"DATA",232.72,7,0)
provider^Provider^logEdit.providers^^^2^EMERGENCY DEPARTMENT
"DATA",232.72,7,1)
230^3.5
"DATA",232.72,7,8,0)
^232.728P^4^4
"DATA",232.72,7,8,1,0)
1
"DATA",232.72,7,8,2,0)
2
"DATA",232.72,7,8,3,0)
3
"DATA",232.72,7,8,4,0)
4
"DATA",232.72,7,9,0)
^232.729P^1^1
"DATA",232.72,7,9,1,0)
2^selectedIndex^^1^1
"DATA",232.72,7,9,1,1)
A provider must be selected.
"DATA",232.72,7,10)
logEdit.entry.provider^Provider^1^1
"DATA",232.72,8,0)
resident^Resident^logEdit.residents^^^2^EMERGENCY DEPARTMENT
"DATA",232.72,8,1)
230^3.7
"DATA",232.72,8,8,0)
^232.728P^4^4
"DATA",232.72,8,8,1,0)
1
"DATA",232.72,8,8,2,0)
2
"DATA",232.72,8,8,3,0)
3
"DATA",232.72,8,8,4,0)
4
"DATA",232.72,8,10)
logEdit.entry.resident^Resident^1^1^logEditParams.promptResidents
"DATA",232.72,9,0)
clinic^Clinic^logEdit.clinics^^^2^EMERGENCY DEPARTMENT
"DATA",232.72,9,1)
230^.14
"DATA",232.72,9,8,0)
^232.728P^4^4
"DATA",232.72,9,8,1,0)
1
"DATA",232.72,9,8,2,0)
2
"DATA",232.72,9,8,3,0)
3
"DATA",232.72,9,8,4,0)
4
"DATA",232.72,9,10)
logEdit.entry.clinic^Clinic^1^1^logEditParams.promptClinics
"DATA",232.72,10,0)
comment^Comments^^^^1^EMERGENCY DEPARTMENT
"DATA",232.72,10,1)
230^3.8
"DATA",232.72,10,8,0)
^232.728P^4^4
"DATA",232.72,10,8,1,0)
1
"DATA",232.72,10,8,2,0)
2
"DATA",232.72,10,8,3,0)
3
"DATA",232.72,10,8,4,0)
4
"DATA",232.72,10,9,0)
^232.729P^1^1
"DATA",232.72,10,9,1,0)
1^text^80^0
"DATA",232.72,10,10)
logEdit.entry.comment^Comments^1^1
"DATA",232.72,11,0)
disposition^Disposition^logEdit.dispositions^^^2^EMERGENCY DEPARTMENT
"DATA",232.72,11,1)
^230^1.2
"DATA",232.72,11,8,0)
^232.728P^4^4
"DATA",232.72,11,8,1,0)
1
"DATA",232.72,11,8,2,0)
2
"DATA",232.72,11,8,3,0)
3
"DATA",232.72,11,8,4,0)
4
"DATA",232.72,11,10)
logEdit.entry.disposition^Disposition^1^1
"DATA",232.72,12,0)
delay^Delay Reason^logEdit.delays^^^2^EMERGENCY DEPARTMENT
"DATA",232.72,12,1)
230^1.5
"DATA",232.72,12,8,0)
^232.728P^4^4
"DATA",232.72,12,8,1,0)
1
"DATA",232.72,12,8,2,0)
2
"DATA",232.72,12,8,3,0)
3
"DATA",232.72,12,8,4,0)
4
"DATA",232.72,12,10)
logEdit.entry.delay^Delay Reason^1^1^logEdit.entry.requireDelay
"DATA",232.72,13,0)
inTS^Time In^^^^3^EMERGENCY DEPARTMENT
"DATA",232.72,13,1)
230^.08
"DATA",232.72,13,7,0)
^232.727P^1^1
"DATA",232.72,13,7,1,0)
14
"DATA",232.72,13,8,0)
^232.728P^4^4
"DATA",232.72,13,8,1,0)
1
"DATA",232.72,13,8,2,0)
2
"DATA",232.72,13,8,3,0)
3
"DATA",232.72,13,8,4,0)
4
"DATA",232.72,13,10)
logEdit.entry.inTS^Time In^1^1^isEditClosed
"DATA",232.72,14,0)
outTS^Time Out^^^^3^EMERGENCY DEPARTMENT
"DATA",232.72,14,1)
230^.09
"DATA",232.72,14,7,0)
^232.727P^1^1
"DATA",232.72,14,7,1,0)
13
"DATA",232.72,14,8,0)
^232.728P^4^4
"DATA",232.72,14,8,1,0)
1
"DATA",232.72,14,8,2,0)
2
"DATA",232.72,14,8,3,0)
3
"DATA",232.72,14,8,4,0)
4
"DATA",232.72,14,9,0)
^232.729P^1^1
"DATA",232.72,14,9,1,0)
3^_selectedDate^^1
"DATA",232.72,14,10)
logEdit.entry.outTS^Time Out^1^1^isEditClosed
"DATA",232.72,15,0)
diagnosisCoded^Diagnosis Coded^^^^4^EMERGENCY DEPARTMENT
"DATA",232.72,15,1)
230^1.2
"DATA",232.72,15,7,0)
^232.727P^1^1
"DATA",232.72,15,7,1,0)
16
"DATA",232.72,15,8,0)
^232.728P^4^4
"DATA",232.72,15,8,1,0)
1
"DATA",232.72,15,8,2,0)
2
"DATA",232.72,15,8,3,0)
3
"DATA",232.72,15,8,4,0)
4
"DATA",232.72,15,10)
^Diagnosis^1^1^logEditParams.codedDiagnosis
"DATA",232.72,16,0)
diagnosisFreeText^Diagnosis Free Text^^^^5^EMERGENCY DEPARTMENT
"DATA",232.72,16,1)
230^1.2
"DATA",232.72,16,7,0)
^232.727P^1^1
"DATA",232.72,16,7,1,0)
15
"DATA",232.72,16,8,0)
^232.728P^4^4
"DATA",232.72,16,8,1,0)
1
"DATA",232.72,16,8,2,0)
2
"DATA",232.72,16,8,3,0)
3
"DATA",232.72,16,8,4,0)
4
"DATA",232.72,16,10)
^Diagnosis^1^1^logEditParams.freeDiagnosis
"DATA",232.72,17,0)
labsView^Labs^^^^6^EMERGENCY DEPARTMENT
"DATA",232.72,17,1)
^^gov.va.med.edp.control.LabTrendEvent
"DATA",232.72,17,5,0)
^232.725^1^1
"DATA",232.72,17,5,1,0)
testIDS^S^B
"DATA",232.72,17,8,0)
^232.728P^4^4
"DATA",232.72,17,8,1,0)
1
"DATA",232.72,17,8,2,0)
2
"DATA",232.72,17,8,3,0)
3
"DATA",232.72,17,8,4,0)
4
"DATA",232.72,17,10)
^Labs^1^1
"DATA",232.72,18,0)
vitalsView^Vitals^^^^6^EMERGENCY DEPARTMENT
"DATA",232.72,18,1)
^^gov.va.med.edp.control.GetVitalsEvent
"DATA",232.72,18,5,0)
^232.725^1^1
"DATA",232.72,18,5,1,0)
getVitals^S^B
"DATA",232.72,18,8,0)
^232.728P^4^4
"DATA",232.72,18,8,1,0)
1
"DATA",232.72,18,8,2,0)
2
"DATA",232.72,18,8,3,0)
3
"DATA",232.72,18,8,4,0)
4
"DATA",232.72,18,10)
^Vitals^1^1
"DATA",232.72,19,0)
vitalsSaveView^Updates Vitals^^^^7^EMERGENCY DEPARTMENT
"DATA",232.72,19,8,0)
^232.728P^4^4
"DATA",232.72,19,8,1,0)
1
"DATA",232.72,19,8,2,0)
2
"DATA",232.72,19,8,3,0)
3
"DATA",232.72,19,8,4,0)
4
"DATA",232.72,19,10)
^Update Vitals^1^1
"DATA",232.72,20,0)
activeProblemsView^Active Problems^^^^6^EMERGENCY DEPARTMENT
"DATA",232.72,20,1)
^^gov.va.med.edp.control.ActiveProblemsEvent
"DATA",232.72,20,5,0)
^232.725^1^1
"DATA",232.72,20,5,1,0)
PLIST^S^B
"DATA",232.72,20,8,0)
^232.728P^4^4
"DATA",232.72,20,8,1,0)
1
"DATA",232.72,20,8,2,0)
2
"DATA",232.72,20,8,3,0)
3
"DATA",232.72,20,8,4,0)
4
"DATA",232.72,20,10)
^Active Problems^1^1
"DATA",232.72,21,0)
activeMedicationsView^Active Medications^activeMeds^^^6^EMERGENCY DEPARTMENT
"DATA",232.72,21,1)
^^gov.va.med.edp.control.ActiveMedicationsEvent
"DATA",232.72,21,5,0)
^232.725^1^1
"DATA",232.72,21,5,1,0)
MEDS^S^B
"DATA",232.72,21,8,0)
^232.728P^4^4
"DATA",232.72,21,8,1,0)
1
"DATA",232.72,21,8,2,0)
2
"DATA",232.72,21,8,3,0)
3
"DATA",232.72,21,8,4,0)
4
"DATA",232.72,21,10)
^Active Medications^1^1
"DATA",232.72,22,0)
nurse^Nurse^logEdit.nurses^^^2^EMERGENCY DEPARTMENT
"DATA",232.72,22,1)
230^3.6
"DATA",232.72,22,8,0)
^232.728P^4^4
"DATA",232.72,22,8,1,0)
1
"DATA",232.72,22,8,2,0)
2
"DATA",232.72,22,8,3,0)
3
"DATA",232.72,22,8,4,0)
4
"DATA",232.72,22,10)
logEdit.entry.nurse^Nurse^1^1
"DATA",232.73,1,0)
gov.va.med.edp.view.worksheet.WorkSheetTextInput
"DATA",232.73,2,0)
gov.va.med.edp.view.worksheet.WorkSheetValueComboBox
"DATA",232.73,3,0)
gov.va.med.edp.widget.DateTimeChooser
"DATA",232.73,4,0)
gov.va.med.edp.cpe.view.log.DiagnosesCoded
"DATA",232.73,5,0)
gov.va.med.edp.cpe.view.log.DiagnosesFreeText
"DATA",232.73,6,0)
gov.va.med.edp.view.worksheet.WorkSheetDataGridWidget
"DATA",232.73,7,0)
gov.va.med.edp.view.worksheet.VitalsSaveWidget
"DATA",232.74,1,0)
mx.validators.StringValidator
"DATA",232.74,2,0)
mx.validators.NumberValidator
"DATA",232.74,3,0)
gov.va.med.edp.view.worksheet.TimeInTimeOutValidator
"FIA",231.7)
TRACKING STAFF
"FIA",231.7,0)
^EDPB(231.7,
"FIA",231.7,0,0)
231.7P
"FIA",231.7,0,1)
y^y^f^^^^n
"FIA",231.7,0,10)

"FIA",231.7,0,11)

"FIA",231.7,0,"RLRO")

"FIA",231.7,0,"VR")
2.0^EDP
"FIA",231.7,231.7)
0
"FIA",232.1)
EDP REPORT TEMPLATE
"FIA",232.1,0)
^EDPB(232.1,
"FIA",232.1,0,0)
232.1
"FIA",232.1,0,1)
y^y^f^^^^n
"FIA",232.1,0,10)

"FIA",232.1,0,11)

"FIA",232.1,0,"RLRO")

"FIA",232.1,0,"VR")
2.0^EDP
"FIA",232.1,232.1)
0
"FIA",232.1,232.12)
0
"FIA",232.1,232.13)
0
"FIA",232.11)
EDP REPORT ELEMENTS
"FIA",232.11,0)
^EDPB(232.11,
"FIA",232.11,0,0)
232.11
"FIA",232.11,0,1)
y^y^f^^n^^y^o^n
"FIA",232.11,0,10)

"FIA",232.11,0,11)

"FIA",232.11,0,"RLRO")

"FIA",232.11,0,"VR")
2.0^EDP
"FIA",232.11,232.11)
0
"FIA",232.5)
CPE ROLE
"FIA",232.5,0)
^EDPB(232.5,
"FIA",232.5,0,0)
232.5
"FIA",232.5,0,1)
y^y^f^^n^^y^o^n
"FIA",232.5,0,10)

"FIA",232.5,0,11)

"FIA",232.5,0,"RLRO")

"FIA",232.5,0,"VR")
2.0^EDP
"FIA",232.5,232.5)
0
"FIA",232.6)
EDP WORKSHEET SPECIFICATION
"FIA",232.6,0)
^EDPB(232.6,
"FIA",232.6,0,0)
232.6
"FIA",232.6,0,1)
y^y^f^^n^^y^o^n
"FIA",232.6,0,10)

"FIA",232.6,0,11)

"FIA",232.6,0,"RLRO")

"FIA",232.6,0,"VR")
2.0^EDP
"FIA",232.6,232.6)
0
"FIA",232.6,232.61)
0
"FIA",232.6,232.62)
0
"FIA",232.6,232.621)
0
"FIA",232.6,232.622)
0
"FIA",232.6,232.63)
0
"FIA",232.71)
EDP WORKSHEET SECTION
"FIA",232.71,0)
^EDPB(232.71,
"FIA",232.71,0,0)
232.71
"FIA",232.71,0,1)
y^y^f^^n^^y^o^n
"FIA",232.71,0,10)

"FIA",232.71,0,11)

"FIA",232.71,0,"RLRO")

"FIA",232.71,0,"VR")
2.0^EDP
"FIA",232.71,232.71)
0
"FIA",232.71,232.711)
0
"FIA",232.71,232.712)
0
"FIA",232.72)
EDP WORKSHEET COMPONENT
"FIA",232.72,0)
^EDPB(232.72,
"FIA",232.72,0,0)
232.72I
"FIA",232.72,0,1)
y^y^f^^n^^y^o^n
"FIA",232.72,0,10)

"FIA",232.72,0,11)

"FIA",232.72,0,"RLRO")

"FIA",232.72,0,"VR")
2.0^EDP
"FIA",232.72,232.72)
0
"FIA",232.72,232.725)
0
"FIA",232.72,232.727)
0
"FIA",232.72,232.728)
0
"FIA",232.72,232.729)
0
"FIA",232.73)
EDP WORKSHEET COMPONENT TYPE
"FIA",232.73,0)
^EDPB(232.73,
"FIA",232.73,0,0)
232.73
"FIA",232.73,0,1)
y^y^f^^n^^y^o^n
"FIA",232.73,0,10)

"FIA",232.73,0,11)

"FIA",232.73,0,"RLRO")

"FIA",232.73,0,"VR")
2.0^EDP
"FIA",232.73,232.73)
0
"FIA",232.74)
EDP COMPONENT VALIDATORS
"FIA",232.74,0)
^EDPB(232.74,
"FIA",232.74,0,0)
232.74
"FIA",232.74,0,1)
y^y^f^^n^^y^o^n
"FIA",232.74,0,10)

"FIA",232.74,0,11)

"FIA",232.74,0,"RLRO")

"FIA",232.74,0,"VR")
2.0^EDP
"FIA",232.74,232.74)
0
"INI")
EDP2PRE
"INIT")
EDP2PST
"IX",231.7,231.7,"AC",0)
231.7^AC^SITE,AREA,ROLE,IEN if the entry is active^R^^R^IR^I^231.7^^^^^S
"IX",231.7,231.7,"AC",.1,0)
^^6^6^3081005^
"IX",231.7,231.7,"AC",.1,1,0)
This cross reference supports constructing a list of currently active 
"IX",231.7,231.7,"AC",.1,2,0)
staff for a particular role.
"IX",231.7,231.7,"AC",.1,3,0)
 
"IX",231.7,231.7,"AC",.1,4,0)
For this record level cross reference, the kill logic should always be 
"IX",231.7,231.7,"AC",.1,5,0)
executed when any value changes.  The set logic is then executed 
"IX",231.7,231.7,"AC",.1,6,0)
conditionally, allowing the cross reference to hold only active values.
"IX",231.7,231.7,"AC",1)
S ^EDPB(231.7,"AC",X(1),X(2),X(3),DA)=""
"IX",231.7,231.7,"AC",1.4)
S X='X2(4)
"IX",231.7,231.7,"AC",2)
K ^EDPB(231.7,"AC",X(1),X(2),X(3),DA)
"IX",231.7,231.7,"AC",2.5)
K ^EDPB(231.7,"AC")
"IX",231.7,231.7,"AC",11.1,0)
^.114IA^4^4
"IX",231.7,231.7,"AC",11.1,1,0)
1^F^231.7^.02^^1^F
"IX",231.7,231.7,"AC",11.1,2,0)
2^F^231.7^.03^^2^F
"IX",231.7,231.7,"AC",11.1,3,0)
3^F^231.7^.06^^3^F
"IX",231.7,231.7,"AC",11.1,4,0)
4^F^231.7^.04^^^F
"IX",231.7,231.7,"AD",0)
231.7^AD^SITE,AREA,DUZ,IEN^R^^R^IR^I^231.7^^^^^S
"IX",231.7,231.7,"AD",.1,0)
^^4^4^3081005^
"IX",231.7,231.7,"AD",.1,1,0)
This cross reference allows searching the file for an entry matching a 
"IX",231.7,231.7,"AD",.1,2,0)
particular DUZ (say, to look up a color map).  Since a person may work as 
"IX",231.7,231.7,"AD",.1,3,0)
staff in multiple areas, this cross reference allows finding the staff 
"IX",231.7,231.7,"AD",.1,4,0)
record that applies to the person's activity in a specific area.
"IX",231.7,231.7,"AD",1)
S ^EDPB(231.7,"AD",X(1),X(2),X(3),DA)=""
"IX",231.7,231.7,"AD",2)
K ^EDPB(231.7,"AD",X(1),X(2),X(3),DA)
"IX",231.7,231.7,"AD",2.5)
K ^EDPB(231.7,"AD")
"IX",231.7,231.7,"AD",11.1,0)
^.114IA^3^3
"IX",231.7,231.7,"AD",11.1,1,0)
1^F^231.7^.02^^1^F
"IX",231.7,231.7,"AD",11.1,2,0)
2^F^231.7^.03^^2^F
"IX",231.7,231.7,"AD",11.1,3,0)
3^F^231.7^.01^^3^F
"IX",232.5,232.5,"C",0)
232.5^C^Index by site and area^R^^R^IR^I^232.5^^^^^LS
"IX",232.5,232.5,"C",1)
S ^EDPB(232.5,"C",X(1),X(2),X(3),DA)=""
"IX",232.5,232.5,"C",2)
K ^EDPB(232.5,"C",X(1),X(2),X(3),DA)
"IX",232.5,232.5,"C",2.5)
K ^EDPB(232.5,"C")
"IX",232.5,232.5,"C",11.1,0)
^.114IA^3^3
"IX",232.5,232.5,"C",11.1,1,0)
1^F^232.5^.02^^1^F
"IX",232.5,232.5,"C",11.1,1,3)

"IX",232.5,232.5,"C",11.1,2,0)
2^F^232.5^.03^^2^F
"IX",232.5,232.5,"C",11.1,2,3)

"IX",232.5,232.5,"C",11.1,3,0)
3^F^232.5^.01^^3^F
"IX",232.5,232.5,"C",11.1,3,3)

"IX",232.6,232.6,"C",0)
232.6^C^Index by site and area^R^^R^IR^I^232.6^^^^^LS
"IX",232.6,232.6,"C",1)
S ^EDPB(232.6,"C",X(1),X(2),DA)=""
"IX",232.6,232.6,"C",2)
K ^EDPB(232.6,"C",X(1),X(2),DA)
"IX",232.6,232.6,"C",2.5)
K ^EDPB(232.6,"C")
"IX",232.6,232.6,"C",11.1,0)
^.114IA^2^2
"IX",232.6,232.6,"C",11.1,1,0)
1^F^232.6^.02^^1^F
"IX",232.6,232.6,"C",11.1,1,3)

"IX",232.6,232.6,"C",11.1,2,0)
2^F^232.6^.03^^2^F
"IX",232.6,232.6,"C",11.1,2,3)

"IX",232.71,232.71,"C",0)
232.71^C^Fully Qualified Name (PackageName::ClassName)^MU^^R^IR^I^232.71^^^^^LS
"IX",232.71,232.71,"C",1)
S ^EDPB(232.71,"C",X(1)_"::"_X(2),DA)=""
"IX",232.71,232.71,"C",2)
K ^EDPB(232.71,"C",X(1)_"::"_X(2),DA)
"IX",232.71,232.71,"C",2.5)
K ^EDPB(232.71,"C")
"IX",232.71,232.71,"C",11.1,0)
^.114IA^2^2
"IX",232.71,232.71,"C",11.1,1,0)
1^F^232.71^.02^^^F
"IX",232.71,232.71,"C",11.1,1,3)

"IX",232.71,232.71,"C",11.1,2,0)
2^F^232.71^.01^^^F
"IX",232.71,232.71,"C",11.1,2,3)

"KRN",19,13525,-1)
0^1
"KRN",19,13525,0)
EDPF TRACKING SYSTEM^EDIS version 1.0^^B^^^^^^^^KERNEL
"KRN",19,13525,1,0)
^19.06^1^1^3120531^^^^
"KRN",19,13525,1,1,0)
Context option for ED Tracking System RPC calls at local facility.
"KRN",19,13525,99.1)
61001,51187
"KRN",19,13525,"RPC",0)
^19.05P^9^9
"KRN",19,13525,"RPC",7,0)
EDPCTRL RPC
"KRN",19,13525,"RPC",8,0)
EDPCBRD RPC
"KRN",19,13525,"RPC",9,0)
EDPGLOB RPC
"KRN",19,13525,"U")
EDIS VERSION 1.0
"KRN",19.1,629,-1)
0^1
"KRN",19.1,629,0)
EDPR ADHOC^Adhoc reports key for EDIS
"KRN",19.1,629,1,0)
^^1^1^3120612^
"KRN",19.1,629,1,1,0)
This key allows a user to access the ad-hoc reports in EDIS.
"KRN",19.1,630,-1)
0^2
"KRN",19.1,630,0)
EDPF WORKSHEETS^EDP Worksheet Configuration
"KRN",19.1,630,1,0)
^^1^1^3120622^
"KRN",19.1,630,1,1,0)
This key controls access to the ability to edit worksheet configurations.
"KRN",8994,1391,-1)
0^1
"KRN",8994,1391,0)
EDPGLOB RPC^RPC^EDPGLOB^4^R^^^^1^^0
"KRN",8994,1391,1,0)
^8994.01^3^3^3120531^^^^
"KRN",8994,1391,1,1,0)
This RPC acts as the "front controller" for laboratory data calls. The 
"KRN",8994,1391,1,2,0)
RPC uses the parameters passed in to gather lab data for a given patient, 
"KRN",8994,1391,1,3,0)
and return the data in XML format.
"KRN",8994,1391,2,0)
^8994.02A^2^2
"KRN",8994,1391,2,1,0)
PARAMS^2^^0^1
"KRN",8994,1391,2,2,0)
PARAMS2^2^^0^2
"KRN",8994,1391,2,"B","PARAMS",1)

"KRN",8994,1391,2,"B","PARAMS2",2)

"KRN",8994,1391,2,"PARAMSEQ",1,1)

"KRN",8994,1391,2,"PARAMSEQ",2,2)

"KRN",8994,1391,3,0)
^8994.03^1^1^3120531^^^
"KRN",8994,1391,3,1,0)
The return results are formatted as an XML document.
"MBREQ")
0
"ORD",3,19.1)
19.1;3;;;KEY^XPDTA1;KEYF1^XPDIA1;KEYE1^XPDIA1;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",587,-1)
1^1
"PKG",587,0)
EMERGENCY DEPARTMENT^EDP^Emergency Department Information System
"PKG",587,20,0)
^9.402P^^
"PKG",587,22,0)
^9.49I^1^1
"PKG",587,22,1,0)
2.0^3130517^3130419^123456959
"PKG",587,22,1,"PAH",1,0)
6^3130617^123456959
"PKG",587,22,1,"PAH",1,1,0)
^^1^1^3130617
"PKG",587,22,1,"PAH",1,1,1,0)
This patch resolves multiple reported errors and issues within EDIS.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
35
"RTN","EDP2PRE")
0^^B852824^n/a
"RTN","EDP2PRE",1,0)
EDP2PRE ;SLC/BWF - Post-init for facility install ;6/5/13 2:25pm
"RTN","EDP2PRE",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDP2PRE",3,0)
 ;
"RTN","EDP2PRE",4,0)
 D CLEAR,DEL
"RTN","EDP2PRE",5,0)
 Q
"RTN","EDP2PRE",6,0)
 ;
"RTN","EDP2PRE",7,0)
CLEAR ;
"RTN","EDP2PRE",8,0)
 N I
"RTN","EDP2PRE",9,0)
 ; delete components
"RTN","EDP2PRE",10,0)
 S I=0 F  S I=$O(^EDPB(232.72,I)) Q:'I  D
"RTN","EDP2PRE",11,0)
 .S FDA(232.72,I_",",.01)="@" D FILE^DIE(,"FDA")
"RTN","EDP2PRE",12,0)
 ; delete sections
"RTN","EDP2PRE",13,0)
 S I=0 F  S I=$O(^EDPB(232.71,I)) Q:'I  D
"RTN","EDP2PRE",14,0)
 .S FDA(232.71,I_",",.01)="@" D FILE^DIE(,"FDA")
"RTN","EDP2PRE",15,0)
 ; delete worksheets
"RTN","EDP2PRE",16,0)
 S I=0 F  S I=$O(^EDPB(232.6,I)) Q:'I  D
"RTN","EDP2PRE",17,0)
 .S FDA(232.6,I_",",.01)="@" D FILE^DIE(,"FDA")
"RTN","EDP2PRE",18,0)
 ; delete widgets
"RTN","EDP2PRE",19,0)
 S I=0 F  S I=$O(^EDPB(232.73,I)) Q:'I  D
"RTN","EDP2PRE",20,0)
 .S FDA(232.73,I_",",.01)="@" D FILE^DIE(,"FDA")
"RTN","EDP2PRE",21,0)
 Q
"RTN","EDP2PRE",22,0)
DEL ;
"RTN","EDP2PRE",23,0)
 ; delete data dictionary for file 232.6
"RTN","EDP2PRE",24,0)
 N ERR
"RTN","EDP2PRE",25,0)
 D DELIXN^DDMOD(232.72,"C","K","","")
"RTN","EDP2PRE",26,0)
 Q
"RTN","EDP2PST")
0^^B10565179^n/a
"RTN","EDP2PST",1,0)
EDP2PST ;SLC/BWF - Post-init for facility install ;5/28/12 10:30am
"RTN","EDP2PST",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDP2PST",3,0)
 ;
"RTN","EDP2PST",4,0)
 D CONVERT,UPDWKS,DEFROOM,REMX9999
"RTN","EDP2PST",5,0)
 Q
"RTN","EDP2PST",6,0)
 ;
"RTN","EDP2PST",7,0)
CONVERT ; convert old role values (set of codes) to new pointer structure
"RTN","EDP2PST",8,0)
 ; old role values of 'P','R', and 'N' must match one of the new role
"RTN","EDP2PST",9,0)
 ; abbreviations in the CPE role file.
"RTN","EDP2PST",10,0)
 N IEN,DAT,OROLE,NROLEPTR,ERR
"RTN","EDP2PST",11,0)
 S IEN=0 F  S IEN=$O(^EDPB(231.7,IEN)) Q:'IEN  D
"RTN","EDP2PST",12,0)
 .S DAT=$G(^EDPB(231.7,IEN,0))
"RTN","EDP2PST",13,0)
 .S OROLE=$P(DAT,U,6) Q:OROLE=""!(OROLE>0)
"RTN","EDP2PST",14,0)
 .; if OROLE is numeric, it has already been converted, so quit.
"RTN","EDP2PST",15,0)
 .I OROLE,$D(^EDPB(232.5,OROLE)) Q
"RTN","EDP2PST",16,0)
 .; if this particular role cannot be mapped, set it to null.
"RTN","EDP2PST",17,0)
 .S NROLEPTR=$O(^EDPB(232.5,"C",OROLE,"")) S:'NROLEPTR NROLEPTR=""
"RTN","EDP2PST",18,0)
 .S FDA(231.7,IEN_",",.06)=NROLEPTR D FILE^DIE(,"FDA","ERR") K FDA
"RTN","EDP2PST",19,0)
 Q
"RTN","EDP2PST",20,0)
UPDWKS ; update all worksheets with the proper institution/area
"RTN","EDP2PST",21,0)
 N WKS,EDPSITE,EDPSTA
"RTN","EDP2PST",22,0)
 Q:'$D(DUZ)
"RTN","EDP2PST",23,0)
 S EDPSITE=DUZ(2),EDPSTA=$$STA^XUAF4(DUZ(2))
"RTN","EDP2PST",24,0)
 S WKS=0 F  S WKS=$O(^EDPB(232.6,WKS)) Q:'WKS  D
"RTN","EDP2PST",25,0)
 .S FDA(232.6,WKS_",",.02)=EDPSITE
"RTN","EDP2PST",26,0)
 .S FDA(232.6,WKS_",",.03)=EDPSTA
"RTN","EDP2PST",27,0)
 .D FILE^DIE(,"FDA")
"RTN","EDP2PST",28,0)
 Q
"RTN","EDP2PST",29,0)
DEFROOM ;
"RTN","EDP2PST",30,0)
 N INST,AREA,DEFSTAT,NEWIEN,NRIEN
"RTN","EDP2PST",31,0)
 ; do not add EDIS_DEFAULT if it already exists.
"RTN","EDP2PST",32,0)
 Q:$D(^EDPB(231.8,"B","EDIS_DEFAULT"))
"RTN","EDP2PST",33,0)
 S INST=$G(DUZ(2)) I 'INST D  Q
"RTN","EDP2PST",34,0)
 .D MES^XPDUTL("Missing or invalid institution. Cannot Continue.")
"RTN","EDP2PST",35,0)
 .S XPDABORT=1
"RTN","EDP2PST",36,0)
 S AREA=$O(^EDPB(231.9,"C",DUZ(2),0))
"RTN","EDP2PST",37,0)
 I 'AREA D  Q
"RTN","EDP2PST",38,0)
 .D MES^XPDUTL("Missing or invalid Area. Please check your TRACKING AREA file and insure there is an area associated with your institution.")
"RTN","EDP2PST",39,0)
 .S XPDABORT=1
"RTN","EDP2PST",40,0)
 S DEFSTAT=$O(^EDPB(233.1,"B","edp.status.waiting",0))
"RTN","EDP2PST",41,0)
 S FDA(231.8,"+1,",.01)="EDIS_DEFAULT"
"RTN","EDP2PST",42,0)
 S FDA(231.8,"+1,",.02)=INST
"RTN","EDP2PST",43,0)
 S FDA(231.8,"+1,",.03)=AREA
"RTN","EDP2PST",44,0)
 S FDA(231.8,"+1,",.05)=.1
"RTN","EDP2PST",45,0)
 S FDA(231.8,"+1,",.06)="EDIS_DEFAULT"
"RTN","EDP2PST",46,0)
 S FDA(231.8,"+1,",.07)=0
"RTN","EDP2PST",47,0)
 S FDA(231.8,"+1,",.08)=DEFSTAT
"RTN","EDP2PST",48,0)
 S FDA(231.8,"+1,",.09)=1
"RTN","EDP2PST",49,0)
 S FDA(231.8,"+1,",.11)=""
"RTN","EDP2PST",50,0)
 S FDA(231.8,"+1,",.13)=1
"RTN","EDP2PST",51,0)
 D UPDATE^DIE(,"FDA","NEWIEN")
"RTN","EDP2PST",52,0)
 S NRIEN=0,NRIEN=$O(NEWIEN(NRIEN)) S NRIEN=$G(NEWIEN(NRIEN))
"RTN","EDP2PST",53,0)
 Q
"RTN","EDP2PST",54,0)
REMX9999 ; Loop through all display boards and rebuild definitions, removing '@last4' and '@alerts'.
"RTN","EDP2PST",55,0)
 N AREA,BID,BATT,BATTDAT,ATTRIB,CTR
"RTN","EDP2PST",56,0)
 S AREA=0 F  S AREA=$O(^EDPB(231.9,AREA)) Q:'AREA  D
"RTN","EDP2PST",57,0)
 .S CTR=0
"RTN","EDP2PST",58,0)
 .S PTNM=$$SRCHPTNM(AREA)
"RTN","EDP2PST",59,0)
 .I 'PTNM S CTR=$G(CTR)+1,ATTRIB(CTR)=$$PTNM()
"RTN","EDP2PST",60,0)
 .S BID=0 F  S BID=$O(^EDPB(231.9,AREA,4,BID)) Q:'BID  D
"RTN","EDP2PST",61,0)
 ..S IENS=BID_","_AREA_","
"RTN","EDP2PST",62,0)
 ..S BATT=0 F  S BATT=$O(^EDPB(231.9,AREA,4,BID,1,BATT)) Q:'BATT  D
"RTN","EDP2PST",63,0)
 ...S BATTDAT=$G(^EDPB(231.9,AREA,4,BID,1,BATT,0))
"RTN","EDP2PST",64,0)
 ...Q:BATTDAT["@last4"!(BATTDAT["@alerts")
"RTN","EDP2PST",65,0)
 ...S CTR=$G(CTR)+1,ATTRIB(CTR)=BATTDAT
"RTN","EDP2PST",66,0)
 ..D WP^DIE(231.94,IENS,1,"K","ATTRIB") K ATTRIB
"RTN","EDP2PST",67,0)
 Q
"RTN","EDP2PST",68,0)
SRCHPTNM(AREA) ;
"RTN","EDP2PST",69,0)
 N BID,X,RET
"RTN","EDP2PST",70,0)
 S RET=0
"RTN","EDP2PST",71,0)
 S BID=0 F  S BID=$O(^EDPB(231.9,AREA,4,BID)) Q:'BID  D
"RTN","EDP2PST",72,0)
 .S X=0 F  S X=$O(^EDPB(231.9,AREA,4,BID,1,X)) Q:'X!(RET)  D
"RTN","EDP2PST",73,0)
 ..I $G(^EDPB(231.9,AREA,4,BID,1,X,0))["@ptNm" S RET=1
"RTN","EDP2PST",74,0)
 Q RET
"RTN","EDP2PST",75,0)
PTNM() ;
"RTN","EDP2PST",76,0)
 Q "<col att=""@ptNm"" header=""Patient"" color="""" width=""60"" label=""Patient Name""/>"
"RTN","EDPARPT")
0^10^B95079217^n/a
"RTN","EDPARPT",1,0)
EDPARPT ;SLC/BWF - Ad Hoc Reports ;5/16/2012 11:51am
"RTN","EDPARPT",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPARPT",3,0)
 ;
"RTN","EDPARPT",4,0)
GETREPL(EDPXML,P1,P2) ; get report list
"RTN","EDPARPT",5,0)
 N IEN,CNT,ARRAY,EDPRES
"RTN","EDPARPT",6,0)
 S EDPRES=$NA(^TMP("EDPARPT",$J)) K @EDPRES
"RTN","EDPARPT",7,0)
 S ARRAY=$NA(^TMP("EDPARPT",$J,"reports",1)) K @ARRAY
"RTN","EDPARPT",8,0)
 S IEN=$G(P1("id")) I 'IEN S IEN=$G(P1("id",1))
"RTN","EDPARPT",9,0)
 I IEN D  Q
"RTN","EDPARPT",10,0)
 .D BLDRITEM(1,IEN,ARRAY,.P1)
"RTN","EDPARPT",11,0)
 .D TOXMLG^EDPXML(EDPRES,EDPXML) K @ARRAY,@EDPRES
"RTN","EDPARPT",12,0)
 S (IEN,CNT)=0 F  S IEN=$O(^EDPB(232.1,IEN)) Q:'IEN  D
"RTN","EDPARPT",13,0)
 .S CNT=CNT+1
"RTN","EDPARPT",14,0)
 .D BLDRITEM(CNT,IEN,ARRAY,.P1)
"RTN","EDPARPT",15,0)
 D TOXMLG^EDPXML(EDPRES,EDPXML)
"RTN","EDPARPT",16,0)
 K @ARRAY,@EDPRES
"RTN","EDPARPT",17,0)
 Q
"RTN","EDPARPT",18,0)
BLDRITEM(CNT,IEN,ARRAY,PARAM) ;
"RTN","EDPARPT",19,0)
 N X0,RIEN,RID,RNAME,RABBR,EIEN,ESEQ,EPTR,E0
"RTN","EDPARPT",20,0)
 S X0=$G(^EDPB(232.1,IEN,0))
"RTN","EDPARPT",21,0)
 S @ARRAY@("report",CNT,"name")=$P(X0,U,1)
"RTN","EDPARPT",22,0)
 S @ARRAY@("report",CNT,"id")=IEN
"RTN","EDPARPT",23,0)
 S @ARRAY@("report",CNT,"inactive")=$S($P(X0,U,2)>0:"true",1:"false")
"RTN","EDPARPT",24,0)
 S RIEN=0 F  S RIEN=$O(^EDPB(232.1,IEN,2,RIEN)) Q:'RIEN  D
"RTN","EDPARPT",25,0)
 .S RID=+$G(^EDPB(232.1,IEN,2,RIEN,0))
"RTN","EDPARPT",26,0)
 .S RNAME=$$GET1^DIQ(232.5,RID,.01,"E")
"RTN","EDPARPT",27,0)
 .S RABBR=$$GET1^DIQ(232.5,RID,.02,"E")
"RTN","EDPARPT",28,0)
 .S @ARRAY@("report",CNT,"role",RID,"id")=RID
"RTN","EDPARPT",29,0)
 .S @ARRAY@("report",CNT,"role",RID,"name")=RNAME
"RTN","EDPARPT",30,0)
 .S @ARRAY@("report",CNT,"role",RID,"abbreviation")=RABBR
"RTN","EDPARPT",31,0)
 I $G(PARAM("elements"))="true"!($G(PARAM("id"))>0) D
"RTN","EDPARPT",32,0)
 .S EIEN=0 F  S EIEN=$O(^EDPB(232.1,IEN,1,EIEN)) Q:'EIEN  D
"RTN","EDPARPT",33,0)
 ..S E0=$G(^EDPB(232.1,IEN,1,EIEN,0))
"RTN","EDPARPT",34,0)
 ..S ESEQ=$P(E0,U),EPTR=$P(E0,U,2)
"RTN","EDPARPT",35,0)
 ..S @ARRAY@("report",CNT,"element",EIEN,"sequence")=ESEQ
"RTN","EDPARPT",36,0)
 ..S @ARRAY@("report",CNT,"element",EIEN,"id")=EPTR
"RTN","EDPARPT",37,0)
 ..S @ARRAY@("report",CNT,"element",EIEN,"name")=$$GET1^DIQ(232.11,EPTR,.01,"E")
"RTN","EDPARPT",38,0)
 Q 
"RTN","EDPARPT",39,0)
SAVE(EDPXML,P1,P2) ; save report definition
"RTN","EDPARPT",40,0)
 N X,ID,NAME,REMOVE,IENS,INACTIVE,EDITABLE,ELEM,EIENS,ROLE,RIENS,ERR,NEWIEN,NIEN
"RTN","EDPARPT",41,0)
 I '$D(P1) Q
"RTN","EDPARPT",42,0)
 S ID=$G(P1("id")),NAME=$G(P1("name"))
"RTN","EDPARPT",43,0)
 S REMOVE=$G(P1("remove")),REMOVE=$S(REMOVE="true":1,1:0)
"RTN","EDPARPT",44,0)
 ; convert inactive and editable values to internal
"RTN","EDPARPT",45,0)
 S INACTIVE=$G(P1("inactive")),INACTIVE=$S(INACTIVE="true":1,1:0)
"RTN","EDPARPT",46,0)
 S EDITABLE=$G(P1("editable")),EDITABLE=$S(INACTIVE="true":1,1:0)
"RTN","EDPARPT",47,0)
 ; if remove and an id is sent, delete the entry and quit
"RTN","EDPARPT",48,0)
 I ID'="",REMOVE S FDA(232.1,ID_",",.01)="@" D FILE^DIE(,"FDA") K FDA D SUCCESS(EDPXML,"<status>deleted</status>") Q
"RTN","EDPARPT",49,0)
 S IENS=$S(ID="":"+1,",1:ID_",")
"RTN","EDPARPT",50,0)
 K FDA
"RTN","EDPARPT",51,0)
 S FDA(232.1,IENS,.01)=NAME
"RTN","EDPARPT",52,0)
 S FDA(232.1,IENS,.02)=INACTIVE
"RTN","EDPARPT",53,0)
 S FDA(232.1,IENS,.03)=EDITABLE
"RTN","EDPARPT",54,0)
 ; if there is no id, then we are adding a new entry
"RTN","EDPARPT",55,0)
 I 'ID D  Q
"RTN","EDPARPT",56,0)
 .D UPDATE^DIE(,"FDA","NEWIEN","ERR")
"RTN","EDPARPT",57,0)
 .I $D(ERR) D WSERR^EDPBWS("An error occured while filing a new entry.") Q
"RTN","EDPARPT",58,0)
 .S NIEN=$O(NEWIEN(0)),NIEN=$G(NEWIEN(NIEN))
"RTN","EDPARPT",59,0)
 .D REPMULTS(NIEN,.P2)
"RTN","EDPARPT",60,0)
 .S P1("id")=NIEN,P1("elements")="true" D GETREPL(EDPXML,.P1)
"RTN","EDPARPT",61,0)
 ; if editing an entry (ID is defined), loop through the multiples and clear them out so they can be rebuilt
"RTN","EDPARPT",62,0)
 S ELEM=0 F  S ELEM=$O(^EDPB(232.1,ID,1,ELEM)) Q:'ELEM  D
"RTN","EDPARPT",63,0)
 .S EIENS=ELEM_","_ID_","
"RTN","EDPARPT",64,0)
 .S FDA(232.12,EIENS,.01)="@" D FILE^DIE(,"FDA") K FDA
"RTN","EDPARPT",65,0)
 S ROLE=0 F  S ROLE=$O(^EDPB(232.1,ID,1,ROLE)) Q:'ROLE  D
"RTN","EDPARPT",66,0)
 .S RIENS=ROLE_","_ID_","
"RTN","EDPARPT",67,0)
 .S FDA(232.13,RIENS,.01)="@" D FILE^DIE(,"FDA") K FDA
"RTN","EDPARPT",68,0)
 ; now file the data for 232.1 main file
"RTN","EDPARPT",69,0)
 D FILE^DIE(,"FDA") K FDA
"RTN","EDPARPT",70,0)
 D REPMULTS(NIEN,.P2)
"RTN","EDPARPT",71,0)
 S P1("id")=NIEN,P1("elements")="true" D GETREPL(EDPXML,.P1)
"RTN","EDPARPT",72,0)
 Q
"RTN","EDPARPT",73,0)
REPMULTS(IEN,PARAMS) ; update the 'display elements' and 'roles multiples
"RTN","EDPARPT",74,0)
 N ROLES,ELEMS,SEQ,LSEQ,ID,X,RLOOP
"RTN","EDPARPT",75,0)
 ; loop through elements and order them in an array
"RTN","EDPARPT",76,0)
 S X=0 F  S X=$O(PARAMS("element",X)) Q:'X  D
"RTN","EDPARPT",77,0)
 .S ID=$P(PARAMS("element",X),U),SEQ=$P(PARAMS("element",X),U,2)
"RTN","EDPARPT",78,0)
 .S ELEMS(SEQ)=ID
"RTN","EDPARPT",79,0)
 S LSEQ=0 F  S LSEQ=$O(ELEMS(LSEQ)) Q:'LSEQ  D
"RTN","EDPARPT",80,0)
 .S FDA(232.12,"+1,"_IEN_",",.01)=LSEQ
"RTN","EDPARPT",81,0)
 .S FDA(232.12,"+1,"_IEN_",",.02)=$G(ELEMS(LSEQ))
"RTN","EDPARPT",82,0)
 .D UPDATE^DIE(,"FDA") K FDA
"RTN","EDPARPT",83,0)
 ; order of the roles are not important, we can just file them
"RTN","EDPARPT",84,0)
 S RLOOP=0 F  S RLOOP=$O(PARAMS("role",RLOOP)) Q:'RLOOP  D
"RTN","EDPARPT",85,0)
 .S FDA(232.13,"+1,"_IEN_",",.01)=$G(PARAMS("role",RLOOP))
"RTN","EDPARPT",86,0)
 .D UPDATE^DIE(,"FDA") K FDA
"RTN","EDPARPT",87,0)
 Q
"RTN","EDPARPT",88,0)
SUCCESS(EDPXML,DATA) ;
"RTN","EDPARPT",89,0)
 N EDPCNT
"RTN","EDPARPT",90,0)
 S EDPCNT=0 D XMLG^EDPX(DATA,EDPCNT,EDPXML)
"RTN","EDPARPT",91,0)
 Q
"RTN","EDPARPT",92,0)
GETELM(EDPXML,P1,P2) ; get report element list
"RTN","EDPARPT",93,0)
 N IEN,EDPRES,ARRAY,CNT
"RTN","EDPARPT",94,0)
 S EDPRES=$NA(^TMP("EDPARPT",$J)) K @EDPRES
"RTN","EDPARPT",95,0)
 S ARRAY=$NA(^TMP("EDPARPT",$J,"reportElements",1)) K @ARRAY
"RTN","EDPARPT",96,0)
 S (IEN,CNT)=0 F  S IEN=$O(^EDPB(232.11,IEN)) Q:'IEN  D
"RTN","EDPARPT",97,0)
 .S CNT=CNT+1
"RTN","EDPARPT",98,0)
 .S @ARRAY@("element",CNT,"id")=IEN
"RTN","EDPARPT",99,0)
 .S @ARRAY@("element",CNT,"name")=$$GET1^DIQ(232.11,IEN,.01,"E")
"RTN","EDPARPT",100,0)
 D TOXMLG^EDPXML(EDPRES,EDPXML)
"RTN","EDPARPT",101,0)
 Q
"RTN","EDPARPT",102,0)
TESTEXE ;
"RTN","EDPARPT",103,0)
 S P1("start")=2980101
"RTN","EDPARPT",104,0)
 S P1("id")=1
"RTN","EDPARPT",105,0)
 S EDPSITE=807
"RTN","EDPARPT",106,0)
 S EDPXML=$NA(^TMP("EDPGLOB",$J)) K @EDPXML
"RTN","EDPARPT",107,0)
 D EXE^EDPARPT(EDPXML,.P1)
"RTN","EDPARPT",108,0)
 Q
"RTN","EDPARPT",109,0)
 ; input
"RTN","EDPARPT",110,0)
 ;    EDPXML   - $NA of global array where XML will be stored
"RTN","EDPARPT",111,0)
 ;    P1       - single diminsional array that contains top level data
"RTN","EDPARPT",112,0)
 ;    P2       - multiple diminsion array that contains 'custom' report structure
"RTN","EDPARPT",113,0)
EXE(EDPXML,P1,P2) ; execute a report
"RTN","EDPARPT",114,0)
 N RID,EDPRES,ARRAY,EID,E0,ESEQ,EPTR,EARRY,CSV,CSVARRY,ELOOP
"RTN","EDPARPT",115,0)
 S EDPRES=$NA(^TMP("EDPARPT",$J)) K @EDPRES
"RTN","EDPARPT",116,0)
 S ARRAY=$NA(^TMP("EDPARPT",$J,"records",1)) K @ARRAY
"RTN","EDPARPT",117,0)
 S XMLARRY=$NA(^TMP("EDPARPT",$J,"logEntries",1)) K @XMLARRY
"RTN","EDPARPT",118,0)
 S CSVARRY=$NA(^TMP("EDPARPT",$J,"CSV")) K @CSVARRY
"RTN","EDPARPT",119,0)
 S RID=$G(P1("id")) ; set report id
"RTN","EDPARPT",120,0)
 S CSV=$G(P1("csv")),CSV=$S(CSV="true":1,1:0),CNT=0
"RTN","EDPARPT",121,0)
 ; if report 'id' is passed in, build the sequence and definition information
"RTN","EDPARPT",122,0)
 I RID D
"RTN","EDPARPT",123,0)
 .S EID=0 F  S EID=$O(^EDPB(232.1,RID,1,EID)) Q:'EID  D
"RTN","EDPARPT",124,0)
 ..S E0=$G(^EDPB(232.1,RID,1,EID,0)),ESEQ=$P(E0,U),EPTR=$P(E0,U,2)
"RTN","EDPARPT",125,0)
 ..S EARRY(ESEQ)=EPTR_U_$$EDAT(EPTR)
"RTN","EDPARPT",126,0)
 ; loop through 'custom' definition (P2) and build EARRY(SEQ)
"RTN","EDPARPT",127,0)
 I 'RID D
"RTN","EDPARPT",128,0)
 .S ELOOP=0 F  S ELOOP=$O(P2("element",ELOOP)) Q:'ELOOP  D
"RTN","EDPARPT",129,0)
 ..S EPTR=$P(P2("element",ELOOP),U)
"RTN","EDPARPT",130,0)
 ..S ESEQ=$P(P2("element",ELOOP),U,2)
"RTN","EDPARPT",131,0)
 ..S EARRY(ESEQ)=EPTR_U_$$EDAT(EPTR)
"RTN","EDPARPT",132,0)
 D SRCH(EDPXML,XMLARRY,CSVARRY,EDPRES,ARRAY,.EARRY,.P1,CSV)
"RTN","EDPARPT",133,0)
 I '$G(CSV) D TOXMLG^EDPXML(XMLARRY,EDPXML)
"RTN","EDPARPT",134,0)
 ;I $G(CSV) D TOXMLG^EDPXML(CSVARRY,EDPXML)
"RTN","EDPARPT",135,0)
 K @EDPRES,@ARRAY,@XMLARRY,@CSVARRY
"RTN","EDPARPT",136,0)
 Q
"RTN","EDPARPT",137,0)
 ; using search criteria (from parameters), search the ED log entries.
"RTN","EDPARPT",138,0)
SRCH(EDPXML,XMLARRY,CSVARRY,EDPRES,ARRAY,EARRY,P1,CSV) ;
"RTN","EDPARPT",139,0)
 N LOGTIME,LOGID,START,STOP,RES,PROV,PAT,CNT,AREA
"RTN","EDPARPT",140,0)
 ; check for parameters
"RTN","EDPARPT",141,0)
 ;S CSV=$G(P1,"csv"),CSV=$S(CSV="true":1,1:0),CNT=0
"RTN","EDPARPT",142,0)
 ; if no start date is passed, look back 30 days???
"RTN","EDPARPT",143,0)
 S START=$G(P1("start")) I 'START S START=$$FMADD^XLFDT(DT,-30)
"RTN","EDPARPT",144,0)
 ; if no stop date is passed, set the stop to NOW
"RTN","EDPARPT",145,0)
 S STOP=$G(P1("stop")) I 'STOP S STOP=$$NOW^XLFDT
"RTN","EDPARPT",146,0)
 S RES=$G(P1("resident")),PROV=$G(P1("provider")),PAT=$G(P1("patient"))
"RTN","EDPARPT",147,0)
 S AREA=$G(P1("area"))
"RTN","EDPARPT",148,0)
 ; loop through the ED LOG file to get the needed data
"RTN","EDPARPT",149,0)
 S LOGTIME=START-.000001 F  S LOGTIME=$O(^EDP(230,"ATI",EDPSITE,LOGTIME)) Q:'LOGTIME  D
"RTN","EDPARPT",150,0)
 .S LOGID=0 F  S LOGID=$O(^EDP(230,"ATI",EDPSITE,LOGTIME,LOGID)) Q:'LOGID  D
"RTN","EDPARPT",151,0)
 ..; if patient is passed as a parameter, and it doesn't match, quit
"RTN","EDPARPT",152,0)
 ..I PAT,PAT'=$$GET1^DIQ(230,LOGID,.06,"I") Q
"RTN","EDPARPT",153,0)
 ..; if provider or resident are passed and this entry is not for the provider/resident, quit
"RTN","EDPARPT",154,0)
 ..;I PROV,'$$CHKHLOG(LOGID,3.5,PROV) Q
"RTN","EDPARPT",155,0)
 ..;I RES,'$$CHKHLOG(LOGID,3.7,RES) Q
"RTN","EDPARPT",156,0)
 ..S CNT=$G(CNT)+1
"RTN","EDPARPT",157,0)
 ..D BUILD(EDPXML,XMLARRY,CSVARRY,LOGID,CNT,EDPRES,ARRAY,.EARRY,CSV,AREA)
"RTN","EDPARPT",158,0)
 Q
"RTN","EDPARPT",159,0)
BUILD(EDPXML,XMLARRY,CSVARRY,LOGID,CNT,EDPRES,ARRAY,EARRY,CSV,AREA) ; Output requested fields from log ID.
"RTN","EDPARPT",160,0)
 N ESEQ,EPTR,LFIL,HFIL,LFLD,HFLD,TAB,SARRY,E0,LOOP,ICNT,EXE,IARRY,VAL,XHDR,DCNT,XMLLINE,XMLCNT,FHDR,DCNT,HDR,LOGIEN,FORMAT
"RTN","EDPARPT",161,0)
 ; if there is a reportID, grab the structure for the EDP REPORT TEMPLATE file and process
"RTN","EDPARPT",162,0)
 S LFIL=230,HFIL=230.1,TAB=$C(9),CSVCNT=0
"RTN","EDPARPT",163,0)
 ; create temporary storage array for data. this will be used to aggregate the data
"RTN","EDPARPT",164,0)
 S SARRY=$NA(^TMP("EDPARPT",$J,"BUILD")) K @SARRY
"RTN","EDPARPT",165,0)
 ; get the main ED LOG (#230) ien
"RTN","EDPARPT",166,0)
 I $G(CSV) S $P(FHDR,TAB,1)="logID"
"RTN","EDPARPT",167,0)
 S ESEQ=0 F  S ESEQ=$O(EARRY(ESEQ)) Q:'ESEQ  D
"RTN","EDPARPT",168,0)
 .S E0=$G(EARRY(ESEQ))
"RTN","EDPARPT",169,0)
 .S EIEN=$P(E0,U),LFLD=$P(E0,U,4),HFLD=$P(E0,U,5),HDR=$P(E0,U,6)
"RTN","EDPARPT",170,0)
 .S EXE=$$GET1^DIQ(232.11,EIEN,2,"E"),EXE=$TR(EXE,"|","^")
"RTN","EDPARPT",171,0)
 .S FORMAT=$$GET1^DIQ(232.11,EIEN,1,"E"),FORMAT=$TR(FORMAT,"|","^")
"RTN","EDPARPT",172,0)
 .I $G(CSV) S $P(FHDR,TAB,ESEQ+1)=HDR ; set up header if CSV
"RTN","EDPARPT",173,0)
 .; if EXE is defined, use it. If it is not defined for this element, a simple $$GET1^DIQ will suffice
"RTN","EDPARPT",174,0)
 .; EXE is intended for complex elements, such as data that can be a multiple or needs to be calculated.
"RTN","EDPARPT",175,0)
 .; EXE has two values that can be potentially returned. VAL and IARRAY
"RTN","EDPARPT",176,0)
 .; after EXE has been executed, FORMAT may be used (if available and applicable) to properly format the data for display to the UI.
"RTN","EDPARPT",177,0)
 .I '$L(EXE) D
"RTN","EDPARPT",178,0)
 ..S VAL=$$GET1^DIQ(230,LOGID,LFLD,"E")
"RTN","EDPARPT",179,0)
 ..I $L(FORMAT) X FORMAT
"RTN","EDPARPT",180,0)
 ..S @SARRY@(LOGID,EIEN,ESEQ,1)=$$ESC^EDPX(VAL) K VAL
"RTN","EDPARPT",181,0)
 .; if there is executable logic, run it and process results
"RTN","EDPARPT",182,0)
 .I $L(EXE) D
"RTN","EDPARPT",183,0)
 ..K IARRY,VAL X EXE
"RTN","EDPARPT",184,0)
 ..I $D(VAL) D  Q
"RTN","EDPARPT",185,0)
 ...; format the data if there is formatting logic
"RTN","EDPARPT",186,0)
 ...I $L(FORMAT) X FORMAT
"RTN","EDPARPT",187,0)
 ...S @SARRY@(LOGID,EIEN,ESEQ,1)=$$ESC^EDPX($G(VAL)) K VAL
"RTN","EDPARPT",188,0)
 ..I $O(IARRY(0)) D
"RTN","EDPARPT",189,0)
 ...S ICNT=0,LOOP=0 F  S LOOP=$O(IARRY(LOOP)) Q:'LOOP  D
"RTN","EDPARPT",190,0)
 ....S ICNT=ICNT+1
"RTN","EDPARPT",191,0)
 ....; format the data if there is formatting logic
"RTN","EDPARPT",192,0)
 ....S VAL=$G(IARRY(LOOP)) I $L(FORMAT) X FORMAT
"RTN","EDPARPT",193,0)
 ....S @SARRY@(LOGID,EIEN,ESEQ,ICNT)=$$ESC^EDPX(VAL) K VAL
"RTN","EDPARPT",194,0)
 ..; if no data is returned, we need to at least set the 1 node to null so the header will appear
"RTN","EDPARPT",195,0)
 ..I '$O(IARRY(0)) S @SARRY@(LOGID,EIEN,ESEQ,1)=""
"RTN","EDPARPT",196,0)
 ..K IARRY
"RTN","EDPARPT",197,0)
 ; if CSV, build it, clean up and quit
"RTN","EDPARPT",198,0)
 I $G(CSV) D BLDCSV(EDPXML,SARRY,CSVARRY,TAB,FHDR) K @SARRY Q
"RTN","EDPARPT",199,0)
 ; if not CSV, build XML
"RTN","EDPARPT",200,0)
 S LOGIEN=0 F  S LOGIEN=$O(@SARRY@(LOGIEN)) Q:'LOGIEN  D
"RTN","EDPARPT",201,0)
 .;I $G(CSV) S CSVCNT=$G(CSVCNT)+1
"RTN","EDPARPT",202,0)
 .S EIEN=0 F  S EIEN=$O(@SARRY@(LOGIEN,EIEN)) Q:'EIEN  D
"RTN","EDPARPT",203,0)
 ..S ESEQ=0 F  S ESEQ=$O(@SARRY@(LOGIEN,EIEN,ESEQ)) Q:'ESEQ  D
"RTN","EDPARPT",204,0)
 ...S XHDR=$P(EARRY(ESEQ),U,6)
"RTN","EDPARPT",205,0)
 ...S @XMLARRY@("logEntries",1,"logEntry",LOGIEN,"id")=LOGIEN
"RTN","EDPARPT",206,0)
 ...S @XMLARRY@("logEntries",1,"logEntry",LOGIEN,"elements",1,"element",ESEQ,"sequence")=ESEQ
"RTN","EDPARPT",207,0)
 ...S @XMLARRY@("logEntries",1,"logEntry",LOGIEN,"elements",1,"element",ESEQ,"header")=XHDR
"RTN","EDPARPT",208,0)
 ...S DCNT=0 F  S DCNT=$O(@SARRY@(LOGIEN,EIEN,ESEQ,DCNT)) Q:'DCNT  D
"RTN","EDPARPT",209,0)
 ....S @XMLARRY@("logEntries",1,"logEntry",LOGIEN,"elements",1,"element",ESEQ,"data",DCNT,"value")=$G(@SARRY@(LOGIEN,EIEN,ESEQ,DCNT))
"RTN","EDPARPT",210,0)
 ; kill off the aggregation global array
"RTN","EDPARPT",211,0)
 K @SARRY
"RTN","EDPARPT",212,0)
 Q
"RTN","EDPARPT",213,0)
 ;
"RTN","EDPARPT",214,0)
BLDCSV(EDPXML,SARRY,CSVARRY,TAB,FHDR) ;
"RTN","EDPARPT",215,0)
 N LIEN,EIEN,ESEQ,CSVCNT,ECNT
"RTN","EDPARPT",216,0)
 S CSVCNT=0
"RTN","EDPARPT",217,0)
 D ADDG^EDPCSV(FHDR_$C(13)_$C(10),.CSVCNT,EDPXML) ; build the header and include CR/LF
"RTN","EDPARPT",218,0)
 S LIEN=0 F  S LIEN=$O(@SARRY@(LIEN)) Q:'LIEN  D
"RTN","EDPARPT",219,0)
 .S EIEN=0 F  S EIEN=$O(@SARRY@(LIEN,EIEN)) Q:'EIEN  D
"RTN","EDPARPT",220,0)
 ..S ESEQ=0 F  S ESEQ=$O(@SARRY@(LIEN,EIEN,ESEQ)) Q:'ESEQ  D
"RTN","EDPARPT",221,0)
 ...S ECNT=0 F  S ECNT=$O(@SARRY@(LIEN,EIEN,ESEQ,ECNT)) Q:'ECNT  D
"RTN","EDPARPT",222,0)
 ....S $P(@CSVARRY@(LIEN,ECNT),TAB,1)=LIEN
"RTN","EDPARPT",223,0)
 ....S $P(@CSVARRY@(LIEN,ECNT),TAB,ESEQ+1)=$G(@SARRY@(LIEN,EIEN,ESEQ,ECNT))
"RTN","EDPARPT",224,0)
 S LIEN=0 F  S LIEN=$O(@CSVARRY@(LIEN)) Q:'LIEN  D
"RTN","EDPARPT",225,0)
 .S ECNT=0 F  S ECNT=$O(@CSVARRY@(LIEN,ECNT)) Q:'ECNT  D
"RTN","EDPARPT",226,0)
 ..D ADDG^EDPCSV($G(@CSVARRY@(LIEN,ECNT))_$C(13)_$C(10),.CSVCNT,EDPXML) ; build the line and include CR/LF
"RTN","EDPARPT",227,0)
 Q
"RTN","EDPARPT",228,0)
 ;
"RTN","EDPARPT",229,0)
 ; check to see if a resident or provider has ever been assigned to this patient
"RTN","EDPARPT",230,0)
 ; input
"RTN","EDPARPT",231,0)
 ;         LOGID - log entry id from file 230
"RTN","EDPARPT",232,0)
 ;         FLD   - cooresponding field to check data against.
"RTN","EDPARPT",233,0)
 ;         VAL   - value to test for
"RTN","EDPARPT",234,0)
CHKHLOG(LOGID,FLD,VAL) ;
"RTN","EDPARPT",235,0)
 N LTIME,FOUND,HLID
"RTN","EDPARPT",236,0)
 S FOUND=0
"RTN","EDPARPT",237,0)
 S LTIME=0 F  S LTIME=$O(^EDP(230.1,"ADF",LOGID,LTIME)) Q:'LTIME  D
"RTN","EDPARPT",238,0)
 .S HLID=0 F  S HLID=$O(^EDP(230.1,"ADF",LOGID,LTIME,HLID)) Q:'HLID  D
"RTN","EDPARPT",239,0)
 ..I $$GET1^DIQ(230.1,HLID,FLD,"I")=VAL S FOUND=1
"RTN","EDPARPT",240,0)
 Q FOUND
"RTN","EDPARPT",241,0)
 ;
"RTN","EDPARPT",242,0)
EDAT(IEN) ; return element zero node data
"RTN","EDPARPT",243,0)
 Q:'IEN ""
"RTN","EDPARPT",244,0)
 Q $G(^EDPB(232.11,IEN,0))
"RTN","EDPARPT1")
0^12^B17834740^n/a
"RTN","EDPARPT1",1,0)
EDPARPT1 ;SLC/BWF - Ad Hoc Reports ;5/16/2012 11:51am
"RTN","EDPARPT1",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPARPT1",3,0)
 Q
"RTN","EDPARPT1",4,0)
ELAPSED(LIEN) ; elapsed time
"RTN","EDPARPT1",5,0)
 N ELAPSE,IN,OUT
"RTN","EDPARPT1",6,0)
 S ELAPSE=""
"RTN","EDPARPT1",7,0)
 S OUT=$$GET1^DIQ(230,LIEN,.09,"I")
"RTN","EDPARPT1",8,0)
 I 'OUT Q "" ; patient has no 'out' time
"RTN","EDPARPT1",9,0)
 I $$GET1^DIQ(230,LIEN,.0701,"I")'=1 Q "" ; patient's record is not closed
"RTN","EDPARPT1",10,0)
 S IN=$$GET1^DIQ(230,LIEN,.08,"I")
"RTN","EDPARPT1",11,0)
 S ELAPSE=$$FMDIFF^XLFDT(IN,OUT,2)
"RTN","EDPARPT1",12,0)
 I ELAPSE>60 S ELAPSE=ELAPSE/60 Q $P(ELAPSE,".") ; get minutes
"RTN","EDPARPT1",13,0)
 Q ""
"RTN","EDPARPT1",14,0)
SMULT(LIEN,IARRY,FLD) ; list of doctors/nurses/residents/status/acuity or any 'standard multiples (single fields that can change) associated with the patient for this ed visit
"RTN","EDPARPT1",15,0)
 N CNT,INVDT,HIEN,VAL,FDATA,FERR,LOCAL,PIEN
"RTN","EDPARPT1",16,0)
 S CNT=0
"RTN","EDPARPT1",17,0)
 ; get field values in the reverse order that they were assigned to the patient
"RTN","EDPARPT1",18,0)
 S INVDT=0 F  S INVDT=$O(^EDP(230.1,"ADR",LIEN,INVDT)) Q:'INVDT  D
"RTN","EDPARPT1",19,0)
 .S HIEN=0 F  S HIEN=$O(^EDP(230.1,"ADR",LIEN,INVDT,HIEN)) Q:'HIEN  D
"RTN","EDPARPT1",20,0)
 ..; quit if this field is null
"RTN","EDPARPT1",21,0)
 ..I $$GET1^DIQ(230.1,HIEN,FLD,"I")="" Q
"RTN","EDPARPT1",22,0)
 ..D FIELD^DID(230.1,FLD,,"TYPE;POINTER","FDATA","FERR")
"RTN","EDPARPT1",23,0)
 ..I $G(FDATA("TYPE"))="POINTER" D  Q
"RTN","EDPARPT1",24,0)
 ...; if the field is a pointer, and it is pointing to VA(200, get the elements needed (name^initials^log history time)
"RTN","EDPARPT1",25,0)
 ...I $G(FDATA("POINTER"))="VA(200," D  Q
"RTN","EDPARPT1",26,0)
 ....S PIEN=$$GET1^DIQ(230.1,HIEN,FLD,"I")
"RTN","EDPARPT1",27,0)
 ....S VAL=$$GET1^DIQ(200,PIEN,.01,"E")_" ("_$$GET1^DIQ(230.1,HIEN,.02,"E")_")"
"RTN","EDPARPT1",28,0)
 ....S CNT=CNT+1,IARRY(CNT)=VAL,LOCAL($P(VAL,U))=""
"RTN","EDPARPT1",29,0)
 ...; force the log history timestamp to ALWAYS be on piece 3 for now, to provide consistency with pointers to VA(200
"RTN","EDPARPT1",30,0)
 ...; this helps when using the FORMAT LOGIC from file 232.11
"RTN","EDPARPT1",31,0)
 ...S VAL=$$GET1^DIQ(230.1,HIEN,FLD,"E")_" ("_$$GET1^DIQ(230.1,HIEN,.02,"E")_")"
"RTN","EDPARPT1",32,0)
 ...S CNT=CNT+1,IARRY(CNT)=VAL
"RTN","EDPARPT1",33,0)
 Q
"RTN","EDPARPT1",34,0)
TRIAGE(LIEN) ; The elapsed time between the patient's time-in and his or her initial acuity assessment.
"RTN","EDPARPT1",35,0)
 N ACU,IDT,FOUND,ETIME,IN,TRNURSE
"RTN","EDPARPT1",36,0)
 S FOUND=0,ETIME="",TRNURSE=""
"RTN","EDPARPT1",37,0)
 S IDT=0 F  S IDT=$O(^EDP(230.1,"ADR",LIEN,IDT)) Q:'IDT  D
"RTN","EDPARPT1",38,0)
 .S HIEN=0 F  S HIEN=$O(^EDP(230.1,"ADR",LIEN,IDT,HIEN)) Q:'HIEN!(FOUND)  D
"RTN","EDPARPT1",39,0)
 ..; this field was not edited or added
"RTN","EDPARPT1",40,0)
 ..I $$GET1^DIQ(230.1,HIEN,3.3,"I")="" Q
"RTN","EDPARPT1",41,0)
 ..S FOUND=1
"RTN","EDPARPT1",42,0)
 ..S IN=$$GET1^DIQ(230,LIEN,.08,"I")
"RTN","EDPARPT1",43,0)
 ..S ETIME=$$FMDIFF^XLFDT($$GET1^DIQ(230.1,HIEN,.02,"I"),IN,2)
"RTN","EDPARPT1",44,0)
 ..S ETIME=ETIME/60
"RTN","EDPARPT1",45,0)
 ..S TRNURSE=$$GET1^DIQ(230.1,HIEN,3.6,"E")
"RTN","EDPARPT1",46,0)
 Q $P(ETIME,".")_U_TRNURSE
"RTN","EDPARPT1",47,0)
 ;
"RTN","EDPARPT1",48,0)
D2DOC(LIEN) ; elapsed time from door to doc
"RTN","EDPARPT1",49,0)
 N ETIME,HIEN,IDT,FOUND,IN,DOCTIME
"RTN","EDPARPT1",50,0)
 S ETIME=""
"RTN","EDPARPT1",51,0)
 S (FOUND,IDT)=0 F  S IDT=$O(^EDP(230.1,"ADR",LIEN,IDT)) Q:'IDT!(FOUND)  D
"RTN","EDPARPT1",52,0)
 .S HIEN=0 F  S HIEN=$O(^EDP(230.1,"ADR",LIEN,IDT,HIEN)) Q:'HIEN!(FOUND)  D
"RTN","EDPARPT1",53,0)
 ..; this field was not edited or added
"RTN","EDPARPT1",54,0)
 ..I $$GET1^DIQ(230.1,HIEN,3.5,"I")="" Q
"RTN","EDPARPT1",55,0)
 ..S FOUND=1
"RTN","EDPARPT1",56,0)
 ..S IN=$$GET1^DIQ(230,LIEN,.08,"I"),DOCTIME=$$GET1^DIQ(230.1,HIEN,.02,"I")
"RTN","EDPARPT1",57,0)
 ..S ETIME=$$FMDIFF^XLFDT(DOCTIME,IN,2),ETIME=ETIME/60
"RTN","EDPARPT1",58,0)
 Q $P(ETIME,".")
"RTN","EDPARPT1",59,0)
 ;
"RTN","EDPARPT1",60,0)
WAIT(LIEN,AREA) ; The elapsed time between the patient's time-in and his or her first assignment to a location other than the waiting room 
"RTN","EDPARPT1",61,0)
 N WAIT,IDT,FOUND,HIEN,ETIME,IN
"RTN","EDPARPT1",62,0)
 S ETIME=""
"RTN","EDPARPT1",63,0)
 S (IDT,FOUND)=0 F  S IDT=$O(^EDP(230.1,"ADR",LIEN,IDT)) Q:'IDT!(FOUND)  D
"RTN","EDPARPT1",64,0)
 .S HIEN=0 F  S HIEN=$O(^EDP(230.1,"ADR",LIEN,IDT,HIEN)) Q:'HIEN!(FOUND)  D
"RTN","EDPARPT1",65,0)
 ..I $$GET1^DIQ(230.1,HIEN,3.4,"I")="" Q
"RTN","EDPARPT1",66,0)
 ..; the patient is still in the waiting room
"RTN","EDPARPT1",67,0)
 ..I $$GET1^DIQ(230.1,HIEN,3.4,"E")=$$GET1^DIQ(231.9,AREA,1.12,"E") Q
"RTN","EDPARPT1",68,0)
 ..S IN=$$GET1^DIQ(230,LIEN,.08,"I"),FOUND=1
"RTN","EDPARPT1",69,0)
 ..S ETIME=$$FMDIFF^XLFDT($$GET1^DIQ(230.1,HIEN,.02,"I"),IN,2),ETIME=ETIME/60
"RTN","EDPARPT1",70,0)
 Q $P(ETIME,".")
"RTN","EDPARPT1",71,0)
 ;
"RTN","EDPARPT1",72,0)
 ; input
"RTN","EDPARPT1",73,0)
 ;      LIEN - Log entry ien from file 230 (required)
"RTN","EDPARPT1",74,0)
 ;      TYPE - type of data being requested (required)
"RTN","EDPARPT1",75,0)
 ;             1 - admdec
"RTN","EDPARPT1",76,0)
 ;             2 - admdel
"RTN","EDPARPT1",77,0)
ADMDECL(LIEN,TYPE) ; elapsed time between the patient's time-in and the status change to 'Admit to.'
"RTN","EDPARPT1",78,0)
 N ADMDEC,IN,HIEN,IDT,FOUND,ELAPSE,STAT,STIME
"RTN","EDPARPT1",79,0)
 S ELAPSE=""
"RTN","EDPARPT1",80,0)
 S (IDT,FOUND)=0 F  S IDT=$O(^EDP(230.1,"ADR",LIEN,IDT)) Q:'IDT!(FOUND)  D
"RTN","EDPARPT1",81,0)
 .S HIEN=0 F  S HIEN=$O(^EDP(230.1,"ADR",LIEN,IDT,HIEN)) Q:'HIEN!(FOUND)  D
"RTN","EDPARPT1",82,0)
 ..S STAT=$$GET1^DIQ(230.1,HIEN,3.2,"E")
"RTN","EDPARPT1",83,0)
 ..I TYPE=1,STAT'="adm.status.admitted" Q
"RTN","EDPARPT1",84,0)
 ..I TYPE=2,STAT'["edp.disposition" Q
"RTN","EDPARPT1",85,0)
 ..S FOUND=1
"RTN","EDPARPT1",86,0)
 ..S STIME=$$GET1^DIQ(230.1,HIEN,.02,"I"),IN=$$GET1^DIQ(230,LIEN,.08,"I")
"RTN","EDPARPT1",87,0)
 ..S ELAPSE=$$FMDIFF^XLFDT(STIME,IN,2),ELAPSE=ELAPSE/60
"RTN","EDPARPT1",88,0)
 Q $P(ELAPSE,".")
"RTN","EDPARPT1",89,0)
 ; 
"RTN","EDPARPT1",90,0)
 ; input:
"RTN","EDPARPT1",91,0)
 ;     LIEN  - log ien (required)
"RTN","EDPARPT1",92,0)
 ;     IARRY - data storage location IARRY(CNT)=DATA (required)
"RTN","EDPARPT1",93,0)
 ;     AREA  - the AREA associated with this log entry
"RTN","EDPARPT1",94,0)
 ;     TYPE  - 1: ICD coded dx list
"RTN","EDPARPT1",95,0)
 ;             2: free text dx list
"RTN","EDPARPT1",96,0)
DXMULT(LIEN,IARRY,AREA,TYPE) ; patients free text or ICD-9-CM diagnosis - could be multiple 
"RTN","EDPARPT1",97,0)
 N EDPVISIT
"RTN","EDPARPT1",98,0)
 I TYPE=1 D  Q
"RTN","EDPARPT1",99,0)
 .S EDPVISIT=$P(^EDP(230,LIEN,0),U,12)
"RTN","EDPARPT1",100,0)
 .I EDPVISIT,$P($G(^EDPB(231.9,AREA,1)),U,2) D DXPCE^EDPQPCE(EDPVISIT,.IARRY)
"RTN","EDPARPT1",101,0)
 I TYPE=2 D DXFREE2^EDPQPCE(LIEN,.IARRY)
"RTN","EDPARPT1",102,0)
 Q
"RTN","EDPARPT1",103,0)
PID(DFN) ;
"RTN","EDPARPT1",104,0)
 N PID,PNAME,SSN
"RTN","EDPARPT1",105,0)
 D ^VADPT
"RTN","EDPARPT1",106,0)
 S PID=$E(VADM(1),1)_VA("BID")
"RTN","EDPARPT1",107,0)
 K VA,VADM
"RTN","EDPARPT1",108,0)
 Q PID
"RTN","EDPBCF")
0^24^B26108693^B25433175
"RTN","EDPBCF",1,0)
EDPBCF ;SLC/KCM - Display Board Configuration ;2/28/12 08:33am
"RTN","EDPBCF",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPBCF",3,0)
 ;
"RTN","EDPBCF",4,0)
LOAD(AREA) ; Load General Configuration for an Area
"RTN","EDPBCF",5,0)
 N I,NODE
"RTN","EDPBCF",6,0)
 ;
"RTN","EDPBCF",7,0)
 D XML^EDPX("<colorMaps>")
"RTN","EDPBCF",8,0)
 D COLORS^EDPBCM
"RTN","EDPBCF",9,0)
 D XML^EDPX("</colorMaps>")
"RTN","EDPBCF",10,0)
 D LOAD^EDPBCM(AREA)   ; load the color spec
"RTN","EDPBCF",11,0)
 ;
"RTN","EDPBCF",12,0)
 D LOAD^EDPBRM(AREA)   ; load rooms/beds
"RTN","EDPBCF",13,0)
 D DFLTRM^EDPBRM(AREA) ; load multi rooms
"RTN","EDPBCF",14,0)
 ;
"RTN","EDPBCF",15,0)
 D LOAD^EDPBPM(AREA)   ; load parameters
"RTN","EDPBCF",16,0)
 ;
"RTN","EDPBCF",17,0)
 D XML^EDPX("<columnList>") ; load available columns
"RTN","EDPBCF",18,0)
 F I=1:1 S NODE=$P($T(COLUMNS+I),";",3,99) Q:$E(NODE,1,5)="zzzzz"  D
"RTN","EDPBCF",19,0)
 . N X
"RTN","EDPBCF",20,0)
 . S X("label")=$P(NODE,U)
"RTN","EDPBCF",21,0)
 . S X("att")=$P(NODE,U,2)
"RTN","EDPBCF",22,0)
 . S X("header")=$P(NODE,U,3)
"RTN","EDPBCF",23,0)
 . S X("width")=50
"RTN","EDPBCF",24,0)
 . D XML^EDPX($$XMLA^EDPX("col",.X))
"RTN","EDPBCF",25,0)
 D XML^EDPX("</columnList>")
"RTN","EDPBCF",26,0)
 ;
"RTN","EDPBCF",27,0)
 D CHOICES^EDPBRM      ; load 'display when' choices
"RTN","EDPBCF",28,0)
 ;
"RTN","EDPBCF",29,0)
 N EDPSCRNS D GETLST^XPAR(.EDPSCRNS,"ALL","EDPF SCREEN SIZES","I")
"RTN","EDPBCF",30,0)
 D XML^EDPX("<screenSizes>")
"RTN","EDPBCF",31,0)
 S I=0 F  S I=$O(EDPSCRNS(I)) Q:'I  D
"RTN","EDPBCF",32,0)
 . S EDPSCRNS(I)=$TR(EDPSCRNS(I),"X","x")
"RTN","EDPBCF",33,0)
 . N X
"RTN","EDPBCF",34,0)
 . S X("label")=EDPSCRNS(I)
"RTN","EDPBCF",35,0)
 . S X("width")=$P(EDPSCRNS(I),"x")
"RTN","EDPBCF",36,0)
 . S X("height")=$P(EDPSCRNS(I),"x",2)
"RTN","EDPBCF",37,0)
 . D XML^EDPX($$XMLA^EDPX("size",.X))
"RTN","EDPBCF",38,0)
 D XML^EDPX("</screenSizes>")
"RTN","EDPBCF",39,0)
 Q
"RTN","EDPBCF",40,0)
LOADBRD(AREA,IEN) ; Load Named Board Spec
"RTN","EDPBCF",41,0)
 N I,X,TOKEN
"RTN","EDPBCF",42,0)
 S:'IEN IEN=$O(^EDPB(231.9,AREA,4,0)) Q:'IEN
"RTN","EDPBCF",43,0)
 ;
"RTN","EDPBCF",44,0)
 D READL^EDPBLK(AREA,"board",.TOKEN)  ; read lock the board config
"RTN","EDPBCF",45,0)
 D XML^EDPX("<boardToken>"_TOKEN_"</boardToken>")
"RTN","EDPBCF",46,0)
 D BRDLST(AREA)
"RTN","EDPBCF",47,0)
 S X("boardID")=IEN,X("boardName")=$P(^EDPB(231.9,AREA,4,IEN,0),U)
"RTN","EDPBCF",48,0)
 D XML^EDPX($$XMLA^EDPX("spec",.X,""))
"RTN","EDPBCF",49,0)
 S I=0 F  S I=$O(^EDPB(231.9,AREA,4,IEN,1,I)) Q:'I  D
"RTN","EDPBCF",50,0)
 . D XML^EDPX(^EDPB(231.9,AREA,4,IEN,1,I,0))
"RTN","EDPBCF",51,0)
 D XML^EDPX("</spec>")
"RTN","EDPBCF",52,0)
 D READU^EDPBLK(AREA,"board",.TOKEN)  ; read unlock the board config
"RTN","EDPBCF",53,0)
 Q
"RTN","EDPBCF",54,0)
BRDLST(AREA) ; List of boards
"RTN","EDPBCF",55,0)
 N I,X
"RTN","EDPBCF",56,0)
 D XML^EDPX("<boards>")
"RTN","EDPBCF",57,0)
 S I=0 F  S I=$O(^EDPB(231.9,AREA,4,I)) Q:'I  D
"RTN","EDPBCF",58,0)
 . S X=$P(^EDPB(231.9,AREA,4,I,0),U)
"RTN","EDPBCF",59,0)
 . D XML^EDPX($$XMLS^EDPX("board",I,X))
"RTN","EDPBCF",60,0)
 D XML^EDPX("</boards>")
"RTN","EDPBCF",61,0)
 Q
"RTN","EDPBCF",62,0)
SAVEBRD(REQ) ; Save Configuration
"RTN","EDPBCF",63,0)
 N X,AREA,DFLTNM
"RTN","EDPBCF",64,0)
 S X="col-",AREA=$G(REQ("area",1)),DFLTNM="Main (default)"
"RTN","EDPBCF",65,0)
 I 'AREA D SAVERR^EDPX("fail","Missing area") Q
"RTN","EDPBCF",66,0)
 ;
"RTN","EDPBCF",67,0)
 N NAME,IEN,WP,MSG
"RTN","EDPBCF",68,0)
 S NAME=$G(REQ("boardName",1)),IEN=+$G(REQ("boardID",1))
"RTN","EDPBCF",69,0)
 I (IEN>0),($P(^EDPB(231.9,AREA,4,IEN,0),U)=DFLTNM),(NAME'=DFLTNM) D  Q
"RTN","EDPBCF",70,0)
 . D SAVERR^EDPX("fail","Default name may not be changed.")
"RTN","EDPBCF",71,0)
 I NAME="" D  Q
"RTN","EDPBCF",72,0)
 . D SAVERR^EDPX("fail","Missing name")
"RTN","EDPBCF",73,0)
 I (IEN=0),$O(^EDPB(231.9,AREA,4,"B",NAME,0)) D  Q
"RTN","EDPBCF",74,0)
 . D SAVERR^EDPX("fail","Board name must be unique")
"RTN","EDPBCF",75,0)
 ;
"RTN","EDPBCF",76,0)
 ; save XML spec as word processing
"RTN","EDPBCF",77,0)
 N TOKEN,LOCKERR
"RTN","EDPBCF",78,0)
 S TOKEN=$G(REQ("boardToken",1))
"RTN","EDPBCF",79,0)
 D SAVEL^EDPBLK(AREA,"board",.TOKEN,.LOCKERR) ; save board config -- LOCK
"RTN","EDPBCF",80,0)
 I $L(LOCKERR) D SAVERR^EDPX("collide",LOCKERR),LOADBRD(AREA,IEN) Q
"RTN","EDPBCF",81,0)
 ;
"RTN","EDPBCF",82,0)
 F  S X=$O(REQ(X)) Q:$E(X,1,4)'="col-"  S WP(+$P(X,"-",2))=REQ(X,1)
"RTN","EDPBCF",83,0)
 D UPDBRD(AREA,.IEN,NAME,.WP,.MSG)
"RTN","EDPBCF",84,0)
 D SAVEU^EDPBLK(AREA,"board",.TOKEN)          ; save board config -- UNLOCK
"RTN","EDPBCF",85,0)
 ;
"RTN","EDPBCF",86,0)
 I $L(MSG) D SAVERR^EDPX("fail",MSG) Q
"RTN","EDPBCF",87,0)
 D UPDLAST(AREA) ; update last config save date
"RTN","EDPBCF",88,0)
 ;
"RTN","EDPBCF",89,0)
 D XML^EDPX("<save status='ok' boardID='"_+IEN_"' />")
"RTN","EDPBCF",90,0)
 D LOADBRD(AREA,+IEN)
"RTN","EDPBCF",91,0)
 Q
"RTN","EDPBCF",92,0)
UPDLAST(AREA) ; update last config save date
"RTN","EDPBCF",93,0)
 N FDA,FDAIEN,DIERR
"RTN","EDPBCF",94,0)
 S FDA(231.9,AREA_",",.03)=$$NOW^XLFDT
"RTN","EDPBCF",95,0)
 D FILE^DIE("","FDA","ERR")
"RTN","EDPBCF",96,0)
 D CLEAN^DILF
"RTN","EDPBCF",97,0)
 Q
"RTN","EDPBCF",98,0)
UPDBRD(AREA,EDPIEN,NAME,SPEC,MSG) ; Add/Update a Spec
"RTN","EDPBCF",99,0)
 S MSG=""
"RTN","EDPBCF",100,0)
 S:'EDPIEN EDPIEN="+1" S EDPIEN=EDPIEN_","_AREA_","
"RTN","EDPBCF",101,0)
 ;
"RTN","EDPBCF",102,0)
 N FDA,FDAIEN,DIERR,ERR
"RTN","EDPBCF",103,0)
 S FDA(231.94,EDPIEN,.01)=NAME
"RTN","EDPBCF",104,0)
 I $E(EDPIEN,1,2)="+1" D
"RTN","EDPBCF",105,0)
 . D UPDATE^DIE("","FDA","FDAIEN","ERR")
"RTN","EDPBCF",106,0)
 E  D
"RTN","EDPBCF",107,0)
 . D FILE^DIE("","FDA","ERR")
"RTN","EDPBCF",108,0)
 I $D(DIERR) S MSG="save board name failed: "_$G(EDPIEN)
"RTN","EDPBCF",109,0)
 I '$D(DIERR) D
"RTN","EDPBCF",110,0)
 . I $E(EDPIEN,1,2)="+1" S EDPIEN=+FDAIEN(1)_","_AREA_","
"RTN","EDPBCF",111,0)
 . D WP^DIE(231.94,EDPIEN,1,"","SPEC")
"RTN","EDPBCF",112,0)
 . I $D(DIERR) S MSG="save board spec failed: "_$G(EDPIEN)
"RTN","EDPBCF",113,0)
 D CLEAN^DILF
"RTN","EDPBCF",114,0)
 Q
"RTN","EDPBCF",115,0)
 ;bwf - 3/1/2013 removed below lines from column list per request from Dr. T
"RTN","EDPBCF",116,0)
 ;;Patient X9999^@last4^Patient
"RTN","EDPBCF",117,0)
 ;;Alerts^@alerts^Alerts
"RTN","EDPBCF",118,0)
COLUMNS ;; Available Columns
"RTN","EDPBCF",119,0)
 ;;Room / Bed^@bedNm^Room
"RTN","EDPBCF",120,0)
 ;;Patient Name^@ptNm^Patient
"RTN","EDPBCF",121,0)
 ;;Visit Created^@visit^Visit
"RTN","EDPBCF",122,0)
 ;;Clinic^@clinicNm^Clinic
"RTN","EDPBCF",123,0)
 ;;Complaint^@complaint^Complaint
"RTN","EDPBCF",124,0)
 ;;Comment^@comment^Comment
"RTN","EDPBCF",125,0)
 ;;Provider Initials^@mdNm^Prv
"RTN","EDPBCF",126,0)
 ;;Resident Initials^@resNm^Res
"RTN","EDPBCF",127,0)
 ;;Nurse Initials^@rnNm^RN
"RTN","EDPBCF",128,0)
 ;;Acuity^@acuityNm^Acuity
"RTN","EDPBCF",129,0)
 ;;Status^@statusNm^Status
"RTN","EDPBCF",130,0)
 ;;Lab Active/Complete^@lab^L
"RTN","EDPBCF",131,0)
 ;;Imaging Active/Complete^@rad^I
"RTN","EDPBCF",132,0)
 ;;New (Unverified) Orders^@ordNew^New
"RTN","EDPBCF",133,0)
 ;;Total Minutes^@emins^E Mins
"RTN","EDPBCF",134,0)
 ;;Minutes at Location^@lmins^Mins
"RTN","EDPBCF",135,0)
 ;;Disposition^@disposition^Disposition
"RTN","EDPBCF",136,0)
 ;;zzzzz
"RTN","EDPBRM")
0^29^B26325333^B25575594
"RTN","EDPBRM",1,0)
EDPBRM ;SLC/KCM - Room/Bed Configuration ;2/28/12 08:33am
"RTN","EDPBRM",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPBRM",3,0)
 ;
"RTN","EDPBRM",4,0)
LOAD(AREA) ; Load the list of rooms/beds for this area
"RTN","EDPBRM",5,0)
 N BED,SEQ,BEDS,X0,TOKEN
"RTN","EDPBRM",6,0)
 ;
"RTN","EDPBRM",7,0)
 D READL^EDPBLK(AREA,"bed",.TOKEN) ; read bed config -- LOCK
"RTN","EDPBRM",8,0)
 D XML^EDPX("<bedToken>"_TOKEN_"</bedToken>")
"RTN","EDPBRM",9,0)
 ;
"RTN","EDPBRM",10,0)
 ; Get a list of all the beds in sequence for this area
"RTN","EDPBRM",11,0)
 S BED=0 F  S BED=$O(^EDPB(231.8,"C",EDPSITE,AREA,BED)) Q:'BED  D
"RTN","EDPBRM",12,0)
 . S SEQ=$P(^EDPB(231.8,BED,0),U,5) S:'SEQ SEQ=99999
"RTN","EDPBRM",13,0)
 . S BEDS(SEQ,BED)=""
"RTN","EDPBRM",14,0)
 ;
"RTN","EDPBRM",15,0)
 ; Build the XML for each bed in sequence
"RTN","EDPBRM",16,0)
 D XML^EDPX("<beds>")
"RTN","EDPBRM",17,0)
 S SEQ=0 F  S SEQ=$O(BEDS(SEQ)) Q:'SEQ  D
"RTN","EDPBRM",18,0)
 . S BED=0 F  S BED=$O(BEDS(SEQ,BED)) Q:'BED  D
"RTN","EDPBRM",19,0)
 . . S X0=^EDPB(231.8,BED,0)
"RTN","EDPBRM",20,0)
 . . ; Patch 6 (BWF) 4/24/2013 - do not display EDIS_DEFAULT bed
"RTN","EDPBRM",21,0)
 . . I $P(X0,U)="EDIS_DEFAULT" Q
"RTN","EDPBRM",22,0)
 . . N X
"RTN","EDPBRM",23,0)
 . . S X("id")=BED
"RTN","EDPBRM",24,0)
 . . S X("name")=$P(X0,U)
"RTN","EDPBRM",25,0)
 . . S X("site")=$P(X0,U,2)
"RTN","EDPBRM",26,0)
 . . S X("area")=$P(X0,U,3)
"RTN","EDPBRM",27,0)
 . . S X("inactive")=$P(X0,U,4)
"RTN","EDPBRM",28,0)
 . . S X("seq")=$P(X0,U,5)
"RTN","EDPBRM",29,0)
 . . S X("display")=$P(X0,U,6)
"RTN","EDPBRM",30,0)
 . . S X("when")=$P(X0,U,7)
"RTN","EDPBRM",31,0)
 . . S X("status")=$P(X0,U,8)
"RTN","EDPBRM",32,0)
 . . S X("category")=$P(X0,U,9)
"RTN","EDPBRM",33,0)
 . . S X("shared")=$P(X0,U,10)
"RTN","EDPBRM",34,0)
 . . S X("board")=$P(X0,U,11)
"RTN","EDPBRM",35,0)
 . . S X("color")=$P(X0,U,12)
"RTN","EDPBRM",36,0)
 . . S X("primary")=$S($P(X0,U,13)=2:2,1:1,1:"")  ; ""=unknown,1=primary,2=secondary
"RTN","EDPBRM",37,0)
 . . D XML^EDPX($$XMLA^EDPX("bed",.X))
"RTN","EDPBRM",38,0)
 D XML^EDPX("</beds>")
"RTN","EDPBRM",39,0)
 ;
"RTN","EDPBRM",40,0)
 D READU^EDPBLK(AREA,"bed",.TOKEN) ; read bed config -- UNLOCK
"RTN","EDPBRM",41,0)
 Q
"RTN","EDPBRM",42,0)
SAVE(REQ,AREA) ; Save the updated bed list
"RTN","EDPBRM",43,0)
 ; loop thru the records and update where changed
"RTN","EDPBRM",44,0)
 N X,BED,ERR,TOKEN,LOCKERR
"RTN","EDPBRM",45,0)
 ;
"RTN","EDPBRM",46,0)
 S TOKEN=$G(REQ("bedToken",1))
"RTN","EDPBRM",47,0)
 D SAVEL^EDPBLK(AREA,"bed",.TOKEN,.LOCKERR)  ; save bed config -- LOCK
"RTN","EDPBRM",48,0)
 I $L(LOCKERR) D SAVERR^EDPX("collide",LOCKERR),LOAD(AREA),DFLTRM(AREA) Q
"RTN","EDPBRM",49,0)
 ;
"RTN","EDPBRM",50,0)
 S X="bed-",ERR=""
"RTN","EDPBRM",51,0)
 F  S X=$O(REQ(X)) Q:$E(X,1,4)'="bed-"  D
"RTN","EDPBRM",52,0)
 . K BED S BED=""
"RTN","EDPBRM",53,0)
 . D NVPARSE^EDPX(.BED,REQ(X,1))
"RTN","EDPBRM",54,0)
 . S BED("name")=$$TRIM^XLFSTR(BED("name"))
"RTN","EDPBRM",55,0)
 . I '$L(BED("name")) S ERR=ERR_"Name may not be blank.  " Q
"RTN","EDPBRM",56,0)
 . I BED("changed") D UPD(.BED,.ERR)
"RTN","EDPBRM",57,0)
 D SAVEU^EDPBLK(AREA,"bed",.TOKEN)           ; save bed config -- UNLOCK
"RTN","EDPBRM",58,0)
 ;
"RTN","EDPBRM",59,0)
 I $L(ERR) D SAVERR^EDPX("fail",ERR) Q
"RTN","EDPBRM",60,0)
 D XML^EDPX("<save status='ok' />")
"RTN","EDPBRM",61,0)
 D LOAD(AREA)    ; return updated list of beds
"RTN","EDPBRM",62,0)
 D DFLTRM(AREA)  ; return new default lists of beds
"RTN","EDPBRM",63,0)
 Q
"RTN","EDPBRM",64,0)
UPD(FLD,ERRMSG) ; Add/Update Record
"RTN","EDPBRM",65,0)
 N EDPIEN
"RTN","EDPBRM",66,0)
 S EDPIEN=FLD("id")_","
"RTN","EDPBRM",67,0)
 I FLD("id")=0 S EDPIEN="+1,"
"RTN","EDPBRM",68,0)
 ;
"RTN","EDPBRM",69,0)
 N FDA,FDAIEN,DIERR,ERR
"RTN","EDPBRM",70,0)
 S FDA(231.8,EDPIEN,.01)=FLD("name")
"RTN","EDPBRM",71,0)
 S FDA(231.8,EDPIEN,.02)=EDPSITE
"RTN","EDPBRM",72,0)
 S FDA(231.8,EDPIEN,.03)=FLD("area")
"RTN","EDPBRM",73,0)
 S FDA(231.8,EDPIEN,.04)=FLD("inactive")
"RTN","EDPBRM",74,0)
 S FDA(231.8,EDPIEN,.05)=FLD("seq")
"RTN","EDPBRM",75,0)
 S FDA(231.8,EDPIEN,.06)=FLD("display")
"RTN","EDPBRM",76,0)
 S FDA(231.8,EDPIEN,.07)=FLD("when")
"RTN","EDPBRM",77,0)
 S FDA(231.8,EDPIEN,.08)=FLD("status")
"RTN","EDPBRM",78,0)
 S FDA(231.8,EDPIEN,.09)=FLD("category")
"RTN","EDPBRM",79,0)
 S FDA(231.8,EDPIEN,.1)=FLD("shared")
"RTN","EDPBRM",80,0)
 S FDA(231.8,EDPIEN,.11)=FLD("board")
"RTN","EDPBRM",81,0)
 S FDA(231.8,EDPIEN,.12)=FLD("color")
"RTN","EDPBRM",82,0)
 S FDA(231.8,EDPIEN,.13)=$S($G(FLD("primary"))=1:1,2:2,1:"")
"RTN","EDPBRM",83,0)
 I EDPIEN="+1," D
"RTN","EDPBRM",84,0)
 . D UPDATE^DIE("","FDA","FDAIEN","ERR")
"RTN","EDPBRM",85,0)
 . I $D(DIERR) S ERRMSG=ERRMSG_"Adding "_FLD("name")_" failed.  "
"RTN","EDPBRM",86,0)
 E  D
"RTN","EDPBRM",87,0)
 . D FILE^DIE("","FDA","ERR")
"RTN","EDPBRM",88,0)
 . I $D(DIERR) S ERRMSG=ERRMSG_"Updating "_FLD("name")_" failed.  "
"RTN","EDPBRM",89,0)
 D CLEAN^DILF
"RTN","EDPBRM",90,0)
 Q
"RTN","EDPBRM",91,0)
DFLTRM(AREA) ; Load the multi-areas
"RTN","EDPBRM",92,0)
 N BED,X,X0,ALPHA
"RTN","EDPBRM",93,0)
 D XML^EDPX("<defaultRoomList>")
"RTN","EDPBRM",94,0)
 ; bwf patch 6 4/26/2013 - removed following line, do not want "None Selected"
"RTN","EDPBRM",95,0)
 ;D XML^EDPX($$XMLS^EDPX("item",-1,"(None Selected)"))   ;non-selected (-1 will delete)
"RTN","EDPBRM",96,0)
 S BED=0 F  S BED=$O(^EDPB(231.8,"C",EDPSITE,AREA,BED)) Q:'BED  D
"RTN","EDPBRM",97,0)
 . S X0=^EDPB(231.8,BED,0)
"RTN","EDPBRM",98,0)
 . ; bwf patch 6 4/25/2013 - filter EDIS_DEFAULT
"RTN","EDPBRM",99,0)
 . I $P(X0,U)="EDIS_DEFAULT" Q
"RTN","EDPBRM",100,0)
 . I $P(X0,U,4) Q  ; inactive
"RTN","EDPBRM",101,0)
 . I ($P(X0,U,9)=1)!($P(X0,U,9)=2) S ALPHA($P(X0,U)_"  ("_$P(X0,U,6)_")")=BED
"RTN","EDPBRM",102,0)
 S X="" F  S X=$O(ALPHA(X)) Q:X=""  D XML^EDPX($$XMLS^EDPX("item",ALPHA(X),X))
"RTN","EDPBRM",103,0)
 D XML^EDPX("</defaultRoomList>")
"RTN","EDPBRM",104,0)
 Q
"RTN","EDPBRM",105,0)
CHOICES ; Load the choice lists
"RTN","EDPBRM",106,0)
 N I,X
"RTN","EDPBRM",107,0)
 F I=1:1 S X=$P($T(WHEN+I),";",3,99) Q:X="ZZZZZ"  D XML^EDPX(X)
"RTN","EDPBRM",108,0)
 F I=1:1 S X=$P($T(CATS+I),";",3,99) Q:X="ZZZZZ"  D XML^EDPX(X)
"RTN","EDPBRM",109,0)
 D CODES^EDPQLE1("status","status")
"RTN","EDPBRM",110,0)
 Q
"RTN","EDPBRM",111,0)
WHEN ; Display When Choices
"RTN","EDPBRM",112,0)
 ;;<displayWhen>
"RTN","EDPBRM",113,0)
 ;;<when label="Occupied" data="0" />
"RTN","EDPBRM",114,0)
 ;;<when label="Always" data="1" />
"RTN","EDPBRM",115,0)
 ;;<when label="Never" data="2" />
"RTN","EDPBRM",116,0)
 ;;</displayWhen>
"RTN","EDPBRM",117,0)
 ;;ZZZZZ
"RTN","EDPBRM",118,0)
CATS ; Category Choices
"RTN","EDPBRM",119,0)
 ;;<roomCategories>
"RTN","EDPBRM",120,0)
 ;;<item abbr="Single Pt" data="0" label="Single Pt (one patient assigned)" />
"RTN","EDPBRM",121,0)
 ;;<item abbr="Multiple Pt" data="1" label="Multiple Pt (multiple patients assigned)" />
"RTN","EDPBRM",122,0)
 ;;<item abbr="Waiting Area" data="2" label="Waiting Area (multiple patients assigned)" />
"RTN","EDPBRM",123,0)
 ;;<item abbr="Single Non-ED" data="3" label="Single Non-ED (one patient assigned, outside of ED)" />
"RTN","EDPBRM",124,0)
 ;;<item abbr="Multiple Non-ED" data="4" label="Multiple Non-ED (multiple patients assigned, outside of ED)" />
"RTN","EDPBRM",125,0)
 ;;</roomCategories>
"RTN","EDPBRM",126,0)
 ;;ZZZZZ
"RTN","EDPBST")
0^8^B9812007^B8664749
"RTN","EDPBST",1,0)
EDPBST ;SLC/KCM - Staff Configuration ;5/2/12 3:36pm
"RTN","EDPBST",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPBST",3,0)
 ;
"RTN","EDPBST",4,0)
MATCH(X) ; Return matching providers
"RTN","EDPBST",5,0)
 Q
"RTN","EDPBST",6,0)
LOAD(AREA) ; Return nurse and provider sources, staff config
"RTN","EDPBST",7,0)
 N TOKEN,RIEN,RXMLNM,X0,RABBR
"RTN","EDPBST",8,0)
 D READL^EDPBLK(AREA,"staff",.TOKEN)  ; read staff config -- LOCK
"RTN","EDPBST",9,0)
 D XML^EDPX("<staffToken>"_TOKEN_"</staffToken>")
"RTN","EDPBST",10,0)
 S RIEN=0 F  S RIEN=$O(^EDPB(232.5,RIEN)) Q:'RIEN  D
"RTN","EDPBST",11,0)
 .S X0=$G(^EDPB(232.5,RIEN,0)),RABBR=$P(X0,U,2),RXMLNM=$P(X0,U,7)
"RTN","EDPBST",12,0)
 .D XML^EDPX("<"_RXMLNM_">"),ACTIVE(AREA,RIEN,RABBR),XML^EDPX("</"_RXMLNM_">")
"RTN","EDPBST",13,0)
 ;D XML^EDPX("<providers>"),ACTIVE(AREA,"P"),XML^EDPX("</providers>")
"RTN","EDPBST",14,0)
 ;D XML^EDPX("<residents>"),ACTIVE(AREA,"R"),XML^EDPX("</residents>")
"RTN","EDPBST",15,0)
 ;D XML^EDPX("<nurses>"),ACTIVE(AREA,"N"),XML^EDPX("</nurses>")
"RTN","EDPBST",16,0)
 D READU^EDPBLK(AREA,"staff",.TOKEN)  ; read staff config -- UNLOCK
"RTN","EDPBST",17,0)
 Q
"RTN","EDPBST",18,0)
ACTIVE(AREA,ROLE,ABBR) ; build list of active for a role
"RTN","EDPBST",19,0)
 N IEN,X0,X,EDPNURS
"RTN","EDPBST",20,0)
 I ABBR="N" S EDPNURS=$$GET^XPAR("ALL","EDPF NURSE STAFF SCREEN")
"RTN","EDPBST",21,0)
 S IEN=0 F  S IEN=$O(^EDPB(231.7,"AC",EDPSITE,AREA,ROLE,IEN)) Q:'IEN  D
"RTN","EDPBST",22,0)
 . S X0=^EDPB(231.7,IEN,0)
"RTN","EDPBST",23,0)
 . I '$$ALLOW^EDPFPER(+X0,ABBR) Q
"RTN","EDPBST",24,0)
 . ;I '$$ALLOW^EDPFPER(+X0,ROLE) Q
"RTN","EDPBST",25,0)
 . S X("duz")=$P(X0,U)
"RTN","EDPBST",26,0)
 . S X("nm")=$P(^VA(200,X("duz"),0),U)
"RTN","EDPBST",27,0)
 . S X("role")=$P(X0,U,6) I $G(X("role")) S X("role")=$$GET1^DIQ(232.5,X("role"),.02,"E")
"RTN","EDPBST",28,0)
 . S X("itl")=$P(^VA(200,X("duz"),0),U,2)
"RTN","EDPBST",29,0)
 . S X("clr")=$P(X0,U,8)
"RTN","EDPBST",30,0)
 . D XML^EDPX($$XMLA^EDPX("staff",.X))
"RTN","EDPBST",31,0)
 Q
"RTN","EDPBST",32,0)
SAVE(REQ) ; save updated staff members
"RTN","EDPBST",33,0)
 N X,STAFF,ERR,EDPAREA,TOKEN,LOCKERR
"RTN","EDPBST",34,0)
 S EDPAREA=$G(REQ("area",1))
"RTN","EDPBST",35,0)
 I EDPAREA="" D SAVERR^EDPX("fail","Missing Area") Q
"RTN","EDPBST",36,0)
 ;
"RTN","EDPBST",37,0)
 S TOKEN=$G(REQ("staffToken",1))
"RTN","EDPBST",38,0)
 D SAVEL^EDPBLK(EDPAREA,"staff",.TOKEN,.LOCKERR) ; save staff config -- LOCK
"RTN","EDPBST",39,0)
 I $L(LOCKERR) D SAVERR^EDPX("collide",LOCKERR),LOAD(EDPAREA) Q
"RTN","EDPBST",40,0)
 ; 
"RTN","EDPBST",41,0)
 S X="staff-",ERR=""
"RTN","EDPBST",42,0)
 F  S X=$O(REQ(X)) Q:$E(X,1,6)'="staff-"  D
"RTN","EDPBST",43,0)
 . K STAFF S STAFF=""
"RTN","EDPBST",44,0)
 . D NVPARSE^EDPX(.STAFF,REQ(X,1))
"RTN","EDPBST",45,0)
 . I STAFF("chg") D UPD(.STAFF,.ERR)
"RTN","EDPBST",46,0)
 D SAVEU^EDPBLK(EDPAREA,"staff",.TOKEN)          ; save staff config -- UNLOCK 
"RTN","EDPBST",47,0)
 ;
"RTN","EDPBST",48,0)
 I $L(ERR) D SAVERR^EDPX("fail",ERR) Q
"RTN","EDPBST",49,0)
 D XML^EDPX("<save status='ok' />")
"RTN","EDPBST",50,0)
 D LOAD(EDPAREA)
"RTN","EDPBST",51,0)
 S ^EDPB(231.9,EDPAREA,231)=$H  ; update choices timestamp
"RTN","EDPBST",52,0)
 Q
"RTN","EDPBST",53,0)
UPD(FLD,ERRMSG) ; Add/Update Record (expects EDPAREA, EDPSITE to be defined)
"RTN","EDPBST",54,0)
 N EDPIEN
"RTN","EDPBST",55,0)
 S EDPIEN=$O(^EDPB(231.7,"AD",EDPSITE,EDPAREA,+FLD("duz"),0))_","
"RTN","EDPBST",56,0)
 I 'EDPIEN,FLD("inact") Q  ; don't add inactive selection
"RTN","EDPBST",57,0)
 I 'EDPIEN S EDPIEN="+1,"
"RTN","EDPBST",58,0)
 ;
"RTN","EDPBST",59,0)
 N FDA,FDAIEN,DIERR,ERR
"RTN","EDPBST",60,0)
 S FDA(231.7,EDPIEN,.01)=FLD("duz")
"RTN","EDPBST",61,0)
 S FDA(231.7,EDPIEN,.02)=EDPSITE
"RTN","EDPBST",62,0)
 S FDA(231.7,EDPIEN,.03)=EDPAREA
"RTN","EDPBST",63,0)
 S FDA(231.7,EDPIEN,.04)=FLD("inact")
"RTN","EDPBST",64,0)
 S FDA(231.7,EDPIEN,.06)=$S(FLD("role")="":"",1:$O(^EDPB(232.5,"C",FLD("role"),"")))
"RTN","EDPBST",65,0)
 ;S FDA(231.7,EDPIEN,.07)=FLD("itl") --NtoL
"RTN","EDPBST",66,0)
 S FDA(231.7,EDPIEN,.08)=FLD("clr")
"RTN","EDPBST",67,0)
 I EDPIEN="+1," D
"RTN","EDPBST",68,0)
 . D UPDATE^DIE("","FDA","FDAIEN","ERR")
"RTN","EDPBST",69,0)
 . I $D(DIERR) S ERRMSG=ERRMSG_"Adding "_FLD("name")_" failed.  "
"RTN","EDPBST",70,0)
 E  D
"RTN","EDPBST",71,0)
 . D FILE^DIE("","FDA","ERR")
"RTN","EDPBST",72,0)
 . I $D(DIERR) S ERRMSG=ERRMSG_"Updating "_FLD("name")_" failed.  "
"RTN","EDPBST",73,0)
 Q
"RTN","EDPBWS")
0^5^B229022529^B52550125
"RTN","EDPBWS",1,0)
EDPBWS ;SLC/KCM - Worksheet Configuration Calls ;7/27/12 4:22pm
"RTN","EDPBWS",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPBWS",3,0)
 ;
"RTN","EDPBWS",4,0)
LOADALL(EDPSITE,AREA,EDPROLE) ; load all worksheet configurations for an area
"RTN","EDPBWS",5,0)
 N ROLES,SECTIONS,WORKSHTS,COMPNTS,RESULTS
"RTN","EDPBWS",6,0)
 ;D LSTROLES(AREA,.ROLES) M RESULTS("roles",1)=ROLES
"RTN","EDPBWS",7,0)
 ;D LSTROLES(.ROLES) M RESULTS("roles",1)=ROLES
"RTN","EDPBWS",8,0)
 ;D LSTCMPTS(AREA,.COMPNTS) M RESULTS("components")=COMPNTS
"RTN","EDPBWS",9,0)
 ;D LSTSECTS(AREA,.SECTIONS) M RESULTS("sections",1)=SECTIONS
"RTN","EDPBWS",10,0)
 D LSTWKS(EDPSITE,AREA,.WORKSHTS) M RESULTS("worksheets")=WORKSHTS
"RTN","EDPBWS",11,0)
 D TOXML^EDPXML(.RESULTS,.EDPXML)
"RTN","EDPBWS",12,0)
 Q
"RTN","EDPBWS",13,0)
GETROLES(EDPSITE,AREA) ; get list of roles
"RTN","EDPBWS",14,0)
 N ROLES
"RTN","EDPBWS",15,0)
 D XML^EDPX("<roles>")
"RTN","EDPBWS",16,0)
 D LSTROLES(AREA,.ROLES)
"RTN","EDPBWS",17,0)
 D XML^EDPX("</roles>")
"RTN","EDPBWS",18,0)
 Q
"RTN","EDPBWS",19,0)
GETSECTS(AREA,EDPXML,ROLE) ; get list of sections
"RTN","EDPBWS",20,0)
 N RESULTS,SECTIONS
"RTN","EDPBWS",21,0)
 D LSTSECTS(AREA,.SECTIONS,ROLE) M RESULTS("sections",1)=SECTIONS
"RTN","EDPBWS",22,0)
 D TOXML^EDPXML(.RESULTS,.EDPXML)
"RTN","EDPBWS",23,0)
 Q
"RTN","EDPBWS",24,0)
GETCMPTS(AREA,EDPXML,IEN,ROLE) ; get list of components
"RTN","EDPBWS",25,0)
 N RESULTS,COMPNTS
"RTN","EDPBWS",26,0)
 S IEN=$G(IEN,"")
"RTN","EDPBWS",27,0)
 D LSTCMPTS(AREA,.COMPNTS,IEN,ROLE) M RESULTS("components",1)=COMPNTS
"RTN","EDPBWS",28,0)
 D TOXML^EDPXML(.RESULTS,.EDPXML)
"RTN","EDPBWS",29,0)
 Q
"RTN","EDPBWS",30,0)
GETWORKS(EDPSITE,IEN,REQ,EDPXML) ; get worksheet given IEN
"RTN","EDPBWS",31,0)
 N WKSSPEC,RESULTS
"RTN","EDPBWS",32,0)
 D GETWKS(EDPSITE,IEN,.REQ,.WKSSPEC) M RESULTS("worksheet",IEN)=WKSSPEC
"RTN","EDPBWS",33,0)
 D TOXML^EDPXML(.RESULTS,.EDPXML)
"RTN","EDPBWS",34,0)
 Q
"RTN","EDPBWS",35,0)
LDWSLIST(EDPSITE,AREA,ROLE) ; load brief worksheet list
"RTN","EDPBWS",36,0)
 ; ROLE (optional) - If no role is passed, all worksheets for an AREA/SITE will be returned.
"RTN","EDPBWS",37,0)
 N WSIEN,X0,X,R0,RDAT,WSNAME,RIEN,RPTR,TYPE,DISABLE
"RTN","EDPBWS",38,0)
 D XML^EDPX("<worksheets>")
"RTN","EDPBWS",39,0)
 S RIEN=0 F  S RIEN=$O(^EDPB(232.6,"D",RIEN)) Q:'RIEN  D
"RTN","EDPBWS",40,0)
 .; quit if this is not the role we are looking for
"RTN","EDPBWS",41,0)
 .I $G(ROLE) Q:RIEN'=ROLE
"RTN","EDPBWS",42,0)
 . D XML^EDPX("<role id="_""""_RIEN_""""_" >")
"RTN","EDPBWS",43,0)
 .S WSIEN=0 F  S WSIEN=$O(^EDPB(232.6,"D",RIEN,WSIEN)) Q:'WSIEN  D
"RTN","EDPBWS",44,0)
 ..S X0=$G(^EDPB(232.6,WSIEN,0))
"RTN","EDPBWS",45,0)
 ..S WSNAME=$P(X0,U),TYPE=$P(X0,U,4)
"RTN","EDPBWS",46,0)
 ..S X("id")=WSIEN,X("worksheetName")=WSNAME,X("type")=TYPE
"RTN","EDPBWS",47,0)
 ..S X("name")=$P(X0,U),X("id")=WSIEN
"RTN","EDPBWS",48,0)
 ..S X("institution")=$P(X0,U,2)
"RTN","EDPBWS",49,0)
 ..S X("area")=$P(X0,U,3)
"RTN","EDPBWS",50,0)
 ..S X("disabled")=$S($P(X0,U,6):"true",1:"false")
"RTN","EDPBWS",51,0)
 ..S X("editable")=$S($P(X0,U,7):"true",1:"false")
"RTN","EDPBWS",52,0)
 ..I $$GET1^DIQ(232.5,RIEN,.06,"I")=WSIEN S X("default")="true"
"RTN","EDPBWS",53,0)
 ..D XML^EDPX($$XMLA^EDPX("worksheet",.X)) K X
"RTN","EDPBWS",54,0)
 .D XML^EDPX("</role>")
"RTN","EDPBWS",55,0)
 D XML^EDPX("</worksheets>")
"RTN","EDPBWS",56,0)
 Q
"RTN","EDPBWS",57,0)
LSTROLES(AREA,ARRAY) ; list roles for an area
"RTN","EDPBWS",58,0)
 N RIEN,X0,ROLEIEN,ROLENM,WKS,CNT,EDAC,RABBR
"RTN","EDPBWS",59,0)
 S CNT=0
"RTN","EDPBWS",60,0)
 S RABBR="" F  S RABBR=$O(^EDPB(232.5,"C",RABBR)) Q:RABBR=""  D
"RTN","EDPBWS",61,0)
 .S RIEN="" F  S RIEN=$O(^EDPB(232.5,"C",RABBR,RIEN)) Q:'RIEN  D
"RTN","EDPBWS",62,0)
 ..S CNT=CNT+1
"RTN","EDPBWS",63,0)
 ..S X0=$G(^EDPB(232.5,RIEN,0)),ROLENM=$P(X0,U),WKS=$P(X0,U,4),EDAC=$P(X0,U,6)
"RTN","EDPBWS",64,0)
 ..S X("id")=RIEN
"RTN","EDPBWS",65,0)
 ..S X("abbr")=RABBR
"RTN","EDPBWS",66,0)
 ..S X("displayName")=ROLENM
"RTN","EDPBWS",67,0)
 ..S X("defaultWorksheet")=WKS
"RTN","EDPBWS",68,0)
 ..S X("editAcuity")=$S(+EDAC:"true",1:"false")
"RTN","EDPBWS",69,0)
 ..D XML^EDPX($$XMLA^EDPX("role",.X))
"RTN","EDPBWS",70,0)
 Q
"RTN","EDPBWS",71,0)
LSTCMPTS(AREA,ARRAY,IEN,ROLE) ; list components for an area
"RTN","EDPBWS",72,0)
 N CNT
"RTN","EDPBWS",73,0)
 I $G(IEN) D BLDCMPTS(IEN,1,1,.ARRAY) Q
"RTN","EDPBWS",74,0)
 S IEN=0 F  S IEN=$O(^EDPB(232.72,IEN)) Q:'IEN  D
"RTN","EDPBWS",75,0)
 .I $G(ROLE) Q:'$D(^EDPB(232.72,IEN,8,"B",ROLE))
"RTN","EDPBWS",76,0)
 .S CNT=$G(CNT)+1
"RTN","EDPBWS",77,0)
 .D BLDCMPTS(IEN,CNT,,.ARRAY)
"RTN","EDPBWS",78,0)
 Q
"RTN","EDPBWS",79,0)
BLDCMPTS(IEN,CNT,MOREDAT,ARRAY) ;
"RTN","EDPBWS",80,0)
 ; IEN     - component IEN
"RTN","EDPBWS",81,0)
 ; CNT     - simple counter
"RTN","EDPBWS",82,0)
 ; MOREDAT - If MOREDAT is passed, return more information
"RTN","EDPBWS",83,0)
 ;           This is used to differentiate between a 'list'
"RTN","EDPBWS",84,0)
 ;           style of call, versus a full 'get' on a specific entry
"RTN","EDPBWS",85,0)
 ;
"RTN","EDPBWS",86,0)
 N NAME,X0,X1,X2,X3,X6,PIEN,P0,RCNT,RIEN,ROLE,V0,X10,DEP,DEPCNT
"RTN","EDPBWS",87,0)
 S X0=$G(^EDPB(232.72,IEN,0)),NAME=$P(X0,U)
"RTN","EDPBWS",88,0)
 S MOREDAT=$G(MOREDAT,0)
"RTN","EDPBWS",89,0)
 S ARRAY("component",CNT,"id")=IEN
"RTN","EDPBWS",90,0)
 S ARRAY("component",CNT,"name")=NAME
"RTN","EDPBWS",91,0)
 S ARRAY("component",CNT,"label")=$P(X0,U,2)
"RTN","EDPBWS",92,0)
 S X1=$G(^EDPB(232.72,IEN,1)),X2=$G(^EDPB(232.72,IEN,2)),X3=$G(^EDPB(232.72,IEN,3))
"RTN","EDPBWS",93,0)
 S X6=$G(^EDPB(232.72,IEN,6)),X10=$G(^EDPB(232.72,IEN,10))
"RTN","EDPBWS",94,0)
 S ARRAY("component",CNT,"dataProvider")=$P(X0,U,3)
"RTN","EDPBWS",95,0)
 S ARRAY("component",CNT,"moniker")=$P(X0,U,5)
"RTN","EDPBWS",96,0)
 S ARRAY("component",CNT,"type")=$$GET1^DIQ(232.73,$P(X0,U,6),.01,"E")
"RTN","EDPBWS",97,0)
 S ARRAY("component",CNT,"defaultValue")=$P(X6,U)
"RTN","EDPBWS",98,0)
 S ARRAY("component",CNT,"value")=$P(X10,U)
"RTN","EDPBWS",99,0)
 S ARRAY("component",CNT,"summaryLabel")=$P(X10,U,2)
"RTN","EDPBWS",100,0)
 S ARRAY("component",CNT,"summaryOrder")=$P(X10,U,3)
"RTN","EDPBWS",101,0)
 S ARRAY("component",CNT,"available")=$P(X10,U,3)
"RTN","EDPBWS",102,0)
 S ARRAY("component",CNT,"loadEvent",1,"name")=$P(X1,U,3)
"RTN","EDPBWS",103,0)
 ; for now there can be only 1 dependency
"RTN","EDPBWS",104,0)
 S (DEP,DEPCNT)=0 F  S DEP=$O(^EDPB(232.72,IEN,7,DEP)) Q:'DEP!(DEPCNT>1)  D
"RTN","EDPBWS",105,0)
 .S DEPCNT=DEPCNT+1 Q:DEPCNT>1
"RTN","EDPBWS",106,0)
 .S ARRAY("component",CNT,"dependentOn")=$$GET1^DIQ(232.727,DEP_","_IEN_",",.01,"E")
"RTN","EDPBWS",107,0)
 ; get the list of parameters
"RTN","EDPBWS",108,0)
 S PIEN=0 F  S PIEN=$O(^EDPB(232.72,IEN,5,PIEN)) Q:'PIEN  D
"RTN","EDPBWS",109,0)
 .S P0=$G(^EDPB(232.72,IEN,5,PIEN,0))
"RTN","EDPBWS",110,0)
 .S ARRAY("component",CNT,"param",PIEN,"name")=$P(P0,U)
"RTN","EDPBWS",111,0)
 .S ARRAY("component",CNT,"param",PIEN,"type")=$P(P0,U,2)
"RTN","EDPBWS",112,0)
 .S ARRAY("component",CNT,"param",PIEN,"function")=$P(P0,U,3)
"RTN","EDPBWS",113,0)
 Q
"RTN","EDPBWS",114,0)
LSTSECTS(AREA,ARRAY,ROLE) ; list sections for an area
"RTN","EDPBWS",115,0)
 N IEN,IEN1,X0,X1,CNT,CMPCNT,CMPNT,RIEN
"RTN","EDPBWS",116,0)
 S IEN=0,CNT=0
"RTN","EDPBWS",117,0)
 F  S IEN=$O(^EDPB(232.71,IEN)) Q:'IEN  D
"RTN","EDPBWS",118,0)
 .; if role is passed in, and this 'section' doesn't contain the role, quit
"RTN","EDPBWS",119,0)
 .I $G(ROLE) Q:'$D(^EDPB(232.71,IEN,2,"B",ROLE))
"RTN","EDPBWS",120,0)
 .S X0=^EDPB(232.71,IEN,0),CNT=CNT+1
"RTN","EDPBWS",121,0)
 .S ARRAY("section",CNT,"id")=IEN
"RTN","EDPBWS",122,0)
 .S ARRAY("section",CNT,"name")=$P(X0,U)
"RTN","EDPBWS",123,0)
 .S ARRAY("section",CNT,"displayName")=$P(X0,U,4)
"RTN","EDPBWS",124,0)
 .S IEN1=0,CMPCNT=0
"RTN","EDPBWS",125,0)
 .F  S IEN1=$O(^EDPB(232.71,IEN,1,IEN1)) Q:'IEN1  D
"RTN","EDPBWS",126,0)
 ..S CMPNT=$P(^EDPB(232.71,IEN,1,IEN1,0),U)
"RTN","EDPBWS",127,0)
 ..S X1=^EDPB(232.72,CMPNT,0)
"RTN","EDPBWS",128,0)
 ..S CMPCNT=CMPCNT+1
"RTN","EDPBWS",129,0)
 ..S ARRAY("section",CNT,"component",CMPCNT,"name")=$P(X1,U)
"RTN","EDPBWS",130,0)
 ..S ARRAY("section",CNT,"component",CMPCNT,"id")=CMPNT
"RTN","EDPBWS",131,0)
 .; now build the roles into the array
"RTN","EDPBWS",132,0)
 ;.S RIEN=0 F  S RIEN=$O(^EDPB(232.71,IEN,2,RIEN)) Q:'RIEN  D
"RTN","EDPBWS",133,0)
 ;..S ARRAY("section",CNT,"role",RIEN,"id")=$P(^EDPB(232.71,IEN,2,RIEN,0),U)
"RTN","EDPBWS",134,0)
 ;
"RTN","EDPBWS",135,0)
 ; consider moving these calls to prevent jumping 2 subroutines during the calls
"RTN","EDPBWS",136,0)
 ; this will require results to be newed in this function and ARRAY to be used
"RTN","EDPBWS",137,0)
 ; instead of SECTIONS on the merge. EDPXML will then have to be configured differently.
"RTN","EDPBWS",138,0)
 ; It is currently being cofigured in the calling routine.
"RTN","EDPBWS",139,0)
 Q
"RTN","EDPBWS",140,0)
LSTWKS(EDPSITE,AREA,ARRAY) ; list worksheet configurations for an area
"RTN","EDPBWS",141,0)
 N IEN,CNT,WKSSPEC
"RTN","EDPBWS",142,0)
 S IEN=0,CNT=0
"RTN","EDPBWS",143,0)
 S IEN=0 F  S IEN=$O(^EDPB(232.6,"C",EDPSITE,AREA,IEN)) Q:'IEN  D
"RTN","EDPBWS",144,0)
 . S CNT=CNT+1
"RTN","EDPBWS",145,0)
 . D GETWKS(EDPSITE,IEN,,.WKSSPEC)
"RTN","EDPBWS",146,0)
 . M ARRAY(CNT)=WKSSPEC
"RTN","EDPBWS",147,0)
 . K WKSSPEC
"RTN","EDPBWS",148,0)
 Q
"RTN","EDPBWS",149,0)
GETWKS(EDPSITE,WKS,REQ,ARRAY) ;
"RTN","EDPBWS",150,0)
 ; if REQ("data") is passed, build component data along with definition
"RTN","EDPBWS",151,0)
 ;
"RTN","EDPBWS",152,0)
 N X0,XS,XM,SEQ,SEC,MIEN,I,ROLE,RCNT,CSEQ,COMP,C0,CIEN,CVAL,PNAME,PARVAL,VIEN,V0,PIEN
"RTN","EDPBWS",153,0)
 S X0=$G(^EDPB(232.6,WKS,0)),DATA=$G(DATA,0)
"RTN","EDPBWS",154,0)
 S ARRAY("name")=$P(X0,U),ARRAY("id")=WKS
"RTN","EDPBWS",155,0)
 S ARRAY("institution")=$P(X0,U,2)
"RTN","EDPBWS",156,0)
 S ARRAY("area")=$P(X0,U,3)
"RTN","EDPBWS",157,0)
 S ARRAY("disabled")=$S($P(X0,U,6):"true",1:"false")
"RTN","EDPBWS",158,0)
 S ARRAY("editable")=$S($P(X0,U,7):"true",1:"false")
"RTN","EDPBWS",159,0)
 ; build roles associated with this worksheet
"RTN","EDPBWS",160,0)
 S (ROLE,RCNT)=0 F  S ROLE=$O(^EDPB(232.6,WKS,3,"B",ROLE)) Q:'ROLE  D
"RTN","EDPBWS",161,0)
 .S RCNT=RCNT+1,ARRAY("role",RCNT,"id")=ROLE
"RTN","EDPBWS",162,0)
 ; build section information
"RTN","EDPBWS",163,0)
 S SEQ=0 F  S SEQ=$O(^EDPB(232.6,WKS,2,"B",SEQ)) Q:'SEQ  D
"RTN","EDPBWS",164,0)
 .S SEC=0 F  S SEC=$O(^EDPB(232.6,WKS,2,"B",SEQ,SEC)) Q:'SEC  D
"RTN","EDPBWS",165,0)
 ..S X0=^EDPB(232.6,WKS,2,SEC,0),XS=^EDPB(232.71,$P(X0,U,2),0)
"RTN","EDPBWS",166,0)
 ..S ARRAY("section",SEQ,"id")=$P(X0,U,2)
"RTN","EDPBWS",167,0)
 ..S ARRAY("section",SEQ,"name")=$P(XS,U)
"RTN","EDPBWS",168,0)
 ..S ARRAY("section",SEQ,"displayName")=$P(XS,U,4)
"RTN","EDPBWS",169,0)
 ..S ARRAY("section",SEQ,"initialOpen")=$S($P(X0,U,3):"true",1:"false")
"RTN","EDPBWS",170,0)
 ..S ARRAY("section",SEQ,"sequence")=$P(X0,U)
"RTN","EDPBWS",171,0)
 ..; build component information
"RTN","EDPBWS",172,0)
 ..S CSEQ=0 F  S CSEQ=$O(^EDPB(232.6,WKS,2,SEC,2,"B",CSEQ)) Q:'CSEQ  D
"RTN","EDPBWS",173,0)
 ...S COMP=0 F  S COMP=$O(^EDPB(232.6,WKS,2,SEC,2,"B",CSEQ,COMP)) Q:'COMP  D
"RTN","EDPBWS",174,0)
 ....S C0=$G(^EDPB(232.6,WKS,2,SEC,2,COMP,0)),CIEN=$P(C0,U,2)
"RTN","EDPBWS",175,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"id")=CIEN
"RTN","EDPBWS",176,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"name")=$$GET1^DIQ(232.72,CIEN,.01,"E")
"RTN","EDPBWS",177,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"label")=$$GET1^DIQ(232.72,CIEN,.02,"E")
"RTN","EDPBWS",178,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"sequence")=CSEQ
"RTN","EDPBWS",179,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"editable")=$S($P(C0,U,3):"true",1:"false")
"RTN","EDPBWS",180,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"visibilityTrigger")=$$GET1^DIQ(232.72,CIEN,.12,"E")
"RTN","EDPBWS",181,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"includeInSummary")=$S($P(C0,U,5):"true",1:"false")
"RTN","EDPBWS",182,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"dataProvider")=$$GET1^DIQ(232.72,CIEN,.03,"E")
"RTN","EDPBWS",183,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"summaryLabel")=$$GET1^DIQ(232.72,CIEN,.09,"E")
"RTN","EDPBWS",184,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"summaryOrder")=$$GET1^DIQ(232.72,CIEN,.1,"E")
"RTN","EDPBWS",185,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"value")=$$GET1^DIQ(232.72,CIEN,.08,"E")
"RTN","EDPBWS",186,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"type")=$$GET1^DIQ(232.72,CIEN,.06,"E")
"RTN","EDPBWS",187,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"available")=$$GET1^DIQ(232.72,CIEN,.11,"E")
"RTN","EDPBWS",188,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"loadAPI")=$$GET1^DIQ(232.72,CIEN,2.1,"E")
"RTN","EDPBWS",189,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"saveAPI")=$$GET1^DIQ(232.72,CIEN,2.2,"E")
"RTN","EDPBWS",190,0)
 ....S ARRAY("section",SEQ,"component",CSEQ,"loadEvent",1,"name")=$$GET1^DIQ(232.72,CIEN,1.3,"E")
"RTN","EDPBWS",191,0)
 ....S PIEN=0 F  S PIEN=$O(^EDPB(232.72,CIEN,5,PIEN)) Q:'PIEN  D
"RTN","EDPBWS",192,0)
 .....; below will be needed for future enhancements
"RTN","EDPBWS",193,0)
 .....;S ARRAY("section",SEQ,"component",CSEQ,"loadEvent",1,"name")=$$GET1^DIQ(232.72,CIEN,1.3,"E")
"RTN","EDPBWS",194,0)
 .....;S ARRAY("section",SEQ,"component",CSEQ,"loadEvent",PIEN,"paramName")=$$GET1^DIQ(232.725,PIEN,.01,"E")
"RTN","EDPBWS",195,0)
 .....;S ARRAY("section",SEQ,"component",CSEQ,"loadEvent",PIEN,"dataType")=$$GET1^DIQ(232.725,PIEN,1,"E")
"RTN","EDPBWS",196,0)
 .....;S ARRAY("section",SEQ,"component",CSEQ,"loadEvent",PIEN,"saveloadType")=$$GET1^DIQ(232.725,PIEN,2,"E")
"RTN","EDPBWS",197,0)
 ....S VIEN=0 F  S VIEN=$O(^EDPB(232.72,CIEN,9,VIEN)) Q:'VIEN  D
"RTN","EDPBWS",198,0)
 .....S V0=$G(^EDPB(232.72,CIEN,9,VIEN,0))
"RTN","EDPBWS",199,0)
 .....S ARRAY("section",SEQ,"component",CSEQ,"validator",VIEN,"type")=$$GET1^DIQ(232.74,$P(V0,U),.01,"E")
"RTN","EDPBWS",200,0)
 .....S ARRAY("section",SEQ,"component",CSEQ,"validator",VIEN,"property")=$P(V0,U,2)
"RTN","EDPBWS",201,0)
 .....S ARRAY("section",SEQ,"component",CSEQ,"validator",VIEN,"maxLength")=$P(V0,U,3)
"RTN","EDPBWS",202,0)
 .....S ARRAY("section",SEQ,"component",CSEQ,"validator",VIEN,"required")=$S($P(V0,U,4)=1:"true",1:"false")
"RTN","EDPBWS",203,0)
 .....S ARRAY("section",SEQ,"component",CSEQ,"validator",VIEN,"minValue")=$P(V0,U,5)
"RTN","EDPBWS",204,0)
 .....S ARRAY("section",SEQ,"component",CSEQ,"validator",VIEN,"lowerThanMinError")=$G(^EDPB(232.72,CIEN,9,VIEN,1))
"RTN","EDPBWS",205,0)
 ....; if 'data' is passed in, get the data for the component. Parameters for component must be passed in as well
"RTN","EDPBWS",206,0)
 ....; for data to be retrieved.
"RTN","EDPBWS",207,0)
 ....I '$$VAL(.REQ,"data") Q
"RTN","EDPBWS",208,0)
 ....; below will be needed for future enhancement
"RTN","EDPBWS",209,0)
 ....;S COMDATA=$$BLDCDATA(CIEN,.REQ,.ARRAY)
"RTN","EDPBWS",210,0)
 ....;S CVAL=$P(COMDATA,U),PNAME=$P(COMDATA,U,2),PARVAL=$P(COMDATA,U,3)
"RTN","EDPBWS",211,0)
 ....;S ARRAY("section",SEQ,"component",CSEQ,"dataValue")=CVAL
"RTN","EDPBWS",212,0)
 ....;
"RTN","EDPBWS",213,0)
 ....;S ARRAY("section",SEQ,"component",CSEQ,"parameterName")=PNAME
"RTN","EDPBWS",214,0)
 ....;S ARRAY("section",SEQ,"component",CSEQ,"parameterValue")=PARVAL
"RTN","EDPBWS",215,0)
 ....;D BLDCDATA(CIEN,SEQ,CSEQ,.REQ,.ARRAY)
"RTN","EDPBWS",216,0)
 Q
"RTN","EDPBWS",217,0)
BLDCDATA(IEN,REQ,ARRAY) ;
"RTN","EDPBWS",218,0)
 ; IEN    - IEN of the component, from file 232.72
"RTN","EDPBWS",219,0)
 ; REQ    - Parameter list from call in EDPCTRL
"RTN","EDPBWS",220,0)
 ; ARRAY  - XML ARRAY to continue building XML
"RTN","EDPBWS",221,0)
 N PNAME,PIEN,P0,PDTYPE,LSTYPE,LOADERR,PARVAL,CVAL,PARRAY,RET,C0,C1,CFILE,CFIELD,LALT,LAPI
"RTN","EDPBWS",222,0)
 S RET=""
"RTN","EDPBWS",223,0)
 S C0=$G(^EDPB(232.72,IEN,0))
"RTN","EDPBWS",224,0)
 S C1=$G(^EDPB(232.72,IEN,1))
"RTN","EDPBWS",225,0)
 ; get associated file/field
"RTN","EDPBWS",226,0)
 S CFILE=$P(C1,U),CFIELD=$P(C1,U,2)
"RTN","EDPBWS",227,0)
 ; build parameter list from component
"RTN","EDPBWS",228,0)
 S LOADERR=0
"RTN","EDPBWS",229,0)
 S PIEN=0 F  S PIEN=$O(^EDPB(232.72,IEN,5,PIEN)) Q:'PIEN!(LOADERR)  D
"RTN","EDPBWS",230,0)
 .S P0=$G(^EDPB(232.72,IEN,5,PIEN,0))
"RTN","EDPBWS",231,0)
 .; gather name, data type, and load/save type
"RTN","EDPBWS",232,0)
 .S PNAME=$P(P0,U),PDTYPE=$P(P0,U,2),LSTYPE=$P(P0,U,3)
"RTN","EDPBWS",233,0)
 .I PDTYPE="L",'$D(REQ(PNAME)) D LOADERR(.REQ,SEQ,CSEQ,.ARRAY) S LOADERR=1 Q
"RTN","EDPBWS",234,0)
 .S PARVAL=$$VAL(.REQ,PNAME)
"RTN","EDPBWS",235,0)
 .I PARVAL="" D LOADERR(.REQ,SEQ,CSEQ,.ARRAY) S LOADERR=1 Q
"RTN","EDPBWS",236,0)
 .S PARRAY(PNAME)=PARVAL
"RTN","EDPBWS",237,0)
 I $G(LOADERR) S RET="LOAD ERROR" Q RET
"RTN","EDPBWS",238,0)
 S CVAL="" ; initialize to prevent undefined
"RTN","EDPBWS",239,0)
 ; if file/field exists, get the 'TYPE' from FIELD^DID and utilize that for the call???
"RTN","EDPBWS",240,0)
 I CFILE,CFIELD D
"RTN","EDPBWS",241,0)
 .S CVAL=$$GET1^DIQ(CFILE,PARVAL,CFIELD,"E")
"RTN","EDPBWS",242,0)
 ; if loadapi exists??
"RTN","EDPBWS",243,0)
 ;S LAPI=$$GET1^DIQ(CFILE,PARVAL,2.1,"E") I $L(LAPI) D
"RTN","EDPBWS",244,0)
 ;.D @LAPI
"RTN","EDPBWS",245,0)
 ; if alternate load logic exists??
"RTN","EDPBWS",246,0)
 ;S LALT=$$GET1^DIQ(CFILE,PARVAL,2.2,"E") I $L(LALT) D
"RTN","EDPBWS",247,0)
 ;.D @LALT
"RTN","EDPBWS",248,0)
 S RET=CVAL_U_PNAME_U_PARVAL
"RTN","EDPBWS",249,0)
 ;S ARRAY("section",SEQ,"component",CSEQ,"value")=CVAL
"RTN","EDPBWS",250,0)
 ;S ARRAY("section",SEQ,"component",CSEQ,"parameterName")=PNAME
"RTN","EDPBWS",251,0)
 ;S ARRAY("section",SEQ,"component",CSEQ,"parameterValue")=PARVAL
"RTN","EDPBWS",252,0)
 Q RET
"RTN","EDPBWS",253,0)
LOADERR(PARAM,SEQ,CSEQ,ARRAY) ;
"RTN","EDPBWS",254,0)
 S ARRAY("section",SEQ,"component",CSEQ,"error")="Parameter invalid or missing for this component."
"RTN","EDPBWS",255,0)
 Q
"RTN","EDPBWS",256,0)
 ; REQ1("param",1)=value
"RTN","EDPBWS",257,0)
 ; REQ2("worksheet",counter)=sectionID^Sequence (for section)^InitiallyOpen^componentID^Sequence (for component)^Editable^IncludeInSummary
"RTN","EDPBWS",258,0)
SAVEWORK(REQ1,REQ2,EDPSITE,AREA) ; save worksheet configuration
"RTN","EDPBWS",259,0)
 N WSID,WSNAME,WSINST,WSAREA,WSTYPE,WSROLES,ROLESTR,I,DONE,FIL,WSIENS,NWSIEN,ROLE,SECIEN,SECID,SECIENS,WSINACT
"RTN","EDPBWS",260,0)
 N ROLE,WSERR,DEL,SECIEN,SECIENS,EDITABLE
"RTN","EDPBWS",261,0)
 S WSID=$$VAL(.REQ1,"id"),WSIENS=$S(WSID>0:WSID_",",1:"+1,")
"RTN","EDPBWS",262,0)
 S DEL=$$VAL(.REQ1,"remove"),DEL=$S(DEL="true":1,1:0)
"RTN","EDPBWS",263,0)
 ; if we are deleting the worksheet, do it, then quit
"RTN","EDPBWS",264,0)
 I 'WSID,DEL D WSERR("Missing worksheet ID.") Q
"RTN","EDPBWS",265,0)
 I WSID,'$$GET1^DIQ(232.6,WSID,.07,"I") D WSERR("This is a standard worksheet and is not editable.") Q
"RTN","EDPBWS",266,0)
 I WSID,DEL S FDA(232.6,WSIENS,.01)="@" D FILE^DIE(,"FDA") K FDA Q
"RTN","EDPBWS",267,0)
 S WSNAME=$$VAL(.REQ1,"name") I '$L(WSNAME)!$L(WSNAME)>30 D WSERR("Worksheet name missing or invalid.") Q
"RTN","EDPBWS",268,0)
 I 'WSID,$D(^EDPB(232.6,"B",WSNAME)) D WSERR("Worksheet with this name already exists. Please choose another name and save again.") Q
"RTN","EDPBWS",269,0)
 I 'WSID,WSNAME="" D WSERR("No worksheet ID or NAME was passed to VistA. Can not perform actions on this worksheet") Q
"RTN","EDPBWS",270,0)
 S WSINST=EDPSITE,WSAREA=AREA
"RTN","EDPBWS",271,0)
 S WSTYPE=$$VAL(.REQ1,"type")
"RTN","EDPBWS",272,0)
 S ROLESTR=$$VAL(.REQ1,"role")
"RTN","EDPBWS",273,0)
 S WSINACT=$$VAL(.REQ1,"disabled"),WSINACT=$S(WSINACT="true":1,1:0)
"RTN","EDPBWS",274,0)
 ; get the list of roles appropriate for this worksheet
"RTN","EDPBWS",275,0)
 S DONE=0
"RTN","EDPBWS",276,0)
 F I=1:1 D  Q:DONE
"RTN","EDPBWS",277,0)
 .S ROLE=$P(ROLESTR,U,I) I 'ROLE S DONE=1 Q
"RTN","EDPBWS",278,0)
 .S WSROLES(ROLE)=""
"RTN","EDPBWS",279,0)
 ; setup main worksheet fields
"RTN","EDPBWS",280,0)
 S FIL=232.6 K FDA
"RTN","EDPBWS",281,0)
 D SETFDA(FIL,WSIENS,.01,WSNAME)
"RTN","EDPBWS",282,0)
 D SETFDA(FIL,WSIENS,.02,WSINST)
"RTN","EDPBWS",283,0)
 D SETFDA(FIL,WSIENS,.03,WSAREA)
"RTN","EDPBWS",284,0)
 D SETFDA(FIL,WSIENS,.04,WSTYPE)
"RTN","EDPBWS",285,0)
 D SETFDA(FIL,WSIENS,.06,WSINACT)
"RTN","EDPBWS",286,0)
 ; force all worksheets created by a facility to be editable
"RTN","EDPBWS",287,0)
 D SETFDA(FIL,WSIENS,.07,1)
"RTN","EDPBWS",288,0)
 ; no id means we are creating a NEW worksheet
"RTN","EDPBWS",289,0)
 I '$G(WSID) D  Q
"RTN","EDPBWS",290,0)
 .; add the worksheet to the database
"RTN","EDPBWS",291,0)
 .D UPDATE^DIE(,"FDA","NWSIEN","WSERR") K FDA
"RTN","EDPBWS",292,0)
 .I $D(WSERR) D WSERR("Filing Error") Q
"RTN","EDPBWS",293,0)
 .S WSID=$O(NWSIEN(0)),WSID=$G(NWSIEN(WSID))
"RTN","EDPBWS",294,0)
 .; now add roles to the entry
"RTN","EDPBWS",295,0)
 .S ROLE=0 F  S ROLE=$O(WSROLES(ROLE)) Q:'ROLE  D
"RTN","EDPBWS",296,0)
 ..K FDA
"RTN","EDPBWS",297,0)
 ..D SETFDA(232.63,"+1,"_WSID_",",.01,ROLE)
"RTN","EDPBWS",298,0)
 ..D UPDATE^DIE(,"FDA",,"WSERR") K FDA
"RTN","EDPBWS",299,0)
 .; now add sections and components
"RTN","EDPBWS",300,0)
 .D SECCOMP(WSID,.REQ2)
"RTN","EDPBWS",301,0)
 ; updating a worksheet.
"RTN","EDPBWS",302,0)
 D FILE^DIE(,"FDA") K FDA
"RTN","EDPBWS",303,0)
 ; first clear out the sections and components, so we completely rebuild them
"RTN","EDPBWS",304,0)
 S SECIEN=0 F  S SECID=$O(^EDPB(232.6,WSID,2,SECIEN)) Q:'SECIEN  D
"RTN","EDPBWS",305,0)
 .S SECIENS=SECIEN_","_WSID_","
"RTN","EDPBWS",306,0)
 .S FDA(232.62,SECIENS,.01)="@"
"RTN","EDPBWS",307,0)
 ; now we can place the sections and components back in
"RTN","EDPBWS",308,0)
 D SECCOMP(WSID,.REQ2)
"RTN","EDPBWS",309,0)
 Q
"RTN","EDPBWS",310,0)
SECCOMP(WSID,DATA) ; adds/updates sections and components in a given worksheet
"RTN","EDPBWS",311,0)
 ; REQ2("worksheet",counter)=sectionID^Sequence (for section)^InitiallyOpen^componentID^Sequence (for component)^Editable^IncludeInSummary^VisibilityTrigger
"RTN","EDPBWS",312,0)
 N CNT,ARY,SECDATA,SID,CID,COMP,SECT,I,SFIL,CFIL,SUPDERR,SADDERR,PFLD,CID,INITOPEN
"RTN","EDPBWS",313,0)
 N SSEQ,CSEC,SECIEN,SIENS,CIENS,SECTION,SOK,COK,COMPIEN,COMDATA,EDITABLE
"RTN","EDPBWS",314,0)
 N VISIBLE,CVIS,SUMMARY,CSUM
"RTN","EDPBWS",315,0)
 S ARY=$NA(DATA("worksheet"))
"RTN","EDPBWS",316,0)
 S CNT=0 F  S CNT=$O(@ARY@(CNT)) Q:'CNT  D
"RTN","EDPBWS",317,0)
 .S SECDATA=$G(@ARY@(CNT)) Q:'$L(SECDATA)
"RTN","EDPBWS",318,0)
 .S SID=$P(SECDATA,U),SSEQ=$P(SECDATA,U,2),INITOPEN=$P(SECDATA,U,3),INITOPEN=$S(INITOPEN="true":1,INITOPEN="false":0,1:"")
"RTN","EDPBWS",319,0)
 .S CID=$P(SECDATA,U,4),CSEQ=$P(SECDATA,U,5),EDITABLE=$P(SECDATA,U,6),SUMMARY=$P(SECDATA,U,7),VISIBLE=$P(SECDATA,U,8)
"RTN","EDPBWS",320,0)
 .S EDITABLE=$S(EDITABLE="true":1,EDITABLE="false":0,1:"")
"RTN","EDPBWS",321,0)
 .S SUMMARY=$S(SUMMARY="true":1,SUMMARY="false":0,1:"")
"RTN","EDPBWS",322,0)
 .I CSEQ S COMP(SSEQ,CSEQ)=CID_U_EDITABLE_U_SUMMARY_U_VISIBLE
"RTN","EDPBWS",323,0)
 .I SSEQ,'CSEQ S SECT(SSEQ)=SID_U_INITOPEN
"RTN","EDPBWS",324,0)
 ;
"RTN","EDPBWS",325,0)
 ; first file the sections
"RTN","EDPBWS",326,0)
 K SECDATA
"RTN","EDPBWS",327,0)
 S SFIL=232.62
"RTN","EDPBWS",328,0)
 S SSEQ=0 F  S SSEQ=$O(SECT(SSEQ)) Q:'SSEQ  D
"RTN","EDPBWS",329,0)
 .; first check to see if the section already exists in this worksheet
"RTN","EDPBWS",330,0)
 .S SOK=0
"RTN","EDPBWS",331,0)
 .S SECDATA=$G(SECT(SSEQ)),SID=$P(SECDATA,U),INITOPEN=$P(SECDATA,U,2)
"RTN","EDPBWS",332,0)
 .I $D(^EDPB(232.6,WSID,2,"B",SSEQ)) D  Q
"RTN","EDPBWS",333,0)
 ..S SECIEN=$O(^EDPB(232.6,WSID,2,"B",SSEQ,0)) Q:'SECIEN
"RTN","EDPBWS",334,0)
 ..S SIENS=SECIEN_","_WSID_","
"RTN","EDPBWS",335,0)
 ..S SOK=$$FILEDAT(SFIL,SIENS,SSEQ,SID,INITOPEN,0)
"RTN","EDPBWS",336,0)
 ..I SOK Q
"RTN","EDPBWS",337,0)
 ..; process error (OK was returned as -1 (indicating error))
"RTN","EDPBWS",338,0)
 .; build FDA to add a new section
"RTN","EDPBWS",339,0)
 .S SIENS="+1,"_WSID_","
"RTN","EDPBWS",340,0)
 .S SOK=$$FILEDAT(SFIL,SIENS,SSEQ,SID,INITOPEN,1)
"RTN","EDPBWS",341,0)
 ;
"RTN","EDPBWS",342,0)
 ; now file the components
"RTN","EDPBWS",343,0)
 S CFIL=232.622
"RTN","EDPBWS",344,0)
 S SSEQ=0 F  S SSEQ=$O(COMP(SSEQ)) Q:'SSEQ  D
"RTN","EDPBWS",345,0)
 .; for some reason this section does not exist (possible filing error)
"RTN","EDPBWS",346,0)
 .I '$D(^EDPB(232.6,WSID,2,"B",SSEQ)) Q
"RTN","EDPBWS",347,0)
 .S SECIEN=$O(^EDPB(232.6,WSID,2,"B",SSEQ,0)) Q:'SECIEN
"RTN","EDPBWS",348,0)
 .S CSEQ=0 F  S CSEQ=$O(COMP(SSEQ,CSEQ)) Q:'CSEQ  D
"RTN","EDPBWS",349,0)
 ..S COK=0
"RTN","EDPBWS",350,0)
 ..S COMDATA=$G(COMP(SSEQ,CSEQ)),CID=$P(COMDATA,U),EDITABLE=$P(COMDATA,U,2),CSUM=$P(COMDATA,U,3),CVIS=$P(COMDATA,U,4)
"RTN","EDPBWS",351,0)
 ..I $D(^EDPB(232.6,WSID,2,SECIEN,2,"B",CSEQ)) D  Q
"RTN","EDPBWS",352,0)
 ...S COMPIEN=$O(^EDPB(232.6,WSID,2,SECIEN,2,"B",CSEQ,0)) Q:'COMPIEN
"RTN","EDPBWS",353,0)
 ...S CIENS=COMPIEN_","_SECIEN_","_WSID_","
"RTN","EDPBWS",354,0)
 ...S COK=$$FILEDAT(CFIL,CIENS,CSEQ,CID,EDITABLE,0,CSUM,CVIS)
"RTN","EDPBWS",355,0)
 ..;
"RTN","EDPBWS",356,0)
 ..; build FDA for adding a 'new' component to a section
"RTN","EDPBWS",357,0)
 ..S CIENS="+1,"_SECIEN_","_WSID_","
"RTN","EDPBWS",358,0)
 ..S COK=$$FILEDAT(CFIL,CIENS,CSEQ,CID,EDITABLE,1,CSUM,CVIS)
"RTN","EDPBWS",359,0)
 Q
"RTN","EDPBWS",360,0)
FILEDAT(FIL,IENS,SEQ,ID,P03,NEW,CSUM,CVIS) ; filer for section and component data
"RTN","EDPBWS",361,0)
 ; this can be used for both section and component due to the similarities in the file structures
"RTN","EDPBWS",362,0)
 N ERR,RET
"RTN","EDPBWS",363,0)
 S RET=1
"RTN","EDPBWS",364,0)
 ; if deleting a section or component
"RTN","EDPBWS",365,0)
 I ID="@" D  Q RET
"RTN","EDPBWS",366,0)
 .D SETFDA(FIL,IENS,.01,"@")
"RTN","EDPBWS",367,0)
 .; lock record
"RTN","EDPBWS",368,0)
 .L +^EDPB(232.6,WSID):3 Q:'$T
"RTN","EDPBWS",369,0)
 .D FILE^DIE(,"FDA") S RET=1
"RTN","EDPBWS",370,0)
 .L -^EDPB(232.6,WSID)
"RTN","EDPBWS",371,0)
 .; unlock record
"RTN","EDPBWS",372,0)
 D SETFDA(FIL,IENS,.01,SEQ)
"RTN","EDPBWS",373,0)
 D SETFDA(FIL,IENS,.02,ID)
"RTN","EDPBWS",374,0)
 D SETFDA(FIL,IENS,.03,P03)
"RTN","EDPBWS",375,0)
 ; two additional fields need to be handled for components
"RTN","EDPBWS",376,0)
 I FIL=232.622 D
"RTN","EDPBWS",377,0)
 .D SETFDA(FIL,IENS,.04,CVIS)
"RTN","EDPBWS",378,0)
 .D SETFDA(FIL,IENS,.05,CSUM)
"RTN","EDPBWS",379,0)
 ; if this is a new entry, file it, then quit
"RTN","EDPBWS",380,0)
 I $G(NEW) K ERR D UPDATE^DIE(,"FDA",,"ERR") K FDA S RET=$S($D(ERR):-1,1:1) Q RET
"RTN","EDPBWS",381,0)
 ; if this is meant to update an entry, lock, update, unlock
"RTN","EDPBWS",382,0)
 ; lock
"RTN","EDPBWS",383,0)
 L +^EDPB(232.6,WSID):3 Q:'$T 0
"RTN","EDPBWS",384,0)
 D FILE^DIE(,"FDA","ERR")
"RTN","EDPBWS",385,0)
 L -^EDPB(232.6,WSID)
"RTN","EDPBWS",386,0)
 ; unlock
"RTN","EDPBWS",387,0)
 I $D(ERR) S RET=-1
"RTN","EDPBWS",388,0)
 Q RET
"RTN","EDPBWS",389,0)
SETFDA(F,IENS,FD,VAL) ;
"RTN","EDPBWS",390,0)
 S FDA(F,IENS,FD)=VAL
"RTN","EDPBWS",391,0)
 Q
"RTN","EDPBWS",392,0)
WSERR(ERRTXT) ;
"RTN","EDPBWS",393,0)
 D XML^EDPX("<error>")
"RTN","EDPBWS",394,0)
 D XML^EDPX($G(ERRTXT))
"RTN","EDPBWS",395,0)
 D XML^EDPX("</error>")
"RTN","EDPBWS",396,0)
 Q
"RTN","EDPBWS",397,0)
VAL(ARRY,ITEM) ;return value from array, given ARRY (array name), and ITEM (subscript)
"RTN","EDPBWS",398,0)
 I $D(ARRY(ITEM)),$G(ARRY(ITEM))'="" Q $G(ARRY(ITEM))
"RTN","EDPBWS",399,0)
 Q $G(ARRY(ITEM,1))
"RTN","EDPCSV")
0^14^B1174493^B906612
"RTN","EDPCSV",1,0)
EDPCSV ;SLC/MKB - CSV format utilities ;2/28/12 08:33am
"RTN","EDPCSV",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPCSV",3,0)
 ;
"RTN","EDPCSV",4,0)
EN(REQ) ; Controller for HTTP request
"RTN","EDPCSV",5,0)
 ;
"RTN","EDPCSV",6,0)
 ;S:'$G(EDPTEST) $ETRAP="D ^%ZTER H"
"RTN","EDPCSV",7,0)
 ;
"RTN","EDPCSV",8,0)
 N EDPSITE,EDPHTTP,EDPNULL,EDPFAIL,EDPCSV,I
"RTN","EDPCSV",9,0)
 D UESREQ^EDPX(.REQ) ; unescape the posted data
"RTN","EDPCSV",10,0)
 ;
"RTN","EDPCSV",11,0)
 ;D SET^EDPZCTRL       ; set up the environment, use null device
"RTN","EDPCSV",12,0)
 ;
"RTN","EDPCSV",13,0)
 D EN^EDPRPT($$VAL("start"),$$VAL("stop"),$$VAL("report"),$$VAL("id"),1)
"RTN","EDPCSV",14,0)
 ;
"RTN","EDPCSV",15,0)
 U EDPHTTP
"RTN","EDPCSV",16,0)
 ;W "<results>",!
"RTN","EDPCSV",17,0)
 S I=0 F  S I=$O(EDPCSV(I)) Q:'I  W EDPCSV(I),!
"RTN","EDPCSV",18,0)
 ;W "</results>",!
"RTN","EDPCSV",19,0)
 Q
"RTN","EDPCSV",20,0)
 ;
"RTN","EDPCSV",21,0)
VAL(X) ; return value from request
"RTN","EDPCSV",22,0)
 Q $G(REQ(X,1))
"RTN","EDPCSV",23,0)
 ;
"RTN","EDPCSV",24,0)
ADD(X) ; -- add line X
"RTN","EDPCSV",25,0)
 S EDPCSV=+$G(EDPCSV)+1,EDPCSV(EDPCSV)=X
"RTN","EDPCSV",26,0)
 Q
"RTN","EDPCSV",27,0)
ADDG(X,EDPCSV,EDPXML) ; -- add line x
"RTN","EDPCSV",28,0)
 S EDPCSV=+$G(EDPCSV)+1,@EDPXML@(EDPCSV)=$$ESC^EDPX(X)
"RTN","EDPCSV",29,0)
 ;S @EDPXML@(EDPCSV)=X
"RTN","EDPCSV",30,0)
 Q
"RTN","EDPCSV",31,0)
 ;
"RTN","EDPCSV",32,0)
BLANK ; -- add blank line
"RTN","EDPCSV",33,0)
 S EDPCSV=+$G(EDPCSV)+1,EDPCSV(EDPCSV)=""
"RTN","EDPCSV",34,0)
 Q
"RTN","EDPCTRL")
0^7^B89022760^B73485587
"RTN","EDPCTRL",1,0)
EDPCTRL ;SLC/KCM - Controller for ED Tracking ;5/23/13 11:19am
"RTN","EDPCTRL",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPCTRL",3,0)
 ;
"RTN","EDPCTRL",4,0)
RPC(EDPXML,PARAMS,PARAMS2) ; Process request via RPC instead of CSP
"RTN","EDPCTRL",5,0)
 N X,REQ,EDPSITE,EDPUSER,EDPDBUG
"RTN","EDPCTRL",6,0)
 K EDPXML
"RTN","EDPCTRL",7,0)
 S EDPUSER=DUZ,EDPSITE=DUZ(2),EDPSTA=$$STA^XUAF4(DUZ(2))
"RTN","EDPCTRL",8,0)
 S X="" F  S X=$O(PARAMS(X)) Q:X=""  D
"RTN","EDPCTRL",9,0)
 . I $D(PARAMS(X))>9 M REQ(X)=PARAMS(X)
"RTN","EDPCTRL",10,0)
 . E  S REQ(X,1)=PARAMS(X)
"RTN","EDPCTRL",11,0)
 S EDPDBUG=$$DEBUG^EDPCDBG($G(PARAMS("swfID")))
"RTN","EDPCTRL",12,0)
 I EDPDBUG D PUTREQ^EDPCDBG(EDPDBUG,.PARAMS)
"RTN","EDPCTRL",13,0)
 ;
"RTN","EDPCTRL",14,0)
COMMON ; Come here for both CSP and RPC Mode
"RTN","EDPCTRL",15,0)
 ;
"RTN","EDPCTRL",16,0)
 N EDPFAIL,CMD
"RTN","EDPCTRL",17,0)
 S CMD=$G(REQ("command",1))
"RTN","EDPCTRL",18,0)
 ;
"RTN","EDPCTRL",19,0)
 ; switch on command
"RTN","EDPCTRL",20,0)
 ;
"RTN","EDPCTRL",21,0)
 ; ---------------------------------
"RTN","EDPCTRL",22,0)
 ;
"RTN","EDPCTRL",23,0)
 ; initUser
"RTN","EDPCTRL",24,0)
 ; return <user />
"RTN","EDPCTRL",25,0)
 ;        <view />...
"RTN","EDPCTRL",26,0)
 I CMD="initUser" D  G OUT
"RTN","EDPCTRL",27,0)
 . S AREA=$$VAL("area")
"RTN","EDPCTRL",28,0)
 . D SESS^EDPFAA,VIEWS^EDPFAA
"RTN","EDPCTRL",29,0)
 . D GETROLES^EDPBWS(EDPSITE,AREA)
"RTN","EDPCTRL",30,0)
 ;
"RTN","EDPCTRL",31,0)
 ; ---------------------------------
"RTN","EDPCTRL",32,0)
 ;
"RTN","EDPCTRL",33,0)
 ; matchPatients
"RTN","EDPCTRL",34,0)
 ; return <ptlk />...<ptlk />
"RTN","EDPCTRL",35,0)
 I CMD="matchPatients" D  G OUT
"RTN","EDPCTRL",36,0)
 . D MATCH^EDPFPTL($$VAL("partial"))
"RTN","EDPCTRL",37,0)
 ;
"RTN","EDPCTRL",38,0)
 ; ---------------------------------
"RTN","EDPCTRL",39,0)
 ;
"RTN","EDPCTRL",40,0)
 ; getPatientChecks
"RTN","EDPCTRL",41,0)
 ; return <checks />
"RTN","EDPCTRL",42,0)
 ;        <similar />
"RTN","EDPCTRL",43,0)
 ;        <warning> </warning>
"RTN","EDPCTRL",44,0)
 ;        <patientRecordFlags><flag> <text> </text></flag>...</patientRecordFlags>
"RTN","EDPCTRL",45,0)
 I CMD="getPatientChecks" D  G OUT
"RTN","EDPCTRL",46,0)
 . D CHK^EDPFPTC($$VAL("area"),$$VAL("patient"),$$VAL("name"))
"RTN","EDPCTRL",47,0)
 ;
"RTN","EDPCTRL",48,0)
 ; ---------------------------------
"RTN","EDPCTRL",49,0)
 ;
"RTN","EDPCTRL",50,0)
 ; saveSecurityLog
"RTN","EDPCTRL",51,0)
 ; return <save />
"RTN","EDPCTRL",52,0)
 I CMD="saveSecurityLog" D  G OUT
"RTN","EDPCTRL",53,0)
 . D LOG^EDPFPTC($$VAL("patient"))
"RTN","EDPCTRL",54,0)
 ;
"RTN","EDPCTRL",55,0)
 ; ---------------------------------
"RTN","EDPCTRL",56,0)
 ; 
"RTN","EDPCTRL",57,0)
 ; getLexiconMatches
"RTN","EDPCTRL",58,0)
 ; return <items><item />...</items>
"RTN","EDPCTRL",59,0)
 I CMD="getLexiconMatches" D  G OUT
"RTN","EDPCTRL",60,0)
 . D ICD^EDPFLEX($$VAL("text"))
"RTN","EDPCTRL",61,0)
 ; 
"RTN","EDPCTRL",62,0)
 ; ---------------------------------
"RTN","EDPCTRL",63,0)
 ; 
"RTN","EDPCTRL",64,0)
 ; initLogArea
"RTN","EDPCTRL",65,0)
 ; return <udp />
"RTN","EDPCTRL",66,0)
 ;        <params disposition="" diagnosis="" delay="" delayMinutes="" />
"RTN","EDPCTRL",67,0)
 ;        <logEntries><log />...</logEntries>
"RTN","EDPCTRL",68,0)
 I CMD="initLogArea" D  G OUT
"RTN","EDPCTRL",69,0)
 . I $L($$VAL("logEntry")) S EDPFAIL=$$UPD^EDPLOG($$VAL("logEntry")) Q:$G(EDPFAIL)
"RTN","EDPCTRL",70,0)
 . D PARAM^EDPQAR($$VAL("area"))
"RTN","EDPCTRL",71,0)
 . D GET^EDPQLP($$VAL("area"),-1)  ;-1 = force refresh
"RTN","EDPCTRL",72,0)
 ;
"RTN","EDPCTRL",73,0)
 ; ---------------------------------
"RTN","EDPCTRL",74,0)
 ; 
"RTN","EDPCTRL",75,0)
 ; checkLogin  -- OBSOLETE
"RTN","EDPCTRL",76,0)
 ; return <user />
"RTN","EDPCTRL",77,0)
 I CMD="checkLogin" D SESS^EDPFAA G OUT
"RTN","EDPCTRL",78,0)
 ;
"RTN","EDPCTRL",79,0)
 ; ---------------------------------
"RTN","EDPCTRL",80,0)
 ; 
"RTN","EDPCTRL",81,0)
 ; refreshLogSelector
"RTN","EDPCTRL",82,0)
 ; return <logEntries><log />...</logEntries>
"RTN","EDPCTRL",83,0)
 I CMD="refreshLogSelector" D  G OUT
"RTN","EDPCTRL",84,0)
 . D GET^EDPQLP($$VAL("area"),$$VAL("token"))
"RTN","EDPCTRL",85,0)
 ;
"RTN","EDPCTRL",86,0)
 ; ---------------------------------
"RTN","EDPCTRL",87,0)
 ; 
"RTN","EDPCTRL",88,0)
 ; switchLogEntry
"RTN","EDPCTRL",89,0)
 ; return <udp />
"RTN","EDPCTRL",90,0)
 ;        <logEntry>log fields...</logEntry>
"RTN","EDPCTRL",91,0)
 ;        <choices>choice lists...</choices>
"RTN","EDPCTRL",92,0)
 I CMD="switchLogEntry" D  G OUT
"RTN","EDPCTRL",93,0)
 . I $L($$VAL("logEntry")) S EDPFAIL=$$UPD^EDPLOG($$VAL("logEntry")) Q:$G(EDPFAIL)
"RTN","EDPCTRL",94,0)
 . ;D GET^EDPQLE($S($$VAL("logID"):$$VAL("logID"),1:$$VAL("logEntry")),$$VAL("choiceTS"))
"RTN","EDPCTRL",95,0)
 . D GET^EDPQLE($$VAL("logID"),$$VAL("choiceTS"))
"RTN","EDPCTRL",96,0)
 ;
"RTN","EDPCTRL",97,0)
 ; ---------------------------------
"RTN","EDPCTRL",98,0)
 ; 
"RTN","EDPCTRL",99,0)
 ; saveLogEntry
"RTN","EDPCTRL",100,0)
 ; return <upd />
"RTN","EDPCTRL",101,0)
 I CMD="saveLogEntry" D  G OUT
"RTN","EDPCTRL",102,0)
 . S EDPFAIL=$$UPD^EDPLOG($$VAL("logEntry"),"",$$VAL("restorePatient")) Q:$G(EDPFAIL)
"RTN","EDPCTRL",103,0)
 . ; get updated data after a save
"RTN","EDPCTRL",104,0)
 . ;D GET^EDPQLE($$VAL("logID"),$$VAL("choiceTS"))
"RTN","EDPCTRL",105,0)
 . N PAR,REC S PAR=$$VAL("logEntry") D NVPARSE^EDPX(.REC,PAR)
"RTN","EDPCTRL",106,0)
 . D GET^EDPQLE($$VAL^EDPLOG("id"),$$VAL("choiceTS"))
"RTN","EDPCTRL",107,0)
 ;
"RTN","EDPCTRL",108,0)
 ; ---------------------------------
"RTN","EDPCTRL",109,0)
 ; 
"RTN","EDPCTRL",110,0)
 ; addPatientToLog
"RTN","EDPCTRL",111,0)
 ; return <upd />
"RTN","EDPCTRL",112,0)
 ;        <add />
"RTN","EDPCTRL",113,0)
 ;        <logEntry>log fields...</logEntry>
"RTN","EDPCTRL",114,0)
 ;        <choices>choice lists...</choices>
"RTN","EDPCTRL",115,0)
 ;        <logEntries><log />...</logEntries>
"RTN","EDPCTRL",116,0)
 I CMD="addPatientToLog" D  G OUT
"RTN","EDPCTRL",117,0)
 . S EDPFAIL=$$ADD^EDPLOGA($$VAL("addPatient"),$$VAL("area"),$$VAL("localTime"),$$VAL("choiceTS"))
"RTN","EDPCTRL",118,0)
 . Q:$G(EDPFAIL)
"RTN","EDPCTRL",119,0)
 . D GET^EDPQLP($$VAL("area"),-1)
"RTN","EDPCTRL",120,0)
 ;
"RTN","EDPCTRL",121,0)
 ; ---------------------------------
"RTN","EDPCTRL",122,0)
 ;
"RTN","EDPCTRL",123,0)
 ; deleteStubEntry
"RTN","EDPCTRL",124,0)
 ; return <upd />
"RTN","EDPCTRL",125,0)
 I CMD="deleteStubEntry" D  G OUT
"RTN","EDPCTRL",126,0)
 . D DEL^EDPLOGA($$VAL("area"),$$VAL("logID"))
"RTN","EDPCTRL",127,0)
 ;
"RTN","EDPCTRL",128,0)
 ; ---------------------------------
"RTN","EDPCTRL",129,0)
 ; 
"RTN","EDPCTRL",130,0)
 ; removeLogEntry
"RTN","EDPCTRL",131,0)
 ; return <upd />
"RTN","EDPCTRL",132,0)
 ;        <logEntries><log />...</logEntries>
"RTN","EDPCTRL",133,0)
 I CMD="removeLogEntry" D  G OUT
"RTN","EDPCTRL",134,0)
 . D UPD^EDPLOG($$VAL("logEntry"),1) Q:$G(EDPFAIL)
"RTN","EDPCTRL",135,0)
 . D GET^EDPQLP($$VAL("area"),-1)
"RTN","EDPCTRL",136,0)
 ;
"RTN","EDPCTRL",137,0)
 ; ---------------------------------
"RTN","EDPCTRL",138,0)
 ;
"RTN","EDPCTRL",139,0)
 ; matchClosed
"RTN","EDPCTRL",140,0)
 ; return <visit />...
"RTN","EDPCTRL",141,0)
 I CMD="matchClosed" D  G OUT
"RTN","EDPCTRL",142,0)
 . D CLOSED^EDPQLP($$VAL("area"),$$VAL("partial"))
"RTN","EDPCTRL",143,0)
 ;
"RTN","EDPCTRL",144,0)
 ; ---------------------------------
"RTN","EDPCTRL",145,0)
 ;
"RTN","EDPCTRL",146,0)
 ; loadConfiguration
"RTN","EDPCTRL",147,0)
 ; return <color><map />...</color>...
"RTN","EDPCTRL",148,0)
 ;        <columnList><col />...</columnList>
"RTN","EDPCTRL",149,0)
 ;        <colorMapList><colorMap><map />...</colorMapList>
"RTN","EDPCTRL",150,0)
 ;        <beds><bed />...</beds>
"RTN","EDPCTRL",151,0)
 ;        <params />
"RTN","EDPCTRL",152,0)
 ;        <defaultRoomList><item />...</defaultRoomList>
"RTN","EDPCTRL",153,0)
 ;        <displayWhen><when />...</displayWhen>
"RTN","EDPCTRL",154,0)
 ;        <statusList><status />...</statusList>
"RTN","EDPCTRL",155,0)
 I CMD="loadConfiguration" D  G OUT
"RTN","EDPCTRL",156,0)
 . D LOAD^EDPBCF($$VAL("area"))
"RTN","EDPCTRL",157,0)
 ;
"RTN","EDPCTRL",158,0)
 ; ---------------------------------
"RTN","EDPCTRL",159,0)
 ;
"RTN","EDPCTRL",160,0)
 ; loadBoardConfig
"RTN","EDPCTRL",161,0)
 ; return <spec><row /><col />...</spec>
"RTN","EDPCTRL",162,0)
 I CMD="loadBoardConfig" D  G OUT
"RTN","EDPCTRL",163,0)
 . D LOADBRD^EDPBCF($$VAL("area"),$$VAL("boardID"))
"RTN","EDPCTRL",164,0)
 ;
"RTN","EDPCTRL",165,0)
 ; ---------------------------------
"RTN","EDPCTRL",166,0)
 ;
"RTN","EDPCTRL",167,0)
 ; saveConfigBoard
"RTN","EDPCTRL",168,0)
 ; return <save />
"RTN","EDPCTRL",169,0)
 I CMD="saveConfigBoard" D  G OUT
"RTN","EDPCTRL",170,0)
 . D SAVEBRD^EDPBCF(.REQ) ; pass whole request for parsing
"RTN","EDPCTRL",171,0)
 ;
"RTN","EDPCTRL",172,0)
 ; ---------------------------------
"RTN","EDPCTRL",173,0)
 ;
"RTN","EDPCTRL",174,0)
 ; saveBedConfig
"RTN","EDPCTRL",175,0)
 ; return <save />
"RTN","EDPCTRL",176,0)
 I CMD="saveBedConfig" D  G OUT
"RTN","EDPCTRL",177,0)
 . D SAVE^EDPBRM(.REQ,$$VAL("area")) ; pass whole request for parsing
"RTN","EDPCTRL",178,0)
 ;
"RTN","EDPCTRL",179,0)
 ; ---------------------------------
"RTN","EDPCTRL",180,0)
 ;
"RTN","EDPCTRL",181,0)
 ; saveColorConfig
"RTN","EDPCTRL",182,0)
 ; return <save />
"RTN","EDPCTRL",183,0)
 I CMD="saveColorConfig" D  G OUT
"RTN","EDPCTRL",184,0)
 . D SAVE^EDPBCM(.REQ) ; pass whole request for parsing
"RTN","EDPCTRL",185,0)
 ;
"RTN","EDPCTRL",186,0)
 ; ---------------------------------
"RTN","EDPCTRL",187,0)
 ;
"RTN","EDPCTRL",188,0)
 ; loadSelectionConfig
"RTN","EDPCTRL",189,0)
 ; return <selectionName><code />....</selectionName>...
"RTN","EDPCTRL",190,0)
 I CMD="loadSelectionConfig" D  G OUT
"RTN","EDPCTRL",191,0)
 . D LOAD^EDPBSL($$VAL("area"))
"RTN","EDPCTRL",192,0)
 ;
"RTN","EDPCTRL",193,0)
 ; ---------------------------------
"RTN","EDPCTRL",194,0)
 ; 
"RTN","EDPCTRL",195,0)
 ; loadStaffConfig
"RTN","EDPCTRL",196,0)
 ; return providers, nurses, staff for area
"RTN","EDPCTRL",197,0)
 I CMD="loadStaffConfig" D  G OUT
"RTN","EDPCTRL",198,0)
 . D LOAD^EDPBST($$VAL("area"))
"RTN","EDPCTRL",199,0)
 ;
"RTN","EDPCTRL",200,0)
 ; ---------------------------------
"RTN","EDPCTRL",201,0)
 ;
"RTN","EDPCTRL",202,0)
 ; saveStaffConfig
"RTN","EDPCTRL",203,0)
 ; return <save />
"RTN","EDPCTRL",204,0)
 I CMD="saveStaffConfig" D  G OUT
"RTN","EDPCTRL",205,0)
 . D SAVE^EDPBST(.REQ) ; pass whole request for parsing
"RTN","EDPCTRL",206,0)
 ;
"RTN","EDPCTRL",207,0)
 ; ---------------------------------
"RTN","EDPCTRL",208,0)
 ;
"RTN","EDPCTRL",209,0)
 ; matchPersons
"RTN","EDPCTRL",210,0)
 ; return <per />...<per />
"RTN","EDPCTRL",211,0)
 I CMD="matchPersons" D  G OUT
"RTN","EDPCTRL",212,0)
 . D MATCH^EDPFPER($$VAL("partial"),$$VAL("personType"))
"RTN","EDPCTRL",213,0)
 ;
"RTN","EDPCTRL",214,0)
 ; ---------------------------------
"RTN","EDPCTRL",215,0)
 ;
"RTN","EDPCTRL",216,0)
 ; saveParamConfig
"RTN","EDPCTRL",217,0)
 ; return <save />
"RTN","EDPCTRL",218,0)
 I CMD="saveParamConfig" D  G OUT
"RTN","EDPCTRL",219,0)
 . D SAVE^EDPBPM($$VAL("area"),$$VAL("param"))
"RTN","EDPCTRL",220,0)
 ;
"RTN","EDPCTRL",221,0)
 ; ---------------------------------
"RTN","EDPCTRL",222,0)
 ;
"RTN","EDPCTRL",223,0)
 ; saveSelectionConfig
"RTN","EDPCTRL",224,0)
 ; return <save />
"RTN","EDPCTRL",225,0)
 I CMD="saveSelectionConfig" D  G OUT
"RTN","EDPCTRL",226,0)
 . D SAVE^EDPBSL($$VAL("area"),.REQ)
"RTN","EDPCTRL",227,0)
 ;
"RTN","EDPCTRL",228,0)
 ; ---------------------------------
"RTN","EDPCTRL",229,0)
 ; 
"RTN","EDPCTRL",230,0)
 ; getReport
"RTN","EDPCTRL",231,0)
 ; return <logEntries><log />...</logEntries>
"RTN","EDPCTRL",232,0)
 ;        <averages><all /><not /><adm /></averages>
"RTN","EDPCTRL",233,0)
 ;        <providers><md />...</providers>
"RTN","EDPCTRL",234,0)
 I CMD="getReport" D  G OUT
"RTN","EDPCTRL",235,0)
 . D EN^EDPRPT($$VAL("start"),$$VAL("stop"),$$VAL("report"),$$VAL("id"),0,$$VAL("task"))
"RTN","EDPCTRL",236,0)
 ;
"RTN","EDPCTRL",237,0)
 ; ---------------------------------
"RTN","EDPCTRL",238,0)
 ; 
"RTN","EDPCTRL",239,0)
 ; getCSV
"RTN","EDPCTRL",240,0)
 ; return TAB separated values for report
"RTN","EDPCTRL",241,0)
 I CMD="getCSV" D  G OUT
"RTN","EDPCTRL",242,0)
 . N EDPCSV   ; CSV mode uses EDPCSV instead of EDPXML
"RTN","EDPCTRL",243,0)
 . D EN^EDPRPT($$VAL("start"),$$VAL("stop"),$$VAL("report"),$$VAL("id"),1,$$VAL("task"))
"RTN","EDPCTRL",244,0)
 . M EDPXML=EDPCSV
"RTN","EDPCTRL",245,0)
 ;
"RTN","EDPCTRL",246,0)
 ; ---------------------------------
"RTN","EDPCTRL",247,0)
 ;
"RTN","EDPCTRL",248,0)
 ; getDetails
"RTN","EDPCTRL",249,0)
 I CMD="getDetails" D  G OUT
"RTN","EDPCTRL",250,0)
 . D EN^EDPDTL($$VAL("logEntryId"),$$VAL("attribute"))
"RTN","EDPCTRL",251,0)
 ;
"RTN","EDPCTRL",252,0)
 ; ---------------------------------
"RTN","EDPCTRL",253,0)
 ;
"RTN","EDPCTRL",254,0)
 ; getVitals
"RTN","EDPCTRL",255,0)
 I CMD="getVitals" D  G OUT
"RTN","EDPCTRL",256,0)
 . D GET^EDPVIT($$VAL("dfn"),$$VAL("start"),$$VAL("stop"))
"RTN","EDPCTRL",257,0)
 ;
"RTN","EDPCTRL",258,0)
 ; ---------------------------------
"RTN","EDPCTRL",259,0)
 ;
"RTN","EDPCTRL",260,0)
 ; saveVitals
"RTN","EDPCTRL",261,0)
 I CMD="saveVitals" D  G OUT
"RTN","EDPCTRL",262,0)
 . D PUT^EDPVIT($$VAL("dfn"),$$VAL("vital"))
"RTN","EDPCTRL",263,0)
 ;
"RTN","EDPCTRL",264,0)
 ; ---------------------------------
"RTN","EDPCTRL",265,0)
 ;
"RTN","EDPCTRL",266,0)
 ; savePhoneNumbers
"RTN","EDPCTRL",267,0)
 I CMD="savePhoneNumbers" D  G OUT
"RTN","EDPCTRL",268,0)
 . D PHONE^EDPUPD($$VAL("patient"),$$VAL("phone"),$$VAL("cell"),$$VAL("nokPhone"))
"RTN","EDPCTRL",269,0)
 ;
"RTN","EDPCTRL",270,0)
 ; ---------------------------------
"RTN","EDPCTRL",271,0)
 ;
"RTN","EDPCTRL",272,0)
 ; getLabOrderHistory
"RTN","EDPCTRL",273,0)
 I CMD="getLabOrderHistory" D  G OUT
"RTN","EDPCTRL",274,0)
 . N EDPREQ M EDPREQ=REQ
"RTN","EDPCTRL",275,0)
 . I '$D(EDPREQ("order")) D  ;find lab orders
"RTN","EDPCTRL",276,0)
 .. N LOG,I,N,X
"RTN","EDPCTRL",277,0)
 .. S LOG=$$VAL("id"),(I,N)=0 Q:LOG<1
"RTN","EDPCTRL",278,0)
 .. F  S I=$O(^EDP(230,LOG,8,I)) Q:I<1  S X=$G(^(I,0)) I X,$P(X,U,2)="L" S N=N+1,EDPREQ("order",N)=+X
"RTN","EDPCTRL",279,0)
 . D LAB^EDPHIST(.EDPXML,.EDPREQ)
"RTN","EDPCTRL",280,0)
 ;
"RTN","EDPCTRL",281,0)
 ; ---------------------------------
"RTN","EDPCTRL",282,0)
 ;
"RTN","EDPCTRL",283,0)
 ; getMedEfficacy
"RTN","EDPCTRL",284,0)
 ; I CMD="getMedEfficacy" D  G OUT
"RTN","EDPCTRL",285,0)
 ; . N EDPREQ M EDPREQ=REQ
"RTN","EDPCTRL",286,0)
 ; . D MEDHIST^VPRXML(.EDPXML,.EDPREQ)
"RTN","EDPCTRL",287,0)
 ;
"RTN","EDPCTRL",288,0)
 ; ---------------------------------
"RTN","EDPCTRL",289,0)
 ;
"RTN","EDPCTRL",290,0)
 ; saveClinicalEvent
"RTN","EDPCTRL",291,0)
 I CMD="saveClinicalEvent" D  G OUT
"RTN","EDPCTRL",292,0)
 . N EDPREQ M EDPREQ=REQ
"RTN","EDPCTRL",293,0)
 . D EVENT^EDPUPD(.EDPREQ)
"RTN","EDPCTRL",294,0)
 ;
"RTN","EDPCTRL",295,0)
 ; ---------------------------------
"RTN","EDPCTRL",296,0)
 ;
"RTN","EDPCTRL",297,0)
 ; ackOrders
"RTN","EDPCTRL",298,0)
 I CMD="ackOrders" D  G OUT
"RTN","EDPCTRL",299,0)
 . N EDPREQ M EDPREQ=REQ
"RTN","EDPCTRL",300,0)
 . D ACK^EDPUPD(.EDPREQ)
"RTN","EDPCTRL",301,0)
 ;
"RTN","EDPCTRL",302,0)
 ; ---------------------------------
"RTN","EDPCTRL",303,0)
 ;
"RTN","EDPCTRL",304,0)
 ; getLabs = return lab results
"RTN","EDPCTRL",305,0)
 I CMD="getLabs" D  G OUT
"RTN","EDPCTRL",306,0)
 . D EN^EDPLAB(.EDPXML,.REQ)
"RTN","EDPCTRL",307,0)
 ;
"RTN","EDPCTRL",308,0)
 ; ---------------------------------
"RTN","EDPCTRL",309,0)
 ;
"RTN","EDPCTRL",310,0)
 ; getRoomBedSelections
"RTN","EDPCTRL",311,0)
 I CMD="getRoomBedSelections" D  G OUT
"RTN","EDPCTRL",312,0)
 . N AREA,LOG,X3,CURBED
"RTN","EDPCTRL",313,0)
 . S AREA=$$VAL("area"),LOG=$$VAL("logEntryId")
"RTN","EDPCTRL",314,0)
 . S X3=$G(^EDP(230,+LOG,3)),CURBED=+$P(X3,U,4)_U_$P(X3,U,9)
"RTN","EDPCTRL",315,0)
 . D BEDS^EDPQLE
"RTN","EDPCTRL",316,0)
 ;
"RTN","EDPCTRL",317,0)
 ; ---------------------------------
"RTN","EDPCTRL",318,0)
 ;
"RTN","EDPCTRL",319,0)
 ; getChart
"RTN","EDPCTRL",320,0)
 ; I CMD="getChart" D  G OUT
"RTN","EDPCTRL",321,0)
 ; . D ALL^VPRXML(.EDPXML,$$VAL("patient"))
"RTN","EDPCTRL",322,0)
 ;
"RTN","EDPCTRL",323,0)
 ; ---------------------------------
"RTN","EDPCTRL",324,0)
 ;
"RTN","EDPCTRL",325,0)
 ; loadWorksheet
"RTN","EDPCTRL",326,0)
 I CMD="loadWorksheet" D  G OUT
"RTN","EDPCTRL",327,0)
 . D LOAD^EDPWS(.REQ) ;; need to create CTXT (patient, visit, etc.)
"RTN","EDPCTRL",328,0)
 ; --- OLD:
"RTN","EDPCTRL",329,0)
 I CMD="loadDefinition" D  G OUT
"RTN","EDPCTRL",330,0)
 . D LOAD^EDPWS(0)
"RTN","EDPCTRL",331,0)
 ;
"RTN","EDPCTRL",332,0)
 ; ---------------------------------
"RTN","EDPCTRL",333,0)
 ;
"RTN","EDPCTRL",334,0)
 ; loadWorksheetConfig
"RTN","EDPCTRL",335,0)
 I CMD="loadWorksheetConfig" D  G OUT
"RTN","EDPCTRL",336,0)
 . D LOADALL^EDPBWS($$VAL("area"),$$VAL("role"))
"RTN","EDPCTRL",337,0)
 ;
"RTN","EDPCTRL",338,0)
 ; ---------------------------------
"RTN","EDPCTRL",339,0)
 ; loadWorksheetList
"RTN","EDPCTRL",340,0)
 I CMD="loadWorksheetList" D  G OUT
"RTN","EDPCTRL",341,0)
 . D LDWSLIST^EDPBWS(EDPSITE,$$VAL("area"),$$VAL("roleID"))
"RTN","EDPCTRL",342,0)
 ;
"RTN","EDPCTRL",343,0)
 ; ---------------------------------
"RTN","EDPCTRL",344,0)
 ; getWorksheet
"RTN","EDPCTRL",345,0)
 I CMD="getWorksheet" D  G OUT
"RTN","EDPCTRL",346,0)
 . D GETWORKS^EDPBWS(EDPSITE,$$VAL("id"),.REQ,.EDPXML)
"RTN","EDPCTRL",347,0)
 ;
"RTN","EDPCTRL",348,0)
 ; ---------------------------------
"RTN","EDPCTRL",349,0)
 ; getSectionList
"RTN","EDPCTRL",350,0)
 I CMD="getSectionList" D  G OUT
"RTN","EDPCTRL",351,0)
 . D GETSECTS^EDPBWS($$VAL("area"),.EDPXML,$$VAL("role"))
"RTN","EDPCTRL",352,0)
 ;
"RTN","EDPCTRL",353,0)
 ; ---------------------------------
"RTN","EDPCTRL",354,0)
 ; getSection
"RTN","EDPCTRL",355,0)
 ;I CMD="getSection" D  G OUT
"RTN","EDPCTRL",356,0)
 ;. D GET1SEC^EDPBWS($$val("sectionID"))
"RTN","EDPCTRL",357,0)
 ; ---------------------------------
"RTN","EDPCTRL",358,0)
 ; getComponentList
"RTN","EDPCTRL",359,0)
 I CMD="getComponentList" D  G OUT
"RTN","EDPCTRL",360,0)
 . D GETCMPTS^EDPBWS($$VAL("area"),.EDPXML,$$VAL("componentID"),$$VAL("role"))
"RTN","EDPCTRL",361,0)
 ; ---------------------------------
"RTN","EDPCTRL",362,0)
 ; saveWorksheetConfig
"RTN","EDPCTRL",363,0)
 I CMD="saveWorksheetConfig" D  G OUT
"RTN","EDPCTRL",364,0)
 . ;D SAVEALL^EDPBWS(.REQ)
"RTN","EDPCTRL",365,0)
 . D SAVEWORK^EDPBWS(.PARAMS,.PARAMS2,EDPSITE,$$VAL("area"))
"RTN","EDPCTRL",366,0)
 ; ---------------------------------
"RTN","EDPCTRL",367,0)
 ; loadUserProfile
"RTN","EDPCTRL",368,0)
 I CMD="loadUserProfile" D  G OUT
"RTN","EDPCTRL",369,0)
 . D BOOT^EDPFAA($$VAL("appName"))
"RTN","EDPCTRL",370,0)
 ;
"RTN","EDPCTRL",371,0)
 ; ---------------------------------
"RTN","EDPCTRL",372,0)
 ; 
"RTN","EDPCTRL",373,0)
 ; getPatientPanel
"RTN","EDPCTRL",374,0)
 I CMD="getPatientPanel" D  G OUT
"RTN","EDPCTRL",375,0)
 . D GET^EDPQDBS($$VAL("area"),$$VAL("board"))
"RTN","EDPCTRL",376,0)
 . D GET^EDPQPP($$VAL("area"),$$VAL("board"),-1)
"RTN","EDPCTRL",377,0)
 . D LISTS^EDPQPP($$VAL("area"))
"RTN","EDPCTRL",378,0)
 ;
"RTN","EDPCTRL",379,0)
 ; ---------------------------------
"RTN","EDPCTRL",380,0)
 ;
"RTN","EDPCTRL",381,0)
 ; else
"RTN","EDPCTRL",382,0)
 D XML^EDPX("<error msg='"_$$MSG^EDPX(2300010)_CMD_"' />")
"RTN","EDPCTRL",383,0)
 ; end switch
"RTN","EDPCTRL",384,0)
 ; 
"RTN","EDPCTRL",385,0)
OUT ; output the XML
"RTN","EDPCTRL",386,0)
 I EDPDBUG D PUTXML^EDPCDBG(EDPDBUG,.EDPXML)
"RTN","EDPCTRL",387,0)
 I $L($G(EDPHTTP)) D        ; if in CSP mode
"RTN","EDPCTRL",388,0)
 . U EDPHTTP
"RTN","EDPCTRL",389,0)
 . W "<results>",!
"RTN","EDPCTRL",390,0)
 . N I S I=0 F  S I=$O(EDPXML(I)) Q:'I  W EDPXML(I),!
"RTN","EDPCTRL",391,0)
 . W "</results>",!
"RTN","EDPCTRL",392,0)
 K EDPHTTP
"RTN","EDPCTRL",393,0)
END Q
"RTN","EDPCTRL",394,0)
 ;
"RTN","EDPCTRL",395,0)
VAL(X) ; return value from request
"RTN","EDPCTRL",396,0)
 Q $G(REQ(X,1))
"RTN","EDPFAA")
0^4^B36904209^B24518510
"RTN","EDPFAA",1,0)
EDPFAA ;SLC/KCM - RPC Calls to Facility ;5/2/12 3:36pm
"RTN","EDPFAA",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPFAA",3,0)
 ;
"RTN","EDPFAA",4,0)
BOOT(APP) ; bootstrap appliction
"RTN","EDPFAA",5,0)
 D USER
"RTN","EDPFAA",6,0)
 D APP(APP)
"RTN","EDPFAA",7,0)
 Q
"RTN","EDPFAA",8,0)
USER ; set bootstrap USER node
"RTN","EDPFAA",9,0)
 N X,TSIEN,ROLEIEN,ROLE,ROLENM,DFLTBRD,DFLTWSHT
"RTN","EDPFAA",10,0)
 S X("duz")=DUZ
"RTN","EDPFAA",11,0)
 S X("userNm")=$P($G(^VA(200,DUZ,0)),U)
"RTN","EDPFAA",12,0)
 S X("timeOut")=$$GET^XPAR("USR^DIV^SYS","ORWOR TIMEOUT CHART",1,"I")
"RTN","EDPFAA",13,0)
 S:'X("timeOut") X("timeOut")=$$DTIME^XUP(DUZ)
"RTN","EDPFAA",14,0)
 S:'X("timeOut") X("timeOut")=300
"RTN","EDPFAA",15,0)
 S X("timeOut")=X("timeOut")*1000        ; milliseconds
"RTN","EDPFAA",16,0)
 S X("countDown")=$$GET^XPAR("USR^SYS^PKG","ORWOR TIMEOUT COUNTDOWN",1,"I")
"RTN","EDPFAA",17,0)
 S:'X("countDown") X("countDown")=10
"RTN","EDPFAA",18,0)
 S X("countDown")=X("countDown")*1000    ; milliseconds
"RTN","EDPFAA",19,0)
 S TSIEN=$O(^EDPB(231.7,"B",DUZ,""))
"RTN","EDPFAA",20,0)
 I TSIEN S ROLEIEN=$O(^EDPB(231.7,"AC",EDPSITE,AREA,TSIEN,""))
"RTN","EDPFAA",21,0)
 I $G(ROLEIEN) D
"RTN","EDPFAA",22,0)
 .S X("roleID")=ROLEIEN
"RTN","EDPFAA",23,0)
 .S ROLENM=$$GET1^DIQ(232.5,ROLEIEN,.01,"E"),X("roleName")=ROLENM
"RTN","EDPFAA",24,0)
 .S ROLE=$$GET1^DIQ(232.5,ROLEIEN,.02,"E"),X("roleAbbr")=ROLE
"RTN","EDPFAA",25,0)
 .S DFLTWSHT=$$GET1^DIQ(232.5,ROLEIEN,.04,"E"),X("defaultWorksheet")=DFLTWSHT
"RTN","EDPFAA",26,0)
 .S DFLTBRD=$$GET1^DIQ(232.5,ROLEIEN,.05,"I"),X("defaultBoard")=DFLTBRD
"RTN","EDPFAA",27,0)
 .; Gather all available worksheets for this role
"RTN","EDPFAA",28,0)
 .D LDWSLIST^EDPBWS(EDPSITE,AREA,ROLEIEN)
"RTN","EDPFAA",29,0)
 D XML^EDPX($$XMLA^EDPX("user",.X,""))
"RTN","EDPFAA",30,0)
 I $D(^XUSEC("XUPROGMODE",DUZ))>0 D XML^EDPX("<auth name=""debug"" />")
"RTN","EDPFAA",31,0)
 D XML^EDPX("</user>")
"RTN","EDPFAA",32,0)
 Q
"RTN","EDPFAA",33,0)
APP(APP) ; set bootstrap APP node
"RTN","EDPFAA",34,0)
 N X,AREA
"RTN","EDPFAA",35,0)
 S X("name")=APP
"RTN","EDPFAA",36,0)
 S X("site")=DUZ(2)
"RTN","EDPFAA",37,0)
 S X("siteNm")=$$NAME^XUAF4(X("site"))
"RTN","EDPFAA",38,0)
 S X("station")=$$STA^XUAF4(DUZ(2))
"RTN","EDPFAA",39,0)
 S X("time")=$$NOW^XLFDT
"RTN","EDPFAA",40,0)
 S X("version")=$$VERSRV^EDPQAR
"RTN","EDPFAA",41,0)
 S X("vistaSession")=$$SESSID
"RTN","EDPFAA",42,0)
 D XML^EDPX($$XMLA^EDPX("app",.X,""))
"RTN","EDPFAA",43,0)
 D AREA
"RTN","EDPFAA",44,0)
 I APP="cpe-ui-reports" D RPTS
"RTN","EDPFAA",45,0)
 I APP="cpe-ui-care" D ROLES
"RTN","EDPFAA",46,0)
 D XML^EDPX("</app>")
"RTN","EDPFAA",47,0)
 Q
"RTN","EDPFAA",48,0)
AREA ; set default area node
"RTN","EDPFAA",49,0)
 N X
"RTN","EDPFAA",50,0)
 S X("area")=$$DFLTAREA^EDPQAR(""),AREA=X("area")
"RTN","EDPFAA",51,0)
 I X("area") S X("areaNm")=$P(^EDPB(231.9,X("area"),0),U)
"RTN","EDPFAA",52,0)
 D XML^EDPX($$XMLA^EDPX("defaultArea",.X))
"RTN","EDPFAA",53,0)
 Q
"RTN","EDPFAA",54,0)
RPTS ; set auth nodes for reports
"RTN","EDPFAA",55,0)
 I $D(^XUSEC("EDPR EXPORT",DUZ))>0 D XML^EDPX("<auth name=""rptExport"" />")
"RTN","EDPFAA",56,0)
 I $D(^XUSEC("EDPR PROVIDER",DUZ))>0 D XML^EDPX("<auth name=""rptProvider"" />")
"RTN","EDPFAA",57,0)
 I $D(^XUSEC("EDPR XREF",DUZ))>0 D XML^EDPX("<auth name=""rptXRef"" />")
"RTN","EDPFAA",58,0)
 I $D(^XUSEC("EDPR ADHOC",DUZ))>0 D XML^EDPX("<auth name=""rptAdhoc"" />")
"RTN","EDPFAA",59,0)
 Q
"RTN","EDPFAA",60,0)
ROLES ; set up roles
"RTN","EDPFAA",61,0)
 N ROLE S ROLE=0         ; TEMPORARY!!
"RTN","EDPFAA",62,0)
 I DUZ=20011 S ROLE=573
"RTN","EDPFAA",63,0)
 I DUZ=20014 S ROLE=272
"RTN","EDPFAA",64,0)
 I DUZ=20013 S ROLE=426
"RTN","EDPFAA",65,0)
 I DUZ=20028 S ROLE=623
"RTN","EDPFAA",66,0)
 I 'ROLE S ROLE=459
"RTN","EDPFAA",67,0)
 S X("id")=ROLE
"RTN","EDPFAA",68,0)
 S X("displayName")=$$CLNAME^USRLM(ROLE)
"RTN","EDPFAA",69,0)
 D XML^EDPX($$XMLA^EDPX("role",.X))
"RTN","EDPFAA",70,0)
 S IEN=$O(^EDPB(232.5,"C",EDPSITE,AREA,ROLE,0)) Q:'IEN
"RTN","EDPFAA",71,0)
 S BRD=$P(^EDPB(232.5,IEN,0),U,5)
"RTN","EDPFAA",72,0)
 D XML^EDPX("<board defaultName='"_BRD_"' />")
"RTN","EDPFAA",73,0)
 Q
"RTN","EDPFAA",74,0)
 ; TODO: provide a mechanism to rebuild role list if AREA changes
"RTN","EDPFAA",75,0)
 N X,ROLE,IEN,BRD,DONE,ERR
"RTN","EDPFAA",76,0)
 S ROLE=0,DONE=0
"RTN","EDPFAA",77,0)
 F  S ROLE=$O(^EDPB(232.5,"C",EDPSITE,AREA,ROLE)) Q:'ROLE  D  Q:DONE
"RTN","EDPFAA",78,0)
 . Q:'$$ISA^USRLM(DUZ,ROLE,.ERR,DT)
"RTN","EDPFAA",79,0)
 . S DONE=1
"RTN","EDPFAA",80,0)
 . S X("id")=ROLE
"RTN","EDPFAA",81,0)
 . S X("displayName")=$$CLNAME^USRLM(ROLE)
"RTN","EDPFAA",82,0)
 . D XML^EDPX($$XMLA^EDPX("role",.X))
"RTN","EDPFAA",83,0)
 . S IEN=$O(^EDPB(232.5,"C",EDPSITE,AREA,ROLE,0)) Q:'IEN
"RTN","EDPFAA",84,0)
 . S BRD=$P(^EDPB(232.5,IEN,0),U,5)
"RTN","EDPFAA",85,0)
 . D XML^EDPX("<board defaultName='"_BRD_"' />")
"RTN","EDPFAA",86,0)
 Q
"RTN","EDPFAA",87,0)
SESS ; set up session -- (OLD from version 1?)
"RTN","EDPFAA",88,0)
 N X,TSIEN,ROLEIEN,ROLENM,ROLE,DFLTWSHT,DFLTBRD,DFLTROOM
"RTN","EDPFAA",89,0)
 S X("duz")=DUZ
"RTN","EDPFAA",90,0)
 S X("userNm")=$P($G(^VA(200,DUZ,0)),U)
"RTN","EDPFAA",91,0)
 S X("site")=DUZ(2)
"RTN","EDPFAA",92,0)
 S X("siteNm")=$$NAME^XUAF4(X("site"))
"RTN","EDPFAA",93,0)
 S X("station")=$$STA^XUAF4(DUZ(2))
"RTN","EDPFAA",94,0)
 S X("time")=$$NOW^XLFDT
"RTN","EDPFAA",95,0)
 S X("worksheets")=($D(^XUSEC("EDPF WORKSHEETS",DUZ))>0)
"RTN","EDPFAA",96,0)
 S X("rptExport")=($D(^XUSEC("EDPR EXPORT",DUZ))>0)
"RTN","EDPFAA",97,0)
 S X("rptProvider")=($D(^XUSEC("EDPR PROVIDER",DUZ))>0)
"RTN","EDPFAA",98,0)
 S X("rptXRef")=($D(^XUSEC("EDPR XREF",DUZ))>0)
"RTN","EDPFAA",99,0)
 S X("rptAdhoc")=($D(^XUSEC("EDPR ADHOC",DUZ))>0)
"RTN","EDPFAA",100,0)
 S X("progMode")=($D(^XUSEC("XUPROGMODE",DUZ))>0)
"RTN","EDPFAA",101,0)
 S X("version")=$$VERSRV^EDPQAR
"RTN","EDPFAA",102,0)
 ;
"RTN","EDPFAA",103,0)
 ;
"RTN","EDPFAA",104,0)
 ; PATCH 6 - BWF - Adding 'defaultRoom' = true/false to identify wheteher or not a default room has been set.
"RTN","EDPFAA",105,0)
 S DFLTROOM=$$GET1^DIQ(231.9,AREA,1.12,"I")
"RTN","EDPFAA",106,0)
 S X("defaultRoom")=$S(DFLTROOM:"true",1:"false")
"RTN","EDPFAA",107,0)
 ;
"RTN","EDPFAA",108,0)
 ; This code to enable VEHU training.
"RTN","EDPFAA",109,0)
 ;N AREA
"RTN","EDPFAA",110,0)
 ;S AREA=$$GET^XPAR(DUZ_";VA(200,","EDPF USER AREA",1,"Q")
"RTN","EDPFAA",111,0)
 ;I AREA S X("area")=AREA,X("areaNm")=$P($G(^EDPB(231.9,AREA,0)),U)
"RTN","EDPFAA",112,0)
 ;
"RTN","EDPFAA",113,0)
 ;TDP - Patch 2 change to use new EDIS timeout parameter
"RTN","EDPFAA",114,0)
 ;S X("timeOut")=$$GET^XPAR("USR^DIV^SYS","ORWOR TIMEOUT CHART",1,"I")
"RTN","EDPFAA",115,0)
 S X("timeOut")=$$GET^XPAR("USR^DIV^SYS","EDP APP TIMEOUT",1,"I")
"RTN","EDPFAA",116,0)
 S:'X("timeOut") X("timeOut")=$$DTIME^XUP(DUZ)
"RTN","EDPFAA",117,0)
 S:'X("timeOut") X("timeOut")=300
"RTN","EDPFAA",118,0)
 S X("timeOut")=X("timeOut")*1000        ; milliseconds
"RTN","EDPFAA",119,0)
 ;
"RTN","EDPFAA",120,0)
 ;TDP - Patch 2 change to use new EDIS timeout countdown parameter
"RTN","EDPFAA",121,0)
 ;S X("countDown")=$$GET^XPAR("USR^SYS^PKG","ORWOR TIMEOUT COUNTDOWN",1,"I")
"RTN","EDPFAA",122,0)
 S X("countDown")=$$GET^XPAR("USR^SYS^PKG","EDP APP COUNTDOWN",1,"I")
"RTN","EDPFAA",123,0)
 S:'X("countDown") X("countDown")=10
"RTN","EDPFAA",124,0)
 S X("countDown")=X("countDown")*1000    ; milliseconds
"RTN","EDPFAA",125,0)
 S TSIEN=$O(^EDPB(231.7,"B",DUZ,""))
"RTN","EDPFAA",126,0)
 I TSIEN S ROLEIEN=$$GET1^DIQ(231.7,TSIEN,.06,"I")
"RTN","EDPFAA",127,0)
 I $G(ROLEIEN) D
"RTN","EDPFAA",128,0)
 .S X("roleID")=ROLEIEN
"RTN","EDPFAA",129,0)
 .S ROLENM=$$GET1^DIQ(232.5,ROLEIEN,.01,"E"),X("roleName")=ROLENM
"RTN","EDPFAA",130,0)
 .S ROLE=$$GET1^DIQ(232.5,ROLEIEN,.02,"E"),X("roleAbbr")=ROLE
"RTN","EDPFAA",131,0)
 .S DFLTWSHT=$$GET1^DIQ(232.5,ROLEIEN,.04,"E"),X("defaultWorksheet")=DFLTWSHT
"RTN","EDPFAA",132,0)
 .S DFLTBRD=$$GET1^DIQ(232.5,ROLEIEN,.05,"I"),X("defaultBoard")=DFLTBRD
"RTN","EDPFAA",133,0)
 D XML^EDPX($$XMLA^EDPX("user",.X))
"RTN","EDPFAA",134,0)
 Q
"RTN","EDPFAA",135,0)
SESSID() ; Return the next session identifier
"RTN","EDPFAA",136,0)
 ; May lock any string, does not have to be actual global node
"RTN","EDPFAA",137,0)
 ; Use ^XTMP("EDP... to assure uniqueness to this package
"RTN","EDPFAA",138,0)
 ;
"RTN","EDPFAA",139,0)
 L +^XTMP("EDP-LOCK-SESSION-ID"):10  E  Q 0
"RTN","EDPFAA",140,0)
 N X S X=$$GET^XPAR("PKG","EDPW SESSION ID",1,"I")+1
"RTN","EDPFAA",141,0)
 I X>4294967295 S X=1  ; wrap around if bigger than 32-bit uint
"RTN","EDPFAA",142,0)
 D EN^XPAR("PKG","EDPW SESSION ID",1,X)
"RTN","EDPFAA",143,0)
 L -^XTMP("EDP-LOCK-SESSION-ID")
"RTN","EDPFAA",144,0)
 Q X
"RTN","EDPFAA",145,0)
 ;
"RTN","EDPFAA",146,0)
VIEWS ; Return views allowed for this user
"RTN","EDPFAA",147,0)
 N I,X,ID
"RTN","EDPFAA",148,0)
 F I=1:1 S X=$P($T(OPTIONS+I),";",3,99) Q:X="zzzzz"  D
"RTN","EDPFAA",149,0)
 . I $$ACCESS^XQCHK(DUZ,$$LKOPT^XPDMENU($P(X,U)))>0 D
"RTN","EDPFAA",150,0)
 . . D XML^EDPX($$XMLS^EDPX("view",$P(X,U,3),$P(X,U,2)))
"RTN","EDPFAA",151,0)
 Q
"RTN","EDPFAA",152,0)
OPTIONS ;; options visible in Tracking System
"RTN","EDPFAA",153,0)
 ;;EDPF TRACKING VIEW SIGNIN^Sign In^1
"RTN","EDPFAA",154,0)
 ;;EDPF TRACKING VIEW TRIAGE^Triage^2
"RTN","EDPFAA",155,0)
 ;;EDPF TRACKING VIEW UPDATE^Update^3
"RTN","EDPFAA",156,0)
 ;;EDPF TRACKING VIEW DISPOSITION^Disposition^4
"RTN","EDPFAA",157,0)
 ;;EDPF TRACKING VIEW EDIT CLOSED^Edit Closed^5
"RTN","EDPFAA",158,0)
 ;;EDPF TRACKING VIEW BOARD^Display Board^6
"RTN","EDPFAA",159,0)
 ;;EDPF TRACKING VIEW STAFF^Assign Staff^7
"RTN","EDPFAA",160,0)
 ;;EDPF TRACKING VIEW REPORTS^Reports^8
"RTN","EDPFAA",161,0)
 ;;EDPF TRACKING VIEW CONFIGURE^Configure^9
"RTN","EDPFAA",162,0)
 ;;zzzzz
"RTN","EDPFPER")
0^19^B4359382^B3427509
"RTN","EDPFPER",1,0)
EDPFPER ;SLC/KCM - Lookup Persons at Facility ;2/28/12 08:33am
"RTN","EDPFPER",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPFPER",3,0)
 ;
"RTN","EDPFPER",4,0)
MATCH(MATCH,PTYP) ; Return a matching list of providers
"RTN","EDPFPER",5,0)
 S MATCH=$$UP^XLFSTR(MATCH)
"RTN","EDPFPER",6,0)
 S MATCH=$TR(MATCH,"_"," ")  ; underscore replaces space in flex widget
"RTN","EDPFPER",7,0)
 D XML^EDPX("<personType>"_PTYP_"</personType>")
"RTN","EDPFPER",8,0)
 I PTYP="C" D CLERK Q
"RTN","EDPFPER",9,0)
 I PTYP="N" D NURS Q
"RTN","EDPFPER",10,0)
 I "PR"[PTYP D PROV Q
"RTN","EDPFPER",11,0)
 Q
"RTN","EDPFPER",12,0)
PROV ; match providers
"RTN","EDPFPER",13,0)
 N NM,PRV
"RTN","EDPFPER",14,0)
 S NM=$O(^VA(200,"AK.PROVIDER",MATCH),-1)
"RTN","EDPFPER",15,0)
 F  S NM=$O(^VA(200,"AK.PROVIDER",NM)) Q:$E(NM,1,$L(MATCH))'=MATCH  D
"RTN","EDPFPER",16,0)
 . S PRV=0 F  S PRV=$O(^VA(200,"AK.PROVIDER",NM,PRV)) Q:'PRV  D
"RTN","EDPFPER",17,0)
 .. I $$ALLOW(PRV,"P") D ADD(PRV,NM)
"RTN","EDPFPER",18,0)
 Q
"RTN","EDPFPER",19,0)
NURS ; match nurses
"RTN","EDPFPER",20,0)
 N NM,NRS,EDPNURS
"RTN","EDPFPER",21,0)
 S EDPNURS=$$GET^XPAR("ALL","EDPF NURSE STAFF SCREEN")
"RTN","EDPFPER",22,0)
 S NM=$O(^VA(200,"B",MATCH),-1)
"RTN","EDPFPER",23,0)
 F  S NM=$O(^VA(200,"B",NM)) Q:$E(NM,1,$L(MATCH))'=MATCH  D
"RTN","EDPFPER",24,0)
 . S NRS=0 F  S NRS=$O(^VA(200,"B",NM,NRS)) Q:'NRS  D
"RTN","EDPFPER",25,0)
 .. I $$ALLOW(NRS,"N") D ADD(NRS,NM)
"RTN","EDPFPER",26,0)
 Q
"RTN","EDPFPER",27,0)
CLERK ;
"RTN","EDPFPER",28,0)
 N NM,CLRK
"RTN","EDPFPER",29,0)
 S NM=$O(^VA(200,"B",MATCH),-1)
"RTN","EDPFPER",30,0)
 F  S NM=$O(^VA(200,"B",NM)) Q:$E(NM,1,$L(MATCH))'=MATCH  D
"RTN","EDPFPER",31,0)
 .S CLRK=0 F  S CLRK=$O(^VA(200,"B",NM,CLRK)) Q:'CLRK  D
"RTN","EDPFPER",32,0)
 ..I $$ALLOW(CLRK,"C") D ADD(CLRK,NM)
"RTN","EDPFPER",33,0)
 Q
"RTN","EDPFPER",34,0)
ADD(PER,NM) ; Add the person to the list of staff
"RTN","EDPFPER",35,0)
 N X,X0,TITLE
"RTN","EDPFPER",36,0)
 S X0=^VA(200,PER,0),TITLE=$P(X0,U,9)
"RTN","EDPFPER",37,0)
 S X("nm")=NM
"RTN","EDPFPER",38,0)
 S X("itl")=$P(X0,U,2)
"RTN","EDPFPER",39,0)
 I X("itl")="" S X("itl")=$E($P(NM,",",2))_$E(NM)
"RTN","EDPFPER",40,0)
 S X("duz")=PER
"RTN","EDPFPER",41,0)
 I TITLE S X("title")=$P($G(^DIC(3.1,TITLE,0)),U)
"RTN","EDPFPER",42,0)
 D XML^EDPX($$XMLA^EDPX("staff",.X))
"RTN","EDPFPER",43,0)
 Q
"RTN","EDPFPER",44,0)
ALLOW(PER,ROLE) ; Screen when selecting persons
"RTN","EDPFPER",45,0)
 ; PER is IEN for file 200, ROLE is P(rovider),R(esident), or N(urse)
"RTN","EDPFPER",46,0)
 ; Expects EDPNURS to be defined for nurses (EDPF NURSE STAFF FILTER)
"RTN","EDPFPER",47,0)
 I '$$ACTIVE^XUSER(PER) Q 0
"RTN","EDPFPER",48,0)
 I ("PR"[ROLE),'$$PROVIDER^XUSER(PER) Q 0
"RTN","EDPFPER",49,0)
 Q:ROLE'="N" 1
"RTN","EDPFPER",50,0)
 ;
"RTN","EDPFPER",51,0)
 I '$G(EDPNURS),'$D(^NURSF(210,"B",PER)) Q 0
"RTN","EDPFPER",52,0)
 I ($G(EDPNURS)=1),'$D(^XUSEC("ORELSE",PER)) Q 0
"RTN","EDPFPER",53,0)
 I ($G(EDPNURS)=2),'$D(^XUSEC("PSJ RNURSE",PER)) Q 0
"RTN","EDPFPER",54,0)
 Q 1
"RTN","EDPGLOB")
0^11^B4109172^B2277682
"RTN","EDPGLOB",1,0)
EDPGLOB ;SLC/BWF - Controller for ED Lab Retrieval ;4/25/12 12:51pm
"RTN","EDPGLOB",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;May 2, 2012;Build 200
"RTN","EDPGLOB",3,0)
 ;
"RTN","EDPGLOB",4,0)
RPC(EDPXML,PARAMS,PARAMS2) ; Process request via RPC instead of CSP
"RTN","EDPGLOB",5,0)
 N X,REQ,EDPSITE,EDPUSER,EDPDBUG
"RTN","EDPGLOB",6,0)
 K EDPXML
"RTN","EDPGLOB",7,0)
 S EDPUSER=DUZ,EDPSITE=DUZ(2),EDPSTA=$$STA^XUAF4(DUZ(2))
"RTN","EDPGLOB",8,0)
 S X="" F  S X=$O(PARAMS(X)) Q:X=""  D
"RTN","EDPGLOB",9,0)
 . I $D(PARAMS(X))>9 M REQ(X)=PARAMS(X)
"RTN","EDPGLOB",10,0)
 . E  S REQ(X,1)=PARAMS(X)
"RTN","EDPGLOB",11,0)
 ; params2 will not be converted the same way as params. It is still unclear why params was converted.
"RTN","EDPGLOB",12,0)
 ; There seems to be no reason to do this.
"RTN","EDPGLOB",13,0)
 S EDPDBUG=$$DEBUG^EDPCDBG($G(PARAMS("swfID")))
"RTN","EDPGLOB",14,0)
 I EDPDBUG D PUTREQ^EDPCDBG(EDPDBUG,.PARAMS)
"RTN","EDPGLOB",15,0)
 ; parameters missing or invalid
"RTN","EDPGLOB",16,0)
 ;I $G(REQ("patient",1))<1 D  G OUT
"RTN","EDPGLOB",17,0)
 ;. D XML^EDPX("<error msg='"_$$MSG^EDPX(2300018)_"' />")
"RTN","EDPGLOB",18,0)
 ;
"RTN","EDPGLOB",19,0)
COMMON ; Come here for both CSP and RPC Mode
"RTN","EDPGLOB",20,0)
 ;
"RTN","EDPGLOB",21,0)
 N EDPFAIL,CMD
"RTN","EDPGLOB",22,0)
 S CMD=$G(REQ("command",1))
"RTN","EDPGLOB",23,0)
 S EDPXML=$NA(^TMP("EDPGLOB",$J)) K @EDPXML
"RTN","EDPGLOB",24,0)
 ;
"RTN","EDPGLOB",25,0)
 ; switch on command
"RTN","EDPGLOB",26,0)
 ; 
"RTN","EDPGLOB",27,0)
 ; ---------------------------------
"RTN","EDPGLOB",28,0)
 ;
"RTN","EDPGLOB",29,0)
 ; getLabs = return lab results
"RTN","EDPGLOB",30,0)
 I CMD="getLabs" D  G OUT
"RTN","EDPGLOB",31,0)
 . I $G(REQ("patient",1))<1 D XML^EDPX("<error msg='"_$$MSG^EDPX(2300018)_"' />") Q
"RTN","EDPGLOB",32,0)
 . D EN^EDPLAB(EDPXML,.REQ)
"RTN","EDPGLOB",33,0)
 ;
"RTN","EDPGLOB",34,0)
 ; ---------------------------------
"RTN","EDPGLOB",35,0)
 ; getReportList - return adhoc reports (list or full definition)
"RTN","EDPGLOB",36,0)
 I CMD="getReportList" D  G OUT
"RTN","EDPGLOB",37,0)
 . D GETREPL^EDPARPT(EDPXML,.PARAMS)
"RTN","EDPGLOB",38,0)
 ; ---------------------------------
"RTN","EDPGLOB",39,0)
 ; saveReportDef - save adhoc report template/definition
"RTN","EDPGLOB",40,0)
 I CMD="saveReportDef" D  G OUT
"RTN","EDPGLOB",41,0)
 . D SAVE^EDPARPT(EDPXML,.PARAMS,.PARAMS2)
"RTN","EDPGLOB",42,0)
 ; ---------------------------------
"RTN","EDPGLOB",43,0)
 ; getReportElements - return adhoc report data elements
"RTN","EDPGLOB",44,0)
 I CMD="getReportElements" D  G OUT
"RTN","EDPGLOB",45,0)
 . D GETELM^EDPARPT(EDPXML,.PARAMS,.PARAMS2)
"RTN","EDPGLOB",46,0)
 ; ---------------------------------
"RTN","EDPGLOB",47,0)
 ; executeReport - execute adhoc report
"RTN","EDPGLOB",48,0)
 I CMD="executeReport" D  G OUT
"RTN","EDPGLOB",49,0)
 . D EXE^EDPARPT(EDPXML,.PARAMS,.PARAMS2)
"RTN","EDPGLOB",50,0)
 ; ---------------------------------
"RTN","EDPGLOB",51,0)
 ;
"RTN","EDPGLOB",52,0)
 ; else
"RTN","EDPGLOB",53,0)
 D XML^EDPX("<error msg='"_$$MSG^EDPX(2300010)_CMD_"' />")
"RTN","EDPGLOB",54,0)
 ; end switch
"RTN","EDPGLOB",55,0)
 ; 
"RTN","EDPGLOB",56,0)
OUT ; output the XML
"RTN","EDPGLOB",57,0)
 I EDPDBUG D PUTXML^EDPCDBG(EDPDBUG,.EDPXML)
"RTN","EDPGLOB",58,0)
 I $L($G(EDPHTTP)) D        ; if in CSP mode
"RTN","EDPGLOB",59,0)
 . U EDPHTTP
"RTN","EDPGLOB",60,0)
 . W "<results>",!
"RTN","EDPGLOB",61,0)
 . N I S I=0 F  S I=$O(EDPXML(I)) Q:'I  W EDPXML(I),!
"RTN","EDPGLOB",62,0)
 . W "</results>",!
"RTN","EDPGLOB",63,0)
 K EDPHTTP
"RTN","EDPGLOB",64,0)
END Q
"RTN","EDPGLOB",65,0)
 ;
"RTN","EDPGLOB",66,0)
VAL(X) ; return value from request
"RTN","EDPGLOB",67,0)
 Q $G(REQ(X,1))
"RTN","EDPLAB")
0^25^B51111821^B49753454
"RTN","EDPLAB",1,0)
EDPLAB ;SLC/MKB - EDIS lab result utilities ;6/14/13 9:30am
"RTN","EDPLAB",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;May 2, 2012;Build 200
"RTN","EDPLAB",3,0)
 ;
"RTN","EDPLAB",4,0)
EN(EDPRES,PARAM) ; -- Return lab results as XML in EDPRES
"RTN","EDPLAB",5,0)
 ; Required:  "patient" identifier (DFN)
"RTN","EDPLAB",6,0)
 ; Optional:  "start"-"stop" date range
"RTN","EDPLAB",7,0)
 ;            "total" - total number of accessions
"RTN","EDPLAB",8,0)
 ;            "list" - 1 for list of testID's only
"RTN","EDPLAB",9,0)
 ;            "testID"s for result history of test(s)
"RTN","EDPLAB",10,0)
 ;
"RTN","EDPLAB",11,0)
 K @EDPRES
"RTN","EDPLAB",12,0)
 ;D ADD^EDPHIST("<results>")
"RTN","EDPLAB",13,0)
 ;N ARRAY,EDPARR S ARRAY=$NA(EDPARR("results",1))
"RTN","EDPLAB",14,0)
 N ARRAY,EDPARR S ARRAY=$NA(^TMP("EDPLAB",$J,"results",1)) K @ARRAY
"RTN","EDPLAB",15,0)
 ;
"RTN","EDPLAB",16,0)
 ;
"RTN","EDPLAB",17,0)
 ; validate input parameters
"RTN","EDPLAB",18,0)
 N DFN,TEST,TESTIDS,BEG,END,MAX,X,I,LIST,TSEQ,TIDT
"RTN","EDPLAB",19,0)
 S DFN=+$$VAL("patient") I DFN<1 D  G ENQ
"RTN","EDPLAB",20,0)
 . ;D XML^EDPX("<error msg='Missing or invalid patient identifier' />")
"RTN","EDPLAB",21,0)
 . S @ARRAY@("error",1,"msg")="Missing or invalid patient identifier"
"RTN","EDPLAB",22,0)
 ;S I=0 F  S I=$O(PARAM("testID",I)) Q:I<1  S X=+PARAM("testID",I),TEST(X)=""
"RTN","EDPLAB",23,0)
 S TESTIDS=$$VAL("testID")
"RTN","EDPLAB",24,0)
 I $L(TESTIDS) D
"RTN","EDPLAB",25,0)
 .F I=1:1 S X=$P(TESTIDS,U,I) Q:'$L(X)  D
"RTN","EDPLAB",26,0)
 ..S TSEQ=$P(X,";"),TIDT=$P(X,";",2) Q:'TSEQ!('$L(TIDT))
"RTN","EDPLAB",27,0)
 ..I X S TEST(TIDT,TSEQ)=""
"RTN","EDPLAB",28,0)
 ;
"RTN","EDPLAB",29,0)
 ; get optional date range, max# accessions
"RTN","EDPLAB",30,0)
 S BEG=$$VAL("start"),END=$$VAL("stop"),MAX=$$VAL("total"),LIST=$$VAL("list")
"RTN","EDPLAB",31,0)
 I BEG,END,END<BEG N X S X=BEG,BEG=END,END=X  ;switch
"RTN","EDPLAB",32,0)
 I END,$L(END,".")<2 S END=END_".24"
"RTN","EDPLAB",33,0)
 ; search Lab for results
"RTN","EDPLAB",34,0)
 N ACNT,ICNT,DONE,SUB,IDT,SEQ,MORE
"RTN","EDPLAB",35,0)
 K ^TMP("LRRR",$J) D RR^LR7OR1(DFN,,BEG,END)
"RTN","EDPLAB",36,0)
 S (ACNT,ICNT,DONE)=0
"RTN","EDPLAB",37,0)
 S SUB="" F  S SUB=$O(^TMP("LRRR",$J,DFN,SUB)) G:SUB="" ENQ  D
"RTN","EDPLAB",38,0)
 .; BWF 2/2/2012 - for now we are only returning CH (chemistry)
"RTN","EDPLAB",39,0)
 .Q:SUB'="CH"
"RTN","EDPLAB",40,0)
 .S IDT=0 F  S IDT=$O(^TMP("LRRR",$J,DFN,SUB,IDT)) Q:IDT<1  D  Q:DONE
"RTN","EDPLAB",41,0)
 .. I $D(TEST) Q:'$D(TEST(IDT))
"RTN","EDPLAB",42,0)
 .. S (MORE,SEQ)=0
"RTN","EDPLAB",43,0)
 .. F  S SEQ=$O(^TMP("LRRR",$J,DFN,SUB,IDT,SEQ)) Q:SEQ<1  S X=$G(^(SEQ)) D
"RTN","EDPLAB",44,0)
 ... I $D(TEST) Q:'$D(TEST(IDT,SEQ))
"RTN","EDPLAB",45,0)
 ... K EDPX
"RTN","EDPLAB",46,0)
 ... I '$G(LIST) S EDPX("id")=SUB_";"_IDT_";"_SEQ
"RTN","EDPLAB",47,0)
 ... S MORE=1
"RTN","EDPLAB",48,0)
 ... D TMP(.EDPX,DFN,SUB,IDT,SEQ,LIST) ;parse into EDPX("att")=value
"RTN","EDPLAB",49,0)
 ... S ICNT=ICNT+1 M @ARRAY@("item",ICNT)=EDPX
"RTN","EDPLAB",50,0)
 ... ;D ADDA^EDPHIST("item",.EDPX)
"RTN","EDPLAB",51,0)
 .. S:MORE ACNT=ACNT+1 I $G(MAX),ACNT'<MAX S DONE=1
"RTN","EDPLAB",52,0)
 Q
"RTN","EDPLAB",53,0)
 ;
"RTN","EDPLAB",54,0)
ENQ ;end
"RTN","EDPLAB",55,0)
 D TOXMLG^EDPXML(ARRAY,EDPRES)
"RTN","EDPLAB",56,0)
 Q
"RTN","EDPLAB",57,0)
 ;
"RTN","EDPLAB",58,0)
ORD(EDPRES,PARAM) ; -- Return results history for lab orders
"RTN","EDPLAB",59,0)
 K EDPRES ;D ADD^EDPHIST("<results>")
"RTN","EDPLAB",60,0)
 D ADD^EDPHIST("<results>")
"RTN","EDPLAB",61,0)
 N ARRAY,EDPARR S ARRAY=$NA(EDPARR("results",1))
"RTN","EDPLAB",62,0)
 ;
"RTN","EDPLAB",63,0)
 ; validate input parameters
"RTN","EDPLAB",64,0)
 N DFN,LOG,IN,MAX
"RTN","EDPLAB",65,0)
 S DFN=+$$VAL("patient") I DFN<1 D  G ORQ
"RTN","EDPLAB",66,0)
 . S @ARRAY@("error",1,"msg")="Missing or invalid patient identifier"
"RTN","EDPLAB",67,0)
 S LOG=+$O(^EDP(230,"APA",DFN,0)),IN=$P($G(^EDP(230,LOG,0)),U,8)
"RTN","EDPLAB",68,0)
 S MAX=$$VAL("total")
"RTN","EDPLAB",69,0)
 ;
"RTN","EDPLAB",70,0)
 K ^TMP("LRRR",$J) D RR^LR7OR1(DFN)
"RTN","EDPLAB",71,0)
 ;
"RTN","EDPLAB",72,0)
 ; get results for tests in each order
"RTN","EDPLAB",73,0)
 N EDPI,ORIFN,EDPY,EDPTST,ORPK,SUB,IDT,SEQ,EDPX,X
"RTN","EDPLAB",74,0)
 S EDPI=0 F  S EDPI=$O(PARAM("order",EDPI)) Q:EDPI<1  D
"RTN","EDPLAB",75,0)
 . ; add order info
"RTN","EDPLAB",76,0)
 . S ORIFN=+$G(PARAM("order",EDPI)) Q:ORIFN<1  K EDPX
"RTN","EDPLAB",77,0)
 . S EDPX("id")=ORIFN,X=$$GET1^DIQ(100,ORIFN_",",5,"I")
"RTN","EDPLAB",78,0)
 . S EDPX("statusId")=X,EDPX("statusName")=$$STATUS(X,ORIFN)
"RTN","EDPLAB",79,0)
 . S X=$P($$OI^ORX8(ORIFN),U,2),EDPX("name")=$$ESC(X) ;if null?
"RTN","EDPLAB",80,0)
 . S X=$P($G(^OR(100,ORIFN,0)),U,8) S:'X X=$P($G(^(0)),U,7)
"RTN","EDPLAB",81,0)
 . S EDPX("collectedTS")=X,EDPX("ack")=$$ACK^EDPHIST(ORIFN)
"RTN","EDPLAB",82,0)
 . M @ARRAY@("order",1)=EDPX
"RTN","EDPLAB",83,0)
 . ;
"RTN","EDPLAB",84,0)
 . ; add order results from visit
"RTN","EDPLAB",85,0)
 . S ORPK=$$PKGID^ORX8(ORIFN) Q:$L(ORPK,";")'>3  ;no results
"RTN","EDPLAB",86,0)
 . S SUB=$P(ORPK,";",4),IDT=$P(ORPK,";",5) K EDPTST
"RTN","EDPLAB",87,0)
 . S SEQ=0 F  S SEQ=$O(^TMP("LRRR",$J,DFN,SUB,IDT,SEQ)) Q:SEQ<1  D
"RTN","EDPLAB",88,0)
 .. K EDPX S EDPX("id")=SUB_";"_IDT_";"_SEQ
"RTN","EDPLAB",89,0)
 .. D TMP^EDPLAB(.EDPX,DFN,SUB,IDT,SEQ) ;parse into EDPX("att")=value
"RTN","EDPLAB",90,0)
 .. M @ARRAY@("visit",1,"item",1)=EDPX
"RTN","EDPLAB",91,0)
 .. S X=$G(EDPX("testID")) S:X EDPTST(X)=""
"RTN","EDPLAB",92,0)
 . ;
"RTN","EDPLAB",93,0)
 . ; add prior results of same tests [up to MAX# collections]
"RTN","EDPLAB",94,0)
 . N ACNT,ICNT,DONE,MATCH S (ACNT,ICNT,DONE)=0
"RTN","EDPLAB",95,0)
 . F  S IDT=$O(^TMP("LRRR",$J,DFN,SUB,IDT)) Q:IDT<1  D  Q:DONE
"RTN","EDPLAB",96,0)
 .. S SEQ=0,MATCH=0
"RTN","EDPLAB",97,0)
 .. F  S SEQ=$O(^TMP("LRRR",$J,DFN,SUB,IDT,SEQ)) Q:SEQ<1  S X=$G(^(SEQ)) D
"RTN","EDPLAB",98,0)
 ... Q:'$D(EDPTST(+X))  ;not a matching test
"RTN","EDPLAB",99,0)
 ... K EDPX S EDPX("id")=SUB_";"_IDT_";"_SEQ,MATCH=1
"RTN","EDPLAB",100,0)
 ... ;K EDPX S EDPX("id")="CH;"_IDT_";"_SEQ,MATCH=1
"RTN","EDPLAB",101,0)
 ... ;D TMP^EDPLAB(.EDPX,DFN,"CH",IDT,SEQ) ;parse into EDPX("att")=value
"RTN","EDPLAB",102,0)
 ... D TMP^EDPLAB(.EDPX,DFN,SUB,IDT,SEQ) ;parse into EDPX("att")=value
"RTN","EDPLAB",103,0)
 ... S ICNT=ICNT+1 M @ARRAY@("history",1,"item",ICNT)=EDPX
"RTN","EDPLAB",104,0)
 .. S:MATCH ACNT=ACNT+1 I $G(MAX),ACNT'<MAX S DONE=1
"RTN","EDPLAB",105,0)
ORQ ; end
"RTN","EDPLAB",106,0)
 ;D ADD("</results>")
"RTN","EDPLAB",107,0)
 D TOXML^EDPXML(.EDPARR,.EDPRES)
"RTN","EDPLAB",108,0)
 Q
"RTN","EDPLAB",109,0)
 ;
"RTN","EDPLAB",110,0)
VAL(X) Q $G(PARAM(X,1))
"RTN","EDPLAB",111,0)
 ;
"RTN","EDPLAB",112,0)
ESC(X)  ; -- escape outgoing XML
"RTN","EDPLAB",113,0)
 ; Q $ZCONVERT(X,"O","HTML")  ; uncomment for fastest performance on Cache
"RTN","EDPLAB",114,0)
 ;
"RTN","EDPLAB",115,0)
 N I,Y,QOT S QOT=""""
"RTN","EDPLAB",116,0)
 S Y=$P(X,"&") F I=2:1:$L(X,"&") S Y=Y_"&amp;"_$P(X,"&",I)
"RTN","EDPLAB",117,0)
 S X=Y,Y=$P(X,"<") F I=2:1:$L(X,"<") S Y=Y_"&lt;"_$P(X,"<",I)
"RTN","EDPLAB",118,0)
 S X=Y,Y=$P(X,">") F I=2:1:$L(X,">") S Y=Y_"&gt;"_$P(X,">",I)
"RTN","EDPLAB",119,0)
 S X=Y,Y=$P(X,"'") F I=2:1:$L(X,"'") S Y=Y_"&apos;"_$P(X,"'",I)
"RTN","EDPLAB",120,0)
 S X=Y,Y=$P(X,QOT) F I=2:1:$L(X,QOT) S Y=Y_"&quot;"_$P(X,QOT,I)
"RTN","EDPLAB",121,0)
 Q Y
"RTN","EDPLAB",122,0)
 ;
"RTN","EDPLAB",123,0)
STATUS(STS,ORDER) ; -- Return result status for ORDER status
"RTN","EDPLAB",124,0)
 N Y,X
"RTN","EDPLAB",125,0)
 S STS=+$G(STS),ORDER=+$G(ORDER)
"RTN","EDPLAB",126,0)
 I STS=1 S Y="Order discontinued" D:ORDER  ;look for reason
"RTN","EDPLAB",127,0)
 . S X=$$GET1^DIQ(100,ORDER_",",65) S:'$L(X) X=$$GET1^DIQ(100,ORDER_",",64)
"RTN","EDPLAB",128,0)
 . I $L(X) S Y=Y_" ("_X_")"
"RTN","EDPLAB",129,0)
 I STS=2 S Y="Results"_$S($$ACKD^EDPHIST(ORDER):" acknowledged",1:" available")
"RTN","EDPLAB",130,0)
 I STS=3 S Y="On hold"
"RTN","EDPLAB",131,0)
 I STS=5 S Y="Order pending"
"RTN","EDPLAB",132,0)
 I STS=6 S Y="Specimen in lab" ;"Active"
"RTN","EDPLAB",133,0)
 I STS=7 S Y="Order expired"
"RTN","EDPLAB",134,0)
 I STS=8 S Y="Scheduled"
"RTN","EDPLAB",135,0)
 I STS=9 S Y="Partial results available"
"RTN","EDPLAB",136,0)
 I STS=10!(STS=11) S Y="Order not released"
"RTN","EDPLAB",137,0)
 I STS=12 S Y="Order discontinued (changed)"
"RTN","EDPLAB",138,0)
 I STS=13 S Y="Order cancelled"
"RTN","EDPLAB",139,0)
 I STS=14 S Y="Order discontinued (lapsed)"
"RTN","EDPLAB",140,0)
 I STS=15 S Y="Order renewed"
"RTN","EDPLAB",141,0)
 Q Y
"RTN","EDPLAB",142,0)
 ;
"RTN","EDPLAB",143,0)
TMP(Y,DFN,SUB,IDT,SEQ,LIST) ; -- Return ^TMP("LRRR",$J,DFN,SUB,IDT,SEQ) data
"RTN","EDPLAB",144,0)
 ;  in Y("attribute")=value
"RTN","EDPLAB",145,0)
 ; I SUB = MI or BB ??
"RTN","EDPLAB",146,0)
 N X0,X,XC,FAC,ACK
"RTN","EDPLAB",147,0)
 S X0=$G(^TMP("LRRR",$J,DFN,SUB,IDT,SEQ))
"RTN","EDPLAB",148,0)
 ;
"RTN","EDPLAB",149,0)
 ; BWF 2/2/2012 - Due to errors occuring on the client side when too much data
"RTN","EDPLAB",150,0)
 ; is retrieved from this call, an initial call can now be made that will return
"RTN","EDPLAB",151,0)
 ; a list of the available labs. The client side will then be able to call back in
"RTN","EDPLAB",152,0)
 ; with a list of labs being requested in smaller chunks. 
"RTN","EDPLAB",153,0)
 ; If LIST is passed as '1', only pass back the list of testID's and collected date
"RTN","EDPLAB",154,0)
 I $G(LIST) S Y("testID")=SEQ_";"_IDT Q
"RTN","EDPLAB",155,0)
 ;
"RTN","EDPLAB",156,0)
 S Y("subscript")=SUB,Y("accession")=SUB_";"_IDT
"RTN","EDPLAB",157,0)
 ;S Y("collectedTS")=$$FMTHL7^XLFDT(9999999-IDT)
"RTN","EDPLAB",158,0)
 S Y("collectedTS")=(9999999-IDT)
"RTN","EDPLAB",159,0)
 ; BWF 6/14/13 - Added $$ESC for testName
"RTN","EDPLAB",160,0)
 S Y("testID")=+X0,Y("testName")=$$ESC($P($G(^LAB(60,+X0,0)),U)),X=+$P($G(^(.1)),U,6)
"RTN","EDPLAB",161,0)
 S Y("printOrder")=$S(X:+X,1:SEQ/1000000)
"RTN","EDPLAB",162,0)
 S:$L($P(X0,U,2)) Y("result")=$P(X0,U,2)
"RTN","EDPLAB",163,0)
 I $G(Y("result"))'="" D
"RTN","EDPLAB",164,0)
 .I Y("result")["<" S Y("result")=$$ESC(Y("result"))
"RTN","EDPLAB",165,0)
 .I Y("result")[">" S Y("result")=$$ESC(Y("result"))
"RTN","EDPLAB",166,0)
 S:$L($P(X0,U,4)) Y("units")=$$ESC($P(X0,U,4))
"RTN","EDPLAB",167,0)
 S:$L($P(X0,U,3)) Y("deviation")=$$ESC($P(X0,U,3))
"RTN","EDPLAB",168,0)
 S X=$P(X0,U,5) I $L(X),X["-" S Y("low")=$$ESC($P(X,"-")),Y("high")=$$ESC($P(X,"-",2))
"RTN","EDPLAB",169,0)
 S Y("printName")=$$ESC($P(X0,U,15))
"RTN","EDPLAB",170,0)
 S Y("number")=$P(X0,U,16)
"RTN","EDPLAB",171,0)
 S X=+$P(X0,U,19) D  ;sample & specimen
"RTN","EDPLAB",172,0)
 . N SPC,CS,LRDFN
"RTN","EDPLAB",173,0)
 . S:X<1 LRDFN=+$G(^DPT(DFN,"LR")),X=+$P($G(^LR(LRDFN,SUB,IDT,0)),U,5)
"RTN","EDPLAB",174,0)
 . S SPC=$G(^LAB(61,X,0)) Q:'$L(SPC)
"RTN","EDPLAB",175,0)
 . S Y("specimen")=$P(SPC,U),CS=+$P(SPC,U,6)
"RTN","EDPLAB",176,0)
 . S:CS Y("sample")=$P($G(^LAB(62,CS,0)),U)
"RTN","EDPLAB",177,0)
 S X=+$P(X0,U,17),XC=$Q(^LRO(69,"C",X))
"RTN","EDPLAB",178,0)
 I $P(XC,",",1,3)=("^LRO(69,""C"","_X) D  ;get Lab Order info
"RTN","EDPLAB",179,0)
 . N LRO,LR3
"RTN","EDPLAB",180,0)
 . S LRO=$G(^LRO(69,+$P(XC,",",4),1,+$P(XC,",",5),0)),LR3=$G(^(3))
"RTN","EDPLAB",181,0)
 . ;S X=+$P(LRO,U,6) S:X Y("provider")=X_U_$P($G(^VA(200,X,0)),U)
"RTN","EDPLAB",182,0)
 . S X=+$P(LRO,U,11) ;S:X Y("order")=X
"RTN","EDPLAB",183,0)
 . S ACK=$$ACK^EDPHIST(X,1)
"RTN","EDPLAB",184,0)
 . ;S Y("ack")=$P(ACK,U),Y("ackdt")=$P(ACK,U,2)
"RTN","EDPLAB",185,0)
 . ;S X=$P(LR3,U,2) S:X Y("resultedTS")=$$FMTHL7^XLFDT(X)
"RTN","EDPLAB",186,0)
 . S X=$P(LR3,U,2) S:X Y("resultedTS")=(X)
"RTN","EDPLAB",187,0)
 S FAC=$$SITE^VASITE S:FAC Y("stnNum")=$P(FAC,U,3),Y("stnName")=$P(FAC,U,2)
"RTN","EDPLAB",188,0)
 ; bwf 12/21/2011 removed setting of 'comments' to bypass errors occuring with the parser on client side
"RTN","EDPLAB",189,0)
 ;I $D(^TMP("LRRR",$J,DFN,SUB,IDT,"N")) D  ;M Y("comment")=^("N")
"RTN","EDPLAB",190,0)
 ;. N I S I=1,X=$G(^TMP("LRRR",$J,DFN,SUB,IDT,"N",I))
"RTN","EDPLAB",191,0)
 ;. F  S I=$O(^TMP("LRRR",$J,DFN,SUB,IDT,"N",I)) Q:I<1  S X=X_$C(13,10)_^(I)
"RTN","EDPLAB",192,0)
 ;. S Y("comment")=$$ESC(X)
"RTN","EDPLAB",193,0)
 Q
"RTN","EDPLOG")
0^26^B58048189^B56585715
"RTN","EDPLOG",1,0)
EDPLOG ;SLC/KCM - Update ED Log - Update ;2/28/12 08:33am
"RTN","EDPLOG",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPLOG",3,0)
 ;
"RTN","EDPLOG",4,0)
 ;TODO:  add transaction processing
"RTN","EDPLOG",5,0)
 ;
"RTN","EDPLOG",6,0)
UPD(REQ,REMOVE,RESTORE) ; Update a record
"RTN","EDPLOG",7,0)
 N REC,EDPFAIL D NVPARSE^EDPX(.REC,REQ)
"RTN","EDPLOG",8,0)
 S EDPFAIL=0
"RTN","EDPLOG",9,0)
 N IEN S IEN=$$VAL("id")
"RTN","EDPLOG",10,0)
 I '$G(IEN) D FAIL("upd",2300007) Q EDPFAIL
"RTN","EDPLOG",11,0)
 I '$D(^EDP(230,IEN,0)) D FAIL("upd",2300006) Q EDPFAIL
"RTN","EDPLOG",12,0)
 N ERR S ERR=$$VALID^EDPLOG1(.REC) I $L(ERR) D FAIL("upd",ERR) Q EDPFAIL
"RTN","EDPLOG",13,0)
 N AMB S AMB="(ambulance en route)"
"RTN","EDPLOG",14,0)
 ;
"RTN","EDPLOG",15,0)
 ; compute the local time & "no value" ien
"RTN","EDPLOG",16,0)
 N TIME S TIME=$$NOW^XLFDT
"RTN","EDPLOG",17,0)
 N EDPNOVAL S EDPNOVAL=+$O(^EDPB(233.1,"B","edp.reserved.novalue",0))
"RTN","EDPLOG",18,0)
 ; before allowing remove, check the required fields
"RTN","EDPLOG",19,0)
 S REMOVE=$G(REMOVE,0)!$P(^EDP(230,IEN,0),U,7)  ; removing or closed
"RTN","EDPLOG",20,0)
 S RESTORE=$G(RESTORE,"") ; restoring to board
"RTN","EDPLOG",21,0)
 I REMOVE D RDY2RMV I 'REC("closed") Q EDPFAIL
"RTN","EDPLOG",22,0)
 I REMOVE S REC("closedBy")=$G(DUZ) ; if we are removing, set up the 'closedBy' and 'closed' value
"RTN","EDPLOG",23,0)
 ;
"RTN","EDPLOG",24,0)
 ; get the existing log entry
"RTN","EDPLOG",25,0)
 N X0,X1,X2,X3,AREA,I
"RTN","EDPLOG",26,0)
 S X0=^EDP(230,IEN,0),X1=$G(^(1)),X2=$G(^(2)),X3=$G(^(3))
"RTN","EDPLOG",27,0)
 S AREA=$P(X0,U,3),^EDPB(231.9,AREA,230)=$H  ; last update timestamp
"RTN","EDPLOG",28,0)
 ;
"RTN","EDPLOG",29,0)
 ; if we are restoring to the board, set 'closed' to "" (removing the closed status)
"RTN","EDPLOG",30,0)
 ; and set the bed to the waiting room
"RTN","EDPLOG",31,0)
 I RESTORE D
"RTN","EDPLOG",32,0)
 .S REC("closed")="",REC("bed")=$P(^EDPB(231.9,AREA,1),U,12),REC("restoredBy")=$G(DUZ),REC("restorePatient")=1,REC("outTS")=""
"RTN","EDPLOG",33,0)
 .; if a bed is not defined at this point, use the EDIS_DEFAULT bed
"RTN","EDPLOG",34,0)
 .I 'REC("bed") S REC("bed")=$O(^EDPB(231.8,"B","EDIS_DEFAULT",0))
"RTN","EDPLOG",35,0)
 ;
"RTN","EDPLOG",36,0)
 N NAME,DFN,SSN,PCE
"RTN","EDPLOG",37,0)
 S NAME=$$VAL("name"),DFN=$$VAL("dfn"),SSN=""
"RTN","EDPLOG",38,0)
 I DFN S SSN=$P(^DPT(DFN,0),U,9)
"RTN","EDPLOG",39,0)
 I '$P(X0,U,8),((NAME'=AMB)!DFN) S REC("inTS")=TIME
"RTN","EDPLOG",40,0)
 ; Update any fields that have values passed in
"RTN","EDPLOG",41,0)
 N FDA,FDAIEN,DIERR,HIST
"RTN","EDPLOG",42,0)
 D SETFDA(X0,4,"name",.04)
"RTN","EDPLOG",43,0)
 ;D SETFDA(X0,5,"ssn",.05) -- NtoL
"RTN","EDPLOG",44,0)
 D SETFDA(X0,6,"dfn",.06)
"RTN","EDPLOG",45,0)
 D SETFDA(X0,7,"closed",.07)
"RTN","EDPLOG",46,0)
 D SETFDA(X0,8,"inTS",.08)
"RTN","EDPLOG",47,0)
 D SETFDA(X0,9,"outTS",.09)
"RTN","EDPLOG",48,0)
 D SETFDA(X0,10,"arrival",.1)
"RTN","EDPLOG",49,0)
 D SETFDA(X0,14,"clinic",.14)
"RTN","EDPLOG",50,0)
 D SETFDA(X1,1,"complaint",1.1)
"RTN","EDPLOG",51,0)
 D SETFDA(X2,1,"compLong",2)
"RTN","EDPLOG",52,0)
 D SETFDA(X3,2,"status",3.2)
"RTN","EDPLOG",53,0)
 D SETFDA(X3,3,"acuity",3.3)
"RTN","EDPLOG",54,0)
 D SETFDA(X3,4,"bed",3.4)
"RTN","EDPLOG",55,0)
 D SETFDA(X3,5,"provider",3.5)
"RTN","EDPLOG",56,0)
 D SETFDA(X3,6,"nurse",3.6)
"RTN","EDPLOG",57,0)
 D SETFDA(X3,7,"resident",3.7)
"RTN","EDPLOG",58,0)
 D SETFDA(X3,8,"comment",3.8)
"RTN","EDPLOG",59,0)
 D SETFDA(X1,5,"delay",1.5)
"RTN","EDPLOG",60,0)
 D SETFDA(X1,2,"disposition",1.2)
"RTN","EDPLOG",61,0)
 ; 10-18-2011 bwf: add handling of fields related to removal and restoring of patient to the board
"RTN","EDPLOG",62,0)
 I $G(REMOVE) D
"RTN","EDPLOG",63,0)
 .D SETFDA(X0,16,"closedBy",.072) ; DFN of the user who 'closed' this record.
"RTN","EDPLOG",64,0)
 I $G(RESTORE) D
"RTN","EDPLOG",65,0)
 .; bwf - 2/16/2012
"RTN","EDPLOG",66,0)
 .; The following fields should only be set if this record is actually being restored to the board
"RTN","EDPLOG",67,0)
 .; There is a trigger x-ref that we need to stay consistent and not be changing every time we save the log entry.
"RTN","EDPLOG",68,0)
 .D SETFDA(X0,17,"restorePatient",.073) ; flag - if the entry is found to have been 'Removed In Error'
"RTN","EDPLOG",69,0)
 .D SETFDA(X0,18,"restoredBy",.074) ; DFN of the user who 'restored' this patient to the board. Triggers Restored By Date/Time field
"RTN","EDPLOG",70,0)
 ; end changes
"RTN","EDPLOG",71,0)
 D UPDHOLD^EDPLOGH(.FDA,IEN,$P(X3,U,4))
"RTN","EDPLOG",72,0)
 I $G(FDA(230,IEN_",",1.2)) S FDA(230,IEN_",",1.3)=TIME
"RTN","EDPLOG",73,0)
 I $L(NAME)&$L(SSN) S FDA(230,IEN_",",.11)=$E(NAME)_$E(SSN,6,9)
"RTN","EDPLOG",74,0)
 I $$VAL("updDiag") S HIST(230.1,"+1,",9.1)=$G(HIST(230.1,"+1,",9.1))_"4;"
"RTN","EDPLOG",75,0)
 ;
"RTN","EDPLOG",76,0)
 L +^EDP(230,IEN):3 E  D FAIL("upd",2300015) Q EDPFAIL
"RTN","EDPLOG",77,0)
 ; be sure to unlock before quitting!
"RTN","EDPLOG",78,0)
 I $$COLLIDE^EDPLOGH(IEN,$$VAL("loadTS")) L -^EDP(230,IEN) Q EDPFAIL
"RTN","EDPLOG",79,0)
 I $$BEDGONE^EDPLOGH(AREA,$P(X3,U,4),$P(X3,U,9),$$VAL("bed")) D FAIL("upd",2300016) L -^EDP(230,IEN) Q EDPFAIL
"RTN","EDPLOG",80,0)
 I $D(HIST)>9 D SAVE^EDPLOGH(IEN,TIME,.HIST)
"RTN","EDPLOG",81,0)
 I $D(FDA)>9 D FILE^DIE("","FDA","ERR")
"RTN","EDPLOG",82,0)
 I '$D(DIERR),$$VAL("updDiag") D UPDDIAG
"RTN","EDPLOG",83,0)
 L -^EDP(230,IEN)
"RTN","EDPLOG",84,0)
 I $D(DIERR) D FAIL("upd",2300008) Q EDPFAIL
"RTN","EDPLOG",85,0)
 ;
"RTN","EDPLOG",86,0)
 D UPDVISIT^EDPLPCE(IEN,.PCE)
"RTN","EDPLOG",87,0)
 ;
"RTN","EDPLOG",88,0)
 I (DFN&'$P(X0,U,6))!($G(REC("inTS"))&'$P(X0,U,8)) D EVT^EDPLOGA(IEN)
"RTN","EDPLOG",89,0)
 ;
"RTN","EDPLOG",90,0)
 D XML^EDPX("<upd status='ok' id='"_IEN_"' />")
"RTN","EDPLOG",91,0)
 Q EDPFAIL
"RTN","EDPLOG",92,0)
UPDDIAG ; process diagnoses
"RTN","EDPLOG",93,0)
 ; called from UPD^EDPLOG
"RTN","EDPLOG",94,0)
 ; expects REC,PCE,IEN,TIME,AREA to be defined
"RTN","EDPLOG",95,0)
 N DIAG,I,FDA,FDAIEN,ERR,CODED,CODE
"RTN","EDPLOG",96,0)
 S DIAG="diagnosis-0",I=0,CODED=$P($G(^EDPB(231.9,AREA,1)),U,2)
"RTN","EDPLOG",97,0)
 F  S DIAG=$O(REC(DIAG)) Q:$E(DIAG,1,10)'="diagnosis-"  D
"RTN","EDPLOG",98,0)
 . S I=I+1,REC("diagnosis",I)=REC(DIAG)
"RTN","EDPLOG",99,0)
 . I CODED S PCE($P(REC(DIAG),U),I)=REC(DIAG)
"RTN","EDPLOG",100,0)
 I $D(REC("diagnosis"))<10 Q
"RTN","EDPLOG",101,0)
 ; replace the diagnosis multiple
"RTN","EDPLOG",102,0)
 D DELDIAG(IEN)
"RTN","EDPLOG",103,0)
 S FDA(230,IEN_",",1.4)=TIME
"RTN","EDPLOG",104,0)
 S I=0 F  S I=$O(REC("diagnosis",I)) Q:'I  D
"RTN","EDPLOG",105,0)
 . Q:$P(REC("diagnosis",I),U,6)  ; entry being removed
"RTN","EDPLOG",106,0)
 . S CODE=$P(REC("diagnosis",I),U,2)
"RTN","EDPLOG",107,0)
 . S CODE=$S(+CODE:$$ICDONE^LEXU(CODE,TIME),1:"")
"RTN","EDPLOG",108,0)
 . S:'$L(CODE) CODE=$P($P(REC("diagnosis",I),U,3),"/",1)
"RTN","EDPLOG",109,0)
 . S:$L(CODE) CODE=+$O(^ICD9("BA",CODE_" ",0))
"RTN","EDPLOG",110,0)
 . S FDA(230.04,"+"_I_","_IEN_",",.01)=$P(REC("diagnosis",I),U,4)
"RTN","EDPLOG",111,0)
 . S FDA(230.04,"+"_I_","_IEN_",",.02)=CODE
"RTN","EDPLOG",112,0)
 . S FDA(230.04,"+"_I_","_IEN_",",.03)=$P(REC("diagnosis",I),U,8)
"RTN","EDPLOG",113,0)
 D UPDATE^DIE("","FDA","FDAIEN","ERR")
"RTN","EDPLOG",114,0)
 Q
"RTN","EDPLOG",115,0)
DELDIAG(IEN) ; delete the diagnosis multiple
"RTN","EDPLOG",116,0)
 I '$O(^EDP(230,IEN,4,0)) Q  ; no child nodes
"RTN","EDPLOG",117,0)
 N DA,DIK S DA=0,DA(1)=IEN,DIK="^EDP(230,"_DA(1)_",4,"
"RTN","EDPLOG",118,0)
 F  S DA=$O(^EDP(230,IEN,4,DA)) Q:'DA  D ^DIK
"RTN","EDPLOG",119,0)
 Q
"RTN","EDPLOG",120,0)
HAVEDIAG() ; return true if a diagnosis is present
"RTN","EDPLOG",121,0)
 ; expects REC to be defined
"RTN","EDPLOG",122,0)
 N FOUND S FOUND=0
"RTN","EDPLOG",123,0)
 N DIAG S DIAG="diagnosis-0"
"RTN","EDPLOG",124,0)
 F  S DIAG=$O(REC(DIAG)) Q:$E(DIAG,1,10)'="diagnosis-"  D  Q:FOUND
"RTN","EDPLOG",125,0)
 . I '$P(REC(DIAG),U,6) S FOUND=1  ; 6th piece is delete flag
"RTN","EDPLOG",126,0)
 Q FOUND
"RTN","EDPLOG",127,0)
 ;
"RTN","EDPLOG",128,0)
RDY2RMV ; check required fields & set up so ready to remove
"RTN","EDPLOG",129,0)
 ; called from UPD, expects REC and IEN and TIME
"RTN","EDPLOG",130,0)
 ;
"RTN","EDPLOG",131,0)
 ; check special dispositions first
"RTN","EDPLOG",132,0)
 N DISP,CLOSE
"RTN","EDPLOG",133,0)
 S DISP=+$$VAL("disposition"),CLOSE=0
"RTN","EDPLOG",134,0)
 I DISP=+$O(^EDPB(233.1,"B","edp.disposition.error",0)) S CLOSE=1
"RTN","EDPLOG",135,0)
 I DISP=+$O(^EDPB(233.1,"B","edp.disposition.nec",0)) S CLOSE=1
"RTN","EDPLOG",136,0)
 I DISP=+$O(^EDPB(233.1,"B","edp.disposition.left",0)) S CLOSE=1
"RTN","EDPLOG",137,0)
 I CLOSE S:'$$VAL("outTS") REC("outTS")=TIME S REC("closed")=1 Q
"RTN","EDPLOG",138,0)
 ;
"RTN","EDPLOG",139,0)
 ; check the generally required fields
"RTN","EDPLOG",140,0)
 N MISSING S MISSING=""
"RTN","EDPLOG",141,0)
 S REC("closed")=0
"RTN","EDPLOG",142,0)
 I '$L($$VAL("complaint")) S MISSING=MISSING_"Complaint "
"RTN","EDPLOG",143,0)
 I '$$VAL("bed") S MISSING=MISSING_"Room/Area "
"RTN","EDPLOG",144,0)
 I '$$VAL("provider") S MISSING=MISSING_"Provider "
"RTN","EDPLOG",145,0)
 I $$NOVAL("acuity") S MISSING=MISSING_"Acuity "
"RTN","EDPLOG",146,0)
 ;
"RTN","EDPLOG",147,0)
 ; check the other disposition required fields
"RTN","EDPLOG",148,0)
 N X1,AREA,MIN,STS,OUT
"RTN","EDPLOG",149,0)
 S AREA=$P(^EDP(230,IEN,0),U,3),STS=$P($G(^(3)),U,2)
"RTN","EDPLOG",150,0)
 S X1=$G(^EDPB(231.9,AREA,1))
"RTN","EDPLOG",151,0)
 S MIN=$$VAL("inTS") S:'MIN MIN=$P(^EDP(230,IEN,0),U,8)
"RTN","EDPLOG",152,0)
 S OUT=$$VAL("outTS") S:'OUT OUT=TIME
"RTN","EDPLOG",153,0)
 S MIN=$$FMDIFF^XLFDT(OUT,MIN,2)\60
"RTN","EDPLOG",154,0)
 I $P(X1,U,1),'$$HAVEDIAG S MISSING=MISSING_"Diagnosis "
"RTN","EDPLOG",155,0)
 I $P(X1,U,3),$$NOVAL("disposition") S MISSING=MISSING_"Disposition "
"RTN","EDPLOG",156,0)
 ; (client parses for string "Delay Reason" to know whether to enable delay reason control)
"RTN","EDPLOG",157,0)
 ; bwf 4/26/13 - per Dr. Gelman, want delay reason no matter whether patient is in observation or not.
"RTN","EDPLOG",158,0)
 ;               replaced line below with the one that follows
"RTN","EDPLOG",159,0)
 ;I $P(X1,U,4),(MIN>$P(X1,U,5)),$$NOVAL("delay"),'$$OBS(STS) S MISSING=MISSING_"Delay Reason "
"RTN","EDPLOG",160,0)
 I $P(X1,U,4),(MIN>$P(X1,U,5)),$$NOVAL("delay") S MISSING=MISSING_"Delay Reason "
"RTN","EDPLOG",161,0)
 I $L(MISSING) D FAIL("upd","Fields required for removal are missing:  "_MISSING) Q
"RTN","EDPLOG",162,0)
 S:'$$VAL("outTS") REC("outTS")=TIME S REC("closed")=1
"RTN","EDPLOG",163,0)
 Q
"RTN","EDPLOG",164,0)
VAL(X) ; Returns parameter value or null
"RTN","EDPLOG",165,0)
 ; HTTP passes HTML-escaped values in an array as REC(param)
"RTN","EDPLOG",166,0)
 Q $G(REC(X))
"RTN","EDPLOG",167,0)
 ;
"RTN","EDPLOG",168,0)
NOVAL(X) ; Returns true if value is empty, 0, or edp.reserved.novalue
"RTN","EDPLOG",169,0)
 ; expects EDPNOVAL to be defined
"RTN","EDPLOG",170,0)
 I +$G(REC(X))=0 Q 1
"RTN","EDPLOG",171,0)
 I +$G(REC(X))=EDPNOVAL Q 1
"RTN","EDPLOG",172,0)
 Q 0
"RTN","EDPLOG",173,0)
 ;
"RTN","EDPLOG",174,0)
OBS(X) ; Returns 1 or 0, if observation status X
"RTN","EDPLOG",175,0)
 Q ($P($G(^EDPB(233.1,+$G(X),0)),U,5)["O")
"RTN","EDPLOG",176,0)
 ;
"RTN","EDPLOG",177,0)
SETFDA(NODE,P,SUB,FLD) ; Creates value in FDA & HIST arrays as appropriate
"RTN","EDPLOG",178,0)
 ; from UPD, expects REC, FDA, HIST to be defined
"RTN","EDPLOG",179,0)
 Q:'$D(REC(SUB))               ; value not sent in message
"RTN","EDPLOG",180,0)
 Q:$P(NODE,U,P)=REC(SUB)       ; value is the same
"RTN","EDPLOG",181,0)
 ; don't save switch from null to 0 or NOVAL to 0
"RTN","EDPLOG",182,0)
 ; since 0 is always sent as none value for combo box fields
"RTN","EDPLOG",183,0)
 I (REC(SUB)=0),($P(NODE,U,P)=""),("^.1^1.2^1.5^3.2^3.3^3.4^3.5^3.6^3.7^"[(U_FLD_U)) Q
"RTN","EDPLOG",184,0)
 I (REC(SUB)=0),($P(NODE,U,P)=EDPNOVAL),("^.1^1.2^1.5^3.2^3.3^"[(U_FLD_U)) Q
"RTN","EDPLOG",185,0)
 ;
"RTN","EDPLOG",186,0)
 I REC(SUB)="" S REC(SUB)="@"  ; we must be deleting field if empty
"RTN","EDPLOG",187,0)
 S FDA(230,IEN_",",FLD)=REC(SUB)
"RTN","EDPLOG",188,0)
 ; save the changed fields in the history
"RTN","EDPLOG",189,0)
 I $L(REC(SUB)) D
"RTN","EDPLOG",190,0)
 . S HIST(230.1,"+1,",9.1)=$G(HIST(230.1,"+1,",9.1))_FLD_";"
"RTN","EDPLOG",191,0)
 . S:FLD=.07 FLD=.0701    ; closed
"RTN","EDPLOG",192,0)
 . S:FLD=1.1 FLD=.07      ; complaint
"RTN","EDPLOG",193,0)
 . S:FLD=1.2 FLD=.11      ; disposition
"RTN","EDPLOG",194,0)
 . S:FLD=1.5 FLD=.12      ; delay
"RTN","EDPLOG",195,0)
 . S HIST(230.1,"+1,",FLD)=REC(SUB)
"RTN","EDPLOG",196,0)
 . ; check for updated providers
"RTN","EDPLOG",197,0)
 . S:FLD=3.5 PCE("PRV",1)=REC(SUB),PCE("PRI")=REC(SUB)  ; primary provider
"RTN","EDPLOG",198,0)
 . S:FLD=3.6 PCE("PRV",2)=REC(SUB)                      ; nurse
"RTN","EDPLOG",199,0)
 . S:FLD=3.7 PCE("PRV",3)=REC(SUB)                      ; resident
"RTN","EDPLOG",200,0)
 Q
"RTN","EDPLOG",201,0)
FAIL(ELEM,MSG) ; creates failure node for returned XML
"RTN","EDPLOG",202,0)
 N X,EDPFAIL
"RTN","EDPLOG",203,0)
 S EDPFAIL=0
"RTN","EDPLOG",204,0)
 I +MSG S MSG=$$MSG^EDPX(MSG)
"RTN","EDPLOG",205,0)
 S X="<"_ELEM_" id='"_$$VAL("id")_"' status='fail' msg='"_MSG_"' />"
"RTN","EDPLOG",206,0)
 D XML^EDPX(X)
"RTN","EDPLOG",207,0)
 S EDPFAIL=1
"RTN","EDPLOG",208,0)
 Q EDPFAIL
"RTN","EDPLOGA")
0^28^B12583805^B11867179
"RTN","EDPLOGA",1,0)
EDPLOGA ;SLC/KCM - Add Entry to ED Log ;2/28/12 08:33am
"RTN","EDPLOGA",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPLOGA",3,0)
 ;
"RTN","EDPLOGA",4,0)
 ;TODO:  add transaction processing
"RTN","EDPLOGA",5,0)
 ;
"RTN","EDPLOGA",6,0)
ADD(NEWPT,AREA,TIME,CHOICES) ; Create a new ED Log record for a patient
"RTN","EDPLOGA",7,0)
 ; add the new record to the returned XML
"RTN","EDPLOGA",8,0)
 ; NEWPT = dfn \T name \T dob \T ssn
"RTN","EDPLOGA",9,0)
 N DFN,NAME,SSN,STATUS,BED,ARR,REC,AMB,CLINIC,EDPLOG,EDPFAIL
"RTN","EDPLOGA",10,0)
 S EDPFAIL=0
"RTN","EDPLOGA",11,0)
 S AMB="(ambulance en route)"
"RTN","EDPLOGA",12,0)
 ;
"RTN","EDPLOGA",13,0)
 ; Set up the patient fields that were passed in
"RTN","EDPLOGA",14,0)
 D NVPARSE^EDPX(.REC,NEWPT)
"RTN","EDPLOGA",15,0)
 S DFN=REC("dfn"),NAME=REC("name"),SSN="",CLINIC=$G(REC("clinic"))
"RTN","EDPLOGA",16,0)
 I DFN S REC("name")=$P(^DPT(DFN,0),U),REC("ssn")=$P(^DPT(DFN,0),U,9)
"RTN","EDPLOGA",17,0)
 ;S SSN=REC("ssn") S:SSN="*SENSITIVE*" SSN="" --NtoL
"RTN","EDPLOGA",18,0)
 I 'DFN,(NAME="") S EDPFAIL=$$FAIL^EDPLOG("add",2300014) Q EDPFAIL
"RTN","EDPLOGA",19,0)
 ;
"RTN","EDPLOGA",20,0)
 ; Add default values to stub entry (should be based on config for area)
"RTN","EDPLOGA",21,0)
 S BED=$P(^EDPB(231.9,AREA,1),U,12) I 'BED S BED=$O(^EDPB(231.8,"B","EDIS_DEFAULT",0)) I 'BED S EDPFAIL=$$FAIL^EDPLOG("add",2300019) Q EDPFAIL
"RTN","EDPLOGA",22,0)
 I $G(REC("name"))=AMB D
"RTN","EDPLOGA",23,0)
 . S ARR=$O(^EDPB(233.1,"B","edp.arrival.ambulance",0))
"RTN","EDPLOGA",24,0)
 . S BED=$P(^EDPB(231.9,AREA,1),U,11)
"RTN","EDPLOGA",25,0)
 S STATUS="" I BED S STATUS=$P(^EDPB(231.8,BED,0),U,8)
"RTN","EDPLOGA",26,0)
 ;
"RTN","EDPLOGA",27,0)
 I +DFN,$D(^EDP(230,"AP",EDPSITE,AREA,DFN)) S EDPFAIL=$$FAIL^EDPLOG("add",2300002) Q EDPFAIL
"RTN","EDPLOGA",28,0)
 I 'DFN,(NAME'=AMB),$D(^EDP(230,"AN",EDPSITE,AREA,NAME)) S EDPFAIL=$$FAIL^EDPLOG("add",2300002) Q EDPFAIL
"RTN","EDPLOGA",29,0)
 N ERR S ERR=$$VALID^EDPLOG1(.REC) I $L(ERR) S EDPFAIL=$$FAIL^EDPLOG("add",ERR) Q EDPFAIL
"RTN","EDPLOGA",30,0)
 S ^EDPB(231.9,AREA,230)=$H  ; last update timestamp
"RTN","EDPLOGA",31,0)
 ;
"RTN","EDPLOGA",32,0)
 ; Create a current log record
"RTN","EDPLOGA",33,0)
 N FDA,FDAIEN,DIERR,HIST,HISTIEN,LOGIEN
"RTN","EDPLOGA",34,0)
 S FDA(230,"+1,",.01)=TIME
"RTN","EDPLOGA",35,0)
 S FDA(230,"+1,",.02)=EDPSITE
"RTN","EDPLOGA",36,0)
 S FDA(230,"+1,",.03)=AREA
"RTN","EDPLOGA",37,0)
 S FDA(230,"+1,",.04)=NAME
"RTN","EDPLOGA",38,0)
 ;S FDA(230,"+1,",.05)=SSN --NtoL
"RTN","EDPLOGA",39,0)
 S FDA(230,"+1,",.06)=DFN
"RTN","EDPLOGA",40,0)
 S FDA(230,"+1,",3.2)=STATUS
"RTN","EDPLOGA",41,0)
 S FDA(230,"+1,",3.4)=BED
"RTN","EDPLOGA",42,0)
 I $L(SSN) S FDA(230,"+1,",.11)=$E(NAME)_$E(SSN,6,9)
"RTN","EDPLOGA",43,0)
 I NAME=AMB S FDA(230,"+1,",.11)="(amb)"
"RTN","EDPLOGA",44,0)
 I NAME'=AMB S FDA(230,"+1,",.08)=TIME
"RTN","EDPLOGA",45,0)
 I $G(ARR) S FDA(230,"+1,",.1)=ARR
"RTN","EDPLOGA",46,0)
 I CLINIC S FDA(230,"+1,",.14)=CLINIC
"RTN","EDPLOGA",47,0)
 I $G(REC("create")) S FDA(230,"+1,",.13)=REC("create")
"RTN","EDPLOGA",48,0)
 M HIST(230.1)=FDA(230)
"RTN","EDPLOGA",49,0)
 D UPDATE^DIE("","FDA","FDAIEN","ERR")
"RTN","EDPLOGA",50,0)
 I $D(DIERR) S EDPFAIL=$$FAIL^EDPLOG("add",2300004) Q EDPFAIL
"RTN","EDPLOGA",51,0)
 S LOGIEN=FDAIEN(1)
"RTN","EDPLOGA",52,0)
 ;
"RTN","EDPLOGA",53,0)
 ; Post new patient event
"RTN","EDPLOGA",54,0)
 I DFN,TIME D EVT(LOGIEN)
"RTN","EDPLOGA",55,0)
 ;
"RTN","EDPLOGA",56,0)
 ; Create the first history entry
"RTN","EDPLOGA",57,0)
 S HIST(230.1,"+1,",.01)=LOGIEN
"RTN","EDPLOGA",58,0)
 S HIST(230.1,"+1,",.02)=TIME
"RTN","EDPLOGA",59,0)
 S HIST(230.1,"+1,",.03)=EDPUSER
"RTN","EDPLOGA",60,0)
 K HIST(230.1,"+1,",.11) ; don't need last4
"RTN","EDPLOGA",61,0)
 K HIST(230.1,"+1,",.13) ; don't need creation source
"RTN","EDPLOGA",62,0)
 D UPDATE^DIE("","HIST","HISTIEN","ERR")
"RTN","EDPLOGA",63,0)
 I $D(DIERR) S EDPFAIL=$$FAIL^EDPLOG("add",2300004) Q EDPFAIL
"RTN","EDPLOGA",64,0)
 ;
"RTN","EDPLOGA",65,0)
 D XML^EDPX("<add status='ok' id='"_FDAIEN(1)_"' />")
"RTN","EDPLOGA",66,0)
 D GET^EDPQLE(FDAIEN(1),CHOICES)
"RTN","EDPLOGA",67,0)
 Q EDPFAIL
"RTN","EDPLOGA",68,0)
 ;
"RTN","EDPLOGA",69,0)
DEL(AREA,LOGID) ; Delete Stub Log Entry
"RTN","EDPLOGA",70,0)
 N I,CNT,DIK,DA
"RTN","EDPLOGA",71,0)
 S I=0,CNT=0 F  S I=$O(^EDP(230.1,"B",LOGID,I)) Q:'I  S CNT=CNT+1
"RTN","EDPLOGA",72,0)
 I $L($P($G(^EDP(230,LOGID,1)),U))!(CNT>1) D  Q
"RTN","EDPLOGA",73,0)
 . D FAIL^EDPLOG("upd","Does not appear to be a stub entry")
"RTN","EDPLOGA",74,0)
 ;
"RTN","EDPLOGA",75,0)
 ; Delete initial history entry
"RTN","EDPLOGA",76,0)
 S DIK="^EDP(230.1,",DA=$O(^EDP(230.1,"B",LOGID,0))
"RTN","EDPLOGA",77,0)
 I DA D ^DIK
"RTN","EDPLOGA",78,0)
 ; Delete stub log entry
"RTN","EDPLOGA",79,0)
 S DIK="^EDP(230,",DA=LOGID
"RTN","EDPLOGA",80,0)
 D ^DIK
"RTN","EDPLOGA",81,0)
 ;
"RTN","EDPLOGA",82,0)
 D XML^EDPX("<upd status='ok' />")
"RTN","EDPLOGA",83,0)
 Q
"RTN","EDPLOGA",84,0)
 ;
"RTN","EDPLOGA",85,0)
EVT(LOG) ; -- post new patient event [expects EDPSITE]
"RTN","EDPLOGA",86,0)
 N X0,DFN,SDT,SDCL,SDATA,SDAMEVT,X
"RTN","EDPLOGA",87,0)
 S X0=$G(^EDP(230,+$G(LOG),0)),DFN=+$P(X0,U,6),SDT=+$P(X0,U,8)
"RTN","EDPLOGA",88,0)
 I 'DFN!'SDT Q  ;missing data
"RTN","EDPLOGA",89,0)
 S SDCL=$$DFLTLOC^EDPLPCE(DFN) Q:'SDCL
"RTN","EDPLOGA",90,0)
 ; have patient, time, hosp loc -> post event
"RTN","EDPLOGA",91,0)
 S SDATA=U_DFN_U_SDT_U_SDCL,SDAMEVT=1
"RTN","EDPLOGA",92,0)
 S EDPDATA=LOG_SDATA
"RTN","EDPLOGA",93,0)
 S X=+$O(^ORD(101,"B","EDP NEW PATIENT",0))_";ORD(101,"
"RTN","EDPLOGA",94,0)
 D EN^XQOR
"RTN","EDPLOGA",95,0)
 K EDPDATA
"RTN","EDPLOGA",96,0)
 Q
"RTN","EDPLOGH")
0^27^B12593326^B12449970
"RTN","EDPLOGH",1,0)
EDPLOGH ;SLC/KCM - Add History Entry for ED Log ;2/28/12 08:33am
"RTN","EDPLOGH",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPLOGH",3,0)
 ;
"RTN","EDPLOGH",4,0)
 ;TODO:  add transaction processing
"RTN","EDPLOGH",5,0)
 ;
"RTN","EDPLOGH",6,0)
SAVE(IEN,TIME,HIST) ; save a new history entry for changed fields
"RTN","EDPLOGH",7,0)
 Q:$D(HIST)<10
"RTN","EDPLOGH",8,0)
 ;
"RTN","EDPLOGH",9,0)
 N HISTIEN,DIERR
"RTN","EDPLOGH",10,0)
 S HIST(230.1,"+1,",.01)=IEN
"RTN","EDPLOGH",11,0)
 S HIST(230.1,"+1,",.02)=TIME
"RTN","EDPLOGH",12,0)
 S HIST(230.1,"+1,",.03)=EDPUSER
"RTN","EDPLOGH",13,0)
 D UPDATE^DIE("","HIST","HISTIEN","ERR")
"RTN","EDPLOGH",14,0)
 Q
"RTN","EDPLOGH",15,0)
COLLIDE(LOG,LOADTS) ; return true if new updates since load time
"RTN","EDPLOGH",16,0)
 N I,J,TS,IEN,FLDS,MODS
"RTN","EDPLOGH",17,0)
 ;S TS=LOADTS-0.000001
"RTN","EDPLOGH",18,0)
 S TS=LOADTS
"RTN","EDPLOGH",19,0)
 F  S TS=$O(^EDP(230.1,"ADF",LOG,TS)) Q:'TS  D
"RTN","EDPLOGH",20,0)
 . S IEN=0 F  S IEN=$O(^EDP(230.1,"ADF",LOG,TS,IEN)) Q:'IEN  D
"RTN","EDPLOGH",21,0)
 .. S MODS=$P($G(^EDP(230.1,IEN,9)),U)
"RTN","EDPLOGH",22,0)
 .. F J=1:1:$L(MODS,";") I $L($P(MODS,";",J)) S FLDS($P(MODS,";",J))=""
"RTN","EDPLOGH",23,0)
 ; no collisions
"RTN","EDPLOGH",24,0)
 I $D(FLDS)<10 Q 0
"RTN","EDPLOGH",25,0)
 ;
"RTN","EDPLOGH",26,0)
 ; handle collisions
"RTN","EDPLOGH",27,0)
 D XML^EDPX("<upd id='"_LOG_"' status='collision' loadTS='"_$$NOW^XLFDT_"'>")
"RTN","EDPLOGH",28,0)
 D XML^EDPX("Since you loaded this entry, changes have been made by someone else:")
"RTN","EDPLOGH",29,0)
 D XML^EDPX(" ")
"RTN","EDPLOGH",30,0)
 N X,X0,X1,X2,X3,PT
"RTN","EDPLOGH",31,0)
 S X0=^EDP(230,LOG,0),X1=$G(^(1)),X2=$G(^(2)),X3=$G(^(3)),PT=0
"RTN","EDPLOGH",32,0)
 S I=0 F  S I=$O(FLDS(I)) Q:'I  D
"RTN","EDPLOGH",33,0)
 . I I=.04 S X=$P(X0,U,4) D MSG(X,"Patient Name") S PT=1
"RTN","EDPLOGH",34,0)
 . I (I=.06),'PT S X=$P(X0,U,6) D MSG($P($G(^DPT(+X,0)),U),"Patient Name")
"RTN","EDPLOGH",35,0)
 . I I=.1 S X=$P(X0,U,10) D MSG($$CODE(X),"Source")
"RTN","EDPLOGH",36,0)
 . I I=1.1 S X=$P(X1,U,1) D MSG(X,"Complaint")
"RTN","EDPLOGH",37,0)
 . I I=1.2 S X=$P(X1,U,2) D MSG($$CODE(X),"Disposition")
"RTN","EDPLOGH",38,0)
 . I I=1.5 S X=$P(X1,U,5) D MSG($$CODE(X),"Delay Reason")
"RTN","EDPLOGH",39,0)
 . I I=2 S X=$P(X2,U,1) D MSG(X,"Long Complaint")
"RTN","EDPLOGH",40,0)
 . I I=3.2 S X=$P(X3,U,2) D MSG($$CODE(X),"Status")
"RTN","EDPLOGH",41,0)
 . I I=3.3 S X=$P(X3,U,3) D MSG($$CODE(X),"Acuity")
"RTN","EDPLOGH",42,0)
 . I I=3.4 S X=$P(X3,U,4) D MSG($P($G(^EDPB(231.8,+X,0)),U),"Room/Area")
"RTN","EDPLOGH",43,0)
 . I I=3.5 S X=$P(X3,U,5) D MSG($$NP(X),"Provider")
"RTN","EDPLOGH",44,0)
 . I I=3.6 S X=$P(X3,U,6) D MSG($$NP(X),"Nurse")
"RTN","EDPLOGH",45,0)
 . I I=3.7 S X=$P(X3,U,7) D MSG($$NP(X),"Resident")
"RTN","EDPLOGH",46,0)
 . I I=3.8 S X=$P(X3,U,8) D MSG(X,"Comment")
"RTN","EDPLOGH",47,0)
 . I I=4 D MSG($$DIAG(LOG),"Diagnosis")
"RTN","EDPLOGH",48,0)
 D XML^EDPX(" ")
"RTN","EDPLOGH",49,0)
 D XML^EDPX("If you wish to overwrite with your changes,")
"RTN","EDPLOGH",50,0)
 D XML^EDPX("close this window and click SAVE again.")
"RTN","EDPLOGH",51,0)
 D XML^EDPX("If you wish to leave this entry as is,")
"RTN","EDPLOGH",52,0)
 D XML^EDPX("close this window and click CANCEL.")
"RTN","EDPLOGH",53,0)
 D XML^EDPX("</upd>")
"RTN","EDPLOGH",54,0)
 Q 1
"RTN","EDPLOGH",55,0)
 ;
"RTN","EDPLOGH",56,0)
BEDGONE(AREA,CURBED,HOLDBED,BED) ; return true if bed is no longer available
"RTN","EDPLOGH",57,0)
 I 'BED Q 0
"RTN","EDPLOGH",58,0)
 I BED=CURBED Q 0
"RTN","EDPLOGH",59,0)
 I BED=HOLDBED Q 0
"RTN","EDPLOGH",60,0)
 N MULTI S MULTI=$P(^EDPB(231.8,BED,0),U,9) S:MULTI=3 MULTI=0
"RTN","EDPLOGH",61,0)
 I MULTI Q 0
"RTN","EDPLOGH",62,0)
 N OCCUPIED
"RTN","EDPLOGH",63,0)
 S OCCUPIED=$D(^EDP(230,"AL",EDPSITE,AREA,BED))!$D(^EDP(230,"AH",EDPSITE,AREA,BED))
"RTN","EDPLOGH",64,0)
 I 'OCCUPIED Q 0
"RTN","EDPLOGH",65,0)
 Q 1
"RTN","EDPLOGH",66,0)
 ;
"RTN","EDPLOGH",67,0)
UPDHOLD(FDA,IEN,CURBED) ; hold the current bed if primary > secondary
"RTN","EDPLOGH",68,0)
 Q:'$G(FDA(230,IEN_",",3.4))  ; no change in bed
"RTN","EDPLOGH",69,0)
 N NEWBED,HOLDBED
"RTN","EDPLOGH",70,0)
 S NEWBED=FDA(230,IEN_",",3.4),HOLDBED=""
"RTN","EDPLOGH",71,0)
 ; new bed is none, set hold bed to none
"RTN","EDPLOGH",72,0)
 I (NEWBED="@")!(NEWBED=0) S HOLDBED="@"
"RTN","EDPLOGH",73,0)
 ; new bed is primary, set hold bed to none
"RTN","EDPLOGH",74,0)
 I NEWBED,($P(^EDPB(231.8,NEWBED,0),U,13)<2) S HOLDBED="@"
"RTN","EDPLOGH",75,0)
 ; new bed is secondary, set hold bed to current bed if primary
"RTN","EDPLOGH",76,0)
 I ($P(^EDPB(231.8,NEWBED,0),U,13)=2),($P(^EDPB(231.8,CURBED,0),U,13)<2) S HOLDBED=CURBED
"RTN","EDPLOGH",77,0)
 ;
"RTN","EDPLOGH",78,0)
 I $L(HOLDBED) S FDA(230,IEN_",",3.9)=HOLDBED
"RTN","EDPLOGH",79,0)
 Q
"RTN","EDPLOGH",80,0)
MSG(VAL,LBL) ; add to XML message
"RTN","EDPLOGH",81,0)
 D XML^EDPX(LBL_" changed to:  "_VAL)
"RTN","EDPLOGH",82,0)
 Q
"RTN","EDPLOGH",83,0)
CODE(IEN) ; return coded value
"RTN","EDPLOGH",84,0)
 I IEN Q $P(^EDPB(233.1,IEN,0),U,2)
"RTN","EDPLOGH",85,0)
 Q ""
"RTN","EDPLOGH",86,0)
NP(IEN) ; return New Person name
"RTN","EDPLOGH",87,0)
 I IEN Q $P(^VA(200,IEN,0),U)
"RTN","EDPLOGH",88,0)
 Q ""
"RTN","EDPLOGH",89,0)
DIAG(LOG) ; return list of diagnoses
"RTN","EDPLOGH",90,0)
 N I,X
"RTN","EDPLOGH",91,0)
 S I=0,X=""
"RTN","EDPLOGH",92,0)
 F  S I=$O(^EDP(230,LOG,4,I)) Q:'I  S X=X_$S($L(X):",",1:"")_$P($G(^EDP(230,LOG,4,I,0)),U)
"RTN","EDPLOGH",93,0)
 Q X
"RTN","EDPQAR")
0^9^B7638401^B6897621
"RTN","EDPQAR",1,0)
EDPQAR ;SLC/KCM - Log Area Information ;2/28/12 08:33am
"RTN","EDPQAR",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPQAR",3,0)
 ;
"RTN","EDPQAR",4,0)
PARAM(AREA) ; return parameters for area
"RTN","EDPQAR",5,0)
 N X,X1
"RTN","EDPQAR",6,0)
 S X1=$G(^EDPB(231.9,AREA,1))
"RTN","EDPQAR",7,0)
 S X("reqDiag")=+$P(X1,U,1)
"RTN","EDPQAR",8,0)
 S X("codedDiag")=+$P(X1,U,2)
"RTN","EDPQAR",9,0)
 S X("reqDisp")=+$P(X1,U,3)
"RTN","EDPQAR",10,0)
 S X("reqDelay")=+$P(X1,U,4)
"RTN","EDPQAR",11,0)
 S X("minDelay")=+$P(X1,U,5)
"RTN","EDPQAR",12,0)
 S X("residents")=+$P(X1,U,8)
"RTN","EDPQAR",13,0)
 S X("clinics")=+$P(X1,U,9)
"RTN","EDPQAR",14,0)
 S X("emptyIEN")=+$O(^EDPB(233.1,"B","edp.reserved.novalue",0))
"RTN","EDPQAR",15,0)
 S X("errorIEN")=+$O(^EDPB(233.1,"B","edp.disposition.error",0))
"RTN","EDPQAR",16,0)
 S X("evalIEN")=+$O(^EDPB(233.1,"B","edp.disposition.nec",0))
"RTN","EDPQAR",17,0)
 S X("leftIEN")=+$O(^EDPB(233.1,"B","edp.disposition.left",0))
"RTN","EDPQAR",18,0)
 D XML^EDPX($$XMLA^EDPX("params",.X))
"RTN","EDPQAR",19,0)
 Q
"RTN","EDPQAR",20,0)
 ; BYPASS & LSTIENS not implemented yet, perhaps in T25?
"RTN","EDPQAR",21,0)
 ; This would require changing the params VO to have a list
"RTN","EDPQAR",22,0)
 ; of IEN's that would be checked when enabling the remove from
"RTN","EDPQAR",23,0)
 ; board button.  EDPLOG would also need to check the flags of
"RTN","EDPQAR",24,0)
 ; the disposition when validating in RDY2RMV
"RTN","EDPQAR",25,0)
BYPASS(AREA) ; list IEN's for bypass dispositions
"RTN","EDPQAR",26,0)
 N ROOT
"RTN","EDPQAR",27,0)
 D XML^EDPX("<bypassRemoveChecks>")
"RTN","EDPQAR",28,0)
 S ROOT="edp.disposition" D LSTIENS(ROOT)
"RTN","EDPQAR",29,0)
 S ROOT=EDPSTA_".disposition" D LSTIENS(ROOT)
"RTN","EDPQAR",30,0)
 D XML^EDPX("</bypassRemoveChecks>")
"RTN","EDPQAR",31,0)
 Q
"RTN","EDPQAR",32,0)
LSTIENS(ROOT) ; list IEN's that should bypass remove-from-board checks
"RTN","EDPQAR",33,0)
 N X,IEN,FLAGS
"RTN","EDPQAR",34,0)
 S X=ROOT F  S X=$O(^EDPB(233.1,"B",X)) Q:$E(X,1,$L(ROOT))'=ROOT  D
"RTN","EDPQAR",35,0)
 . S IEN=0 F  S IEN=$O(^EDPB(233.1,"B",X,IEN)) Q:'IEN  D
"RTN","EDPQAR",36,0)
 .. S FLAGS=$P(^EDPB(233.1,IEN,0),U,5) Q:FLAGS'["B"
"RTN","EDPQAR",37,0)
 .. D XML^EDPX("<ien>"_IEN_"</ien>")
"RTN","EDPQAR",38,0)
 Q
"RTN","EDPQAR",39,0)
BRDUSER(AREA) ; set XML for anonymous board user
"RTN","EDPQAR",40,0)
 N X,DFLTROOM
"RTN","EDPQAR",41,0)
 S X("area")=$$DFLTAREA(AREA)
"RTN","EDPQAR",42,0)
 I X("area") S X("areaNm")=$P(^EDPB(231.9,X("area"),0),U)
"RTN","EDPQAR",43,0)
 S X("version")=$$VERSRV
"RTN","EDPQAR",44,0)
 ; bwf patch 6 - 4/25/2013 adding defaultRoom to XML return
"RTN","EDPQAR",45,0)
 I X("area") D
"RTN","EDPQAR",46,0)
 .S DFLTROOM=$$GET1^DIQ(231.9,X("area"),1.12,"I")
"RTN","EDPQAR",47,0)
 .S X("defaultRoom")=$S(DFLTROOM:"true",1:"false")
"RTN","EDPQAR",48,0)
 D XML^EDPX($$XMLA^EDPX("user",.X))
"RTN","EDPQAR",49,0)
 Q
"RTN","EDPQAR",50,0)
DFLTAREA(AREA) ; return the default area for a site
"RTN","EDPQAR",51,0)
 N X,DFLT
"RTN","EDPQAR",52,0)
 I $L($G(AREA)),(+AREA'=AREA) D
"RTN","EDPQAR",53,0)
 . S AREA=$O(^EDPB(231.9,"B",AREA,0))
"RTN","EDPQAR",54,0)
 . ; need to check for matching site!!
"RTN","EDPQAR",55,0)
 S DFLT=$S($G(AREA):AREA,1:$O(^EDPB(231.9,"C",EDPSITE,0)))
"RTN","EDPQAR",56,0)
 ;
"RTN","EDPQAR",57,0)
 I 'DFLT D ADDAREA S DFLT=$O(^EDPB(231.9,"C",EDPSITE,0))
"RTN","EDPQAR",58,0)
 Q DFLT
"RTN","EDPQAR",59,0)
ADDAREA ; add area if none is defined for this site
"RTN","EDPQAR",60,0)
 N FDA,FDAIEN,DIERR,ERR
"RTN","EDPQAR",61,0)
 S FDA(231.9,"+1,",.01)="Emergency Department"
"RTN","EDPQAR",62,0)
 S FDA(231.9,"+1,",.02)=EDPSITE
"RTN","EDPQAR",63,0)
 D UPDATE^DIE("","FDA","FDAIEN","ERR")
"RTN","EDPQAR",64,0)
 Q:$D(DIERR)
"RTN","EDPQAR",65,0)
 ;
"RTN","EDPQAR",66,0)
 N AREA S AREA=FDAIEN(1)
"RTN","EDPQAR",67,0)
 D RESET^EDPBRS(AREA)
"RTN","EDPQAR",68,0)
 Q
"RTN","EDPQAR",69,0)
VERSRV()   ; Return server version of option name
"RTN","EDPQAR",70,0)
 N EDPLST,VAL
"RTN","EDPQAR",71,0)
 D FIND^DIC(19,"",1,"X","EDPF TRACKING SYSTEM",1,,,,"EDPLST")
"RTN","EDPQAR",72,0)
 S VAL=$G(EDPLST("DILIST","ID",1,1))
"RTN","EDPQAR",73,0)
 S VAL=$P(VAL,"version ",2)
"RTN","EDPQAR",74,0)
 I 'VAL Q "1.0T?"
"RTN","EDPQAR",75,0)
 Q VAL
"RTN","EDPQDB")
0^22^B56093021^B55055961
"RTN","EDPQDB",1,0)
EDPQDB ;SLC/KCM - Display Active Log Entries ;2/28/12 08:33am
"RTN","EDPQDB",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPQDB",3,0)
 ;
"RTN","EDPQDB",4,0)
GET(AREA,BOARD,LAST) ; Get display board contents
"RTN","EDPQDB",5,0)
 ;I $G(^EDPB(231.9,AREA,230))=TOKEN D XML^EDPX("<rows status='same' />") Q
"RTN","EDPQDB",6,0)
 ;
"RTN","EDPQDB",7,0)
 N EDPTIME S EDPTIME=$$NOW^XLFDT
"RTN","EDPQDB",8,0)
 N SEQ,BED,LOG,BEDS,DWHEN,DUP,ACU,LSTUPD,RELOAD,ATT
"RTN","EDPQDB",9,0)
 ;
"RTN","EDPQDB",10,0)
 S LSTUPD=$P($G(^EDPB(231.9,AREA,0)),U,3),RELOAD="true",LAST=$G(LAST)
"RTN","EDPQDB",11,0)
 I (LAST="")!(LAST=LSTUPD) S RELOAD="false"
"RTN","EDPQDB",12,0)
 S ATT("status")="new"
"RTN","EDPQDB",13,0)
 S ATT("reloadConfig")=RELOAD
"RTN","EDPQDB",14,0)
 S ATT("configLastUpdated")=LSTUPD
"RTN","EDPQDB",15,0)
 S ATT("version")=$$VERSRV^EDPQAR
"RTN","EDPQDB",16,0)
 D XML^EDPX($$XMLA^EDPX("rows",.ATT,""))
"RTN","EDPQDB",17,0)
 ;
"RTN","EDPQDB",18,0)
 ; Get a list of all the beds in sequence for this area
"RTN","EDPQDB",19,0)
 S BOARD=$G(BOARD)
"RTN","EDPQDB",20,0)
 S BED=0 F  S BED=$O(^EDPB(231.8,"C",EDPSITE,AREA,BED)) Q:'BED  D
"RTN","EDPQDB",21,0)
 . S SEQ=$P(^EDPB(231.8,BED,0),U,5) S:'SEQ SEQ=99999
"RTN","EDPQDB",22,0)
 . Q:$P(^EDPB(231.8,BED,0),U,4)  ; inactive bed
"RTN","EDPQDB",23,0)
 . S BEDS(SEQ,BED)="",BEDS("B",BED,SEQ)=""
"RTN","EDPQDB",24,0)
 ;
"RTN","EDPQDB",25,0)
 ; Insert the active log entries into the correct sequence for the beds 
"RTN","EDPQDB",26,0)
 S BED=0 F  S BED=$O(^EDP(230,"AL",EDPSITE,AREA,BED)) Q:'BED  D
"RTN","EDPQDB",27,0)
 . S LOG=0 F  S LOG=$O(^EDP(230,"AL",EDPSITE,AREA,BED,LOG)) Q:'LOG  D
"RTN","EDPQDB",28,0)
 . . I '$D(BEDS("B",BED)) S BEDS(99999,BED)="",BEDS("B",BED,99999)=""
"RTN","EDPQDB",29,0)
 . . S SEQ=$O(BEDS("B",BED,0))
"RTN","EDPQDB",30,0)
 . . S ACU=$P($G(^EDP(230,LOG,3)),U,3) S:'ACU ACU=99
"RTN","EDPQDB",31,0)
 . . S BEDS(SEQ,BED,ACU,LOG)=""
"RTN","EDPQDB",32,0)
 ;
"RTN","EDPQDB",33,0)
 ; Loop thru the sequence of beds to create display board rows
"RTN","EDPQDB",34,0)
 D BLDDUP^EDPQLP(.DUP,AREA)
"RTN","EDPQDB",35,0)
 S SEQ=0 F  S SEQ=$O(BEDS(SEQ)) Q:'SEQ  D
"RTN","EDPQDB",36,0)
 . S BED=0 F  S BED=$O(BEDS(SEQ,BED)) Q:'BED  D
"RTN","EDPQDB",37,0)
 . . I $L(BOARD),($P(^EDPB(231.8,BED,0),U,11)'=BOARD) Q
"RTN","EDPQDB",38,0)
 . . S DWHEN=$P(^EDPB(231.8,BED,0),U,7)
"RTN","EDPQDB",39,0)
 . . ; never display DWHEN=2
"RTN","EDPQDB",40,0)
 . . Q:DWHEN=2
"RTN","EDPQDB",41,0)
 . . ; always display DWHEN=1
"RTN","EDPQDB",42,0)
 . . I ($D(BEDS(SEQ,BED))<10)&(DWHEN=1) D EMPTY(BED) Q
"RTN","EDPQDB",43,0)
 . . ; display if occupied DWHEN=0
"RTN","EDPQDB",44,0)
 . . S ACU=0 F  S ACU=$O(BEDS(SEQ,BED,ACU)) Q:'ACU  D
"RTN","EDPQDB",45,0)
 . . . S LOG=0 F  S LOG=$O(BEDS(SEQ,BED,ACU,LOG)) Q:'LOG  D OCCUPIED(LOG,.DUP)
"RTN","EDPQDB",46,0)
 ;
"RTN","EDPQDB",47,0)
 D XML^EDPX("</rows>")
"RTN","EDPQDB",48,0)
 Q
"RTN","EDPQDB",49,0)
EMPTY(BED) ; add row if unoccupied be should show
"RTN","EDPQDB",50,0)
 N ROW
"RTN","EDPQDB",51,0)
 S ROW("bed")=BED
"RTN","EDPQDB",52,0)
 S ROW("bedNm")=$P(^EDPB(231.8,BED,0),U,6)
"RTN","EDPQDB",53,0)
 D XML^EDPX($$XMLA^EDPX("row",.ROW))
"RTN","EDPQDB",54,0)
 Q
"RTN","EDPQDB",55,0)
OCCUPIED(LOG,DUP) ; add log entry row
"RTN","EDPQDB",56,0)
 N X0,X1,X3,X7,ROW
"RTN","EDPQDB",57,0)
 S X0=^EDP(230,LOG,0),X1=$G(^(1)),X3=$G(^(3)),X7=$G(^(7))
"RTN","EDPQDB",58,0)
 S ROW("id")=LOG
"RTN","EDPQDB",59,0)
 ;S ROW("bed")=$$BEDNM(BED,$P(X3,U,9))
"RTN","EDPQDB",60,0)
 S ROW("bed")=BED
"RTN","EDPQDB",61,0)
 S ROW("bedNm")=$P(^EDPB(231.8,BED,0),U,6)
"RTN","EDPQDB",62,0)
 S ROW("ptNm")=$P($P(X0,U,4),",")
"RTN","EDPQDB",63,0)
 S ROW("ptDfn")=$P(X0,U,6)
"RTN","EDPQDB",64,0)
 S ROW("last4")=$P(X0,U,11)
"RTN","EDPQDB",65,0)
 S ROW("visit")=($P(X0,U,12)!$P(X0,U,13))
"RTN","EDPQDB",66,0)
 S ROW("clinic")=$P(X0,U,14)
"RTN","EDPQDB",67,0)
 S ROW("clinicNm")=$$LOCNM($P(X0,U,14))
"RTN","EDPQDB",68,0)
 S ROW("complaint")=$P(X1,U,1)
"RTN","EDPQDB",69,0)
 S ROW("comment")=$P(X3,U,8)
"RTN","EDPQDB",70,0)
 S ROW("md")=$P(X3,U,5)
"RTN","EDPQDB",71,0)
 S ROW("mdNm")=$$INITIAL($P(X3,U,5))
"RTN","EDPQDB",72,0)
 S ROW("rn")=$P(X3,U,6)
"RTN","EDPQDB",73,0)
 S ROW("rnNm")=$$INITIAL($P(X3,U,6))
"RTN","EDPQDB",74,0)
 S ROW("res")=$P(X3,U,7)
"RTN","EDPQDB",75,0)
 S ROW("resNm")=$$INITIAL($P(X3,U,7))
"RTN","EDPQDB",76,0)
 S ROW("status")=$P(X3,U,2)
"RTN","EDPQDB",77,0)
 S ROW("statusNm")=$$CAB(EDPSTA_".status",$P(X3,U,2))
"RTN","EDPQDB",78,0)
 S ROW("acuity")=$P(X3,U,3)
"RTN","EDPQDB",79,0)
 S ROW("acuityNm")=$$CAB(EDPSTA_".acuity",$P(X3,U,3))
"RTN","EDPQDB",80,0)
 S ROW("emins")=$$HHMM($$MIN($P(X0,U,8)))
"RTN","EDPQDB",81,0)
 S ROW("lmins")=$$HHMM($$LMIN(LOG))
"RTN","EDPQDB",82,0)
 S ROW("similar")=$$SIM^EDPQLP(ROW("ptNm"),ROW("last4"),.DUP)
"RTN","EDPQDB",83,0)
 ;8/14/11 - Adding disposition to display board
"RTN","EDPQDB",84,0)
 ;4/23/13 - bwf - replacing line below with the one that follows
"RTN","EDPQDB",85,0)
 ;S ROW("disposition")=$$GET1^DIQ(233.1,$P(X1,U,2),.02,"E")
"RTN","EDPQDB",86,0)
 S ROW("disposition")=$$CAB(EDPSTA_".disposition",$P(X1,U,2))
"RTN","EDPQDB",87,0)
 ;
"RTN","EDPQDB",88,0)
 N STS D ORDSTS(LOG,.STS)
"RTN","EDPQDB",89,0)
 ; ROW("lab")=STS("LP")_"/"_STS("LC")             ; lab pending / lab complete
"RTN","EDPQDB",90,0)
 S ROW("lab")=STS("LP")_"/"_STS("LC") ; lab pending / lab complete
"RTN","EDPQDB",91,0)
 S ROW("labUrg")=$S(STS("LS"):2,STS("LP"):1,1:0)  ; any STAT labs?
"RTN","EDPQDB",92,0)
 ; ROW("rad")=STS("RP")_"/"_STS("RC")             ; img pending / img complete
"RTN","EDPQDB",93,0)
 S ROW("rad")=STS("RP")_"/"_STS("RC")
"RTN","EDPQDB",94,0)
 S ROW("radUrg")=$S(STS("RS"):2,STS("RP"):1,1:0)  ; any STAT imgs?
"RTN","EDPQDB",95,0)
 S ROW("ordNew")=STS("ON")                        ; number of new orders
"RTN","EDPQDB",96,0)
 S ROW("minLab")=STS("LO")                        ; oldest pending/active lab
"RTN","EDPQDB",97,0)
 S ROW("minRad")=STS("RO")                        ; oldest pending/active img
"RTN","EDPQDB",98,0)
 S ROW("minVer")=STS("OO")                        ; oldest "new" order
"RTN","EDPQDB",99,0)
 D XML^EDPX($$XMLA^EDPX("row",.ROW,"")) K ROW
"RTN","EDPQDB",100,0)
 ;
"RTN","EDPQDB",101,0)
 S ROW("num")=STS("LP")_"/"_STS("LC")             ; lab pending / lab complete
"RTN","EDPQDB",102,0)
 D XML^EDPX($$XMLA^EDPX("labs",.ROW,""))
"RTN","EDPQDB",103,0)
 ;4/26/13 - BWF removed following two lines
"RTN","EDPQDB",104,0)
 ;I $O(STS("L",0)) D
"RTN","EDPQDB",105,0)
 ;. N ORD M ORD=STS("L") D ADDORD(.ORD,"lab")
"RTN","EDPQDB",106,0)
 D XML^EDPX("</labs>") K ROW
"RTN","EDPQDB",107,0)
 ;
"RTN","EDPQDB",108,0)
 S ROW("num")=STS("RP")_"/"_STS("RC")             ; img pending / img complete
"RTN","EDPQDB",109,0)
 D XML^EDPX($$XMLA^EDPX("rads",.ROW,""))
"RTN","EDPQDB",110,0)
 ;4/26/13 - BWF removed following two lines 
"RTN","EDPQDB",111,0)
 ;I $O(STS("R",0)) D
"RTN","EDPQDB",112,0)
 ;. N ORD M ORD=STS("R") D ADDORD(.ORD,"rad")
"RTN","EDPQDB",113,0)
 D XML^EDPX("</rads>")
"RTN","EDPQDB",114,0)
  ;
"RTN","EDPQDB",115,0)
 I $P(X7,U,2) D                                   ; vitals due
"RTN","EDPQDB",116,0)
 . N LAST,DUE D XML^EDPX("<alerts>")
"RTN","EDPQDB",117,0)
 . S LAST=$$LAST^EDPVIT($P(X0,U,6)),DUE=$$FMADD^XLFDT(LAST,,,+X7)
"RTN","EDPQDB",118,0)
 . S ROW("name")="vitals",ROW("isDue")="false"
"RTN","EDPQDB",119,0)
 . I DUE<$$NOW^XLFDT S ROW("isDue")="true",ROW("timeDue")=DUE
"RTN","EDPQDB",120,0)
 . D XML^EDPX($$XMLA^EDPX("alert",.ROW)) K ROW
"RTN","EDPQDB",121,0)
 . D XML^EDPX("</alerts>")
"RTN","EDPQDB",122,0)
 ;
"RTN","EDPQDB",123,0)
 D XML^EDPX("</row>")
"RTN","EDPQDB",124,0)
 Q
"RTN","EDPQDB",125,0)
 ;
"RTN","EDPQDB",126,0)
ADDORD(LIST,TAG) ; add order detail to XML
"RTN","EDPQDB",127,0)
 N ROW,IFN,OI,X,I
"RTN","EDPQDB",128,0)
 S IFN=0 F  S IFN=+$O(LIST(IFN)) Q:IFN<1  K ROW D
"RTN","EDPQDB",129,0)
 . S ROW("orderId")=IFN
"RTN","EDPQDB",130,0)
 . S ROW("status")=$$GET1^DIQ(100,IFN_",",5)
"RTN","EDPQDB",131,0)
 . S OI=$$OI^ORX8(IFN),ROW("name")=$P(OI,U,2),X=""
"RTN","EDPQDB",132,0)
 . I $E(TAG)="l" S X=$$GET1^DIQ(60,+$P(OI,U,3)_",",51)
"RTN","EDPQDB",133,0)
 . I $E(TAG)="r" S I=+$O(^ORD(101.43,+OI,2,0)),X=$G(^(I,0))
"RTN","EDPQDB",134,0)
 . S:$L(X) ROW("abbre")=X
"RTN","EDPQDB",135,0)
 . D XML^EDPX($$XMLA^EDPX(TAG,.ROW))
"RTN","EDPQDB",136,0)
 Q
"RTN","EDPQDB",137,0)
 ;
"RTN","EDPQDB",138,0)
INITIAL(LOCID) ; Return initials
"RTN","EDPQDB",139,0)
 Q:'LOCID ""
"RTN","EDPQDB",140,0)
 Q $P(^VA(200,LOCID,0),U,2)
"RTN","EDPQDB",141,0)
 ;
"RTN","EDPQDB",142,0)
LOCNM(LOC) ; Return clinic name from 44
"RTN","EDPQDB",143,0)
 Q:'LOC ""
"RTN","EDPQDB",144,0)
 N X S X=$G(^SC(LOC,0))  ; IA#10040
"RTN","EDPQDB",145,0)
 Q:'$L(X) ""
"RTN","EDPQDB",146,0)
 I $L($P(X,U,2)) Q $P(X,U,2)
"RTN","EDPQDB",147,0)
 Q $P(X,U)
"RTN","EDPQDB",148,0)
 ;
"RTN","EDPQDB",149,0)
BEDNM(CURBED,HELDBED) ; Return string for bed
"RTN","EDPQDB",150,0)
 N X S X=$P(^EDPB(231.8,CURBED,0),U,6)
"RTN","EDPQDB",151,0)
 I +HELDBED S X=X_" ("_$P(^EDPB(231.8,HELDBED,0),U,6)_")"
"RTN","EDPQDB",152,0)
 Q X
"RTN","EDPQDB",153,0)
 ;
"RTN","EDPQDB",154,0)
CAB(LST,IEN) ; Return code abbreviation
"RTN","EDPQDB",155,0)
 Q:'IEN ""
"RTN","EDPQDB",156,0)
 N LSTDA,ABB,XSITE,XNATL
"RTN","EDPQDB",157,0)
 S LSTDA=$O(^EDPB(233.2,"AS",LST,IEN,0))
"RTN","EDPQDB",158,0)
 S ABB="",XSITE="",XNATL=""
"RTN","EDPQDB",159,0)
 I LSTDA S XSITE=^EDPB(233.2,"AS",LST,IEN,LSTDA)
"RTN","EDPQDB",160,0)
 S ABB=$P(XSITE,U,1) Q:$L(ABB) ABB  ;site abbreviation
"RTN","EDPQDB",161,0)
 S XNATL=^EDPB(233.1,IEN,0)
"RTN","EDPQDB",162,0)
 S ABB=$P(XNATL,U,3) Q:$L(ABB) ABB  ;nat'l abbreviation
"RTN","EDPQDB",163,0)
 S ABB=$P(XSITE,U,2) Q:$L(ABB) ABB  ;site name
"RTN","EDPQDB",164,0)
 S ABB=$P(XNATL,U,2) Q:$L(ABB) ABB  ;nat'l name
"RTN","EDPQDB",165,0)
 Q ""
"RTN","EDPQDB",166,0)
 ;
"RTN","EDPQDB",167,0)
MIN(START) ; Return elapse time
"RTN","EDPQDB",168,0)
 I 'START Q ""
"RTN","EDPQDB",169,0)
 Q $$FMDIFF^XLFDT(EDPTIME,START,2)\60
"RTN","EDPQDB",170,0)
 ;
"RTN","EDPQDB",171,0)
LMIN(LOG) ; Return time at location
"RTN","EDPQDB",172,0)
 N IEN,TS,TM S TM=0
"RTN","EDPQDB",173,0)
 S TS="" F  S TS=$O(^EDP(230.1,"ADF",LOG,TS),-1) Q:'TS  D  Q:TM
"RTN","EDPQDB",174,0)
 . S IEN=0 F  S IEN=$O(^EDP(230.1,"ADF",LOG,TS,IEN)) Q:'IEN  D  Q:TM
"RTN","EDPQDB",175,0)
 . . I +$P($G(^EDP(230.1,IEN,3)),U,4) S TM=$P($G(^EDP(230.1,IEN,0)),U,2)
"RTN","EDPQDB",176,0)
 I TM Q $$FMDIFF^XLFDT(EDPTIME,TM,2)\60
"RTN","EDPQDB",177,0)
 Q 0
"RTN","EDPQDB",178,0)
 ;
"RTN","EDPQDB",179,0)
HHMM(MIN) ; Format as hours:minutes
"RTN","EDPQDB",180,0)
 Q MIN  ;(the colon messed up the calculations for elapsed time)
"RTN","EDPQDB",181,0)
 ;
"RTN","EDPQDB",182,0)
 N H,M
"RTN","EDPQDB",183,0)
 S H=MIN\60,M=MIN#60
"RTN","EDPQDB",184,0)
 S:$L(M)=1 M="0"_M
"RTN","EDPQDB",185,0)
 Q H_":"_M
"RTN","EDPQDB",186,0)
 ;
"RTN","EDPQDB",187,0)
ORDSTS(LOG,STS) ; compute statuses of orders
"RTN","EDPQDB",188,0)
 N IEN,X0
"RTN","EDPQDB",189,0)
 S STS("OO")=9999999,STS("ON")=0 ; oldest order, new orders
"RTN","EDPQDB",190,0)
 S STS("LP")=0,STS("LO")=9999999,STS("LS")=0,STS("LC")=0
"RTN","EDPQDB",191,0)
 S STS("RP")=0,STS("RO")=9999999,STS("RS")=0,STS("RC")=0
"RTN","EDPQDB",192,0)
 S IEN=0 F  S IEN=$O(^EDP(230,LOG,8,IEN)) Q:'IEN  D
"RTN","EDPQDB",193,0)
 . S X0=^EDP(230,LOG,8,IEN,0)
"RTN","EDPQDB",194,0)
 . S:$L($P(X0,U,2)) STS($P(X0,U,2),+X0)=""
"RTN","EDPQDB",195,0)
 . I ($P(X0,U,3)="N")!($P(X0,U,3)="A") D
"RTN","EDPQDB",196,0)
 . . I $P(X0,U,5)<STS("OO") S STS("OO")=$P(X0,U,5)      ; oldest order
"RTN","EDPQDB",197,0)
 . . I $P(X0,U,2)="L" D
"RTN","EDPQDB",198,0)
 . . . S STS("LP")=STS("LP")+1                          ; pending labs
"RTN","EDPQDB",199,0)
 . . . I $P(X0,U,5)<STS("LO") S STS("LO")=$P(X0,U,5)    ; oldest lab
"RTN","EDPQDB",200,0)
 . . . I $P(X0,U,4) S STS("LS")=1                       ; stat lab
"RTN","EDPQDB",201,0)
 . . I $P(X0,U,2)="R" D
"RTN","EDPQDB",202,0)
 . . . S STS("RP")=STS("RP")+1                          ; pending radiology
"RTN","EDPQDB",203,0)
 . . . I $P(X0,U,5)<STS("RO") S STS("RO")=$P(X0,U,5)    ; oldest radiology
"RTN","EDPQDB",204,0)
 . . . I $P(X0,U,4) S STS("RS")=1                       ; stat radiology
"RTN","EDPQDB",205,0)
 . I $P(X0,U,3)="N" S STS("ON")=STS("ON")+1
"RTN","EDPQDB",206,0)
 . I $P(X0,U,3)="C" D
"RTN","EDPQDB",207,0)
 . . I $P(X0,U,2)="L" S STS("LC")=STS("LC")+1           ; completed labs
"RTN","EDPQDB",208,0)
 . . I $P(X0,U,2)="R" S STS("RC")=STS("RC")+1           ; completed radiology
"RTN","EDPQDB",209,0)
 S STS("OO")=$S(STS("OO")=9999999:0,1:$$MIN(STS("OO")))
"RTN","EDPQDB",210,0)
 S STS("LO")=$S(STS("LO")=9999999:0,1:$$MIN(STS("LO")))
"RTN","EDPQDB",211,0)
 S STS("RO")=$S(STS("RO")=9999999:0,1:$$MIN(STS("RO")))
"RTN","EDPQDB",212,0)
 Q
"RTN","EDPQDBS")
0^23^B7446153^B3118586
"RTN","EDPQDBS",1,0)
EDPQDBS ;SLC/KCM - Display Board Specs ;5/23/13 11:10am
"RTN","EDPQDBS",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPQDBS",3,0)
 ;
"RTN","EDPQDBS",4,0)
GET(AREA,BOARD) ; Get Display Board Specs
"RTN","EDPQDBS",5,0)
 ;N I S I=0
"RTN","EDPQDBS",6,0)
 ;F  S I=$O(^EDPB(231.9,AREA,2,I)) Q:'I  D XML^EDPX(^EDPB(231.9,AREA,2,I,0))
"RTN","EDPQDBS",7,0)
 N ROLEIEN,R0,RNAME,RABBR,RXML
"RTN","EDPQDBS",8,0)
 I '$L($G(BOARD)) S BOARD="Main (default)"
"RTN","EDPQDBS",9,0)
 S BOARD=$O(^EDPB(231.9,AREA,4,"B",BOARD,0))
"RTN","EDPQDBS",10,0)
 D LOADBRD^EDPBCF(AREA,BOARD)
"RTN","EDPQDBS",11,0)
 ;
"RTN","EDPQDBS",12,0)
 D XML^EDPX("<colorSpec>")
"RTN","EDPQDBS",13,0)
 D CLRBED(AREA)
"RTN","EDPQDBS",14,0)
 ; bwf 5/23/2013 - if the CPE ROLE file has no entries, use old logic
"RTN","EDPQDBS",15,0)
 I '$O(^EDPB(232.5,0)) D
"RTN","EDPQDBS",16,0)
 .D CLRSTAFF(AREA,"md","P")
"RTN","EDPQDBS",17,0)
 .D CLRSTAFF(AREA,"res","R")
"RTN","EDPQDBS",18,0)
 .D CLRSTAFF(AREA,"rn","N")
"RTN","EDPQDBS",19,0)
 ; end changes bwf
"RTN","EDPQDBS",20,0)
 ;D CLRSTAFF(AREA,"md","P")
"RTN","EDPQDBS",21,0)
 ;D CLRSTAFF(AREA,"res","R")
"RTN","EDPQDBS",22,0)
 ;D CLRSTAFF(AREA,"rn","N")
"RTN","EDPQDBS",23,0)
 ; bwf 5/23/2013
"RTN","EDPQDBS",24,0)
 I $O(^EDPB(232.5,0)) D
"RTN","EDPQDBS",25,0)
 .S ROLEIEN=0 F  S ROLEIEN=$O(^EDPB(232.5,ROLEIEN)) Q:'ROLEIEN  D
"RTN","EDPQDBS",26,0)
 ..S R0=$G(^EDPB(232.5,ROLEIEN,0)),RNAME=$P(R0,U),RABBR=$P(R0,U,2),RXML=$P(R0,U,3)
"RTN","EDPQDBS",27,0)
 ..D CLRSTAF2(AREA,RXML,ROLEIEN)
"RTN","EDPQDBS",28,0)
 ; end changes bwf
"RTN","EDPQDBS",29,0)
 ; BWF - REPLACED BELOW CODE WITH CODE ABOVE 5/23/2013
"RTN","EDPQDBS",30,0)
 ;S ROLEIEN=0 F  S ROLEIEN=$O(^EDPB(232.5,ROLEIEN)) Q:'ROLEIEN  D
"RTN","EDPQDBS",31,0)
 ;.S R0=$G(^EDPB(232.5,ROLEIEN,0)),RNAME=$P(R0,U),RABBR=$P(R0,U,2),RXML=$P(R0,U,3)
"RTN","EDPQDBS",32,0)
 ;.D CLRSTAFF(AREA,RXML,ROLEIEN)
"RTN","EDPQDBS",33,0)
 N I S I=0
"RTN","EDPQDBS",34,0)
 F  S I=$O(^EDPB(231.9,AREA,3,I)) Q:'I  D XML^EDPX(^EDPB(231.9,AREA,3,I,0))
"RTN","EDPQDBS",35,0)
 D XML^EDPX("</colorSpec>")
"RTN","EDPQDBS",36,0)
 Q
"RTN","EDPQDBS",37,0)
CLRBED(AREA) ; add bed colors
"RTN","EDPQDBS",38,0)
 D XML^EDPX("<colors id='bed' type='bed' >")
"RTN","EDPQDBS",39,0)
 N BED,X0
"RTN","EDPQDBS",40,0)
 S BED=0 F  S BED=$O(^EDPB(231.8,"C",EDPSITE,AREA,BED)) Q:'BED  D
"RTN","EDPQDBS",41,0)
 . S X0=^EDPB(231.8,BED,0)
"RTN","EDPQDBS",42,0)
 . I $P(X0,U,12)="" Q
"RTN","EDPQDBS",43,0)
 . N X
"RTN","EDPQDBS",44,0)
 . S X("att")="@bed"
"RTN","EDPQDBS",45,0)
 . S X("clr")=$P(X0,U,12)
"RTN","EDPQDBS",46,0)
 . S X("val")=BED
"RTN","EDPQDBS",47,0)
 . D XML^EDPX($$XMLA^EDPX("map",.X))
"RTN","EDPQDBS",48,0)
 D XML^EDPX("</colors>")
"RTN","EDPQDBS",49,0)
 Q
"RTN","EDPQDBS",50,0)
CLRSTAFF(AREA,ROLEID,ROLE) ; add staff colors
"RTN","EDPQDBS",51,0)
 D XML^EDPX("<colors id='"_ROLEID_"' type='staff' >")
"RTN","EDPQDBS",52,0)
 N IEN
"RTN","EDPQDBS",53,0)
 S IEN="" F  S IEN=$O(^EDPB(231.7,"AC",EDPSITE,AREA,ROLE,IEN)) Q:'IEN  D
"RTN","EDPQDBS",54,0)
 . S X0=^EDPB(231.7,IEN,0) Q:'$P(X0,U,8)
"RTN","EDPQDBS",55,0)
 . N X
"RTN","EDPQDBS",56,0)
 . S X("att")=$S(ROLE="P":"@md",ROLE="N":"@rn",ROLE="R":"@res",1:"nop")
"RTN","EDPQDBS",57,0)
 . S X("clr")=$P(X0,U,8)
"RTN","EDPQDBS",58,0)
 . S X("val")=$P(X0,U)
"RTN","EDPQDBS",59,0)
 . D XML^EDPX($$XMLA^EDPX("map",.X))
"RTN","EDPQDBS",60,0)
 D XML^EDPX("</colors>")
"RTN","EDPQDBS",61,0)
 Q
"RTN","EDPQDBS",62,0)
 ; BWF 5/23/2013 - Added new module for backward compatibility
"RTN","EDPQDBS",63,0)
CLRSTAF2(AREA,ROLEID,ROLEIEN) ; add staff colors
"RTN","EDPQDBS",64,0)
 D XML^EDPX("<colors id='"_$P(ROLEID,"@",2)_"' type='staff' >")
"RTN","EDPQDBS",65,0)
 N IEN
"RTN","EDPQDBS",66,0)
 S IEN="" F  S IEN=$O(^EDPB(231.7,"AC",EDPSITE,AREA,ROLEIEN,IEN)) Q:'IEN  D
"RTN","EDPQDBS",67,0)
 . S X0=^EDPB(231.7,IEN,0) Q:'$P(X0,U,8)
"RTN","EDPQDBS",68,0)
 . N X
"RTN","EDPQDBS",69,0)
 . S X("att")=$S(ROLEID'="":ROLEID,1:"nop")
"RTN","EDPQDBS",70,0)
 . ;S X("att")=$S(ROLE="P":"@md",ROLE="N":"@rn",ROLE="R":"@res",1:"nop")
"RTN","EDPQDBS",71,0)
 . S X("clr")=$P(X0,U,8)
"RTN","EDPQDBS",72,0)
 . S X("val")=$P(X0,U)
"RTN","EDPQDBS",73,0)
 . D XML^EDPX($$XMLA^EDPX("map",.X))
"RTN","EDPQDBS",74,0)
 D XML^EDPX("</colors>")
"RTN","EDPQDBS",75,0)
 Q
"RTN","EDPQLE")
0^30^B43232281^B41785417
"RTN","EDPQLE",1,0)
EDPQLE ;SLC/KCM - Retrieve Log Entry ;2/28/12 08:33am
"RTN","EDPQLE",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPQLE",3,0)
 ;
"RTN","EDPQLE",4,0)
GET(LOG,CHOICES) ; Get a log entry by request
"RTN","EDPQLE",5,0)
 N CURBED,CURVAL,PERSON,CODED,CHTS,CHLOAD,CLINIC
"RTN","EDPQLE",6,0)
 S AREA=$P(^EDP(230,LOG,0),U,3)
"RTN","EDPQLE",7,0)
 S CHTS=$P($G(^EDPB(231.9,AREA,231)),U),CHLOAD=(CHTS'=CHOICES)
"RTN","EDPQLE",8,0)
 N EDPTIME S EDPTIME=$$NOW^XLFDT
"RTN","EDPQLE",9,0)
 N EDPNOVAL S EDPNOVAL=+$O(^EDPB(233.1,"B","edp.reserved.novalue",0))
"RTN","EDPQLE",10,0)
 D LOG(LOG)
"RTN","EDPQLE",11,0)
 D XML^EDPX("<choices ts='"_CHTS_"' >")
"RTN","EDPQLE",12,0)
 D BEDS,PERSONS,CODED,CLINICS
"RTN","EDPQLE",13,0)
 D:CHLOAD CHOICES^EDPQLE1(AREA)
"RTN","EDPQLE",14,0)
 D CLINLST^EDPQLE1($P(^EDP(230,LOG,0),U,14)) ; time-sensitive, get every time
"RTN","EDPQLE",15,0)
 D XML^EDPX("</choices>")
"RTN","EDPQLE",16,0)
 Q
"RTN","EDPQLE",17,0)
LOG(LOG) ; return the log entry as XML
"RTN","EDPQLE",18,0)
 N X,X0,X1,X3
"RTN","EDPQLE",19,0)
 ;
"RTN","EDPQLE",20,0)
 L +^EDP(230,LOG):3
"RTN","EDPQLE",21,0)
 S X0=^EDP(230,LOG,0),X1=$G(^(1)),X3=$G(^(3))
"RTN","EDPQLE",22,0)
 S X("loadTS")=$$NOW^XLFDT
"RTN","EDPQLE",23,0)
 L -^EDP(230,LOG)
"RTN","EDPQLE",24,0)
 ;
"RTN","EDPQLE",25,0)
 ; Set up encounter info into ^TMP if necessary so we can use it later
"RTN","EDPQLE",26,0)
 ;   see if visit present, if diagnosis coded or missing provider
"RTN","EDPQLE",27,0)
 I $P(X0,U,12),($P($G(^EDPB(231.9,AREA,1)),U,2)!('$P(X3,U,5))) D
"RTN","EDPQLE",28,0)
 . K ^TMP("PXKENC",$J)
"RTN","EDPQLE",29,0)
 . D ENCEVENT^PXAPI($P(X0,U,12))
"RTN","EDPQLE",30,0)
 ;
"RTN","EDPQLE",31,0)
 ; Get Provider from PCE if we don't have one
"RTN","EDPQLE",32,0)
 ;    this is commented out for now since we don't have a way to
"RTN","EDPQLE",33,0)
 ;    let the user know the provider was pulled in and needed to be saved
"RTN","EDPQLE",34,0)
 ; I '$P(X3,U,5),$P(X0,U,12) S X("md")=$$PRIMPCE($P(X0,U,12)),PERSON("provider")=X("md")
"RTN","EDPQLE",35,0)
 ;
"RTN","EDPQLE",36,0)
 S X("id")=LOG
"RTN","EDPQLE",37,0)
 S X("site")=$P(X0,U,2)
"RTN","EDPQLE",38,0)
 S X("area")=$P(X0,U,3)
"RTN","EDPQLE",39,0)
 S X("name")=$P(X0,U,4)
"RTN","EDPQLE",40,0)
 S X("dfn")=$P(X0,U,6)
"RTN","EDPQLE",41,0)
 S X("ssn")=$S(X("dfn"):$P(^DPT(X("dfn"),0),U,9),1:"")
"RTN","EDPQLE",42,0)
 S X("dob")=$$DOB(X("dfn"))
"RTN","EDPQLE",43,0)
 S X("closed")=$P(X0,U,7)
"RTN","EDPQLE",44,0)
 S X("inTS")=$P(X0,U,8)
"RTN","EDPQLE",45,0)
 S X("outTS")=$P(X0,U,9)
"RTN","EDPQLE",46,0)
 S X("arrival")=$$CODE($P(X0,U,10)),CODED("arrival")=X("arrival")
"RTN","EDPQLE",47,0)
 S X("visit")=$P(X0,U,12)
"RTN","EDPQLE",48,0)
 S X("clinic")=$P(X0,U,14),CLINIC=X("clinic")
"RTN","EDPQLE",49,0)
 S X("complaint")=$P(X1,U,1)
"RTN","EDPQLE",50,0)
 S X("compLong")=$G(^EDP(230,LOG,2))
"RTN","EDPQLE",51,0)
 S X("status")=$$CODE($P(X3,U,2)),CODED("status")=X("status")
"RTN","EDPQLE",52,0)
 S X("acuity")=$$CODE($P(X3,U,3))
"RTN","EDPQLE",53,0)
 S X("bed")=+$P(X3,U,4)
"RTN","EDPQLE",54,0)
 S X("md")=+$P(X3,U,5),PERSON("provider")=X("md")
"RTN","EDPQLE",55,0)
 S X("nurse")=+$P(X3,U,6),PERSON("nurse")=X("nurse")
"RTN","EDPQLE",56,0)
 S X("res")=+$P(X3,U,7),PERSON("resident")=X("res")
"RTN","EDPQLE",57,0)
 S X("comment")=$P(X3,U,8)
"RTN","EDPQLE",58,0)
 S X("delay")=$$CODE($P(X1,U,5)),CODED("delay")=X("delay")
"RTN","EDPQLE",59,0)
 S X("disposition")=$$CODE($P(X1,U,2)),CODED("disposition")=X("disposition")
"RTN","EDPQLE",60,0)
 S X("required")=$$REQ(.X)
"RTN","EDPQLE",61,0)
 S CURBED=X("bed")_U_$P(X3,U,9)  ; for later use by BEDS
"RTN","EDPQLE",62,0)
 ;
"RTN","EDPQLE",63,0)
 D XML^EDPX("<logEntry>")
"RTN","EDPQLE",64,0)
 D XMLE^EDPX(.X)
"RTN","EDPQLE",65,0)
 ;
"RTN","EDPQLE",66,0)
 ; Get diagnosis from PCE if it is coded entry required AND patient has a VISIT
"RTN","EDPQLE",67,0)
 I $P($G(^EDPB(231.9,AREA,1)),U,2),$P(X0,U,12) D
"RTN","EDPQLE",68,0)
 . D DIAGPCE($P(X0,U,12))
"RTN","EDPQLE",69,0)
 E  D
"RTN","EDPQLE",70,0)
 . D DIAGFREE(LOG)
"RTN","EDPQLE",71,0)
 ;
"RTN","EDPQLE",72,0)
 I X("dfn") D PRF^EDPFPTC(X("dfn"))  ; patient record flags
"RTN","EDPQLE",73,0)
 ;
"RTN","EDPQLE",74,0)
 D XML^EDPX("</logEntry>")
"RTN","EDPQLE",75,0)
 Q
"RTN","EDPQLE",76,0)
PRIMPCE(EDPVISIT) ; return primary provider from PCE
"RTN","EDPQLE",77,0)
 ;for provider
"RTN","EDPQLE",78,0)
 ; LST(n)="PRV"^ien^^^name^primary/secondary flag
"RTN","EDPQLE",79,0)
 N I,X,PRIM
"RTN","EDPQLE",80,0)
 S PRIM=""
"RTN","EDPQLE",81,0)
 S I=0 F  S I=$O(^TMP("PXKENC",$J,EDPVISIT,"PRV",I)) Q:'I  D  Q:PRIM
"RTN","EDPQLE",82,0)
 . S X=^TMP("PXKENC",$J,EDPVISIT,"PRV",I,0)
"RTN","EDPQLE",83,0)
 . Q:$P(X,U,4)'="P"
"RTN","EDPQLE",84,0)
 . S PRIM=$P(X,U)
"RTN","EDPQLE",85,0)
 Q:'PRIM ""
"RTN","EDPQLE",86,0)
 Q:'$D(^XUSEC("PROVIDER",PRIM)) ""
"RTN","EDPQLE",87,0)
 Q:'$$ALLOW^EDPFPER(PRIM,"P") ""
"RTN","EDPQLE",88,0)
 Q PRIM
"RTN","EDPQLE",89,0)
 ;
"RTN","EDPQLE",90,0)
DIAGPCE(EDPVISIT) ; add PCE diagnoses
"RTN","EDPQLE",91,0)
 Q:'EDPVISIT
"RTN","EDPQLE",92,0)
 N I,X,CODE
"RTN","EDPQLE",93,0)
 S I=0 F  S I=$O(^TMP("PXKENC",$J,EDPVISIT,"POV",I)) Q:'I  D
"RTN","EDPQLE",94,0)
 . K X S X=^TMP("PXKENC",$J,EDPVISIT,"POV",I,0)
"RTN","EDPQLE",95,0)
 . S X("type")="POV"
"RTN","EDPQLE",96,0)
 . S CODE=$P(X,U) S:CODE CODE=$P(^ICD9(CODE,0),U)
"RTN","EDPQLE",97,0)
 . S X("code")=$P(^ICD9($P(X,U),0),U)
"RTN","EDPQLE",98,0)
 . S X("label")=^AUTNPOV($P(X,U,4),0)
"RTN","EDPQLE",99,0)
 . S X("primary")=($P(X,U,12)="P")
"RTN","EDPQLE",100,0)
 . D XML^EDPX($$XMLA^EDPX("diagnosis",.X))
"RTN","EDPQLE",101,0)
 S I=0 F  S I=$O(^TMP("PXKENC",$J,EDPVISIT,"CPT",I)) Q:'I  D
"RTN","EDPQLE",102,0)
 . K X S X=^TMP("PXKENC",$J,EDPVISIT,"CPT",I,0)
"RTN","EDPQLE",103,0)
 . S X("type")="CPT"
"RTN","EDPQLE",104,0)
 . S CODE=$O(^ICPT("B",$P(X,U),0)) S:CODE CODE=$P(^ICPT(CODE,0),U)
"RTN","EDPQLE",105,0)
 . S X("code")=CODE
"RTN","EDPQLE",106,0)
 . S X("label")=^AUTNPOV($P(X,U,4),0)
"RTN","EDPQLE",107,0)
 . S X("quantity")=$P(X,U,16)
"RTN","EDPQLE",108,0)
 . D XML^EDPX($$XMLA^EDPX("proc",.X))
"RTN","EDPQLE",109,0)
 Q
"RTN","EDPQLE",110,0)
DIAGFREE(LOG) ; add free text diagnoses
"RTN","EDPQLE",111,0)
 N DIAG,CODE,LABEL,X4
"RTN","EDPQLE",112,0)
 S DIAG=0 F  S DIAG=$O(^EDP(230,LOG,4,DIAG)) Q:'DIAG  D
"RTN","EDPQLE",113,0)
 . S X4=^EDP(230,LOG,4,DIAG,0)
"RTN","EDPQLE",114,0)
 . S X4("type")="POV"
"RTN","EDPQLE",115,0)
 . S CODE=$P(X4,U,2) S:CODE CODE=$P(^ICD9(CODE,0),U)
"RTN","EDPQLE",116,0)
 . S X4("code")=CODE
"RTN","EDPQLE",117,0)
 . S X4("label")=$P(X4,U,1)
"RTN","EDPQLE",118,0)
 . S X4("primary")=+$P(X4,U,3)
"RTN","EDPQLE",119,0)
 . D XML^EDPX($$XMLA^EDPX("diagnosis",.X4))
"RTN","EDPQLE",120,0)
 Q
"RTN","EDPQLE",121,0)
DOB(DFN) ; Return date of birth (external)
"RTN","EDPQLE",122,0)
 I 'DFN Q ""
"RTN","EDPQLE",123,0)
 N VA,VADM,X,Y
"RTN","EDPQLE",124,0)
 D DEM^VADPT
"RTN","EDPQLE",125,0)
 Q $P(VADM(3),U,2)_"   Age "_VADM(4)
"RTN","EDPQLE",126,0)
 ;
"RTN","EDPQLE",127,0)
CODE(IEN) ; set NOVAL code to 0 when returning code
"RTN","EDPQLE",128,0)
 Q:IEN=EDPNOVAL 0
"RTN","EDPQLE",129,0)
 Q +IEN
"RTN","EDPQLE",130,0)
 ;
"RTN","EDPQLE",131,0)
BEDS ; add a list of available room/beds for this area
"RTN","EDPQLE",132,0)
 D XML^EDPX("<bedList>")
"RTN","EDPQLE",133,0)
 D XML^EDPX($$XMLS^EDPX("bed",0,"None"))   ;non-selected
"RTN","EDPQLE",134,0)
 N BED,X0,MULTI,SEQ,OCCUPIED,MYBED
"RTN","EDPQLE",135,0)
 S BED=0 F  S BED=$O(^EDPB(231.8,"C",EDPSITE,AREA,BED)) Q:'BED  D
"RTN","EDPQLE",136,0)
 . S SEQ=$P(^EDPB(231.8,BED,0),U,5) S:'SEQ SEQ=99999
"RTN","EDPQLE",137,0)
 . ; PATCH 6 (BWF - 4/24/2013) - Additional filter for EDIS_DEFAULT
"RTN","EDPQLE",138,0)
 . I $$GET1^DIQ(231.8,BED,.01,"E")="EDIS_DEFAULT" Q
"RTN","EDPQLE",139,0)
 . S SEQ(SEQ,BED)=""
"RTN","EDPQLE",140,0)
 S SEQ=0 F  S SEQ=$O(SEQ(SEQ)) Q:'SEQ  D
"RTN","EDPQLE",141,0)
 . S BED=0 F  S BED=$O(SEQ(SEQ,BED)) Q:'BED  D
"RTN","EDPQLE",142,0)
 .. S X0=^EDPB(231.8,BED,0)
"RTN","EDPQLE",143,0)
 .. ; QUIT if inactive bed
"RTN","EDPQLE",144,0)
 .. I $P(X0,U,4) Q
"RTN","EDPQLE",145,0)
 .. ; QUIT if occupied, unless own bed or multi-assign
"RTN","EDPQLE",146,0)
 .. S MULTI=+$P(X0,U,9) S:MULTI=3 MULTI=0 ; single non-ed
"RTN","EDPQLE",147,0)
 .. S OCCUPIED=$D(^EDP(230,"AL",EDPSITE,AREA,BED))!$D(^EDP(230,"AH",EDPSITE,AREA,BED))
"RTN","EDPQLE",148,0)
 .. S MYBED=(BED=+CURBED)!(BED=$P(CURBED,U,2))
"RTN","EDPQLE",149,0)
 .. I OCCUPIED,'MYBED,'MULTI Q
"RTN","EDPQLE",150,0)
 .. ;
"RTN","EDPQLE",151,0)
 .. S X("data")=BED
"RTN","EDPQLE",152,0)
 .. S X("label")=$P(X0,U,6)_"  ("_$P(X0,U)_")"
"RTN","EDPQLE",153,0)
 .. S X("ref")=$P(X0,U,8)
"RTN","EDPQLE",154,0)
 .. D XML^EDPX($$XMLA^EDPX("bed",.X))
"RTN","EDPQLE",155,0)
 D XML^EDPX("</bedList>")
"RTN","EDPQLE",156,0)
 Q
"RTN","EDPQLE",157,0)
PERSONS ; add the internal/external values for persons
"RTN","EDPQLE",158,0)
 N ROLE,NAME,LOCID,IEN,X
"RTN","EDPQLE",159,0)
 D XML^EDPX("<persons>")
"RTN","EDPQLE",160,0)
 F ROLE="provider","nurse","resident" S LOCID=$G(PERSON(ROLE)) D
"RTN","EDPQLE",161,0)
 . Q:'LOCID
"RTN","EDPQLE",162,0)
 . S NAME=$P(^VA(200,LOCID,0),U)
"RTN","EDPQLE",163,0)
 . S X("data")=LOCID,X("label")=NAME
"RTN","EDPQLE",164,0)
 . D XML^EDPX($$XMLA^EDPX(ROLE,.X))
"RTN","EDPQLE",165,0)
 D XML^EDPX("</persons>")
"RTN","EDPQLE",166,0)
 Q
"RTN","EDPQLE",167,0)
CODED ; add internal/external values for codes
"RTN","EDPQLE",168,0)
 N NAME,X
"RTN","EDPQLE",169,0)
 D XML^EDPX("<selected>")
"RTN","EDPQLE",170,0)
 S X="" F  S X=$O(CODED(X)) Q:X=""  I CODED(X) D
"RTN","EDPQLE",171,0)
 . S NAME=$P($G(^EDPB(233.1,CODED(X),0)),U,2) Q:NAME=""
"RTN","EDPQLE",172,0)
 . D XML^EDPX($$XMLS^EDPX(X,CODED(X),NAME))
"RTN","EDPQLE",173,0)
 D XML^EDPX("</selected>")
"RTN","EDPQLE",174,0)
 Q
"RTN","EDPQLE",175,0)
CLINICS ; add internal/external values for clinic
"RTN","EDPQLE",176,0)
 Q:'CLINIC
"RTN","EDPQLE",177,0)
 N NAME,X
"RTN","EDPQLE",178,0)
 D XML^EDPX("<clinics>")
"RTN","EDPQLE",179,0)
 S NAME=$P($G(^SC(CLINIC,0)),U)
"RTN","EDPQLE",180,0)
 S X("data")=CLINIC,X("label")=NAME
"RTN","EDPQLE",181,0)
 D XML^EDPX($$XMLA^EDPX("clinic",.X))
"RTN","EDPQLE",182,0)
 D XML^EDPX("</clinics>")
"RTN","EDPQLE",183,0)
 Q
"RTN","EDPQLE",184,0)
REQ(VAL) ; return the fields required to close this entry
"RTN","EDPQLE",185,0)
 ; called from LOG, AREA is assumed to be defined
"RTN","EDPQLE",186,0)
 N NEED,PARAM
"RTN","EDPQLE",187,0)
 S PARAM=$G(^EDPB(231.9,AREA,1)),NEED=""
"RTN","EDPQLE",188,0)
 I $P(PARAM,U,1) S $P(NEED,",",1)="diag"
"RTN","EDPQLE",189,0)
 I $P(PARAM,U,3) S $P(NEED,",",2)="disp"
"RTN","EDPQLE",190,0)
 ; bwf - 4/26/13 - per Dr. Gelman, want delay reason no matter whether patient is in observation or not.
"RTN","EDPQLE",191,0)
 ;               - replaced line below with one that follows
"RTN","EDPQLE",192,0)
 ;I $$DLYREQ,$$NOTOBS,$$EXCEED S $P(NEED,",",3)="delay"
"RTN","EDPQLE",193,0)
 I $$DLYREQ,$$EXCEED S $P(NEED,",",3)="delay"
"RTN","EDPQLE",194,0)
 Q NEED
"RTN","EDPQLE",195,0)
 ;
"RTN","EDPQLE",196,0)
DLYREQ() ; return true if delay params set to required
"RTN","EDPQLE",197,0)
 ; called from REQ, PARAM is assumed to be defined
"RTN","EDPQLE",198,0)
 Q $P(PARAM,U,4)&$P(PARAM,U,5)
"RTN","EDPQLE",199,0)
 ;
"RTN","EDPQLE",200,0)
NOTOBS() ; return true if not in observation status
"RTN","EDPQLE",201,0)
 ; called from REQ, VAL is assumed to be defined
"RTN","EDPQLE",202,0)
 N STS S STS=+$G(VAL("status"))
"RTN","EDPQLE",203,0)
 Q:'STS 1
"RTN","EDPQLE",204,0)
 Q:$P(^EDPB(233.1,STS,0),U,5)["O" 0
"RTN","EDPQLE",205,0)
 Q 1
"RTN","EDPQLE",206,0)
 ;
"RTN","EDPQLE",207,0)
EXCEED() ; return true if delay time exceeded
"RTN","EDPQLE",208,0)
 ; called from REQ, VAL and PARAM are assumed to be defined
"RTN","EDPQLE",209,0)
 N IN S IN=$G(VAL("inTS"))
"RTN","EDPQLE",210,0)
 N OUT S OUT=$G(VAL("outTS")) S:'OUT OUT=EDPTIME
"RTN","EDPQLE",211,0)
 N MAX S MAX=$P(PARAM,U,5)
"RTN","EDPQLE",212,0)
 Q ($$FMDIFF^XLFDT(OUT,IN,2)\60)>MAX
"RTN","EDPQLE1")
0^31^B11912520^B10666213
"RTN","EDPQLE1",1,0)
EDPQLE1 ;SLC/KCM - Retrive Log Entry - Supporting Info ;2/28/12 08:33am
"RTN","EDPQLE1",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPQLE1",3,0)
 ;
"RTN","EDPQLE1",4,0)
CHOICES(AREA) ; Add choice lists for editing log entry to XML
"RTN","EDPQLE1",5,0)
 ; called from EDPQLE
"RTN","EDPQLE1",6,0)
 ;
"RTN","EDPQLE1",7,0)
 N ROLIEN,RNAME,RABBR,RXML,R0
"RTN","EDPQLE1",8,0)
 S ROLEIEN=0 F  S ROLEIEN=$O(^EDPB(232.5,ROLEIEN)) Q:'ROLEIEN  D
"RTN","EDPQLE1",9,0)
 .S R0=$G(^EDPB(232.5,ROLEIEN,0)),RNAME=$P(R0,U),RABBR=$P(R0,U,2),RXML=$P(R0,U,3)
"RTN","EDPQLE1",10,0)
 .D STAFF($S(RXML="@rn":"nurse",1:$P(RXML,"@",2)),ROLEIEN,RABBR)
"RTN","EDPQLE1",11,0)
 ;D STAFF("md","P")
"RTN","EDPQLE1",12,0)
 ;D STAFF("res","R")
"RTN","EDPQLE1",13,0)
 ;D STAFF("nurse","N")
"RTN","EDPQLE1",14,0)
 ;
"RTN","EDPQLE1",15,0)
 D CODES("arrival","arrival")
"RTN","EDPQLE1",16,0)
 D CODES("acuity","acuity")
"RTN","EDPQLE1",17,0)
 D CODES("status","status")
"RTN","EDPQLE1",18,0)
 D CODES("disposition","disposition")
"RTN","EDPQLE1",19,0)
 D CODES("delay","delay")
"RTN","EDPQLE1",20,0)
 Q
"RTN","EDPQLE1",21,0)
STAFF(LABEL,ROLEIEN,RABBR) ; add staff for this area to XML
"RTN","EDPQLE1",22,0)
 N IEN,X0,NM,PER,ALPHA,EDPNURS,ROW
"RTN","EDPQLE1",23,0)
 I RABBR="N" S EDPNURS=$$GET^XPAR("ALL","EDPF NURSE STAFF SCREEN")
"RTN","EDPQLE1",24,0)
 D XML^EDPX("<"_LABEL_"List>")
"RTN","EDPQLE1",25,0)
 D XML^EDPX($$XMLS^EDPX(LABEL,0,"None"))   ;non-selected (-1 will delete)
"RTN","EDPQLE1",26,0)
 S IEN=0 F  S IEN=$O(^EDPB(231.7,"AC",EDPSITE,AREA,ROLEIEN,IEN)) Q:'IEN  D
"RTN","EDPQLE1",27,0)
 . S X0=^EDPB(231.7,IEN,0),PER=$P(X0,U)
"RTN","EDPQLE1",28,0)
 . I '$$ALLOW^EDPFPER(PER,RABBR) Q
"RTN","EDPQLE1",29,0)
 . S ALPHA($P(^VA(200,PER,0),U),PER)=$P(^VA(200,PER,0),U,2)
"RTN","EDPQLE1",30,0)
 S NM="" F  S NM=$O(ALPHA(NM)) Q:NM=""  D
"RTN","EDPQLE1",31,0)
 . S PER=0 F  S PER=$O(ALPHA(NM,PER)) Q:'PER  D
"RTN","EDPQLE1",32,0)
 . . K ROW S ROW("data")=PER,ROW("label")=NM
"RTN","EDPQLE1",33,0)
 . . S ROW("initials")=ALPHA(NM,PER)
"RTN","EDPQLE1",34,0)
 . . D XML^EDPX($$XMLA^EDPX(LABEL,.ROW))
"RTN","EDPQLE1",35,0)
 . . ;D XML^EDPX($$XMLS^EDPX(LABEL,PER,NM))
"RTN","EDPQLE1",36,0)
 D XML^EDPX("</"_LABEL_"List>")
"RTN","EDPQLE1",37,0)
 Q
"RTN","EDPQLE1",38,0)
CODES(LABEL,SETNM) ; build nodes for set of codes
"RTN","EDPQLE1",39,0)
 D XML^EDPX("<"_LABEL_"List>")
"RTN","EDPQLE1",40,0)
 I "^arrival^acuity^status^disposition^delay^"[(U_LABEL_U) D
"RTN","EDPQLE1",41,0)
 . ;N NOVAL S NOVAL=+$O(^EDPB(233.1,"B","edp.reserved.novalue",0))
"RTN","EDPQLE1",42,0)
 . ;D XML^EDPX($$XMLS^EDPX(LABEL,NOVAL,"Not Set"))   ; non-selected value
"RTN","EDPQLE1",43,0)
 . D XML^EDPX($$XMLS^EDPX(LABEL,0,"Not Set"))   ; non-selected value ;
"RTN","EDPQLE1",44,0)
 I $D(^EDPB(233.2,"B",EDPSTA_"."_SETNM)) S SETNM=EDPSTA_"."_SETNM I 1
"RTN","EDPQLE1",45,0)
 E  S SETNM="edp."_SETNM
"RTN","EDPQLE1",46,0)
 ;
"RTN","EDPQLE1",47,0)
 N SET,SEQ,I,X0,IEN,SHOW
"RTN","EDPQLE1",48,0)
 S SET=$O(^EDPB(233.2,"B",SETNM,0))
"RTN","EDPQLE1",49,0)
 S SEQ=0 F  S SEQ=$O(^EDPB(233.2,SET,1,"B",SEQ)) Q:'SEQ  D
"RTN","EDPQLE1",50,0)
 . S I=0 F  S I=$O(^EDPB(233.2,SET,1,"B",SEQ,I)) Q:'I  D
"RTN","EDPQLE1",51,0)
 . . S X0=^EDPB(233.2,SET,1,I,0)
"RTN","EDPQLE1",52,0)
 . . Q:$P(X0,U,3)  ; inactive
"RTN","EDPQLE1",53,0)
 . . S IEN=$P(X0,U,2)
"RTN","EDPQLE1",54,0)
 . . S SHOW=$P(X0,U,4)
"RTN","EDPQLE1",55,0)
 . . I SHOW="" S SHOW=$P(^EDPB(233.1,IEN,0),U,2)
"RTN","EDPQLE1",56,0)
 . . D XML^EDPX($$XMLS^EDPX(LABEL,IEN,SHOW))
"RTN","EDPQLE1",57,0)
 ;
"RTN","EDPQLE1",58,0)
 D XML^EDPX("</"_LABEL_"List>")
"RTN","EDPQLE1",59,0)
 Q
"RTN","EDPQLE1",60,0)
CLINLST(USEALL) ; build nodes for selectable clinics
"RTN","EDPQLE1",61,0)
 N EDPLST,INSTANCE,IEN,NAME,LST,CURTM
"RTN","EDPQLE1",62,0)
 D GETLST^XPAR(.EDPLST,EDPSITE_";DIC(4,","EDPF LOCATION","N")
"RTN","EDPQLE1",63,0)
 S CURTM=$E($P($$NOW^XLFDT,".",2)_"0000",1,4)
"RTN","EDPQLE1",64,0)
 S INSTANCE="" F  S INSTANCE=$O(EDPLST(INSTANCE)) Q:INSTANCE=""  D
"RTN","EDPQLE1",65,0)
 . S IEN=+EDPLST(INSTANCE),NAME=$P(EDPLST(INSTANCE),U,2)
"RTN","EDPQLE1",66,0)
 . I 'USEALL,$$OUTSIDE(CURTM,INSTANCE) Q  ; outside time range, get next
"RTN","EDPQLE1",67,0)
 . S LST(NAME)=IEN
"RTN","EDPQLE1",68,0)
 ;
"RTN","EDPQLE1",69,0)
 D XML^EDPX("<clinicList>")
"RTN","EDPQLE1",70,0)
 D XML^EDPX($$XMLS^EDPX("clinic",0,"None"))   ;non-selected (-1 will delete)
"RTN","EDPQLE1",71,0)
 S NAME="" F  S NAME=$O(LST(NAME)) Q:NAME=""  D
"RTN","EDPQLE1",72,0)
 . D XML^EDPX($$XMLS^EDPX("clinic",LST(NAME),NAME))
"RTN","EDPQLE1",73,0)
 D XML^EDPX("</clinicList>")
"RTN","EDPQLE1",74,0)
 Q
"RTN","EDPQLE1",75,0)
OUTSIDE(TM,RNG) ; return true if the time is OUTSIDE of the range
"RTN","EDPQLE1",76,0)
 N BEG,END
"RTN","EDPQLE1",77,0)
 I RNG'["-" Q 0
"RTN","EDPQLE1",78,0)
 ;
"RTN","EDPQLE1",79,0)
 S BEG=+$P(RNG,"-"),END=+$P(RNG,"-",2)
"RTN","EDPQLE1",80,0)
 I (TM<BEG)!(TM>END) Q 1
"RTN","EDPQLE1",81,0)
 Q 0
"RTN","EDPQPCE")
0^13^B3317665^B2442064
"RTN","EDPQPCE",1,0)
EDPQPCE ;SLC/KCM - Retrieve PCE information for ED Visits ;2/28/12 08:33am
"RTN","EDPQPCE",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPQPCE",3,0)
 ;
"RTN","EDPQPCE",4,0)
DXPRI(AREA,LOG) ; return primary diagnosis
"RTN","EDPQPCE",5,0)
 N DXLST
"RTN","EDPQPCE",6,0)
 D DXALL(AREA,LOG,.DXLST)
"RTN","EDPQPCE",7,0)
 Q $G(DXLST(1)) ;$P( ,U,2)
"RTN","EDPQPCE",8,0)
 ;
"RTN","EDPQPCE",9,0)
DXALL(AREA,LOG,DXLST) ; build list of diagnoses for a visit
"RTN","EDPQPCE",10,0)
 N EDPVISIT S EDPVISIT=$P(^EDP(230,LOG,0),U,12)
"RTN","EDPQPCE",11,0)
 I EDPVISIT,$P($G(^EDPB(231.9,AREA,1)),U,2) D DXPCE(EDPVISIT,.DXLST) I 1
"RTN","EDPQPCE",12,0)
 E  D DXFREE(LOG,.DXLST)
"RTN","EDPQPCE",13,0)
 Q
"RTN","EDPQPCE",14,0)
DXPCE(EDPVISIT,DXLST) ; return a list of diagnoses from PCE
"RTN","EDPQPCE",15,0)
 N I,X,CODE,NAME,DX
"RTN","EDPQPCE",16,0)
 K ^TMP("PXKENC",$J)
"RTN","EDPQPCE",17,0)
 D ENCEVENT^PXAPI(EDPVISIT)
"RTN","EDPQPCE",18,0)
 S I=0,DX=0 F  S I=$O(^TMP("PXKENC",$J,EDPVISIT,"POV",I)) Q:'I  D
"RTN","EDPQPCE",19,0)
 . S X=^TMP("PXKENC",$J,EDPVISIT,"POV",I,0)
"RTN","EDPQPCE",20,0)
 . S CODE=$P(^ICD9($P(X,U),0),U)
"RTN","EDPQPCE",21,0)
 . S NAME=^AUTNPOV($P(X,U,4),0)
"RTN","EDPQPCE",22,0)
 . S DX=DX+1,DX($S($P(X,U,12)="P":DX,1:DX*10000))=CODE_U_NAME
"RTN","EDPQPCE",23,0)
 S X="",DXLST=DX F I=1:1 S X=$O(DX(X)) Q:X=""  S DXLST(I)=DX(X)
"RTN","EDPQPCE",24,0)
 Q
"RTN","EDPQPCE",25,0)
DXFREE(LOG,DXLST) ; return free text diagnoses from ED LOG file
"RTN","EDPQPCE",26,0)
 N I,CODE,NAME,X4,DX
"RTN","EDPQPCE",27,0)
 S I=0,DX=0 F  S I=$O(^EDP(230,LOG,4,I)) Q:'I  D
"RTN","EDPQPCE",28,0)
 . S X4=^EDP(230,LOG,4,I,0)
"RTN","EDPQPCE",29,0)
 . S CODE=$P(X4,U,2) S:CODE CODE=$P(^ICD9(CODE,0),U)
"RTN","EDPQPCE",30,0)
 . S NAME=$P(X4,U,1)
"RTN","EDPQPCE",31,0)
 . S DX=DX+1,DX($S(+$P(X4,U,3):DX,1:DX*10000))=CODE_U_NAME
"RTN","EDPQPCE",32,0)
 S X="",DXLST=DX F I=1:1 S X=$O(DX(X)) Q:X=""  S DXLST(I)=DX(X)
"RTN","EDPQPCE",33,0)
 Q
"RTN","EDPQPCE",34,0)
DXFREE2(LOG,DXLST) ; return ONLY the free text diagnosis
"RTN","EDPQPCE",35,0)
 N I,CODE,NAME,X4,DX
"RTN","EDPQPCE",36,0)
 S I=0,DX=0 F  S I=$O(^EDP(230,LOG,4,I)) Q:'I  D
"RTN","EDPQPCE",37,0)
 . S X4=^EDP(230,LOG,4,I,0)
"RTN","EDPQPCE",38,0)
 . S NAME=$P(X4,U,1)
"RTN","EDPQPCE",39,0)
 . S DX=DX+1,DX($S(+$P(X4,U,3):DX,1:DX*10000))=NAME
"RTN","EDPQPCE",40,0)
 S X="",DXLST=DX F I=1:1 S X=$O(DX(X)) Q:X=""  S DXLST(I)=DX(X)
"RTN","EDPQPCE",41,0)
 Q
"RTN","EDPQPPS")
0^3^B4046541^B3126500
"RTN","EDPQPPS",1,0)
EDPQPPS ;SLC/KCM - Display Board Specs ;2/28/12 08:33am
"RTN","EDPQPPS",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPQPPS",3,0)
 ;
"RTN","EDPQPPS",4,0)
GET(AREA,BOARD) ; Get Display Board Specs
"RTN","EDPQPPS",5,0)
 ;N I S I=0
"RTN","EDPQPPS",6,0)
 ;F  S I=$O(^EDPB(231.9,AREA,2,I)) Q:'I  D XML^EDPX(^EDPB(231.9,AREA,2,I,0))
"RTN","EDPQPPS",7,0)
 N ROLEIEN,R0,RNAME,RABBR,RXML
"RTN","EDPQPPS",8,0)
 I '$L($G(BOARD)) S BOARD="Main (default)"
"RTN","EDPQPPS",9,0)
 S BOARD=$O(^EDPB(231.9,AREA,4,"B",BOARD,0))
"RTN","EDPQPPS",10,0)
 D LOADBRD^EDPBCF(AREA,BOARD)
"RTN","EDPQPPS",11,0)
 ;
"RTN","EDPQPPS",12,0)
 D XML^EDPX("<colorSpec>")
"RTN","EDPQPPS",13,0)
 D CLRBED(AREA)
"RTN","EDPQPPS",14,0)
 ;D CLRSTAFF(AREA,"md","P")
"RTN","EDPQPPS",15,0)
 ;D CLRSTAFF(AREA,"res","R")
"RTN","EDPQPPS",16,0)
 ;D CLRSTAFF(AREA,"rn","N")
"RTN","EDPQPPS",17,0)
 S ROLEIEN=0 F  S ROLEIEN=$O(^EDPB(232.5,ROLEIEN)) Q:'ROLEIEN  D
"RTN","EDPQPPS",18,0)
 .S R0=$G(^EDPB(232.5,ROLEIEN,0)),RNAME=$P(R0,U),RABBR=$P(R0,U,2),RXML=$P(R0,U,3)
"RTN","EDPQPPS",19,0)
 .D CLRSTAFF(AREA,RXML,ROLEIEN)
"RTN","EDPQPPS",20,0)
 N I S I=0
"RTN","EDPQPPS",21,0)
 F  S I=$O(^EDPB(231.9,AREA,3,I)) Q:'I  D XML^EDPX(^EDPB(231.9,AREA,3,I,0))
"RTN","EDPQPPS",22,0)
 D XML^EDPX("</colorSpec>")
"RTN","EDPQPPS",23,0)
 Q
"RTN","EDPQPPS",24,0)
CLRBED(AREA) ; add bed colors
"RTN","EDPQPPS",25,0)
 D XML^EDPX("<colors id='bed' type='bed' >")
"RTN","EDPQPPS",26,0)
 N BED,X0
"RTN","EDPQPPS",27,0)
 S BED=0 F  S BED=$O(^EDPB(231.8,"C",EDPSITE,AREA,BED)) Q:'BED  D
"RTN","EDPQPPS",28,0)
 . S X0=^EDPB(231.8,BED,0)
"RTN","EDPQPPS",29,0)
 . I $P(X0,U,12)="" Q
"RTN","EDPQPPS",30,0)
 . N X
"RTN","EDPQPPS",31,0)
 . S X("att")="@bed"
"RTN","EDPQPPS",32,0)
 . S X("clr")=$P(X0,U,12)
"RTN","EDPQPPS",33,0)
 . S X("val")=BED
"RTN","EDPQPPS",34,0)
 . D XML^EDPX($$XMLA^EDPX("map",.X))
"RTN","EDPQPPS",35,0)
 D XML^EDPX("</colors>")
"RTN","EDPQPPS",36,0)
 Q
"RTN","EDPQPPS",37,0)
CLRSTAFF(AREA,ROLEID,ROLEIEN) ; add staff colors
"RTN","EDPQPPS",38,0)
 D XML^EDPX("<colors id='"_ROLEID_"' type='staff' >")
"RTN","EDPQPPS",39,0)
 N IEN,X0
"RTN","EDPQPPS",40,0)
 S IEN="" F  S IEN=$O(^EDPB(231.7,"AC",EDPSITE,AREA,ROLEIEN,IEN)) Q:'IEN  D
"RTN","EDPQPPS",41,0)
 . S X0=^EDPB(231.7,IEN,0) Q:'$P(X0,U,8)
"RTN","EDPQPPS",42,0)
 . N X
"RTN","EDPQPPS",43,0)
 . S X("att")=$S(ROLEID'="":ROLEID,1:"nop")
"RTN","EDPQPPS",44,0)
 . ;S X("att")=$S(ROLE="P":"@md",ROLE="N":"@rn",ROLE="R":"@res",1:"nop")
"RTN","EDPQPPS",45,0)
 . S X("clr")=$P(X0,U,8)
"RTN","EDPQPPS",46,0)
 . S X("val")=$P(X0,U)
"RTN","EDPQPPS",47,0)
 . D XML^EDPX($$XMLA^EDPX("map",.X))
"RTN","EDPQPPS",48,0)
 D XML^EDPX("</colors>")
"RTN","EDPQPPS",49,0)
 Q
"RTN","EDPRPT1")
0^18^B50357723^B44256046
"RTN","EDPRPT1",1,0)
EDPRPT1 ;SLC/MKB - Activity Report ;4/25/13 3:15pm
"RTN","EDPRPT1",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPRPT1",3,0)
 ;
"RTN","EDPRPT1",4,0)
ACT(BEG,END,CSV) ; Get Activity Report for EDPSITE by date range
"RTN","EDPRPT1",5,0)
 N LOG,X,X0,X1,X3,DX,IN,OUT,ROW,PROV,I,CUTOFF
"RTN","EDPRPT1",6,0)
 N ELAPSE,TRIAGE,WAIT,ADMDEC,ADMDEL,ALL,ADM,NOT,DISP
"RTN","EDPRPT1",7,0)
 D INIT ;set counters, sums to 0
"RTN","EDPRPT1",8,0)
 D:'$G(CSV) XML^EDPX("<logEntries>") I $G(CSV) D  ;headers
"RTN","EDPRPT1",9,0)
 . N TAB S TAB=$C(9)
"RTN","EDPRPT1",10,0)
 . ;***pij 4/19/2013 changed ED to IEN
"RTN","EDPRPT1",11,0)
 . ;S X="ED"_TAB_"Time In"_TAB_"Time Out"_TAB_"Complaint"_TAB_"MD"_TAB_"Acuity"_TAB_"Elapsed"_TAB_"Triage"_TAB_"Wait"_TAB_"Dispo"_TAB_"Adm Dec"_TAB_"Adm Delay"_TAB_"Diagnosis"_TAB_"ICD9"
"RTN","EDPRPT1",12,0)
 . S X="IEN"_TAB_"Time In"_TAB_"Time Out"_TAB_"Complaint"_TAB_"MD"_TAB_"Acuity"_TAB_"Elapsed"_TAB_"Triage"_TAB_"Wait"_TAB_"Dispo"_TAB_"Adm Dec"_TAB_"Adm Delay"_TAB_"Diagnosis"_TAB_"ICD9"
"RTN","EDPRPT1",13,0)
 . ;***
"RTN","EDPRPT1",14,0)
 . D ADD^EDPCSV(X)
"RTN","EDPRPT1",15,0)
 S IN=BEG-.000001
"RTN","EDPRPT1",16,0)
LOOP F  S IN=$O(^EDP(230,"ATI",EDPSITE,IN)) Q:'IN  Q:IN>END  D  I '$D(ZTQUEUED),$$LONG D ZTSAVE Q
"RTN","EDPRPT1",17,0)
 . S LOG=0 F  S LOG=+$O(^EDP(230,"ATI",EDPSITE,IN,LOG)) Q:LOG<1  D
"RTN","EDPRPT1",18,0)
 .. S X0=^EDP(230,LOG,0),X1=$G(^(1)),X3=$G(^(3))
"RTN","EDPRPT1",19,0)
 .. S OUT=$P(X0,U,9),DX=$$DXPRI^EDPQPCE(+$P(X0,U,3),LOG)
"RTN","EDPRPT1",20,0)
 .. K ROW S ROW("id")=LOG,ALL=ALL+1
"RTN","EDPRPT1",21,0)
 .. S ROW("inTS")=$S($G(CSV):$$EDATE^EDPRPT(IN),1:IN)
"RTN","EDPRPT1",22,0)
 .. S ROW("outTS")=$S($G(CSV):$$EDATE^EDPRPT(OUT),1:OUT)
"RTN","EDPRPT1",23,0)
 .. S ROW("complaint")=$P(X1,U)
"RTN","EDPRPT1",24,0)
 .. S DISP=$$ECODE^EDPRPT($P(X1,U,2))
"RTN","EDPRPT1",25,0)
 .. ;TDP - Patch 2 mod to catch all dispositions
"RTN","EDPRPT1",26,0)
 .. I DISP="" S DISP=$$DISP^EDPRPT($P(X1,U,2))
"RTN","EDPRPT1",27,0)
 .. S ROW("disposition")=DISP
"RTN","EDPRPT1",28,0)
 .. S ROW("arrival")=$$ENAME^EDPRPT($P(X1,U,10))
"RTN","EDPRPT1",29,0)
 .. S ROW("acuity")=$$ECODE^EDPRPT($P(X3,U,3))
"RTN","EDPRPT1",30,0)
 .. S ROW("md")=$$EPERS^EDPRPT($P(X3,U,5))
"RTN","EDPRPT1",31,0)
 .. S:$P(X3,U,5) PROV(+$P(X3,U,5))=""
"RTN","EDPRPT1",32,0)
 .. S ROW("icd")=$P(DX,U),ROW("dx")=$P(DX,U,2)
"RTN","EDPRPT1",33,0)
 .. S:'$L(DISP) DISP="none" S DISP(DISP)=DISP(DISP)+1
"RTN","EDPRPT1",34,0)
 .. ;
"RTN","EDPRPT1",35,0)
A1 .. ; calculate times
"RTN","EDPRPT1",36,0)
 .. ; S:OUT="" OUT=NOW ;for calculations
"RTN","EDPRPT1",37,0)
 .. S ELAPSE=$S(OUT:($$FMDIFF^XLFDT(OUT,IN,2)\60),1:0)
"RTN","EDPRPT1",38,0)
 .. S ROW("elapsed")=ELAPSE_$S(ELAPSE>359:" *",1:"")
"RTN","EDPRPT1",39,0)
 .. S ALL("elapsed")=ALL("elapsed")+ELAPSE
"RTN","EDPRPT1",40,0)
 .. S DISP(DISP,"elapsed")=DISP(DISP,"elapsed")+ELAPSE
"RTN","EDPRPT1",41,0)
 .. ;
"RTN","EDPRPT1",42,0)
 .. S X=$$ACUITY^EDPRPT(LOG),TRIAGE=0 ;S:X<1 X=OUT
"RTN","EDPRPT1",43,0)
 .. S:X TRIAGE=($$FMDIFF^XLFDT(X,IN,2)\60)
"RTN","EDPRPT1",44,0)
 .. S ROW("triage")=TRIAGE,ALL("triage")=ALL("triage")+TRIAGE
"RTN","EDPRPT1",45,0)
 .. S DISP(DISP,"triage")=DISP(DISP,"triage")+TRIAGE
"RTN","EDPRPT1",46,0)
 .. ;
"RTN","EDPRPT1",47,0)
 .. S X=$$LVWAITRM^EDPRPT(LOG),WAIT=0
"RTN","EDPRPT1",48,0)
 .. S:X WAIT=($$FMDIFF^XLFDT(X,IN,2)\60)
"RTN","EDPRPT1",49,0)
 .. S ROW("wait")=WAIT,ALL("wait")=ALL("wait")+WAIT
"RTN","EDPRPT1",50,0)
 .. S DISP(DISP,"wait")=DISP(DISP,"wait")+WAIT
"RTN","EDPRPT1",51,0)
 .. ;
"RTN","EDPRPT1",52,0)
 .. S X=$$ADMIT^EDPRPT(LOG) I X<1 D
"RTN","EDPRPT1",53,0)
 ... S NOT=NOT+1,NOT("elapsed")=NOT("elapsed")+ELAPSE
"RTN","EDPRPT1",54,0)
 ... S NOT("triage")=NOT("triage")+TRIAGE
"RTN","EDPRPT1",55,0)
 ... S NOT("wait")=NOT("wait")+WAIT
"RTN","EDPRPT1",56,0)
 ... ;***pij 4/19/2013 if variables are null, change to zero
"RTN","EDPRPT1",57,0)
 ... S ROW("admDec")=0
"RTN","EDPRPT1",58,0)
 ... S ROW("admDel")=0
"RTN","EDPRPT1",59,0)
 ... ;***
"RTN","EDPRPT1",60,0)
 .. E  D  ;decision to admit
"RTN","EDPRPT1",61,0)
 ... S ADMDEC=($$FMDIFF^XLFDT(X,IN,2)\60)
"RTN","EDPRPT1",62,0)
 ... S ADMDEL=$S(OUT:($$FMDIFF^XLFDT(OUT,X,2)\60),1:0)
"RTN","EDPRPT1",63,0)
 ... S ROW("admDec")=ADMDEC,ROW("admDel")=ADMDEL
"RTN","EDPRPT1",64,0)
 ... S ADM=ADM+1,ADM("elapsed")=ADM("elapsed")+ELAPSE
"RTN","EDPRPT1",65,0)
 ... S ADM("triage")=ADM("triage")+TRIAGE
"RTN","EDPRPT1",66,0)
 ... S ADM("wait")=ADM("wait")+WAIT
"RTN","EDPRPT1",67,0)
 ... S ADM("admDec")=ADM("admDec")+ADMDEC
"RTN","EDPRPT1",68,0)
 ... S ADM("admDel")=ADM("admDel")+ADMDEL
"RTN","EDPRPT1",69,0)
 ... S DISP(DISP,"admDec")=DISP(DISP,"admDec")+ADMDEC
"RTN","EDPRPT1",70,0)
 ... S DISP(DISP,"admDel")=DISP(DISP,"admDel")+ADMDEL
"RTN","EDPRPT1",71,0)
 .. ;
"RTN","EDPRPT1",72,0)
 .. I '$G(CSV) S X=$$XMLA^EDPX("log",.ROW) D XML^EDPX(X) Q
"RTN","EDPRPT1",73,0)
 .. S X=ROW("id")
"RTN","EDPRPT1",74,0)
 .. ;F I="inTS","outTS","complaint","md","acuity","elapsed","triage","wait","disposition","admDec","admDel","arrival","dx","icd" S X=X_$C(9)_$G(ROW(I))
"RTN","EDPRPT1",75,0)
 .. F I="inTS","outTS","complaint","md","acuity","elapsed","triage","wait","disposition","admDec","admDel","dx","icd" S X=X_$C(9)_$G(ROW(I))
"RTN","EDPRPT1",76,0)
 .. D ADD^EDPCSV(X)
"RTN","EDPRPT1",77,0)
 I $D(ZTSAVE) D TASK^EDPRPT Q  ;too long -> queue rest of report
"RTN","EDPRPT1",78,0)
 D:'$G(CSV) XML^EDPX("</logEntries>")
"RTN","EDPRPT1",79,0)
 ;
"RTN","EDPRPT1",80,0)
A2 ; calculate & include averages
"RTN","EDPRPT1",81,0)
 Q:ALL<1  ;no visits found
"RTN","EDPRPT1",82,0)
 S ALL("type")="All Patients",NOT("type")="Not Admitted",ADM("type")="Admitted"
"RTN","EDPRPT1",83,0)
 F I="elapsed","triage","wait" S ALL(I)=$$ETIME^EDPRPT(ALL(I)\ALL)
"RTN","EDPRPT1",84,0)
 F I="elapsed","triage","wait" S NOT(I)=$S(NOT:$$ETIME^EDPRPT(NOT(I)\NOT),1:"00:00")
"RTN","EDPRPT1",85,0)
 F I="elapsed","triage","wait","admDec","admDel" S ADM(I)=$S(ADM:$$ETIME^EDPRPT(ADM(I)\ADM),1:"00:00")
"RTN","EDPRPT1",86,0)
 F I="admDec","admDel" S ALL(I)=ADM(I)
"RTN","EDPRPT1",87,0)
 S ALL("total")=ALL,NOT("total")=NOT,ADM("total")=ADM
"RTN","EDPRPT1",88,0)
 S X="" F  S X=$O(DISP(X)) Q:X=""  I DISP(X) D
"RTN","EDPRPT1",89,0)
 . S DISP(X,"total")=DISP(X),DISP(X,"type")=X
"RTN","EDPRPT1",90,0)
 . F I="elapsed","triage","wait","admDec","admDel" S DISP(X,I)=$$ETIME^EDPRPT(DISP(X,I)\DISP(X))
"RTN","EDPRPT1",91,0)
 ;
"RTN","EDPRPT1",92,0)
A3 I $G(CSV) D  Q  ;CSV format
"RTN","EDPRPT1",93,0)
 . N TAB,D S TAB=$C(9)
"RTN","EDPRPT1",94,0)
 . D BLANK^EDPCSV
"RTN","EDPRPT1",95,0)
 . S X=TAB_"Total Patients"_TAB_ALL_TAB_TAB_TAB_TAB_ALL("elapsed")_TAB_ALL("triage")_TAB_ALL("wait")_TAB_TAB_ALL("admDec")_TAB_ALL("admDel")
"RTN","EDPRPT1",96,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT1",97,0)
 . S X=TAB_TAB_TAB_TAB_"Total"_TAB_"Visit"_TAB_"Triage"_TAB_"Wait"_TAB_"Adm Dec"_TAB_"Adm Del"
"RTN","EDPRPT1",98,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT1",99,0)
 . S X=TAB_TAB_TAB_"Patients Not Admitted"_TAB_NOT_TAB_NOT("elapsed")_TAB_NOT("triage")_TAB_NOT("wait")
"RTN","EDPRPT1",100,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT1",101,0)
 . S X=TAB_TAB_TAB_"Patients Admitted"_TAB_ADM_TAB_ADM("elapsed")_TAB_ADM("triage")_TAB_ADM("wait")_TAB_ADM("admDec")_TAB_ADM("admDel")
"RTN","EDPRPT1",102,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT1",103,0)
 . S X=TAB_TAB_TAB_"Disposition" D ADD^EDPCSV(X)
"RTN","EDPRPT1",104,0)
 . S D="" F  S D=$O(DISP(D)) Q:D=""  I DISP(D) D
"RTN","EDPRPT1",105,0)
 .. S X=D_TAB_DISP(D)_TAB_DISP(D,"elapsed")_TAB_DISP(D,"triage")_TAB_DISP(D,"wait")_TAB_DISP(D,"admDec")_TAB_DISP(D,"admDel")
"RTN","EDPRPT1",106,0)
 .. D ADD^EDPCSV(X)
"RTN","EDPRPT1",107,0)
 D XML^EDPX("<averages>")
"RTN","EDPRPT1",108,0)
 S X=$$XMLA^EDPX("average",.ALL) D XML^EDPX(X)
"RTN","EDPRPT1",109,0)
 S X=$$XMLA^EDPX("average",.NOT) D XML^EDPX(X)
"RTN","EDPRPT1",110,0)
 S X=$$XMLA^EDPX("average",.ADM) D XML^EDPX(X)
"RTN","EDPRPT1",111,0)
 S I="" F  S I=$O(DISP(I)) Q:I=""  I DISP(I) K ROW M ROW=DISP(I) S X=$$XMLA^EDPX("average",.ROW) D XML^EDPX(X)
"RTN","EDPRPT1",112,0)
 D XML^EDPX("</averages>")
"RTN","EDPRPT1",113,0)
 ; include list of providers assigned
"RTN","EDPRPT1",114,0)
 I $O(PROV(0)) D PROV^EDPRPT(.PROV)
"RTN","EDPRPT1",115,0)
 Q
"RTN","EDPRPT1",116,0)
 ;
"RTN","EDPRPT1",117,0)
INIT ; Initialize counters and sums
"RTN","EDPRPT1",118,0)
 N I,DA,X,Y,J S (ALL,ADM,NOT)=0
"RTN","EDPRPT1",119,0)
 F I="elapsed","triage","wait" S (ALL(I),NOT(I),ADM(I))=0
"RTN","EDPRPT1",120,0)
 F I="admDec","admDel" S ADM(I)=0
"RTN","EDPRPT1",121,0)
 S X="" F  S X=$O(^EDPB(233.1,"AB","disposition",X)) Q:X=""  D
"RTN","EDPRPT1",122,0)
 . S DA=0 F  S DA=$O(^EDPB(233.1,"AB","disposition",X,DA)) Q:DA<1  D
"RTN","EDPRPT1",123,0)
 .. S Y=$$ECODE^EDPRPT(DA) Q:'$L(Y)  S DISP(Y)=0
"RTN","EDPRPT1",124,0)
 .. F I="elapsed","triage","wait","admDec","admDel" S DISP(Y,I)=0
"RTN","EDPRPT1",125,0)
 ;TDP - Patch 2, Added additional disposition inits to prevent undefined
"RTN","EDPRPT1",126,0)
 ;      errors.
"RTN","EDPRPT1",127,0)
 ;S I=EDPSTA_"."_$P($P(X0,U),".",2)
"RTN","EDPRPT1",128,0)
 S I=EDPSTA_".disposition"
"RTN","EDPRPT1",129,0)
 S X=0 F  S X=$O(^EDPB(233.2,"AS",I,X)) Q:X=""  D
"RTN","EDPRPT1",130,0)
 . S DA=0 F  S DA=$O(^EDPB(233.2,"AS",I,X,DA)) Q:DA=""  D
"RTN","EDPRPT1",131,0)
 .. S Y=$P($G(^EDPB(233.2,"AS",I,X,DA)),U)
"RTN","EDPRPT1",132,0)
 .. I '$L(Y) S Y=$E($TR($P($G(^EDPB(233.2,"AS",I,X,DA)),U,2)," ","_"),1,30)
"RTN","EDPRPT1",133,0)
 .. I $L(Y),'$D(DISP(Y)) D
"RTN","EDPRPT1",134,0)
 ... S DISP(Y)=0
"RTN","EDPRPT1",135,0)
 ... F J="elapsed","triage","wait","admDec","admDel" S DISP(Y,J)=0
"RTN","EDPRPT1",136,0)
 S DISP("none")=0 F I="elapsed","triage","wait","admDec","admDel" S DISP("none",I)=0
"RTN","EDPRPT1",137,0)
 S CUTOFF=$P($$HADD^XLFDT($H,,,,6),",",2) K ZTSAVE
"RTN","EDPRPT1",138,0)
 Q
"RTN","EDPRPT1",139,0)
 ;
"RTN","EDPRPT1",140,0)
LONG() ; -- report running too long?
"RTN","EDPRPT1",141,0)
 ;H 1 ;for testing only
"RTN","EDPRPT1",142,0)
 Q ($P($H,",",2)>CUTOFF)
"RTN","EDPRPT1",143,0)
 ;
"RTN","EDPRPT1",144,0)
ZTSAVE ; Set up ZTSAVE to task remainder of report
"RTN","EDPRPT1",145,0)
 N I F I="BEG","END","IN" S ZTSAVE(I)=""
"RTN","EDPRPT1",146,0)
 F I="ALL","NOT","ADM" S ZTSAVE(I)=""
"RTN","EDPRPT1",147,0)
 F I="ALL(","NOT(","ADM(","DISP(","PROV(" S ZTSAVE(I)=""
"RTN","EDPRPT1",148,0)
 S ZTRTN="TASK^EDPRPT1",ZTDESC="EDIS Activity Report"
"RTN","EDPRPT1",149,0)
 ; bwf - 2/27/2012: This code seems to be incomplete. Adding kill statement to clean up ZTSAVE,ZTRTN and ZTDESC.
"RTN","EDPRPT1",150,0)
 ; my guess is there needs to be the final call to ACTUALLY TASK this
"RTN","EDPRPT1",151,0)
 K ZTRTN,ZTDESC,ZTSAVE
"RTN","EDPRPT1",152,0)
 Q
"RTN","EDPRPT1",153,0)
 ;
"RTN","EDPRPT1",154,0)
TASK ; -- entry point to complete report in the background
"RTN","EDPRPT1",155,0)
 N NOW S NOW=$$NOW^XLFDT()
"RTN","EDPRPT1",156,0)
 D LOOP
"RTN","EDPRPT1",157,0)
 M ^XTMP("EDIS-"_ZTSK)=EDPXML K EDPXML
"RTN","EDPRPT1",158,0)
 S ^XTMP("EDIS-"_ZTSK,0)=$$FMADD^XLFDT(NOW,1)_U_NOW_"^EDIS Activity Report"
"RTN","EDPRPT1",159,0)
 K ZTSK
"RTN","EDPRPT1",160,0)
 Q
"RTN","EDPRPT10")
0^33^B30220543^B26044910
"RTN","EDPRPT10",1,0)
EDPRPT10 ;SLC/MKB - Admissions Report ;4/25/13 3:15pm
"RTN","EDPRPT10",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;May 2, 2012;Build 200
"RTN","EDPRPT10",3,0)
 ;
"RTN","EDPRPT10",4,0)
ADM(BEG,END,CSV) ; Get Admissions Report for EDPSITE by date range
"RTN","EDPRPT10",5,0)
 N IN,OUT,LOG,X,X0,X1,X3,DX,DISP,ROW,TAB
"RTN","EDPRPT10",6,0)
 N ELAPSE,TRIAGE,WAIT,ADMDEC,ADMDEL
"RTN","EDPRPT10",7,0)
 D INIT ;set counters, sums to 0
"RTN","EDPRPT10",8,0)
 D:'$G(CSV) XML^EDPX("<logEntries>") I $G(CSV) D  ;headers
"RTN","EDPRPT10",9,0)
 . S TAB=$C(9)
"RTN","EDPRPT10",10,0)
 . ;***pij 4/19/2013 changed ED to IEN
"RTN","EDPRPT10",11,0)
 . ;S X="ED"_TAB_"Time Out"_TAB_"Complaint"_TAB_"MD"_TAB_"Acuity"_TAB_"Dispo"_TAB_"Adm Dec"_TAB_"Adm Delay"_TAB_"Diagnosis"_TAB_"ICD9" ;_TAB_"ER Spec Visit"
"RTN","EDPRPT10",12,0)
 . S X="IEN"_TAB_"Time Out"_TAB_"Complaint"_TAB_"MD"_TAB_"Acuity"_TAB_"Dispo"_TAB_"Adm Dec"_TAB_"Adm Delay"_TAB_"Diagnosis"_TAB_"ICD9" ;_TAB_"ER Spec Visit"
"RTN","EDPRPT10",13,0)
 . ;***
"RTN","EDPRPT10",14,0)
 . D ADD^EDPCSV(X)
"RTN","EDPRPT10",15,0)
 S IN=BEG-.000001
"RTN","EDPRPT10",16,0)
 F  S IN=$O(^EDP(230,"ATI",EDPSITE,IN)) Q:'IN  Q:IN>END  S LOG=0 F  S LOG=+$O(^EDP(230,"ATI",EDPSITE,IN,LOG)) Q:LOG<1  D
"RTN","EDPRPT10",17,0)
 . S X0=^EDP(230,LOG,0),X1=$G(^(1)),X3=$G(^(3))
"RTN","EDPRPT10",18,0)
 . Q:'+$P(X1,U,2)
"RTN","EDPRPT10",19,0)
 . S DISP=$$ECODE^EDPRPT($P(X1,U,2)),OUT=$P(X0,U,9)
"RTN","EDPRPT10",20,0)
 . ;TDP - Patch 2 change to capture entries without abbreviations
"RTN","EDPRPT10",21,0)
 . ;Q:DISP=""  Q:'$D(CNT($$UP^XLFSTR(DISP)))  ;visits w/admit disp
"RTN","EDPRPT10",22,0)
 . ;S:DISP="" DISP="NONE"
"RTN","EDPRPT10",23,0)
 . I DISP="" S DISP=$$DISP^EDPRPT($P(X1,U,2))
"RTN","EDPRPT10",24,0)
 . ;Q:'$D(CNT($$UP^XLFSTR(DISP)))  ;visits w/admit disp
"RTN","EDPRPT10",25,0)
 . ;TDP - Patch 2, added VADMIT1 call for additional VA Admit check
"RTN","EDPRPT10",26,0)
 . I '$D(CNT($$UP^XLFSTR(DISP))),'$$VADMIT1^EDPRPT2($P(X1,U,2)) Q  ;visits w/admit disp
"RTN","EDPRPT10",27,0)
 . S DX=$$DXPRI^EDPQPCE(+$P(X0,U,3),LOG)
"RTN","EDPRPT10",28,0)
 . K ROW S ROW("id")=LOG
"RTN","EDPRPT10",29,0)
 . S ROW("outTS")=$S($G(CSV):$$EDATE^EDPRPT(OUT),1:OUT)
"RTN","EDPRPT10",30,0)
 . S ROW("complaint")=$P(X1,U)
"RTN","EDPRPT10",31,0)
 . S ROW("md")=$$EPERS^EDPRPT($P(X3,U,5))
"RTN","EDPRPT10",32,0)
 . S ROW("acuity")=$$ECODE^EDPRPT($P(X3,U,3))
"RTN","EDPRPT10",33,0)
 . S ROW("disposition")=DISP,DISP=$$UP^XLFSTR(DISP)
"RTN","EDPRPT10",34,0)
 . S ROW("icd")=$P(DX,U),ROW("dx")=$P(DX,U,2)
"RTN","EDPRPT10",35,0)
 . ; ER Special Visit ?? -- ck ^DPT dispositions
"RTN","EDPRPT10",36,0)
 . S CNT("ALL")=CNT("ALL")+1,CNT(DISP)=CNT(DISP)+1
"RTN","EDPRPT10",37,0)
 . ;
"RTN","EDPRPT10",38,0)
A1 . ; calculate times
"RTN","EDPRPT10",39,0)
 . ; S:OUT="" OUT=NOW
"RTN","EDPRPT10",40,0)
 . S ELAPSE=$S(OUT:($$FMDIFF^XLFDT(OUT,IN,2)\60),1:0)
"RTN","EDPRPT10",41,0)
 . F I="ALL",DISP S MIN(I,"elapsed")=MIN(I,"elapsed")+ELAPSE
"RTN","EDPRPT10",42,0)
 . ;
"RTN","EDPRPT10",43,0)
 . S X=$$ACUITY^EDPRPT(LOG),TRIAGE=0 ;S:X<1 X=OUT
"RTN","EDPRPT10",44,0)
 . S:X TRIAGE=($$FMDIFF^XLFDT(X,IN,2)\60)
"RTN","EDPRPT10",45,0)
 . F I="ALL",DISP S MIN(I,"triage")=MIN(I,"triage")+TRIAGE
"RTN","EDPRPT10",46,0)
 . ;
"RTN","EDPRPT10",47,0)
 . S X=$$LVWAITRM^EDPRPT(LOG),WAIT=0 ;leave waiting room
"RTN","EDPRPT10",48,0)
 . S:X WAIT=($$FMDIFF^XLFDT(X,IN,2)\60)
"RTN","EDPRPT10",49,0)
 . F I="ALL",DISP S MIN(I,"wait")=MIN(I,"wait")+WAIT
"RTN","EDPRPT10",50,0)
 . ;
"RTN","EDPRPT10",51,0)
 . S X=$$ADMIT^EDPRPT(LOG) ;decision to admit
"RTN","EDPRPT10",52,0)
 . S ADMDEC=$S(X:($$FMDIFF^XLFDT(X,IN,2)\60),1:0)
"RTN","EDPRPT10",53,0)
 . F I="ALL",DISP S MIN(I,"admDec")=MIN(I,"admDec")+ADMDEC
"RTN","EDPRPT10",54,0)
 . S ROW("admDec")=ADMDEC
"RTN","EDPRPT10",55,0)
 . ;
"RTN","EDPRPT10",56,0)
 . S ADMDEL=$S(X:($$FMDIFF^XLFDT(OUT,X,2)\60),1:0)
"RTN","EDPRPT10",57,0)
 . F I="ALL",DISP S MIN(I,"admDel")=MIN(I,"admDel")+ADMDEL
"RTN","EDPRPT10",58,0)
 . S ROW("admDel")=ADMDEL
"RTN","EDPRPT10",59,0)
 . ;
"RTN","EDPRPT10",60,0)
 . I '$G(CSV) S X=$$XMLA^EDPX("log",.ROW) D XML^EDPX(X) Q
"RTN","EDPRPT10",61,0)
 . S X=ROW("id")
"RTN","EDPRPT10",62,0)
 . F I="outTS","complaint","md","acuity","disposition","admDec","admDel","dx","icd" S X=X_$C(9)_$G(ROW(I))
"RTN","EDPRPT10",63,0)
 . D ADD^EDPCSV(X)
"RTN","EDPRPT10",64,0)
 D:'$G(CSV) XML^EDPX("</logEntries>")
"RTN","EDPRPT10",65,0)
 ;
"RTN","EDPRPT10",66,0)
A2 ; calculate & include averages
"RTN","EDPRPT10",67,0)
 Q:CNT("ALL")<1  ;no visits found
"RTN","EDPRPT10",68,0)
 I $G(CSV) D  Q  ;return as CSV
"RTN","EDPRPT10",69,0)
 . ;***pij 4/19/2013 changed field to Elapsed from Visit
"RTN","EDPRPT10",70,0)
 . ;S X=TAB_TAB_TAB_"     Activity Summary"_TAB_"Total"_TAB_"Visit"_TAB_"Triage"_TAB_"Wait"_TAB_"Adm Dec"_TAB_"Adm Delay"
"RTN","EDPRPT10",71,0)
 . S X=TAB_TAB_TAB_"     Activity Summary"_TAB_"Total"_TAB_"Elapsed"_TAB_"Triage"_TAB_"Wait"_TAB_"Adm Dec"_TAB_"Adm Delay"
"RTN","EDPRPT10",72,0)
 . ;***
"RTN","EDPRPT10",73,0)
 . D BLANK^EDPCSV,ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT10",74,0)
 . S X=TAB_TAB_TAB_"Total Patients VA Admitted"_TAB_CNT("ALL")
"RTN","EDPRPT10",75,0)
 . F I="elapsed","triage","wait","admDec","admDel" D
"RTN","EDPRPT10",76,0)
 .. S Y=MIN("ALL",I)\CNT("ALL"),X=X_TAB_$S(Y:$$ETIME^EDPRPT(Y),1:"0:00")
"RTN","EDPRPT10",77,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT10",78,0)
 . S X=TAB_TAB_TAB_"     Disposition" D ADD^EDPCSV(X)
"RTN","EDPRPT10",79,0)
 . S DISP="" F  S DISP=$O(CNT(DISP)) Q:DISP=""  I DISP'="ALL",CNT(DISP) D
"RTN","EDPRPT10",80,0)
 .. S X=TAB_TAB_TAB_DISP_TAB_CNT(DISP)
"RTN","EDPRPT10",81,0)
 .. F I="elapsed","triage","wait","admDec","admDel" D
"RTN","EDPRPT10",82,0)
 ... S Y=MIN(DISP,I)\CNT(DISP),X=X_TAB_$S(Y:$$ETIME^EDPRPT(Y),1:"0:00")
"RTN","EDPRPT10",83,0)
 .. D ADD^EDPCSV(X)
"RTN","EDPRPT10",84,0)
 ; or as XML
"RTN","EDPRPT10",85,0)
 D XML^EDPX("<averages>")
"RTN","EDPRPT10",86,0)
 S DISP="" F  S DISP=$O(CNT(DISP)) Q:DISP=""  I CNT(DISP) D
"RTN","EDPRPT10",87,0)
 . S MIN(DISP,"type")=$S(DISP="ALL":"Total Patients VA Admitted",1:DISP)
"RTN","EDPRPT10",88,0)
 . S MIN(DISP,"total")=CNT(DISP)
"RTN","EDPRPT10",89,0)
 . F I="elapsed","triage","wait","admDec","admDel" D
"RTN","EDPRPT10",90,0)
 .. S X=MIN(DISP,I)\CNT(DISP)
"RTN","EDPRPT10",91,0)
 .. S MIN(DISP,I)=$S(X:$$ETIME^EDPRPT(X),1:"0:00")
"RTN","EDPRPT10",92,0)
 . K ROW M ROW=MIN(DISP)
"RTN","EDPRPT10",93,0)
 . S X=$$XMLA^EDPX("average",.ROW) D XML^EDPX(X)
"RTN","EDPRPT10",94,0)
 D XML^EDPX("</averages>")
"RTN","EDPRPT10",95,0)
 K CNT,MIN
"RTN","EDPRPT10",96,0)
 Q
"RTN","EDPRPT10",97,0)
 ;
"RTN","EDPRPT10",98,0)
INIT ; Initialize counters and sums
"RTN","EDPRPT10",99,0)
 N I,DISP,DA,X,Y
"RTN","EDPRPT10",100,0)
 ;F D="VA","T","ICU","OBS","ALL" D
"RTN","EDPRPT10",101,0)
 S DISP="" F  S DISP=$O(^EDPB(233.1,"AB","disposition",DISP)) Q:DISP=""  D
"RTN","EDPRPT10",102,0)
 . Q:'$$VADMIT^EDPRPT2(DISP)
"RTN","EDPRPT10",103,0)
 . S CNT(DISP)=0
"RTN","EDPRPT10",104,0)
 . F I="elapsed","triage","wait","admDec","admDel" S MIN(DISP,I)=0
"RTN","EDPRPT10",105,0)
 ;TDP - Patch 2, Added additional disposition inits to prevent undefined
"RTN","EDPRPT10",106,0)
 ;      errors and capture dispositions without abbreviations
"RTN","EDPRPT10",107,0)
 S Y=EDPSTA_".disposition"
"RTN","EDPRPT10",108,0)
 S X=0 F  S X=$O(^EDPB(233.2,"AS",Y,X)) Q:X=""  D
"RTN","EDPRPT10",109,0)
 . S DA=0 F  S DA=$O(^EDPB(233.2,"AS",Y,X,DA)) Q:DA=""  D
"RTN","EDPRPT10",110,0)
 .. S DISP=$P($G(^EDPB(233.2,"AS",Y,X,DA)),U)
"RTN","EDPRPT10",111,0)
 .. I '$L(DISP) S DISP=$E($TR($P($G(^EDPB(233.2,"AS",Y,+X,DA)),U,2)," ","_"),1,30)
"RTN","EDPRPT10",112,0)
 .. I $L(DISP),'$D(CNT(DISP)),(($$VADMIT^EDPRPT2(DISP))!($$VADMIT1^EDPRPT2(X))) D
"RTN","EDPRPT10",113,0)
 ... S DISP=$$UP^XLFSTR(DISP)
"RTN","EDPRPT10",114,0)
 ... S CNT(DISP)=0
"RTN","EDPRPT10",115,0)
 ... F I="elapsed","triage","wait","admDec","admDel" S MIN(DISP,I)=0
"RTN","EDPRPT10",116,0)
 ;S CNT("NONE")=0 F I="elapsed","triage","wait","admDec","admDel" S MIN("NONE",I)=0
"RTN","EDPRPT10",117,0)
 S CNT("ALL")=0
"RTN","EDPRPT10",118,0)
 F I="elapsed","triage","wait","admDec","admDel" S MIN("ALL",I)=0
"RTN","EDPRPT10",119,0)
 Q
"RTN","EDPRPT10",120,0)
 ;
"RTN","EDPRPT10",121,0)
ECODE(IEN) ; Return external value for a Code
"RTN","EDPRPT10",122,0)
 Q:IEN $P($G(^EDPB(233.1,IEN,0)),U,2) ;name
"RTN","EDPRPT10",123,0)
 Q ""
"RTN","EDPRPT12")
0^34^B8703521^B7802924
"RTN","EDPRPT12",1,0)
EDPRPT12 ;SLC/MKB - Orders by Acuity Report ;4/25/13 3:15pm
"RTN","EDPRPT12",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;May 2, 2012;Build 200
"RTN","EDPRPT12",3,0)
 ;
"RTN","EDPRPT12",4,0)
ORD(BEG,END,CSV) ; Get Acuity Report for EDPSITE by date range
"RTN","EDPRPT12",5,0)
 ;   CNT = counters by acuity
"RTN","EDPRPT12",6,0)
 N IN,OUT,X,X0,I,SERV,ACU,CNT,ROW,EDLOC
"RTN","EDPRPT12",7,0)
 D INIT ;set counters, sums to 0
"RTN","EDPRPT12",8,0)
 S IN=BEG-.000001
"RTN","EDPRPT12",9,0)
 F  S IN=$O(^EDP(230,"ATI",EDPSITE,IN)) Q:'IN  Q:IN>END  S LOG=0 F  S LOG=+$O(^EDP(230,"ATI",EDPSITE,IN,LOG)) Q:LOG<1  D
"RTN","EDPRPT12",10,0)
 . S X=$P($G(^EDP(230,LOG,3)),U,3),ACU=$$ECODE(X)
"RTN","EDPRPT12",11,0)
 . I '$D(^EDP(230,LOG,8)) D FIND(LOG,ACU) Q  ;old/converted visit
"RTN","EDPRPT12",12,0)
 . S I=0 F  S I=$O(^EDP(230,LOG,8,I)) Q:I<1  S X0=$G(^(I,0)) D
"RTN","EDPRPT12",13,0)
 .. S SERV=$$ENAME($P(X0,U,2))
"RTN","EDPRPT12",14,0)
 .. S CNT(ACU,SERV)=CNT(ACU,SERV)+1
"RTN","EDPRPT12",15,0)
 ;
"RTN","EDPRPT12",16,0)
OR1 ; return counts
"RTN","EDPRPT12",17,0)
 I $G(CSV) D  Q  ;as CSV
"RTN","EDPRPT12",18,0)
 . N TAB S TAB=$C(9)
"RTN","EDPRPT12",19,0)
 . ;S X="Acuity"_TAB_"Labs"_TAB_"Images"_TAB_"Consults"_TAB_"Meds"_TAB_"Other"
"RTN","EDPRPT12",20,0)
 . ;***pij 4/19/2013 changed acuity
"RTN","EDPRPT12",21,0)
 . S X="Acuity/Display Group_>"_TAB_"Labs"_TAB_"Images"_TAB_"Consults"_TAB_"Meds"_TAB_"Other"
"RTN","EDPRPT12",22,0)
 . ;***
"RTN","EDPRPT12",23,0)
 . D ADD^EDPCSV(X)
"RTN","EDPRPT12",24,0)
 . F ACU=0,1,2,3,4,5 D
"RTN","EDPRPT12",25,0)
 .. K ROW S ROW("acuity")=ACU M ROW=CNT(ACU)
"RTN","EDPRPT12",26,0)
 .. D ROW(ACU,.ROW)
"RTN","EDPRPT12",27,0)
 ; or as XML
"RTN","EDPRPT12",28,0)
 D XML^EDPX("<statistics>")
"RTN","EDPRPT12",29,0)
 F ACU=0,1,2,3,4,5 D
"RTN","EDPRPT12",30,0)
 . K ROW S ROW("acuity")=ACU M ROW=CNT(ACU)
"RTN","EDPRPT12",31,0)
 . S X=$$XMLA^EDPX("row",.ROW) D XML^EDPX(X)
"RTN","EDPRPT12",32,0)
 D XML^EDPX("</statistics>")
"RTN","EDPRPT12",33,0)
 Q
"RTN","EDPRPT12",34,0)
 ;
"RTN","EDPRPT12",35,0)
ROW(NAME,LIST) ; add line
"RTN","EDPRPT12",36,0)
 N I S X=NAME
"RTN","EDPRPT12",37,0)
 F I="labs","images","consults","meds","other" S X=X_TAB_LIST(I)
"RTN","EDPRPT12",38,0)
 D ADD^EDPCSV(X)
"RTN","EDPRPT12",39,0)
 Q
"RTN","EDPRPT12",40,0)
 ;
"RTN","EDPRPT12",41,0)
INIT ; Initialize acuity/service counters
"RTN","EDPRPT12",42,0)
 N A,S
"RTN","EDPRPT12",43,0)
 F A=0,1,2,3,4,5 D
"RTN","EDPRPT12",44,0)
 . F S="meds","labs","images","consults","other" S CNT(A,S)=0
"RTN","EDPRPT12",45,0)
 Q
"RTN","EDPRPT12",46,0)
 ;
"RTN","EDPRPT12",47,0)
ECODE(IEN) ; Return external value for an Acuity code
"RTN","EDPRPT12",48,0)
 N X0,X,Y S X0=$G(^EDPB(233.1,+IEN,0))
"RTN","EDPRPT12",49,0)
 S X=$P(X0,U,3) S:X<1 X=$P(X0,U,4) ;code or nat'l code
"RTN","EDPRPT12",50,0)
 ;S Y=$S(X=1:"one",X=2:"two",X=3:"three",X=4:"four",X=5:"five",1:"none")
"RTN","EDPRPT12",51,0)
 S Y=+X I (Y<1)!(Y>5) S Y=0
"RTN","EDPRPT12",52,0)
 Q Y
"RTN","EDPRPT12",53,0)
 ;
"RTN","EDPRPT12",54,0)
ENAME(X) ; Return external name for a Service code
"RTN","EDPRPT12",55,0)
 I X="L"!($E(X,1,2)="LR") Q "labs"
"RTN","EDPRPT12",56,0)
 I X="R"!($E(X,1,2)="RA") Q "images"
"RTN","EDPRPT12",57,0)
 I X="C"!(X="GMRC")       Q "consults"
"RTN","EDPRPT12",58,0)
 I X="M"!($E(X,1,2)="PS") Q "meds"
"RTN","EDPRPT12",59,0)
 I X="A"                  Q "other"
"RTN","EDPRPT12",60,0)
 Q "other"
"RTN","EDPRPT12",61,0)
 ;
"RTN","EDPRPT12",62,0)
FIND(LOG,ACU) ; find/count orders placed during visit LOG
"RTN","EDPRPT12",63,0)
 ;  (for converted data)
"RTN","EDPRPT12",64,0)
 N ORLIST,X0,DFN,IN,OUT,ORI,ORIFN,ORL,PKG,SERV
"RTN","EDPRPT12",65,0)
 S X0=$G(^EDP(230,LOG,0)),DFN=+$P(X0,U,6) Q:DFN<1
"RTN","EDPRPT12",66,0)
 S IN=$P(X0,U,8),OUT=$P(X0,U,9)
"RTN","EDPRPT12",67,0)
 D:'$D(EDLOC) GETLST^XPAR(.EDLOC,"ALL","EDPF LOCATION")
"RTN","EDPRPT12",68,0)
 K ^TMP("ORR",$J) D EN^ORQ1(DFN_";DPT(",,1,,IN,OUT) S ORI=0
"RTN","EDPRPT12",69,0)
 F  S ORI=$O(^TMP("ORR",$J,ORLIST,ORI)) Q:ORI<1  S ORIFN=+$G(^(ORI)) D
"RTN","EDPRPT12",70,0)
 . S ORL=$$GET1^DIQ(100,ORIFN_",",6,"I") Q:'$$ED(+ORL)
"RTN","EDPRPT12",71,0)
 . S PKG=$$GET1^DIQ(100,ORIFN_",","12:1")
"RTN","EDPRPT12",72,0)
 . S SERV=$$ENAME(PKG)
"RTN","EDPRPT12",73,0)
 . S CNT(ACU,SERV)=CNT(ACU,SERV)+1
"RTN","EDPRPT12",74,0)
 Q
"RTN","EDPRPT12",75,0)
 ;
"RTN","EDPRPT12",76,0)
ED(LOC) ; -- Return 1 or 0, if LOCation is part of ED
"RTN","EDPRPT12",77,0)
 ; Expects EDLOC(n) = seq ^ #44 ien
"RTN","EDPRPT12",78,0)
 N I,Y S (I,Y)=0
"RTN","EDPRPT12",79,0)
 F  S I=$O(EDLOC(I)) Q:I<1  I $P(EDLOC(I),U,2)=LOC S Y=1 Q
"RTN","EDPRPT12",80,0)
 Q Y
"RTN","EDPRPT13")
0^32^B7846285^B7380759
"RTN","EDPRPT13",1,0)
EDPRPT13 ;SLC/BWF - Removed in Error Report ;4/25/13 3:15pm
"RTN","EDPRPT13",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;May 2, 2012;Build 200
"RTN","EDPRPT13",3,0)
 ;
"RTN","EDPRPT13",4,0)
 Q
"RTN","EDPRPT13",5,0)
 ; INPUT:
"RTN","EDPRPT13",6,0)
 ;    BEG   - Beginning Date
"RTN","EDPRPT13",7,0)
 ;    END   - Ending Date
"RTN","EDPRPT13",8,0)
EN(BEG,END,CSV) ; Get report of patients removed in error
"RTN","EDPRPT13",9,0)
 N CHKDT,LOG,ROW,TAB,X0,X1,X3,CNT,I,LOGH,FOUND,X
"RTN","EDPRPT13",10,0)
 S CNT("ALL")=0 ; set counter to 0
"RTN","EDPRPT13",11,0)
 D:'$G(CSV) XML^EDPX("<removedInErrorEntries>") I $G(CSV) D  ;headers
"RTN","EDPRPT13",12,0)
 . S TAB=$C(9)
"RTN","EDPRPT13",13,0)
 . S X="ED IEN"_TAB_"Time In"_TAB_"Time Out"_TAB_"Restored to Board"_TAB_"Restored Date/Time"_TAB_"Restored By"_TAB_"Closed By"_TAB_"Closed Date/Time" ;_TAB_"ER Spec Visit"
"RTN","EDPRPT13",14,0)
 . D ADD^EDPCSV(X)
"RTN","EDPRPT13",15,0)
 S CHKDT=$G(BEG)-.000001
"RTN","EDPRPT13",16,0)
 F  S CHKDT=$O(^EDP(230,"ARIE",CHKDT)) Q:'CHKDT!(CHKDT>END)  D
"RTN","EDPRPT13",17,0)
 .S LOG=0 F  S LOG=$O(^EDP(230,"ARIE",CHKDT,LOG)) Q:'LOG  D
"RTN","EDPRPT13",18,0)
 ..S X0=^EDP(230,LOG,0),X1=$G(^(1)),X3=$G(^(3))
"RTN","EDPRPT13",19,0)
 ..;***pij change "ID" due to undef error 4/24/2013
"RTN","EDPRPT13",20,0)
 ..;N ROW S ROW("ID")=LOG
"RTN","EDPRPT13",21,0)
 ..N ROW S ROW("id")=LOG
"RTN","EDPRPT13",22,0)
 ..;***
"RTN","EDPRPT13",23,0)
 ..S ROW("patientName")=$$GET1^DIQ(2,$P(X0,U,6),.01)
"RTN","EDPRPT13",24,0)
 ..S ROW("timeInED")=$P(X0,U,8)
"RTN","EDPRPT13",25,0)
 ..S ROW("timeOutED")=$p(X0,U,9)
"RTN","EDPRPT13",26,0)
 ..S ROW("restored")=$P(X0,U,17)
"RTN","EDPRPT13",27,0)
 ..S ROW("restoredDateTime")=$P(X0,U,19)
"RTN","EDPRPT13",28,0)
 ..S ROW("restoredBy")=$$GET1^DIQ(200,$P(X0,U,18),.01)
"RTN","EDPRPT13",29,0)
 ..; initialize closedby and closedDateTime
"RTN","EDPRPT13",30,0)
 ..S (ROW("closedBy"),ROW("closedDateTime"))=""
"RTN","EDPRPT13",31,0)
 ..; look at the appropriate log history entry to get who closed this record
"RTN","EDPRPT13",32,0)
 ..S FOUND=0
"RTN","EDPRPT13",33,0)
 ..S LOGH="A" F  S LOGH=$O(^EDP(230.1,"B",LOG,LOGH),-1) Q:'LOGH!(FOUND)  D
"RTN","EDPRPT13",34,0)
 ...S X3=$G(^EDP(230.1,LOGH,3))
"RTN","EDPRPT13",35,0)
 ...I $P(X3,U,9) D
"RTN","EDPRPT13",36,0)
 ....S ROW("closedBy")=$$GET1^DIQ(200,$P(X3,U,11),.01),ROW("closedDateTime")=$P(X3,U,10)
"RTN","EDPRPT13",37,0)
 ....S FOUND=1
"RTN","EDPRPT13",38,0)
 ..;S ROW("closedBy")=$$GET1^DIQ(200,$P(X0,U,16),.01)
"RTN","EDPRPT13",39,0)
 ..;S ROW("closedDateTime")=$P(X0,U,15)
"RTN","EDPRPT13",40,0)
 ..S ROW("ssn")=$S($P(X0,U,5):$P(X0,U,5),'$P(X0,U,5):$$SSN^DPTLK1($P(X0,U,6)),1:"")
"RTN","EDPRPT13",41,0)
 ..I '$G(CSV) S X=$$XMLA^EDPX("log",.ROW) D XML^EDPX(X) Q
"RTN","EDPRPT13",42,0)
 ..S X=ROW("id")
"RTN","EDPRPT13",43,0)
 ..F I="patientName","timeInED","timeOutED","restored","restoredDateTime","restoredBy","closedBy","closedDateTime"  D
"RTN","EDPRPT13",44,0)
 ...S X=X_$C(9)_$G(ROW(I)) D ADD^EDPCSV(X)
"RTN","EDPRPT13",45,0)
 D:'$G(CSV) XML^EDPX("</removedInErrorEntries>")
"RTN","EDPRPT13",46,0)
 Q
"RTN","EDPRPT13",47,0)
 ;
"RTN","EDPRPT13",48,0)
INIT ;
"RTN","EDPRPT13",49,0)
 Q
"RTN","EDPRPT2")
0^16^B24332800^B22188672
"RTN","EDPRPT2",1,0)
EDPRPT2 ;SLC/MKB - Delay Report ;6/13/12 12:33pm
"RTN","EDPRPT2",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPRPT2",3,0)
 ;
"RTN","EDPRPT2",4,0)
DEL(BEG,END,CSV) ; Get Delay Report for EDPSITE by date range
"RTN","EDPRPT2",5,0)
 ;   CNT = counters
"RTN","EDPRPT2",6,0)
 ;   MIN = accumulate #minutes
"RTN","EDPRPT2",7,0)
 N IN,OUT,LOG,X,X0,X1,X3,DX,ELAPSE,ADMDEC,ADMDEL,DISP,VADISP,CNT,MIN,DEL,ACU,ED,NOT
"RTN","EDPRPT2",8,0)
 D INIT ;set counters, sums to 0
"RTN","EDPRPT2",9,0)
 D:'$G(CSV) XML^EDPX("<logEntries>") I $G(CSV) D  ;headers
"RTN","EDPRPT2",10,0)
 . N TAB S TAB=$C(9)
"RTN","EDPRPT2",11,0)
 . S X="ED IEN"_TAB_"Patient Name"_TAB_"Time In"_TAB_"Elapsed"_TAB_"Dispo"_TAB_"Delay Reason"_TAB_"MD"_TAB_"Adm Dec"_TAB_"Adm Delay"_TAB_"Acuity"_TAB_"Diagnosis"
"RTN","EDPRPT2",12,0)
 . D ADD^EDPCSV(X)
"RTN","EDPRPT2",13,0)
 S IN=BEG-.000001
"RTN","EDPRPT2",14,0)
 F  S IN=$O(^EDP(230,"ATI",EDPSITE,IN)) Q:'IN  Q:IN>END  S LOG=0 F  S LOG=+$O(^EDP(230,"ATI",EDPSITE,IN,LOG)) Q:LOG<1  D
"RTN","EDPRPT2",15,0)
 . S X0=^EDP(230,LOG,0),X1=$G(^(1)),X3=$G(^(3))
"RTN","EDPRPT2",16,0)
 . S ACU=$$ECODE^EDPRPT($P(X3,U,3)),DEL=+$P(X1,U,5),CNT=CNT+1
"RTN","EDPRPT2",17,0)
 . S DISP=$$ECODE^EDPRPT($P(X1,U,2)),VADISP=$$VADMIT(DISP)
"RTN","EDPRPT2",18,0)
 . ;TDP - Patch 2 mod to catch all dispositions listed as VA admit
"RTN","EDPRPT2",19,0)
 . I VADISP=0 S VADISP=$$VADMIT1($P(X1,U,2))
"RTN","EDPRPT2",20,0)
 . I DISP="" S DISP=$$DISP^EDPRPT($P(X1,U,2))
"RTN","EDPRPT2",21,0)
 . S OUT=$P(X0,U,9) ;S:OUT="" OUT=NOW
"RTN","EDPRPT2",22,0)
 . S ELAPSE=$S(OUT:($$FMDIFF^XLFDT(OUT,IN,2)\60),1:0),MIN=MIN+ELAPSE
"RTN","EDPRPT2",23,0)
D1 . ; all admissions
"RTN","EDPRPT2",24,0)
 . S (ADMDEC,ADMDEL)=0
"RTN","EDPRPT2",25,0)
 . S X=$$ADMIT^EDPRPT(LOG) I X D
"RTN","EDPRPT2",26,0)
 .. S ADMDEC=$$FMDIFF^XLFDT(X,IN,2)\60
"RTN","EDPRPT2",27,0)
 .. S:ADMDEC CNT("DEC")=CNT("DEC")+1,MIN("DEC")=MIN("DEC")+ADMDEC
"RTN","EDPRPT2",28,0)
 .. S ADMDEL=$S(OUT:($$FMDIFF^XLFDT(OUT,X,2)\60),1:0)
"RTN","EDPRPT2",29,0)
D2 . ; VA admissions only
"RTN","EDPRPT2",30,0)
 . I VADISP D
"RTN","EDPRPT2",31,0)
 .. S CNT("VA")=CNT("VA")+1
"RTN","EDPRPT2",32,0)
 .. S MIN("VA")=MIN("VA")+ELAPSE
"RTN","EDPRPT2",33,0)
 .. S MIN("VADEC")=MIN("VADEC")+ADMDEC
"RTN","EDPRPT2",34,0)
 .. S MIN("VADEL")=MIN("VADEL")+ADMDEL
"RTN","EDPRPT2",35,0)
 .. S:ADMDEL>359 CNT("VADEL6")=CNT("VADEL6")+1
"RTN","EDPRPT2",36,0)
D3 . ; elapsed visit time >=6 hrs
"RTN","EDPRPT2",37,0)
 . S:ELAPSE>1380 CNT("23+")=CNT("23+")+1
"RTN","EDPRPT2",38,0)
 . I ELAPSE>359 D
"RTN","EDPRPT2",39,0)
 .. S CNT("6+")=CNT("6+")+1
"RTN","EDPRPT2",40,0)
 .. S:VADISP CNT("VA6")=CNT("VA6")+1
"RTN","EDPRPT2",41,0)
 .. S DX=$$DXPRI^EDPQPCE(+$P(X0,U,3),LOG)
"RTN","EDPRPT2",42,0)
 .. N ROW S ROW("id")=LOG
"RTN","EDPRPT2",43,0)
 .. S ROW("patientName")=$S($P(X0,U,6)'="":$$GET1^DIQ(2,$P(X0,U,6),.01,"E"),1:$P(X0,U,4))
"RTN","EDPRPT2",44,0)
 .. S ROW("inTS")=$S($G(CSV):$$EDATE^EDPRPT(IN),1:IN)
"RTN","EDPRPT2",45,0)
 .. S ROW("elapsed")=$$ETIME^EDPRPT(ELAPSE)_" *"
"RTN","EDPRPT2",46,0)
 .. S ROW("disposition")=DISP
"RTN","EDPRPT2",47,0)
 .. S ROW("acuity")=ACU
"RTN","EDPRPT2",48,0)
 .. S ROW("delayReason")=$$ENAME^EDPRPT(DEL)
"RTN","EDPRPT2",49,0)
 .. S ROW("md")=$$EPERS^EDPRPT($P(X3,U,5))
"RTN","EDPRPT2",50,0)
 .. S ROW("dx")=$P(DX,U,2)
"RTN","EDPRPT2",51,0)
 .. S ROW("admDec")=ADMDEC
"RTN","EDPRPT2",52,0)
 .. S ROW("admDel")=ADMDEL
"RTN","EDPRPT2",53,0)
 .. D LOCTIMES ;split Elapsed into Time in/out of ED
"RTN","EDPRPT2",54,0)
 .. S ROW("timeInED")=$$ETIME^EDPRPT(ED)
"RTN","EDPRPT2",55,0)
 .. S ROW("timeOutED")=$$ETIME^EDPRPT(NOT)
"RTN","EDPRPT2",56,0)
 .. I '$G(CSV) S X=$$XMLA^EDPX("log",.ROW) D XML^EDPX(X) Q
"RTN","EDPRPT2",57,0)
 .. S X=ROW("id")
"RTN","EDPRPT2",58,0)
 .. ;F I="inTS","elapsed","timeInED","timeOutED","disposition","delayReason","md","admDec","admDel","acuity","dx" S X=X_$C(9)_$G(ROW(I))
"RTN","EDPRPT2",59,0)
 .. F I="patientName","inTS","elapsed","disposition","delayReason","md","admDec","admDel","acuity","dx" S X=X_$C(9)_$G(ROW(I))
"RTN","EDPRPT2",60,0)
 .. D ADD^EDPCSV(X)
"RTN","EDPRPT2",61,0)
 D:'$G(CSV) XML^EDPX("</logEntries>")
"RTN","EDPRPT2",62,0)
 Q
"RTN","EDPRPT2",63,0)
 ;
"RTN","EDPRPT2",64,0)
D4 ; return counts and averages
"RTN","EDPRPT2",65,0)
 D XML^EDPX("<averages>")
"RTN","EDPRPT2",66,0)
 S X="<average type='All Patients' total='"_CNT_"' avgTime='"_$S(CNT:$$ETIME^EDPRPT(MIN/CNT),1:0)_"' num6hr='"_CNT("6+")_"' num23hr='"_CNT("23+")_"' avgAdmDec='"_$S(CNT("DEC"):$$ETIME^EDPRPT(MIN("DEC")/CNT("DEC")),1:0)_"' />"
"RTN","EDPRPT2",67,0)
 D XML^EDPX(X)
"RTN","EDPRPT2",68,0)
 S X="<average type='Not VA Admitted' total='"_(CNT-CNT("VA"))_"' avgTime='"_$S(CNT-CNT("VA"):$$ETIME^EDPRPT((MIN-MIN("VA")/(CNT-CNT("VA")))),1:0)_"' />"
"RTN","EDPRPT2",69,0)
 D XML^EDPX(X)
"RTN","EDPRPT2",70,0)
 S X="<average type='VA Admitted' total='"_CNT("VA")_"' num6hr='"_CNT("VA6")_"' numAdmDel6hr='"_CNT("VADEL6")
"RTN","EDPRPT2",71,0)
 S X=X_"' avgAdmDel='"_$S(CNT("VA"):$$ETIME^EDPRPT(MIN("VADEL")/CNT("VA")),1:0)_"' avgAdmDec='"_$S(CNT("VA"):$$ETIME^EDPRPT(MIN("VADEC")/CNT("VA")),1:0)_"' />"
"RTN","EDPRPT2",72,0)
 D XML^EDPX(X)
"RTN","EDPRPT2",73,0)
 D XML^EDPX("</averages>")
"RTN","EDPRPT2",74,0)
 Q
"RTN","EDPRPT2",75,0)
 ;
"RTN","EDPRPT2",76,0)
INIT ; Initialize counters and sums
"RTN","EDPRPT2",77,0)
 N I S (CNT,MIN)=0
"RTN","EDPRPT2",78,0)
 F I="DEC","VA","VA6","VADEL6","6+","23+" S CNT(I)=0
"RTN","EDPRPT2",79,0)
 F I="DEC","VA","VADEC","VADEL" S MIN(I)=0
"RTN","EDPRPT2",80,0)
 Q
"RTN","EDPRPT2",81,0)
 ;
"RTN","EDPRPT2",82,0)
VADMIT(X) ; -- Return 1 or 0, if disposition indicates a VA admission
"RTN","EDPRPT2",83,0)
 I $G(X)="" Q 0
"RTN","EDPRPT2",84,0)
 N I,Y S X=$$UP^XLFSTR(X)
"RTN","EDPRPT2",85,0)
 S I=+$O(^EDPB(233.1,"AB","disposition",X,0))
"RTN","EDPRPT2",86,0)
 S Y=$S($P($G(^EDPB(233.1,I,0)),U,5)["V":1,1:0)
"RTN","EDPRPT2",87,0)
 Q Y
"RTN","EDPRPT2",88,0)
 ;
"RTN","EDPRPT2",89,0)
VADMIT1(X) ; -- Return 1 or 0, if disposition indicates a VA admission
"RTN","EDPRPT2",90,0)
 I +$G(X)=0 Q 0
"RTN","EDPRPT2",91,0)
 N Y
"RTN","EDPRPT2",92,0)
 S Y=$S($P($G(^EDPB(233.1,X,0)),U,5)["V":1,1:0)
"RTN","EDPRPT2",93,0)
 Q Y
"RTN","EDPRPT2",94,0)
 ;
"RTN","EDPRPT2",95,0)
LOCTIMES ; -- Returns time in ED and NOT ed locations
"RTN","EDPRPT2",96,0)
 ; Expects LOG, IN, OUT from above
"RTN","EDPRPT2",97,0)
 N LIST,I,TM,LOC,X,T1,T2,TYPE
"RTN","EDPRPT2",98,0)
 S LIST(IN)="ED",LIST(OUT)="NOT"
"RTN","EDPRPT2",99,0)
 S I=0 F  S I=$O(^EDP(230.1,"B",LOG,I)) Q:I<1  D
"RTN","EDPRPT2",100,0)
 . S TM=+$P($G(^EDP(230.1,I,0)),U,2),LOC=+$P($G(^(3)),U,4) Q:'LOC
"RTN","EDPRPT2",101,0)
 . S X=$P($G(^EDPB(231.8,LOC,0)),U,9)
"RTN","EDPRPT2",102,0)
 . S LIST(TM)=$S(X>2:"NOT",1:"ED")
"RTN","EDPRPT2",103,0)
 ; get time in each type of location
"RTN","EDPRPT2",104,0)
 S (ED,NOT)=0,TYPE=LIST(IN)
"RTN","EDPRPT2",105,0)
 S (T1,T2)=IN
"RTN","EDPRPT2",106,0)
 F  S T2=$O(LIST(T2)) Q:T2<1  D
"RTN","EDPRPT2",107,0)
 . S X=LIST(T2) I T2<OUT,X=TYPE Q
"RTN","EDPRPT2",108,0)
 . S @TYPE=@TYPE+$$FMDIFF^XLFDT(T2,T1,2) ;#seconds
"RTN","EDPRPT2",109,0)
 . S T1=T2,TYPE=X
"RTN","EDPRPT2",110,0)
 S ED=ED\60,NOT=NOT\60                   ;#minutes
"RTN","EDPRPT2",111,0)
 Q
"RTN","EDPRPT3")
0^17^B14278258^B14278258
"RTN","EDPRPT3",1,0)
EDPRPT3 ;SLC/MKB - Missed Opportunity Report ;2/28/12 08:33am
"RTN","EDPRPT3",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPRPT3",3,0)
 ;
"RTN","EDPRPT3",4,0)
MO(BEG,END,CSV) ; Get Missed Opp Report for EDPSITE by date range
"RTN","EDPRPT3",5,0)
 ;   CNT = counters
"RTN","EDPRPT3",6,0)
 N IN,OUT,LOG,DISP,X,X0,X1,X3,X4,I,CNT,ROW
"RTN","EDPRPT3",7,0)
 D INIT ;set counters to 0
"RTN","EDPRPT3",8,0)
 D:'$G(CSV) XML^EDPX("<logEntries>") I $G(CSV) D  ;headers
"RTN","EDPRPT3",9,0)
 . N TAB S TAB=$C(9)
"RTN","EDPRPT3",10,0)
 . S X="ED"_TAB_"Time In"_TAB_"Complaint"_TAB_"MD"_TAB_"Acuity"_TAB_"Elapsed"_TAB_"Triage"_TAB_"Wait"_TAB_"Dispo"_TAB_"Adm Dec"_TAB_"Adm Del"_TAB_"Delay"
"RTN","EDPRPT3",11,0)
 . D ADD^EDPCSV(X)
"RTN","EDPRPT3",12,0)
 S IN=BEG-.000001
"RTN","EDPRPT3",13,0)
 F  S IN=$O(^EDP(230,"ATI",EDPSITE,IN)) Q:'IN  Q:IN>END  S LOG=0 F  S LOG=+$O(^EDP(230,"ATI",EDPSITE,IN,LOG)) Q:LOG<1  D
"RTN","EDPRPT3",14,0)
 . S X0=^EDP(230,LOG,0),X1=$G(^(1)),X3=$G(^(3)),X4=$G(^(4,1,0))
"RTN","EDPRPT3",15,0)
 . ;TDP - Patch 2 change to capture Missed Opportunities
"RTN","EDPRPT3",16,0)
 . ;      without abbreviations
"RTN","EDPRPT3",17,0)
 . ;S DISP=$$ECODE^EDPRPT($P(X1,U,2)) Q:'$$MISSEDOP(DISP)
"RTN","EDPRPT3",18,0)
 . S DISP=$$ECODE^EDPRPT($P(X1,U,2))
"RTN","EDPRPT3",19,0)
 . I DISP="" S DISP=$$DISP^EDPRPT($P(X1,U,2))
"RTN","EDPRPT3",20,0)
 . I '$$MISSEDOP(DISP),'$$MISSOP1($P(X1,U,2)) Q
"RTN","EDPRPT3",21,0)
 . S OUT=$P(X0,U,9) ;S:OUT="" OUT=NOW
"RTN","EDPRPT3",22,0)
 . K ROW S ROW("id")=LOG
"RTN","EDPRPT3",23,0)
 . S ROW("inTS")=$S($G(CSV):$$EDATE^EDPRPT(IN),1:IN)
"RTN","EDPRPT3",24,0)
 . S ROW("complaint")=$P(X1,U)
"RTN","EDPRPT3",25,0)
 . S ROW("acuity")=$$ECODE^EDPRPT($P(X3,U,3))
"RTN","EDPRPT3",26,0)
 . S ROW("md")=$$EPERS^EDPRPT($P(X3,U,5))
"RTN","EDPRPT3",27,0)
 . S ROW("disposition")=DISP
"RTN","EDPRPT3",28,0)
 . S DISP=$$UP^XLFSTR(DISP),CNT(DISP)=CNT(DISP)+1
"RTN","EDPRPT3",29,0)
 . ;
"RTN","EDPRPT3",30,0)
 . ; calculate times
"RTN","EDPRPT3",31,0)
 . S ROW("elapsed")=$S(OUT:($$FMDIFF^XLFDT(OUT,IN,2)\60),1:0)
"RTN","EDPRPT3",32,0)
 . S X=$$ACUITY^EDPRPT(LOG) ;S:X<1 X=OUT
"RTN","EDPRPT3",33,0)
 . S ROW("triage")=$S(X:($$FMDIFF^XLFDT(X,IN,2)\60),1:0)
"RTN","EDPRPT3",34,0)
 . S X=$$LVWAITRM^EDPRPT(LOG) ;S:X<1 X=IN
"RTN","EDPRPT3",35,0)
 . S ROW("wait")=$S(X:($$FMDIFF^XLFDT(X,IN,2)\60),1:0)
"RTN","EDPRPT3",36,0)
 . S X=$$ADMIT^EDPRPT(LOG)
"RTN","EDPRPT3",37,0)
 . S ROW("admDec")=$S(X:($$FMDIFF^XLFDT(X,IN,2)\60),1:0)
"RTN","EDPRPT3",38,0)
 . S ROW("admDel")=$S(X&OUT:($$FMDIFF^XLFDT(OUT,X,2)\60),1:0)
"RTN","EDPRPT3",39,0)
 . S ROW("delayReason")=$$ENAME^EDPRPT(+$P(X1,U,5))
"RTN","EDPRPT3",40,0)
 . I '$G(CSV) S X=$$XMLA^EDPX("log",.ROW) D XML^EDPX(X) Q
"RTN","EDPRPT3",41,0)
 . S X=ROW("id")
"RTN","EDPRPT3",42,0)
 . F I="inTS","complaint","md","acuity","elapsed","triage","wait","disposition","admDec","admDel","delayReason" S X=X_$C(9)_$G(ROW(I))
"RTN","EDPRPT3",43,0)
 . D ADD^EDPCSV(X)
"RTN","EDPRPT3",44,0)
 D:'$G(CSV) XML^EDPX("</logEntries>")
"RTN","EDPRPT3",45,0)
 ;
"RTN","EDPRPT3",46,0)
 ; return totals, as XML or CSV
"RTN","EDPRPT3",47,0)
 I '$G(CSV) S X=$$XMLA^EDPX("totals",.CNT) D XML^EDPX(X) Q
"RTN","EDPRPT3",48,0)
 N TAB S TAB=$C(9)
"RTN","EDPRPT3",49,0)
 S I="" F  S I=$O(CNT(I)) Q:I=""  D 
"RTN","EDPRPT3",50,0)
 . D BLANK^EDPCSV
"RTN","EDPRPT3",51,0)
 . S X=TAB_TAB_TAB_TAB_"Total "_CNT(I,0)_": "_CNT(I)
"RTN","EDPRPT3",52,0)
 . D ADD^EDPCSV(X)
"RTN","EDPRPT3",53,0)
 Q
"RTN","EDPRPT3",54,0)
 ;
"RTN","EDPRPT3",55,0)
INIT ; -- initialize counters
"RTN","EDPRPT3",56,0)
 N I,X,X2,DA,DISP,Y S CNT=0
"RTN","EDPRPT3",57,0)
 S X="" F  S X=$O(^EDPB(233.1,"AB","disposition",X)) Q:X=""  S I=+$O(^(X,0)) D
"RTN","EDPRPT3",58,0)
 . S X2=$P($G(^EDPB(233.1,I,0)),U,2)
"RTN","EDPRPT3",59,0)
 . I $$MISSEDOP(X) S CNT(X)=0,CNT(X,0)=X2
"RTN","EDPRPT3",60,0)
 ;TDP - Patch 2, Added additional disposition inits to prevent undefined
"RTN","EDPRPT3",61,0)
 ;      errors and capture dispositions without abbreviations
"RTN","EDPRPT3",62,0)
 S Y=EDPSTA_".disposition"
"RTN","EDPRPT3",63,0)
 S X=0 F  S X=$O(^EDPB(233.2,"AS",Y,X)) Q:X=""  D
"RTN","EDPRPT3",64,0)
 . S DA=0 F  S DA=$O(^EDPB(233.2,"AS",Y,X,DA)) Q:DA=""  D
"RTN","EDPRPT3",65,0)
 .. S DISP=$P($G(^EDPB(233.2,"AS",Y,X,DA)),U)
"RTN","EDPRPT3",66,0)
 .. I $L(DISP),'$D(CNT(DISP)),(($$MISSEDOP(DISP))!($$MISSOP1(X))) D
"RTN","EDPRPT3",67,0)
 ... S DISP=$$UP^XLFSTR(DISP)
"RTN","EDPRPT3",68,0)
 ... S X2=$P($G(^EDPB(233.1,X,0)),U,2)
"RTN","EDPRPT3",69,0)
 ... S CNT(DISP)=0,CNT(DISP,0)=X2
"RTN","EDPRPT3",70,0)
 .. ;I '$L(DISP) S DISP=$E("NONE/"_$P($G(^EDPB(233.2,"AS",Y,X,DA)),U,2),1,30) D
"RTN","EDPRPT3",71,0)
 .. I '$L(DISP) S DISP=$E($TR($P($G(^EDPB(233.2,"AS",Y,X,DA)),U,2)," ","_"),1,30) D
"RTN","EDPRPT3",72,0)
 ... S DISP=$$UP^XLFSTR(DISP)
"RTN","EDPRPT3",73,0)
 ... I (($D(CNT(DISP)))!(('$$MISSEDOP(DISP))&('$$MISSOP1(X)))) Q
"RTN","EDPRPT3",74,0)
 ... S X2=$P($G(^EDPB(233.1,X,0)),U,2)
"RTN","EDPRPT3",75,0)
 ... S CNT(DISP)=0,CNT(DISP,0)=X2
"RTN","EDPRPT3",76,0)
 Q
"RTN","EDPRPT3",77,0)
 ;
"RTN","EDPRPT3",78,0)
MISSEDOP(X) ; -- Return 1 or 0, if disposition indicates a missed opportunity
"RTN","EDPRPT3",79,0)
 I $G(X)="" Q 0
"RTN","EDPRPT3",80,0)
 N I,Y S X=$$UP^XLFSTR(X)
"RTN","EDPRPT3",81,0)
 S I=+$O(^EDPB(233.1,"AB","disposition",X,0))
"RTN","EDPRPT3",82,0)
 S Y=$S($P($G(^EDPB(233.1,I,0)),U,5)["M":1,1:0)
"RTN","EDPRPT3",83,0)
 Q Y
"RTN","EDPRPT3",84,0)
MISSOP1(X) ; -- Return 1 or 0, if disposition indicates a missed opportunity
"RTN","EDPRPT3",85,0)
 ;TDP - Patch 2, additional check for missed opportunity not relying on
"RTN","EDPRPT3",86,0)
 ;      an abbreviation existing.
"RTN","EDPRPT3",87,0)
 ; X = IEN in file 233.1
"RTN","EDPRPT3",88,0)
 I +$G(X)=0 Q 0
"RTN","EDPRPT3",89,0)
 N Y
"RTN","EDPRPT3",90,0)
 S Y=$S($P($G(^EDPB(233.1,X,0)),U,5)["M":1,1:0)
"RTN","EDPRPT3",91,0)
 Q Y
"RTN","EDPRPT4")
0^37^B32540898^B25030915
"RTN","EDPRPT4",1,0)
EDPRPT4 ;SLC/MKB - Delay Summary Report ;4/26/13 12:27pm
"RTN","EDPRPT4",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;May 2, 2012;Build 200
"RTN","EDPRPT4",3,0)
 ;
"RTN","EDPRPT4",4,0)
SUM(BEG,END,CSV) ; Get Delay Report for EDPSITE by date range
"RTN","EDPRPT4",5,0)
 ;   CNT = counters
"RTN","EDPRPT4",6,0)
 ;   MIN = accumulate #minutes
"RTN","EDPRPT4",7,0)
 N IN,OUT,LOG,X,X0,X1,X3,X4,ELAPSE,ADMDEC,ADMDEL,DISP,STS,VADM,CNT,MIN,PROV,DEL,ACU,Y
"RTN","EDPRPT4",8,0)
 D INIT ;set counters, sums to 0
"RTN","EDPRPT4",9,0)
 S IN=BEG-.000001
"RTN","EDPRPT4",10,0)
 F  S IN=$O(^EDP(230,"ATI",EDPSITE,IN)) Q:'IN  Q:IN>END  S LOG=0 F  S LOG=+$O(^EDP(230,"ATI",EDPSITE,IN,LOG)) Q:LOG<1  D
"RTN","EDPRPT4",11,0)
 . S X0=^EDP(230,LOG,0),X1=$G(^(1)),X3=$G(^(3)),X4=$G(^(4,1,0))
"RTN","EDPRPT4",12,0)
 . S DISP=$$ECODE^EDPRPT($P(X1,U,2)),VADM=$$VADMIT^EDPRPT2(DISP)
"RTN","EDPRPT4",13,0)
 . ;TDP - Patch 2, additional check for VA Admissions w/o abbreviation
"RTN","EDPRPT4",14,0)
 . I VADM=0 S VADM=$$VADMIT1^EDPRPT2($P(X1,U,2))
"RTN","EDPRPT4",15,0)
 . S ACU=$$ECODE($P(X3,U,3)),STS=$P(X3,U,2)
"RTN","EDPRPT4",16,0)
 . S DEL=+$P(X1,U,5),CNT=CNT+1
"RTN","EDPRPT4",17,0)
 . S OUT=$P(X0,U,9) ;S:OUT="" OUT=NOW
"RTN","EDPRPT4",18,0)
 . S ELAPSE=$S(OUT:($$FMDIFF^XLFDT(OUT,IN,2)\60),1:0),MIN=MIN+ELAPSE
"RTN","EDPRPT4",19,0)
D1 . ; all admissions
"RTN","EDPRPT4",20,0)
 . S (ADMDEC,ADMDEL)=0
"RTN","EDPRPT4",21,0)
 . S X=$$ADMIT^EDPRPT(LOG) I X D
"RTN","EDPRPT4",22,0)
 .. S ADMDEC=$$FMDIFF^XLFDT(X,IN,2)\60
"RTN","EDPRPT4",23,0)
 .. S:ADMDEC CNT("DEC")=CNT("DEC")+1,MIN("DEC")=MIN("DEC")+ADMDEC
"RTN","EDPRPT4",24,0)
 .. S ADMDEL=$S(OUT:($$FMDIFF^XLFDT(OUT,X,2)\60),1:0)
"RTN","EDPRPT4",25,0)
 . S:$$OBS(STS) CNT("OBS")=CNT("OBS")+1
"RTN","EDPRPT4",26,0)
D2 . ; VA admissions only
"RTN","EDPRPT4",27,0)
 . I VADM D
"RTN","EDPRPT4",28,0)
 .. S CNT("VA")=CNT("VA")+1
"RTN","EDPRPT4",29,0)
 .. S MIN("VA")=MIN("VA")+ELAPSE
"RTN","EDPRPT4",30,0)
 .. S MIN("VADEC")=MIN("VADEC")+ADMDEC
"RTN","EDPRPT4",31,0)
 .. S MIN("VADEL")=MIN("VADEL")+ADMDEL
"RTN","EDPRPT4",32,0)
 .. S:ADMDEL>359 CNT("VADEL6")=CNT("VADEL6")+1
"RTN","EDPRPT4",33,0)
D3 . ; elapsed visit time >=6 hrs
"RTN","EDPRPT4",34,0)
 . S:ELAPSE>1380 CNT("23+")=CNT("23+")+1
"RTN","EDPRPT4",35,0)
 . I ELAPSE>359 D
"RTN","EDPRPT4",36,0)
 .. S CNT("6+")=CNT("6+")+1
"RTN","EDPRPT4",37,0)
 .. S:VADM CNT("VA6")=CNT("VA6")+1
"RTN","EDPRPT4",38,0)
 . S:DEL CNT(DEL,ACU)=+$G(CNT(DEL,ACU))+1,CNT(DEL)=+$G(CNT(DEL))+1
"RTN","EDPRPT4",39,0)
 ;
"RTN","EDPRPT4",40,0)
D4 ; return counts and averages as CSV
"RTN","EDPRPT4",41,0)
 I $G(CSV) D  Q
"RTN","EDPRPT4",42,0)
 . N TAB S TAB=$C(9)
"RTN","EDPRPT4",43,0)
 . ;***pij 4/25/2013
"RTN","EDPRPT4",44,0)
 . ;S X=TAB_TAB_"Delay Reason"_TAB_"0"_TAB_"1"_TAB_"2"_TAB_"3"_TAB_"4"_TAB_"5"_TAB_"Total"
"RTN","EDPRPT4",45,0)
 . ; BWF 4/26/2013 - Adding proper header
"RTN","EDPRPT4",46,0)
 . S X="Delay Summary Report from "_$$FMTE^XLFDT(BEG)_" to "_$$FMTE^XLFDT(END)
"RTN","EDPRPT4",47,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV ;headers
"RTN","EDPRPT4",48,0)
 . S X="All ED Visits"_TAB_"VA Admitted"_TAB_"Not VA Admitted"
"RTN","EDPRPT4",49,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT4",50,0)
 . S Y=CNT("VA")
"RTN","EDPRPT4",51,0)
 . S X="Total Visits: "_CNT_TAB_"Total Visits: "_Y
"RTN","EDPRPT4",52,0)
 . S Y=CNT-CNT("VA"),X=X_TAB_"Total Visits: "_Y
"RTN","EDPRPT4",53,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT4",54,0)
 . S X="Total Visits Over Six Hours: "_CNT("6+")_TAB
"RTN","EDPRPT4",55,0)
 . S X=X_"Total Visits Over Six Hours: "_CNT("VA6")_TAB
"RTN","EDPRPT4",56,0)
 . S X=X_"Average Visit Time: "_$S(Y:$$ETIME^EDPRPT((MIN-MIN("VA")\Y)),1:0)
"RTN","EDPRPT4",57,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT4",58,0)
 . S X="Total Visits Over 23 Hours: "_CNT("23+")_TAB
"RTN","EDPRPT4",59,0)
 . S Y=CNT("VA"),X=X_"Average Admit Decision Time: "_$S(Y:$$ETIME^EDPRPT(MIN("VADEC")\Y),1:0)
"RTN","EDPRPT4",60,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT4",61,0)
 . S X="Average Visit Time: "_$S(CNT:$$ETIME^EDPRPT(MIN\CNT),1:0)_TAB
"RTN","EDPRPT4",62,0)
 . S Y=CNT("VA"),X=X_"Average Delay Time: "_$S(Y:$$ETIME^EDPRPT(MIN("VADEL")\Y),1:0)
"RTN","EDPRPT4",63,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT4",64,0)
 . S Y=CNT("DEC"),X="Average Admit Decision Time: "_$S(Y:$$ETIME^EDPRPT(MIN("DEC")\Y),1:0)_TAB
"RTN","EDPRPT4",65,0)
 . S X=X_"Number of Admit Delays over Six Hours: "_CNT("VADEL6")
"RTN","EDPRPT4",66,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT4",67,0)
 . S X="Number Admitted to Observation: "_CNT("OBS")
"RTN","EDPRPT4",68,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT4",69,0)
 . D BLANK^EDPCSV
"RTN","EDPRPT4",70,0)
 . ;***pij 4/26/2013 delete 2 TABs
"RTN","EDPRPT4",71,0)
 . ;S X=TAB_TAB_"Delay Chart" D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT4",72,0)
 . ;BWF 4/26/2013 - Adding Header for rest of report
"RTN","EDPRPT4",73,0)
 . D BLANK^EDPCSV ;add blank line
"RTN","EDPRPT4",74,0)
 . S X="Delay Chart from "_$$FMTE^XLFDT(BEG)_" to "_$$FMTE^XLFDT(END) D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT4",75,0)
 . ;S X="Delay Chart" D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT4",76,0)
 . ;S X=TAB_TAB_"Acuity"_TAB_"None"_TAB_"1"_TAB_"2"_TAB_"3"_TAB_"4"_TAB_"5"_TAB_"Total"
"RTN","EDPRPT4",77,0)
 . S X="Acuity"_TAB_"None"_TAB_"1"_TAB_"2"_TAB_"3"_TAB_"4"_TAB_"5"_TAB_"Total"
"RTN","EDPRPT4",78,0)
 . ;***
"RTN","EDPRPT4",79,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT4",80,0)
 . S DEL=0 F  S DEL=$O(CNT(DEL)) Q:+DEL'=DEL  D
"RTN","EDPRPT4",81,0)
 .. ;***pij 4/26/2013 remove the 2 TABs for each row from Delay Chart
"RTN","EDPRPT4",82,0)
 .. ;S X=$$ENAME^EDPRPT(DEL) Q:X=""  Q:X?1." "  S X=TAB_TAB_X ;novalue
"RTN","EDPRPT4",83,0)
 .. S X=$$ENAME^EDPRPT(DEL) Q:X=""  Q:X?1." "  ;S X=TAB_TAB_X ;novalue
"RTN","EDPRPT4",84,0)
 .. ;***
"RTN","EDPRPT4",85,0)
 .. F I="none","one","two","three","four","five" S X=X_TAB_+$G(CNT(DEL,I))
"RTN","EDPRPT4",86,0)
 .. S X=X_TAB_CNT(DEL) D ADD^EDPCSV(X)
"RTN","EDPRPT4",87,0)
D5 ; or return counts and averages as XML
"RTN","EDPRPT4",88,0)
 D XML^EDPX("<averages>")
"RTN","EDPRPT4",89,0)
 S X="<average type='All Patients' total='"_CNT
"RTN","EDPRPT4",90,0)
 S X=X_"' avgTime='"_$S(CNT:$$ETIME^EDPRPT(MIN\CNT),1:0)
"RTN","EDPRPT4",91,0)
 S X=X_"' num6hr='"_CNT("6+")_"' num23hr='"_CNT("23+"),Y=CNT("DEC")
"RTN","EDPRPT4",92,0)
 S X=X_"' avgAdmDec='"_$S(Y:$$ETIME^EDPRPT(MIN("DEC")\Y),1:0)
"RTN","EDPRPT4",93,0)
 S X=X_"' numObs='"_CNT("OBS")_"' />"
"RTN","EDPRPT4",94,0)
 D XML^EDPX(X)
"RTN","EDPRPT4",95,0)
 S Y=CNT-CNT("VA")
"RTN","EDPRPT4",96,0)
 S X="<average type='Not VA Admitted' total='"_Y_"' avgTime='"_$S(Y:$$ETIME^EDPRPT((MIN-MIN("VA")\Y)),1:0)_"' />"
"RTN","EDPRPT4",97,0)
 D XML^EDPX(X)
"RTN","EDPRPT4",98,0)
 S Y=CNT("VA"),X="<average type='VA Admitted' total='"_Y
"RTN","EDPRPT4",99,0)
 S X=X_"' num6hr='"_CNT("VA6")_"' numAdmDel6hr='"_CNT("VADEL6")
"RTN","EDPRPT4",100,0)
 S X=X_"' avgAdmDel='"_$S(Y:$$ETIME^EDPRPT(MIN("VADEL")\Y),1:0)
"RTN","EDPRPT4",101,0)
 S X=X_"' avgAdmDec='"_$S(Y:$$ETIME^EDPRPT(MIN("VADEC")\Y),1:0)_"' />"
"RTN","EDPRPT4",102,0)
 D XML^EDPX(X)
"RTN","EDPRPT4",103,0)
 D XML^EDPX("</averages>")
"RTN","EDPRPT4",104,0)
 D XML^EDPX("<delayChart>")
"RTN","EDPRPT4",105,0)
 S DEL=0 F  S DEL=$O(CNT(DEL)) Q:+DEL'=DEL  D
"RTN","EDPRPT4",106,0)
 . S X=$$ENAME^EDPRPT(DEL) Q:X=""  Q:X?1." "  ;novalue
"RTN","EDPRPT4",107,0)
 . S CNT(DEL,"reason")=X,CNT(DEL,"total")=CNT(DEL)
"RTN","EDPRPT4",108,0)
 . F I="none","one","two","three","four","five" S CNT(DEL,I)=+$G(CNT(DEL,I))
"RTN","EDPRPT4",109,0)
 . K ROW M ROW=CNT(DEL)
"RTN","EDPRPT4",110,0)
 . S X=$$XMLA^EDPX("delay",.ROW) D XML^EDPX(X)
"RTN","EDPRPT4",111,0)
 D XML^EDPX("</delayChart>")
"RTN","EDPRPT4",112,0)
 Q
"RTN","EDPRPT4",113,0)
 ;
"RTN","EDPRPT4",114,0)
INIT ; Initialize counters and sums
"RTN","EDPRPT4",115,0)
 N I S (CNT,MIN)=0
"RTN","EDPRPT4",116,0)
 F I="DEC","VA","VA6","VADEL6","6+","23+","OBS" S CNT(I)=0
"RTN","EDPRPT4",117,0)
 F I="DEC","VA","VADEC","VADEL" S MIN(I)=0
"RTN","EDPRPT4",118,0)
 Q
"RTN","EDPRPT4",119,0)
 ;
"RTN","EDPRPT4",120,0)
ECODE(IEN) ; Return external value for an Acuity code
"RTN","EDPRPT4",121,0)
 N X,Y S X=$P($G(^EDPB(233.1,+IEN,0)),U,3) ;code
"RTN","EDPRPT4",122,0)
 S Y=$S(X="":"none",X=1:"one",X=2:"two",X=3:"three",X=4:"four",X=5:"five",1:"X")
"RTN","EDPRPT4",123,0)
 Q Y
"RTN","EDPRPT4",124,0)
 ;
"RTN","EDPRPT4",125,0)
OBS(IEN) ; Return 1 or 0, if status IEN indicates Observation
"RTN","EDPRPT4",126,0)
 I $G(IEN),$P($G(^EDPB(233.1,+IEN,0)),U,5)["O" Q 1
"RTN","EDPRPT4",127,0)
 Q 0
"RTN","EDPRPT7C")
0^35^B22153636^B20628134
"RTN","EDPRPT7C",1,0)
EDPRPT7C ;SLC/MKB - Exposure Report (CSV format) ;4/25/13 3:15pm
"RTN","EDPRPT7C",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;May 2, 2012;Build 200
"RTN","EDPRPT7C",3,0)
 ;
"RTN","EDPRPT7C",4,0)
EXP(IEN) ; Get Exposure Report for IEN at EDPSITE
"RTN","EDPRPT7C",5,0)
 S IEN=+$G(IEN)  Q:IEN<1  Q:'$D(^EDP(230,IEN,0))
"RTN","EDPRPT7C",6,0)
 N BEG,END,LIST,LOG,IN,OUT,X,X0,Y,RLIST,TREAT,OTHER,MD,RN,RES,I,J,RIN,ROUT,TAB
"RTN","EDPRPT7C",7,0)
 N SHIFT D SETUP^EDPRPT5 ;build SHIFT(#)
"RTN","EDPRPT7C",8,0)
 I 'SHIFT D ERR^EDPRPT(2300013) Q
"RTN","EDPRPT7C",9,0)
 S X0=^EDP(230,IEN,0),BEG=$P(X0,U,8),END=$P(X0,U,9),TAB=$C(9)
"RTN","EDPRPT7C",10,0)
 S:'BEG BEG=$P(X0,U) S:'END END=$$NOW^EDPRPT
"RTN","EDPRPT7C",11,0)
 D ROOMS(IEN,END)
"RTN","EDPRPT7C",12,0)
 ; put IEN info into CSV
"RTN","EDPRPT7C",13,0)
 ;***pij 4/19/2013 changed ED to IEN
"RTN","EDPRPT7C",14,0)
 ;S X="ED"_TAB_"Room"_TAB_"Shift - Time In"_TAB_"Shift - Time Out"_TAB_"Diagnosis"_TAB_"Dispo"_TAB_"Arr Mode"_TAB_"Notes"
"RTN","EDPRPT7C",15,0)
 S X="IEN"_TAB_"Room"_TAB_"Shift - Time In"_TAB_"Shift - Time Out"_TAB_"Diagnosis"_TAB_"Dispo"_TAB_"Arr Mode"_TAB_"Notes"
"RTN","EDPRPT7C",16,0)
 ;***
"RTN","EDPRPT7C",17,0)
 D ADD^EDPCSV(X),BLANK^EDPCSV ;headers
"RTN","EDPRPT7C",18,0)
 S X=TAB_TAB_"Contagious Patient Information"
"RTN","EDPRPT7C",19,0)
 D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPT7C",20,0)
 D ADD(IEN),STAFF(IEN)
"RTN","EDPRPT7C",21,0)
 D BLANK^EDPCSV
"RTN","EDPRPT7C",22,0)
E1 ; look for patients also in ED between BEG and END
"RTN","EDPRPT7C",23,0)
 D FIND(BEG,END) ;create LIST(#) list of ien's to check
"RTN","EDPRPT7C",24,0)
 S LOG=0 F  S LOG=+$O(LIST(LOG)) Q:'LOG  I LOG'=IEN D
"RTN","EDPRPT7C",25,0)
 . S X0=$G(^EDP(230,LOG,0)),IN=$P(X0,U,8),OUT=$P(X0,U,9)
"RTN","EDPRPT7C",26,0)
 . D ROOMS(LOG,OUT)
"RTN","EDPRPT7C",27,0)
 . ; compare treatment rooms
"RTN","EDPRPT7C",28,0)
 . S I=0 F  S I=$O(RLIST(IEN,I)) Q:I<1  D
"RTN","EDPRPT7C",29,0)
 .. S RIN=$P(RLIST(IEN,I),U,2),ROUT=$P(RLIST(IEN,I),U,3)
"RTN","EDPRPT7C",30,0)
 .. S J=0 F  S J=$O(RLIST(LOG,J)) Q:J<1  I +RLIST(IEN,I)=+RLIST(LOG,J) D
"RTN","EDPRPT7C",31,0)
 ... S X=$P(RLIST(LOG,J),U,2) Q:X>ROUT     ;in to room after IEN left
"RTN","EDPRPT7C",32,0)
 ... ;I (RIN<=X)&(X<=ROUT) S TREAT(LOG)="" Q
"RTN","EDPRPT7C",33,0)
 ... S X=$P(RLIST(LOG,J),U,3) Q:X&(X<RIN)  ;out of room before IEN came
"RTN","EDPRPT7C",34,0)
 ... ;I (RIN<=X)&(X<=ROUT) S TREAT(LOG)="" Q
"RTN","EDPRPT7C",35,0)
 ... S TREAT(LOG)=""
"RTN","EDPRPT7C",36,0)
 . I '$D(TREAT(LOG)) S OTHER(LOG)=""
"RTN","EDPRPT7C",37,0)
E2 ; return treatment room patients
"RTN","EDPRPT7C",38,0)
 ;***pij 4/19/2013
"RTN","EDPRPT7C",39,0)
 ;D ADD^EDPCSV(TAB_TAB_"Exposed in Treatment Room"),BLANK^EDPCSV
"RTN","EDPRPT7C",40,0)
 D ADD^EDPCSV(TAB_TAB_"Patients Directly Exposed in Different Treatment Rooms"),BLANK^EDPCSV
"RTN","EDPRPT7C",41,0)
 ;***
"RTN","EDPRPT7C",42,0)
 I '$O(TREAT(0)) D ADD^EDPCSV(TAB_TAB_"  None")
"RTN","EDPRPT7C",43,0)
 E  S LOG=0 F  S LOG=$O(TREAT(LOG)) Q:LOG<1  D ADD(LOG),STAFF(LOG)
"RTN","EDPRPT7C",44,0)
 D BLANK^EDPCSV
"RTN","EDPRPT7C",45,0)
 ; return other ED patients
"RTN","EDPRPT7C",46,0)
 D ADD^EDPCSV(TAB_TAB_"Other ED Patients"),BLANK^EDPCSV
"RTN","EDPRPT7C",47,0)
 I '$O(OTHER(0)) D ADD^EDPCSV(TAB_TAB_"  None")
"RTN","EDPRPT7C",48,0)
 E  S LOG=0 F  S LOG=$O(OTHER(LOG)) Q:LOG<1  D ADD(LOG),STAFF(LOG)
"RTN","EDPRPT7C",49,0)
 D BLANK^EDPCSV
"RTN","EDPRPT7C",50,0)
E3 ; return staff on duty
"RTN","EDPRPT7C",51,0)
 N MAX,MORE D ADD^EDPCSV(TAB_TAB_"On Duty Staff")
"RTN","EDPRPT7C",52,0)
 D ADD^EDPCSV(TAB_"Doctors"_TAB_"Nurses"_TAB_"Residents")
"RTN","EDPRPT7C",53,0)
 S MAX=+$G(RN) S:$G(MD)>MAX MAX=+MD S:$G(RES)>MAX MAX=+RES
"RTN","EDPRPT7C",54,0)
 S MORE=1,(MD,RN,RES)=0 F  D  Q:'MORE
"RTN","EDPRPT7C",55,0)
 . S:MD'="" MD=$O(MD(MD)) S:RN'="" RN=$O(RN(RN))
"RTN","EDPRPT7C",56,0)
 . S:RES'="" RES=$O(RES(RES)) ;get next
"RTN","EDPRPT7C",57,0)
 . I MD="",RN="",RES="" S MORE=0 Q  ;done
"RTN","EDPRPT7C",58,0)
 . S X=TAB_$S(MD:MD(MD),1:"")_TAB_$S(RN:RN(RN),1:"")_TAB_$S(RES:RES(RES),1:"")
"RTN","EDPRPT7C",59,0)
 . D ADD^EDPCSV(X)
"RTN","EDPRPT7C",60,0)
 Q
"RTN","EDPRPT7C",61,0)
 ;
"RTN","EDPRPT7C",62,0)
FIND(IN,OUT) ; create LIST(#) of visits at same time
"RTN","EDPRPT7C",63,0)
 N TIME,I,X K LIST
"RTN","EDPRPT7C",64,0)
 S TIME=+$P(IN,".") ;ck today's arrivals
"RTN","EDPRPT7C",65,0)
 F  S TIME=$O(^EDP(230,"ATI",EDPSITE,TIME)) Q:TIME<1!(TIME>OUT)  D
"RTN","EDPRPT7C",66,0)
 . S I=0 F  S I=$O(^EDP(230,"ATI",EDPSITE,TIME,I)) Q:I<1  D
"RTN","EDPRPT7C",67,0)
 .. S X=$P($G(^EDP(230,I,0)),U,9) I X,X<IN Q  ;left before IEN arrived
"RTN","EDPRPT7C",68,0)
 .. S LIST(I)=""
"RTN","EDPRPT7C",69,0)
 Q
"RTN","EDPRPT7C",70,0)
 ;
"RTN","EDPRPT7C",71,0)
ROOMS(LOG,OUT) ; Return RLIST(LOG,n)= room ^ time in ^ time out
"RTN","EDPRPT7C",72,0)
 N N,D,I,X,LAST S N=0,LAST=""
"RTN","EDPRPT7C",73,0)
 S D=0 F  S D=$O(^EDP(230.1,"ADF",LOG,D)) Q:D<1  S I=+$O(^(D,0)) D
"RTN","EDPRPT7C",74,0)
 . S X=+$P($G(^EDP(230.1,I,3)),U,4) Q:'X  Q:X=LAST  ;no location change
"RTN","EDPRPT7C",75,0)
 . S:N $P(RLIST(LOG,N),U,3)=D ;time in of next room = time out of prev
"RTN","EDPRPT7C",76,0)
 . S N=N+1,RLIST(LOG,N)=X_U_D,LAST=X ;new room
"RTN","EDPRPT7C",77,0)
 I N,'$P(RLIST(LOG,N),U,3) S $P(RLIST(LOG,N),U,3)=OUT
"RTN","EDPRPT7C",78,0)
 Q
"RTN","EDPRPT7C",79,0)
 ;
"RTN","EDPRPT7C",80,0)
ADD(LOG) ; Add row to CSV for each room used during visit
"RTN","EDPRPT7C",81,0)
 N EDPI,EDPX,ROW,LABS,XRAY,X,X0
"RTN","EDPRPT7C",82,0)
 S EDPI=0 F  S EDPI=$O(RLIST(LOG,EDPI)) Q:EDPI<1  S EDPX=RLIST(LOG,EDPI) D
"RTN","EDPRPT7C",83,0)
 . S ROW=$S(EDPI=1:LOG,1:"")_TAB_$P($G(^EDPB(231.8,+EDPX,0)),U)
"RTN","EDPRPT7C",84,0)
 . S X=$P(EDPX,U,2) ;shiftTimeIn
"RTN","EDPRPT7C",85,0)
 . S ROW=ROW_TAB_$$SHIFT^EDPRPT5(X)_" - "_$$EDATE^EDPRPT(X)
"RTN","EDPRPT7C",86,0)
 . S X=$P(EDPX,U,3) ;shiftTimeOut
"RTN","EDPRPT7C",87,0)
 . S ROW=ROW_TAB_$$SHIFT^EDPRPT5(X)_" - "_$$EDATE^EDPRPT(X)
"RTN","EDPRPT7C",88,0)
 . S X0=$G(^EDP(230,LOG,0)),X=$$DXPRI^EDPQPCE(+$P(X0,U,3),LOG)
"RTN","EDPRPT7C",89,0)
 . S ROW=ROW_TAB_$P(X,U,2) ;Dx
"RTN","EDPRPT7C",90,0)
 . ;TDP - Patch 2 mod to capture all dispositions
"RTN","EDPRPT7C",91,0)
 . S X=$P($G(^EDP(230,LOG,1)),U,2),ROW=ROW_TAB_$S($$ECODE^EDPRPT(X)'="":$$ECODE^EDPRPT(X),1:$$DISP^EDPRPT(X)) ;dis
"RTN","EDPRPT7C",92,0)
 . S X=$P(X0,U,10),ROW=ROW_TAB_$$ENAME^EDPRPT(X) ;arrival
"RTN","EDPRPT7C",93,0)
 . S LABS=$D(^EDP(230,LOG,8,"AC","L")),XRAY=$D(^("R")),X=""
"RTN","EDPRPT7C",94,0)
 . I LABS!XRAY D  S X=X_" ordered"
"RTN","EDPRPT7C",95,0)
 .. I LABS&XRAY S X="Labs and Imaging" Q
"RTN","EDPRPT7C",96,0)
 .. S:LABS X="Labs" S:XRAY X="Imaging"
"RTN","EDPRPT7C",97,0)
 . S ROW=ROW_TAB_X ;notes
"RTN","EDPRPT7C",98,0)
 . D ADD^EDPCSV(ROW)
"RTN","EDPRPT7C",99,0)
 Q
"RTN","EDPRPT7C",100,0)
 ;
"RTN","EDPRPT7C",101,0)
STAFF(LOG) ; save staff involved in patient care
"RTN","EDPRPT7C",102,0)
 N D,I,X,ACT S LOG=+$G(LOG)
"RTN","EDPRPT7C",103,0)
 S D=0 F  S D=$O(^EDP(230.1,"ADF",LOG,D)) Q:D<1  S I=+$O(^(D,0)) D
"RTN","EDPRPT7C",104,0)
 . S ACT=$G(^EDP(230.1,I,3))
"RTN","EDPRPT7C",105,0)
 . S X=+$P(ACT,U,5) S:X MD(X)=$$EPERS^EDPRPT(X)
"RTN","EDPRPT7C",106,0)
 . S X=+$P(ACT,U,6) S:X RN(X)=$$EPERS^EDPRPT(X)
"RTN","EDPRPT7C",107,0)
 . S X=+$P(ACT,U,7) S:X RES(X)=$$EPERS^EDPRPT(X)
"RTN","EDPRPT7C",108,0)
 Q
"RTN","EDPRPT8")
0^20^B15923220^B15247059
"RTN","EDPRPT8",1,0)
EDPRPT8 ;SLC/MKB - Acuity Report ;2/28/12 08:33am
"RTN","EDPRPT8",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;Feb 24, 2012;Build 200
"RTN","EDPRPT8",3,0)
 ;
"RTN","EDPRPT8",4,0)
ACU(BEG,END,CSV) ; Get Acuity Report for EDPSITE by date range
"RTN","EDPRPT8",5,0)
 ;   CNT = counters by acuity
"RTN","EDPRPT8",6,0)
 ;   ADM = counters for all admissions
"RTN","EDPRPT8",7,0)
 ;   VA  = counters for VA  admissions
"RTN","EDPRPT8",8,0)
 ;   MIN = accumulate #minutes
"RTN","EDPRPT8",9,0)
 N IN,OUT,X,X0,X1,X3,X4,DISP,ACU,CNT,ADM,MIN,VA,ROW,ADMDEC,ADMDEL,LOG
"RTN","EDPRPT8",10,0)
 D INIT ;set counters, sums to 0
"RTN","EDPRPT8",11,0)
 S IN=BEG-.000001
"RTN","EDPRPT8",12,0)
 F  S IN=$O(^EDP(230,"ATI",EDPSITE,IN)) Q:'IN  Q:IN>END  S LOG=0 F  S LOG=+$O(^EDP(230,"ATI",EDPSITE,IN,LOG)) Q:LOG<1  D
"RTN","EDPRPT8",13,0)
 . S X0=^EDP(230,LOG,0),X1=$G(^(1)),X3=$G(^(3)),X4=$G(^(4,1,0))
"RTN","EDPRPT8",14,0)
 . S DISP=$$ECODE^EDPRPT($P(X1,U,2)),ACU=$$ECODE($P(X3,U,3))
"RTN","EDPRPT8",15,0)
 . S CNT=CNT+1,CNT(ACU)=CNT(ACU)+1
"RTN","EDPRPT8",16,0)
 . ; all admissions
"RTN","EDPRPT8",17,0)
 . S (ADMDEC,ADMDEL)=0
"RTN","EDPRPT8",18,0)
 . S X=$$ADMIT^EDPRPT(LOG) I X D  ;decision to admit
"RTN","EDPRPT8",19,0)
 .. S ADM=ADM+1,ADM(ACU)=ADM(ACU)+1
"RTN","EDPRPT8",20,0)
 .. S ADMDEC=$$FMDIFF^XLFDT(X,IN,2)\60
"RTN","EDPRPT8",21,0)
 .. S:ADMDEC MIN("DEC")=MIN("DEC")+ADMDEC,MIN("DEC",ACU)=MIN("DEC",ACU)+ADMDEC
"RTN","EDPRPT8",22,0)
 .. S OUT=$P(X0,U,9) ;S:OUT="" OUT=NOW
"RTN","EDPRPT8",23,0)
 .. S:OUT ADMDEL=$$FMDIFF^XLFDT(OUT,X,2)\60
"RTN","EDPRPT8",24,0)
 . ;TDP - Patch 2, insure all VA Admissions are counted. Added VADMIT1.
"RTN","EDPRPT8",25,0)
 . I (($$VADMIT^EDPRPT2(DISP))!($$VADMIT1^EDPRPT2($P(X1,U,2)))) D  ;VA admissions
"RTN","EDPRPT8",26,0)
 .. S VA=VA+1,VA(ACU)=VA(ACU)+1
"RTN","EDPRPT8",27,0)
 .. S MIN("VADEC")=MIN("VADEC")+ADMDEC
"RTN","EDPRPT8",28,0)
 .. S MIN("VADEC",ACU)=MIN("VADEC",ACU)+ADMDEC
"RTN","EDPRPT8",29,0)
 .. S MIN("VADEL")=MIN("VADEL")+ADMDEL
"RTN","EDPRPT8",30,0)
 .. S MIN("VADEL",ACU)=MIN("VADEL",ACU)+ADMDEL
"RTN","EDPRPT8",31,0)
A1 ; return counts and averages
"RTN","EDPRPT8",32,0)
 S I="" F  S I=$O(ADM(I)) Q:I=""  D  ;avg #min admit dec by acuity
"RTN","EDPRPT8",33,0)
 . S MIN("DEC",I)=$S(ADM(I):$$ETIME^EDPRPT(MIN("DEC",I)\ADM(I)),1:0)
"RTN","EDPRPT8",34,0)
 . S MIN("VADEC",I)=$S(VA(I):$$ETIME^EDPRPT(MIN("VADEC",I)\VA(I)),1:0)
"RTN","EDPRPT8",35,0)
 . S MIN("VADEL",I)=$S(VA(I):$$ETIME^EDPRPT(MIN("VADEL",I)\VA(I)),1:0)
"RTN","EDPRPT8",36,0)
 S CNT("total")=CNT,ADM("total")=ADM,VA("total")=VA
"RTN","EDPRPT8",37,0)
 S CNT("type")="Number of Patients",ADM("type")="Number Admitted",VA("type")="Number VA Admitted"
"RTN","EDPRPT8",38,0)
 S MIN("DEC","type")="Avg All Admit Dec Time",MIN("VADEC","type")="Avg VA Admit Dec Time",MIN("VADEL","type")="Avg VA Admit Delay Time"
"RTN","EDPRPT8",39,0)
 S MIN("DEC","total")=$S(ADM:$$ETIME^EDPRPT(MIN("DEC")\ADM),1:0)
"RTN","EDPRPT8",40,0)
 S MIN("VADEC","total")=$S(VA:$$ETIME^EDPRPT(MIN("VADEC")\VA),1:0)
"RTN","EDPRPT8",41,0)
 S MIN("VADEL","total")=$S(VA:$$ETIME^EDPRPT(MIN("VADEL")\VA),1:0)
"RTN","EDPRPT8",42,0)
 ; as CSV
"RTN","EDPRPT8",43,0)
 I $G(CSV) D  Q
"RTN","EDPRPT8",44,0)
 . N TAB S TAB=$C(9)
"RTN","EDPRPT8",45,0)
 . ;S X="Acuity->"_TAB_"0"_TAB_"1"_TAB_"2"_TAB_"3"_TAB_"4"_TAB_"5"_TAB_"Total/Average"
"RTN","EDPRPT8",46,0)
 . S X="Acuity->"_TAB_"None"_TAB_"1"_TAB_"2"_TAB_"3"_TAB_"4"_TAB_"5"_TAB_"Total/Average"
"RTN","EDPRPT8",47,0)
 . D ADD^EDPCSV(X)
"RTN","EDPRPT8",48,0)
 . D ROW("Number of Patients",.CNT)
"RTN","EDPRPT8",49,0)
 . D ROW("Number Admitted",.ADM)
"RTN","EDPRPT8",50,0)
 . D ROW("Number VA Admitted",.VA)
"RTN","EDPRPT8",51,0)
 . M ROW=MIN("DEC")   D ROW("Avg All Admit Dec Time",.ROW)  K ROW
"RTN","EDPRPT8",52,0)
 . M ROW=MIN("VADEC") D ROW("Avg VA Admit Dec Time",.ROW)   K ROW
"RTN","EDPRPT8",53,0)
 . M ROW=MIN("VADEL") D ROW("Avg VA Admit Delay Time",.ROW) K ROW
"RTN","EDPRPT8",54,0)
 ; or as XML
"RTN","EDPRPT8",55,0)
 D XML^EDPX("<statistics>")
"RTN","EDPRPT8",56,0)
 S X=$$XMLA^EDPX("row",.CNT) D XML^EDPX(X)
"RTN","EDPRPT8",57,0)
 S X=$$XMLA^EDPX("row",.ADM) D XML^EDPX(X)
"RTN","EDPRPT8",58,0)
 S X=$$XMLA^EDPX("row",.VA)  D XML^EDPX(X)
"RTN","EDPRPT8",59,0)
 M ROW=MIN("DEC")   S X=$$XMLA^EDPX("row",.ROW) D XML^EDPX(X) K ROW
"RTN","EDPRPT8",60,0)
 M ROW=MIN("VADEC") S X=$$XMLA^EDPX("row",.ROW) D XML^EDPX(X) K ROW
"RTN","EDPRPT8",61,0)
 M ROW=MIN("VADEL") S X=$$XMLA^EDPX("row",.ROW) D XML^EDPX(X) K ROW
"RTN","EDPRPT8",62,0)
 D XML^EDPX("</statistics>")
"RTN","EDPRPT8",63,0)
 Q
"RTN","EDPRPT8",64,0)
 ;
"RTN","EDPRPT8",65,0)
ROW(NAME,LIST) ; add line
"RTN","EDPRPT8",66,0)
 N I S X=NAME
"RTN","EDPRPT8",67,0)
 F I="none","one","two","three","four","five","total" S X=X_TAB_LIST(I)
"RTN","EDPRPT8",68,0)
 D ADD^EDPCSV(X)
"RTN","EDPRPT8",69,0)
 Q
"RTN","EDPRPT8",70,0)
 ;
"RTN","EDPRPT8",71,0)
INIT ; Initialize acuity counters
"RTN","EDPRPT8",72,0)
 N X S (CNT,ADM,VA)=0
"RTN","EDPRPT8",73,0)
 F X="none","one","two","three","four","five" D
"RTN","EDPRPT8",74,0)
 . S (CNT(X),ADM(X),VA(X),MIN("DEC",X),MIN("VADEC",X),MIN("VADEL",X))=0
"RTN","EDPRPT8",75,0)
 F X="DEC","VADEC","VADEL" S MIN(X)=0
"RTN","EDPRPT8",76,0)
 Q
"RTN","EDPRPT8",77,0)
 ;
"RTN","EDPRPT8",78,0)
ECODE(IEN) ; Return external value for an Acuity code
"RTN","EDPRPT8",79,0)
 N X0,X,Y S X0=$G(^EDPB(233.1,+IEN,0))
"RTN","EDPRPT8",80,0)
 S X=$P(X0,U,3) S:X<1 X=$P(X0,U,4) ;code or nat'l code
"RTN","EDPRPT8",81,0)
 S Y=$S(X=1:"one",X=2:"two",X=3:"three",X=4:"four",X=5:"five",1:"none")
"RTN","EDPRPT8",82,0)
 Q Y
"RTN","EDPRPTBV")
0^36^B28273730^B21134846
"RTN","EDPRPTBV",1,0)
EDPRPTBV ;SLC/MKB - BVAC Report ;4/25/13 03:15pm
"RTN","EDPRPTBV",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;May 2, 2012;Build 200
"RTN","EDPRPTBV",3,0)
 ;
"RTN","EDPRPTBV",4,0)
EN(BEG,END,CSV) ; Get Activity Report for EDPSITE by date range
"RTN","EDPRPTBV",5,0)
 N LOG,X,X0,X1,X3,DX,IN,OUT,ROW,ICD,I
"RTN","EDPRPTBV",6,0)
 N ELAPSE,TRIAGE,ADMDEC,ADMDEL,CNT,ADM,MIN,AVG
"RTN","EDPRPTBV",7,0)
 D INIT ;set counters, sums to 0
"RTN","EDPRPTBV",8,0)
 D:'$G(CSV) XML^EDPX("<logEntries>") I $G(CSV) D  ;headers
"RTN","EDPRPTBV",9,0)
 . N TAB S TAB=$C(9)
"RTN","EDPRPTBV",10,0)
 . S X="Patient"_TAB_"Time In"_TAB_"Time Out"_TAB_"Complaint"_TAB_"MD"_TAB_"Acuity"_TAB_"Elapsed"_TAB_"Triage"_TAB_"Dispo"_TAB_"Admit Dec"_TAB_"Admit Delay"_TAB_"Diagnosis"_TAB_"ICD9"
"RTN","EDPRPTBV",11,0)
 . ;***pij 4/19/2013 removed Unemploy
"RTN","EDPRPTBV",12,0)
 . ;S X=X_TAB_"Viet Vet"_TAB_"Agent Orange"_TAB_"OEF/OIF"_TAB_"Pers Gulf"_TAB_"VA Pension"_TAB_"POW"_TAB_"Serv Conn %"_TAB_"Purp Hrt"_TAB_"Unemploy"_TAB_"Combat End"
"RTN","EDPRPTBV",13,0)
 . S X=X_TAB_"Viet Vet"_TAB_"Agent Orange"_TAB_"OEF/OIF"_TAB_"Pers Gulf"_TAB_"VA Pension"_TAB_"POW"_TAB_"Serv Conn %"_TAB_"Purp Hrt"_TAB_"Combat End"
"RTN","EDPRPTBV",14,0)
 . ;***
"RTN","EDPRPTBV",15,0)
 . D ADD^EDPCSV(X)
"RTN","EDPRPTBV",16,0)
 S IN=BEG-.000001
"RTN","EDPRPTBV",17,0)
 F  S IN=$O(^EDP(230,"ATI",EDPSITE,IN)) Q:'IN  Q:IN>END  S LOG=0 F  S LOG=+$O(^EDP(230,"ATI",EDPSITE,IN,LOG)) Q:LOG<1  D
"RTN","EDPRPTBV",18,0)
 . S X0=^EDP(230,LOG,0),X1=$G(^(1)),X3=$G(^(3))
"RTN","EDPRPTBV",19,0)
 . S DX=$$BVAC(+$P(X0,U,3),LOG) Q:DX=""  ;no codes in range
"RTN","EDPRPTBV",20,0)
 . S CNT=CNT+1,OUT=$P(X0,U,9) ;S:OUT="" OUT=NOW
"RTN","EDPRPTBV",21,0)
 . S ELAPSE=$S(OUT:($$FMDIFF^XLFDT(OUT,IN,2)\60),1:0)
"RTN","EDPRPTBV",22,0)
 . S MIN("elapsed")=MIN("elapsed")+ELAPSE
"RTN","EDPRPTBV",23,0)
 . S X=$$ACUITY^EDPRPT(LOG),TRIAGE=0 ;S:X<1 X=OUT
"RTN","EDPRPTBV",24,0)
 . S:X TRIAGE=($$FMDIFF^XLFDT(X,IN,2)\60)
"RTN","EDPRPTBV",25,0)
 . S MIN("triage")=MIN("triage")+TRIAGE
"RTN","EDPRPTBV",26,0)
 . S (ADMDEC,ADMDEL)=""
"RTN","EDPRPTBV",27,0)
 . S X=$$ADMIT^EDPRPT(LOG) I X S ADM=ADM+1 D   ;decision to admit
"RTN","EDPRPTBV",28,0)
 .. S ADMDEC=($$FMDIFF^XLFDT(X,IN,2)\60)
"RTN","EDPRPTBV",29,0)
 .. S ADMDEL=$S(OUT:($$FMDIFF^XLFDT(OUT,X,2)\60),1:0)
"RTN","EDPRPTBV",30,0)
 .. S MIN("admDec")=MIN("admDec")+ADMDEC
"RTN","EDPRPTBV",31,0)
 .. S MIN("admDel")=MIN("admDel")+ADMDEL
"RTN","EDPRPTBV",32,0)
 . ;
"RTN","EDPRPTBV",33,0)
BV1 . ; add row to report
"RTN","EDPRPTBV",34,0)
 . ;S ICD=$P($G(^ICD9(+$P(X4,U,2),0)),U) Q:ICD<290  Q:ICD>316
"RTN","EDPRPTBV",35,0)
 . K ROW S ROW("patient")=$P(X0,U,4)
"RTN","EDPRPTBV",36,0)
 . S ROW("inTS")=$S($G(CSV):$$EDATE^EDPRPT(IN),1:IN)
"RTN","EDPRPTBV",37,0)
 . S ROW("outTS")=$S($G(CSV):$$EDATE^EDPRPT(OUT),1:OUT)
"RTN","EDPRPTBV",38,0)
 . S ROW("complaint")=$P(X1,U)
"RTN","EDPRPTBV",39,0)
 . S ROW("md")=$$EPERS^EDPRPT($P(X3,U,5))
"RTN","EDPRPTBV",40,0)
 . S ROW("acuity")=$$ECODE^EDPRPT($P(X3,U,3))
"RTN","EDPRPTBV",41,0)
 . S ROW("elapsed")=ELAPSE_$S(ELAPSE>359:" *",1:"")
"RTN","EDPRPTBV",42,0)
 . S ROW("triage")=TRIAGE
"RTN","EDPRPTBV",43,0)
 . S ROW("disposition")=$$ECODE^EDPRPT($P(X1,U,2))
"RTN","EDPRPTBV",44,0)
 . S ROW("admDec")=ADMDEC,ROW("admDel")=ADMDEL
"RTN","EDPRPTBV",45,0)
 . S ROW("icd")=$P(DX,U),ROW("dx")=$P(DX,U,2)
"RTN","EDPRPTBV",46,0)
 . ; get other patient attributes from VADPT
"RTN","EDPRPTBV",47,0)
 . N DFN,VAEL,VASV,VAMB,VAERR
"RTN","EDPRPTBV",48,0)
 . S DFN=$P(X0,U,6) I DFN D 8^VADPT D
"RTN","EDPRPTBV",49,0)
 .. S ROW("vietnam")=$S(VASV(1):"Y",1:"N")
"RTN","EDPRPTBV",50,0)
 .. S ROW("agentOrange")=$S(VASV(2):"Y",1:"N")
"RTN","EDPRPTBV",51,0)
 .. S ROW("iraq")=$S(VASV(11)!VASV(12)!VASV(13):"Y",1:"N")
"RTN","EDPRPTBV",52,0)
 .. S ROW("persGulf")=$P($G(^DPT(DFN,.322)),U,10)
"RTN","EDPRPTBV",53,0)
 .. S ROW("vaPension")=$S(VAMB(4):"Y",1:"N")
"RTN","EDPRPTBV",54,0)
 .. S ROW("pow")=$S(VASV(4):"Y",1:"N")
"RTN","EDPRPTBV",55,0)
 .. S ROW("servConnPct")=+$P(VAEL(3),U,2)
"RTN","EDPRPTBV",56,0)
 .. S ROW("purpleHeart")=$S(VASV(9):"Y",1:"N")
"RTN","EDPRPTBV",57,0)
 .. ; ROW("unemployable")=$P($G(^DGEN(27.11,DFN,"E")),U,17) ;or VAPD(7)=3^NOT EMPLOYED ??
"RTN","EDPRPTBV",58,0)
 .. ;***pij 4/19/2013 VASV(10,1)=3011216^DEC 16,2001
"RTN","EDPRPTBV",59,0)
 .. S ROW("combatEndDT")=$P($G(VASV(10,1)),U)
"RTN","EDPRPTBV",60,0)
 .. I CSV,ROW("combatEndDT") S ROW("combatEndDT")=$$FMTE^XLFDT(ROW("combatEndDT"),"2D")
"RTN","EDPRPTBV",61,0)
 .. ;S ROW("combatEndDT")=$P($G(VASV(10,1)),U,2)
"RTN","EDPRPTBV",62,0)
 .. ;***
"RTN","EDPRPTBV",63,0)
BV2 . ;
"RTN","EDPRPTBV",64,0)
 . I '$G(CSV) S X=$$XMLA^EDPX("log",.ROW) D XML^EDPX(X) Q
"RTN","EDPRPTBV",65,0)
 . S X=ROW("patient")
"RTN","EDPRPTBV",66,0)
 . F I="inTS","outTS","complaint","md","acuity","elapsed","triage","disposition","admDec","admDel","dx","icd" S X=X_$C(9)_$G(ROW(I))
"RTN","EDPRPTBV",67,0)
 . ;***pij 4/19/2013 deleted unemployable
"RTN","EDPRPTBV",68,0)
 . ;F I="vietnam","agentOrange","iraq","persGulf","vaPension","pow","servConn%","purpleHeart","unemployable","combatEndDT" S X=X_$C(9)_$G(ROW(I))
"RTN","EDPRPTBV",69,0)
 . F I="vietnam","agentOrange","iraq","persGulf","vaPension","pow","servConn%","purpleHeart","combatEndDT" S X=X_$C(9)_$G(ROW(I))
"RTN","EDPRPTBV",70,0)
 . ;***
"RTN","EDPRPTBV",71,0)
 . D ADD^EDPCSV(X)
"RTN","EDPRPTBV",72,0)
 D:'$G(CSV) XML^EDPX("</logEntries>")
"RTN","EDPRPTBV",73,0)
 ;
"RTN","EDPRPTBV",74,0)
BV3 ; calculate & include averages
"RTN","EDPRPTBV",75,0)
 Q:CNT<1  ;no visits found
"RTN","EDPRPTBV",76,0)
 S ELAPSE=$$ETIME^EDPRPT(MIN("elapsed")\CNT),AVG("elapsed")=ELAPSE
"RTN","EDPRPTBV",77,0)
 S TRIAGE=$$ETIME^EDPRPT(MIN("triage")\CNT),AVG("triage")=TRIAGE
"RTN","EDPRPTBV",78,0)
 S ADMDEC=$S(ADM:$$ETIME^EDPRPT(MIN("admDec")\ADM),1:"00:00")
"RTN","EDPRPTBV",79,0)
 S ADMDEL=$S(ADM:$$ETIME^EDPRPT(MIN("admDel")\ADM),1:"00:00")
"RTN","EDPRPTBV",80,0)
 S AVG("admDec")=ADMDEC,AVG("admDel")=ADMDEL,AVG("total")=CNT
"RTN","EDPRPTBV",81,0)
 ;
"RTN","EDPRPTBV",82,0)
 I $G(CSV) D  Q  ;CSV format
"RTN","EDPRPTBV",83,0)
 . N TAB,D S TAB=$C(9)
"RTN","EDPRPTBV",84,0)
 . D BLANK^EDPCSV
"RTN","EDPRPTBV",85,0)
 . ;***pij 4/19/2013 added extra/needed TAB
"RTN","EDPRPTBV",86,0)
 . ;S X=TAB_"Total Patients"_TAB_CNT_TAB_"Averages Per Patient"_TAB_TAB_TAB_ELAPSE_TAB_TRIAGE_TAB_ADMDEC_TAB_ADMDEL
"RTN","EDPRPTBV",87,0)
 . S X=TAB_"Total Patients"_TAB_CNT_TAB_"Averages Per Patient"_TAB_TAB_TAB_ELAPSE_TAB_TRIAGE_TAB_TAB_ADMDEC_TAB_ADMDEL
"RTN","EDPRPTBV",88,0)
 . ;***
"RTN","EDPRPTBV",89,0)
 . D ADD^EDPCSV(X),BLANK^EDPCSV
"RTN","EDPRPTBV",90,0)
 D XML^EDPX("<averages>")
"RTN","EDPRPTBV",91,0)
 S X=$$XMLA^EDPX("average",.AVG) D XML^EDPX(X)
"RTN","EDPRPTBV",92,0)
 D XML^EDPX("</averages>")
"RTN","EDPRPTBV",93,0)
 Q
"RTN","EDPRPTBV",94,0)
 ;
"RTN","EDPRPTBV",95,0)
INIT ; Initialize counters and sums
"RTN","EDPRPTBV",96,0)
 N I,X S (CNT,ADM)=0
"RTN","EDPRPTBV",97,0)
 F I="elapsed","triage","admDec","admDel" S MIN(I)=0
"RTN","EDPRPTBV",98,0)
 Q
"RTN","EDPRPTBV",99,0)
 ;
"RTN","EDPRPTBV",100,0)
ECODE(IEN) ; Return external value for a Code
"RTN","EDPRPTBV",101,0)
 Q:IEN $P($G(^EDPB(233.1,IEN,0)),U,2) ;name
"RTN","EDPRPTBV",102,0)
 Q ""
"RTN","EDPRPTBV",103,0)
 ;
"RTN","EDPRPTBV",104,0)
BVAC(AREA,LOG) ; -- Return ICD^text of diagnosis in range, else null
"RTN","EDPRPTBV",105,0)
 N X,Y,I,EDPDX S Y=""
"RTN","EDPRPTBV",106,0)
 D DXALL^EDPQPCE(AREA,LOG,.EDPDX)
"RTN","EDPRPTBV",107,0)
 S I=0 F  S I=$O(EDPDX(I)) Q:I<1  S X=$G(EDPDX(I)) I 290<=+X,+X<=316 S Y=X Q
"RTN","EDPRPTBV",108,0)
 Q Y
"RTN","EDPX")
0^15^B12709600^B10778850
"RTN","EDPX",1,0)
EDPX ;SLC/KCM - Common Utilities ;6/8/12 12:09pm
"RTN","EDPX",2,0)
 ;;2.0;EMERGENCY DEPARTMENT;**6**;May 2, 2012;Build 200
"RTN","EDPX",3,0)
 ;
"RTN","EDPX",4,0)
ESC(X) ; Escape for XML transmission
"RTN","EDPX",5,0)
 ; Q $ZCONVERT(X,"O","HTML")  ; uncomment for fastest performance on Cache
"RTN","EDPX",6,0)
 ;
"RTN","EDPX",7,0)
 N I,Y,QOT S QOT=""""
"RTN","EDPX",8,0)
 S Y=$P(X,"&") F I=2:1:$L(X,"&") S Y=Y_"&amp;"_$P(X,"&",I)
"RTN","EDPX",9,0)
 S X=Y,Y=$P(X,"<") F I=2:1:$L(X,"<") S Y=Y_"&lt;"_$P(X,"<",I)
"RTN","EDPX",10,0)
 S X=Y,Y=$P(X,">") F I=2:1:$L(X,">") S Y=Y_"&gt;"_$P(X,">",I)
"RTN","EDPX",11,0)
 S X=Y,Y=$P(X,"'") F I=2:1:$L(X,"'") S Y=Y_"&apos;"_$P(X,"'",I)
"RTN","EDPX",12,0)
 S X=Y,Y=$P(X,QOT) F I=2:1:$L(X,QOT) S Y=Y_"&quot;"_$P(X,QOT,I)
"RTN","EDPX",13,0)
 Q Y
"RTN","EDPX",14,0)
 ;
"RTN","EDPX",15,0)
UES(X) ; Unescape XML
"RTN","EDPX",16,0)
 Q X  ; java side is unescaping this already
"RTN","EDPX",17,0)
 ; Q $ZCONVERT(X,"I","HTML")
"RTN","EDPX",18,0)
 ;
"RTN","EDPX",19,0)
UESREQ(REQ) ; Unescape HTTP post
"RTN","EDPX",20,0)
 N I,X
"RTN","EDPX",21,0)
 S X="" F  S X=$O(REQ(X)) Q:X=""  D
"RTN","EDPX",22,0)
 . S I=0 F  S I=$O(REQ(X,I)) Q:'I  D
"RTN","EDPX",23,0)
 . . S REQ(X,I)=$$UES(REQ(X,I))
"RTN","EDPX",24,0)
 Q
"RTN","EDPX",25,0)
VAL(X,R) ; Returns parameter value or null
"RTN","EDPX",26,0)
 ; HTTP passes HTML-escaped values in an array as REC(param,1)
"RTN","EDPX",27,0)
 Q $G(R(X,1))
"RTN","EDPX",28,0)
 ;
"RTN","EDPX",29,0)
NVPARSE(LST,IN) ; Parses tab delimited name-value pairs into array
"RTN","EDPX",30,0)
 N I,X,TAB,NM,VAL
"RTN","EDPX",31,0)
 S TAB=$C(9)
"RTN","EDPX",32,0)
 F I=1:1:$L(IN,TAB) S X=$P(IN,TAB,I),NM=$P(X,"="),VAL=$P(X,"=",2,999) S:$L(NM) LST(NM)=VAL
"RTN","EDPX",33,0)
 Q
"RTN","EDPX",34,0)
XMLS(TAG,DATA,LBL) ; Return XML node as <TAG data="9" label="XXX" />
"RTN","EDPX",35,0)
 Q "<"_TAG_" data="""_$$ESC(DATA)_""" label="""_$$ESC(LBL)_""" />"
"RTN","EDPX",36,0)
 ;
"RTN","EDPX",37,0)
XMLA(TAG,ATT,END) ; Return XML node as <TAG att1="a" att2="b"... />
"RTN","EDPX",38,0)
 N NODE S NODE="<"_TAG_" "
"RTN","EDPX",39,0)
 N X
"RTN","EDPX",40,0)
 ;S X="" F  S X=$O(ATT(X)) Q:X=""  I $L(ATT(X)) S NODE=NODE_X_"="""_$$ESC(ATT(X))_""" "
"RTN","EDPX",41,0)
 S X="" F  S X=$O(ATT(X)) Q:X=""  S NODE=NODE_X_"="""_$$ESC(ATT(X))_""" "
"RTN","EDPX",42,0)
 S NODE=NODE_$G(END,"/")_">"
"RTN","EDPX",43,0)
 Q NODE
"RTN","EDPX",44,0)
 ;
"RTN","EDPX",45,0)
XMLE(SRC) ; Append list to XML array as elements
"RTN","EDPX",46,0)
 N X,NODE
"RTN","EDPX",47,0)
 S X="" F  S X=$O(SRC(X)) Q:X=""  D
"RTN","EDPX",48,0)
 . S NODE="<"_X_">"_$$ESC(SRC(X))_"</"_X_">"
"RTN","EDPX",49,0)
 . D XML(NODE)
"RTN","EDPX",50,0)
 Q
"RTN","EDPX",51,0)
XML(X) ; Add a line of XML to be returned
"RTN","EDPX",52,0)
 S EDPXML=$G(EDPXML)+1
"RTN","EDPX",53,0)
 S EDPXML(EDPXML)=X
"RTN","EDPX",54,0)
 Q
"RTN","EDPX",55,0)
XMLG(X,EDPCNT,EDPXML) ; Add line of XML to global array
"RTN","EDPX",56,0)
 S EDPCNT=$G(EDPCNT)+1
"RTN","EDPX",57,0)
 S @EDPXML@(EDPCNT)=X
"RTN","EDPX",58,0)
 Q
"RTN","EDPX",59,0)
CODE(X) ; Return internal value for a code
"RTN","EDPX",60,0)
 Q $O(^EDPB(233.1,"B",X,0))
"RTN","EDPX",61,0)
 ;
"RTN","EDPX",62,0)
SAVERR(TYP,ERR) ; Output a save error
"RTN","EDPX",63,0)
 D XML^EDPX("<save status='"_TYP_"' >"_ERR_"</save>")
"RTN","EDPX",64,0)
 Q
"RTN","EDPX",65,0)
SAVERRG(EDPXML,TYP,ERR) ;
"RTN","EDPX",66,0)
 D XMLG^EDPX("<save status='"_TYP_"' >"_ERR_"</save>",EDPCNT,EDPXML)
"RTN","EDPX",67,0)
 Q
"RTN","EDPX",68,0)
MSG(MSG) ; Write out error message
"RTN","EDPX",69,0)
 I MSG=1       S X="some error"
"RTN","EDPX",70,0)
 I MSG=2300001 S X="Station Number is missing"
"RTN","EDPX",71,0)
 I MSG=2300002 S X="Patient is already active in log"
"RTN","EDPX",72,0)
 I MSG=2300003 S X="Unable to create lock for new record"
"RTN","EDPX",73,0)
 I MSG=2300004 S X="Error creating new record"
"RTN","EDPX",74,0)
 I MSG=2300005 S X="Error creating sub-record"
"RTN","EDPX",75,0)
 I MSG=2300006 S X="Missing log record"
"RTN","EDPX",76,0)
 I MSG=2300007 S X="Missing log IEN"
"RTN","EDPX",77,0)
 I MSG=2300008 S X="Error updating record"
"RTN","EDPX",78,0)
 I MSG=2300009 S X="Error updating sub-record"
"RTN","EDPX",79,0)
 I MSG=2300010 S X="Command missing or not recognized:  "
"RTN","EDPX",80,0)
 I MSG=2300011 S X="Unknown report type"
"RTN","EDPX",81,0)
 I MSG=2300012 S X="Missing or invalid date range"
"RTN","EDPX",82,0)
 I MSG=2300013 S X="Shift times not defined for this site"
"RTN","EDPX",83,0)
 I MSG=2300014 S X="Name missing"
"RTN","EDPX",84,0)
 I MSG=2300015 S X="Unable to lock record"
"RTN","EDPX",85,0)
 I MSG=2300016 S X="The selected room/area is now occupied."
"RTN","EDPX",86,0)
 I MSG=2300017 S X="Report too big, unable to task."
"RTN","EDPX",87,0)
 I MSG=2300018 S X="Required parameters missing or invalid."
"RTN","EDPX",88,0)
 I MSG=2300019 S X="Default bed missing or invalid."
"RTN","EDPX",89,0)
 Q $$ESC^EDPX(X)
"SEC","^DIC",231.7,231.7,0,"AUDIT")
@
"SEC","^DIC",231.7,231.7,0,"DD")
@
"SEC","^DIC",231.7,231.7,0,"DEL")
@
"SEC","^DIC",231.7,231.7,0,"LAYGO")
@
"SEC","^DIC",231.7,231.7,0,"RD")
@
"SEC","^DIC",231.7,231.7,0,"WR")
@
"SEC","^DIC",232.1,232.1,0,"AUDIT")
@
"SEC","^DIC",232.1,232.1,0,"DD")
@
"SEC","^DIC",232.1,232.1,0,"DEL")
@
"SEC","^DIC",232.1,232.1,0,"LAYGO")
@
"SEC","^DIC",232.1,232.1,0,"RD")
@
"SEC","^DIC",232.1,232.1,0,"WR")
@
"SEC","^DIC",232.11,232.11,0,"AUDIT")
@
"SEC","^DIC",232.11,232.11,0,"DD")
@
"SEC","^DIC",232.11,232.11,0,"DEL")
@
"SEC","^DIC",232.11,232.11,0,"LAYGO")
@
"SEC","^DIC",232.11,232.11,0,"RD")
@
"SEC","^DIC",232.11,232.11,0,"WR")
@
"SEC","^DIC",232.5,232.5,0,"AUDIT")
@
"SEC","^DIC",232.5,232.5,0,"DD")
@
"SEC","^DIC",232.5,232.5,0,"DEL")
@
"SEC","^DIC",232.5,232.5,0,"LAYGO")
@
"SEC","^DIC",232.5,232.5,0,"RD")
@
"SEC","^DIC",232.5,232.5,0,"WR")
@
"SEC","^DIC",232.6,232.6,0,"AUDIT")
@
"SEC","^DIC",232.6,232.6,0,"DD")
@
"SEC","^DIC",232.6,232.6,0,"DEL")
@
"SEC","^DIC",232.6,232.6,0,"LAYGO")
@
"SEC","^DIC",232.6,232.6,0,"RD")
@
"SEC","^DIC",232.6,232.6,0,"WR")
@
"SEC","^DIC",232.71,232.71,0,"AUDIT")
@
"SEC","^DIC",232.71,232.71,0,"DD")
@
"SEC","^DIC",232.71,232.71,0,"DEL")
@
"SEC","^DIC",232.71,232.71,0,"LAYGO")
@
"SEC","^DIC",232.71,232.71,0,"RD")
@
"SEC","^DIC",232.71,232.71,0,"WR")
@
"SEC","^DIC",232.72,232.72,0,"AUDIT")
@
"SEC","^DIC",232.72,232.72,0,"DD")
@
"SEC","^DIC",232.72,232.72,0,"DEL")
@
"SEC","^DIC",232.72,232.72,0,"LAYGO")
@
"SEC","^DIC",232.72,232.72,0,"RD")
@
"SEC","^DIC",232.72,232.72,0,"WR")
@
"SEC","^DIC",232.73,232.73,0,"AUDIT")
@
"SEC","^DIC",232.73,232.73,0,"DD")
@
"SEC","^DIC",232.73,232.73,0,"DEL")
@
"SEC","^DIC",232.73,232.73,0,"LAYGO")
@
"SEC","^DIC",232.73,232.73,0,"RD")
@
"SEC","^DIC",232.73,232.73,0,"WR")
@
"SEC","^DIC",232.74,232.74,0,"AUDIT")
@
"SEC","^DIC",232.74,232.74,0,"DD")
@
"SEC","^DIC",232.74,232.74,0,"DEL")
@
"SEC","^DIC",232.74,232.74,0,"LAYGO")
@
"SEC","^DIC",232.74,232.74,0,"RD")
@
"SEC","^DIC",232.74,232.74,0,"WR")
@
"VER")
8.0^22.0
"^DD",231.7,231.7,0)
FIELD^^.08^8
"^DD",231.7,231.7,0,"DDA")
N
"^DD",231.7,231.7,0,"DT")
3120313
"^DD",231.7,231.7,0,"IX","B",231.7,.01)

"^DD",231.7,231.7,0,"NM","TRACKING STAFF")

"^DD",231.7,231.7,0,"VRPK")
EDP
"^DD",231.7,231.7,.01,0)
PERSON^RP200'^VA(200,^0;1^Q
"^DD",231.7,231.7,.01,1,0)
^.1
"^DD",231.7,231.7,.01,1,1,0)
231.7^B
"^DD",231.7,231.7,.01,1,1,1)
S ^EDPB(231.7,"B",$E(X,1,30),DA)=""
"^DD",231.7,231.7,.01,1,1,2)
K ^EDPB(231.7,"B",$E(X,1,30),DA)
"^DD",231.7,231.7,.01,3)
Select a provider, resident, or nurse.
"^DD",231.7,231.7,.01,21,0)
^^2^2^3080912^
"^DD",231.7,231.7,.01,21,1,0)
This is a person who is assigned to work as staff in the emergency 
"^DD",231.7,231.7,.01,21,2,0)
department.
"^DD",231.7,231.7,.01,"DT")
3080305
"^DD",231.7,231.7,.02,0)
INSTITUTION^RP4'^DIC(4,^0;2^Q
"^DD",231.7,231.7,.02,3)
Select the institution for this staff list.
"^DD",231.7,231.7,.02,21,0)
^^1^1^3081008^
"^DD",231.7,231.7,.02,21,1,0)
This allows each station to have its own set of staff assignments.
"^DD",231.7,231.7,.02,"DT")
3081008
"^DD",231.7,231.7,.03,0)
AREA^P231.9'^EDPB(231.9,^0;3^Q
"^DD",231.7,231.7,.03,3)
Select an area for this person.
"^DD",231.7,231.7,.03,21,0)
^^1^1^3080912^
"^DD",231.7,231.7,.03,21,1,0)
This is the area to which the person is assigned as staff.
"^DD",231.7,231.7,.03,23,0)
^^2^2^3080912^
"^DD",231.7,231.7,.03,23,1,0)
The only area currently supported is the emergency department, but
"^DD",231.7,231.7,.03,23,2,0)
expansion into other areas is anticipated.
"^DD",231.7,231.7,.03,"DT")
3080305
"^DD",231.7,231.7,.04,0)
INACTIVE^S^0:ACTIVE;1:INACTIVE;^0;4^Q
"^DD",231.7,231.7,.04,3)
Enter 'active' or 'inactive'.
"^DD",231.7,231.7,.04,21,0)
^^2^2^3080912^
"^DD",231.7,231.7,.04,21,1,0)
This flag is set to 'inactive' when the person is no longer an active
"^DD",231.7,231.7,.04,21,2,0)
member of the staff for this area.
"^DD",231.7,231.7,.04,"DT")
3071124
"^DD",231.7,231.7,.05,0)
LOCAL ID*^F^^0;5^K:$L(X)>12!($L(X)<1) X
"^DD",231.7,231.7,.05,3)
Answer must be 1-12 characters in length.
"^DD",231.7,231.7,.05,"DT")
3080305
"^DD",231.7,231.7,.06,0)
ROLE^P232.5'^EDPB(232.5,^0;6^Q
"^DD",231.7,231.7,.06,3)
Select the role for this entry.
"^DD",231.7,231.7,.06,21,0)
^^1^1^3130603^
"^DD",231.7,231.7,.06,21,1,0)
This is the role for this person.
"^DD",231.7,231.7,.06,"DT")
3120313
"^DD",231.7,231.7,.07,0)
INITIALS*^F^^0;7^K:$L(X)>7!($L(X)<1) X
"^DD",231.7,231.7,.07,3)
Answer must be 1-7 characters in length.
"^DD",231.7,231.7,.07,"DT")
3080305
"^DD",231.7,231.7,.08,0)
COLOR^F^^0;8^K:$L(X)>20!($L(X)<1) X
"^DD",231.7,231.7,.08,3)
Answer must be 1-20 characters in length.
"^DD",231.7,231.7,.08,21,0)
^^2^2^3080912^
"^DD",231.7,231.7,.08,21,1,0)
This contains the RGB values for the foreground and background colors 
"^DD",231.7,231.7,.08,21,2,0)
used to highlight this person on the display board.
"^DD",231.7,231.7,.08,23,0)
^^9^9^3080912^
"^DD",231.7,231.7,.08,23,1,0)
The format of the color map for a person is:
"^DD",231.7,231.7,.08,23,2,0)
 
"^DD",231.7,231.7,.08,23,3,0)
  <use color?>,<foreground color>,<background color>
"^DD",231.7,231.7,.08,23,4,0)
 
"^DD",231.7,231.7,.08,23,5,0)
All colors are represented in hexadecimal.  For example, 
"^DD",231.7,231.7,.08,23,6,0)
 
"^DD",231.7,231.7,.08,23,7,0)
  1,0xff0000,0xffffff
"^DD",231.7,231.7,.08,23,8,0)
 
"^DD",231.7,231.7,.08,23,9,0)
means to use color, foreground color is red, background color is white.
"^DD",231.7,231.7,.08,"DT")
3071124
"^DD",232.1,232.1,0)
FIELD^^2^5
"^DD",232.1,232.1,0,"DDA")
N
"^DD",232.1,232.1,0,"DT")
3130531
"^DD",232.1,232.1,0,"IX","B",232.1,.01)

"^DD",232.1,232.1,0,"NM","EDP REPORT TEMPLATE")

"^DD",232.1,232.1,0,"VRPK")
EDP
"^DD",232.1,232.1,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",232.1,232.1,.01,1,0)
^.1
"^DD",232.1,232.1,.01,1,1,0)
232.1^B
"^DD",232.1,232.1,.01,1,1,1)
S ^EDPB(232.1,"B",$E(X,1,30),DA)=""
"^DD",232.1,232.1,.01,1,1,2)
K ^EDPB(232.1,"B",$E(X,1,30),DA)
"^DD",232.1,232.1,.01,3)
Answer must be 3-30 characters in length.
"^DD",232.1,232.1,.01,21,0)
^.001^1^1^3130603^^^
"^DD",232.1,232.1,.01,21,1,0)
This is the name of the report template.
"^DD",232.1,232.1,.01,"DT")
3130531
"^DD",232.1,232.1,.02,0)
INACTIVE^S^1:true;0:false;^0;2^Q
"^DD",232.1,232.1,.02,3)
Select the 'inactive' status for this template.
"^DD",232.1,232.1,.02,21,0)
^^1^1^3130603^
"^DD",232.1,232.1,.02,21,1,0)
This field controls whether or not the template is inactive.
"^DD",232.1,232.1,.02,"DT")
3120522
"^DD",232.1,232.1,.03,0)
EDITABLE^S^1:true;0:false;^0;3^Q
"^DD",232.1,232.1,.03,3)
Select whether or not this template is editable.
"^DD",232.1,232.1,.03,21,0)
^.001^1^1^3130531^^
"^DD",232.1,232.1,.03,21,1,0)
This field controls whether or not the template is editable.
"^DD",232.1,232.1,.03,"DT")
3120522
"^DD",232.1,232.1,1,0)
DISPLAY ELEMENTS^232.12^^1;0
"^DD",232.1,232.1,1,21,0)
^.001^1^1^3130603^^
"^DD",232.1,232.1,1,21,1,0)
This multiple holds each data element associated with a report template.
"^DD",232.1,232.1,2,0)
ROLES^232.13P^^2;0
"^DD",232.1,232.1,2,21,0)
^.001^2^2^3130603^^^
"^DD",232.1,232.1,2,21,1,0)
This field holds the roles that can utilize this particular report 
"^DD",232.1,232.1,2,21,2,0)
template.
"^DD",232.1,232.12,0)
DISPLAY ELEMENTS SUB-FIELD^^.02^2
"^DD",232.1,232.12,0,"DT")
3120523
"^DD",232.1,232.12,0,"IX","B",232.12,.01)

"^DD",232.1,232.12,0,"NM","DISPLAY ELEMENTS")

"^DD",232.1,232.12,0,"UP")
232.1
"^DD",232.1,232.12,.01,0)
SEQUENCE^MNJ3,0^^0;1^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",232.1,232.12,.01,1,0)
^.1
"^DD",232.1,232.12,.01,1,1,0)
232.12^B
"^DD",232.1,232.12,.01,1,1,1)
S ^EDPB(232.1,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",232.1,232.12,.01,1,1,2)
K ^EDPB(232.1,DA(1),1,"B",$E(X,1,30),DA)
"^DD",232.1,232.12,.01,3)
Type a number between 1 and 999, 0 decimal digits.
"^DD",232.1,232.12,.01,21,0)
^^1^1^3130531^
"^DD",232.1,232.12,.01,21,1,0)
This is the sequence in which the report element is displayed.
"^DD",232.1,232.12,.01,"DT")
3120523
"^DD",232.1,232.12,.02,0)
ELEMENT^P232.11'^EDPB(232.11,^0;2^Q
"^DD",232.1,232.12,.02,3)
Select the report element for this template.
"^DD",232.1,232.12,.02,21,0)
^^1^1^3130603^
"^DD",232.1,232.12,.02,21,1,0)
This is a report element that is part of this template.
"^DD",232.1,232.12,.02,"DT")
3120523
"^DD",232.1,232.13,0)
ROLES SUB-FIELD^^.01^1
"^DD",232.1,232.13,0,"DT")
3120523
"^DD",232.1,232.13,0,"IX","B",232.13,.01)

"^DD",232.1,232.13,0,"NM","ROLES")

"^DD",232.1,232.13,0,"UP")
232.1
"^DD",232.1,232.13,.01,0)
ROLES^MP232.5'^EDPB(232.5,^0;1^Q
"^DD",232.1,232.13,.01,1,0)
^.1
"^DD",232.1,232.13,.01,1,1,0)
232.13^B
"^DD",232.1,232.13,.01,1,1,1)
S ^EDPB(232.1,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",232.1,232.13,.01,1,1,2)
K ^EDPB(232.1,DA(1),2,"B",$E(X,1,30),DA)
"^DD",232.1,232.13,.01,3)
Select a role for this report template.
"^DD",232.1,232.13,.01,21,0)
^^1^1^3130603^
"^DD",232.1,232.13,.01,21,1,0)
This is a role that can utilize this report template.
"^DD",232.1,232.13,.01,"DT")
3120523
"^DD",232.11,232.11,0)
FIELD^^3^8
"^DD",232.11,232.11,0,"DT")
3130605
"^DD",232.11,232.11,0,"IX","B",232.11,.01)

"^DD",232.11,232.11,0,"NM","EDP REPORT ELEMENTS")

"^DD",232.11,232.11,0,"PT",232.12,.02)

"^DD",232.11,232.11,0,"VRPK")
EDP
"^DD",232.11,232.11,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",232.11,232.11,.01,1,0)
^.1
"^DD",232.11,232.11,.01,1,1,0)
232.11^B
"^DD",232.11,232.11,.01,1,1,1)
S ^EDPB(232.11,"B",$E(X,1,30),DA)=""
"^DD",232.11,232.11,.01,1,1,2)
K ^EDPB(232.11,"B",$E(X,1,30),DA)
"^DD",232.11,232.11,.01,3)
Answer must be 3-30 characters in length.
"^DD",232.11,232.11,.01,21,0)
^.001^1^1^3130605^^^^
"^DD",232.11,232.11,.01,21,1,0)
The report element name.
"^DD",232.11,232.11,.01,"DT")
3130603
"^DD",232.11,232.11,.02,0)
FILE #^P1'^DIC(^0;2^Q
"^DD",232.11,232.11,.02,3)
Enter the file number.
"^DD",232.11,232.11,.02,21,0)
^.001^1^1^3130605^^
"^DD",232.11,232.11,.02,21,1,0)
This is the file number that this data element is associated with.
"^DD",232.11,232.11,.02,"DT")
3130605
"^DD",232.11,232.11,.03,0)
FIELD #^F^^0;3^K:$L(X)>15!($L(X)<1) X
"^DD",232.11,232.11,.03,3)
Answer must be 1-15 characters in length.
"^DD",232.11,232.11,.03,21,0)
^.001^1^1^3130605^^
"^DD",232.11,232.11,.03,21,1,0)
This is the field number that is associated to this data element.
"^DD",232.11,232.11,.03,23,0)
^^3^3^3130605^
"^DD",232.11,232.11,.03,23,1,0)
This is a field number in the file identified by the FILE # (#.02) field. 
"^DD",232.11,232.11,.03,23,2,0)
The file and field numbers are used to dynamically build calls using 
"^DD",232.11,232.11,.03,23,3,0)
FileMan APIs.
"^DD",232.11,232.11,.03,"DT")
3120523
"^DD",232.11,232.11,.04,0)
HISTORY FIELD #^F^^0;4^K:$L(X)>15!($L(X)<1) X
"^DD",232.11,232.11,.04,3)
Answer must be 1-15 characters in length.
"^DD",232.11,232.11,.04,21,0)
^^2^2^3130531^
"^DD",232.11,232.11,.04,21,1,0)
If applicable, this holds the link to the field in the EDP LOG HISTORY 
"^DD",232.11,232.11,.04,21,2,0)
file.
"^DD",232.11,232.11,.04,"DT")
3120523
"^DD",232.11,232.11,.05,0)
HEADER^F^^0;5^K:$L(X)>30!($L(X)<1) X
"^DD",232.11,232.11,.05,3)
Answer must be 1-30 characters in length.
"^DD",232.11,232.11,.05,21,0)
^^1^1^3120531^
"^DD",232.11,232.11,.05,21,1,0)
This holds the header that will be passed to the UI for the column name.
"^DD",232.11,232.11,.05,"DT")
3120531
"^DD",232.11,232.11,1,0)
FORMAT LOGIC^F^^1;1^K:$L(X)>60!($L(X)<1) X
"^DD",232.11,232.11,1,3)
Answer must be 1-60 characters in length.
"^DD",232.11,232.11,1,21,0)
^^1^1^3130531^
"^DD",232.11,232.11,1,21,1,0)
This field holds the executable formatting logic, if applicable.
"^DD",232.11,232.11,1,"DT")
3120523
"^DD",232.11,232.11,2,0)
EXECUTABLE LOOKUP^F^^2;1^K:$L(X)>60!($L(X)<1) X
"^DD",232.11,232.11,2,3)
Answer must be 1-60 characters in length.
"^DD",232.11,232.11,2,21,0)
^^1^1^3130531^
"^DD",232.11,232.11,2,21,1,0)
This field holds the executable lookup, if applicable.
"^DD",232.11,232.11,2,"DT")
3120523
"^DD",232.11,232.11,3,0)
DESCRIPTION^F^^3;1^K:$L(X)>250!($L(X)<1) X
"^DD",232.11,232.11,3,3)
Answer must be 1-250 characters in length.
"^DD",232.11,232.11,3,21,0)
^^1^1^3130531^
"^DD",232.11,232.11,3,21,1,0)
This is the description for the data element.
"^DD",232.11,232.11,3,"DT")
3120606
"^DD",232.5,232.5,0)
FIELD^^.07^7
"^DD",232.5,232.5,0,"DT")
3120313
"^DD",232.5,232.5,0,"IX","B",232.5,.01)

"^DD",232.5,232.5,0,"IX","C",232.5,.02)

"^DD",232.5,232.5,0,"NM","CPE ROLE")

"^DD",232.5,232.5,0,"PT",231.7,.06)

"^DD",232.5,232.5,0,"PT",232.13,.01)

"^DD",232.5,232.5,0,"PT",232.63,.01)

"^DD",232.5,232.5,0,"PT",232.712,.01)

"^DD",232.5,232.5,0,"PT",232.728,.01)

"^DD",232.5,232.5,0,"VRPK")
EDP
"^DD",232.5,232.5,.01,0)
ROLE^RF^^0;1^K:$L(X)>60!($L(X)<3) X
"^DD",232.5,232.5,.01,1,0)
^.1
"^DD",232.5,232.5,.01,1,1,0)
232.5^B
"^DD",232.5,232.5,.01,1,1,1)
S ^EDPB(232.5,"B",$E(X,1,30),DA)=""
"^DD",232.5,232.5,.01,1,1,2)
K ^EDPB(232.5,"B",$E(X,1,30),DA)
"^DD",232.5,232.5,.01,3)
Answer must be 3-60 characters in length.
"^DD",232.5,232.5,.01,21,0)
^^1^1^3130531^
"^DD",232.5,232.5,.01,21,1,0)
This is the role for use in the EDIS application.
"^DD",232.5,232.5,.01,"DT")
3120313
"^DD",232.5,232.5,.02,0)
ABBREVIATION^RF^^0;2^K:$L(X)>3!($L(X)<1) X
"^DD",232.5,232.5,.02,1,0)
^.1
"^DD",232.5,232.5,.02,1,1,0)
232.5^C
"^DD",232.5,232.5,.02,1,1,1)
S ^EDPB(232.5,"C",$E(X,1,30),DA)=""
"^DD",232.5,232.5,.02,1,1,2)
K ^EDPB(232.5,"C",$E(X,1,30),DA)
"^DD",232.5,232.5,.02,1,1,"%D",0)
^^1^1^3120313^
"^DD",232.5,232.5,.02,1,1,"%D",1,0)
This index holds the abbreviation as well as the IEN for each role.
"^DD",232.5,232.5,.02,1,1,"DT")
3120313
"^DD",232.5,232.5,.02,3)
Answer must be 1-3 characters in length.
"^DD",232.5,232.5,.02,21,0)
^^1^1^3130531^
"^DD",232.5,232.5,.02,21,1,0)
The abbreviation for the role.
"^DD",232.5,232.5,.02,"DT")
3120313
"^DD",232.5,232.5,.03,0)
XML ABBREVIATION^RF^^0;3^K:$L(X)>7!($L(X)<2) X
"^DD",232.5,232.5,.03,3)
Answer must be 2-7 characters in length.
"^DD",232.5,232.5,.03,21,0)
^^14^14^3130603^
"^DD",232.5,232.5,.03,21,1,0)
This is the xml abbreviation for the role. Previously, logic had been 
"^DD",232.5,232.5,.03,21,2,0)
hardcoded to check the role type.
"^DD",232.5,232.5,.03,21,3,0)
 
"^DD",232.5,232.5,.03,21,4,0)
'P' = "@md"
"^DD",232.5,232.5,.03,21,5,0)
'N' = "@rn"
"^DD",232.5,232.5,.03,21,6,0)
'R' = "@res"
"^DD",232.5,232.5,.03,21,7,0)
 
"^DD",232.5,232.5,.03,21,8,0)
These values will remain the same, however they are now part of the file, 
"^DD",232.5,232.5,.03,21,9,0)
and can be more easily enhanced to add roles in the future. The roles 
"^DD",232.5,232.5,.03,21,10,0)
will now be able to be built without having to release a KIDS build to 
"^DD",232.5,232.5,.03,21,11,0)
do so. All role settings are now table driven.
"^DD",232.5,232.5,.03,21,12,0)
 
"^DD",232.5,232.5,.03,21,13,0)
This is accessed and used to build information out of the CLRSTAFF tag
"^DD",232.5,232.5,.03,21,14,0)
in EDPQDBS.
"^DD",232.5,232.5,.03,23,0)
^^13^13^3130603^
"^DD",232.5,232.5,.03,23,1,0)
Any time a new role is added, the UI will need to change to be able to 
"^DD",232.5,232.5,.03,23,2,0)
consume the new role type. In addition to this field, the XML ROLE NAME 
"^DD",232.5,232.5,.03,23,3,0)
will need to be entered in order to pass the needed information back to 
"^DD",232.5,232.5,.03,23,4,0)
the client application.
"^DD",232.5,232.5,.03,23,5,0)
 
"^DD",232.5,232.5,.03,23,6,0)
There is flexibility in the use of these two fields, however they MUST be 
"^DD",232.5,232.5,.03,23,7,0)
defined when creating a new role.
"^DD",232.5,232.5,.03,23,8,0)
 
"^DD",232.5,232.5,.03,23,9,0)
For example:
"^DD",232.5,232.5,.03,23,10,0)
 Currently for the role of 'Provider', the XML ABBREVIATION field is 
"^DD",232.5,232.5,.03,23,11,0)
"@md", and the XML ROLE NAME is 'providers'. As long as these fields are 
"^DD",232.5,232.5,.03,23,12,0)
unique to this role, the API's will build meaningful information for the 
"^DD",232.5,232.5,.03,23,13,0)
client to consume.
"^DD",232.5,232.5,.03,"DT")
3120313
"^DD",232.5,232.5,.04,0)
DEFAULT WORKSHEET^P232.6'^EDPB(232.6,^0;4^Q
"^DD",232.5,232.5,.04,3)
Enter the default worksheet for this role.
"^DD",232.5,232.5,.04,"DT")
3090422
"^DD",232.5,232.5,.05,0)
DEFAULT BOARD^F^^0;5^K:$L(X)>30!($L(X)<1) X
"^DD",232.5,232.5,.05,3)
Answer must be 1-30 characters in length.
"^DD",232.5,232.5,.05,"DT")
3090713
"^DD",232.5,232.5,.06,0)
ALLOW ACUITY EDIT^S^0:NO;1:YES;^0;6^Q
"^DD",232.5,232.5,.06,"DT")
3090715
"^DD",232.5,232.5,.07,0)
XML STAFF NAME^RF^^0;7^K:$L(X)>30!($L(X)<2) X
"^DD",232.5,232.5,.07,3)
Answer must be 2-30 characters in length.
"^DD",232.5,232.5,.07,21,0)
^.001^3^3^3130605^^^^
"^DD",232.5,232.5,.07,21,1,0)
This holds the staff name that is related to building the XML needed for 
"^DD",232.5,232.5,.07,21,2,0)
the client portion of the application. This is built from the LOAD tag in 
"^DD",232.5,232.5,.07,21,3,0)
EDPBST.
"^DD",232.5,232.5,.07,23,0)
^.001^2^2^3130605^^
"^DD",232.5,232.5,.07,23,1,0)
This is a value such as '@rn' or '@md' that was previously hard-coded. 
"^DD",232.5,232.5,.07,23,2,0)
This was changed to be a part of the file.
"^DD",232.5,232.5,.07,"DT")
3120313
"^DD",232.6,232.6,0)
FIELD^^.07^10
"^DD",232.6,232.6,0,"DDA")
N
"^DD",232.6,232.6,0,"DT")
3120613
"^DD",232.6,232.6,0,"IX","B",232.6,.01)

"^DD",232.6,232.6,0,"IX","D",232.63,.01)

"^DD",232.6,232.6,0,"NM","EDP WORKSHEET SPECIFICATION")

"^DD",232.6,232.6,0,"PT",231.05,.01)

"^DD",232.6,232.6,0,"PT",231.124,.02)

"^DD",232.6,232.6,0,"PT",231.17,.01)

"^DD",232.6,232.6,0,"PT",232.5,.04)

"^DD",232.6,232.6,0,"VRPK")
EDP
"^DD",232.6,232.6,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",232.6,232.6,.01,1,0)
^.1
"^DD",232.6,232.6,.01,1,1,0)
232.6^B
"^DD",232.6,232.6,.01,1,1,1)
S ^EDPB(232.6,"B",$E(X,1,30),DA)=""
"^DD",232.6,232.6,.01,1,1,2)
K ^EDPB(232.6,"B",$E(X,1,30),DA)
"^DD",232.6,232.6,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",232.6,232.6,.01,21,0)
^.001^1^1^3130531^^^
"^DD",232.6,232.6,.01,21,1,0)
This is the section name.
"^DD",232.6,232.6,.02,0)
INSTITUTION^RP4'^DIC(4,^0;2^Q
"^DD",232.6,232.6,.02,3)
Enter the institution for this worksheet.
"^DD",232.6,232.6,.02,"DT")
3090519
"^DD",232.6,232.6,.03,0)
AREA^P231.9'^EDPB(231.9,^0;3^Q
"^DD",232.6,232.6,.03,3)
Enter the Tracking Area for this worksheet.
"^DD",232.6,232.6,.03,"DT")
3090519
"^DD",232.6,232.6,.04,0)
TYPE^S^V:Visit;A:Assess;P:Plan;E:Edit Closed;^0;4^Q
"^DD",232.6,232.6,.04,3)
Enter the worksheet type.
"^DD",232.6,232.6,.04,"DT")
3120613
"^DD",232.6,232.6,.05,0)
ROLE^P8930'^USR(8930,^0;5^Q
"^DD",232.6,232.6,.05,"DT")
3090526
"^DD",232.6,232.6,.06,0)
DISABLED^S^0:False;1:True;^0;6^Q
"^DD",232.6,232.6,.06,3)
Enter 'True' if this worksheet should be disabled.
"^DD",232.6,232.6,.06,21,0)
^^1^1^3130531^
"^DD",232.6,232.6,.06,21,1,0)
This holds the disabled status for the worksheet.
"^DD",232.6,232.6,.06,"DT")
3090602
"^DD",232.6,232.6,.07,0)
EDITABLE^S^1:true;0:false;^0;7^Q
"^DD",232.6,232.6,.07,3)
Enter 'true' if this worksheet should be editable.
"^DD",232.6,232.6,.07,21,0)
^.001^1^1^3130531^^
"^DD",232.6,232.6,.07,21,1,0)
This holds the editable state for this worksheet.
"^DD",232.6,232.6,.07,"DT")
3120518
"^DD",232.6,232.6,1,0)
SPEC^232.61^^1;0
"^DD",232.6,232.6,2,0)
SECTIONS^232.62IA^^2;0
"^DD",232.6,232.6,2,21,0)
^^3^3^3130605^
"^DD",232.6,232.6,2,21,1,0)
This multiple holds 'instances' of the sections of the worksheet. Each
"^DD",232.6,232.6,2,21,2,0)
instance is tied to the worksheet so that its behavior can change on a
"^DD",232.6,232.6,2,21,3,0)
case by case basis.
"^DD",232.6,232.6,3,0)
ROLES^232.63P^^3;0
"^DD",232.6,232.6,3,21,0)
^.001^1^1^3130605^^
"^DD",232.6,232.6,3,21,1,0)
This multiple holds the roles that can use this worksheet.
"^DD",232.6,232.61,0)
SPEC SUB-FIELD^^.01^1
"^DD",232.6,232.61,0,"DT")
3090416
"^DD",232.6,232.61,0,"NM","SPEC")

"^DD",232.6,232.61,0,"UP")
232.6
"^DD",232.6,232.61,.01,0)
SPEC^WLx^^0;1^Q
"^DD",232.6,232.61,.01,3)
Enter the XML for the worksheet specification.
"^DD",232.6,232.61,.01,"DT")
3090416
"^DD",232.6,232.62,0)
SECTIONS SUB-FIELD^^2^5
"^DD",232.6,232.62,0,"DT")
3120510
"^DD",232.6,232.62,0,"ID",.02)
S %I=Y,Y=$S('$D(^(0)):"",$D(^EDPB(232.71,+$P(^(0),U,2),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(232.71,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",232.6,232.62,0,"IX","B",232.62,.01)

"^DD",232.6,232.62,0,"NM","SECTIONS")

"^DD",232.6,232.62,0,"UP")
232.6
"^DD",232.6,232.62,.01,0)
SECTION SEQUENCE^MNJ3,0^^0;1^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",232.6,232.62,.01,1,0)
^.1
"^DD",232.6,232.62,.01,1,1,0)
232.62^B
"^DD",232.6,232.62,.01,1,1,1)
S ^EDPB(232.6,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",232.6,232.62,.01,1,1,2)
K ^EDPB(232.6,DA(1),2,"B",$E(X,1,30),DA)
"^DD",232.6,232.62,.01,3)
Type a Number between 1 and 999, 0 Decimal Digits
"^DD",232.6,232.62,.01,21,0)
^^1^1^3130531^
"^DD",232.6,232.62,.01,21,1,0)
This is the sequence in which the section will be displayed.
"^DD",232.6,232.62,.01,"DT")
3120510
"^DD",232.6,232.62,.02,0)
SECTION^P232.71'^EDPB(232.71,^0;2^Q
"^DD",232.6,232.62,.02,1,0)
^.1^^0
"^DD",232.6,232.62,.02,3)
Enter the section.
"^DD",232.6,232.62,.02,21,0)
^^1^1^3130531^
"^DD",232.6,232.62,.02,21,1,0)
This is the section associated with the sequence.
"^DD",232.6,232.62,.02,"DT")
3120510
"^DD",232.6,232.62,.03,0)
INITIALLY OPEN^S^0:FALSE;1:TRUE;^0;3^Q
"^DD",232.6,232.62,.03,3)
Enter TRUE if the section should automatically open when loaded.
"^DD",232.6,232.62,.03,21,0)
^^2^2^3130531^
"^DD",232.6,232.62,.03,21,1,0)
This is the flag to control whether the section is initially open or 
"^DD",232.6,232.62,.03,21,2,0)
closed in the UI.
"^DD",232.6,232.62,.03,"DT")
3090527
"^DD",232.6,232.62,1,0)
CONFIGURATON^232.621^^1;0
"^DD",232.6,232.62,1,21,0)
^^2^2^3130604^
"^DD",232.6,232.62,1,21,1,0)
This field is not currently used. It was part of original worksheet 
"^DD",232.6,232.62,1,21,2,0)
development and does not fit the current models for worksheets.
"^DD",232.6,232.62,2,0)
COMPONENTS^232.622^^2;0
"^DD",232.6,232.62,2,21,0)
^.001^1^1^3130603^^
"^DD",232.6,232.62,2,21,1,0)
This multiple contains components of this section.
"^DD",232.6,232.621,0)
CONFIGURATON SUB-FIELD^^.01^1
"^DD",232.6,232.621,0,"DT")
3090527
"^DD",232.6,232.621,0,"NM","CONFIGURATON")

"^DD",232.6,232.621,0,"UP")
232.62
"^DD",232.6,232.621,.01,0)
CONFIGURATON^WLx^^0;1^Q
"^DD",232.6,232.621,.01,3)
Enter the configuration XML.
"^DD",232.6,232.621,.01,21,0)
^.001^1^1^3130531^^
"^DD",232.6,232.621,.01,21,1,0)
This is the XML configuration for a section. Currently not used.
"^DD",232.6,232.621,.01,"DT")
3090527
"^DD",232.6,232.622,0)
COMPONENTS SUB-FIELD^^.05^5
"^DD",232.6,232.622,0,"DT")
3120510
"^DD",232.6,232.622,0,"IX","B",232.622,.01)

"^DD",232.6,232.622,0,"NM","COMPONENTS")

"^DD",232.6,232.622,0,"UP")
232.62
"^DD",232.6,232.622,.01,0)
COMPONENT SEQUENCE^MNJ3,0^^0;1^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",232.6,232.622,.01,1,0)
^.1
"^DD",232.6,232.622,.01,1,1,0)
232.622^B
"^DD",232.6,232.622,.01,1,1,1)
S ^EDPB(232.6,DA(2),2,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",232.6,232.622,.01,1,1,2)
K ^EDPB(232.6,DA(2),2,DA(1),2,"B",$E(X,1,30),DA)
"^DD",232.6,232.622,.01,3)
Type a number between 1 and 999, 0 decimal digits.
"^DD",232.6,232.622,.01,21,0)
^^2^2^3130603^
"^DD",232.6,232.622,.01,21,1,0)
This is the sequence in which the component will appear within this
"^DD",232.6,232.622,.01,21,2,0)
section.
"^DD",232.6,232.622,.01,"DT")
3120510
"^DD",232.6,232.622,.02,0)
COMPONENT^P232.72'^EDPB(232.72,^0;2^Q
"^DD",232.6,232.622,.02,3)
Select a component.
"^DD",232.6,232.622,.02,21,0)
^.001^1^1^3130603^^
"^DD",232.6,232.622,.02,21,1,0)
This is the component.
"^DD",232.6,232.622,.02,"DT")
3120405
"^DD",232.6,232.622,.03,0)
EDITABLE^S^1:true;0:false;^0;3^Q
"^DD",232.6,232.622,.03,3)
Select whether this component will be editable or not.
"^DD",232.6,232.622,.03,21,0)
^.001^2^2^3130531^^^^
"^DD",232.6,232.622,.03,21,1,0)
This holds the editable status of this component, for this worksheet and 
"^DD",232.6,232.622,.03,21,2,0)
section.
"^DD",232.6,232.622,.03,"DT")
3120510
"^DD",232.6,232.622,.04,0)
VISIBLE^S^1:true;0:false;^0;4^Q
"^DD",232.6,232.622,.04,3)
Select 'true' if this component will be visible.
"^DD",232.6,232.622,.04,21,0)
^^1^1^3130531^
"^DD",232.6,232.622,.04,21,1,0)
This field controls the visibility of a component.
"^DD",232.6,232.622,.04,"DT")
3120509
"^DD",232.6,232.622,.05,0)
INCLUDE IN SUMMARY^S^0:false;1:true;^0;5^Q
"^DD",232.6,232.622,.05,3)
Select 'true' to include this component in the summary.
"^DD",232.6,232.622,.05,21,0)
^.001^2^2^3130531^^
"^DD",232.6,232.622,.05,21,1,0)
Setting this field to true will cause the component information to show 
"^DD",232.6,232.622,.05,21,2,0)
up in the label within the section on the UI.
"^DD",232.6,232.622,.05,"DT")
3120509
"^DD",232.6,232.63,0)
ROLES SUB-FIELD^^.01^1
"^DD",232.6,232.63,0,"DT")
3120510
"^DD",232.6,232.63,0,"IX","B",232.63,.01)

"^DD",232.6,232.63,0,"NM","ROLES")

"^DD",232.6,232.63,0,"UP")
232.6
"^DD",232.6,232.63,.01,0)
ROLES^MP232.5'^EDPB(232.5,^0;1^Q
"^DD",232.6,232.63,.01,1,0)
^.1
"^DD",232.6,232.63,.01,1,1,0)
232.63^B
"^DD",232.6,232.63,.01,1,1,1)
S ^EDPB(232.6,DA(1),3,"B",$E(X,1,30),DA)=""
"^DD",232.6,232.63,.01,1,1,2)
K ^EDPB(232.6,DA(1),3,"B",$E(X,1,30),DA)
"^DD",232.6,232.63,.01,1,2,0)
232.6^D
"^DD",232.6,232.63,.01,1,2,1)
S ^EDPB(232.6,"D",$E(X,1,30),DA(1),DA)=""
"^DD",232.6,232.63,.01,1,2,2)
K ^EDPB(232.6,"D",$E(X,1,30),DA(1),DA)
"^DD",232.6,232.63,.01,1,2,"DT")
3120409
"^DD",232.6,232.63,.01,3)
Enter a role for this worksheet.
"^DD",232.6,232.63,.01,21,0)
^.001^1^1^3130605^^
"^DD",232.6,232.63,.01,21,1,0)
This is the role associated with this worksheet.
"^DD",232.6,232.63,.01,"DT")
3120510
"^DD",232.71,232.71,0)
FIELD^^2^8
"^DD",232.71,232.71,0,"DT")
3120507
"^DD",232.71,232.71,0,"IX","B",232.71,.01)

"^DD",232.71,232.71,0,"NM","EDP WORKSHEET SECTION")

"^DD",232.71,232.71,0,"PT",232.62,.02)

"^DD",232.71,232.71,0,"VRPK")
EDP
"^DD",232.71,232.71,.01,0)
NAME^RF^^0;1^K:$L(X)>60!($L(X)<3) X
"^DD",232.71,232.71,.01,1,0)
^.1
"^DD",232.71,232.71,.01,1,1,0)
232.71^B
"^DD",232.71,232.71,.01,1,1,1)
S ^EDPB(232.71,"B",$E(X,1,30),DA)=""
"^DD",232.71,232.71,.01,1,1,2)
K ^EDPB(232.71,"B",$E(X,1,30),DA)
"^DD",232.71,232.71,.01,3)
Answer must be 3-60 characters in length.
"^DD",232.71,232.71,.01,21,0)
^^1^1^3130531^
"^DD",232.71,232.71,.01,21,1,0)
This is the name of the worksheet section.
"^DD",232.71,232.71,.01,"DT")
3120323
"^DD",232.71,232.71,.02,0)
PACKAGE^F^^0;2^K:$L(X)>80!($L(X)<3) X
"^DD",232.71,232.71,.02,3)
Answer must be 3-80 characters in length.
"^DD",232.71,232.71,.02,"DT")
3090420
"^DD",232.71,232.71,.03,0)
SUMMARY PLUGIN^F^^0;3^K:$L(X)>40!($L(X)<3) X
"^DD",232.71,232.71,.03,3)
Answer must be 3-40 characters in length.
"^DD",232.71,232.71,.03,"DT")
3090528
"^DD",232.71,232.71,.04,0)
DEFAULT DISPLAY NAME^F^^0;4^K:$L(X)>40!($L(X)<1) X
"^DD",232.71,232.71,.04,3)
Answer must be 1-40 characters in length.
"^DD",232.71,232.71,.04,"DT")
3090420
"^DD",232.71,232.71,.05,0)
TASK TYPE^S^0:None;1:Checkbox;2:Timed;^0;5^Q
"^DD",232.71,232.71,.05,3)
Enter the task completion mechanism for this section.
"^DD",232.71,232.71,.05,"DT")
3090528
"^DD",232.71,232.71,.06,0)
INITIALLY OPEN^S^0:False;1:True;^0;6^Q
"^DD",232.71,232.71,.06,"DT")
3090605
"^DD",232.71,232.71,1,0)
COMPONENTS^232.711PA^^1;0
"^DD",232.71,232.71,1,21,0)
^.001^1^1^3130603^^
"^DD",232.71,232.71,1,21,1,0)
This multiple holds all of the components for the section.
"^DD",232.71,232.71,1,"DT")
3120323
"^DD",232.71,232.71,2,0)
ROLES^232.712P^^2;0
"^DD",232.71,232.71,2,21,0)
^.001^1^1^3130603^^
"^DD",232.71,232.71,2,21,1,0)
This field holds the roles for this section.
"^DD",232.71,232.711,0)
COMPONENTS SUB-FIELD^^.01^1
"^DD",232.71,232.711,0,"DT")
3090417
"^DD",232.71,232.711,0,"IX","B",232.711,.01)

"^DD",232.71,232.711,0,"NM","COMPONENTS")

"^DD",232.71,232.711,0,"UP")
232.71
"^DD",232.71,232.711,.01,0)
COMPONENT^MP232.72'^EDPB(232.72,^0;1^Q
"^DD",232.71,232.711,.01,1,0)
^.1
"^DD",232.71,232.711,.01,1,1,0)
232.711^B
"^DD",232.71,232.711,.01,1,1,1)
S ^EDPB(232.71,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",232.71,232.711,.01,1,1,2)
K ^EDPB(232.71,DA(1),1,"B",$E(X,1,30),DA)
"^DD",232.71,232.711,.01,3)
Enter the component used by this section.
"^DD",232.71,232.711,.01,21,0)
^.001^1^1^3130603^^
"^DD",232.71,232.711,.01,21,1,0)
This field holds the component for the section.
"^DD",232.71,232.711,.01,"DT")
3120323
"^DD",232.71,232.712,0)
ROLES SUB-FIELD^^.01^1
"^DD",232.71,232.712,0,"DT")
3120507
"^DD",232.71,232.712,0,"IX","B",232.712,.01)

"^DD",232.71,232.712,0,"NM","ROLES")

"^DD",232.71,232.712,0,"UP")
232.71
"^DD",232.71,232.712,.01,0)
ROLES^MP232.5'^EDPB(232.5,^0;1^Q
"^DD",232.71,232.712,.01,1,0)
^.1
"^DD",232.71,232.712,.01,1,1,0)
232.712^B
"^DD",232.71,232.712,.01,1,1,1)
S ^EDPB(232.71,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",232.71,232.712,.01,1,1,2)
K ^EDPB(232.71,DA(1),2,"B",$E(X,1,30),DA)
"^DD",232.71,232.712,.01,3)
Enter a role for this section.
"^DD",232.71,232.712,.01,21,0)
^^1^1^3130603^
"^DD",232.71,232.712,.01,21,1,0)
This is a role associated with this section.
"^DD",232.71,232.712,.01,"DT")
3120507
"^DD",232.72,232.72,0)
FIELD^^1.3^26
"^DD",232.72,232.72,0,"DDA")
N
"^DD",232.72,232.72,0,"DT")
3130605
"^DD",232.72,232.72,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",232.72,232.72,0,"IX","B",232.72,.01)

"^DD",232.72,232.72,0,"NM","EDP WORKSHEET COMPONENT")

"^DD",232.72,232.72,0,"PT",232.622,.02)

"^DD",232.72,232.72,0,"PT",232.711,.01)

"^DD",232.72,232.72,0,"PT",232.727,.01)

"^DD",232.72,232.72,0,"VRPK")
EDP
"^DD",232.72,232.72,.01,0)
NAME^RF^^0;1^K:$L(X)>80!($L(X)<3)!'(X'?1P.E) X
"^DD",232.72,232.72,.01,1,0)
^.1
"^DD",232.72,232.72,.01,1,1,0)
232.72^B
"^DD",232.72,232.72,.01,1,1,1)
S ^EDPB(232.72,"B",$E(X,1,30),DA)=""
"^DD",232.72,232.72,.01,1,1,2)
K ^EDPB(232.72,"B",$E(X,1,30),DA)
"^DD",232.72,232.72,.01,3)
Answer must be 3-80 characters in length.
"^DD",232.72,232.72,.01,21,0)
^^1^1^3130531^
"^DD",232.72,232.72,.01,21,1,0)
This is the component name.
"^DD",232.72,232.72,.01,"DT")
3130604
"^DD",232.72,232.72,.02,0)
LABEL^RF^^0;2^K:$L(X)>80!($L(X)<3) X
"^DD",232.72,232.72,.02,3)
Answer must be 3-80 characters in length.
"^DD",232.72,232.72,.02,21,0)
^^1^1^3130531^
"^DD",232.72,232.72,.02,21,1,0)
This is the display label for the component.
"^DD",232.72,232.72,.02,"DT")
3130604
"^DD",232.72,232.72,.03,0)
DATA PROVIDER^F^^0;3^K:$L(X)>30!($L(X)<3) X
"^DD",232.72,232.72,.03,3)
Answer must be 3-30 characters in length.
"^DD",232.72,232.72,.03,9)
^
"^DD",232.72,232.72,.03,9.01)
232.72^.01;232.72^.02
"^DD",232.72,232.72,.03,9.1)
PACKAGE_"::"_CLASS
"^DD",232.72,232.72,.03,9.2)
S Y(232.72,.03,1)=$S($D(^EDPB(232.72,D0,0)):^(0),1:"") S X=$P(Y(232.72,.03,1),U,1),Y(232.72,.03,2)=$G(X) S X="::",Y(232.72,.03,3)=$G(X) S X=2
"^DD",232.72,232.72,.03,21,0)
^^2^2^3130604^
"^DD",232.72,232.72,.03,21,1,0)
The data provider is how Flex (the UI piece of EDIS) associates a data 
"^DD",232.72,232.72,.03,21,2,0)
field with its data source.
"^DD",232.72,232.72,.03,"DT")
3120406
"^DD",232.72,232.72,.04,0)
TYPE^S^R:REFERENCE;V:VISIT;^0;4^Q
"^DD",232.72,232.72,.04,3)
Enter the type (reference or visit) for this model
"^DD",232.72,232.72,.04,"DT")
3090420
"^DD",232.72,232.72,.05,0)
MONIKER^F^^0;5^K:$L(X)>15!($L(X)<2) X
"^DD",232.72,232.72,.05,3)
Answer must be 2-15 characters in length.
"^DD",232.72,232.72,.05,"DT")
3090603
"^DD",232.72,232.72,.06,0)
WIDGET NAME^P232.73'^EDPB(232.73,^0;6^Q
"^DD",232.72,232.72,.06,3)
Enter the widget for this component.
"^DD",232.72,232.72,.06,21,0)
^^2^2^3130604^
"^DD",232.72,232.72,.06,21,1,0)
The widget name is the Flex component used to display the data element in 
"^DD",232.72,232.72,.06,21,2,0)
the GUI.
"^DD",232.72,232.72,.06,"DT")
3120509
"^DD",232.72,232.72,.07,0)
PACKAGE LINK^P9.4'^DIC(9.4,^0;7^Q
"^DD",232.72,232.72,.07,3)
Enter the package this component belongs to.
"^DD",232.72,232.72,.07,21,0)
^^1^1^3130603^
"^DD",232.72,232.72,.07,21,1,0)
This field identifies which package this component is associated with.
"^DD",232.72,232.72,.07,"DT")
3120410
"^DD",232.72,232.72,.08,0)
VALUE^F^^10;1^K:$L(X)>60!($L(X)<1) X
"^DD",232.72,232.72,.08,3)
Answer must be 1-60 characters in length.
"^DD",232.72,232.72,.08,21,0)
^^2^2^3130531^
"^DD",232.72,232.72,.08,21,1,0)
This is the default value for the component, in the event the value is 
"^DD",232.72,232.72,.08,21,2,0)
static.
"^DD",232.72,232.72,.08,"DT")
3120509
"^DD",232.72,232.72,.09,0)
SUMMARY LABEL^F^^10;2^K:$L(X)>45!($L(X)<1) X
"^DD",232.72,232.72,.09,3)
Answer must be 1-45 characters in length.
"^DD",232.72,232.72,.09,21,0)
^.001^1^1^3130531^^
"^DD",232.72,232.72,.09,21,1,0)
This is the text used for the summary label display within the UI.
"^DD",232.72,232.72,.09,"DT")
3120510
"^DD",232.72,232.72,.1,0)
SUMMARY ORDER^NJ3,0^^10;3^K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",232.72,232.72,.1,3)
Type a number between 1 and 999, 0 decimal digits.
"^DD",232.72,232.72,.1,21,0)
^^1^1^3130531^
"^DD",232.72,232.72,.1,21,1,0)
This is the order in which this component will appear within the summary.
"^DD",232.72,232.72,.1,"DT")
3120510
"^DD",232.72,232.72,.11,0)
AVAILABLE^S^1:true;0:false;^10;4^Q
"^DD",232.72,232.72,.11,3)
Enter 'true' if you wish for this component to be available for use.
"^DD",232.72,232.72,.11,21,0)
^^1^1^3130531^
"^DD",232.72,232.72,.11,21,1,0)
This field indicates whether or not the component is available for use.
"^DD",232.72,232.72,.11,"DT")
3120510
"^DD",232.72,232.72,.12,0)
VISIBILITY TRIGGER^F^^10;5^K:$L(X)>60!($L(X)<1) X
"^DD",232.72,232.72,.12,3)
Answer must be 1-60 characters in length.
"^DD",232.72,232.72,.12,21,0)
^^2^2^3130604^
"^DD",232.72,232.72,.12,21,1,0)
This is a data flag used by Flex to determine whether a data component 
"^DD",232.72,232.72,.12,21,2,0)
should be visible or not in the GUI.
"^DD",232.72,232.72,.12,"DT")
3120511
"^DD",232.72,232.72,1.1,0)
ASSOCIATED FILE^P1'^DIC(^1;1^Q
"^DD",232.72,232.72,1.1,3)
Enter a file number.
"^DD",232.72,232.72,1.1,21,0)
^.001^1^1^3130605^^^
"^DD",232.72,232.72,1.1,21,1,0)
This identifies the file in which the data for this component is located.
"^DD",232.72,232.72,1.1,23,0)
^.001^3^3^3130605^^
"^DD",232.72,232.72,1.1,23,1,0)
This field identifies a file number to build calls to supported file 
"^DD",232.72,232.72,1.1,23,2,0)
manager APIs such as $$GET1^DIQ and $$GETS^DIQ. This identifies to the 
"^DD",232.72,232.72,1.1,23,3,0)
component what file the data will come from.
"^DD",232.72,232.72,1.1,"DT")
3130605
"^DD",232.72,232.72,1.2,0)
ASSOCIATED FIELD^F^^1;2^K:$L(X)>20!($L(X)<1) X
"^DD",232.72,232.72,1.2,3)
Answer must be 1-20 characters in length.
"^DD",232.72,232.72,1.2,21,0)
^.001^2^2^3130605^^^^
"^DD",232.72,232.72,1.2,21,1,0)
This holds the field number in which the data is located for this 
"^DD",232.72,232.72,1.2,21,2,0)
component.
"^DD",232.72,232.72,1.2,23,0)
^^4^4^3130605^
"^DD",232.72,232.72,1.2,23,1,0)
This field identifies a field number to build calls to supported file
"^DD",232.72,232.72,1.2,23,2,0)
manager APIs such as $$GET1^DIQ and $$GETS^DIQ. This is a field number in 
"^DD",232.72,232.72,1.2,23,3,0)
the file identified by the ASSOCIATED FILE (#1.1) field. The file and 
"^DD",232.72,232.72,1.2,23,4,0)
field numbers are used to dynamically build calls using FileMan APIs.
"^DD",232.72,232.72,1.2,"DT")
3120410
"^DD",232.72,232.72,1.3,0)
LOAD EVENT^F^^1;3^K:$L(X)>60!($L(X)<1) X
"^DD",232.72,232.72,1.3,3)
Answer must be 1-60 characters in length.
"^DD",232.72,232.72,1.3,21,0)
^.001^2^2^3130604^^
"^DD",232.72,232.72,1.3,21,1,0)
This holds the fully qualified load event used by the UI for building the 
"^DD",232.72,232.72,1.3,21,2,0)
component.
"^DD",232.72,232.72,1.3,23,0)
^^2^2^3130604^
"^DD",232.72,232.72,1.3,23,1,0)
In the event data does not come from a file/field within EDIS, this would 
"^DD",232.72,232.72,1.3,23,2,0)
hold executable 'load' or lookup logic to gather the needed data.
"^DD",232.72,232.72,1.3,"DT")
3120516
"^DD",232.72,232.72,2.1,0)
LOAD API^F^^2;1^K:$L(X)>40!($L(X)<3) X
"^DD",232.72,232.72,2.1,3)
Answer must be 3-40 characters in length.
"^DD",232.72,232.72,2.1,21,0)
^^1^1^3130531^
"^DD",232.72,232.72,2.1,21,1,0)
This field holds the API that is used to load the component.
"^DD",232.72,232.72,2.1,"DT")
3120410
"^DD",232.72,232.72,2.2,0)
SAVE API^F^^2;2^K:$L(X)>40!($L(X)<1) X
"^DD",232.72,232.72,2.2,3)
Answer must be 1-40 characters in length.
"^DD",232.72,232.72,2.2,21,0)
^^1^1^3130531^
"^DD",232.72,232.72,2.2,21,1,0)
This field holds the save API for a component, if applicable.
"^DD",232.72,232.72,2.2,"DT")
3120410
"^DD",232.72,232.72,3,0)
ALTERNATE LOAD LOGIC^F^^3;1^K:$L(X)>250!($L(X)<1) X
"^DD",232.72,232.72,3,3)
Answer must be 1-250 characters in length.
"^DD",232.72,232.72,3,"DT")
3120410
"^DD",232.72,232.72,3.1,0)
PREVIEW TAG^F^^3;1^K:$L(X)>8!($L(X)<1) X
"^DD",232.72,232.72,3.1,3)
Answer must be 1-8 characters in length.
"^DD",232.72,232.72,3.1,"DT")
3090603
"^DD",232.72,232.72,3.2,0)
PREVIEW ROUTINE^F^^3;2^K:$L(X)>8!($L(X)<1) X
"^DD",232.72,232.72,3.2,3)
Answer must be 1-8 characters in length.
"^DD",232.72,232.72,3.2,"DT")
3090603
"^DD",232.72,232.72,4,0)
ALTERNATE SAVE LOGIC^F^^4;1^K:$L(X)>250!($L(X)<1) X
"^DD",232.72,232.72,4,3)
Answer must be 1-250 characters in length.
"^DD",232.72,232.72,4,21,0)
^^2^2^3130531^
"^DD",232.72,232.72,4,21,1,0)
This field is used for alternate save logic in the event the 'Save API' 
"^DD",232.72,232.72,4,21,2,0)
field will not handle a more complex data structure.
"^DD",232.72,232.72,4,"DT")
3120410
"^DD",232.72,232.72,5,0)
PARAMETERS^232.725^^5;0
"^DD",232.72,232.72,5,21,0)
^.001^2^2^3130531^^
"^DD",232.72,232.72,5,21,1,0)
This field holds the list of parameters to be used by the save/load api 
"^DD",232.72,232.72,5,21,2,0)
fields.
"^DD",232.72,232.72,6,0)
DEFAULT VALUE^F^^6;1^K:$L(X)>40!($L(X)<1) X
"^DD",232.72,232.72,6,3)
Answer must be 1-40 characters in length.
"^DD",232.72,232.72,6,21,0)
^^1^1^3130531^
"^DD",232.72,232.72,6,21,1,0)
This holds the default value for a component.
"^DD",232.72,232.72,6,"DT")
3120410
"^DD",232.72,232.72,7,0)
REQUIRED COMPONENTS^232.727P^^7;0
"^DD",232.72,232.72,7,21,0)
^.001^1^1^3130605^^
"^DD",232.72,232.72,7,21,1,0)
These are the required components for this component.
"^DD",232.72,232.72,8,0)
ROLES^232.728P^^8;0
"^DD",232.72,232.72,8,21,0)
^^1^1^3130531^
"^DD",232.72,232.72,8,21,1,0)
This holds the roles for the given component.
"^DD",232.72,232.72,9,0)
VALIDATOR^232.729P^^9;0
"^DD",232.72,232.72,9,21,0)
^.001^2^2^3130604^^^
"^DD",232.72,232.72,9,21,1,0)
This field holds the validators for the components. This is used by the 
"^DD",232.72,232.72,9,21,2,0)
UI to validate information.
"^DD",232.72,232.725,0)
PARAMETERS SUB-FIELD^^2^3
"^DD",232.72,232.725,0,"DT")
3120410
"^DD",232.72,232.725,0,"IX","B",232.725,.01)

"^DD",232.72,232.725,0,"NM","PARAMETERS")

"^DD",232.72,232.725,0,"UP")
232.72
"^DD",232.72,232.725,.01,0)
PARAMETER NAME^MF^^0;1^K:$L(X)>30!($L(X)<1) X
"^DD",232.72,232.725,.01,1,0)
^.1
"^DD",232.72,232.725,.01,1,1,0)
232.725^B
"^DD",232.72,232.725,.01,1,1,1)
S ^EDPB(232.72,DA(1),5,"B",$E(X,1,30),DA)=""
"^DD",232.72,232.725,.01,1,1,2)
K ^EDPB(232.72,DA(1),5,"B",$E(X,1,30),DA)
"^DD",232.72,232.725,.01,3)
Answer must be 1-30 characters in length.
"^DD",232.72,232.725,.01,21,0)
^^2^2^3130531^
"^DD",232.72,232.725,.01,21,1,0)
This is the name of the parameter, and should match the variable name 
"^DD",232.72,232.725,.01,21,2,0)
being passed in by the UI.
"^DD",232.72,232.725,.01,"DT")
3120410
"^DD",232.72,232.725,1,0)
DATA TYPE^S^S:STRING;N:NUMERIC;^0;2^Q
"^DD",232.72,232.725,1,3)
Enter the type for this parameter.
"^DD",232.72,232.725,1,21,0)
^^1^1^3130531^
"^DD",232.72,232.725,1,21,1,0)
This is the type for this parameter.
"^DD",232.72,232.725,1,"DT")
3120410
"^DD",232.72,232.725,2,0)
SAVE/LOAD TYPE^S^S:SAVE ONLY;L:LOAD ONLY;B:BOTH LOAD AND SAVE;^0;3^Q
"^DD",232.72,232.725,2,3)
Enter the save/load type for this parameter.
"^DD",232.72,232.725,2,21,0)
^^2^2^3130531^
"^DD",232.72,232.725,2,21,1,0)
This field indicates whether this parameter will be used for saving, 
"^DD",232.72,232.725,2,21,2,0)
loading, or both.
"^DD",232.72,232.725,2,"DT")
3120410
"^DD",232.72,232.727,0)
REQUIRED COMPONENTS SUB-FIELD^^.01^1
"^DD",232.72,232.727,0,"DT")
3130604
"^DD",232.72,232.727,0,"IX","B",232.727,.01)

"^DD",232.72,232.727,0,"NM","REQUIRED COMPONENTS")

"^DD",232.72,232.727,0,"UP")
232.72
"^DD",232.72,232.727,.01,0)
REQUIRED COMPONENT^P232.72^EDPB(232.72,^0;1^Q
"^DD",232.72,232.727,.01,1,0)
^.1
"^DD",232.72,232.727,.01,1,1,0)
232.727^B
"^DD",232.72,232.727,.01,1,1,1)
S ^EDPB(232.72,DA(1),7,"B",$E(X,1,30),DA)=""
"^DD",232.72,232.727,.01,1,1,2)
K ^EDPB(232.72,DA(1),7,"B",$E(X,1,30),DA)
"^DD",232.72,232.727,.01,3)
Enter a required component.
"^DD",232.72,232.727,.01,21,0)
^^2^2^3130604^
"^DD",232.72,232.727,.01,21,1,0)
This is a required component for this component.  In the event a component
"^DD",232.72,232.727,.01,21,2,0)
is dependent on another component, it should be added here.
"^DD",232.72,232.727,.01,"DT")
3130604
"^DD",232.72,232.728,0)
ROLES SUB-FIELD^^.01^1
"^DD",232.72,232.728,0,"DT")
3120507
"^DD",232.72,232.728,0,"IX","B",232.728,.01)

"^DD",232.72,232.728,0,"NM","ROLES")

"^DD",232.72,232.728,0,"UP")
232.72
"^DD",232.72,232.728,.01,0)
ROLES^MP232.5'^EDPB(232.5,^0;1^Q
"^DD",232.72,232.728,.01,1,0)
^.1
"^DD",232.72,232.728,.01,1,1,0)
232.728^B
"^DD",232.72,232.728,.01,1,1,1)
S ^EDPB(232.72,DA(1),8,"B",$E(X,1,30),DA)=""
"^DD",232.72,232.728,.01,1,1,2)
K ^EDPB(232.72,DA(1),8,"B",$E(X,1,30),DA)
"^DD",232.72,232.728,.01,3)
Enter a role for this component.
"^DD",232.72,232.728,.01,21,0)
^^1^1^3130531^
"^DD",232.72,232.728,.01,21,1,0)
This is the role for the given component.
"^DD",232.72,232.728,.01,"DT")
3120507
"^DD",232.72,232.729,0)
VALIDATOR SUB-FIELD^^.06^6
"^DD",232.72,232.729,0,"DT")
3120509
"^DD",232.72,232.729,0,"IX","B",232.729,.01)

"^DD",232.72,232.729,0,"NM","VALIDATOR")

"^DD",232.72,232.729,0,"UP")
232.72
"^DD",232.72,232.729,.01,0)
VALIDATOR NAME^MP232.74'^EDPB(232.74,^0;1^Q
"^DD",232.72,232.729,.01,1,0)
^.1
"^DD",232.72,232.729,.01,1,1,0)
232.729^B
"^DD",232.72,232.729,.01,1,1,1)
S ^EDPB(232.72,DA(1),9,"B",$E(X,1,30),DA)=""
"^DD",232.72,232.729,.01,1,1,2)
K ^EDPB(232.72,DA(1),9,"B",$E(X,1,30),DA)
"^DD",232.72,232.729,.01,3)
Enter the validator for this component, if applicable.
"^DD",232.72,232.729,.01,21,0)
^^1^1^3130603^
"^DD",232.72,232.729,.01,21,1,0)
This is a validator for the given component.
"^DD",232.72,232.729,.01,"DT")
3120509
"^DD",232.72,232.729,.02,0)
PROPERTY^S^1:text;2:selectedIndex;3:_SelectedDate;^0;2^Q
"^DD",232.72,232.729,.02,3)
Select the property for this validator, if applicable.
"^DD",232.72,232.729,.02,21,0)
^^1^1^3130531^
"^DD",232.72,232.729,.02,21,1,0)
This field holds the property used by the UI.
"^DD",232.72,232.729,.02,"DT")
3120509
"^DD",232.72,232.729,.03,0)
MAX LENGTH^NJ5,0^^0;3^K:+X'=X!(X>99999)!(X<0)!(X?.E1"."1N.N) X
"^DD",232.72,232.729,.03,3)
Type a number between 0 and 99999, 0 decimal digits.
"^DD",232.72,232.729,.03,21,0)
^^1^1^3130604^
"^DD",232.72,232.729,.03,21,1,0)
This defines the maximum field size for a data component in the GUI.
"^DD",232.72,232.729,.03,"DT")
3120509
"^DD",232.72,232.729,.04,0)
REQUIRED^S^1:true;0:false;^0;4^Q
"^DD",232.72,232.729,.04,3)
Select the required status for this component.
"^DD",232.72,232.729,.04,21,0)
^^1^1^3130531^
"^DD",232.72,232.729,.04,21,1,0)
This field indicates to the UI whether or not the component is required.
"^DD",232.72,232.729,.04,"DT")
3120509
"^DD",232.72,232.729,.05,0)
MIN VALUE^F^^0;5^K:$L(X)>30!($L(X)<1) X
"^DD",232.72,232.729,.05,3)
Answer must be 1-30 characters in length.
"^DD",232.72,232.729,.05,21,0)
^^2^2^3130531^
"^DD",232.72,232.729,.05,21,1,0)
This field holds the minimum value for this validator. If a component 
"^DD",232.72,232.729,.05,21,2,0)
should have a minimum value, it should be restricted here.
"^DD",232.72,232.729,.05,"DT")
3120509
"^DD",232.72,232.729,.06,0)
LOWER THAN MIN ERROR^F^^1;1^K:$L(X)>220!($L(X)<1) X
"^DD",232.72,232.729,.06,3)
Answer must be 1-220 characters in length.
"^DD",232.72,232.729,.06,21,0)
^^2^2^3130531^
"^DD",232.72,232.729,.06,21,1,0)
This holds the text that will be displayed in the event a component has a 
"^DD",232.72,232.729,.06,21,2,0)
value that is lower than the indicated minimum value.
"^DD",232.72,232.729,.06,"DT")
3120509
"^DD",232.73,232.73,0)
FIELD^^.01^1
"^DD",232.73,232.73,0,"DT")
3120406
"^DD",232.73,232.73,0,"IX","B",232.73,.01)

"^DD",232.73,232.73,0,"NM","EDP WORKSHEET COMPONENT TYPE")

"^DD",232.73,232.73,0,"PT",232.72,.06)

"^DD",232.73,232.73,0,"VRPK")
EDP
"^DD",232.73,232.73,.01,0)
NAME^RF^^0;1^K:$L(X)>60!($L(X)<3)!'(X'?1P.E) X
"^DD",232.73,232.73,.01,1,0)
^.1
"^DD",232.73,232.73,.01,1,1,0)
232.73^B
"^DD",232.73,232.73,.01,1,1,1)
S ^EDPB(232.73,"B",$E(X,1,30),DA)=""
"^DD",232.73,232.73,.01,1,1,2)
K ^EDPB(232.73,"B",$E(X,1,30),DA)
"^DD",232.73,232.73,.01,3)
Answer must be 3-60 characters in length.
"^DD",232.73,232.73,.01,21,0)
^^1^1^3130531^
"^DD",232.73,232.73,.01,21,1,0)
This is the name of the component type.
"^DD",232.73,232.73,.01,"DT")
3120406
"^DD",232.74,232.74,0)
FIELD^^.01^1
"^DD",232.74,232.74,0,"DT")
3120509
"^DD",232.74,232.74,0,"IX","B",232.74,.01)

"^DD",232.74,232.74,0,"NM","EDP COMPONENT VALIDATORS")

"^DD",232.74,232.74,0,"PT",232.729,.01)

"^DD",232.74,232.74,0,"VRPK")
EDP
"^DD",232.74,232.74,.01,0)
NAME^RF^^0;1^K:$L(X)>60!($L(X)<3)!'(X'?1P.E) X
"^DD",232.74,232.74,.01,1,0)
^.1
"^DD",232.74,232.74,.01,1,1,0)
232.74^B
"^DD",232.74,232.74,.01,1,1,1)
S ^EDPB(232.74,"B",$E(X,1,30),DA)=""
"^DD",232.74,232.74,.01,1,1,2)
K ^EDPB(232.74,"B",$E(X,1,30),DA)
"^DD",232.74,232.74,.01,3)
Answer must be 3-60 characters in length.
"^DD",232.74,232.74,.01,21,0)
^^1^1^3130603^
"^DD",232.74,232.74,.01,21,1,0)
This is a validator used for EDIS worksheet components.
"^DD",232.74,232.74,.01,"DT")
3120509
"^DIC",231.7,231.7,0)
TRACKING STAFF^231.7
"^DIC",231.7,231.7,0,"GL")
^EDPB(231.7,
"^DIC",231.7,231.7,"%D",0)
^^6^6^3081005^
"^DIC",231.7,231.7,"%D",1,0)
This file contains staff assigned to a particular area (e.g., the 
"^DIC",231.7,231.7,"%D",2,0)
emergency department).  It allows for concise selection lists when 
"^DIC",231.7,231.7,"%D",3,0)
updating the tracking log.  It also allows for particular colors to be 
"^DIC",231.7,231.7,"%D",4,0)
associated with staff.  When that person is shown on the display board, 
"^DIC",231.7,231.7,"%D",5,0)
the colors may be used to more easily tell who is assigned to which 
"^DIC",231.7,231.7,"%D",6,0)
patient.
"^DIC",231.7,"B","TRACKING STAFF",231.7)

"^DIC",232.1,232.1,0)
EDP REPORT TEMPLATE^232.1
"^DIC",232.1,232.1,0,"GL")
^EDPB(232.1,
"^DIC",232.1,232.1,"%",0)
^1.005^^0
"^DIC",232.1,232.1,"%D",0)
^1.001^1^1^3130605^^
"^DIC",232.1,232.1,"%D",1,0)
This file holds adhoc report templates.
"^DIC",232.1,"B","EDP REPORT TEMPLATE",232.1)

"^DIC",232.11,232.11,0)
EDP REPORT ELEMENTS^232.11
"^DIC",232.11,232.11,0,"GL")
^EDPB(232.11,
"^DIC",232.11,232.11,"%",0)
^1.005^^0
"^DIC",232.11,232.11,"%D",0)
^^1^1^3130604^
"^DIC",232.11,232.11,"%D",1,0)
This file holds the report elements for use in the report templates.
"^DIC",232.11,"B","EDP REPORT ELEMENTS",232.11)

"^DIC",232.5,232.5,0)
CPE ROLE^232.5
"^DIC",232.5,232.5,0,"GL")
^EDPB(232.5,
"^DIC",232.5,232.5,"%",0)
^1.005^^0
"^DIC",232.5,232.5,"%D",0)
^^1^1^3120227^
"^DIC",232.5,232.5,"%D",1,0)
This file contains the user role settings.
"^DIC",232.5,"B","CPE ROLE",232.5)

"^DIC",232.6,232.6,0)
EDP WORKSHEET SPECIFICATION^232.6
"^DIC",232.6,232.6,0,"GL")
^EDPB(232.6,
"^DIC",232.6,232.6,"%",0)
^1.005^^0
"^DIC",232.6,232.6,"%D",0)
^1.001^3^3^3120327^^^
"^DIC",232.6,232.6,"%D",1,0)
This file contains the specifications for worksheets. Worksheets are 
"^DIC",232.6,232.6,"%D",2,0)
comprised of sections. Each of the sections may contain many 'worksheet 
"^DIC",232.6,232.6,"%D",3,0)
components'.
"^DIC",232.6,"B","EDP WORKSHEET SPECIFICATION",232.6)

"^DIC",232.71,232.71,0)
EDP WORKSHEET SECTION^232.71
"^DIC",232.71,232.71,0,"GL")
^EDPB(232.71,
"^DIC",232.71,232.71,"%D",0)
^^2^2^3120322^
"^DIC",232.71,232.71,"%D",1,0)
This file contains the settings for worksheet sections. Each section can 
"^DIC",232.71,232.71,"%D",2,0)
contain multiple components from the EDP WORKSHEET COMPONENT file.
"^DIC",232.71,"B","EDP WORKSHEET SECTION",232.71)

"^DIC",232.72,232.72,0)
EDP WORKSHEET COMPONENT^232.72
"^DIC",232.72,232.72,0,"GL")
^EDPB(232.72,
"^DIC",232.72,232.72,"%D",0)
^1.001^1^1^3120406^^
"^DIC",232.72,232.72,"%D",1,0)
This file contains the specifications for worksheet components.
"^DIC",232.72,"B","EDP WORKSHEET COMPONENT",232.72)

"^DIC",232.73,232.73,0)
EDP WORKSHEET COMPONENT TYPE^232.73
"^DIC",232.73,232.73,0,"GL")
^EDPB(232.73,
"^DIC",232.73,"B","EDP WORKSHEET COMPONENT TYPE",232.73)

"^DIC",232.74,232.74,0)
EDP COMPONENT VALIDATORS^232.74
"^DIC",232.74,232.74,0,"GL")
^EDPB(232.74,
"^DIC",232.74,"B","EDP COMPONENT VALIDATORS",232.74)

"BLD",8920,6)
^3
**END**
**END**
