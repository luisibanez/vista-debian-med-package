Released PRC*5.1*153 SEQ #131
Extracted from mail message
**KIDS**:PRC*5.1*153^

**INSTALL NAME**
PRC*5.1*153
"BLD",6605,0)
PRC*5.1*153^IFCAP^0^3110601^y
"BLD",6605,1,0)
^^3^3^3110408^
"BLD",6605,1,1,0)
This patch provides a one-way data exchange of Miscellaneous Obligations 
"BLD",6605,1,2,0)
data from IFCAP to the On-Line Certification System (OLCS) at the 
"BLD",6605,1,3,0)
Financial Services Center (FSC) in Austin.
"BLD",6605,4,0)
^9.64PA^^
"BLD",6605,6.3)
10
"BLD",6605,"INID")
n^n
"BLD",6605,"INIT")
POST^PRC153P
"BLD",6605,"KRN",0)
^9.67PA^779.2^20
"BLD",6605,"KRN",.4,0)
.4
"BLD",6605,"KRN",.401,0)
.401
"BLD",6605,"KRN",.402,0)
.402
"BLD",6605,"KRN",.403,0)
.403
"BLD",6605,"KRN",.5,0)
.5
"BLD",6605,"KRN",.84,0)
.84
"BLD",6605,"KRN",3.6,0)
3.6
"BLD",6605,"KRN",3.8,0)
3.8
"BLD",6605,"KRN",3.8,"NM",0)
^9.68A^1^1
"BLD",6605,"KRN",3.8,"NM",1,0)
OLP^^0
"BLD",6605,"KRN",3.8,"NM","B","OLP",1)

"BLD",6605,"KRN",9.2,0)
9.2
"BLD",6605,"KRN",9.8,0)
9.8
"BLD",6605,"KRN",9.8,"NM",0)
^9.68A^5^4
"BLD",6605,"KRN",9.8,"NM",1,0)
PRCESOE^^0^B49918115
"BLD",6605,"KRN",9.8,"NM",2,0)
PRCESOM^^0^B60435984
"BLD",6605,"KRN",9.8,"NM",4,0)
PRCFDO^^0^B111106540
"BLD",6605,"KRN",9.8,"NM",5,0)
PRCFDO1^^0^B104213486
"BLD",6605,"KRN",9.8,"NM","B","PRCESOE",1)

"BLD",6605,"KRN",9.8,"NM","B","PRCESOM",2)

"BLD",6605,"KRN",9.8,"NM","B","PRCFDO",4)

"BLD",6605,"KRN",9.8,"NM","B","PRCFDO1",5)

"BLD",6605,"KRN",19,0)
19
"BLD",6605,"KRN",19,"NM",0)
^9.68A^^
"BLD",6605,"KRN",19.1,0)
19.1
"BLD",6605,"KRN",101,0)
101
"BLD",6605,"KRN",409.61,0)
409.61
"BLD",6605,"KRN",771,0)
771
"BLD",6605,"KRN",779.2,0)
779.2
"BLD",6605,"KRN",870,0)
870
"BLD",6605,"KRN",8989.51,0)
8989.51
"BLD",6605,"KRN",8989.51,"NM",0)
^9.68A^1^1
"BLD",6605,"KRN",8989.51,"NM",1,0)
PRC OLCS 1358 EXTRACT^^0
"BLD",6605,"KRN",8989.51,"NM","B","PRC OLCS 1358 EXTRACT",1)

"BLD",6605,"KRN",8989.52,0)
8989.52
"BLD",6605,"KRN",8994,0)
8994
"BLD",6605,"KRN","B",.4,.4)

"BLD",6605,"KRN","B",.401,.401)

"BLD",6605,"KRN","B",.402,.402)

"BLD",6605,"KRN","B",.403,.403)

"BLD",6605,"KRN","B",.5,.5)

"BLD",6605,"KRN","B",.84,.84)

"BLD",6605,"KRN","B",3.6,3.6)

"BLD",6605,"KRN","B",3.8,3.8)

"BLD",6605,"KRN","B",9.2,9.2)

"BLD",6605,"KRN","B",9.8,9.8)

"BLD",6605,"KRN","B",19,19)

"BLD",6605,"KRN","B",19.1,19.1)

"BLD",6605,"KRN","B",101,101)

"BLD",6605,"KRN","B",409.61,409.61)

"BLD",6605,"KRN","B",771,771)

"BLD",6605,"KRN","B",779.2,779.2)

"BLD",6605,"KRN","B",870,870)

"BLD",6605,"KRN","B",8989.51,8989.51)

"BLD",6605,"KRN","B",8989.52,8989.52)

"BLD",6605,"KRN","B",8994,8994)

"BLD",6605,"PRE")
PRC153P
"BLD",6605,"QUES",0)
^9.62^^
"BLD",6605,"REQB",0)
^9.611^1^1
"BLD",6605,"REQB",1,0)
PRC*5.1*148^2
"BLD",6605,"REQB","B","PRC*5.1*148",1)

"INIT")
POST^PRC153P
"KRN",3.8,367,-1)
0^1
"KRN",3.8,367,0)
OLP^PU^n^^^0^
"KRN",3.8,367,2,0)
^^5^5^3110531^
"KRN",3.8,367,2,1,0)
This mail group will receive confirmation mail messages from the Austin
"KRN",3.8,367,2,2,0)
Information Technology Center (AITC) postmaster for 1358 transaction
"KRN",3.8,367,2,3,0)
messages sent by the IFCAP package to Domain Q-OLP.MED.VA.GOV. This mail
"KRN",3.8,367,2,4,0)
group supports the interface between IFCAP and the Online Certification
"KRN",3.8,367,2,5,0)
System (PRC*5.1*153).
"KRN",3.8,367,3)

"KRN",8989.51,4833,-1)
0^1
"KRN",8989.51,4833,0)
PRC OLCS 1358 EXTRACT^Finish date/time of OLCS 1358 extract^0^^Finish date/time^
"KRN",8989.51,4833,1)
D^::T^Enter a date/time
"KRN",8989.51,4833,4,0)
^8989.514^2^2
"KRN",8989.51,4833,4,1,0)
PRC
"KRN",8989.51,4833,4,2,0)
OLCS
"KRN",8989.51,4833,4,"B","OLCS",2)

"KRN",8989.51,4833,4,"B","PRC",1)

"KRN",8989.51,4833,6)
N
"KRN",8989.51,4833,20,0)
^^4^4^3110215^
"KRN",8989.51,4833,20,1,0)
This parameter holds the date/time that the job responsible for 
"KRN",8989.51,4833,20,2,0)
sending an initial extract of 1358 transactions to the Online 
"KRN",8989.51,4833,20,3,0)
Certification System (OLCS) finished running. This parameter is not
"KRN",8989.51,4833,20,4,0)
intended to be modified using parameter tools.
"KRN",8989.51,4833,30,0)
^8989.513I^1^1
"KRN",8989.51,4833,30,1,0)
1^4.2
"MBREQ")
0
"ORD",11,3.8)
3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1;;MAILGDEL^XPDIA1(%)
"ORD",11,3.8,0)
MAIL GROUP
"ORD",20,8989.51)
8989.51;20;;;PAR1E1^XPDTA2;PAR1F1^XPDIA3;PAR1E1^XPDIA3;PAR1F2^XPDIA3;;PAR1DEL^XPDIA3(%)
"ORD",20,8989.51,0)
PARAMETER DEFINITION
"PKG",455,-1)
1^1
"PKG",455,0)
IFCAP^PRC^IFCAP System Files
"PKG",455,20,0)
^9.402P^^
"PKG",455,22,0)
^9.49I^1^1
"PKG",455,22,1,0)
5.1^3001012^3001019^68
"PKG",455,22,1,"PAH",1,0)
153^3110601
"PKG",455,22,1,"PAH",1,1,0)
^^3^3^3110601
"PKG",455,22,1,"PAH",1,1,1,0)
This patch provides a one-way data exchange of Miscellaneous Obligations 
"PKG",455,22,1,"PAH",1,1,2,0)
data from IFCAP to the On-Line Certification System (OLCS) at the 
"PKG",455,22,1,"PAH",1,1,3,0)
Financial Services Center (FSC) in Austin.
"PRE")
PRC153P
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
5
"RTN","PRC153P")
0^^B99516363^n/a
"RTN","PRC153P",1,0)
PRC153P ;WOIFO/KCL - PRC*5.1*153 INSTALL UTILITIES ;2/24/2011
"RTN","PRC153P",2,0)
V ;;5.1;IFCAP;**153**;Oct 20, 2000;Build 10
"RTN","PRC153P",3,0)
 ;
"RTN","PRC153P",4,0)
 ;--------------------------------------------------
"RTN","PRC153P",5,0)
 ;Patch PRC*5.1*153: Environment, Pre-Install, and
"RTN","PRC153P",6,0)
 ;Post-Install entry points.
"RTN","PRC153P",7,0)
 ;--------------------------------------------------
"RTN","PRC153P",8,0)
 ;
"RTN","PRC153P",9,0)
ENV ;Main entry point for Environment check items
"RTN","PRC153P",10,0)
 ;
"RTN","PRC153P",11,0)
 ; Per KIDS documentation: During the environment check routine,
"RTN","PRC153P",12,0)
 ; use of direct WRITEs must be used for output messages.
"RTN","PRC153P",13,0)
 ;
"RTN","PRC153P",14,0)
 ;KIDS variable to indicate if install should abort
"RTN","PRC153P",15,0)
 ;if SET = 2, then abort entire installation
"RTN","PRC153P",16,0)
 S XPDABORT=""
"RTN","PRC153P",17,0)
 ;
"RTN","PRC153P",18,0)
 ;item 1 - check programmer variables
"RTN","PRC153P",19,0)
 W !!,">>> Check programmer variables..."
"RTN","PRC153P",20,0)
 D PROGCHK(.XPDABORT)
"RTN","PRC153P",21,0)
 Q:XPDABORT=2
"RTN","PRC153P",22,0)
 W "Successful"
"RTN","PRC153P",23,0)
 ;
"RTN","PRC153P",24,0)
 ;item 2 - check for Domain entry
"RTN","PRC153P",25,0)
 W !!,">>> Check for DOMAIN (#4.2) file entry..."
"RTN","PRC153P",26,0)
 D DOMCHK(.XPDABORT)
"RTN","PRC153P",27,0)
 Q:XPDABORT=2
"RTN","PRC153P",28,0)
 W "Successful"
"RTN","PRC153P",29,0)
 ;
"RTN","PRC153P",30,0)
 ;success
"RTN","PRC153P",31,0)
 I XPDABORT="" K XPDABORT
"RTN","PRC153P",32,0)
 Q
"RTN","PRC153P",33,0)
 ;
"RTN","PRC153P",34,0)
 ;
"RTN","PRC153P",35,0)
PRE ;Main entry point for Pre-init items
"RTN","PRC153P",36,0)
 Q
"RTN","PRC153P",37,0)
 ;
"RTN","PRC153P",38,0)
 ;
"RTN","PRC153P",39,0)
POST ;Main entry point for Post-init items
"RTN","PRC153P",40,0)
 ;
"RTN","PRC153P",41,0)
 ; Supported IAs:
"RTN","PRC153P",42,0)
 ;  #10141 Allows use of supported Kernel call BMES^XPDUTL
"RTN","PRC153P",43,0)
 ;
"RTN","PRC153P",44,0)
 ;item 1 - add mail group member
"RTN","PRC153P",45,0)
 D BMES^XPDUTL(">>> Adding member to 'OLP' mail group...")
"RTN","PRC153P",46,0)
 D POST1
"RTN","PRC153P",47,0)
 ;
"RTN","PRC153P",48,0)
 ;item 2 - queue initial data extract
"RTN","PRC153P",49,0)
 N PRCOK
"RTN","PRC153P",50,0)
 D BMES^XPDUTL(">>> Queue job to perform data extract of 1358 transactions...")
"RTN","PRC153P",51,0)
 D OK(.PRCOK)     ;ok to run extract?
"RTN","PRC153P",52,0)
 I PRCOK D POST2  ;queue extract
"RTN","PRC153P",53,0)
 Q
"RTN","PRC153P",54,0)
 ;
"RTN","PRC153P",55,0)
 ;
"RTN","PRC153P",56,0)
PROGCHK(XPDABORT) ;Check for required programmer variables
"RTN","PRC153P",57,0)
 ;
"RTN","PRC153P",58,0)
 ; This procedure will determine if the users programmer variable are set up.
"RTN","PRC153P",59,0)
 ;
"RTN","PRC153P",60,0)
 ; Per KIDS documentation: During the environment check routine,
"RTN","PRC153P",61,0)
 ; use of direct WRITEs must be used for output messages.
"RTN","PRC153P",62,0)
 ;
"RTN","PRC153P",63,0)
 ;  Input: 
"RTN","PRC153P",64,0)
 ;   XPDABORT - KIDS var to indicate if install should
"RTN","PRC153P",65,0)
 ;              abort, passed by reference
"RTN","PRC153P",66,0)
 ;
"RTN","PRC153P",67,0)
 ; Output:
"RTN","PRC153P",68,0)
 ;   XPDABORT - if = 2, then abort entire installation
"RTN","PRC153P",69,0)
 ;
"RTN","PRC153P",70,0)
 I '$G(DUZ)!($G(DUZ(0))'="@")!('$G(DT))!($G(U)'="^") D
"RTN","PRC153P",71,0)
 . W !!,"    **********"
"RTN","PRC153P",72,0)
 . W !,"      ERROR: Environment check failed!"
"RTN","PRC153P",73,0)
 . W !,"      Your programming variables are not set up properly. Once"
"RTN","PRC153P",74,0)
 . W !,"      your programming variables are set up correctly, re-install"
"RTN","PRC153P",75,0)
 . W !,"      this patch PRC*5.1*153."
"RTN","PRC153P",76,0)
 . W !,"    **********"
"RTN","PRC153P",77,0)
 . ;tell KIDS to abort the entire installation of the distribution
"RTN","PRC153P",78,0)
 . S XPDABORT=2
"RTN","PRC153P",79,0)
 Q
"RTN","PRC153P",80,0)
 ;
"RTN","PRC153P",81,0)
 ;
"RTN","PRC153P",82,0)
DOMCHK(XPDABORT) ;Check for new DOMAIN (#4.2) file entry
"RTN","PRC153P",83,0)
 ;
"RTN","PRC153P",84,0)
 ; This procedure will determine if DOMAIN (#4.2) file entry was added
"RTN","PRC153P",85,0)
 ; per MailMan patch XM*999*175.
"RTN","PRC153P",86,0)
 ;
"RTN","PRC153P",87,0)
 ; Per KIDS documentation: During the environment check routine,
"RTN","PRC153P",88,0)
 ; use of direct WRITEs must be used for output messages.
"RTN","PRC153P",89,0)
 ;
"RTN","PRC153P",90,0)
 ; Supported IAs:
"RTN","PRC153P",91,0)
 ;  #3452 Allows use of supported FM call $$FIND1^DIC
"RTN","PRC153P",92,0)
 ;  #3779 Allows read with FM on the NAME (#.01) field in the DOMAIN (#4.2)
"RTN","PRC153P",93,0)
 ;        file to ensure that the domain Q-OLP.MED.VA.GOV exists
"RTN","PRC153P",94,0)
 ;
"RTN","PRC153P",95,0)
 ;  Input: 
"RTN","PRC153P",96,0)
 ;   XPDABORT - KIDS var to indicate if install should
"RTN","PRC153P",97,0)
 ;              abort, passed by reference
"RTN","PRC153P",98,0)
 ;
"RTN","PRC153P",99,0)
 ; Output:
"RTN","PRC153P",100,0)
 ;   XPDABORT - if = 2, then abort entire installation
"RTN","PRC153P",101,0)
 ;
"RTN","PRC153P",102,0)
 I '$$FIND1^DIC(4.2,"","MX","Q-OLP.MED.VA.GOV") D
"RTN","PRC153P",103,0)
 . W !!,"    **********"
"RTN","PRC153P",104,0)
 . W !,"      ERROR: Environment check failed!"
"RTN","PRC153P",105,0)
 . W !,"      The required DOMAIN (#4.2) file entry was not found"
"RTN","PRC153P",106,0)
 . W !,"      for 'Q-OLP.MED.VA.GOV'. Please refer to MailMan patch"
"RTN","PRC153P",107,0)
 . W !,"      XM*999*175 to create this new entry. After the DOMAIN"
"RTN","PRC153P",108,0)
 . W !,"      entry has been created, re-install this patch PRC*5.1*153."
"RTN","PRC153P",109,0)
 . W !,"    **********"
"RTN","PRC153P",110,0)
 . ;tell KIDS to abort the entire installation of the distribution
"RTN","PRC153P",111,0)
 . S XPDABORT=2
"RTN","PRC153P",112,0)
 Q
"RTN","PRC153P",113,0)
 ;
"RTN","PRC153P",114,0)
 ;
"RTN","PRC153P",115,0)
OK(PRCOK) ;Ok to queue initial data extract?
"RTN","PRC153P",116,0)
 ;
"RTN","PRC153P",117,0)
 ; This procedure will determine if it's ok to queue the initial
"RTN","PRC153P",118,0)
 ; data extract.
"RTN","PRC153P",119,0)
 ;
"RTN","PRC153P",120,0)
 ; Queuing will not be allowed if:
"RTN","PRC153P",121,0)
 ;   [Not a production system]
"RTN","PRC153P",122,0)
 ;     OR
"RTN","PRC153P",123,0)
 ;   [Job is already running]
"RTN","PRC153P",124,0)
 ;     OR
"RTN","PRC153P",125,0)
 ;   [Job has been run previously]
"RTN","PRC153P",126,0)
 ;
"RTN","PRC153P",127,0)
 ; Supported IAs:
"RTN","PRC153P",128,0)
 ;  #10141 Allows use of supported Kernel call BMES^XPDUTL and MES^XPDUTL
"RTN","PRC153P",129,0)
 ;   #4440 Allows use of supported Kernel call $$PROD^XUPROD
"RTN","PRC153P",130,0)
 ;   #2263 Allows use of supported Kernel call $$GET^XPAR
"RTN","PRC153P",131,0)
 ;
"RTN","PRC153P",132,0)
 ;  Input: 
"RTN","PRC153P",133,0)
 ;   PRCOK - ok to queue initial data extract?, passed by reference
"RTN","PRC153P",134,0)
 ;
"RTN","PRC153P",135,0)
 ; Output:
"RTN","PRC153P",136,0)
 ;   PRCOK - 1 if ok to queue, 0 if not ok
"RTN","PRC153P",137,0)
 ;
"RTN","PRC153P",138,0)
 N PRCTASK ;task #
"RTN","PRC153P",139,0)
 N PRCVAL  ;result of $$GET^XPAR function
"RTN","PRC153P",140,0)
 ;
"RTN","PRC153P",141,0)
 S PRCOK=1
"RTN","PRC153P",142,0)
 ;
"RTN","PRC153P",143,0)
 ;short circuit if not a production system
"RTN","PRC153P",144,0)
 I '$$PROD^XUPROD(1) D  Q
"RTN","PRC153P",145,0)
 . S PRCOK=0
"RTN","PRC153P",146,0)
 . D BMES^XPDUTL("    **********")
"RTN","PRC153P",147,0)
 . D MES^XPDUTL("      WARNING: This is not a production system.")
"RTN","PRC153P",148,0)
 . D MES^XPDUTL("      The job to perform an initial data extract of 1358")
"RTN","PRC153P",149,0)
 . D MES^XPDUTL("      transactions and transmit them to the Online")
"RTN","PRC153P",150,0)
 . D MES^XPDUTL("      Certification System will not be queued.")
"RTN","PRC153P",151,0)
 . D MES^XPDUTL("    **********")
"RTN","PRC153P",152,0)
 ;
"RTN","PRC153P",153,0)
 ;short circuit if job already running
"RTN","PRC153P",154,0)
 S PRCTASK=$G(^XTMP("PRC153P","TASK"))
"RTN","PRC153P",155,0)
 I +PRCTASK D  Q
"RTN","PRC153P",156,0)
 . I $$STATUS(PRCTASK)>0 D
"RTN","PRC153P",157,0)
 . . S PRCOK=0
"RTN","PRC153P",158,0)
 . . D BMES^XPDUTL("    **********")
"RTN","PRC153P",159,0)
 . . D MES^XPDUTL("      WARNING: Duplicate processes cannot be started.")
"RTN","PRC153P",160,0)
 . . D MES^XPDUTL("      The job to perform an initial data extract of 1358")
"RTN","PRC153P",161,0)
 . . D MES^XPDUTL("      transactions and transmit them to the Online")
"RTN","PRC153P",162,0)
 . . D MES^XPDUTL("      Certification System is already running.")
"RTN","PRC153P",163,0)
 . . D MES^XPDUTL("      The task number is "_PRCTASK)
"RTN","PRC153P",164,0)
 . . D MES^XPDUTL("    **********")
"RTN","PRC153P",165,0)
 ;
"RTN","PRC153P",166,0)
 ;short circuit if job has been run previously
"RTN","PRC153P",167,0)
 S PRCVAL=$$GET^XPAR("SYS","PRC OLCS 1358 EXTRACT",1,"E")
"RTN","PRC153P",168,0)
 I $G(PRCVAL)]"" D  Q
"RTN","PRC153P",169,0)
 . S PRCOK=0
"RTN","PRC153P",170,0)
 . D BMES^XPDUTL("    **********")
"RTN","PRC153P",171,0)
 . D MES^XPDUTL("      WARNING: The job has been run previously.")
"RTN","PRC153P",172,0)
 . D MES^XPDUTL("      The job to perform an initial data extract of 1358")
"RTN","PRC153P",173,0)
 . D MES^XPDUTL("      transactions and transmit them to the Online")
"RTN","PRC153P",174,0)
 . D MES^XPDUTL("      Certification System will not be queued.")
"RTN","PRC153P",175,0)
 . D MES^XPDUTL("      The job completed on "_PRCVAL)
"RTN","PRC153P",176,0)
 . D MES^XPDUTL("    **********")
"RTN","PRC153P",177,0)
 Q
"RTN","PRC153P",178,0)
 ;
"RTN","PRC153P",179,0)
 ;
"RTN","PRC153P",180,0)
POST1 ;Add member to OLP mail group
"RTN","PRC153P",181,0)
 ;
"RTN","PRC153P",182,0)
 ; This procedure adds the installer or Postmaster as a new member to
"RTN","PRC153P",183,0)
 ; the OLP mail group.  
"RTN","PRC153P",184,0)
 ;
"RTN","PRC153P",185,0)
 ; Supported IAs:
"RTN","PRC153P",186,0)
 ;  #10141 Allows use of supported Kernel call BMES^XPDUTL and MES^XPDUTL
"RTN","PRC153P",187,0)
 ;  #10067 Allows use of supported Mailman call CHK^XMA21
"RTN","PRC153P",188,0)
 ;   #1146 Allows use of supported Mailman call $$MG^XMBGRP
"RTN","PRC153P",189,0)
 ;   #2051 Allows use of supported FM call $$FIND1^DIC
"RTN","PRC153P",190,0)
 ;
"RTN","PRC153P",191,0)
 ;  Input: None
"RTN","PRC153P",192,0)
 ; Output: None
"RTN","PRC153P",193,0)
 ;
"RTN","PRC153P",194,0)
 N PRCDUZ ;installer DUZ, otherwise Postmaster
"RTN","PRC153P",195,0)
 N PRCIEN ;IEN of the mail group in the MAIL GROUP file (#3.8)
"RTN","PRC153P",196,0)
 N PRCMEM ;text used in success msg
"RTN","PRC153P",197,0)
 N PRCTXT ;array of text to put in description field of mail group
"RTN","PRC153P",198,0)
 N PRCXMY ;array of local users to add to the mail group
"RTN","PRC153P",199,0)
 ;
"RTN","PRC153P",200,0)
 ;short circuit if mail group does not exist
"RTN","PRC153P",201,0)
 S PRCIEN=$$FIND1^DIC(3.8,"","X","OLP","B")
"RTN","PRC153P",202,0)
 I 'PRCIEN D  Q
"RTN","PRC153P",203,0)
 . D BMES^XPDUTL("    **********")
"RTN","PRC153P",204,0)
 . D MES^XPDUTL("      ERROR: The OLP Mail Group does not exist!")
"RTN","PRC153P",205,0)
 . D MES^XPDUTL("")
"RTN","PRC153P",206,0)
 . D MES^XPDUTL("      Please enter a Remedy ticket for assistance.")
"RTN","PRC153P",207,0)
 . D MES^XPDUTL("    **********")
"RTN","PRC153P",208,0)
 ;
"RTN","PRC153P",209,0)
 S PRCDUZ=$S(+$G(DUZ)>0:DUZ,1:.5)
"RTN","PRC153P",210,0)
 S PRCXMY(PRCDUZ)=""
"RTN","PRC153P",211,0)
 S PRCMEM=$S(PRCDUZ=.5:"Postmaster",1:"Installer")
"RTN","PRC153P",212,0)
 S PRCTXT(0)="" ;required for $$MG^XMBGRP call, ignored if not creating mail group
"RTN","PRC153P",213,0)
 ;
"RTN","PRC153P",214,0)
 ;short circuit if installer is already a member
"RTN","PRC153P",215,0)
 N Y     ;IEN of the mail group in the MAIL GROUP file (#3.8)
"RTN","PRC153P",216,0)
 N XMDUZ ;DUZ of user to look for
"RTN","PRC153P",217,0)
 S XMDUZ=PRCDUZ
"RTN","PRC153P",218,0)
 S Y=PRCIEN
"RTN","PRC153P",219,0)
 D CHK^XMA21
"RTN","PRC153P",220,0)
 I $T D  Q
"RTN","PRC153P",221,0)
 . D BMES^XPDUTL("    **********")
"RTN","PRC153P",222,0)
 . D MES^XPDUTL("      WARNING: "_PRCMEM_" is already a member of the OLP mail")
"RTN","PRC153P",223,0)
 . D MES^XPDUTL("      group. No action required.")
"RTN","PRC153P",224,0)
 . D MES^XPDUTL("    **********")
"RTN","PRC153P",225,0)
 ;
"RTN","PRC153P",226,0)
 ;add mail group member (silent call to MailMan API)
"RTN","PRC153P",227,0)
 I $$MG^XMBGRP("OLP",0,PRCDUZ,0,.PRCXMY,.PRCTXT,1) D
"RTN","PRC153P",228,0)
 . D BMES^XPDUTL("    **********")
"RTN","PRC153P",229,0)
 . D MES^XPDUTL("      SUCCESS: "_PRCMEM_" successfully added as a member")
"RTN","PRC153P",230,0)
 . D MES^XPDUTL("      to the OLP Mail Group.")
"RTN","PRC153P",231,0)
 . D MES^XPDUTL("")
"RTN","PRC153P",232,0)
 . D MES^XPDUTL("      After the patch installation, please enter other members")
"RTN","PRC153P",233,0)
 . D MES^XPDUTL("      as appropriate.")
"RTN","PRC153P",234,0)
 . D MES^XPDUTL("    **********")
"RTN","PRC153P",235,0)
 E  D
"RTN","PRC153P",236,0)
 . D BMES^XPDUTL("    **********")
"RTN","PRC153P",237,0)
 . D MES^XPDUTL("      ERROR: No members could be added to the OLP Mail Group!")
"RTN","PRC153P",238,0)
 . D MES^XPDUTL("")
"RTN","PRC153P",239,0)
 . D MES^XPDUTL("      Please enter a Remedy ticket for assistance.")
"RTN","PRC153P",240,0)
 . D MES^XPDUTL("    **********")
"RTN","PRC153P",241,0)
 Q
"RTN","PRC153P",242,0)
 ;
"RTN","PRC153P",243,0)
 ;
"RTN","PRC153P",244,0)
POST2 ;Queue initial data extract
"RTN","PRC153P",245,0)
 ;
"RTN","PRC153P",246,0)
 ; This procedure is responsible for queuing the initial data extract.
"RTN","PRC153P",247,0)
 ; Upon queuing the job, the task number assigned will be placed in
"RTN","PRC153P",248,0)
 ; the ^XTMP global.
"RTN","PRC153P",249,0)
 ;
"RTN","PRC153P",250,0)
 ;  Input: None
"RTN","PRC153P",251,0)
 ; Output: None
"RTN","PRC153P",252,0)
 ;
"RTN","PRC153P",253,0)
 ; Supported IAs:
"RTN","PRC153P",254,0)
 ;  #10141 Allows use of supported Kernel call BMES^XPDUTL and MES^XPDUTL
"RTN","PRC153P",255,0)
 ;  #10103 Allows use of supported Kernel call $$FMADD^XLFDT
"RTN","PRC153P",256,0)
 ;  #10063 Allows use of supported Kernel call ^%ZTLOAD
"RTN","PRC153P",257,0)
 ;
"RTN","PRC153P",258,0)
 N ZTRTN  ;the API TaskMan will DO to start the task
"RTN","PRC153P",259,0)
 N ZTDESC ;task description
"RTN","PRC153P",260,0)
 N ZTSK   ;task number assigned to the task
"RTN","PRC153P",261,0)
 N ZTSAVE ;save input variables to the task 
"RTN","PRC153P",262,0)
 N ZTIO   ;(optional) I/O device the task should use
"RTN","PRC153P",263,0)
 N ZTDTH  ;(optional) start time when TaskMan should start the task
"RTN","PRC153P",264,0)
 ;
"RTN","PRC153P",265,0)
 K ^XTMP("PRC153P")
"RTN","PRC153P",266,0)
 S ZTRTN="EXTRACT^PRCFDO1"
"RTN","PRC153P",267,0)
 S ZTDESC="PRC*5.1*153 INITIAL EXTRACT OF 1358 TRANSACTIONS"
"RTN","PRC153P",268,0)
 S ZTIO=""
"RTN","PRC153P",269,0)
 S ZTSAVE("DUZ")=""
"RTN","PRC153P",270,0)
 S ZTDTH=$$NOW^XLFDT
"RTN","PRC153P",271,0)
 D ^%ZTLOAD
"RTN","PRC153P",272,0)
 ;success
"RTN","PRC153P",273,0)
 I $G(ZTSK) D
"RTN","PRC153P",274,0)
 . S ^XTMP("PRC153P",0)=$$FMADD^XLFDT(DT,3)_"^"_DT_"^"_"PRC*5.1*153 Initial extract 1358 transactions"
"RTN","PRC153P",275,0)
 . S ^XTMP("PRC153P","TASK")=ZTSK
"RTN","PRC153P",276,0)
 . D BMES^XPDUTL("    **********")
"RTN","PRC153P",277,0)
 . D MES^XPDUTL("      SUCCESS: Job was queued.")
"RTN","PRC153P",278,0)
 . D MES^XPDUTL("      The job to perform an initial data extract of 1358")
"RTN","PRC153P",279,0)
 . D MES^XPDUTL("      transactions and transmit them to the Online")
"RTN","PRC153P",280,0)
 . D MES^XPDUTL("      Certification System was successfully queued.")
"RTN","PRC153P",281,0)
 . D MES^XPDUTL("      The task number is "_ZTSK)
"RTN","PRC153P",282,0)
 . D MES^XPDUTL("    **********")
"RTN","PRC153P",283,0)
 ;failure
"RTN","PRC153P",284,0)
 I '$G(ZTSK) D
"RTN","PRC153P",285,0)
 . D BMES^XPDUTL("    **********")
"RTN","PRC153P",286,0)
 . D MES^XPDUTL("      ERROR: Job was not queued!")
"RTN","PRC153P",287,0)
 . D MES^XPDUTL("      The job to perform an initial data extract of 1358")
"RTN","PRC153P",288,0)
 . D MES^XPDUTL("      transactions and transmit them to the Online")
"RTN","PRC153P",289,0)
 . D MES^XPDUTL("      Certification System was not successfully queued.")
"RTN","PRC153P",290,0)
 . D MES^XPDUTL("      Please enter a Remedy ticket for assistance.")
"RTN","PRC153P",291,0)
 . D MES^XPDUTL("    **********")
"RTN","PRC153P",292,0)
 Q
"RTN","PRC153P",293,0)
 ;
"RTN","PRC153P",294,0)
 ;
"RTN","PRC153P",295,0)
STATUS(PRCTASK) ;Determine status of a task
"RTN","PRC153P",296,0)
 ;
"RTN","PRC153P",297,0)
 ; This procedure will determine the status of a task.
"RTN","PRC153P",298,0)
 ;
"RTN","PRC153P",299,0)
 ; Supported IAs:
"RTN","PRC153P",300,0)
 ;  #10063 Allows use of supported Kernel call STAT^%ZTLOAD
"RTN","PRC153P",301,0)
 ;
"RTN","PRC153P",302,0)
 ;  Input: 
"RTN","PRC153P",303,0)
 ;   PRCTASK - task number to lookup
"RTN","PRC153P",304,0)
 ;
"RTN","PRC153P",305,0)
 ; Output:
"RTN","PRC153P",306,0)
 ;   Function Value - Returns 1 if task has finished, 0 otherwise
"RTN","PRC153P",307,0)
 ;
"RTN","PRC153P",308,0)
 N ZTSK
"RTN","PRC153P",309,0)
 N RESULT
"RTN","PRC153P",310,0)
 S RESULT=0
"RTN","PRC153P",311,0)
 S ZTSK=+$G(PRCTASK)
"RTN","PRC153P",312,0)
 D STAT^%ZTLOAD
"RTN","PRC153P",313,0)
 ;
"RTN","PRC153P",314,0)
 D  ;drops out of DO block on failure
"RTN","PRC153P",315,0)
 . Q:ZTSK(0)=0  ;Undefined task
"RTN","PRC153P",316,0)
 . Q:ZTSK(1)=1  ;Active: Pending
"RTN","PRC153P",317,0)
 . Q:ZTSK(1)=2  ;Active: Running
"RTN","PRC153P",318,0)
 . Q:ZTSK(1)=4  ;Inactive: Available
"RTN","PRC153P",319,0)
 . Q:ZTSK(1)=5  ;Inactive: Interrupted
"RTN","PRC153P",320,0)
 . S RESULT=1
"RTN","PRC153P",321,0)
 Q RESULT
"RTN","PRCESOE")
0^1^B49918115^B45274590
"RTN","PRCESOE",1,0)
PRCESOE ;WISC/CLH/CTB/SJG/ASU - 1358 OBLIGATION ; 08/22/94  5:11 PM
"RTN","PRCESOE",2,0)
V ;;5.1;IFCAP;**148,153**;Oct 20, 2000;Build 10
"RTN","PRCESOE",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRCESOE",4,0)
 K PRC,PRCF,Y
"RTN","PRCESOE",5,0)
 N PRCFSC S PRCFSC=1    ;PRC*5.1*148  ENTERED FROM 1358 OBLIGATE
"RTN","PRCESOE",6,0)
 D OUT
"RTN","PRCESOE",7,0)
 S PRCF("X")="AB"
"RTN","PRCESOE",8,0)
 D ^PRCFSITE Q:'%
"RTN","PRCESOE",9,0)
 D LOOKUP G:Y<0 OUT
"RTN","PRCESOE",10,0)
 D K1A^PRCFFUZ
"RTN","PRCESOE",11,0)
 S (OB,DA)=+Y ; ien for file 410
"RTN","PRCESOE",12,0)
 S PRCFA("RETRAN")=0
"RTN","PRCESOE",13,0)
SC ; Entry point for rebuild/retransmit
"RTN","PRCESOE",14,0)
 D NODE^PRCS58OB(DA,.TRNODE) ; set file 410 values into TRNODE array
"RTN","PRCESOE",15,0)
 S PRCFA("TRDA")=OB
"RTN","PRCESOE",16,0)
 D SCREEN^PRCEOB1 W !
"RTN","PRCESOE",17,0)
 D VENCONO^PRCFFU15(OB) ; display vendor & contract info, if exists
"RTN","PRCESOE",18,0)
 ; PRC*5.1*148 start
"RTN","PRCESOE",19,0)
 ; if Obligator is a requestor, violation to segregation of duties
"RTN","PRCESOE",20,0)
 I $P($G(TRNODE(7)),"^",1)=DUZ D  G OUT
"RTN","PRCESOE",21,0)
 . W !!,"You are the CP Clerk (Requestor) on this 1358 transaction."
"RTN","PRCESOE",22,0)
 . W !,"Per Segregation of Duties, the CP Clerk (Requestor)"
"RTN","PRCESOE",23,0)
 . W " is not permitted to "
"RTN","PRCESOE",24,0)
 . W $S($G(PRCFSC):"Obligate",1:"Rebuild/Retransmit")," the 1358."
"RTN","PRCESOE",25,0)
 . I $G(PRCFSC) Q
"RTN","PRCESOE",26,0)
 . W ! D EN^DDIOL("  ** Press RETURN to continue **")
"RTN","PRCESOE",27,0)
 . R X:DTIME Q
"RTN","PRCESOE",28,0)
 ; if Obligator is a approver, violation to segregation of duties
"RTN","PRCESOE",29,0)
 I $P($G(TRNODE(7)),"^",3)=DUZ D  G OUT
"RTN","PRCESOE",30,0)
 . W !!,"You are the Approver on this 1358 transaction."
"RTN","PRCESOE",31,0)
 . W !,"Per Segregation of Duties, the Approver is not permitted to "
"RTN","PRCESOE",32,0)
 . W $S($G(PRCFSC):"Obligate",1:"Rebuild/Retransmit")," the 1358."
"RTN","PRCESOE",33,0)
 . I $G(PRCFSC) Q
"RTN","PRCESOE",34,0)
 . W ! D EN^DDIOL("  ** Press RETURN to continue **")
"RTN","PRCESOE",35,0)
 . R X:DTIME Q
"RTN","PRCESOE",36,0)
 ; PRC*5.1*148 end
"RTN","PRCESOE",37,0)
 S FLDCHK=0
"RTN","PRCESOE",38,0)
 D EN^PRCFFU14(OB) ; edit auto accrual info
"RTN","PRCESOE",39,0)
 I ACCEDIT=1 G SC
"RTN","PRCESOE",40,0)
 I FLDCHK=1 D OUT G V
"RTN","PRCESOE",41,0)
OKAY S PRCFA("IDES")="1358 Obligation"
"RTN","PRCESOE",42,0)
 D OKAY^PRCFFU ; ask 'Is info correct?'
"RTN","PRCESOE",43,0)
 I $D(DIRUT) D MSG H 3 G OUT
"RTN","PRCESOE",44,0)
 S ESIGCHK=1
"RTN","PRCESOE",45,0)
 S FISCEDIT=0
"RTN","PRCESOE",46,0)
 I 'Y D 1358^PRCFFU13 ; edit cost center or boc?
"RTN","PRCESOE",47,0)
 I 'ESIGCHK D MSG H 3 G OUT
"RTN","PRCESOE",48,0)
 I FISCEDIT G SC
"RTN","PRCESOE",49,0)
 S PRC("RBDT")=$P(TRNODE(0),U,11)
"RTN","PRCESOE",50,0)
 S PCP=$P(TRNODE(0),"-",4)
"RTN","PRCESOE",51,0)
 S PQT=$P(TRNODE(0),"-",3)
"RTN","PRCESOE",52,0)
 D CPBAL^PRCFFMO1 ; display control point balance
"RTN","PRCESOE",53,0)
 K PQT,PRCF("NOBAL")
"RTN","PRCESOE",54,0)
 K PRCTMP
"RTN","PRCESOE",55,0)
 I '$P(TRNODE(0),U,11) D
"RTN","PRCESOE",56,0)
 . D ERS410^PRC0G(DA)
"RTN","PRCESOE",57,0)
 . S TRNODE(0)=^PRCS(410,DA,0)
"RTN","PRCESOE",58,0)
 S PRC("FY")=$P(TRNODE(0),"-",2)
"RTN","PRCESOE",59,0)
 S PRC("QTR")=$P(TRNODE(0),"-",3)
"RTN","PRCESOE",60,0)
 S PRC("CP")=$P(TRNODE(0),"-",4)
"RTN","PRCESOE",61,0)
 I $G(PRCRGS)<1 D OVCOM1^PRCFFU10 I PRCFA("OVCOM")=1!(PRCFA("OVCOM")=2) D REQFAIL^PRCFFU10,MSG H 3 G OUT
"RTN","PRCESOE",62,0)
 W ! D OKAY2^PRCFFU ; ask 'OK to continue?'
"RTN","PRCESOE",63,0)
 I 'Y!($D(DTOUT)) D MSG H 3 G OUT
"RTN","PRCESOE",64,0)
 I $D(PRCFA("RETRAN")),PRCFA("RETRAN")=0 D  G:'$D(DA) OUT
"RTN","PRCESOE",65,0)
 . K DA,X
"RTN","PRCESOE",66,0)
 . S PRCHP("T")=21
"RTN","PRCESOE",67,0)
 . S PRCHP("S")=4
"RTN","PRCESOE",68,0)
 . S PRCHP("A")="1358 Obligation Number"
"RTN","PRCESOE",69,0)
 . S PRCFA(1358)=""
"RTN","PRCESOE",70,0)
 . D EN^PRCHPAT ; ask for obligation #, set up 442 record
"RTN","PRCESOE",71,0)
 . K PRCFA(1358),PRCHP
"RTN","PRCESOE",72,0)
 . I '$D(DA) D MSG3
"RTN","PRCESOE",73,0)
 . Q
"RTN","PRCESOE",74,0)
VAR I $D(PRCFA("RETRAN")),PRCFA("RETRAN") S DA=POIEN ; 442 ien
"RTN","PRCESOE",75,0)
 D PAT^PRCH58OB(DA,.PODA,.PO,.PATNUM) ; set up parameterized variables
"RTN","PRCESOE",76,0)
 N PRCFDEL,AMT,CS,DA,DIK,TIME,MOD
"RTN","PRCESOE",77,0)
 S PRCFA("BBFY")=$TR($P(TRNODE(3),"^",11)," ")
"RTN","PRCESOE",78,0)
 S PRCFA("MOD")="E^0^Original Entry"
"RTN","PRCESOE",79,0)
 S PRCFA("MP")=$P(PO(0),U,2)
"RTN","PRCESOE",80,0)
 S PRCFA("PATNUM")=$P($P(PO(0),"^"),"-",2)
"RTN","PRCESOE",81,0)
 S PRCFA("PODA")=PODA
"RTN","PRCESOE",82,0)
 S PRCFA("REF")=$P(PO(0),U)
"RTN","PRCESOE",83,0)
 ; S PRCFA("SFC")=$P(PO(0),U,19)
"RTN","PRCESOE",84,0)
 S PRCFA("SYS")="FMS"
"RTN","PRCESOE",85,0)
 S PRCFA("TT")="SO"
"RTN","PRCESOE",86,0)
VAR11 I $D(PRCFA("RETRAN")),PRCFA("RETRAN")=1 D  G VAR2
"RTN","PRCESOE",87,0)
 . D RETRANO^PRCESOE2 ; put date in FMS transaction into PRCFA("OBLDATE")
"RTN","PRCESOE",88,0)
 . S X=PRCFA("OBLDATE")
"RTN","PRCESOE",89,0)
 S X=PRC("RBDT")
"RTN","PRCESOE",90,0)
 I X<DT!'X D NOW^%DTC
"RTN","PRCESOE",91,0)
VAR2 S Y=X D D^PRCFQ ; convert date to external format
"RTN","PRCESOE",92,0)
 S %DT="AEX"
"RTN","PRCESOE",93,0)
 S %DT("B")=Y
"RTN","PRCESOE",94,0)
 S %DT("A")="Select Obligation Processing Date: "
"RTN","PRCESOE",95,0)
 W ! D ^%DT K %DT
"RTN","PRCESOE",96,0)
 I Y<0 D EXIT G OUT
"RTN","PRCESOE",97,0)
 S PRCFA("OBLDATE")=Y
"RTN","PRCESOE",98,0)
 S EXIT=0
"RTN","PRCESOE",99,0)
 D ENO^PRCESOE2 ; processes PRCFA("OBLDATE"), gets accounting period
"RTN","PRCESOE",100,0)
 I EXIT=1 D EXIT,KILL^PRCESOE2 G OUT
"RTN","PRCESOE",101,0)
 I PRC("RBDT")'<$P(^PRC(420,PRC("SITE"),0),"^",9),$P($$DATE^PRC0C(PRCFA("OBLDATE"),"I"),U,1,2)'=$P($$DATE^PRC0C(PRC("RBDT"),"I"),U,1,2) D MSG1^PRCFFUD S X=PRC("RBDT") G VAR11
"RTN","PRCESOE",102,0)
 ;
"RTN","PRCESOE",103,0)
GO ; Prompt user for final go-ahead for the document creation
"RTN","PRCESOE",104,0)
 D GO^PRCFFU ; ask 'Transmit?'
"RTN","PRCESOE",105,0)
 I 'Y!($D(DIRUT)) G EXIT
"RTN","PRCESOE",106,0)
 ;
"RTN","PRCESOE",107,0)
ESIG ; Enter the Electronic Signature and away it goes!
"RTN","PRCESOE",108,0)
 W !,"The Electronic Signature must now be entered to generate the "_PRCFA("TYPE")_" Document.",!
"RTN","PRCESOE",109,0)
 D SIG^PRCFFU4
"RTN","PRCESOE",110,0)
 I $D(PRCFA("SIGFAIL")) D  G EXIT
"RTN","PRCESOE",111,0)
 . K PRCFA("SIGFAIL")
"RTN","PRCESOE",112,0)
 . D MSG2(ESIGMSG)
"RTN","PRCESOE",113,0)
 . Q
"RTN","PRCESOE",114,0)
 ;
"RTN","PRCESOE",115,0)
 D OB1^PRCS58OB(PRCFA("TRDA"),PODA) ; save 442 ien in file 410
"RTN","PRCESOE",116,0)
 D COB^PRCH58OB(PODA,.TRNODE,.PO,PRCFA("TRDA"),X) ; stuff some values into 442
"RTN","PRCESOE",117,0)
 D PODT^PRCS58OB(PRCFA("PODA"),PRCFA("OBLDATE")) ; save PRCFA("OBLDATE")  in file 442 as PO DATE
"RTN","PRCESOE",118,0)
 S PRCFA("BBFY")=$$BBFY^PRCFFU5(PRCFA("PODA"))
"RTN","PRCESOE",119,0)
 D GENDIQ^PRCFFU7(442,PRCFA("PODA"),".1;.07;.03;17","IEN","")
"RTN","PRCESOE",120,0)
 D EDIT410^PRCFFUD(PRCFA("TRDA"),"O") ; updates running balance quarter & status in 410
"RTN","PRCESOE",121,0)
 S PRC("CP")=+$P(PO(0),"^",3)
"RTN","PRCESOE",122,0)
 ;
"RTN","PRCESOE",123,0)
EDIT ; Check fund/year dictionary for required FMS fields
"RTN","PRCESOE",124,0)
 D EDIT^PRCFFU ; sets up PRCFMO array to use in building LIN segment
"RTN","PRCESOE",125,0)
 ;
"RTN","PRCESOE",126,0)
 S IDFLAG="I" ; flag to FMS indicating a dollar increase
"RTN","PRCESOE",127,0)
 I $D(PRCFA("RETRAN")),PRCFA("RETRAN")=1 D SET1358^PRCFFERT ; do rebuild
"RTN","PRCESOE",128,0)
 ;
"RTN","PRCESOE",129,0)
STACK ; Create entry in GECS Stack File
"RTN","PRCESOE",130,0)
 D STACK^PRCFFU(0) ; set up CTL,DOC segs of code sheet, (0) means no batch#
"RTN","PRCESOE",131,0)
 ;
"RTN","PRCESOE",132,0)
SEGS ; Create entry in TMP($J, for remaining segments
"RTN","PRCESOE",133,0)
 K ^TMP($J,"PRCMO")
"RTN","PRCESOE",134,0)
 N FMSINT S FMSINT=+PO
"RTN","PRCESOE",135,0)
 S FMSMOD=$P(PRCFA("MOD"),U,1)
"RTN","PRCESOE",136,0)
 D NEW^PRCFFU1(FMSINT,PRCFA("TT"),FMSMOD) ; builds remaining segs
"RTN","PRCESOE",137,0)
 ;
"RTN","PRCESOE",138,0)
 ; Transfers remaining segs from TMP($J, into GECS Stack File
"RTN","PRCESOE",139,0)
 N LOOP S LOOP=0
"RTN","PRCESOE",140,0)
 F  S LOOP=$O(^TMP($J,"PRCMO",GECSFMS("DA"),LOOP)) Q:'LOOP  D SETCS^GECSSTAA(GECSFMS("DA"),^(LOOP))
"RTN","PRCESOE",141,0)
 K ^TMP($J,"PRCMO")
"RTN","PRCESOE",142,0)
 ;
"RTN","PRCESOE",143,0)
TRANS ; Mark the FMS transaction document as queued for transmission
"RTN","PRCESOE",144,0)
 D SETSTAT^GECSSTAA(GECSFMS("DA"),"Q")
"RTN","PRCESOE",145,0)
 N P2 S P2=+PO
"RTN","PRCESOE",146,0)
 S $P(P2,"/",3)=+OB
"RTN","PRCESOE",147,0)
 S $P(P2,"/",5)=$P(PRCFA("ACCPD"),U)
"RTN","PRCESOE",148,0)
 S $P(P2,"/",6)=PRCFA("OBLDATE")
"RTN","PRCESOE",149,0)
 D SETPARAM^GECSSDCT(GECSFMS("DA"),P2)
"RTN","PRCESOE",150,0)
 ;
"RTN","PRCESOE",151,0)
POBAL ; Enter Obligation Data into Purchase Order Record
"RTN","PRCESOE",152,0)
 ;
"RTN","PRCESOE",153,0)
 ; add FMS document info to node 10 of file 442
"RTN","PRCESOE",154,0)
 D EN7^PRCFFU41(PRCFA("TT"),FMSMOD,PRCFA("OBLDATE"),PRCFA("PATNUM"))
"RTN","PRCESOE",155,0)
 ;
"RTN","PRCESOE",156,0)
 ; create daily record in file 424
"RTN","PRCESOE",157,0)
 D POST G OUT:'%
"RTN","PRCESOE",158,0)
 ;
"RTN","PRCESOE",159,0)
 ; continue processing if this is not a rebuild
"RTN","PRCESOE",160,0)
 I $D(PRCFA("RETRAN")),PRCFA("RETRAN") D OUT Q
"RTN","PRCESOE",161,0)
 S X=100
"RTN","PRCESOE",162,0)
 S DA=PRCFA("PODA")
"RTN","PRCESOE",163,0)
 D ENF^PRCHSTAT
"RTN","PRCESOE",164,0)
 S AMT=$P(PO(0),U,7)+$S(+$P(PO(0),U,9)'=0:$P(PO(0),U,9),1:"")
"RTN","PRCESOE",165,0)
 D NOW^PRCFQ
"RTN","PRCESOE",166,0)
 S TIME=X
"RTN","PRCESOE",167,0)
 S X=$P(TRNODE(4),"^",8) ; file 410 transaction amount
"RTN","PRCESOE",168,0)
 S DA=PRCFA("TRDA") ; file 410 ien
"RTN","PRCESOE",169,0)
 D TRANK^PRCSES
"RTN","PRCESOE",170,0)
 S DEL=$S('$D(DEL):"",1:DEL)
"RTN","PRCESOE",171,0)
 D CS^PRCS58OB(OB,AMT,TIME,PATNUM,PODA,DEL,X,.PRC)
"RTN","PRCESOE",172,0)
 W !!,"...updating 1358 Obligation balances...",!
"RTN","PRCESOE",173,0)
 S ^PRC(442,PODA,8)=AMT_"^0^0"
"RTN","PRCESOE",174,0)
 S X=AMT D TRANS1^PRCSES
"RTN","PRCESOE",175,0)
 S X=AMT D  W !! G V
"RTN","PRCESOE",176,0)
 . D TRANS^PRCSES
"RTN","PRCESOE",177,0)
 . D BULLET^PRCEFIS1
"RTN","PRCESOE",178,0)
 . ;Generate 1358 transaction message to OLCS. Messages will be generated
"RTN","PRCESOE",179,0)
 . ;upon obligation of a new 1358 or an adjustment. Messages will not be
"RTN","PRCESOE",180,0)
 . ;sent for a rebuild or retransmission to FMS.(PRC*5.1*153)
"RTN","PRCESOE",181,0)
 . I $D(PRCFA("RETRAN")),'PRCFA("RETRAN") D OLCSMSG^PRCFDO
"RTN","PRCESOE",182,0)
 . D OUT
"RTN","PRCESOE",183,0)
 ;
"RTN","PRCESOE",184,0)
OUT D K1B^PRCFFUZ
"RTN","PRCESOE",185,0)
 D K1C^PRCFFUZ
"RTN","PRCESOE",186,0)
 Q
"RTN","PRCESOE",187,0)
 ;
"RTN","PRCESOE",188,0)
EXIT I $D(PRCFA("RETRAN")),PRCFA("RETRAN")=0 D MSG1,KILL^PRCH58OB(PODA)
"RTN","PRCESOE",189,0)
 E  D MSG
"RTN","PRCESOE",190,0)
 Q
"RTN","PRCESOE",191,0)
 ;
"RTN","PRCESOE",192,0)
KILL D KILL^PRCH58OB(PODA) G OUT
"RTN","PRCESOE",193,0)
 ;
"RTN","PRCESOE",194,0)
LOOKUP ; Lookup 1358 transaction which is pending fiscal action.
"RTN","PRCESOE",195,0)
 D LOOKUP^PRCESOE1
"RTN","PRCESOE",196,0)
 Q
"RTN","PRCESOE",197,0)
 ;
"RTN","PRCESOE",198,0)
POST ; Post data in file 424
"RTN","PRCESOE",199,0)
 I $D(PRCFA("RETRAN")),'PRCFA("RETRAN") D POST^PRCESOE1
"RTN","PRCESOE",200,0)
 Q
"RTN","PRCESOE",201,0)
 ;
"RTN","PRCESOE",202,0)
 ; Message processing
"RTN","PRCESOE",203,0)
MSG D MSG^PRCESOE1 Q
"RTN","PRCESOE",204,0)
MSG1 D MSG1^PRCESOE1 Q
"RTN","PRCESOE",205,0)
MSG2(MSG) D MSG2^PRCESOE1(MSG) Q
"RTN","PRCESOE",206,0)
MSG3 D MSG3^PRCESOE1 Q
"RTN","PRCESOM")
0^2^B60435984^B59523571
"RTN","PRCESOM",1,0)
PRCESOM ;WISC/SJG/ASU - CONTINUATION OF 1358 ADJUST OBLIAGTION PRCEADJ1 ;4/27/94  2:13 PM
"RTN","PRCESOM",2,0)
V ;;5.1;IFCAP;**148,153**;Oct 20, 2000;Build 10
"RTN","PRCESOM",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRCESOM",4,0)
 N TI,PRCFASYS,IOINLOW,IOINHI,IOINORM,DIR,AMT,OLDTT,CS,HASH,DIE,DR,LAUTH,LBAL,TAUTH,TBAL,DLAYGO
"RTN","PRCESOM",5,0)
 D SCREEN
"RTN","PRCESOM",6,0)
 S PRC("CP")=$P(TRNODE(0),"-",4)
"RTN","PRCESOM",7,0)
 S PRC("RBDT")=$P(TRNODE(0),U,11)
"RTN","PRCESOM",8,0)
 I $G(PRCRGS)<1 D OVCOM1^PRCFFU10 I PRCFA("OVCOM")=1!(PRCFA("OVCOM")=2) D REQFAIL^PRCFFU10,MSG G OUT
"RTN","PRCESOM",9,0)
 ; PRC*5.1*148 start
"RTN","PRCESOM",10,0)
 ; if Obligator is a requestor, violation to segregation of duties
"RTN","PRCESOM",11,0)
 I $P($G(TRNODE(7)),"^",1)=DUZ D  S Y=0 D MSG G OUT
"RTN","PRCESOM",12,0)
 . W !!,"You are the CP Clerk (Requestor) on this 1358 transaction."
"RTN","PRCESOM",13,0)
 . W !,"Per Segregation of Duties, the CP Clerk (Requestor)"
"RTN","PRCESOM",14,0)
 . W " is not permitted to "
"RTN","PRCESOM",15,0)
 . W $S($G(PRCFA("RETRAN")):"Rebuild/Retransmit",1:"Obligate")," the 1358."
"RTN","PRCESOM",16,0)
 . I '$G(PRCFA("RETRAN")) Q
"RTN","PRCESOM",17,0)
 . W ! D EN^DDIOL("  ** Press RETURN to continue **")
"RTN","PRCESOM",18,0)
 . R X:DTIME Q
"RTN","PRCESOM",19,0)
 ; if Obligator is a approver, violation to segregation of duties
"RTN","PRCESOM",20,0)
 I $P($G(TRNODE(7)),"^",3)=DUZ D  S Y=0 D MSG G OUT
"RTN","PRCESOM",21,0)
 . W !!,"You are the Approver on this 1358 transaction."
"RTN","PRCESOM",22,0)
 . W !,"Per Segregation of Duties, the Approver is not permitted to "
"RTN","PRCESOM",23,0)
 . W $S($G(PRCFA("RETRAN")):"Rebuild/Retransmit",1:"Obligate")," the 1358."
"RTN","PRCESOM",24,0)
 . I '$G(PRCFA("RETRAN")) Q
"RTN","PRCESOM",25,0)
 . W ! D EN^DDIOL("  ** Press RETURN to continue **")
"RTN","PRCESOM",26,0)
 . R X:DTIME Q
"RTN","PRCESOM",27,0)
 ; PRC*5.1*148 end
"RTN","PRCESOM",28,0)
 ;
"RTN","PRCESOM",29,0)
 D OKAY2^PRCFFU ; ask 'OK to continue?'
"RTN","PRCESOM",30,0)
 I 'Y!($D(DIRUT)) D MSG G OUT
"RTN","PRCESOM",31,0)
 S AMT=$P(TRNODE(4),U,8)
"RTN","PRCESOM",32,0)
K F I=7,9 S AMT(I)=$P(TRNODE(3),"^",I) S:AMT(I)<0 AMT(I)=-AMT(I) S AMT(I)=AMT(I)*100
"RTN","PRCESOM",33,0)
 S PRC("CP")=$P(TRNODE(0),"-",4)
"RTN","PRCESOM",34,0)
 S PRCFA("BBFY")=$$BBFY^PRCFFU5(+PO)
"RTN","PRCESOM",35,0)
 S PRCFA("MOD")="M^1^Modification Entry"
"RTN","PRCESOM",36,0)
 I $D(PRCFA("RETRAN")),PRCFA("RETRAN")=1,$P(PRCFA("GECS"),"^",2)="E" S PRCFA("MOD")="E^0^Original Document"
"RTN","PRCESOM",37,0)
 S PRCFA("MP")=$P(PO(0),U,2)
"RTN","PRCESOM",38,0)
 S PRCFA("PATNUM")=$P($P(PO(0),U),"-",2)
"RTN","PRCESOM",39,0)
 S PRCFA("PODA")=PODA
"RTN","PRCESOM",40,0)
 S PRCFA("REF")=$P(PO(0),U)
"RTN","PRCESOM",41,0)
 ; S PRCFA("SFC")=$P(PO(0),U,19)
"RTN","PRCESOM",42,0)
 S PRCFA("SYS")="FMS"
"RTN","PRCESOM",43,0)
 S PRCFA("TT")="SO"
"RTN","PRCESOM",44,0)
 I $D(GECSDATA),$G(GECSDATA(2100.1,GECSDATA,.01,"E"))[("AR-") S PRCFA("TT")="AR"
"RTN","PRCESOM",45,0)
EDIT ; 
"RTN","PRCESOM",46,0)
 I $G(PRCFA("ACCEDIT"))=1 D TAG33^PRCFFU9 ; sets PRCFA("PPT") & PRCFA("MOMREQ")
"RTN","PRCESOM",47,0)
 I $G(PRCFA("RETRAN"))=1 D TAG33^PRCFFU9 ; sets PRCFA("PPT") & PRCFA("MOMREQ")
"RTN","PRCESOM",48,0)
 ;
"RTN","PRCESOM",49,0)
 ; Compare adjustment to original 1358
"RTN","PRCESOM",50,0)
 N RETURN,ERFLAG,IDFLAG,TYPE
"RTN","PRCESOM",51,0)
 S RETURN=$$COMP^PRCFFU6(PRC442,PRC410,.RETURN)
"RTN","PRCESOM",52,0)
 S ERFLAG=$P(RETURN,U,1)
"RTN","PRCESOM",53,0)
 S IDFLAG=$P(RETURN,U,2)
"RTN","PRCESOM",54,0)
 S TYPE=$P(RETURN,U,2)
"RTN","PRCESOM",55,0)
 I ERFLAG D  Q 
"RTN","PRCESOM",56,0)
 . W !!,"  Cannot continue...one or more of the following fields have changed..."
"RTN","PRCESOM",57,0)
 . N LOOP S LOOP=""
"RTN","PRCESOM",58,0)
 . F  S LOOP=$O(PRCFA("CHG",LOOP)) Q:LOOP=""  I PRCFA("CHG",LOOP)]"" W !,?5,PRCFA("CHG",LOOP)
"RTN","PRCESOM",59,0)
 . K PRCFA("CHG")
"RTN","PRCESOM",60,0)
 . W !!,"  Please be sure that the VENDOR, FUND CONTROL POINT, BOC, and COST CENTER",!,"  fields are the same as the original 1358 obligation!"
"RTN","PRCESOM",61,0)
 . D MSG
"RTN","PRCESOM",62,0)
 . D EN^DDIOL("  ** Press RETURN to continue **")
"RTN","PRCESOM",63,0)
 . R X:DTIME
"RTN","PRCESOM",64,0)
 . D OUT
"RTN","PRCESOM",65,0)
 . Q
"RTN","PRCESOM",66,0)
 ;
"RTN","PRCESOM",67,0)
DT I $D(PRCFA("RETRAN")),PRCFA("RETRAN")=1 D  G DT1
"RTN","PRCESOM",68,0)
 . D RETRANM^PRCESOE2 ; get account & obligation processing dates
"RTN","PRCESOM",69,0)
 . S Y=PRCFA("OBLDATE")
"RTN","PRCESOM",70,0)
 S Y=PRC("RBDT") I Y<DT!'Y D NOW^%DTC S Y=X
"RTN","PRCESOM",71,0)
DT1 D D^PRCFQ ; convert date to external format
"RTN","PRCESOM",72,0)
 S %DT="AEX"
"RTN","PRCESOM",73,0)
 S %DT("A")="Select Obligation Processing Date: "
"RTN","PRCESOM",74,0)
 S %DT("B")=Y
"RTN","PRCESOM",75,0)
 W ! D ^%DT
"RTN","PRCESOM",76,0)
 K %DT
"RTN","PRCESOM",77,0)
 I Y<0 D MSG,OUT H 3 Q
"RTN","PRCESOM",78,0)
 S PRCFA("OBLDATE")=Y
"RTN","PRCESOM",79,0)
 S EXIT=0
"RTN","PRCESOM",80,0)
 D ENM^PRCESOE2
"RTN","PRCESOM",81,0)
 I EXIT D  H 3 Q
"RTN","PRCESOM",82,0)
 . D MSG
"RTN","PRCESOM",83,0)
 . D OUT
"RTN","PRCESOM",84,0)
 . D KILL^PRCESOE2
"RTN","PRCESOM",85,0)
 I PRC("RBDT")'<$P(^PRC(420,PRC("SITE"),0),"^",9),$P($$DATE^PRC0C(PRCFA("OBLDATE"),"I"),U,1,2)'=$P($$DATE^PRC0C(PRC("RBDT"),"I"),U,1,2) D MSG1^PRCFFUD G DT
"RTN","PRCESOM",86,0)
 D GENDIQ^PRCFFU7(442,+PO,".1;.07;.03;17","IEN","")
"RTN","PRCESOM",87,0)
 ;
"RTN","PRCESOM",88,0)
 D  I "^SO^AR^"'[("^"_$P(PRCFA("TT"),":",1)) D MSG S Y=1 G OUT
"RTN","PRCESOM",89,0)
 . N PRCFATT S PRCFATT=PRCFA("TT")
"RTN","PRCESOM",90,0)
 . D SOAR^PRC0E(PRCFA("PODA"),.PRCFATT,1) ; ask SO or AR, if appropriate
"RTN","PRCESOM",91,0)
 . S PRCFA("TT")=PRCFATT K PRCFATT
"RTN","PRCESOM",92,0)
 ;
"RTN","PRCESOM",93,0)
 I PRCFA("TT")="AR" D  I "EM"'[X D MSG S Y=1 G OUT
"RTN","PRCESOM",94,0)
 . N Y
"RTN","PRCESOM",95,0)
 . D SC^PRC0A("",.Y,"Label document action as: ","AOM^E:Original Entry;M:Modification Entry","M")
"RTN","PRCESOM",96,0)
 . I $E(Y)="E" S PRCFA("MOD")="E^0^Original Entry"
"RTN","PRCESOM",97,0)
 . I $E(Y)="M" S PRCFA("MOD")="M^1^Modification Entry"
"RTN","PRCESOM",98,0)
 . S X=$E(Y)
"RTN","PRCESOM",99,0)
 . K Y
"RTN","PRCESOM",100,0)
 S X=0
"RTN","PRCESOM",101,0)
 I $G(PRCFA("RETRAN"))=1,"^SO^AR"[("^"_$E(PRCFA("TT"),1,2)),$P(PRCFA("GECS"),"^",1,2)'=($E(PRCFA("TT"),1,2)_"^"_$E(PRCFA("MOD"))) D  I X="^" D MSG,PAUSE^PRCFFERU S Y=1 G OUT
"RTN","PRCESOM",102,0)
 . S PRCFA("SIS")=$$GETTXNS^PRCFFERT(PO,PRC410,21) ; get other FMS txns for this adjustment
"RTN","PRCESOM",103,0)
 . S X=$$NEWCHK^PRCFFERT(PRCFA("TT"),$E(PRCFA("MOD")),PRCFA("SIS")) ; if selected txn exists, X will be DOCID
"RTN","PRCESOM",104,0)
 . I X=0 S PRCFA("RETRAN")=2 ; selected txn doesn't exist, create
"RTN","PRCESOM",105,0)
 . I X'=0 S X=$$SWITCH^PRCFFERT(X,21,.GECSDATA) ; is selected txn available?
"RTN","PRCESOM",106,0)
 ;
"RTN","PRCESOM",107,0)
GO ; Prompt use for final go-ahead for the document creation
"RTN","PRCESOM",108,0)
 D GO^PRCFFU
"RTN","PRCESOM",109,0)
 I 'Y!($D(DIRUT)) D MSG,OUT Q
"RTN","PRCESOM",110,0)
 ;
"RTN","PRCESOM",111,0)
ESIG ; Enter the Electronic Signature and away it goes!
"RTN","PRCESOM",112,0)
 W !,"The Electronic Signature must now be entered to generate the "_PRCFA("TYPE")_" Document.",!
"RTN","PRCESOM",113,0)
 D SIG^PRCFFU4
"RTN","PRCESOM",114,0)
 I $D(PRCFA("SIGFAIL")) K PRCFA("SIGFAIL") H 3 D MSG,OUT Q
"RTN","PRCESOM",115,0)
 ;
"RTN","PRCESOM",116,0)
 ; Check fund/year dictionary for FMS required fields
"RTN","PRCESOM",117,0)
 D EDIT^PRCFFU ; sets up PRCFMO array for req'd fields
"RTN","PRCESOM",118,0)
 ;
"RTN","PRCESOM",119,0)
 D EDIT410^PRCFFUD(OB,"O") ; edit running balance qtr & status in 410
"RTN","PRCESOM",120,0)
 I $D(PRCFA("RETRAN")),PRCFA("RETRAN")=1 D SET1358^PRCFFERT ; do rebuild
"RTN","PRCESOM",121,0)
 ;
"RTN","PRCESOM",122,0)
STACK ; Create entry in GECS Stack File
"RTN","PRCESOM",123,0)
 D STACK^PRCFFU(1) ; CTL,BAT,DOC segments, (1) creates batch# for FMS doc
"RTN","PRCESOM",124,0)
 I $D(PRCFA("RETRAN")),PRCFA("RETRAN")>0 G SEGS
"RTN","PRCESOM",125,0)
 ;
"RTN","PRCESOM",126,0)
UPDATE ; Update records in 442 and 410
"RTN","PRCESOM",127,0)
 W !!,"...updating obligation balances....please hold...",!!
"RTN","PRCESOM",128,0)
 D POADJ^PRCH58OB(.PO,PODA,.TRNODE,AMT)
"RTN","PRCESOM",129,0)
 D POADJ^PRCS58OB(.PRC,PODA,TRDA,AMT)
"RTN","PRCESOM",130,0)
 D:AMT>0 BULC^PRCH58(PODA)
"RTN","PRCESOM",131,0)
 D UPDATE^PRCFFU6(PRC442,PRC410) ; update node 22 of file 442
"RTN","PRCESOM",132,0)
 ;
"RTN","PRCESOM",133,0)
SEGS ; Use TMP($J to store remaining segments to be built
"RTN","PRCESOM",134,0)
 K ^TMP($J,"PRCMO")
"RTN","PRCESOM",135,0)
 N FMSINT S FMSINT=+PO
"RTN","PRCESOM",136,0)
 S FMSMOD=$P(PRCFA("MOD"),U,1)
"RTN","PRCESOM",137,0)
 D NEW^PRCFFU1(FMSINT,PRCFA("TT"),FMSMOD) ; build segments
"RTN","PRCESOM",138,0)
 ;
"RTN","PRCESOM",139,0)
 ; Transfer nodes from TMP($J, into GECS Stack File
"RTN","PRCESOM",140,0)
 N LOOP S LOOP=0
"RTN","PRCESOM",141,0)
 F  S LOOP=$O(^TMP($J,"PRCMO",GECSFMS("DA"),LOOP)) Q:'LOOP  D SETCS^GECSSTAA(GECSFMS("DA"),^(LOOP))
"RTN","PRCESOM",142,0)
 K ^TMP($J,"PRCMO")
"RTN","PRCESOM",143,0)
 ;
"RTN","PRCESOM",144,0)
TRANS ; Mark the document as queued for transmission
"RTN","PRCESOM",145,0)
 D SETSTAT^GECSSTAA(GECSFMS("DA"),"Q")
"RTN","PRCESOM",146,0)
 N P2 S P2=+PO
"RTN","PRCESOM",147,0)
 S $P(P2,"/",4)=+TRDA
"RTN","PRCESOM",148,0)
 S $P(P2,"/",5)=$P(PRCFA("ACCPD"),U)
"RTN","PRCESOM",149,0)
 S $P(P2,"/",6)=PRCFA("OBLDATE")
"RTN","PRCESOM",150,0)
 D SETPARAM^GECSSDCT(GECSFMS("DA"),P2) ; save P2 as node 26 of 2100.1
"RTN","PRCESOM",151,0)
 ;
"RTN","PRCESOM",152,0)
POBAL ; Enter Obligation Data into Purchase Order Record
"RTN","PRCESOM",153,0)
 ; Log transaction into node 10 of file 442
"RTN","PRCESOM",154,0)
 D EN7^PRCFFU41(PRCFA("TT"),FMSMOD,PODATE,PRCFA("PATNUM"))
"RTN","PRCESOM",155,0)
 ;
"RTN","PRCESOM",156,0)
 ; Continue processing if this is not a rebuild
"RTN","PRCESOM",157,0)
 I $D(PRCFA("RETRAN")),PRCFA("RETRAN")>0 G OUT
"RTN","PRCESOM",158,0)
Z S (X,Z)=$P(PO(0),U)
"RTN","PRCESOM",159,0)
 S %=1
"RTN","PRCESOM",160,0)
 D EN1^PRCSUT3
"RTN","PRCESOM",161,0)
 S DLAYGO=424
"RTN","PRCESOM",162,0)
 S DIC="^PRC(424,"
"RTN","PRCESOM",163,0)
 S DIC(0)="L"
"RTN","PRCESOM",164,0)
 D FILE^DICN
"RTN","PRCESOM",165,0)
 I Y<0 W !,"ERROR IN CREATING 424 RECORD",$C(7),!! Q
"RTN","PRCESOM",166,0)
 ;
"RTN","PRCESOM",167,0)
 S DIE="^PRC(424,"
"RTN","PRCESOM",168,0)
 S DA(1358)=+Y
"RTN","PRCESOM",169,0)
 D NOW^%DTC
"RTN","PRCESOM",170,0)
 S TI=%
"RTN","PRCESOM",171,0)
 S DA=DA(1358)
"RTN","PRCESOM",172,0)
 S DR=".02///^S X=PODA;.03///^S X=""A"";.06///^S X=$P(TRNODE(4),U,8);.07///^S X=TI;.08////^S X=DUZ;1.1////^S X=""ADJUSTMENT OBLIGATION"";.15////^S X=TRDA"
"RTN","PRCESOM",173,0)
 D ^DIE W "...adjustment completed..."
"RTN","PRCESOM",174,0)
 ;
"RTN","PRCESOM",175,0)
 ;Generate 1358 transaction message to OLCS. Messages will be generated
"RTN","PRCESOM",176,0)
 ;upon obligation of a new 1358 or an adjustment. Messages will not be
"RTN","PRCESOM",177,0)
 ;sent for a rebuild or retransmission to FMS. (PRC*5.1*153)
"RTN","PRCESOM",178,0)
 I $G(PRCFA("RETRAN"))=0 D OLCSMSG^PRCFDO
"RTN","PRCESOM",179,0)
 ;
"RTN","PRCESOM",180,0)
 G OUT
"RTN","PRCESOM",181,0)
 Q
"RTN","PRCESOM",182,0)
 ;
"RTN","PRCESOM",183,0)
SCREEN ;COMPARISON SCREEN
"RTN","PRCESOM",184,0)
 N CEILING,LAUTH,TAUTH,TBAL,LBAL,IOINHI,IOINLOW,IOINORM
"RTN","PRCESOM",185,0)
 D HILO^PRCFQ
"RTN","PRCESOM",186,0)
 S CEILING=$P(PO(8),U)
"RTN","PRCESOM",187,0)
 W @IOF,IOINLOW,"Adjustment Transaction # ",IOINHI,$P(TRNODE(0),"^")
"RTN","PRCESOM",188,0)
 W IOINLOW,"     1358 # ",IOINHI,$P(PO(0),"^")
"RTN","PRCESOM",189,0)
 W !!,IOINLOW,"Current amount obligated on 1358: ",IOINHI,"  $ ",$FN(CEILING,"P,",2)
"RTN","PRCESOM",190,0)
 S TBAL=$P(PO(8),U,3)
"RTN","PRCESOM",191,0)
 S TAUTH=CEILING-TBAL
"RTN","PRCESOM",192,0)
 W !!,IOINLOW," Total Authorizations: ",IOINHI," $ ",$J($FN(TAUTH,"P,",2),12)
"RTN","PRCESOM",193,0)
 S LBAL=$P(PO(8),U,2),LAUTH=CEILING-LBAL
"RTN","PRCESOM",194,0)
 W ?40,IOINLOW," Total Liquidations: ",IOINHI," $ ",$J($FN(LAUTH,",P",2),12)
"RTN","PRCESOM",195,0)
 W !,IOINLOW,"Authorization Balance: ",IOINHI," $ ",$J($FN(TBAL,"P,",2),12)
"RTN","PRCESOM",196,0)
 W ?40,IOINLOW,"Liquidation Balance: ",IOINHI," $ ",$J($FN(LBAL,"P,",2),12),!!
"RTN","PRCESOM",197,0)
 W IOINLOW,"Amount of Adjustment: ",IOINHI,$J($P(TRNODE(4),"^",8),0,2),!!,IOINORM
"RTN","PRCESOM",198,0)
 Q
"RTN","PRCESOM",199,0)
MSG W !
"RTN","PRCESOM",200,0)
 S X="No further processing is being taken on this 1358 adjustment obligation.  It has NOT been obligated.*"
"RTN","PRCESOM",201,0)
 D MSG^PRCFQ
"RTN","PRCESOM",202,0)
 Q
"RTN","PRCESOM",203,0)
OUT K DIRUT,DTOUT,DUOUT,DIROUT
"RTN","PRCESOM",204,0)
 QUIT
"RTN","PRCFDO")
0^4^B111106540^n/a
"RTN","PRCFDO",1,0)
PRCFDO ;WOIFO/KCL,MM - IFCAP/OLCS INTERFACE ;2/24/2011
"RTN","PRCFDO",2,0)
V ;;5.1;IFCAP;**153**;Oct 20, 2000;Build 10
"RTN","PRCFDO",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRCFDO",4,0)
 ;
"RTN","PRCFDO",5,0)
 ;direct entry not permitted
"RTN","PRCFDO",6,0)
 Q
"RTN","PRCFDO",7,0)
 ;
"RTN","PRCFDO",8,0)
OLCSMSG ;Generate 1358 transaction message
"RTN","PRCFDO",9,0)
 ;
"RTN","PRCFDO",10,0)
 ; This procedure is called when the following events occur in IFCAP:
"RTN","PRCFDO",11,0)
 ;  - OBLIGATION event (when a new 1358 transaction is obligated)
"RTN","PRCFDO",12,0)
 ;  - ADJUSTMENT event (when an increase/decrease adjustment 
"RTN","PRCFDO",13,0)
 ;                      transaction is obligated)
"RTN","PRCFDO",14,0)
 ;
"RTN","PRCFDO",15,0)
 ; It will act as a driver for building and sending a 1358 transaction
"RTN","PRCFDO",16,0)
 ; message to the Online Certification System via MailMan.
"RTN","PRCFDO",17,0)
 ;
"RTN","PRCFDO",18,0)
 ;  Input: None
"RTN","PRCFDO",19,0)
 ; Output: None
"RTN","PRCFDO",20,0)
 ;
"RTN","PRCFDO",21,0)
 N PRCCNT  ;msg text line counter
"RTN","PRCFDO",22,0)
 N PRCDATA ;1358 data elements array
"RTN","PRCFDO",23,0)
 N PRCMSG  ;closed root array of MailMan text lines
"RTN","PRCFDO",24,0)
 ;
"RTN","PRCFDO",25,0)
 ;get 1358 transaction data elements
"RTN","PRCFDO",26,0)
 Q:'$$OLCSDATA(.PRCDATA)
"RTN","PRCFDO",27,0)
 ;
"RTN","PRCFDO",28,0)
 ;validate 1358 transaction data elements, don't
"RTN","PRCFDO",29,0)
 ;check for required elements
"RTN","PRCFDO",30,0)
 Q:'$$VALID(.PRCDATA,0)
"RTN","PRCFDO",31,0)
 ;
"RTN","PRCFDO",32,0)
 ;build 1358 transaction msg
"RTN","PRCFDO",33,0)
 S PRCMSG=$NA(^TMP("PRCOLCS",$J))
"RTN","PRCFDO",34,0)
 K @PRCMSG
"RTN","PRCFDO",35,0)
 S PRCCNT=0
"RTN","PRCFDO",36,0)
 D BLDMSG(.PRCDATA,.PRCCNT,"^","~",PRCMSG)
"RTN","PRCFDO",37,0)
 ;
"RTN","PRCFDO",38,0)
 ;send 1358 transaction msg
"RTN","PRCFDO",39,0)
 D MAIL(PRCMSG)
"RTN","PRCFDO",40,0)
 ;
"RTN","PRCFDO",41,0)
 ;cleanup
"RTN","PRCFDO",42,0)
 K PRCDATA
"RTN","PRCFDO",43,0)
 K @PRCMSG
"RTN","PRCFDO",44,0)
 Q
"RTN","PRCFDO",45,0)
 ;
"RTN","PRCFDO",46,0)
 ;
"RTN","PRCFDO",47,0)
OLCSDATA(PRCDF) ;Get 1358 data elements
"RTN","PRCFDO",48,0)
 ;
"RTN","PRCFDO",49,0)
 ; This function is used to place 1358 transaction data elements into
"RTN","PRCFDO",50,0)
 ; an array format.
"RTN","PRCFDO",51,0)
 ;
"RTN","PRCFDO",52,0)
 ; Supported IAs:
"RTN","PRCFDO",53,0)
 ;  The following IAs allow use of supported Kernel calls:
"RTN","PRCFDO",54,0)
 ;  #2171  $$NS^XUAF4
"RTN","PRCFDO",55,0)
 ;  #2541  $$KSP^XUPARAM
"RTN","PRCFDO",56,0)
 ;  #3065  $$HLNAME^XLFNAME
"RTN","PRCFDO",57,0)
 ;  #10103 $$FMTHL7^XLFDT
"RTN","PRCFDO",58,0)
 ;  #10104 $$UP^XLFSTR
"RTN","PRCFDO",59,0)
 ;
"RTN","PRCFDO",60,0)
 ;  Input:
"RTN","PRCFDO",61,0)
 ;   PRCDF - (required) Result array passed by reference
"RTN","PRCFDO",62,0)
 ;
"RTN","PRCFDO",63,0)
 ; Output:
"RTN","PRCFDO",64,0)
 ;  Function Value - Returns 1 on success, 0 on failure
"RTN","PRCFDO",65,0)
 ;           PRCDF - Output array containing 1358 transaction data elements
"RTN","PRCFDO",66,0)
 ;        
"RTN","PRCFDO",67,0)
 ;             Subscript   Data Element
"RTN","PRCFDO",68,0)
 ;             ---------   ------------
"RTN","PRCFDO",69,0)
 ;             "FACNM"     Facility-Name
"RTN","PRCFDO",70,0)
 ;             "FACNUM"    Station-Number
"RTN","PRCFDO",71,0)
 ;             "OBLNUM"    Obligation-Number
"RTN","PRCFDO",72,0)
 ;             "TRANTYPE"  Transaction-Type
"RTN","PRCFDO",73,0)
 ;             "OBLDATE"   Event-Date-Time
"RTN","PRCFDO",74,0)
 ;             "REQNAME"   Requestor-Name
"RTN","PRCFDO",75,0)
 ;             "REQID"     Requestor-ID
"RTN","PRCFDO",76,0)
 ;             "APPNAME"   Approver-Name
"RTN","PRCFDO",77,0)
 ;             "APPID"     Approver-ID
"RTN","PRCFDO",78,0)
 ;             "OBLNAME"   Obligator-Name
"RTN","PRCFDO",79,0)
 ;             "OBLID"     Obligator-ID
"RTN","PRCFDO",80,0)
 ;
"RTN","PRCFDO",81,0)
 N PRCDFNUM ;station #
"RTN","PRCFDO",82,0)
 N PRCDNM   ;array for call to HLNAME^XLFNAME
"RTN","PRCFDO",83,0)
 N PRCSITE  ;institution_name^station_number
"RTN","PRCFDO",84,0)
 N PRCREQID ;Requestor DUZ
"RTN","PRCFDO",85,0)
 N PRCAPPID ;Approving Official DUZ
"RTN","PRCFDO",86,0)
 N PRCOBLID ;Obligator DUZ
"RTN","PRCFDO",87,0)
 N PRCOBLD  ;Date Signed from Obligation Data multiple
"RTN","PRCFDO",88,0)
 N PRCSUB   ;array subscripts
"RTN","PRCFDO",89,0)
 N RESULT   ;function result
"RTN","PRCFDO",90,0)
 ;
"RTN","PRCFDO",91,0)
 S RESULT=0
"RTN","PRCFDO",92,0)
 ;
"RTN","PRCFDO",93,0)
 ;init output array
"RTN","PRCFDO",94,0)
 K PRCDF S PRCDF=""
"RTN","PRCFDO",95,0)
 F PRCSUB="FACNM","FACNUM","OBLNUM","TRANTYPE","OBLDATE","REQNAME","REQID","APPNAME","APPID","OBLNAME","OBLID" S PRCDF(PRCSUB)=""
"RTN","PRCFDO",96,0)
 ;
"RTN","PRCFDO",97,0)
 ;Facility-Name and Station-Number
"RTN","PRCFDO",98,0)
 S PRCSITE=$$NS^XUAF4(+$$KSP^XUPARAM("INST"))
"RTN","PRCFDO",99,0)
 S PRCDF("FACNM")=$P($G(PRCSITE),"^")
"RTN","PRCFDO",100,0)
 S PRCDFNUM=$P($G(PRCSITE),"^",2)
"RTN","PRCFDO",101,0)
 S PRCDF("FACNUM")=PRCDFNUM
"RTN","PRCFDO",102,0)
 ;
"RTN","PRCFDO",103,0)
 ;Obligation-Number from file #442 record 
"RTN","PRCFDO",104,0)
 S PRCDF("OBLNUM")=$P($G(PO(0)),"^")
"RTN","PRCFDO",105,0)
 ;
"RTN","PRCFDO",106,0)
 ;Transaction-Type (O=Obligated & A=Adjustment)
"RTN","PRCFDO",107,0)
 S PRCDF("TRANTYPE")=$S($G(PRCFSC)=1:"O",1:"A")
"RTN","PRCFDO",108,0)
 ;
"RTN","PRCFDO",109,0)
 ;Event-Date_Time (Date Signed) in HL7 format YYYYMMDDHHMMSS-XXXX
"RTN","PRCFDO",110,0)
 ;where (-XXXX is the Greenwich Mean Time offset)
"RTN","PRCFDO",111,0)
 S PRCOBLD=$$OBL(+PO,PRCDF("TRANTYPE"),$G(TRDA))
"RTN","PRCFDO",112,0)
 S PRCDF("OBLDATE")=$$FMTHL7^XLFDT($G(PRCOBLD))
"RTN","PRCFDO",113,0)
 ;concatenate '00' seconds if Date Signed was filed precisely on the hour and minute
"RTN","PRCFDO",114,0)
 I $L($P(PRCDF("OBLDATE"),"-"))=12 D
"RTN","PRCFDO",115,0)
 . S PRCDF("OBLDATE")=$P(PRCDF("OBLDATE"),"-")_"00-"_$P(PRCDF("OBLDATE"),"-",2)
"RTN","PRCFDO",116,0)
 ;
"RTN","PRCFDO",117,0)
 ;get Requestor, Approver, and Obligator iens
"RTN","PRCFDO",118,0)
 ;TRNODE(7) contains Requestor (#40) from file #410 record
"RTN","PRCFDO",119,0)
 S PRCREQID=$P($G(TRNODE(7)),"^")
"RTN","PRCFDO",120,0)
 ;TRNODE(7) contains Approving Official (#42) from file #410 record
"RTN","PRCFDO",121,0)
 S PRCAPPID=$P($G(TRNODE(7)),"^",3)
"RTN","PRCFDO",122,0)
 ;Obligator=DUZ
"RTN","PRCFDO",123,0)
 S PRCOBLID=+$G(PRC("PER"))
"RTN","PRCFDO",124,0)
 ;
"RTN","PRCFDO",125,0)
 ;set up array for call to HLNAME^XLFNAME
"RTN","PRCFDO",126,0)
 S PRCDNM("FILE")=200
"RTN","PRCFDO",127,0)
 S PRCDNM("FIELD")=.01
"RTN","PRCFDO",128,0)
 ;place Requestor, Approver, and Obligator names
"RTN","PRCFDO",129,0)
 ;in HL7 format. Name components (LAST|FIRST|MIDDLE|SUFFIX)
"RTN","PRCFDO",130,0)
 S PRCDNM("IENS")=+PRCREQID_","
"RTN","PRCFDO",131,0)
 S PRCDF("REQNAME")=$S(+PRCREQID>0:$$HLNAME^XLFNAME(.PRCDNM,"","|"),1:"")
"RTN","PRCFDO",132,0)
 I PRCDF("REQNAME")]"" S PRCDF("REQNAME")=$P($$UP^XLFSTR(PRCDF("REQNAME")),"|",1,4)
"RTN","PRCFDO",133,0)
 S PRCDNM("IENS")=+PRCAPPID_","
"RTN","PRCFDO",134,0)
 S PRCDF("APPNAME")=$S(+PRCAPPID>0:$$HLNAME^XLFNAME(.PRCDNM,"","|"),1:"")
"RTN","PRCFDO",135,0)
 I PRCDF("APPNAME")]"" S PRCDF("APPNAME")=$P($$UP^XLFSTR(PRCDF("APPNAME")),"|",1,4)
"RTN","PRCFDO",136,0)
 S PRCDNM("IENS")=+PRCOBLID_","
"RTN","PRCFDO",137,0)
 S PRCDF("OBLNAME")=$S(+PRCOBLID>0:$$HLNAME^XLFNAME(.PRCDNM,"","|"),1:"")
"RTN","PRCFDO",138,0)
 I PRCDF("OBLNAME")]"" S PRCDF("OBLNAME")=$P($$UP^XLFSTR(PRCDF("OBLNAME")),"|",1,4)
"RTN","PRCFDO",139,0)
 ;
"RTN","PRCFDO",140,0)
 ;place Requestor, Approver, and Obligator IDs in format 'Station#-UserId' 
"RTN","PRCFDO",141,0)
 S PRCDF("REQID")=PRCDFNUM_"-"_PRCREQID
"RTN","PRCFDO",142,0)
 S PRCDF("APPID")=PRCDFNUM_"-"_PRCAPPID
"RTN","PRCFDO",143,0)
 S PRCDF("OBLID")=PRCDFNUM_"-"_PRCOBLID
"RTN","PRCFDO",144,0)
 ;
"RTN","PRCFDO",145,0)
 S RESULT=1
"RTN","PRCFDO",146,0)
 Q RESULT
"RTN","PRCFDO",147,0)
 ;
"RTN","PRCFDO",148,0)
 ;
"RTN","PRCFDO",149,0)
OBL(POIEN,TRANTYPE,PRCF410) ;Get Date Signed for current obligation
"RTN","PRCFDO",150,0)
 ;
"RTN","PRCFDO",151,0)
 ;  Input:
"RTN","PRCFDO",152,0)
 ;      POIEN - (required) IEN in Procurement & Accounting Transactions (#442) file
"RTN","PRCFDO",153,0)
 ;   TRANTYPE - (required) 'O'bligated or 'A'djustment
"RTN","PRCFDO",154,0)
 ;    PRCF410 - IEN in Control Point Activity (#410)          
"RTN","PRCFDO",155,0)
 ;
"RTN","PRCFDO",156,0)
 ; Output:
"RTN","PRCFDO",157,0)
 ;  PRCFDS - Date Signed (#5) field in Obligation Data (#442.09) multiple in PRC(442)
"RTN","PRCFDO",158,0)
 ;
"RTN","PRCFDO",159,0)
 N PRCFI,PRCFDS
"RTN","PRCFDO",160,0)
 S PRCFDS=""
"RTN","PRCFDO",161,0)
 I +$G(PO)'>0 Q PRCFDS
"RTN","PRCFDO",162,0)
 I $G(TRANTYPE)="" Q PRCFDS
"RTN","PRCFDO",163,0)
 S PRCF410=$G(PRCF410)
"RTN","PRCFDO",164,0)
 S PRCFI=0
"RTN","PRCFDO",165,0)
 ;Loop through Obligation Data multiple
"RTN","PRCFDO",166,0)
 F  S PRCFI=$O(^PRC(442,+PO,10,PRCFI)) Q:PRCFI'>0  D  Q:PRCFDS'=""
"RTN","PRCFDO",167,0)
 .N PRCF0
"RTN","PRCFDO",168,0)
 .S PRCF0=$G(^PRC(442,+PO,10,PRCFI,0))
"RTN","PRCFDO",169,0)
 .;Skip entries that are not SO or AR code sheets (excludes PV)
"RTN","PRCFDO",170,0)
 .Q:"^SO^AR^"'[("^"_$E(PRCF0,1,2)_"^")
"RTN","PRCFDO",171,0)
 .;If transaction type is for the new 1358 obligation, 1358 Adjustment field
"RTN","PRCFDO",172,0)
 .;will be null and transaction type will be set to 'O'bligation.
"RTN","PRCFDO",173,0)
 .I $P(PRCF0,"^",11)="",(TRANTYPE="O") D
"RTN","PRCFDO",174,0)
 ..;Date Signed (#5) field for initial obligation
"RTN","PRCFDO",175,0)
 ..S PRCFDS=$P(PRCF0,"^",6)
"RTN","PRCFDO",176,0)
 .;If 1358 Adjustment field is defined and transaction type set to
"RTN","PRCFDO",177,0)
 .;'A'djustment, compare 410 IEN in 1358 Adjustment field with 410 
"RTN","PRCFDO",178,0)
 .;IEN for current obligation.
"RTN","PRCFDO",179,0)
 .I $P(PRCF0,"^",11)'="",(TRANTYPE="A") D
"RTN","PRCFDO",180,0)
 ..I $P(PRCF0,"^",11)'=+PRCF410 Q
"RTN","PRCFDO",181,0)
 ..;Date Signed field for current adjustment obligation
"RTN","PRCFDO",182,0)
 ..S PRCFDS=$P(PRCF0,"^",6)
"RTN","PRCFDO",183,0)
 Q PRCFDS
"RTN","PRCFDO",184,0)
 ;
"RTN","PRCFDO",185,0)
 ;
"RTN","PRCFDO",186,0)
VALID(PRCDF,PRCREQ,PRCER) ;Validate 1358 transaction array
"RTN","PRCFDO",187,0)
 ;
"RTN","PRCFDO",188,0)
 ; This function performs validation checks on elements in the 1358 transaction array.
"RTN","PRCFDO",189,0)
 ;
"RTN","PRCFDO",190,0)
 ;  Input:
"RTN","PRCFDO",191,0)
 ;    PRCDF - array containing 1358 transaction data elements, passed by reference
"RTN","PRCFDO",192,0)
 ;   PRCREQ - (optional) check for required data elements? 1=Yes|0=No default=1
"RTN","PRCFDO",193,0)
 ;
"RTN","PRCFDO",194,0)
 ; Output:
"RTN","PRCFDO",195,0)
 ;   Function Value - Returns 1 if validation checks passed, 0 otherwise
"RTN","PRCFDO",196,0)
 ;            PRCER - (optional) if validation checks fail, an error message
"RTN","PRCFDO",197,0)
 ;                    is returned, pass by reference
"RTN","PRCFDO",198,0)
 ;
"RTN","PRCFDO",199,0)
 N PRCTXT ;temporary error text
"RTN","PRCFDO",200,0)
 N RESULT ;function result
"RTN","PRCFDO",201,0)
 ;
"RTN","PRCFDO",202,0)
 ;init vars
"RTN","PRCFDO",203,0)
 S (PRCER,PRCTXT)=""
"RTN","PRCFDO",204,0)
 S PRCREQ=$S($G(PRCREQ)=0:0,1:1)
"RTN","PRCFDO",205,0)
 ;
"RTN","PRCFDO",206,0)
 S RESULT=1
"RTN","PRCFDO",207,0)
 ;
"RTN","PRCFDO",208,0)
 ;if needed, check for required data elements
"RTN","PRCFDO",209,0)
 I PRCREQ D
"RTN","PRCFDO",210,0)
 . S PRCTXT="data element is missing."
"RTN","PRCFDO",211,0)
 . I $G(PRCDF("FACNM"))="" S RESULT=0,PRCER="Facility-Name "_PRCTXT Q
"RTN","PRCFDO",212,0)
 . I $G(PRCDF("FACNUM"))="" S RESULT=0,PRCER="Station-Number "_PRCTXT Q
"RTN","PRCFDO",213,0)
 . I $G(PRCDF("OBLNUM"))="" S RESULT=0,PRCER="Obligation-Number "_PRCTXT Q
"RTN","PRCFDO",214,0)
 . I $G(PRCDF("TRANTYPE"))="" S RESULT=0,PRCER="Transaction-Type "_PRCTXT Q
"RTN","PRCFDO",215,0)
 . I $G(PRCDF("OBLDATE"))="" S RESULT=0,PRCER="Event-Date-Time "_PRCTXT Q
"RTN","PRCFDO",216,0)
 . I $G(PRCDF("REQNAME"))="" S RESULT=0,PRCER="Requestor-Name "_PRCTXT Q
"RTN","PRCFDO",217,0)
 . I $G(PRCDF("REQID"))="" S RESULT=0,PRCER="Requestor-ID "_PRCTXT Q
"RTN","PRCFDO",218,0)
 . I $G(PRCDF("APPNAME"))="" S RESULT=0,PRCER="Approver-Name "_PRCTXT Q
"RTN","PRCFDO",219,0)
 . I $G(PRCDF("APPID"))="" S RESULT=0,PRCER="Approver-ID "_PRCTXT Q
"RTN","PRCFDO",220,0)
 . I $G(PRCDF("OBLNAME"))="" S RESULT=0,PRCER="Obligator-Name "_PRCTXT Q
"RTN","PRCFDO",221,0)
 . I $G(PRCDF("OBLID"))="" S RESULT=0,PRCER="Obligator-ID "_PRCTXT Q
"RTN","PRCFDO",222,0)
 ;
"RTN","PRCFDO",223,0)
 ;if error not encountered, check max field lengths
"RTN","PRCFDO",224,0)
 I RESULT D
"RTN","PRCFDO",225,0)
 . S PRCTXT="exceeds maximum field length."
"RTN","PRCFDO",226,0)
 . I $L($G(PRCDF("FACNM")))>30 S RESULT=0,PRCER="Facility-Name "_PRCTXT Q
"RTN","PRCFDO",227,0)
 . I $L($G(PRCDF("FACNUM")))>3 S RESULT=0,PRCER="Station-Number "_PRCTXT Q
"RTN","PRCFDO",228,0)
 . I $L($G(PRCDF("OBLNUM")))>10 S RESULT=0,PRCER="Obligation-Number "_PRCTXT Q
"RTN","PRCFDO",229,0)
 . I $L($G(PRCDF("TRANTYPE")))>1 S RESULT=0,PRCER="Transaction-Type "_PRCTXT Q
"RTN","PRCFDO",230,0)
 . I $L($G(PRCDF("OBLDATE")))>19 S RESULT=0,PRCER="Event-Date-Time "_PRCTXT Q
"RTN","PRCFDO",231,0)
 . I $L($G(PRCDF("REQNAME")))>35 S RESULT=0,PRCER="Requestor-Name "_PRCTXT Q
"RTN","PRCFDO",232,0)
 . I $L($G(PRCDF("REQID")))>16 S RESULT=0,PRCER="Requestor-ID "_PRCTXT Q
"RTN","PRCFDO",233,0)
 . I $L($G(PRCDF("APPNAME")))>35 S RESULT=0,PRCER="Approver-Name "_PRCTXT Q
"RTN","PRCFDO",234,0)
 . I $L($G(PRCDF("APPID")))>16 S RESULT=0,PRCER="Approver-ID "_PRCTXT Q
"RTN","PRCFDO",235,0)
 . I $L($G(PRCDF("OBLNAME")))>35 S RESULT=0,PRCER="Obligator-Name "_PRCTXT Q
"RTN","PRCFDO",236,0)
 . I $L($G(PRCDF("OBLID")))>16 S RESULT=0,PRCER="Obligator-ID "_PRCTXT Q
"RTN","PRCFDO",237,0)
 ;
"RTN","PRCFDO",238,0)
 ;if error not encountered, check for valid set of codes
"RTN","PRCFDO",239,0)
 I RESULT D
"RTN","PRCFDO",240,0)
 . S PRCTXT="contains an invalid set of codes."
"RTN","PRCFDO",241,0)
 . I ($G(PRCDF("TRANTYPE"))'="O")&($G(PRCDF("TRANTYPE"))'="A") S RESULT=0,PRCER="Transaction-Type "_PRCTXT Q
"RTN","PRCFDO",242,0)
 ;
"RTN","PRCFDO",243,0)
 Q RESULT
"RTN","PRCFDO",244,0)
 ;
"RTN","PRCFDO",245,0)
 ;
"RTN","PRCFDO",246,0)
BLDMSG(PRCDFA,PRCCTR,PRCDEL,PRCEOR,PRCXMTXT) ;Build 1358 transaction message
"RTN","PRCFDO",247,0)
 ;
"RTN","PRCFDO",248,0)
 ; This procedure is used to build a 1358 transaction message.
"RTN","PRCFDO",249,0)
 ;
"RTN","PRCFDO",250,0)
 ;  Input:
"RTN","PRCFDO",251,0)
 ;   PRCDFA - (required) array containing 1358 transaction data elements
"RTN","PRCFDO",252,0)
 ;   PRCCTR - as number of lines in message, passed by reference
"RTN","PRCFDO",253,0)
 ;   PRCDEL - data field delimiter, default="^"
"RTN","PRCFDO",254,0)
 ;   PRCEOR - end of record indicator, default="~"
"RTN","PRCFDO",255,0)
 ;
"RTN","PRCFDO",256,0)
 ; Output:
"RTN","PRCFDO",257,0)
 ;  PRCXMTXT - array of MailMan text lines
"RTN","PRCFDO",258,0)
 ;
"RTN","PRCFDO",259,0)
 N PRCREC ;temp var containing record line
"RTN","PRCFDO",260,0)
 ;
"RTN","PRCFDO",261,0)
 ;set default field delimiter and end of record indicator if not passed
"RTN","PRCFDO",262,0)
 S:$G(PRCDEL)']"" PRCDEL="^"
"RTN","PRCFDO",263,0)
 S:$G(PRCEOR)']"" PRCEOR="~"
"RTN","PRCFDO",264,0)
 ;
"RTN","PRCFDO",265,0)
 ;msg line count
"RTN","PRCFDO",266,0)
 S PRCCTR=+$G(PRCCTR)
"RTN","PRCFDO",267,0)
 ;
"RTN","PRCFDO",268,0)
 ;build Line 1 of 1358 transaction record
"RTN","PRCFDO",269,0)
 ;Station Name^Station Number^1358 Obligation #^Transaction Type^Event Date/Time^
"RTN","PRCFDO",270,0)
 S PRCREC=PRCDFA("FACNM")_PRCDEL_PRCDFA("FACNUM")_PRCDEL_PRCDFA("OBLNUM")_PRCDEL
"RTN","PRCFDO",271,0)
 S PRCREC=PRCREC_PRCDFA("TRANTYPE")_PRCDEL_PRCDFA("OBLDATE")_PRCDEL
"RTN","PRCFDO",272,0)
 ;
"RTN","PRCFDO",273,0)
 ;add line to msg
"RTN","PRCFDO",274,0)
 D ADDLINE(PRCREC,.PRCCTR,PRCXMTXT)
"RTN","PRCFDO",275,0)
 K PRCREC
"RTN","PRCFDO",276,0)
 ;
"RTN","PRCFDO",277,0)
 ;build Line 2 of 1358 transaction record
"RTN","PRCFDO",278,0)
 ;Requestor Name^Requestor ID^Approver Name^Approver ID^Obligation Name^Obligation ID
"RTN","PRCFDO",279,0)
 S PRCREC=PRCDFA("REQNAME")_PRCDEL_PRCDFA("REQID")_PRCDEL_PRCDFA("APPNAME")_PRCDEL
"RTN","PRCFDO",280,0)
 S PRCREC=PRCREC_PRCDFA("APPID")_PRCDEL_PRCDFA("OBLNAME")_PRCDEL_PRCDFA("OBLID")_PRCDEL
"RTN","PRCFDO",281,0)
 ;
"RTN","PRCFDO",282,0)
 ;add end of record indicator
"RTN","PRCFDO",283,0)
 S PRCREC=PRCREC_PRCEOR
"RTN","PRCFDO",284,0)
 ;
"RTN","PRCFDO",285,0)
 ;add line to msg
"RTN","PRCFDO",286,0)
 D ADDLINE(PRCREC,.PRCCTR,PRCXMTXT)
"RTN","PRCFDO",287,0)
 K PRCREC
"RTN","PRCFDO",288,0)
 Q
"RTN","PRCFDO",289,0)
 ;
"RTN","PRCFDO",290,0)
 ;
"RTN","PRCFDO",291,0)
ADDLINE(PRCTEXT,PRCNT,PRCXMTXT) ;Add lines of text to message array
"RTN","PRCFDO",292,0)
 ;
"RTN","PRCFDO",293,0)
 ;  Input:
"RTN","PRCFDO",294,0)
 ;   PRCTEXT - as line of text to be inserted into msg
"RTN","PRCFDO",295,0)
 ;     PRCNT - as number of lines in msg, passed by reference
"RTN","PRCFDO",296,0)
 ;
"RTN","PRCFDO",297,0)
 ; Output:
"RTN","PRCFDO",298,0)
 ;   PRCXMTXT - array containing msg text
"RTN","PRCFDO",299,0)
 ;
"RTN","PRCFDO",300,0)
 S PRCNT=PRCNT+1
"RTN","PRCFDO",301,0)
 S @PRCXMTXT@(PRCNT)=PRCTEXT
"RTN","PRCFDO",302,0)
 Q
"RTN","PRCFDO",303,0)
 ;
"RTN","PRCFDO",304,0)
 ;
"RTN","PRCFDO",305,0)
MAIL(PRCXMTXT) ;Send 1358 transaction mail message
"RTN","PRCFDO",306,0)
 ;
"RTN","PRCFDO",307,0)
 ; * Send messages to production queue Q-OLP.MED.VA.GOV
"RTN","PRCFDO",308,0)
 ;    [If PRC*5.1*153 installed in a production account]
"RTN","PRCFDO",309,0)
 ;
"RTN","PRCFDO",310,0)
 ; * Send messages to mail group G.OLP
"RTN","PRCFDO",311,0)
 ;    [If PRC*5.1*153 installed in a test account
"RTN","PRCFDO",312,0)
 ;       AND
"RTN","PRCFDO",313,0)
 ;     Nationally released version of PRC*5.1*153 is not installed]
"RTN","PRCFDO",314,0)
 ;
"RTN","PRCFDO",315,0)
 ; * Do not send messages
"RTN","PRCFDO",316,0)
 ;    [If PRC*5.1*153 installed in a test account
"RTN","PRCFDO",317,0)
 ;       AND
"RTN","PRCFDO",318,0)
 ;     Nationally released version of PRC*5.1*153 is installed]
"RTN","PRCFDO",319,0)
 ;
"RTN","PRCFDO",320,0)
 ; Supported IAs:
"RTN","PRCFDO",321,0)
 ;  #10070: Allows use of supported MailMan call ^XMD
"RTN","PRCFDO",322,0)
 ;   #2054: Allows use of supported FM call $$OREF^DILF
"RTN","PRCFDO",323,0)
 ;   #4440: Allows use of supported Kernel call $$PROD^XUPROD
"RTN","PRCFDO",324,0)
 ;  #10141: Allows use of supported Kernel call $$INSTALDT^XPDUTL
"RTN","PRCFDO",325,0)
 ;
"RTN","PRCFDO",326,0)
 ;  Input:
"RTN","PRCFDO",327,0)
 ;   PRCXMTXT - array containing message text
"RTN","PRCFDO",328,0)
 ;
"RTN","PRCFDO",329,0)
 ; Output: None
"RTN","PRCFDO",330,0)
 ;
"RTN","PRCFDO",331,0)
 N DIFROM  ;protect FM package
"RTN","PRCFDO",332,0)
 N XMDUZ   ;sender
"RTN","PRCFDO",333,0)
 N XMSUB   ;subj
"RTN","PRCFDO",334,0)
 N XMTEXT  ;name of array (in open format) containing text of msg
"RTN","PRCFDO",335,0)
 N XMY     ;recipient array
"RTN","PRCFDO",336,0)
 N XMZ     ;returned msg #
"RTN","PRCFDO",337,0)
 N XMMG,XMSTRIP,XMROU,XMYBLOB  ;optional MM input vars
"RTN","PRCFDO",338,0)
 N PRCACCT ;account
"RTN","PRCFDO",339,0)
 N PRCREC  ;recipient
"RTN","PRCFDO",340,0)
 ;
"RTN","PRCFDO",341,0)
 D
"RTN","PRCFDO",342,0)
 . ;quit if production account
"RTN","PRCFDO",343,0)
 . I $$PROD^XUPROD S PRCACCT=1 Q
"RTN","PRCFDO",344,0)
 . ;
"RTN","PRCFDO",345,0)
 . ;otherwise, retrieve all dates/times that an install was performed
"RTN","PRCFDO",346,0)
 . ;and determine if nationally released version of patch was installed
"RTN","PRCFDO",347,0)
 . N PRCINST,PRCINST1
"RTN","PRCFDO",348,0)
 . S PRCINST1=""
"RTN","PRCFDO",349,0)
 . S PRCINST=$$INSTALDT^XPDUTL("PRC*5.1*153",.PRCINST)
"RTN","PRCFDO",350,0)
 . I +PRCINST>0 D
"RTN","PRCFDO",351,0)
 . . N PRCINSTD S PRCINSTD=0
"RTN","PRCFDO",352,0)
 . . ;loop thru install dates/times
"RTN","PRCFDO",353,0)
 . . F  S PRCINSTD=$O(PRCINST(PRCINSTD)) Q:'PRCINSTD  D  Q:PRCINST1="P"
"RTN","PRCFDO",354,0)
 . . . N PRCINST0
"RTN","PRCFDO",355,0)
 . . . S PRCINST0=$G(PRCINST(PRCINSTD))
"RTN","PRCFDO",356,0)
 . . . I +$P(PRCINST0,"^",2)>0 S PRCINST1="P" Q
"RTN","PRCFDO",357,0)
 . . . S PRCINST1="T"
"RTN","PRCFDO",358,0)
 . S PRCACCT=$S(PRCINST1="T":2,1:0)
"RTN","PRCFDO",359,0)
 ;
"RTN","PRCFDO",360,0)
 S PRCREC=$S(PRCACCT=1:"XXX@Q-OLP.MED.VA.GOV",PRCACCT=2:"G.OLP",1:0)
"RTN","PRCFDO",361,0)
 Q:PRCREC=0
"RTN","PRCFDO",362,0)
 ;
"RTN","PRCFDO",363,0)
 S XMY(PRCREC)=""
"RTN","PRCFDO",364,0)
 S XMSUB="1358 TRANSACTION"
"RTN","PRCFDO",365,0)
 S XMDUZ="IFCAP/OLCS INTERFACE"
"RTN","PRCFDO",366,0)
 S XMTEXT=$$OREF^DILF(PRCXMTXT)
"RTN","PRCFDO",367,0)
 ;
"RTN","PRCFDO",368,0)
 ;send
"RTN","PRCFDO",369,0)
 D ^XMD
"RTN","PRCFDO",370,0)
 Q
"RTN","PRCFDO1")
0^5^B104213486^n/a
"RTN","PRCFDO1",1,0)
PRCFDO1 ;WOIFO/KCL - IFCAP/OLCS INTERFACE CONT. ;2/24/2011
"RTN","PRCFDO1",2,0)
V ;;5.1;IFCAP;**153**;Oct 20, 2000;Build 10
"RTN","PRCFDO1",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","PRCFDO1",4,0)
 ;
"RTN","PRCFDO1",5,0)
 ;direct entry not permitted
"RTN","PRCFDO1",6,0)
 Q
"RTN","PRCFDO1",7,0)
 ;
"RTN","PRCFDO1",8,0)
EXTRACT ;Extract 1358 transactions
"RTN","PRCFDO1",9,0)
 ;
"RTN","PRCFDO1",10,0)
 ; This procedure is used to drive the process that will extract
"RTN","PRCFDO1",11,0)
 ; 1358 transactions for FY10 and FY11 and send them to the Online
"RTN","PRCFDO1",12,0)
 ; Certification System via MailMan messages. Each message will
"RTN","PRCFDO1",13,0)
 ; contain a maximum of 100 transaction records (200 message lines
"RTN","PRCFDO1",14,0)
 ; per batch).
"RTN","PRCFDO1",15,0)
 ;
"RTN","PRCFDO1",16,0)
 ; The following 1358 transaction types will be extracted
"RTN","PRCFDO1",17,0)
 ; and sent to OLCS:
"RTN","PRCFDO1",18,0)
 ;  - Initial Obligation (when a 1358 is obligated in IFCAP)
"RTN","PRCFDO1",19,0)
 ;  - Adjustment (increase/decrease to the 1358 obligated in IFCAP)
"RTN","PRCFDO1",20,0)
 ;
"RTN","PRCFDO1",21,0)
 ; Supported IAs:
"RTN","PRCFDO1",22,0)
 ;   #10103: Allows use of supported Kernel call $$NOW^XLFDT
"RTN","PRCFDO1",23,0)
 ;
"RTN","PRCFDO1",24,0)
 ;  Input: None
"RTN","PRCFDO1",25,0)
 ; Output: None
"RTN","PRCFDO1",26,0)
 ;
"RTN","PRCFDO1",27,0)
 N PRC2237 ;Primary 2237-pointer to #410 file
"RTN","PRCFDO1",28,0)
 N PRCPODT ;P.O. Date
"RTN","PRCFDO1",29,0)
 N PRCIEN  ;ien of record in #442 file
"RTN","PRCFDO1",30,0)
 N PRC442Z ;zero node of #442 record
"RTN","PRCFDO1",31,0)
 N PRCMSG  ;closed root msg text array
"RTN","PRCFDO1",32,0)
 N PRCCNT  ;msg line count
"RTN","PRCFDO1",33,0)
 N PRCINS  ;array containing institution data
"RTN","PRCFDO1",34,0)
 N PRCSTAT ;array containing extract statistics
"RTN","PRCFDO1",35,0)
 N PRCPARM ;parameter
"RTN","PRCFDO1",36,0)
 ;
"RTN","PRCFDO1",37,0)
 ;init vars
"RTN","PRCFDO1",38,0)
 S PRCPODT=3090930  ;scan start = 9/30/09
"RTN","PRCFDO1",39,0)
 S PRCCNT=0
"RTN","PRCFDO1",40,0)
 S PRCPARM="PRC OLCS 1358 EXTRACT"
"RTN","PRCFDO1",41,0)
 S PRCMSG=$NA(^TMP("PRCOLCS",$J))
"RTN","PRCFDO1",42,0)
 K @PRCMSG
"RTN","PRCFDO1",43,0)
 ;
"RTN","PRCFDO1",44,0)
 ;obtain site data and place into array
"RTN","PRCFDO1",45,0)
 Q:'$$GETSITE(.PRCINS)
"RTN","PRCFDO1",46,0)
 ;
"RTN","PRCFDO1",47,0)
 ;init extract statistics array
"RTN","PRCFDO1",48,0)
 Q:'$$INSTAT(.PRCINS,.PRCSTAT)
"RTN","PRCFDO1",49,0)
 ;
"RTN","PRCFDO1",50,0)
 ;primary loop thru purchase order creation dates
"RTN","PRCFDO1",51,0)
 F  S PRCPODT=$O(^PRC(442,"AB",PRCPODT)) Q:'PRCPODT  D
"RTN","PRCFDO1",52,0)
 . ;
"RTN","PRCFDO1",53,0)
 . ;secondary loop thru purchase orders for the creation date
"RTN","PRCFDO1",54,0)
 . S PRCIEN=0
"RTN","PRCFDO1",55,0)
 . F  S PRCIEN=$O(^PRC(442,"AB",PRCPODT,PRCIEN)) Q:'PRCIEN  D
"RTN","PRCFDO1",56,0)
 . . ;
"RTN","PRCFDO1",57,0)
 . . ;get zero node of #442 record
"RTN","PRCFDO1",58,0)
 . . S PRC442Z=$G(^PRC(442,PRCIEN,0))
"RTN","PRCFDO1",59,0)
 . . ;
"RTN","PRCFDO1",60,0)
 . . ;quit if Method of Processing '= MISC. OBLIGATION (1358)
"RTN","PRCFDO1",61,0)
 . . Q:$P($G(PRC442Z),U,2)'=21
"RTN","PRCFDO1",62,0)
 . . ;
"RTN","PRCFDO1",63,0)
 . . ;quit if PRIMARY 2237 (pointer to #410) is missing
"RTN","PRCFDO1",64,0)
 . . S PRC2237=$P($G(PRC442Z),U,12)
"RTN","PRCFDO1",65,0)
 . . Q:PRC2237=""
"RTN","PRCFDO1",66,0)
 . . ;
"RTN","PRCFDO1",67,0)
 . . ;get/send 1358 transaction records
"RTN","PRCFDO1",68,0)
 . . Q:'$$GET1358(PRCIEN,PRC2237,.PRCCNT,PRCMSG,.PRCINS,.PRCSTAT)
"RTN","PRCFDO1",69,0)
 ;
"RTN","PRCFDO1",70,0)
 ;send last partial batch of transactions if needed
"RTN","PRCFDO1",71,0)
 I PRCCNT>0 D
"RTN","PRCFDO1",72,0)
 . D MAIL^PRCFDO(PRCMSG) ;send partial batch msg
"RTN","PRCFDO1",73,0)
 . S PRCSTAT("BATCH")=PRCSTAT("BATCH")+1  ;batch count
"RTN","PRCFDO1",74,0)
 . K @PRCMSG  ;cleanup msg text array
"RTN","PRCFDO1",75,0)
 ;
"RTN","PRCFDO1",76,0)
 ;set extract finish date/time into stats array and system parameter
"RTN","PRCFDO1",77,0)
 S PRCSTAT("END")=$$NOW^XLFDT
"RTN","PRCFDO1",78,0)
 S PRCSTAT("PARM")=PRCPARM
"RTN","PRCFDO1",79,0)
 I $$SETPARM("SYS",PRCPARM,1,PRCSTAT("END")) D
"RTN","PRCFDO1",80,0)
 . S PRCSTAT("PARMADD")="Successful"
"RTN","PRCFDO1",81,0)
 E  S PRCSTAT("PARMADD")="***FAILED***"
"RTN","PRCFDO1",82,0)
 ;
"RTN","PRCFDO1",83,0)
 ;send extract stats msg
"RTN","PRCFDO1",84,0)
 D STATS(.PRCSTAT)
"RTN","PRCFDO1",85,0)
 ;
"RTN","PRCFDO1",86,0)
 ;cleanup task in ^XTMP if queued from POST2^PRC153P 
"RTN","PRCFDO1",87,0)
 I +$G(^XTMP("PRC153P","TASK")) K ^XTMP("PRC153P")
"RTN","PRCFDO1",88,0)
 Q
"RTN","PRCFDO1",89,0)
 ;
"RTN","PRCFDO1",90,0)
 ;
"RTN","PRCFDO1",91,0)
GET1358(PRC442R,PRC410P,PRCCNT,PRCMSG,PRCIN,PRCST) ;Get & send 1358 transaction records
"RTN","PRCFDO1",92,0)
 ;
"RTN","PRCFDO1",93,0)
 ; This procedure obtains 1358 transaction records for 1358 initial
"RTN","PRCFDO1",94,0)
 ; obligations and adjustments (increase/decrease). It then sends those
"RTN","PRCFDO1",95,0)
 ; transaction records in a batch of 100 records (200 message lines per batch).
"RTN","PRCFDO1",96,0)
 ;
"RTN","PRCFDO1",97,0)
 ; Supported IAs:
"RTN","PRCFDO1",98,0)
 ;  #3065  Allows use of supported Kernel call $$HLNAME^XLFNAME
"RTN","PRCFDO1",99,0)
 ;  #10103 Allows use of supported Kernel call $$FMTHL7^XLFDT
"RTN","PRCFDO1",100,0)
 ;  #10104 Allows use of supported Kernel call $$UP^XLFSTR
"RTN","PRCFDO1",101,0)
 ;
"RTN","PRCFDO1",102,0)
 ;  Input:
"RTN","PRCFDO1",103,0)
 ;   PRC442R - ien of record in #442 file
"RTN","PRCFDO1",104,0)
 ;   PRC410R - ien of record in #410 file
"RTN","PRCFDO1",105,0)
 ;    PRCCNT - msg line count, pass by reference
"RTN","PRCFDO1",106,0)
 ;    PRCMSG - closed root msg text array
"RTN","PRCFDO1",107,0)
 ;     PRCIN - institution data array, pass by reference
"RTN","PRCFDO1",108,0)
 ;     PRCST - extract statistics array, pass by reference
"RTN","PRCFDO1",109,0)
 ;
"RTN","PRCFDO1",110,0)
 ; Output:
"RTN","PRCFDO1",111,0)
 ;   Function Value - Returns 1 on success, 0 on failure
"RTN","PRCFDO1",112,0)
 ;
"RTN","PRCFDO1",113,0)
 N PRCLIST  ;list of #410 iens
"RTN","PRCFDO1",114,0)
 N PRC410   ;ien of record in #410 file
"RTN","PRCFDO1",115,0)
 N PRC410A  ;1358 Adjustment
"RTN","PRCFDO1",116,0)
 N PRC442I  ;ien of record #442.09 subfile
"RTN","PRCFDO1",117,0)
 N PRC7NODE ;7 node of #410 record
"RTN","PRCFDO1",118,0)
 N PRCAPPID ;Approving Official (ptr to #200 file)
"RTN","PRCFDO1",119,0)
 N PRCEVENT ;1358 event type
"RTN","PRCFDO1",120,0)
 N PRCDNM   ;array for call to HLNAME^XLFNAME
"RTN","PRCFDO1",121,0)
 N PRCOBLID ;Obligated By (ptr to #200 file)
"RTN","PRCFDO1",122,0)
 N PRCOBJ   ;contains 1358 transaction object
"RTN","PRCFDO1",123,0)
 N PRCODY0  ;zero node of #442.09 subfile record
"RTN","PRCFDO1",124,0)
 N PRCREQID ;Requestor (ptr to #200 file)
"RTN","PRCFDO1",125,0)
 N RESULT   ;function return value
"RTN","PRCFDO1",126,0)
 ;
"RTN","PRCFDO1",127,0)
 S RESULT=0
"RTN","PRCFDO1",128,0)
 ;
"RTN","PRCFDO1",129,0)
 ;quit if invalid input params
"RTN","PRCFDO1",130,0)
 Q:+$G(PRC442R)'>0 RESULT
"RTN","PRCFDO1",131,0)
 Q:+$G(PRC410P)'>0 RESULT
"RTN","PRCFDO1",132,0)
 ;
"RTN","PRCFDO1",133,0)
 ;place Facility-Name and Station-Number into 1358 transaction array
"RTN","PRCFDO1",134,0)
 S PRCOBJ("FACNM")=$G(PRCIN("FACNAME"))
"RTN","PRCFDO1",135,0)
 S PRCOBJ("FACNUM")=$G(PRCIN("FACNUMB"))
"RTN","PRCFDO1",136,0)
 ;
"RTN","PRCFDO1",137,0)
 ;loop thru OBLIGATION DATA (#442.09) multiple
"RTN","PRCFDO1",138,0)
 S PRC442I=0
"RTN","PRCFDO1",139,0)
 F  S PRC442I=$O(^PRC(442,PRC442R,10,PRC442I)) Q:'PRC442I  D
"RTN","PRCFDO1",140,0)
 . ;
"RTN","PRCFDO1",141,0)
 . ;get zero node of subfile record
"RTN","PRCFDO1",142,0)
 . S PRCODY0=$G(^PRC(442,PRC442R,10,PRC442I,0))
"RTN","PRCFDO1",143,0)
 . ;
"RTN","PRCFDO1",144,0)
 . ;skip entries that are not SO or AR code sheet (excludes PV)
"RTN","PRCFDO1",145,0)
 . Q:"^SO^AR^"'[(U_$E(PRCODY0,1,2)_U)
"RTN","PRCFDO1",146,0)
 . ;
"RTN","PRCFDO1",147,0)
 . ;1358 Adjustment (ptr to #410 file)
"RTN","PRCFDO1",148,0)
 . S PRC410A=$P(PRCODY0,U,11)
"RTN","PRCFDO1",149,0)
 . ;
"RTN","PRCFDO1",150,0)
 . ;associated #410 entry
"RTN","PRCFDO1",151,0)
 . S PRC410=$S(PRC410A]"":PRC410A,1:PRC410P)
"RTN","PRCFDO1",152,0)
 . ;
"RTN","PRCFDO1",153,0)
 . ;determine event type and if not rebuild add #410 entry to list
"RTN","PRCFDO1",154,0)
 . I $D(PRCLIST(PRC410)) S PRCEVENT="R" ;Rebuild
"RTN","PRCFDO1",155,0)
 . E  S PRCEVENT=$S(PRC410A]"":"A",1:"O"),PRCLIST(PRC410)=""
"RTN","PRCFDO1",156,0)
 . ;
"RTN","PRCFDO1",157,0)
 . ;quit if rebuild since that does not impact certifier role
"RTN","PRCFDO1",158,0)
 . Q:PRCEVENT="R"
"RTN","PRCFDO1",159,0)
 . ;
"RTN","PRCFDO1",160,0)
 . ;Obligation-Number
"RTN","PRCFDO1",161,0)
 . S PRCOBJ("OBLNUM")=$P($G(^PRC(442,PRC442R,0)),U,1)
"RTN","PRCFDO1",162,0)
 . ;
"RTN","PRCFDO1",163,0)
 . ;Transaction-Type
"RTN","PRCFDO1",164,0)
 . S PRCOBJ("TRANTYPE")=PRCEVENT
"RTN","PRCFDO1",165,0)
 . ;
"RTN","PRCFDO1",166,0)
 . ;Event-Date_Time (Date Signed) in HL7 format YYYYMMDDHHMMSS-XXXX
"RTN","PRCFDO1",167,0)
 . ;where (-XXXX is the Greenwich Mean Time offset)
"RTN","PRCFDO1",168,0)
 . S PRCOBJ("OBLDATE")=$$FMTHL7^XLFDT($P(PRCODY0,U,6))
"RTN","PRCFDO1",169,0)
 . ;concatenate '00' seconds if Date Signed was filed precisely on the hour and minute
"RTN","PRCFDO1",170,0)
 . I $L($P(PRCOBJ("OBLDATE"),"-"))=12 D
"RTN","PRCFDO1",171,0)
 . . S PRCOBJ("OBLDATE")=$P(PRCOBJ("OBLDATE"),"-")_"00-"_$P(PRCOBJ("OBLDATE"),"-",2)
"RTN","PRCFDO1",172,0)
 . ;
"RTN","PRCFDO1",173,0)
 . ;get Requestor, Approver, Obligator iens
"RTN","PRCFDO1",174,0)
 . S PRC7NODE=$G(^PRCS(410,PRC410,7))
"RTN","PRCFDO1",175,0)
 . S PRCREQID=$P(PRC7NODE,U,1)
"RTN","PRCFDO1",176,0)
 . S PRCAPPID=$P(PRC7NODE,U,3)
"RTN","PRCFDO1",177,0)
 . S PRCOBLID=$P(PRCODY0,U,2)
"RTN","PRCFDO1",178,0)
 . ;
"RTN","PRCFDO1",179,0)
 . ;set up array for call to HLNAME^XLFNAME
"RTN","PRCFDO1",180,0)
 . S PRCDNM("FILE")=200
"RTN","PRCFDO1",181,0)
 . S PRCDNM("FIELD")=.01
"RTN","PRCFDO1",182,0)
 . ;place Requestor, Approver, and Obligator names
"RTN","PRCFDO1",183,0)
 . ;in HL7 format. Name components (LAST|FIRST|MIDDLE|SUFFIX)
"RTN","PRCFDO1",184,0)
 . S PRCDNM("IENS")=+PRCREQID_","
"RTN","PRCFDO1",185,0)
 . S PRCOBJ("REQNAME")=$S(+PRCREQID>0:$$HLNAME^XLFNAME(.PRCDNM,"","|"),1:"")
"RTN","PRCFDO1",186,0)
 . I PRCOBJ("REQNAME")]"" S PRCOBJ("REQNAME")=$P($$UP^XLFSTR(PRCOBJ("REQNAME")),"|",1,4)
"RTN","PRCFDO1",187,0)
 . S PRCDNM("IENS")=+PRCAPPID_","
"RTN","PRCFDO1",188,0)
 . S PRCOBJ("APPNAME")=$S(+PRCAPPID>0:$$HLNAME^XLFNAME(.PRCDNM,"","|"),1:"")
"RTN","PRCFDO1",189,0)
 . I PRCOBJ("APPNAME")]"" S PRCOBJ("APPNAME")=$P($$UP^XLFSTR(PRCOBJ("APPNAME")),"|",1,4)
"RTN","PRCFDO1",190,0)
 . S PRCDNM("IENS")=+PRCOBLID_","
"RTN","PRCFDO1",191,0)
 . S PRCOBJ("OBLNAME")=$S(+PRCOBLID>0:$$HLNAME^XLFNAME(.PRCDNM,"","|"),1:"")
"RTN","PRCFDO1",192,0)
 . I PRCOBJ("OBLNAME")]"" S PRCOBJ("OBLNAME")=$P($$UP^XLFSTR(PRCOBJ("OBLNAME")),"|",1,4)
"RTN","PRCFDO1",193,0)
 . ;
"RTN","PRCFDO1",194,0)
 . ;place Requestor, Approver, and Obligator IDs in format 'Station#-UserId' 
"RTN","PRCFDO1",195,0)
 . S PRCOBJ("REQID")=PRCOBJ("FACNUM")_"-"_PRCREQID
"RTN","PRCFDO1",196,0)
 . S PRCOBJ("APPID")=PRCOBJ("FACNUM")_"-"_PRCAPPID
"RTN","PRCFDO1",197,0)
 . S PRCOBJ("OBLID")=PRCOBJ("FACNUM")_"-"_PRCOBLID
"RTN","PRCFDO1",198,0)
 . ;
"RTN","PRCFDO1",199,0)
 . ;validate 1358 transaction data elements, don't check
"RTN","PRCFDO1",200,0)
 . ;for required elements
"RTN","PRCFDO1",201,0)
 . Q:'$$VALID^PRCFDO(.PRCOBJ,0)
"RTN","PRCFDO1",202,0)
 . ;
"RTN","PRCFDO1",203,0)
 . ;count of initial obligations and adjustments
"RTN","PRCFDO1",204,0)
 . I PRCOBJ("TRANTYPE")="O" S PRCST("OBL")=PRCST("OBL")+1
"RTN","PRCFDO1",205,0)
 . E  S PRCST("ADJ")=PRCST("ADJ")+1
"RTN","PRCFDO1",206,0)
 . ;
"RTN","PRCFDO1",207,0)
 . ;build 1358 transaction msg
"RTN","PRCFDO1",208,0)
 . D BLDMSG^PRCFDO(.PRCOBJ,.PRCCNT,"^","~",PRCMSG)
"RTN","PRCFDO1",209,0)
 . S PRCST("SENT")=PRCST("SENT")+1  ;record count
"RTN","PRCFDO1",210,0)
 . ;
"RTN","PRCFDO1",211,0)
 . ;send 100 records per batch (= 200 lines per msg)
"RTN","PRCFDO1",212,0)
 . I PRCCNT=200 D
"RTN","PRCFDO1",213,0)
 . . D MAIL^PRCFDO(PRCMSG) ;send batch msg
"RTN","PRCFDO1",214,0)
 . . K @PRCMSG   ;reset msg text array
"RTN","PRCFDO1",215,0)
 . . S PRCCNT=0  ;reset line count for next batch
"RTN","PRCFDO1",216,0)
 . . S PRCST("BATCH")=PRCST("BATCH")+1  ;batch count
"RTN","PRCFDO1",217,0)
 ;
"RTN","PRCFDO1",218,0)
 S RESULT=1
"RTN","PRCFDO1",219,0)
 Q RESULT
"RTN","PRCFDO1",220,0)
 ;
"RTN","PRCFDO1",221,0)
 ;
"RTN","PRCFDO1",222,0)
STATS(PRCSTAT) ;Generate extract statistics message
"RTN","PRCFDO1",223,0)
 ;
"RTN","PRCFDO1",224,0)
 ; This procedure will generate a MailMan message containing statistics
"RTN","PRCFDO1",225,0)
 ; from the extract of 1358 transactions.
"RTN","PRCFDO1",226,0)
 ;
"RTN","PRCFDO1",227,0)
 ; Supported IAs:
"RTN","PRCFDO1",228,0)
 ;  #10104 Allows use of supported Kernel call $$RJ^XLFSTR
"RTN","PRCFDO1",229,0)
 ;  #10070 Allows use of supported MailMan call ^XMD
"RTN","PRCFDO1",230,0)
 ;
"RTN","PRCFDO1",231,0)
 ;  Input:
"RTN","PRCFDO1",232,0)
 ;   PRCSTAT - array containing the extract statistics
"RTN","PRCFDO1",233,0)
 ;
"RTN","PRCFDO1",234,0)
 ; Output: None
"RTN","PRCFDO1",235,0)
 ;
"RTN","PRCFDO1",236,0)
 N DIFROM ;protect FM package
"RTN","PRCFDO1",237,0)
 N XMDUZ  ;sender
"RTN","PRCFDO1",238,0)
 N XMSUB  ;msg subject
"RTN","PRCFDO1",239,0)
 N XMTEXT ;name of array (in open format) containing text of msg
"RTN","PRCFDO1",240,0)
 N XMY    ;recipient array
"RTN","PRCFDO1",241,0)
 N XMZ    ;returned msg #
"RTN","PRCFDO1",242,0)
 N XMMG,XMSTRIP,XMROU,XMYBLOB  ;optional MM input vars
"RTN","PRCFDO1",243,0)
 N PRCTXT ;msg text array
"RTN","PRCFDO1",244,0)
 ;
"RTN","PRCFDO1",245,0)
 I '$D(XMY) S XMY(.5)=""
"RTN","PRCFDO1",246,0)
 I +$G(PRCSTAT("USER")) S XMY(+$G(PRCSTAT("USER")))=""
"RTN","PRCFDO1",247,0)
 S XMSUB="PRC*5.1*153-Extract Results-Station #"_$G(PRCSTAT("FACNUM"))
"RTN","PRCFDO1",248,0)
 S XMDUZ="IFCAP/OLCS INTERFACE"
"RTN","PRCFDO1",249,0)
 S PRCTXT(1)=""
"RTN","PRCFDO1",250,0)
 S PRCTXT(2)="   >>>>>>>>>> Patch PRC*5.1*153-Extract 1358s Results <<<<<<<<<<"
"RTN","PRCFDO1",251,0)
 S PRCTXT(3)=""
"RTN","PRCFDO1",252,0)
 S PRCTXT(4)="        Date/Time extract job started: "_$$FMTE^XLFDT($G(PRCSTAT("START")),"1P")
"RTN","PRCFDO1",253,0)
 S PRCTXT(5)="        Date/Time extract job stopped: "_$$FMTE^XLFDT($G(PRCSTAT("END")),"1P")
"RTN","PRCFDO1",254,0)
 S PRCTXT(6)=""
"RTN","PRCFDO1",255,0)
 S PRCTXT(7)="          Batch messages sent to OLCS: "_$$RJ^XLFSTR($G(PRCSTAT("BATCH")),6)
"RTN","PRCFDO1",256,0)
 S PRCTXT(8)="       1358 transactions sent to OLCS: "_$$RJ^XLFSTR($G(PRCSTAT("SENT")),6)
"RTN","PRCFDO1",257,0)
 S PRCTXT(9)="                  Initial Obligations: "_$$RJ^XLFSTR($G(PRCSTAT("OBL")),6)
"RTN","PRCFDO1",258,0)
 S PRCTXT(10)="                          Adjustments: "_$$RJ^XLFSTR($G(PRCSTAT("ADJ")),6)
"RTN","PRCFDO1",259,0)
 S PRCTXT(11)=""
"RTN","PRCFDO1",260,0)
 S PRCTXT(12)="     PARAMETERS (#8989.5) file update: "_$G(PRCSTAT("PARMADD"))
"RTN","PRCFDO1",261,0)
 S PRCTXT(13)="                            Parameter: "_$G(PRCSTAT("PARM"))
"RTN","PRCFDO1",262,0)
 S XMTEXT="PRCTXT("
"RTN","PRCFDO1",263,0)
 ;send msg
"RTN","PRCFDO1",264,0)
 D ^XMD
"RTN","PRCFDO1",265,0)
 Q
"RTN","PRCFDO1",266,0)
 ;
"RTN","PRCFDO1",267,0)
 ;
"RTN","PRCFDO1",268,0)
INSTAT(PRCIN,PRCS) ;Initialize extract statistics array
"RTN","PRCFDO1",269,0)
 ;
"RTN","PRCFDO1",270,0)
 ; This function is used to initialize the array that will contain the
"RTN","PRCFDO1",271,0)
 ; extract statistics.
"RTN","PRCFDO1",272,0)
 ;
"RTN","PRCFDO1",273,0)
 ; Supported IAs:
"RTN","PRCFDO1",274,0)
 ;  #10103: Allows use of supported Kernel call $$NOW^XLFDT
"RTN","PRCFDO1",275,0)
 ;
"RTN","PRCFDO1",276,0)
 ;  Input:
"RTN","PRCFDO1",277,0)
 ;   PRCIN - Array containing Institution_Name and Station_Number, passed
"RTN","PRCFDO1",278,0)
 ;           by reference
"RTN","PRCFDO1",279,0)
 ;    PRCS - (required) Result array passed by reference
"RTN","PRCFDO1",280,0)
 ;
"RTN","PRCFDO1",281,0)
 ; Output:
"RTN","PRCFDO1",282,0)
 ;  Function Value - Returns 1 on success, 0 on failure
"RTN","PRCFDO1",283,0)
 ;            PRCS - initialized extract statistics array
"RTN","PRCFDO1",284,0)
 ;        
"RTN","PRCFDO1",285,0)
 ;                    Subscript   Description
"RTN","PRCFDO1",286,0)
 ;                    ---------   ------------------------------------------
"RTN","PRCFDO1",287,0)
 ;                    "FACNM"     Institution Name
"RTN","PRCFDO1",288,0)
 ;                    "FACNUM"    Station Number
"RTN","PRCFDO1",289,0)
 ;                    "START"     Extract start date/time
"RTN","PRCFDO1",290,0)
 ;                    "END"       Extract end date/time
"RTN","PRCFDO1",291,0)
 ;                    "BATCH"     Count of batch messages sent
"RTN","PRCFDO1",292,0)
 ;                    "SENT"      Count of 1358 transactions sent
"RTN","PRCFDO1",293,0)
 ;                    "OBL"       Initial obligations count
"RTN","PRCFDO1",294,0)
 ;                    "ADJ"       Adjustment event count
"RTN","PRCFDO1",295,0)
 ;                    "PARM"      PARAMETERS (#8989.5) file entry
"RTN","PRCFDO1",296,0)
 ;                    "PARMADD"   Entry added to PARAMETERS (#8989.5) file? (Y/N)
"RTN","PRCFDO1",297,0)
 ;                    "USER"      User queuing/running extract
"RTN","PRCFDO1",298,0)
 ;
"RTN","PRCFDO1",299,0)
 N RESULT ;function return value
"RTN","PRCFDO1",300,0)
 ;
"RTN","PRCFDO1",301,0)
 S RESULT=0
"RTN","PRCFDO1",302,0)
 S PRCS("FACNM")=$G(PRCIN("FACNAME"))
"RTN","PRCFDO1",303,0)
 S PRCS("FACNUM")=$G(PRCIN("FACNUMB"))
"RTN","PRCFDO1",304,0)
 S PRCS("START")=$$NOW^XLFDT
"RTN","PRCFDO1",305,0)
 S PRCS("END")=""
"RTN","PRCFDO1",306,0)
 S PRCS("BATCH")=0
"RTN","PRCFDO1",307,0)
 S PRCS("SENT")=0
"RTN","PRCFDO1",308,0)
 S PRCS("OBL")=0
"RTN","PRCFDO1",309,0)
 S PRCS("ADJ")=0
"RTN","PRCFDO1",310,0)
 S PRCS("PARM")=""
"RTN","PRCFDO1",311,0)
 S PRCS("PARMADD")=""
"RTN","PRCFDO1",312,0)
 S PRCS("USER")=$S($G(DUZ)>0:DUZ,1:"")
"RTN","PRCFDO1",313,0)
 ;
"RTN","PRCFDO1",314,0)
 S RESULT=1
"RTN","PRCFDO1",315,0)
 Q RESULT
"RTN","PRCFDO1",316,0)
 ;
"RTN","PRCFDO1",317,0)
 ;
"RTN","PRCFDO1",318,0)
GETSITE(PRCINST) ;Get site data
"RTN","PRCFDO1",319,0)
 ;
"RTN","PRCFDO1",320,0)
 ; This function is used to obtain the Institution_Name and Station_Number.
"RTN","PRCFDO1",321,0)
 ; The data will then be placed into an array format.
"RTN","PRCFDO1",322,0)
 ;
"RTN","PRCFDO1",323,0)
 ; Supported IAs:
"RTN","PRCFDO1",324,0)
 ;  #2171  Allows use of supported Kernel call $$NS^XUAF4
"RTN","PRCFDO1",325,0)
 ;  #2541  Allows use of supported Kernel call $$KSP^XUPARAM
"RTN","PRCFDO1",326,0)
 ;
"RTN","PRCFDO1",327,0)
 ;  Input:
"RTN","PRCFDO1",328,0)
 ;   PRCINST - (required) Result array passed by reference
"RTN","PRCFDO1",329,0)
 ;
"RTN","PRCFDO1",330,0)
 ; Output:
"RTN","PRCFDO1",331,0)
 ;  Function Value - Returns 1 on success, 0 on failure
"RTN","PRCFDO1",332,0)
 ;         PRCINST - Output array containing site data
"RTN","PRCFDO1",333,0)
 ;        
"RTN","PRCFDO1",334,0)
 ;                    Subscript   Description
"RTN","PRCFDO1",335,0)
 ;                    ----------  ----------------
"RTN","PRCFDO1",336,0)
 ;                    "FACNAME"   institution name
"RTN","PRCFDO1",337,0)
 ;                    "FACNUMB"   station number
"RTN","PRCFDO1",338,0)
 ;
"RTN","PRCFDO1",339,0)
 N RESULT   ;function return value
"RTN","PRCFDO1",340,0)
 N PRCSITE  ;caret-delimited string (institution_name^station_number)
"RTN","PRCFDO1",341,0)
 ;
"RTN","PRCFDO1",342,0)
 S RESULT=0
"RTN","PRCFDO1",343,0)
 ;
"RTN","PRCFDO1",344,0)
 ;retrieve Institution Name and Station Number from the site's INSTITUTION file
"RTN","PRCFDO1",345,0)
 S PRCSITE=$$NS^XUAF4(+$$KSP^XUPARAM("INST"))
"RTN","PRCFDO1",346,0)
 S PRCINST("FACNAME")=$P($G(PRCSITE),U)
"RTN","PRCFDO1",347,0)
 S PRCINST("FACNUMB")=$P($G(PRCSITE),U,2)
"RTN","PRCFDO1",348,0)
 ;
"RTN","PRCFDO1",349,0)
 S RESULT=1
"RTN","PRCFDO1",350,0)
 Q RESULT
"RTN","PRCFDO1",351,0)
 ;
"RTN","PRCFDO1",352,0)
 ;
"RTN","PRCFDO1",353,0)
SETPARM(PRCPENT,PRCPARM,PRCPINS,PRCPVAL) ;Add parameter value
"RTN","PRCFDO1",354,0)
 ;
"RTN","PRCFDO1",355,0)
 ; This function acts as wrapper for EN^XPAR and is used to add
"RTN","PRCFDO1",356,0)
 ; a new entry in the PARAMETERS (#8989.5) file.
"RTN","PRCFDO1",357,0)
 ;
"RTN","PRCFDO1",358,0)
 ; Supported IAs:
"RTN","PRCFDO1",359,0)
 ;  #2263: Allows use of supported Kernel call EN^XPAR
"RTN","PRCFDO1",360,0)
 ;
"RTN","PRCFDO1",361,0)
 ; Input:
"RTN","PRCFDO1",362,0)
 ;  PRCPENT - parameter entity
"RTN","PRCFDO1",363,0)
 ;  PRCPARM - PARAMETER DEFINITION name
"RTN","PRCFDO1",364,0)
 ;  PRCPINS - parameter instance
"RTN","PRCFDO1",365,0)
 ;  PRCPVAL - parameter value
"RTN","PRCFDO1",366,0)
 ;
"RTN","PRCFDO1",367,0)
 ; Output:
"RTN","PRCFDO1",368,0)
 ;  Function Value - Returns 1 if parameter value added, 0 otherwise
"RTN","PRCFDO1",369,0)
 ;
"RTN","PRCFDO1",370,0)
 N RESULT
"RTN","PRCFDO1",371,0)
 S RESULT=1
"RTN","PRCFDO1",372,0)
 D EN^XPAR($G(PRCPENT),$G(PRCPARM),+$G(PRCPINS),$G(PRCPVAL),.PRCMSG)
"RTN","PRCFDO1",373,0)
 I $G(PRCMSG) S RESULT=0
"RTN","PRCFDO1",374,0)
 Q RESULT
"VER")
8.0^22.0
"BLD",6605,6)
^131
**END**
**END**
