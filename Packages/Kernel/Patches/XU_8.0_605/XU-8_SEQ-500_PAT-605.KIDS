Released XU*8*605 SEQ #500
Extracted from mail message
**KIDS**:XU*8.0*605^

**INSTALL NAME**
XU*8.0*605
"BLD",1456,0)
XU*8.0*605^KERNEL^0^3130502^y
"BLD",1456,1,0)
^^3^3^3120911^
"BLD",1456,1,1,0)
IPv4 and IPv6 utilities, IA #5844.
"BLD",1456,1,2,0)
 
"BLD",1456,1,3,0)
See description of patch XU*8*605 on FORUM.
"BLD",1456,4,0)
^9.64PA^^
"BLD",1456,6.3)
4
"BLD",1456,"ABPKG")
n
"BLD",1456,"KRN",0)
^9.67PA^9002226^22
"BLD",1456,"KRN",.4,0)
.4
"BLD",1456,"KRN",.401,0)
.401
"BLD",1456,"KRN",.402,0)
.402
"BLD",1456,"KRN",.403,0)
.403
"BLD",1456,"KRN",.5,0)
.5
"BLD",1456,"KRN",.84,0)
.84
"BLD",1456,"KRN",3.6,0)
3.6
"BLD",1456,"KRN",3.8,0)
3.8
"BLD",1456,"KRN",9.2,0)
9.2
"BLD",1456,"KRN",9.8,0)
9.8
"BLD",1456,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",1456,"KRN",9.8,"NM",1,0)
XLFIPV^^0^B87061641
"BLD",1456,"KRN",9.8,"NM","B","XLFIPV",1)

"BLD",1456,"KRN",19,0)
19
"BLD",1456,"KRN",19,"NM",0)
^9.68A^7^7
"BLD",1456,"KRN",19,"NM",1,0)
XLFIPV CONVERT^^0
"BLD",1456,"KRN",19,"NM",2,0)
XLFIPV VALIDATE^^0
"BLD",1456,"KRN",19,"NM",3,0)
XLFIPV VERSION^^0
"BLD",1456,"KRN",19,"NM",4,0)
XLFIPV FORCEIP4^^0
"BLD",1456,"KRN",19,"NM",5,0)
XLFIPV FORCEIP6^^0
"BLD",1456,"KRN",19,"NM",6,0)
XLFIPV IPV4 IPV6 MENU^^0
"BLD",1456,"KRN",19,"NM",7,0)
XUSITEMGR^^2
"BLD",1456,"KRN",19,"NM","B","XLFIPV CONVERT",1)

"BLD",1456,"KRN",19,"NM","B","XLFIPV FORCEIP4",4)

"BLD",1456,"KRN",19,"NM","B","XLFIPV FORCEIP6",5)

"BLD",1456,"KRN",19,"NM","B","XLFIPV IPV4 IPV6 MENU",6)

"BLD",1456,"KRN",19,"NM","B","XLFIPV VALIDATE",2)

"BLD",1456,"KRN",19,"NM","B","XLFIPV VERSION",3)

"BLD",1456,"KRN",19,"NM","B","XUSITEMGR",7)

"BLD",1456,"KRN",19.1,0)
19.1
"BLD",1456,"KRN",101,0)
101
"BLD",1456,"KRN",409.61,0)
409.61
"BLD",1456,"KRN",771,0)
771
"BLD",1456,"KRN",779.2,0)
779.2
"BLD",1456,"KRN",870,0)
870
"BLD",1456,"KRN",8989.51,0)
8989.51
"BLD",1456,"KRN",8989.52,0)
8989.52
"BLD",1456,"KRN",8993,0)
8993
"BLD",1456,"KRN",8994,0)
8994
"BLD",1456,"KRN",9002226,0)
9002226
"BLD",1456,"KRN","B",.4,.4)

"BLD",1456,"KRN","B",.401,.401)

"BLD",1456,"KRN","B",.402,.402)

"BLD",1456,"KRN","B",.403,.403)

"BLD",1456,"KRN","B",.5,.5)

"BLD",1456,"KRN","B",.84,.84)

"BLD",1456,"KRN","B",3.6,3.6)

"BLD",1456,"KRN","B",3.8,3.8)

"BLD",1456,"KRN","B",9.2,9.2)

"BLD",1456,"KRN","B",9.8,9.8)

"BLD",1456,"KRN","B",19,19)

"BLD",1456,"KRN","B",19.1,19.1)

"BLD",1456,"KRN","B",101,101)

"BLD",1456,"KRN","B",409.61,409.61)

"BLD",1456,"KRN","B",771,771)

"BLD",1456,"KRN","B",779.2,779.2)

"BLD",1456,"KRN","B",870,870)

"BLD",1456,"KRN","B",8989.51,8989.51)

"BLD",1456,"KRN","B",8989.52,8989.52)

"BLD",1456,"KRN","B",8993,8993)

"BLD",1456,"KRN","B",8994,8994)

"BLD",1456,"KRN","B",9002226,9002226)

"BLD",1456,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",1456,"QUES",0)
^9.62^^
"BLD",1456,"REQB",0)
^9.611^^
"KRN",19,59,-1)
2^7
"KRN",19,59,0)
XUSITEMGR^Operations Management^^M^.5^^^^^^y^3^n^^
"KRN",19,59,10,0)
^19.01IP^42^16
"KRN",19,59,10,42,0)
1647^IPV
"KRN",19,59,10,42,"^")
XLFIPV IPV4 IPV6 MENU
"KRN",19,59,"U")
OPERATIONS MANAGEMENT
"KRN",19,1642,-1)
0^1
"KRN",19,1642,0)
XLFIPV CONVERT^Convert any IP address per system settings^^R^^^^^^^^KERNEL
"KRN",19,1642,1,0)
^^15^15^3120810^
"KRN",19,1642,1,1,0)
XU*8*605 IPv4 and IPv6 Utilities 
"KRN",19,1642,1,2,0)
  
"KRN",19,1642,1,3,0)
Convert an IP address (either IPv4 or IPv6) into an IPv6 address in a 
"KRN",19,1642,1,4,0)
standardized format, either IPv4 or IPv6 depending upon the Cache system 
"KRN",19,1642,1,5,0)
settings.  
"KRN",19,1642,1,6,0)
Usage: S Y=$$CONVERT^XLFIPV(IP) 
"KRN",19,1642,1,7,0)
   VARIABLES:  Input     IP 
"KRN",19,1642,1,8,0)
                           (string) IPv4 or IPv6 Address to be converted.
"KRN",19,1642,1,9,0)
   VARIABLES:  Output    returns: 
"KRN",19,1642,1,10,0)
                           - An IPv4 address if IPv6 is disabled on the 
"KRN",19,1642,1,11,0)
                             system.  
"KRN",19,1642,1,12,0)
                           - An IPv6 address if IPv6 is enabled on the 
"KRN",19,1642,1,13,0)
                             system.  
"KRN",19,1642,1,14,0)
                           - An IPv4 or IPv6 null address if the input 
"KRN",19,1642,1,15,0)
                             cannot be converted.
"KRN",19,1642,25)
CON^XLFIPV
"KRN",19,1642,"U")
CONVERT ANY IP ADDRESS PER SYS
"KRN",19,1643,-1)
0^4
"KRN",19,1643,0)
XLFIPV FORCEIP4^Convert any IP address to IPv4^^R^^^^^^^^KERNEL
"KRN",19,1643,1,0)
^^14^14^3120810^
"KRN",19,1643,1,1,0)
XU*8*605 IPv4 and IPv6 Utilities 
"KRN",19,1643,1,2,0)
  
"KRN",19,1643,1,3,0)
Convert an IP address (either IPv4 or IPv6) into an IPv4 address in a 
"KRN",19,1643,1,4,0)
standardized format: "127.0.0.1".  
"KRN",19,1643,1,5,0)
Usage: S Y=$$FORCEIP4^XLFIPV(IP) 
"KRN",19,1643,1,6,0)
   VARIABLES:  Input     IP 
"KRN",19,1643,1,7,0)
                          (string) IPv4 or IPv6 Address to be converted.
"KRN",19,1643,1,8,0)
   VARIABLES:  Output    returns:  An IPv4 address in "nnn.nnn.nnn.nnn" 
"KRN",19,1643,1,9,0)
                           notation if the input address is valid and has
"KRN",19,1643,1,10,0)
                           an IPv4 equivalent, or the null address 
"KRN",19,1643,1,11,0)
                           "0.0.0.0" if the input address is invalid, or 
"KRN",19,1643,1,12,0)
                           the null address "0.0.0.0" if an IPv6 address 
"KRN",19,1643,1,13,0)
                           is input which does not have an IPv4 
"KRN",19,1643,1,14,0)
                           equivalent.
"KRN",19,1643,25)
IP4^XLFIPV
"KRN",19,1643,"U")
CONVERT ANY IP ADDRESS TO IPV4
"KRN",19,1644,-1)
0^5
"KRN",19,1644,0)
XLFIPV FORCEIP6^Convert any IP address to IPv6^^R^^^^^^^^KERNEL
"KRN",19,1644,1,0)
^^12^12^3120810^
"KRN",19,1644,1,1,0)
XU*8*605 IPv4 and IPv6 Utilities
"KRN",19,1644,1,2,0)
 
"KRN",19,1644,1,3,0)
Convert an IP address (either IPv4 or IPv6) into an IPv6 address in a 
"KRN",19,1644,1,4,0)
standardized format: "0000:0000:0000:FFFF:0127:0000:0000:0001".  
"KRN",19,1644,1,5,0)
Usage: S Y=$$FORCEIP6^XLFIPV(IP)
"KRN",19,1644,1,6,0)
   VARIABLES:  Input     IP 
"KRN",19,1644,1,7,0)
                           (string) IPv4 or IPv6 Address to be converted.
"KRN",19,1644,1,8,0)
   VARIABLES:  Output    returns:  An IPv6 address in 
"KRN",19,1644,1,9,0)
                           "hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh" 
"KRN",19,1644,1,10,0)
                           notation if the input address is valid, or the
"KRN",19,1644,1,11,0)
                           null address "::0" if the input address is 
"KRN",19,1644,1,12,0)
                           invalid.
"KRN",19,1644,25)
IP6^XLFIPV
"KRN",19,1644,"U")
CONVERT ANY IP ADDRESS TO IPV6
"KRN",19,1645,-1)
0^2
"KRN",19,1645,0)
XLFIPV VALIDATE^Validate IPv4 and IPv6 address^^R^^^^^^^^KERNEL
"KRN",19,1645,1,0)
^^9^9^3120810^
"KRN",19,1645,1,1,0)
XU*8*605 IPv4 and IPv6 Utilities 
"KRN",19,1645,1,2,0)
  
"KRN",19,1645,1,3,0)
Validate the format of an IP address (either IPv4 or IPv6).  
"KRN",19,1645,1,4,0)
Usage: S Y=$$VALIDATE^XLFIPV(IP)
"KRN",19,1645,1,5,0)
   VARIABLES:  Input     IP
"KRN",19,1645,1,6,0)
                           (string) IPv4 or IPv6 Address to be validated.
"KRN",19,1645,1,7,0)
   VARIABLES:  Output    returns:
"KRN",19,1645,1,8,0)
                           1 - if the IP address is in a valid format.  
"KRN",19,1645,1,9,0)
                           0 - if the format is invalid or null input.
"KRN",19,1645,25)
VAL^XLFIPV
"KRN",19,1645,"U")
VALIDATE IPV4 AND IPV6 ADDRESS
"KRN",19,1646,-1)
0^3
"KRN",19,1646,0)
XLFIPV VERSION^Show system settings for IPv6^^R^^^^^^^^KERNEL
"KRN",19,1646,1,0)
^^8^8^3120810^
"KRN",19,1646,1,1,0)
XU*8*605 IPv4 and IPv6 Utilities
"KRN",19,1646,1,2,0)
 
"KRN",19,1646,1,3,0)
Determine the Cache system settings for IPv6.
"KRN",19,1646,1,4,0)
Usage: S Y=$$VERSION^XLFIPV()
"KRN",19,1646,1,5,0)
   VARIABLES:  Input     None 
"KRN",19,1646,1,6,0)
   VARIABLES:  Output    returns: 
"KRN",19,1646,1,7,0)
                           1 - if IPv6 is enabled.  
"KRN",19,1646,1,8,0)
                           0 - if IPv6 is disabled.
"KRN",19,1646,25)
VER^XLFIPV
"KRN",19,1646,"U")
SHOW SYSTEM SETTINGS FOR IPV6
"KRN",19,1647,-1)
0^6
"KRN",19,1647,0)
XLFIPV IPV4 IPV6 MENU^IPv4 and IPv6 Address Tools^^M^^^^^^^^KERNEL
"KRN",19,1647,1,0)
^^3^3^3120810^
"KRN",19,1647,1,1,0)
Patch XU*8*605 includes new utilities to support the VA's transition from 
"KRN",19,1647,1,2,0)
IPv4 to IPv6.  These menu options demonstrate the APIs included in the 
"KRN",19,1647,1,3,0)
patch.
"KRN",19,1647,10,0)
^19.01IP^5^5
"KRN",19,1647,10,1,0)
1645^VAL^1
"KRN",19,1647,10,1,"^")
XLFIPV VALIDATE
"KRN",19,1647,10,2,0)
1643^IP4^2
"KRN",19,1647,10,2,"^")
XLFIPV FORCEIP4
"KRN",19,1647,10,3,0)
1644^IP6^3
"KRN",19,1647,10,3,"^")
XLFIPV FORCEIP6
"KRN",19,1647,10,4,0)
1642^CON^4
"KRN",19,1647,10,4,"^")
XLFIPV CONVERT
"KRN",19,1647,10,5,0)
1646^VER^5
"KRN",19,1647,10,5,"^")
XLFIPV VERSION
"KRN",19,1647,99)
62679,49679
"KRN",19,1647,"U")
IPV4 AND IPV6 ADDRESS TOOLS
"MBREQ")
0
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,20,0)
^9.402P^2^2
"PKG",3,20,1,0)
200^^XDRM200N
"PKG",3,20,1,1)

"PKG",3,20,2,0)
2^^RGDRM03
"PKG",3,20,2,1)

"PKG",3,20,"B",2,2)

"PKG",3,20,"B",200,1)

"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^3090706^3090706^6
"PKG",3,22,1,"PAH",1,0)
605^3130502
"PKG",3,22,1,"PAH",1,1,0)
^^3^3^3130502
"PKG",3,22,1,"PAH",1,1,1,0)
IPv4 and IPv6 utilities, IA #5844.
"PKG",3,22,1,"PAH",1,1,2,0)
 
"PKG",3,22,1,"PAH",1,1,3,0)
See description of patch XU*8*605 on FORUM.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","XLFIPV")
0^1^B87061641^n/a
"RTN","XLFIPV",1,0)
XLFIPV ;ISD/HGW - IPv4 and IPv6 Utilities ;09/11/12  09:03
"RTN","XLFIPV",2,0)
 ;;8.0;KERNEL;**605**;Aug 6, 2012;Build 4
"RTN","XLFIPV",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified
"RTN","XLFIPV",4,0)
 Q
"RTN","XLFIPV",5,0)
 ;
"RTN","XLFIPV",6,0)
VALIDATE(IP) ; EXTRINSIC. ICR #5844 (supported)
"RTN","XLFIPV",7,0)
 ; Validate the format of an IP address (either IPv4 or IPv6).
"RTN","XLFIPV",8,0)
 ; Usage:  S Y=$$VALIDATE^XLFIPV(IP)
"RTN","XLFIPV",9,0)
 ; Input:  IP (string) - IPv4 or IPv6 Address to be validated.
"RTN","XLFIPV",10,0)
 ; Output: returns:
"RTN","XLFIPV",11,0)
 ;           1 - if the IP address is in a valid format.
"RTN","XLFIPV",12,0)
 ;           0 - if the format is invalid or null input.
"RTN","XLFIPV",13,0)
 ;
"RTN","XLFIPV",14,0)
 N I,J,X,XLFIELD
"RTN","XLFIPV",15,0)
 S X=1
"RTN","XLFIPV",16,0)
 I '$D(IP) Q 0
"RTN","XLFIPV",17,0)
 ; If IP address contains both ":" and "." delimiters, then check IPv4 embedded in IPv6.
"RTN","XLFIPV",18,0)
 I (IP[":")&(IP[".") D  Q X  ; IPv4-Mapped.
"RTN","XLFIPV",19,0)
 . S IP=$$EXPAND6(IP,6) I IP="" S X=0 Q  ; Change the format of the first six high-order bytes
"RTN","XLFIPV",20,0)
 . F I=1:1:6 Q:X=0  D  ; Examine field by field, first six bytes
"RTN","XLFIPV",21,0)
 . . S X=$$EXAMINE6($P(IP,":",I))
"RTN","XLFIPV",22,0)
 . S XLFIELD=$P(IP,":",7) ; Get last two bytes, IPv4 format
"RTN","XLFIPV",23,0)
 . F I=1:1:4 Q:X=0  D  ; Examine field by field, last two bytes
"RTN","XLFIPV",24,0)
 . . S X=$$EXAMINE4($P(XLFIELD,".",I))
"RTN","XLFIPV",25,0)
 ; If IP address contains ":" delimiter, then IPv6. Otherwise IPv4.
"RTN","XLFIPV",26,0)
 I IP[":" D  Q X  ; IPv6 address
"RTN","XLFIPV",27,0)
 . S IP=$$EXPAND6(IP,7) I IP="" S X=0 Q  ; Change the format to a common format
"RTN","XLFIPV",28,0)
 . F I=1:1:8 Q:X=0  D  ; Examine field by field
"RTN","XLFIPV",29,0)
 . . S X=$$EXAMINE6($P(IP,":",I))
"RTN","XLFIPV",30,0)
 I IP'[":" D  Q X  ; IPv4 address
"RTN","XLFIPV",31,0)
 . S IP=$$EXPAND4(IP) ; Change the format to a common format
"RTN","XLFIPV",32,0)
 . F I=1:1:4 Q:X=0  D  ; Examine field by field
"RTN","XLFIPV",33,0)
 . . S X=$$EXAMINE4($P(IP,".",I))
"RTN","XLFIPV",34,0)
 Q 0
"RTN","XLFIPV",35,0)
 ;
"RTN","XLFIPV",36,0)
FORCEIP4(IP) ; EXTRINSIC. ICR #5844 (supported)
"RTN","XLFIPV",37,0)
 ; Convert an IP address (either IPv4 or IPv6) into an IPv4 address in a standardized format: "127.0.0.1".
"RTN","XLFIPV",38,0)
 ; Usage:  S Y=$$FORCEIP4^XLFIPV(IP)
"RTN","XLFIPV",39,0)
 ; Input:  IP (string) IPv4 or IPv6 Address to be converted.
"RTN","XLFIPV",40,0)
 ; Output: returns:  An IPv4 address in "ddd.ddd.ddd.ddd" notation if the input address is valid and has an
"RTN","XLFIPV",41,0)
 ;           IPv4 equivalent, or the null address "0.0.0.0" if the input address is invalid, or the null address
"RTN","XLFIPV",42,0)
 ;           "0.0.0.0" if an IPv6 address is input which does not have an IPv4 equivalent.
"RTN","XLFIPV",43,0)
 ;
"RTN","XLFIPV",44,0)
 N I,XLFIELD,XLMAP
"RTN","XLFIPV",45,0)
 ; Return null address "0.0.0.0" if address is invalid
"RTN","XLFIPV",46,0)
 Q:'$$VALIDATE(IP) "0.0.0.0"
"RTN","XLFIPV",47,0)
 S XLMAP="0000:0000:0000:0000:0000:FFFF:"
"RTN","XLFIPV",48,0)
 ; If IP address contains both ":" and "." delimiters, then IPv4-Mapped IPv6 address.
"RTN","XLFIPV",49,0)
 I (IP[":")&(IP[".") D  Q IP  ; IPv4-Mapped.
"RTN","XLFIPV",50,0)
 . S IP=$$EXPAND6(IP,6) I IP="" S IP="0.0.0.0" Q  ; Change the format of the first six high-order bytes
"RTN","XLFIPV",51,0)
 . S IP=$$EXPAND4($E(IP,31,49)) ; Get last two bytes, IPv4 format (not interested in first six bytes)
"RTN","XLFIPV",52,0)
 I IP[":" D  Q IP  ; IPv6 address (last two bytes might be IPv4-Mapped)
"RTN","XLFIPV",53,0)
 . S IP=$$EXPAND6(IP,7) I IP="" S IP="0.0.0.0" Q  ; Change the format to standardized
"RTN","XLFIPV",54,0)
 . I $E(IP,1,30)'=XLMAP S IP="0.0.0.0" Q  ; Invalid IPv4-Mapped address
"RTN","XLFIPV",55,0)
 . S IP=$$DEC^XLFUTL($E(IP,31,32),16)_"."_$$DEC^XLFUTL($E(IP,33,34),16)_"."_$$DEC^XLFUTL($E(IP,36,37),16)_"."_$$DEC^XLFUTL($E(IP,38,39),16)
"RTN","XLFIPV",56,0)
 I IP'[":" D  Q IP  ; IPv4 address
"RTN","XLFIPV",57,0)
 . S IP=$$EXPAND4(IP) ; Change the format to a common format
"RTN","XLFIPV",58,0)
 Q "0.0.0.0"
"RTN","XLFIPV",59,0)
 ;
"RTN","XLFIPV",60,0)
FORCEIP6(IP) ; EXTRINSIC. ICR #5844 (supported)
"RTN","XLFIPV",61,0)
 ; Convert an IP address (either IPv4 or IPv6) into an IPv6 address in a standardized format: "2001:0DB8:0000:0000:0000:8A2E:0370:7334".
"RTN","XLFIPV",62,0)
 ; Usage:  S Y=$$FORCEIP6^XLFIPV(IP)
"RTN","XLFIPV",63,0)
 ; Input:  IP (string) IPv4 or IPv6 Address to be converted.
"RTN","XLFIPV",64,0)
 ; Output: returns:  An IPv6 address in "hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh" notation if the
"RTN","XLFIPV",65,0)
 ;           input address is valid, or the null address "::0" if the input address is invalid.
"RTN","XLFIPV",66,0)
 ;
"RTN","XLFIPV",67,0)
 N XLMAP
"RTN","XLFIPV",68,0)
 ; Return null address "::0" if address is invalid
"RTN","XLFIPV",69,0)
 Q:'$$VALIDATE(IP) "::0"
"RTN","XLFIPV",70,0)
 S XLMAP="0000:0000:0000:0000:0000:FFFF:"
"RTN","XLFIPV",71,0)
 ; If IP address contains both ":" and "." delimiters, then IPv4 embedded in IPv6.
"RTN","XLFIPV",72,0)
 I (IP[":")&(IP[".") D  Q IP  ; IPv4-Mapped address.
"RTN","XLFIPV",73,0)
 . S IP=$$EXPAND6(IP,6) I IP="" S IP="0.0.0.0" Q  ; Change the format of the first six high-order bytes
"RTN","XLFIPV",74,0)
 . S IP=$E(IP,1,30)_$$CNVF($$EXPAND4($E(IP,31,49))) ; Get last two bytes, IPv4 format -> IPv4-Mapped Address
"RTN","XLFIPV",75,0)
 ; If IP address contains ":" delimiter, then IPv6. Otherwise IPv4.
"RTN","XLFIPV",76,0)
 I IP[":" D  Q IP  ; IPv6 address
"RTN","XLFIPV",77,0)
 . S IP=$$EXPAND6(IP,7) I IP="" S IP="::0" Q  ; Change the format to a common format
"RTN","XLFIPV",78,0)
 I IP'[":" D  Q IP  ; IPv4 address
"RTN","XLFIPV",79,0)
 . S IP=XLMAP_$$CNVF($$EXPAND4(IP)) ; IPv4-Mapped IPv6 Address
"RTN","XLFIPV",80,0)
 Q IP
"RTN","XLFIPV",81,0)
 ;
"RTN","XLFIPV",82,0)
CONVERT(IP) ; EXTRINSIC. ICR #5844 (supported)
"RTN","XLFIPV",83,0)
 ; Convert an IP address (either IPv4 or IPv6) into an IPv6 address in a standardized format, either IPv4 or IPv6 depending
"RTN","XLFIPV",84,0)
 ;   upon the Cache system settings.
"RTN","XLFIPV",85,0)
 ; Usage:  S Y=$$CONVERT^XLFIPV(IP)
"RTN","XLFIPV",86,0)
 ; Input:  IP (string) IPv4 or IPv6 Address to be converted.
"RTN","XLFIPV",87,0)
 ; Output: returns:
"RTN","XLFIPV",88,0)
 ;           - An IPv4 address if IPv6 is disabled on the system.
"RTN","XLFIPV",89,0)
 ;           - An IPv6 address if IPv6 is enabled on the system.
"RTN","XLFIPV",90,0)
 ;           - An IPv4 or IPv6 null address if the input cannot be converted.
"RTN","XLFIPV",91,0)
 ;
"RTN","XLFIPV",92,0)
 N XLV6
"RTN","XLFIPV",93,0)
 S XLV6=$$VERSION() ; Is IPv6 enabled on this system?
"RTN","XLFIPV",94,0)
 I XLV6=1 S IP=$$FORCEIP6(IP) ; Yes
"RTN","XLFIPV",95,0)
 I XLV6=0 S IP=$$FORCEIP4(IP) ; No
"RTN","XLFIPV",96,0)
 Q IP
"RTN","XLFIPV",97,0)
 ;
"RTN","XLFIPV",98,0)
VERSION() ; EXTRINSIC. ICR #5844 (supported)
"RTN","XLFIPV",99,0)
 ; Determine the Cache system settings for IPv6.
"RTN","XLFIPV",100,0)
 ; Usage:  S Y=$$VERSION^XLFIPV()
"RTN","XLFIPV",101,0)
 ; Input:  None.
"RTN","XLFIPV",102,0)
 ; Output: returns:
"RTN","XLFIPV",103,0)
 ;           1 - if IPv6 is enabled.
"RTN","XLFIPV",104,0)
 ;           0 - if IPv6 is disabled.
"RTN","XLFIPV",105,0)
 ;
"RTN","XLFIPV",106,0)
 N %
"RTN","XLFIPV",107,0)
 S %=0
"RTN","XLFIPV",108,0)
 I $$VERSION^%ZOSV(1)["Cache" I +$$VERSION^%ZOSV()>2009 S %=$SYSTEM.Process.IPv6Format()
"RTN","XLFIPV",109,0)
 Q %
"RTN","XLFIPV",110,0)
 ;
"RTN","XLFIPV",111,0)
VAL ; OPTION. "Validate IPv4 and IPv6 address" [XLFIPV VALIDATE]
"RTN","XLFIPV",112,0)
 N DIR,X,XLFX
"RTN","XLFIPV",113,0)
 S DIR(0)="F^3:60",DIR("A")="Enter an IP address to be validated",DIR("B")="127.0.0.1"
"RTN","XLFIPV",114,0)
 S DIR("?")="   Validate the format of an IP address."
"RTN","XLFIPV",115,0)
 S DIR("??")="^D VALH^XLFIPV"
"RTN","XLFIPV",116,0)
 D ^DIR S XLFX=$$VALIDATE(X)
"RTN","XLFIPV",117,0)
 I XLFX=0 W !!,?3,X," is NOT a valid address."
"RTN","XLFIPV",118,0)
 I XLFX=1 W !!,?3,X," is a valid address."
"RTN","XLFIPV",119,0)
 Q
"RTN","XLFIPV",120,0)
 ;
"RTN","XLFIPV",121,0)
VALH ; Extended help for VAL^XLFIPV
"RTN","XLFIPV",122,0)
 W !!,"   This option will validate the format of an IP address (either IPv4 or IPv6)"
"RTN","XLFIPV",123,0)
 W !,"   and return ""IP is NOT a valid address"" if the address is in an invalid"
"RTN","XLFIPV",124,0)
 W !,"   format, or return ""IP is a valid address"" if the format is correct."
"RTN","XLFIPV",125,0)
 Q
"RTN","XLFIPV",126,0)
 ;
"RTN","XLFIPV",127,0)
IP4 ; OPTION. "Convert any IP address to IPv4" [XLFIPV FORCEIP4]
"RTN","XLFIPV",128,0)
 N DIR,X
"RTN","XLFIPV",129,0)
 S DIR(0)="F^3:60",DIR("A")="Enter an IP address to be converted to IPv4",DIR("B")="127.0.0.1"
"RTN","XLFIPV",130,0)
 S DIR("?")="   Convert an IP address into an IPv4 address in a standardized format."
"RTN","XLFIPV",131,0)
 S DIR("??")="^D IP4H^XLFIPV"
"RTN","XLFIPV",132,0)
 D ^DIR W !!,?3,$$FORCEIP4(X)
"RTN","XLFIPV",133,0)
 Q
"RTN","XLFIPV",134,0)
 ;
"RTN","XLFIPV",135,0)
IP4H ; Extended help for IP4^XLFIPV
"RTN","XLFIPV",136,0)
 W !!,"   This option will take an IP address (either IPv4 or IPv6) and return an"
"RTN","XLFIPV",137,0)
 W !,"   IPv4 address in a standardized format.  It will return the null address"
"RTN","XLFIPV",138,0)
 W !,"   0.0.0.0 if the passed IP address is invalid.  If an IPv6 address is input"
"RTN","XLFIPV",139,0)
 W !,"   which does not have a valid IPv4 equivalent, the null address will be"
"RTN","XLFIPV",140,0)
 W !,"   returned."
"RTN","XLFIPV",141,0)
 Q
"RTN","XLFIPV",142,0)
 ;
"RTN","XLFIPV",143,0)
IP6 ; OPTION. "Convert any IP address to IPv6" [XLFIPV FORCEIP6]
"RTN","XLFIPV",144,0)
 N DIR,X
"RTN","XLFIPV",145,0)
 S DIR(0)="F^3:60",DIR("A")="Enter an IP address to be converted to IPv6",DIR("B")="127.0.0.1"
"RTN","XLFIPV",146,0)
 S DIR("?")="   Convert an IP address into an IPv6 address in a standardized format."
"RTN","XLFIPV",147,0)
 S DIR("??")="^D IP6H^XLFIPV"
"RTN","XLFIPV",148,0)
 D ^DIR W !!,?3,$$FORCEIP6(X)
"RTN","XLFIPV",149,0)
 Q
"RTN","XLFIPV",150,0)
IP6H ; Extended help for IP6^XLFIPV
"RTN","XLFIPV",151,0)
 W !!,"   This option will take an IP address (either IPv4 or IPv6) and return an"
"RTN","XLFIPV",152,0)
 W !,"   IPv6 address in a standardized format.  It will return the null address"
"RTN","XLFIPV",153,0)
 W !,"   ::0 if the passed IP address is invalid."
"RTN","XLFIPV",154,0)
 Q
"RTN","XLFIPV",155,0)
 ;
"RTN","XLFIPV",156,0)
CON ; OPTION. "Convert any IP address per system settings" [XLFIPV CONVERT]
"RTN","XLFIPV",157,0)
 N DIR,X
"RTN","XLFIPV",158,0)
 S DIR(0)="F^3:60",DIR("A")="Enter an IP address to be converted",DIR("B")="127.0.0.1"
"RTN","XLFIPV",159,0)
 S DIR("?")="   Convert an IP address depending upon system settings."
"RTN","XLFIPV",160,0)
 S DIR("??")="^D CONH^XLFIPV"
"RTN","XLFIPV",161,0)
 D ^DIR W !!,?3,$$CONVERT(X)
"RTN","XLFIPV",162,0)
 Q
"RTN","XLFIPV",163,0)
CONH ; Extended help for CON^XLFIPV
"RTN","XLFIPV",164,0)
 W !!,"   This option will take an IP address (either IPv4 or IPv6) and return an"
"RTN","XLFIPV",165,0)
 W !,"   IP address in a standardized format, depending on system settings.  If"
"RTN","XLFIPV",166,0)
 W !,"   IPv6 is disabled on the system, an IPv4 address will be returned.  If"
"RTN","XLFIPV",167,0)
 W !,"   IPv6 is enabled on the system, an IPv6 address will be returned.  If an"
"RTN","XLFIPV",168,0)
 W !,"   invalid address is entered, a null address will be returned.  If an IPv6"
"RTN","XLFIPV",169,0)
 W !,"   is entered, IPv6 is not enabled, and the input address does not have an"
"RTN","XLFIPV",170,0)
 W !,"   IPv4 equivalent, a null address will be returned."
"RTN","XLFIPV",171,0)
 Q
"RTN","XLFIPV",172,0)
 ;
"RTN","XLFIPV",173,0)
VER ; OPTION. "Show system settings for IPv6" [XLFIPV VERSION]
"RTN","XLFIPV",174,0)
 N X,XLSYS,XLVER
"RTN","XLFIPV",175,0)
 S X=$$VERSION,XLSYS=$$VERSION^%ZOSV(1),XLVER=+$$VERSION^%ZOSV()
"RTN","XLFIPV",176,0)
 W !!,?3,XLSYS," ",XLVER
"RTN","XLFIPV",177,0)
 I X=0 D  Q
"RTN","XLFIPV",178,0)
 . I XLSYS["Cache" D  Q
"RTN","XLFIPV",179,0)
 . . I XLVER>2009 W !!,"   IPv6 is available but is disabled on this system." Q
"RTN","XLFIPV",180,0)
 . . W !!,"   IPv6 is not available on this version of Cache."
"RTN","XLFIPV",181,0)
 . W !!,"   IPv6 is not available on this system."
"RTN","XLFIPV",182,0)
 I X=1 W !!,"   IPv6 is enabled on this system."
"RTN","XLFIPV",183,0)
 Q
"RTN","XLFIPV",184,0)
 ;
"RTN","XLFIPV",185,0)
EXPAND4(IP) ; INTRINSIC.
"RTN","XLFIPV",186,0)
 ; Changes the format of an IPv4 address to a common format that can be validated
"RTN","XLFIPV",187,0)
 ; Usage:  S Y=$$EXPAND4^XLFIPV(IP)
"RTN","XLFIPV",188,0)
 ; Input:  IP (string) IPv4 address to be reformatted.
"RTN","XLFIPV",189,0)
 ; Output: returns:  An IPv4 address in the format "nnn.nnn.nnn.nnn".
"RTN","XLFIPV",190,0)
 ;
"RTN","XLFIPV",191,0)
 N I,XLFIELD
"RTN","XLFIPV",192,0)
 ; Expand hexadecimal address to IPv4 dotted hexadecimal: "0xc0a8010a" -> "0xc0.0xa8.0x10.0x0a"
"RTN","XLFIPV",193,0)
 I ($E(IP,1,2)="0x")&(IP'[".") D
"RTN","XLFIPV",194,0)
 . S IP="0x"_$E(IP,3,4)_".0x"_$E(IP,5,6)_".0x"_$E(IP,7,8)_".0x"_$E(IP,9,10)
"RTN","XLFIPV",195,0)
 F I=1:1:4 D  ; Examine field by field
"RTN","XLFIPV",196,0)
 . S XLFIELD=$P(IP,".",I)
"RTN","XLFIPV",197,0)
 . ; Convert dotted hexadecimal address to IPv4 dotted decimal: "0xc0.0xa8.0x10.0x0a" -> "192.168.16.10"
"RTN","XLFIPV",198,0)
 . I $E(XLFIELD,1,2)="0x" S XLFIELD=$$DEC^XLFUTL($$UP^XLFSTR($E(XLFIELD,3,4)),16) ; Convert HEX field to DEC
"RTN","XLFIPV",199,0)
 . S $P(IP,".",I)=XLFIELD
"RTN","XLFIPV",200,0)
 ; Convert dotted octal address to IPv4 dotted decimal: "0300.0000.0002.0353" -> "192.0.2.235"
"RTN","XLFIPV",201,0)
 I IP?4N1"."4N1"."4N1"."4N D
"RTN","XLFIPV",202,0)
 . S IP=$$DEC^XLFUTL($E(IP,1,4),8)_"."_$$DEC^XLFUTL($E(IP,6,9),8)_"."_$$DEC^XLFUTL($E(IP,11,14),8)_"."_$$DEC^XLFUTL($E(IP,16,19),8)
"RTN","XLFIPV",203,0)
 Q IP
"RTN","XLFIPV",204,0)
 ;
"RTN","XLFIPV",205,0)
EXPAND6(IP,ZNUM) ; INTRINSIC.
"RTN","XLFIPV",206,0)
 ; Changes the format of an IPv6 address to a common format that can be validated
"RTN","XLFIPV",207,0)
 ; Usage:  S Y=$$EXPAND6^XLFIPV(IP)
"RTN","XLFIPV",208,0)
 ; Input:  IP (string) IPv6 address to be reformatted.
"RTN","XLFIPV",209,0)
 ;         ZNUM The number of expected colons
"RTN","XLFIPV",210,0)
 ; Output: returns:  An IPv6 address in the format "hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh:hhhh".
"RTN","XLFIPV",211,0)
 ;
"RTN","XLFIPV",212,0)
 N I,XLBLANK,XLCNT,XLFIELD
"RTN","XLFIPV",213,0)
 I IP[":::" S IP="" Q IP  ; Cannot contain :::
"RTN","XLFIPV",214,0)
 I $E(IP,1)="[" S IP=$P($P(IP,"[",2),"]") ; Strip brackets [] from around an address string
"RTN","XLFIPV",215,0)
 S XLCNT=ZNUM-($L(IP)-$L($TR(IP,":",""))) ; Count the number of colons needed to be added in short form address
"RTN","XLFIPV",216,0)
 I (XLCNT>0)&(IP'["::") S IP="" Q IP  ; If missing a colon, but no "::", then return "" for invalid address
"RTN","XLFIPV",217,0)
 I XLCNT>0 S XLBLANK="" S IP=$P(IP,"::",1)_$TR($JUSTIFY(XLBLANK,XLCNT+2)," ",":")_$P(IP,"::",2) ; Expand ::
"RTN","XLFIPV",218,0)
 F I=1:1:(ZNUM+1) D  ; Examine field by field
"RTN","XLFIPV",219,0)
 . S XLFIELD=$$UP^XLFSTR($P(IP,":",I))
"RTN","XLFIPV",220,0)
 . S XLFIELD=$TR($JUSTIFY(XLFIELD,4)," ","0") ; Add leading zeros
"RTN","XLFIPV",221,0)
 . S $P(IP,":",I)=XLFIELD
"RTN","XLFIPV",222,0)
 Q IP
"RTN","XLFIPV",223,0)
 ;
"RTN","XLFIPV",224,0)
EXAMINE4(XLFIELD) ; INTRINSIC.
"RTN","XLFIPV",225,0)
 ; Examine a single field of an IPv4 address for a valid format
"RTN","XLFIPV",226,0)
 ; Usage:  S Y=$$EXAMINE4^XLFIPV(XLFIELD)
"RTN","XLFIPV",227,0)
 ; Input:  XLFIELD (string) Field to be examined.
"RTN","XLFIPV",228,0)
 ; Output: returns:
"RTN","XLFIPV",229,0)
 ;           1 - if the field is valid.
"RTN","XLFIPV",230,0)
 ;           0 - if the field is invalid.
"RTN","XLFIPV",231,0)
 ;
"RTN","XLFIPV",232,0)
 I XLFIELD'?1.3N Q 0  ; Test format NNN
"RTN","XLFIPV",233,0)
 I (XLFIELD>255)!(XLFIELD<0) Q 0  ; Test address range
"RTN","XLFIPV",234,0)
 Q 1
"RTN","XLFIPV",235,0)
 ;
"RTN","XLFIPV",236,0)
EXAMINE6(XLFIELD) ; INTRINSIC.
"RTN","XLFIPV",237,0)
 ; Examine a single field of an IPv6 address for a valid format
"RTN","XLFIPV",238,0)
 ; Usage:  S Y=$$EXAMINE6^XLFIPV(XLFIELD)
"RTN","XLFIPV",239,0)
 ; Input:  XLFIELD (string) Field to be examined.
"RTN","XLFIPV",240,0)
 ; Output: returns:
"RTN","XLFIPV",241,0)
 ;           1 - if the field is valid.
"RTN","XLFIPV",242,0)
 ;           0 - if the field is invalid.
"RTN","XLFIPV",243,0)
 ;
"RTN","XLFIPV",244,0)
 N I,X
"RTN","XLFIPV",245,0)
 S XLFIELD=$$UP^XLFSTR(XLFIELD) I XLFIELD'?4E Q 0  ; Test format EEEE
"RTN","XLFIPV",246,0)
 S X=1 F I=1:1:4 D
"RTN","XLFIPV",247,0)
 . I "0123456789ABCDEF"'[$E(XLFIELD,I) S X=0  ; Test address range, contains 0 through F characters only
"RTN","XLFIPV",248,0)
 Q X
"RTN","XLFIPV",249,0)
 ;
"RTN","XLFIPV",250,0)
CNVF(IP) ; INTRINSIC.
"RTN","XLFIPV",251,0)
 ; Expands a decimal IP address "ddd.ddd.ddd.ddd" to hexadecimal fields
"RTN","XLFIPV",252,0)
 ; Usage:  S Y=$$CNVF^XLFIPV(IP)
"RTN","XLFIPV",253,0)
 ; Input:  IP (string) IPv4 address to be reformatted.
"RTN","XLFIPV",254,0)
 ; Output: returns:  The last two bytes of an IPv6 address in the format "hhhh:hhhh".
"RTN","XLFIPV",255,0)
 ;
"RTN","XLFIPV",256,0)
 N I,XLFIELD,XLOUT
"RTN","XLFIPV",257,0)
 S XLOUT=""
"RTN","XLFIPV",258,0)
 F I=1:1:4 D  ; Examine field by field
"RTN","XLFIPV",259,0)
 . S XLFIELD=$$CNV^XLFUTL($P(IP,".",I),16)
"RTN","XLFIPV",260,0)
 . S XLOUT=XLOUT_$TR($JUSTIFY(XLFIELD,2)," ","0") ; Add leading zeros
"RTN","XLFIPV",261,0)
 . I I=2 S XLOUT=XLOUT_":"
"RTN","XLFIPV",262,0)
 Q XLOUT
"RTN","XLFIPV",263,0)
 ;
"VER")
8.0^22.0
"BLD",1456,6)
^500
**END**
**END**
