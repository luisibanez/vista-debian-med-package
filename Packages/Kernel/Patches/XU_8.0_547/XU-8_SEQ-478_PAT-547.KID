Released XU*8*547 SEQ #478
Extracted from mail message
**KIDS**:XU*8.0*547^

**INSTALL NAME**
XU*8.0*547
"BLD",1311,0)
XU*8.0*547^KERNEL^0^3120814^y
"BLD",1311,1,0)
^^2^2^3110223^^^^
"BLD",1311,1,1,0)
Please see the patch description on FORUM, in the National Patch Module.
"BLD",1311,1,2,0)

"BLD",1311,4,0)
^9.64PA^9.6^1
"BLD",1311,4,9.6,0)
9.6
"BLD",1311,4,9.6,2,0)
^9.641^9.6^1
"BLD",1311,4,9.6,2,9.6,0)
BUILD  (File-top level)
"BLD",1311,4,9.6,2,9.6,1,0)
^9.6411^.01^1
"BLD",1311,4,9.6,2,9.6,1,.01,0)
NAME
"BLD",1311,4,9.6,222)
y^n^p^^^^n^^n
"BLD",1311,4,9.6,224)

"BLD",1311,4,"APDD",9.6,9.6)

"BLD",1311,4,"APDD",9.6,9.6,.01)

"BLD",1311,4,"B",9.6,9.6)

"BLD",1311,6.3)
15
"BLD",1311,"KRN",0)
^9.67PA^9002226^21
"BLD",1311,"KRN",.4,0)
.4
"BLD",1311,"KRN",.401,0)
.401
"BLD",1311,"KRN",.402,0)
.402
"BLD",1311,"KRN",.403,0)
.403
"BLD",1311,"KRN",.5,0)
.5
"BLD",1311,"KRN",.84,0)
.84
"BLD",1311,"KRN",3.6,0)
3.6
"BLD",1311,"KRN",3.8,0)
3.8
"BLD",1311,"KRN",9.2,0)
9.2
"BLD",1311,"KRN",9.8,0)
9.8
"BLD",1311,"KRN",9.8,"NM",0)
^9.68A^7^7
"BLD",1311,"KRN",9.8,"NM",1,0)
XPDR^^0^B53135412
"BLD",1311,"KRN",9.8,"NM",2,0)
XPDPROT^^0^B6898020
"BLD",1311,"KRN",9.8,"NM",3,0)
XPDIST^^0^B18641684
"BLD",1311,"KRN",9.8,"NM",4,0)
XPDDCS^^0^B20670591
"BLD",1311,"KRN",9.8,"NM",5,0)
XPDT^^0^B82909490
"BLD",1311,"KRN",9.8,"NM",6,0)
XPDV^^0^B41763157
"BLD",1311,"KRN",9.8,"NM",7,0)
XPDCOM^^0^B18982373
"BLD",1311,"KRN",9.8,"NM","B","XPDCOM",7)

"BLD",1311,"KRN",9.8,"NM","B","XPDDCS",4)

"BLD",1311,"KRN",9.8,"NM","B","XPDIST",3)

"BLD",1311,"KRN",9.8,"NM","B","XPDPROT",2)

"BLD",1311,"KRN",9.8,"NM","B","XPDR",1)

"BLD",1311,"KRN",9.8,"NM","B","XPDT",5)

"BLD",1311,"KRN",9.8,"NM","B","XPDV",6)

"BLD",1311,"KRN",19,0)
19
"BLD",1311,"KRN",19.1,0)
19.1
"BLD",1311,"KRN",101,0)
101
"BLD",1311,"KRN",409.61,0)
409.61
"BLD",1311,"KRN",771,0)
771
"BLD",1311,"KRN",779.2,0)
779.2
"BLD",1311,"KRN",870,0)
870
"BLD",1311,"KRN",8989.51,0)
8989.51
"BLD",1311,"KRN",8989.52,0)
8989.52
"BLD",1311,"KRN",8994,0)
8994
"BLD",1311,"KRN",9002226,0)
9002226
"BLD",1311,"KRN","B",.4,.4)

"BLD",1311,"KRN","B",.401,.401)

"BLD",1311,"KRN","B",.402,.402)

"BLD",1311,"KRN","B",.403,.403)

"BLD",1311,"KRN","B",.5,.5)

"BLD",1311,"KRN","B",.84,.84)

"BLD",1311,"KRN","B",3.6,3.6)

"BLD",1311,"KRN","B",3.8,3.8)

"BLD",1311,"KRN","B",9.2,9.2)

"BLD",1311,"KRN","B",9.8,9.8)

"BLD",1311,"KRN","B",19,19)

"BLD",1311,"KRN","B",19.1,19.1)

"BLD",1311,"KRN","B",101,101)

"BLD",1311,"KRN","B",409.61,409.61)

"BLD",1311,"KRN","B",771,771)

"BLD",1311,"KRN","B",779.2,779.2)

"BLD",1311,"KRN","B",870,870)

"BLD",1311,"KRN","B",8989.51,8989.51)

"BLD",1311,"KRN","B",8989.52,8989.52)

"BLD",1311,"KRN","B",8994,8994)

"BLD",1311,"KRN","B",9002226,9002226)

"BLD",1311,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",1311,"QUES",0)
^9.62^^
"BLD",1311,"REQB",0)
^9.611^2^2
"BLD",1311,"REQB",1,0)
XU*8.0*511^2
"BLD",1311,"REQB",2,0)
XU*8.0*539^2
"BLD",1311,"REQB","B","XU*8.0*511",1)

"BLD",1311,"REQB","B","XU*8.0*539",2)

"FIA",9.6)
BUILD
"FIA",9.6,0)
^XPD(9.6,
"FIA",9.6,0,0)
9.6I
"FIA",9.6,0,1)
y^n^p^^^^n^^n
"FIA",9.6,0,10)

"FIA",9.6,0,11)

"FIA",9.6,0,"RLRO")

"FIA",9.6,0,"VR")
8.0^XU
"FIA",9.6,9.6)
1
"FIA",9.6,9.6,.01)

"MBREQ")
0
"PKG",3,-1)
1^1
"PKG",3,0)
KERNEL^XU^SIGN-ON, SECURITY, MENU DRIVER, DEVICES, TASKMAN^
"PKG",3,20,0)
^9.402P^^0
"PKG",3,22,0)
^9.49I^1^1
"PKG",3,22,1,0)
8.0^3090706^3090706^6
"PKG",3,22,1,"PAH",1,0)
547^3120814
"PKG",3,22,1,"PAH",1,1,0)
^^2^2^3120814
"PKG",3,22,1,"PAH",1,1,1,0)
Please see the patch description on FORUM, in the National Patch Module.
"PKG",3,22,1,"PAH",1,1,2,0)

"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
7
"RTN","XPDCOM")
0^7^B18982373^B18549454
"RTN","XPDCOM",1,0)
XPDCOM ;SFISC/RSD - Compare Transport Global ;08/14/2008
"RTN","XPDCOM",2,0)
 ;;8.0;KERNEL;**21,58,108,124,393,506,539,547**;Jul 10, 1995;Build 15
"RTN","XPDCOM",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XPDCOM",4,0)
EN1 ;compare to current system
"RTN","XPDCOM",5,0)
 N DIC,DIR,DIRUT,DITCPT,DTOUT,DUOUT,POP,XPD,XPDA,XPDC,XPDNM,XPDT,XPDST,XPDUL,Y,Z,%ZIS
"RTN","XPDCOM",6,0)
 S XPDST=$$LOOK^XPDI1("I '$P(^(0),U,9),$D(^XTMP(""XPDI"",Y))",1) Q:XPDST'>0
"RTN","XPDCOM",7,0)
 S DIR(0)="SO^1:Full Comparison;2:Second line of Routines only;3:Routines only;4:Old style Routine compare",DIR("A")="Type of Compare",DIR("?")="Enter the type of comparison." ;rwf
"RTN","XPDCOM",8,0)
 D ^DIR Q:Y=""!$D(DTOUT)!$D(DUOUT)
"RTN","XPDCOM",9,0)
 S XPDC=Y,Y="JOB^XPDCOM",Z="Transport Global Compare",XPD("XPDNM")="",XPD("XPDC")="",XPD("XPDT(")=""
"RTN","XPDCOM",10,0)
 D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDCOM",11,0)
 Q
"RTN","XPDCOM",12,0)
 ;
"RTN","XPDCOM",13,0)
JOB ;Loop thru XPDT
"RTN","XPDCOM",14,0)
 N XPDIT
"RTN","XPDCOM",15,0)
 F XPDIT=0:0 S XPDIT=$O(XPDT(XPDIT)) Q:XPDIT'>0  D COM(+XPDT(XPDIT))
"RTN","XPDCOM",16,0)
 Q
"RTN","XPDCOM",17,0)
 ;
"RTN","XPDCOM",18,0)
COM(XPDA) ;XPDA=ien of package in ^XTMP("XPDI"
"RTN","XPDCOM",19,0)
 Q:'$D(^XTMP("XPDI",$G(XPDA)))
"RTN","XPDCOM",20,0)
 S:$D(XPDT("DA",XPDA)) XPDNM=$P(XPDT(+XPDT("DA",XPDA)),U,2)
"RTN","XPDCOM",21,0)
 D HDR,COMR,EN^XPDCOMG:XPDC=1
"RTN","XPDCOM",22,0)
 W !!
"RTN","XPDCOM",23,0)
 Q
"RTN","XPDCOM",24,0)
 ;
"RTN","XPDCOM",25,0)
COMR ;compare routines
"RTN","XPDCOM",26,0)
 N DL,NAME,RM,XL,XPDI,X,XL,Y,YL,XPDHEAD
"RTN","XPDCOM",27,0)
 S (NAME,XPDI)="",RM=IOM/2-8
"RTN","XPDCOM",28,0)
 F  S XPDI=$O(^XTMP("XPDI",XPDA,"RTN",XPDI)) Q:XPDI=""  S X=+$G(^(XPDI)) D
"RTN","XPDCOM",29,0)
 .S NAME=" Routine: "_XPDI,XPDHEAD=0
"RTN","XPDCOM",30,0)
 .I X W:X=1 !!,"*DELETE*",NAME,! Q
"RTN","XPDCOM",31,0)
 .S X=XPDI X ^%ZOSF("TEST") E  W !!,"*ADD*",NAME,! Q
"RTN","XPDCOM",32,0)
 .;check 2nd line only
"RTN","XPDCOM",33,0)
 .I XPDC=2 D  Q
"RTN","XPDCOM",34,0)
 ..S XL(2)=$G(^XTMP("XPDI",XPDA,"RTN",XPDI,2,0)),YL(2)=$T(+2^@XPDI)
"RTN","XPDCOM",35,0)
 ..D EN^XPDCOML("XL","YL",NAME)
"RTN","XPDCOM",36,0)
 ..W:'XPDHEAD !,?IOM-$L(NAME)\2,NAME
"RTN","XPDCOM",37,0)
 ..W !
"RTN","XPDCOM",38,0)
 ..;lines the same or site routine has no patches
"RTN","XPDCOM",39,0)
 ..I XL(2)=YL(2)!(YL(2)'["**") Q
"RTN","XPDCOM",40,0)
 ..;check patch string
"RTN","XPDCOM",41,0)
 ..S X=$P(XL(2),"**",2),XL=$L(X,","),Y=$P(YL(2),"**",2),YL=$L(Y,",")
"RTN","XPDCOM",42,0)
 ..Q:X=Y
"RTN","XPDCOM",43,0)
 ..;incoming has more patches than system, remove last patch and check if the same
"RTN","XPDCOM",44,0)
 ..I XL>YL W:$P(X,",",1,(XL-1))'=Y "*** WARNING, you are missing one or more Patches ***",! Q
"RTN","XPDCOM",45,0)
 ..;incoming has less patches
"RTN","XPDCOM",46,0)
 ..I YL>XL W "*** WARNING, your routine has more patches than the incoming routine ***",! Q
"RTN","XPDCOM",47,0)
 ..;incoming has same number of patches, check if they are the same
"RTN","XPDCOM",48,0)
 ..I XL=YL,X'=Y W "*** WARNING, your routine has different patches than the incoming routine ***",! Q
"RTN","XPDCOM",49,0)
 ..Q
"RTN","XPDCOM",50,0)
 .;get number of lines in rouitine, XL
"RTN","XPDCOM",51,0)
 .F X=1:1 Q:'$D(^XTMP("XPDI",XPDA,"RTN",XPDI,X))
"RTN","XPDCOM",52,0)
 .S XL=X-1
"RTN","XPDCOM",53,0)
 .K ^TMP($J,XPDI)
"RTN","XPDCOM",54,0)
 .F X=1:1 S Y=$T(+X^@XPDI) Q:Y=""  S ^TMP($J,XPDI,X,0)=Y
"RTN","XPDCOM",55,0)
 .S DL=X-1 ;number of line in routine on disk
"RTN","XPDCOM",56,0)
 .D EN^XPDCOML($NA(^XTMP("XPDI",XPDA,"RTN",XPDI)),$NA(^TMP($J,XPDI)),NAME):XPDC<4,COMP:XPDC=4
"RTN","XPDCOM",57,0)
 .W:'XPDHEAD !,?IOM-$L(NAME)\2,NAME
"RTN","XPDCOM",58,0)
 .W ! K ^TMP($J,XPDI)
"RTN","XPDCOM",59,0)
 .Q
"RTN","XPDCOM",60,0)
 I NAME="" W ?RM,"No Routines"
"RTN","XPDCOM",61,0)
 Q
"RTN","XPDCOM",62,0)
 ;
"RTN","XPDCOM",63,0)
COMP ;taken from XMPC routine
"RTN","XPDCOM",64,0)
 N D1,DI,I,J,K,NL,X1,XI,Y1
"RTN","XPDCOM",65,0)
 S (XI,DI)=0,NL=5,XPDHEAD=1
"RTN","XPDCOM",66,0)
 W !,?IOM-$L(NAME)\2,NAME
"RTN","XPDCOM",67,0)
 ;check each line in the incoming routine,X1, against the routine on disk,D1
"RTN","XPDCOM",68,0)
 F  S XI=XI+1,DI=DI+1 Q:XI>XL!(DI>DL)  D:^XTMP("XPDI",XPDA,"RTN",XPDI,XI,0)'=^TMP($J,XPDI,DI,0)
"RTN","XPDCOM",69,0)
 .S X1=^XTMP("XPDI",XPDA,"RTN",XPDI,XI,0),Y1=0
"RTN","XPDCOM",70,0)
 .;if lines are not the same, look ahead five lines in D1
"RTN","XPDCOM",71,0)
 .F I=DI:1:$S(DI+NL<DL:DI+NL,1:DL) S D1=^TMP($J,XPDI,I,0) D  Q:Y1
"RTN","XPDCOM",72,0)
 ..F K=1:5:26 Q:$L($E(D1,K,K+10))<7  I $F(X1,$E(D1,K,K+10))  D  Q
"RTN","XPDCOM",73,0)
 ...;print the lines upto the line that are the same
"RTN","XPDCOM",74,0)
 ...F J=DI:1:I-1 D WP(^TMP($J,XPDI,J,0),2)
"RTN","XPDCOM",75,0)
 ...;quit if the lines are equal
"RTN","XPDCOM",76,0)
 ...S DI=I,Y1=1 Q:D1=X1
"RTN","XPDCOM",77,0)
 ...;if lines are equal, print old and new
"RTN","XPDCOM",78,0)
 ...D WP(D1,3),WP(X1,4)
"RTN","XPDCOM",79,0)
 .Q:Y1  D WP(X1,1) S DI=DI-1
"RTN","XPDCOM",80,0)
 ;check remaining lines in routines
"RTN","XPDCOM",81,0)
 I XI>XL&(DI<(DL+1)) F I=DI:1:DL D WP(^TMP($J,XPDI,I,0),2)
"RTN","XPDCOM",82,0)
 I DI>DL&(XI<(XL+1)) F I=XI:1:XL D WP(^XTMP("XPDI",XPDA,"RTN",XPDI,I,0),1)
"RTN","XPDCOM",83,0)
 Q
"RTN","XPDCOM",84,0)
WP(X,Y) ;
"RTN","XPDCOM",85,0)
 W !,"* "_$P("ADD^DEL^OLD^NEW",U,Y)_" *  ",X
"RTN","XPDCOM",86,0)
 Q
"RTN","XPDCOM",87,0)
 ;
"RTN","XPDCOM",88,0)
HDR ;
"RTN","XPDCOM",89,0)
 S $P(XPDUL,"-",80)=""
"RTN","XPDCOM",90,0)
 W @IOF,!,"Compare KIDS package ",XPDNM," to current site (Disk)"
"RTN","XPDCOM",91,0)
 W !,"Site: ",$$KSP^XUPARAM("WHERE")
"RTN","XPDCOM",92,0)
 D GETENV^%ZOSV W "  UCI: ",$P(Y,U),",",$P(Y,U,2),"  ",?IOM/2+2,$$FMTE^XLFDT($$NOW^XLFDT()),!
"RTN","XPDCOM",93,0)
 I XPDC>1 W:XPDC=2 "2nd Line of " W "Routines Only",!
"RTN","XPDCOM",94,0)
 W ?3,"KIDS",?IOM\2+3,"Disk",!
"RTN","XPDCOM",95,0)
 W XPDUL,!
"RTN","XPDCOM",96,0)
 Q
"RTN","XPDDCS")
0^4^B20670591^B18646094
"RTN","XPDDCS",1,0)
XPDDCS ;SFISC/RSD - Display Checksum for a package ;05/05/2008
"RTN","XPDDCS",2,0)
 ;;8.0;KERNEL;**2,44,108,202,393,511,547**;Jul 10, 1995;Build 15
"RTN","XPDDCS",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XPDDCS",4,0)
 Q
"RTN","XPDDCS",5,0)
EN1 ;Verify checksums in Transport Global
"RTN","XPDDCS",6,0)
 N D0,DIC,X,XPD,XPDS,XPDSHW,XPDST,XPDT,Y,Z
"RTN","XPDDCS",7,0)
 ;S DIC="^XPD(9.7,",DIC(0)="AEQMZ",DIC("S")="I $D(^XTMP(""XPDI"",Y))"
"RTN","XPDDCS",8,0)
 ;D ^DIC Q:Y<0
"RTN","XPDDCS",9,0)
 S XPDS="I $D(^XTMP(""XPDI"",Y))"
"RTN","XPDDCS",10,0)
 S XPDST=$$LOOK^XPDI1(XPDS) Q:XPDST'>0
"RTN","XPDDCS",11,0)
 S XPDSHW=$$ASK Q:$D(DIRUT)
"RTN","XPDDCS",12,0)
 S XPD("XPDT(")="",XPD("XPDST")="",XPD("XPDSHW")="",X="XUTMDEVQ"
"RTN","XPDDCS",13,0)
 ;during Virgin install, XUTMDEVQ might not exists
"RTN","XPDDCS",14,0)
 X ^%ZOSF("TEST") E  D  Q
"RTN","XPDDCS",15,0)
 .S IOSL=99999,IOM=80,IOF="#",IOST="",$Y=0 D LST1(9.7)
"RTN","XPDDCS",16,0)
 S Y="LST1^XPDDCS(9.7)",Z="Checksum Print"
"RTN","XPDDCS",17,0)
 ;p345-rename AND* to XPD* - Patch was Cancelled keep code for future.
"RTN","XPDDCS",18,0)
 I '$G(XPDAUTO) D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDCS",19,0)
 I $G(XPDAUTO) S IO=XPDDEV U XPDDEV D LST1^XPDDCS(9.7)
"RTN","XPDDCS",20,0)
 Q
"RTN","XPDDCS",21,0)
 ;
"RTN","XPDDCS",22,0)
ASK() ;Ask if want each routine listed
"RTN","XPDDCS",23,0)
 N DIR
"RTN","XPDDCS",24,0)
 I $D(XPDAUTO) Q 1
"RTN","XPDDCS",25,0)
 S DIR(0)="YAO",DIR("A")="Want each Routine Listed with Checksums: ",DIR("A",1)="",DIR("B")="Yes"
"RTN","XPDDCS",26,0)
 D ^DIR
"RTN","XPDDCS",27,0)
 Q Y
"RTN","XPDDCS",28,0)
 ;
"RTN","XPDDCS",29,0)
EN2 ;print from build (system)
"RTN","XPDDCS",30,0)
 N D0,DIC,XPD,XPDT,XPDST,Y,Z
"RTN","XPDDCS",31,0)
 ;S DIC="^XPD(9.6,",DIC(0)="AEQMZ"
"RTN","XPDDCS",32,0)
 ;D ^DIC Q:Y<0
"RTN","XPDDCS",33,0)
 S XPDST=$$LOOK^XPDB1() Q:XPDST'>0
"RTN","XPDDCS",34,0)
 S XPDSHW=$$ASK Q:$D(DIRUT)
"RTN","XPDDCS",35,0)
 S XPD("XPDT(")="",XPD("XPDSHW")="",Y="LST1^XPDDCS(9.6)",Z="Checksum Print"
"RTN","XPDDCS",36,0)
 ;p345-rename AND* to XPD*- Patch was Cancelled keep code for future.
"RTN","XPDDCS",37,0)
 I '$G(XPDAUTO) D EN^XUTMDEVQ(Y,Z,.XPD)
"RTN","XPDDCS",38,0)
 I $G(XPDAUTO) S:'$D(XPDDEV) XPDDEV=0 U XPDDEV D LST1^XPDDCS(9.6)
"RTN","XPDDCS",39,0)
 Q
"RTN","XPDDCS",40,0)
 ;
"RTN","XPDDCS",41,0)
LST1(FILE) ;Print group
"RTN","XPDDCS",42,0)
 N XPDI S XPDI=0
"RTN","XPDDCS",43,0)
 F  S XPDI=$O(XPDT(XPDI)) Q:XPDI'>0  S D0=+XPDT(XPDI) D PNT(FILE)
"RTN","XPDDCS",44,0)
 Q
"RTN","XPDDCS",45,0)
 ;
"RTN","XPDDCS",46,0)
PNT(XPDFIL) ;print
"RTN","XPDDCS",47,0)
 N XPD0,XPDC,XPDDT,XPDE,XPDI,XPDJ,XPDPG,XPDQ,XPDUL,XPDBCS,X
"RTN","XPDDCS",48,0)
 Q:'$D(^XPD(XPDFIL,D0,0))  S XPD0=^(0),XPDPG=1,$P(XPDUL,"-",IOM)="",XPDDT=$$HTE^XLFDT($H,"1PM")
"RTN","XPDDCS",49,0)
 W:$E(IOST,1,2)="C-" @IOF D HDR
"RTN","XPDDCS",50,0)
 W !
"RTN","XPDDCS",51,0)
 S XPDI="",(XPDQ,XPDE)=0
"RTN","XPDDCS",52,0)
 ;XPDFIL=9.7  use transport global exists
"RTN","XPDDCS",53,0)
 I XPDFIL=9.7 D
"RTN","XPDDCS",54,0)
 .I '$D(^XTMP("XPDI",D0)) W !!," ** Transport Global doesn't exist **" S XPDQ=1 Q
"RTN","XPDDCS",55,0)
 .;check for missing nodes in transport global
"RTN","XPDDCS",56,0)
 .I '$D(^XTMP("XPDI",D0,"BLD"))="" W !!," **Transport Global corrupted, please reload **" S XPDQ=1 Q
"RTN","XPDDCS",57,0)
 .F XPDC=0:1 S XPDI=$O(^XTMP("XPDI",D0,"RTN",XPDI)) Q:XPDI=""  S XPDJ=$G(^(XPDI)) D  Q:XPDQ
"RTN","XPDDCS",58,0)
 ..I XPDJ="" W !," **Transport Global corrupted, please reload **" S XPDQ=1 Q
"RTN","XPDDCS",59,0)
 ..;if deleting at site, there is no checksum
"RTN","XPDDCS",60,0)
 ..I +XPDJ=1 S XPDC=XPDC-1 Q
"RTN","XPDDCS",61,0)
 ..;if no before checksum, get from FORUM, XPDBCS(routine)=checksum, doesn't work no web service on Forum
"RTN","XPDDCS",62,0)
 ..;I $P(XPDJ,U,4)="" D:'$D(XPDBCS) CHKS^XPDIST($P(XPD0,U),.XPDBCS) S $P(XPDJ,U,4)=$G(XPDBCS(XPDI))
"RTN","XPDDCS",63,0)
 ..D SUM(XPDI,$NA(^XTMP("XPDI",D0,"RTN",XPDI)),$P(XPDJ,U,3),$P(XPDJ,U,4))
"RTN","XPDDCS",64,0)
 ..S XPDQ=$$CHK(4)
"RTN","XPDDCS",65,0)
 ;check build file
"RTN","XPDDCS",66,0)
 E  D
"RTN","XPDDCS",67,0)
 .F XPDC=0:1 S XPDI=$O(^XPD(9.6,D0,"KRN",9.8,"NM","B",XPDI)) Q:XPDI=""  S XPDJ=$O(^(XPDI,0)) D  Q:XPDQ
"RTN","XPDDCS",68,0)
 ..Q:'$D(^XPD(9.6,D0,"KRN",9.8,"NM",+XPDJ,0))  S XPDJ=$P(^(0),U,4)
"RTN","XPDDCS",69,0)
 ..;quit if no checksum, routine wasn't loaded
"RTN","XPDDCS",70,0)
 ..I XPDJ="" S XPDC=XPDC-1 Q
"RTN","XPDDCS",71,0)
 ..N DIF,XCNP,%N
"RTN","XPDDCS",72,0)
 ..S X=XPDI,DIF="^TMP($J,""RTN"",XPDI,",XCNP=0
"RTN","XPDDCS",73,0)
 ..X ^%ZOSF("TEST") E  W !,XPDI,?10,"Doesn't Exist" Q
"RTN","XPDDCS",74,0)
 ..X ^%ZOSF("LOAD")
"RTN","XPDDCS",75,0)
 ..D SUM(XPDI,$NA(^TMP($J,"RTN",XPDI)),XPDJ,"")
"RTN","XPDDCS",76,0)
 ..S XPDQ=$$CHK(4)
"RTN","XPDDCS",77,0)
 Q:XPDQ
"RTN","XPDDCS",78,0)
 W !!?3,XPDC," Routine"_$S(XPDC>1:"s",1:"")_" checked, ",XPDE," failed.",!
"RTN","XPDDCS",79,0)
 ;p345-rename AND* to XPD*-Patch was Cancelled keep code for future.
"RTN","XPDDCS",80,0)
 I $G(XPDAUTO) S XPDCHKSM=XPDE
"RTN","XPDDCS",81,0)
 Q
"RTN","XPDDCS",82,0)
 ;
"RTN","XPDDCS",83,0)
 ;XPDR=routine name, Z=global root, XPD=check sum, XPDBS=before Checksum from FORUM
"RTN","XPDDCS",84,0)
SUM(XPDR,Z,XPD,XPDBS) ;check checksum
"RTN","XPDDCS",85,0)
 N Y
"RTN","XPDDCS",86,0)
 ;See if we have a before checksum and compare.
"RTN","XPDDCS",87,0)
 I $L(XPDBS) D BEFORE(XPDR,XPDBS)
"RTN","XPDDCS",88,0)
 ;first char. is the sum tag used in XPDRSUM
"RTN","XPDDCS",89,0)
 I XPD'?1U1.N W !,XPDR,?10,"ERROR in Checksum" S XPDE=XPDE+1 Q
"RTN","XPDDCS",90,0)
 S @("Y=$$SUM"_$E(XPD)_"^XPDRSUM(Z)"),XPD=$E(XPD,2,255)
"RTN","XPDDCS",91,0)
 I Y=XPD,XPDSHW W !,XPDR,?10,"Calculated "_$J(XPD,10)
"RTN","XPDDCS",92,0)
 I Y'=XPD W !,XPDR,?10,"Calculated "_$C(7)_$J(Y,10)_", expected value "_XPD S XPDE=XPDE+1
"RTN","XPDDCS",93,0)
 Q
"RTN","XPDDCS",94,0)
 ;
"RTN","XPDDCS",95,0)
BEFORE(RN,SUM) ;Check a before Checksum
"RTN","XPDDCS",96,0)
 N DIF,XCNP,%N,X
"RTN","XPDDCS",97,0)
 I SUM'?1U1.N Q
"RTN","XPDDCS",98,0)
 K ^TMP($J,"XPDDCS",RN) ;patch 511
"RTN","XPDDCS",99,0)
 S X=RN,DIF="^TMP($J,""XPDDCS"",RN,",XCNP=0
"RTN","XPDDCS",100,0)
 X ^%ZOSF("TEST") E  W !,RN,?10,"Not on current system." Q
"RTN","XPDDCS",101,0)
 X ^%ZOSF("LOAD")
"RTN","XPDDCS",102,0)
 S DIF=$NA(^TMP($J,"XPDDCS",RN))
"RTN","XPDDCS",103,0)
 S @("Y=$$SUM"_$E(SUM)_"^XPDRSUM(DIF)"),SUM=$E(SUM,2,255)
"RTN","XPDDCS",104,0)
 I Y'=SUM W !,RN,?10,"Before Checksum Calculated "_Y_" expected value "_SUM
"RTN","XPDDCS",105,0)
 Q
"RTN","XPDDCS",106,0)
 ;
"RTN","XPDDCS",107,0)
CHK(Y) ;Y=excess lines, return 1 to exit
"RTN","XPDDCS",108,0)
 Q:$Y<(IOSL-Y) 0
"RTN","XPDDCS",109,0)
 I $E(IOST,1,2)="C-" D  Q:'Y 1
"RTN","XPDDCS",110,0)
 .N DIR,I,J,K,X
"RTN","XPDDCS",111,0)
 .S DIR(0)="E" D ^DIR
"RTN","XPDDCS",112,0)
 S XPDPG=XPDPG+1
"RTN","XPDDCS",113,0)
 W @IOF D HDR
"RTN","XPDDCS",114,0)
 Q 0
"RTN","XPDDCS",115,0)
 ;
"RTN","XPDDCS",116,0)
HDR W !,"PACKAGE: ",$P(XPD0,U),"     ",XPDDT,?70,"PAGE ",XPDPG,!,XPDUL,!
"RTN","XPDDCS",117,0)
 Q
"RTN","XPDIST")
0^3^B18641684^B15156441
"RTN","XPDIST",1,0)
XPDIST ;SFISC/RSD - site tracking ;03/05/2008
"RTN","XPDIST",2,0)
 ;;8.0;KERNEL;**66,108,185,233,350,393,486,539,547**;Jul 10, 1995;Build 15
"RTN","XPDIST",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XPDIST",4,0)
 ;Returns ""=failed, XMZ=sent
"RTN","XPDIST",5,0)
 ;D0=ien in file 9.7, XPY=national site tracking^address(optional)
"RTN","XPDIST",6,0)
EN(D0,XPY) ;EF. send message
"RTN","XPDIST",7,0)
 N %,DIFROM,XPD,XPD0,XPD1,XPD2,XPDV,XPZ,X,X1,Z,Y,XPD6,XPDTRACK
"RTN","XPDIST",8,0)
 ;Get data needed
"RTN","XPDIST",9,0)
 I '$D(^XPD(9.7,$G(D0),0)) D BMES^XPDUTL(" INSTALL file entry missing") Q ""
"RTN","XPDIST",10,0)
 ;p350 -add node 6 for the Test# and Seq#. -REM
"RTN","XPDIST",11,0)
 S XPD0=^XPD(9.7,D0,0),XPD1=$G(^(1)),XPD2=$G(^(2)),XPD6=$G(^(6))
"RTN","XPDIST",12,0)
 I '$P(XPD0,U,2) D BMES^XPDUTL(" No link to PACKAGE file") Q ""
"RTN","XPDIST",13,0)
 S XPD=$P($G(^DIC(9.4,+$P(XPD0,U,2),0)),U),XPDV=$$VER^XPDUTL($P(XPD0,U))
"RTN","XPDIST",14,0)
 I XPD="" D BMES^XPDUTL(" PACKAGE file entry missing") Q ""
"RTN","XPDIST",15,0)
 ;XPZ(1)=start, XPZ(2)=completion date/time, XPZ(3)=run time
"RTN","XPDIST",16,0)
 S XPZ(1)=$P(XPD1,U),XPZ(2)=$P(XPD1,U,3),XPZ(3)=$$FMDIFF^XLFDT(XPZ(2),XPZ(1),3),XPZ(1)=$$FMTE^XLFDT(XPZ(1)),XPZ(2)=$$FMTE^XLFDT(XPZ(2))
"RTN","XPDIST",17,0)
 D LOCAL
"RTN","XPDIST",18,0)
 S XPDTRACK=$$TRACK
"RTN","XPDIST",19,0)
 D REMEDY ;p350 -REM
"RTN","XPDIST",20,0)
 Q $$FORUM()
"RTN","XPDIST",21,0)
LOCAL ;Send a message to local mail group
"RTN","XPDIST",22,0)
 N XMY,XPDTEXT,XMTEXT,XMDUZ,XMSUB,XMZ
"RTN","XPDIST",23,0)
 K ^TMP($J)
"RTN","XPDIST",24,0)
 S X=$$MAILGRP^XPDUTL(XPD) Q:X=""
"RTN","XPDIST",25,0)
 S XMY(X)="" D GETENV^%ZOSV
"RTN","XPDIST",26,0)
 ;Message for users
"RTN","XPDIST",27,0)
 S XPDTEXT(1,0)="PACKAGE INSTALL"
"RTN","XPDIST",28,0)
 S XPDTEXT(2,0)="SITE: "_$G(^XMB("NETNAME"))
"RTN","XPDIST",29,0)
 S XPDTEXT(3,0)="PACKAGE: "_XPD
"RTN","XPDIST",30,0)
 S XPDTEXT(4,0)="VERSION: "_XPDV
"RTN","XPDIST",31,0)
 S XPDTEXT(5,0)="Start time: "_XPZ(1)
"RTN","XPDIST",32,0)
 S XPDTEXT(6,0)="Completion time: "_XPZ(2)
"RTN","XPDIST",33,0)
 S XPDTEXT(7,0)="Environment: "_Y
"RTN","XPDIST",34,0)
 S XPDTEXT(8,0)="Installed by: "_$P($G(^VA(200,+$P(XPD0,U,11),0)),U)
"RTN","XPDIST",35,0)
 S XPDTEXT(9,0)="Install Name: "_$P(XPD0,U)
"RTN","XPDIST",36,0)
 S XPDTEXT(10,0)="Distribution Date: "_$$FMTE^XLFDT($P(XPD1,U,4))
"RTN","XPDIST",37,0)
 S XMDUZ=$S($P(XPD0,U,11):+$P(XPD0,U,11),1:.5),XMTEXT="XPDTEXT(",XMSUB=$P(XPD0,U)_" INSTALLATION"
"RTN","XPDIST",38,0)
 D ^XMD
"RTN","XPDIST",39,0)
 Q
"RTN","XPDIST",40,0)
TRACK() ;EF. Should VA track the installation of this patch at a national level?
"RTN","XPDIST",41,0)
 Q:$G(XPY)="" 0  ; No - National site tracking was not requested
"RTN","XPDIST",42,0)
 ;Quit if not VA production primary domain
"RTN","XPDIST",43,0)
 I $G(^XMB("NETNAME"))'[".VA.GOV" D BMES^XPDUTL(" Not a VA primary domain") Q 0
"RTN","XPDIST",44,0)
 ;X ^%ZOSF("UCI") S %=^%ZOSF("PROD")
"RTN","XPDIST",45,0)
 ;S:%'["," Y=$P(Y,",")
"RTN","XPDIST",46,0)
 ;I Y'=% D BMES^XPDUTL(" Not a production UCI") Q ""
"RTN","XPDIST",47,0)
 ; 486/GMB Replaced the above 3 lines with the following line:
"RTN","XPDIST",48,0)
 I '$$PROD^XUPROD D BMES^XPDUTL(" Not a production UCI") Q 0
"RTN","XPDIST",49,0)
 Q 1
"RTN","XPDIST",50,0)
REMEDY ;Send to Remedy Server - ESSRESOURCE@MED.VA.GOV *p350 -REM
"RTN","XPDIST",51,0)
 Q:'XPDTRACK
"RTN","XPDIST",52,0)
 N XMY,XPDTEXT,XMTEXT,XMDUZ,XMSUB,XMZ
"RTN","XPDIST",53,0)
 K ^TMP($J)
"RTN","XPDIST",54,0)
 S:XPY XMY("ESSRESOURCE@MED.VA.GOV")=""
"RTN","XPDIST",55,0)
 S:$L($P(XPY,U,2)) XMY($P(XPY,U,2))=""
"RTN","XPDIST",56,0)
 ;Message for server (all in one string)
"RTN","XPDIST",57,0)
 ;XMTEXT=Type(1),Domain(2-65),Pkg(66-95),Version(96-125),
"RTN","XPDIST",58,0)
 ;       StartTime(126-147),CompleteTime(148-169),RunTime(170-177),
"RTN","XPDIST",59,0)
 ;       Date(178-199),InstalledBy(200-229),InstallName(230-259),
"RTN","XPDIST",60,0)
 ;       DistributionDate(260-281),Seq#(282-286),
"RTN","XPDIST",61,0)
 ;       PatchTestVersion(287-317)
"RTN","XPDIST",62,0)
 ;
"RTN","XPDIST",63,0)
 S X1=1_$G(^XMB("NETNAME")) ;Type is always "1"(1=patch,0=pkg).
"RTN","XPDIST",64,0)
 S $E(X1,66,95)=XPD,$E(X1,96,125)=XPDV,$E(X1,126,147)=XPZ(1),$E(X1,148,169)=XPZ(2),$E(X1,170,177)=XPZ(3),$E(X1,178,199)=DT
"RTN","XPDIST",65,0)
 S $E(X1,200,229)=$P($G(^VA(200,+$P(XPD0,U,11),0)),U),$E(X1,230,259)=$P(XPD0,U),$E(X1,260,281)=$P(XPD1,U,4),$E(X1,282,286)=$P(XPD6,U,2),$E(X1,287,317)=$P(XPD6,U)
"RTN","XPDIST",66,0)
 S XPDTEXT(1,0)=X1
"RTN","XPDIST",67,0)
 S XMDUZ=$S($P(XPD0,U,11):+$P(XPD0,U,11),1:.5),XMTEXT="XPDTEXT(",XMSUB="KIDS-"_$P(XPD0,U)_" INSTALLATION"
"RTN","XPDIST",68,0)
 D ^XMD
"RTN","XPDIST",69,0)
 Q
"RTN","XPDIST",70,0)
FORUM() ;EF. send to Server on FORUM
"RTN","XPDIST",71,0)
 Q:'XPDTRACK ""
"RTN","XPDIST",72,0)
 N XMY,XPDTEXT,XMTEXT,XMDUZ,XMSUB,XMZ
"RTN","XPDIST",73,0)
 K ^TMP($J)
"RTN","XPDIST",74,0)
 S:XPY XMY("S.A5CSTS@FORUM.VA.GOV")=""
"RTN","XPDIST",75,0)
 S:$L($P(XPY,U,2)) XMY($P(XPY,U,2))=""
"RTN","XPDIST",76,0)
 ;Message for server
"RTN","XPDIST",77,0)
 S XPDTEXT(1,0)="PACKAGE INSTALL"
"RTN","XPDIST",78,0)
 S XPDTEXT(2,0)="SITE: "_$G(^XMB("NETNAME"))
"RTN","XPDIST",79,0)
 S XPDTEXT(3,0)="PACKAGE: "_XPD
"RTN","XPDIST",80,0)
 S XPDTEXT(4,0)="VERSION: "_XPDV
"RTN","XPDIST",81,0)
 S XPDTEXT(5,0)="Start time: "_XPZ(1)
"RTN","XPDIST",82,0)
 S XPDTEXT(6,0)="Completion time: "_XPZ(2)
"RTN","XPDIST",83,0)
 S XPDTEXT(7,0)="Run time: "_XPZ(3)
"RTN","XPDIST",84,0)
 S XPDTEXT(8,0)="DATE: "_DT
"RTN","XPDIST",85,0)
 S XPDTEXT(9,0)="Installed by: "_$P($G(^VA(200,+$P(XPD0,U,11),0)),U)
"RTN","XPDIST",86,0)
 S XPDTEXT(10,0)="Install Name: "_$P(XPD0,U)
"RTN","XPDIST",87,0)
 S XPDTEXT(11,0)="Distribution Date: "_$P(XPD1,U,4)
"RTN","XPDIST",88,0)
 S XPDTEXT(12,0)=XPD2
"RTN","XPDIST",89,0)
 S XPDTEXT(13,0)=+XPD6
"RTN","XPDIST",90,0)
 S XMDUZ=$S($P(XPD0,U,11):+$P(XPD0,U,11),1:.5),XMTEXT="XPDTEXT(",XMSUB=$P(XPD0,U)_" INSTALLATION"
"RTN","XPDIST",91,0)
 D ^XMD
"RTN","XPDIST",92,0)
 Q "#"_$G(XMZ)
"RTN","XPDIST",93,0)
 ;
"RTN","XPDIST",94,0)
CHKS(XPDPH,XPDTEXT) ;Get Checksum from Forum for patch XPDPH, XPDTEXT is passed by reference
"RTN","XPDIST",95,0)
 ;returns XPDTEXT(routine name)= before checksum
"RTN","XPDIST",96,0)
 ;need to create parameter to store url - future
"RTN","XPDIST",97,0)
 Q
"RTN","XPDIST",98,0)
 K ^TMP($J,"XPDTHC")
"RTN","XPDIST",99,0)
 Q:$G(XPDPH)=""
"RTN","XPDIST",100,0)
 N XPDCHK,XPDHDR,XPDURL,I,X,Y
"RTN","XPDIST",101,0)
 S XPDURL="http://10.2.29.154:6100/cgi/PCHCSUM?PCH="_XPDPH,XPDCHK=0
"RTN","XPDIST",102,0)
 S X=$$GETURL^XTHC10(XPDURL,,$NA(^TMP($J,"XPDTHC")),.XPDHDR)
"RTN","XPDIST",103,0)
 I X>0 D
"RTN","XPDIST",104,0)
 . S I=""
"RTN","XPDIST",105,0)
 . F  S I=$O(^TMP($J,"XPDTHC",I)) Q:I=""  S X=$G(^(I)) D:$E(X,1,4)="<li>"
"RTN","XPDIST",106,0)
 .. S Y=$P($P(X,"</li>"),U,4),X=$P($P(X,"<li>",2),U),XPDTEXT(X)=Y,XPDCHK=XPDCHK+1
"RTN","XPDIST",107,0)
 . Q
"RTN","XPDIST",108,0)
 S XPDTEXT=XPDCHK
"RTN","XPDIST",109,0)
 K ^TMP($J,"XPDTHC")
"RTN","XPDIST",110,0)
 Q
"RTN","XPDPROT")
0^2^B6898020^n/a
"RTN","XPDPROT",1,0)
XPDPROT ;SFISC/RWF,RSD - Manage Protocol Items ;05/24/2010
"RTN","XPDPROT",2,0)
 ;;8.0;KERNEL;**547**;Jul 10, 1995;Build 15
"RTN","XPDPROT",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XPDPROT",4,0)
 Q
"RTN","XPDPROT",5,0)
 ;
"RTN","XPDPROT",6,0)
 ;PARENT=Protocol to add to,  CHILD=Protocol to add to PARENT, MNE=Mnemonic (1-4 characters)
"RTN","XPDPROT",7,0)
 ;SEQ=Sequence (number from 1 - 999)
"RTN","XPDPROT",8,0)
ADD(PARENT,CHILD,MNE,SEQ) ;EF. Add Child to Item multiple of Parent
"RTN","XPDPROT",9,0)
 Q:$G(PARENT)']"" 0 Q:$G(CHILD)']"" 0
"RTN","XPDPROT",10,0)
 N X,XPD1,XPD2,XPD3,DIC,DIE,DA,D0,DR,DLAYGO
"RTN","XPDPROT",11,0)
 S XPD1=$$LKPROT(PARENT) Q:XPD1'>0 "0^parent protocol not found"
"RTN","XPDPROT",12,0)
 ;quit if type is not menu,protocol,protocol menu, limited protocol, or extended action
"RTN","XPDPROT",13,0)
 I "MOQLX"'[$E($$TYPE(XPD1)_"^",1) Q "0^wrong type"
"RTN","XPDPROT",14,0)
 S XPD2=$$LKPROT(CHILD) Q:XPD2'>0 "0^child protocol not found"
"RTN","XPDPROT",15,0)
 ;if protocol is not in ITEM, add it
"RTN","XPDPROT",16,0)
 I '$D(^ORD(101,XPD1,10,"B",XPD2)) D
"RTN","XPDPROT",17,0)
 .S X=XPD2,(D0,DA(1))=XPD1,DIC(0)="MLF",DIC("P")=$P(^DD(101,10,0),"^",2),DLAYGO=101,DIC="^ORD(101,"_XPD1_",10,"
"RTN","XPDPROT",18,0)
 .D FILE^DICN
"RTN","XPDPROT",19,0)
 S XPD3=$O(^ORD(101,XPD1,10,"B",XPD2,0))
"RTN","XPDPROT",20,0)
 I XPD3>0 S DR="" S:$G(MNE)]"" DR="2///"_$G(MNE)_";" S:+$G(SEQ)>0 DR=DR_"3///"_+$G(SEQ) I DR]"" S DIE="^ORD(101,"_XPD1_",10,",DA=XPD3,DA(1)=XPD1 D ^DIE
"RTN","XPDPROT",21,0)
 Q XPD3>0
"RTN","XPDPROT",22,0)
 ;
"RTN","XPDPROT",23,0)
LKPROT(X) ;EF.  To lookup on "B"
"RTN","XPDPROT",24,0)
 Q $O(^ORD(101,"B",X,0))
"RTN","XPDPROT",25,0)
 ;
"RTN","XPDPROT",26,0)
TYPE(X) ;EF. Return protocol type, Pass IFN.
"RTN","XPDPROT",27,0)
 Q:X'>0 "" Q $P($G(^ORD(101,X,0)),"^",4)
"RTN","XPDPROT",28,0)
 ;
"RTN","XPDPROT",29,0)
 ;PARENT=Protocol to delete from,  CHILD=protocol to delete from PARENT
"RTN","XPDPROT",30,0)
DELETE(PARENT,CHILD) ;EF. Delete entry from ITEM multiple
"RTN","XPDPROT",31,0)
 Q:$G(PARENT)']"" 0 Q:$G(CHILD)']"" 0
"RTN","XPDPROT",32,0)
 N XPD1,XPD2,DIK,DA,X
"RTN","XPDPROT",33,0)
 S XPD1=$$LKPROT(PARENT) Q:XPD1'>0 "0^parent protocol not found"
"RTN","XPDPROT",34,0)
 I "MOQLX"'[$E($$TYPE(XPD1)_"^",1) Q "0^wrong type"
"RTN","XPDPROT",35,0)
 S XPD2=$$LKPROT(CHILD) Q:XPD2'>0 "0^child protocol not found"
"RTN","XPDPROT",36,0)
 S DA=$O(^ORD(101,XPD1,10,"B",XPD2,0)) Q:DA'>0 0
"RTN","XPDPROT",37,0)
 S DA(1)=XPD1,DIK="^ORD(101,XPD1,10," D ^DIK
"RTN","XPDPROT",38,0)
 Q 1
"RTN","XPDPROT",39,0)
 ;
"RTN","XPDPROT",40,0)
 ;PROT=protocol to disable,  TXT=message or @ to delete existing value
"RTN","XPDPROT",41,0)
OUT(PROT,TXT) ;Disable protocol
"RTN","XPDPROT",42,0)
 Q:$G(PROT)']""
"RTN","XPDPROT",43,0)
 N XPD,XPD1
"RTN","XPDPROT",44,0)
 S XPD1=$$LKPROT(PROT) Q:XPD1'>0
"RTN","XPDPROT",45,0)
 S XPD(101,XPD1_",",2)=$G(TXT) D FILE^DIE("","XPD")
"RTN","XPDPROT",46,0)
 Q
"RTN","XPDPROT",47,0)
 ;
"RTN","XPDPROT",48,0)
 ;OLD=old name, NEW=new name
"RTN","XPDPROT",49,0)
RENAME(OLD,NEW) ;Rename protocol
"RTN","XPDPROT",50,0)
 Q:$G(OLD)']""  Q:$G(NEW)']""
"RTN","XPDPROT",51,0)
 N XPD,XPD1
"RTN","XPDPROT",52,0)
 S XPD1=$$LKPROT(OLD) Q:XPD1'>0
"RTN","XPDPROT",53,0)
 S XPD(101,XPD1_",",.01)=NEW D FILE^DIE("","XPD")
"RTN","XPDPROT",54,0)
 Q
"RTN","XPDPROT",55,0)
FIND(RESULT,PROT) ;Find all parents for PROT
"RTN","XPDPROT",56,0)
 ;  Input: RESULT - Results array name, passed by reference (req)
"RTN","XPDPROT",57,0)
 ;           PROT - name of protocol (req)
"RTN","XPDPROT",58,0)
 ;   Output: RESULT(0)= number of parents found
"RTN","XPDPROT",59,0)
 ;                      OR
"RTN","XPDPROT",60,0)
 ;                      -1 ^ error message
"RTN","XPDPROT",61,0)
 ;RESULT(FILE 101 ien)= parent protocol name (FILE 101, Field .01)
"RTN","XPDPROT",62,0)
 ;
"RTN","XPDPROT",63,0)
 I $G(PROT)']"" S RESULT(0)="-1^protocol not defined" Q
"RTN","XPDPROT",64,0)
 N XPD1,XPDCNT,XPDIEN
"RTN","XPDPROT",65,0)
 S XPD1=$$LKPROT(PROT)
"RTN","XPDPROT",66,0)
 I XPD1'>0 S RESULT(0)="-1^protocol not found" Q
"RTN","XPDPROT",67,0)
 S (XPDCNT,XPDIEN)=0
"RTN","XPDPROT",68,0)
 F  S XPDIEN=$O(^ORD(101,"AD",XPD1,XPDIEN)) Q:'XPDIEN  D
"RTN","XPDPROT",69,0)
 .S RESULT(XPDIEN)=$P($G(^ORD(101,XPDIEN,0)),U,1),XPDCNT=XPDCNT+1
"RTN","XPDPROT",70,0)
 S RESULT(0)=XPDCNT
"RTN","XPDPROT",71,0)
 Q
"RTN","XPDR")
0^1^B53135412^B50211509
"RTN","XPDR",1,0)
XPDR ;SFISC/RSD - Routine File Edit ;09/17/96  10:05
"RTN","XPDR",2,0)
 ;;8.0;KERNEL;**1,2,44,393,547**;Jul 10, 1995;Build 15
"RTN","XPDR",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XPDR",4,0)
 Q
"RTN","XPDR",5,0)
UPDT ;update routine file
"RTN","XPDR",6,0)
 N DIR,DIRUT,XPD,XPDI,XPDJ,XPDN,XPDGTM,X,X1,Y,Y1,% W !
"RTN","XPDR",7,0)
 W ! S DIR(0)="FO^1:9^K:X'?.1""-""1U.7UNP X",DIR("A")="Routine Namespace",DIR("?")="Enter 1 to 8 characters, preceed with ""-"" to exclude namespace"
"RTN","XPDR",8,0)
 ;XPDN(0=excluded names or 1=include names, namespace)=""
"RTN","XPDR",9,0)
 F  D ^DIR Q:$D(DIRUT)  S X=$E(Y,$L(Y))="*",%=$E(Y)="-",XPDN('%,$E(Y,%+1,$L(Y)-X))=""
"RTN","XPDR",10,0)
 Q:'$D(XPDN)!$D(DTOUT)!$D(DUOUT)
"RTN","XPDR",11,0)
 W !!,"NAMESPACE  INCLUDE",?35,"EXCLUDE",!,?11,"-------",?35,"-------"
"RTN","XPDR",12,0)
 S (X,Y)="",(X1,Y1)=1
"RTN","XPDR",13,0)
 F  D  W !?11,X,?35,Y Q:'X1&'Y1
"RTN","XPDR",14,0)
 .S:X1 X=$O(XPDN(1,X)),X1=X]"" S:Y1 Y=$O(XPDN(0,Y)),Y1=Y]""
"RTN","XPDR",15,0)
 K DIR S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES" D ^DIR
"RTN","XPDR",16,0)
 Q:'Y!$D(DIRUT)  W !
"RTN","XPDR",17,0)
 S DIR(0)="Y",DIR("A")="Want me to clean up the Routine File before updating",DIR("?")="YES means you want to go throught the Routine file and delete any routine name that no longer exists on the system."
"RTN","XPDR",18,0)
 D ^DIR Q:$D(DIRUT)
"RTN","XPDR",19,0)
 D WAIT^DICD,DELRTN:Y
"RTN","XPDR",20,0)
 ;if GTM, create temporary list in %ZR
"RTN","XPDR",21,0)
 S XPDGTM=$G(^%ZOSF("OS"))["GT.M" I XPDGTM D SILENT^%RSEL("*")
"RTN","XPDR",22,0)
 ;loop thru include list XPDN(1,XPDI)
"RTN","XPDR",23,0)
 S XPDI="" F  S XPDI=$O(XPDN(1,XPDI)) Q:XPDI=""  S XPDJ=XPDI D
"RTN","XPDR",24,0)
 . I 'XPDGTM D:$D(^$R(XPDJ)) UPDT1(XPDJ) F  S XPDJ=$O(^$R(XPDJ)) Q:XPDJ=""!($P(XPDJ,XPDI)]"")  D UPDT1(XPDJ)
"RTN","XPDR",25,0)
 . I XPDGTM D:$D(%ZR(XPDJ)) UPDT1(XPDJ) F  S XPDJ=$O(%ZR(XPDJ)) Q:XPDJ=""!($P(XPDJ,XPDI)]"")  D UPDT1(XPDJ)
"RTN","XPDR",26,0)
 . Q
"RTN","XPDR",27,0)
 W "    ...Done.",!
"RTN","XPDR",28,0)
 Q
"RTN","XPDR",29,0)
 ;
"RTN","XPDR",30,0)
UPDT1(XPDRT) ;check routine XPDRT
"RTN","XPDR",31,0)
 ;if name XPDRT is in the exclude list, XPDN(0,XPDRT) or in Routine file, quit
"RTN","XPDR",32,0)
 Q:$D(XPDN(0,XPDRT))!$O(^DIC(9.8,"B",XPDRT,0))
"RTN","XPDR",33,0)
 ;check if XPDRT is refered in the namespace by checking the subscript
"RTN","XPDR",34,0)
 ;before XPDRT, if sub exist and $P(XPDRT,sub)="" then it is part of the
"RTN","XPDR",35,0)
 ;namespace, quit
"RTN","XPDR",36,0)
 S %=$O(XPDN(0,XPDRT),-1) I $L(%),$P(XPDRT,%)="" Q
"RTN","XPDR",37,0)
 N XPD S XPD(9.8,"+1,",.01)=XPDRT,XPD(9.8,"+1,",1)="R"
"RTN","XPDR",38,0)
 D ADD^DICA("","XPD")
"RTN","XPDR",39,0)
 Q
"RTN","XPDR",40,0)
 ;
"RTN","XPDR",41,0)
VER ;verify Routine file
"RTN","XPDR",42,0)
 N DIR,DIRUT,X,Y
"RTN","XPDR",43,0)
 W !,"I will delete all local entries in the Routine File in which",!,"the Routine no longer exist on this system!",!
"RTN","XPDR",44,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES" D ^DIR
"RTN","XPDR",45,0)
 Q:'Y!$D(DIRUT)  D DELRTN
"RTN","XPDR",46,0)
 W "    ...Done.",!
"RTN","XPDR",47,0)
 Q
"RTN","XPDR",48,0)
DELRTN ;delete routine file entries
"RTN","XPDR",49,0)
 N DA,DIK,Y
"RTN","XPDR",50,0)
 W !,"Routines listed as National will not be deleted!"
"RTN","XPDR",51,0)
 S DIK="^DIC(9.8,",DA=0
"RTN","XPDR",52,0)
 F  S DA=$O(^DIC(9.8,DA)) Q:'DA  S Y=$G(^(DA,0)) I "R"=$P(Y,U,2),$G(^DIC(9.8,DA,6))<2,$T(^@$P(Y,U))="" D ^DIK
"RTN","XPDR",53,0)
 Q
"RTN","XPDR",54,0)
PURGE ;purge file
"RTN","XPDR",55,0)
 N DA,DIK,DIR,DIRUT,X,XPD,XPDF,XPDI,XPDJ,XPDL,XPDN,XPDPG,XPDS,XPDUL,Y,Z
"RTN","XPDR",56,0)
 S DIR("?")="Enter the file you want to purge the data from.",DIR(0)="SM^B:Build;I:Install;ALL:Build & Install",DIR("A")="Purge from what file(s)"
"RTN","XPDR",57,0)
 D ^DIR Q:$D(DIRUT)
"RTN","XPDR",58,0)
 S XPDF=$S(Y="I":9.7,1:9.6) S:Y="ALL" XPDF(1)=9.7
"RTN","XPDR",59,0)
 K DIR S DIR("?")="Enter the number of Versions to keep in the file, for each package",DIR(0)="N^0:100:0",DIR("A")="Versions to Retain",DIR("B")=1
"RTN","XPDR",60,0)
 D ^DIR Q:$D(DIRUT)  S XPDN=Y
"RTN","XPDR",61,0)
 K DIR
"RTN","XPDR",62,0)
 S DIR(0)="FO^3:30",DIR("?")="^D PURGEH^XPDR",DIR("A")="Package Name",DIR("B")="ALL"
"RTN","XPDR",63,0)
 F  D ^DIR Q:$D(DIRUT)  S XPD(X)="" Q:X="ALL"  K DIR("B") S DIR("A")="Another Package Name"
"RTN","XPDR",64,0)
 Q:'$D(XPD)
"RTN","XPDR",65,0)
 ;if they want all, make sure all is the only one
"RTN","XPDR",66,0)
 I $D(XPD("ALL")) K XPD S XPD("ALL")=""
"RTN","XPDR",67,0)
 ;XPDF(1) is defined if doing both files, do purge twice
"RTN","XPDR",68,0)
 K ^TMP($J) D PURGE1(XPDF),PURGE1($G(XPDF(1))):$D(XPDF(1))
"RTN","XPDR",69,0)
 I '$D(^TMP($J)) W !!,"No match found" Q
"RTN","XPDR",70,0)
 K XPD,DIR
"RTN","XPDR",71,0)
 S DIR(0)="E",$P(XPDUL,"-",IOM)=""
"RTN","XPDR",72,0)
 ;if ALL, reset XPDF to next file and Do, then reset back to 9.6
"RTN","XPDR",73,0)
 D  I $D(XPDF(1)) D ^DIR I Y S XPDF=XPDF(1) D  S XPDF=9.6
"RTN","XPDR",74,0)
 .S XPD="^TMP("_$J_","_XPDF,XPDS=XPD_",",XPD=XPD_")",XPDL=$L(XPDS),XPDPG=1,Y=1
"RTN","XPDR",75,0)
 .W @IOF D HDR
"RTN","XPDR",76,0)
 .;loop thru ^TMP($J,file,package) & show list, quit if user "^"
"RTN","XPDR",77,0)
 .F  S XPD=$Q(@XPD) Q:XPD=""!($E(XPD,1,XPDL)'=XPDS)  D  Q:'Y
"RTN","XPDR",78,0)
 ..S Z=@XPD W $P(Z,"^"),$S($P(Z,"^",3):"  (duplicates)",1:""),! Q:$Y<(IOSL-4)
"RTN","XPDR",79,0)
 ..D ^DIR Q:'Y
"RTN","XPDR",80,0)
 ..S XPDPG=XPDPG+1 W @IOF D HDR
"RTN","XPDR",81,0)
 S DIR(0)="Y",DIR("A")="OK to DELETE these entries",DIR("B")="NO"
"RTN","XPDR",82,0)
 W !! D ^DIR
"RTN","XPDR",83,0)
 I $D(DIRUT)!'Y W !!,"Nothing Purged" Q
"RTN","XPDR",84,0)
 ;loop thru and delete
"RTN","XPDR",85,0)
 D  I $D(XPDF(1)) S XPDF=XPDF(1) D
"RTN","XPDR",86,0)
 .S DIK="^XPD("_XPDF_",",XPD="^TMP("_$J_","_XPDF,XPDS=XPD_",",XPD=XPD_")",XPDL=$L(XPDS)
"RTN","XPDR",87,0)
 .F  S XPD=$Q(@XPD) Q:XPD=""!($E(XPD,1,XPDL)'=XPDS)  D
"RTN","XPDR",88,0)
 ..S XPDI=@XPD F XPDJ=2:1 S DA=$P(XPDI,"^",XPDJ) Q:'DA  D ^DIK
"RTN","XPDR",89,0)
 Q
"RTN","XPDR",90,0)
 ;
"RTN","XPDR",91,0)
PURGE1(XPDF) ;XPDF=file #
"RTN","XPDR",92,0)
 N XPDFL,XPDI,XPDJ,XPDP,XPDV,Y,Z
"RTN","XPDR",93,0)
 W "."
"RTN","XPDR",94,0)
 ;if All, loop thru B x-ref
"RTN","XPDR",95,0)
 I $D(XPD("ALL")) D
"RTN","XPDR",96,0)
 .S XPDI=""
"RTN","XPDR",97,0)
 .F  S XPDI=$O(^XPD(XPDF,"B",XPDI)) Q:XPDI=""  D
"RTN","XPDR",98,0)
 ..S X=$$PKG^XPDUTL(XPDI) D PURGE2(X)
"RTN","XPDR",99,0)
 ..W "."
"RTN","XPDR",100,0)
 E  S XPDI="" F  S XPDI=$O(XPD(XPDI)) Q:XPDI=""  D
"RTN","XPDR",101,0)
 .D PURGE2(XPDI)
"RTN","XPDR",102,0)
 .W "."
"RTN","XPDR",103,0)
 ;loop thru each package, XPDP=package name
"RTN","XPDR",104,0)
 S XPDP="" F  S XPDP=$O(^TMP($J,XPDF,XPDP)) Q:XPDP=""  D
"RTN","XPDR",105,0)
 .S XPDV="",XPDL=XPDN
"RTN","XPDR",106,0)
 .;the last is the most recent, XPDN = number to retain, XPDV=version
"RTN","XPDR",107,0)
 .;XPDS=type (T/V/Z)
"RTN","XPDR",108,0)
 .F  S XPDV=$O(^TMP($J,XPDF,XPDP,XPDV),-1),XPDS="" Q:'XPDV!'XPDL  F  S XPDS=$O(^TMP($J,XPDF,XPDP,XPDV,XPDS),-1) Q:XPDS=""!'XPDL  D
"RTN","XPDR",109,0)
 ..S Y="" F  S Y=$O(^TMP($J,XPDF,XPDP,XPDV,XPDS,Y),-1) Q:Y=""!'XPDL  D
"RTN","XPDR",110,0)
 ...I $D(^TMP($J,XPDF,XPDP,XPDV,XPDS,Y))#2 K ^(Y) S XPDL=XPDL-1 Q
"RTN","XPDR",111,0)
 ...S Z="" F  S Z=$O(^TMP($J,XPDF,XPDP,XPDV,XPDS,Y,Z),-1) Q:Z=""!'XPDL  K ^(Z) S XPDL=XPDL-1
"RTN","XPDR",112,0)
 Q
"RTN","XPDR",113,0)
 ;
"RTN","XPDR",114,0)
PURGE2(XPDX) ;XPDX=package name
"RTN","XPDR",115,0)
 ;XPDFL=1 this is not a patch, quit when we find a patch during loop
"RTN","XPDR",116,0)
 S XPDS=XPDX,XPDL=$L(XPDX),XPDFL=XPDX'["*"
"RTN","XPDR",117,0)
 ;loop and find matches
"RTN","XPDR",118,0)
 D  F  S XPDS=$O(^XPD(XPDF,"B",XPDS)) Q:XPDS=""!($E(XPDS,1,XPDL)'=XPDX)!($S(XPDFL:XPDS["*",1:0))  D
"RTN","XPDR",119,0)
 .S Y=$O(^XPD(XPDF,"B",XPDS,0)) Q:'Y
"RTN","XPDR",120,0)
 .Q:'$D(^XPD(XPDF,Y,0))  S Z=^(0),Y=XPDS_"^"_Y
"RTN","XPDR",121,0)
 .;can't delete Installs that status isn't 'Install Completed'
"RTN","XPDR",122,0)
 .I XPDF=9.7 Q:$P(Z,U,9)<3
"RTN","XPDR",123,0)
 .S XPDV=$$VER^XPDUTL(XPDS)
"RTN","XPDR",124,0)
 .;TMP($J,file,package name,version,"*","T/V/Z",num,patch)=NAME^DA^duplicat DAs
"RTN","XPDR",125,0)
 .I XPDS["*" D  Q
"RTN","XPDR",126,0)
 ..I XPDV?1.2N1"."1.2N S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"*Z",0,+$P(XPDS,"*",3))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",127,0)
 ..I XPDV["T" S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"*T",+$P(XPDV,"T",2),+$P(XPDS,"*",3))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",128,0)
 ..I XPDV["V" S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"*V",+$P(XPDV,"V",2),+$P(XPDS,"*",3))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",129,0)
 ..S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"*",+$P(XPDS,"*",3))=Y_$$DUP(XPDS,$P(Y,"^",2))
"RTN","XPDR",130,0)
 .;TMP($J,file,package name,version,"Z",0)=NAME^DA^duplicate DAs
"RTN","XPDR",131,0)
 .I XPDV?1.2N1"."1.2N S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"Z",0)=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",132,0)
 .;TMP($J,file,package name,version,"T/V",num)=NAME^DA^dup DAs
"RTN","XPDR",133,0)
 .I XPDV["T" S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"T",+$P(XPDV,"T",2))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",134,0)
 .I XPDV["V" S ^TMP($J,XPDF,$$PKG^XPDUTL(XPDS),+XPDV,"V",+$P(XPDV,"V",2))=Y_$$DUP(XPDS,$P(Y,"^",2)) Q
"RTN","XPDR",135,0)
 Q
"RTN","XPDR",136,0)
PURGEH ;executable help from DIR call at PURGE+8
"RTN","XPDR",137,0)
 W:$E(DIR("A"),1)="P" !,"Enter 'ALL' to purge all packages, or"
"RTN","XPDR",138,0)
 W !,"Enter the name of the Package you want to Purge.",!," i.e. KERNEL 8.0  will purge version 8.0Tx and 8.0Vx",!,"      XU*8.0 will purge all patches for 8.0",!
"RTN","XPDR",139,0)
 N DIR,X,Y
"RTN","XPDR",140,0)
 S DIR(0)="Y",DIR("A")="Want to see the "_$S(XPDF=9.7:"Install File",$D(XPDF(1)):"Build & Install Files",1:"Build File")_" List",DIR("B")="Y"
"RTN","XPDR",141,0)
 D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDR",142,0)
 D PURGEH1("^XPD(9.6,"):XPDF=9.6,PURGEH1("^XPD(9.7,"):XPDF=9.7!$D(XPDF(1))
"RTN","XPDR",143,0)
 Q
"RTN","XPDR",144,0)
 ;
"RTN","XPDR",145,0)
DUP(Z,Z1) ;find duplicate, Z=NAME, Z1=last ien
"RTN","XPDR",146,0)
 ;returns Y=DA^dup DA^dup DA...
"RTN","XPDR",147,0)
 N Y S Y=""
"RTN","XPDR",148,0)
 F  S Z1=$O(^XPD(XPDF,"B",Z,Z1)) Q:'Z1  S Y=Y_"^"_Z1
"RTN","XPDR",149,0)
 Q Y
"RTN","XPDR",150,0)
 ;
"RTN","XPDR",151,0)
PURGEH1(DIC) ;
"RTN","XPDR",152,0)
 W !!,$S(DIC[9.6:"BUILD ",1:"INSTALL ")_"File"
"RTN","XPDR",153,0)
 S DIC(0)="QE",X="??" D ^DIC
"RTN","XPDR",154,0)
 Q
"RTN","XPDR",155,0)
 ;
"RTN","XPDR",156,0)
HDR W !,"Package(s) in ",$S(XPDF=9.7:"INSTALL",1:"BUILD")," File, "
"RTN","XPDR",157,0)
 I XPDN W "Retain last ",$S(XPDN=1:"version",1:XPDN_" versions")
"RTN","XPDR",158,0)
 E  W "Don't retain any versions"
"RTN","XPDR",159,0)
 W ?70,"PAGE ",XPDPG,!,XPDUL,!
"RTN","XPDR",160,0)
 Q
"RTN","XPDT")
0^5^B82909490^B81300874
"RTN","XPDT",1,0)
XPDT ;SFISC/RSD - Transport a package ;02/12/2009
"RTN","XPDT",2,0)
 ;;8.0;KERNEL;**2,10,28,41,44,51,58,66,68,85,100,108,393,511,539,547**;Jul 10, 1995;Build 15
"RTN","XPDT",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XPDT",4,0)
EN ;build XTMP("XPDT",ien, XPDA=ien,XPDNM=name
"RTN","XPDT",5,0)
 ;XPDT(seq #)=ien^name^1=use current transport global on system
"RTN","XPDT",6,0)
 ;XPDT("DA",ien)=seq #
"RTN","XPDT",7,0)
 ;XPDVER=version number^package name
"RTN","XPDT",8,0)
 ;XPDGP=flag;global^flag;global^...  flag=1 replace global at site
"RTN","XPDT",9,0)
 N DIR,DIRUT,I,POP,XPD,XPDA,XPDERR,XPDGP,XPDGREF,XPDH,XPDH1,XPDHD,XPDI,XPDNM,XPDSEQ,XPDSIZ,XPDSIZA,XPDT,XPDTP,XPDVER
"RTN","XPDT",10,0)
 N DUOUT,DTOUT,XPDFMSG,X,Y,Z,Z1
"RTN","XPDT",11,0)
 K ^TMP($J,"XPD")
"RTN","XPDT",12,0)
 S XPD="First Package Name: ",DIR(0)="Y",DIR("A")="   Use this Transport Global",DIR("?")="Yes, will use the current Transport Global on your system. No, will create a new one.",XPDT=0
"RTN","XPDT",13,0)
 W !!,"Enter the Package Names to be transported. The order in which",!,"they are entered will be the order in which they are installed.",!!
"RTN","XPDT",14,0)
 F  S XPDA=$$DIC^XPDE("AEMQZ",XPD) Q:'XPDA  D  Q:$D(DIRUT)!$D(XPDERR)
"RTN","XPDT",15,0)
 .S:'XPDT XPD="Another Package Name: "
"RTN","XPDT",16,0)
 .;XPDI=name^1=use current transport global
"RTN","XPDT",17,0)
 .S XPDI=$P(Y(0),U)_"^"
"RTN","XPDT",18,0)
 .I $D(XPDT("DA",XPDA)) W "   ",$P(Y(0),U)," already listed",! Q
"RTN","XPDT",19,0)
 .;if type is Global Package, set DIRUT if there is other packages
"RTN","XPDT",20,0)
 .I $P(Y(0),U,3)=2 W "   GLOBAL PACKAGE" D  Q
"RTN","XPDT",21,0)
 ..;if there is already a package in distribution, abort
"RTN","XPDT",22,0)
 ..I XPDT S DIRUT=1 W !,"A GLOBAL PACKAGE cannot be sent with any other packages" Q
"RTN","XPDT",23,0)
 ..I $D(^XTMP("XPDT",XPDA)) W "  **Cannot have a pre-existing Transport Global**" S DIRUT=1 Q
"RTN","XPDT",24,0)
 ..W !?10,"will transport the following globals:",! S X=0,XPDGP=""
"RTN","XPDT",25,0)
 ..F  S X=$O(^XPD(9.6,XPDA,"GLO",X)) Q:'X  S Z=$G(^(X,0)) I $P(Z,U)]"" S XPDGP=XPDGP_($P(Z,U,2)="y")_";"_$P(Z,U)_"^" W ?12,$P(Z,U),!
"RTN","XPDT",26,0)
 ..;XPDERR is set to quit loop, so no other packages can be added
"RTN","XPDT",27,0)
 ..S XPDERR=1,XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_XPDI,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",28,0)
 .Q:$D(XPDERR)
"RTN","XPDT",29,0)
 .D PCK(XPDA,XPDI)
"RTN","XPDT",30,0)
 .;multi-package
"RTN","XPDT",31,0)
 .Q:$P(Y(0),U,3)'=1
"RTN","XPDT",32,0)
 .W "   (Multi-Package)" S X=0
"RTN","XPDT",33,0)
 .I XPDT>1 S DIRUT=1 W !,"A Master Build must be the first/only package in a transport" Q
"RTN","XPDT",34,0)
 .F  S X=$O(^XPD(9.6,XPDA,10,X)) Q:'X  S Z=$P($G(^(X,0)),U),Z1=$P($G(^(0)),U,2) D:Z]""
"RTN","XPDT",35,0)
 ..N XPDA,X
"RTN","XPDT",36,0)
 ..W !?3,Z S XPDA=$O(^XPD(9.6,"B",Z,0))
"RTN","XPDT",37,0)
 ..I 'XPDA W "  **Can't find definition in Build file**" Q
"RTN","XPDT",38,0)
 ..I $D(XPDT("DA",XPDA)) W "  already listed" Q
"RTN","XPDT",39,0)
 ..D PCK(XPDA,Z,Z1)
"RTN","XPDT",40,0)
 .S XPDERR=1 ;XPDERR is set to quit loop, so no other packages can be added
"RTN","XPDT",41,0)
 .Q
"RTN","XPDT",42,0)
 G:'XPDT!$D(DIRUT) QUIT K XPDERR
"RTN","XPDT",43,0)
 W !!,"ORDER   PACKAGE",!
"RTN","XPDT",44,0)
 F XPDT=1:1:XPDT S Y=$P(XPDT(XPDT),U,2) W ?2,XPDT,?7,Y D  W !
"RTN","XPDT",45,0)
 .W:$P(XPDT(XPDT),U,3) "     **will use current Transport Global**"
"RTN","XPDT",46,0)
 .;check if New Version and single package, has Package File Link, Package App. History
"RTN","XPDT",47,0)
 .Q:Y["*"!'$$PAH(+XPDT(XPDT))
"RTN","XPDT",48,0)
 .S DIR(0)="Y",DIR("A")="Send the PATCH APPLICATION HISTORY from the PACKAGE file",DIR("B")="YES"
"RTN","XPDT",49,0)
 .W !! D ^DIR I 'Y S $P(XPDT(XPDT),U,5)=1
"RTN","XPDT",50,0)
 S DIR(0)="Y",DIR("A")="OK to continue",DIR("B")="YES",XPDH=""
"RTN","XPDT",51,0)
 W !! D ^DIR G:$D(DIRUT)!'Y QUIT K DIR
"RTN","XPDT",52,0)
 I $G(XPDTP),XPDT>1 W !!,"You cannot send multiple Builds through PackMan."
"RTN","XPDT",53,0)
 S DIR(0)="SAO^HF:Host File"_$S(XPDT=1:";PM:PackMan",1:"")
"RTN","XPDT",54,0)
 S DIR("A")="Transport through (HF)Host File"_$S(XPDT=1:" or (PM)PackMan: ",1:": ")
"RTN","XPDT",55,0)
 S DIR("?")="Enter the method of transport for the package(s)."
"RTN","XPDT",56,0)
 D ^DIR G:$D(DTOUT)!$D(DUOUT) QUIT K DIR
"RTN","XPDT",57,0)
 I Y="" W !,"No Transport Method selected, will only write Transport Global to ^XTMP." S XPDH=""
"RTN","XPDT",58,0)
 ;XPDTP = transports using Packman
"RTN","XPDT",59,0)
 S:Y="PM" XPDTP=1
"RTN","XPDT",60,0)
 I $D(XPDGP),Y'="HF" W !,"**Global Package can only be sent with a Host File, Transport ABORTED**" Q
"RTN","XPDT",61,0)
 I Y="HF" D DEV G:POP QUIT
"RTN","XPDT",62,0)
 W !!
"RTN","XPDT",63,0)
 F XPDT=1:1:XPDT S XPDA=XPDT(XPDT),XPDNM=$P(XPDA,U,2) D  G:$D(XPDERR) ABORT
"RTN","XPDT",64,0)
 .W !?5,XPDNM,"..." S XPDGREF="^XTMP(""XPDT"","_+XPDA_",""TEMP"")"
"RTN","XPDT",65,0)
 .;if using current transport global, run pre-transp routine and quit
"RTN","XPDT",66,0)
 .I $P(XPDA,U,3) S XPDA=+XPDA D PRET Q
"RTN","XPDT",67,0)
 .;if package file link then set XPDVER=version number^package name
"RTN","XPDT",68,0)
 .S XPDA=+XPDA,XPDVER=$S($P(^XPD(9.6,XPDA,0),U,2):$$VER^XPDUTL(XPDNM)_U_$$PKG^XPDUTL(XPDNM),1:"")
"RTN","XPDT",69,0)
 .;Inc the Build number
"RTN","XPDT",70,0)
 .S $P(^XPD(9.6,XPDA,6.3),U)=$G(^XPD(9.6,XPDA,6.3))+1
"RTN","XPDT",71,0)
 .K ^XTMP("XPDT",XPDA)
"RTN","XPDT",72,0)
 .;GLOBAL PACKAGE
"RTN","XPDT",73,0)
 .I $D(XPDGP) D  S XPDT=1 Q
"RTN","XPDT",74,0)
 ..;can't send global package in packman message
"RTN","XPDT",75,0)
 ..I $G(XPDTP) S XPDERR=1 Q
"RTN","XPDT",76,0)
 ..;verify global package
"RTN","XPDT",77,0)
 ..I '$$GLOPKG^XPDV(XPDA) S XPDERR=1 Q
"RTN","XPDT",78,0)
 ..;get Environment check and Post Install routines
"RTN","XPDT",79,0)
 ..F Y="PRE","INIT" I $G(^XPD(9.6,XPDA,Y))]"" S X=^(Y) D
"RTN","XPDT",80,0)
 ...S ^XTMP("XPDT",XPDA,Y)=X,X=$P(X,U,$L(X,U)),%=$$LOAD^XPDTA(X,"0^")
"RTN","XPDT",81,0)
 ..D BLD^XPDTC,PRET
"RTN","XPDT",82,0)
 .F X="DD^XPDTC","KRN^XPDTC","QUES^XPDTC","INT^XPDTC","BLD^XPDTC" D @X Q:$D(XPDERR)
"RTN","XPDT",83,0)
 .D:'$D(XPDERR) PRET
"RTN","XPDT",84,0)
 ;XPDTP - call ^XPDTP to build Packman message
"RTN","XPDT",85,0)
 I $G(XPDTP) S XPDA=+XPDT(XPDT) D ^XPDTP G QUIT
"RTN","XPDT",86,0)
 I $L(XPDH) D GO G QUIT
"RTN","XPDT",87,0)
 ;if no device then just create transport global
"RTN","XPDT",88,0)
 W !! F XPDT=1:1:XPDT W "Transport Global ^XTMP(""XPDT"","_+XPDT(XPDT)_") created for ",$P(XPDT(XPDT),U,2),!
"RTN","XPDT",89,0)
 Q
"RTN","XPDT",90,0)
DEV N FIL,DIR,IOP,X,Y,%ZIS W !
"RTN","XPDT",91,0)
 D HOME^%ZIS
"RTN","XPDT",92,0)
 S DIR(0)="F^3:245",DIR("A")="Enter a Host File",DIR("?")="Enter a filename and/or path to output package(s).",POP=0
"RTN","XPDT",93,0)
 D ^DIR I $D(DTOUT)!$D(DUOUT) S POP=1 Q
"RTN","XPDT",94,0)
 ;if no file, then quit
"RTN","XPDT",95,0)
 Q:Y=""  S FIL=Y
"RTN","XPDT",96,0)
 S DIR(0)="F^3:80",DIR("A")="Header Comment",DIR("?")="Enter a comment between 3 and 80 characters."
"RTN","XPDT",97,0)
 D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",98,0)
 S XPDH=Y,%ZIS="",%ZIS("HFSNAME")=FIL,%ZIS("HFSMODE")="W",IOP="HFS",(XPDSIZ,XPDSIZA)=0,XPDSEQ=1
"RTN","XPDT",99,0)
 D ^%ZIS I POP W !!,"**Incorrect Host File name**",!,$C(7) Q
"RTN","XPDT",100,0)
 ;write date and comment header
"RTN","XPDT",101,0)
 S XPDHD="KIDS Distribution saved on "_$$HTE^XLFDT($H)
"RTN","XPDT",102,0)
 U IO W $$SUM(XPDHD),!,$$SUM(XPDH),!
"RTN","XPDT",103,0)
 S XPDFMSG=1 ;Send mail to forum of routines in HFS.
"RTN","XPDT",104,0)
 ;U IO(0) is to insure I am writing to the terminal
"RTN","XPDT",105,0)
 U IO(0) Q
"RTN","XPDT",106,0)
 ;
"RTN","XPDT",107,0)
GO S I=1,Y="",XPDH1="**KIDS**:" U IO
"RTN","XPDT",108,0)
 ;Global Package, header is different and there is only 1 package
"RTN","XPDT",109,0)
 I $D(XPDGP) W $$SUM("**KIDS**GLOBALS:"_$P(XPDT(1),U,2)_U_XPDGP),! G GO1
"RTN","XPDT",110,0)
 ;write header that maintains package list, keep less than 255 char
"RTN","XPDT",111,0)
 F  D  W $$SUM(XPDH1_Y),! Q:I=XPDT  S Y="",I=I+1,XPDH1="**KIDS**"
"RTN","XPDT",112,0)
 .F I=I:1 S Y=Y_$P(XPDT(I),U,2)_"^" Q:$L(Y)>200!(I=XPDT)
"RTN","XPDT",113,0)
 ;after the package list write an extra line feed
"RTN","XPDT",114,0)
GO1 W ! S XPDSIZA=XPDSIZA+2
"RTN","XPDT",115,0)
 N XMSUB,XMY,XMTEXT
"RTN","XPDT",116,0)
 ;loop thru & write global, don't kill if set to permanent, set in XPDIU
"RTN","XPDT",117,0)
 F XPDT=1:1:XPDT S XPDA=+XPDT(XPDT),XPDNM=$P(XPDT(XPDT),U,2) D GW,XM K:'$G(^XTMP("XPDT",XPDA)) ^(XPDA)
"RTN","XPDT",118,0)
 W "**END**",!
"RTN","XPDT",119,0)
 ;GLOBAL PACKAGE there could only be one package, write globals
"RTN","XPDT",120,0)
 I $D(XPDGP) D GPW W "**END**",!
"RTN","XPDT",121,0)
 ;we're done with device, close it
"RTN","XPDT",122,0)
 W "**END**",! D ^%ZISC
"RTN","XPDT",123,0)
 W !!,"Package Transported Successfully",!
"RTN","XPDT",124,0)
 Q
"RTN","XPDT",125,0)
GW ;global write
"RTN","XPDT",126,0)
 N GR,GCK,GL
"RTN","XPDT",127,0)
 S GCK="^XTMP(""XPDT"","_XPDA,GR=GCK_")",GCK=GCK_",",GL=$L(GCK)
"RTN","XPDT",128,0)
 ;INSTALL NAME line will mark the beginning of global for all lines until
"RTN","XPDT",129,0)
 ;the next INSTALL NAME
"RTN","XPDT",130,0)
 W $$SUM("**INSTALL NAME**",1),!,$$SUM(XPDNM),!
"RTN","XPDT",131,0)
 F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",132,0)
 Q
"RTN","XPDT",133,0)
XM ;Send HFS checksum message
"RTN","XPDT",134,0)
 Q:'$G(XPDFMSG)
"RTN","XPDT",135,0)
 N XMTEXT,C,RN,RN2,X,X2
"RTN","XPDT",136,0)
 K ^TMP($J)
"RTN","XPDT",137,0)
 S XMSUB="**KIDS** Checksum for "_XPDNM,XMTEXT="^TMP($J)"
"RTN","XPDT",138,0)
 I $G(^XMB("NETNAME"))["VA.GOV" S XMY("S.A1AE HFS CHKSUM SVR@FORUM.VA.GOV")=""
"RTN","XPDT",139,0)
 E  S X=$$GET^XPAR("PKG","XPD PATCH HFS SERVER",1,"Q") S:$L(X) XMY(X)=""
"RTN","XPDT",140,0)
 I '$D(XMY) Q  ;No one to send it to.
"RTN","XPDT",141,0)
 S C=1,@XMTEXT@(1,0)="~~1:"_XPDNM
"RTN","XPDT",142,0)
 I XPDT=1,$O(XPDT(1)) D
"RTN","XPDT",143,0)
 . S RN=1 F  S RN=$O(XPDT(RN)) Q:'RN  S C=C+1,@XMTEXT@(C,0)="~~2:"_$P(XPDT(RN),"^",2)
"RTN","XPDT",144,0)
 S (RN,RN2)="" ;Send full RTN node
"RTN","XPDT",145,0)
 F  S RN=$O(^XTMP("XPDT",XPDA,"RTN",RN)) Q:'$L(RN)  S X=^(RN),X2=$G(^(RN,2,0)) D
"RTN","XPDT",146,0)
 . S C=C+1,@XMTEXT@(C,0)="~~3:"_RN_"^"_X_"^"_$P(X2,";",5)
"RTN","XPDT",147,0)
 . I RN2="",$E(X2,1,3)=" ;;" S RN2=$P(X2,"**",1)_"**[Patch List]**"_$P(X2,"**",3)
"RTN","XPDT",148,0)
 S C=C+1,@XMTEXT@(C,0)="~~4:"_RN2
"RTN","XPDT",149,0)
 S C=C+1,@XMTEXT@(C,0)="~~8:"_$G(^XMB("NETNAME"))
"RTN","XPDT",150,0)
 S C=C+1,@XMTEXT@(C,0)="~~9:Save"
"RTN","XPDT",151,0)
 S XMTEXT="^TMP($J,"
"RTN","XPDT",152,0)
 D ^XMD
"RTN","XPDT",153,0)
 Q
"RTN","XPDT",154,0)
GPW ;global package write
"RTN","XPDT",155,0)
 N I,G,GR,GCK,GL
"RTN","XPDT",156,0)
 W !
"RTN","XPDT",157,0)
 F I=1:1 S G=$P(XPDGP,U,I) Q:G=""  D
"RTN","XPDT",158,0)
 .S GR="^"_$P(G,";",2),GCK=$S(GR[")":$E(GR,1,$L(GR)-1)_",",1:GR_"("),GL=$L(GCK)
"RTN","XPDT",159,0)
 .;GLOBAL line will mark the beginning of global for all lines until
"RTN","XPDT",160,0)
 .;the next GLOBAL
"RTN","XPDT",161,0)
 .W $$SUM("**GLOBAL**",1),!,$$SUM(GR),!
"RTN","XPDT",162,0)
 .F  Q:$D(DIRUT)  S GR=$Q(@GR) Q:GR=""!($E(GR,1,GL)'=GCK)  W $$SUM($P(GR,GCK,2),1),!,$$SUM(@GR),!
"RTN","XPDT",163,0)
 Q
"RTN","XPDT",164,0)
QUIT F XPDT=1:1:XPDT L -^XPD(9.6,+XPDT(XPDT))
"RTN","XPDT",165,0)
 Q
"RTN","XPDT",166,0)
ABORT W !!,"**TRANSPORT ABORTED**",*7
"RTN","XPDT",167,0)
 D QUIT
"RTN","XPDT",168,0)
 F XPDT=1:1:XPDT K ^XTMP("XPDT",+XPDT(XPDT))
"RTN","XPDT",169,0)
 ;if HF, save file name IO into XPDH
"RTN","XPDT",170,0)
 S:$L(XPDH) XPDH=IO
"RTN","XPDT",171,0)
 D ^%ZISC
"RTN","XPDT",172,0)
 ;if HF, then delete file
"RTN","XPDT",173,0)
 I $L(XPDH),$$DEL1^%ZISH(XPDH) W !,"File:  ",XPDH,"  (Deleted)"
"RTN","XPDT",174,0)
 Q
"RTN","XPDT",175,0)
 ;
"RTN","XPDT",176,0)
PCK(XPDA,XPDNM,XPDREQ) ;XPDA=Build ien, XPDNM=Build name, XPDREQ=Required
"RTN","XPDT",177,0)
 N Y
"RTN","XPDT",178,0)
 S XPDT=XPDT+1,XPDT(XPDT)=XPDA_U_XPDNM,XPDT("DA",XPDA)=XPDT
"RTN","XPDT",179,0)
 S:'$G(XPDREQ) XPDREQ=0
"RTN","XPDT",180,0)
 S $P(XPDT(XPDT),U,4)=XPDREQ
"RTN","XPDT",181,0)
 Q:'$D(^XTMP("XPDT",XPDA))  S Y=$G(^(XPDA))
"RTN","XPDT",182,0)
 W "     **Transport Global exists**"
"RTN","XPDT",183,0)
 ;Y=1 if TG is permanent
"RTN","XPDT",184,0)
 I Y S $P(XPDT(XPDT),U,3)=1 Q
"RTN","XPDT",185,0)
 ;ask if they want to use TG
"RTN","XPDT",186,0)
 D ^DIR S $P(XPDT(XPDT),U,3)=Y
"RTN","XPDT",187,0)
 Q
"RTN","XPDT",188,0)
 ;
"RTN","XPDT",189,0)
SUM(X,Z) ;X=string to write, Z 0=don't check size
"RTN","XPDT",190,0)
 S XPDSIZA=XPDSIZA+$L(X)+2
"RTN","XPDT",191,0)
 Q X
"RTN","XPDT",192,0)
 ;
"RTN","XPDT",193,0)
PAH(XPDA) ;check for PATCH APPLICATION HISTORY in Package file
"RTN","XPDT",194,0)
 N Y,Z
"RTN","XPDT",195,0)
 S Y=^XPD(9.6,XPDA,0),Z=$$VER^XPDUTL($P(Y,U))
"RTN","XPDT",196,0)
 ;Single Package, Version multiple, PAH multiple
"RTN","XPDT",197,0)
 I $P(Y,U,3)=0,$D(^DIC(9.4,+$P(Y,U,2),22)),Z S Z=$O(^(22,"B",Z,0)) I Z,$O(^DIC(9.4,+$P(Y,U,2),22,Z,"PAH",0)) Q 1
"RTN","XPDT",198,0)
 Q 0
"RTN","XPDT",199,0)
 ;
"RTN","XPDT",200,0)
PRET ;Pre-Transport Routine
"RTN","XPDT",201,0)
 N Y,Z
"RTN","XPDT",202,0)
 S Y=$G(^XPD(9.6,XPDA,"PRET")) Q:Y=""
"RTN","XPDT",203,0)
 I '$$RTN^XPDV(Y,.Z) W !!,"Pre-Transportation Routine ",Y,Z,*7 Q
"RTN","XPDT",204,0)
 S Y=$S(Y["^":Y,1:"^"_Y) W !,"Running Pre-Transportation Routine ",Y
"RTN","XPDT",205,0)
 D @Y Q
"RTN","XPDT",206,0)
 ;
"RTN","XPDT",207,0)
 ;
"RTN","XPDT",208,0)
 ;FROM DEV
"RTN","XPDT",209,0)
 ;if MSM and HFS file is on device A or B, then get size for floppy disk
"RTN","XPDT",210,0)
 ;XPDSIZ=disk size, XPDSIZA=accummulated size,XPDSEQ=disk sequence number
"RTN","XPDT",211,0)
 I ^%ZOSF("OS")["MSM",FIL?1(1"A",1"B")1":"1.E D  Q:POP
"RTN","XPDT",212,0)
 .S DIR(0)="N^0:5000",DIR("A")="Size of Diskette (1K blocks)",DIR("B")=1400,DIR("?")="Enter the number of 1K blocks which each diskette will hold, 0 means unlimited space"
"RTN","XPDT",213,0)
 .D ^DIR I $D(DIRUT) S POP=1 Q
"RTN","XPDT",214,0)
 .S XPDSIZ=$S(Y:Y*1024,1:0)
"RTN","XPDT",215,0)
 ;FROM SUM
"RTN","XPDT",216,0)
 ;ask for next disk
"RTN","XPDT",217,0)
 ;this code is for MSM system only
"RTN","XPDT",218,0)
 I $G(Z),XPDSIZ,XPDSIZ-XPDSIZA<1024 D
"RTN","XPDT",219,0)
 .;write continue flag at end of this file
"RTN","XPDT",220,0)
 .W "**CONTINUE**",!,"**END**",!
"RTN","XPDT",221,0)
 .;should call %ZIS HFS utilities to close and open file
"RTN","XPDT",222,0)
 .X "C IO" U IO(0)
"RTN","XPDT",223,0)
 .N DIR,G,GR,GCK,GL,I,X,Y
"RTN","XPDT",224,0)
 .W !!,"Diskette #",XPDSEQ," is full."
"RTN","XPDT",225,0)
 .S DIR(0)="E",DIR("A")="Insert the next diskette and Press the return key",DIR("?")="The current diskette is full, insert a new diskette to continue."
"RTN","XPDT",226,0)
 .;$D(DIRUT)=the user aborted the distribution
"RTN","XPDT",227,0)
 .D ^DIR I $D(DIRUT) D ABORT Q
"RTN","XPDT",228,0)
 .W ! S XPDSEQ=XPDSEQ+1,XPDSIZA=0
"RTN","XPDT",229,0)
 .;MSM specific code to open HFS
"RTN","XPDT",230,0)
 .X "O IO:IOPAR" U IO
"RTN","XPDT",231,0)
 .W $$SUM("Continuation #"_XPDSEQ_" of "_XPDHD),!,$$SUM(XPDH),!,$$SUM("**SEQ**:"_XPDSEQ),!!
"RTN","XPDT",232,0)
 .S XPDSIZA=XPDSIZA+2
"RTN","XPDV")
0^6^B41763157^B41656792
"RTN","XPDV",1,0)
XPDV ;SFISC/RSD - Verify Build ;10/15/2008
"RTN","XPDV",2,0)
 ;;8.0;KERNEL;**30,44,58,108,511,525,539,547**;Jul 10, 1995;Build 15
"RTN","XPDV",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","XPDV",4,0)
 ;checks that everything is ready to do a build
"RTN","XPDV",5,0)
 ;XPDA=build ien, loop thru all nodes in ^XPD(9.6,XPDA and verify data
"RTN","XPDV",6,0)
EN ;check a build
"RTN","XPDV",7,0)
 N DA,ERR,FGR,TYPE,XPDFILE,XPDOLDA,Y0,Y2 K ^TMP($J)
"RTN","XPDV",8,0)
 S Y0=$G(^XPD(9.6,XPDA,0)),TYPE=$P(Y0,U,3)
"RTN","XPDV",9,0)
 I $P(Y0,U,2)="" W !,"No Package File Link"
"RTN","XPDV",10,0)
 I '$P(Y0,U,2) W !,$P(Y0,U,2)," in Package File Link field is free text, not a pointer"
"RTN","XPDV",11,0)
 I $P(Y0,U,2),'$D(^DIC(9.4,$P(Y0,U,2),0)) W !,$P(Y0,U,2)," in PACKAGE File  ** NOT FOUND **",*7
"RTN","XPDV",12,0)
 ;type is global package goto CONT
"RTN","XPDV",13,0)
 G CONT:TYPE=2
"RTN","XPDV",14,0)
 I TYPE=1 S Y0=$$MULT(XPDA) G DONE
"RTN","XPDV",15,0)
 S XPDFILE=0
"RTN","XPDV",16,0)
 ;check DD being sent
"RTN","XPDV",17,0)
 F  S XPDFILE=$O(^XPD(9.6,XPDA,4,XPDFILE)) Q:'XPDFILE  D
"RTN","XPDV",18,0)
 .Q:$$FILE(XPDFILE)=""
"RTN","XPDV",19,0)
 .S Y0=0,Y2=$G(^XPD(9.6,XPDA,4,XPDFILE,222))
"RTN","XPDV",20,0)
 .Q:'$$DATA(XPDFILE,Y2)
"RTN","XPDV",21,0)
 .F  S Y0=$O(^XPD(9.6,XPDA,4,XPDFILE,2,Y0)) Q:'Y0  D
"RTN","XPDV",22,0)
 ..I '$D(^DD(Y0)) W !," SubDD #",Y0," in File #",XPDFILE,"  ** NOT FOUND **" Q
"RTN","XPDV",23,0)
 ..S XPDOLDA=0
"RTN","XPDV",24,0)
 ..;check fields being sent for partial DD
"RTN","XPDV",25,0)
 ..F  S XPDOLDA=$O(^XPD(9.6,XPDA,4,XPDFILE,2,Y0,1,XPDOLDA)) Q:'XPDOLDA  D
"RTN","XPDV",26,0)
 ...I '$D(^DD(Y0,XPDOLDA)) W !,"Field #",XPDOLDA," in SubDD #",Y0," in File #",XPDFILE,"  ** NOT FOUND **" Q
"RTN","XPDV",27,0)
 ;
"RTN","XPDV",28,0)
 ;build components files
"RTN","XPDV",29,0)
 S XPDFILE=0
"RTN","XPDV",30,0)
 F  S XPDFILE=$O(^XPD(9.6,XPDA,"KRN",XPDFILE)) Q:'XPDFILE  D
"RTN","XPDV",31,0)
 .;if file doesn't exist, save in ^TMP and deleted at end
"RTN","XPDV",32,0)
 .S FGR=$$FILE(XPDFILE),XPDOLDA=0 I FGR="" S ^TMP($J,XPDFILE)="" Q
"RTN","XPDV",33,0)
 .F  S XPDOLDA=$O(^XPD(9.6,XPDA,"KRN",XPDFILE,"NM",XPDOLDA)) Q:'XPDOLDA  S Y0=$G(^(XPDOLDA,0)) D
"RTN","XPDV",34,0)
 ..;check action, quit if deleting at site
"RTN","XPDV",35,0)
 ..Q:$P(Y0,U,3)=1
"RTN","XPDV",36,0)
 ..;check that entry exist
"RTN","XPDV",37,0)
 ..S:$P(Y0,U,2) $P(Y0,U)=$P(Y0,"    FILE #") S DA=$$ENTRY(Y0)
"RTN","XPDV",38,0)
 ..Q:'$P(Y0,U,3)!($P(Y0,U,3)#2)
"RTN","XPDV",39,0)
 ..;if attach check that parent is sent, if link check that child is sent
"RTN","XPDV",40,0)
 ..Q:'$$MENU(XPDFILE,DA,$P(Y0,U,3))
"RTN","XPDV",41,0)
 ;check Install Questions
"RTN","XPDV",42,0)
 S XPDOLDA=0
"RTN","XPDV",43,0)
 F  S XPDOLDA=$O(^XPD(9.6,XPDA,"QUES",XPDOLDA)) Q:'XPDOLDA  S Y0=$G(^(XPDOLDA,0)),Y2=$G(^(1)) D
"RTN","XPDV",44,0)
 .I $P(Y0,U)="" W !,"Zero node doesn't exist for INSTALL QUESTION #",XPDOLDA Q
"RTN","XPDV",45,0)
 .I Y2="" W !,"DIR(0) field is not defined for INSTALL QUESTION ",$P(Y0,U)
"RTN","XPDV",46,0)
 I $O(^XPD(9.6,XPDA,"GLO",0)) W !,"Package cannot contain Globals, Files, & Components."
"RTN","XPDV",47,0)
 ;check for PRE & POST routines
"RTN","XPDV",48,0)
 F DA="INI","INIT" S Y0=$G(^XPD(9.6,XPDA,DA)),ERR="" I Y0]"",'$$RTN(Y0,.ERR) W !,"Routine ",Y0,ERR
"RTN","XPDV",49,0)
CONT ;
"RTN","XPDV",50,0)
 ;check Environment Check routine
"RTN","XPDV",51,0)
 S Y0=$G(^XPD(9.6,XPDA,"PRE")),ERR="" I Y0]"",'$$RTN(Y0,.ERR) W !,"Routine ",Y0,ERR
"RTN","XPDV",52,0)
 I TYPE=2 S Y0=$$GLOPKG(XPDA)
"RTN","XPDV",53,0)
DONE I $O(^TMP($J,0)) D
"RTN","XPDV",54,0)
 .N DA,DIK,DIR,DIRUT,Y
"RTN","XPDV",55,0)
 .S DIR(0)="Y",DIR("A")="Do you want to remove the missing Files",DIR("B")="NO"
"RTN","XPDV",56,0)
 .S DIR("?")="Yes means that the missing Files will be removed and you can transport this Build"
"RTN","XPDV",57,0)
 .D ^DIR Q:'Y!$D(DIRUT)
"RTN","XPDV",58,0)
 .S DIK="^XPD(9.6,"_XPDA_",""KRN"",",DA(1)=XPDA,DA=0 F  S DA=$O(^TMP($J,DA)) Q:'DA  D ^DIK
"RTN","XPDV",59,0)
 W !!,"  ** DONE **"
"RTN","XPDV",60,0)
 Q
"RTN","XPDV",61,0)
GLOPKG(X) ;GLOBAL PACKAGE
"RTN","XPDV",62,0)
 ;returns 1 if ok, 0 if failed
"RTN","XPDV",63,0)
 N I,J,Y,Z S Z=1
"RTN","XPDV",64,0)
 I $O(^XPD(9.6,X,4,0)) W !,"GLOBAL PACKAGE cannot contain Files" S Z=0
"RTN","XPDV",65,0)
 S I=0 F  S I=$O(^XPD(9.6,X,"KRN",I)) Q:'I  D:$O(^(I,"NM",0))
"RTN","XPDV",66,0)
 .W !,"GLOBAL PACKAGE cannot contain ",$P(^DIC(I,0),U) S Z=0
"RTN","XPDV",67,0)
 I $O(^XPD(9.6,X,"QUES",0)) W !,"GLOBAL PACKAGE cannot contain Install Questions" S Z=0
"RTN","XPDV",68,0)
 I $G(^XPD(9.6,X,"INI"))]"" W !,"GLOBAL PACKAGE cannot have a Pre-Install Routine" S Z=0
"RTN","XPDV",69,0)
 ;I $G(^XPD(9.6,X,"INIT"))]"" W !,"GLOBAL PACKAGE cannot have a Post-Install Routine" S Z=0
"RTN","XPDV",70,0)
 S I=0 F J=0:1 S I=$O(^XPD(9.6,X,"GLO",I)) Q:'I  S Y=$G(^(I,0)) D
"RTN","XPDV",71,0)
 .I $P(Y,U)]"",'$D(@("^"_$P(Y,U))) W !,"Global ",Y," doesn't exist." S Z=0
"RTN","XPDV",72,0)
 I 'J W !,"No Globals to transport" S Z=0
"RTN","XPDV",73,0)
 Q Z
"RTN","XPDV",74,0)
 ;
"RTN","XPDV",75,0)
QUES(X) ;X=.01 of INSTALL QUESTION multiple
"RTN","XPDV",76,0)
 ;returns ien or 0 if failed
"RTN","XPDV",77,0)
 N Y
"RTN","XPDV",78,0)
 S Y=+$O(^XPD(9.6,XPDA,"QUES","B",X,0))
"RTN","XPDV",79,0)
 I '$D(^XPD(9.6,XPDA,"QUES",Y,0)) W !,"Zero node doesn't exist for INSTALL QUESTION ",X Q 0
"RTN","XPDV",80,0)
 I '$D(^XPD(9.6,XPDA,"QUES",Y,1)) W !,"DIR(0) field is not defined for INSTALL QUESTION ",X Q 0
"RTN","XPDV",81,0)
 Q Y
"RTN","XPDV",82,0)
 ;
"RTN","XPDV",83,0)
FILE(X) ;check file # X
"RTN","XPDV",84,0)
 ;returns global ref or "" if failed
"RTN","XPDV",85,0)
 N %,Y
"RTN","XPDV",86,0)
 S Y=$G(^DIC(X,0,"GL"))
"RTN","XPDV",87,0)
 I Y="" W !," File #",X,"  ** NOT FOUND **" Q ""
"RTN","XPDV",88,0)
 S %=$E(Y,$L(Y)),X=$E(Y,1,$L(Y)-1)_$S(%="(":"",1:")")
"RTN","XPDV",89,0)
 Q X
"RTN","XPDV",90,0)
 ;
"RTN","XPDV",91,0)
 ;Z only contains the file # for Fileman templates and forms
"RTN","XPDV",92,0)
 ;XPDFILE=file #,FGR=file global ref
"RTN","XPDV",93,0)
ENTRY(Z) ;check entry, Z=name^file
"RTN","XPDV",94,0)
 ;returns ien or 0 if failed
"RTN","XPDV",95,0)
 N F,X,Y
"RTN","XPDV",96,0)
 ;check for X, name, in "B" x-ref of file.
"RTN","XPDV",97,0)
 S X=$P(Z,U),Y=0 F  S Y=$O(@FGR@("B",X,Y)) D  Q:X=""
"RTN","XPDV",98,0)
 .I 'Y W !?3,X,"  in ",$P(^DIC(XPDFILE,0),U)," File   ** NOT FOUND **",*7 S X="" Q
"RTN","XPDV",99,0)
 .;if Y is in x-ref but node doesn't exist, quit and try another
"RTN","XPDV",100,0)
 .;if this is a fileman template, the file associated with it is piece 2 of Z
"RTN","XPDV",101,0)
 .;if Form file check piece 8 else 4
"RTN","XPDV",102,0)
 .Q:'$D(@FGR@(Y,0))  I $P(Z,U,2) S F=^(0) S:$P(Z,U,2)=$P(F,U,(4+(4*(FGR["DIST")))) X="" Q
"RTN","XPDV",103,0)
 .;if it is routine file,9.8, check that routine exist
"RTN","XPDV",104,0)
 .I XPDFILE=9.8 S F="" I '$$RTN(X,.F) W !,"Routine ",X,F S X="",Y=0 Q
"RTN","XPDV",105,0)
 .;if this is not a fileman template or routine we found Y
"RTN","XPDV",106,0)
 .S X="" Q
"RTN","XPDV",107,0)
 Q +Y
"RTN","XPDV",108,0)
 ;
"RTN","XPDV",109,0)
DATA(F,Y) ;
"RTN","XPDV",110,0)
 ;return 1 if ok or 0 if failed
"RTN","XPDV",111,0)
 I $P(Y,U,3)="p",$P(Y,U,7)="y" W !,"You can only send Data with a Full Data Dictionary,",!,"** File #",F," cannot be Sent **" Q 0
"RTN","XPDV",112,0)
 Q 1
"RTN","XPDV",113,0)
 ;
"RTN","XPDV",114,0)
RTN(X,MSG) ;verify tag^routine
"RTN","XPDV",115,0)
 ;INPUT: X=[tag^]routine, MSG(passed by reference)
"RTN","XPDV",116,0)
 ;OUTPUT: returns 1=exists, 0=doesn't; MSG=error message
"RTN","XPDV",117,0)
 N L,S,T,R
"RTN","XPDV",118,0)
 S MSG=""
"RTN","XPDV",119,0)
 I X["(" S X=$P(X,"(") ;Handle tag^rtn(param) rwf
"RTN","XPDV",120,0)
 I X["^" S T=$P(X,"^"),R=$P(X,"^",2)
"RTN","XPDV",121,0)
 E  S T="",R=X
"RTN","XPDV",122,0)
 I (R'?1A.E) S MSG=" Name violates the SAC!!" Q 0
"RTN","XPDV",123,0)
 I $T(^@R)="" S MSG=" DOESN'T EXIST!!" Q 0
"RTN","XPDV",124,0)
 ;2nd line must begin with "[label] ;;n[n.nn];A[APN];"
"RTN","XPDV",125,0)
 S S=$T(+2^@R) D  I MSG]"" Q 0
"RTN","XPDV",126,0)
 .I $L($P(S," ")) S L=$P(S," "),S=$P(S,L,2,99) I L'?1U.7UN S MSG=" 2nd line violates the SAC!!" Q
"RTN","XPDV",127,0)
 .I S'?.1" ;;"1.2N.1".".2N1";"1.APN1";".E S MSG=" 2nd line violates the SAC!!"
"RTN","XPDV",128,0)
 ;if no tag or tag^routine exists, then return 1
"RTN","XPDV",129,0)
 Q:T="" 1 Q:$T(@T^@R)]"" 1
"RTN","XPDV",130,0)
 S MSG=" Tag DOESN'T EXIST!!" Q 0
"RTN","XPDV",131,0)
 ;
"RTN","XPDV",132,0)
MULT(DA) ;multi-package
"RTN","XPDV",133,0)
 ;returns 1 if ok or 0 if failed
"RTN","XPDV",134,0)
 N I,J,X,Y,Z
"RTN","XPDV",135,0)
 S I=0,Z=1
"RTN","XPDV",136,0)
 F J=0:1 S I=$O(^XPD(9.6,DA,10,I)) Q:'I  S X=$P($G(^(I,0)),U),Y=0 D
"RTN","XPDV",137,0)
 .S:X]"" Y=$O(^XPD(9.6,"B",X,0))
"RTN","XPDV",138,0)
 .I Y,$D(^XPD(9.6,Y,0)) Q
"RTN","XPDV",139,0)
 .W !,"Package ",X," doesn't exist." S Z=0
"RTN","XPDV",140,0)
 I 'J W !,"No Packages to transport" S Z=0
"RTN","XPDV",141,0)
 Q Z
"RTN","XPDV",142,0)
MENU(F,X,Y) ;check for Parent or Children, F=file (19 or 101), X=ien,
"RTN","XPDV",143,0)
 ;Y=action (2=link or 4=attach)
"RTN","XPDV",144,0)
 ;returns 1 if ok or 0 if failed
"RTN","XPDV",145,0)
 Q:'X 0
"RTN","XPDV",146,0)
 N I,J,GR,Z
"RTN","XPDV",147,0)
 S GR=$S(F=19:"^DIC(19)",1:"^ORD(101)"),(I,Z)=0
"RTN","XPDV",148,0)
 ;link, check that at least 1 menu item or subscribers was sent
"RTN","XPDV",149,0)
 I Y=2 D
"RTN","XPDV",150,0)
 . F  S I=$O(@GR@(X,10,"B",I)) Q:'I  S J=$P($G(@GR@(I,0)),U) I J]"",$D(^XPD(9.6,XPDA,"KRN",F,"NM","B",J)) S Z=1 Q
"RTN","XPDV",151,0)
 . ;if it didn't find menu item and this is a protocol, check the subscribers, 775
"RTN","XPDV",152,0)
 . I 'Z,F=101 F  S I=$O(@GR@(X,775,"B",I)) Q:'I  S J=$P($G(@GR@(I,0)),U) I J]"",$D(^XPD(9.6,XPDA,"KRN",F,"NM","B",J)) S Z=1 Q
"RTN","XPDV",153,0)
 ;attach, check that the parent was sent
"RTN","XPDV",154,0)
 I Y=4 F  S I=$O(@GR@("AD",X,I)) Q:'I  S J=$P($G(@GR@(I,0)),U) I J]"",$D(^XPD(9.6,XPDA,"KRN",F,"NM","B",J)) S Z=1 Q
"RTN","XPDV",155,0)
 D:'Z
"RTN","XPDV",156,0)
 .W !,$S(F=19:"Option ",1:"Protocol "),$P($G(@GR@(X,0)),U)," has an Action of "
"RTN","XPDV",157,0)
 .W:Y=2 "'USE AS LINK FOR MENU ITEMS' and no 'Menu Items' were sent."
"RTN","XPDV",158,0)
 .W:Y=4 "'ATTACH TO MENU' and a 'Parent Menu' wasn't sent."
"RTN","XPDV",159,0)
 Q Z
"VER")
8.0^22.0
"^DD",9.6,9.6,.01,0)
NAME^FX^^0;1^D INPUTB^XPDET(.X)
"^DD",9.6,9.6,.01,1,0)
^.1^^-1
"^DD",9.6,9.6,.01,1,1,0)
9.6^B
"^DD",9.6,9.6,.01,1,1,1)
S ^XPD(9.6,"B",$E(X,1,50),DA)=""
"^DD",9.6,9.6,.01,1,1,2)
K ^XPD(9.6,"B",$E(X,1,50),DA)
"^DD",9.6,9.6,.01,3)
Enter Package or Patch Name and version in the format 'PACKAGE nn.n[V|T]n' or 'PATCH*nn.n*nn'.
"^DD",9.6,9.6,.01,21,0)
^^2^2^2950105^^^^
"^DD",9.6,9.6,.01,21,1,0)
The name and version number of this Package or Patch.
"^DD",9.6,9.6,.01,21,2,0)
 i.e. KERNEL 8.0T1  or XU*8.0*1
"^DD",9.6,9.6,.01,"DT")
2950105
"BLD",1311,6)
^478
**END**
**END**
