Released DI*22*167 SEQ #148
Extracted from mail message
**KIDS**:DI*22.0*167^

**INSTALL NAME**
DI*22.0*167
"BLD",836,0)
DI*22.0*167^VA FILEMAN^0^3121204^y
"BLD",836,1,0)
^^1^1^3121030^^
"BLD",836,1,1,0)
See the Patch Module on FORUM for complete information.
"BLD",836,4,0)
^9.64PA^^
"BLD",836,6)
2^
"BLD",836,6.3)
18
"BLD",836,"ABPKG")
n
"BLD",836,"INID")
^y
"BLD",836,"INIT")
POST^DIPR167
"BLD",836,"KRN",0)
^9.67PA^8989.52^19
"BLD",836,"KRN",.4,0)
.4
"BLD",836,"KRN",.401,0)
.401
"BLD",836,"KRN",.402,0)
.402
"BLD",836,"KRN",.403,0)
.403
"BLD",836,"KRN",.5,0)
.5
"BLD",836,"KRN",.84,0)
.84
"BLD",836,"KRN",3.6,0)
3.6
"BLD",836,"KRN",3.8,0)
3.8
"BLD",836,"KRN",9.2,0)
9.2
"BLD",836,"KRN",9.8,0)
9.8
"BLD",836,"KRN",9.8,"NM",0)
^9.68A^14^13
"BLD",836,"KRN",9.8,"NM",1,0)
DINIT0F9^^0^B57110980
"BLD",836,"KRN",9.8,"NM",2,0)
DICE^^0^B18620023
"BLD",836,"KRN",9.8,"NM",3,0)
DINIT2A2^^0^B67467623
"BLD",836,"KRN",9.8,"NM",4,0)
DIKC1^^0^B26788475
"BLD",836,"KRN",9.8,"NM",5,0)
DINIT11^^0^B17127660
"BLD",836,"KRN",9.8,"NM",7,0)
DIK^^0^B47561240
"BLD",836,"KRN",9.8,"NM",8,0)
DIKCUTL2^^0^B36745109
"BLD",836,"KRN",9.8,"NM",9,0)
DIKC2^^0^B26790488
"BLD",836,"KRN",9.8,"NM",10,0)
DIKC^^0^B62037611
"BLD",836,"KRN",9.8,"NM",11,0)
DIKCP1^^0^B42219628
"BLD",836,"KRN",9.8,"NM",12,0)
DDS01^^0^B28553785
"BLD",836,"KRN",9.8,"NM",13,0)
DIU^^0^B9210427
"BLD",836,"KRN",9.8,"NM",14,0)
DIU1^^0^B24307273
"BLD",836,"KRN",9.8,"NM","B","DDS01",12)

"BLD",836,"KRN",9.8,"NM","B","DICE",2)

"BLD",836,"KRN",9.8,"NM","B","DIK",7)

"BLD",836,"KRN",9.8,"NM","B","DIKC",10)

"BLD",836,"KRN",9.8,"NM","B","DIKC1",4)

"BLD",836,"KRN",9.8,"NM","B","DIKC2",9)

"BLD",836,"KRN",9.8,"NM","B","DIKCP1",11)

"BLD",836,"KRN",9.8,"NM","B","DIKCUTL2",8)

"BLD",836,"KRN",9.8,"NM","B","DINIT0F9",1)

"BLD",836,"KRN",9.8,"NM","B","DINIT11",5)

"BLD",836,"KRN",9.8,"NM","B","DINIT2A2",3)

"BLD",836,"KRN",9.8,"NM","B","DIU",13)

"BLD",836,"KRN",9.8,"NM","B","DIU1",14)

"BLD",836,"KRN",19,0)
19
"BLD",836,"KRN",19.1,0)
19.1
"BLD",836,"KRN",101,0)
101
"BLD",836,"KRN",409.61,0)
409.61
"BLD",836,"KRN",771,0)
771
"BLD",836,"KRN",870,0)
870
"BLD",836,"KRN",8989.51,0)
8989.51
"BLD",836,"KRN",8989.52,0)
8989.52
"BLD",836,"KRN",8994,0)
8994
"BLD",836,"KRN","B",.4,.4)

"BLD",836,"KRN","B",.401,.401)

"BLD",836,"KRN","B",.402,.402)

"BLD",836,"KRN","B",.403,.403)

"BLD",836,"KRN","B",.5,.5)

"BLD",836,"KRN","B",.84,.84)

"BLD",836,"KRN","B",3.6,3.6)

"BLD",836,"KRN","B",3.8,3.8)

"BLD",836,"KRN","B",9.2,9.2)

"BLD",836,"KRN","B",9.8,9.8)

"BLD",836,"KRN","B",19,19)

"BLD",836,"KRN","B",19.1,19.1)

"BLD",836,"KRN","B",101,101)

"BLD",836,"KRN","B",409.61,409.61)

"BLD",836,"KRN","B",771,771)

"BLD",836,"KRN","B",870,870)

"BLD",836,"KRN","B",8989.51,8989.51)

"BLD",836,"KRN","B",8989.52,8989.52)

"BLD",836,"KRN","B",8994,8994)

"BLD",836,"MSC")
C:\R\DVA\GFTDI167A.KID
"BLD",836,"MSCOM")
FROM GFT
"BLD",836,"PRE")
DIPR167
"BLD",836,"QDEF")
^^^^YES
"BLD",836,"QUES",0)
^9.62^^
"BLD",836,"REQB",0)
^9.611^2^2
"BLD",836,"REQB",1,0)
DI*22.0*39^1
"BLD",836,"REQB",2,0)
DI*22.0*165^1
"BLD",836,"REQB","B","DI*22.0*165",2)

"BLD",836,"REQB","B","DI*22.0*39",1)

"INIT")
POST^DIPR167
"MBREQ")
0
"PKG",5,-1)
1^1
"PKG",5,0)
VA FILEMAN^DI^FM INIT
"PKG",5,20,0)
^9.402P^^
"PKG",5,22,0)
^9.49I^1^1
"PKG",5,22,1,0)
22.0^2990330^3121119^1163
"PKG",5,22,1,"PAH",1,0)
167^3121204^1163
"PKG",5,22,1,"PAH",1,1,0)
^^1^1^3121204
"PKG",5,22,1,"PAH",1,1,1,0)
See the Patch Module on FORUM for complete information.
"PRE")
DIPR167
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
YES
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
14
"RTN","DDS01")
0^12^B28553785^B25171979
"RTN","DDS01",1,0)
DDS01 ;SFISC/MLH,MKO-PROCESS BLOCK ;19OCT2012
"RTN","DDS01",2,0)
 ;;22.0;VA FileMan;**8,39,167**;Mar 30, 1999;Build 18
"RTN","DDS01",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DDS01",4,0)
 ;***BE CAREFUL PUTTING TAGS INTO THIS IMPORTANT ROUTINE!  $T LOOKS FOR A NON-EXISTENCE OF A TAG!****
"RTN","DDS01",5,0)
 ;
"RTN","DDS01",6,0)
 F  D IN,CHK Q:"^Q^NB^NP^"[(U_DDACT_U)
"RTN","DDS01",7,0)
 Q
"RTN","DDS01",8,0)
 ;
"RTN","DDS01",9,0)
IN K DDSBR,DDSFLD,DDSO,DDSU,DIR
"RTN","DDS01",10,0)
 S:$D(@DDSREFS@(DDSPG,$S(DDO:DDSBK,1:0),DDO,"N"))#2 DDSU("N")=^("N")
"RTN","DDS01",11,0)
 ;
"RTN","DDS01",12,0)
 I DDM,'$G(DDSKM) D CLRMSG^DDS
"RTN","DDS01",13,0)
 G:'DDO COM^DDSCOM
"RTN","DDS01",14,0)
 ;
"RTN","DDS01",15,0)
 S DDSOSV=0
"RTN","DDS01",16,0)
 F DDSI=0,1,2,4,7,10:1:14,20 D  ;MOVE FIELD DEFINITION INTO DDSO ARRAY
"RTN","DDS01",17,0)
 . S:$D(^DIST(.404,DDSBK,40,DDO,DDSI))#2 DDSO(DDSI)=^(DDSI)
"RTN","DDS01",18,0)
 K DDSI
"RTN","DDS01",19,0)
 ;
"RTN","DDS01",20,0)
 S DDSFLD=$G(DDSO(1)) K DDSO(1)
"RTN","DDS01",21,0)
 I $P($G(DDSO(0)),U,3)=2 N DDP S DDP=0,DDSFLD=DDO_","_DDSBK
"RTN","DDS01",22,0)
 ;
"RTN","DDS01",23,0)
 I DDSFLD]"",DDSDA]"" M DDSU=@DDSREFT@("F"_DDP,DDSDA,DDSFLD) ;Restore field's specs & value from ^TMP
"RTN","DDS01",24,0)
 ;
"RTN","DDS01",25,0)
 I '$D(DDSREP)!DDSDA,$$UNED($G(DDSU("A")),$G(DDSO(4)),$G(DDSU("N"))) D  Q
"RTN","DDS01",26,0)
 . I $D(DDSACT)#2 S DDACT=DDSACT K DDSACT
"RTN","DDS01",27,0)
 . S:DDACT="U" DDACT="L"
"RTN","DDS01",28,0)
 . S:DDACT="D" DDACT="R"
"RTN","DDS01",29,0)
 . D CURSOR Q:$D(DDSBR)#2
"RTN","DDS01",30,0)
 . S DDSCHKQ=1
"RTN","DDS01",31,0)
 K DDSACT
"RTN","DDS01",32,0)
 ;
"RTN","DDS01",33,0)
 S (X,DDSOLD)=$G(DDSU("D")),DDSEXT=$G(DDSU("X"),X)
"RTN","DDS01",34,0)
 ;
"RTN","DDS01",35,0)
 X:$G(DDSO(11))'?."^" DDSO(11) ;PRE-ACTION
"RTN","DDS01",36,0)
 I $D(DDSBR)#2 D BR^DDS2 Q:$D(DDSBR)#2
"RTN","DDS01",37,0)
 I DDACT]"",$T(@DDACT)]"" D @DDACT S DDSCHKQ=1 Q
"RTN","DDS01",38,0)
 ;
"RTN","DDS01",39,0)
 S DIR0N=1 Q:DDSFLD=""
"RTN","DDS01",40,0)
 ;
"RTN","DDS01",41,0)
 S:$G(^DD(DDP,DDSFLD,0))'?."^" DDSU("DD")=^(0)
"RTN","DDS01",42,0)
 I $D(DDSU("N"))[0 S DDACT="N" Q
"RTN","DDS01",43,0)
 Q:$D(DDSO(2))[0
"RTN","DDS01",44,0)
 ;
"RTN","DDS01",45,0)
 D:$G(@DDSREFT@("HLP"))>0 HLP^DDSMSG()
"RTN","DDS01",46,0)
 K DDSKM,DDQ
"RTN","DDS01",47,0)
 ;
"RTN","DDS01",48,0)
 S DIR0=$P(@DDSREFS@(DDSPG,DDSBK,DDO,"D"),U,1,3)
"RTN","DDS01",49,0)
 S:$P(@DDSREFS@(DDSPG,DDSBK,DDO,"D"),U,10) $P(DIR0,U,6)=1
"RTN","DDS01",50,0)
 S:$P($G(DDSREP),U,3)>1 $P(DIR0,U)=$P(DIR0,U)+$P(DDSREP,U,3)-1
"RTN","DDS01",51,0)
 ;
"RTN","DDS01",52,0)
 I $D(DDSREP),'DDSDA,$P(DDSO(0),U,3)'=2 K DDSU("DD") G SEL^DDSM
"RTN","DDS01",53,0)
 I $D(DDSU("M"))#2 S DDSGL=U_$P(DDSU("M"),U,2) G:'DDSU("M") WP^DDSWP
"RTN","DDS01",54,0)
 S DIR("B")=$G(DDSU("X"),DDSOLD)
"RTN","DDS01",55,0)
 ;
"RTN","DDS01",56,0)
 I $D(DDSU("M"))#2 D SEL^DDS5 G:X'=DDSOLD&(DDACT="N") EXT
"RTN","DDS01",57,0)
 I $P($G(DDSO(0)),U,3)'=2 S DIR(0)=DDP_","_DDSFLD_"O" ;IT'S A FIELD-TYPE READ
"RTN","DDS01",58,0)
 E  D DIR^DDSFO
"RTN","DDS01",59,0)
 D ^DIR K DIR,DUOUT,DIRUT,DIROUT ;DO THE READ!
"RTN","DDS01",60,0)
 I DIR0N S (X,Y)=DDSOLD Q
"RTN","DDS01",61,0)
 ;
"RTN","DDS01",62,0)
EXT I $E(X)=U!$D(DTOUT) S DIR0N=1 Q
"RTN","DDS01",63,0)
 G EXT^DDS02
"RTN","DDS01",64,0)
 ;
"RTN","DDS01",65,0)
CHK Q:$D(DDSBR)#2
"RTN","DDS01",66,0)
 I $G(DDSCHKQ)=1 K DDSCHKQ Q
"RTN","DDS01",67,0)
 G:$D(DTOUT) TO^DDS3
"RTN","DDS01",68,0)
 G:$E(X)=U UPA^DDS2
"RTN","DDS01",69,0)
 I $G(DDSFLD)=.01,X="",$G(DA) G ^DDS6
"RTN","DDS01",70,0)
 ;
"RTN","DDS01",71,0)
 I $P($G(DDSU("DD")),U,2)["I",$G(DDSOLD)]"" D  I %]"",X'=% S DDSNOED=1 ;UNEDITABLE FIELD ALREADY HAS A VALUE
"RTN","DDS01",72,0)
 .N DIERR S %=$$GET1^DIQ(DDSFILE,DDSDA,DDSFLD)
"RTN","DDS01",73,0)
 E  I $P($G(DDSU("DD")),U,5,99)["DINUM" S DDSNOED=1
"RTN","DDS01",74,0)
 E  S DDSNOED=$S($P($G(DDSU("A")),U,4)="":$P($G(DDSO(4)),U,4),1:$P($G(DDSU("A")),U,4)) ;FIELD 6.4 ('DISABLE EDITING) IN THE FIELD MULTIPLE
"RTN","DDS01",75,0)
 I 'DIR0N,$G(DDSFLD),$D(DDSU("M"))[0,$G(DDSCHKQ)'=2,DDSNOED K DDSNOED G UNED^DDS02
"RTN","DDS01",76,0)
 ;
"RTN","DDS01",77,0)
 K DDSCHKQ,DDSNOED
"RTN","DDS01",78,0)
 ;
"RTN","DDS01",79,0)
 I $G(DDSFLD)=.01,$G(DDSPTB)]"",$G(DDSREP)<2,'DIR0N D RPF^DDS7(DDP,DDSPTB,DDSDA,.DA)
"RTN","DDS01",80,0)
 X:$G(DDSO(12))'?."^" DDSO(12)
"RTN","DDS01",81,0)
 ;
"RTN","DDS01",82,0)
 I 'DIR0N,DDO,$G(DDSFLD)]"" D
"RTN","DDS01",83,0)
 . I $P($G(DDSO(0)),U,3)=2 N DDP S DDP=0
"RTN","DDS01",84,0)
 . S DDSCHG=1
"RTN","DDS01",85,0)
 . I DDSDA!'$D(DDSREP),+$G(DDSU("F"))'=1 S $P(@DDSREFT@("F"_DDP,DDSDA,DDSFLD,"F"),U)=1
"RTN","DDS01",86,0)
 . X:$G(DDSO(13))'?."^" DDSO(13)
"RTN","DDS01",87,0)
 . D:$D(@DDSREFS@("PT",DDP,DDSFLD)) RPB^DDS7(DDP,DDSFLD,DDSPG)
"RTN","DDS01",88,0)
 . D:$D(@DDSREFS@("COMP",DDP,DDSFLD,DDSPG)) RPCF^DDSCOMP(DDSPG)
"RTN","DDS01",89,0)
 ;
"RTN","DDS01",90,0)
 I $D(DDSBR)#2 D BR^DDS2 Q:$D(DDSBR)#2
"RTN","DDS01",91,0)
 I $T(@DDACT)]"" G @DDACT
"RTN","DDS01",92,0)
 I 'DDO G:X]"" ^DDS3 S DDSO(0)=0
"RTN","DDS01",93,0)
 ;
"RTN","DDS01",94,0)
 G:"^U^D^R^L^"[(U_DDACT_U) CURSOR
"RTN","DDS01",95,0)
 G:$D(DDSU("M"))[0 NF
"RTN","DDS01",96,0)
 G:DDSU("M") ^DDS5
"RTN","DDS01",97,0)
 D EDIT^DDSWP,R^DDSR
"RTN","DDS01",98,0)
 ;
"RTN","DDS01",99,0)
NF I 'DDO,DDSOSV S DDO=DDSOSV Q
"RTN","DDS01",100,0)
 ;
"RTN","DDS01",101,0)
 I DDO,$S($D(DDSREP):DDSDA,1:1) D
"RTN","DDS01",102,0)
 . D:'$D(DDSU("M"))
"RTN","DDS01",103,0)
 .. I $G(@DDSREFS@("ASUB",DDSPG,DDSBK,DDO))]"" S DDSSTACK="`"_^(DDO)
"RTN","DDS01",104,0)
 .. E  I $P($G(DDSO(7)),U,2)]"" S DDSSTACK=$P(DDSO(7),U,2)
"RTN","DDS01",105,0)
 . X:$G(DDSO(10))'?."^" DDSO(10)
"RTN","DDS01",106,0)
 ;
"RTN","DDS01",107,0)
 I $D(DDSSTACK) D ^DDSSTK,R^DDS3 K DDSU
"RTN","DDS01",108,0)
 I $D(DDSBR)#2 D BR^DDS2 Q:$D(DDSBR)#2
"RTN","DDS01",109,0)
 S DDACT="N"
"RTN","DDS01",110,0)
 ;
"RTN","DDS01",111,0)
CURSOR N ACT,B,BLK,BLK0,FND,N,REP
"RTN","DDS01",112,0)
 K DDSACT
"RTN","DDS01",113,0)
 S:$D(DDSU("N"))[0 DDSU("N")=$G(@DDSREFS@(DDSPG,DDSBK,DDO,"N"))
"RTN","DDS01",114,0)
 S FND=0
"RTN","DDS01",115,0)
 I $D(DDSREP),DDO D MNAV^DDSM(.FND) Q:FND
"RTN","DDS01",116,0)
 ;
"RTN","DDS01",117,0)
 S B=U,(BLK,BLK0)=DDSBK,N=DDSU("N"),ACT=$S(DDO&$G(DDSDN):"N",1:DDACT)
"RTN","DDS01",118,0)
 F  D  Q:FND!$D(REP)
"RTN","DDS01",119,0)
 . S DDO=$P(N,U,$L($P("U^D^R^L^N",ACT),U))
"RTN","DDS01",120,0)
 . I 'DDO S (DDO,DDSBK)=0,FND=1 Q
"RTN","DDS01",121,0)
 . ;
"RTN","DDS01",122,0)
 . S DDSBK=$P(DDO,",",2),DDO=+DDO
"RTN","DDS01",123,0)
 . I DDSBK D  Q:$D(REP)
"RTN","DDS01",124,0)
 .. I $P($G(@DDSREFS@(DDSPG,DDSBK)),U,4) D
"RTN","DDS01",125,0)
 ... S DDO=$P($G(@DDSREFS@(DDSPG,DDSBK)),U,9),ACT="N"
"RTN","DDS01",126,0)
 .. E  S ACT=DDACT
"RTN","DDS01",127,0)
 .. I '$P($G(@DDSREFT@(DDSPG,DDSBK)),U),DDSDAORG S B=B_DDSBK_U
"RTN","DDS01",128,0)
 .. E  I $P(@DDSREFS@(DDSPG,DDSBK),U,7)>1 S REP=1,DDACT="NB",DDSBR=""
"RTN","DDS01",129,0)
 . E  S DDSBK=BLK
"RTN","DDS01",130,0)
 . ;
"RTN","DDS01",131,0)
 . I B'[(U_DDSBK_U) S FND=1 S:DDSBK'=BLK0 DDACT="NB",DDSBR="",DDSACT=ACT
"RTN","DDS01",132,0)
 . ;
"RTN","DDS01",133,0)
 . S:'FND N=$G(@DDSREFS@(DDSPG,DDSBK,+DDO,"N")),BLK=DDSBK
"RTN","DDS01",134,0)
 Q
"RTN","DDS01",135,0)
 ;
"RTN","DDS01",136,0)
NP ;;
"RTN","DDS01",137,0)
 G:$D(DDSREP)&DDO PGDN^DDSM
"RTN","DDS01",138,0)
 S:DDSNP]"" DDSPG=DDSNP
"RTN","DDS01",139,0)
 S:DDSNP="" DDACT="N"
"RTN","DDS01",140,0)
 Q
"RTN","DDS01",141,0)
PP ;;
"RTN","DDS01",142,0)
 G:$D(DDSREP)&DDO PGUP^DDSM
"RTN","DDS01",143,0)
 S DDSPG=$$PP^DDS5(.Y)
"RTN","DDS01",144,0)
 S DDACT=$S(Y=1:"NP",1:"N")
"RTN","DDS01",145,0)
 Q
"RTN","DDS01",146,0)
NB ;;
"RTN","DDS01",147,0)
 S DDSBK=$$NB^DDS5(.Y),DDACT=$S(Y=1:"NB",1:"N")
"RTN","DDS01",148,0)
 Q
"RTN","DDS01",149,0)
SEL ;;
"RTN","DDS01",150,0)
 I $G(DDSSEL) W $C(7) Q
"RTN","DDS01",151,0)
 S DDACT="N" G PG^DDSRSEL
"RTN","DDS01",152,0)
SV ;;
"RTN","DDS01",153,0)
 G SV^DDS02
"RTN","DDS01",154,0)
QT ;;
"RTN","DDS01",155,0)
 G QT^DDS3
"RTN","DDS01",156,0)
EX ;;
"RTN","DDS01",157,0)
 G EX^DDS3
"RTN","DDS01",158,0)
CL ;;
"RTN","DDS01",159,0)
 G CL^DDS3
"RTN","DDS01",160,0)
RF ;;
"RTN","DDS01",161,0)
 S DDACT="N"
"RTN","DDS01",162,0)
 G R^DDSR
"RTN","DDS01",163,0)
 ;
"RTN","DDS01",164,0)
UNED(ATT,DEF,N) ;
"RTN","DDS01",165,0)
 Q $S(N="":1,$P(ATT,U,4)="":$P(DEF,U,4)=1,1:$P(ATT,U,4)=1)&'$P(N,U,11)
"RTN","DICE")
0^2^B18620023^B18028605
"RTN","DICE",1,0)
DICE ;SFISC/GFT-CREATE AN XREF ;17DEC2010
"RTN","DICE",2,0)
 ;;22.0;VA FileMan;**26,58,165,167**;Mar 30, 1999;Build 18
"RTN","DICE",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DICE",4,0)
 S %=2,DCOND="CROSS-REFERENCE" W !,"WANT TO CREATE A NEW ",DCOND," FOR THIS FIELD" D YN^DICN G Q:%-1
"RTN","DICE",5,0)
N F DQ=1:1 Q:'$D(^DD(DI,DA,1,DQ))
"RTN","DICE",6,0)
 W !,"CROSS-REFERENCE NUMBER: "_DQ_"// " R X:DTIME S:'$T DTOUT=1 G Q:'$T S:X="" X=DQ G NQ:X'?.N!'X,X:$D(^(X)) S DQ=X
"RTN","DICE",7,0)
 S DH=0,DIC="^DOPT(""DICR"",",DIC(0)="EQA",DIC("B")=1,DIC("S")="I 1"_$P(",Y-4",U,DUZ(0)'="@")_$P(",Y-5",U,$D(^DD(J(N),0,"LOOK"))>0)_$P(",Y-7",U,'$D(^XMB(3.6))) S:$P($G(^DD($$FNO^DILIBF(J(N)),0,"DI")),U)="Y" DIC("S")=DIC("S")_",Y-4,Y-6,Y-7"
"RTN","DICE",8,0)
 D ^DIC K DIC D QQ S Y=+Y G X:Y<0,6^DICE0:Y=6,^DICE7:Y=7 ;1=REGULAR 2=KWIC 3=MNEMONIC 4=MUMPS 5=SOUNDEX 6=TRIGGER 7=BULLETIN
"RTN","DICE",9,0)
 G A:'N W !,"WANT TO ",DCOND," WHOLE FILE BY THIS FIELD" D YN^DICN G X:%<1 I %=1 S DH=N G A
"RTN","DICE",10,0)
 F DH=N-1:-1 Q:'DH  S %=1 W !,"WANT TO "_DCOND_" "_$P(^DD(J(N-DH),0),U,1)_" BY THIS FIELD" D YN^DICN G X:%<1,A:%=1
"RTN","DICE",11,0)
A S %=1,DIK="" I Y=1!(Y=4) W !,"WANT ",DCOND," TO BE USED FOR LOOKUP AS WELL AS FOR SORTING" D YN^DICN G X:%<1 I %=2 S DIK="A"
"RTN","DICE",12,0)
 I Y=2 S DIKWIC="(,.?! '-/&:;)" W !,"PARSE ON THE FOLLOWING CHARACTERS: ",DIKWIC,"//" R X:DTIME S:'$T DTOUT=1 G Q:X=U!'$T S:X]"" DIKWIC=X I X["""" S X="?"
"RTN","DICE",13,0)
 I Y=2,X]"",X'?1P.P!(X?1"?"."?") W !?5,"Please enter the punctuation marks (except quotes) which will be used to ",!?5,"separate the words in this field." G A
"RTN","DICE",14,0)
 I Y=3 F I=0:0 S I=$O(^DD(J(N-DH),.01,1,I)) G X:I=""!(DL=.01&'DH) I $D(^(I,0)) S DE=$P(^(0),U,2) G CKF:DE?1U.UN
"RTN","DICE",15,0)
 I Y=4 D M G:$D(DIRUT) Q S:$D(XX(1)) X(1)=XX(1) S:$D(XX(2)) X(2)=XX(2) K XX
"RTN","DICE",16,0)
 ;GFT MODIFIED NEXT 6 LINES: INDEX MUST BE UPPER-CASE, START WITH PROPER LETTER, AND NOT BE A DUPLICATE
"RTN","DICE",17,0)
 N DISTART S DISTART=$S(Y-1&(Y-3)!(DA-.01):67,1:66) ;START WITH "B" OR "C"
"RTN","DICE",18,0)
IX F X=DISTART:1 S DE=DIK_$C(X) D  I $D(DE) G CKF:DUZ(0)'="@" W !,"INDEX: ",DE,"// " R X:DTIME S:'$T DTOUT=1 S:X]"" DE=X G Q:X[U!'$T D  G IX:'$D(DE) Q
"RTN","DICE",19,0)
 .I $D(^DD(J(N-DH),0,"IX",DE))!$D(^DD("IX","BB",J(N-DH),DE)) K DE Q  ;SUBROUTINE CALLED TWICE!  KILLS 'DE' IF NO GOOD   CAN'T ALREADY EXIST
"RTN","DICE",20,0)
 .I DE'?1U.UN K DE Q
"RTN","DICE",21,0)
 .I DIK="A" K:DE'?1"A".E DE Q
"RTN","DICE",22,0)
 .E  I DE?1"A".E K DE
"RTN","DICE",23,0)
CKF W !,"..." S DREF=Y
"RTN","DICE",24,0)
 D ^DICE0 W ! D DSC,DIEZ^DIU0,F G Q
"RTN","DICE",25,0)
 ;
"RTN","DICE",26,0)
F S X=^DD(J(N),DA,1,DQ,1),%=1 I DREF=1!(DREF=4)!$D(^("CONDITION")),@("$O("_DIU_"0))>0") D  G:'% F
"RTN","DICE",27,0)
 . W !!,"DO YOU WANT TO CROSS-REFERENCE EXISTING DATA NOW"
"RTN","DICE",28,0)
 . S %=0 D YN^DICN Q:%
"RTN","DICE",29,0)
 . W !!,"Enter 'YES' to execute the new set logic now."
"RTN","DICE",30,0)
 . W !,"Otherwise, enter 'NO'."
"RTN","DICE",31,0)
 D DD^DICD:%=1 I $D(DDA),DDA="" S DDA="N" D XA^DICATTA
"RTN","DICE",32,0)
 K % Q
"RTN","DICE",33,0)
 ;
"RTN","DICE",34,0)
M N Y,DQ
"RTN","DICE",35,0)
 F I=1,2 S DIR(0)=".1,"_I D  Q:$D(DTOUT)!$D(DUOUT)
"RTN","DICE",36,0)
 . F  D ^DIR Q:$D(DTOUT)!$D(DUOUT)  I X]"" S XX(I)=X Q
"RTN","DICE",37,0)
 K DIR Q
"RTN","DICE",38,0)
 ;
"RTN","DICE",39,0)
Q D QQ K DE,DB,DREF,DCOND,DICOMPX,I,DQ,DA,DH,DIK,DIC,N,DL,J,X,Y,A,XX Q
"RTN","DICE",40,0)
 ;
"RTN","DICE",41,0)
EDT ;
"RTN","DICE",42,0)
 I DH(DQ,4) D R^DICD Q:'$D(DICD)  S DQ=DICD
"RTN","DICE",43,0)
 I $D(DDA) S DDA="E" D XS^DICATTA
"RTN","DICE",44,0)
 W ! F A0=1:1:2 S A1(A0)=^DD(J(N),DA,1,DQ,A0)
"RTN","DICE",45,0)
 S A0=DI,DR=$S(DUZ(0)="@"&($P(DH(DQ),U,3)["MUMPS"):"1:3;10;666",DUZ(0)="@"&($P(DH(DQ),U,3)]""):"3;10;666",1:"3;10") D ED ;NOREINDEX  PATCH 167
"RTN","DICE",46,0)
 F A0=1:1:2 I A1(A0)'=^DD(J(N),DA,1,DQ,A0) S ^("DT")=DT,DREF=4 D DIEZ^DIU0,KOLD^DICD,F,D^DICD Q
"RTN","DICE",47,0)
 K A0,A1 I $D(DDA) D XA^DICATTA
"RTN","DICE",48,0)
 Q
"RTN","DICE",49,0)
 ;
"RTN","DICE",50,0)
ED S:$D(DA(1))#2 A1(3)=DA(1) S DICD=DL,DA(2)=A0,DA(1)=DA,DA=DQ,DIE="^DD("_DA(2)_","_DA(1)_",1," D DIE K DIE,DR
"RTN","DICE",51,0)
 S DL=DICD,DQ=DA,DA=DA(1) S:$D(A1(3)) DA(1)=A1(3) K DICD Q
"RTN","DICE",52,0)
 ;
"RTN","DICE",53,0)
DIE N J,N,DI,A1 D ^DIE Q
"RTN","DICE",54,0)
DSC S A0=J(N),DR="3;4///"_DT_";10" D ED K A0 Q
"RTN","DICE",55,0)
 ;
"RTN","DICE",56,0)
NQ I X'[U D HLP G N
"RTN","DICE",57,0)
X W $C(7),"??" G Q
"RTN","DICE",58,0)
 ;
"RTN","DICE",59,0)
QQ K ^UTILITY("DICE",$J),DBOOL,DLAY,DQI,DICOMPX,DIN,DCNEW,DFLD,DREF,DENEW,DLOC,DSUB,DHI,DOLD,DNEW,%X,V
"RTN","DICE",60,0)
 Q
"RTN","DICE",61,0)
HLP ; Traditional Cross Reference Help - Called From NQ
"RTN","DICE",62,0)
 ; SF-CIOFO/SO 1/12/00
"RTN","DICE",63,0)
 W !
"RTN","DICE",64,0)
 W !,?5,"You may use the number shown if you are the custodian of the file this"
"RTN","DICE",65,0)
 W !,?5,"cross-reference is in.  If you are not the custodian of the file, you"
"RTN","DICE",66,0)
 W !,?5,"should select a number that corresponds with a numberspace for which you"
"RTN","DICE",67,0)
 W !,?5,"have custody.  Questions regarding numberspace custody may be referred"
"RTN","DICE",68,0)
 W !,?5,"to:  DBA@FORUM.DOMAIN.EXT",!
"RTN","DICE",69,0)
 Q
"RTN","DIK")
0^7^B47561240^B37897212
"RTN","DIK",1,0)
DIK ;SFISC/GFT,YJK,XAK-GATHER A FILE'S XREFS TO EXECUTE ;1NOV2012
"RTN","DIK",2,0)
 ;;22.0;VA FileMan;**41,109,160,167**;Mar 30, 1999;Build 18
"RTN","DIK",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DIK",4,0)
 Q:"(,"'[$E($RE(DIK))  Q:'$G(DA)  Q:'$D(@(DIK_"DA)"))  Q:$P($G(^DD($$GLO^DILIBF(DIK),0,"DI")),U,2)["Y"&'$D(DIOVRD)&'$G(DIFROM)  Q:DA'>0
"RTN","DIK",5,0)
 N DIKJ,DIKS,DIKZ1,DIN,DH,DU,DV,DW,DIKDA,DIAU,DIKALLR
"RTN","DIK",6,0)
 D CHKS I $D(DIKZ1) N DIKIL S DIKIL=1 G @DIKGP
"RTN","DIK",7,0)
 S X=2 D DD G ^DIK1
"RTN","DIK",8,0)
 ;
"RTN","DIK",9,0)
DD1 N DISKIPIN D D,A Q
"RTN","DIK",10,0)
 ;
"RTN","DIK",11,0)
 ;
"RTN","DIK",12,0)
DISKIPIN(DISKIPIN) ;ALSO CALLED FROM DIU1
"RTN","DIK",13,0)
 K DISKIPIN S DISKIPIN=1 D DDGO
"RTN","DIK",14,0)
 F DV=0:0 S DV=$O(^DD("IX","B",+$P($G(@(DIK_"0)")),U,2),DV)) Q:'DV  I $G(^DD("IX",DV,"NOREINDEX")) S DISKIPIN=DISKIPIN+1
"RTN","DIK",15,0)
 S DISKIPIN=DISKIPIN-1 Q  ;RETURN THE NUMBER OF SKIPPED INDEXES
"RTN","DIK",16,0)
 ;
"RTN","DIK",17,0)
DD ;CALLED FROM DIKZ0
"RTN","DIK",18,0)
 N DISKIPIN
"RTN","DIK",19,0)
DDGO D DIKJ N DIKCHK S DIKCHK=1,DV=0 D D,A
"RTN","DIK",20,0)
 I $G(DIK(0))["s" S DU=1 Q
"RTN","DIK",21,0)
E S DV=$O(^DD(DH,"SB",DV))
"RTN","DIK",22,0)
 I DV>0 S DU=$O(^(DV,0)) G E:'$D(^DD(DV,.01,0)),E:$P(^(0),U,2)["W" S DW=$P($P(^DD(DH,DU,0),U,4),";") S:+DW'=DW DW=""""_DW_"""" S DV(DH,DU)=DW,DV(DH,DU,0)=DV,DU(DV)=DH D:$D(DIK0) CRT^DIKZ2 G E
"RTN","DIK",23,0)
 Q:$D(DIK0)
"RTN","DIK",24,0)
DH S DH=$O(DU(DH)) G:DH>0 DH:$D(DV(DH)),E
"RTN","DIK",25,0)
 F DH=DH(1):0 S DH=$O(DU(DH)) Q:DH'>0  D D,A
"RTN","DIK",26,0)
DV S DH=0 F  S DH=$O(DV(DH)) Q:'DH  S DU=0 F  S DU=$O(DV(DH,DU)) Q:'DU  I $G(DIKCHK),'$G(DIKCHK(DV(DH,DU,0))) S DV(DH,DU,"NOLOOP")=""
"RTN","DIK",27,0)
 S DU=1
"RTN","DIK",28,0)
 Q
"RTN","DIK",29,0)
 ;
"RTN","DIK",30,0)
DW I $O(^UTILITY("DIK",DIKJ,DH,DV,0))="" K ^UTILITY("DIK",DIKJ,DH,DV)
"RTN","DIK",31,0)
D S DV=$O(^DD(DH,"IX",DV)) Q:DV'>0  I '$D(^DD(DH,DV,0)) K ^DD(DH,"IX",DV) G D
"RTN","DIK",32,0)
 D 0
"RTN","DIK",33,0)
I F DW=0:0 S DW=$O(^DD(DH,DV,1,DW)) G DW:DW'>0  I $D(^(DW,X)),"Q"'[^(X),$D(^(0)) S %=^(0) D
"RTN","DIK",34,0)
 .I $G(^("NOREINDEX")),$G(DISKIPIN) S DISKIPIN(DISKIPIN)=%,DISKIPIN=DISKIPIN+1 Q
"RTN","DIK",35,0)
 .D INX
"RTN","DIK",36,0)
 ;
"RTN","DIK",37,0)
INX I %["TRIGGER" S %=^(X),^UTILITY("DIK",DIKJ,DH,DV,DW)="D RCR",^(DW,0)=% Q
"RTN","DIK",38,0)
 I %["BULLETIN MESSAGE",$G(DIK(0))["B" S %=$P("CREA^DELE",U,X)_"TE VALUE" W:$D(^(%)) !,"...('"_^(%)_"' BULLETIN WILL NOT BE TRIGGERED)..." Q
"RTN","DIK",39,0)
 I '$D(DIK0),X=2,$P(%,U),$P(%,U,2)]"",$P(%,U,3)="",+%=DH(1)&$G(DIKALLR)!$D(DU(+%)) D
"RTN","DIK",40,0)
 . S ^UTILITY("DIK",DIKJ,"KW",+%,$P(%,U,2))=DH_U_DV_U_DW
"RTN","DIK",41,0)
 . D CHK($G(DU(+%)),.DU,.DIKCHK)
"RTN","DIK",42,0)
 E  D
"RTN","DIK",43,0)
 . S ^UTILITY("DIK",DIKJ,DH,DV,DW)=^DD(DH,DV,1,DW,X)
"RTN","DIK",44,0)
 . D CHK(DH,.DU,.DIKCHK)
"RTN","DIK",45,0)
 Q
"RTN","DIK",46,0)
CHK(F,DU,DIKCHK) ;Set CHK(f) for file F and its parents
"RTN","DIK",47,0)
 Q:$D(DIK0)!'$G(DIKCHK)
"RTN","DIK",48,0)
 F  Q:'F  Q:$D(DIKCHK(F))  S DIKCHK(F)=1,F=$G(DU(F))
"RTN","DIK",49,0)
 Q
"RTN","DIK",50,0)
 ;
"RTN","DIK",51,0)
A F DV=0:0 S DV=$O(^DD(DH,"AUDIT",DV)) Q:DV'>0  D A1 ;FIND AUDITED FIELDS
"RTN","DIK",52,0)
 Q
"RTN","DIK",53,0)
A1 D 0 S ^UTILITY("DIK",DIKJ,DH,DV,99)="S DIIX="_(4-X)_" D:$G(DIK(0))'[""A"" AUDIT" D CHK(DH,.DU,.DIKCHK) Q
"RTN","DIK",54,0)
 ;
"RTN","DIK",55,0)
0 ;REMEMBER HOW TO GRAB THE FIELD'S VALUE
"RTN","DIK",56,0)
 S DW=$P(^DD(DH,DV,0),U,4),^UTILITY("DIK",DIKJ,DH,DV)=$P(DW,";",1),DW=$P(DW,";",2)
"RTN","DIK",57,0)
 S ^UTILITY("DIK",DIKJ,DH,DV,0)=$S(DW:"S X=$P($G(^(X)),U,"_DW_")",1:"S X=$E($G(^(X)),"_+$E(DW,2,9)_","_$P(DW,",",2)_")"),DW=0 Q
"RTN","DIK",58,0)
 ;
"RTN","DIK",59,0)
IX ;
"RTN","DIK",60,0)
 N DIKJ,DIKS,DIKZ1,DIN,DH,DU,DV,DW,DIKDA,DIKALLR
"RTN","DIK",61,0)
 D CHKS I $D(DIKZ1) N DIKKS S DIKKS=1 G @DIKGP
"RTN","DIK",62,0)
 S X=2,DIKNM=1 D DD,1^DIK1
"RTN","DIK",63,0)
IX1 ;
"RTN","DIK",64,0)
 N DIKJ,DIKS,DIKZ1,DIN,DH,DU,DV,DW,DIKDA,DIKSET,DIKALLR
"RTN","DIK",65,0)
 I '$D(DIKNM) D CHKS I $D(DIKZ1) N DIKST S DIKST=1 G @DIKGP
"RTN","DIK",66,0)
 S X=1,DIKSET=1 D DD,1^DIK1
"RTN","DIK",67,0)
 ;
"RTN","DIK",68,0)
 D INDEX^DIKC(DIK,.DA,"","",$E("K",$D(DIKNM)#2)_"S"_$E("RI",$D(DIFROM)#2+1)_$E("s",$G(DIK(0))["s"))
"RTN","DIK",69,0)
 G Q
"RTN","DIK",70,0)
 ;
"RTN","DIK",71,0)
IX2 ;
"RTN","DIK",72,0)
 Q:$D(@(DIK_"0)"))[0
"RTN","DIK",73,0)
 N DIKJ,DIKS,DIN,DH,DU,DV,DW,DIKDA,DIKALLR
"RTN","DIK",74,0)
 S X=2 D DD,1^DIK1
"RTN","DIK",75,0)
 D INDEX^DIKC(DIK,.DA,"","","K"_$E("RI",$D(DIFROM)#2+1)_$E("s",$G(DIK(0))["s"))
"RTN","DIK",76,0)
 G Q
"RTN","DIK",77,0)
 ;
"RTN","DIK",78,0)
IXALL ;
"RTN","DIK",79,0)
 N DIKJ,DIKS,DIKZ1,DIN,DH,DU,DV,DW,DIKDA,DIKSET,DIKALLR
"RTN","DIK",80,0)
 N DINO S X=1 D DISKIPIN(.DINO)
"RTN","DIK",81,0)
 D CHKS I $D(DIKZ1),'$G(DINO) N DIKSAT S DIKSAT=1,DA=0 G @DIKGP ;CAN'T DO COMPILED ROUTINE IF THERE ARE SOME WE MUST SKIP
"RTN","DIK",82,0)
 ;
"RTN","DIK",83,0)
 N DIKDASV,DIKSAVE
"RTN","DIK",84,0)
 M DIKDASV=DA S DIKDASV=0,DIKSAVE=DIK
"RTN","DIK",85,0)
 S (DA,DCNT)=0,X=1,DIKSET=1 D CNT^DIK1
"RTN","DIK",86,0)
 ;NOW FIRE NEW-STYLE SETS
"RTN","DIK",87,0)
 D INDEX^DIKC(DIKSAVE,.DIKDASV,"","","Sx"_$E("RI",$D(DIFROM)#2+1)_$E("s",$G(DIK(0))["s"))
"RTN","DIK",88,0)
 G Q
"RTN","DIK",89,0)
 ;
"RTN","DIK",90,0)
IXALL2 ;
"RTN","DIK",91,0)
 Q:$D(@(DIK_"0)"))[0
"RTN","DIK",92,0)
 N DIKJ,DIKS,DIN,DH,DU,DV,DW,DIKDA,DIKDASV,DIKSAVE,DIKALLR
"RTN","DIK",93,0)
 N DINO S X=2 D DISKIPIN(.DINO)
"RTN","DIK",94,0)
 M DIKDASV=DA S DIKDASV=0,DIKSAVE=DIK
"RTN","DIK",95,0)
 S DIKALLR=1,(DA,DCNT)=0,X=2 D CNT^DIK1
"RTN","DIK",96,0)
 ;NOW FIRE NEW-STYLE KILLS
"RTN","DIK",97,0)
 D INDEX^DIKC(DIKSAVE,.DIKDASV,"","","Kx"_$E("RI",$D(DIFROM)#2+1)_$E("s",$G(DIK(0))["s"))
"RTN","DIK",98,0)
 G Q
"RTN","DIK",99,0)
 ;
"RTN","DIK",100,0)
EN ;
"RTN","DIK",101,0)
 N DIKCRFIL,DIKCDIK,DIKJ,DIKS,DIKZ1,DIN,DH,DU,DV,DW,DIKDA,DIKALLR
"RTN","DIK",102,0)
 D N(1) G:'$D(DH)!'$D(DA) Q
"RTN","DIK",103,0)
 S DIKCRFIL=DH M DIKCDIK=DIK
"RTN","DIK",104,0)
 S DIKNM=1,X=2 D:$D(DIKNX) PR,1^DIK1
"RTN","DIK",105,0)
 ;
"RTN","DIK",106,0)
EN1 ;
"RTN","DIK",107,0)
 N DIKJ,DIKS,DIKZ1,DIN,DH,DU,DV,DW,DIKDA,DIKALLR
"RTN","DIK",108,0)
 D @$S('$D(DIKNM):"N(1)",1:"DIKJ") G:'$D(DH)!'$D(DA) Q
"RTN","DIK",109,0)
 I '$D(DIKNM) N DIKCRFIL,DIKCDIK S DIKCRFIL=DH M DIKCDIK=DIK
"RTN","DIK",110,0)
 S X=1 D:$D(DIKNX) PR,1^DIK1
"RTN","DIK",111,0)
 I $D(^DD("IX","AC",DIKCRFIL)) M DIK=DIKCDIK D INDEX^DIKC(DIKCRFIL,.DA,$P(DIK(1),U),$P(DIK(1),U,2,999),$E("K",$D(DIKNM))_"S"_$E("RI",$D(DIFROM)#2+1))
"RTN","DIK",112,0)
 G Q
"RTN","DIK",113,0)
 ;
"RTN","DIK",114,0)
EN2 ;
"RTN","DIK",115,0)
 N DIKCRFIL,DIKCDIK,DIKJ,DIKS,DIKZ1,DIN,DH,DU,DV,DW,DIKDA,DIKALLR
"RTN","DIK",116,0)
 D N(1) G:'$D(DH)!'$D(DA) Q
"RTN","DIK",117,0)
 S DIKCRFIL=DH M DIKCDIK=DIK
"RTN","DIK",118,0)
 S X=2 D:$D(DIKNX) PR,1^DIK1
"RTN","DIK",119,0)
 I $D(^DD("IX","AC",DIKCRFIL)) M DIK=DIKCDIK D INDEX^DIKC(DIKCRFIL,.DA,$P(DIK(1),U),$P(DIK(1),U,2,999),"K"_$E("RI",$D(DIFROM)#2+1))
"RTN","DIK",120,0)
 G Q
"RTN","DIK",121,0)
 ;
"RTN","DIK",122,0)
ENALL ;
"RTN","DIK",123,0)
 N DIKJ,DIKS,DIKZ1,DIN,DH,DU,DV,DW,DIKDA,DIKXREF,DIKDASV,DIKSAVE,DHSAVE,DIKALLR
"RTN","DIK",124,0)
 D N(0) G:'$D(DH) Q
"RTN","DIK",125,0)
 M DIKDASV=DA,DIKSAVE=DIK,DHSAVE=DH S DIKDASV=0
"RTN","DIK",126,0)
 S (DA,DCNT)=0,X=1 D PR,CNT^DIK1
"RTN","DIK",127,0)
 D:$D(^DD("IX","AC",DHSAVE)) INDEX^DIKC(DHSAVE,.DIKDASV,$P(DIKSAVE(1),U),$P(DIKSAVE(1),U,2,999),"Sx"_$E("RI",$D(DIFROM)#2+1))
"RTN","DIK",128,0)
 G Q
"RTN","DIK",129,0)
 ;
"RTN","DIK",130,0)
ENALL2 ;
"RTN","DIK",131,0)
 N DIKJ,DIKS,DIKZ1,DIN,DH,DU,DV,DW,DIKDA,DIKXREF,DIKDASV,DIKSAVE,DHSAVE,DIKALLR
"RTN","DIK",132,0)
 D N(0) G:'$D(DH) Q
"RTN","DIK",133,0)
 M DIKDASV=DA,DIKSAVE=DIK,DHSAVE=DH S DIKDASV=0
"RTN","DIK",134,0)
 S DIKALLR=1,(DA,DCNT)=0,X=2 D PR,CNT^DIK1
"RTN","DIK",135,0)
 D:$D(^DD("IX","AC",DHSAVE)) INDEX^DIKC(DHSAVE,.DIKDASV,$P(DIKSAVE(1),U),$P(DIKSAVE(1),U,2,999),"Kx"_$E("RI",$D(DIFROM)#2+1))
"RTN","DIK",136,0)
 G Q
"RTN","DIK",137,0)
 ;
"RTN","DIK",138,0)
 ;
"RTN","DIK",139,0)
N(REINDOK) Q:'$D(DIK)!'$D(DIK(1))!'$D(@(DIK_"0)"))  D DIKJ S DIKND=$P(DIK(1),U)
"RTN","DIK",140,0)
 I '$D(^DD(DH,"IX",DIKND)) K:'$D(^DD("IX","F",DH,DIKND)) DH Q
"RTN","DIK",141,0)
 I $P(DIK(1),U,2)="" D
"RTN","DIK",142,0)
 . S %=0 F A1=1:1 S %=$O(^DD(DH,DIKND,1,%)) Q:'%  I '$G(^(%,"NOREINDEX"))!REINDOK S DIKNX(A1)=% ;SKIP NON-RERUNNABLE INDEX IF NOT SPECIFIED PRECISELY AND IF THIS IS A MASS REINDEX
"RTN","DIK",143,0)
 E  F A1=1:1 Q:$P(DIK(1),U,A1+1)=""  S DIKNX(A1)=$P(DIK(1),U,A1+1)
"RTN","DIK",144,0)
 K A1,% Q
"RTN","DIK",145,0)
 ;
"RTN","DIK",146,0)
PR S DV=DIKND I '$D(^DD(DH,"IX",DV)),'$D(^DD(DH,"AUDIT",DV)) Q
"RTN","DIK",147,0)
 D 0 S DIKZ1=1 D CK K DIKZ1
"RTN","DIK",148,0)
 D:$D(^DD(DH,"AUDIT",DV)) A1 S DU=1 Q
"RTN","DIK",149,0)
 ;
"RTN","DIK",150,0)
CK Q:'$D(DIKNX(DIKZ1))
"RTN","DIK",151,0)
 F DW=0:0 S DW=$O(^DD(DH,DV,1,DW)) Q:DW'>0  I $D(^(DW,0)),(DW=DIKNX(DIKZ1))!($P(^(0),U,2)=DIKNX(DIKZ1)),$D(^(X)),"Q"'[^(X) S %=^(0) D INX
"RTN","DIK",152,0)
 S DIKZ1=DIKZ1+1 G CK
"RTN","DIK",153,0)
 ;
"RTN","DIK",154,0)
FREE(X) N V S V=$G(^UTILITY("DIK",X)) I 'V Q 1
"RTN","DIK",155,0)
 Q $H-1>V
"RTN","DIK",156,0)
 ;
"RTN","DIK",157,0)
DIKJ F DIKJ=$J:.01 I $$FREE(DIKJ) K ^UTILITY("DIK",DIKJ) S ^UTILITY("DIK",DIKJ)=$H Q  ;TO ENABLE RECURSIVE CALL, FIND A "$J" THAT'S UNUSED
"RTN","DIK",158,0)
INT K DIKS,DIN,DH,DU,DV,DW S U="^",DH=+$P(@(DIK_"0)"),U,2),DH(1)=DH Q
"RTN","DIK",159,0)
 ;
"RTN","DIK",160,0)
CHKS ;
"RTN","DIK",161,0)
 I $D(@(DIK_"0)"))[0 S DIKZ1=1,DIKGP="Q^DIK1" Q
"RTN","DIK",162,0)
 S DIKZ1=+$P(^(0),"^",2) I DIKZ1,$D(^DD(DIKZ1,0,"DIK")),$$ROUEXIST^DILIBF(^("DIK")) S DIKGP="^"_^DD(DIKZ1,0,"DIK") Q
"RTN","DIK",163,0)
 K DIKZ1 Q
"RTN","DIK",164,0)
 ;
"RTN","DIK",165,0)
Q K DIKND,DIKNX,DIKZ1,DIKNM,DIAU,DIG,DIH,DIV,DIW,%,DH Q
"RTN","DIKC")
0^10^B62037611^B61603904
"RTN","DIKC",1,0)
DIKC ;SFISC/MKO-FIRE INDEX FILE CROSS REFERENCES ;24OCT2012
"RTN","DIKC",2,0)
 ;;22.0;VA FileMan;**1,22,11,68,95,146,167**;Mar 30, 1999;Build 18
"RTN","DIKC",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DIKC",4,0)
 ;
"RTN","DIKC",5,0)
INDEX(DIFILE,DIREC,DIFLD,DIXREF,DICTRL) ;Fire Index file xrefs
"RTN","DIKC",6,0)
 N DA,DIF,DIKACT,DIKCT,DIKERR,DIKLOCK,DIKLOG,DIKON,DIKRFIL
"RTN","DIKC",7,0)
 N DIKTMP,DIKVAL,DIMF,DIROOT
"RTN","DIKC",8,0)
 ;
"RTN","DIKC",9,0)
 ;Initialization
"RTN","DIKC",10,0)
 S DIF=$E("D",$G(DICTRL)["D")
"RTN","DIKC",11,0)
 I DIF["D",'$D(DIQUIET) N DIQUIET S DIQUIET=1
"RTN","DIKC",12,0)
 I DIF["D",'$D(DIFM) N DIFM S DIFM=1 D INIZE^DIEFU
"RTN","DIKC",13,0)
 ;
"RTN","DIKC",14,0)
 ;Check (and convert) input parameters
"RTN","DIKC",15,0)
 D CHK^DIKC2 G:$G(DIKERR)]"" EXIT
"RTN","DIKC",16,0)
 ;
"RTN","DIKC",17,0)
 ;Setup variables
"RTN","DIKC",18,0)
 S DIKCT=$E("C",$G(DICTRL)["C")_$E("T",$G(DICTRL)["T")
"RTN","DIKC",19,0)
 S DIKLOG=$E("K",$G(DICTRL)["K")_$E("S",$G(DICTRL)["S")
"RTN","DIKC",20,0)
 S:DIKLOG="" DIKLOG=$E("K",DIKCT'["C")_$E("S",DIKCT'["T")
"RTN","DIKC",21,0)
 S DIKACT=$E("R",$G(DICTRL)["R")_$E("I",$G(DICTRL)["I")
"RTN","DIKC",22,0)
 S DIKRFIL=$S($G(DICTRL)["W":+$P(DICTRL,"W",2),1:DIFILE)
"RTN","DIKC",23,0)
 I $G(DICTRL)["k" D
"RTN","DIKC",24,0)
 . S DIKLOCK=+$P(DICTRL,"k",2)\1
"RTN","DIKC",25,0)
 . S:DIKLOCK<0 DIKLOCK=-DIKLOCK
"RTN","DIKC",26,0)
 . S:$E($P(DICTRL,"k",2))="-" DIKLOCK("STOP")=1
"RTN","DIKC",27,0)
 E  S DIKLOCK=1
"RTN","DIKC",28,0)
 ;
"RTN","DIKC",29,0)
LOAD ;Load xref information into @DIKTMP
"RTN","DIKC",30,0)
 S DIKTMP=$G(DICTRL("LOGIC"))
"RTN","DIKC",31,0)
 I $G(DIKTMP)="" D
"RTN","DIKC",32,0)
 . S DIKTMP=$$GETTMP^DIKC1("DIKC")
"RTN","DIKC",33,0)
 . I $G(DIXREF)?."^" D
"RTN","DIKC",34,0)
 .. I $G(DIFLD) D
"RTN","DIKC",35,0)
 ...D LOADFLD^DIKC1(DIKRFIL,DIFLD,DIKLOG_"W",DIKACT,DIKVAL,DIKTMP,DIKTMP,$E("i",$G(DICTRL)["i"),,$E("x",$G(DICTRL)["x"))
"RTN","DIKC",36,0)
 .. E  D LOADALL^DIKC1(DIKRFIL,DIKLOG,DIKACT,DIKVAL,DIKTMP,$E("s",$G(DICTRL)["s")_$E("i",$G(DICTRL)["i")_$E("x",$G(DICTRL)["x"),.DIMF)
"RTN","DIKC",37,0)
 . E  D LOADXREF^DIKC1(DIKRFIL,$G(DIFLD),DIKLOG,.DIXREF,DIKVAL,DIKTMP)
"RTN","DIKC",38,0)
 ;
"RTN","DIKC",39,0)
 D:DIKRFIL'=DIFILE SBINFO^DIKCU(DIKRFIL,.DIMF)
"RTN","DIKC",40,0)
 ;
"RTN","DIKC",41,0)
 ;Fire the xrefs for all records or the record specified in DA
"RTN","DIKC",42,0)
 I 'DA D
"RTN","DIKC",43,0)
 . L +@DIROOT:DIKLOCK E  D  Q:$G(DIKLOCK("STOP"))
"RTN","DIKC",44,0)
 .. S DIKLOCK=""
"RTN","DIKC",45,0)
 .. D:DIF["D" ERR^DIKCU2(112,DIFILE)
"RTN","DIKC",46,0)
 . D FIREALL(DIFILE,.DA,DIROOT,DIKLOG,.DIMF,DIKTMP,DIKON,"",DIKCT)
"RTN","DIKC",47,0)
 . L:DIKLOCK]"" -@DIROOT
"RTN","DIKC",48,0)
 E  D
"RTN","DIKC",49,0)
 . L +@DIROOT@(DA):DIKLOCK E  D  Q:$G(DIKLOCK("STOP"))
"RTN","DIKC",50,0)
 .. S DIKLOCK=""
"RTN","DIKC",51,0)
 .. D:DIF["D" ERR^DIKCU2(110,DIFILE,$$IENS^DIKCU(DIFILE,.DA))
"RTN","DIKC",52,0)
 . D:$D(@DIKTMP@(DIFILE)) FIRE(DIFILE,.DA,DIKLOG,DIKTMP,DIKON,"",DIKCT)
"RTN","DIKC",53,0)
 . D:$D(DIMF(DIFILE)) FIRESUB(DIFILE,.DA,DIROOT,DIKLOG,.DIMF,DIKTMP,DIKON,"",DIKCT)
"RTN","DIKC",54,0)
 . L:DIKLOCK]"" -@DIROOT@(DA)
"RTN","DIKC",55,0)
 ;
"RTN","DIKC",56,0)
 ;Cleanup ^TMP
"RTN","DIKC",57,0)
 K @DIKTMP
"RTN","DIKC",58,0)
 ;
"RTN","DIKC",59,0)
EXIT ;Move error messages if necessary
"RTN","DIKC",60,0)
 I DIF["D",$G(DIERR),$G(DICTRL("MSG"))]"" D CALLOUT^DIEFU(DICTRL("MSG"))
"RTN","DIKC",61,0)
 Q
"RTN","DIKC",62,0)
 ;
"RTN","DIKC",63,0)
FIREALL(DIFILE,DA,DIROOT,DILOG,DIMF,DIKTMP,DIKON,DIKEY,DIKCT) ;Fire xrefs, all recs
"RTN","DIKC",64,0)
 N DICNT,DIIENS,DILAST,DIXR
"RTN","DIKC",65,0)
 S DILOG=$G(DILOG),DIKON=$G(DIKON)
"RTN","DIKC",66,0)
 S DIIENS=$$IENS^DIKCU(DIFILE,.DA)
"RTN","DIKC",67,0)
 ;
"RTN","DIKC",68,0)
 ;Kill entire indexes
"RTN","DIKC",69,0)
 I DILOG["K",$D(@DIKTMP@("KW",DIFILE)) D XECKW(DIFILE,.DA,$D(DIMF(DIFILE))>0)
"RTN","DIKC",70,0)
 I '$D(@DIKTMP@(DIFILE)),'$D(DIMF(DIFILE)) Q
"RTN","DIKC",71,0)
 ;
"RTN","DIKC",72,0)
 ;Loop through all records in the file
"RTN","DIKC",73,0)
 S (DICNT,DA)=0 F  S DA=$O(@DIROOT@(DA)) Q:DA'=+DA  D
"RTN","DIKC",74,0)
 . S $P(DIIENS,",")=DA
"RTN","DIKC",75,0)
 . S DICNT=DICNT+1
"RTN","DIKC",76,0)
 . D:$D(@DIKTMP@(DIFILE)) FIRE(DIFILE,.DA,DILOG,DIKTMP,DIKON,.DIKEY,DIKCT,DIIENS)
"RTN","DIKC",77,0)
 . D:$D(DIMF(DIFILE)) FIRESUB(DIFILE,.DA,DIROOT,DILOG,.DIMF,DIKTMP,DIKON,.DIKEY,DIKCT)
"RTN","DIKC",78,0)
 ;
"RTN","DIKC",79,0)
 ;Update header node
"RTN","DIKC",80,0)
 I $D(@DIROOT@(0))#2 D
"RTN","DIKC",81,0)
 . S DILAST=$O(@DIROOT@(" "),-1) S:'DILAST DILAST=""
"RTN","DIKC",82,0)
 . S:'DICNT DICNT=""
"RTN","DIKC",83,0)
 . S $P(@DIROOT@(0),U,4)=DICNT ;**DI*22*146
"RTN","DIKC",84,0)
 Q
"RTN","DIKC",85,0)
 ;
"RTN","DIKC",86,0)
FIRE(DIFILE,DA,DILOG,DIKTMP,DIKON,DIKEY,DIKCT,DIIENS) ;Fire xrefs, one record
"RTN","DIKC",87,0)
 N DI01,DIKCLOG,DINULL,DION,DIXR,I,J,X,X2,XN
"RTN","DIKC",88,0)
 S DILOG=$G(DILOG),DIKON=$G(DIKON)
"RTN","DIKC",89,0)
 S:$G(DIIENS)="" DIIENS=$$IENS^DIKCU(DIFILE,.DA)
"RTN","DIKC",90,0)
 ;
"RTN","DIKC",91,0)
 I DIKON="" S DIXR=0 F  S DIXR=$O(@DIKTMP@(DIFILE,DIXR)) Q:DIXR'=+DIXR  D
"RTN","DIKC",92,0)
 . D SETXARR(DIFILE,DIXR,DIKTMP,.DINULL) Q:DINULL
"RTN","DIKC",93,0)
 . I $G(DIKCT)="" D XECUTE(DIFILE,DIXR,DILOG,.X,.X,DIKTMP) Q
"RTN","DIKC",94,0)
 . ;
"RTN","DIKC",95,0)
 . K XN S XN="",I=0 F  S I=$O(X(I)) Q:'I  S XN(I)=""
"RTN","DIKC",96,0)
 . I $G(DIKCT)="C" D XECUTE(DIFILE,DIXR,"S",.XN,.X,DIKTMP) Q
"RTN","DIKC",97,0)
 . I $G(DIKCT)="T" D XECUTE(DIFILE,DIXR,"K",.X,.XN,DIKTMP) Q
"RTN","DIKC",98,0)
 ;
"RTN","DIKC",99,0)
 E  S DIXR=0 F  S DIXR=$O(@DIKTMP@(DIFILE,DIXR)) Q:DIXR'=+DIXR  D
"RTN","DIKC",100,0)
 . K DINFLD
"RTN","DIKC",101,0)
 . S DIKCLOG=""
"RTN","DIKC",102,0)
 . ;
"RTN","DIKC",103,0)
 . ;Set X2 array to new values
"RTN","DIKC",104,0)
 . S DION=$P(DIKON,U,2)
"RTN","DIKC",105,0)
 . D SETXARR(DIFILE,DIXR,DIKTMP,.DINULL,DION) M X2=X
"RTN","DIKC",106,0)
 . ;
"RTN","DIKC",107,0)
 . ;If SET requested, make sure no new values are null
"RTN","DIKC",108,0)
 . I DILOG["S" D
"RTN","DIKC",109,0)
 .. I 'DINULL S DIKCLOG="S"
"RTN","DIKC",110,0)
 .. E  I $P(DIKON,U,4)="N" S I=0 F  S I=$O(^DD("KEY","AU",DIXR,I)) Q:'I  D
"RTN","DIKC",111,0)
 ... S DIKEY(DIFILE,I,DIIENS)="n"
"RTN","DIKC",112,0)
 ... S J=0 F  S J=$O(DINULL(J)) Q:'J  S DIKEY(DIFILE,I,DIIENS,$P(DINULL(J),U),$P(DINULL(J),U,2))=$P(DINULL(J),U,3)
"RTN","DIKC",113,0)
 . ;
"RTN","DIKC",114,0)
 . ;Set X array to old values
"RTN","DIKC",115,0)
 . S DION=$P(DIKON,U)
"RTN","DIKC",116,0)
 . D SETXARR(DIFILE,DIXR,DIKTMP,.DINULL,DION,.DI01)
"RTN","DIKC",117,0)
 . ;
"RTN","DIKC",118,0)
 . ;If KILL requested, make sure no old values are null
"RTN","DIKC",119,0)
 . I DILOG["K",'DINULL S DIKCLOG="K"_DIKCLOG
"RTN","DIKC",120,0)
 . ;
"RTN","DIKC",121,0)
 . ;If "C" flag, set old .01 value to null
"RTN","DIKC",122,0)
 . I $G(DIKCT)="C",$D(DI01) D
"RTN","DIKC",123,0)
 .. S I=0 F  S I=$O(DI01(I)) Q:'I  S X(I)=""
"RTN","DIKC",124,0)
 .. S:$O(DI01(0))=$O(X(0)) X=""
"RTN","DIKC",125,0)
 .. S DIKCLOG=$TR(DIKCLOG,"K")
"RTN","DIKC",126,0)
 . ;
"RTN","DIKC",127,0)
 . ;If "T" flag, set all new values to null
"RTN","DIKC",128,0)
 . I $G(DIKCT)="T" S X2="",I=0 F  S I=$O(X2(I)) Q:'I  S X2(I)=""
"RTN","DIKC",129,0)
 . ;
"RTN","DIKC",130,0)
 . ;Execute the kill and set logic
"RTN","DIKC",131,0)
 . D XECUTE(DIFILE,DIXR,DIKCLOG,.X,.X2,DIKTMP)
"RTN","DIKC",132,0)
 . ;
"RTN","DIKC",133,0)
 . I DIKCLOG["S",$P(DIKON,U,3)="K",$D(^DD("KEY","AU",DIXR)) D
"RTN","DIKC",134,0)
 .. Q:$$UNIQUE^DIKK2(DIFILE,DIXR,.X2,.DA,DIKTMP)
"RTN","DIKC",135,0)
 .. S I=0 F  S I=$O(^DD("KEY","AU",DIXR,I)) Q:'I  S DIKEY(DIFILE,I,DIIENS)=""
"RTN","DIKC",136,0)
 Q
"RTN","DIKC",137,0)
 ;
"RTN","DIKC",138,0)
FIRESUB(DIFILE,DA,DIROOT,DILOG,DIMF,DIKTMP,DIKON,DIKEY,DIKCT) ;Fire xrefs for
"RTN","DIKC",139,0)
 ;all subfiles under DIFILE, for all subrecords under DA
"RTN","DIKC",140,0)
 Q:'$D(DIMF(DIFILE))
"RTN","DIKC",141,0)
 N DIMULTF,DISBFILE,DISBROOT,X
"RTN","DIKC",142,0)
 S DILOG=$G(DILOG),DIKON=$G(DIKON)
"RTN","DIKC",143,0)
 ;
"RTN","DIKC",144,0)
 ;Push down the DA array
"RTN","DIKC",145,0)
 D PUSHDA^DIKCU(.DA)
"RTN","DIKC",146,0)
 ;
"RTN","DIKC",147,0)
 ;Loop through DIMF array and fire xrefs for subfiles
"RTN","DIKC",148,0)
 S DIMULTF=0 F  S DIMULTF=$O(DIMF(DIFILE,DIMULTF)) Q:'DIMULTF  D
"RTN","DIKC",149,0)
 . S DISBROOT=$NA(@DIROOT@(DA(1),DIMF(DIFILE,DIMULTF))) Q:'$D(@DISBROOT)
"RTN","DIKC",150,0)
 . S DISBFILE=DIMF(DIFILE,DIMULTF,0)
"RTN","DIKC",151,0)
 . D FIREALL(DISBFILE,.DA,DISBROOT,DILOG,.DIMF,DIKTMP,DIKON,.DIKEY,DIKCT)
"RTN","DIKC",152,0)
 ;
"RTN","DIKC",153,0)
 ;Pop the DA array
"RTN","DIKC",154,0)
 D POPDA^DIKCU(.DA)
"RTN","DIKC",155,0)
 Q
"RTN","DIKC",156,0)
 ;
"RTN","DIKC",157,0)
XECUTE(DIFILE,DIXR,DILOG,DIKCX1,DIKCX2,DIKTMP) ;Xecute the logic in ^TMP
"RTN","DIKC",158,0)
 Q:$G(DILOG)=""
"RTN","DIKC",159,0)
 N DIKCOD,DIKCON,X,X1,X2
"RTN","DIKC",160,0)
 ;
"RTN","DIKC",161,0)
 ;Execute kill logic
"RTN","DIKC",162,0)
 I DILOG["K" D
"RTN","DIKC",163,0)
 . S DIKCOD=$G(@DIKTMP@(DIFILE,DIXR,"K")) Q:DIKCOD?."^"
"RTN","DIKC",164,0)
 . S DIKCON=$G(@DIKTMP@(DIFILE,DIXR,"KC"))
"RTN","DIKC",165,0)
 . I DIKCON'?."^" M X=DIKCX1,X1=DIKCX1,X2=DIKCX2 X DIKCON Q:'$G(X)  K X,X1,X2
"RTN","DIKC",166,0)
 . M X=DIKCX1,X1=DIKCX1,X2=DIKCX2
"RTN","DIKC",167,0)
 . X DIKCOD K X,X1,X2
"RTN","DIKC",168,0)
 ;
"RTN","DIKC",169,0)
 ;Execute set logic
"RTN","DIKC",170,0)
 I DILOG["S" D
"RTN","DIKC",171,0)
 . S DIKCOD=$G(@DIKTMP@(DIFILE,DIXR,"S")) Q:DIKCOD?."^"
"RTN","DIKC",172,0)
 . S DIKCON=$G(@DIKTMP@(DIFILE,DIXR,"SC"))
"RTN","DIKC",173,0)
 . I DIKCON'?."^" M X=DIKCX2,X1=DIKCX1,X2=DIKCX2 X DIKCON Q:'$G(X)  K X,X1,X2
"RTN","DIKC",174,0)
 . M X=DIKCX2,X1=DIKCX1,X2=DIKCX2
"RTN","DIKC",175,0)
 . X DIKCOD
"RTN","DIKC",176,0)
 Q
"RTN","DIKC",177,0)
 ;
"RTN","DIKC",178,0)
XECKW(DIFILE,DA,DIKSUB) ;Execute the logic to kill the entire index
"RTN","DIKC",179,0)
 N DIKFIL,DIKKW,DIKKW0,DIKLDIF,DIXR
"RTN","DIKC",180,0)
 ;
"RTN","DIKC",181,0)
 S DIXR=0 F  S DIXR=$O(@DIKTMP@("KW",DIFILE,DIXR)) Q:DIXR'=+DIXR  D
"RTN","DIKC",182,0)
 . S DIKKW=$G(@DIKTMP@("KW",DIFILE,DIXR)) Q:DIKKW?."^"
"RTN","DIKC",183,0)
 . S DIKKW0=$G(@DIKTMP@("KW",DIFILE,DIXR,0))
"RTN","DIKC",184,0)
 . ;
"RTN","DIKC",185,0)
 . ;If not a whole file xref, kill the entire index and quit
"RTN","DIKC",186,0)
 . I DIKKW0="" X DIKKW D  Q
"RTN","DIKC",187,0)
 .. I '$D(@DIKTMP@(DIFILE,DIXR,"S")) K @DIKTMP@(DIFILE,DIXR)
"RTN","DIKC",188,0)
 .. E  K @DIKTMP@(DIFILE,DIXR,"K"),@DIKTMP@(DIFILE,DIXR,"KC")
"RTN","DIKC",189,0)
 . ;
"RTN","DIKC",190,0)
 . ;Quit if this isn't a whole file xref or we're not doing subfiles
"RTN","DIKC",191,0)
 . Q:$P(DIKKW0,U)'="W"!'$G(DIKSUB)
"RTN","DIKC",192,0)
 . ;
"RTN","DIKC",193,0)
 . ;Kill the whole index after pushing DA the appropriate amount
"RTN","DIKC",194,0)
 . S DIKFIL=$P(DIKKW0,U,2),DIKLDIF=$P(DIKKW0,U,3)
"RTN","DIKC",195,0)
 . D PUSHDA^DIKCU(.DA,DIKLDIF)
"RTN","DIKC",196,0)
 . X DIKKW
"RTN","DIKC",197,0)
 . I '$D(@DIKTMP@(DIKFIL,DIXR,"S")) K @DIKTMP@(DIKFIL,DIXR)
"RTN","DIKC",198,0)
 . E  K @DIKTMP@(DIKFIL,DIXR,"K"),@DIKTMP@(DIKFIL,DIXR,"KC")
"RTN","DIKC",199,0)
 . D POPDA^DIKCU(.DA,DIKLDIF)
"RTN","DIKC",200,0)
 Q
"RTN","DIKC",201,0)
 ;
"RTN","DIKC",202,0)
SETXARR(DIFILE,DIXR,DIKTMP,DINULL,DION,DI01) ;Loop through DIKTMP and set X array.
"RTN","DIKC",203,0)
 ;If any values used as subscripts are null, return
"RTN","DIKC",204,0)
 ; DINULL=1
"RTN","DIKC",205,0)
 ; DINULL(order#) = ""
"RTN","DIKC",206,0)
 ;                  or file^field^levDiff (for field type subscripts)
"RTN","DIKC",207,0)
 ; DI01(order#) = "" if order # is .01 field
"RTN","DIKC",208,0)
 ;
"RTN","DIKC",209,0)
 N DIKCX,DIKF,DIKO,X1,X2
"RTN","DIKC",210,0)
 K X,DI01,DINULL
"RTN","DIKC",211,0)
 S DINULL=0,(DIKF,DIKO)=$O(@DIKTMP@(DIFILE,DIXR,0)) Q:'DIKF
"RTN","DIKC",212,0)
 ;
"RTN","DIKC",213,0)
 S:$G(DION)="" DION=U
"RTN","DIKC",214,0)
 F  D  S DIKO=$O(@DIKTMP@(DIFILE,DIXR,DIKO)) Q:'DIKO
"RTN","DIKC",215,0)
 . K DIKCX M DIKCX=X
"RTN","DIKC",216,0)
 . X $G(@DIKTMP@(DIFILE,DIXR,DIKO))
"RTN","DIKC",217,0)
 . I $G(X)]"",$D(@DIKTMP@(DIFILE,DIXR,DIKO,"T")) X @DIKTMP@(DIFILE,DIXR,DIKO,"T")
"RTN","DIKC",218,0)
 . S:$D(X)#2 (DIKCX,DIKCX(DIKO))=X K X M X=DIKCX
"RTN","DIKC",219,0)
 . S:$P($G(@DIKTMP@(DIFILE,DIXR,DIKO,"F")),U,2)=.01 DI01(DIKO)=""
"RTN","DIKC",220,0)
 . I $G(X(DIKO))="",$G(@DIKTMP@(DIFILE,DIXR,DIKO,"SS")) S DINULL=1 S:$G(@DIKTMP@(DIFILE,DIXR,DIKO,"F")) DINULL(DIKO)=@DIKTMP@(DIFILE,DIXR,DIKO,"F")
"RTN","DIKC",221,0)
 ;
"RTN","DIKC",222,0)
 S:$D(X(DIKF))#2 X=$G(X(DIKF))
"RTN","DIKC",223,0)
 Q
"RTN","DIKC",224,0)
 ;
"RTN","DIKC",225,0)
 ;#110  The record is currently locked.
"RTN","DIKC",226,0)
 ;#112  The file is currently locked.
"RTN","DIKC1")
0^4^B26788475^B25573484
"RTN","DIKC1",1,0)
DIKC1 ;SFISC/MKO-LOAD XREF INFO ;19DEC2010
"RTN","DIKC1",2,0)
 ;;22.0;VA FileMan;**11,167**;Mar 30, 1999;Build 18
"RTN","DIKC1",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DIKC1",4,0)
 ;
"RTN","DIKC1",5,0)
 ;============================================
"RTN","DIKC1",6,0)
 ; LOADALL(File,Log,Activ,ValRt,Tmp,Flag,.MF)
"RTN","DIKC1",7,0)
 ;============================================
"RTN","DIKC1",8,0)
 ;Load all xrefs for a file. Uses the "AC" index on Root File.
"RTN","DIKC1",9,0)
 ;In:
"RTN","DIKC1",10,0)
 ; RFIL  = Root File #
"RTN","DIKC1",11,0)
 ; LOG   [ K : load kill logic
"RTN","DIKC1",12,0)
 ;       [ S : load set logic
"RTN","DIKC1",13,0)
 ; ACT   = Codes: IR
"RTN","DIKC1",14,0)
 ;          If ACT '= null, a xref is picked up only if ACT
"RTN","DIKC1",15,0)
 ;          and the Activity field (#.41) have codes in common.
"RTN","DIKC1",16,0)
 ; VALRT = Array Ref where old/new values are located
"RTN","DIKC1",17,0)
 ; TMP   = Root to store xref info
"RTN","DIKC1",18,0)
 ; FLAG  [ s : don't include subfiles under file
"RTN","DIKC1",19,0)
 ;       [ i : don't load index-type xrefs (only load whole file xrefs)
"RTN","DIKC1",20,0)
 ;       [ f : don't load field-type xrefs
"RTN","DIKC1",21,0)
 ;       [ r : don't load record-type xrefs
"RTN","DIKC1",22,0)
 ;       [ x : don't load "NOREINDEX" xrefs
"RTN","DIKC1",23,0)
 ;
"RTN","DIKC1",24,0)
 ;Out:
"RTN","DIKC1",25,0)
 ; MF(file#,mField#)   = multiple node
"RTN","DIKC1",26,0)
 ; MF(file#,mField#,0) = subfile#
"RTN","DIKC1",27,0)
 ;   Set only for those files/multiples that have xrefs
"RTN","DIKC1",28,0)
 ;   and only if FLAG '[ "s"
"RTN","DIKC1",29,0)
 ;
"RTN","DIKC1",30,0)
LOADALL(RFIL,LOG,ACT,VALRT,TMP,FLAG,MF) ;
"RTN","DIKC1",31,0)
 N XR
"RTN","DIKC1",32,0)
 ;
"RTN","DIKC1",33,0)
 ;Loop through "AC" index
"RTN","DIKC1",34,0)
 S XR=0 F  S XR=$O(^DD("IX","AC",RFIL,XR)) Q:'XR  D
"RTN","DIKC1",35,0)
 . ;Skip if no .01, wrong Activity, wrong Type, or wrong Execution
"RTN","DIKC1",36,0)
 . I $P($G(^DD("IX",XR,0)),U)="" K ^DD("IX","AC",RFIL,XR) Q
"RTN","DIKC1",37,0)
 . I $G(ACT)]"",$TR(ACT,$P(^DD("IX",XR,0),U,7),$TR($J("",$L($P(^(0),U,7)))," ","*"))'["*" Q
"RTN","DIKC1",38,0)
 . I $G(FLAG)["i",$P(^DD("IX",XR,0),U,8)="I" Q
"RTN","DIKC1",39,0)
 . I $G(FLAG)["f",$P(^DD("IX",XR,0),U,6)="F" Q
"RTN","DIKC1",40,0)
 . I $G(FLAG)["r",$P(^DD("IX",XR,0),U,6)="R" Q
"RTN","DIKC1",41,0)
NOREIN .I $G(FLAG)["x",$G(^DD("IX",XR,"NOREINDEX")) Q  ;PATCH 167
"RTN","DIKC1",42,0)
 . ;
"RTN","DIKC1",43,0)
 . ;Load xref
"RTN","DIKC1",44,0)
 . D CRV^DIKC2(XR,$G(VALRT),TMP)
"RTN","DIKC1",45,0)
 . D:$G(LOG)]"" LOG^DIKC2(XR,LOG,TMP)
"RTN","DIKC1",46,0)
 . D:$G(LOG)["K" KW^DIKC2(XR,TMP)
"RTN","DIKC1",47,0)
 Q:$G(FLAG)["s"
"RTN","DIKC1",48,0)
 ;
"RTN","DIKC1",49,0)
 ;Build info for all subfiles under FILE into arrays SB and MF
"RTN","DIKC1",50,0)
 N CHK,FIL,MFLD,PAR,SB
"RTN","DIKC1",51,0)
 D SUBFILES^DIKCU(RFIL,.SB,.MF)
"RTN","DIKC1",52,0)
 ;
"RTN","DIKC1",53,0)
 ;Load xref for each subfile
"RTN","DIKC1",54,0)
 S:$G(FLAG)'["s" FLAG=$G(FLAG)_"s"
"RTN","DIKC1",55,0)
 S SB=0 F  S SB=$O(SB(SB)) Q:'SB  D
"RTN","DIKC1",56,0)
 . D LOADALL(SB,$G(LOG),$G(ACT),$G(VALRT),TMP,FLAG)
"RTN","DIKC1",57,0)
 . Q:'$D(@TMP@(SB))
"RTN","DIKC1",58,0)
 . ;
"RTN","DIKC1",59,0)
 . ;Set CHK(f)="" flag for subfile and its antecedents
"RTN","DIKC1",60,0)
 . S PAR=SB F  Q:$D(CHK(PAR))  S CHK(PAR)=1,PAR=$G(SB(PAR)) Q:PAR=""
"RTN","DIKC1",61,0)
 ;
"RTN","DIKC1",62,0)
 ;Use the CHK array to get rid of unneeded elements in MF
"RTN","DIKC1",63,0)
 S FIL=0 F  S FIL=$O(MF(FIL)) Q:'FIL  D
"RTN","DIKC1",64,0)
 . S MFLD=0 F  S MFLD=$O(MF(FIL,MFLD)) Q:'MFLD  D
"RTN","DIKC1",65,0)
 .. K:'$D(CHK(MF(FIL,MFLD,0))) MF(FIL,MFLD)
"RTN","DIKC1",66,0)
 Q
"RTN","DIKC1",67,0)
 ;
"RTN","DIKC1",68,0)
 ;========================================
"RTN","DIKC1",69,0)
 ; LOADXREF(File,Fld,Log,.XRef,ValRt,Tmp)
"RTN","DIKC1",70,0)
 ;========================================
"RTN","DIKC1",71,0)
 ;Load specified xrefs. Uses the "AC" index on Root file if Index
"RTN","DIKC1",72,0)
 ;Names are passed in. Also, uses the "F" index, if Field is passed in.
"RTN","DIKC1",73,0)
 ;In:
"RTN","DIKC1",74,0)
 ;  RFIL  = if FLD is not passed in : Root File or subfile#
"RTN","DIKC1",75,0)
 ;                                    (required if XREF contains names)
"RTN","DIKC1",76,0)
 ;          if FLD is passed in : The file of the field
"RTN","DIKC1",77,0)
 ;                                (defaults to Root file of XREF)
"RTN","DIKC1",78,0)
 ;  FLD   = Field # (optional) (if passed in, a specified index is
"RTN","DIKC1",79,0)
 ;          loaded only if FLD is one of the cross-reference values.
"RTN","DIKC1",80,0)
 ;  LOG   [ K : load kill logic (incl. whole kill)
"RTN","DIKC1",81,0)
 ;        [ S : load set logic
"RTN","DIKC1",82,0)
 ; .XREF  = ^-delimited list of xref names or numbers;
"RTN","DIKC1",83,0)
 ;          (overflow in XREF(n) where n=1,2,...)
"RTN","DIKC1",84,0)
 ;  VALRT = Array Ref where old/new values are located
"RTN","DIKC1",85,0)
 ;  TMP   = Root to store info
"RTN","DIKC1",86,0)
 ;
"RTN","DIKC1",87,0)
LOADXREF(RFIL,FLD,LOG,XREF,VALRT,TMP) ;
"RTN","DIKC1",88,0)
 N I,N,PC,RF,XR,XRLIST
"RTN","DIKC1",89,0)
 ;
"RTN","DIKC1",90,0)
 ;Loop through XREF array
"RTN","DIKC1",91,0)
 S N=0,XRLIST=$G(XREF) F  Q:XRLIST=""  D
"RTN","DIKC1",92,0)
 . ;
"RTN","DIKC1",93,0)
 . ;Loop through each xref in XRLIST
"RTN","DIKC1",94,0)
 . F PC=1:1:$L(XRLIST,U) K XR S XR=$P(XRLIST,U,PC) D:XR]""
"RTN","DIKC1",95,0)
 .. ;
"RTN","DIKC1",96,0)
 .. ;Convert xref name to number, if necessary
"RTN","DIKC1",97,0)
 .. I XR'=+$P(XR,"E") D  Q:$D(XR)<2
"RTN","DIKC1",98,0)
 ... S I=0 F  S I=$O(^DD("IX","AC",RFIL,I)) Q:'I  D
"RTN","DIKC1",99,0)
 .... S:$P($G(^DD("IX",I,0)),U,2)=XR XR(I)=""
"RTN","DIKC1",100,0)
 .. E  Q:$P($G(^DD("IX",XR,0)),U)=""  S XR(XR)=""
"RTN","DIKC1",101,0)
 .. ;
"RTN","DIKC1",102,0)
 .. ;Load code from Cross-Reference Values multiple
"RTN","DIKC1",103,0)
 .. S XR=0 F  S XR=$O(XR(XR)) Q:'XR  D
"RTN","DIKC1",104,0)
 ... S RF=$P(^DD("IX",XR,0),U,9)
"RTN","DIKC1",105,0)
 ... I $G(FLD) Q:'$D(^DD("IX","F",$S($G(RFIL):RFIL,1:RF),FLD,XR))
"RTN","DIKC1",106,0)
 ... E  I $G(RFIL) Q:RFIL'=RF
"RTN","DIKC1",107,0)
 ... D CRV^DIKC2(XR,$G(VALRT),TMP)
"RTN","DIKC1",108,0)
 ... D:$G(LOG)]"" LOG^DIKC2(XR,LOG,TMP)
"RTN","DIKC1",109,0)
 ... D:$G(LOG)["K" KW^DIKC2(XR,TMP)
"RTN","DIKC1",110,0)
 . ;
"RTN","DIKC1",111,0)
 . ;Process next overflow
"RTN","DIKC1",112,0)
 . S N=$O(XREF(N)),XRLIST=$S(N:$G(XREF(N)),1:"")
"RTN","DIKC1",113,0)
 Q
"RTN","DIKC1",114,0)
 ;
"RTN","DIKC1",115,0)
 ;================================================================
"RTN","DIKC1",116,0)
 ; LOADFLD(File,Field,Log,Activ,ValRt,TmpF,TmpR,FList,RList,Flag)
"RTN","DIKC1",117,0)
 ;================================================================
"RTN","DIKC1",118,0)
 ;Get all xrefs for a field. Uses the "F" index on file/field.
"RTN","DIKC1",119,0)
 ;In:
"RTN","DIKC1",120,0)
 ; FIL   = File #
"RTN","DIKC1",121,0)
 ; FLD   = Field #
"RTN","DIKC1",122,0)
 ; LOG   [ K : load kill logic
"RTN","DIKC1",123,0)
 ;       [ S : load set logic
"RTN","DIKC1",124,0)
 ;       [ W : load entire kill logic (if LOG also [ "K")
"RTN","DIKC1",125,0)
 ; ACT   = codes: IR
"RTN","DIKC1",126,0)
 ;          If ACT is not null, a xref is picked up only if ACT
"RTN","DIKC1",127,0)
 ;          and the Activity field (#.41) have codes in common.
"RTN","DIKC1",128,0)
 ; VALRT = Array Ref where old/new values are located
"RTN","DIKC1",129,0)
 ; TMPF  = Root to store field-level xref info
"RTN","DIKC1",130,0)
 ; TMPR  = Root to store record-level xref info
"RTN","DIKC1",131,0)
 ; FLAG  [ i : don't load index-type xrefs (only load whole file xrefs)
"RTN","DIKC1",132,0)
 ;       [ f : don't load field-type xrefs
"RTN","DIKC1",133,0)
 ;       [ r : don't load record-type xrefs
"RTN","DIKC1",134,0)
 ;Out:
"RTN","DIKC1",135,0)
 ; .FLIST = ^-delimited list of field xrefs (overflow in FLIST(n))
"RTN","DIKC1",136,0)
 ; .RLIST = ^-delimited list of record xrefs (overflow in RLIST(n))
"RTN","DIKC1",137,0)
 ;
"RTN","DIKC1",138,0)
LOADFLD(FIL,FLD,LOG,ACT,VALRT,TMPF,TMPR,FLIST,RLIST,FLAG) ;
"RTN","DIKC1",139,0)
 N EXECFLD,TMP,XR
"RTN","DIKC1",140,0)
 K FLIST,RLIST S (FLIST,RLIST)=0,(FLIST(0),RLIST(0))=""
"RTN","DIKC1",141,0)
 S:$G(TMPR)="" TMPR=TMPF
"RTN","DIKC1",142,0)
 ;
"RTN","DIKC1",143,0)
 ;Loop through "F" index and pick up xrefs
"RTN","DIKC1",144,0)
 S XR=0 F  S XR=$O(^DD("IX","F",FIL,FLD,XR)) Q:'XR  D
"RTN","DIKC1",145,0)
 . I $P($G(^DD("IX",XR,0)),U)="" K ^DD("IX","F",FIL,FLD,XR) Q
"RTN","DIKC1",146,0)
 . S EXECFLD=$P(^DD("IX",XR,0),U,6)
"RTN","DIKC1",147,0)
 . I $G(ACT)]"",$TR(ACT,$P(^DD("IX",XR,0),U,7),$TR($J("",$L($P(^(0),U,7)))," ","*"))'["*" Q
"RTN","DIKC1",148,0)
 . I $G(FLAG)["i",$P(^DD("IX",XR,0),U,8)="I" Q
"RTN","DIKC1",149,0)
 . I $G(FLAG)["f",$P(^DD("IX",XR,0),U,6)="F" Q
"RTN","DIKC1",150,0)
 . I $G(FLAG)["r",$P(^DD("IX",XR,0),U,6)="R" Q
"RTN","DIKC1",151,0)
 . I $G(FLAG)["x",$G(^DD("IX",XR,"NOREINDEX")) Q
"RTN","DIKC1",152,0)
 . ;
"RTN","DIKC1",153,0)
 . ;Set TMP, RLIST, and FLIST
"RTN","DIKC1",154,0)
 . K TMP
"RTN","DIKC1",155,0)
 . I EXECFLD="R" D
"RTN","DIKC1",156,0)
 .. S TMP=$G(TMPR)
"RTN","DIKC1",157,0)
 .. I $L(RLIST(RLIST))+$L(XR)+1>255 S RLIST=RLIST+1,RLIST(RLIST)=""
"RTN","DIKC1",158,0)
 .. S RLIST(RLIST)=RLIST(RLIST)_$E(U,RLIST(RLIST)]"")_XR
"RTN","DIKC1",159,0)
 . E  D
"RTN","DIKC1",160,0)
 .. S TMP=$G(TMPF)
"RTN","DIKC1",161,0)
 .. I $L(FLIST(FLIST))+$L(XR)+1>255 S FLIST=FLIST+1,FLIST(FLIST)=""
"RTN","DIKC1",162,0)
 .. S FLIST(FLIST)=FLIST(FLIST)_$E(U,FLIST(FLIST)]"")_XR
"RTN","DIKC1",163,0)
 . ;
"RTN","DIKC1",164,0)
 . ;Load xref
"RTN","DIKC1",165,0)
 . Q:$G(TMP)=""  Q:$D(@TMP@(FIL,XR))
"RTN","DIKC1",166,0)
 . D CRV^DIKC2(XR,$G(VALRT),TMP)
"RTN","DIKC1",167,0)
 . D:$G(LOG)]"" LOG^DIKC2(XR,LOG,TMP)
"RTN","DIKC1",168,0)
 . I $G(LOG)["K",$G(LOG)["W" D KW^DIKC2(XR,TMP)
"RTN","DIKC1",169,0)
 ;
"RTN","DIKC1",170,0)
 I FLIST(0)]"" S FLIST=FLIST(0) K FLIST(0)
"RTN","DIKC1",171,0)
 E  K FLIST S FLIST=""
"RTN","DIKC1",172,0)
 I RLIST(0)]"" S RLIST=RLIST(0) K RLIST(0)
"RTN","DIKC1",173,0)
 E  K RLIST S RLIST=""
"RTN","DIKC1",174,0)
 Q
"RTN","DIKC1",175,0)
 ;
"RTN","DIKC1",176,0)
GETTMP(DIKC) ;Find next available root in ^TMP(DIKC)
"RTN","DIKC1",177,0)
 ;Time stamp ^TMP(DIKC,J)
"RTN","DIKC1",178,0)
 ;Out:
"RTN","DIKC1",179,0)
 ; Name of available ^TMP root; e.g. ^TMP("DIKC",$J+.01)
"RTN","DIKC1",180,0)
 ;
"RTN","DIKC1",181,0)
 N DAY,FREE,J
"RTN","DIKC1",182,0)
 S FREE=0 F J=$J:.01 D  Q:FREE
"RTN","DIKC1",183,0)
 . S DAY=$G(^TMP(DIKC,J))
"RTN","DIKC1",184,0)
 . I DAY<($H-1) K ^TMP(DIKC,J) S ^TMP(DIKC,J)=$H,FREE=1
"RTN","DIKC1",185,0)
 Q $NA(^TMP(DIKC,J))
"RTN","DIKC2")
0^9^B26790488^B26770056
"RTN","DIKC2",1,0)
DIKC2 ;SFISC/MKO-CHECK INPUT PARAMETERS TO INDEX^DIKC ;19DEC2010
"RTN","DIKC2",2,0)
 ;;22.0;VA FileMan;**11,167**;Mar 30, 1999;Build 18
"RTN","DIKC2",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DIKC2",4,0)
 ;CHK:  Check input parameters to INDEX^DIKC
"RTN","DIKC2",5,0)
 ;Also set:
"RTN","DIKC2",6,0)
 ; DA     = DA array
"RTN","DIKC2",7,0)
 ; DIROOT = Closed root of file
"RTN","DIKC2",8,0)
 ; DIFILE = File #
"RTN","DIKC2",9,0)
 ; DIKERR = "X" : if there's a problem
"RTN","DIKC2",10,0)
 ;
"RTN","DIKC2",11,0)
CHK ;File is a required input param
"RTN","DIKC2",12,0)
 I $G(DIFILE)="" D:DIF["D" ERR^DIKCU2(202,"","","","FILE") D ERR Q
"RTN","DIKC2",13,0)
 ;
"RTN","DIKC2",14,0)
 ;Check DIREC and set DA array
"RTN","DIKC2",15,0)
 I $G(DIREC)'["," M DA=DIREC
"RTN","DIKC2",16,0)
 E  S:DIREC'?.E1"," DIREC=DIREC_"," D DA^DILF(DIREC,.DA)
"RTN","DIKC2",17,0)
 S:'$G(DA) DA=""
"RTN","DIKC2",18,0)
 I '$$VDA^DIKCU1(.DA,DIF) D ERR Q
"RTN","DIKC2",19,0)
 ;
"RTN","DIKC2",20,0)
DICTRL ;Check DICTRL parameter
"RTN","DIKC2",21,0)
 I $G(DICTRL)]"",'$$VFLAG^DIKCU1(DICTRL,"KSsDWiRIkCTrfx",DIF) D ERR
"RTN","DIKC2",22,0)
 I $G(DICTRL)["W",'$$VFNUM^DIKCU1(+$P(DICTRL,"W",2),DIF) D ERR
"RTN","DIKC2",23,0)
 I $G(DICTRL)["C",$G(DICTRL)["T" D
"RTN","DIKC2",24,0)
 . D:DIF["D" ERR^DIKCU2(301,"","","","C and T")
"RTN","DIKC2",25,0)
 . D ERR
"RTN","DIKC2",26,0)
 E  I $G(DICTRL)["C",$G(DICTRL)["K" D
"RTN","DIKC2",27,0)
 . D:DIF["D" ERR^DIKCU2(301,"","","","C and K")
"RTN","DIKC2",28,0)
 . D ERR
"RTN","DIKC2",29,0)
 E  I $G(DICTRL)["T",$G(DICTRL)["S" D
"RTN","DIKC2",30,0)
 . D:DIF["D" ERR^DIKCU2(301,"","","","T and S")
"RTN","DIKC2",31,0)
 . D ERR
"RTN","DIKC2",32,0)
 Q:$G(DIKERR)="X"
"RTN","DIKC2",33,0)
 ;
"RTN","DIKC2",34,0)
 ;Set DIFILE and DIROOT
"RTN","DIKC2",35,0)
 N DILEV
"RTN","DIKC2",36,0)
 I DIFILE=+$P(DIFILE,"E") D
"RTN","DIKC2",37,0)
 . S DIROOT=$$FROOTDA^DIKCU(DIFILE,DIF,.DILEV) I DIROOT="" D ERR Q
"RTN","DIKC2",38,0)
 . I DILEV,$D(DA(DILEV))[0 D  Q
"RTN","DIKC2",39,0)
 .. D:DIF["D" ERR^DIKCU2(205,"",$$IENS^DILF(.DA),"",DIFILE) D ERR
"RTN","DIKC2",40,0)
 . S:DILEV DIROOT=$NA(@DIROOT)
"RTN","DIKC2",41,0)
 . S DIFILE=$$FNUM^DIKCU(DIROOT,DIF) I DIFILE="" D ERR
"RTN","DIKC2",42,0)
 E  D
"RTN","DIKC2",43,0)
 . S DIROOT=DIFILE
"RTN","DIKC2",44,0)
 . S:"(,"[$E(DIROOT,$L(DIROOT)) DIROOT=$$CREF^DILF(DIFILE)
"RTN","DIKC2",45,0)
 . S DIFILE=$$FNUM^DIKCU(DIROOT,DIF) I DIFILE="" D ERR Q
"RTN","DIKC2",46,0)
 . S DILEV=$$FLEV^DIKCU(DIFILE,DIF) I DILEV="" D ERR Q
"RTN","DIKC2",47,0)
 . I DILEV,$D(DA(DILEV))[0 D  Q
"RTN","DIKC2",48,0)
 .. D:DIF["D" ERR^DIKCU2(205,"",$$IENS^DILF(.DA),"",DIFILE) D ERR
"RTN","DIKC2",49,0)
 ;
"RTN","DIKC2",50,0)
 ;Set DIKVAL,DIKON
"RTN","DIKC2",51,0)
 S DIKVAL=$G(DICTRL("VAL"))
"RTN","DIKC2",52,0)
 I DIKVAL]"" D
"RTN","DIKC2",53,0)
 . S:"(,_"'[$E(DIKVAL,$L(DIKVAL)) DIKVAL=$$OREF^DILF(DIKVAL)
"RTN","DIKC2",54,0)
 . S DIKON="O^N"
"RTN","DIKC2",55,0)
 E  S DIKON=""
"RTN","DIKC2",56,0)
 Q
"RTN","DIKC2",57,0)
 ;
"RTN","DIKC2",58,0)
ERR ;Set error flag
"RTN","DIKC2",59,0)
 S DIKERR="X"
"RTN","DIKC2",60,0)
 Q
"RTN","DIKC2",61,0)
 ;
"RTN","DIKC2",62,0)
 ;==========================
"RTN","DIKC2",63,0)
 ; CRV(Index,ValueRoot,TMP)
"RTN","DIKC2",64,0)
 ;==========================
"RTN","DIKC2",65,0)
 ;Load values from Cross Reference Values multiple into @TMP
"RTN","DIKC2",66,0)
 ;In:
"RTN","DIKC2",67,0)
 ;  XR    = Index #
"RTN","DIKC2",68,0)
 ;  VALRT = Array Ref where old/new values are located
"RTN","DIKC2",69,0)
 ;  TMP   = Root of array to store data
"RTN","DIKC2",70,0)
 ;Returns:
"RTN","DIKC2",71,0)
 ;  @TMP@(RootFile,Index#)             = Name^File^RootType^Type
"RTN","DIKC2",72,0)
 ;                 Index#,Order#)      = Code that sets X to the data
"RTN","DIKC2",73,0)
 ;                        Order#,"SS") = Subscript^MaxLength
"RTN","DIKC2",74,0)
 ;                               "T")  = Transform (for 'Field'-type)
"RTN","DIKC2",75,0)
 ;                               "F")  = file^field^levdiff(file,rFile)
"RTN","DIKC2",76,0)
CRV(XR,VALRT,TMP) ;
"RTN","DIKC2",77,0)
 Q:'$G(XR)!($G(TMP)="")
"RTN","DIKC2",78,0)
 N CRV,CRV0,DEC,FIL,FLD,MAXL,ND,ORD,OROOT,RFIL,SBSC,TYPE
"RTN","DIKC2",79,0)
 ;
"RTN","DIKC2",80,0)
 S RFIL=$P($G(^DD("IX",XR,0)),U,9) Q:RFIL=""  Q:$D(@TMP@(RFIL,XR))
"RTN","DIKC2",81,0)
 S @TMP@(RFIL,XR)=$P(^DD("IX",XR,0),U,2)_U_$P(^(0),U)_U_$P(^(0),U,8)_U_$P(^(0),U,4)
"RTN","DIKC2",82,0)
 S OROOT=$$FROOTDA^DIKCU(RFIL,"O")_"DA," Q:OROOT="DA,"
"RTN","DIKC2",83,0)
 ;
"RTN","DIKC2",84,0)
 S CRV=0 F  S CRV=$O(^DD("IX",XR,11.1,CRV)) Q:'CRV  D
"RTN","DIKC2",85,0)
 . S CRV0=$G(^DD("IX",XR,11.1,CRV,0))
"RTN","DIKC2",86,0)
 . S ORD=$P(CRV0,U),TYPE=$P(CRV0,U,2),MAXL=$P(CRV0,U,5),SBSC=$P(CRV0,U,6)
"RTN","DIKC2",87,0)
 . Q:ORD=""!(TYPE="")
"RTN","DIKC2",88,0)
 . ;
"RTN","DIKC2",89,0)
 . I TYPE="F" D
"RTN","DIKC2",90,0)
 .. S FIL=$P(CRV0,U,3),FLD=$P(CRV0,U,4) Q:(FIL="")!'FLD
"RTN","DIKC2",91,0)
 .. I FIL'=RFIL N OROOT,LDIF D  Q:$G(OROOT)=""
"RTN","DIKC2",92,0)
 ... S LDIF=$$FLEVDIFF^DIKCU(FIL,RFIL) Q:'LDIF
"RTN","DIKC2",93,0)
 ... S OROOT=$$FROOTDA^DIKCU(FIL,LDIF_"O") Q:OROOT=""
"RTN","DIKC2",94,0)
 ... S OROOT=OROOT_"DA("_LDIF_"),"
"RTN","DIKC2",95,0)
 .. S DEC=$$DEC(FIL,FLD,$G(VALRT),OROOT) Q:DEC=""
"RTN","DIKC2",96,0)
 .. S @TMP@(RFIL,XR,ORD)=DEC
"RTN","DIKC2",97,0)
 .. S @TMP@(RFIL,XR,ORD,"F")=FIL_U_FLD_$S($G(LDIF):U_LDIF,1:"")
"RTN","DIKC2",98,0)
 .. S:$G(^DD("IX",XR,11.1,CRV,2))'?."^" @TMP@(RFIL,XR,ORD,"T")=^(2)
"RTN","DIKC2",99,0)
 . ;
"RTN","DIKC2",100,0)
 . E  I TYPE="C" S @TMP@(RFIL,XR,ORD)=$G(^DD("IX",XR,11.1,CRV,1.5))
"RTN","DIKC2",101,0)
 . ;
"RTN","DIKC2",102,0)
 . S:SBSC @TMP@(RFIL,XR,ORD,"SS")=SBSC_$S(MAXL:U_MAXL,1:"")
"RTN","DIKC2",103,0)
 Q
"RTN","DIKC2",104,0)
 ;
"RTN","DIKC2",105,0)
 ;======================================
"RTN","DIKC2",106,0)
 ; $$DEC(File,Field,ValueRoot,OpenRoot)
"RTN","DIKC2",107,0)
 ;======================================
"RTN","DIKC2",108,0)
 ;Return Data Extraction Code -- M code that sets X equal to the data.
"RTN","DIKC2",109,0)
 ;In:
"RTN","DIKC2",110,0)
 ;  FIL   = File #
"RTN","DIKC2",111,0)
 ;  FLD   = Field #
"RTN","DIKC2",112,0)
 ;  VALRT = Array Ref where old/new values are located
"RTN","DIKC2",113,0)
 ;           if ends in "_", FILE subscript is concatenated to the last
"RTN","DIKC2",114,0)
 ;           subscript (used by DDS02)
"RTN","DIKC2",115,0)
 ;  OROOT = Open root of record w/ DA subscripts
"RTN","DIKC2",116,0)
 ;Returns:  M code
"RTN","DIKC2",117,0)
 ;  For example:
"RTN","DIKC2",118,0)
 ;    S X=$P(^DIZ(1000,DA(1),100,0),U,2)   or
"RTN","DIKC2",119,0)
 ;    S X=$E(^DIZ(1000,DA(1),100,1),1,245) or
"RTN","DIKC2",120,0)
 ;    S X=$G(array(file,DIIENS,field,DION),$P(^root(DA,nd),U,pc))
"RTN","DIKC2",121,0)
 ;
"RTN","DIKC2",122,0)
DEC(FIL,FLD,VALRT,OROOT) ;
"RTN","DIKC2",123,0)
 Q:$P($G(^DD(FIL,FLD,0)),U)="" ""
"RTN","DIKC2",124,0)
 ;
"RTN","DIKC2",125,0)
 N ND,PC,DEC
"RTN","DIKC2",126,0)
 S PC=$P($G(^DD(FIL,FLD,0)),U,4)
"RTN","DIKC2",127,0)
 S ND=$P(PC,";"),PC=$P(PC,";",2) Q:ND?." "!("0 "[PC) ""
"RTN","DIKC2",128,0)
 S:ND'=+$P(ND,"E") ND=""""_ND_""""
"RTN","DIKC2",129,0)
 ;
"RTN","DIKC2",130,0)
 I $G(OROOT)="" S OROOT=$$FROOTDA^DIKCU(FIL,"O")_"DA," Q:OROOT="DA," ""
"RTN","DIKC2",131,0)
 I PC S DEC="$P($G("_OROOT_ND_")),U,"_PC_")"
"RTN","DIKC2",132,0)
 E  S DEC="$E($G("_OROOT_ND_")),"_+$E(PC,2,999)_","_$P(PC,",",2)_")"
"RTN","DIKC2",133,0)
 ;
"RTN","DIKC2",134,0)
 I $G(VALRT)]"" D
"RTN","DIKC2",135,0)
 . I $E(VALRT,$L(VALRT))="_" D  Q
"RTN","DIKC2",136,0)
 .. S VALRT=$E(VALRT,1,$L(VALRT)-3)
"RTN","DIKC2",137,0)
 .. S DEC="$G("_VALRT_FIL_""",DIIENS,"_FLD_",DION),"_DEC_")"
"RTN","DIKC2",138,0)
 . S:"(,"'[$E(VALRT,$L(VALRT)) VALRT=$$OREF^DILF(VALRT)
"RTN","DIKC2",139,0)
 . S DEC="$G("_VALRT_FIL_",DIIENS,"_FLD_",DION),"_DEC_")"
"RTN","DIKC2",140,0)
 S DEC="S X="_DEC
"RTN","DIKC2",141,0)
 Q DEC
"RTN","DIKC2",142,0)
 ;
"RTN","DIKC2",143,0)
 ;======================
"RTN","DIKC2",144,0)
 ; LOG(Index,Logic,TMP)
"RTN","DIKC2",145,0)
 ;======================
"RTN","DIKC2",146,0)
 ;Load Set and/or Kill logic into into @TMP
"RTN","DIKC2",147,0)
 ;In:
"RTN","DIKC2",148,0)
 ;  XR  = Index #
"RTN","DIKC2",149,0)
 ;  LOG [ K : load kill logic
"RTN","DIKC2",150,0)
 ;      [ S : load set logic
"RTN","DIKC2",151,0)
 ;  TMP = Root of array to store data
"RTN","DIKC2",152,0)
 ;Returns:
"RTN","DIKC2",153,0)
 ;  @TMP@(RootFile,Index#,"S")  = Set logic
"RTN","DIKC2",154,0)
 ;                        "SC") = Set condition
"RTN","DIKC2",155,0)
 ;                        "K")  = Kill logic
"RTN","DIKC2",156,0)
 ;                        "KC") = Kill condtion
"RTN","DIKC2",157,0)
LOG(XR,LOG,TMP) ;
"RTN","DIKC2",158,0)
 Q:'$G(XR)  Q:$G(LOG)=""  Q:$G(TMP)=""
"RTN","DIKC2",159,0)
 N SL,KL,SC,KC,RFIL
"RTN","DIKC2",160,0)
 ;
"RTN","DIKC2",161,0)
 S RFIL=$P(^DD("IX",XR,0),U,9) Q:RFIL=""
"RTN","DIKC2",162,0)
 I LOG["S" D
"RTN","DIKC2",163,0)
 . S SL=$G(^DD("IX",XR,1)),SC=$G(^(1.4))
"RTN","DIKC2",164,0)
 . I "Q"'[SL,SL'?."^" S @TMP@(RFIL,XR,"S")=SL
"RTN","DIKC2",165,0)
 . I "Q"'[SC,SC'?."^" S @TMP@(RFIL,XR,"SC")=SC
"RTN","DIKC2",166,0)
 I LOG["K" D
"RTN","DIKC2",167,0)
 . S KL=$G(^DD("IX",XR,2)),KC=$G(^(2.4))
"RTN","DIKC2",168,0)
 . I "Q"'[KL,KL'?."^" S @TMP@(RFIL,XR,"K")=KL
"RTN","DIKC2",169,0)
 . I "Q"'[KC,KC'?."^" S @TMP@(RFIL,XR,"KC")=KC
"RTN","DIKC2",170,0)
 Q
"RTN","DIKC2",171,0)
 ;
"RTN","DIKC2",172,0)
 ;===============
"RTN","DIKC2",173,0)
 ; KW(Index,TMP)
"RTN","DIKC2",174,0)
 ;===============
"RTN","DIKC2",175,0)
 ;Load Kill Entire Index logic into @TMP
"RTN","DIKC2",176,0)
 ;In:
"RTN","DIKC2",177,0)
 ;  XR  = Index #
"RTN","DIKC2",178,0)
 ;  TMP = Root of array to store data
"RTN","DIKC2",179,0)
 ;Returns:
"RTN","DIKC2",180,0)
 ;  @TMP@("KW",File#[.01],Index#) =   Kill Entire Index logic
"RTN","DIKC2",181,0)
 ;                        Index#,0) = Type ("W" for whole-file index)
"RTN","DIKC2",182,0)
 ;                                    ^RootFile
"RTN","DIKC2",183,0)
 ;                                    ^Level difference between top file
"RTN","DIKC2",184,0)
 ;                                      and root file
"RTN","DIKC2",185,0)
KW(XR,TMP) ;Get Kill Entire Index logic
"RTN","DIKC2",186,0)
 Q:'$G(XR)!($G(TMP)="")
"RTN","DIKC2",187,0)
 N FILE,KW,RFIL,TYPE
"RTN","DIKC2",188,0)
 S KW=$G(^DD("IX",XR,2.5)) Q:KW="Q"!(KW?."^")
"RTN","DIKC2",189,0)
 S FILE=$P($G(^DD("IX",XR,0)),U),TYPE=$P(^(0),U,8),RFIL=$P(^(0),U,9)
"RTN","DIKC2",190,0)
 Q:FILE=""!(RFIL="")
"RTN","DIKC2",191,0)
 ;
"RTN","DIKC2",192,0)
 S @TMP@("KW",FILE,XR)=KW
"RTN","DIKC2",193,0)
 S:RFIL'=FILE @TMP@("KW",FILE,XR,0)=TYPE_U_RFIL_U_$$FLEVDIFF^DIKCU(FILE,RFIL)
"RTN","DIKC2",194,0)
 Q
"RTN","DIKC2",195,0)
 ;
"RTN","DIKC2",196,0)
 ;#202  The input parameter that identifies the |1| is missing or invalid.
"RTN","DIKC2",197,0)
 ;#205  File# |1| and IEN string |IENS| represent different subfile levels.
"RTN","DIKC2",198,0)
 ;
"RTN","DIKCP1")
0^11^B42219628^B41630978
"RTN","DIKCP1",1,0)
DIKCP1 ;SFISC/MKO-PRINT INDEX(ES) ;20DEC2010
"RTN","DIKCP1",2,0)
 ;;22.0;VA FileMan;**20,167**;Mar 30, 1999;Build 18
"RTN","DIKCP1",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DIKCP1",4,0)
PRINDEX ;Come here from PRINDEX^DIKCP
"RTN","DIKCP1",5,0)
 Q:'$G(XR)
"RTN","DIKCP1",6,0)
 N XR0
"RTN","DIKCP1",7,0)
 I $G(FLAG)'["i" N LM,TYP,TS,WID D INIT^DIKCP
"RTN","DIKCP1",8,0)
 S XR0=$G(^DD("IX",XR,0)) Q:XR0?."^"
"RTN","DIKCP1",9,0)
 ;
"RTN","DIKCP1",10,0)
 ;Print first line of information
"RTN","DIKCP1",11,0)
 D FL(XR0,WID,LM,TS,TYP,.PAGE) Q:PAGE(U)
"RTN","DIKCP1",12,0)
 I FLAG'["S" D WRLN("",0,.PAGE) Q:PAGE(U)
"RTN","DIKCP1",13,0)
 ;
"RTN","DIKCP1",14,0)
 ;Print Keys with this Uniqueness Index
"RTN","DIKCP1",15,0)
 D KEY(XR,WID,LM,TS,.PAGE) Q:PAGE(U)
"RTN","DIKCP1",16,0)
 ;
"RTN","DIKCP1",17,0)
 ;Print short description
"RTN","DIKCP1",18,0)
 I $P(XR0,U,3)]"" D  Q:PAGE(U)
"RTN","DIKCP1",19,0)
 . D WLP("Short Descr:  ",$P(XR0,U,3),WID,LM+TS,0,.PAGE)
"RTN","DIKCP1",20,0)
 ;
"RTN","DIKCP1",21,0)
 ;Print description
"RTN","DIKCP1",22,0)
 I $O(^DD("IX",XR,.1,0)) D  Q:PAGE(U)
"RTN","DIKCP1",23,0)
 . D WRWP($NA(^DD("IX",XR,.1)),LM,WID,"Description:  ",TS,.PAGE)
"RTN","DIKCP1",24,0)
 I FLAG'["S" D WRLN("",0,.PAGE) Q:PAGE(U)
"RTN","DIKCP1",25,0)
 ;
"RTN","DIKCP1",26,0)
 ;Print logic
"RTN","DIKCP1",27,0)
 I FLAG'["N" D  Q:PAGE(U)
"RTN","DIKCP1",28,0)
 . D LOGIC(XR,WID,LM,TS,FLAG,.PAGE) Q:PAGE(U)
"RTN","DIKCP1",29,0)
 . I FLAG'["S" D WRLN("",0,.PAGE)
"RTN","DIKCP1",30,0)
 ;
"RTN","DIKCP1",31,0)
 ;Print Cross Reference Values
"RTN","DIKCP1",32,0)
 D CRV(XR,WID,LM,TS,FLAG,.PAGE)
"RTN","DIKCP1",33,0)
NOREIN I $G(^DD("IX",XR,"NOREINDEX")) W !?9,"NO RE-INDEXING ALLOWED!"
"RTN","DIKCP1",34,0)
 Q
"RTN","DIKCP1",35,0)
 ;
"RTN","DIKCP1",36,0)
FL(XR0,WID,LM,TS,TYP,PAGE) ;Print first line
"RTN","DIKCP1",37,0)
 N ACT,EXEC,NAME,RTYP,SP,TYPE,TXT,USE
"RTN","DIKCP1",38,0)
 ;
"RTN","DIKCP1",39,0)
 S SP=$J("",4)
"RTN","DIKCP1",40,0)
 S EXEC=$$EXTERNAL^DILFD(.11,.4,"",$P(XR0,U,6))
"RTN","DIKCP1",41,0)
 S NAME=$P(XR0,U,2)_" (#"_XR_")"
"RTN","DIKCP1",42,0)
 S TYPE=$$EXTERNAL^DILFD(.11,.2,"",$P(XR0,U,4))
"RTN","DIKCP1",43,0)
 S ACT=$P(XR0,U,7)
"RTN","DIKCP1",44,0)
 S USE=$TR($$EXTERNAL^DILFD(.11,.42,"",$P(XR0,U,14))," ",$C(0))
"RTN","DIKCP1",45,0)
 S RTYP=$P(XR0,U,8) S:"I"[RTYP RTYP=""
"RTN","DIKCP1",46,0)
 S:RTYP]"" RTYP=$TR($$EXTERNAL^DILFD(.11,.5,"",RTYP)," ",$C(0))
"RTN","DIKCP1",47,0)
 S:RTYP]"" RTYP=SP_RTYP_$C(0)_"(#"_$P(XR0,U)_")"
"RTN","DIKCP1",48,0)
 ;
"RTN","DIKCP1",49,0)
 ;Print first line
"RTN","DIKCP1",50,0)
 I TYP=1 D
"RTN","DIKCP1",51,0)
 . S TXT=EXEC_" INDEX: ",TXT=TXT_$J("",TS-$L(TXT))
"RTN","DIKCP1",52,0)
 . S TXT=TXT_NAME_SP_TYPE_SP_ACT_SP_USE_RTYP
"RTN","DIKCP1",53,0)
 E  S TXT=NAME_SP_EXEC_SP_TYPE_SP_ACT_SP_USE_RTYP
"RTN","DIKCP1",54,0)
 ;
"RTN","DIKCP1",55,0)
 D WRPHI(TXT,WID,LM,TS,0,.PAGE)
"RTN","DIKCP1",56,0)
 Q
"RTN","DIKCP1",57,0)
 ;
"RTN","DIKCP1",58,0)
KEY(XR,WID,LM,TS,PAGE) ;Print keys that have XR as Uniqueness Index
"RTN","DIKCP1",59,0)
 Q:'$D(^DD("KEY","AU",XR))
"RTN","DIKCP1",60,0)
 N KEY,KEY0,KEYLN,TXT
"RTN","DIKCP1",61,0)
 ;
"RTN","DIKCP1",62,0)
 S TXT=0,TXT(0)=""
"RTN","DIKCP1",63,0)
 S KEY=0 F  S KEY=$O(^DD("KEY","AU",XR,KEY)) Q:'KEY  D
"RTN","DIKCP1",64,0)
 . S KEY0=$G(^DD("KEY",KEY,0)) Q:KEY0?."^"
"RTN","DIKCP1",65,0)
 . S KEYLN="Key "_$P(KEY0,U,2)_" (#"_KEY_"), File #"_$P(KEY0,U)
"RTN","DIKCP1",66,0)
 . S:$G(TXT(TXT))]"" TXT(TXT)=TXT(TXT)_"; "
"RTN","DIKCP1",67,0)
 . D ADDSTR($TR(KEYLN," ",$C(0)),.TXT)
"RTN","DIKCP1",68,0)
 Q:$G(TXT(0))=""
"RTN","DIKCP1",69,0)
 D WLP("Unique for:  ",.TXT,WID,LM+TS,0,.PAGE)
"RTN","DIKCP1",70,0)
 Q
"RTN","DIKCP1",71,0)
 ;
"RTN","DIKCP1",72,0)
LOGIC(XR,WID,LM,TS,FLAG,PAGE) ;Print set and kill logic
"RTN","DIKCP1",73,0)
 N CD,LN
"RTN","DIKCP1",74,0)
 S CD=$G(^DD("IX",XR,1))
"RTN","DIKCP1",75,0)
 I CD'?."^" D  Q:PAGE(U)
"RTN","DIKCP1",76,0)
 . D WLP("Set Logic:  ",CD,WID,LM+TS,1,.PAGE) Q:PAGE(U)
"RTN","DIKCP1",77,0)
 . S LN=0 F  S LN=$O(^DD("IX",XR,1.2,LN)) Q:LN'=+LN  D  Q:PAGE(U)
"RTN","DIKCP1",78,0)
 .. S CD=$G(^DD("IX",XR,1.2,LN,1))
"RTN","DIKCP1",79,0)
 .. I CD'?."^" D WLP(LN_") ",CD,WID,LM+TS,1,.PAGE)
"RTN","DIKCP1",80,0)
 S CD=$G(^DD("IX",XR,1.4))
"RTN","DIKCP1",81,0)
 I CD'?."^" D WLP("Set Cond:  ",CD,WID,LM+TS,1,.PAGE) Q:PAGE(U)
"RTN","DIKCP1",82,0)
 ;
"RTN","DIKCP1",83,0)
 S CD=$G(^DD("IX",XR,2))
"RTN","DIKCP1",84,0)
 I CD'?."^" D  Q:PAGE(U)
"RTN","DIKCP1",85,0)
 . D WLP("Kill Logic:  ",CD,WID,LM+TS,1,.PAGE) Q:PAGE(U)
"RTN","DIKCP1",86,0)
 . S LN=0 F  S LN=$O(^DD("IX",XR,2.2,LN)) Q:LN'=+LN  D  Q:PAGE(U)
"RTN","DIKCP1",87,0)
 .. S CD=$G(^DD("IX",XR,2.2,LN,2))
"RTN","DIKCP1",88,0)
 .. I CD'?."^" D WLP(LN_") ",CD,WID,LM+TS,1,.PAGE)
"RTN","DIKCP1",89,0)
 S CD=$G(^DD("IX",XR,2.4))
"RTN","DIKCP1",90,0)
 I CD'?."^" D WLP("Kill Cond:  ",CD,WID,LM+TS,1,.PAGE) Q:PAGE(U)
"RTN","DIKCP1",91,0)
 S CD=$G(^DD("IX",XR,2.5))
"RTN","DIKCP1",92,0)
 I CD'?."^" D WLP("Whole Kill:  ",CD,WID,LM+TS,1,.PAGE) Q:PAGE(U)
"RTN","DIKCP1",93,0)
 Q
"RTN","DIKCP1",94,0)
 ;
"RTN","DIKCP1",95,0)
CRV(XR,WID,LM,TS,FLAG,PAGE) ;Print cross reference values
"RTN","DIKCP1",96,0)
 N CD,CV,CV0,FL,FD,LAB,ORD,TXT
"RTN","DIKCP1",97,0)
 S ORD="" F  S ORD=$O(^DD("IX",XR,11.1,"B",ORD)) Q:ORD=""  D  Q:PAGE(U)
"RTN","DIKCP1",98,0)
 . S CV=$O(^DD("IX",XR,11.1,"B",ORD,0)) Q:'CV
"RTN","DIKCP1",99,0)
 . Q:$G(^DD("IX",XR,11.1,CV,0))?."^"  S CV0=^(0)
"RTN","DIKCP1",100,0)
 . S LAB=$S(FLAG'["N":"X("_ORD_"):  ",1:ORD_":  ")
"RTN","DIKCP1",101,0)
 . ;
"RTN","DIKCP1",102,0)
 . ;Field-type values
"RTN","DIKCP1",103,0)
 . I $P(CV0,U,2)="F" D  Q:PAGE(U)
"RTN","DIKCP1",104,0)
 .. S FL=$P(CV0,U,3),FD=$P(CV0,U,4)
"RTN","DIKCP1",105,0)
 .. I FL,FD S TXT=$P($G(^DD(FL,FD,0)),U)_"  ("_FL_","_FD_")"
"RTN","DIKCP1",106,0)
 .. E  S TXT="<undefined file/field>"
"RTN","DIKCP1",107,0)
 .. D CRVOTH(CV0,.TXT)
"RTN","DIKCP1",108,0)
 .. D WLP(LAB,TXT,WID,LM+TS,"",.PAGE)
"RTN","DIKCP1",109,0)
 . ;
"RTN","DIKCP1",110,0)
 . ;Computed-type values
"RTN","DIKCP1",111,0)
 . E  D  Q:PAGE(U)
"RTN","DIKCP1",112,0)
 .. S CD=$G(^DD("IX",XR,11.1,CV,1.5))
"RTN","DIKCP1",113,0)
 .. I CD'?."^" D
"RTN","DIKCP1",114,0)
 ... S TXT=$S(FLAG["N":"<computed>",1:"Computed Code: "_CD)
"RTN","DIKCP1",115,0)
 .. E  S TXT="<undefined computed code>"
"RTN","DIKCP1",116,0)
 .. D WLP(LAB,TXT,WID,LM+TS,1,.PAGE) Q:PAGE(U)
"RTN","DIKCP1",117,0)
 .. S TXT=""
"RTN","DIKCP1",118,0)
 .. D CRVOTH(CV0,.TXT)
"RTN","DIKCP1",119,0)
 .. D WLP("",TXT,WID,LM+TS,"",.PAGE)
"RTN","DIKCP1",120,0)
 . ;
"RTN","DIKCP1",121,0)
 . ;Lookup prompt
"RTN","DIKCP1",122,0)
 . I $P(CV0,U,8)]"" D  Q:PAGE(U)
"RTN","DIKCP1",123,0)
 .. D WLP("Lookup Prompt:  ",$P(CV0,U,8),WID-18,LM+TS+18,"",.PAGE)
"RTN","DIKCP1",124,0)
 . ;
"RTN","DIKCP1",125,0)
 . ;Transform
"RTN","DIKCP1",126,0)
 . I FLAG'["N" D
"RTN","DIKCP1",127,0)
 .. S CD=$G(^DD("IX",XR,11.1,CV,2))
"RTN","DIKCP1",128,0)
 .. I CD'?."^" D WLP("Transform (Storage):  ",CD,WID-24,LM+TS+24,1,.PAGE)
"RTN","DIKCP1",129,0)
 .. S CD=$G(^DD("IX",XR,11.1,CV,4))
"RTN","DIKCP1",130,0)
 .. I CD'?."^" D WLP(" Transform (Lookup):  ",CD,WID-24,LM+TS+24,1,.PAGE)
"RTN","DIKCP1",131,0)
 .. S CD=$G(^DD("IX",XR,11.1,CV,3))
"RTN","DIKCP1",132,0)
 .. I CD'?."^" D WLP("Transform (Display):  ",CD,WID-24,LM+TS+24,1,.PAGE)
"RTN","DIKCP1",133,0)
 Q
"RTN","DIKCP1",134,0)
 ;
"RTN","DIKCP1",135,0)
CRVOTH(CV0,TXT) ;Get other attributes of Cross Reference Value
"RTN","DIKCP1",136,0)
 S:$P(CV0,U,6) TXT=TXT_"  (Subscr"_$C(0)_$P(CV0,U,6)_")"
"RTN","DIKCP1",137,0)
 S:$P(CV0,U,5) TXT=TXT_"  (Len"_$C(0)_$P(CV0,U,5)_")"
"RTN","DIKCP1",138,0)
 I $P(CV0,U,7)]"" D
"RTN","DIKCP1",139,0)
 . S TXT=TXT_"  ("_$$EXTERNAL^DILFD(.114,7,"",$P(CV0,U,7))_")"
"RTN","DIKCP1",140,0)
 Q
"RTN","DIKCP1",141,0)
 ;
"RTN","DIKCP1",142,0)
ADDSTR(X,TXT) ;Add string X to the TXT array
"RTN","DIKCP1",143,0)
 I $L(TXT(TXT))+$L(X)>200 S TXT=TXT+1,TXT(TXT)=""
"RTN","DIKCP1",144,0)
 S TXT(TXT)=TXT(TXT)_X
"RTN","DIKCP1",145,0)
 Q
"RTN","DIKCP1",146,0)
 ;
"RTN","DIKCP1",147,0)
WRPHI(TXT,WID,LM,TS,COD,PAGE) ;Write a paragraph with a hanging indent
"RTN","DIKCP1",148,0)
 N LAB,LN,TAB
"RTN","DIKCP1",149,0)
 S:$D(TXT(0))[0 TXT(0)=$G(TXT)
"RTN","DIKCP1",150,0)
 S LAB=$E(TXT(0),1,$G(TS)),TXT(0)=$E(TXT(0),$G(TS)+1,999)
"RTN","DIKCP1",151,0)
 D WRAP^DIKCU2(.TXT,WID,"",$G(COD))
"RTN","DIKCP1",152,0)
 D WRLN($G(LAB)_TXT(0),$G(LM),.PAGE) Q:PAGE(U)
"RTN","DIKCP1",153,0)
 F LN=1:1 Q:'$D(TXT(LN))  D WRLN(TXT(LN),$G(LM)+$G(TS),.PAGE) Q:PAGE(U)
"RTN","DIKCP1",154,0)
 Q
"RTN","DIKCP1",155,0)
 ;
"RTN","DIKCP1",156,0)
WLP(LAB,TXT,WID,TAB,COD,PAGE,WFLAG) ;Write a labeled paragraph
"RTN","DIKCP1",157,0)
 N LN
"RTN","DIKCP1",158,0)
 S:$D(TXT(0))[0 TXT(0)=$G(TXT)
"RTN","DIKCP1",159,0)
 D WRAP^DIKCU2(.TXT,WID,"",$G(COD))
"RTN","DIKCP1",160,0)
 D WRLN($G(LAB)_TXT(0),TAB-$L(LAB),.PAGE) Q:PAGE(U)
"RTN","DIKCP1",161,0)
 F LN=1:1 Q:'$D(TXT(LN))  D WRLN(TXT(LN),TAB,.PAGE) Q:PAGE(U)
"RTN","DIKCP1",162,0)
 S WFLAG=LN>1
"RTN","DIKCP1",163,0)
 Q
"RTN","DIKCP1",164,0)
 ;
"RTN","DIKCP1",165,0)
WRLN(TXT,TAB,PAGE,KWN) ;Write a line of text
"RTN","DIKCP1",166,0)
 ;See ^DIKCP for documentation
"RTN","DIKCP1",167,0)
 N X
"RTN","DIKCP1",168,0)
 S PAGE(U)=""
"RTN","DIKCP1",169,0)
 ;
"RTN","DIKCP1",170,0)
 ;Do paging, if necessary
"RTN","DIKCP1",171,0)
 I $D(PAGE("H"))#2,$G(IOSL,24)-2-$G(PAGE("B"))-$G(KWN)'>$Y D  Q:PAGE(U)
"RTN","DIKCP1",172,0)
 . I PAGE("H")?1"W ".E X PAGE("H") Q
"RTN","DIKCP1",173,0)
 . I $E($G(IOST,"C"))="C" D  Q:PAGE(U)
"RTN","DIKCP1",174,0)
 .. W $C(7) R X:$G(DTIME,300) I X=U!'$T S PAGE(U)=1
"RTN","DIKCP1",175,0)
 . W @$G(IOF,"#"),PAGE("H")
"RTN","DIKCP1",176,0)
 ;
"RTN","DIKCP1",177,0)
 ;Write text
"RTN","DIKCP1",178,0)
 W !?$G(TAB),$TR($G(TXT),$C(0)," ")
"RTN","DIKCP1",179,0)
 Q
"RTN","DIKCP1",180,0)
 ;
"RTN","DIKCP1",181,0)
WRWP(ROOT,LM,WID,LAB,TS,PAGE) ;Call DIWP/DIWW to format a wp field.
"RTN","DIKCP1",182,0)
 ;Then write the formatted lines.
"RTN","DIKCP1",183,0)
 Q:$G(ROOT)=""  Q:'$D(@ROOT)
"RTN","DIKCP1",184,0)
 N DIWF,DIWL,DIWR,LN,X
"RTN","DIKCP1",185,0)
 N DIW,DIWI,DIWT,DIWTC,DIWX,DN,I,Z
"RTN","DIKCP1",186,0)
 K ^UTILITY($J,"W")
"RTN","DIKCP1",187,0)
 ;
"RTN","DIKCP1",188,0)
 S LM=$G(LM)\1,WID=$G(WID)\1,TS=$G(TS)\1,LAB=$G(LAB)
"RTN","DIKCP1",189,0)
 I 'WID S WID=$G(IOM,80)-1-LM-TS S:WID<1 WID=1
"RTN","DIKCP1",190,0)
 S DIWL=0,DIWR=WID,DIWF="|"
"RTN","DIKCP1",191,0)
 S LN=0 F  S LN=$O(@ROOT@(LN)) Q:'LN  S X=$G(@ROOT@(LN,0)) D ^DIWP
"RTN","DIKCP1",192,0)
 ;
"RTN","DIKCP1",193,0)
 D WRLN($G(LAB)_$G(^UTILITY($J,"W",DIWL,1,0)),LM+TS-$L(LAB),.PAGE)
"RTN","DIKCP1",194,0)
 G:$G(PAGE(U)) WRWPQ
"RTN","DIKCP1",195,0)
 ;
"RTN","DIKCP1",196,0)
 S LN=1 F  S LN=$O(^UTILITY($J,"W",DIWL,LN)) Q:'LN  D  Q:$G(PAGE(U))
"RTN","DIKCP1",197,0)
 . D WRLN(^UTILITY($J,"W",DIWL,LN,0),LM+TS,.PAGE)
"RTN","DIKCP1",198,0)
 ;
"RTN","DIKCP1",199,0)
WRWPQ ;Cleanup and quit
"RTN","DIKCP1",200,0)
 K ^UTILITY($J,"W")
"RTN","DIKCP1",201,0)
 Q
"RTN","DIKCUTL2")
0^8^B36745109^B36365260
"RTN","DIKCUTL2",1,0)
DIKCUTL2 ;SFISC/MKO-UTILITY OPTION TO MODIFY INDEX ;17DEC2010
"RTN","DIKCUTL2",2,0)
 ;;22.0;VA FileMan;**68,167**;Mar 30, 1999;Build 18
"RTN","DIKCUTL2",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DIKCUTL2",4,0)
 ;
"RTN","DIKCUTL2",5,0)
 ;========
"RTN","DIKCUTL2",6,0)
 ; $$TYPE
"RTN","DIKCUTL2",7,0)
 ;========
"RTN","DIKCUTL2",8,0)
 ;Prompt for type xref (to reindex or modify)
"RTN","DIKCUTL2",9,0)
 ;Returns:
"RTN","DIKCUTL2",10,0)
 ; '1' for Traditional; or
"RTN","DIKCUTL2",11,0)
 ; '2' for New
"RTN","DIKCUTL2",12,0)
 ;
"RTN","DIKCUTL2",13,0)
TYPE() ;
"RTN","DIKCUTL2",14,0)
 N DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","DIKCUTL2",15,0)
 S DIR(0)="SAM^1:TRADITIONAL;2:NEW"
"RTN","DIKCUTL2",16,0)
 S DIR("A")="What type of cross-reference (Traditional or New)? "
"RTN","DIKCUTL2",17,0)
 S DIR("B")="Traditional"
"RTN","DIKCUTL2",18,0)
 S DIR("?",1)="Enter 'T' to select a Traditional cross-reference."
"RTN","DIKCUTL2",19,0)
 S DIR("?",2)="  Traditional cross references are stored in the data"
"RTN","DIKCUTL2",20,0)
 S DIR("?",3)="  dictionary under ^DD(file#,field#,1)."
"RTN","DIKCUTL2",21,0)
 S DIR("?",4)=" "
"RTN","DIKCUTL2",22,0)
 S DIR("?",5)="Enter 'N' to select a New-Style cross-reference."
"RTN","DIKCUTL2",23,0)
 S DIR("?",6)="  New-Style cross references are stored in the Index file."
"RTN","DIKCUTL2",24,0)
 S DIR("?",7)="  Compound indexes (indexes based on more than one field)"
"RTN","DIKCUTL2",25,0)
 S DIR("?")="  are examples of New-Style cross-references."
"RTN","DIKCUTL2",26,0)
 D ^DIR
"RTN","DIKCUTL2",27,0)
 Q $S($D(DIRUT):"",1:Y)
"RTN","DIKCUTL2",28,0)
 ;
"RTN","DIKCUTL2",29,0)
 ;==========================
"RTN","DIKCUTL2",30,0)
 ; GETXR(file#,.count,flag)
"RTN","DIKCUTL2",31,0)
 ;==========================
"RTN","DIKCUTL2",32,0)
 ;Loop through the "AC" index to get the list of Index file
"RTN","DIKCUTL2",33,0)
 ;xrefs with root file FIL.
"RTN","DIKCUTL2",34,0)
 ;In:
"RTN","DIKCUTL2",35,0)
 ; FIL = Root file #
"RTN","DIKCUTL2",36,0)
 ; FLG [ "M" : also get xrefs on subfiles of FIL
"RTN","DIKCUTL2",37,0)
 ;Out:
"RTN","DIKCUTL2",38,0)
 ; CNT = # xrefs^rootFile# (or null if FLG [ "M")
"RTN","DIKCUTL2",39,0)
 ; CNT(xref#) = rootFile#^File#^xrefName^rootType^UI[if uniq index]
"RTN","DIKCUTL2",40,0)
 ;
"RTN","DIKCUTL2",41,0)
GETXR(FIL,CNT,FLG) ;
"RTN","DIKCUTL2",42,0)
 N F,SB,XR
"RTN","DIKCUTL2",43,0)
 K CNT
"RTN","DIKCUTL2",44,0)
 D:$G(FLG)["M" SUBFILES^DIKCU(FIL,.SB)
"RTN","DIKCUTL2",45,0)
 S SB(FIL)=""
"RTN","DIKCUTL2",46,0)
 ;
"RTN","DIKCUTL2",47,0)
 S (CNT,F)=0 F  S F=$O(SB(F)) Q:'F  D
"RTN","DIKCUTL2",48,0)
 . S XR=0 F  S XR=$O(^DD("IX","AC",F,XR)) Q:'XR  D
"RTN","DIKCUTL2",49,0)
 .. I $G(^DD("IX",XR,0))?."^" K ^DD("IX","AC",F,XR) Q
"RTN","DIKCUTL2",50,0)
 ..I $G(FLG)["x",$G(^("NOREINDEX")) Q  ;167
"RTN","DIKCUTL2",51,0)
 .. S CNT=CNT+1
"RTN","DIKCUTL2",52,0)
 .. S CNT(XR)=F_U_$P($G(^DD("IX",XR,0)),U,1,2)_U_$P(^(0),U,8)
"RTN","DIKCUTL2",53,0)
 .. S:$D(^DD("KEY","AU",XR)) $P(CNT(XR),U,5)="UI"
"RTN","DIKCUTL2",54,0)
 ;
"RTN","DIKCUTL2",55,0)
 S:$G(FLG)'["M" $P(CNT,U,2)=FIL
"RTN","DIKCUTL2",56,0)
 Q
"RTN","DIKCUTL2",57,0)
 ;
"RTN","DIKCUTL2",58,0)
 ;============================
"RTN","DIKCUTL2",59,0)
 ; LIST(.count,header,screen)
"RTN","DIKCUTL2",60,0)
 ;============================
"RTN","DIKCUTL2",61,0)
 ;List the xrefs in the CNT array
"RTN","DIKCUTL2",62,0)
 ;In:
"RTN","DIKCUTL2",63,0)
 ; CNT = Array of xrefs to print (obtained by GETXR call above)
"RTN","DIKCUTL2",64,0)
 ; HDR = Text to print before listing
"RTN","DIKCUTL2",65,0)
 ;        (default is 'Current Indexes[ on [sub]file #xxx]:')
"RTN","DIKCUTL2",66,0)
 ; SCR = Sets $T to screen out indexes (Y = index#)
"RTN","DIKCUTL2",67,0)
 ;
"RTN","DIKCUTL2",68,0)
LIST(CNT,HDR,SCR) ;
"RTN","DIKCUTL2",69,0)
 I '$G(CNT) W:$P(CNT,U,2) !,"There are no INDEX file cross-references defined on "_$$FSTR($P(CNT,U,2))_"." Q
"RTN","DIKCUTL2",70,0)
 N FIL,I,ONEFIL,RFIL,TYP,TXT,UI,XR,Y
"RTN","DIKCUTL2",71,0)
 ;
"RTN","DIKCUTL2",72,0)
 S ONEFIL=$P(CNT,U,2)
"RTN","DIKCUTL2",73,0)
 S:$G(HDR)="" HDR="Current Indexes"_$S(ONEFIL:" on "_$$FSTR(ONEFIL),1:"")_":"
"RTN","DIKCUTL2",74,0)
 W !,HDR
"RTN","DIKCUTL2",75,0)
 ;
"RTN","DIKCUTL2",76,0)
 S XR=0 F  S XR=$O(CNT(XR)) Q:'XR  D
"RTN","DIKCUTL2",77,0)
 . I $G(SCR)]"" K Y S Y=XR,Y(0)=CNT(XR) X SCR K Y E  Q
"RTN","DIKCUTL2",78,0)
 . S FIL=$P(CNT(XR),U,2),RFIL=$P(CNT(XR),U),TYP=$P(CNT(XR),U,4)
"RTN","DIKCUTL2",79,0)
 . S UI=$S($P(CNT(XR),U,5)="UI":"uniqueness ",1:"")
"RTN","DIKCUTL2",80,0)
 . S RFIL=$S('ONEFIL:" on "_$$FSTR(RFIL),1:"")
"RTN","DIKCUTL2",81,0)
 . ;
"RTN","DIKCUTL2",82,0)
 . S TXT=XR_"  "_$J("",5-$L(XR))_"'"_$P(CNT(XR),U,3)_"' "_UI
"RTN","DIKCUTL2",83,0)
 . I TYP'="W" S TXT=TXT_"index"_RFIL
"RTN","DIKCUTL2",84,0)
 . E  S TXT=TXT_"whole file index"_RFIL_" (resides on "_$$FSTR(FIL)_")"
"RTN","DIKCUTL2",85,0)
 . ;
"RTN","DIKCUTL2",86,0)
 . D WRAP^DIKCU2(.TXT,-11,-2)
"RTN","DIKCUTL2",87,0)
 . W !,"  "_TXT F I=1:1 Q:$D(TXT(I))[0  W !?10,TXT(I)
"RTN","DIKCUTL2",88,0)
 . K TXT
"RTN","DIKCUTL2",89,0)
 Q
"RTN","DIKCUTL2",90,0)
 ;
"RTN","DIKCUTL2",91,0)
 ;================================
"RTN","DIKCUTL2",92,0)
 ; $$CHOOSE(.count,prompt,screen)
"RTN","DIKCUTL2",93,0)
 ;================================
"RTN","DIKCUTL2",94,0)
 ;Prompt for a xref from the DIKCCNT array
"RTN","DIKCUTL2",95,0)
 ;In:
"RTN","DIKCUTL2",96,0)
 ; DIKCCNT = Array contain xref data (obtained by GETXR call above)
"RTN","DIKCUTL2",97,0)
 ; DIKCPR  = Action to include with the prompt
"RTN","DIKCUTL2",98,0)
 ; DIKCSCR = Sets $T to screen out entries (Y=index#)
"RTN","DIKCUTL2",99,0)
 ;Returns:
"RTN","DIKCUTL2",100,0)
 ; Index ien (or 0, if none selected)
"RTN","DIKCUTL2",101,0)
 ;
"RTN","DIKCUTL2",102,0)
CHOOSE(DIKCCNT,DIKCPR,DIKCSCR) ;
"RTN","DIKCUTL2",103,0)
 Q:'$G(DIKCCNT) 0
"RTN","DIKCUTL2",104,0)
 N I,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","DIKCUTL2",105,0)
 ;
"RTN","DIKCUTL2",106,0)
 S DIR(0)="SAO^"
"RTN","DIKCUTL2",107,0)
 S I=0 F  S I=$O(DIKCCNT(I)) Q:'I  S DIR("C",I)=I_":"_$P(DIKCCNT(I),U,3)
"RTN","DIKCUTL2",108,0)
 S DIR("A")="Which Index do you wish to "_DIKCPR_"? "
"RTN","DIKCUTL2",109,0)
 S:+DIKCCNT=1 DIR("B")=$O(DIKCCNT(0))
"RTN","DIKCUTL2",110,0)
 S DIR("?")="",DIR("??")="^D LIST^DIKCUTL2(.DIKCCNT)"
"RTN","DIKCUTL2",111,0)
 W ! D ^DIR I 'Y!$D(DIRUT) Q 0
"RTN","DIKCUTL2",112,0)
 Q Y
"RTN","DIKCUTL2",113,0)
 ;
"RTN","DIKCUTL2",114,0)
 ;====================
"RTN","DIKCUTL2",115,0)
 ; $$FSTR(file#,flag)
"RTN","DIKCUTL2",116,0)
 ;====================
"RTN","DIKCUTL2",117,0)
 ;Return string 'file #xxx' or 'subfile #xxx'
"RTN","DIKCUTL2",118,0)
 ;In:
"RTN","DIKCUTL2",119,0)
 ; FIL = File #
"RTN","DIKCUTL2",120,0)
 ; FLG [ U : Capitalize 'File' or 'Subfile'
"RTN","DIKCUTL2",121,0)
 ;
"RTN","DIKCUTL2",122,0)
FSTR(FIL,FLG) ;
"RTN","DIKCUTL2",123,0)
 ;Q $P($P("f;F^subf;Subf",U,$G(^DD(FIL,0,"UP"))>0+1),";",$G(FLG)["U"+1)_"ile #"_FIL
"RTN","DIKCUTL2",124,0)
 Q $P($$EZBLD^DIALOG(8098),U,$G(^DD(FIL,0,"UP"))>0*2+1+($G(FLG)["U"))_" #"_FIL
"RTN","DIKCUTL2",125,0)
 ;
"RTN","DIKCUTL2",126,0)
 ;================
"RTN","DIKCUTL2",127,0)
 ; PRTMSG(index#)
"RTN","DIKCUTL2",128,0)
 ;================
"RTN","DIKCUTL2",129,0)
 ;Print message that DIXR can't be deleted because it's the
"RTN","DIKCUTL2",130,0)
 ;Uniqueness Index for a key.
"RTN","DIKCUTL2",131,0)
 ;In:
"RTN","DIKCUTL2",132,0)
 ; DIXR = index #
"RTN","DIKCUTL2",133,0)
 ;
"RTN","DIKCUTL2",134,0)
PRTMSG(DIXR) ;
"RTN","DIKCUTL2",135,0)
 N KEYID,I,INDID,MSG
"RTN","DIKCUTL2",136,0)
 ;
"RTN","DIKCUTL2",137,0)
 S KEYID=$O(^DD("KEY","AU",DIXR,0)) Q:'KEYID
"RTN","DIKCUTL2",138,0)
 S KEYID=$G(^DD("KEY",KEYID,0)) Q:KEYID?."^"
"RTN","DIKCUTL2",139,0)
 S KEYID="Key '"_$P(KEYID,U,2)_"' on File #"_$P(KEYID,U)
"RTN","DIKCUTL2",140,0)
 ;
"RTN","DIKCUTL2",141,0)
 S INDID="Index '"_$P($G(^DD("IX",DIXR,0)),U,2)_"'"
"RTN","DIKCUTL2",142,0)
 S MSG(0)=INDID_" cannot be deleted. It is the uniqueness index for "_KEYID_"."
"RTN","DIKCUTL2",143,0)
 D WRAP^DIKCU2(.MSG)
"RTN","DIKCUTL2",144,0)
 ;
"RTN","DIKCUTL2",145,0)
 W $C(7) F I=0:1 Q:'$D(MSG(I))  W !,MSG(I)
"RTN","DIKCUTL2",146,0)
 Q
"RTN","DIKCUTL2",147,0)
 ;
"RTN","DIKCUTL2",148,0)
 ;================
"RTN","DIKCUTL2",149,0)
 ; BLDLOG(index#)
"RTN","DIKCUTL2",150,0)
 ;================
"RTN","DIKCUTL2",151,0)
 ;Build and file the logic of the cross reference.
"RTN","DIKCUTL2",152,0)
 ;In:
"RTN","DIKCUTL2",153,0)
 ; DIXR = index #
"RTN","DIKCUTL2",154,0)
 ;
"RTN","DIKCUTL2",155,0)
 ;Called from EDIT^DIKCUTL after an Index is edited.
"RTN","DIKCUTL2",156,0)
 ;The reason for this call is if the user deletes some Cross-Reference
"RTN","DIKCUTL2",157,0)
 ;Values, and then Quits the form, the Set/Kill logic may not reflect
"RTN","DIKCUTL2",158,0)
 ;the deleted Values.
"RTN","DIKCUTL2",159,0)
 ;
"RTN","DIKCUTL2",160,0)
BLDLOG(DIXR) ;
"RTN","DIKCUTL2",161,0)
 N CNT,CRV,CRV0,DIERR,FCNT,FDA,FILE,IX0,KILL,L,LDIF,MAXL,MSG
"RTN","DIKCUTL2",162,0)
 N NAME,ORD,ROOT,RTYPE,RFILE,SBSC,SET,VAL,WKILL
"RTN","DIKCUTL2",163,0)
 ;
"RTN","DIKCUTL2",164,0)
 ;Get index data
"RTN","DIKCUTL2",165,0)
 S IX0=$G(^DD("IX",DIXR,0)) Q:IX0?."^"
"RTN","DIKCUTL2",166,0)
 I $P(IX0,U,4)="MU" D UPDEXEC(DIXR) Q
"RTN","DIKCUTL2",167,0)
 S FILE=$P(IX0,U),NAME=$P(IX0,U,2),RTYPE=$P(IX0,U,8),RFILE=$P(IX0,U,9)
"RTN","DIKCUTL2",168,0)
 ;
"RTN","DIKCUTL2",169,0)
 ;Build root of index and the 'Kill Entire Index Code'
"RTN","DIKCUTL2",170,0)
 I FILE'=RFILE Q:RTYPE'="W"  S LDIF=$$FLEVDIFF^DIKCU(FILE,RFILE)
"RTN","DIKCUTL2",171,0)
 E  S LDIF=0
"RTN","DIKCUTL2",172,0)
 S ROOT=$$FROOTDA^DIKCU(FILE,LDIF_"O")_""""_NAME_""""
"RTN","DIKCUTL2",173,0)
 S WKILL="K "_ROOT_")"
"RTN","DIKCUTL2",174,0)
 ;
"RTN","DIKCUTL2",175,0)
 ;Loop through Cross-Reference Values multiple
"RTN","DIKCUTL2",176,0)
 ;Build SBSC(subscript#)=order#^maxLength array
"RTN","DIKCUTL2",177,0)
 S CRV=0 F  S CRV=$O(^DD("IX",DIXR,11.1,CRV)) Q:'CRV  D
"RTN","DIKCUTL2",178,0)
 . S CRV0=$G(^DD("IX",DIXR,11.1,CRV,0)) Q:CRV0?."^"
"RTN","DIKCUTL2",179,0)
 . S ORD=$P(CRV0,U) Q:'ORD
"RTN","DIKCUTL2",180,0)
 . S:$P(CRV0,U,2)="F" FCNT=$G(FCNT)+1
"RTN","DIKCUTL2",181,0)
 . S CNT=$G(CNT)+1
"RTN","DIKCUTL2",182,0)
 . S SBSC=$P(CRV0,U,6) Q:'SBSC
"RTN","DIKCUTL2",183,0)
 . S MAXL=$P(CRV0,U,5)
"RTN","DIKCUTL2",184,0)
 . S SBSC(SBSC)=ORD_U_MAXL
"RTN","DIKCUTL2",185,0)
 ;
"RTN","DIKCUTL2",186,0)
 ;Loop through SBSC array and build the root w/ X(n) array
"RTN","DIKCUTL2",187,0)
 S SBSC=0 F  S SBSC=$O(SBSC(SBSC)) Q:'SBSC  D
"RTN","DIKCUTL2",188,0)
 . S ORD=$P(SBSC(SBSC),U),MAXL=$P(SBSC(SBSC),U,2)
"RTN","DIKCUTL2",189,0)
 . I $G(CNT)=1 S VAL=$S(MAXL:"$E(X,1,"_MAXL_")",1:"X")
"RTN","DIKCUTL2",190,0)
 . E  S VAL=$S(MAXL:"$E(X("_ORD_"),1,"_MAXL_")",1:"X("_ORD_")")
"RTN","DIKCUTL2",191,0)
 . S ROOT=ROOT_","_VAL
"RTN","DIKCUTL2",192,0)
 ;
"RTN","DIKCUTL2",193,0)
 ;Append DA(n) to root
"RTN","DIKCUTL2",194,0)
 F L=LDIF:-1:1 S ROOT=ROOT_",DA("_L_")"
"RTN","DIKCUTL2",195,0)
 S ROOT=ROOT_",DA)"
"RTN","DIKCUTL2",196,0)
 ;
"RTN","DIKCUTL2",197,0)
 ;Build and file the Set and Kill Logic and the Execution
"RTN","DIKCUTL2",198,0)
 I '$O(SBSC(0)) S (SET,KILL)="Q",WKILL=""
"RTN","DIKCUTL2",199,0)
 E  S SET="S "_ROOT_"=""""",KILL="K "_ROOT
"RTN","DIKCUTL2",200,0)
 K FDA
"RTN","DIKCUTL2",201,0)
 S FDA(.11,DIXR_",",1.1)=SET
"RTN","DIKCUTL2",202,0)
 S FDA(.11,DIXR_",",2.1)=KILL
"RTN","DIKCUTL2",203,0)
 S FDA(.11,DIXR_",",2.5)=WKILL
"RTN","DIKCUTL2",204,0)
 S FDA(.11,DIXR_",",.4)=$S($G(FCNT)>1:"R",1:"F")
"RTN","DIKCUTL2",205,0)
 D FILE^DIE("","FDA","MSG")
"RTN","DIKCUTL2",206,0)
 Q
"RTN","DIKCUTL2",207,0)
 ;
"RTN","DIKCUTL2",208,0)
UPDEXEC(DIXR) ;Update Execution based on number of field-type xref values
"RTN","DIKCUTL2",209,0)
 N CRV,CRV0,DIERR,FCNT,FDA,MSG
"RTN","DIKCUTL2",210,0)
 S CRV(1)=DIXR,CRV=0
"RTN","DIKCUTL2",211,0)
 F  S CRV=$O(^DD("IX",DIXR,11.1,CRV)) Q:'CRV  D
"RTN","DIKCUTL2",212,0)
 . S CRV0=$G(^DD("IX",DIXR,11.1,CRV,0)) Q:'CRV0
"RTN","DIKCUTL2",213,0)
 . S:$P(CRV0,U,2)="F" FCNT=$G(FCNT)+1
"RTN","DIKCUTL2",214,0)
 S FDA(.11,DIXR_",",.4)=$S($G(FCNT)>1:"R",1:"F")
"RTN","DIKCUTL2",215,0)
 D FILE^DIE("","FDA","MSG")
"RTN","DIKCUTL2",216,0)
 Q
"RTN","DINIT0F9")
0^1^B57110980^B53814964
"RTN","DINIT0F9",1,0)
DINIT0F9 ;SFISC/MKO-DATA FOR FORM AND BLOCK FILES ;17DEC2010
"RTN","DINIT0F9",2,0)
 ;;22.0;VA FileMan;**167**;Mar 30, 1999;Build 18
"RTN","DINIT0F9",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DINIT0F9",4,0)
 ; TAG 'ENTRY+172' CHANGED TO REMEMBER LANGUAGE OF PRINT TEMPLATE HEADER
"RTN","DINIT0F9",5,0)
 F I=1:2 S X=$T(ENTRY+I) G:X="" ^DINIT0FA S Y=$E($T(ENTRY+I+1),5,999),X=$E(X,4,999),@X=Y
"RTN","DINIT0F9",6,0)
 Q
"RTN","DINIT0F9",7,0)
ENTRY ;
"RTN","DINIT0F9",8,0)
 ;;^DIST(.404,.00116,40,4,2)
"RTN","DINIT0F9",9,0)
 ;;=6,23^54^6,15
"RTN","DINIT0F9",10,0)
 ;;^DIST(.404,.00116,40,4,3)
"RTN","DINIT0F9",11,0)
 ;;=!M
"RTN","DINIT0F9",12,0)
 ;;^DIST(.404,.00116,40,4,3.1)
"RTN","DINIT0F9",13,0)
 ;;=S Y=$G(^DD(DICATTA,DICATTF,10))
"RTN","DINIT0F9",14,0)
 ;;^DIST(.404,.00116,40,4,20)
"RTN","DINIT0F9",15,0)
 ;;=DD^^0,10
"RTN","DINIT0F9",16,0)
 ;;^DIST(.404,.00116,40,5,0)
"RTN","DINIT0F9",17,0)
 ;;=.5^ ^4^^MULTIPLE FIELD NUMBER
"RTN","DINIT0F9",18,0)
 ;;^DIST(.404,.00116,40,5,2)
"RTN","DINIT0F9",19,0)
 ;;=1,2^77^1,1^1
"RTN","DINIT0F9",20,0)
 ;;^DIST(.404,.00116,40,5,30)
"RTN","DINIT0F9",21,0)
 ;;=D NUMBER^DICATTD
"RTN","DINIT0F9",22,0)
 ;;^DIST(.404,.00117,0)
"RTN","DINIT0F9",23,0)
 ;;=DICATTMUL^1
"RTN","DINIT0F9",24,0)
 ;;^DIST(.404,.00117,40,0)
"RTN","DINIT0F9",25,0)
 ;;=^.4044I^2^2
"RTN","DINIT0F9",26,0)
 ;;^DIST(.404,.00117,40,1,0)
"RTN","DINIT0F9",27,0)
 ;;=1^SHOULD USER SEE AN "ADDING A NEW ENTRY" MESSAGE^2
"RTN","DINIT0F9",28,0)
 ;;^DIST(.404,.00117,40,1,2)
"RTN","DINIT0F9",29,0)
 ;;=2,52^3^2,3
"RTN","DINIT0F9",30,0)
 ;;^DIST(.404,.00117,40,1,3)
"RTN","DINIT0F9",31,0)
 ;;=!M
"RTN","DINIT0F9",32,0)
 ;;^DIST(.404,.00117,40,1,3.1)
"RTN","DINIT0F9",33,0)
 ;;=D LAYGODEF^DICATTDE
"RTN","DINIT0F9",34,0)
 ;;^DIST(.404,.00117,40,1,20)
"RTN","DINIT0F9",35,0)
 ;;=Y
"RTN","DINIT0F9",36,0)
 ;;^DIST(.404,.00117,40,2,0)
"RTN","DINIT0F9",37,0)
 ;;=2^HAVING ENTERED OR EDITED ONE MULTIPLE, SHOULD USER BE ASKED ANOTHER^2
"RTN","DINIT0F9",38,0)
 ;;^DIST(.404,.00117,40,2,2)
"RTN","DINIT0F9",39,0)
 ;;=3,72^3^3,3
"RTN","DINIT0F9",40,0)
 ;;^DIST(.404,.00117,40,2,3)
"RTN","DINIT0F9",41,0)
 ;;=!M
"RTN","DINIT0F9",42,0)
 ;;^DIST(.404,.00117,40,2,3.1)
"RTN","DINIT0F9",43,0)
 ;;=S Y=$E("NY",$G(DICATT2)["M"+1)
"RTN","DINIT0F9",44,0)
 ;;^DIST(.404,.00117,40,2,20)
"RTN","DINIT0F9",45,0)
 ;;=Y
"RTN","DINIT0F9",46,0)
 ;;^DIST(.404,.00118,0)
"RTN","DINIT0F9",47,0)
 ;;=DICATT SCREEN^1
"RTN","DINIT0F9",48,0)
 ;;^DIST(.404,.00118,40,0)
"RTN","DINIT0F9",49,0)
 ;;=^.4044I^3^3
"RTN","DINIT0F9",50,0)
 ;;^DIST(.404,.00118,40,1,0)
"RTN","DINIT0F9",51,0)
 ;;=65^SHOULD ENTRIES BE SCREENED^2
"RTN","DINIT0F9",52,0)
 ;;^DIST(.404,.00118,40,1,2)
"RTN","DINIT0F9",53,0)
 ;;=2,31^3^2,3
"RTN","DINIT0F9",54,0)
 ;;^DIST(.404,.00118,40,1,3)
"RTN","DINIT0F9",55,0)
 ;;=!M
"RTN","DINIT0F9",56,0)
 ;;^DIST(.404,.00118,40,1,3.1)
"RTN","DINIT0F9",57,0)
 ;;=S Y=$E("NY",$G(^DD(DICATTA,DICATTF,12.1))]""+1)
"RTN","DINIT0F9",58,0)
 ;;^DIST(.404,.00118,40,1,12)
"RTN","DINIT0F9",59,0)
 ;;=D UNED^DDSUTL(66,,,'X),UNED^DDSUTL(67,,,'X) I 'X D PUT^DDSVALF(66,,,""),PUT^DDSVALF(67,,,"")
"RTN","DINIT0F9",60,0)
 ;;^DIST(.404,.00118,40,1,20)
"RTN","DINIT0F9",61,0)
 ;;=Y
"RTN","DINIT0F9",62,0)
 ;;^DIST(.404,.00118,40,1,21,0)
"RTN","DINIT0F9",63,0)
 ;;=^^2^2^2981215
"RTN","DINIT0F9",64,0)
 ;;^DIST(.404,.00118,40,1,21,1,0)
"RTN","DINIT0F9",65,0)
 ;;=Answer YES if there is a condition which should prohibit
"RTN","DINIT0F9",66,0)
 ;;^DIST(.404,.00118,40,1,21,2,0)
"RTN","DINIT0F9",67,0)
 ;;=the selection of all choices at all times.
"RTN","DINIT0F9",68,0)
 ;;^DIST(.404,.00118,40,2,0)
"RTN","DINIT0F9",69,0)
 ;;=66^MUMPS CODE THAT WILL SET DIC("S")^2
"RTN","DINIT0F9",70,0)
 ;;^DIST(.404,.00118,40,2,2)
"RTN","DINIT0F9",71,0)
 ;;=4,3^72^3,3
"RTN","DINIT0F9",72,0)
 ;;^DIST(.404,.00118,40,2,3)
"RTN","DINIT0F9",73,0)
 ;;=!M
"RTN","DINIT0F9",74,0)
 ;;^DIST(.404,.00118,40,2,3.1)
"RTN","DINIT0F9",75,0)
 ;;=S Y=$G(^DD(DICATTA,DICATTF,12.1))
"RTN","DINIT0F9",76,0)
 ;;^DIST(.404,.00118,40,2,10)
"RTN","DINIT0F9",77,0)
 ;;=D REQ^DDSUTL(67,,,X]"")
"RTN","DINIT0F9",78,0)
 ;;^DIST(.404,.00118,40,2,20)
"RTN","DINIT0F9",79,0)
 ;;=F^U
"RTN","DINIT0F9",80,0)
 ;;^DIST(.404,.00118,40,2,21,0)
"RTN","DINIT0F9",81,0)
 ;;=^^3^3^2981215
"RTN","DINIT0F9",82,0)
 ;;^DIST(.404,.00118,40,2,21,1,0)
"RTN","DINIT0F9",83,0)
 ;;=Enter a MUMPS statement which begins with 'S DIC("S")=' and contains code
"RTN","DINIT0F9",84,0)
 ;;^DIST(.404,.00118,40,2,21,2,0)
"RTN","DINIT0F9",85,0)
 ;;=to set $T.  When the DIC("S") is executed, the variable 'Y' holds internal
"RTN","DINIT0F9",86,0)
 ;;^DIST(.404,.00118,40,2,21,3,0)
"RTN","DINIT0F9",87,0)
 ;;=code being screened.
"RTN","DINIT0F9",88,0)
 ;;^DIST(.404,.00118,40,2,22)
"RTN","DINIT0F9",89,0)
 ;;=D ^DIM
"RTN","DINIT0F9",90,0)
 ;;^DIST(.404,.00118,40,3,0)
"RTN","DINIT0F9",91,0)
 ;;=67^EXPLANATION OF SCREEN^2
"RTN","DINIT0F9",92,0)
 ;;^DIST(.404,.00118,40,3,2)
"RTN","DINIT0F9",93,0)
 ;;=6,3^72^5,3
"RTN","DINIT0F9",94,0)
 ;;^DIST(.404,.00118,40,3,3)
"RTN","DINIT0F9",95,0)
 ;;=!M
"RTN","DINIT0F9",96,0)
 ;;^DIST(.404,.00118,40,3,3.1)
"RTN","DINIT0F9",97,0)
 ;;=S Y=$G(^DD(DICATTA,DICATTF,12))
"RTN","DINIT0F9",98,0)
 ;;^DIST(.404,.00118,40,3,20)
"RTN","DINIT0F9",99,0)
 ;;=F^^1:245
"RTN","DINIT0F9",100,0)
 ;;^DIST(.404,.00118,40,3,22)
"RTN","DINIT0F9",101,0)
 ;;=K:X?.P X
"RTN","DINIT0F9",102,0)
 ;;^DIST(.404,.10011,0)
"RTN","DINIT0F9",103,0)
 ;;=DIPTED^.4
"RTN","DINIT0F9",104,0)
 ;;^DIST(.404,.10011,40,0)
"RTN","DINIT0F9",105,0)
 ;;=^.4044I^14^12
"RTN","DINIT0F9",106,0)
 ;;^DIST(.404,.10011,40,1,0)
"RTN","DINIT0F9",107,0)
 ;;=1^TEMPLATE NAME^3
"RTN","DINIT0F9",108,0)
 ;;^DIST(.404,.10011,40,1,1)
"RTN","DINIT0F9",109,0)
 ;;=.01
"RTN","DINIT0F9",110,0)
 ;;^DIST(.404,.10011,40,1,2)
"RTN","DINIT0F9",111,0)
 ;;=1,16^30^1,1
"RTN","DINIT0F9",112,0)
 ;;^DIST(.404,.10011,40,2,0)
"RTN","DINIT0F9",113,0)
 ;;=3^DATE LAST MODIFIED^3
"RTN","DINIT0F9",114,0)
 ;;^DIST(.404,.10011,40,2,1)
"RTN","DINIT0F9",115,0)
 ;;=2
"RTN","DINIT0F9",116,0)
 ;;^DIST(.404,.10011,40,2,2)
"RTN","DINIT0F9",117,0)
 ;;=4,28^17^4,8
"RTN","DINIT0F9",118,0)
 ;;^DIST(.404,.10011,40,2,4)
"RTN","DINIT0F9",119,0)
 ;;=^^^1
"RTN","DINIT0F9",120,0)
 ;;^DIST(.404,.10011,40,3,0)
"RTN","DINIT0F9",121,0)
 ;;=4^DATE LAST USED^3
"RTN","DINIT0F9",122,0)
 ;;^DIST(.404,.10011,40,3,1)
"RTN","DINIT0F9",123,0)
 ;;=7
"RTN","DINIT0F9",124,0)
 ;;^DIST(.404,.10011,40,3,2)
"RTN","DINIT0F9",125,0)
 ;;=5,28^11^5,12
"RTN","DINIT0F9",126,0)
 ;;^DIST(.404,.10011,40,3,4)
"RTN","DINIT0F9",127,0)
 ;;=^^^1
"RTN","DINIT0F9",128,0)
 ;;^DIST(.404,.10011,40,4,0)
"RTN","DINIT0F9",129,0)
 ;;=6^READ ACCESS^3
"RTN","DINIT0F9",130,0)
 ;;^DIST(.404,.10011,40,4,1)
"RTN","DINIT0F9",131,0)
 ;;=3
"RTN","DINIT0F9",132,0)
 ;;^DIST(.404,.10011,40,4,2)
"RTN","DINIT0F9",133,0)
 ;;=6,28^13^6,15
"RTN","DINIT0F9",134,0)
 ;;^DIST(.404,.10011,40,5,0)
"RTN","DINIT0F9",135,0)
 ;;=7^WRITE ACCESS^3
"RTN","DINIT0F9",136,0)
 ;;^DIST(.404,.10011,40,5,1)
"RTN","DINIT0F9",137,0)
 ;;=6
"RTN","DINIT0F9",138,0)
 ;;^DIST(.404,.10011,40,5,2)
"RTN","DINIT0F9",139,0)
 ;;=7,28^13^7,14
"RTN","DINIT0F9",140,0)
 ;;^DIST(.404,.10011,40,6,0)
"RTN","DINIT0F9",141,0)
 ;;=8^USER #^3
"RTN","DINIT0F9",142,0)
 ;;^DIST(.404,.10011,40,6,1)
"RTN","DINIT0F9",143,0)
 ;;=5
"RTN","DINIT0F9",144,0)
 ;;^DIST(.404,.10011,40,6,2)
"RTN","DINIT0F9",145,0)
 ;;=8,28^9^8,20
"RTN","DINIT0F9",146,0)
 ;;^DIST(.404,.10011,40,7,0)
"RTN","DINIT0F9",147,0)
 ;;=9^DESCRIPTION...^3
"RTN","DINIT0F9",148,0)
 ;;^DIST(.404,.10011,40,7,1)
"RTN","DINIT0F9",149,0)
 ;;=10
"RTN","DINIT0F9",150,0)
 ;;^DIST(.404,.10011,40,7,2)
"RTN","DINIT0F9",151,0)
 ;;=10,28^1^10,13^1
"RTN","DINIT0F9",152,0)
 ;;^DIST(.404,.10011,40,8,0)
"RTN","DINIT0F9",153,0)
 ;;=11^SUB-HEADER SUPPRESSED^3
"RTN","DINIT0F9",154,0)
 ;;^DIST(.404,.10011,40,8,1)
"RTN","DINIT0F9",155,0)
 ;;=707
"RTN","DINIT0F9",156,0)
 ;;^DIST(.404,.10011,40,8,2)
"RTN","DINIT0F9",157,0)
 ;;=14,28^3^14,5
"RTN","DINIT0F9",158,0)
 ;;^DIST(.404,.10011,40,10,0)
"RTN","DINIT0F9",159,0)
 ;;=2^TEMPLATE TYPE^3
"RTN","DINIT0F9",160,0)
 ;;^DIST(.404,.10011,40,10,1)
"RTN","DINIT0F9",161,0)
 ;;=8
"RTN","DINIT0F9",162,0)
 ;;^DIST(.404,.10011,40,10,2)
"RTN","DINIT0F9",163,0)
 ;;=1,71^9^1,56
"RTN","DINIT0F9",164,0)
 ;;^DIST(.404,.10011,40,10,4)
"RTN","DINIT0F9",165,0)
 ;;=^^^1
"RTN","DINIT0F9",166,0)
 ;;^DIST(.404,.10011,40,12,0)
"RTN","DINIT0F9",167,0)
 ;;=10^HEADER^2
"RTN","DINIT0F9",168,0)
 ;;^DIST(.404,.10011,40,12,2)
"RTN","DINIT0F9",169,0)
 ;;=13,4^76^12,4
"RTN","DINIT0F9",170,0)
 ;;^DIST(.404,.10011,40,12,3)
"RTN","DINIT0F9",171,0)
 ;;=!M
"RTN","DINIT0F9",172,0)
 ;;^DIST(.404,.10011,40,12,3.1)
"RTN","DINIT0F9",173,0)
 ;;=S Y=$G(^DIPT(DA,"H"))
"RTN","DINIT0F9",174,0)
 ;;^DIST(.404,.10011,40,12,20)
"RTN","DINIT0F9",175,0)
 ;;=F^^F
"RTN","DINIT0F9",176,0)
 ;;^DIST(.404,.10011,40,12,22)
"RTN","DINIT0F9",177,0)
 ;;=I '$$DHD^DIP3(X,+$P($G(^DIPT(DA,0)),U,4),0) K X
"RTN","DINIT0F9",178,0)
 ;;^DIST(.404,.10011,40,12,23)
"RTN","DINIT0F9",179,0)
 ;;=S ^DIPT(DA,"H")=$S(DDSEXT="":"@",1:DDSEXT) I $G(DUZ("LANG")) S ^("HLANG")=DUZ("LANG")
"RTN","DINIT0F9",180,0)
 ;;^DIST(.404,.10011,40,13,0)
"RTN","DINIT0F9",181,0)
 ;;=5^^4
"RTN","DINIT0F9",182,0)
 ;;^DIST(.404,.10011,40,13,2)
"RTN","DINIT0F9",183,0)
 ;;=2,20^44
"RTN","DINIT0F9",184,0)
 ;;^DIST(.404,.10011,40,13,30)
"RTN","DINIT0F9",185,0)
 ;;=S Y=$G(^DIPT(DA,"ROU")),Y=$S(Y]"":"(Compiled as '"_Y_"' routine)",1:"(Not Compiled)")
"RTN","DINIT0F9",186,0)
 ;;^DIST(.404,.10011,40,14,0)
"RTN","DINIT0F9",187,0)
 ;;=12^(Print Fields on Next Page...)^1^^EDIT FIELD
"RTN","DINIT0F9",188,0)
 ;;^DIST(.404,.10011,40,14,2)
"RTN","DINIT0F9",189,0)
 ;;=^^16,20
"RTN","DINIT0F9",190,0)
 ;;^DIST(.404,.10012,0)
"RTN","DINIT0F9",191,0)
 ;;=DIPTED2^.4
"RTN","DINIT0F9",192,0)
 ;;^DIST(.404,.10012,11)
"RTN","DINIT0F9",193,0)
 ;;=D EDIT^DIPTED(DA)
"RTN","DINIT0F9",194,0)
 ;;^DIST(.404,.10012,40,0)
"RTN","DINIT0F9",195,0)
 ;;=^.4044I^1^1
"RTN","DINIT0F9",196,0)
 ;;^DIST(.404,.10012,40,1,0)
"RTN","DINIT0F9",197,0)
 ;;=1^ ^1
"RTN","DINIT0F9",198,0)
 ;;^DIST(.404,.10012,40,1,2)
"RTN","DINIT0F9",199,0)
 ;;=^^1,1
"RTN","DINIT0F9",200,0)
 ;;^DIST(.404,.110101,0)
"RTN","DINIT0F9",201,0)
 ;;=DIKC EDIT MAIN^.11
"RTN","DINIT0F9",202,0)
 ;;^DIST(.404,.110101,40,0)
"RTN","DINIT0F9",203,0)
 ;;=^.4044I^14^11
"RTN","DINIT0F9",204,0)
 ;;^DIST(.404,.110101,40,1,0)
"RTN","DINIT0F9",205,0)
 ;;=1^File^3
"RTN","DINIT0F9",206,0)
 ;;^DIST(.404,.110101,40,1,1)
"RTN","DINIT0F9",207,0)
 ;;=.01
"RTN","DINIT0F9",208,0)
 ;;^DIST(.404,.110101,40,1,2)
"RTN","DINIT0F9",209,0)
 ;;=1,15^20^1,9
"RTN","DINIT0F9",210,0)
 ;;^DIST(.404,.110101,40,1,13)
"RTN","DINIT0F9",211,0)
 ;;=D BLDLOG^DIKCFORM(DA)
"RTN","DINIT0F9",212,0)
 ;;^DIST(.404,.110101,40,1,14)
"RTN","DINIT0F9",213,0)
 ;;=D VALFILE^DIKCFORM
"RTN","DINIT0F9",214,0)
 ;;^DIST(.404,.110101,40,2,0)
"RTN","DINIT0F9",215,0)
 ;;=3^Index Name^3
"RTN","DINIT0F9",216,0)
 ;;^DIST(.404,.110101,40,2,1)
"RTN","DINIT0F9",217,0)
 ;;=.02
"RTN","DINIT0F9",218,0)
 ;;^DIST(.404,.110101,40,2,2)
"RTN","DINIT0F9",219,0)
 ;;=2,15^30^2,3
"RTN","DINIT0F9",220,0)
 ;;^DIST(.404,.110101,40,2,13)
"RTN","DINIT0F9",221,0)
 ;;=D NAMECHG^DIKCFORM
"RTN","DINIT0F9",222,0)
 ;;^DIST(.404,.110101,40,2,14)
"RTN","DINIT0F9",223,0)
 ;;=D NAMEVAL^DIKCFORM
"RTN","DINIT0F9",224,0)
 ;;^DIST(.404,.110101,40,3,0)
"RTN","DINIT0F9",225,0)
 ;;=5^Short Description^3
"RTN","DINIT0F9",226,0)
 ;;^DIST(.404,.110101,40,3,1)
"RTN","DINIT0F9",227,0)
 ;;=.11
"RTN","DINIT0F9",228,0)
 ;;^DIST(.404,.110101,40,3,2)
"RTN","DINIT0F9",229,0)
 ;;=4,20^60^4,1
"RTN","DINIT0F9",230,0)
 ;;^DIST(.404,.110101,40,4,0)
"RTN","DINIT0F9",231,0)
 ;;=6^Description (wp)^3
"RTN","DINIT0F9",232,0)
 ;;^DIST(.404,.110101,40,4,1)
"RTN","DINIT0F9",233,0)
 ;;=.1
"RTN","DINIT0F9",234,0)
 ;;^DIST(.404,.110101,40,4,2)
"RTN","DINIT0F9",235,0)
 ;;=5,20^1^5,2
"RTN","DINIT0F9",236,0)
 ;;^DIST(.404,.110101,40,5,0)
"RTN","DINIT0F9",237,0)
 ;;=8^Type^3
"RTN","DINIT0F9",238,0)
 ;;^DIST(.404,.110101,40,5,1)
"RTN","DINIT0F9",239,0)
 ;;=.2
"RTN","DINIT0F9",240,0)
 ;;^DIST(.404,.110101,40,5,2)
"RTN","DINIT0F9",241,0)
 ;;=7,15^8^7,9
"RTN","DINIT0F9",242,0)
 ;;^DIST(.404,.110101,40,5,13)
"RTN","DINIT0F9",243,0)
 ;;=D TYPECHG^DIKCFORM
"RTN","DINIT0F9",244,0)
 ;;^DIST(.404,.110101,40,5,14)
"RTN","DINIT0F9",245,0)
 ;;=D TYPEVAL^DIKCFORM
"RTN","DINIT0F9",246,0)
 ;;^DIST(.404,.110101,40,7,0)
"RTN","DINIT0F9",247,0)
 ;;=10^Execution^3
"RTN","DINIT0F9",248,0)
 ;;^DIST(.404,.110101,40,7,1)
"RTN","DINIT0F9",249,0)
 ;;=.4
"RTN","DINIT0F9",250,0)
 ;;^DIST(.404,.110101,40,7,2)
"RTN","DINIT0F9",251,0)
 ;;=10,15^6^10,4
"RTN","DINIT0F9",252,0)
 ;;^DIST(.404,.110101,40,8,0)
"RTN","DINIT0F9",253,0)
 ;;=9^Activity^3
"RTN","DINIT0F9",254,0)
 ;;^DIST(.404,.110101,40,8,1)
"RTN","DINIT0F9",255,0)
 ;;=.41
"RTN","DINIT0F9",256,0)
 ;;^DIST(.404,.110101,40,8,2)
"RTN","DINIT0F9",257,0)
 ;;=9,15^5^9,5
"RTN","DINIT0F9",258,0)
 ;;^DIST(.404,.110101,40,9,0)
"RTN","DINIT0F9",259,0)
 ;;=11^Use^3
"RTN","DINIT0F9",260,0)
 ;;^DIST(.404,.110101,40,9,1)
"RTN","DINIT0F9",261,0)
 ;;=.42
"RTN","DINIT0F9",262,0)
 ;;^DIST(.404,.110101,40,9,2)
"RTN","DINIT0F9",263,0)
 ;;=12,15^16^12,10
"RTN","DINIT0F9",264,0)
 ;;^DIST(.404,.110101,40,9,14)
"RTN","DINIT0F9",265,0)
 ;;=D USEVAL^DIKCFORM
"RTN","DINIT0F9",266,0)
 ;;^DIST(.404,.110101,40,666,0)
"RTN","DINIT0F9",267,0)
 ;;=666^Do Not ReIndex^3
"RTN","DINIT0F9",268,0)
 ;;^DIST(.404,.110101,40,666,1)
"RTN","DINIT0F9",269,0)
 ;;=666
"RTN","DINIT0F9",270,0)
 ;;^DIST(.404,.110101,40,666,2)
"RTN","DINIT0F9",271,0)
 ;;=14,26^22^14,10
"RTN","DINIT11")
0^5^B17127660^B12282950
"RTN","DINIT11",1,0)
DINIT11 ;SFISC/GFT,XAK-INITIALIZE VA FILEMAN ;20DEC2010
"RTN","DINIT11",2,0)
 ;;22.0;VA FileMan;**167**;Mar 30, 1999;Build 18
"RTN","DINIT11",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DINIT11",4,0)
DD F I=1:1 S X=$T(DD+I),Y=$P(X," ",3,99) G ^DINIT11A:X?.P S @("^DD("_$E($P(X," ",2),3,99)_")=Y")
"RTN","DINIT11",5,0)
 ;;0,23,0 TECHNICAL DESCRIPTION^.001^^23;0
"RTN","DINIT11",6,0)
 ;;0,50,0 DATE FIELD LAST EDITED^D^^DT;1^Q
"RTN","DINIT11",7,0)
 ;;0,50,9 ^
"RTN","DINIT11",8,0)
 ;;0,999,0 TRIGGERED-BY POINTER^.15^^5;0
"RTN","DINIT11",9,0)
 ;;0,999,9 ^
"RTN","DINIT11",10,0)
 ;;.1,0,"NM","CROSS-REFERENCE"
"RTN","DINIT11",11,0)
 ;;.1,0 CROSS-REFERENCE^
"RTN","DINIT11",12,0)
 ;;.1,.01,0 INDEX^F^^0;E1,245^Q
"RTN","DINIT11",13,0)
 ;;.1,.01,1,0 ^.1^3^3
"RTN","DINIT11",14,0)
 ;;.1,.01,1,1,0 0^IX
"RTN","DINIT11",15,0)
 ;;.1,.01,1,1,1 S:$P(X,U,2)]"" @("^DD("_$P(X,"^",1)_",0,""IX"",$P(X,""^"",2),DA(2),DA(1))=""""")
"RTN","DINIT11",16,0)
 ;;.1,.01,1,1,2 K:$P(X,U,2)]"" @("^DD("_$P(X,"^",1)_",0,""IX"",$P(X,""^"",2),DA(2),DA(1))")
"RTN","DINIT11",17,0)
 ;;.1,.01,1,2,0 DA(2)^IX
"RTN","DINIT11",18,0)
 ;;.1,.01,1,2,1 S ^DD(DA(2),"IX",DA(1))=""
"RTN","DINIT11",19,0)
 ;;.1,.01,1,2,2 I $O(^DD(DA(2),DA(1),1,0))=DA,$O(^(DA))="" K ^DD(DA(2),"IX",DA(1))
"RTN","DINIT11",20,0)
 ;;.1,.01,1,3,0 ^^TRIGGER
"RTN","DINIT11",21,0)
 ;;.1,.01,1,3,1 S Y=$P(X,U,5),X=$P(X,U,4),Z=DA(2)_U_DA(1)_U_DA I Y F %=1:1 Q:'%  S %1=$S($D(^DD(X,Y,5,%,0)):^(0),1:0) Q:%1=Z  I '%1 S ^(0)=Z F %=-1:0 S ^DD(X,"TRB",DA(2),DA(1),DA,Y)="",Y=X Q:'$D(^DD(X,0,"UP"))  S X=^("UP"),Y=$O(^DD(X,"SB",Y,0))
"RTN","DINIT11",22,0)
 ;;.1,.01,1,3,2 S Y=$P(X,"^",5),X=$P(X,"^",4) I Y S %=0 F  S %=$O(^DD(X,Y,5,%)) Q:%=""  Q:'$D(^(%,0))  I DA(2)_"^"_DA(1)_"^"_DA=^(0) K ^DD(X,Y,5,%) F  K ^DD(X,"TRB",DA(2),DA(1),DA,Y) Q:'$D(^DD(X,0,"UP"))  S Y=X,X=^("UP"),Y=$O(^DD(X,"SB",Y,0))
"RTN","DINIT11",23,0)
 ;;.1,1,0 SET STATEMENT^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"RTN","DINIT11",24,0)
 ;;.1,1,3 This is Standard MUMPS code.
"RTN","DINIT11",25,0)
 ;;.1,1,21,0 ^^3^3^2890802^
"RTN","DINIT11",26,0)
 ;;.1,1,21,1,0 Enter Standard MUMPS code which will set this cross-reference.
"RTN","DINIT11",27,0)
 ;;.1,1,21,2,0 You may use X to reference the data in this field and DA-array
"RTN","DINIT11",28,0)
 ;;.1,1,21,3,0 to reference the internal entry numbers in the file.
"RTN","DINIT11",29,0)
 ;;.1,1,"DEL",1,0 I 1 W $C(7),!,"CAN'T DELETE THIS NODE."
"RTN","DINIT11",30,0)
 ;;.1,2,0 KILL STATEMENT^K^^2;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"RTN","DINIT11",31,0)
 ;;.1,2,3 This is Standard MUMPS code.
"RTN","DINIT11",32,0)
 ;;.1,2,21,0 ^^3^3^2890802^
"RTN","DINIT11",33,0)
 ;;.1,2,21,1,0 Enter Standard MUMPS code which will kill this cross-reference.
"RTN","DINIT11",34,0)
 ;;.1,2,21,2,0 You may use X to reference the data in this field and the DA-array
"RTN","DINIT11",35,0)
 ;;.1,2,21,3,0 to reference the internal entry numbers in the file.
"RTN","DINIT11",36,0)
 ;;.1,2,"DEL",1,0 I 1 W $C(7),!,"CAN'T DELETE THIS NODE."
"RTN","DINIT11",37,0)
 ;;.1,3,0 NO-DELETION MESSAGE^F^^3;1^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>245!($L(X)<3) X
"RTN","DINIT11",38,0)
 ;;.1,3,1,0 ^.1
"RTN","DINIT11",39,0)
 ;;.1,3,1,1,0 .1^AC^MUMPS
"RTN","DINIT11",40,0)
 ;;.1,3,1,1,1 Q
"RTN","DINIT11",41,0)
 ;;.1,3,1,1,2 K:^DD(DA(2),DA(1),1,DA,3)']"" ^(3)
"RTN","DINIT11",42,0)
 ;;.1,3,3 Answer must be 3-245 characters in length.
"RTN","DINIT11",43,0)
 ;;.1,3,21,0 ^^2^2^2890803^^
"RTN","DINIT11",44,0)
 ;;.1,3,21,1,0 Enter a message if you want to prevent this cross-reference from being
"RTN","DINIT11",45,0)
 ;;.1,3,21,2,0 deleted.
"RTN","DINIT11",46,0)
 ;;.1,4,0 DATE UPDATED^D^^DT;1^S %DT="ET" D ^%DT S X=Y K:Y<1 X
"RTN","DINIT11",47,0)
 ;;.1,10,0 DESCRIPTION^.101^^%D;0
"RTN","DINIT11",48,0)
 ;;.1,"IX",.01
"RTN","DINIT11",49,0)
 ;;.1,666,0 RE-INDEXING^SI^1:NO RE-INDEXING ALLOWED;0:ALLOW REINDEXING^NOREINDEX;1
"RTN","DINIT11",50,0)
 ;;.1,666,3 Should the re-indexing of this cross reference be prohibited?
"RTN","DINIT11",51,0)
 ;;.1,666,21,0 ^^5^5
"RTN","DINIT11",52,0)
 ;;.1,666,21,1,0 If you answer '1', this cross reference will not be re-indexed during a
"RTN","DINIT11",53,0)
 ;;.1,666,21,2,0 general re-indexing of this file, whether it's done via API or
"RTN","DINIT11",54,0)
 ;;.1,666,21,3,0 interactively. If you answer '0', which is the default, it will. A cross
"RTN","DINIT11",55,0)
 ;;.1,666,21,4,0 reference will be re-indexed if it is specifically named in an API call.
"RTN","DINIT11",56,0)
 ;;.1,666,21,5,0 For those APIs which re-index a single record, this restriction is ignored.
"RTN","DINIT11",57,0)
 ;;.101,0 DESCRIPTION SUB-FIELD^^.01^1
"RTN","DINIT11",58,0)
 ;;.101,0,"UP" .1
"RTN","DINIT11",59,0)
 ;;.101,.01,0 DESCRIPTION^W^^0;1^Q
"RTN","DINIT2A2")
0^3^B67467623^B58044793
"RTN","DINIT2A2",1,0)
DINIT2A2 ;SFISC/MKO-KEY AND INDEX FILES ;11:29 AM  19 Nov 2012
"RTN","DINIT2A2",2,0)
 ;;22.0;VA FileMan;**1,167**;Mar 30, 1999;Build 18
"RTN","DINIT2A2",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DINIT2A2",4,0)
 F I=1:2 S X=$T(Q+I) Q:X=""  S Y=$E($T(Q+I+1),4,999),X=$E(X,4,999) S:$A(Y)=126 I=I+1,Y=$E(Y,2,999)_$E($T(Q+I+1),5,99) S:$A(Y)=61 Y=$E(Y,2,999) S @X=Y
"RTN","DINIT2A2",5,0)
 G ^DINIT2A3
"RTN","DINIT2A2",6,0)
Q Q
"RTN","DINIT2A2",7,0)
 ;;^DD(.11,2.1,9)
"RTN","DINIT2A2",8,0)
 ;;=@
"RTN","DINIT2A2",9,0)
 ;;^DD(.11,2.1,21,0)
"RTN","DINIT2A2",10,0)
 ;;=^^16^16^2990430^
"RTN","DINIT2A2",11,0)
 ;;^DD(.11,2.1,21,1,0)
"RTN","DINIT2A2",12,0)
 ;;=Answer with the M code that FileMan should execute when the values of
"RTN","DINIT2A2",13,0)
 ;;^DD(.11,2.1,21,2,0)
"RTN","DINIT2A2",14,0)
 ;;=fields that make up the cross-reference are changed or deleted. When field
"RTN","DINIT2A2",15,0)
 ;;^DD(.11,2.1,21,3,0)
"RTN","DINIT2A2",16,0)
 ;;=values are changed, FileMan executes first the KILL LOGIC, then the SET
"RTN","DINIT2A2",17,0)
 ;;^DD(.11,2.1,21,4,0)
"RTN","DINIT2A2",18,0)
 ;;=LOGIC.
"RTN","DINIT2A2",19,0)
 ;;^DD(.11,2.1,21,5,0)
"RTN","DINIT2A2",20,0)
 ;;= 
"RTN","DINIT2A2",21,0)
 ;;^DD(.11,2.1,21,6,0)
"RTN","DINIT2A2",22,0)
 ;;=Assume the DA array describes the record to be cross-referenced, and that
"RTN","DINIT2A2",23,0)
 ;;^DD(.11,2.1,21,7,0)
"RTN","DINIT2A2",24,0)
 ;;=the X(order#) array contains values after the transform for storage is
"RTN","DINIT2A2",25,0)
 ;;^DD(.11,2.1,21,8,0)
"RTN","DINIT2A2",26,0)
 ;;=applied, but before the truncation to the maximum length.  The variable X
"RTN","DINIT2A2",27,0)
 ;;^DD(.11,2.1,21,9,0)
"RTN","DINIT2A2",28,0)
 ;;=also equals X(order#) of the lowest order number.
"RTN","DINIT2A2",29,0)
 ;;^DD(.11,2.1,21,10,0)
"RTN","DINIT2A2",30,0)
 ;;= 
"RTN","DINIT2A2",31,0)
 ;;^DD(.11,2.1,21,11,0)
"RTN","DINIT2A2",32,0)
 ;;=When fields that make up a cross-reference are edited and the kill and set
"RTN","DINIT2A2",33,0)
 ;;^DD(.11,2.1,21,12,0)
"RTN","DINIT2A2",34,0)
 ;;=logic are executed, the X1(order#) array contains the old field values,
"RTN","DINIT2A2",35,0)
 ;;^DD(.11,2.1,21,13,0)
"RTN","DINIT2A2",36,0)
 ;;=and the X2(order#) array contains the new field values. If a record is
"RTN","DINIT2A2",37,0)
 ;;^DD(.11,2.1,21,14,0)
"RTN","DINIT2A2",38,0)
 ;;=being added, and there is an X1(order#) array element that corresponds to
"RTN","DINIT2A2",39,0)
 ;;^DD(.11,2.1,21,15,0)
"RTN","DINIT2A2",40,0)
 ;;=the .01 field, it is set to null. When a record is deleted, all X2(order#)
"RTN","DINIT2A2",41,0)
 ;;^DD(.11,2.1,21,16,0)
"RTN","DINIT2A2",42,0)
 ;;=array elements are null.
"RTN","DINIT2A2",43,0)
 ;;^DD(.11,2.1,"DT")
"RTN","DINIT2A2",44,0)
 ;;=2960116
"RTN","DINIT2A2",45,0)
 ;;^DD(.11,2.2,0)
"RTN","DINIT2A2",46,0)
 ;;=OVERFLOW KILL LOGIC^.112^^2.2;0
"RTN","DINIT2A2",47,0)
 ;;^DD(.11,2.2,"DT")
"RTN","DINIT2A2",48,0)
 ;;=2960124
"RTN","DINIT2A2",49,0)
 ;;^DD(.11,2.3,0)
"RTN","DINIT2A2",50,0)
 ;;=KILL CONDITION^F^^2.3;E1,245^K:$L(X)>245!($L(X)<1) X
"RTN","DINIT2A2",51,0)
 ;;^DD(.11,2.3,3)
"RTN","DINIT2A2",52,0)
 ;;=Answer must be a valid FileMan computed expression. Answer '??' for more help.
"RTN","DINIT2A2",53,0)
 ;;^DD(.11,2.3,21,0)
"RTN","DINIT2A2",54,0)
 ;;=^^5^5^2960124^
"RTN","DINIT2A2",55,0)
 ;;^DD(.11,2.3,21,1,0)
"RTN","DINIT2A2",56,0)
 ;;=Answer with a FileMan computed expression that will evaluate to Boolean
"RTN","DINIT2A2",57,0)
 ;;^DD(.11,2.3,21,2,0)
"RTN","DINIT2A2",58,0)
 ;;=true (according to the M rules for Boolean interpretation). FileMan will
"RTN","DINIT2A2",59,0)
 ;;^DD(.11,2.3,21,3,0)
"RTN","DINIT2A2",60,0)
 ;;=evaluate this expression whenever it would normally execute the
"RTN","DINIT2A2",61,0)
 ;;^DD(.11,2.3,21,4,0)
"RTN","DINIT2A2",62,0)
 ;;=cross-reference's Kill Logic, and will not execute the Kill Logic unless
"RTN","DINIT2A2",63,0)
 ;;^DD(.11,2.3,21,5,0)
"RTN","DINIT2A2",64,0)
 ;;=this condition evaluates to true.
"RTN","DINIT2A2",65,0)
 ;;^DD(.11,2.3,"DT")
"RTN","DINIT2A2",66,0)
 ;;=2960116
"RTN","DINIT2A2",67,0)
 ;;^DD(.11,2.4,0)
"RTN","DINIT2A2",68,0)
 ;;=KILL CONDITION CODE^K^^2.4;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"RTN","DINIT2A2",69,0)
 ;;^DD(.11,2.4,3)
"RTN","DINIT2A2",70,0)
 ;;=This is Standard MUMPS code. Answer '??' for more help.
"RTN","DINIT2A2",71,0)
 ;;^DD(.11,2.4,9)
"RTN","DINIT2A2",72,0)
 ;;=@
"RTN","DINIT2A2",73,0)
 ;;^DD(.11,2.4,21,0)
"RTN","DINIT2A2",74,0)
 ;;=^^15^15^2990430^
"RTN","DINIT2A2",75,0)
 ;;^DD(.11,2.4,21,1,0)
"RTN","DINIT2A2",76,0)
 ;;=This is MUMPS code, that sets the variable X. The KILL LOGIC is executed
"RTN","DINIT2A2",77,0)
 ;;^DD(.11,2.4,21,2,0)
"RTN","DINIT2A2",78,0)
 ;;=only if the KILL CONDITION, if present, sets X such the X evaluates to
"RTN","DINIT2A2",79,0)
 ;;^DD(.11,2.4,21,3,0)
"RTN","DINIT2A2",80,0)
 ;;=true,  (according to M rules for Boolean interpretation)
"RTN","DINIT2A2",81,0)
 ;;^DD(.11,2.4,21,4,0)
"RTN","DINIT2A2",82,0)
 ;;= 
"RTN","DINIT2A2",83,0)
 ;;^DD(.11,2.4,21,5,0)
"RTN","DINIT2A2",84,0)
 ;;=Assume the DA array describes the record to be cross-referenced, and that
"RTN","DINIT2A2",85,0)
 ;;^DD(.11,2.4,21,6,0)
"RTN","DINIT2A2",86,0)
 ;;=the X(order#) array contains values after the transform for storage is
"RTN","DINIT2A2",87,0)
 ;;^DD(.11,2.4,21,7,0)
"RTN","DINIT2A2",88,0)
 ;;=applied, but before the truncation to the maximum length.  The variable X
"RTN","DINIT2A2",89,0)
 ;;^DD(.11,2.4,21,8,0)
"RTN","DINIT2A2",90,0)
 ;;=also equals X(order#) of the lowest order number.
"RTN","DINIT2A2",91,0)
 ;;^DD(.11,2.4,21,9,0)
"RTN","DINIT2A2",92,0)
 ;;= 
"RTN","DINIT2A2",93,0)
 ;;^DD(.11,2.4,21,10,0)
"RTN","DINIT2A2",94,0)
 ;;=When fields that make up a cross-reference are edited and the kill and set
"RTN","DINIT2A2",95,0)
 ;;^DD(.11,2.4,21,11,0)
"RTN","DINIT2A2",96,0)
 ;;=conditions are executed, the X1(order#) array contains the old field
"RTN","DINIT2A2",97,0)
 ;;^DD(.11,2.4,21,12,0)
"RTN","DINIT2A2",98,0)
 ;;=values, and the X2(order#) array contains the new field values. If a
"RTN","DINIT2A2",99,0)
 ;;^DD(.11,2.4,21,13,0)
"RTN","DINIT2A2",100,0)
 ;;=record is being added, and there is an X1(order#) array element that
"RTN","DINIT2A2",101,0)
 ;;^DD(.11,2.4,21,14,0)
"RTN","DINIT2A2",102,0)
 ;;=corresponds to the .01 field, it is set to null. When a record is deleted,
"RTN","DINIT2A2",103,0)
 ;;^DD(.11,2.4,21,15,0)
"RTN","DINIT2A2",104,0)
 ;;=all X2(order#) array elements are null.
"RTN","DINIT2A2",105,0)
 ;;^DD(.11,2.4,"DT")
"RTN","DINIT2A2",106,0)
 ;;=2970117
"RTN","DINIT2A2",107,0)
 ;;^DD(.11,2.5,0)
"RTN","DINIT2A2",108,0)
 ;;=KILL ENTIRE INDEX CODE^K^^2.5;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"RTN","DINIT2A2",109,0)
 ;;^DD(.11,2.5,3)
"RTN","DINIT2A2",110,0)
 ;;=This is Standard MUMPS code. Answer '??' for more help.
"RTN","DINIT2A2",111,0)
 ;;^DD(.11,2.5,9)
"RTN","DINIT2A2",112,0)
 ;;=@
"RTN","DINIT2A2",113,0)
 ;;^DD(.11,2.5,21,0)
"RTN","DINIT2A2",114,0)
 ;;=^^4^4^2980911^
"RTN","DINIT2A2",115,0)
 ;;^DD(.11,2.5,21,1,0)
"RTN","DINIT2A2",116,0)
 ;;=This is a kill statement that can be executed to remove an entire index for
"RTN","DINIT2A2",117,0)
 ;;^DD(.11,2.5,21,2,0)
"RTN","DINIT2A2",118,0)
 ;;=all records in a file. When an entire file is reindexed, FileMan executes
"RTN","DINIT2A2",119,0)
 ;;^DD(.11,2.5,21,3,0)
"RTN","DINIT2A2",120,0)
 ;;=this code instead of looping through all the entries in a file and
"RTN","DINIT2A2",121,0)
 ;;^DD(.11,2.5,21,4,0)
"RTN","DINIT2A2",122,0)
 ;;=executing the kill logic once for each entry.
"RTN","DINIT2A2",123,0)
 ;;^DD(.11,666,0)
"RTN","DINIT2A2",124,0)
 ;;=RE-INDEXING^SI^1:NO RE-INDEXING ALLOWED;0:ALLOW REINDEXING^NOREINDEX;1
"RTN","DINIT2A2",125,0)
 ;;^DD(.11,666,3)
"RTN","DINIT2A2",126,0)
 ;;=Should the re-indexing of this cross reference be prohibited?
"RTN","DINIT2A2",127,0)
 ;;^DD(.11,666,21,0)
"RTN","DINIT2A2",128,0)
 ;;=^^5^5
"RTN","DINIT2A2",129,0)
 ;;^DD(.11,666,21,1,0)
"RTN","DINIT2A2",130,0)
 ;;=If you answer '1', this cross reference will not be re-indexed during a
"RTN","DINIT2A2",131,0)
 ;;^DD(.11,666,21,2,0)
"RTN","DINIT2A2",132,0)
 ;;=general re-indexing of this file, whether it's done via API or
"RTN","DINIT2A2",133,0)
 ;;^DD(.11,666,21,3,0)
"RTN","DINIT2A2",134,0)
 ;;=interactively. If you answer '0', which is the default, it will.
"RTN","DINIT2A2",135,0)
 ;;^DD(.11,666,21,4,0)
"RTN","DINIT2A2",136,0)
 ;;=A 'NO RE-INDEXING' cross-reference will ONLY be re-indexed
"RTN","DINIT2A2",137,0)
 ;;^DD(.11,666,21,5,0)
"RTN","DINIT2A2",138,0)
 ;;=if it is specifically named in an API call
"RTN","DINIT2A2",139,0)
 ;;^DD(.11,11.1,0)
"RTN","DINIT2A2",140,0)
 ;;=CROSS-REFERENCE VALUES^.114IA^^11.1;0
"RTN","DINIT2A2",141,0)
 ;;^DD(.11,11.1,"DT")
"RTN","DINIT2A2",142,0)
 ;;=2960221
"RTN","DINIT2A2",143,0)
 ;;^DD(.1101,0)
"RTN","DINIT2A2",144,0)
 ;;=DESCRIPTION SUB-FIELD^^.01^1
"RTN","DINIT2A2",145,0)
 ;;^DD(.1101,0,"DT")
"RTN","DINIT2A2",146,0)
 ;;=2960116
"RTN","DINIT2A2",147,0)
 ;;^DD(.1101,0,"NM","DESCRIPTION")
"RTN","DINIT2A2",148,0)
 ;;=
"RTN","DINIT2A2",149,0)
 ;;^DD(.1101,0,"UP")
"RTN","DINIT2A2",150,0)
 ;;=.11
"RTN","DINIT2A2",151,0)
 ;;^DD(.1101,.01,0)
"RTN","DINIT2A2",152,0)
 ;;=DESCRIPTION^W^^0;1^Q
"RTN","DINIT2A2",153,0)
 ;;^DD(.1101,.01,3)
"RTN","DINIT2A2",154,0)
 ;;=Answer '??' for more help.
"RTN","DINIT2A2",155,0)
 ;;^DD(.1101,.01,21,0)
"RTN","DINIT2A2",156,0)
 ;;=^^3^3^2960123^
"RTN","DINIT2A2",157,0)
 ;;^DD(.1101,.01,21,1,0)
"RTN","DINIT2A2",158,0)
 ;;=Answer should describe the purpose of this index, along with any technical
"RTN","DINIT2A2",159,0)
 ;;^DD(.1101,.01,21,2,0)
"RTN","DINIT2A2",160,0)
 ;;=information that might be useful to advanced users, developers,
"RTN","DINIT2A2",161,0)
 ;;^DD(.1101,.01,21,3,0)
"RTN","DINIT2A2",162,0)
 ;;=troubleshooters, or system managers.
"RTN","DINIT2A2",163,0)
 ;;^DD(.1101,.01,"DT")
"RTN","DINIT2A2",164,0)
 ;;=2960116
"RTN","DINIT2A2",165,0)
 ;;^DD(.111,0)
"RTN","DINIT2A2",166,0)
 ;;=OVERFLOW SET LOGIC SUB-FIELD^^1^2
"RTN","DINIT2A2",167,0)
 ;;^DD(.111,0,"DT")
"RTN","DINIT2A2",168,0)
 ;;=2960124
"RTN","DINIT2A2",169,0)
 ;;^DD(.111,0,"NM","OVERFLOW SET LOGIC")
"RTN","DINIT2A2",170,0)
 ;;=
"RTN","DINIT2A2",171,0)
 ;;^DD(.111,0,"UP")
"RTN","DINIT2A2",172,0)
 ;;=.11
"RTN","DINIT2A2",173,0)
 ;;^DD(.111,.01,0)
"RTN","DINIT2A2",174,0)
 ;;=OVERFLOW SET LOGIC NODE^MNJ6,0X^^0;1^K:+X'=X!(X>999999)!(X<1)!(X?.E1"."1N.N) X S:$D(X) DINUM=X
"RTN","DINIT2A2",175,0)
 ;;^DD(.111,.01,3)
"RTN","DINIT2A2",176,0)
 ;;=Type a Number between 1 and 999999, 0 Decimal Digits. Answer '??' for more help.
"RTN","DINIT2A2",177,0)
 ;;^DD(.111,.01,21,0)
"RTN","DINIT2A2",178,0)
 ;;=^^3^3^2980911^
"RTN","DINIT2A2",179,0)
 ;;^DD(.111,.01,21,1,0)
"RTN","DINIT2A2",180,0)
 ;;=Answer must be the number of the node under which the additional line of
"RTN","DINIT2A2",181,0)
 ;;^DD(.111,.01,21,2,0)
"RTN","DINIT2A2",182,0)
 ;;=set logic will be filed. Use the overflow nodes if the set logic is too
"RTN","DINIT2A2",183,0)
 ;;^DD(.111,.01,21,3,0)
"RTN","DINIT2A2",184,0)
 ;;=long to fit in the SET LOGIC field.
"RTN","DINIT2A2",185,0)
 ;;^DD(.111,.01,"DT")
"RTN","DINIT2A2",186,0)
 ;;=2980910
"RTN","DINIT2A2",187,0)
 ;;^DD(.111,1,0)
"RTN","DINIT2A2",188,0)
 ;;=OVERFLOW SET LOGIC^RK^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"RTN","DINIT2A2",189,0)
 ;;^DD(.111,1,3)
"RTN","DINIT2A2",190,0)
 ;;=Answer must be Standard M code. Answer '??' for more help.
"RTN","DINIT2A2",191,0)
 ;;^DD(.111,1,9)
"RTN","DINIT2A2",192,0)
 ;;=@
"RTN","DINIT2A2",193,0)
 ;;^DD(.111,1,21,0)
"RTN","DINIT2A2",194,0)
 ;;=^^6^6^2980911^
"RTN","DINIT2A2",195,0)
 ;;^DD(.111,1,21,1,0)
"RTN","DINIT2A2",196,0)
 ;;=Answer with the M code of the additional set logic stored at this node.
"RTN","DINIT2A2",197,0)
 ;;^DD(.111,1,21,2,0)
"RTN","DINIT2A2",198,0)
 ;;=FileMan will not automatically execute this additional code, so the set
"RTN","DINIT2A2",199,0)
 ;;^DD(.111,1,21,3,0)
"RTN","DINIT2A2",200,0)
 ;;=logic must invoke the additional code stored in this overflow node.
"RTN","DINIT2A2",201,0)
 ;;^DD(.111,1,21,4,0)
"RTN","DINIT2A2",202,0)
 ;;= 
"RTN","DINIT2A2",203,0)
 ;;^DD(.111,1,21,5,0)
"RTN","DINIT2A2",204,0)
 ;;=The M code can assume that DIXR contains the internal entry number of the
"RTN","DIPR167")
0^^B6579372^n/a
"RTN","DIPR167",1,0)
DIPR167 ;O-OIFO/GMB-Envirocheck and Post Init ;1NOV2012
"RTN","DIPR167",2,0)
 ;;22.0;VA FileMan;**167**;Mar 30, 1999;Build 18
"RTN","DIPR167",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DIPR167",4,0)
ENV ; Environmental Check
"RTN","DIPR167",5,0)
 D BMES^XPDUTL("Perform Environment Check...")
"RTN","DIPR167",6,0)
 D CHKSTOP
"RTN","DIPR167",7,0)
 D BMES^XPDUTL("Finished Environment Check.")
"RTN","DIPR167",8,0)
 Q
"RTN","DIPR167",9,0)
CHKSTOP ;
"RTN","DIPR167",10,0)
 ; Check XPDENV 0 = Loading; 1 = Installing
"RTN","DIPR167",11,0)
 Q:'XPDENV  ; Loading Distribution - No Check
"RTN","DIPR167",12,0)
 ;
"RTN","DIPR167",13,0)
 ;
"RTN","DIPR167",14,0)
INSCHK ; Do Checks During Install Only
"RTN","DIPR167",15,0)
 W $C(7)
"RTN","DIPR167",16,0)
 D MES^XPDUTL("            Queuing is NOT allowed. It is HIGHLY recommended that")
"RTN","DIPR167",17,0)
 D MES^XPDUTL("                       ALL Users be OFF the system and")
"RTN","DIPR167",18,0)
 D MES^XPDUTL("      VistA Background jobs be STOPPED before installation of this patch.")
"RTN","DIPR167",19,0)
 D MES^XPDUTL("             TaskMan should be STOPPED or placed in a WAIT state.")
"RTN","DIPR167",20,0)
 D MES^XPDUTL("       Failure to do so may result in 'source routine edited' error(s).")
"RTN","DIPR167",21,0)
 D MES^XPDUTL("     Edits may be lost and record(s) may be left in an inconsistent state.")
"RTN","DIPR167",22,0)
 D MES^XPDUTL("   For example, not all Cross-Referencing completed; which in turn may cause")
"RTN","DIPR167",23,0)
 D MES^XPDUTL("             FUTURE VistA/FileMan Hard Errors or corrupted Data.")
"RTN","DIPR167",24,0)
 ;
"RTN","DIPR167",25,0)
TMCHK ; Check to see if TaskMan is still running
"RTN","DIPR167",26,0)
 S X=$$TM^%ZTLOAD
"RTN","DIPR167",27,0)
 I X,'$D(^%ZTSCH("WAIT")) D
"RTN","DIPR167",28,0)
 . W $C(7)
"RTN","DIPR167",29,0)
 . D BMES^XPDUTL("* Warning TaskMan Has NOT Been Stopped or Placed in a WAIT State!")
"RTN","DIPR167",30,0)
 ;
"RTN","DIPR167",31,0)
LINH ; Check to see if Logons are Inhibited
"RTN","DIPR167",32,0)
 D GETENV^%ZOSV  ; $P(Y,"^",2) = Installing Volume
"RTN","DIPR167",33,0)
 Q:$G(^%ZIS(14.5,"LOGON",$P(Y,"^",2)))
"RTN","DIPR167",34,0)
 W $C(7)
"RTN","DIPR167",35,0)
 D BMES^XPDUTL("* Warning Logons are NOT Inhibited!")
"RTN","DIPR167",36,0)
 Q
"RTN","DIPR167",37,0)
POST ; Post-Init
"RTN","DIPR167",38,0)
 W $C(7)
"RTN","DIPR167",39,0)
 D BMES^XPDUTL("              DON'T FORGET! GO TO THE PROGRAMMER PROMPT AND ENTER:")
"RTN","DIPR167",40,0)
 D MES^XPDUTL(" > D ^DINIT")
"RTN","DIPR167",41,0)
 D MES^XPDUTL("              Accept all defaults when answering the questions.")
"RTN","DIPR167",42,0)
 D MES^XPDUTL("              It should take less than 10 seconds.")
"RTN","DIPR167",43,0)
 Q
"RTN","DIU")
0^13^B9210427^B8874526
"RTN","DIU",1,0)
DIU ;SFISC/GFT-UTILITY FUNCTIONS ; 07 Nov 2012  9:27 AM
"RTN","DIU",2,0)
 ;;22.0;VA FileMan;**167**;Mar 30, 1999;Build 18
"RTN","DIU",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DIU",4,0)
 K DIU
"RTN","DIU",5,0)
0 S DIC="^DOPT(""DIU"","
"RTN","DIU",6,0)
 G OPT:$D(^DOPT("DIU",11)) S ^(0)="UTILITY OPTION^1.01" K ^("B")
"RTN","DIU",7,0)
 F X=1:1:11 S ^DOPT("DIU",X,0)=$P($T(@X),";;",2)
"RTN","DIU",8,0)
 S DIK=DIC D IXALL^DIK S ^DOPT("DICR",0)="TYPE OF INDEXING^1.01"
"RTN","DIU",9,0)
 F X=1:1:7 S ^DOPT("DICR",X,0)=$P("REGULAR^KWIC^MNEMONIC^MUMPS^SOUNDEX^TRIGGER^BULLETIN",U,X)
"RTN","DIU",10,0)
 S DIK="^DOPT(""DICR""," D IXALL^DIK G 0
"RTN","DIU",11,0)
OPT ;
"RTN","DIU",12,0)
 S DIC(0)="AEQIZ" S:DUZ(0)'="@" DIC("S")="I Y-5"
"RTN","DIU",13,0)
 D ^DIC G Q:Y<0 S DI=Y D EN G 0
"RTN","DIU",14,0)
 ;
"RTN","DIU",15,0)
EN ;
"RTN","DIU",16,0)
 I +DI=2 D  G:'$D(DI) Q
"RTN","DIU",17,0)
 . W ! S Y=$$TYPE^DIKCUTL2 Q:Y=1
"RTN","DIU",18,0)
 . D:Y=2 MOD^DIKCUTL
"RTN","DIU",19,0)
 . K DI
"RTN","DIU",20,0)
 D D^DICRW G Q:Y<0 I '$D(DIC) D DIE^DIB G Q:'$D(DG) S DIC=DG
"RTN","DIU",21,0)
 S DIU=DIC,DIU(0)="EDT" K DICS
"RTN","DIU",22,0)
 K DIC,I,J S Y=DI,N=0,DI=+$P($G(@(DIU_"0)")),U,2),J(0)=DI,I(0)=DIU
"RTN","DIU",23,0)
 I 'DI W $C(7),!,"Missing or incomplete global node "_DIU_"0)",! G Q
"RTN","DIU",24,0)
 K DDA I $D(^DD(DI,0,"DDA")),^("DDA")["Y" S DDA=""
"RTN","DIU",25,0)
 D @+Y W !!
"RTN","DIU",26,0)
Q K %,DIUF,DG,DGG,DIC,DIU,DJJ,DIK,DI,DA,I,J,X,Y,DICD,DICDF,DDA,DIFLD,DTOUT,DUOUT,DR Q
"RTN","DIU",27,0)
 ;
"RTN","DIU",28,0)
1 ;;VERIFY FIELDS
"RTN","DIU",29,0)
 G ^DIV
"RTN","DIU",30,0)
 ;
"RTN","DIU",31,0)
2 ;;CROSS-REFERENCE A FIELD OR FILE
"RTN","DIU",32,0)
 S X="CW" D DI Q:Y<.002  G ^DICD
"RTN","DIU",33,0)
 ;
"RTN","DIU",34,0)
3 ;;IDENTIFIER
"RTN","DIU",35,0)
 S X="CW.01" D DIAX Q:'$T  D DI Q:Y<0  G 3^DIU3
"RTN","DIU",36,0)
 ;
"RTN","DIU",37,0)
4 ;;RE-INDEX FILE
"RTN","DIU",38,0)
 G 4^DIU1
"RTN","DIU",39,0)
 ;
"RTN","DIU",40,0)
5 ;;INPUT TRANSFORM (SYNTAX)
"RTN","DIU",41,0)
 S X="W" D DIAX Q:'$T  D DI Q:Y<0  G 5^DIU31
"RTN","DIU",42,0)
 ;
"RTN","DIU",43,0)
6 ;;EDIT FILE
"RTN","DIU",44,0)
 G 6^DIU0
"RTN","DIU",45,0)
 ;
"RTN","DIU",46,0)
7 ;;OUTPUT TRANSFORM
"RTN","DIU",47,0)
 S X="CW" D DI Q:Y<0  G O^DIU31
"RTN","DIU",48,0)
 ;
"RTN","DIU",49,0)
8 ;;TEMPLATE EDIT
"RTN","DIU",50,0)
 G 0^DIBT
"RTN","DIU",51,0)
 ;
"RTN","DIU",52,0)
9 ;;UNEDITABLE DATA
"RTN","DIU",53,0)
 S X="WC" D DIAX Q:'$T  D DI Q:Y<0  G 9^DIU31
"RTN","DIU",54,0)
 ;
"RTN","DIU",55,0)
10 ;;MANDATORY/REQUIRED FIELD CHECK
"RTN","DIU",56,0)
 G ^DIVRE
"RTN","DIU",57,0)
 ;
"RTN","DIU",58,0)
11 ;;KEY DEFINITION
"RTN","DIU",59,0)
 G MOD^DIKKUTL
"RTN","DIU",60,0)
 ;
"RTN","DIU",61,0)
99 ;;SPECIFIER
"RTN","DIU",62,0)
 S X="CW",N=0 D DI Q:Y<0  G ^DIU4
"RTN","DIU",63,0)
 ;
"RTN","DIU",64,0)
DI ;
"RTN","DIU",65,0)
 S DIC(0)="ZQEAI"
"RTN","DIU",66,0)
D ;
"RTN","DIU",67,0)
 S DIC="^DD("_DI_",",DIC("W")="S %=$P(^(0),U,2) I % W $S($P(^DD(+%,.01,0),U,2)[""W"":""  (word-processing)"",1:""  (multiple)"")"
"RTN","DIU",68,0)
 S DIC("S")="S %=$P(^(0),U,2) I 1"_$P(",$O(^(1,0))!%","Z",X["R")_$P(",%'[""C""",U,X["C")_$P(",$P(^DD(+%,.01,0),U,2)'[""W""",9,X["W")_$P(",Y-.01",U,X[.01),DA=X
"RTN","DIU",69,0)
 D ^DIC K DIC("S") I Y>0,$P(Y(0),U,2) S N=N+1,X=$P($P(Y(0),U,4),";",1),DI=$E("""",+X'=X),I(N)=DI_X_DI,(DI,J(N))=+$P(Y(0),U,2),X=DA G DI
"RTN","DIU",70,0)
 Q
"RTN","DIU",71,0)
DIAX I '$D(^DD(DI,0,"DI"))!($P($G(^("DI")),U)'["Y")!($P($G(^("DI")),U)["Y"&'$P(@(^DIC(DI,0,"GL")_"0)"),U,4))
"RTN","DIU",72,0)
 W:'$T !!,$C(7),"THIS DATA DICTIONARY CHANGE IS NOT ALLOWED ON AN ARCHIVE FILE!"
"RTN","DIU",73,0)
 Q
"RTN","DIU1")
0^14^B24307273^B21521978
"RTN","DIU1",1,0)
DIU1 ;SFISC/GFT-REINDEX A FILE ;6NOV2012
"RTN","DIU1",2,0)
 ;;22.0;VA FileMan;**41,167**;Mar 30, 1999;Build 18
"RTN","DIU1",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","DIU1",4,0)
4 ;RE-CROSS-REFERENCING -- UTILITY OPTION 4
"RTN","DIU1",5,0)
 N DIUCNT,DIUTYPE,DV,DU,DW,DINO,DIKJ ;COME IN WITH I,J,N DEFINED
"RTN","DIU1",6,0)
 W !! K ^UTILITY("DIK",$J),X S DIK=DIU,X=0 D DISKIPIN^DIK(.DINO) S DW=0,DIUF=DI ;USED TO CALL D DD^DIK
"RTN","DIU1",7,0)
DW S DW=$O(^UTILITY("DIK",$J,DW)),DV=0 S:DW="" DW=-1
"RTN","DIU1",8,0)
 I DW>0 S DU=0 F  S DV=$O(^UTILITY("DIK",$J,DW,DV)),DH=0 G DW:DV="" S Y=0 F  S DH=$O(^UTILITY("DIK",$J,DW,DV,DH)) Q:DH=""  D
"RTN","DIU1",9,0)
 .S Y=^UTILITY("DIK",$J,DW,DV,DH),X=X+1,X(X)=Y,X(X,0)=DW_U_DV S:$P(Y,U,3)=""&'Y&$D(^(DH,0)) X(X)=^(0)
"RTN","DIU1",10,0)
 D GETXR^DIKCUTL2(DI,.DIUCNT,"xM")
"RTN","DIU1",11,0)
 F %=1:1:X I $G(X(%))="S DIIX=4 D:$G(DIK(0))'[""A"" AUDIT" K X(%) S X=X-1 F Y=%:1:X M X(Y)=X(Y+1) K X(Y+1) S %=%-1
"RTN","DIU1",12,0)
 K ^UTILITY("DIK",$J) G DD:'(X+DIUCNT),ONE:(X+DIUCNT)>1
"RTN","DIU1",13,0)
ALL W "OK, ARE YOU SURE YOU WANT TO KILL OFF THE EXISTING "
"RTN","DIU1",14,0)
 I X=0,DIUCNT=1 W "'"_$P(DIUCNT($O(DIUCNT(""))),U,3)_"' INDEX"
"RTN","DIU1",15,0)
 E  I X=1,DIUCNT=0 W $P(^DD(+X(1,0),$P(X(1,0),U,2),0),U,1)_" INDEX"
"RTN","DIU1",16,0)
 E  W X+DIUCNT_" INDICES"
"RTN","DIU1",17,0)
 S %=2 D YN^DICN G:%-1 NO:%,Q W !,"DO YOU THEN WANT TO 'RE-CROSS-REFERENCE'" D YN^DICN G NO:%<1 S N=%=1 D WAIT^DICD
"RTN","DIU1",18,0)
 F X=X:-1:1 S %=$P(X(X),U,2) I %]"",+X(X)=DI K @(DIK_"%)") K:$P(X(X),U,3)'="MUMPS" X(X)
"RTN","DIU1",19,0)
 ;THE REMAINING NODES OF 'X' SAY THAT WE HAVE TO KILL SOME INDIVIDUALLY.
"RTN","DIU1",20,0)
 ;DIK(0)="AB" MEANS 'DON'T AUDIT & DON'T DO BULLETINS';X=2 MEANS DO KILLING.  THAT OCCURS IN CNT^DIK1
"RTN","DIU1",21,0)
 S DIK(0)="ABX" I $O(X(0))]"" S X=2,(DA,DCNT)=0 D DISKIPIN^DIK(.DINO),CNT^DIK1
"RTN","DIU1",22,0)
 D:DIUCNT INDEX^DIKC(DIUF,"","","","KR") ;NOW DELETE THE NEW-STYLES, IF ANY
"RTN","DIU1",23,0)
 K X I N W !,$C(7),"FILE WILL NOW BE 'RE-CROSS-REFERENCED'..." H 5 D DD S DIK=^DIC(DIUF,0,"GL") D IXALL^DIK
"RTN","DIU1",24,0)
 K DIK,DIC Q
"RTN","DIU1",25,0)
 ;
"RTN","DIU1",26,0)
DD S DIK="^DD(DI,",DA(1)=DI K ^DD(DI,"B"),^("GL"),^("IX"),^("RQ"),^("GR"),^("SB")
"RTN","DIU1",27,0)
 W "." D IXALL^DIK:$D(^(0))#2 S DI=$O(^DD(DI)) S:DI="" DI=-1 I DI>0,DI<$O(^DIC(DIUF)) G DD ;RE-DOES THE DATA DICTIONARY, NOT THE DATA
"RTN","DIU1",28,0)
 Q
"RTN","DIU1",29,0)
 ;
"RTN","DIU1",30,0)
ONE S %=2 W "THERE ARE "_(X+DIUCNT)_$P(" RE-RUNNABLE",U,DINO>0)_" INDICES WITHIN THIS FILE",!,"DO YOU WISH TO RE-CROSS-REFERENCE ONE PARTICULAR INDEX" D YN^DICN W ! I %-1 G ALL:%=2,NO:%,Q
"RTN","DIU1",31,0)
 S DIUTYPE=$S('$G(DIUCNT):1,'$G(X):2,1:$$TYPE^DIKCUTL2)
"RTN","DIU1",32,0)
 G NO:DIUTYPE=""
"RTN","DIU1",33,0)
 I DIUTYPE=2 K DIUCNT D ONEXR(DI) Q
"RTN","DIU1",34,0)
 K X S X="CRW" D DI^DIU G NO:Y<0 S (DA,DL)=+Y,DICD="RE-CROSS-REFERENCE" D CHIX^DICD G NO:'DICD
"RTN","DIU1",35,0)
 S X=$P(I,U,2),%=$S(X]"":"THE '"_X_"' INDEX",1:"THIS TRIGGER") I $G(^DD(DI,DA,1,DICD,"NOREINDEX")) W !,"SORRY. ",%," IS LISTED AS NOT RE-RUNNABLE" G NO
"RTN","DIU1",36,0)
 W !,"ARE YOU SURE YOU WANT TO DELETE AND RE-CROSS-REFERENCE "_% S %=2 D YN^DICN G NO:%-1
"RTN","DIU1",37,0)
 G IND:X="" F %=0:0 S %=$O(^DD(+I,0,"IX",X,%)) Q:%=""  F %Y=0:0 S %Y=$O(^DD(+I,0,"IX",X,%,%Y)) Q:%Y=""  I %Y-DA!(%-DI) G IND
"RTN","DIU1",38,0)
 I +I=DIUF,$P(I,U,3)="",X]"" K @(DIK_"X)") G REDO
"RTN","DIU1",39,0)
IND I $P(I,U,3)="",X]"" D KWREG(DIU,0,.I,.J) G REDO
"RTN","DIU1",40,0)
 S X=^DD(J(N),DA,1,DICD,2) D DD^DICD:"Q"'[X S DIU=^DIC(DIUF,0,"GL")
"RTN","DIU1",41,0)
REDO S X=^DD(J(N),DL,1,DICD,1) D DD^DICD:"Q"'[X W $C(7),"    ...DONE!" Q
"RTN","DIU1",42,0)
 ;
"RTN","DIU1",43,0)
Q F I=1:1:X W !,"FIELD " S %=X(I,0),J=$P(%,U,2) W J_" ('"_$P(^DD(+%,J,0),U,1)_"'" W:%-DI ", "_$O(^DD(+%,0,"NM",0))_" SUBFILE" W ") IS ",$S(X(I):"'"_$P(X(I),U,2)_"' INDEX",1:$P(X(I),U,3)) D UP
"RTN","DIU1",44,0)
 W !! D LIST^DIKCUTL2(.DIUCNT,"INDEX FILE CROSS-REFERENCES:")
"RTN","DIU1",45,0)
 G 4
"RTN","DIU1",46,0)
UP I X(I),X(I)-DI S %=$D(^DD(+X(I),0,"UP")) W " OF "_$O(^("NM",0))_" "_$P("SUB",U,%>0)_"FILE" Q
"RTN","DIU1",47,0)
 S %=+$P(X(I),U,4),(%F,Y)=+$P(X(I),U,5) I %,$D(^DD(%,Y,0)) W:$X>44 ! W " OF " D WR^DIDH
"RTN","DIU1",48,0)
 Q
"RTN","DIU1",49,0)
 ;
"RTN","DIU1",50,0)
NO W !?7,$C(7),"<NO ACTION TAKEN>" K DICD,X,DH
"RTN","DIU1",51,0)
 Q
"RTN","DIU1",52,0)
 ;
"RTN","DIU1",53,0)
KWREG(ROOT,LEV,I,J) ;Kill entire regular index
"RTN","DIU1",54,0)
 ;In:
"RTN","DIU1",55,0)
 ; ROOT = open root of file or subfile
"RTN","DIU1",56,0)
 ; LEV = level # of ROOT
"RTN","DIU1",57,0)
 ; I = ^DD(file#,field#,1,xref#,0) [xref header node] = rfile#^name
"RTN","DIU1",58,0)
 ; I(N) = node on which multiple at level n resides (for N>0)
"RTN","DIU1",59,0)
 ; J(N) = level N subfile #
"RTN","DIU1",60,0)
 ;
"RTN","DIU1",61,0)
 N CROOT
"RTN","DIU1",62,0)
 S CROOT=$$CREF^DILF(ROOT)
"RTN","DIU1",63,0)
 Q:'$D(@CROOT)
"RTN","DIU1",64,0)
 I J(LEV)=+I K @CROOT@($P(I,U,2)) Q
"RTN","DIU1",65,0)
 ;
"RTN","DIU1",66,0)
 N DA
"RTN","DIU1",67,0)
 S DA=0
"RTN","DIU1",68,0)
 F  S DA=$O(@CROOT@(DA)) Q:'DA  D:$D(@CROOT@(DA,0))#2 KWREG(ROOT_DA_","_I(LEV+1)_",",LEV+1,.I,.J)
"RTN","DIU1",69,0)
 Q
"RTN","DIU1",70,0)
 ;
"RTN","DIU1",71,0)
 ;==============
"RTN","DIU1",72,0)
 ; ONEXR(file#)
"RTN","DIU1",73,0)
 ;==============
"RTN","DIU1",74,0)
 ;Prompt for file/subfile and Index; run kill/set logic for that Index
"RTN","DIU1",75,0)
 ;In:
"RTN","DIU1",76,0)
 ; DI = top level file #
"RTN","DIU1",77,0)
 ;
"RTN","DIU1",78,0)
ONEXR(DI) ;Re-index one cross reference
"RTN","DIU1",79,0)
 ;Prompt for subfile
"RTN","DIU1",80,0)
 N DIUCNT,DIUCTRL,DIUFILE,DIULOG,DIUXR
"RTN","DIU1",81,0)
 W !!?10,"File: "_$O(^DD(DI,0,"NM",""))_" (#"_DI_")"
"RTN","DIU1",82,0)
 S DIUFILE=$$SUB^DIKCU(DI) G:DIUFILE="" NO
"RTN","DIU1",83,0)
 ;
"RTN","DIU1",84,0)
 ;Prompt for xref
"RTN","DIU1",85,0)
 D GETXR^DIKCUTL2(DIUFILE,.DIUCNT,"x")
"RTN","DIU1",86,0)
 W ! D LIST^DIKCUTL2(.DIUCNT)
"RTN","DIU1",87,0)
 S DIUXR=$$CHOOSE^DIKCUTL2(.DIUCNT,"re-cross-reference")
"RTN","DIU1",88,0)
 G:'DIUXR NO
"RTN","DIU1",89,0)
 ;
"RTN","DIU1",90,0)
 ;Run kill and/or set
"RTN","DIU1",91,0)
 S DIUCTRL=$$LOGIC($P(DIUCNT(DIUXR),U,3))
"RTN","DIU1",92,0)
 G:DIUCTRL="" NO
"RTN","DIU1",93,0)
 ;
"RTN","DIU1",94,0)
 S:DI'=DIUFILE DIUCTRL=DIUCTRL_"W"_DIUFILE
"RTN","DIU1",95,0)
 D INDEX^DIKC(DI,"","",DIUXR,DIUCTRL_"R")
"RTN","DIU1",96,0)
 W $C(7)_"  ...DONE!"
"RTN","DIU1",97,0)
 Q
"RTN","DIU1",98,0)
 ;
"RTN","DIU1",99,0)
 ;====================
"RTN","DIU1",100,0)
 ; $$LOGIC(indexName)
"RTN","DIU1",101,0)
 ;====================
"RTN","DIU1",102,0)
 ;Prompt for whether kill and/or set logic should be run.
"RTN","DIU1",103,0)
 ;In:
"RTN","DIU1",104,0)
 ; DIUNAME = name of xref (used in prompt)
"RTN","DIU1",105,0)
 ;Return value:
"RTN","DIU1",106,0)
 ; [ K : if kill logic should be run
"RTN","DIU1",107,0)
 ; [ S : if set logic should be run
"RTN","DIU1",108,0)
 ;
"RTN","DIU1",109,0)
LOGIC(DIUNAME) ;
"RTN","DIU1",110,0)
 N DIULOG,DIR,DIROUT,DIRUT,DTOUT,DUOUT,X,Y
"RTN","DIU1",111,0)
 S DIULOG=""
"RTN","DIU1",112,0)
 ;
"RTN","DIU1",113,0)
 ;Ask whether kill logic should be executed
"RTN","DIU1",114,0)
 S DIR(0)="Y"
"RTN","DIU1",115,0)
 S DIR("A")="Do you want to delete the existing '"_DIUNAME_"' cross-reference"
"RTN","DIU1",116,0)
 S DIR("?")="  Enter 'YES' if you want to run the kill logic for this cross-reference."
"RTN","DIU1",117,0)
 W ! D ^DIR K DIR Q:$D(DIRUT) ""
"RTN","DIU1",118,0)
 S:Y DIULOG="K"
"RTN","DIU1",119,0)
 ;
"RTN","DIU1",120,0)
 ;Ask whether set logic should be executed
"RTN","DIU1",121,0)
 S DIR(0)="Y"
"RTN","DIU1",122,0)
 S DIR("A")="Do you want to re-build the '"_DIUNAME_"' cross reference"
"RTN","DIU1",123,0)
 S DIR("?")="  Enter 'YES' if you want to run the set logic for this cross reference."
"RTN","DIU1",124,0)
 D ^DIR K DIR Q:$D(DIRUT) ""
"RTN","DIU1",125,0)
 S:Y DIULOG=DIULOG_"S"
"RTN","DIU1",126,0)
 Q DIULOG
"VER")
8^22.0
"BLD",836,6)
^148
**END**
**END**
