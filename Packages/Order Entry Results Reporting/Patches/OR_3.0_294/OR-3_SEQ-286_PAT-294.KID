Released OR*3*294 SEQ #286
Extracted from mail message
**KIDS**:OR*3.0*294^

**INSTALL NAME**
OR*3.0*294
"BLD",7875,0)
OR*3.0*294^ORDER ENTRY/RESULTS REPORTING^0^3101122^y
"BLD",7875,4,0)
^9.64PA^^
"BLD",7875,6.3)
27
"BLD",7875,"INIT")
POST^ORY294
"BLD",7875,"KRN",0)
^9.67PA^8989.52^19
"BLD",7875,"KRN",.4,0)
.4
"BLD",7875,"KRN",.401,0)
.401
"BLD",7875,"KRN",.402,0)
.402
"BLD",7875,"KRN",.403,0)
.403
"BLD",7875,"KRN",.5,0)
.5
"BLD",7875,"KRN",.84,0)
.84
"BLD",7875,"KRN",3.6,0)
3.6
"BLD",7875,"KRN",3.8,0)
3.8
"BLD",7875,"KRN",9.2,0)
9.2
"BLD",7875,"KRN",9.8,0)
9.8
"BLD",7875,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",7875,"KRN",9.8,"NM",1,0)
ORRDI1^^0^B113020386
"BLD",7875,"KRN",9.8,"NM",2,0)
ORRDI2^^0^B25393824
"BLD",7875,"KRN",9.8,"NM",3,0)
ORY294^^0^B268802
"BLD",7875,"KRN",9.8,"NM","B","ORRDI1",1)

"BLD",7875,"KRN",9.8,"NM","B","ORRDI2",2)

"BLD",7875,"KRN",9.8,"NM","B","ORY294",3)

"BLD",7875,"KRN",19,0)
19
"BLD",7875,"KRN",19,"NM",0)
^9.68A^^
"BLD",7875,"KRN",19.1,0)
19.1
"BLD",7875,"KRN",19.1,"NM",0)
^9.68A^^
"BLD",7875,"KRN",101,0)
101
"BLD",7875,"KRN",409.61,0)
409.61
"BLD",7875,"KRN",771,0)
771
"BLD",7875,"KRN",870,0)
870
"BLD",7875,"KRN",8989.51,0)
8989.51
"BLD",7875,"KRN",8989.52,0)
8989.52
"BLD",7875,"KRN",8994,0)
8994
"BLD",7875,"KRN","B",.4,.4)

"BLD",7875,"KRN","B",.401,.401)

"BLD",7875,"KRN","B",.402,.402)

"BLD",7875,"KRN","B",.403,.403)

"BLD",7875,"KRN","B",.5,.5)

"BLD",7875,"KRN","B",.84,.84)

"BLD",7875,"KRN","B",3.6,3.6)

"BLD",7875,"KRN","B",3.8,3.8)

"BLD",7875,"KRN","B",9.2,9.2)

"BLD",7875,"KRN","B",9.8,9.8)

"BLD",7875,"KRN","B",19,19)

"BLD",7875,"KRN","B",19.1,19.1)

"BLD",7875,"KRN","B",101,101)

"BLD",7875,"KRN","B",409.61,409.61)

"BLD",7875,"KRN","B",771,771)

"BLD",7875,"KRN","B",870,870)

"BLD",7875,"KRN","B",8989.51,8989.51)

"BLD",7875,"KRN","B",8989.52,8989.52)

"BLD",7875,"KRN","B",8994,8994)

"BLD",7875,"QUES",0)
^9.62^^
"BLD",7875,"REQB",0)
^9.611^2^2
"BLD",7875,"REQB",1,0)
OR*3.0*232^2
"BLD",7875,"REQB",2,0)
XOBW 1.0^2
"BLD",7875,"REQB","B","OR*3.0*232",1)

"BLD",7875,"REQB","B","XOBW 1.0",2)

"INIT")
POST^ORY294
"MBREQ")
0
"PKG",170,-1)
1^1
"PKG",170,0)
ORDER ENTRY/RESULTS REPORTING^OR^Order Entry/Results Reporting
"PKG",170,20,0)
^9.402P^^
"PKG",170,22,0)
^9.49I^1^1
"PKG",170,22,1,0)
3.0^2971217^2980917^11712
"PKG",170,22,1,"PAH",1,0)
294^3101122^10000000191
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","ORRDI1")
0^1^B113020386^B50225479
"RTN","ORRDI1",1,0)
ORRDI1 ;SLC/JMH - RDI routines for API supporting CDS data; 3/24/05 2:31 [8/11/05 6:25am] ;11/02/10  05:11
"RTN","ORRDI1",2,0)
 ;;3.0;ORDER ENTRY/RESULTS REPORTING;**232,294**;Dec 17, 1997;Build 27
"RTN","ORRDI1",3,0)
 ;
"RTN","ORRDI1",4,0)
GET(DFN,DOMAIN) ;API for packages to call in order to get data from HDR for
"RTN","ORRDI1",5,0)
 I '$L($G(DOMAIN)) S DOMAIN="ART"
"RTN","ORRDI1",6,0)
 ; check if in OUTAGE state and quit if so
"RTN","ORRDI1",7,0)
 I $$DOWNXVAL^ORRDI2 D  Q -1
"RTN","ORRDI1",8,0)
 .K ^XTMP("ORRDI",DOMAIN,DFN)
"RTN","ORRDI1",9,0)
 .S ^XTMP("ORRDI",DOMAIN,DFN,0)="^^-1"
"RTN","ORRDI1",10,0)
 ;  order checking purposes
"RTN","ORRDI1",11,0)
 N I,ORCACHE,ORRET,ORRECDT
"RTN","ORRDI1",12,0)
 ;check if data was just retrieved a short time ago and if so return
"RTN","ORRDI1",13,0)
 S ORRECDT=$P($G(^XTMP("ORRDI",DOMAIN,DFN,0)),U) I 'ORRECDT S ORRECDT=3000101
"RTN","ORRDI1",14,0)
 S ORCACHE=$$GET^XPAR("SYS","OR RDI CACHE TIME")
"RTN","ORRDI1",15,0)
 I $$FMDIFF^XLFDT($$NOW^XLFDT,ORRECDT,2)<(60*ORCACHE),$P(^XTMP("ORRDI",DOMAIN,DFN,0),U,3)>-1 S ORRET=$P(^XTMP("ORRDI",DOMAIN,DFN,0),U,3)
"RTN","ORRDI1",16,0)
 ;check if there has been an HDR down condition within last minute
"RTN","ORRDI1",17,0)
 I $$FMDIFF^XLFDT($$NOW^XLFDT,$P($G(^XTMP("ORRDI","PSOO",DFN,0)),U),2)<60,$P($G(^XTMP("ORRDI","PSOO",DFN,0)),U,3)<0 S ORRET=$P($G(^XTMP("ORRDI","PSOO",DFN,0)),U,3)
"RTN","ORRDI1",18,0)
 I $$FMDIFF^XLFDT($$NOW^XLFDT,$P($G(^XTMP("ORRDI","ART",DFN,0)),U),2)<60,$P($G(^XTMP("ORRDI","ART",DFN,0)),U,3)<0 S ORRET=$P($G(^XTMP("ORRDI","ART",DFN,0)),U,3)
"RTN","ORRDI1",19,0)
 ;if data is not "fresh" then go get it
"RTN","ORRDI1",20,0)
 I '$L($G(ORRET)) D
"RTN","ORRDI1",21,0)
 .S ORRET=$$RETRIEVE(DFN,DOMAIN)
"RTN","ORRDI1",22,0)
 .I ORRET>-1 S ^XTMP("ORRDI","OUTAGE INFO","FAILURES")=0
"RTN","ORRDI1",23,0)
 .I ORRET'>-1 D
"RTN","ORRDI1",24,0)
 ..Q:$P(ORRET,U,2)="PATIENT ICN NOT FOUND"
"RTN","ORRDI1",25,0)
 ..I ORRET=-9 S ORRET="-1^PROCESSING ERROR" Q
"RTN","ORRDI1",26,0)
 ..S ^XTMP("ORRDI","OUTAGE INFO","FAILURES")=$$FAILXVAL^ORRDI2+1
"RTN","ORRDI1",27,0)
 ..I $$FAILXVAL^ORRDI2'<$$FAILPVAL^ORRDI2 D
"RTN","ORRDI1",28,0)
 ...S ^XTMP("ORRDI","OUTAGE INFO","DOWN")=1
"RTN","ORRDI1",29,0)
 ...D SPAWN^ORRDI2
"RTN","ORRDI1",30,0)
 S $P(^XTMP("ORRDI",DOMAIN,DFN,0),U,3,4)=ORRET
"RTN","ORRDI1",31,0)
 I ORRET<1 D
"RTN","ORRDI1",32,0)
 .N TEMP S TEMP=^XTMP("ORRDI",DOMAIN,DFN,0)
"RTN","ORRDI1",33,0)
 .K ^XTMP("ORRDI",DOMAIN,DFN)
"RTN","ORRDI1",34,0)
 .S ^XTMP("ORRDI",DOMAIN,DFN,0)=TEMP
"RTN","ORRDI1",35,0)
 Q ORRET
"RTN","ORRDI1",36,0)
 ;
"RTN","ORRDI1",37,0)
RETRIEVE(DFN,DOMAIN) ;GET DATA
"RTN","ORRDI1",38,0)
 N $ES,$ET
"RTN","ORRDI1",39,0)
 S $ET="D ERRHNDL^ORRDI1(DFN) Q -1"
"RTN","ORRDI1",40,0)
 N Y,ORCSTART,ORPSTART,ORCDIF,ORPDIF,ORALNUM,ORPSNUM,ORREQ,ORXML,ORERR,ORRET,ORY,START,FACIL
"RTN","ORRDI1",41,0)
 K ^TMP($J,"ORRDI")
"RTN","ORRDI1",42,0)
 S ORY=-1
"RTN","ORRDI1",43,0)
 I '$L($G(DOMAIN)) S DOMAIN="ART"
"RTN","ORRDI1",44,0)
 ;GET ICN
"RTN","ORRDI1",45,0)
 D SELECT^ORWPT(.Y,DFN)
"RTN","ORRDI1",46,0)
 N ICN
"RTN","ORRDI1",47,0)
 S ICN=$P($G(Y),U,14)
"RTN","ORRDI1",48,0)
 ;S ICN=1012121837; 1011232216; 1012121837 ;1011232216 ;1011226464 ;1011230043 ;1011220270 ;1011218227 ;1003979135 ;1011186582 ;1011117226 ;REMOVE OR COMMENT WHEN DONE
"RTN","ORRDI1",49,0)
 I 'ICN Q -1_"^PATIENT ICN NOT FOUND"
"RTN","ORRDI1",50,0)
 S START=$$FMADD^XLFDT($P($$NOW^XLFDT,"."),-30)
"RTN","ORRDI1",51,0)
 S START=$$FMTHL7^XLFDT(START)
"RTN","ORRDI1",52,0)
 S START=$E(START,1,4)_"-"_$E(START,5,6)_"-"_$E(START,7,8)
"RTN","ORRDI1",53,0)
 S FACIL=$P($$SITE^VASITE,U,3)
"RTN","ORRDI1",54,0)
 ;format request XML
"RTN","ORRDI1",55,0)
 S ORREQ="/readClinicalData1?&templateId=RDIIntoleranceConditionPharmacyRead40010&"
"RTN","ORRDI1",56,0)
 S ORREQ=ORREQ_"filterRequest=<?xml version=""1.0"" encoding=""UTF-8""?><filter:filter vhimVersion=""Vhim_4_00"" xmlns:f"
"RTN","ORRDI1",57,0)
 S ORREQ=ORREQ_"ilter=""Filter"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""><filterId>RDI_IC_RX_SINGLE_PATIENT_FILTER</fil"
"RTN","ORRDI1",58,0)
 S ORREQ=ORREQ_"terId><patients><NationalId>"_ICN_"</NationalId><excludeIdentifiers><assigningAuthority"
"RTN","ORRDI1",59,0)
 S ORREQ=ORREQ_">USVHA</assigningAuthority><assigningFacility>"_FACIL_"</assigningFacility></excludeIdentifiers></patien"
"RTN","ORRDI1",60,0)
 S ORREQ=ORREQ_"ts><entryPointFilter queryName=""IC-Standardized""><domainEntryPoint>IntoleranceCondition</domainEnt"
"RTN","ORRDI1",61,0)
 S ORREQ=ORREQ_"ryPoint><xpathQuery><xpath>intoleranceConditions[((gmrAllergyAgent[(code!='') and (codingSystem = '99"
"RTN","ORRDI1",62,0)
 S ORREQ=ORREQ_"VHA_ERT' or contains(.,'99VA'))]) or (drugClass/code[(code!='') and (codingSystem = '99VHA_ERT' or co"
"RTN","ORRDI1",63,0)
 S ORREQ=ORREQ_"ntains(.,'99VA'))]) or (drugIngredient/code[(code!='') and (codingSystem = '99VHA_ERT' or contain"
"RTN","ORRDI1",64,0)
 S ORREQ=ORREQ_"s(.,'99VA'))])) and (status = 'F')]</xpath></xpathQuery></entryPointFilter><entryPointFilter queryNa"
"RTN","ORRDI1",65,0)
 S ORREQ=ORREQ_"me=""OMP-Standardized""><domainEntryPoint>OutpatientMedicationPromise</domainEntryPoint>"
"RTN","ORRDI1",66,0)
 S ORREQ=ORREQ_"<startDate>"_START_"</startDate><xpathQuery><xpath>outpatientMedicationPromises[pharmacyRe"
"RTN","ORRDI1",67,0)
 S ORREQ=ORREQ_"quest/orderedMedication/medicationCode[(code!='') and (codingSystem = '99VHA_ERT' or contain"
"RTN","ORRDI1",68,0)
 S ORREQ=ORREQ_"s(.,'99VA'))]]</xpath></xpathQuery></entryPointFilter></filter:filter>&filterId=RDI_IC_RX_SINGLE_PATIENT_FILTER&re"
"RTN","ORRDI1",69,0)
 S ORCSTART=$ZH
"RTN","ORRDI1",70,0)
 S ORREQ=ORREQ_"questId="_FACIL_"RDI"_$$NOW^XLFDT_";"_ORCSTART
"RTN","ORRDI1",71,0)
 ;make call to HDR
"RTN","ORRDI1",72,0)
 ;ZW ORREQ
"RTN","ORRDI1",73,0)
 S ORXML=$$GETREST^XOBWLIB("CDS WEB SERVICE","CDS SERVER")
"RTN","ORRDI1",74,0)
 S ORRET=$$GET^XOBWLIB(ORXML,ORREQ,.ORERR,0)
"RTN","ORRDI1",75,0)
 S ORCDIF=$ZH-ORCSTART
"RTN","ORRDI1",76,0)
 I ORRET D  Q ORY
"RTN","ORRDI1",77,0)
 .;parse out xml into temp global
"RTN","ORRDI1",78,0)
 .S ORPSTART=$ZH
"RTN","ORRDI1",79,0)
 .D PARSE(ORXML.HttpResponse.Data)
"RTN","ORRDI1",80,0)
 .S ORPDIF=$ZH-ORCSTART-ORCDIF
"RTN","ORRDI1",81,0)
 .;I $D(^TMP($J,"ORRDI","ClinicalData",0,"errorSection")) S ORY="-1^CDS ERROR" D  Q
"RTN","ORRDI1",82,0)
 .;.S ^XTMP("ORRDI","METRICS",ORCSTART)=DFN_U_ORCDIF_U_ORPDIF_U
"RTN","ORRDI1",83,0)
 .;move from temp global into ^XTMP("ORRDI" domain globals
"RTN","ORRDI1",84,0)
 .S ORALNUM=$$AL(DFN)
"RTN","ORRDI1",85,0)
 .S ORPSNUM=$$PS(DFN)
"RTN","ORRDI1",86,0)
 .S ^XTMP("ORRDI","ART",DFN,0)=$$NOW^XLFDT_U_U_ORALNUM
"RTN","ORRDI1",87,0)
 .S ^XTMP("ORRDI","PSOO",DFN,0)=$$NOW^XLFDT_U_U_ORPSNUM
"RTN","ORRDI1",88,0)
 .S ^XTMP("ORRDI",0)=$$FMADD^XLFDT($$NOW^XLFDT,2)_U_$$NOW^XLFDT
"RTN","ORRDI1",89,0)
 .I DOMAIN="ART" S ORY=ORALNUM
"RTN","ORRDI1",90,0)
 .I DOMAIN="PSOO" S ORY=ORPSNUM
"RTN","ORRDI1",91,0)
 .I +ORY>-1 S ^XTMP("ORRDI","TESTREQ")=ORREQ
"RTN","ORRDI1",92,0)
 .;set metrics for data retrieval and parsing
"RTN","ORRDI1",93,0)
 .S ^XTMP("ORRDI","METRICS",$$NOW^XLFDT,ORCSTART)=DFN_U_ORCDIF_U_ORPDIF_U_ORALNUM_U_ORPSNUM
"RTN","ORRDI1",94,0)
 .;ZW ^TMP($J,"ORRDI") ;REMOVE OR COMMENT WHEN DONE
"RTN","ORRDI1",95,0)
 .K ^TMP($J,"ORRDI")
"RTN","ORRDI1",96,0)
 I 'ORRET!(ORERR) S ^XTMP("ORRDI","METRICS",$$NOW^XLFDT,ORCSTART)=DFN_U_"ERROR" D  Q "-1^"_ORERR
"RTN","ORRDI1",97,0)
 .S ^XTMP("ORRDI","ART",DFN,0)=U_U_"-1^"_ORERR
"RTN","ORRDI1",98,0)
 .S ^XTMP("ORRDI","PSOO",DFN,0)=U_U_"-1^"_ORERR
"RTN","ORRDI1",99,0)
RETQ Q -1
"RTN","ORRDI1",100,0)
 ;
"RTN","ORRDI1",101,0)
PS(DFN) ;expects ^TMP($J,"ORRDI")
"RTN","ORRDI1",102,0)
 K ^XTMP("ORRDI","PSOO",DFN)
"RTN","ORRDI1",103,0)
 N ORQ S ORQ=$$MSGERR Q:($L(ORQ)>0) -1_U_ORQ
"RTN","ORRDI1",104,0)
 N I,GL,CNT
"RTN","ORRDI1",105,0)
 S CNT=0,GL=$NA(^TMP($J,"ORRDI","ClinicalData",0,"patient",0,"outpatientMedicationPromises"))
"RTN","ORRDI1",106,0)
 S I="" F  S I=$O(@GL@(I)) Q:'$L(I)  D
"RTN","ORRDI1",107,0)
 .S CNT=CNT+1
"RTN","ORRDI1",108,0)
 .S ^XTMP("ORRDI","PSOO",DFN,I+1,1,0)=$G(@GL@(I,"pharmacyRequest",0,"orderingInstitutionIdentifier",0,"name",0))
"RTN","ORRDI1",109,0)
 .S ^XTMP("ORRDI","PSOO",DFN,I+1,2,0)=$G(@GL@(I,"pharmacyRequest",0,"orderedMedication",0,"medicationCode",0,"displayText",0))
"RTN","ORRDI1",110,0)
 .S ^XTMP("ORRDI","PSOO",DFN,I+1,3,0)=$G(@GL@(I,"pharmacyRequest",0,"orderedMedication",0,"medicationCode",0,"code",0))
"RTN","ORRDI1",111,0)
 .S ^XTMP("ORRDI","PSOO",DFN,I+1,4,0)=$G(@GL@(I,"prescriptionId",0))
"RTN","ORRDI1",112,0)
 .S ^XTMP("ORRDI","PSOO",DFN,I+1,5,0)=$G(@GL@(I,"pharmacyRequest",0,"statusModifier",0,"displayText",0))
"RTN","ORRDI1",113,0)
 .S ^XTMP("ORRDI","PSOO",DFN,I+1,6,0)=$G(@GL@(I,"originalDispense",0,"quantityDispensed",0,"value",0))_";"_$G(@GL@(I,"originalDispense",0,"daysSupply",0))
"RTN","ORRDI1",114,0)
 .S ^XTMP("ORRDI","PSOO",DFN,I+1,7,0)=$$DTCONV($G(@GL@(I,"expirationDate",0,"literal",0)))
"RTN","ORRDI1",115,0)
 .S ^XTMP("ORRDI","PSOO",DFN,I+1,8,0)=$$DTCONV($G(@GL@(I,"pharmacyRequest",0,"orderDate",0,"literal",0)))
"RTN","ORRDI1",116,0)
 .N K S K="" F  S K=$O(@GL@(I,"refillDispense",K)) Q:'$L(K)  D
"RTN","ORRDI1",117,0)
 ..I $G(@GL@(I,"refillDispense",K,"fillDate",0,"literal",0)) D
"RTN","ORRDI1",118,0)
 ...S ^XTMP("ORRDI","PSOO",DFN,I+1,9,0)=$$DTCONV($G(@GL@(I,"refillDispense",K,"fillDate",0,"literal",0)))
"RTN","ORRDI1",119,0)
 .I '$G(^XTMP("ORRDI","PSOO",DFN,I+1,9,0)) S ^XTMP("ORRDI","PSOO",DFN,I+1,9,0)=$$DTCONV($G(@GL@(I,"originalDispense",0,"fillDate",0,"literal",0)))
"RTN","ORRDI1",120,0)
 .S ^XTMP("ORRDI","PSOO",DFN,I+1,10,0)=$G(@GL@(I,"numberOfRefillsAuthorized",0))
"RTN","ORRDI1",121,0)
 .S ^XTMP("ORRDI","PSOO",DFN,I+1,11,0)=$G(@GL@(I,"originalDispense",0,"currentProvider",0,"name",0,"family",0))_","_$G(@GL@(I,"originalDispense",0,"currentProvider",0,"name",0,"given",0))
"RTN","ORRDI1",122,0)
 .S ^XTMP("ORRDI","PSOO",DFN,I+1,12,0)=$G(@GL@(I,"originalDispense",0,"dispensedDrug",0,"drugUnitPrice",0,"value",0))
"RTN","ORRDI1",123,0)
 .N L S L="" F  S L=$O(@GL@(I,"sig",L)) Q:'$L(L)  S ^XTMP("ORRDI","PSOO",DFN,I+1,14,0)=$G(^XTMP("ORRDI","PSOO",DFN,I+1,14,0))_" "_$G(@GL@(I,"sig",L))
"RTN","ORRDI1",124,0)
 .I '$D(^XTMP("ORRDI","PSOO",DFN,I+1,14,0)) S ^XTMP("ORRDI","PSOO",DFN,I+1,14,0)=""
"RTN","ORRDI1",125,0)
 .;S ^XTMP("ORRDI","PSOO",DFN,I+1,14,0)=$G(@GL@(I,"sig",0))
"RTN","ORRDI1",126,0)
 Q CNT
"RTN","ORRDI1",127,0)
 ;
"RTN","ORRDI1",128,0)
AL(DFN) ;expects ^TMP($J,"ORRDI")
"RTN","ORRDI1",129,0)
 K ^XTMP("ORRDI","ART",DFN)
"RTN","ORRDI1",130,0)
 N ORQ S ORQ=$$MSGERR Q:($L(ORQ)>0) -1_U_ORQ
"RTN","ORRDI1",131,0)
 N I,GL,CNT
"RTN","ORRDI1",132,0)
 S CNT=0,GL=$NA(^TMP($J,"ORRDI","ClinicalData",0,"patient",0,"intoleranceConditions"))
"RTN","ORRDI1",133,0)
 S I="" F  S I=$O(@GL@(I)) Q:'$L(I)  D
"RTN","ORRDI1",134,0)
 .S CNT=CNT+1
"RTN","ORRDI1",135,0)
 .S ^XTMP("ORRDI","ART",DFN,I+1,"FACILITY",0)=$G(@GL@(I,"facilityIdentifier",0,"name",0))
"RTN","ORRDI1",136,0)
 .I $G(@GL@(I,"gmrAllergyAgent",0,"code",0)),$E($G(@GL@(I,"gmrAllergyAgent",0,"codingSystem",0)),1,4)="99VA" D
"RTN","ORRDI1",137,0)
 ..S ^XTMP("ORRDI","ART",DFN,I+1,"REACTANT",0)=@GL@(I,"gmrAllergyAgent",0,"code",0)_U_@GL@(I,"gmrAllergyAgent",0,"displayText",0)_U_@GL@(I,"gmrAllergyAgent",0,"codingSystem",0)
"RTN","ORRDI1",138,0)
 .I $D(@GL@(I,"drugIngredient")) D
"RTN","ORRDI1",139,0)
 ..N J S J="" F  S J=$O(@GL@(I,"drugIngredient",J))  Q:'$L(J)  D
"RTN","ORRDI1",140,0)
 ...I $G(@GL@(I,"drugIngredient",J,"code",0,"code",0)),$E($G(@GL@(I,"drugIngredient",J,"code",0,"codingSystem",0)),1,4)="99VA" D
"RTN","ORRDI1",141,0)
 ....S ^XTMP("ORRDI","ART",DFN,I+1,"DRUG INGREDIENTS",J+1)=@GL@(I,"drugIngredient",J,"code",0,"code",0)_U_@GL@(I,"drugIngredient",J,"code",0,"displayText",0)_U_@GL@(I,"drugIngredient",J,"code",0,"codingSystem",0)
"RTN","ORRDI1",142,0)
 .I $D(@GL@(I,"drugClass")) D
"RTN","ORRDI1",143,0)
 ..N J S J="" F  S J=$O(@GL@(I,"drugClass",J))  Q:'$L(J)  D
"RTN","ORRDI1",144,0)
 ...I $G(@GL@(I,"drugClass",0,"code",0,"code",0)),$E($G(@GL@(I,"drugClass",0,"code",0,"codingSystem",0)),1,10)="99VA50.605" D
"RTN","ORRDI1",145,0)
 ....S ^XTMP("ORRDI","ART",DFN,I+1,"DRUG CLASSES",J+1)=@GL@(I,"drugClass",J,"code",0,"alternateCode",0)_U_@GL@(I,"drugClass",J,"code",0,"alternateCode",0)
"RTN","ORRDI1",146,0)
 ....S ^XTMP("ORRDI","ART",DFN,I+1,"DRUG CLASSES",J+1)=^XTMP("ORRDI","ART",DFN,I+1,"DRUG CLASSES",J+1)_U_@GL@(I,"drugClass",J,"code",0,"codingSystem",0)_U_@GL@(I,"drugClass",J,"code",0,"displayText",0)
"RTN","ORRDI1",147,0)
 Q CNT
"RTN","ORRDI1",148,0)
 ;
"RTN","ORRDI1",149,0)
HAVEHDR() ;call to check if this system has an HDR to perform order checks
"RTN","ORRDI1",150,0)
 ;  against
"RTN","ORRDI1",151,0)
 ;check parameter to see if there is an HDR and returns positive if so
"RTN","ORRDI1",152,0)
 I $$GET^XPAR("SYS","OR RDI HAVE HDR") Q 1
"RTN","ORRDI1",153,0)
 ;returns negative because the parameter indicates there is no HDR
"RTN","ORRDI1",154,0)
 Q 0
"RTN","ORRDI1",155,0)
 ;
"RTN","ORRDI1",156,0)
DTCONV(DATE) ;convert date in hl7 format to mm/dd/yy
"RTN","ORRDI1",157,0)
 I '$L(DATE) Q ""
"RTN","ORRDI1",158,0)
 Q $E(DATE,5,6)_"/"_$E(DATE,7,8)_"/"_$E(DATE,3,4)
"RTN","ORRDI1",159,0)
 ;
"RTN","ORRDI1",160,0)
REMESC(ORSTR) ;
"RTN","ORRDI1",161,0)
 ; Remove Escape Characters from HL7 Message Text
"RTN","ORRDI1",162,0)
 ; Escape Sequence codes:
"RTN","ORRDI1",163,0)
 ;         F = field separator (ORFS)
"RTN","ORRDI1",164,0)
 ;         S = component separator (ORCS)
"RTN","ORRDI1",165,0)
 ;         R = repetition separator (ORRS)
"RTN","ORRDI1",166,0)
 ;         E = escape character (ORES)
"RTN","ORRDI1",167,0)
 ;         T = subcomponent separator (ORSS)
"RTN","ORRDI1",168,0)
 N ORCHR,ORREP,I1,I2,J1,J2,K,VALUE
"RTN","ORRDI1",169,0)
 F ORCHR="F","S","R","E","T" S ORREP(ORES_ORCHR_ORES)=$S(ORCHR="F":ORFS,ORCHR="S":ORCS,ORCHR="R":ORRS,ORCHR="E":ORES,ORCHR="T":ORSS)
"RTN","ORRDI1",170,0)
 S ORSTR=$$REPLACE^XLFSTR(ORSTR,.ORREP)
"RTN","ORRDI1",171,0)
 F  S I1=$P(ORSTR,ORES_"X") Q:$L(I1)=$L(ORSTR)  D
"RTN","ORRDI1",172,0)
 .S I2=$P(ORSTR,ORES_"X",2,99)
"RTN","ORRDI1",173,0)
 .S J1=$P(I2,ORES) Q:'$L(J1)
"RTN","ORRDI1",174,0)
 .S J2=$P(I2,ORES,2,99)
"RTN","ORRDI1",175,0)
 .S VALUE=$$BASE^XLFUTL($$UP^XLFSTR(J1),16,10)
"RTN","ORRDI1",176,0)
 .S K=$S(VALUE>255:"?",VALUE<32!(VALUE>127&(VALUE<160)):"",1:$C(VALUE))
"RTN","ORRDI1",177,0)
 .S ORSTR=I1_K_J2
"RTN","ORRDI1",178,0)
 Q ORSTR
"RTN","ORRDI1",179,0)
 ;
"RTN","ORRDI1",180,0)
PARSE(STREAM) ;
"RTN","ORRDI1",181,0)
 N %XML,GL
"RTN","ORRDI1",182,0)
 S GL=$NA(^TMP($J,"ORRDI"))
"RTN","ORRDI1",183,0)
 K @GL
"RTN","ORRDI1",184,0)
 N STATUS,READER,XOBERR,S
"RTN","ORRDI1",185,0)
 ;S STATUS=##class(%XML.TextReader).ParseStream(STREAM,.READER)
"RTN","ORRDI1",186,0)
 S STATUS=##class(%XML.TextReader).ParseStream(STREAM,.READER,,,,,1)
"RTN","ORRDI1",187,0)
 I $$STATCHK^XOBWLIB(STATUS,.XOBERR,1) D
"RTN","ORRDI1",188,0)
 .N BREAK
"RTN","ORRDI1",189,0)
 .S BREAK=0 F  Q:BREAK||READER.EOF||'READER.Read()  D
"RTN","ORRDI1",190,0)
 ..N X
"RTN","ORRDI1",191,0)
 ..I READER.NodeType="element" D SPUSH(.S,READER.LocalName)
"RTN","ORRDI1",192,0)
 ..I READER.NodeType="endelement" D SPOP(.S,.X)
"RTN","ORRDI1",193,0)
 ..I READER.NodeType="chars" D SPUT(.S,READER.Value)
"RTN","ORRDI1",194,0)
 Q
"RTN","ORRDI1",195,0)
 ;
"RTN","ORRDI1",196,0)
SPUSH(S,X) ;places X on the stack S and returns the current level of the stack
"RTN","ORRDI1",197,0)
 N I S I=$O(S(""),-1)+1,S(I)=X
"RTN","ORRDI1",198,0)
 Q I
"RTN","ORRDI1",199,0)
 ;
"RTN","ORRDI1",200,0)
SPOP(S,X) ;removes the top item from the stack S and put it into the variable X and returns the level that X was at
"RTN","ORRDI1",201,0)
 N I S I=$O(S(""),-1)
"RTN","ORRDI1",202,0)
 I I S X=S(I) K S(I)
"RTN","ORRDI1",203,0)
 N J S J=$O(S(I),-1) I J S S(J,X)=$G(S(J,X))+1
"RTN","ORRDI1",204,0)
 Q I
"RTN","ORRDI1",205,0)
 ;
"RTN","ORRDI1",206,0)
SPEEK(S,X) ;same as SPOP except the top item is not removed
"RTN","ORRDI1",207,0)
 N I S I=$O(S(""),-1)
"RTN","ORRDI1",208,0)
 I I S X=S(I)
"RTN","ORRDI1",209,0)
 Q I
"RTN","ORRDI1",210,0)
 ;
"RTN","ORRDI1",211,0)
SPUT(S,X) ;implementation specific, uses the stack to form a global node
"RTN","ORRDI1",212,0)
 N I,STR
"RTN","ORRDI1",213,0)
 S STR=$P(GL,")")
"RTN","ORRDI1",214,0)
 S I=0 F  S I=$O(S(I)) Q:'I  D
"RTN","ORRDI1",215,0)
 .S STR=STR_","_""""_S(I)_""""_","
"RTN","ORRDI1",216,0)
 .N NUM S NUM=0
"RTN","ORRDI1",217,0)
 .I $D(S(I-1,S(I))) S NUM=+$G(S(I-1,S(I)))
"RTN","ORRDI1",218,0)
 .S STR=STR_NUM
"RTN","ORRDI1",219,0)
 S STR=STR_")"
"RTN","ORRDI1",220,0)
 I $D(@STR) S @STR=@STR_X
"RTN","ORRDI1",221,0)
 I '$D(@STR) S @STR=X
"RTN","ORRDI1",222,0)
 Q STR
"RTN","ORRDI1",223,0)
 ;
"RTN","ORRDI1",224,0)
MSGERR() ;check errors from XML return
"RTN","ORRDI1",225,0)
 ;returns empty string "" if there was no error
"RTN","ORRDI1",226,0)
 ;returns empty string "" if the only error was "ALL_PATIENT_IDS_EXCLUDED"
"RTN","ORRDI1",227,0)
 ;otherwise returns the exceptionMessage string from the errorSection
"RTN","ORRDI1",228,0)
 N ORRET S ORRET=""
"RTN","ORRDI1",229,0)
 I $D(^TMP($J,"ORRDI","ClinicalData",0,"errorSection")) D
"RTN","ORRDI1",230,0)
 .N I F I="fatalErrors","errors","warnings" D
"RTN","ORRDI1",231,0)
 ..N J S J="" F  S J=$O(^TMP($J,"ORRDI","ClinicalData",0,"errorSection",0,I,J)) Q:J=""  D
"RTN","ORRDI1",232,0)
 ...N ORSTR S ORSTR=$G(^TMP($J,"ORRDI","ClinicalData",0,"errorSection",0,I,J,"errorCode",0))
"RTN","ORRDI1",233,0)
 ...I ORSTR'="ALL_PATIENT_IDS_EXCLUDED" S ORRET=ORSTR
"RTN","ORRDI1",234,0)
 Q ORRET
"RTN","ORRDI1",235,0)
ERRHNDL(DFN) ;handle any errors that may get thrown in call to GET^ORRDI1
"RTN","ORRDI1",236,0)
 K ^TMP($J,"ORRDI"),^XTMP("ORRDI","PSOO",DFN),^XTMP("ORRDI","ART",DFN)
"RTN","ORRDI1",237,0)
 D UNWIND^%ZTER
"RTN","ORRDI1",238,0)
 Q
"RTN","ORRDI2")
0^2^B25393824^B28359828
"RTN","ORRDI2",1,0)
ORRDI2 ; SLC/JMH - RDI routine for user interface and data cleanup; 3/24/05 2:31 ;6/30/08  11:06
"RTN","ORRDI2",2,0)
 ;;3.0;ORDER ENTRY/RESULTS REPORTING;**232,294**;Dec 17, 1997;Build 27
"RTN","ORRDI2",3,0)
 ;
"RTN","ORRDI2",4,0)
SET ;utility to set RDI related parameters
"RTN","ORRDI2",5,0)
 I '$$PATCH^XPDUTL("OR*3.0*238") D  Q
"RTN","ORRDI2",6,0)
 . W !,"This menu is locked until patch OR*3.0*238 is installed."
"RTN","ORRDI2",7,0)
 N QUIT,QUITALL
"RTN","ORRDI2",8,0)
 W !!,"Sets System wide parameters to control order checking against"
"RTN","ORRDI2",9,0)
 W !,"  remote data",!
"RTN","ORRDI2",10,0)
 F  Q:$G(QUIT)!($G(QUITALL))  D
"RTN","ORRDI2",11,0)
 . N VAL,VALEXT,DIR,DTOUT,Y
"RTN","ORRDI2",12,0)
 . S VAL=$$GET^XPAR("SYS","OR RDI HAVE HDR")
"RTN","ORRDI2",13,0)
 . S VALEXT="NO" I VAL=1 S VALEXT="YES"
"RTN","ORRDI2",14,0)
 . S DIR("A")="HAVE AN HDR"
"RTN","ORRDI2",15,0)
 . S DIR("B")=VALEXT
"RTN","ORRDI2",16,0)
 . S DIR("?")="^D HELP1^ORRDI2"
"RTN","ORRDI2",17,0)
 . S DIR(0)="Y"
"RTN","ORRDI2",18,0)
 . D ^DIR
"RTN","ORRDI2",19,0)
 . I $G(Y)="^"!($G(DTOUT)) S QUITALL=1
"RTN","ORRDI2",20,0)
 . I $G(Y)=1!($G(Y)=0) S QUIT=1 D
"RTN","ORRDI2",21,0)
 . . D EN^XPAR("SYS","OR RDI HAVE HDR",,Y)
"RTN","ORRDI2",22,0)
 I $G(QUITALL) Q
"RTN","ORRDI2",23,0)
 I '$$GET^XPAR("SYS","OR RDI HAVE HDR") Q
"RTN","ORRDI2",24,0)
 S QUIT=0
"RTN","ORRDI2",25,0)
 F  Q:$G(QUIT)!($G(QUITALL))  D
"RTN","ORRDI2",26,0)
 . N VAL,VALEXT,DIR,DTOUT,Y
"RTN","ORRDI2",27,0)
 . S VAL=$$GET^XPAR("SYS","OR RDI CACHE TIME")
"RTN","ORRDI2",28,0)
 . S VALEXT=$G(VAL,0)
"RTN","ORRDI2",29,0)
 . S DIR("A")="CACHE TIME (Minutes)"
"RTN","ORRDI2",30,0)
 . S DIR("B")=VALEXT
"RTN","ORRDI2",31,0)
 . S DIR("?")="^D HELP3^ORRDI2"
"RTN","ORRDI2",32,0)
 . S DIR(0)="N^0:9999:0"
"RTN","ORRDI2",33,0)
 . D ^DIR
"RTN","ORRDI2",34,0)
 . I $G(Y)="^"!($G(DTOUT)) S QUITALL=1
"RTN","ORRDI2",35,0)
 . I $G(Y)>-1 S QUIT=1 D
"RTN","ORRDI2",36,0)
 . . D EN^XPAR("SYS","OR RDI CACHE TIME",,Y)
"RTN","ORRDI2",37,0)
 Q
"RTN","ORRDI2",38,0)
HELP1 ;
"RTN","ORRDI2",39,0)
 W "Set this to ""YES"" if this system has an HDR system that"
"RTN","ORRDI2",40,0)
 W !,"  it uses to access remote data."
"RTN","ORRDI2",41,0)
 Q
"RTN","ORRDI2",42,0)
HELP3 ;
"RTN","ORRDI2",43,0)
 W "Set this to the number of minutes that the retrieved data is "
"RTN","ORRDI2",44,0)
 W !,"  to be considered valid for order checking purposes."
"RTN","ORRDI2",45,0)
 Q
"RTN","ORRDI2",46,0)
LIST ;
"RTN","ORRDI2",47,0)
 W !
"RTN","ORRDI2",48,0)
 W $$GET^XPAR("SYS","OR RDI HAVE HDR")," "
"RTN","ORRDI2",49,0)
 W $$GET^XPAR("SYS","OR RDI CACHE TIME")
"RTN","ORRDI2",50,0)
 Q
"RTN","ORRDI2",51,0)
CLEANUP ;
"RTN","ORRDI2",52,0)
 N VAL,NOW,THRESH,DOM,DFN,TIME
"RTN","ORRDI2",53,0)
 S VAL=$$GET^XPAR("SYS","OR RDI CACHE TIME")
"RTN","ORRDI2",54,0)
 S NOW=$$NOW^XLFDT
"RTN","ORRDI2",55,0)
 S THRESH=$$FMADD^XLFDT(NOW,,,-VAL)
"RTN","ORRDI2",56,0)
 S DFN=0
"RTN","ORRDI2",57,0)
 F DOM="PSOO","ART" F  S DFN=$O(^XTMP("ORRDI",DOM,DFN)) Q:'DFN  D
"RTN","ORRDI2",58,0)
 . S TIME=$G(^XTMP("ORRDI",DOM,DFN,0))
"RTN","ORRDI2",59,0)
 . I TIME<THRESH K ^XTMP("ORRDI",DOM,DFN)
"RTN","ORRDI2",60,0)
 ;clear out metrics data older than 5 days
"RTN","ORRDI2",61,0)
 N ORDT,ORDIFF S ORDT=0
"RTN","ORRDI2",62,0)
 F  S ORDT=$O(^XTMP("ORRDI","METRICS",ORDT)) Q:'ORDT  S ORDIFF=$$FMDIFF^XLFDT($$NOW^XLFDT,ORDT,1) Q:ORDIFF<5  K ^XTMP("ORRDI","METRICS",ORDT)
"RTN","ORRDI2",63,0)
 ; checking if OUTAGE task crashed or hasn't completed successfully
"RTN","ORRDI2",64,0)
 I $$DOWNXVAL D
"RTN","ORRDI2",65,0)
 .I $$FMDIFF^XLFDT($$NOW^XLFDT,$$PINGXVAL,2)>($$PINGPVAL*2) D SPAWN^ORRDI2
"RTN","ORRDI2",66,0)
 Q
"RTN","ORRDI2",67,0)
DOWNRPC(ORY) ;can be used in an RPC to check if RDI is in an OUTAGE state (HDR DOWN)
"RTN","ORRDI2",68,0)
 S ORY=$$DOWNXVAL
"RTN","ORRDI2",69,0)
 Q
"RTN","ORRDI2",70,0)
DICNPVAL() ;parameter value for dummy patient ICN
"RTN","ORRDI2",71,0)
 Q $$GET^XPAR("ALL","ORRDI DUMMY ICN")
"RTN","ORRDI2",72,0)
FAILPVAL() ;parameter value for failure threshold
"RTN","ORRDI2",73,0)
 Q $$GET^XPAR("ALL","ORRDI FAIL THRESH")
"RTN","ORRDI2",74,0)
SUCCPVAL() ;parameter value for success threshold
"RTN","ORRDI2",75,0)
 Q $$GET^XPAR("ALL","ORRDI SUCCEED THRESH")
"RTN","ORRDI2",76,0)
PINGPVAL() ;parameter value for ping frequency
"RTN","ORRDI2",77,0)
 Q $$GET^XPAR("ALL","ORRDI PING FREQ")
"RTN","ORRDI2",78,0)
DOWNXVAL() ;xtmp value for OUTAGE state
"RTN","ORRDI2",79,0)
 Q $G(^XTMP("ORRDI","OUTAGE INFO","DOWN"))
"RTN","ORRDI2",80,0)
FAILXVAL() ;xtmp value for number of failed reads
"RTN","ORRDI2",81,0)
 Q $G(^XTMP("ORRDI","OUTAGE INFO","FAILURES"))
"RTN","ORRDI2",82,0)
SUCCXVAL() ;xtmp value for number of successful reads
"RTN","ORRDI2",83,0)
 Q $G(^XTMP("ORRDI","OUTAGE INFO","SUCCEEDS"))
"RTN","ORRDI2",84,0)
PINGXVAL() ;xtmp value for last ping time
"RTN","ORRDI2",85,0)
 Q $G(^XTMP("ORRDI","OUTAGE INFO","DOWN","LAST PING"))
"RTN","ORRDI2",86,0)
LDPTTVAL(DFN) ;tmp value for if the local data only message has been shown to the user during ordering session
"RTN","ORRDI2",87,0)
 Q $G(^TMP($J,"ORRDI",DFN))
"RTN","ORRDI2",88,0)
SPAWN ;subroutine to spawn the DOWNTSK task
"RTN","ORRDI2",89,0)
 K ^XTMP("ORRDI","ART"),^XTMP("ORRDI","PSOO")
"RTN","ORRDI2",90,0)
 N ZTDESC,ZTRTN,ZTSAVE,ZTIO,ZTSK,ZTDTH
"RTN","ORRDI2",91,0)
 S ZTDESC="RDI TASK TO CHECK IF HDR IS UP"
"RTN","ORRDI2",92,0)
 S ZTRTN="DOWNTSK^ORRDI2"
"RTN","ORRDI2",93,0)
 S ZTIO=""
"RTN","ORRDI2",94,0)
 S ZTDTH=$$NOW^XLFDT+.000001
"RTN","ORRDI2",95,0)
 D ^%ZTLOAD
"RTN","ORRDI2",96,0)
 Q
"RTN","ORRDI2",97,0)
DOWNTSK ;subroutine to check if HDR is back up
"RTN","ORRDI2",98,0)
 S ^XTMP("ORRDI","OUTAGE LOG",$$NOW^XLFDT)="GOING DOWN"
"RTN","ORRDI2",99,0)
 F  Q:(($$SUCCXVAL'<$$SUCCPVAL)!('$$DOWNXVAL))  D
"RTN","ORRDI2",100,0)
 .N WAIT,RSLT
"RTN","ORRDI2",101,0)
 .S WAIT=$$FMDIFF^XLFDT($$NOW^XLFDT,$$PINGXVAL,2)
"RTN","ORRDI2",102,0)
 .S WAIT=$$PINGPVAL-WAIT
"RTN","ORRDI2",103,0)
 .;wait until the proper # of seconds has expired before retrying
"RTN","ORRDI2",104,0)
 .I WAIT>0 H WAIT
"RTN","ORRDI2",105,0)
 .S ^XTMP("ORRDI","OUTAGE INFO","DOWN","LAST PING")=$$NOW^XLFDT
"RTN","ORRDI2",106,0)
 .;send dummy message
"RTN","ORRDI2",107,0)
 .S RSLT=$$TESTCALL
"RTN","ORRDI2",108,0)
 .;if successful increment success counter
"RTN","ORRDI2",109,0)
 .I RSLT S ^XTMP("ORRDI","OUTAGE INFO","SUCCEEDS")=1+$$SUCCXVAL
"RTN","ORRDI2",110,0)
 .;if failure set success counter to 0
"RTN","ORRDI2",111,0)
 .I 'RSLT S ^XTMP("ORRDI","OUTAGE INFO","SUCCEEDS")=0
"RTN","ORRDI2",112,0)
 K ^XTMP("ORRDI","OUTAGE INFO")
"RTN","ORRDI2",113,0)
 S ^XTMP("ORRDI","OUTAGE LOG",$$NOW^XLFDT)="BACK UP"
"RTN","ORRDI2",114,0)
 Q
"RTN","ORRDI2",115,0)
TCOLD() ;call to send a test call to CDS...returns 1 if successful, 0 if not
"RTN","ORRDI2",116,0)
 N ORREQ,ORXML,ORRET,XML
"RTN","ORRDI2",117,0)
 S ORREQ="/isAlive"
"RTN","ORRDI2",118,0)
 S ORXML=$$GETREST^XOBWLIB("CDS WEB SERVICE","CDS SERVER")
"RTN","ORRDI2",119,0)
 S ORRET=$$GET^XOBWLIB(ORXML,ORREQ,.ORERR,0)
"RTN","ORRDI2",120,0)
 I 'ORRET Q 0
"RTN","ORRDI2",121,0)
 While (ORXML.HttpResponse.Data.AtEnd = 0) {S XML=ORXML.HttpResponse.Data.Read(100)}
"RTN","ORRDI2",122,0)
 Q:XML="true" 1
"RTN","ORRDI2",123,0)
 Q 0
"RTN","ORRDI2",124,0)
TESTCALL() ;call to send a test call to CDS...returns 1 if successful, 0 if not
"RTN","ORRDI2",125,0)
 N ORREQ,ORXML,ORRET
"RTN","ORRDI2",126,0)
 I $L($G(^XTMP("ORRDI","TESTREQ")))'>0 Q $$TCOLD() ;USES isAlive IF NO TEST REQUEST IS PRESENT
"RTN","ORRDI2",127,0)
 S ORREQ=$G(^XTMP("ORRDI","TESTREQ"))
"RTN","ORRDI2",128,0)
 S ORXML=$$GETREST^XOBWLIB("CDS WEB SERVICE","CDS SERVER")
"RTN","ORRDI2",129,0)
 S ORRET=$$GET^XOBWLIB(ORXML,ORREQ,.ORERR,0)
"RTN","ORRDI2",130,0)
 I 'ORRET Q 0
"RTN","ORRDI2",131,0)
 K ^TMP($J,"ORRDI")
"RTN","ORRDI2",132,0)
 D PARSE^ORRDI1(ORXML.HttpResponse.Data)
"RTN","ORRDI2",133,0)
 I $L($$MSGERR^ORRDI1)>0 K ^TMP($J,"ORRDI") Q 0
"RTN","ORRDI2",134,0)
 K ^TMP($J,"ORRDI")
"RTN","ORRDI2",135,0)
 Q 1
"RTN","ORY294")
0^3^B268802^n/a
"RTN","ORY294",1,0)
ORY294 ;SLC/JMH - post install routine for patch OR*3*294; ;7/2/08  07:42
"RTN","ORY294",2,0)
 ;;3.0;ORDER ENTRY/RESULTS REPORTING;**294**;Dec 17, 1997;Build 27
"RTN","ORY294",3,0)
 ;
"RTN","ORY294",4,0)
POST ;
"RTN","ORY294",5,0)
 D REGREST^XOBWLIB("CDS WEB SERVICE","cds-wsclient/cds-service","/isAlive")
"RTN","ORY294",6,0)
 Q
"RTN","ORY294",7,0)
 ;
"VER")
8.0^22.0
"BLD",7875,6)
^286
**END**
**END**
