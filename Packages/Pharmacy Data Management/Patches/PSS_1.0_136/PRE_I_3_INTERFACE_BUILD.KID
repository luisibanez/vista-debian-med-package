KIDS Distribution saved on Jan 13, 2011@09:34:21
PSS*1*136 T21 01/13/11
**KIDS**:PSS*1.0*136^

**INSTALL NAME**
PSS*1.0*136
"BLD",7151,0)
PSS*1.0*136^PHARMACY DATA MANAGEMENT^0^3110113^y
"BLD",7151,1,0)
^^3^3^3080515^
"BLD",7151,1,1,0)
 
"BLD",7151,1,2,0)
This is the package that holds the routines responsible for the pharmacy 
"BLD",7151,1,3,0)
XML interface for drug order checks from First DataBank.
"BLD",7151,4,0)
^9.64PA^59.74^2
"BLD",7151,4,59.73,0)
59.73
"BLD",7151,4,59.73,222)
y^y^f^^^^n
"BLD",7151,4,59.74,0)
59.74
"BLD",7151,4,59.74,222)
y^y^f^^^^n
"BLD",7151,4,"B",59.73,59.73)

"BLD",7151,4,"B",59.74,59.74)

"BLD",7151,6.3)
89
"BLD",7151,"ABPKG")
n
"BLD",7151,"INIT")
EN^PSSHRPST
"BLD",7151,"KRN",0)
^9.67PA^779.2^20
"BLD",7151,"KRN",.4,0)
.4
"BLD",7151,"KRN",.4,"NM",0)
^9.68A^^0
"BLD",7151,"KRN",.401,0)
.401
"BLD",7151,"KRN",.402,0)
.402
"BLD",7151,"KRN",.403,0)
.403
"BLD",7151,"KRN",.5,0)
.5
"BLD",7151,"KRN",.84,0)
.84
"BLD",7151,"KRN",3.6,0)
3.6
"BLD",7151,"KRN",3.6,"NM",0)
^9.68A^2^2
"BLD",7151,"KRN",3.6,"NM",1,0)
PSS FDB INTERFACE^^0
"BLD",7151,"KRN",3.6,"NM",2,0)
PSS FDB INTERFACE RESTORED^^0
"BLD",7151,"KRN",3.6,"NM","B","PSS FDB INTERFACE",1)

"BLD",7151,"KRN",3.6,"NM","B","PSS FDB INTERFACE RESTORED",2)

"BLD",7151,"KRN",3.8,0)
3.8
"BLD",7151,"KRN",3.8,"NM",0)
^9.68A^^0
"BLD",7151,"KRN",9.2,0)
9.2
"BLD",7151,"KRN",9.8,0)
9.8
"BLD",7151,"KRN",9.8,"NM",0)
^9.68A^16^16
"BLD",7151,"KRN",9.8,"NM",1,0)
PSSHFREQ^^0^B27105352
"BLD",7151,"KRN",9.8,"NM",2,0)
PSSHRCOM^^0^B27377799
"BLD",7151,"KRN",9.8,"NM",3,0)
PSSHREQ^^0^B201153193
"BLD",7151,"KRN",9.8,"NM",4,0)
PSSHRQ2^^0^B3729020
"BLD",7151,"KRN",9.8,"NM",5,0)
PSSHRQ21^^0^B139661010
"BLD",7151,"KRN",9.8,"NM",6,0)
PSSHRQ22^^0^B58385723
"BLD",7151,"KRN",9.8,"NM",7,0)
PSSHRQ23^^0^B235617797
"BLD",7151,"KRN",9.8,"NM",8,0)
PSSHRQ2O^^0^B29426427
"BLD",7151,"KRN",9.8,"NM",9,0)
PSSHRVAL^^0^B150414400
"BLD",7151,"KRN",9.8,"NM",10,0)
PSSHRVL1^^0^B194249230
"BLD",7151,"KRN",9.8,"NM",11,0)
PSSHTTP^^0^B7570296
"BLD",7151,"KRN",9.8,"NM",12,0)
PSSDSFDB^^0^B37836695
"BLD",7151,"KRN",9.8,"NM",13,0)
PSSHRIT^^0^B156393255
"BLD",7151,"KRN",9.8,"NM",14,0)
PSSHRPST^^0^B4804373
"BLD",7151,"KRN",9.8,"NM",15,0)
PSSHRENV^^0^B6460862
"BLD",7151,"KRN",9.8,"NM",16,0)
PSSFDBRT^^0^B52400714
"BLD",7151,"KRN",9.8,"NM","B","PSSDSFDB",12)

"BLD",7151,"KRN",9.8,"NM","B","PSSFDBRT",16)

"BLD",7151,"KRN",9.8,"NM","B","PSSHFREQ",1)

"BLD",7151,"KRN",9.8,"NM","B","PSSHRCOM",2)

"BLD",7151,"KRN",9.8,"NM","B","PSSHRENV",15)

"BLD",7151,"KRN",9.8,"NM","B","PSSHREQ",3)

"BLD",7151,"KRN",9.8,"NM","B","PSSHRIT",13)

"BLD",7151,"KRN",9.8,"NM","B","PSSHRPST",14)

"BLD",7151,"KRN",9.8,"NM","B","PSSHRQ2",4)

"BLD",7151,"KRN",9.8,"NM","B","PSSHRQ21",5)

"BLD",7151,"KRN",9.8,"NM","B","PSSHRQ22",6)

"BLD",7151,"KRN",9.8,"NM","B","PSSHRQ23",7)

"BLD",7151,"KRN",9.8,"NM","B","PSSHRQ2O",8)

"BLD",7151,"KRN",9.8,"NM","B","PSSHRVAL",9)

"BLD",7151,"KRN",9.8,"NM","B","PSSHRVL1",10)

"BLD",7151,"KRN",9.8,"NM","B","PSSHTTP",11)

"BLD",7151,"KRN",19,0)
19
"BLD",7151,"KRN",19,"NM",0)
^9.68A^10^5
"BLD",7151,"KRN",19,"NM",6,0)
PSS MGR^^2
"BLD",7151,"KRN",19,"NM",7,0)
PSS PEPS SERVICES^^0
"BLD",7151,"KRN",19,"NM",8,0)
PSS CHECK VENDOR DATABASE LINK^^0
"BLD",7151,"KRN",19,"NM",9,0)
PSS CHECK PEPS SERVICES SETUP^^0
"BLD",7151,"KRN",19,"NM",10,0)
PSS ENABLE/DISABLE DB LINK^^0
"BLD",7151,"KRN",19,"NM","B","PSS CHECK PEPS SERVICES SETUP",9)

"BLD",7151,"KRN",19,"NM","B","PSS CHECK VENDOR DATABASE LINK",8)

"BLD",7151,"KRN",19,"NM","B","PSS ENABLE/DISABLE DB LINK",10)

"BLD",7151,"KRN",19,"NM","B","PSS MGR",6)

"BLD",7151,"KRN",19,"NM","B","PSS PEPS SERVICES",7)

"BLD",7151,"KRN",19.1,0)
19.1
"BLD",7151,"KRN",19.1,"NM",0)
^9.68A^^0
"BLD",7151,"KRN",101,0)
101
"BLD",7151,"KRN",101,"NM",0)
^9.68A^^0
"BLD",7151,"KRN",409.61,0)
409.61
"BLD",7151,"KRN",771,0)
771
"BLD",7151,"KRN",771,"NM",0)
^9.68A^^
"BLD",7151,"KRN",779.2,0)
779.2
"BLD",7151,"KRN",870,0)
870
"BLD",7151,"KRN",870,"NM",0)
^9.68A^^
"BLD",7151,"KRN",8989.51,0)
8989.51
"BLD",7151,"KRN",8989.51,"NM",0)
^9.68A^^
"BLD",7151,"KRN",8989.52,0)
8989.52
"BLD",7151,"KRN",8994,0)
8994
"BLD",7151,"KRN","B",.4,.4)

"BLD",7151,"KRN","B",.401,.401)

"BLD",7151,"KRN","B",.402,.402)

"BLD",7151,"KRN","B",.403,.403)

"BLD",7151,"KRN","B",.5,.5)

"BLD",7151,"KRN","B",.84,.84)

"BLD",7151,"KRN","B",3.6,3.6)

"BLD",7151,"KRN","B",3.8,3.8)

"BLD",7151,"KRN","B",9.2,9.2)

"BLD",7151,"KRN","B",9.8,9.8)

"BLD",7151,"KRN","B",19,19)

"BLD",7151,"KRN","B",19.1,19.1)

"BLD",7151,"KRN","B",101,101)

"BLD",7151,"KRN","B",409.61,409.61)

"BLD",7151,"KRN","B",771,771)

"BLD",7151,"KRN","B",779.2,779.2)

"BLD",7151,"KRN","B",870,870)

"BLD",7151,"KRN","B",8989.51,8989.51)

"BLD",7151,"KRN","B",8989.52,8989.52)

"BLD",7151,"KRN","B",8994,8994)

"BLD",7151,"PRE")
PSSHRENV
"BLD",7151,"QUES",0)
^9.62^^0
"BLD",7151,"REQB",0)
^9.611^2^2
"BLD",7151,"REQB",1,0)
XOBW 1.0^1
"BLD",7151,"REQB",2,0)
PSS*1.0*147^1
"BLD",7151,"REQB","B","PSS*1.0*147",2)

"BLD",7151,"REQB","B","XOBW 1.0",1)

"FIA",59.73)
VENDOR DISABLE/ENABLE
"FIA",59.73,0)
^PS(59.73,
"FIA",59.73,0,0)
59.73S
"FIA",59.73,0,1)
y^y^f^^^^n
"FIA",59.73,0,10)

"FIA",59.73,0,11)

"FIA",59.73,0,"RLRO")

"FIA",59.73,0,"VR")
1.0^PSS
"FIA",59.73,59.73)
0
"FIA",59.73,59.731)
0
"FIA",59.74)
VENDOR INTERFACE DATA
"FIA",59.74,0)
^PS(59.74,
"FIA",59.74,0,0)
59.74D
"FIA",59.74,0,1)
y^y^f^^^^n
"FIA",59.74,0,10)

"FIA",59.74,0,11)

"FIA",59.74,0,"RLRO")

"FIA",59.74,0,"VR")
1.0^PSS
"FIA",59.74,59.74)
0
"INIT")
EN^PSSHRPST
"KRN",3.6,276,-1)
0^1
"KRN",3.6,276,0)
PSS FDB INTERFACE^ORDER CHECK DATABASE DOWN^3^1
"KRN",3.6,281,-1)
0^2
"KRN",3.6,281,0)
PSS FDB INTERFACE RESTORED^ORDER CHECK DATABASE IS BACK UP^3^1
"KRN",19,10551,-1)
2^6
"KRN",19,10551,0)
PSS MGR^Pharmacy Data Management^^M^20131^^^^^^^517
"KRN",19,10551,10,0)
^19.01IP^80^79
"KRN",19,10551,10,79,0)
13716^^21
"KRN",19,10551,10,79,"^")
PSS PEPS SERVICES
"KRN",19,10551,"U")
PHARMACY DATA MANAGEMENT
"KRN",19,13650,-1)
0^10
"KRN",19,13650,0)
PSS ENABLE/DISABLE DB LINK^Enable/Disable Vendor Database Link^^R^^^^^^^^PHARMACY DATA MANAGEMENT
"KRN",19,13650,1,0)
^19.06^4^4^3090622^^^
"KRN",19,13650,1,1,0)
This option provides the ability to disable/enable the link to the vendor interface used for
"KRN",19,13650,1,2,0)
enhanced order checking.
"KRN",19,13650,1,3,0)
When disabled, NO drug-drug interaction, duplicate therapy or dosing order checks will 
"KRN",19,13650,1,4,0)
 be performed in Pharmacy and in Computerized Patient Record System (CPRS).
"KRN",19,13650,25)
EN^PSSDSFDB
"KRN",19,13650,"U")
ENABLE/DISABLE VENDOR DATABASE
"KRN",19,13712,-1)
0^8
"KRN",19,13712,0)
PSS CHECK VENDOR DATABASE LINK^Check Vendor Database Link^^R^^^^^^^^PHARMACY DATA MANAGEMENT^^
"KRN",19,13712,20)

"KRN",19,13712,25)
INTACT^PSSHRIT
"KRN",19,13712,99.1)
61370,27253
"KRN",19,13712,"U")
CHECK VENDOR DATABASE LINK
"KRN",19,13715,-1)
0^9
"KRN",19,13715,0)
PSS CHECK PEPS SERVICES SETUP^Check PEPS Services Setup^^R^^^^^^^^PHARMACY DATA MANAGEMENT
"KRN",19,13715,1,0)
^^4^4^3090717^
"KRN",19,13715,1,1,0)
This option provides the ability  to check and validate that the link to the vendor 
"KRN",19,13715,1,2,0)
interface used for enhanced order checking is enabled and operational. 
"KRN",19,13715,1,3,0)
It also provides the ability to execute various order checks against the vendor 
"KRN",19,13715,1,4,0)
database to ensure that the database is installed and reachable.
"KRN",19,13715,25)
RUNTEST^PSSHRIT
"KRN",19,13715,"U")
CHECK PEPS SERVICES SETUP
"KRN",19,13716,-1)
0^7
"KRN",19,13716,0)
PSS PEPS SERVICES^PEPS Services^^M^^^^^^^^PHARMACY DATA MANAGEMENT
"KRN",19,13716,10,0)
^19.01IP^2^2
"KRN",19,13716,10,1,0)
13712^^1
"KRN",19,13716,10,1,"^")
PSS CHECK VENDOR DATABASE LINK
"KRN",19,13716,10,2,0)
13715^^2
"KRN",19,13716,10,2,"^")
PSS CHECK PEPS SERVICES SETUP
"KRN",19,13716,99)
61538,52570
"KRN",19,13716,"U")
PEPS SERVICES
"MBREQ")
0
"ORD",2,3.6)
3.6;2;1;;BUL^XPDTA1;;BULE1^XPDIA1;;;BULDEL^XPDIA1
"ORD",2,3.6,0)
BULLETIN
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",517,-1)
1^1
"PKG",517,0)
PHARMACY DATA MANAGEMENT^PSS^Maintenance of Pharmacy files.
"PKG",517,20,0)
^9.402P^^
"PKG",517,22,0)
^9.49I^1^1
"PKG",517,22,1,0)
1.0^2970930^2971014^11595
"PKG",517,22,1,"PAH",1,0)
136^3110113
"PKG",517,22,1,"PAH",1,1,0)
^^3^3^3110113
"PKG",517,22,1,"PAH",1,1,1,0)
 
"PKG",517,22,1,"PAH",1,1,2,0)
This is the package that holds the routines responsible for the pharmacy 
"PKG",517,22,1,"PAH",1,1,3,0)
XML interface for drug order checks from First DataBank.
"PRE")
PSSHRENV
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
16
"RTN","PSSDSFDB")
0^12^B37836695
"RTN","PSSDSFDB",1,0)
PSSDSFDB ;WOIFO/Steve Gordon - Allows for a user to disable FDB interface during an FDB update ;03/17/09
"RTN","PSSDSFDB",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSDSFDB",3,0)
 ;
"RTN","PSSDSFDB",4,0)
 ;
"RTN","PSSDSFDB",5,0)
EN ;driver
"RTN","PSSDSFDB",6,0)
 ; Called from PSS ENABLE/DISABLE DB LINK option
"RTN","PSSDSFDB",7,0)
 ;
"RTN","PSSDSFDB",8,0)
 I '$G(DUZ) D DUZMSG Q  ;if no DUZ, cannot continue
"RTN","PSSDSFDB",9,0)
 N OLDVAL
"RTN","PSSDSFDB",10,0)
 ;get original value, if one exists
"RTN","PSSDSFDB",11,0)
 S OLDVAL=+$G(^PS(59.73,1,0))
"RTN","PSSDSFDB",12,0)
 Q:'$$LOCK()  ;lock file
"RTN","PSSDSFDB",13,0)
 D
"RTN","PSSDSFDB",14,0)
 .;if no entry create new one
"RTN","PSSDSFDB",15,0)
 .I '$D(^PS(59.73,1,0)) D NEW
"RTN","PSSDSFDB",16,0)
 .Q:'$$QSTION(OLDVAL)
"RTN","PSSDSFDB",17,0)
 .D CHANGE('OLDVAL)
"RTN","PSSDSFDB",18,0)
 .;if the connection is turned on, check for link 
"RTN","PSSDSFDB",19,0)
 .I OLDVAL'=0,+$G(^PS(59.73,1,0))=0 D  Q
"RTN","PSSDSFDB",20,0)
 ..N BASE
"RTN","PSSDSFDB",21,0)
 ..S BASE="PSPRE"
"RTN","PSSDSFDB",22,0)
 ..D PING^PSSHRIT(BASE)
"RTN","PSSDSFDB",23,0)
 ..I $G(^TMP($J,BASE,"OUT",0))=0 W !!,"Connected to Vendor database successfully."
"RTN","PSSDSFDB",24,0)
 ..E  W !!,"Connection could not be made to Vendor database."
"RTN","PSSDSFDB",25,0)
 ..K ^TMP($J,BASE)
"RTN","PSSDSFDB",26,0)
 ;
"RTN","PSSDSFDB",27,0)
 D PRSRTN
"RTN","PSSDSFDB",28,0)
 D UNLOCK
"RTN","PSSDSFDB",29,0)
 Q
"RTN","PSSDSFDB",30,0)
 ;
"RTN","PSSDSFDB",31,0)
DUZMSG ;
"RTN","PSSDSFDB",32,0)
 ;
"RTN","PSSDSFDB",33,0)
 ;Writes a message that a DUZ is required
"RTN","PSSDSFDB",34,0)
 W !,"You are not logged into the system."
"RTN","PSSDSFDB",35,0)
 W !,"This option requires a DUZ (user ID) to be defined!"
"RTN","PSSDSFDB",36,0)
 D PRSRTN
"RTN","PSSDSFDB",37,0)
 Q
"RTN","PSSDSFDB",38,0)
 ;
"RTN","PSSDSFDB",39,0)
QSTION(OLDVAL) ;
"RTN","PSSDSFDB",40,0)
 ;input: OLDVAL-original value of the .01 field of 59.73
"RTN","PSSDSFDB",41,0)
 ;output-response to verification question (1 for yes, 0 for no)
"RTN","PSSDSFDB",42,0)
 N NEWSTAT,FINAL,CURSTAT,ENFLAG
"RTN","PSSDSFDB",43,0)
 K DIR,Y
"RTN","PSSDSFDB",44,0)
 S FINAL=0  ;DEFAULT AS NO
"RTN","PSSDSFDB",45,0)
 S NEWSTAT=$S(OLDVAL:"ENABLE",1:"DISABLE")
"RTN","PSSDSFDB",46,0)
 S CURSTAT=$S(OLDVAL:"DISABLE",1:"ENABLE")
"RTN","PSSDSFDB",47,0)
 S ENFLAG=$S(CURSTAT="ENABLE":1,1:0)
"RTN","PSSDSFDB",48,0)
 D HELP(.DIR)
"RTN","PSSDSFDB",49,0)
 D
"RTN","PSSDSFDB",50,0)
 .I 'OLDVAL D DISMSG(.DIR) Q
"RTN","PSSDSFDB",51,0)
 .D ENMSG(.DIR)
"RTN","PSSDSFDB",52,0)
 S DIR(0)="Y^A"
"RTN","PSSDSFDB",53,0)
 S DIR("B")=$S(ENFLAG:"NO",1:"YES")
"RTN","PSSDSFDB",54,0)
 D ^DIR
"RTN","PSSDSFDB",55,0)
 D
"RTN","PSSDSFDB",56,0)
 .I $G(Y),ENFLAG S FINAL=$$ASK(NEWSTAT) Q
"RTN","PSSDSFDB",57,0)
 .I 'ENFLAG S FINAL=+Y
"RTN","PSSDSFDB",58,0)
 D
"RTN","PSSDSFDB",59,0)
 .I ENFLAG D  Q
"RTN","PSSDSFDB",60,0)
 ..I $G(FINAL) D
"RTN","PSSDSFDB",61,0)
 ...W !!,?5,"Vendor database connection "_NEWSTAT_"D"_"."
"RTN","PSSDSFDB",62,0)
 ...I NEWSTAT="DISABLE" D
"RTN","PSSDSFDB",63,0)
 ....W !!,"REMEMBER to ENABLE the Vendor database connection AFTER task completed."
"RTN","PSSDSFDB",64,0)
 ..I '$G(FINAL) W !!,?5,"The connection to the Vendor database remains ENABLED."
"RTN","PSSDSFDB",65,0)
 .I 'ENFLAG D  Q
"RTN","PSSDSFDB",66,0)
 ..;I FINAL W !!,"Vendor database connection reestablished." Q
"RTN","PSSDSFDB",67,0)
 ..I FINAL W !!,"Vendor database connection enabled." Q
"RTN","PSSDSFDB",68,0)
 ..I 'FINAL D
"RTN","PSSDSFDB",69,0)
 ...W !!,"   WARNING! The connection to the Vendor Database remains DISABLED"
"RTN","PSSDSFDB",70,0)
 ...I $T(DS^PSSDSAPI)]"",$$DS^PSSDSAPI() W !!,"NO Drug-Drug Interactions, Duplicate Therapy or Dosing Order Checks will be"
"RTN","PSSDSFDB",71,0)
 ...E  W !!,"NO Drug-Drug Interactions or Duplicate Therapy Checks will be"
"RTN","PSSDSFDB",72,0)
 ...W !,"performed while the connection is disabled!!!"
"RTN","PSSDSFDB",73,0)
 Q FINAL
"RTN","PSSDSFDB",74,0)
 ;
"RTN","PSSDSFDB",75,0)
ASK(NEWSTAT) ;
"RTN","PSSDSFDB",76,0)
 ;
"RTN","PSSDSFDB",77,0)
 ;input: NEWSTAT-Either ENABLE or DISABLE
"RTN","PSSDSFDB",78,0)
 ;output: Either 1 or 0 for yes or no
"RTN","PSSDSFDB",79,0)
 K DIR,Y
"RTN","PSSDSFDB",80,0)
 S DIR(0)="Y^A"
"RTN","PSSDSFDB",81,0)
 S DIR("B")="NO"
"RTN","PSSDSFDB",82,0)
 I $T(DS^PSSDSAPI)]"",$$DS^PSSDSAPI() S DIR("A",1)="NO Drug-Drug Interactions, Duplicate Therapy or Dosing Order Checks"
"RTN","PSSDSFDB",83,0)
 E  S DIR("A",1)="NO Drug-Drug Interactions or Duplicate Therapy Order Checks"
"RTN","PSSDSFDB",84,0)
 S DIR("A",2)="will be performed while the connection is disabled!!!"
"RTN","PSSDSFDB",85,0)
 S DIR("A",3)=" "
"RTN","PSSDSFDB",86,0)
 S DIR("A")="Are you sure you want to "_NEWSTAT_" the connection to the Vendor Database"
"RTN","PSSDSFDB",87,0)
 D ^DIR
"RTN","PSSDSFDB",88,0)
 Q Y
"RTN","PSSDSFDB",89,0)
 ;
"RTN","PSSDSFDB",90,0)
DISMSG(DIR) ;
"RTN","PSSDSFDB",91,0)
 ;input: DIR Array
"RTN","PSSDSFDB",92,0)
 ;output: sets up DIR message array
"RTN","PSSDSFDB",93,0)
 S DIR("A",1)="The connection to the Vendor database is currently ENABLED."
"RTN","PSSDSFDB",94,0)
 S DIR("A",2)=" "
"RTN","PSSDSFDB",95,0)
 ;S DIR("A",3)="NO Drug-Drug Interactions, Duplicate Therapy or Dosing Order Checks"
"RTN","PSSDSFDB",96,0)
 ;S DIR("A",4)="will be performed while the connection is disabled!!"
"RTN","PSSDSFDB",97,0)
 S DIR("A",3)=""
"RTN","PSSDSFDB",98,0)
 S DIR("A")="Do you wish to DISABLE the connection to the Vendor database"
"RTN","PSSDSFDB",99,0)
 ;
"RTN","PSSDSFDB",100,0)
ENMSG(DIR) ;
"RTN","PSSDSFDB",101,0)
 ;;input: DIR Array
"RTN","PSSDSFDB",102,0)
 ;output: sets up DIR message array
"RTN","PSSDSFDB",103,0)
 S DIR("A",1)="    WARNING! The connection to the Vendor database is currently DISABLED."
"RTN","PSSDSFDB",104,0)
 S DIR("A",2)=" "
"RTN","PSSDSFDB",105,0)
 I $T(DS^PSSDSAPI)]"",$$DS^PSSDSAPI() S DIR("A",3)="NO Drug-Drug Interactions, Duplicate Therapy or Dosing Order Checks"
"RTN","PSSDSFDB",106,0)
 E  S DIR("A",3)="NO Drug-Drug Interactions or Duplicate Therapy Order Checks"
"RTN","PSSDSFDB",107,0)
 S DIR("A",4)="will be performed while the connection is disabled!!!"
"RTN","PSSDSFDB",108,0)
 S DIR("A",5)=" "
"RTN","PSSDSFDB",109,0)
 S DIR("A")="Do you wish to ENABLE the Vendor database connection"
"RTN","PSSDSFDB",110,0)
 ;
"RTN","PSSDSFDB",111,0)
NEW ;
"RTN","PSSDSFDB",112,0)
 ;There will only be one entry at the top level
"RTN","PSSDSFDB",113,0)
 N DINUM,DIC,DO,X
"RTN","PSSDSFDB",114,0)
 K D0
"RTN","PSSDSFDB",115,0)
 S DINUM=1,X=0,DIC="^PS(59.73,",DIC(0)="Z" D FILE^DICN
"RTN","PSSDSFDB",116,0)
 Q
"RTN","PSSDSFDB",117,0)
 ;
"RTN","PSSDSFDB",118,0)
CHANGE(NEWVAL) ;
"RTN","PSSDSFDB",119,0)
 ;edit flag once it is created.
"RTN","PSSDSFDB",120,0)
 N DIE,DR,DA
"RTN","PSSDSFDB",121,0)
 S DA=1
"RTN","PSSDSFDB",122,0)
 S DIE="^PS(59.73,",DR=".01///^S X=NEWVAL"
"RTN","PSSDSFDB",123,0)
 D ^DIE
"RTN","PSSDSFDB",124,0)
 D ACT(NEWVAL)
"RTN","PSSDSFDB",125,0)
 Q
"RTN","PSSDSFDB",126,0)
ACT(NEWVAL) ;
"RTN","PSSDSFDB",127,0)
 ;creates an activity log whenever FDB flag is reset to a new value
"RTN","PSSDSFDB",128,0)
 ;
"RTN","PSSDSFDB",129,0)
 N DIC,DA,X,ACTION,DIE,DO,DR
"RTN","PSSDSFDB",130,0)
 S DIC="^PS(59.73,1,1,",DIC(0)="L",DA(1)=1
"RTN","PSSDSFDB",131,0)
 S X=$$GETNOW()
"RTN","PSSDSFDB",132,0)
 D FILE^DICN
"RTN","PSSDSFDB",133,0)
 S ACTION=$S(NEWVAL:"D",1:"E")
"RTN","PSSDSFDB",134,0)
 S DIE="^PS(59.73,1,1,",DA=+Y,DR="1///^S X=+DUZ;2///^S X=ACTION"
"RTN","PSSDSFDB",135,0)
 D ^DIE
"RTN","PSSDSFDB",136,0)
 Q
"RTN","PSSDSFDB",137,0)
 ;
"RTN","PSSDSFDB",138,0)
GETNOW() ;
"RTN","PSSDSFDB",139,0)
 N PSNOW
"RTN","PSSDSFDB",140,0)
 D NOW^%DTC
"RTN","PSSDSFDB",141,0)
 S PSNOW=% K %
"RTN","PSSDSFDB",142,0)
 Q PSNOW
"RTN","PSSDSFDB",143,0)
 ;
"RTN","PSSDSFDB",144,0)
LOCK() ;
"RTN","PSSDSFDB",145,0)
 ;locks 59.73 file
"RTN","PSSDSFDB",146,0)
 N LOCKED
"RTN","PSSDSFDB",147,0)
 S LOCKED=1   ;SUCCESSFUL
"RTN","PSSDSFDB",148,0)
 D
"RTN","PSSDSFDB",149,0)
 .L +^PS(59.73,0):0
"RTN","PSSDSFDB",150,0)
 .Q:$T
"RTN","PSSDSFDB",151,0)
 .W !,"Another terminal is modifying this field!"
"RTN","PSSDSFDB",152,0)
 .S LOCKED=0
"RTN","PSSDSFDB",153,0)
 Q LOCKED
"RTN","PSSDSFDB",154,0)
UNLOCK ;
"RTN","PSSDSFDB",155,0)
 L -^PS(59.73,0)
"RTN","PSSDSFDB",156,0)
 Q
"RTN","PSSDSFDB",157,0)
 ;
"RTN","PSSDSFDB",158,0)
HELP(DIR) ;
"RTN","PSSDSFDB",159,0)
 ;Returns array of help for DIR call
"RTN","PSSDSFDB",160,0)
 I $T(DS^PSSDSAPI)]"",$$DS^PSSDSAPI()  S DIR("?")="Enter either 'Y' or 'N'.  No Drug-Drug Interactions, Duplicate Therapy or Dosing Order Checks will be performed while the connection is disabled!!!"
"RTN","PSSDSFDB",161,0)
 E  S DIR("?")="Enter either 'Y' or 'N'.  No Drug-Drug Interactions or Duplicate Therapy Order Checks will be performed while the connection is disabled!!!"
"RTN","PSSDSFDB",162,0)
 Q
"RTN","PSSDSFDB",163,0)
CHKSTAT() ;
"RTN","PSSDSFDB",164,0)
 ; Called from IN^PSSHRQ2 routine
"RTN","PSSDSFDB",165,0)
 ;RETURNS A -1 if FDB is disabled and 0 if enabled
"RTN","PSSDSFDB",166,0)
 ;along with a standard message in PSSHRVL1
"RTN","PSSDSFDB",167,0)
 N STAT
"RTN","PSSDSFDB",168,0)
 S STAT=+$G(^PS(59.73,1,0))*-1  ;Returns either -1 or 0
"RTN","PSSDSFDB",169,0)
 I STAT S STAT=STAT_U_$$STATMSG^PSSHRVL1()
"RTN","PSSDSFDB",170,0)
 Q STAT
"RTN","PSSDSFDB",171,0)
 ;
"RTN","PSSDSFDB",172,0)
PRSRTN ;
"RTN","PSSDSFDB",173,0)
 ;calls std routine to ask user to hit return 
"RTN","PSSDSFDB",174,0)
 K DIR S DIR(0)="E" S DIR("A")="Press Return to Continue" D ^DIR
"RTN","PSSDSFDB",175,0)
 Q
"RTN","PSSFDBRT")
0^16^B52400714
"RTN","PSSFDBRT",1,0)
PSSFDBRT ;WOIFO/Parviz Ostovari - Sends XML Request to PEPS via HWSC ;09/20/07
"RTN","PSSFDBRT",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSFDBRT",3,0)
 ;
"RTN","PSSFDBRT",4,0)
 ;
"RTN","PSSFDBRT",5,0)
 ; this code is copied and modified from PSZZDI routine.
"RTN","PSSFDBRT",6,0)
 ; this routine is responsible for performing drug information queries against a drug database.
"RTN","PSSFDBRT",7,0)
 ; the architecture parses the XML stream into tokens
"RTN","PSSFDBRT",8,0)
 ;
"RTN","PSSFDBRT",9,0)
 Q
"RTN","PSSFDBRT",10,0)
GROUTE(PSSIEN,PSSOUT) ; get the routes for given drug ien in drug file from PESPS via HWSC
"RTN","PSSFDBRT",11,0)
 ;  input: drug IEN from drug file (#50)
"RTN","PSSFDBRT",12,0)
 ; output: PSSOUT - array containing the list of route names for the given drug.
"RTN","PSSFDBRT",13,0)
 ;             e.g. PSSOUT("CONTINUOUS INFUSION")=""
"RTN","PSSFDBRT",14,0)
 ;                  PSSOUT("INTRAOSSEOUS")=""
"RTN","PSSFDBRT",15,0)
 ;  if for any reason can not get the route, it kills the PSSOUT
"RTN","PSSFDBRT",16,0)
 ;
"RTN","PSSFDBRT",17,0)
 N PSSXML,GCNSEQ
"RTN","PSSFDBRT",18,0)
 K PSSOUT
"RTN","PSSFDBRT",19,0)
 S GCNSEQ=$$DRUGGCN(PSSIEN)    ; get the GCN sequence number.
"RTN","PSSFDBRT",20,0)
 Q:GCNSEQ=0                  ; no GCN sequence number
"RTN","PSSFDBRT",21,0)
 S PSSXML=$$BLDXML(GCNSEQ)   ; build the xml request
"RTN","PSSFDBRT",22,0)
 D POST(PSSXML,.PSSOUT)    ; post the request and process the results
"RTN","PSSFDBRT",23,0)
 Q
"RTN","PSSFDBRT",24,0)
 ;
"RTN","PSSFDBRT",25,0)
DRUGGCN(DRGIEN) ; for given drug ien return the GCN sequence number.
"RTN","PSSFDBRT",26,0)
 ;  input: drug IEN from drug file (#50)
"RTN","PSSFDBRT",27,0)
 ; output: returns the GCN sequence number
"RTN","PSSFDBRT",28,0)
 ;
"RTN","PSSFDBRT",29,0)
 N GCN,VAPROD
"RTN","PSSFDBRT",30,0)
 S GCN=0  ; default
"RTN","PSSFDBRT",31,0)
 D
"RTN","PSSFDBRT",32,0)
 .S VAPROD=$P($G(^PSDRUG(+DRGIEN,"ND")),U,3) Q:'VAPROD
"RTN","PSSFDBRT",33,0)
 .S GCN=+$P($G(^PSNDF(50.68,+VAPROD,1)),U,5)
"RTN","PSSFDBRT",34,0)
 Q GCN
"RTN","PSSFDBRT",35,0)
 ;
"RTN","PSSFDBRT",36,0)
BLDXML(GCNSEQ) ; build and return the XML request with drug information for given GCN sequence number
"RTN","PSSFDBRT",37,0)
 ;  input: drug IEN from drug file (#50)
"RTN","PSSFDBRT",38,0)
 ; output: returns the XML request for given GCN sequence number
"RTN","PSSFDBRT",39,0)
 ;
"RTN","PSSFDBRT",40,0)
 N PSSXML,DRUGIEN,DRUGTAG,ENDTAG
"RTN","PSSFDBRT",41,0)
 S PSSXML=""
"RTN","PSSFDBRT",42,0)
 D GETHEAD(.PSSXML)
"RTN","PSSFDBRT",43,0)
 D GETREQ(.PSSXML)
"RTN","PSSFDBRT",44,0)
 S DRUGTAG="<drug "
"RTN","PSSFDBRT",45,0)
 S ENDTAG="/>"
"RTN","PSSFDBRT",46,0)
 S PSSXML=PSSXML_DRUGTAG_$$ATRIBUTE^PSSHRCOM("gcnSeqNo",GCNSEQ)_ENDTAG
"RTN","PSSFDBRT",47,0)
 D ENDREQ(.PSSXML)
"RTN","PSSFDBRT",48,0)
 Q PSSXML
"RTN","PSSFDBRT",49,0)
 ;
"RTN","PSSFDBRT",50,0)
POST(XML,PSSOUT) ; post the XML request to PEPS server and return the routes
"RTN","PSSFDBRT",51,0)
 ;  input: XML request
"RTN","PSSFDBRT",52,0)
 ; output: PSSOUT - array containing the list of route names for the given drug.
"RTN","PSSFDBRT",53,0)
 ;
"RTN","PSSFDBRT",54,0)
 N PSS,PSSERR
"RTN","PSSFDBRT",55,0)
 N $ETRAP,$ESTACK
"RTN","PSSFDBRT",56,0)
 ; Set error trap
"RTN","PSSFDBRT",57,0)
 SET $ETRAP="DO ERROR^PSSHTTP"
"RTN","PSSFDBRT",58,0)
 K ^TMP($J,"OUT")    ; if exists from previous runs, posting would not execute.
"RTN","PSSFDBRT",59,0)
 ;
"RTN","PSSFDBRT",60,0)
 SET PSS("server")="PEPS"
"RTN","PSSFDBRT",61,0)
 SET PSS("webserviceName")="DRUG_INFO"
"RTN","PSSFDBRT",62,0)
 SET PSS("path")="druginfo"
"RTN","PSSFDBRT",63,0)
 SET PSS("parameterName")="xmlRequest"
"RTN","PSSFDBRT",64,0)
 SET PSS("parameterValue")=XML
"RTN","PSSFDBRT",65,0)
 ;
"RTN","PSSFDBRT",66,0)
 ; get instance of client REST request object
"RTN","PSSFDBRT",67,0)
 SET PSS("restObject")=$$GETREST^XOBWLIB(PSS("webserviceName"),PSS("server"))
"RTN","PSSFDBRT",68,0)
 IF $DATA(^TMP($JOB,"OUT","EXCEPTION"))>0 QUIT 0
"RTN","PSSFDBRT",69,0)
 ;
"RTN","PSSFDBRT",70,0)
 ; insert XML as parameter
"RTN","PSSFDBRT",71,0)
 DO PSS("restObject").InsertFormData(PSS("parameterName"),PSS("parameterValue"))
"RTN","PSSFDBRT",72,0)
 IF $DATA(^TMP($JOB,"OUT","EXCEPTION"))>0 QUIT 0
"RTN","PSSFDBRT",73,0)
 ;
"RTN","PSSFDBRT",74,0)
 ; execute HTTP Post method
"RTN","PSSFDBRT",75,0)
 SET PSS("postResult")=$$POST^XOBWLIB(PSS("restObject"),PSS("path"),.PSSERR)
"RTN","PSSFDBRT",76,0)
 IF $DATA(^TMP($JOB,"OUT","EXCEPTION"))>0 QUIT 0
"RTN","PSSFDBRT",77,0)
 ;
"RTN","PSSFDBRT",78,0)
 DO:'PSS("postResult")
"RTN","PSSFDBRT",79,0)
 . SET ^TMP($JOB,"OUT","EXCEPTION")=-1_U_"Unable to make http request."
"RTN","PSSFDBRT",80,0)
 . SET PSS("result")=0
"RTN","PSSFDBRT",81,0)
 . QUIT
"RTN","PSSFDBRT",82,0)
 ;
"RTN","PSSFDBRT",83,0)
 ; if every thing is ok parse the returned xml result
"RTN","PSSFDBRT",84,0)
 I PSS("postResult") S PSS("result")=1 D PRSSTRM(PSS("restObject"),.PSSOUT)
"RTN","PSSFDBRT",85,0)
 Q PSS("result")
"RTN","PSSFDBRT",86,0)
 ;
"RTN","PSSFDBRT",87,0)
PRSSTRM(RESTOBJ,PSSOUT) ;  parse the XML into token
"RTN","PSSFDBRT",88,0)
 ;  input: RESTOBJ--a rest object
"RTN","PSSFDBRT",89,0)
 ; output: PSSOUT - array containing the list of route names for the given drug.
"RTN","PSSFDBRT",90,0)
 ;
"RTN","PSSFDBRT",91,0)
 ; parse the XML into tokens. the first part of the token is the type of node being read.
"RTN","PSSFDBRT",92,0)
 ; the second part is the data--either the name of the node, or data. these fields are delimited using "<>".
"RTN","PSSFDBRT",93,0)
 ; if the node is type attribute, each attribute is separated by a caret ("^").
"RTN","PSSFDBRT",94,0)
 ;
"RTN","PSSFDBRT",95,0)
 N AREADER
"RTN","PSSFDBRT",96,0)
 S AREADER=$$GETREADR(RESTOBJ)
"RTN","PSSFDBRT",97,0)
 D PARSXML(AREADER,.PSSOUT)
"RTN","PSSFDBRT",98,0)
 Q
"RTN","PSSFDBRT",99,0)
 ;
"RTN","PSSFDBRT",100,0)
PARSXML(AREADER,PSSOUT) ; extract the list of routes from XML results
"RTN","PSSFDBRT",101,0)
 ;  input: AREADER-%XML.TextReader object.
"RTN","PSSFDBRT",102,0)
 ; output: PSSOUT - array containing the list of route names for the given drug.
"RTN","PSSFDBRT",103,0)
 ;
"RTN","PSSFDBRT",104,0)
 N ATOKEN,NODETYPE,GCNSEQ
"RTN","PSSFDBRT",105,0)
 F  D  Q:AREADER.EOF
"RTN","PSSFDBRT",106,0)
 .S ATOKEN=$$GETTOKEN(AREADER)
"RTN","PSSFDBRT",107,0)
 .I '$L(ATOKEN) Q
"RTN","PSSFDBRT",108,0)
 .S NODETYPE=$P(ATOKEN,"<>"),ATOKEN=$P(ATOKEN,"<>",2)
"RTN","PSSFDBRT",109,0)
 .I NODETYPE["exception" Q
"RTN","PSSFDBRT",110,0)
 .I NODETYPE["drugNotFound" Q  ; nodrug tag
"RTN","PSSFDBRT",111,0)
 .; inside drug attributes
"RTN","PSSFDBRT",112,0)
 .I NODETYPE["drug",ATOKEN["gcnSeqNo" S GCNSEQ=$P(ATOKEN,"=",2)
"RTN","PSSFDBRT",113,0)
 .; if routes token get list of the routes
"RTN","PSSFDBRT",114,0)
 .I ATOKEN="routes",$G(GCNSEQ) D ROUTES(AREADER,GCNSEQ,.PSSOUT)
"RTN","PSSFDBRT",115,0)
 .I ATOKEN="/drug" S GCNSEQ=0
"RTN","PSSFDBRT",116,0)
 Q
"RTN","PSSFDBRT",117,0)
ROUTES(AREADER,GCN,PSSOUT) ; extract list of routes
"RTN","PSSFDBRT",118,0)
 ;  input: AREADER-%XML.TextReader object
"RTN","PSSFDBRT",119,0)
 ;         GCN - GCN sequence number from FDB
"RTN","PSSFDBRT",120,0)
 ; output: PSSOUT - array containing the list of route names for the given drug.
"RTN","PSSFDBRT",121,0)
 ;
"RTN","PSSFDBRT",122,0)
 N ROUTEID,ID,TOKEN,TYPE,ROUTNM
"RTN","PSSFDBRT",123,0)
 F  D  Q:TOKEN="/routes"
"RTN","PSSFDBRT",124,0)
 .S TOKEN=$$GETTOKEN(AREADER)
"RTN","PSSFDBRT",125,0)
 .S TYPE=$P(TOKEN,"<>"),TOKEN=$P(TOKEN,"<>",2)
"RTN","PSSFDBRT",126,0)
 .Q:'$L(TOKEN)
"RTN","PSSFDBRT",127,0)
 .I TOKEN="id" D  Q
"RTN","PSSFDBRT",128,0)
 ..S TOKEN=$$GETTOKEN(AREADER)
"RTN","PSSFDBRT",129,0)
 ..S ROUTEID=$P(TOKEN,"<>",2)
"RTN","PSSFDBRT",130,0)
 .I TOKEN="name" S TOKEN=$$GETTOKEN(AREADER) D
"RTN","PSSFDBRT",131,0)
 ..;S PSSOUT(GCN,ROUTEID)=$P(TOKEN,"<>",2)
"RTN","PSSFDBRT",132,0)
 ..S ROUTNM=$P(TOKEN,"<>",2)
"RTN","PSSFDBRT",133,0)
 ..S:$L(ROUTNM)>0 PSSOUT(ROUTNM)=""
"RTN","PSSFDBRT",134,0)
 Q
"RTN","PSSFDBRT",135,0)
 ;
"RTN","PSSFDBRT",136,0)
GETREADR(RESTOBJ) ; set up and return a Textreader object to be used to parse the XML stream
"RTN","PSSFDBRT",137,0)
 ;  input: RESTOBJ-  REST object
"RTN","PSSFDBRT",138,0)
 ; output: returns a %XML.TextReader object.
"RTN","PSSFDBRT",139,0)
 ;
"RTN","PSSFDBRT",140,0)
 N AREADER
"RTN","PSSFDBRT",141,0)
 S AREADER=##class(%XML.TextReader).%New("%XML.TextReader")
"RTN","PSSFDBRT",142,0)
 D ##class(%XML.TextReader).ParseStream(RESTOBJ.HttpResponse.Data,.AREADER)
"RTN","PSSFDBRT",143,0)
 Q AREADER
"RTN","PSSFDBRT",144,0)
 ;
"RTN","PSSFDBRT",145,0)
GETTOKEN(READER) ; get a token at a time
"RTN","PSSFDBRT",146,0)
 ;  input: AREADER-%XML.TextReader object
"RTN","PSSFDBRT",147,0)
 ; Output: returns a token
"RTN","PSSFDBRT",148,0)
 ;
"RTN","PSSFDBRT",149,0)
 ;   this is the key to the parsing of the XML stream.
"RTN","PSSFDBRT",150,0)
 ;   each element is parsed with its associated data (if any)
"RTN","PSSFDBRT",151,0)
 ;   the nodetype is concatenated with "<>" with the Token
"RTN","PSSFDBRT",152,0)
 ;   which can be the tag or the data.
"RTN","PSSFDBRT",153,0)
 ;   for example each time is called return one of the following:
"RTN","PSSFDBRT",154,0)
 ;     . . .
"RTN","PSSFDBRT",155,0)
 ;     . . .
"RTN","PSSFDBRT",156,0)
 ;     drug(attributes)<>gcnSeqNo=17240
"RTN","PSSFDBRT",157,0)
 ;     element<>routes
"RTN","PSSFDBRT",158,0)
 ;     element<>route
"RTN","PSSFDBRT",159,0)
 ;     element<>id
"RTN","PSSFDBRT",160,0)
 ;     chars<>006
"RTN","PSSFDBRT",161,0)
 ;     endelement<>/id
"RTN","PSSFDBRT",162,0)
 ;     element<>name
"RTN","PSSFDBRT",163,0)
 ;     chars<>CONTINUOUS INFUSION
"RTN","PSSFDBRT",164,0)
 ;     endelement<>/name
"RTN","PSSFDBRT",165,0)
 ;     endelement<>/route
"RTN","PSSFDBRT",166,0)
 ;     . . .
"RTN","PSSFDBRT",167,0)
 ;     . . .
"RTN","PSSFDBRT",168,0)
 ;
"RTN","PSSFDBRT",169,0)
 N TOKEN,NODETYPE,SUBTOKEN,ALLTOKEN
"RTN","PSSFDBRT",170,0)
 S TOKEN="",SUBTOKEN="",NODETYPE="",ALLTOKEN=""
"RTN","PSSFDBRT",171,0)
 D
"RTN","PSSFDBRT",172,0)
 .Q:READER.EOF
"RTN","PSSFDBRT",173,0)
 .D READER.Read()  ; go to first node
"RTN","PSSFDBRT",174,0)
 .Q:READER.EOF     ; try before and after read
"RTN","PSSFDBRT",175,0)
 .;W !,READER.NodeTypeGet()
"RTN","PSSFDBRT",176,0)
 .;S NODETYPE=READER.NodeTypeGet()
"RTN","PSSFDBRT",177,0)
 .I READER.HasAttributes D
"RTN","PSSFDBRT",178,0)
 ..S NODETYPE=READER.Name_"(attributes)"
"RTN","PSSFDBRT",179,0)
 ..S TOKEN=$$GETATTS(READER)
"RTN","PSSFDBRT",180,0)
 .I '$L(TOKEN) S NODETYPE=READER.NodeTypeGet() D
"RTN","PSSFDBRT",181,0)
 ..I NODETYPE="element" S TOKEN=READER.Name Q
"RTN","PSSFDBRT",182,0)
 ..I NODETYPE="chars" S TOKEN=READER.Value Q
"RTN","PSSFDBRT",183,0)
 ..I NODETYPE="endelement" S TOKEN="/"_READER.Name Q
"RTN","PSSFDBRT",184,0)
 ..I NODETYPE="comment" S TOKEN="^"
"RTN","PSSFDBRT",185,0)
 ..I NODETYPE="processinginstruction" S TOKEN=READER.Value Q
"RTN","PSSFDBRT",186,0)
 ..I NODETYPE="ignorablewhitespace" S TOKEN="^" Q
"RTN","PSSFDBRT",187,0)
 ..I NODETYPE="startprefixmapping" S TOKEN=READER.Value Q
"RTN","PSSFDBRT",188,0)
 ..I NODETYPE="warning" S TOKEN=READER.Value Q
"RTN","PSSFDBRT",189,0)
 ..I '$L(TOKEN) S TOKEN="^"
"RTN","PSSFDBRT",190,0)
 ..;
"RTN","PSSFDBRT",191,0)
 .I $L(NODETYPE) S ALLTOKEN=NODETYPE_"<>"_TOKEN
"RTN","PSSFDBRT",192,0)
 ;W !,"TOKEN="_ALLTOKEN
"RTN","PSSFDBRT",193,0)
 Q ALLTOKEN
"RTN","PSSFDBRT",194,0)
 ;
"RTN","PSSFDBRT",195,0)
GETATTS(AREADER) ; get attributes
"RTN","PSSFDBRT",196,0)
 ;  input: AREADER-%XML.TextReader object
"RTN","PSSFDBRT",197,0)
 ; Output: returns the attributes
"RTN","PSSFDBRT",198,0)
 ;
"RTN","PSSFDBRT",199,0)
 N I,INDEX,TOKEN,SUBTOKEN,ATTRB
"RTN","PSSFDBRT",200,0)
 S (TOKEN,SUBTOKEN)=""
"RTN","PSSFDBRT",201,0)
 S INDEX=AREADER.AttributeCountGet()
"RTN","PSSFDBRT",202,0)
 FOR I=1:1:INDEX D
"RTN","PSSFDBRT",203,0)
 .S ATTRB=AREADER.MoveToAttributeIndex(I) D
"RTN","PSSFDBRT",204,0)
 .S SUBTOKEN=AREADER.Name_"="_AREADER.Value
"RTN","PSSFDBRT",205,0)
 .I '$L(TOKEN) S TOKEN=SUBTOKEN Q
"RTN","PSSFDBRT",206,0)
 .S TOKEN=TOKEN_"^"_SUBTOKEN
"RTN","PSSFDBRT",207,0)
 ;W !,"  ATT=",TOKEN
"RTN","PSSFDBRT",208,0)
 Q TOKEN
"RTN","PSSFDBRT",209,0)
 ;
"RTN","PSSFDBRT",210,0)
GETHEAD(PSSXML) ;  return <?xml version="1.0" encoding="utf-8" ?>
"RTN","PSSFDBRT",211,0)
 ;  input: PSSXML string (by ref)
"RTN","PSSFDBRT",212,0)
 ; output: returns the XML header info string
"RTN","PSSFDBRT",213,0)
 ;
"RTN","PSSFDBRT",214,0)
 ;xml header info
"RTN","PSSFDBRT",215,0)
 S PSSXML=PSSXML_$$XMLHDR^MXMLUTL
"RTN","PSSFDBRT",216,0)
 Q
"RTN","PSSFDBRT",217,0)
 ;
"RTN","PSSFDBRT",218,0)
GETREQ(PSSXML) ; build and return the <drugInfoRequest... portion of XML request.
"RTN","PSSFDBRT",219,0)
 ;  input: PSSXML string (by ref)
"RTN","PSSFDBRT",220,0)
 ; output: returns the XML string. for example:
"RTN","PSSFDBRT",221,0)
 ;      <drugInfoRequest  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
"RTN","PSSFDBRT",222,0)
 ;       xsi:schemaLocation="gov/va/med/pharmacy/peps/external/common/preencapsulation/vo/drug/info/request
"RTN","PSSFDBRT",223,0)
 ;       drugInfoSchemaInput.xsd" xmlns="gov/va/med/pharmacy/peps/external/common/preencapsulation/vo/drug/info/request">
"RTN","PSSFDBRT",224,0)
 ;
"RTN","PSSFDBRT",225,0)
 N TAG,SUBXML,SCHEMA,XMLNS,SPACE
"RTN","PSSFDBRT",226,0)
 S SPACE=$C(32)
"RTN","PSSFDBRT",227,0)
 S SCHEMA="gov/va/med/pharmacy/peps/external/common/preencapsulation/vo/drug/info/request drugInfoSchemaInput.xsd"
"RTN","PSSFDBRT",228,0)
 S XMLNS="gov/va/med/pharmacy/peps/external/common/preencapsulation/vo/drug/info/request"
"RTN","PSSFDBRT",229,0)
 S TAG="<drugInfoRequest"_SPACE
"RTN","PSSFDBRT",230,0)
 S SUBXML=TAG
"RTN","PSSFDBRT",231,0)
 ;S SUBXML=SUBXML_$$ATRIBUTE^PSSHRCOM("xmlns",XMLNS
"RTN","PSSFDBRT",232,0)
 S SUBXML=SUBXML_$$ATRIBUTE^PSSHRCOM(SPACE_"xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance")
"RTN","PSSFDBRT",233,0)
 S SUBXML=SUBXML_$$ATRIBUTE^PSSHRCOM(SPACE_"xsi:schemaLocation",SCHEMA)
"RTN","PSSFDBRT",234,0)
 S SUBXML=SUBXML_$$ATRIBUTE^PSSHRCOM(SPACE_"xmlns",XMLNS)
"RTN","PSSFDBRT",235,0)
 S PSSXML=PSSXML_SUBXML_">"
"RTN","PSSFDBRT",236,0)
 Q
"RTN","PSSFDBRT",237,0)
 ;
"RTN","PSSFDBRT",238,0)
ENDREQ(PSSXML) ; return the end tag </drugInfoRequest> portion of XML request
"RTN","PSSFDBRT",239,0)
 ;  input: PSSXML string (by ref)
"RTN","PSSFDBRT",240,0)
 ; output: returns the XML string
"RTN","PSSFDBRT",241,0)
 S PSSXML=PSSXML_"</drugInfoRequest>"
"RTN","PSSFDBRT",242,0)
 Q
"RTN","PSSFDBRT",243,0)
 ;
"RTN","PSSHFREQ")
0^1^B27105352
"RTN","PSSHFREQ",1,0)
PSSHFREQ ;WOIFO/AV - VALIDATES FREQUENCY FOR DOSING ;09/20/07
"RTN","PSSHFREQ",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSHFREQ",3,0)
 ;
"RTN","PSSHFREQ",4,0)
 ;
"RTN","PSSHFREQ",5,0)
 QUIT
"RTN","PSSHFREQ",6,0)
 ;;
"RTN","PSSHFREQ",7,0)
VALFREQ(FREQ) ;
"RTN","PSSHFREQ",8,0)
 ;
"RTN","PSSHFREQ",9,0)
 NEW PSS,RSLT
"RTN","PSSHFREQ",10,0)
 ;
"RTN","PSSHFREQ",11,0)
 SET FREQ=$$TRIM(FREQ)
"RTN","PSSHFREQ",12,0)
 ;
"RTN","PSSHFREQ",13,0)
 ; Invalid frequency exit routine
"RTN","PSSHFREQ",14,0)
 IF FREQ="" QUIT 0
"RTN","PSSHFREQ",15,0)
 ;
"RTN","PSSHFREQ",16,0)
 SET FREQ=$$UPPER(FREQ)
"RTN","PSSHFREQ",17,0)
 ;
"RTN","PSSHFREQ",18,0)
 ; Determine if frequency has decimals, if so invalid
"RTN","PSSHFREQ",19,0)
 IF FREQ["." QUIT 0
"RTN","PSSHFREQ",20,0)
 ; Determine if frequency is a number, if so it is valid
"RTN","PSSHFREQ",21,0)
 IF FREQ?1.N QUIT 1
"RTN","PSSHFREQ",22,0)
 ;
"RTN","PSSHFREQ",23,0)
 ; Determine if frequency is one of the special frequency strings
"RTN","PSSHFREQ",24,0)
 SET RSLT=$$SMPLFREQ(FREQ)
"RTN","PSSHFREQ",25,0)
 IF RSLT=1 QUIT RSLT
"RTN","PSSHFREQ",26,0)
 ;
"RTN","PSSHFREQ",27,0)
 SET PSS("length")=$LENGTH(FREQ)
"RTN","PSSHFREQ",28,0)
 SET PSS("firstCharacter")=$EXTRACT(FREQ,1,1)
"RTN","PSSHFREQ",29,0)
 SET PSS("lastCharacter")=$EXTRACT(FREQ,PSS("length"),PSS("length"))
"RTN","PSSHFREQ",30,0)
 ;
"RTN","PSSHFREQ",31,0)
 ; Frequency must meet the following criteria else quit
"RTN","PSSHFREQ",32,0)
 ; Length must be less than or equal to 4 or more than or equal to 3
"RTN","PSSHFREQ",33,0)
 IF PSS("length")>4 QUIT 0
"RTN","PSSHFREQ",34,0)
 IF PSS("length")<3 QUIT 0
"RTN","PSSHFREQ",35,0)
 ; First character must be a Q or X
"RTN","PSSHFREQ",36,0)
 ;IF (PSS("firstCharacter")'="Q")&&(PSS("firstCharacter")'="X") QUIT 0
"RTN","PSSHFREQ",37,0)
 I "XQ"'[PSS("firstCharacter") Q 0
"RTN","PSSHFREQ",38,0)
 ;
"RTN","PSSHFREQ",39,0)
 SET PSS("result")=1
"RTN","PSSHFREQ",40,0)
 IF PSS("length")=4  DO
"RTN","PSSHFREQ",41,0)
 . ; Take two middle characters and ensure they are numbers
"RTN","PSSHFREQ",42,0)
 . SET PSS("chrTemp1")=$EXTRACT(FREQ,2,2)
"RTN","PSSHFREQ",43,0)
 . SET PSS("chrTemp2")=$EXTRACT(FREQ,3,3)
"RTN","PSSHFREQ",44,0)
 . ; ASCII number characters are 48 - 57
"RTN","PSSHFREQ",45,0)
 . SET PSS("intTemp1")=$ASCII(PSS("chrTemp1"))-48
"RTN","PSSHFREQ",46,0)
 . SET PSS("intTemp2")=$ASCII(PSS("chrTemp2"))-48
"RTN","PSSHFREQ",47,0)
 . ;
"RTN","PSSHFREQ",48,0)
 . ; Ensure the two middle chars are numbers
"RTN","PSSHFREQ",49,0)
 . IF PSS("intTemp1")<0 SET PSS("result")=0
"RTN","PSSHFREQ",50,0)
 . IF PSS("intTemp1")>9 SET PSS("result")=0
"RTN","PSSHFREQ",51,0)
 . IF PSS("intTemp2")<0 SET PSS("result")=0
"RTN","PSSHFREQ",52,0)
 . IF PSS("intTemp2")>9 SET PSS("result")=0
"RTN","PSSHFREQ",53,0)
 . QUIT
"RTN","PSSHFREQ",54,0)
 ;
"RTN","PSSHFREQ",55,0)
 IF PSS("length")=3  DO
"RTN","PSSHFREQ",56,0)
 . ; Take two middle characters 
"RTN","PSSHFREQ",57,0)
 . SET PSS("chrTemp1")=$EXTRACT(FREQ,2,2)
"RTN","PSSHFREQ",58,0)
 . ; ASCII number characters are 48 - 57
"RTN","PSSHFREQ",59,0)
 . SET PSS("intTemp1")=$ASCII(PSS("chrTemp1"))-48
"RTN","PSSHFREQ",60,0)
 . ;
"RTN","PSSHFREQ",61,0)
 . ; Ensure the middle char is a number
"RTN","PSSHFREQ",62,0)
 . IF PSS("intTemp1")<0 SET PSS("result")=0
"RTN","PSSHFREQ",63,0)
 . IF PSS("intTemp1")>9 SET PSS("result")=0
"RTN","PSSHFREQ",64,0)
 . QUIT
"RTN","PSSHFREQ",65,0)
 ;
"RTN","PSSHFREQ",66,0)
 IF PSS("result")=0 QUIT 0
"RTN","PSSHFREQ",67,0)
 ;
"RTN","PSSHFREQ",68,0)
 ; validate the first and last character
"RTN","PSSHFREQ",69,0)
 ; If Q is first character
"RTN","PSSHFREQ",70,0)
 SET PSS("qResult")=""
"RTN","PSSHFREQ",71,0)
 IF PSS("firstCharacter")="Q"  DO
"RTN","PSSHFREQ",72,0)
 . IF PSS("lastCharacter")="D" SET PSS("qResult")=1 QUIT
"RTN","PSSHFREQ",73,0)
 . IF PSS("lastCharacter")="W" SET PSS("qResult")=1 QUIT
"RTN","PSSHFREQ",74,0)
 . IF PSS("lastCharacter")="L" SET PSS("qResult")=1 QUIT
"RTN","PSSHFREQ",75,0)
 . IF PSS("lastCharacter")="H" SET PSS("qResult")=1 QUIT
"RTN","PSSHFREQ",76,0)
 . IF PSS("qResult")="" SET PSS("qResult")=0
"RTN","PSSHFREQ",77,0)
 . QUIT
"RTN","PSSHFREQ",78,0)
 ;
"RTN","PSSHFREQ",79,0)
 IF PSS("qResult")'="" QUIT PSS("qResult")
"RTN","PSSHFREQ",80,0)
 ;
"RTN","PSSHFREQ",81,0)
 ; If X is first character
"RTN","PSSHFREQ",82,0)
 SET PSS("xResult")=""
"RTN","PSSHFREQ",83,0)
 IF PSS("firstCharacter")="X"  DO
"RTN","PSSHFREQ",84,0)
 . IF PSS("lastCharacter")="D" SET PSS("xResult")=1 QUIT
"RTN","PSSHFREQ",85,0)
 . IF PSS("lastCharacter")="W" SET PSS("xResult")=1 QUIT
"RTN","PSSHFREQ",86,0)
 . IF PSS("lastCharacter")="L" SET PSS("xResult")=1 QUIT
"RTN","PSSHFREQ",87,0)
 . IF PSS("xResult")="" SET PSS("xResult")=0
"RTN","PSSHFREQ",88,0)
 . QUIT
"RTN","PSSHFREQ",89,0)
 IF PSS("xResult")'="" QUIT PSS("xResult")
"RTN","PSSHFREQ",90,0)
 ;
"RTN","PSSHFREQ",91,0)
 QUIT 0
"RTN","PSSHFREQ",92,0)
 ;;
"RTN","PSSHFREQ",93,0)
SMPLFREQ(FREQ) ;
"RTN","PSSHFREQ",94,0)
 ; @DESC Determines if the frequency is one of the special
"RTN","PSSHFREQ",95,0)
 ; frequency strings that is accepted
"RTN","PSSHFREQ",96,0)
 ; 
"RTN","PSSHFREQ",97,0)
 ; @FREQ Frequency passed in
"RTN","PSSHFREQ",98,0)
 ; 
"RTN","PSSHFREQ",99,0)
 ; @RETURNS 1 if is valid frequency or 0 if not one of special
"RTN","PSSHFREQ",100,0)
 ; frequencies
"RTN","PSSHFREQ",101,0)
 ; 
"RTN","PSSHFREQ",102,0)
 NEW VAL,RSLT,FREQS
"RTN","PSSHFREQ",103,0)
 ;
"RTN","PSSHFREQ",104,0)
 ; Hash of valid frequencies
"RTN","PSSHFREQ",105,0)
 SET FREQS("QD")=""
"RTN","PSSHFREQ",106,0)
 SET FREQS("BID")=""
"RTN","PSSHFREQ",107,0)
 SET FREQS("TID")=""
"RTN","PSSHFREQ",108,0)
 SET FREQS("QID")=""
"RTN","PSSHFREQ",109,0)
 SET FREQS("QAM")=""
"RTN","PSSHFREQ",110,0)
 SET FREQS("QSHIFT")=""
"RTN","PSSHFREQ",111,0)
 SET FREQS("QOD")=""
"RTN","PSSHFREQ",112,0)
 SET FREQS("QHS")=""
"RTN","PSSHFREQ",113,0)
 SET FREQS("QPM")=""
"RTN","PSSHFREQ",114,0)
 ;
"RTN","PSSHFREQ",115,0)
 SET VAL=""
"RTN","PSSHFREQ",116,0)
 SET RSLT=0
"RTN","PSSHFREQ",117,0)
 FOR  SET VAL=$ORDER(FREQS(VAL)) QUIT:VAL=""  DO
"RTN","PSSHFREQ",118,0)
 . ; Iterate through valid frequencies and determine
"RTN","PSSHFREQ",119,0)
 . ; if frequency parameter is a match return 1
"RTN","PSSHFREQ",120,0)
 . IF FREQ=VAL SET RSLT=1 QUIT
"RTN","PSSHFREQ",121,0)
 . QUIT
"RTN","PSSHFREQ",122,0)
 ;
"RTN","PSSHFREQ",123,0)
 QUIT RSLT
"RTN","PSSHFREQ",124,0)
 ;;
"RTN","PSSHFREQ",125,0)
TRIM(TEXT) ;
"RTN","PSSHFREQ",126,0)
 ;Trims the leading and trailing whitespace from a String
"RTN","PSSHFREQ",127,0)
 ;
"RTN","PSSHFREQ",128,0)
 ;Trim leading whitespace
"RTN","PSSHFREQ",129,0)
 SET TEXT=$$TRIMLEAD(TEXT)
"RTN","PSSHFREQ",130,0)
 ;Trim trailing whitespace
"RTN","PSSHFREQ",131,0)
 SET TEXT=$$TRIMEND(TEXT)
"RTN","PSSHFREQ",132,0)
 QUIT TEXT
"RTN","PSSHFREQ",133,0)
 ;;
"RTN","PSSHFREQ",134,0)
TRIMLEAD(TEXT) ;
"RTN","PSSHFREQ",135,0)
 ;Trims the leading whitespace from a String
"RTN","PSSHFREQ",136,0)
 ;
"RTN","PSSHFREQ",137,0)
 NEW LENGTH,N,FLAG,CHAR,TEMPTEXT,MOD
"RTN","PSSHFREQ",138,0)
 ;
"RTN","PSSHFREQ",139,0)
 ;Ensure the String contains a value
"RTN","PSSHFREQ",140,0)
 IF $DATA(TEXT)=0 SET TEXT="" QUIT TEXT
"RTN","PSSHFREQ",141,0)
 SET LENGTH=$LENGTH(TEXT)
"RTN","PSSHFREQ",142,0)
 ;Ensure the String is not empty
"RTN","PSSHFREQ",143,0)
 IF LENGTH=0 QUIT TEXT
"RTN","PSSHFREQ",144,0)
 ;
"RTN","PSSHFREQ",145,0)
 ;Initialize the flag
"RTN","PSSHFREQ",146,0)
 S FLAG=0,N=0,MOD=0
"RTN","PSSHFREQ",147,0)
 ;Loop through
"RTN","PSSHFREQ",148,0)
 FOR  SET N=N+1 QUIT:N>LENGTH!(FLAG=1)  DO
"RTN","PSSHFREQ",149,0)
 .SET CHAR=$EXTRACT(TEXT,N)
"RTN","PSSHFREQ",150,0)
 .IF CHAR=" " SET TEMPTEXT=$EXTRACT(TEXT,N+1,LENGTH),MOD=1
"RTN","PSSHFREQ",151,0)
 .IF CHAR'=" "  SET FLAG=1
"RTN","PSSHFREQ",152,0)
 .QUIT  ;End for loop
"RTN","PSSHFREQ",153,0)
 ;Save the new text to the passed in variable
"RTN","PSSHFREQ",154,0)
 IF MOD=1 SET TEXT=TEMPTEXT
"RTN","PSSHFREQ",155,0)
 QUIT TEXT
"RTN","PSSHFREQ",156,0)
 ;;
"RTN","PSSHFREQ",157,0)
TRIMEND(TEXT) ;
"RTN","PSSHFREQ",158,0)
 ;Trims the trailing whitespace from a String
"RTN","PSSHFREQ",159,0)
 ;
"RTN","PSSHFREQ",160,0)
 NEW LENGTH,N,FLAG,CHAR,TEMPTEXT,MOD
"RTN","PSSHFREQ",161,0)
 ;
"RTN","PSSHFREQ",162,0)
 ;Ensure the String contains a value
"RTN","PSSHFREQ",163,0)
 IF $DATA(TEXT)=0 SET TEXT="" QUIT TEXT
"RTN","PSSHFREQ",164,0)
 SET LENGTH=$LENGTH(TEXT)
"RTN","PSSHFREQ",165,0)
 ;Ensure the String is not empty
"RTN","PSSHFREQ",166,0)
 IF LENGTH=0 QUIT TEXT
"RTN","PSSHFREQ",167,0)
 ;
"RTN","PSSHFREQ",168,0)
 ;Initialize the flag, counter, and modification indicator variables
"RTN","PSSHFREQ",169,0)
 S FLAG=0,N=LENGTH+1,MOD=0
"RTN","PSSHFREQ",170,0)
 ;Loop through
"RTN","PSSHFREQ",171,0)
 FOR  SET N=N-1 QUIT:N=0!(FLAG=1)  DO
"RTN","PSSHFREQ",172,0)
 .SET CHAR=$EXTRACT(TEXT,N)
"RTN","PSSHFREQ",173,0)
 .;WRITE !,"CHAR: ",CHAR
"RTN","PSSHFREQ",174,0)
 .IF CHAR=" " SET TEMPTEXT=$EXTRACT(TEXT,1,N-1),MOD=1
"RTN","PSSHFREQ",175,0)
 .IF CHAR'=" "  SET FLAG=1
"RTN","PSSHFREQ",176,0)
 .QUIT   ;End for loop
"RTN","PSSHFREQ",177,0)
 ;Save the new text to the passed in variable
"RTN","PSSHFREQ",178,0)
 IF MOD=1 SET TEXT=TEMPTEXT
"RTN","PSSHFREQ",179,0)
 QUIT TEXT
"RTN","PSSHFREQ",180,0)
 ;;
"RTN","PSSHFREQ",181,0)
UPPER(TEXT) ;
"RTN","PSSHFREQ",182,0)
 ; @DESC Converts lowercase characters to uppercase
"RTN","PSSHFREQ",183,0)
 ;
"RTN","PSSHFREQ",184,0)
 ; @TEXT Text to be converted
"RTN","PSSHFREQ",185,0)
 ; 
"RTN","PSSHFREQ",186,0)
 ; @RETURNS Text in all UPPPERCASE
"RTN","PSSHFREQ",187,0)
 ;
"RTN","PSSHFREQ",188,0)
 NEW LOWER,UPPER
"RTN","PSSHFREQ",189,0)
 ;
"RTN","PSSHFREQ",190,0)
 SET LOWER="abcdefghijklmnopqrstuvwxyz"
"RTN","PSSHFREQ",191,0)
 SET UPPER="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
"RTN","PSSHFREQ",192,0)
 SET TEXT=$TRANSLATE(TEXT,LOWER,UPPER)
"RTN","PSSHFREQ",193,0)
 ;
"RTN","PSSHFREQ",194,0)
 QUIT TEXT
"RTN","PSSHFREQ",195,0)
 ;;
"RTN","PSSHRCOM")
0^2^B27377799
"RTN","PSSHRCOM",1,0)
PSSHRCOM ;WOIFO/AV,TS - Handles common PRE PEPS interface functionality ;09/20/07
"RTN","PSSHRCOM",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89;
"RTN","PSSHRCOM",3,0)
 ;
"RTN","PSSHRCOM",4,0)
 ; @authors - Alex Vazquez, Tim Sabat
"RTN","PSSHRCOM",5,0)
 ; @date    - September 19, 2007
"RTN","PSSHRCOM",6,0)
 ; @version - 1.0
"RTN","PSSHRCOM",7,0)
 ;
"RTN","PSSHRCOM",8,0)
 QUIT
"RTN","PSSHRCOM",9,0)
 ;;
"RTN","PSSHRCOM",10,0)
PARSEMSG(DOCHAND,NODE,HASH,COUNT) ;
"RTN","PSSHRCOM",11,0)
 ; @DESC Parses the message XML element and stores
"RTN","PSSHRCOM",12,0)
 ; severity, type, drugName and text in HASH parameter
"RTN","PSSHRCOM",13,0)
 ;
"RTN","PSSHRCOM",14,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRCOM",15,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRCOM",16,0)
 ; @HASH Passed by ref. Used to store return values
"RTN","PSSHRCOM",17,0)
 ; @COUNT Count of messages
"RTN","PSSHRCOM",18,0)
 ;
"RTN","PSSHRCOM",19,0)
 ; @RETURNS Nothing, Values stored in HASH variable
"RTN","PSSHRCOM",20,0)
 ;
"RTN","PSSHRCOM",21,0)
 NEW PSS,NAME
"RTN","PSSHRCOM",22,0)
 ;
"RTN","PSSHRCOM",23,0)
 SET PSS("child")=0
"RTN","PSSHRCOM",24,0)
 ;
"RTN","PSSHRCOM",25,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,NODE,PSS("child")) QUIT:PSS("child")<1  DO
"RTN","PSSHRCOM",26,0)
 . SET NAME=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRCOM",27,0)
 . ;
"RTN","PSSHRCOM",28,0)
 . DO:NAME="drug"
"RTN","PSSHRCOM",29,0)
 . . DO PARSEDRG(DOCHAND,PSS("child"),.HASH,COUNT)
"RTN","PSSHRCOM",30,0)
 . . QUIT
"RTN","PSSHRCOM",31,0)
 . DO:NAME="severity"
"RTN","PSSHRCOM",32,0)
 . . SET HASH(COUNT,"severity")=$$GETTEXT(DOCHAND,PSS("child"))
"RTN","PSSHRCOM",33,0)
 . . QUIT
"RTN","PSSHRCOM",34,0)
 . DO:NAME="type"
"RTN","PSSHRCOM",35,0)
 . . SET HASH(COUNT,"type")=$$GETTEXT(DOCHAND,PSS("child"))
"RTN","PSSHRCOM",36,0)
 . . QUIT
"RTN","PSSHRCOM",37,0)
 . DO:NAME="drugName"
"RTN","PSSHRCOM",38,0)
 . . SET HASH(COUNT,"drugName")=$$GETTEXT(DOCHAND,PSS("child"))
"RTN","PSSHRCOM",39,0)
 . . QUIT
"RTN","PSSHRCOM",40,0)
 . DO:NAME="text"
"RTN","PSSHRCOM",41,0)
 . . SET HASH(COUNT,"text")=$$GETTEXT(DOCHAND,PSS("child"))
"RTN","PSSHRCOM",42,0)
 . . QUIT
"RTN","PSSHRCOM",43,0)
 . QUIT
"RTN","PSSHRCOM",44,0)
 QUIT
"RTN","PSSHRCOM",45,0)
 ;;
"RTN","PSSHRCOM",46,0)
DRUGLIST(DOCHAND,NODE,HASH,COUNT) ;
"RTN","PSSHRCOM",47,0)
 ; @DESC Handles reading the interacted drug list and stores to a Hash
"RTN","PSSHRCOM",48,0)
 ;
"RTN","PSSHRCOM",49,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRCOM",50,0)
 ; @NODE Represents the interactedDrugList XML element
"RTN","PSSHRCOM",51,0)
 ; @HASH Passed by ref. Used to store return values
"RTN","PSSHRCOM",52,0)
 ; @COUNT Count of drugs
"RTN","PSSHRCOM",53,0)
 ;
"RTN","PSSHRCOM",54,0)
 ; @RETURNS Nothing, Values stored in HASH variable
"RTN","PSSHRCOM",55,0)
 ;
"RTN","PSSHRCOM",56,0)
 NEW PSS,VAL,DRUGS
"RTN","PSSHRCOM",57,0)
 SET PSS("child")=0
"RTN","PSSHRCOM",58,0)
 SET PSS("interactedCount")=1
"RTN","PSSHRCOM",59,0)
 ;
"RTN","PSSHRCOM",60,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,NODE,PSS("child")) QUIT:PSS("child")=0  DO
"RTN","PSSHRCOM",61,0)
 . ; Renew the DRUGS variable before passing in again
"RTN","PSSHRCOM",62,0)
 . KILL DRUGS
"RTN","PSSHRCOM",63,0)
 . DO PARSEDRG(DOCHAND,PSS("child"),.DRUGS,PSS("interactedCount"))
"RTN","PSSHRCOM",64,0)
 . SET VAL=""
"RTN","PSSHRCOM",65,0)
 . FOR  SET VAL=$ORDER(DRUGS(VAL)) QUIT:VAL=""  DO
"RTN","PSSHRCOM",66,0)
 . . SET HASH(COUNT,"drugList",PSS("interactedCount"),"vuid")=DRUGS(VAL,"vuid")
"RTN","PSSHRCOM",67,0)
 . . SET HASH(COUNT,"drugList",PSS("interactedCount"),"ien")=DRUGS(VAL,"ien")
"RTN","PSSHRCOM",68,0)
 . . SET HASH(COUNT,"drugList",PSS("interactedCount"),"gcn")=DRUGS(VAL,"gcn")
"RTN","PSSHRCOM",69,0)
 . . SET HASH(COUNT,"drugList",PSS("interactedCount"),"orderNumber")=DRUGS(VAL,"orderNumber")
"RTN","PSSHRCOM",70,0)
 . . SET HASH(COUNT,"drugList",PSS("interactedCount"),"drugName")=DRUGS(VAL,"drugName")
"RTN","PSSHRCOM",71,0)
 . . SET HASH(COUNT,"drugList",PSS("interactedCount"),"cprsOrderNumber")=$GET(DRUGS(VAL,"cprsOrderNumber"))
"RTN","PSSHRCOM",72,0)
 . . SET HASH(COUNT,"drugList",PSS("interactedCount"),"package")=$GET(DRUGS(VAL,"package"))
"RTN","PSSHRCOM",73,0)
 . SET PSS("interactedCount")=PSS("interactedCount")+1
"RTN","PSSHRCOM",74,0)
 . QUIT
"RTN","PSSHRCOM",75,0)
 QUIT
"RTN","PSSHRCOM",76,0)
 ;;
"RTN","PSSHRCOM",77,0)
PARSEDRG(DOCHAND,NODE,HASH,COUNT) ;
"RTN","PSSHRCOM",78,0)
 ; @DESC Parses a drug element and stores values in HASH parameter
"RTN","PSSHRCOM",79,0)
 ;
"RTN","PSSHRCOM",80,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRCOM",81,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRCOM",82,0)
 ; @HASH Passed by ref. Used to store return values.
"RTN","PSSHRCOM",83,0)
 ; @COUNT Count of drugs
"RTN","PSSHRCOM",84,0)
 ;
"RTN","PSSHRCOM",85,0)
 ; @RETURNS Nothing, Values stored in HASH values
"RTN","PSSHRCOM",86,0)
 ;
"RTN","PSSHRCOM",87,0)
 SET HASH(COUNT,"vuid")=$$VALUE^MXMLDOM(DOCHAND,NODE,"vuid")
"RTN","PSSHRCOM",88,0)
 SET HASH(COUNT,"ien")=$$VALUE^MXMLDOM(DOCHAND,NODE,"ien")
"RTN","PSSHRCOM",89,0)
 SET HASH(COUNT,"gcn")=$$VALUE^MXMLDOM(DOCHAND,NODE,"gcnSeqNo")
"RTN","PSSHRCOM",90,0)
 SET HASH(COUNT,"drugName")=$$VALUE^MXMLDOM(DOCHAND,NODE,"drugName")
"RTN","PSSHRCOM",91,0)
 ;
"RTN","PSSHRCOM",92,0)
 ; Split the order number that is in the format 'orderNumber|cprsOrderNumber|package'
"RTN","PSSHRCOM",93,0)
 ; Get the cprsOrderNumber and package from order number and order number
"RTN","PSSHRCOM",94,0)
 SET HASH(COUNT,"orderNumber")=$PIECE($$VALUE^MXMLDOM(DOCHAND,NODE,"orderNumber"),"|",1)
"RTN","PSSHRCOM",95,0)
 SET HASH(COUNT,"cprsOrderNumber")=$PIECE($$VALUE^MXMLDOM(DOCHAND,NODE,"orderNumber"),"|",2)
"RTN","PSSHRCOM",96,0)
 SET HASH(COUNT,"package")=$PIECE($$VALUE^MXMLDOM(DOCHAND,NODE,"orderNumber"),"|",3)
"RTN","PSSHRCOM",97,0)
 ;
"RTN","PSSHRCOM",98,0)
 QUIT
"RTN","PSSHRCOM",99,0)
 ;;
"RTN","PSSHRCOM",100,0)
UPPER(PSSTEXT) ;
"RTN","PSSHRCOM",101,0)
 ; @DESC Converts lowercase characters to uppercase
"RTN","PSSHRCOM",102,0)
 ;
"RTN","PSSHRCOM",103,0)
 ; @PSSTEXT Text to be converted
"RTN","PSSHRCOM",104,0)
 ;
"RTN","PSSHRCOM",105,0)
 ; @RETURNS Text in all UPPPERCASE
"RTN","PSSHRCOM",106,0)
 ;
"RTN","PSSHRCOM",107,0)
 NEW PSS
"RTN","PSSHRCOM",108,0)
 ;
"RTN","PSSHRCOM",109,0)
 SET PSS("lower")="abcdefghijklmnopqrstuvwxyz"
"RTN","PSSHRCOM",110,0)
 SET PSS("upper")="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
"RTN","PSSHRCOM",111,0)
 SET PSS("upperText")=$TR(PSSTEXT,PSS("lower"),PSS("upper"))
"RTN","PSSHRCOM",112,0)
 QUIT PSS("upperText")
"RTN","PSSHRCOM",113,0)
 ;;
"RTN","PSSHRCOM",114,0)
GETTEXT(DOCHAND,NODE) ;
"RTN","PSSHRCOM",115,0)
 ; @DESC Gets text from XML element as a single string
"RTN","PSSHRCOM",116,0)
 ;
"RTN","PSSHRCOM",117,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRCOM",118,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRCOM",119,0)
 ;
"RTN","PSSHRCOM",120,0)
 ; @RETURNS Text of XML element as a single string
"RTN","PSSHRCOM",121,0)
 ;
"RTN","PSSHRCOM",122,0)
 NEW TEXT
"RTN","PSSHRCOM",123,0)
 ;
"RTN","PSSHRCOM",124,0)
 DO TEXT^MXMLDOM(DOCHAND,NODE,$NA(TEXT))
"RTN","PSSHRCOM",125,0)
 ; Store array values in string
"RTN","PSSHRCOM",126,0)
 SET TEXT=$$UNPARSE(.TEXT)
"RTN","PSSHRCOM",127,0)
 ;
"RTN","PSSHRCOM",128,0)
 QUIT TEXT
"RTN","PSSHRCOM",129,0)
 ;;
"RTN","PSSHRCOM",130,0)
UNPARSE(ARRY) ;
"RTN","PSSHRCOM",131,0)
 ; @DESC Creates a single string from an array
"RTN","PSSHRCOM",132,0)
 ;
"RTN","PSSHRCOM",133,0)
 ; @ARRY Array to be looped through for text
"RTN","PSSHRCOM",134,0)
 ;
"RTN","PSSHRCOM",135,0)
 ; @RETURNS Text of array as a single string
"RTN","PSSHRCOM",136,0)
 ;
"RTN","PSSHRCOM",137,0)
 NEW VAL,STRING
"RTN","PSSHRCOM",138,0)
 ;
"RTN","PSSHRCOM",139,0)
 SET VAL=""
"RTN","PSSHRCOM",140,0)
 SET STRING=""
"RTN","PSSHRCOM",141,0)
 ;
"RTN","PSSHRCOM",142,0)
 FOR  SET VAL=$ORDER(ARRY(VAL)) QUIT:VAL=""  DO
"RTN","PSSHRCOM",143,0)
 . SET STRING=STRING_ARRY(VAL)
"RTN","PSSHRCOM",144,0)
 QUIT STRING
"RTN","PSSHRCOM",145,0)
 ;;
"RTN","PSSHRCOM",146,0)
ATRIBUTE(NAME,VALUE) ;
"RTN","PSSHRCOM",147,0)
 ; @DESC Builds a valid encoded attribute from the name/value pair passed in
"RTN","PSSHRCOM",148,0)
 ;
"RTN","PSSHRCOM",149,0)
 ; @NAME The left side of the "name=value" relationship
"RTN","PSSHRCOM",150,0)
 ; @VALUE The right side of the "name=value" relationship
"RTN","PSSHRCOM",151,0)
 ;
"RTN","PSSHRCOM",152,0)
 ; @RETURNS A valid/encoded name value pair
"RTN","PSSHRCOM",153,0)
 NEW PSS,QT
"RTN","PSSHRCOM",154,0)
 SET QT=""""
"RTN","PSSHRCOM",155,0)
 SET PSS("attribute")=NAME_"="_QT_$$SYMENC^MXMLUTL($GET(VALUE))_QT
"RTN","PSSHRCOM",156,0)
 QUIT PSS("attribute")
"RTN","PSSHRCOM",157,0)
 ;;
"RTN","PSSHRCOM",158,0)
ISPROF(ORDERNUM) ;
"RTN","PSSHRCOM",159,0)
 ; @DESC Determines if a drug is a profile drug according to
"RTN","PSSHRCOM",160,0)
 ; its orderNumber
"RTN","PSSHRCOM",161,0)
 ;
"RTN","PSSHRCOM",162,0)
 ; @RETURNS 1 if is a profile, 0 if not a profile
"RTN","PSSHRCOM",163,0)
 NEW PSS
"RTN","PSSHRCOM",164,0)
 ;
"RTN","PSSHRCOM",165,0)
 SET PSS("isProfile")=$$UPPER^PSSHRCOM(ORDERNUM)["PROFILE"
"RTN","PSSHRCOM",166,0)
 ;
"RTN","PSSHRCOM",167,0)
 QUIT PSS("isProfile")
"RTN","PSSHRCOM",168,0)
 ;;
"RTN","PSSHRCOM",169,0)
STACK ;
"RTN","PSSHRCOM",170,0)
 ; @DESC Prints a stack trace
"RTN","PSSHRCOM",171,0)
 ;
"RTN","PSSHRCOM",172,0)
 ; @RETURNS Nothing
"RTN","PSSHRCOM",173,0)
 NEW PSSLOOP
"RTN","PSSHRCOM",174,0)
 FOR PSSLOOP=0:1:$STACK(-1)  DO
"RTN","PSSHRCOM",175,0)
 . WRITE !,"Context level:",PSSLOOP,?25,"Context type: ",$STACK(PSSLOOP)
"RTN","PSSHRCOM",176,0)
 . WRITE !,?5,"Current place: ",$STACK(PSSLOOP,"PLACE")
"RTN","PSSHRCOM",177,0)
 . WRITE !,?5,"Current source: ",$STACK(PSSLOOP,"MCODE")
"RTN","PSSHRCOM",178,0)
 . WRITE !
"RTN","PSSHRCOM",179,0)
 . QUIT
"RTN","PSSHRCOM",180,0)
 QUIT
"RTN","PSSHRCOM",181,0)
 ;;
"RTN","PSSHRENV")
0^15^B6460862
"RTN","PSSHRENV",1,0)
PSSHRENV ;WOIFO/RR,SG - ENVIRONMENT CHECK FOR PACKAGE--CHECKS EXISTANCE OF MAIL GROUP AND IF NOT CREATES IT ;09/20/07
"RTN","PSSHRENV",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSHRENV",3,0)
 ;
"RTN","PSSHRENV",4,0)
EN ;
"RTN","PSSHRENV",5,0)
 N PSSMGPNM,PSSMGPOR,PSSMGPDS,PSSMGPRS,PSSMGPMY,PSSMGPNM,PSSMGPSL,PSSMGPQT,PSSMGPTP
"RTN","PSSHRENV",6,0)
 N DTOUT,DUOUT,Y
"RTN","PSSHRENV",7,0)
 K XPDABORT,PSSMGPAR
"RTN","PSSHRENV",8,0)
 ;If mail group already exists quit.
"RTN","PSSHRENV",9,0)
 I $$FIND1^DIC(3.8,"","X","PSS ORDER CHECKS","B") Q
"RTN","PSSHRENV",10,0)
 S PSSMGPAR(1)="A 'PSS ORDER CHECKS' Mail Group is now being created. Mail Group members will"
"RTN","PSSHRENV",11,0)
 S PSSMGPAR(2)="receive various notifications that impact Enhanced Order Checks (drug-drug"
"RTN","PSSHRENV",12,0)
 S PSSMGPAR(3)="interactions, duplicate therapy and dosing) introduced with PRE V. 0.5. Please"
"RTN","PSSHRENV",13,0)
 S PSSMGPAR(4)="enter the Pharmacy ADPAC or a designee to be the Mail Group Organizer."
"RTN","PSSHRENV",14,0)
 S PSSMGPAR(5)=" "
"RTN","PSSHRENV",15,0)
 S PSSMGPAR(6)="To continue this install, you must now enter a Mail Group organizer."
"RTN","PSSHRENV",16,0)
 S PSSMGPAR(7)=" "
"RTN","PSSHRENV",17,0)
 D MES^XPDUTL(.PSSMGPAR)
"RTN","PSSHRENV",18,0)
 K DIC S DIC=200,DIC(0)="QEAMZ",DIC("A")="Enter Mail Group Organizer: "
"RTN","PSSHRENV",19,0)
 ;abort install if user does not enter a coordinator
"RTN","PSSHRENV",20,0)
 D ^DIC K DIC I $D(DTOUT)!($D(DUOUT))!(+Y'>0) K PSSMGPAR S XPDABORT=2 Q
"RTN","PSSHRENV",21,0)
 S PSSMGPOR=+Y,PSSMGPMY(+Y)=""
"RTN","PSSHRENV",22,0)
 S PSSMGPNM="PSS ORDER CHECKS",PSSMGPTP=0,PSSMGPSL=0,PSSMGPQT=1
"RTN","PSSHRENV",23,0)
 S PSSMGPDS(1)="Members of this mail group will receive various notifications that impact"
"RTN","PSSHRENV",24,0)
 S PSSMGPDS(2)="Enhanced Order Checks (drug-drug interactions, duplicate therapy and dosing"
"RTN","PSSHRENV",25,0)
 S PSSMGPDS(3)="checks) introduced with PRE V. 0.5 utilizing a COTS database."
"RTN","PSSHRENV",26,0)
 S PSSMGPRS=$$MG^XMBGRP(PSSMGPNM,PSSMGPTP,PSSMGPOR,PSSMGPSL,.PSSMGPMY,.PSSMGPDS,PSSMGPQT)
"RTN","PSSHRENV",27,0)
 I 'PSSMGPRS D BMES^XPDUTL(" ") D  Q
"RTN","PSSHRENV",28,0)
 .D BMES^XPDUTL("Unable to create PSS ORDER CHECKS Mail Group, aborting install.") S XPDABORT=2
"RTN","PSSHRENV",29,0)
 .K PSSMGPAR
"RTN","PSSHRENV",30,0)
 ;Last line above also aborts install if the call to MG^XMBGRP fails to create the Mail Group
"RTN","PSSHRENV",31,0)
 K PSSMGPAR
"RTN","PSSHRENV",32,0)
 Q
"RTN","PSSHREQ")
0^3^B201153193
"RTN","PSSHREQ",1,0)
PSSHREQ ;WOIFO/AV,TS - Creates PSSXML to send to PEPS using input global ;09/20/07
"RTN","PSSHREQ",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSHREQ",3,0)
 ;
"RTN","PSSHREQ",4,0)
 ; @authors - Alex Vazquez, Tim Sabat, Steve Gordon
"RTN","PSSHREQ",5,0)
 ; @date    - September 19, 2007
"RTN","PSSHREQ",6,0)
 ; @version - 1.0
"RTN","PSSHREQ",7,0)
 ;
"RTN","PSSHREQ",8,0)
 QUIT
"RTN","PSSHREQ",9,0)
 ;;
"RTN","PSSHREQ",10,0)
BLDPREQ(PSSBASE) ;
"RTN","PSSHREQ",11,0)
 ; @DRIVER
"RTN","PSSHREQ",12,0)
 ;
"RTN","PSSHREQ",13,0)
 ; @DESC Builds the PEPSRequest PSSXML element
"RTN","PSSHREQ",14,0)
 ;
"RTN","PSSHREQ",15,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",16,0)
 ;
"RTN","PSSHREQ",17,0)
 ; @RETURNS An xml string representing an entire order check.
"RTN","PSSHREQ",18,0)
 ;
"RTN","PSSHREQ",19,0)
 NEW PSS,PSSXML
"RTN","PSSHREQ",20,0)
 ;
"RTN","PSSHREQ",21,0)
 SET PSS("PSSXMLHeader")=$$XMLHDR^MXMLUTL
"RTN","PSSHREQ",22,0)
 SET PSS("xmlns")=$$ATRIBUTE^PSSHRCOM("xmlns","gov/va/med/pharmacy/peps/external/common/preencapsulation/vo/drug/check/request")
"RTN","PSSHREQ",23,0)
 SET PSS("xsi")=$$ATRIBUTE^PSSHRCOM("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance")
"RTN","PSSHREQ",24,0)
 ;
"RTN","PSSHREQ",25,0)
 SET PSSXML=PSS("PSSXMLHeader")
"RTN","PSSHREQ",26,0)
 SET PSSXML=PSSXML_"<PEPSRequest"
"RTN","PSSHREQ",27,0)
 SET PSSXML=PSSXML_" "_PSS("xmlns")
"RTN","PSSHREQ",28,0)
 SET PSSXML=PSSXML_" "_PSS("xsi")
"RTN","PSSHREQ",29,0)
 SET PSSXML=PSSXML_" >"
"RTN","PSSHREQ",30,0)
 SET PSSXML=PSSXML_$$HEADER(PSSBASE)
"RTN","PSSHREQ",31,0)
 I '$D(^TMP($JOB,PSSBASE,"IN","PING")) SET PSSXML=PSSXML_$$BODY(PSSBASE)
"RTN","PSSHREQ",32,0)
 SET PSSXML=PSSXML_"</PEPSRequest>"
"RTN","PSSHREQ",33,0)
 ;
"RTN","PSSHREQ",34,0)
 QUIT PSSXML
"RTN","PSSHREQ",35,0)
 ;;
"RTN","PSSHREQ",36,0)
HEADER(PSSBASE) ;
"RTN","PSSHREQ",37,0)
 ; @DESC Builds the Header PSSXML element. A header is the section of the PSSXML
"RTN","PSSHREQ",38,0)
 ; that includes time, server, and user.  This item holds no business logic, it
"RTN","PSSHREQ",39,0)
 ; only records debugging information.
"RTN","PSSHREQ",40,0)
 ;
"RTN","PSSHREQ",41,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",42,0)
 ;
"RTN","PSSHREQ",43,0)
 ; @RETURNS A the PSSXML string representing the header element.
"RTN","PSSHREQ",44,0)
 ;
"RTN","PSSHREQ",45,0)
 NEW PSSXML,PSS
"RTN","PSSHREQ",46,0)
 ;
"RTN","PSSHREQ",47,0)
 ; pingOnly is OPTIONAL. If data in global, set pingOnly to true
"RTN","PSSHREQ",48,0)
 IF $DATA(^TMP($JOB,PSSBASE,"IN","PING")) DO
"RTN","PSSHREQ",49,0)
 . SET PSS("pingOnly")=$$ATRIBUTE^PSSHRCOM("pingOnly","true")
"RTN","PSSHREQ",50,0)
 . QUIT
"RTN","PSSHREQ",51,0)
 ;
"RTN","PSSHREQ",52,0)
 SET PSSXML="<Header "_$GET(PSS("pingOnly"))_">"
"RTN","PSSHREQ",53,0)
  SET PSSXML=PSSXML_$$HDRTIME
"RTN","PSSHREQ",54,0)
  SET PSSXML=PSSXML_$$HDRSERVR
"RTN","PSSHREQ",55,0)
  SET PSSXML=PSSXML_$$HDRMUSER
"RTN","PSSHREQ",56,0)
 SET PSSXML=PSSXML_"</Header>"
"RTN","PSSHREQ",57,0)
 ;
"RTN","PSSHREQ",58,0)
 ; Return composed header
"RTN","PSSHREQ",59,0)
 QUIT PSSXML
"RTN","PSSHREQ",60,0)
 ;;
"RTN","PSSHREQ",61,0)
HDRTIME() ;
"RTN","PSSHREQ",62,0)
 ; @DESC Builds the Time PSSXML element which resides in the header
"RTN","PSSHREQ",63,0)
 ;
"RTN","PSSHREQ",64,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",65,0)
 ;
"RTN","PSSHREQ",66,0)
 ; @RETURNS An xml string containing the time element.
"RTN","PSSHREQ",67,0)
 ;
"RTN","PSSHREQ",68,0)
 NEW PSS,PSSXML
"RTN","PSSHREQ",69,0)
 ;
"RTN","PSSHREQ",70,0)
 SET PSS("value")=$$ATRIBUTE^PSSHRCOM("value",$GET(DT))
"RTN","PSSHREQ",71,0)
 ;
"RTN","PSSHREQ",72,0)
 SET PSSXML="<Time"
"RTN","PSSHREQ",73,0)
 SET PSSXML=PSSXML_" "_PSS("value")
"RTN","PSSHREQ",74,0)
 SET PSSXML=PSSXML_" />"
"RTN","PSSHREQ",75,0)
 ;
"RTN","PSSHREQ",76,0)
 QUIT PSSXML
"RTN","PSSHREQ",77,0)
 ;;
"RTN","PSSHREQ",78,0)
HDRSERVR() ;
"RTN","PSSHREQ",79,0)
 ; @DESC Builds the MServer PSSXML element
"RTN","PSSHREQ",80,0)
 ;
"RTN","PSSHREQ",81,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",82,0)
 ;
"RTN","PSSHREQ",83,0)
 ; @RETURNS An PSSXML string representing the server element.
"RTN","PSSHREQ",84,0)
 ;
"RTN","PSSHREQ",85,0)
 NEW PSS,PSSXML
"RTN","PSSHREQ",86,0)
 ;
"RTN","PSSHREQ",87,0)
 SET PSS("IP")=$$ATRIBUTE^PSSHRCOM("ip",$GET(IO("IP")))
"RTN","PSSHREQ",88,0)
 ;
"RTN","PSSHREQ",89,0)
 ; Namespace will remain empty because the method call used to get it
"RTN","PSSHREQ",90,0)
 ; is considered non-standard mumps.
"RTN","PSSHREQ",91,0)
 SET PSS("nameSpace")=$$ATRIBUTE^PSSHRCOM("namespace","")
"RTN","PSSHREQ",92,0)
 ;
"RTN","PSSHREQ",93,0)
 SET PSS("serverName")=$$ATRIBUTE^PSSHRCOM("serverName",$PIECE($GET(XMV("NETNAME")),"@",2))
"RTN","PSSHREQ",94,0)
 ;
"RTN","PSSHREQ",95,0)
 SET PSS("stationNumberOnly")=$$IEN^XUAF4($PIECE($$SITE^VASITE(),"^",1))
"RTN","PSSHREQ",96,0)
 IF PSS("stationNumberOnly")="" SET PSS("stationNumberOnly")=1
"RTN","PSSHREQ",97,0)
 SET PSS("stationNumber")=$$ATRIBUTE^PSSHRCOM("stationNumber",PSS("stationNumberOnly"))
"RTN","PSSHREQ",98,0)
 ;
"RTN","PSSHREQ",99,0)
 ; Namespace will remain empty because the method call used to get it
"RTN","PSSHREQ",100,0)
 ; is considered non-standard mumps.
"RTN","PSSHREQ",101,0)
 SET PSS("UCI")=$$ATRIBUTE^PSSHRCOM("uci","")
"RTN","PSSHREQ",102,0)
 ;
"RTN","PSSHREQ",103,0)
 SET PSSXML="<MServer"
"RTN","PSSHREQ",104,0)
 SET PSSXML=PSSXML_" "_PSS("IP")
"RTN","PSSHREQ",105,0)
 SET PSSXML=PSSXML_" "_PSS("nameSpace")
"RTN","PSSHREQ",106,0)
 SET PSSXML=PSSXML_" "_PSS("serverName")
"RTN","PSSHREQ",107,0)
 SET PSSXML=PSSXML_" "_PSS("stationNumber")
"RTN","PSSHREQ",108,0)
 SET PSSXML=PSSXML_" "_PSS("UCI")
"RTN","PSSHREQ",109,0)
 SET PSSXML=PSSXML_" />"
"RTN","PSSHREQ",110,0)
 ;
"RTN","PSSHREQ",111,0)
 QUIT PSSXML
"RTN","PSSHREQ",112,0)
 ;;
"RTN","PSSHREQ",113,0)
HDRMUSER() ;
"RTN","PSSHREQ",114,0)
 ; @DESC Builds the user element of the PSSXML
"RTN","PSSHREQ",115,0)
 ;
"RTN","PSSHREQ",116,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",117,0)
 ;
"RTN","PSSHREQ",118,0)
 ; @RETURNS An PSSXML string representing the M user.
"RTN","PSSHREQ",119,0)
 ;
"RTN","PSSHREQ",120,0)
 NEW PSS,PSSXML
"RTN","PSSHREQ",121,0)
 ;
"RTN","PSSHREQ",122,0)
 SET PSS("DUZ")=$$ATRIBUTE^PSSHRCOM("duz",$GET(DUZ))
"RTN","PSSHREQ",123,0)
 ;
"RTN","PSSHREQ",124,0)
 SET PSS("jobNumber")=$$ATRIBUTE^PSSHRCOM("jobNumber",$JOB)
"RTN","PSSHREQ",125,0)
 ;
"RTN","PSSHREQ",126,0)
 ; FIXME need to get username
"RTN","PSSHREQ",127,0)
 SET PSS("userName")=$$ATRIBUTE^PSSHRCOM("userName",$$GET1^DIQ(200,DUZ_",",.01))
"RTN","PSSHREQ",128,0)
 ;
"RTN","PSSHREQ",129,0)
 SET PSSXML="<MUser"
"RTN","PSSHREQ",130,0)
 SET PSSXML=PSSXML_" "_PSS("DUZ")
"RTN","PSSHREQ",131,0)
 SET PSSXML=PSSXML_" "_PSS("jobNumber")
"RTN","PSSHREQ",132,0)
 SET PSSXML=PSSXML_" "_PSS("userName")
"RTN","PSSHREQ",133,0)
 SET PSSXML=PSSXML_" />"
"RTN","PSSHREQ",134,0)
 ;
"RTN","PSSHREQ",135,0)
 QUIT PSSXML
"RTN","PSSHREQ",136,0)
 ;;
"RTN","PSSHREQ",137,0)
BODY(PSSBASE) ;
"RTN","PSSHREQ",138,0)
 ; @DESC Builds the Body PSSXML element
"RTN","PSSHREQ",139,0)
 ;
"RTN","PSSHREQ",140,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",141,0)
 ;
"RTN","PSSHREQ",142,0)
 ; @RETURNS An PSSXML string representing the body element.
"RTN","PSSHREQ",143,0)
 ;
"RTN","PSSHREQ",144,0)
 NEW PSSXML
"RTN","PSSHREQ",145,0)
 ;
"RTN","PSSHREQ",146,0)
 SET PSSXML="<Body>"
"RTN","PSSHREQ",147,0)
  SET PSSXML=PSSXML_$$DRGCHEK(PSSBASE)
"RTN","PSSHREQ",148,0)
 SET PSSXML=PSSXML_"</Body>"
"RTN","PSSHREQ",149,0)
 ;
"RTN","PSSHREQ",150,0)
 QUIT PSSXML
"RTN","PSSHREQ",151,0)
 ;;
"RTN","PSSHREQ",152,0)
DRGCHEK(PSSBASE) ;
"RTN","PSSHREQ",153,0)
 ; @DESC Builds the DrugCheck PSSXML element
"RTN","PSSHREQ",154,0)
 ;
"RTN","PSSHREQ",155,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",156,0)
 ;
"RTN","PSSHREQ",157,0)
 ; @RETURNS an PSSXML string representing the drugCheck element
"RTN","PSSHREQ",158,0)
 ;
"RTN","PSSHREQ",159,0)
 NEW PSSXML
"RTN","PSSHREQ",160,0)
 ;
"RTN","PSSHREQ",161,0)
 SET PSSXML="<drugCheck>"
"RTN","PSSHREQ",162,0)
  SET PSSXML=PSSXML_$$CHECKS(PSSBASE)
"RTN","PSSHREQ",163,0)
  SET PSSXML=PSSXML_$$DRUGPROS(PSSBASE)
"RTN","PSSHREQ",164,0)
  SET PSSXML=PSSXML_$$MEDPROF(PSSBASE)
"RTN","PSSHREQ",165,0)
 SET PSSXML=PSSXML_"</drugCheck>"
"RTN","PSSHREQ",166,0)
 ;
"RTN","PSSHREQ",167,0)
 ; Return the full drugCheck element
"RTN","PSSHREQ",168,0)
 QUIT PSSXML
"RTN","PSSHREQ",169,0)
 ;;
"RTN","PSSHREQ",170,0)
CHECKS(PSSBASE) ;
"RTN","PSSHREQ",171,0)
 ; @DESC Builds the checks PSSXML element
"RTN","PSSHREQ",172,0)
 ;
"RTN","PSSHREQ",173,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",174,0)
 ;
"RTN","PSSHREQ",175,0)
 ; @RETURNS An PSSXML string representing the checks element.
"RTN","PSSHREQ",176,0)
 ;
"RTN","PSSHREQ",177,0)
 NEW PSS,PSSXML
"RTN","PSSHREQ",178,0)
 ;
"RTN","PSSHREQ",179,0)
 ; If data in global, set prospective only to false
"RTN","PSSHREQ",180,0)
 IF $DATA(^TMP($JOB,PSSBASE,"IN","PROFILEVPROFILE")) DO
"RTN","PSSHREQ",181,0)
 . SET PSS("prospectiveOnly")=$$ATRIBUTE^PSSHRCOM("prospectiveOnly","false")
"RTN","PSSHREQ",182,0)
 . QUIT
"RTN","PSSHREQ",183,0)
 ;
"RTN","PSSHREQ",184,0)
 ; If no data in global, set prospective only to true
"RTN","PSSHREQ",185,0)
 IF '$DATA(^TMP($JOB,PSSBASE,"IN","PROFILEVPROFILE")) DO
"RTN","PSSHREQ",186,0)
 . SET PSS("prospectiveOnly")=$$ATRIBUTE^PSSHRCOM("prospectiveOnly","true")
"RTN","PSSHREQ",187,0)
 . QUIT
"RTN","PSSHREQ",188,0)
 ;
"RTN","PSSHREQ",189,0)
 ; OPTIONAL. TBA Right now set to false, will be used in future
"RTN","PSSHREQ",190,0)
 SET PSS("useCustomTables")=$$ATRIBUTE^PSSHRCOM("useCustomTables","true")
"RTN","PSSHREQ",191,0)
 ;
"RTN","PSSHREQ",192,0)
 SET PSSXML="<checks"
"RTN","PSSHREQ",193,0)
 SET PSSXML=PSSXML_" "_$GET(PSS("prospectiveOnly"))
"RTN","PSSHREQ",194,0)
 SET PSSXML=PSSXML_" "_$GET(PSS("useCustomTables"))
"RTN","PSSHREQ",195,0)
 SET PSSXML=PSSXML_" >"
"RTN","PSSHREQ",196,0)
  SET PSSXML=PSSXML_$$CHEKDOSE(PSSBASE)
"RTN","PSSHREQ",197,0)
  SET PSSXML=PSSXML_$$CHEKDRUG(PSSBASE)
"RTN","PSSHREQ",198,0)
  SET PSSXML=PSSXML_$$CHEKTHER(PSSBASE)
"RTN","PSSHREQ",199,0)
 SET PSSXML=PSSXML_"</checks>"
"RTN","PSSHREQ",200,0)
 ;
"RTN","PSSHREQ",201,0)
 ; Return the full drugCheck element
"RTN","PSSHREQ",202,0)
 QUIT PSSXML
"RTN","PSSHREQ",203,0)
 ;;
"RTN","PSSHREQ",204,0)
CHEKDOSE(PSSBASE) ;
"RTN","PSSHREQ",205,0)
 ; @DESC Sets the drugDoseCheck element
"RTN","PSSHREQ",206,0)
 ;
"RTN","PSSHREQ",207,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",208,0)
 ;
"RTN","PSSHREQ",209,0)
 ; @RETURNS An PSSXML string representing the doseCheck element
"RTN","PSSHREQ",210,0)
 ;
"RTN","PSSHREQ",211,0)
 NEW PSSXML
"RTN","PSSHREQ",212,0)
 ;
"RTN","PSSHREQ",213,0)
 SET PSSXML=""
"RTN","PSSHREQ",214,0)
 ;
"RTN","PSSHREQ",215,0)
 IF $DATA(^TMP($JOB,PSSBASE,"IN","DOSE")) DO
"RTN","PSSHREQ",216,0)
 . SET PSSXML="<drugDoseCheck>"
"RTN","PSSHREQ",217,0)
 . ; Get the demographics PSSXML section
"RTN","PSSHREQ",218,0)
 . SET PSSXML=PSSXML_$$DEMOGRAF(PSSBASE)
"RTN","PSSHREQ",219,0)
 . SET PSSXML=PSSXML_"</drugDoseCheck>"
"RTN","PSSHREQ",220,0)
 . QUIT
"RTN","PSSHREQ",221,0)
 ;
"RTN","PSSHREQ",222,0)
 QUIT PSSXML
"RTN","PSSHREQ",223,0)
 ;;
"RTN","PSSHREQ",224,0)
DEMOGRAF(PSSBASE) ;
"RTN","PSSHREQ",225,0)
 ; @DESC Builds the demographic element
"RTN","PSSHREQ",226,0)
 ;
"RTN","PSSHREQ",227,0)
 ; @PSSBASE Input global base
"RTN","PSSHREQ",228,0)
 ;
"RTN","PSSHREQ",229,0)
 ; @RETURNS An PSSXML string representation of the demographics element
"RTN","PSSHREQ",230,0)
 ;
"RTN","PSSHREQ",231,0)
 NEW PSSXML,PSS
"RTN","PSSHREQ",232,0)
 ;
"RTN","PSSHREQ",233,0)
 SET PSS("bsa")=$GET(^TMP($JOB,PSSBASE,"IN","DOSE","BSA"))
"RTN","PSSHREQ",234,0)
 SET PSS("bodySurfaceAreaInSqM")=$$ATRIBUTE^PSSHRCOM("bodySurfaceAreaInSqM",PSS("bsa"))
"RTN","PSSHREQ",235,0)
 ;
"RTN","PSSHREQ",236,0)
 SET PSS("wt")=$GET(^TMP($JOB,PSSBASE,"IN","DOSE","WT"))
"RTN","PSSHREQ",237,0)
 SET PSS("weightInKG")=$$ATRIBUTE^PSSHRCOM("weightInKG",PSS("wt"))
"RTN","PSSHREQ",238,0)
 ;
"RTN","PSSHREQ",239,0)
 SET PSS("age")=$GET(^TMP($JOB,PSSBASE,"IN","DOSE","AGE"))
"RTN","PSSHREQ",240,0)
 SET PSS("ageInDays")=$$ATRIBUTE^PSSHRCOM("ageInDays",PSS("age"))
"RTN","PSSHREQ",241,0)
 ;
"RTN","PSSHREQ",242,0)
 SET PSSXML="<demographics "_PSS("bodySurfaceAreaInSqM")_" "_PSS("weightInKG")_" "_PSS("ageInDays")_"/>"
"RTN","PSSHREQ",243,0)
 QUIT PSSXML
"RTN","PSSHREQ",244,0)
 ;;
"RTN","PSSHREQ",245,0)
CHEKDRUG(PSSBASE) ;
"RTN","PSSHREQ",246,0)
 ; @DESC Sets the drugDrugCheck element
"RTN","PSSHREQ",247,0)
 ;
"RTN","PSSHREQ",248,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",249,0)
 ;
"RTN","PSSHREQ",250,0)
 ; @RETURNS An PSSXML String representing drugDoseCheck element
"RTN","PSSHREQ",251,0)
 ;
"RTN","PSSHREQ",252,0)
 NEW PSSXML
"RTN","PSSHREQ",253,0)
 ;
"RTN","PSSHREQ",254,0)
 SET PSSXML=""
"RTN","PSSHREQ",255,0)
 ; If drug drug global set, add drug drug check
"RTN","PSSHREQ",256,0)
 IF $DATA(^TMP($JOB,PSSBASE,"IN","DRUGDRUG"))=1 DO
"RTN","PSSHREQ",257,0)
 . SET PSSXML="<drugDrugCheck />"
"RTN","PSSHREQ",258,0)
 . QUIT
"RTN","PSSHREQ",259,0)
 ;
"RTN","PSSHREQ",260,0)
 QUIT PSSXML
"RTN","PSSHREQ",261,0)
 ;;
"RTN","PSSHREQ",262,0)
CHEKTHER(PSSBASE) ;
"RTN","PSSHREQ",263,0)
 ; @DESC Sets the drugTherapyCheck element
"RTN","PSSHREQ",264,0)
 ;
"RTN","PSSHREQ",265,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",266,0)
 ;
"RTN","PSSHREQ",267,0)
 ; @RETURNS An PSSXML string representing the drugTherapyCheck element
"RTN","PSSHREQ",268,0)
 ;
"RTN","PSSHREQ",269,0)
 NEW PSSXML
"RTN","PSSHREQ",270,0)
 SET PSSXML=""
"RTN","PSSHREQ",271,0)
 ; If drug therapy set, add therapy check
"RTN","PSSHREQ",272,0)
 IF $DATA(^TMP($JOB,PSSBASE,"IN","THERAPY"))=1 DO
"RTN","PSSHREQ",273,0)
 . SET PSSXML="<drugTherapyCheck />"
"RTN","PSSHREQ",274,0)
 . QUIT
"RTN","PSSHREQ",275,0)
 ;
"RTN","PSSHREQ",276,0)
 QUIT PSSXML
"RTN","PSSHREQ",277,0)
 ;;
"RTN","PSSHREQ",278,0)
MEDPROF(PSSBASE) ;
"RTN","PSSHREQ",279,0)
 ; @DESC Builds a medicationProfile element
"RTN","PSSHREQ",280,0)
 ;
"RTN","PSSHREQ",281,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",282,0)
 ;
"RTN","PSSHREQ",283,0)
 ; @RETURNS PSSXML string element of the medicationProfile
"RTN","PSSHREQ",284,0)
 ;
"RTN","PSSHREQ",285,0)
 NEW PSS,PSSXML
"RTN","PSSHREQ",286,0)
 ;
"RTN","PSSHREQ",287,0)
 SET PSSXML="<medicationProfile>"
"RTN","PSSHREQ",288,0)
  SET PSSXML=PSSXML_$$DRUGPROF(PSSBASE)
"RTN","PSSHREQ",289,0)
 SET PSSXML=PSSXML_"</medicationProfile>"
"RTN","PSSHREQ",290,0)
 ;
"RTN","PSSHREQ",291,0)
 QUIT PSSXML
"RTN","PSSHREQ",292,0)
 ;;
"RTN","PSSHREQ",293,0)
DRUGPROS(PSSBASE) ;
"RTN","PSSHREQ",294,0)
 ; @DESC Builds prospectiveDrugs element
"RTN","PSSHREQ",295,0)
 ;
"RTN","PSSHREQ",296,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",297,0)
 ;
"RTN","PSSHREQ",298,0)
 ; @RETURNS An PSSXML string representing prospectiveDrugs
"RTN","PSSHREQ",299,0)
 ;
"RTN","PSSHREQ",300,0)
 NEW PSSXML,PSSDRUGS
"RTN","PSSHREQ",301,0)
 ;
"RTN","PSSHREQ",302,0)
 ; Read drug info from input global, store in PSSDRUGS hash
"RTN","PSSHREQ",303,0)
 DO READRUGS(PSSBASE,"PROSPECTIVE",.PSSDRUGS)
"RTN","PSSHREQ",304,0)
 D
"RTN","PSSHREQ",305,0)
 .I '$D(PSSDRUGS("DRUG")) S PSSXML="" Q  ;if no prospective drug just return null
"RTN","PSSHREQ",306,0)
 .; Write the drugs as PSSXML
"RTN","PSSHREQ",307,0)
 .SET PSSXML="<prospectiveDrugs>"_$$RITEDRGS(.PSSDRUGS)_"</prospectiveDrugs>"
"RTN","PSSHREQ",308,0)
 ;
"RTN","PSSHREQ",309,0)
 QUIT PSSXML
"RTN","PSSHREQ",310,0)
 ;;
"RTN","PSSHREQ",311,0)
DRUGPROF(PSSBASE) ;
"RTN","PSSHREQ",312,0)
 ; @DESC Builds a prospective drug element
"RTN","PSSHREQ",313,0)
 ;
"RTN","PSSHREQ",314,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",315,0)
 ;
"RTN","PSSHREQ",316,0)
 ; @RETURNS An PSSXML string representing profile drugs
"RTN","PSSHREQ",317,0)
 ;
"RTN","PSSHREQ",318,0)
 NEW PSSXML,PSSDRUGS
"RTN","PSSHREQ",319,0)
 ;
"RTN","PSSHREQ",320,0)
 ; Read from the input global and put in PSSDRUGS hash
"RTN","PSSHREQ",321,0)
 DO READRUGS(PSSBASE,"PROFILE",.PSSDRUGS)
"RTN","PSSHREQ",322,0)
 ; Write the profile drugs as PSSXML
"RTN","PSSHREQ",323,0)
 SET PSSXML=$$RITEDRGS(.PSSDRUGS)
"RTN","PSSHREQ",324,0)
 ;
"RTN","PSSHREQ",325,0)
 QUIT PSSXML
"RTN","PSSHREQ",326,0)
 ;;
"RTN","PSSHREQ",327,0)
READRUGS(PSSBASE,DRUGTYPE,PSSDRUGS) ;
"RTN","PSSHREQ",328,0)
 ; @DESC Builds either a prospective or a profile drug element.
"RTN","PSSHREQ",329,0)
 ; Note the "DRUGTYPE" parameter.  This param allows for re-use, so either
"RTN","PSSHREQ",330,0)
 ; a profile or a prospective drug can be created.
"RTN","PSSHREQ",331,0)
 ;
"RTN","PSSHREQ",332,0)
 ; @PSSBASE Base of input global
"RTN","PSSHREQ",333,0)
 ; @DRUGTYPE A drug type, either Prospective or Profile
"RTN","PSSHREQ",334,0)
 ; @PSSDRUGS ByRef, variable to store drug attributes in
"RTN","PSSHREQ",335,0)
 ;
"RTN","PSSHREQ",336,0)
 ; @RETURNS Nothing, values stored in drugs variable
"RTN","PSSHREQ",337,0)
 ;
"RTN","PSSHREQ",338,0)
 NEW PSS
"RTN","PSSHREQ",339,0)
 ;
"RTN","PSSHREQ",340,0)
 SET PSS("ien")=""
"RTN","PSSHREQ",341,0)
 SET PSS("count")=0
"RTN","PSSHREQ",342,0)
 ;
"RTN","PSSHREQ",343,0)
 ; Loop through the unique order numbers
"RTN","PSSHREQ",344,0)
 SET PSS("orderNumber")=""
"RTN","PSSHREQ",345,0)
 FOR  SET PSS("orderNumber")=$ORDER(^TMP($JOB,PSSBASE,"IN",DRUGTYPE,PSS("orderNumber"))) QUIT:PSS("orderNumber")=""  DO
"RTN","PSSHREQ",346,0)
 . SET PSS("count")=PSS("count")+1
"RTN","PSSHREQ",347,0)
 . SET PSS("value")=$GET(^TMP($JOB,PSSBASE,"IN",DRUGTYPE,PSS("orderNumber")))
"RTN","PSSHREQ",348,0)
 . ; Set the drug order number
"RTN","PSSHREQ",349,0)
 . SET PSSDRUGS("DRUG",PSS("count"),"orderNumber")=PSS("orderNumber")
"RTN","PSSHREQ",350,0)
 . ; Set the drug gcn sequence number
"RTN","PSSHREQ",351,0)
 . SET PSSDRUGS("DRUG",PSS("count"),"gcn")=+$PIECE(PSS("value"),"^",1)
"RTN","PSSHREQ",352,0)
 . ; Set the drug vuid
"RTN","PSSHREQ",353,0)
 . SET PSSDRUGS("DRUG",PSS("count"),"vuid")=+$PIECE(PSS("value"),"^",2)
"RTN","PSSHREQ",354,0)
 . ; Set the drug ien
"RTN","PSSHREQ",355,0)
 . SET PSSDRUGS("DRUG",PSS("count"),"ien")=+$PIECE(PSS("value"),"^",3)
"RTN","PSSHREQ",356,0)
 . ; Set the drug name
"RTN","PSSHREQ",357,0)
 . SET PSSDRUGS("DRUG",PSS("count"),"drugName")=$PIECE(PSS("value"),"^",4)
"RTN","PSSHREQ",358,0)
 . ; Set the cprs order number
"RTN","PSSHREQ",359,0)
 . SET PSSDRUGS("DRUG",PSS("count"),"cprsOrderNumber")=$PIECE(PSS("value"),"^",5)
"RTN","PSSHREQ",360,0)
 . ; Set the package
"RTN","PSSHREQ",361,0)
 . SET PSSDRUGS("DRUG",PSS("count"),"package")=$PIECE(PSS("value"),"^",6)
"RTN","PSSHREQ",362,0)
 . ;
"RTN","PSSHREQ",363,0)
 . ; Get the possible dose information for the drug
"RTN","PSSHREQ",364,0)
 . DO READDOSE(PSSBASE,.PSSDRUGS,PSS("count"),PSS("orderNumber"))
"RTN","PSSHREQ",365,0)
 . QUIT
"RTN","PSSHREQ",366,0)
 ;
"RTN","PSSHREQ",367,0)
 QUIT
"RTN","PSSHREQ",368,0)
 ;;
"RTN","PSSHREQ",369,0)
RITEDRGS(PSSDRUGS) ;
"RTN","PSSHREQ",370,0)
 ; @DESC Loop through the drugs and return PSSXML
"RTN","PSSHREQ",371,0)
 ;
"RTN","PSSHREQ",372,0)
 ; @PSSDRUGS Array containing the list of drugs
"RTN","PSSHREQ",373,0)
 ;
"RTN","PSSHREQ",374,0)
 ; @RETURNS PSSXML representing the drugs in array
"RTN","PSSHREQ",375,0)
 ;
"RTN","PSSHREQ",376,0)
 NEW PSSCOUNT,PSSXML
"RTN","PSSHREQ",377,0)
 ;
"RTN","PSSHREQ",378,0)
 SET PSSXML=""
"RTN","PSSHREQ",379,0)
 SET PSSCOUNT=""
"RTN","PSSHREQ",380,0)
 FOR  SET PSSCOUNT=$ORDER(PSSDRUGS("DRUG",PSSCOUNT)) QUIT:PSSCOUNT=""  DO
"RTN","PSSHREQ",381,0)
 . ; loop through drugs and append to PSSXML
"RTN","PSSHREQ",382,0)
 . SET PSSXML=PSSXML_$$RITEDRUG(.PSSDRUGS,PSSCOUNT)
"RTN","PSSHREQ",383,0)
 . QUIT
"RTN","PSSHREQ",384,0)
 ;
"RTN","PSSHREQ",385,0)
 QUIT PSSXML
"RTN","PSSHREQ",386,0)
 ;;
"RTN","PSSHREQ",387,0)
RITEDRUG(PSSDRUGS,PSSCOUNT) ;
"RTN","PSSHREQ",388,0)
 ; @DESC Builds a single drug xml element
"RTN","PSSHREQ",389,0)
 ;
"RTN","PSSHREQ",390,0)
 ; @PSSDRUGS A handle to the drug object
"RTN","PSSHREQ",391,0)
 ; @PSSCOUNT The counter where the information should be taken from
"RTN","PSSHREQ",392,0)
 ;
"RTN","PSSHREQ",393,0)
 ; @RETURNS An PSSXML string representing a single drug
"RTN","PSSHREQ",394,0)
 ;
"RTN","PSSHREQ",395,0)
 NEW PSS,PSSXML,PSSORDR
"RTN","PSSHREQ",396,0)
 ;
"RTN","PSSHREQ",397,0)
 IF $DATA(PSSDRUGS("DRUG",PSSCOUNT,"drugName")) DO
"RTN","PSSHREQ",398,0)
 . SET PSS("drugName")=$$ATRIBUTE^PSSHRCOM("drugName",PSSDRUGS("DRUG",PSSCOUNT,"drugName"))
"RTN","PSSHREQ",399,0)
 ;
"RTN","PSSHREQ",400,0)
 SET PSS("gcnSeqNo")=$$ATRIBUTE^PSSHRCOM("gcnSeqNo",PSSDRUGS("DRUG",PSSCOUNT,"gcn"))
"RTN","PSSHREQ",401,0)
 ;
"RTN","PSSHREQ",402,0)
 SET PSS("ien")=$$ATRIBUTE^PSSHRCOM("ien",PSSDRUGS("DRUG",PSSCOUNT,"ien"))
"RTN","PSSHREQ",403,0)
 ;
"RTN","PSSHREQ",404,0)
 ; Concatenate the orderNumber, cprs order number, and package
"RTN","PSSHREQ",405,0)
 ; ex. orderNumber|cprsOrderNumber|package
"RTN","PSSHREQ",406,0)
 SET PSSORDR=PSSDRUGS("DRUG",PSSCOUNT,"orderNumber")_"|"_$GET(PSSDRUGS("DRUG",PSSCOUNT,"cprsOrderNumber"))_"|"_$GET(PSSDRUGS("DRUG",PSSCOUNT,"package"))
"RTN","PSSHREQ",407,0)
 ;
"RTN","PSSHREQ",408,0)
 SET PSS("orderNumber")=$$ATRIBUTE^PSSHRCOM("orderNumber",PSSORDR)
"RTN","PSSHREQ",409,0)
 ;
"RTN","PSSHREQ",410,0)
 ; vuid is optional
"RTN","PSSHREQ",411,0)
 IF $DATA(PSSDRUGS("DRUG",PSSCOUNT,"vuid")) DO
"RTN","PSSHREQ",412,0)
 . SET PSS("vuid")=$$ATRIBUTE^PSSHRCOM("vuid",PSSDRUGS("DRUG",PSSCOUNT,"vuid"))
"RTN","PSSHREQ",413,0)
 ;
"RTN","PSSHREQ",414,0)
 SET PSSXML="<drug "_PSS("drugName")_" "_PSS("gcnSeqNo")_" "_PSS("ien")_" "_PSS("orderNumber")_" "_PSS("vuid")_" >"
"RTN","PSSHREQ",415,0)
 SET PSSXML=PSSXML_$$RITEDOSE(.PSSDRUGS,PSSCOUNT)
"RTN","PSSHREQ",416,0)
 SET PSSXML=PSSXML_"</drug>"
"RTN","PSSHREQ",417,0)
 ;
"RTN","PSSHREQ",418,0)
 QUIT PSSXML
"RTN","PSSHREQ",419,0)
 ;;
"RTN","PSSHREQ",420,0)
READDOSE(PSSBASE,PSSHASH,PSSCOUNT,ORDRNM) ;
"RTN","PSSHREQ",421,0)
 ; @DESC Sets the individual drugDose elements, including all dosing amounts,
"RTN","PSSHREQ",422,0)
 ; frequency, etc for an individual drug.
"RTN","PSSHREQ",423,0)
 ;
"RTN","PSSHREQ",424,0)
 ; @DOSE A handle to the drug dose you want to turn into PSSXML
"RTN","PSSHREQ",425,0)
 ;
"RTN","PSSHREQ",426,0)
 ; @RETURNS Nothing, values stored in hash
"RTN","PSSHREQ",427,0)
 ;
"RTN","PSSHREQ",428,0)
 NEW PSS
"RTN","PSSHREQ",429,0)
 ;
"RTN","PSSHREQ",430,0)
 ; If no drug dose information exist for the drug quit
"RTN","PSSHREQ",431,0)
 IF $DATA(^TMP($JOB,PSSBASE,"IN","DOSE",ORDRNM))=0 SET PSSHASH("DRUG",PSSCOUNT,"hasDose")=0
"RTN","PSSHREQ",432,0)
 IF $DATA(^TMP($JOB,PSSBASE,"IN","DOSE",ORDRNM))=0 QUIT
"RTN","PSSHREQ",433,0)
 IF $DATA(^TMP($JOB,PSSBASE,"IN","DOSE",ORDRNM))>0 SET PSSHASH("DRUG",PSSCOUNT,"hasDose")=1
"RTN","PSSHREQ",434,0)
 ;
"RTN","PSSHREQ",435,0)
 SET PSS("value")=$GET(^TMP($JOB,PSSBASE,"IN","DOSE",ORDRNM))
"RTN","PSSHREQ",436,0)
 ; If specific get values (doseAmount,doseUnit,doseRate,frequency,
"RTN","PSSHREQ",437,0)
 ; duration,durationRate,medicalRoute,doseType)
"RTN","PSSHREQ",438,0)
 SET PSSHASH("DRUG",PSSCOUNT,"doseAmount")=$PIECE(PSS("value"),"^",5)
"RTN","PSSHREQ",439,0)
 SET PSSHASH("DRUG",PSSCOUNT,"doseUnit")=$PIECE(PSS("value"),"^",6)
"RTN","PSSHREQ",440,0)
 SET PSSHASH("DRUG",PSSCOUNT,"doseRate")=$PIECE(PSS("value"),"^",7)
"RTN","PSSHREQ",441,0)
 SET PSSHASH("DRUG",PSSCOUNT,"frequency")=$PIECE(PSS("value"),"^",8)
"RTN","PSSHREQ",442,0)
 SET PSSHASH("DRUG",PSSCOUNT,"duration")=$PIECE(PSS("value"),"^",9)
"RTN","PSSHREQ",443,0)
 SET PSSHASH("DRUG",PSSCOUNT,"durationRate")=$PIECE(PSS("value"),"^",10)
"RTN","PSSHREQ",444,0)
 SET PSSHASH("DRUG",PSSCOUNT,"route")=$PIECE(PSS("value"),"^",11)
"RTN","PSSHREQ",445,0)
 SET PSSHASH("DRUG",PSSCOUNT,"doseType")=$PIECE(PSS("value"),"^",12)
"RTN","PSSHREQ",446,0)
 QUIT
"RTN","PSSHREQ",447,0)
 ;;
"RTN","PSSHREQ",448,0)
RITEDOSE(PSSHASH,I) ;
"RTN","PSSHREQ",449,0)
 ; @DESC Writes the doseInformation PSSXML element
"RTN","PSSHREQ",450,0)
 ;
"RTN","PSSHREQ",451,0)
 ; @PSSHASH Hash value with variables used to create element
"RTN","PSSHREQ",452,0)
 ;
"RTN","PSSHREQ",453,0)
 ; @RETURNS A valid drugDose XML element
"RTN","PSSHREQ",454,0)
 ;
"RTN","PSSHREQ",455,0)
 NEW PSSXML
"RTN","PSSHREQ",456,0)
 ;
"RTN","PSSHREQ",457,0)
 SET PSSXML=""
"RTN","PSSHREQ",458,0)
 IF +$GET(PSSHASH("DRUG",I,"hasDose"))=0 QUIT PSSXML
"RTN","PSSHREQ",459,0)
 ;
"RTN","PSSHREQ",460,0)
 ; Create dose information
"RTN","PSSHREQ",461,0)
 SET PSSXML="<doseInformation>"
"RTN","PSSHREQ",462,0)
 SET PSSXML=PSSXML_"<doseType>"_PSSHASH("DRUG",I,"doseType")_"</doseType>"
"RTN","PSSHREQ",463,0)
 SET PSSXML=PSSXML_"<doseAmount>"_PSSHASH("DRUG",I,"doseAmount")_"</doseAmount>"
"RTN","PSSHREQ",464,0)
 SET PSSXML=PSSXML_"<doseUnit>"_PSSHASH("DRUG",I,"doseUnit")_"</doseUnit>"
"RTN","PSSHREQ",465,0)
 SET PSSXML=PSSXML_"<doseRate>"_PSSHASH("DRUG",I,"doseRate")_"</doseRate>"
"RTN","PSSHREQ",466,0)
 I $L(PSSHASH("DRUG",I,"frequency")) SET PSSXML=PSSXML_"<frequency>"_PSSHASH("DRUG",I,"frequency")_"</frequency>"
"RTN","PSSHREQ",467,0)
 I $L(PSSHASH("DRUG",I,"duration")) SET PSSXML=PSSXML_"<duration>"_PSSHASH("DRUG",I,"duration")_"</duration>"
"RTN","PSSHREQ",468,0)
 I $L(PSSHASH("DRUG",I,"durationRate")) SET PSSXML=PSSXML_"<durationRate>"_PSSHASH("DRUG",I,"durationRate")_"</durationRate>"
"RTN","PSSHREQ",469,0)
 SET PSSXML=PSSXML_"<route>"_PSSHASH("DRUG",I,"route")_"</route>"
"RTN","PSSHREQ",470,0)
 ;
"RTN","PSSHREQ",471,0)
 ; Close off dose information
"RTN","PSSHREQ",472,0)
 SET PSSXML=PSSXML_"</doseInformation>"
"RTN","PSSHREQ",473,0)
 ;
"RTN","PSSHREQ",474,0)
 QUIT PSSXML
"RTN","PSSHREQ",475,0)
 ;;
"RTN","PSSHRIT")
0^13^B156393255
"RTN","PSSHRIT",1,0)
PSSHRIT ;WOIFO/SG,PO - Transmits a "ping" to determine if FDB server is down and record the down time ;7/30/2008
"RTN","PSSHRIT",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSHRIT",3,0)
 ;
"RTN","PSSHRIT",4,0)
 ;External reference to IN^PSSHRQ2 supported by DBIA 5369
"RTN","PSSHRIT",5,0)
 ;
"RTN","PSSHRIT",6,0)
 Q
"RTN","PSSHRIT",7,0)
PINGCHK ; do ping test, if not passed record it and send a message.
"RTN","PSSHRIT",8,0)
 ; Called from PSS INTERFACE SCHEDULER option
"RTN","PSSHRIT",9,0)
 N STATUS
"RTN","PSSHRIT",10,0)
 F  L +^PS(59.74,"PINGCHK^PSSHRIT"):1 Q:$T
"RTN","PSSHRIT",11,0)
 S STATUS=$$PINGTST()
"RTN","PSSHRIT",12,0)
 S STATUS=$$PINGFILE(STATUS)
"RTN","PSSHRIT",13,0)
 I STATUS=-1 D SMSGDWN   ; if failed for the first time (a new entry created) send a message that interface is down.
"RTN","PSSHRIT",14,0)
 L -^PS(59.74,"PINGCHK^PSSHRIT")
"RTN","PSSHRIT",15,0)
 Q
"RTN","PSSHRIT",16,0)
 ;
"RTN","PSSHRIT",17,0)
PINGTST() ; test the ping by sending a ping request.
"RTN","PSSHRIT",18,0)
 ;return 0 - ping successful,  -1^reason  ping failed
"RTN","PSSHRIT",19,0)
 N BASE,STATUS
"RTN","PSSHRIT",20,0)
 S BASE="PINGTST^"_$T(+0)
"RTN","PSSHRIT",21,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",22,0)
 S ^TMP($J,BASE,"IN","PING")=""
"RTN","PSSHRIT",23,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",24,0)
 S STATUS=$G(^TMP($J,BASE,"OUT",0))
"RTN","PSSHRIT",25,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",26,0)
 Q STATUS
"RTN","PSSHRIT",27,0)
 ;
"RTN","PSSHRIT",28,0)
PINGFILE(STATUS) ;  file the ping results
"RTN","PSSHRIT",29,0)
 ; Input
"RTN","PSSHRIT",30,0)
 ;   Status - Ping results
"RTN","PSSHRIT",31,0)
 ; Return 
"RTN","PSSHRIT",32,0)
 ;     -1 - if creates an entry - means the first it noticed PEPS is unavailable
"RTN","PSSHRIT",33,0)
 ;      0 - if does not create/update a record, 
"RTN","PSSHRIT",34,0)
 ;      1 - if updates the last entry
"RTN","PSSHRIT",35,0)
 N LIEN,LASTAVL
"RTN","PSSHRIT",36,0)
 S STATUS=+$G(STATUS)
"RTN","PSSHRIT",37,0)
 S LIEN=+$O(^PS(59.74,":"),-1)           ; get last entry
"RTN","PSSHRIT",38,0)
 S LASTAVL=$P($G(^PS(59.74,LIEN,0)),U,2) ; get last available date/time
"RTN","PSSHRIT",39,0)
 I STATUS=0,'LIEN Q 0                          ; do nothing
"RTN","PSSHRIT",40,0)
 I STATUS=0,LIEN,LASTAVL Q 0                   ; do nothing
"RTN","PSSHRIT",41,0)
 I STATUS=0,LIEN,'LASTAVL D UPDATENT(LIEN) Q 1 ; update file
"RTN","PSSHRIT",42,0)
 I STATUS=-1,LIEN,LASTAVL D NEWENT Q -1        ; create new entry
"RTN","PSSHRIT",43,0)
 I STATUS=-1,'LIEN D NEWENT Q -1               ; create new entry
"RTN","PSSHRIT",44,0)
 Q 0
"RTN","PSSHRIT",45,0)
NEWENT ; create a new entry in FDB INTERFACE DATA (#59.74) file.
"RTN","PSSHRIT",46,0)
 N DIC,DO
"RTN","PSSHRIT",47,0)
 S X=$$NOW^XLFDT(),DIC="^PS(59.74,",DIC(0)="Z" D FILE^DICN
"RTN","PSSHRIT",48,0)
 K X,Y
"RTN","PSSHRIT",49,0)
 Q
"RTN","PSSHRIT",50,0)
 ;
"RTN","PSSHRIT",51,0)
UPDATENT(LAST) ; update the last entry in FDB INTERFACE DATA (#59.74) file.
"RTN","PSSHRIT",52,0)
 ;edit flag once it is created.
"RTN","PSSHRIT",53,0)
 N DIE,NEWVAL,DWNTIME,DA,DR,DIFF
"RTN","PSSHRIT",54,0)
 S DA=LAST
"RTN","PSSHRIT",55,0)
 S NEWVAL=$$NOW^XLFDT()   ;$$NOW()
"RTN","PSSHRIT",56,0)
 S DWNTIME=+$G(^PS(59.74,DA,0))
"RTN","PSSHRIT",57,0)
 Q:'DWNTIME
"RTN","PSSHRIT",58,0)
 S DIFF=$$FMDIFF^XLFDT(NEWVAL,DWNTIME,2)
"RTN","PSSHRIT",59,0)
 S DIFF=DIFF\60  ;IN MINUTES
"RTN","PSSHRIT",60,0)
 S DIE="^PS(59.74,",DR="1///^S X=NEWVAL;2///^S X=DIFF"
"RTN","PSSHRIT",61,0)
 D ^DIE
"RTN","PSSHRIT",62,0)
 D SMSGRST  ; send a message that interface connection is restored
"RTN","PSSHRIT",63,0)
 Q
"RTN","PSSHRIT",64,0)
 ;
"RTN","PSSHRIT",65,0)
SMSGDWN ; send a bulletin that Interface connection is down.
"RTN","PSSHRIT",66,0)
 N XMB,XMTEXT,XMY,PSFDB,XMV,XMDUN,XMDUZ
"RTN","PSSHRIT",67,0)
 S XMDUZ="PSS INTERFACE SCHEDULER"
"RTN","PSSHRIT",68,0)
 S XMB="PSS FDB INTERFACE"
"RTN","PSSHRIT",69,0)
 S XMTEXT="PSFDB"
"RTN","PSSHRIT",70,0)
 ; check to if dosing check is on.
"RTN","PSSHRIT",71,0)
 I $T(DS^PSSDSAPI)]"",$$DS^PSSDSAPI() D
"RTN","PSSHRIT",72,0)
 .S PSFDB(1)="Connection to Vendor Database is down!  No Drug-Drug Interaction, Duplicate"
"RTN","PSSHRIT",73,0)
 .S PSFDB(2)="Therapy or Dosing Order Checks will be performed until the connection is"
"RTN","PSSHRIT",74,0)
 .S PSFDB(3)="reestablished!!!"
"RTN","PSSHRIT",75,0)
 E  D
"RTN","PSSHRIT",76,0)
 .S PSFDB(1)="Connection to Vendor Database is down!  No Drug-Drug Interaction or Duplicate"
"RTN","PSSHRIT",77,0)
 .S PSFDB(2)="Therapy Order Checks will be performed until the connection is reestablished!!!"
"RTN","PSSHRIT",78,0)
 S XMY("G.PSS ORDER CHECKS")=""
"RTN","PSSHRIT",79,0)
 D ^XMB
"RTN","PSSHRIT",80,0)
 Q
"RTN","PSSHRIT",81,0)
 ;
"RTN","PSSHRIT",82,0)
SMSGRST ; send a bulletin that Interface connection is restored
"RTN","PSSHRIT",83,0)
 N XMB,XMTEXT,XMY,PSFDB,XMV,XMDUN,XMDUZ
"RTN","PSSHRIT",84,0)
 S XMDUZ="PSS INTERFACE SCHEDULER"
"RTN","PSSHRIT",85,0)
 S XMB="PSS FDB INTERFACE RESTORED"
"RTN","PSSHRIT",86,0)
 S XMTEXT="PSFDB"
"RTN","PSSHRIT",87,0)
 ; check to if dosing check is on.
"RTN","PSSHRIT",88,0)
 I $T(DS^PSSDSAPI)]"",$$DS^PSSDSAPI() D
"RTN","PSSHRIT",89,0)
 .S PSFDB(1)="Connection to Vendor Database has been restored! Drug-Drug Interactions,"
"RTN","PSSHRIT",90,0)
 .S PSFDB(2)="Duplicate Therapy and Dosing Order Checks can now be performed."
"RTN","PSSHRIT",91,0)
 E  D
"RTN","PSSHRIT",92,0)
 .S PSFDB(1)="Connection to Vendor Database has been restored! Drug-Drug Interactions or"
"RTN","PSSHRIT",93,0)
 .S PSFDB(2)="Duplicate Therapy Order Checks can now be performed."
"RTN","PSSHRIT",94,0)
 S XMY("G.PSS ORDER CHECKS")=""
"RTN","PSSHRIT",95,0)
 D ^XMB
"RTN","PSSHRIT",96,0)
 Q
"RTN","PSSHRIT",97,0)
 ;
"RTN","PSSHRIT",98,0)
TASKIT(FREQ,START) ; create/update scheduling option start time and frequency
"RTN","PSSHRIT",99,0)
 ; Input:
"RTN","PSSHRIT",100,0)
 ;   FREQ  - Optional - rescheduling frequency in minutes (default 15 minutes)
"RTN","PSSHRIT",101,0)
 ;  START  - Optional - start time (default is current time + 4 minutes)
"RTN","PSSHRIT",102,0)
 ; Note: if START is less than 4 minutes in future,  it will be defaulted to 
"RTN","PSSHRIT",103,0)
 ;       current time + 4 minutes.
"RTN","PSSHRIT",104,0)
 ;
"RTN","PSSHRIT",105,0)
 K PSERROR
"RTN","PSSHRIT",106,0)
 S FREQ=$G(FREQ,15)
"RTN","PSSHRIT",107,0)
 S FREQ=FREQ*60_"S"
"RTN","PSSHRIT",108,0)
 S START=$G(START,$$NOW^XLFDT())
"RTN","PSSHRIT",109,0)
 ;
"RTN","PSSHRIT",110,0)
 ; if start date/time is less than 4 minutes in future make it 4 minutes from now
"RTN","PSSHRIT",111,0)
 S:$$FMDIFF^XLFDT(START,$$NOW^XLFDT(),2)<240 START=$$FMADD^XLFDT($$NOW^XLFDT(),0,0,4)
"RTN","PSSHRIT",112,0)
 ;
"RTN","PSSHRIT",113,0)
 ; create the option schedule if it does not exist. return PSERROR=-1 if fails.
"RTN","PSSHRIT",114,0)
 ; in some situation when it fails, does not create the PSERROR variable
"RTN","PSSHRIT",115,0)
 D RESCH^XUTMOPT("PSS INTERFACE SCHEDULER",START,"",FREQ,"L",.PSERROR)
"RTN","PSSHRIT",116,0)
 Q
"RTN","PSSHRIT",117,0)
 ;
"RTN","PSSHRIT",118,0)
SCHDOPT ; edit option scheduling
"RTN","PSSHRIT",119,0)
 ; Called from "PSS SCHEDULE PEPS INTERFACE CK" option to create and/or edit the scheduling
"RTN","PSSHRIT",120,0)
 ; parameters for "PSS INTERFACE SCHEDULER" option in OPTION SCHEDULING file. 
"RTN","PSSHRIT",121,0)
 ; The "PSS SCHEDULE PEPS INTERFACE CK" option is installed by PAS*1.0*117 package.
"RTN","PSSHRIT",122,0)
 N PSSROOT
"RTN","PSSHRIT",123,0)
 ; check to see if the option is defined in option scheduler file and it is tasked.
"RTN","PSSHRIT",124,0)
 ; if not create and task the option.
"RTN","PSSHRIT",125,0)
 D OPTSTAT^XUTMOPT("PSS INTERFACE SCHEDULER",.PSSROOT)
"RTN","PSSHRIT",126,0)
 I '+$G(PSSROOT(1)) D TASKIT(15)
"RTN","PSSHRIT",127,0)
 ;
"RTN","PSSHRIT",128,0)
 D EDIT^XUTMOPT("PSS INTERFACE SCHEDULER")
"RTN","PSSHRIT",129,0)
 Q
"RTN","PSSHRIT",130,0)
 ;
"RTN","PSSHRIT",131,0)
SLASTRUN(LASTRUN) ; set last run time
"RTN","PSSHRIT",132,0)
 N SUB,PURGE,NOW,DESC
"RTN","PSSHRIT",133,0)
 S DESC="This stores the latest data on FDB interface"
"RTN","PSSHRIT",134,0)
 S NOW=$$NOW^XLFDT()\1
"RTN","PSSHRIT",135,0)
 S PURGE=$$FMADD^XLFDT(NOW,30)
"RTN","PSSHRIT",136,0)
 S ^XTMP("PSSRUN",0)=PURGE_U_NOW_U_DESC
"RTN","PSSHRIT",137,0)
 S ^XTMP("PSSRUN","LASTRUN")=LASTRUN
"RTN","PSSHRIT",138,0)
 Q
"RTN","PSSHRIT",139,0)
 ;
"RTN","PSSHRIT",140,0)
GLASTRUN() ; get last run time
"RTN","PSSHRIT",141,0)
 Q $G(^XTMP("PSSRUN","LASTRUN"))
"RTN","PSSHRIT",142,0)
 ;
"RTN","PSSHRIT",143,0)
RUNTEST ; run interaction test to PEPS server
"RTN","PSSHRIT",144,0)
 ; called from PSS CHECK PEPS SERVICES SETUP option
"RTN","PSSHRIT",145,0)
 D KILL^XUSCLEAN
"RTN","PSSHRIT",146,0)
 N STATUS,X
"RTN","PSSHRIT",147,0)
 S STATUS=$$CONCHK()
"RTN","PSSHRIT",148,0)
 D PRSRTN Q:(STATUS=0)!(X="^") 
"RTN","PSSHRIT",149,0)
 ;
"RTN","PSSHRIT",150,0)
 S STATUS=$$INTERACT()
"RTN","PSSHRIT",151,0)
 D PRSRTN Q:X="^" 
"RTN","PSSHRIT",152,0)
 ;
"RTN","PSSHRIT",153,0)
 S STATUS=$$DUPTHRPY()
"RTN","PSSHRIT",154,0)
 D PRSRTN Q:X="^" 
"RTN","PSSHRIT",155,0)
 ;
"RTN","PSSHRIT",156,0)
 S STATUS=$$DOSECHK() ;
"RTN","PSSHRIT",157,0)
 D PRSRTN Q:X="^" 
"RTN","PSSHRIT",158,0)
 ;
"RTN","PSSHRIT",159,0)
 S STATUS=$$CUSTOM()
"RTN","PSSHRIT",160,0)
 D PRSRTN Q:X="^" 
"RTN","PSSHRIT",161,0)
 Q
"RTN","PSSHRIT",162,0)
 ;
"RTN","PSSHRIT",163,0)
CONCHK() ; check connection
"RTN","PSSHRIT",164,0)
 ; Return 1 if OK, 0 if not OK.
"RTN","PSSHRIT",165,0)
 ; 
"RTN","PSSHRIT",166,0)
 N MESSAGE,Y,STATUS,RESULT
"RTN","PSSHRIT",167,0)
 W !,"Checking Vendor Database Connection"
"RTN","PSSHRIT",168,0)
 S RESULT=$$PINGTST()
"RTN","PSSHRIT",169,0)
 I RESULT=0 D
"RTN","PSSHRIT",170,0)
 .W "...OK"
"RTN","PSSHRIT",171,0)
 E  D
"RTN","PSSHRIT",172,0)
 .W "...",!!,"    Connection could not be made to Vendor database."
"RTN","PSSHRIT",173,0)
 .S Y=$$GLASTRUN()
"RTN","PSSHRIT",174,0)
 .I Y D
"RTN","PSSHRIT",175,0)
 ..D DD^%DT                      ; convert last reached time in Y to external format
"RTN","PSSHRIT",176,0)
 ..W !,"       Last reached @"_$E(Y,1,18)
"RTN","PSSHRIT",177,0)
 W !
"RTN","PSSHRIT",178,0)
 Q $S(RESULT=0:1,1:0)
"RTN","PSSHRIT",179,0)
 ; 
"RTN","PSSHRIT",180,0)
INTERACT() ; check drug-drug interaction.
"RTN","PSSHRIT",181,0)
 ; Return 1 if OK, 0 if not OK.
"RTN","PSSHRIT",182,0)
 ;
"RTN","PSSHRIT",183,0)
 N PSORDER,PSDRUG1,PSDRUG2,BASE,INFO,INTRO,PSSPEC
"RTN","PSSHRIT",184,0)
 N PSSLEFT S PSSLEFT=4     ; left margin for results
"RTN","PSSHRIT",185,0)
 S BASE=$T(+0)_" INTERACT"
"RTN","PSSHRIT",186,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",187,0)
 S ^TMP($J,BASE,"IN","DRUGDRUG")=""
"RTN","PSSHRIT",188,0)
 S PSORDER="I;1464P;PROSPECTIVE;2",PSDRUG1="WARFARIN 10MG TAB",PSDRUG2="ASPIRIN 325MG TAB"
"RTN","PSSHRIT",189,0)
 SET ^TMP($JOB,BASE,"IN","PROSPECTIVE","I;1464P;PROSPECTIVE;2")="6559^4005201^^WARFARIN 10MG TAB"
"RTN","PSSHRIT",190,0)
 SET ^TMP($JOB,BASE,"IN","PROSPECTIVE","I;91464P;PROSPECTIVE;2")="4376^4005735^^ASPIRIN 325MG TAB"
"RTN","PSSHRIT",191,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",192,0)
 ;
"RTN","PSSHRIT",193,0)
 S INTRO="Performing Drug-Drug Interaction Order Check for "_PSDRUG2_" and "_PSDRUG1
"RTN","PSSHRIT",194,0)
 S INFO=$G(^TMP($J,BASE,"OUT","DRUGDRUG","S",PSDRUG1,PSORDER,1,"PMON",9,0))
"RTN","PSSHRIT",195,0)
 S INTRO=INTRO_$S($L(INFO):"...OK",1:"...Not OK")
"RTN","PSSHRIT",196,0)
 W !
"RTN","PSSHRIT",197,0)
 I '$L(INFO) D
"RTN","PSSHRIT",198,0)
 .D OUTPUT(INTRO)
"RTN","PSSHRIT",199,0)
 .W ! D OUTPUT("Drug-Drug Interaction Order Check could not be performed.",PSSLEFT)
"RTN","PSSHRIT",200,0)
 E  D
"RTN","PSSHRIT",201,0)
 . D OUTPUT(INTRO)
"RTN","PSSHRIT",202,0)
 . W !
"RTN","PSSHRIT",203,0)
 . S PSSPEC("CLINICAL EFFECTS:  ")=""
"RTN","PSSHRIT",204,0)
 . S INFO=$$REPLACE^XLFSTR(INFO,.PSSPEC)
"RTN","PSSHRIT",205,0)
 . S INFO="Significant Drug Interaction: "_INFO
"RTN","PSSHRIT",206,0)
 . D OUTPUT(INFO,PSSLEFT)
"RTN","PSSHRIT",207,0)
 ;
"RTN","PSSHRIT",208,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",209,0)
 Q $S($L(INFO)=0:0,1:1)
"RTN","PSSHRIT",210,0)
 ;
"RTN","PSSHRIT",211,0)
DUPTHRPY() ; check duplicate therapy
"RTN","PSSHRIT",212,0)
 ; Return 1 if OK, 0 if not OK.
"RTN","PSSHRIT",213,0)
 ; 
"RTN","PSSHRIT",214,0)
 N PSORDER,PSDRUG1,PSDRUG2,BASE,CLAS1,CLAS2,LINE1,LINE2,INTRO
"RTN","PSSHRIT",215,0)
 N PSSLEFT S PSSLEFT=4     ; left margin for results
"RTN","PSSHRIT",216,0)
 S BASE=$T(+0)_" DUPTHRPY"
"RTN","PSSHRIT",217,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",218,0)
 S ^TMP($J,BASE,"IN","THERAPY")=""
"RTN","PSSHRIT",219,0)
 S PSORDER="O;403931;PROFILE;3"
"RTN","PSSHRIT",220,0)
 S PSDRUG1="CIMETIDINE 300MG TAB"
"RTN","PSSHRIT",221,0)
 S PSDRUG2="RANITIDINE 150MG TAB"
"RTN","PSSHRIT",222,0)
 S ^TMP($J,BASE,"IN","PROFILE","O;403931;PROFILE;3")="11666^4006826^^CIMETIDINE 300MG TAB^O"
"RTN","PSSHRIT",223,0)
 S ^TMP($J,BASE,"IN","PROSPECTIVE","Z;1;PROSPECTIVE;1")="11673^4007038^^RANITIDINE 150MG TAB"
"RTN","PSSHRIT",224,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",225,0)
 ; 
"RTN","PSSHRIT",226,0)
 S CLAS1=$G(^TMP($J,BASE,"OUT","THERAPY",1,1,"CLASS"))
"RTN","PSSHRIT",227,0)
 S CLAS2=$G(^TMP($J,BASE,"OUT","THERAPY",1,2,"CLASS"))
"RTN","PSSHRIT",228,0)
 S INTRO="Performing Duplicate Therapy Order Check for "_PSDRUG1_" and "_PSDRUG2
"RTN","PSSHRIT",229,0)
 S INTRO=INTRO_$S($L(CLAS1):"...OK",1:"...Not OK")
"RTN","PSSHRIT",230,0)
 W !
"RTN","PSSHRIT",231,0)
 D OUTPUT(INTRO)
"RTN","PSSHRIT",232,0)
 I '$L(CLAS1) D
"RTN","PSSHRIT",233,0)
 .W !
"RTN","PSSHRIT",234,0)
 .D OUTPUT("Duplicate Therapy Order Check could not be performed.",PSSLEFT)
"RTN","PSSHRIT",235,0)
 E  D
"RTN","PSSHRIT",236,0)
 .S LINE1="Therapeutic Duplication with "_PSDRUG1_" and "_PSDRUG2
"RTN","PSSHRIT",237,0)
 .S LINE2="Duplicate Therapy Class(es): "_CLAS1_","_CLAS2
"RTN","PSSHRIT",238,0)
 .W !
"RTN","PSSHRIT",239,0)
 .D OUTPUT(LINE1,PSSLEFT)
"RTN","PSSHRIT",240,0)
 .D OUTPUT(LINE2,PSSLEFT)
"RTN","PSSHRIT",241,0)
 ;
"RTN","PSSHRIT",242,0)
 Q $S($L(CLAS1)=0:0,1:1)
"RTN","PSSHRIT",243,0)
 ;
"RTN","PSSHRIT",244,0)
DOSECHK() ; check dosing
"RTN","PSSHRIT",245,0)
 ; Return 1 if OK, 0 if not OK.
"RTN","PSSHRIT",246,0)
 N TOTAL,SINGLE,INTRO,ORDER,PSDRUG1,PSDRUG2,BASE
"RTN","PSSHRIT",247,0)
 N PSSLEFT S PSSLEFT=4     ; left margin for results
"RTN","PSSHRIT",248,0)
 S BASE=$T(+0)_" DOSECHK"
"RTN","PSSHRIT",249,0)
 S ORDER="O;1464P;PROSPECTIVE;2"
"RTN","PSSHRIT",250,0)
 S PSDRUG1="ACETAMINOPHEN 500MG TAB"
"RTN","PSSHRIT",251,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",252,0)
 S ^TMP($J,BASE,"IN","DOSE")=""
"RTN","PSSHRIT",253,0)
 SET ^TMP($J,BASE,"IN","DOSE","AGE")=5000
"RTN","PSSHRIT",254,0)
 SET ^TMP($J,BASE,"IN","DOSE","WT")=83.01
"RTN","PSSHRIT",255,0)
 SET ^TMP($J,BASE,"IN","DOSE","BSA")=1.532
"RTN","PSSHRIT",256,0)
 ;VALUES: GCN^VUID^IEN^NAME^DOSE AMOUNT^DOSE UNIT^DOSE RATE^FREQ^DURATION^DURATION RATE^ROUTE^DOSE TYPE^SPECIFIC
"RTN","PSSHRIT",257,0)
 S ^TMP($J,BASE,"IN","DOSE","O;1464P;PROSPECTIVE;2")="4490^4007154^^ACETAMINOPHEN 500MG TAB^3000^MILLIGRAMS^DAY^Q4H^10^DAY^ORAL^MAINTENANCE^1"
"RTN","PSSHRIT",258,0)
 S ^TMP($J,BASE,"IN","PROSPECTIVE","O;1464P;PROSPECTIVE;2")="4490^4007154^^ACETAMINOPHEN 500MG TAB^O"
"RTN","PSSHRIT",259,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",260,0)
 ;
"RTN","PSSHRIT",261,0)
 S TOTAL=$G(^TMP($J,BASE,"OUT","DOSE",ORDER,PSDRUG1,"RANGE","MESSAGE",0))
"RTN","PSSHRIT",262,0)
 S SINGLE=$G(^TMP($J,BASE,"OUT","DOSE",ORDER,PSDRUG1,"SINGLE","MESSAGE",0))
"RTN","PSSHRIT",263,0)
 S INTRO="Performing Dosing Order Check for "_PSDRUG1_" - 3000MG Q4H"_$S($L(TOTAL):"...OK",1:"...Not OK")
"RTN","PSSHRIT",264,0)
 I '$L(TOTAL) D
"RTN","PSSHRIT",265,0)
 .D OUTPUT(INTRO)
"RTN","PSSHRIT",266,0)
 .W !
"RTN","PSSHRIT",267,0)
 .D OUTPUT("Dosing Order Check could not be performed.",PSSLEFT)
"RTN","PSSHRIT",268,0)
 E  D
"RTN","PSSHRIT",269,0)
 .W !
"RTN","PSSHRIT",270,0)
 .D OUTPUT(INTRO)
"RTN","PSSHRIT",271,0)
 .W !
"RTN","PSSHRIT",272,0)
 .D OUTPUT(SINGLE,PSSLEFT)
"RTN","PSSHRIT",273,0)
 .W !
"RTN","PSSHRIT",274,0)
 .D OUTPUT(TOTAL,PSSLEFT)
"RTN","PSSHRIT",275,0)
 Q $S($L(TOTAL)=0:0,1:1)
"RTN","PSSHRIT",276,0)
 ;
"RTN","PSSHRIT",277,0)
CUSTOM() ; check custom drug-drug interaction
"RTN","PSSHRIT",278,0)
 ; Return 1 if OK, 0 if not OK.
"RTN","PSSHRIT",279,0)
 ;
"RTN","PSSHRIT",280,0)
 N INFO,INTRO,ORDER,DRUG1,DRUG2,BASE,STATUS,PSSPEC
"RTN","PSSHRIT",281,0)
 N PSSLEFT S PSSLEFT=4     ; left margin for results
"RTN","PSSHRIT",282,0)
 S BASE=$T(+0)_" CUSTOM"
"RTN","PSSHRIT",283,0)
 S ORDER="Z;1;PROSPECTIVE;1"
"RTN","PSSHRIT",284,0)
 S DRUG1="CLARITHROMYCIN 250MG TAB",DRUG2="DIAZEPAM 5MG TAB"
"RTN","PSSHRIT",285,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",286,0)
 S ^TMP($J,BASE,"IN","DRUGDRUG")=""
"RTN","PSSHRIT",287,0)
 S ^TMP($J,BASE,"IN","PROSPECTIVE","Z;1;PROSPECTIVE;1")="16373^4010075F^^CLARITHROMYCIN 250MG TAB"
"RTN","PSSHRIT",288,0)
 S ^TMP($J,BASE,"IN","PROFILE","I;10U;PROFILE;10")="3768^40002216^^DIAZEPAM 5MG TAB"
"RTN","PSSHRIT",289,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",290,0)
 ;
"RTN","PSSHRIT",291,0)
 S STATUS=$G(^TMP($J,BASE,"OUT",0))
"RTN","PSSHRIT",292,0)
 S INTRO="Performing Custom Drug-Drug Interaction Order Check for "_DRUG1_" and "_DRUG2
"RTN","PSSHRIT",293,0)
 D SCUST
"RTN","PSSHRIT",294,0)
 S INTRO=INTRO_$S($L(INFO):"...OK",STATUS=0:"...OK",1:"...Not OK")
"RTN","PSSHRIT",295,0)
 I '$L(INFO) D
"RTN","PSSHRIT",296,0)
 .D OUTPUT(INTRO)
"RTN","PSSHRIT",297,0)
 .I STATUS'=0 W ! D OUTPUT("Custom Drug-Drug Interaction Order Check could not be performed.",PSSLEFT)
"RTN","PSSHRIT",298,0)
 E   D
"RTN","PSSHRIT",299,0)
 . W !
"RTN","PSSHRIT",300,0)
 . D OUTPUT(INTRO)
"RTN","PSSHRIT",301,0)
 . W !
"RTN","PSSHRIT",302,0)
 . S PSSPEC("CLINICAL EFFECTS:  ")=""
"RTN","PSSHRIT",303,0)
 . S INFO=$$REPLACE^XLFSTR(INFO,.PSSPEC)
"RTN","PSSHRIT",304,0)
 .S INFO="Significant Drug Interaction: "_INFO
"RTN","PSSHRIT",305,0)
 .D OUTPUT(INFO,PSSLEFT)
"RTN","PSSHRIT",306,0)
 W !
"RTN","PSSHRIT",307,0)
 Q $S(STATUS=0:1,$L(INFO)=0:0,1:1)
"RTN","PSSHRIT",308,0)
 ;
"RTN","PSSHRIT",309,0)
 ;
"RTN","PSSHRIT",310,0)
INTACT ; check vendor data base link
"RTN","PSSHRIT",311,0)
 ; Called from CHECK VENDOR DATABASE LINK  option
"RTN","PSSHRIT",312,0)
 N STATUS,PSFIN,BASE,STATUS,Y
"RTN","PSSHRIT",313,0)
 S BASE="PSPRE"
"RTN","PSSHRIT",314,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",315,0)
 S ^TMP($J,BASE,"IN","PING")=""
"RTN","PSSHRIT",316,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",317,0)
 S STATUS=+$G(^TMP($J,BASE,"OUT",0))
"RTN","PSSHRIT",318,0)
 I STATUS=0 D
"RTN","PSSHRIT",319,0)
 .W !
"RTN","PSSHRIT",320,0)
 .W !,"  Database Version: ",$G(^TMP($J,BASE,"OUT","difBuildVersion"))
"RTN","PSSHRIT",321,0)
 .W !,"     Build Version: ",$G(^TMP($J,BASE,"OUT","difDbVersion"))
"RTN","PSSHRIT",322,0)
 .S Y=$G(^TMP($J,BASE,"OUT","difIssueDate"))
"RTN","PSSHRIT",323,0)
 .S:Y?8N Y=$E(Y,5,6)_"/"_$E(Y,7,8)_"/"_$E(Y,1,4)
"RTN","PSSHRIT",324,0)
 .W !,"        Issue Date: ",Y,!
"RTN","PSSHRIT",325,0)
 .;
"RTN","PSSHRIT",326,0)
 .W !,"  Custom Database Version: ",$G(^TMP($J,BASE,"OUT","customBuildVersion"))
"RTN","PSSHRIT",327,0)
 .W !,"     Custom Build Version: ",$G(^TMP($J,BASE,"OUT","customDbVersion"))
"RTN","PSSHRIT",328,0)
 .S Y=$G(^TMP($J,BASE,"OUT","customIssueDate"))
"RTN","PSSHRIT",329,0)
 .S:Y?8N Y=$E(Y,5,6)_"/"_$E(Y,7,8)_"/"_$E(Y,1,4)
"RTN","PSSHRIT",330,0)
 .W !,"        Custom Issue Date: ",Y,!
"RTN","PSSHRIT",331,0)
 .;
"RTN","PSSHRIT",332,0)
 .S Y=$$NOW^XLFDT()
"RTN","PSSHRIT",333,0)
 .D DD^%DT                       ; convert current time in Y to external format.
"RTN","PSSHRIT",334,0)
 .W !,"Connected to Vendor database successfully @",$E(Y,1,18)
"RTN","PSSHRIT",335,0)
 E  D
"RTN","PSSHRIT",336,0)
 .W !,"Connection could not be made to Vendor database."
"RTN","PSSHRIT",337,0)
 .S Y=$$GLASTRUN()
"RTN","PSSHRIT",338,0)
 .IF Y D
"RTN","PSSHRIT",339,0)
 ..D DD^%DT                      ; convert last reached time in Y to external format.
"RTN","PSSHRIT",340,0)
 ..W !,"  Last reached @"_$E(Y,1,18)
"RTN","PSSHRIT",341,0)
 ;
"RTN","PSSHRIT",342,0)
 D PRSRTN
"RTN","PSSHRIT",343,0)
 Q
"RTN","PSSHRIT",344,0)
 ;
"RTN","PSSHRIT",345,0)
 ;----------------------------------------------------
"RTN","PSSHRIT",346,0)
 ;
"RTN","PSSHRIT",347,0)
PRSRTN ;
"RTN","PSSHRIT",348,0)
 ;calls std routine to ask user to hit return 
"RTN","PSSHRIT",349,0)
 N DIR S DIR(0)="E" D ^DIR
"RTN","PSSHRIT",350,0)
 Q
"RTN","PSSHRIT",351,0)
 ;
"RTN","PSSHRIT",352,0)
PING(BASE) ;
"RTN","PSSHRIT",353,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",354,0)
 S ^TMP($J,BASE,"IN","PING")=""
"RTN","PSSHRIT",355,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",356,0)
 Q
"RTN","PSSHRIT",357,0)
 ;
"RTN","PSSHRIT",358,0)
HRSMIN(MIN) ;
"RTN","PSSHRIT",359,0)
 ; Called from output transform of VENDOR INTERFACE DATA FILE (#59.54) field TOTAL TIME NOT AVAILABLE (field# 2)
"RTN","PSSHRIT",360,0)
 ;INPUTS: MIN-TIME IN MINUTES
"RTN","PSSHRIT",361,0)
 ;RETURNS HRS AND MINUTES
"RTN","PSSHRIT",362,0)
 N HRS,MINHR,HRSMIN
"RTN","PSSHRIT",363,0)
 S HRSMIN=""
"RTN","PSSHRIT",364,0)
 S MINHR=60     ;TOTAL # OF MIN IN AN HR
"RTN","PSSHRIT",365,0)
 S HRS=MIN\MINHR,MIN=MIN#MINHR
"RTN","PSSHRIT",366,0)
 I HRS S HRSMIN=HRS_" HR"_$S(HRS>1:"S",1:"")
"RTN","PSSHRIT",367,0)
 I MIN S HRSMIN=HRSMIN_$S(HRSMIN:", ",1:"")_MIN_" MINUTE"_$S(MIN>1:"S",1:"")
"RTN","PSSHRIT",368,0)
 Q HRSMIN
"RTN","PSSHRIT",369,0)
 ;
"RTN","PSSHRIT",370,0)
OUTPUT(INFO,DIWL) ;
"RTN","PSSHRIT",371,0)
 K ^UTILITY($J,"W")
"RTN","PSSHRIT",372,0)
 N DIWR,DIWF,DIW,DIWT,X
"RTN","PSSHRIT",373,0)
 S DIWL=$G(DIWL,1)
"RTN","PSSHRIT",374,0)
 S X=INFO,DIWR=$S($G(IOM):IOM,1:60),DIWF="W" D ^DIWP
"RTN","PSSHRIT",375,0)
 D ^DIWW
"RTN","PSSHRIT",376,0)
 Q
"RTN","PSSHRIT",377,0)
 ;
"RTN","PSSHRIT",378,0)
 ;
"RTN","PSSHRIT",379,0)
SCUST ;Set Custom info
"RTN","PSSHRIT",380,0)
 I $D(^TMP($J,BASE,"OUT","DRUGDRUG","S",DRUG1,ORDER,1)) S INFO=$G(^TMP($J,BASE,"OUT","DRUGDRUG","S",DRUG1,ORDER,1,"PMON",9,0)) Q
"RTN","PSSHRIT",381,0)
 I $D(^TMP($J,BASE,"OUT","DRUGDRUG","S",DRUG2,"I;10U;PROFILE;10",1)) S INFO=$G(^TMP($J,BASE,"OUT","DRUGDRUG","S",DRUG2,"I;10U;PROFILE;10",1,"PMON",9,0)) Q
"RTN","PSSHRIT",382,0)
 S INFO=""
"RTN","PSSHRIT",383,0)
 Q
"RTN","PSSHRPST")
0^14^B4804373
"RTN","PSSHRPST",1,0)
PSSHRPST ;WOIFO/STEVE GORDON - PRE - Post-Init to load pharmacy classes ;08/26/08
"RTN","PSSHRPST",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSHRPST",3,0)
 ;
"RTN","PSSHRPST",4,0)
 QUIT
"RTN","PSSHRPST",5,0)
 ;
"RTN","PSSHRPST",6,0)
EN ;  -- main entry point for pharmacy post-init
"RTN","PSSHRPST",7,0)
 ;XML (PSSPRE_1_0.XML) must be in Kernel default directory
"RTN","PSSHRPST",8,0)
 ;
"RTN","PSSHRPST",9,0)
 ; -- delete all classes gov package
"RTN","PSSHRPST",10,0)
 DO DELETE()
"RTN","PSSHRPST",11,0)
 ;
"RTN","PSSHRPST",12,0)
 ; --
"RTN","PSSHRPST",13,0)
 ; 
"RTN","PSSHRPST",14,0)
 NEW PSSTAT
"RTN","PSSHRPST",15,0)
 SET PSSTAT=$$IMPORT^XOBWLIB1($$GETDIR(),$$SUPPORT())
"RTN","PSSHRPST",16,0)
 IF 'PSSTAT DO
"RTN","PSSHRPST",17,0)
 . DO BMES^XPDUTL("Error occurred during the importing of pharmacy classes file:")
"RTN","PSSHRPST",18,0)
 . DO MES^XPDUTL("  Directory: "_$$GETDIR())
"RTN","PSSHRPST",19,0)
 . DO MES^XPDUTL("  File Name: "_$$SUPPORT())
"RTN","PSSHRPST",20,0)
 . DO MES^XPDUTL("      Error: "_$PIECE(PSSTAT,"^",2))
"RTN","PSSHRPST",21,0)
 . DO MES^XPDUTL(" o  Pharmacy class not imported.")
"RTN","PSSHRPST",22,0)
 ELSE  DO
"RTN","PSSHRPST",23,0)
 . DO MES^XPDUTL(" o  Pharmacy classes imported successfully.")
"RTN","PSSHRPST",24,0)
 . DO MES^XPDUTL(" ")
"RTN","PSSHRPST",25,0)
 . DO MAILMSG
"RTN","PSSHRPST",26,0)
 ;
"RTN","PSSHRPST",27,0)
 QUIT
"RTN","PSSHRPST",28,0)
 ;
"RTN","PSSHRPST",29,0)
DELETE() ; -- delete classes for clean slate and remove previous releases
"RTN","PSSHRPST",30,0)
 NEW PSSTAT
"RTN","PSSHRPST",31,0)
 ; -- delete all classes in pharmacy package
"RTN","PSSHRPST",32,0)
 DO BMES^XPDUTL(" o  Deleting gov classes:")
"RTN","PSSHRPST",33,0)
 ;
"RTN","PSSHRPST",34,0)
 SET PSSTAT=$SYSTEM.OBJ.DeletePackage("gov")
"RTN","PSSHRPST",35,0)
 DO BMES^XPDUTL("       ...[gov] deletion "_$SELECT(PSSTAT:"finished successfully.",1:"failed."))
"RTN","PSSHRPST",36,0)
 DO MES^XPDUTL("")
"RTN","PSSHRPST",37,0)
 QUIT
"RTN","PSSHRPST",38,0)
 ;
"RTN","PSSHRPST",39,0)
 ;
"RTN","PSSHRPST",40,0)
SUPPORT() ;Returns the standard name of the XML file
"RTN","PSSHRPST",41,0)
 ;
"RTN","PSSHRPST",42,0)
 Q "PSSPRE_1_0.XML"
"RTN","PSSHRPST",43,0)
 ;
"RTN","PSSHRPST",44,0)
GETDIR() ; -- get directory where install files are located--default is in Kernel parameters.
"RTN","PSSHRPST",45,0)
 QUIT $$DEFDIR^%ZISH()
"RTN","PSSHRPST",46,0)
 ;
"RTN","PSSHRPST",47,0)
MAILMSG ;
"RTN","PSSHRPST",48,0)
 N XMDUZ,XMY,XMSUB,XMTEXT,XMZ,XMMG,DIFROM
"RTN","PSSHRPST",49,0)
 S XMDUZ="PACKAGE PSS*1.0*136 INSTALL"
"RTN","PSSHRPST",50,0)
 S XMTEXT="^TMP($J,""PSSHRPST"","
"RTN","PSSHRPST",51,0)
 S XMY(+DUZ)=""
"RTN","PSSHRPST",52,0)
 S XMY("G.PSS ORDER CHECKS")=""
"RTN","PSSHRPST",53,0)
 S XMSUB="PSS*1.0*136 Installation Complete"
"RTN","PSSHRPST",54,0)
 S ^TMP($J,"PSSHRPST",1)="Installation of Patch PSS*1.0*136 has been successfully completed!"
"RTN","PSSHRPST",55,0)
 D ^XMD
"RTN","PSSHRPST",56,0)
 Q
"RTN","PSSHRPST",57,0)
 ;
"RTN","PSSHRQ2")
0^4^B3729020
"RTN","PSSHRQ2",1,0)
PSSHRQ2 ;WOIFO/AV,TS - Makes a request to PEPS and returns as Global ;09/20/07
"RTN","PSSHRQ2",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSHRQ2",3,0)
 ;
"RTN","PSSHRQ2",4,0)
 ; @authors - Alex Vazquez, Tim Sabat
"RTN","PSSHRQ2",5,0)
 ; @date    - September 19, 2007
"RTN","PSSHRQ2",6,0)
 ; @version - 1.0
"RTN","PSSHRQ2",7,0)
 ;
"RTN","PSSHRQ2",8,0)
 QUIT
"RTN","PSSHRQ2",9,0)
 ;;
"RTN","PSSHRQ2",10,0)
IN(PSSBASE) ;
"RTN","PSSHRQ2",11,0)
 ; @DESC Handles request/response to PEPS
"RTN","PSSHRQ2",12,0)
 ;
"RTN","PSSHRQ2",13,0)
 ; @RETURNS Nothing. Value stored in output global.
"RTN","PSSHRQ2",14,0)
 ;
"RTN","PSSHRQ2",15,0)
 NEW PSS,PSSRESLT,PSSDOC,PSSXML,FDBFLG
"RTN","PSSHRQ2",16,0)
 ; Cleanup output global
"RTN","PSSHRQ2",17,0)
 ; KILL ^TMP($JOB,PSSBASE,"OUT")  ; PO: commented as requested by Stan Brown on 6/4/09
"RTN","PSSHRQ2",18,0)
 ;
"RTN","PSSHRQ2",19,0)
 ; save "IN" nodes
"RTN","PSSHRQ2",20,0)
 K ^TMP($J,"SAVE","IN")
"RTN","PSSHRQ2",21,0)
 M ^TMP($J,"SAVE","IN")=^TMP($J,PSSBASE,"IN")
"RTN","PSSHRQ2",22,0)
 ;
"RTN","PSSHRQ2",23,0)
 ;Check FDB status if an update is occurring
"RTN","PSSHRQ2",24,0)
 S FDBFLG=$$CHKSTAT^PSSDSFDB()
"RTN","PSSHRQ2",25,0)
 ;If FDB update set global and quit
"RTN","PSSHRQ2",26,0)
 I FDBFLG S ^TMP($J,PSSBASE,"OUT",0)=FDBFLG GOTO END   ;QUIT
"RTN","PSSHRQ2",27,0)
 ;
"RTN","PSSHRQ2",28,0)
 ; Validate input global
"RTN","PSSHRQ2",29,0)
 SET PSS("validationResult")=$$DRIVER^PSSHRVAL(PSSBASE)
"RTN","PSSHRQ2",30,0)
 IF PSS("validationResult")=0  DO
"RTN","PSSHRQ2",31,0)
 . ; Check if data written to global, set to 1 if data exist
"RTN","PSSHRQ2",32,0)
 . IF $DATA(^TMP($JOB,PSSBASE,"OUT")) SET ^TMP($JOB,PSSBASE,"OUT",0)=1
"RTN","PSSHRQ2",33,0)
 . ; If no data in output global , set to 0
"RTN","PSSHRQ2",34,0)
 . IF '$DATA(^TMP($JOB,PSSBASE,"OUT")) SET ^TMP($JOB,PSSBASE,"OUT",0)=0
"RTN","PSSHRQ2",35,0)
 . QUIT
"RTN","PSSHRQ2",36,0)
 ; End call if no call to make
"RTN","PSSHRQ2",37,0)
 IF PSS("validationResult")=0 GOTO END   ;QUIT
"RTN","PSSHRQ2",38,0)
 ;
"RTN","PSSHRQ2",39,0)
 ; Create XML request
"RTN","PSSHRQ2",40,0)
 SET PSSXML=$$BLDPREQ^PSSHREQ(PSSBASE)
"RTN","PSSHRQ2",41,0)
 ; Send XML request to PEPS, receive handle to XML in return
"RTN","PSSHRQ2",42,0)
 SET PSSRESLT=$$PEPSPOST^PSSHTTP(.PSSDOC,PSSXML)
"RTN","PSSHRQ2",43,0)
 ;
"RTN","PSSHRQ2",44,0)
 ; If request unsuccessful go straight to error handling
"RTN","PSSHRQ2",45,0)
 IF +PSSRESLT=0 DO ALTERROR^PSSHRQ2O(PSSBASE)
"RTN","PSSHRQ2",46,0)
 ;
"RTN","PSSHRQ2",47,0)
 ; If request is successful parse response
"RTN","PSSHRQ2",48,0)
 ; and put in results global object.  Also set the last successful run time.
"RTN","PSSHRQ2",49,0)
 IF +PSSRESLT>0 DO OUT^PSSHRQ2O(PSSDOC,PSSBASE),SLASTRUN^PSSHRIT($$NOW^XLFDT())
"RTN","PSSHRQ2",50,0)
 ;
"RTN","PSSHRQ2",51,0)
END ; re-store "IN" nodes
"RTN","PSSHRQ2",52,0)
 M ^TMP($J,PSSBASE,"IN")=^TMP($J,"SAVE","IN")
"RTN","PSSHRQ2",53,0)
 K ^TMP($J,"SAVE","IN")
"RTN","PSSHRQ2",54,0)
 QUIT
"RTN","PSSHRQ2",55,0)
 ;;
"RTN","PSSHRQ21")
0^5^B139661010
"RTN","PSSHRQ21",1,0)
PSSHRQ21 ;WOIFO/AV,TS - Parses a PEPS drugDrugChecks XML element ;09/20/07
"RTN","PSSHRQ21",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSHRQ21",3,0)
 ;
"RTN","PSSHRQ21",4,0)
 ; @authors - Alex Vazquez, Tim Sabat
"RTN","PSSHRQ21",5,0)
 ; @date    - September 19, 2007
"RTN","PSSHRQ21",6,0)
 ; @version - 1.0
"RTN","PSSHRQ21",7,0)
 ;
"RTN","PSSHRQ21",8,0)
 QUIT
"RTN","PSSHRQ21",9,0)
 ;;
"RTN","PSSHRQ21",10,0)
DRUGDRUG(DOCHAND,NODE,BASE) ;
"RTN","PSSHRQ21",11,0)
 ; @DESC Handles putting the drugDrugChecks XML element into
"RTN","PSSHRQ21",12,0)
 ;       the DrugOrderChecks object
"RTN","PSSHRQ21",13,0)
 ;
"RTN","PSSHRQ21",14,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ21",15,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRQ21",16,0)
 ; @PSSHAND Handle to DrugOrderChecks object
"RTN","PSSHRQ21",17,0)
 ;
"RTN","PSSHRQ21",18,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ21",19,0)
 NEW PSS,MSGHASH,DRUGHASH,PSMSGCNT
"RTN","PSSHRQ21",20,0)
 ;
"RTN","PSSHRQ21",21,0)
 SET PSS("child")=0
"RTN","PSSHRQ21",22,0)
 SET PSS("drugCount")=0
"RTN","PSSHRQ21",23,0)
 SET PSMSGCNT=0
"RTN","PSSHRQ21",24,0)
 ;
"RTN","PSSHRQ21",25,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,NODE,PSS("child")) QUIT:PSS("child")=0  DO
"RTN","PSSHRQ21",26,0)
 . SET PSS("childName")=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ21",27,0)
 . ;xml can have message at the top level of drugDrugCheck as well as within drugDrugChecks
"RTN","PSSHRQ21",28,0)
 . SET:PSS("childName")="message" PSMSGCNT=PSMSGCNT+1
"RTN","PSSHRQ21",29,0)
 . DO:PSS("childName")="message" MSGREAD(DOCHAND,PSS("child"),.MSGHASH,PSMSGCNT)
"RTN","PSSHRQ21",30,0)
 . ;
"RTN","PSSHRQ21",31,0)
 . SET:PSS("childName")="drugDrugCheck" PSS("drugCount")=PSS("drugCount")+1
"RTN","PSSHRQ21",32,0)
 . DO:PSS("childName")="drugDrugCheck" DRUGREAD(DOCHAND,PSS("child"),.DRUGHASH,PSS("drugCount"),.MSGHASH,PSMSGCNT)
"RTN","PSSHRQ21",33,0)
 . QUIT
"RTN","PSSHRQ21",34,0)
 ;
"RTN","PSSHRQ21",35,0)
 ; Write to globals
"RTN","PSSHRQ21",36,0)
 ; MSGHASH is populated within DRUGREAD if a message exists
"RTN","PSSHRQ21",37,0)
 DO MSGWRITE(.MSGHASH,BASE,"DRUGDRUG")
"RTN","PSSHRQ21",38,0)
 DO DRUGWRIT(.DRUGHASH,BASE)
"RTN","PSSHRQ21",39,0)
 QUIT
"RTN","PSSHRQ21",40,0)
 ;;
"RTN","PSSHRQ21",41,0)
MSGREAD(DOCHAND,NODE,HASH,COUNT) ;
"RTN","PSSHRQ21",42,0)
 ; @DESC Handles parsing message section
"RTN","PSSHRQ21",43,0)
 ;
"RTN","PSSHRQ21",44,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ21",45,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRQ21",46,0)
 ; @COUNT Count of message sections
"RTN","PSSHRQ21",47,0)
 ; @HASH Where to store info
"RTN","PSSHRQ21",48,0)
 ;
"RTN","PSSHRQ21",49,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ21",50,0)
 ;
"RTN","PSSHRQ21",51,0)
 ; Parse the message and store in hash
"RTN","PSSHRQ21",52,0)
 DO PARSEMSG^PSSHRCOM(DOCHAND,NODE,.HASH,COUNT)
"RTN","PSSHRQ21",53,0)
 ;
"RTN","PSSHRQ21",54,0)
 QUIT
"RTN","PSSHRQ21",55,0)
 ;;
"RTN","PSSHRQ21",56,0)
MSGWRITE(HASH,BASE,SUB) ;
"RTN","PSSHRQ21",57,0)
 ; @DESC Handles writing message section of the XML document
"RTN","PSSHRQ21",58,0)
 ; @NOTE:Error nodes for drugsnotchecked and for drug dosing messages are set 
"RTN","PSSHRQ21",59,0)
 ; in PSSHRQ23
"RTN","PSSHRQ21",60,0)
 ; @HASH ByRef, Hash used to store response
"RTN","PSSHRQ21",61,0)
 ; @BASE Base of output global
"RTN","PSSHRQ21",62,0)
 ; @SUB Type of message --DRUGDRUG, THERAPY OR DOSE
"RTN","PSSHRQ21",63,0)
 ; @RETURNS Nothing. Stores values in output global.
"RTN","PSSHRQ21",64,0)
 NEW PSS,I,NODE,WARNFLG,NODECNT
"RTN","PSSHRQ21",65,0)
 ;
"RTN","PSSHRQ21",66,0)
 SET I=""
"RTN","PSSHRQ21",67,0)
 FOR  SET I=$ORDER(HASH(I)) QUIT:I=""  DO
"RTN","PSSHRQ21",68,0)
 . ; Create the node to be used with subscript indirection
"RTN","PSSHRQ21",69,0)
 . ;
"RTN","PSSHRQ21",70,0)
 . SET NODE="^TMP($JOB,BASE,""OUT"",SUB,""ERROR"",HASH(I,""orderNumber""))"
"RTN","PSSHRQ21",71,0)
 . ;gets next error number
"RTN","PSSHRQ21",72,0)
 . S NODECNT=$O(@NODE@(":"),-1)+1
"RTN","PSSHRQ21",73,0)
 . SET NODE="^TMP($JOB,BASE,""OUT"",SUB,""ERROR"",HASH(I,""orderNumber""),NODECNT)"
"RTN","PSSHRQ21",74,0)
 . ;Need to $G several hash entries because they are undefined coming from NOTWRITE^PSSHRQ23
"RTN","PSSHRQ21",75,0)
 . I $G(HASH(I,"severity"))="Information" Q   ;If severity="information" don't save
"RTN","PSSHRQ21",76,0)
 . SET @NODE@(0)=HASH(I,"drugName")_"^"_HASH(I,"ien")_"^"_HASH(I,"cprsOrderNumber")_"^"_HASH(I,"package")
"RTN","PSSHRQ21",77,0)
 . SET @NODE@("SEV")=$G(HASH(I,"severity"))
"RTN","PSSHRQ21",78,0)
 . SET @NODE@("TYPE")=$G(HASH(I,"type"))
"RTN","PSSHRQ21",79,0)
 . ;SET @NODE@("NAME")=HASH(I,"drugName")
"RTN","PSSHRQ21",80,0)
 . SET @NODE@("TEXT")=HASH(I,"text")
"RTN","PSSHRQ21",81,0)
 . S WARNFLG=$S($G(HASH(I,"severity"))="Warning":1,1:0)
"RTN","PSSHRQ21",82,0)
 . ;Message node to display to user
"RTN","PSSHRQ21",83,0)
 . S @NODE@("MSG")=$$ERRMSG^PSSHRVL1(SUB,HASH(I,"drugName"),HASH(I,"orderNumber"),WARNFLG)
"RTN","PSSHRQ21",84,0)
 . ;D
"RTN","PSSHRQ21",85,0)
 . ;.I $D(HASH(I,"msg")) S @NODE@("MSG")=HASH(I,"msg") Q
"RTN","PSSHRQ21",86,0)
 . ;.S @NODE@("MSG")=$$ERRMSG^PSSHRVL1(SUB,HASH(I,"drugName"),HASH(I,"orderNumber"),WARNFLG)
"RTN","PSSHRQ21",87,0)
 . QUIT
"RTN","PSSHRQ21",88,0)
 QUIT
"RTN","PSSHRQ21",89,0)
 ;;
"RTN","PSSHRQ21",90,0)
DRUGREAD(DOCHAND,NODE,HASH,COUNT,MSGHASH,MSGCNT) ;
"RTN","PSSHRQ21",91,0)
 ; @DESC Handles parsing and storage of drugDrugCheck element
"RTN","PSSHRQ21",92,0)
 ;
"RTN","PSSHRQ21",93,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ21",94,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRQ21",95,0)
 ; @COUNT Count of message sections
"RTN","PSSHRQ21",96,0)
 ; @HASH Where to store info (by ref)
"RTN","PSSHRQ21",97,0)
 ; @MSGHASH-Where message information is stored (by ref)
"RTN","PSSHRQ21",98,0)
 ; @MSGCNT-counter for messages
"RTN","PSSHRQ21",99,0)
 ; 
"RTN","PSSHRQ21",100,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ21",101,0)
 NEW PSS
"RTN","PSSHRQ21",102,0)
 ;
"RTN","PSSHRQ21",103,0)
 SET PSS("child")=0
"RTN","PSSHRQ21",104,0)
 ;
"RTN","PSSHRQ21",105,0)
 SET PSS("messageCount")=MSGCNT
"RTN","PSSHRQ21",106,0)
 ;
"RTN","PSSHRQ21",107,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,NODE,PSS("child")) QUIT:PSS("child")=0  DO
"RTN","PSSHRQ21",108,0)
 . SET PSS("childName")=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ21",109,0)
 . ;
"RTN","PSSHRQ21",110,0)
 . I PSS("childName")="message" D  Q
"RTN","PSSHRQ21",111,0)
 . .S PSS("messageCount")=PSS("messageCount")+1
"RTN","PSSHRQ21",112,0)
 . .D MSGREAD(DOCHAND,PSS("child"),.MSGHASH,PSS("messageCount"))
"RTN","PSSHRQ21",113,0)
 . ;
"RTN","PSSHRQ21",114,0)
 . DO:PSS("childName")="interactedDrugList"
"RTN","PSSHRQ21",115,0)
 . . DO DRUGLIST^PSSHRCOM(DOCHAND,PSS("child"),.HASH,COUNT)
"RTN","PSSHRQ21",116,0)
 . . QUIT
"RTN","PSSHRQ21",117,0)
 . DO:PSS("childName")="severity"
"RTN","PSSHRQ21",118,0)
 . . ; Translate the peps severity into a vista specific severity
"RTN","PSSHRQ21",119,0)
 . . SET HASH(COUNT,"severity")=$$TRANSEV($$GETTEXT^PSSHRCOM(DOCHAND,PSS("child")))
"RTN","PSSHRQ21",120,0)
 . . QUIT
"RTN","PSSHRQ21",121,0)
 . DO:PSS("childName")="interaction"
"RTN","PSSHRQ21",122,0)
 . . SET HASH(COUNT,"interaction")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ21",123,0)
 . . QUIT
"RTN","PSSHRQ21",124,0)
 . DO:PSS("childName")="shortText"
"RTN","PSSHRQ21",125,0)
 . . SET HASH(COUNT,"shortText")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ21",126,0)
 . . QUIT
"RTN","PSSHRQ21",127,0)
 . DO:PSS("childName")="professionalMonograph"
"RTN","PSSHRQ21",128,0)
 . . DO MONOGRAF(DOCHAND,PSS("child"),.HASH,"ProfessionalMonograph",COUNT)
"RTN","PSSHRQ21",129,0)
 . . QUIT
"RTN","PSSHRQ21",130,0)
 . DO:PSS("childName")="consumerMonograph"
"RTN","PSSHRQ21",131,0)
 . . DO MONOGRAF(DOCHAND,PSS("child"),.HASH,"ConsumerMonograph",COUNT)
"RTN","PSSHRQ21",132,0)
 . . QUIT
"RTN","PSSHRQ21",133,0)
 . QUIT
"RTN","PSSHRQ21",134,0)
 QUIT
"RTN","PSSHRQ21",135,0)
 ;;
"RTN","PSSHRQ21",136,0)
MONOGRAF(DOCHAND,NODE,HASH,MONOTYPE,COUNT) ;
"RTN","PSSHRQ21",137,0)
 ; @DESC Parses and stores the monograph of the monograph type
"RTN","PSSHRQ21",138,0)
 ;
"RTN","PSSHRQ21",139,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ21",140,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRQ21",141,0)
 ; @HASH Handle to DrugOrderChecks object
"RTN","PSSHRQ21",142,0)
 ; @MONOTYPE Type of monograph either ProfessionalMonograph or ConsumerMonograph
"RTN","PSSHRQ21",143,0)
 ;
"RTN","PSSHRQ21",144,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ21",145,0)
 ;
"RTN","PSSHRQ21",146,0)
 NEW PSS
"RTN","PSSHRQ21",147,0)
 ;
"RTN","PSSHRQ21",148,0)
 SET PSS("child")=0
"RTN","PSSHRQ21",149,0)
 SET PSS("i")=0
"RTN","PSSHRQ21",150,0)
 ;
"RTN","PSSHRQ21",151,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,NODE,PSS("child")) QUIT:PSS("child")=0  DO
"RTN","PSSHRQ21",152,0)
 . ; Get the sub elements of the monograph type section
"RTN","PSSHRQ21",153,0)
 . SET PSS("childName")=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ21",154,0)
 . I PSS("childName")="monographSource" D  Q
"RTN","PSSHRQ21",155,0)
 . .S HASH(COUNT,"monographSource")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ21",156,0)
 . SET PSS("i")=PSS("i")+1
"RTN","PSSHRQ21",157,0)
 . 
"RTN","PSSHRQ21",158,0)
 . ;if this is references element get reference sub-element.
"RTN","PSSHRQ21",159,0)
 . I PSS("childName")="references" D  Q
"RTN","PSSHRQ21",160,0)
 . . D REF(DOCHAND,PSS("child"),.HASH,MONOTYPE,COUNT)
"RTN","PSSHRQ21",161,0)
 . ; Get text of element
"RTN","PSSHRQ21",162,0)
 . SET PSS("sectionText")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ21",163,0)
 . SET HASH(COUNT,MONOTYPE,PSS("childName"))=PSS("sectionText")
"RTN","PSSHRQ21",164,0)
 . QUIT
"RTN","PSSHRQ21",165,0)
 ;
"RTN","PSSHRQ21",166,0)
 ; Set the total count of monograph sections
"RTN","PSSHRQ21",167,0)
 SET HASH(COUNT,MONOTYPE,0)=PSS("i")
"RTN","PSSHRQ21",168,0)
 ;
"RTN","PSSHRQ21",169,0)
 QUIT
"RTN","PSSHRQ21",170,0)
 ;;
"RTN","PSSHRQ21",171,0)
REF(DOCHAND,NODE,HASH,MONOTYPE,COUNT) ;
"RTN","PSSHRQ21",172,0)
 ; @DESC Parses and stores the reference element of references element.
"RTN","PSSHRQ21",173,0)
 ;
"RTN","PSSHRQ21",174,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ21",175,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRQ21",176,0)
 ; @HASH Handle to DrugOrderChecks object
"RTN","PSSHRQ21",177,0)
 ; @MONOTYPE Type of monograph either ProfessionalMonograph or ConsumerMonograph
"RTN","PSSHRQ21",178,0)
 ;
"RTN","PSSHRQ21",179,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ21",180,0)
 ;
"RTN","PSSHRQ21",181,0)
 NEW PSS
"RTN","PSSHRQ21",182,0)
 ;
"RTN","PSSHRQ21",183,0)
 SET PSS("child")=0
"RTN","PSSHRQ21",184,0)
 SET PSS("i")=0
"RTN","PSSHRQ21",185,0)
 ;
"RTN","PSSHRQ21",186,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,NODE,PSS("child")) QUIT:PSS("child")=0  DO
"RTN","PSSHRQ21",187,0)
 . ; Get the sub elements of the references type section
"RTN","PSSHRQ21",188,0)
 . SET PSS("childName")=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ21",189,0)
 . I PSS("childName")="reference" D
"RTN","PSSHRQ21",190,0)
 . .S HASH(COUNT,MONOTYPE,"references",PSS("i"))=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ21",191,0)
 . .SET PSS("i")=PSS("i")+1
"RTN","PSSHRQ21",192,0)
 . QUIT
"RTN","PSSHRQ21",193,0)
 S:PSS("i")>0 HASH(COUNT,MONOTYPE,"references")=PSS("i")  ; if >0 means references have reference elements
"RTN","PSSHRQ21",194,0)
 QUIT
"RTN","PSSHRQ21",195,0)
 ;;
"RTN","PSSHRQ21",196,0)
DRUGWRIT(HASH,BASE) ;
"RTN","PSSHRQ21",197,0)
 ; @DESC Handles writing drugDrugChecks drugDrugCheck section of the XML document
"RTN","PSSHRQ21",198,0)
 ;
"RTN","PSSHRQ21",199,0)
 ; @HASH ByRef, Hash used to store response
"RTN","PSSHRQ21",200,0)
 ; @BASE Base of output global
"RTN","PSSHRQ21",201,0)
 ;
"RTN","PSSHRQ21",202,0)
 ; @RETURNS Nothing. Stores values in output global.
"RTN","PSSHRQ21",203,0)
 ;
"RTN","PSSHRQ21",204,0)
 NEW I,PSS,NODE,FIRST,SECOND,SUB,IPMON,L
"RTN","PSSHRQ21",205,0)
 SET SUB="ProfessionalMonograph"
"RTN","PSSHRQ21",206,0)
 ;
"RTN","PSSHRQ21",207,0)
 ; Loop through the drugDrugCheck elements
"RTN","PSSHRQ21",208,0)
 SET I=""
"RTN","PSSHRQ21",209,0)
 FOR  SET I=$ORDER(HASH(I)) QUIT:I=""  DO
"RTN","PSSHRQ21",210,0)
 . ; If Severity equals 0 ignore this drug drug check and move onto next
"RTN","PSSHRQ21",211,0)
 . IF +HASH(I,"severity")=-1 QUIT
"RTN","PSSHRQ21",212,0)
 . S IPMON=16  ; PMON index before starting to write references
"RTN","PSSHRQ21",213,0)
 . ; A profile drug should always take precedent in the subscript over a prospective drug
"RTN","PSSHRQ21",214,0)
 . ; If two prospective or two profile drugs then precedence doesn't matter
"RTN","PSSHRQ21",215,0)
 . ; Set the values to default values
"RTN","PSSHRQ21",216,0)
 . SET FIRST=1
"RTN","PSSHRQ21",217,0)
 . SET SECOND=2
"RTN","PSSHRQ21",218,0)
 . IF $$ISPROF^PSSHRCOM(HASH(I,"drugList",2,"orderNumber"))=1  DO
"RTN","PSSHRQ21",219,0)
 . . SET FIRST=2
"RTN","PSSHRQ21",220,0)
 . . SET SECOND=1
"RTN","PSSHRQ21",221,0)
 . . QUIT
"RTN","PSSHRQ21",222,0)
 . ;
"RTN","PSSHRQ21",223,0)
 . ; Create the node to use with subscript indirection
"RTN","PSSHRQ21",224,0)
 . SET NODE="^TMP($JOB,BASE,""OUT"",""DRUGDRUG"",$$SEVCODE(HASH(I,""severity""))"
"RTN","PSSHRQ21",225,0)
 . SET NODE=NODE_",HASH(I,""drugList"",FIRST,""drugName""),HASH(I,""drugList"",FIRST,""orderNumber""),I)"
"RTN","PSSHRQ21",226,0)
 .
"RTN","PSSHRQ21",227,0)
 . ; Value on right of = should be as follows
"RTN","PSSHRQ21",228,0)
 . ; 2nd Order Number^2nd Drug IEN^1st Drug IEN^2nd Drug Name^CPRS Order Number^Package
"RTN","PSSHRQ21",229,0)
 . SET PSS("value")=HASH(I,"drugList",SECOND,"orderNumber")_"^"_HASH(I,"drugList",SECOND,"ien")_"^"_HASH(I,"drugList",FIRST,"ien")
"RTN","PSSHRQ21",230,0)
 . SET PSS("value")=PSS("value")_"^"_HASH(I,"drugList",SECOND,"drugName")_"^"_HASH(I,"drugList",FIRST,"cprsOrderNumber")_"^"_HASH(I,"drugList",FIRST,"package")
"RTN","PSSHRQ21",231,0)
 . SET @NODE=PSS("value")
"RTN","PSSHRQ21",232,0)
 . ;
"RTN","PSSHRQ21",233,0)
 . I $$CHKHASH(.HASH,I,"severity") SET @NODE@("SEV")=HASH(I,"severity")
"RTN","PSSHRQ21",234,0)
 . I $$CHKHASH(.HASH,I,"shortText") SET @NODE@("SHORT")=HASH(I,"shortText")
"RTN","PSSHRQ21",235,0)
 . I $$CHKHASH(.HASH,I,"interaction") SET @NODE@("INT")=HASH(I,"interaction")
"RTN","PSSHRQ21",236,0)
 . I $$CHKHASH(.HASH,I,SUB,"clinicalEffects") SET @NODE@("CLIN")=HASH(I,"ProfessionalMonograph","clinicalEffects")
"RTN","PSSHRQ21",237,0)
 . ;
"RTN","PSSHRQ21",238,0)
 . ; Write professional monograph
"RTN","PSSHRQ21",239,0)
 . ; Professional monograph MUST be in order specified by code with a single
"RTN","PSSHRQ21",240,0)
 . ; line of space between each section
"RTN","PSSHRQ21",241,0)
 . I $$CHKHASH(.HASH,I,SUB,0) SET @NODE@("PMON")=HASH(I,"ProfessionalMonograph",0)
"RTN","PSSHRQ21",242,0)
 . I $$CHKHASH(.HASH,I,SUB,"disclaimer") D
"RTN","PSSHRQ21",243,0)
 . .SET @NODE@("PMON",1,0)=HASH(I,"ProfessionalMonograph","disclaimer")
"RTN","PSSHRQ21",244,0)
 . .SET @NODE@("PMON",2,0)=""
"RTN","PSSHRQ21",245,0)
 . I $$CHKHASH(.HASH,I,SUB,"monographTitle") D
"RTN","PSSHRQ21",246,0)
 . .SET @NODE@("PMON",3,0)=HASH(I,"ProfessionalMonograph","monographTitle")
"RTN","PSSHRQ21",247,0)
 . .SET @NODE@("PMON",4,0)=""
"RTN","PSSHRQ21",248,0)
 . I $$CHKHASH(.HASH,I,SUB,"severityLevel") D
"RTN","PSSHRQ21",249,0)
 . .SET @NODE@("PMON",5,0)=HASH(I,"ProfessionalMonograph","severityLevel")
"RTN","PSSHRQ21",250,0)
 . .SET @NODE@("PMON",6,0)=""
"RTN","PSSHRQ21",251,0)
 . I $$CHKHASH(.HASH,I,SUB,"mechanismOfAction") D
"RTN","PSSHRQ21",252,0)
 . .SET @NODE@("PMON",7,0)=HASH(I,"ProfessionalMonograph","mechanismOfAction")
"RTN","PSSHRQ21",253,0)
 . .SET @NODE@("PMON",8,0)=""
"RTN","PSSHRQ21",254,0)
 . I $$CHKHASH(.HASH,I,SUB,"clinicalEffects") D
"RTN","PSSHRQ21",255,0)
 . .SET @NODE@("PMON",9,0)=HASH(I,"ProfessionalMonograph","clinicalEffects")
"RTN","PSSHRQ21",256,0)
 . .SET @NODE@("PMON",10,0)=""
"RTN","PSSHRQ21",257,0)
 . I $$CHKHASH(.HASH,I,SUB,"predisposingFactors") D
"RTN","PSSHRQ21",258,0)
 . .SET @NODE@("PMON",11,0)=HASH(I,"ProfessionalMonograph","predisposingFactors")
"RTN","PSSHRQ21",259,0)
 . .SET @NODE@("PMON",12,0)=""
"RTN","PSSHRQ21",260,0)
 . I $$CHKHASH(.HASH,I,SUB,"patientManagement") D
"RTN","PSSHRQ21",261,0)
 . .SET @NODE@("PMON",13,0)=HASH(I,"ProfessionalMonograph","patientManagement")
"RTN","PSSHRQ21",262,0)
 . .SET @NODE@("PMON",14,0)=""
"RTN","PSSHRQ21",263,0)
 . I $$CHKHASH(.HASH,I,SUB,"discussion") D
"RTN","PSSHRQ21",264,0)
 . .SET @NODE@("PMON",15,0)=HASH(I,"ProfessionalMonograph","discussion")
"RTN","PSSHRQ21",265,0)
 . .SET @NODE@("PMON",16,0)=""
"RTN","PSSHRQ21",266,0)
 . I $$CHKHASH(.HASH,I,SUB,"references") D
"RTN","PSSHRQ21",267,0)
 . . S L=""
"RTN","PSSHRQ21",268,0)
 . . F  S L=$O(HASH(I,"ProfessionalMonograph","references",L)) Q:L=""  D
"RTN","PSSHRQ21",269,0)
 . . .S IPMON=IPMON+1
"RTN","PSSHRQ21",270,0)
 . . .S @NODE@("PMON",IPMON,0)=HASH(I,"ProfessionalMonograph","references",L)
"RTN","PSSHRQ21",271,0)
 . . ;
"RTN","PSSHRQ21",272,0)
 . . S IPMON=IPMON+1
"RTN","PSSHRQ21",273,0)
 . . SET @NODE@("PMON",IPMON,0)=""
"RTN","PSSHRQ21",274,0)
 . ;
"RTN","PSSHRQ21",275,0)
 . I $$CHKHASH(.HASH,I,"monographSource") SET IPMON=IPMON+1 SET @NODE@("PMON",IPMON,0)=$$COPYRITE(HASH(I,"monographSource"))
"RTN","PSSHRQ21",276,0)
 . ;
"RTN","PSSHRQ21",277,0)
 . ; Write consumer monograph
"RTN","PSSHRQ21",278,0)
 . ; consumer monograph NOT currently available TODO add when available
"RTN","PSSHRQ21",279,0)
 . QUIT
"RTN","PSSHRQ21",280,0)
 QUIT
"RTN","PSSHRQ21",281,0)
 ;;
"RTN","PSSHRQ21",282,0)
CHKHASH(HASH,CNT,SUB1,SUB2) ;
"RTN","PSSHRQ21",283,0)
 ;CHECKS if hash node has data
"RTN","PSSHRQ21",284,0)
 ;inputs: HASH-ARRAY PASSED IN BY REF
"RTN","PSSHRQ21",285,0)
 ;        CNT-The hash number passed in
"RTN","PSSHRQ21",286,0)
 ;        SUB1--First subscript
"RTN","PSSHRQ21",287,0)
 ;        SUB2 (OPTIONAL)-SECOND SUBSCRIPT
"RTN","PSSHRQ21",288,0)
 ;RETURNS LENGTH OF DATA IN NODE OR 0 IF DOESN'T EXIST
"RTN","PSSHRQ21",289,0)
 N RESULT
"RTN","PSSHRQ21",290,0)
 D
"RTN","PSSHRQ21",291,0)
 .I $L($G(SUB2)) D  Q
"RTN","PSSHRQ21",292,0)
 ..S RESULT=$L($G(HASH(CNT,SUB1,SUB2)))
"RTN","PSSHRQ21",293,0)
 .S RESULT=$L($G(HASH(CNT,SUB1)))
"RTN","PSSHRQ21",294,0)
 Q RESULT
"RTN","PSSHRQ21",295,0)
 ;
"RTN","PSSHRQ21",296,0)
TRANSEV(SEV) ;
"RTN","PSSHRQ21",297,0)
 ; @DESC Translates the severity attribute returned by the XML into
"RTN","PSSHRQ21",298,0)
 ; a VistA specific severity
"RTN","PSSHRQ21",299,0)
 ;
"RTN","PSSHRQ21",300,0)
 ; @SEV Severity returned from the XML
"RTN","PSSHRQ21",301,0)
 ;
"RTN","PSSHRQ21",302,0)
 ; @RETURNS VistA specific severity
"RTN","PSSHRQ21",303,0)
 ;
"RTN","PSSHRQ21",304,0)
 ; DrugDrugChecks with an FDB severity of "Contraindicated Drug Combination"
"RTN","PSSHRQ21",305,0)
 ; will be displayed as "Critical".
"RTN","PSSHRQ21",306,0)
 ; DrugDrugChecks with an FDB severity of "Severe Interaction" will be displayed as "Significant".
"RTN","PSSHRQ21",307,0)
 ; IMPORTANT:
"RTN","PSSHRQ21",308,0)
 ; DrugDrugChecks that are not 'critical' or 'significant' are not included in output global.
"RTN","PSSHRQ21",309,0)
 QUIT $SELECT(SEV="Contraindicated Drug Combination":"Critical",SEV="Severe Interaction":"Significant",1:-1)
"RTN","PSSHRQ21",310,0)
 ;;
"RTN","PSSHRQ21",311,0)
SEVCODE(SEV) ;
"RTN","PSSHRQ21",312,0)
 ; @DESC Returns the proper severity code depending on the VistA specific severity
"RTN","PSSHRQ21",313,0)
 ;
"RTN","PSSHRQ21",314,0)
 ; @SEV VistA specific severity.
"RTN","PSSHRQ21",315,0)
 ;
"RTN","PSSHRQ21",316,0)
 ; @RETURNS Returns severity code. 'C' for Critical. 'S' for Significant.
"RTN","PSSHRQ21",317,0)
 ;
"RTN","PSSHRQ21",318,0)
 QUIT $SELECT(SEV="Critical":"C",SEV="Significant":"S")
"RTN","PSSHRQ21",319,0)
 ;;
"RTN","PSSHRQ21",320,0)
COPYRITE(SOURCE) ;
"RTN","PSSHRQ21",321,0)
 ; @DESC Returns correct copyright disclaimer for FDB OR VA PBM in format
"RTN","PSSHRQ21",322,0)
 ; @Copyright [Current Year] First DataBank, Inc.
"RTN","PSSHRQ21",323,0)
 ; @Information provided by VA PBM-SHG
"RTN","PSSHRQ21",324,0)
 ; @INPUT: source FDB OR Custom
"RTN","PSSHRQ21",325,0)
 ; @RETURNS FDB copyright OR va pbm information
"RTN","PSSHRQ21",326,0)
 ;
"RTN","PSSHRQ21",327,0)
 NEW PSS
"RTN","PSSHRQ21",328,0)
 ;
"RTN","PSSHRQ21",329,0)
 N %I
"RTN","PSSHRQ21",330,0)
 DO NOW^%DTC
"RTN","PSSHRQ21",331,0)
 SET PSS("fileManYear")=%I(3)
"RTN","PSSHRQ21",332,0)
 ; File man years begin at 1700
"RTN","PSSHRQ21",333,0)
 SET PSS("year")=PSS("fileManYear")+1700
"RTN","PSSHRQ21",334,0)
 ;
"RTN","PSSHRQ21",335,0)
 D  ;Case on Source
"RTN","PSSHRQ21",336,0)
 .I SOURCE="Custom" S PSS("source")="Information provided by VA PBM-SHG" Q
"RTN","PSSHRQ21",337,0)
 .S PSS("source")="Copyright "_PSS("year")_" First DataBank, Inc."
"RTN","PSSHRQ21",338,0)
 QUIT PSS("source")
"RTN","PSSHRQ21",339,0)
 ;;
"RTN","PSSHRQ21",340,0)
 ;;
"RTN","PSSHRQ22")
0^6^B58385723
"RTN","PSSHRQ22",1,0)
PSSHRQ22 ;WOIFO/AV,TS - Handles parsing a PEPS drugTherapyChecks XML element ;09/20/07
"RTN","PSSHRQ22",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSHRQ22",3,0)
 ;
"RTN","PSSHRQ22",4,0)
 ; @authors - Alex Vazquez, Tim Sabat
"RTN","PSSHRQ22",5,0)
 ; @date    - September 19, 2007
"RTN","PSSHRQ22",6,0)
 ; @version - 1.0
"RTN","PSSHRQ22",7,0)
 ;
"RTN","PSSHRQ22",8,0)
 QUIT
"RTN","PSSHRQ22",9,0)
 ;;
"RTN","PSSHRQ22",10,0)
THERAPY(DOCHAND,NODE,BASE) ;
"RTN","PSSHRQ22",11,0)
 ; @DRIVER
"RTN","PSSHRQ22",12,0)
 ; @DESC Parses the drugTherapyChecks XML elements
"RTN","PSSHRQ22",13,0)
 ;
"RTN","PSSHRQ22",14,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ22",15,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRQ22",16,0)
 ; @PSSHAND Handle to DrugOrderChecks object
"RTN","PSSHRQ22",17,0)
 ;
"RTN","PSSHRQ22",18,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ22",19,0)
 ;
"RTN","PSSHRQ22",20,0)
 NEW PSS,MSGHASH,DRUGHASH,PSMSGCNT
"RTN","PSSHRQ22",21,0)
 ;
"RTN","PSSHRQ22",22,0)
 SET PSS("child")=0
"RTN","PSSHRQ22",23,0)
 SET PSS("therapyCount")=0
"RTN","PSSHRQ22",24,0)
 SET PSMSGCNT=0
"RTN","PSSHRQ22",25,0)
 ;
"RTN","PSSHRQ22",26,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,NODE,PSS("child")) QUIT:PSS("child")=0  DO
"RTN","PSSHRQ22",27,0)
 . SET PSS("childName")=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ22",28,0)
 . ;
"RTN","PSSHRQ22",29,0)
 . ;XML allows messages within both drugTherapyChecks and drugTherapyCheck
"RTN","PSSHRQ22",30,0)
 . SET:PSS("childName")="message" PSMSGCNT=PSMSGCNT+1
"RTN","PSSHRQ22",31,0)
 . DO:PSS("childName")="message" MSGREAD(DOCHAND,PSS("child"),.MSGHASH,PSMSGCNT)
"RTN","PSSHRQ22",32,0)
 . ;
"RTN","PSSHRQ22",33,0)
 . SET:PSS("childName")="drugTherapyCheck" PSS("therapyCount")=PSS("therapyCount")+1
"RTN","PSSHRQ22",34,0)
 . DO:PSS("childName")="drugTherapyCheck" THERREAD(DOCHAND,PSS("child"),.DRUGHASH,PSS("therapyCount"),.MSGHASH,PSMSGCNT)
"RTN","PSSHRQ22",35,0)
 ;
"RTN","PSSHRQ22",36,0)
 ;MSGHASH is set in THEREAD
"RTN","PSSHRQ22",37,0)
 DO MSGWRITE^PSSHRQ21(.MSGHASH,BASE,"THERAPY")
"RTN","PSSHRQ22",38,0)
 DO THERWRIT(.DRUGHASH,BASE)
"RTN","PSSHRQ22",39,0)
 ;
"RTN","PSSHRQ22",40,0)
 QUIT
"RTN","PSSHRQ22",41,0)
 ;;
"RTN","PSSHRQ22",42,0)
MSGREAD(DOCHAND,NODE,HASH,COUNT) ;
"RTN","PSSHRQ22",43,0)
 ; @DESC Handles parsing message section
"RTN","PSSHRQ22",44,0)
 ;
"RTN","PSSHRQ22",45,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ22",46,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRQ22",47,0)
 ; @COUNT Count of message sections
"RTN","PSSHRQ22",48,0)
 ; @HASH Where to store info
"RTN","PSSHRQ22",49,0)
 ;
"RTN","PSSHRQ22",50,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ22",51,0)
 ;
"RTN","PSSHRQ22",52,0)
 ; Parse the message and store in hash
"RTN","PSSHRQ22",53,0)
 DO PARSEMSG^PSSHRCOM(DOCHAND,NODE,.HASH,COUNT)
"RTN","PSSHRQ22",54,0)
 ;
"RTN","PSSHRQ22",55,0)
 QUIT
"RTN","PSSHRQ22",56,0)
 ;
"RTN","PSSHRQ22",57,0)
 ;
"RTN","PSSHRQ22",58,0)
THERREAD(DOCHAND,NODE,HASH,COUNT,MSGHASH,MSGCNT) ;
"RTN","PSSHRQ22",59,0)
 ; @DESC Handles parsing and storage of drugTherapyCheck element
"RTN","PSSHRQ22",60,0)
 ;
"RTN","PSSHRQ22",61,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ22",62,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRQ22",63,0)
 ; @COUNT Count of drug sections
"RTN","PSSHRQ22",64,0)
 ; @HASH Where to store info
"RTN","PSSHRQ22",65,0)
 ; @MSGHASH Where message (alert)from FDB is stored
"RTN","PSSHRQ22",66,0)
 ; @MSGCNT-The current count of the number of messages (messages can occur in both places)
"RTN","PSSHRQ22",67,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ22",68,0)
 NEW PSS
"RTN","PSSHRQ22",69,0)
 NEW INTDRUG   ;FOR TEST
"RTN","PSSHRQ22",70,0)
 SET PSS("child")=0
"RTN","PSSHRQ22",71,0)
 SET PSS("messageCount")=MSGCNT
"RTN","PSSHRQ22",72,0)
 ;
"RTN","PSSHRQ22",73,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,NODE,PSS("child")) QUIT:PSS("child")=0  DO
"RTN","PSSHRQ22",74,0)
 . SET PSS("childName")=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ22",75,0)
 . 
"RTN","PSSHRQ22",76,0)
 . I PSS("childName")="message" D  Q
"RTN","PSSHRQ22",77,0)
 . .S PSS("messageCount")=PSS("messageCount")+1
"RTN","PSSHRQ22",78,0)
 . .D MSGREAD(DOCHAND,PSS("child"),.MSGHASH,PSS("messageCount"))
"RTN","PSSHRQ22",79,0)
 . ;
"RTN","PSSHRQ22",80,0)
 . DO:PSS("childName")="interactedDrugList"
"RTN","PSSHRQ22",81,0)
 . . ; Store the interacted drug list
"RTN","PSSHRQ22",82,0)
 . . DO DRUGLIST^PSSHRCOM(DOCHAND,PSS("child"),.HASH,COUNT)
"RTN","PSSHRQ22",83,0)
 . DO:PSS("childName")="classification"
"RTN","PSSHRQ22",84,0)
 . . SET HASH(COUNT,"classification")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ22",85,0)
 . . QUIT
"RTN","PSSHRQ22",86,0)
 . DO:PSS("childName")="duplicateAllowance"
"RTN","PSSHRQ22",87,0)
 . . SET HASH(COUNT,"duplicateAllowance")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ22",88,0)
 . . QUIT
"RTN","PSSHRQ22",89,0)
 . DO:PSS("childName")="shortText"
"RTN","PSSHRQ22",90,0)
 . . SET HASH(COUNT,"shortText")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ22",91,0)
 . . QUIT
"RTN","PSSHRQ22",92,0)
 . QUIT
"RTN","PSSHRQ22",93,0)
 QUIT
"RTN","PSSHRQ22",94,0)
 ;;
"RTN","PSSHRQ22",95,0)
THERWRIT(HASH,BASE) ;
"RTN","PSSHRQ22",96,0)
 ; @DESC Handles writing drugDrugChecks drugTherapy section of the XML document
"RTN","PSSHRQ22",97,0)
 ;
"RTN","PSSHRQ22",98,0)
 ; @HASH ByRef, Hash used to store response
"RTN","PSSHRQ22",99,0)
 ; @BASE Base of output global
"RTN","PSSHRQ22",100,0)
 ;
"RTN","PSSHRQ22",101,0)
 ; @RETURNS Nothing. Stores values in output global.
"RTN","PSSHRQ22",102,0)
 ;
"RTN","PSSHRQ22",103,0)
 NEW PSS,I,DRUGNUM,NODE,COUNT,INDX
"RTN","PSSHRQ22",104,0)
 ;
"RTN","PSSHRQ22",105,0)
 SET I=""
"RTN","PSSHRQ22",106,0)
 SET COUNT=0
"RTN","PSSHRQ22",107,0)
 ;
"RTN","PSSHRQ22",108,0)
 ; Creates the index of drug combinations
"RTN","PSSHRQ22",109,0)
 ; Each unique drug combination has the corresponding count
"RTN","PSSHRQ22",110,0)
 DO MAKEINDX(.INDX,.HASH)
"RTN","PSSHRQ22",111,0)
 ;
"RTN","PSSHRQ22",112,0)
 FOR  SET I=$ORDER(HASH(I)) QUIT:I=""  DO
"RTN","PSSHRQ22",113,0)
 . ; Get the drugList identifier,
"RTN","PSSHRQ22",114,0)
 . ; Then get the count, count will be used to write global
"RTN","PSSHRQ22",115,0)
 . SET COUNT=INDX($$DLISTID(.HASH,I))
"RTN","PSSHRQ22",116,0)
 . ;
"RTN","PSSHRQ22",117,0)
 . ; Create the node to be used with subscript indirection
"RTN","PSSHRQ22",118,0)
 . SET NODE="^TMP($JOB,BASE,""OUT"",""THERAPY"",COUNT)"
"RTN","PSSHRQ22",119,0)
 . ; Write out the drug list to the global
"RTN","PSSHRQ22",120,0)
 . SET DRUGNUM=""
"RTN","PSSHRQ22",121,0)
 . FOR  SET DRUGNUM=$ORDER(HASH(I,"drugList",DRUGNUM)) QUIT:DRUGNUM=""  DO
"RTN","PSSHRQ22",122,0)
 . . DO TMPGLOB(.HASH,I,COUNT,DRUGNUM,BASE)
"RTN","PSSHRQ22",123,0)
 . . QUIT
"RTN","PSSHRQ22",124,0)
 . ;
"RTN","PSSHRQ22",125,0)
 . ; Write out the nodes to the correct subcount
"RTN","PSSHRQ22",126,0)
 . ; Get the correct subcount number first
"RTN","PSSHRQ22",127,0)
 . ; Get last count, then add 1 to move to next counter
"RTN","PSSHRQ22",128,0)
 . SET PSS("subCount")=$$SUBCOUNT(COUNT,BASE)
"RTN","PSSHRQ22",129,0)
 . SET @NODE@(PSS("subCount"),"ALLOW")=HASH(I,"duplicateAllowance")
"RTN","PSSHRQ22",130,0)
 . SET @NODE@(PSS("subCount"),"CLASS")=HASH(I,"classification")
"RTN","PSSHRQ22",131,0)
 . SET @NODE@(PSS("subCount"),"SHORT")=HASH(I,"shortText")
"RTN","PSSHRQ22",132,0)
 . ;
"RTN","PSSHRQ22",133,0)
 . QUIT
"RTN","PSSHRQ22",134,0)
 ;
"RTN","PSSHRQ22",135,0)
 QUIT
"RTN","PSSHRQ22",136,0)
 ;;
"RTN","PSSHRQ22",137,0)
SUBCOUNT(COUNT,BASE) ;
"RTN","PSSHRQ22",138,0)
 ; @DESC Returns the next subcount for drug therapy output global
"RTN","PSSHRQ22",139,0)
 ; Format is ^TMP($JOB,BASE,"OUT","THERAPY",COUNT,SUBCOUNT)
"RTN","PSSHRQ22",140,0)
 ;
"RTN","PSSHRQ22",141,0)
 ; @COUNT The main count of drug therapy
"RTN","PSSHRQ22",142,0)
 ; @BASE The base of output global
"RTN","PSSHRQ22",143,0)
 ;
"RTN","PSSHRQ22",144,0)
 ; @RETURNS The last subcount of drug therapy output global.
"RTN","PSSHRQ22",145,0)
 ;
"RTN","PSSHRQ22",146,0)
 NEW PSS
"RTN","PSSHRQ22",147,0)
 ;
"RTN","PSSHRQ22",148,0)
 ; loop through the subcounts of the current count, store highest
"RTN","PSSHRQ22",149,0)
 ; subcount and return it
"RTN","PSSHRQ22",150,0)
 SET PSS("subCount")=""
"RTN","PSSHRQ22",151,0)
 SET PSS("highCount")=0
"RTN","PSSHRQ22",152,0)
 FOR  SET PSS("subCount")=$ORDER(^TMP($JOB,BASE,"OUT","THERAPY",COUNT,PSS("subCount"))) QUIT:PSS("subCount")=""  DO
"RTN","PSSHRQ22",153,0)
 . IF +PSS("subCount")>PSS("highCount") SET PSS("highCount")=+PSS("subCount")
"RTN","PSSHRQ22",154,0)
 . QUIT
"RTN","PSSHRQ22",155,0)
 ;
"RTN","PSSHRQ22",156,0)
 QUIT PSS("highCount")+1
"RTN","PSSHRQ22",157,0)
 ;;
"RTN","PSSHRQ22",158,0)
MAKEINDX(INDX,HASH) ;
"RTN","PSSHRQ22",159,0)
 ; @DESC Creates index of drug list combinations. Uses gcn as the
"RTN","PSSHRQ22",160,0)
 ; unique identifier of drug.
"RTN","PSSHRQ22",161,0)
 ;
"RTN","PSSHRQ22",162,0)
 ; @HASH ByRef, Holds the list of drugs
"RTN","PSSHRQ22",163,0)
 ; @INDX ByRef, Used to store count of drug list
"RTN","PSSHRQ22",164,0)
 ;
"RTN","PSSHRQ22",165,0)
 ; @RETURNS Nothing.  Values returned in INDX hash
"RTN","PSSHRQ22",166,0)
 ;
"RTN","PSSHRQ22",167,0)
 NEW I,PSS
"RTN","PSSHRQ22",168,0)
 ;
"RTN","PSSHRQ22",169,0)
 SET PSS("uniqueDrugCombinationCount")=0
"RTN","PSSHRQ22",170,0)
 ;
"RTN","PSSHRQ22",171,0)
 SET I=""
"RTN","PSSHRQ22",172,0)
 FOR  SET I=$ORDER(HASH(I)) QUIT:I=""  DO
"RTN","PSSHRQ22",173,0)
 . ; Get the uniqueDrugCombinationId, i.e. gcn's strung together
"RTN","PSSHRQ22",174,0)
 . SET PSS("uniqueDrugCombination")=$$DLISTID(.HASH,I)
"RTN","PSSHRQ22",175,0)
 . ;
"RTN","PSSHRQ22",176,0)
 . ; Check to see if drug combination already exist
"RTN","PSSHRQ22",177,0)
 . ; If it does not exist increase the unique drug count
"RTN","PSSHRQ22",178,0)
 . IF $DATA(INDX(PSS("uniqueDrugCombination")))=0 DO
"RTN","PSSHRQ22",179,0)
 . . SET PSS("uniqueDrugCombinationCount")=PSS("uniqueDrugCombinationCount")+1
"RTN","PSSHRQ22",180,0)
 . . SET INDX(PSS("uniqueDrugCombination"))=PSS("uniqueDrugCombinationCount")
"RTN","PSSHRQ22",181,0)
 . QUIT
"RTN","PSSHRQ22",182,0)
 ;
"RTN","PSSHRQ22",183,0)
 QUIT
"RTN","PSSHRQ22",184,0)
 ;;
"RTN","PSSHRQ22",185,0)
DLISTID(HASH,I) ;
"RTN","PSSHRQ22",186,0)
 ; @DESC Returns the id of the drug list. The id of the drug list
"RTN","PSSHRQ22",187,0)
 ; consist of the gcn in sorted order separated by '^'.
"RTN","PSSHRQ22",188,0)
 ;
"RTN","PSSHRQ22",189,0)
 ; @HASH ByRef, Holds the list of drugs
"RTN","PSSHRQ22",190,0)
 ; @I    The current count on the hash
"RTN","PSSHRQ22",191,0)
 ;
"RTN","PSSHRQ22",192,0)
 ; @RETURNS Id of drug list.
"RTN","PSSHRQ22",193,0)
 NEW J,K,PSS,ARRAY
"RTN","PSSHRQ22",194,0)
 ; loop through the drug therapy checks count
"RTN","PSSHRQ22",195,0)
 ; Create a temp array to sort the gcns in the ascending order
"RTN","PSSHRQ22",196,0)
 SET J=""
"RTN","PSSHRQ22",197,0)
 FOR  SET J=$ORDER(HASH(I,"drugList",J)) QUIT:J=""  DO
"RTN","PSSHRQ22",198,0)
 . ;SET PSS("uniqueDrugID")=HASH(I,"drugList",J,"orderNumber")
"RTN","PSSHRQ22",199,0)
 . SET PSS("uniqueDrugID")=HASH(I,"drugList",J,"gcn")   ;PO: get GCN
"RTN","PSSHRQ22",200,0)
 . SET ARRAY(PSS("uniqueDrugID"))=1
"RTN","PSSHRQ22",201,0)
 . QUIT
"RTN","PSSHRQ22",202,0)
 ;
"RTN","PSSHRQ22",203,0)
 ; Create a uniqueDrugCombination from temp array
"RTN","PSSHRQ22",204,0)
 SET K=""
"RTN","PSSHRQ22",205,0)
 SET PSS("tempCount")=0
"RTN","PSSHRQ22",206,0)
 SET PSS("uniqueDrugCombination")=""
"RTN","PSSHRQ22",207,0)
 FOR  SET K=$ORDER(ARRAY(K)) QUIT:K=""  DO
"RTN","PSSHRQ22",208,0)
 . IF PSS("tempCount")>0 DO
"RTN","PSSHRQ22",209,0)
 . . SET PSS("uniqueDrugCombination")=PSS("uniqueDrugCombination")_"^"_K
"RTN","PSSHRQ22",210,0)
 . ;
"RTN","PSSHRQ22",211,0)
 . ; For first loop do no attach ^ before setting
"RTN","PSSHRQ22",212,0)
 . IF PSS("tempCount")=0 DO
"RTN","PSSHRQ22",213,0)
 . . SET PSS("tempCount")=PSS("tempCount")+1
"RTN","PSSHRQ22",214,0)
 . . SET PSS("uniqueDrugCombination")=K
"RTN","PSSHRQ22",215,0)
 . ;
"RTN","PSSHRQ22",216,0)
 . QUIT
"RTN","PSSHRQ22",217,0)
 ;
"RTN","PSSHRQ22",218,0)
 QUIT PSS("uniqueDrugCombination")
"RTN","PSSHRQ22",219,0)
 ;;
"RTN","PSSHRQ22",220,0)
TMPGLOB(HASH,MAINCNT,CHEKCNT,DRUGNUM,BASE) ;
"RTN","PSSHRQ22",221,0)
 ; @DESC Writes the drugList to the proper global
"RTN","PSSHRQ22",222,0)
 ;
"RTN","PSSHRQ22",223,0)
 ; @HASH ByRef, Has used to store response
"RTN","PSSHRQ22",224,0)
 ; @CHECKCNT The current TherapyCheck result
"RTN","PSSHRQ22",225,0)
 ; @DRUGNUM The current drug interaction
"RTN","PSSHRQ22",226,0)
 ; @BASE Base of the output global
"RTN","PSSHRQ22",227,0)
 ;
"RTN","PSSHRQ22",228,0)
 ; @RETURNS Nothing.  Stores values in output global.
"RTN","PSSHRQ22",229,0)
 ;
"RTN","PSSHRQ22",230,0)
 NEW NODE
"RTN","PSSHRQ22",231,0)
 SET NODE="^TMP($JOB,BASE,""OUT"",""THERAPY"",CHEKCNT,""DRUGS"",DRUGNUM)"
"RTN","PSSHRQ22",232,0)
 SET @NODE=$$VALUE(.HASH,MAINCNT,DRUGNUM)
"RTN","PSSHRQ22",233,0)
 QUIT
"RTN","PSSHRQ22",234,0)
 ;;
"RTN","PSSHRQ22",235,0)
VALUE(HASH,MAINCNT,DRUGNUM) ;
"RTN","PSSHRQ22",236,0)
 ; @DESC Provides the ""piece" data we use when creating the output global.
"RTN","PSSHRQ22",237,0)
 ;
"RTN","PSSHRQ22",238,0)
 ; @HASH ByRef, Has used to store response
"RTN","PSSHRQ22",239,0)
 ; @MAINCNT The current TherapyCheck result
"RTN","PSSHRQ22",240,0)
 ; @DRUGNUM The current drug interaction
"RTN","PSSHRQ22",241,0)
 ;
"RTN","PSSHRQ22",242,0)
 ; @RETURNS The right side of the global for therapy.
"RTN","PSSHRQ22",243,0)
 ;
"RTN","PSSHRQ22",244,0)
 ; PharmacyOrderNumber ^
"RTN","PSSHRQ22",245,0)
 ; Drug IEN ^
"RTN","PSSHRQ22",246,0)
 ; Drug Name ^
"RTN","PSSHRQ22",247,0)
 ; CPRS Order Number ^
"RTN","PSSHRQ22",248,0)
 ; Package
"RTN","PSSHRQ22",249,0)
 ;
"RTN","PSSHRQ22",250,0)
 NEW OUT
"RTN","PSSHRQ22",251,0)
 SET OUT=HASH(MAINCNT,"drugList",DRUGNUM,"orderNumber")_"^"
"RTN","PSSHRQ22",252,0)
 SET OUT=OUT_HASH(MAINCNT,"drugList",DRUGNUM,"ien")_"^"
"RTN","PSSHRQ22",253,0)
 SET OUT=OUT_HASH(MAINCNT,"drugList",DRUGNUM,"drugName")_"^"
"RTN","PSSHRQ22",254,0)
 SET OUT=OUT_HASH(MAINCNT,"drugList",DRUGNUM,"cprsOrderNumber")_"^"
"RTN","PSSHRQ22",255,0)
 SET OUT=OUT_HASH(MAINCNT,"drugList",DRUGNUM,"package")
"RTN","PSSHRQ22",256,0)
 QUIT OUT
"RTN","PSSHRQ22",257,0)
 ;;
"RTN","PSSHRQ23")
0^7^B235617797
"RTN","PSSHRQ23",1,0)
PSSHRQ23 ;WOIFO/AV,TS,SG - Parses out drugsNotChecked and DrugDoseCheck XML ;09/20/07
"RTN","PSSHRQ23",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSHRQ23",3,0)
 ;
"RTN","PSSHRQ23",4,0)
 ; @authors - Alex Vazquez, Tim Sabat, Steve Gordon
"RTN","PSSHRQ23",5,0)
 ; @date    - September 19, 2007
"RTN","PSSHRQ23",6,0)
 ; @version - 1.0
"RTN","PSSHRQ23",7,0)
 ;
"RTN","PSSHRQ23",8,0)
 QUIT
"RTN","PSSHRQ23",9,0)
 ;;
"RTN","PSSHRQ23",10,0)
DRGNTCK(DOCHAND,NODE,BASE) ;
"RTN","PSSHRQ23",11,0)
 ; @DESC Handles the drugsNotChecked section
"RTN","PSSHRQ23",12,0)
 ;
"RTN","PSSHRQ23",13,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ23",14,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRQ23",15,0)
 ; @BASE Base of output global
"RTN","PSSHRQ23",16,0)
 ;
"RTN","PSSHRQ23",17,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ23",18,0)
 ;
"RTN","PSSHRQ23",19,0)
 NEW HASH
"RTN","PSSHRQ23",20,0)
 ;
"RTN","PSSHRQ23",21,0)
 ; Read error into hash variable
"RTN","PSSHRQ23",22,0)
 DO NOTREAD(DOCHAND,NODE,.HASH)
"RTN","PSSHRQ23",23,0)
 ;
"RTN","PSSHRQ23",24,0)
 ; Write hashed variable to output global
"RTN","PSSHRQ23",25,0)
 DO NOTWRITE(.HASH,BASE)
"RTN","PSSHRQ23",26,0)
 ;
"RTN","PSSHRQ23",27,0)
 QUIT
"RTN","PSSHRQ23",28,0)
 ;;
"RTN","PSSHRQ23",29,0)
NOTREAD(DOCHAND,NODE,HASH) ;
"RTN","PSSHRQ23",30,0)
 ; @DESC Handles reading drugsNotChecked section of the XML document
"RTN","PSSHRQ23",31,0)
 ;
"RTN","PSSHRQ23",32,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ23",33,0)
 ; @NODE Node associated with drugsNotChecked XML element
"RTN","PSSHRQ23",34,0)
 ; @HASH ByRef, Hash used to store response
"RTN","PSSHRQ23",35,0)
 ;
"RTN","PSSHRQ23",36,0)
 ; @RETURNS Variables in hash
"RTN","PSSHRQ23",37,0)
 ;
"RTN","PSSHRQ23",38,0)
 NEW PSS
"RTN","PSSHRQ23",39,0)
 ;
"RTN","PSSHRQ23",40,0)
 SET PSS("child")=0
"RTN","PSSHRQ23",41,0)
 SET PSS("count")=0
"RTN","PSSHRQ23",42,0)
 ;
"RTN","PSSHRQ23",43,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,NODE,PSS("child")) QUIT:PSS("child")<1  DO
"RTN","PSSHRQ23",44,0)
 . SET HASH(PSS("count"),"reason")=$$VALUE^MXMLDOM(DOCHAND,PSS("child"),"status")
"RTN","PSSHRQ23",45,0)
 . SET HASH(PSS("count"),"reasonCode")=""
"RTN","PSSHRQ23",46,0)
 . SET HASH(PSS("count"),"reasonText")=""
"RTN","PSSHRQ23",47,0)
 . SET HASH(PSS("count"),"reasonSource")="PEPS" ; Always PEPS if returned from XML
"RTN","PSSHRQ23",48,0)
 . ; Get drug element of drugNotChecked
"RTN","PSSHRQ23",49,0)
 . ; No need to iterate over drug subelements because only 1 possible
"RTN","PSSHRQ23",50,0)
 . DO PARSEDRG^PSSHRCOM(DOCHAND,$$CHILD^MXMLDOM(DOCHAND,PSS("child")),.HASH,PSS("count"))
"RTN","PSSHRQ23",51,0)
 . SET PSS("count")=PSS("count")+1
"RTN","PSSHRQ23",52,0)
 . QUIT
"RTN","PSSHRQ23",53,0)
 QUIT
"RTN","PSSHRQ23",54,0)
 ;;
"RTN","PSSHRQ23",55,0)
NOTWRITE(HASH,BASE) ;
"RTN","PSSHRQ23",56,0)
 ; @DESC Handles writing drugsNotChecked section of the XML document and
"RTN","PSSHRQ23",57,0)
 ; and drugs pulled by validation logic as uncheckable (i.e. no gcn).
"RTN","PSSHRQ23",58,0)
 ;
"RTN","PSSHRQ23",59,0)
 ; @HASH ByRef, Hash used to store response
"RTN","PSSHRQ23",60,0)
 ; @BASE Base of output global
"RTN","PSSHRQ23",61,0)
 ;
"RTN","PSSHRQ23",62,0)
 ; @RETURNS Nothing. Stores values in output global.
"RTN","PSSHRQ23",63,0)
 ;
"RTN","PSSHRQ23",64,0)
 NEW I,DATASTR,MESSAGE,PSS,PSSHASH
"RTN","PSSHRQ23",65,0)
 S PSSHASH("Base")=BASE  ;FOR NEXTEX CALL
"RTN","PSSHRQ23",66,0)
 S I=""
"RTN","PSSHRQ23",67,0)
 F  S I=$O(HASH(I)) Q:I=""  D
"RTN","PSSHRQ23",68,0)
 .S PSS("PharmOrderNo")=HASH(I,"orderNumber")  ;for nextex call below
"RTN","PSSHRQ23",69,0)
 .S MESSAGE=$$GCNREASN^PSSHRVL1(HASH(I,"ien"),HASH(I,"drugName"),HASH(I,"orderNumber"),1)
"RTN","PSSHRQ23",70,0)
 .Q:+$P(MESSAGE,U,3)=1
"RTN","PSSHRQ23",71,0)
 .S REASON=$P(MESSAGE,U,2),MESSAGE=$P(MESSAGE,U)
"RTN","PSSHRQ23",72,0)
 .S DATASTR=HASH(I,"gcn")_U_HASH(I,"vuid")_U_HASH(I,"ien")_U_HASH(I,"drugName")_U_HASH(I,"cprsOrderNumber")
"RTN","PSSHRQ23",73,0)
 .S DATASTR=DATASTR_U_HASH(I,"package")_U_MESSAGE_U_U_HASH(I,"reasonSource")_U_REASON
"RTN","PSSHRQ23",74,0)
 .S ^TMP($J,BASE,"OUT","EXCEPTIONS",HASH(I,"orderNumber"),$$NEXTEX^PSSHRVL1(.PSS,.PSSHASH))=DATASTR
"RTN","PSSHRQ23",75,0)
 Q
"RTN","PSSHRQ23",76,0)
 ;
"RTN","PSSHRQ23",77,0)
WRTNODE(I,SUB,HASH) ;
"RTN","PSSHRQ23",78,0)
 ;sets up the error node for a message
"RTN","PSSHRQ23",79,0)
 ;inputs:
"RTN","PSSHRQ23",80,0)
 ;  I-Counter for the hash array
"RTN","PSSHRQ23",81,0)
 ;  SUB-subscript--either drugdrug, therapy or dose
"RTN","PSSHRQ23",82,0)
 ;  HASH-array containing the information for the global
"RTN","PSSHRQ23",83,0)
 ;outputs: ^TMP error global
"RTN","PSSHRQ23",84,0)
 ;
"RTN","PSSHRQ23",85,0)
 N NODECNT,NODE
"RTN","PSSHRQ23",86,0)
 ;
"RTN","PSSHRQ23",87,0)
 SET NODE="^TMP($JOB,BASE,""OUT"",SUB,""ERROR"",HASH(I,""orderNumber""))"
"RTN","PSSHRQ23",88,0)
 ;gets next error number
"RTN","PSSHRQ23",89,0)
 S NODECNT=$O(@NODE@(":"),-1)+1
"RTN","PSSHRQ23",90,0)
 SET NODE="^TMP($JOB,BASE,""OUT"",SUB,""ERROR"",HASH(I,""orderNumber""),NODECNT)"
"RTN","PSSHRQ23",91,0)
 ;I $G(HASH(I,"severity"))="Information" Q   ;If severity="information" don't save
"RTN","PSSHRQ23",92,0)
 SET @NODE@(0)=HASH(I,"drugName")_"^"_HASH(I,"ien")_"^"_HASH(I,"cprsOrderNumber")_"^"_HASH(I,"package")
"RTN","PSSHRQ23",93,0)
 SET @NODE@("SEV")=$G(HASH(I,"severity"))
"RTN","PSSHRQ23",94,0)
 SET @NODE@("TYPE")=$G(HASH(I,"type"))
"RTN","PSSHRQ23",95,0)
 ;SET @NODE@("NAME")=HASH(I,"drugName")
"RTN","PSSHRQ23",96,0)
 SET @NODE@("TEXT")=HASH(I,"text")
"RTN","PSSHRQ23",97,0)
 ;Message node to display to user
"RTN","PSSHRQ23",98,0)
 S @NODE@("MSG")=HASH(I,"msg")
"RTN","PSSHRQ23",99,0)
 QUIT
"RTN","PSSHRQ23",100,0)
 ;
"RTN","PSSHRQ23",101,0)
NEXTCNT(BASE,ORDR) ;
"RTN","PSSHRQ23",102,0)
 ; @DESC Returns the next counter for the exceptions output global
"RTN","PSSHRQ23",103,0)
 ;
"RTN","PSSHRQ23",104,0)
 ; @ORDR Order number being counted on
"RTN","PSSHRQ23",105,0)
 ;
"RTN","PSSHRQ23",106,0)
 ; @RETURNS The next counter for the exceptions output global
"RTN","PSSHRQ23",107,0)
 ;
"RTN","PSSHRQ23",108,0)
 NEW I
"RTN","PSSHRQ23",109,0)
 ;
"RTN","PSSHRQ23",110,0)
 SET I=0
"RTN","PSSHRQ23",111,0)
 SET I=$ORDER(^TMP($JOB,BASE,"OUT","EXCEPTIONS",ORDR,I),-1)
"RTN","PSSHRQ23",112,0)
 SET I=I+1
"RTN","PSSHRQ23",113,0)
 QUIT I
"RTN","PSSHRQ23",114,0)
 ;;
"RTN","PSSHRQ23",115,0)
DRGDOSE(DOCHAND,NODE,BASE) ;
"RTN","PSSHRQ23",116,0)
 ; @DESC Handles the drugDoseChecks element
"RTN","PSSHRQ23",117,0)
 ;
"RTN","PSSHRQ23",118,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ23",119,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRQ23",120,0)
 ; @BASE name to use for return global
"RTN","PSSHRQ23",121,0)
 ;
"RTN","PSSHRQ23",122,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ23",123,0)
 ;
"RTN","PSSHRQ23",124,0)
 NEW PSS,MSGHASH,DOSEHASH,PSMSGCNT
"RTN","PSSHRQ23",125,0)
 ;
"RTN","PSSHRQ23",126,0)
 SET PSS("child")=0
"RTN","PSSHRQ23",127,0)
 SET PSS("doseCount")=0
"RTN","PSSHRQ23",128,0)
 SET PSMSGCNT=0
"RTN","PSSHRQ23",129,0)
 ;
"RTN","PSSHRQ23",130,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,NODE,PSS("child")) QUIT:PSS("child")<1  DO
"RTN","PSSHRQ23",131,0)
 . SET PSS("childName")=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",132,0)
 . ;
"RTN","PSSHRQ23",133,0)
 . ; Delegate to appropriate function
"RTN","PSSHRQ23",134,0)
 . ; xml can have message at the drugDoseChecks level and at the drugDoseCheck level.
"RTN","PSSHRQ23",135,0)
 . SET:PSS("childName")="message" PSMSGCNT=PSMSGCNT+1
"RTN","PSSHRQ23",136,0)
 . DO:PSS("childName")="message" MSGREAD(DOCHAND,PSS("child"),.MSGHASH,PSMSGCNT)
"RTN","PSSHRQ23",137,0)
 . ;
"RTN","PSSHRQ23",138,0)
 . SET:PSS("childName")="drugDoseCheck" PSS("doseCount")=PSS("doseCount")+1
"RTN","PSSHRQ23",139,0)
 . DO:PSS("childName")="drugDoseCheck" DOSEREAD(DOCHAND,PSS("child"),.DOSEHASH,PSS("doseCount"),.MSGHASH,PSMSGCNT,BASE)
"RTN","PSSHRQ23",140,0)
 . ;
"RTN","PSSHRQ23",141,0)
 . QUIT
"RTN","PSSHRQ23",142,0)
 ; Write to globals  .MSGHASH AND DOSEHASH ARE SET IN DOSEREAD
"RTN","PSSHRQ23",143,0)
 DO MSGWRITE^PSSHRQ21(.MSGHASH,BASE,"DOSE")
"RTN","PSSHRQ23",144,0)
 DO DOSEWRIT(.DOSEHASH,BASE)
"RTN","PSSHRQ23",145,0)
 ;
"RTN","PSSHRQ23",146,0)
 QUIT
"RTN","PSSHRQ23",147,0)
 ;;
"RTN","PSSHRQ23",148,0)
MSGREAD(DOCHAND,NODE,HASH,COUNT) ;
"RTN","PSSHRQ23",149,0)
 ; @DESC Handles parsing message section
"RTN","PSSHRQ23",150,0)
 ;
"RTN","PSSHRQ23",151,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ23",152,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRQ23",153,0)
 ; @COUNT Count of message sections
"RTN","PSSHRQ23",154,0)
 ; @HASH Where to store info
"RTN","PSSHRQ23",155,0)
 ;
"RTN","PSSHRQ23",156,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ23",157,0)
 ;
"RTN","PSSHRQ23",158,0)
 ; Parse the message and store in hash
"RTN","PSSHRQ23",159,0)
 DO PARSEMSG^PSSHRCOM(DOCHAND,NODE,.HASH,COUNT)
"RTN","PSSHRQ23",160,0)
 ;
"RTN","PSSHRQ23",161,0)
 QUIT
"RTN","PSSHRQ23",162,0)
 ;
"RTN","PSSHRQ23",163,0)
DOSEREAD(DOCHAND,NODE,HASH,COUNT,MSGHASH,MSGCNT,BASE) ;
"RTN","PSSHRQ23",164,0)
 ;
"RTN","PSSHRQ23",165,0)
 ; @DESC Reads in the drugDoseCheck XML element
"RTN","PSSHRQ23",166,0)
 ;
"RTN","PSSHRQ23",167,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ23",168,0)
 ; @NODE Node associated with XML element
"RTN","PSSHRQ23",169,0)
 ; @BASE Name for return array
"RTN","PSSHRQ23",170,0)
 ; @MSGHASH-array of messages about drug
"RTN","PSSHRQ23",171,0)
 ; @MSGCNT-a counter on the messages (they can occur at the drugDosechecks or drugDoseCheck level)
"RTN","PSSHRQ23",172,0)
 ; @RETURNS Nothing, values stored in hash
"RTN","PSSHRQ23",173,0)
 ;
"RTN","PSSHRQ23",174,0)
 NEW PSS
"RTN","PSSHRQ23",175,0)
 S PSS("messageCount")=MSGCNT
"RTN","PSSHRQ23",176,0)
 ;
"RTN","PSSHRQ23",177,0)
 ; need drugname and drugien for return node, get them first
"RTN","PSSHRQ23",178,0)
 SET PSS("child")=0
"RTN","PSSHRQ23",179,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,NODE,PSS("child")) QUIT:PSS("child")<1  DO
"RTN","PSSHRQ23",180,0)
 . SET PSS("childName")=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",181,0)
 . ;
"RTN","PSSHRQ23",182,0)
 . ;
"RTN","PSSHRQ23",183,0)
 . I PSS("childName")="message" D  Q
"RTN","PSSHRQ23",184,0)
 . .S PSS("messageCount")=PSS("messageCount")+1
"RTN","PSSHRQ23",185,0)
 . .D MSGREAD(DOCHAND,PSS("child"),.MSGHASH,PSS("messageCount"))
"RTN","PSSHRQ23",186,0)
 . ;
"RTN","PSSHRQ23",187,0)
 . DO:PSS("childName")="drug"
"RTN","PSSHRQ23",188,0)
 . . DO PARSEDRG^PSSHRCOM(DOCHAND,PSS("child"),.HASH,COUNT)
"RTN","PSSHRQ23",189,0)
 . . QUIT
"RTN","PSSHRQ23",190,0)
 . DO:PSS("childName")="singleDoseStatus"
"RTN","PSSHRQ23",191,0)
 . . SET HASH(COUNT,"singleDoseStatus")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",192,0)
 . . QUIT
"RTN","PSSHRQ23",193,0)
 .  DO:PSS("childName")="singleDoseStatusCode"
"RTN","PSSHRQ23",194,0)
 . . SET HASH(COUNT,"singleDoseStatusCode")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",195,0)
 . . QUIT
"RTN","PSSHRQ23",196,0)
 . DO:PSS("childName")="singleDoseMessage"
"RTN","PSSHRQ23",197,0)
 . . SET HASH(COUNT,"singleDoseMessage")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",198,0)
 . . ;Need both message and code (5) for the "unable to check" condition"
"RTN","PSSHRQ23",199,0)
 . . I HASH(COUNT,"singleDoseStatusCode")=5 D MSG(.HASH,COUNT,"S")
"RTN","PSSHRQ23",200,0)
 . . QUIT
"RTN","PSSHRQ23",201,0)
 . DO:PSS("childName")="singleDoseMax"
"RTN","PSSHRQ23",202,0)
 . . SET HASH(COUNT,"singleDoseMax")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",203,0)
 . . QUIT
"RTN","PSSHRQ23",204,0)
 . DO:PSS("childName")="rangeDoseStatus"
"RTN","PSSHRQ23",205,0)
 . . SET HASH(COUNT,"rangeDoseStatus")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",206,0)
 . . QUIT
"RTN","PSSHRQ23",207,0)
 . DO:PSS("childName")="rangeDoseStatusCode"
"RTN","PSSHRQ23",208,0)
 . . SET HASH(COUNT,"rangeDoseStatusCode")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",209,0)
 . . QUIT
"RTN","PSSHRQ23",210,0)
 . DO:PSS("childName")="rangeDoseMessage"
"RTN","PSSHRQ23",211,0)
 . . SET HASH(COUNT,"rangeDoseMessage")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",212,0)
 . . ;Need both message and code (5) for the "unable to check" condition"
"RTN","PSSHRQ23",213,0)
 . . I HASH(COUNT,"rangeDoseStatusCode")=5,HASH(COUNT,"chemoInjectable")="false" D MSG(.HASH,COUNT,"R")
"RTN","PSSHRQ23",214,0)
 . . QUIT
"RTN","PSSHRQ23",215,0)
 . DO:PSS("childName")="rangeDoseLow"
"RTN","PSSHRQ23",216,0)
 . . SET HASH(COUNT,"rangeDoseLow")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",217,0)
 . . QUIT
"RTN","PSSHRQ23",218,0)
 . DO:PSS("childName")="rangeDoseHigh"
"RTN","PSSHRQ23",219,0)
 . . SET HASH(COUNT,"rangeDoseHigh")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",220,0)
 . . QUIT
"RTN","PSSHRQ23",221,0)
 . DO:PSS("childName")="doseHigh"
"RTN","PSSHRQ23",222,0)
 . . SET HASH(COUNT,"doseHigh")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",223,0)
 . . QUIT
"RTN","PSSHRQ23",224,0)
 . DO:PSS("childName")="doseHighUnit"
"RTN","PSSHRQ23",225,0)
 . . SET HASH(COUNT,"doseHighUnit")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",226,0)
 . . QUIT
"RTN","PSSHRQ23",227,0)
 . DO:PSS("childName")="doseLow"
"RTN","PSSHRQ23",228,0)
 . . SET HASH(COUNT,"doseLow")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",229,0)
 . . QUIT
"RTN","PSSHRQ23",230,0)
 . DO:PSS("childName")="doseLowUnit"
"RTN","PSSHRQ23",231,0)
 . . SET HASH(COUNT,"doseLowUnit")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",232,0)
 . . QUIT
"RTN","PSSHRQ23",233,0)
 . DO:PSS("childName")="doseRouteDescription"
"RTN","PSSHRQ23",234,0)
 . . SET HASH(COUNT,"doseRouteDescription")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",235,0)
 . . QUIT
"RTN","PSSHRQ23",236,0)
 . DO:PSS("childName")="doseFormHigh"
"RTN","PSSHRQ23",237,0)
 . . SET HASH(COUNT,"doseFormHigh")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",238,0)
 . . QUIT
"RTN","PSSHRQ23",239,0)
 . DO:PSS("childName")="doseFormHighUnit"
"RTN","PSSHRQ23",240,0)
 . . SET HASH(COUNT,"doseFormHighUnit")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",241,0)
 . . QUIT
"RTN","PSSHRQ23",242,0)
 . DO:PSS("childName")="doseFormLow"
"RTN","PSSHRQ23",243,0)
 . . SET HASH(COUNT,"doseFormLow")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",244,0)
 . . QUIT
"RTN","PSSHRQ23",245,0)
 . DO:PSS("childName")="doseFormLowUnit"
"RTN","PSSHRQ23",246,0)
 . . SET HASH(COUNT,"doseFormLowUnit")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",247,0)
 . . QUIT
"RTN","PSSHRQ23",248,0)
 . DO:PSS("childName")="chemoInjectable"
"RTN","PSSHRQ23",249,0)
 . . SET HASH(COUNT,"chemoInjectable")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",250,0)
 . . QUIT
"RTN","PSSHRQ23",251,0)
 . 
"RTN","PSSHRQ23",252,0)
 . DO:PSS("childName")="dailyDoseStatus"
"RTN","PSSHRQ23",253,0)
 . . SET HASH(COUNT,"dailyDoseStatus")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",254,0)
 . . QUIT
"RTN","PSSHRQ23",255,0)
 .  DO:PSS("childName")="dailyDoseStatusCode"
"RTN","PSSHRQ23",256,0)
 . . SET HASH(COUNT,"dailyDoseStatusCode")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",257,0)
 . . QUIT
"RTN","PSSHRQ23",258,0)
 . DO:PSS("childName")="dailyDoseMessage"
"RTN","PSSHRQ23",259,0)
 . . SET HASH(COUNT,"dailyDoseMessage")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",260,0)
 . . ;Need both message and code (5) for the "unable to check" condition"
"RTN","PSSHRQ23",261,0)
 . . I HASH(COUNT,"dailyDoseStatusCode")=5,HASH(COUNT,"chemoInjectable")="true" D MSG(.HASH,COUNT,"D")
"RTN","PSSHRQ23",262,0)
 . . QUIT
"RTN","PSSHRQ23",263,0)
 . 
"RTN","PSSHRQ23",264,0)
 . DO:PSS("childName")="maxDailyDoseStatus"
"RTN","PSSHRQ23",265,0)
 . . SET HASH(COUNT,"maxDailyDoseStatus")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",266,0)
 . . QUIT
"RTN","PSSHRQ23",267,0)
 .  DO:PSS("childName")="maxDailyDoseStatusCode"
"RTN","PSSHRQ23",268,0)
 . . SET HASH(COUNT,"maxDailyDoseStatusCode")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",269,0)
 . . QUIT
"RTN","PSSHRQ23",270,0)
 . DO:PSS("childName")="maxDailyDoseMessage"
"RTN","PSSHRQ23",271,0)
 . . SET HASH(COUNT,"maxDailyDoseMessage")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",272,0)
 . . ;Need both message and code (5) for the "unable to check" condition"
"RTN","PSSHRQ23",273,0)
 . . ;I HASH(COUNT,"maxDailyDoseStatusCode")=5 D MSG(.HASH,COUNT,"M")
"RTN","PSSHRQ23",274,0)
 . . QUIT
"RTN","PSSHRQ23",275,0)
 .
"RTN","PSSHRQ23",276,0)
 . DO:PSS("childName")="maxLifetimeDose"
"RTN","PSSHRQ23",277,0)
 . . SET HASH(COUNT,"maxLifetimeDose")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ23",278,0)
 . . QUIT
"RTN","PSSHRQ23",279,0)
 .
"RTN","PSSHRQ23",280,0)
 . QUIT
"RTN","PSSHRQ23",281,0)
 ;
"RTN","PSSHRQ23",282,0)
 QUIT
"RTN","PSSHRQ23",283,0)
 ;;
"RTN","PSSHRQ23",284,0)
MSG(HASH,COUNT,TYPE) ;
"RTN","PSSHRQ23",285,0)
 ;INPUTS:
"RTN","PSSHRQ23",286,0)
 ;  HASH-array of data 
"RTN","PSSHRQ23",287,0)
 ;  COUNT-Current subscript of the HASH array
"RTN","PSSHRQ23",288,0)
 ;  TYPE-Either "R" for Daily dose Range or "S" for maximum single dose
"RTN","PSSHRQ23",289,0)
 ;
"RTN","PSSHRQ23",290,0)
 ;returns: ^TMP error global
"RTN","PSSHRQ23",291,0)
 N MSG,REASON
"RTN","PSSHRQ23",292,0)
 S MSG=$$DOSEMSG^PSSHRVL1(HASH(COUNT,"drugName"),TYPE)
"RTN","PSSHRQ23",293,0)
 D
"RTN","PSSHRQ23",294,0)
 .I TYPE="R" D  Q
"RTN","PSSHRQ23",295,0)
 ..S REASON=$G(HASH(COUNT,"rangeDoseMessage"))
"RTN","PSSHRQ23",296,0)
 .I TYPE="S" D  Q
"RTN","PSSHRQ23",297,0)
 ..S REASON=$G(HASH(COUNT,"singleDoseMessage"))
"RTN","PSSHRQ23",298,0)
 .I TYPE="D" D  Q
"RTN","PSSHRQ23",299,0)
 ..S REASON=$G(HASH(COUNT,"dailyDoseMessage"))
"RTN","PSSHRQ23",300,0)
 .I TYPE="M" D  Q
"RTN","PSSHRQ23",301,0)
 ..S REASON=$G(HASH(COUNT,"maxDailyDoseMessage"))
"RTN","PSSHRQ23",302,0)
 S HASH(COUNT,"msg")=MSG
"RTN","PSSHRQ23",303,0)
 S HASH(COUNT,"text")=REASON
"RTN","PSSHRQ23",304,0)
 D WRTNODE(COUNT,"DOSE",.HASH)
"RTN","PSSHRQ23",305,0)
 Q
"RTN","PSSHRQ23",306,0)
 ; 
"RTN","PSSHRQ23",307,0)
DOSEWRIT(HASH,BASE) ;
"RTN","PSSHRQ23",308,0)
 ; @DESC Handles writing the drug dose output global
"RTN","PSSHRQ23",309,0)
 ;
"RTN","PSSHRQ23",310,0)
 ; @HASH Variable containing drug dose values
"RTN","PSSHRQ23",311,0)
 ; @BASE Base of output global
"RTN","PSSHRQ23",312,0)
 ;
"RTN","PSSHRQ23",313,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ23",314,0)
 ;
"RTN","PSSHRQ23",315,0)
 NEW I,NODE,QT,IEN
"RTN","PSSHRQ23",316,0)
 ;get dose form flag
"RTN","PSSHRQ23",317,0)
 ;
"RTN","PSSHRQ23",318,0)
 SET QT=""""
"RTN","PSSHRQ23",319,0)
 SET I=""
"RTN","PSSHRQ23",320,0)
 FOR  SET I=$ORDER(HASH(I)) QUIT:I=""!('I)  DO
"RTN","PSSHRQ23",321,0)
 . SET NODE="^TMP($JOB,BASE,""OUT"",""DOSE"",HASH(I,""orderNumber""),HASH(I,""drugName""))"
"RTN","PSSHRQ23",322,0)
 . SET IEN=HASH(I,"ien")
"RTN","PSSHRQ23",323,0)
 . ;
"RTN","PSSHRQ23",324,0)
 . ; Single values
"RTN","PSSHRQ23",325,0)
 . I $$CHKVAL(.HASH,I,"singleDoseStatus") SET @NODE@("SINGLE","STATUS",IEN)=HASH(I,"singleDoseStatus")
"RTN","PSSHRQ23",326,0)
 . I $$CHKVAL(.HASH,I,"singleDoseStatusCode") SET @NODE@("SINGLE","STATUSCODE",IEN)=HASH(I,"singleDoseStatusCode")
"RTN","PSSHRQ23",327,0)
 . I $$CHKVAL(.HASH,I,"singleDoseMessage") SET @NODE@("SINGLE","MESSAGE",IEN)=HASH(I,"singleDoseMessage")
"RTN","PSSHRQ23",328,0)
 . I $$CHKVAL(.HASH,I,"singleDoseMax") SET @NODE@("SINGLE","MAX",IEN)=HASH(I,"singleDoseMax")
"RTN","PSSHRQ23",329,0)
 . ; Range values
"RTN","PSSHRQ23",330,0)
 . I $$CHKVAL(.HASH,I,"rangeDoseLow") SET @NODE@("RANGE","LOW",IEN)=HASH(I,"rangeDoseLow")
"RTN","PSSHRQ23",331,0)
 . I $$CHKVAL(.HASH,I,"rangeDoseHigh") SET @NODE@("RANGE","HIGH",IEN)=HASH(I,"rangeDoseHigh")
"RTN","PSSHRQ23",332,0)
 . I $$CHKVAL(.HASH,I,"rangeDoseStatus") SET @NODE@("RANGE","STATUS",IEN)=HASH(I,"rangeDoseStatus")
"RTN","PSSHRQ23",333,0)
 . I $$CHKVAL(.HASH,I,"rangeDoseStatusCode") SET @NODE@("RANGE","STATUSCODE",IEN)=HASH(I,"rangeDoseStatusCode")
"RTN","PSSHRQ23",334,0)
 . I $$CHKVAL(.HASH,I,"rangeDoseMessage") SET @NODE@("RANGE","MESSAGE",IEN)=HASH(I,"rangeDoseMessage")
"RTN","PSSHRQ23",335,0)
 . ;set general dose form data
"RTN","PSSHRQ23",336,0)
 . I $$CHKVAL(.HASH,I,"doseFormHigh") SET @NODE@("GENERAL","DOSEFORMHIGH",IEN)=HASH(I,"doseFormHigh")
"RTN","PSSHRQ23",337,0)
 . I $$CHKVAL(.HASH,I,"doseFormHighUnit") SET @NODE@("GENERAL","DOSEFORMHIGHUNIT",IEN)=HASH(I,"doseFormHighUnit")
"RTN","PSSHRQ23",338,0)
 . I $$CHKVAL(.HASH,I,"doseFormLow") SET @NODE@("GENERAL","DOSEFORMLOW",IEN)=HASH(I,"doseFormLow")
"RTN","PSSHRQ23",339,0)
 . I $$CHKVAL(.HASH,I,"doseFormLowUnit") SET @NODE@("GENERAL","DOSEFORMLOWUNIT",IEN)=HASH(I,"doseFormLowUnit")
"RTN","PSSHRQ23",340,0)
 . ; General subscript values
"RTN","PSSHRQ23",341,0)
 . SET @NODE@("GENERAL","DOSEHIGH",IEN)=HASH(I,"doseHigh")
"RTN","PSSHRQ23",342,0)
 . SET @NODE@("GENERAL","DOSEHIGHUNIT",IEN)=HASH(I,"doseHighUnit")
"RTN","PSSHRQ23",343,0)
 . SET @NODE@("GENERAL","DOSELOW",IEN)=HASH(I,"doseLow")
"RTN","PSSHRQ23",344,0)
 . SET @NODE@("GENERAL","DOSELOWUNIT",IEN)=HASH(I,"doseLowUnit")
"RTN","PSSHRQ23",345,0)
 . SET @NODE@("GENERAL","DOSEROUTEDESCRIPTION",IEN)=HASH(I,"doseRouteDescription")
"RTN","PSSHRQ23",346,0)
 . SET @NODE@("GENERAL","MESSAGE",IEN)=$$BUILDMSG(I,.HASH)
"RTN","PSSHRQ23",347,0)
 . ; "CHEMO" value, if any
"RTN","PSSHRQ23",348,0)
 . I $$CHKVAL(.HASH,I,"chemoInjectable") SET @NODE@("CHEMO")=HASH(I,"chemoInjectable")
"RTN","PSSHRQ23",349,0)
 . ; Daily values
"RTN","PSSHRQ23",350,0)
 . I $$CHKVAL(.HASH,I,"dailyDoseStatus") SET @NODE@("DAILY","STATUS",IEN)=HASH(I,"dailyDoseStatus")
"RTN","PSSHRQ23",351,0)
 . I $$CHKVAL(.HASH,I,"dailyDoseStatusCode") SET @NODE@("DAILY","STATUSCODE",IEN)=HASH(I,"dailyDoseStatusCode")
"RTN","PSSHRQ23",352,0)
 . I $$CHKVAL(.HASH,I,"dailyDoseMessage") SET @NODE@("DAILY","MESSAGE",IEN)=HASH(I,"dailyDoseMessage")
"RTN","PSSHRQ23",353,0)
 . ; Max Daily values
"RTN","PSSHRQ23",354,0)
 . I $$CHKVAL(.HASH,I,"maxDailyDoseStatus") SET @NODE@("DAILYMAX","STATUS",IEN)=HASH(I,"maxDailyDoseStatus")
"RTN","PSSHRQ23",355,0)
 . I $$CHKVAL(.HASH,I,"maxDailyDoseStatusCode") SET @NODE@("DAILYMAX","STATUSCODE",IEN)=HASH(I,"maxDailyDoseStatusCode")
"RTN","PSSHRQ23",356,0)
 . I $$CHKVAL(.HASH,I,"maxDailyDoseMessage") SET @NODE@("DAILYMAX","MESSAGE",IEN)=HASH(I,"maxDailyDoseMessage")
"RTN","PSSHRQ23",357,0)
 . ; general maximum life  time dose
"RTN","PSSHRQ23",358,0)
 . I $$CHKVAL(.HASH,I,"maxLifetimeDose") SET @NODE@("GENERAL","MAXLIFETIMEDOSE",IEN)=HASH(I,"maxLifetimeDose")
"RTN","PSSHRQ23",359,0)
 . QUIT
"RTN","PSSHRQ23",360,0)
 ;
"RTN","PSSHRQ23",361,0)
 QUIT
"RTN","PSSHRQ23",362,0)
 ;;
"RTN","PSSHRQ23",363,0)
CHKVAL(HASH,I,SUB) ;
"RTN","PSSHRQ23",364,0)
 ;INPUTS: HASH array (by ref)
"RTN","PSSHRQ23",365,0)
 ;        I-Index of current array
"RTN","PSSHRQ23",366,0)
 ;        SUB-subscript
"RTN","PSSHRQ23",367,0)
 ;Returns: If node has value
"RTN","PSSHRQ23",368,0)
 ;
"RTN","PSSHRQ23",369,0)
 Q $L($G(HASH(I,SUB)))
"RTN","PSSHRQ23",370,0)
 ; 
"RTN","PSSHRQ23",371,0)
BUILDMSG(COUNT,HASH) ;
"RTN","PSSHRQ23",372,0)
 ; @DESC Builds the drug dose message value from values in HASH
"RTN","PSSHRQ23",373,0)
 ;
"RTN","PSSHRQ23",374,0)
 ; @COUNT Counter used to access values in hash
"RTN","PSSHRQ23",375,0)
 ; @HASH Variable containing drug dose values
"RTN","PSSHRQ23",376,0)
 ;
"RTN","PSSHRQ23",377,0)
 ; @RETURNS Message in format:
"RTN","PSSHRQ23",378,0)
 ; General dosing range for '[DRUG NAME]' [ROUTE DESCRIPTION]:
"RTN","PSSHRQ23",379,0)
 ; [DOSELOW] [DOSELOWUNIT] to [DOSEHIGH] [DOSEHIGHUNIT].
"RTN","PSSHRQ23",380,0)
 ; The low and High values can be from either the standard or from the doseForm information
"RTN","PSSHRQ23",381,0)
 ;
"RTN","PSSHRQ23",382,0)
 ;
"RTN","PSSHRQ23",383,0)
 NEW MSG,DOSEFORM
"RTN","PSSHRQ23",384,0)
 ;
"RTN","PSSHRQ23",385,0)
 ;get doseform flag--whether to use the doseform or other dosing information
"RTN","PSSHRQ23",386,0)
 S DOSEFORM=$P(^TMP($J,BASE,"IN","DOSE",HASH(COUNT,"orderNumber")),U,14)
"RTN","PSSHRQ23",387,0)
 SET MSG="General dosing range for "
"RTN","PSSHRQ23",388,0)
 SET MSG=MSG_HASH(COUNT,"drugName")
"RTN","PSSHRQ23",389,0)
 SET MSG=MSG_$S($G(HASH(COUNT,"doseRouteDescription"))'="":" ("_HASH(COUNT,"doseRouteDescription")_"):",1:":")
"RTN","PSSHRQ23",390,0)
 I 'DOSEFORM D 
"RTN","PSSHRQ23",391,0)
 .SET MSG=MSG_" "_$$FORMATNM(HASH(COUNT,"doseLow"))
"RTN","PSSHRQ23",392,0)
 .SET MSG=MSG_" "_HASH(COUNT,"doseLowUnit")
"RTN","PSSHRQ23",393,0)
 .SET MSG=MSG_" to"
"RTN","PSSHRQ23",394,0)
 .SET MSG=MSG_" "_$$FORMATNM(HASH(COUNT,"doseHigh"))
"RTN","PSSHRQ23",395,0)
 .SET MSG=MSG_" "_HASH(COUNT,"doseHighUnit")
"RTN","PSSHRQ23",396,0)
 ;
"RTN","PSSHRQ23",397,0)
 I DOSEFORM D 
"RTN","PSSHRQ23",398,0)
 .SET MSG=MSG_" "_$$FORMATNM(HASH(COUNT,"doseFormLow"))
"RTN","PSSHRQ23",399,0)
 .SET MSG=MSG_" "_HASH(COUNT,"doseFormLowUnit")
"RTN","PSSHRQ23",400,0)
 .SET MSG=MSG_" to"
"RTN","PSSHRQ23",401,0)
 .SET MSG=MSG_" "_$$FORMATNM(HASH(COUNT,"doseFormHigh"))
"RTN","PSSHRQ23",402,0)
 .SET MSG=MSG_" "_HASH(COUNT,"doseFormHighUnit")
"RTN","PSSHRQ23",403,0)
 QUIT MSG
"RTN","PSSHRQ23",404,0)
 ;;
"RTN","PSSHRQ23",405,0)
FORMATNM(NUM) ;
"RTN","PSSHRQ23",406,0)
 ; @DESC Formats the number into a valid value. Removes trailing
"RTN","PSSHRQ23",407,0)
 ; zeroes if decimal place is equal to 0.
"RTN","PSSHRQ23",408,0)
 ;
"RTN","PSSHRQ23",409,0)
 ; @NUM Number to be formatted
"RTN","PSSHRQ23",410,0)
 ;
"RTN","PSSHRQ23",411,0)
 ; @RETURNS A formatted number.
"RTN","PSSHRQ23",412,0)
 ;
"RTN","PSSHRQ23",413,0)
 NEW DECIMAL,FORMATED
"RTN","PSSHRQ23",414,0)
 S NUM=$TR(NUM,",","")
"RTN","PSSHRQ23",415,0)
 S FORMATED=$FN(+NUM,"+")
"RTN","PSSHRQ23",416,0)
 S:+FORMATED>=0 FORMATED=$E(FORMATED,2,999)   ; remove the + sign 
"RTN","PSSHRQ23",417,0)
 Q FORMATED
"RTN","PSSHRQ23",418,0)
 ;;
"RTN","PSSHRQ2O")
0^8^B29426427
"RTN","PSSHRQ2O",1,0)
PSSHRQ2O ;WOIFO/AV,TS,SG - Handles parsing a PEPS Drug Check Response ;09/20/07
"RTN","PSSHRQ2O",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSHRQ2O",3,0)
 ;
"RTN","PSSHRQ2O",4,0)
 ; @authors - Chris Flegel, Alex Vazquez, Tim Sabat
"RTN","PSSHRQ2O",5,0)
 ; @date    - September 19, 2007
"RTN","PSSHRQ2O",6,0)
 ; @version - 1.0
"RTN","PSSHRQ2O",7,0)
 ;
"RTN","PSSHRQ2O",8,0)
 QUIT
"RTN","PSSHRQ2O",9,0)
 ;;
"RTN","PSSHRQ2O",10,0)
OUT(DOCHAND,BASE) ;
"RTN","PSSHRQ2O",11,0)
 ; @DESC Parses the PEPSResponse XML and stores in object
"RTN","PSSHRQ2O",12,0)
 ;
"RTN","PSSHRQ2O",13,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ2O",14,0)
 ; @BASE Base of output global
"RTN","PSSHRQ2O",15,0)
 ;
"RTN","PSSHRQ2O",16,0)
 NEW PSS,HASH,MESSAGE
"RTN","PSSHRQ2O",17,0)
 ;
"RTN","PSSHRQ2O",18,0)
 SET PSS("rootName")=$$NAME^MXMLDOM(DOCHAND,1)
"RTN","PSSHRQ2O",19,0)
 ;
"RTN","PSSHRQ2O",20,0)
 IF PSS("rootName")="exception" DO
"RTN","PSSHRQ2O",21,0)
 . ; Read error into hash variable
"RTN","PSSHRQ2O",22,0)
 . DO ERREAD(DOCHAND,.HASH)
"RTN","PSSHRQ2O",23,0)
 . ; Write hashed variable to output global
"RTN","PSSHRQ2O",24,0)
 . IF HASH("code")="FDBUPDATE" S MESSAGE="Vendor database updates are being processed."            ; HASH("message")
"RTN","PSSHRQ2O",25,0)
 . ELSE  IF $D(^TMP($J,BASE,"IN","DOSE"))>0 SET MESSAGE="Unexpected error has occurred."
"RTN","PSSHRQ2O",26,0)
 . ELSE  SET MESSAGE="Unexpected error has occurred."
"RTN","PSSHRQ2O",27,0)
 . SET ^TMP($JOB,BASE,"OUT",0)="-1^"_MESSAGE
"RTN","PSSHRQ2O",28,0)
 . ;
"RTN","PSSHRQ2O",29,0)
 . ; Cleanup the out.exception global
"RTN","PSSHRQ2O",30,0)
 . KILL ^TMP($JOB,"OUT","EXCEPTION")
"RTN","PSSHRQ2O",31,0)
 ;
"RTN","PSSHRQ2O",32,0)
 IF PSS("rootName")="PEPSResponse" DO HNDLCK(DOCHAND,BASE)
"RTN","PSSHRQ2O",33,0)
 ;
"RTN","PSSHRQ2O",34,0)
 ; Clean up after using the handle
"RTN","PSSHRQ2O",35,0)
 DO DELETE^MXMLDOM(DOCHAND)
"RTN","PSSHRQ2O",36,0)
 KILL ^TMP($J,"OUT XML")
"RTN","PSSHRQ2O",37,0)
 QUIT
"RTN","PSSHRQ2O",38,0)
 ;
"RTN","PSSHRQ2O",39,0)
HNDLCK(DOCHAND,BASE) ;
"RTN","PSSHRQ2O",40,0)
 ; @DESC This handles the parsing of the PEPSResponse XML element
"RTN","PSSHRQ2O",41,0)
 ;
"RTN","PSSHRQ2O",42,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ2O",43,0)
 ; @BASE Base of output global
"RTN","PSSHRQ2O",44,0)
 ;
"RTN","PSSHRQ2O",45,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ2O",46,0)
 ;
"RTN","PSSHRQ2O",47,0)
 NEW PSS
"RTN","PSSHRQ2O",48,0)
 ;
"RTN","PSSHRQ2O",49,0)
 ; if ping get the vendor database info and exit.
"RTN","PSSHRQ2O",50,0)
 IF $D(^TMP($JOB,BASE,"IN","PING")) SET ^TMP($JOB,BASE,"OUT",0)=0 DO GTDBINFO(DOCHAND,BASE) QUIT
"RTN","PSSHRQ2O",51,0)
 ;
"RTN","PSSHRQ2O",52,0)
 ; Get handle to drugCheck XML element
"RTN","PSSHRQ2O",53,0)
 SET PSS("drugCheck")=$$GTHANDLE(DOCHAND)
"RTN","PSSHRQ2O",54,0)
 SET PSS("child")=0
"RTN","PSSHRQ2O",55,0)
 ; Loop through elements of drugCheck
"RTN","PSSHRQ2O",56,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,PSS("drugCheck"),PSS("child")) QUIT:PSS("child")=0  DO
"RTN","PSSHRQ2O",57,0)
 . SET PSS("childName")=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ2O",58,0)
 . ;
"RTN","PSSHRQ2O",59,0)
 . ; Build executable string
"RTN","PSSHRQ2O",60,0)
 . SET PSS("tag")=$$SELTAG(PSS("childName"))
"RTN","PSSHRQ2O",61,0)
 . SET PSS("executable")="DO "_PSS("tag")_"(DOCHAND,PSS(""child""),BASE)"
"RTN","PSSHRQ2O",62,0)
 . ;
"RTN","PSSHRQ2O",63,0)
 . XECUTE PSS("executable")
"RTN","PSSHRQ2O",64,0)
 . QUIT
"RTN","PSSHRQ2O",65,0)
 ;
"RTN","PSSHRQ2O",66,0)
 ; Set top level node to 1 or 0
"RTN","PSSHRQ2O",67,0)
 IF $DATA(^TMP($JOB,BASE,"OUT"))>1 SET ^TMP($JOB,BASE,"OUT",0)=1
"RTN","PSSHRQ2O",68,0)
 IF $DATA(^TMP($JOB,BASE,"OUT"))<10 SET ^TMP($JOB,BASE,"OUT",0)=0
"RTN","PSSHRQ2O",69,0)
 QUIT
"RTN","PSSHRQ2O",70,0)
 ;
"RTN","PSSHRQ2O",71,0)
GTDBINFO(DOCHAND,BASE) ; get the Vendor database info. 
"RTN","PSSHRQ2O",72,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ2O",73,0)
 ; @BASE Base of output global
"RTN","PSSHRQ2O",74,0)
 ;
"RTN","PSSHRQ2O",75,0)
 NEW PSS,HEADER
"RTN","PSSHRQ2O",76,0)
 SET PSS("child")=0
"RTN","PSSHRQ2O",77,0)
 SET PSS("childName")=""
"RTN","PSSHRQ2O",78,0)
 ; get <Header> child
"RTN","PSSHRQ2O",79,0)
 FOR  DO  QUIT:PSS("childName")="Header"
"RTN","PSSHRQ2O",80,0)
 . SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,1,PSS("child"))
"RTN","PSSHRQ2O",81,0)
 . SET PSS("childName")=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ2O",82,0)
 ;
"RTN","PSSHRQ2O",83,0)
 ; get <PEPSVersion> child of <Header> element
"RTN","PSSHRQ2O",84,0)
 SET HEADER=PSS("child")
"RTN","PSSHRQ2O",85,0)
 SET PSS("child")=0
"RTN","PSSHRQ2O",86,0)
 FOR  DO  QUIT:PSS("childName")="PEPSVersion"
"RTN","PSSHRQ2O",87,0)
 . SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,HEADER,PSS("child"))
"RTN","PSSHRQ2O",88,0)
 . SET PSS("childName")=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ2O",89,0)
 ;
"RTN","PSSHRQ2O",90,0)
 SET ^TMP($JOB,BASE,"OUT","difIssueDate")=$$VALUE^MXMLDOM(DOCHAND,PSS("child"),"difIssueDate")
"RTN","PSSHRQ2O",91,0)
 SET ^TMP($JOB,BASE,"OUT","difBuildVersion")=$$VALUE^MXMLDOM(DOCHAND,PSS("child"),"difBuildVersion")
"RTN","PSSHRQ2O",92,0)
 SET ^TMP($JOB,BASE,"OUT","difDbVersion")=$$VALUE^MXMLDOM(DOCHAND,PSS("child"),"difDbVersion")
"RTN","PSSHRQ2O",93,0)
 SET ^TMP($JOB,BASE,"OUT","customIssueDate")=$$VALUE^MXMLDOM(DOCHAND,PSS("child"),"customIssueDate")
"RTN","PSSHRQ2O",94,0)
 SET ^TMP($JOB,BASE,"OUT","customBuildVersion")=$$VALUE^MXMLDOM(DOCHAND,PSS("child"),"customBuildVersion")
"RTN","PSSHRQ2O",95,0)
 SET ^TMP($JOB,BASE,"OUT","customDbVersion")=$$VALUE^MXMLDOM(DOCHAND,PSS("child"),"customDbVersion")
"RTN","PSSHRQ2O",96,0)
 QUIT
"RTN","PSSHRQ2O",97,0)
 ;
"RTN","PSSHRQ2O",98,0)
GTHANDLE(DOCHAND) ;
"RTN","PSSHRQ2O",99,0)
 ; @DESC Get handle to drugCheck element from PEPSResponse element
"RTN","PSSHRQ2O",100,0)
 ;
"RTN","PSSHRQ2O",101,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ2O",102,0)
 ;
"RTN","PSSHRQ2O",103,0)
 ; @RETURNS Handle to drugCheck XML element
"RTN","PSSHRQ2O",104,0)
 ;
"RTN","PSSHRQ2O",105,0)
 NEW PSS
"RTN","PSSHRQ2O",106,0)
 ;
"RTN","PSSHRQ2O",107,0)
 SET PSS("child")=0
"RTN","PSSHRQ2O",108,0)
 ;
"RTN","PSSHRQ2O",109,0)
 ; Get next child of root element
"RTN","PSSHRQ2O",110,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,1,PSS("child")) QUIT:PSS("child")=0  DO
"RTN","PSSHRQ2O",111,0)
 . SET PSS("childName")=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ2O",112,0)
 . SET:PSS("childName")="Body" PSS("drugCheckElement")=$$CHILD^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ2O",113,0)
 ;
"RTN","PSSHRQ2O",114,0)
 QUIT PSS("drugCheckElement")
"RTN","PSSHRQ2O",115,0)
 ;
"RTN","PSSHRQ2O",116,0)
SELTAG(NAME) ;
"RTN","PSSHRQ2O",117,0)
 ; @DESC Returns the appropriate tag to handle the XML element
"RTN","PSSHRQ2O",118,0)
 ;
"RTN","PSSHRQ2O",119,0)
 ; @NAME Name of the current XML element
"RTN","PSSHRQ2O",120,0)
 ;
"RTN","PSSHRQ2O",121,0)
 ; @RETURNS Returns the appropriate tag to handle the XML element
"RTN","PSSHRQ2O",122,0)
 ;
"RTN","PSSHRQ2O",123,0)
 QUIT:NAME="drugsNotChecked" "DRGNTCK^PSSHRQ23"
"RTN","PSSHRQ2O",124,0)
 ;
"RTN","PSSHRQ2O",125,0)
 QUIT:NAME="drugDrugChecks" "DRUGDRUG^PSSHRQ21"
"RTN","PSSHRQ2O",126,0)
 ;
"RTN","PSSHRQ2O",127,0)
 QUIT:NAME="drugTherapyChecks" "THERAPY^PSSHRQ22"
"RTN","PSSHRQ2O",128,0)
 ;
"RTN","PSSHRQ2O",129,0)
 QUIT:NAME="drugDoseChecks" "DRGDOSE^PSSHRQ23"
"RTN","PSSHRQ2O",130,0)
 QUIT
"RTN","PSSHRQ2O",131,0)
 ;
"RTN","PSSHRQ2O",132,0)
ALTERROR(BASE) ;
"RTN","PSSHRQ2O",133,0)
 ; @DESC Handles alternate PEPS errors like being unable to
"RTN","PSSHRQ2O",134,0)
 ; connect to PEPS. Reads info from global in format
"RTN","PSSHRQ2O",135,0)
 ;
"RTN","PSSHRQ2O",136,0)
 ; ^TMP($JOB,"OUT","EXCEPTION")=MESSAGE
"RTN","PSSHRQ2O",137,0)
 ;
"RTN","PSSHRQ2O",138,0)
 ; @BASE Base of global to be written to
"RTN","PSSHRQ2O",139,0)
 ;
"RTN","PSSHRQ2O",140,0)
 ; @RETURNS Nothing
"RTN","PSSHRQ2O",141,0)
 ;
"RTN","PSSHRQ2O",142,0)
 SET ^TMP($JOB,BASE,"OUT",0)="-1^Vendor Database cannot be reached."
"RTN","PSSHRQ2O",143,0)
 ;
"RTN","PSSHRQ2O",144,0)
 ; Cleanup the out.exception global
"RTN","PSSHRQ2O",145,0)
 KILL ^TMP($JOB,"OUT","EXCEPTION")
"RTN","PSSHRQ2O",146,0)
 QUIT
"RTN","PSSHRQ2O",147,0)
 ;
"RTN","PSSHRQ2O",148,0)
ERREAD(DOCHAND,HASH) ;
"RTN","PSSHRQ2O",149,0)
 ; @DESC Handles parsing the exception XML element and storing it
"RTN","PSSHRQ2O",150,0)
 ; in a hash variable
"RTN","PSSHRQ2O",151,0)
 ;
"RTN","PSSHRQ2O",152,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHRQ2O",153,0)
 ; @HASH ByRef, Hash variable used to store error info
"RTN","PSSHRQ2O",154,0)
 ;
"RTN","PSSHRQ2O",155,0)
 ; @RETURNS Nothing. Info stored in HASH param.
"RTN","PSSHRQ2O",156,0)
 ;
"RTN","PSSHRQ2O",157,0)
 NEW PSS
"RTN","PSSHRQ2O",158,0)
 ;
"RTN","PSSHRQ2O",159,0)
 SET PSS("child")=0
"RTN","PSSHRQ2O",160,0)
 ;
"RTN","PSSHRQ2O",161,0)
 ; Get next child of root element
"RTN","PSSHRQ2O",162,0)
 FOR  SET PSS("child")=$$CHILD^MXMLDOM(DOCHAND,1,PSS("child")) QUIT:PSS("child")=0  DO
"RTN","PSSHRQ2O",163,0)
 . SET PSS("childName")=$$NAME^MXMLDOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ2O",164,0)
 . SET:PSS("childName")="code" HASH("code")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ2O",165,0)
 . SET:PSS("childName")="message" HASH("message")=$$GETTEXT^PSSHRCOM(DOCHAND,PSS("child"))
"RTN","PSSHRQ2O",166,0)
 QUIT
"RTN","PSSHRQ2O",167,0)
 ;
"RTN","PSSHRVAL")
0^9^B150414400
"RTN","PSSHRVAL",1,0)
PSSHRVAL ;WOIFO/Alex Vasquez,Timothy Sabat,Steve Gordon - Data Validation routine for drug checks ;01/15/07
"RTN","PSSHRVAL",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSHRVAL",3,0)
 ;
"RTN","PSSHRVAL",4,0)
 ;
"RTN","PSSHRVAL",5,0)
 ;@NOTE: The exception node looks like this.
"RTN","PSSHRVAL",6,0)
 ;PSSHASH("Exception","PROSPECTIVE","DOSE",PharmacyOrderNum,Counter)=Gcn,Vuid,IEN,DrugName,CprsOrderNum,Package,Reason,ReasonCode,ResonSource,ReasonText
"RTN","PSSHRVAL",7,0)
 ;PSSHASH("Exception","PROSPECTIVE",PharmacyOrderNum,Counter)=Gcn,Vuid,IEN,DrugName,CprsOrderNum,Package,Reason,ReasonCode,ResonSource,ReasonText
"RTN","PSSHRVAL",8,0)
 ;PSSHASH("Exception","PROFILE",PharmacyOrderNum,Counter)=Gcn,Vuid,IEN,DrugName,CprsOrderNum,Package,Reason,ReasonCode,ResonSource,ReasonText
"RTN","PSSHRVAL",9,0)
 ;PSSHASH("Exception","PatientIenMissing")=""
"RTN","PSSHRVAL",10,0)
 ;PSSHASH("Message")="Failed Validation"
"RTN","PSSHRVAL",11,0)
 ;PSSHASH("ReasonCode")="Reason Code Not Determined Yet"
"RTN","PSSHRVAL",12,0)
 ;
"RTN","PSSHRVAL",13,0)
 ;
"RTN","PSSHRVAL",14,0)
 ;^TMP GLOBAL DATA=GCNSEQNO^VUID^IEN^NAME^DOSE AMOUNT^DOSE UNIT^DOSE RATE^FREQ^DURATION^DURATION RATE^ROUTE^DOSE TYPE^not used^DOSE FORM FLAG
"RTN","PSSHRVAL",15,0)
 ;
"RTN","PSSHRVAL",16,0)
 ;Business rules:
"RTN","PSSHRVAL",17,0)
 ;1. If a prospective" node does not have a GCNSEQNO, it will be KILLED
"RTN","PSSHRVAL",18,0)
 ;2.If a "profile" node does not have a GCNSEQNO, it will be KILLED
"RTN","PSSHRVAL",19,0)
 ;3.If no prospective nodes exist, DRUGDRUG,THERAPY and DOSE will be killed off
"RTN","PSSHRVAL",20,0)
 ;4.Only checks will be performed for those check nodes that still exist (e.g. DRUGDRUG,
"RTN","PSSHRVAL",21,0)
 ;THERAPY and DOSE)
"RTN","PSSHRVAL",22,0)
 ;If any of the demographics are out of range (age<=0,BSA<0 (or null) or Weight<0 or null) dose node will be killed.
"RTN","PSSHRVAL",23,0)
 ;
"RTN","PSSHRVAL",24,0)
 QUIT
"RTN","PSSHRVAL",25,0)
 ;;
"RTN","PSSHRVAL",26,0)
DRIVER(PSSBASE) ;
"RTN","PSSHRVAL",27,0)
 ;@DRIVER
"RTN","PSSHRVAL",28,0)
 ;@DESC The driver for the validation of drug checks.
"RTN","PSSHRVAL",29,0)
 ;@PSSBASE The base
"RTN","PSSHRVAL",30,0)
 ;
"RTN","PSSHRVAL",31,0)
 NEW PSSHASH
"RTN","PSSHRVAL",32,0)
 ;
"RTN","PSSHRVAL",33,0)
 SET PSSHASH("Base")=PSSBASE
"RTN","PSSHRVAL",34,0)
 SET PSSHASH("ReasonCode")="" ;for version 0.5 version not yet defined.
"RTN","PSSHRVAL",35,0)
 ;
"RTN","PSSHRVAL",36,0)
 DO BUILD(.PSSHASH)
"RTN","PSSHRVAL",37,0)
 ;
"RTN","PSSHRVAL",38,0)
 DO WRITE^PSSHRVL1(.PSSHASH)
"RTN","PSSHRVAL",39,0)
 DO CHKNODES(.PSSHASH)
"RTN","PSSHRVAL",40,0)
 QUIT $$CONTINUE(.PSSHASH)
"RTN","PSSHRVAL",41,0)
 ;
"RTN","PSSHRVAL",42,0)
CHKNODES(PSSHASH) ;
"RTN","PSSHRVAL",43,0)
 ;@DESC Determines which nodes should be killed off or kept
"RTN","PSSHRVAL",44,0)
 ;
"RTN","PSSHRVAL",45,0)
 ;SET DoseValue,"Demo" PSSHASH array to kill off dose node
"RTN","PSSHRVAL",46,0)
 NEW ORDER
"RTN","PSSHRVAL",47,0)
 ;
"RTN","PSSHRVAL",48,0)
 SET ORDER=""
"RTN","PSSHRVAL",49,0)
 IF '$L($O(^TMP($JOB,PSSHASH("Base"),"IN","PROSPECTIVE",ORDER))) DO
"RTN","PSSHRVAL",50,0)
 .;If only send in profile with profile flag OK
"RTN","PSSHRVAL",51,0)
 .I $D(^TMP($JOB,PSSHASH("Base"),"IN","PROFILEVPROFILE"))&($L($O(^TMP($JOB,PSSHASH("Base"),"IN","PROFILE",ORDER)))) Q
"RTN","PSSHRVAL",52,0)
 .DO KILLALL^PSSHRVL1(PSSHASH("Base"))
"RTN","PSSHRVAL",53,0)
 IF '$L($O(^TMP($JOB,PSSHASH("Base"),"IN","DOSE",ORDER)))!$D(PSSHASH("DoseValue","Demo")) DO
"RTN","PSSHRVAL",54,0)
 .DO KILLCHEK^PSSHRVL1("DOSE",PSSHASH("Base"))
"RTN","PSSHRVAL",55,0)
 QUIT
"RTN","PSSHRVAL",56,0)
 ;
"RTN","PSSHRVAL",57,0)
CONTINUE(PSSHASH) ;
"RTN","PSSHRVAL",58,0)
 ;@DESC Determines whether or not to proceed with checks.
"RTN","PSSHRVAL",59,0)
 ;@RETURNS 1 if you may continue, 0 if not.
"RTN","PSSHRVAL",60,0)
 ;
"RTN","PSSHRVAL",61,0)
 NEW PSS
"RTN","PSSHRVAL",62,0)
 SET PSS("AnyChecksLeft")=0
"RTN","PSSHRVAL",63,0)
 DO:$DATA(^TMP($JOB,PSSHASH("Base"),"IN","DRUGDRUG"))
"RTN","PSSHRVAL",64,0)
  . SET PSS("AnyChecksLeft")=1
"RTN","PSSHRVAL",65,0)
  . QUIT 
"RTN","PSSHRVAL",66,0)
 DO:$DATA(^TMP($JOB,PSSHASH("Base"),"IN","THERAPY"))
"RTN","PSSHRVAL",67,0)
 . SET PSS("AnyChecksLeft")=1
"RTN","PSSHRVAL",68,0)
 . QUIT
"RTN","PSSHRVAL",69,0)
 DO:$DATA(^TMP($JOB,PSSHASH("Base"),"IN","DOSE"))
"RTN","PSSHRVAL",70,0)
 . SET PSS("AnyChecksLeft")=1
"RTN","PSSHRVAL",71,0)
 . QUIT
"RTN","PSSHRVAL",72,0)
 DO:$DATA(^TMP($JOB,PSSHASH("Base"),"IN","PING"))
"RTN","PSSHRVAL",73,0)
  . SET PSS("AnyChecksLeft")=1
"RTN","PSSHRVAL",74,0)
  . QUIT
"RTN","PSSHRVAL",75,0)
 QUIT PSS("AnyChecksLeft")
"RTN","PSSHRVAL",76,0)
 ;
"RTN","PSSHRVAL",77,0)
BUILD(PSSHASH) ;
"RTN","PSSHRVAL",78,0)
 ;@DESC Builds the internal hash used to parse for errors.
"RTN","PSSHRVAL",79,0)
 ;@PSSHASH The internal variables.
"RTN","PSSHRVAL",80,0)
 ;DO CHKINEXP(.PSSHASH)
"RTN","PSSHRVAL",81,0)
 DO CHKINEXP(.PSSHASH) ;CHK FOR "IN" EXCEPTIONS
"RTN","PSSHRVAL",82,0)
 DO DRUGPROS(.PSSHASH)
"RTN","PSSHRVAL",83,0)
 DO DRUGPROF(.PSSHASH)
"RTN","PSSHRVAL",84,0)
 QUIT
"RTN","PSSHRVAL",85,0)
 ;
"RTN","PSSHRVAL",86,0)
CHKINEXP(PSSHASH) ;
"RTN","PSSHRVAL",87,0)
 ;INPUT PSSHASH array
"RTN","PSSHRVAL",88,0)
 ;PSSHASH("Exception",TYPE,"DOSE",PSS("PharmOrderNum"),COUNTER)
"RTN","PSSHRVAL",89,0)
 ;PSSHASH("Exception",TYPE,PSS("PharmOrderNum"),COUNTER)
"RTN","PSSHRVAL",90,0)
 I $D(^TMP($JOB,PSSHASH("Base"),"IN","EXCEPTIONS","OI")) D OIEXP(.PSSHASH)
"RTN","PSSHRVAL",91,0)
 I $D(^TMP($JOB,PSSHASH("Base"),"IN","EXCEPTIONS","DOSE")) D DOSINEXP(.PSSHASH)
"RTN","PSSHRVAL",92,0)
 Q
"RTN","PSSHRVAL",93,0)
 ;
"RTN","PSSHRVAL",94,0)
DRUGPROS(PSSHASH) ;
"RTN","PSSHRVAL",95,0)
 ;@DESC Loops on the prospective drugs
"RTN","PSSHRVAL",96,0)
 ;@PSSHASH The internal variables.
"RTN","PSSHRVAL",97,0)
 ;
"RTN","PSSHRVAL",98,0)
 NEW PSS
"RTN","PSSHRVAL",99,0)
 SET PSS("ProspectiveOrProfile")="PROSPECTIVE"
"RTN","PSSHRVAL",100,0)
 SET PSS("PharmOrderNum")=""
"RTN","PSSHRVAL",101,0)
 ;
"RTN","PSSHRVAL",102,0)
 FOR  SET PSS("PharmOrderNum")=$ORDER(^TMP($JOB,PSSHASH("Base"),"IN","PROSPECTIVE",PSS("PharmOrderNum"))) QUIT:PSS("PharmOrderNum")=""  DO
"RTN","PSSHRVAL",103,0)
  . SET PSS("DrugValue")=^TMP($JOB,PSSHASH("Base"),"IN","PROSPECTIVE",PSS("PharmOrderNum"))
"RTN","PSSHRVAL",104,0)
  . DO CHECKGCN(.PSS,.PSSHASH)
"RTN","PSSHRVAL",105,0)
  . DO CHECKDOS(.PSS,.PSSHASH)
"RTN","PSSHRVAL",106,0)
  . QUIT
"RTN","PSSHRVAL",107,0)
 QUIT
"RTN","PSSHRVAL",108,0)
 ;
"RTN","PSSHRVAL",109,0)
DEMOGRAF(PSS,PSSHASH,PSDRUG) ;
"RTN","PSSHRVAL",110,0)
 ;@DESC Validates the demographic info
"RTN","PSSHRVAL",111,0)
 ;@PSSHASH The hash the demographic info is stored in
"RTN","PSSHRVAL",112,0)
 ;
"RTN","PSSHRVAL",113,0)
 ;Gcn
"RTN","PSSHRVAL",114,0)
 N AGE,WEIGHT,BSA,MESSAGE,ORDER
"RTN","PSSHRVAL",115,0)
 ;
"RTN","PSSHRVAL",116,0)
 SET PSS("T")=$PIECE(PSS("DoseValue"),"^",1)_"^"
"RTN","PSSHRVAL",117,0)
 ;Vuid
"RTN","PSSHRVAL",118,0)
 SET PSS("T")=PSS("T")_$PIECE(PSS("DoseValue"),"^",2)_"^"
"RTN","PSSHRVAL",119,0)
 ;Ien
"RTN","PSSHRVAL",120,0)
 SET PSS("T")=PSS("T")_$PIECE(PSS("DoseValue"),"^",3)_"^"
"RTN","PSSHRVAL",121,0)
 ;DrugName
"RTN","PSSHRVAL",122,0)
 SET PSS("T")=PSS("T")_$PIECE(PSS("DoseValue"),"^",4)_"^"
"RTN","PSSHRVAL",123,0)
 ;CprsOrderNumber
"RTN","PSSHRVAL",124,0)
 SET PSS("T")=PSS("T")_$PIECE(PSS("DoseValue"),"^",5)_"^"
"RTN","PSSHRVAL",125,0)
 ;Package
"RTN","PSSHRVAL",126,0)
 SET PSS("T")=PSS("T")_$PIECE(PSS("DoseValue"),"^",6)_"^"
"RTN","PSSHRVAL",127,0)
 ;Reason
"RTN","PSSHRVAL",128,0)
 ;SET PSS("T")=PSS("T")_PSSHASH("Message")_"^"
"RTN","PSSHRVAL",129,0)
  I $D(^TMP($JOB,PSSHASH("Base"),"IN","DOSE")) D
"RTN","PSSHRVAL",130,0)
  .S AGE=+$G(^TMP($J,PSSHASH("Base"),"IN","DOSE","AGE"))
"RTN","PSSHRVAL",131,0)
  .S WEIGHT=+$G(^TMP($J,PSSHASH("Base"),"IN","DOSE","WT"))
"RTN","PSSHRVAL",132,0)
  .S BSA=+$G(^TMP($J,PSSHASH("Base"),"IN","DOSE","BSA"))
"RTN","PSSHRVAL",133,0)
  . ;Validate age in days exists or BSA or Weight are less than zero.
"RTN","PSSHRVAL",134,0)
  .S MESSAGE=$$DEMOCHK^PSSHRVL1(AGE,BSA,WEIGHT,PSDRUG) Q:'$L(MESSAGE)  ;IF NO ISSUE DON'T GO ANY FURTHER
"RTN","PSSHRVAL",135,0)
  .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,0)
"RTN","PSSHRVAL",136,0)
  .;This is already looping through all dose nodes from DRUGPROS
"RTN","PSSHRVAL",137,0)
  .;IF BAD DEMOGRAPHIC Set array node below and have CHKNODES tag kill Dose node
"RTN","PSSHRVAL",138,0)
  .S PSSHASH("DoseValue","Demo")=""
"RTN","PSSHRVAL",139,0)
 KILL PSS("T")
"RTN","PSSHRVAL",140,0)
 QUIT 
"RTN","PSSHRVAL",141,0)
 ;
"RTN","PSSHRVAL",142,0)
CHECKDOS(PSS,PSSHASH) ; 
"RTN","PSSHRVAL",143,0)
 ;@DESC Check if the dose exists.
"RTN","PSSHRVAL",144,0)
 ;@PSS The temp hash
"RTN","PSSHRVAL",145,0)
 ;@PSSHASH The internal hash
"RTN","PSSHRVAL",146,0)
 N DOSEVALUE,DOSE,DOSEUNIT,DOSERATE,FREQ,DURATION,DURRATE,ROUTE,DOSETYPE,DRUGNM,MESSAGE
"RTN","PSSHRVAL",147,0)
 DO:$DATA(^TMP($JOB,PSSHASH("Base"),"IN","DOSE",PSS("PharmOrderNum")))
"RTN","PSSHRVAL",148,0)
  .;if prospective killed off then GCN bad-no need to go any further
"RTN","PSSHRVAL",149,0)
  .I '$DATA(^TMP($JOB,PSSHASH("Base"),"IN","PROSPECTIVE",PSS("PharmOrderNum"))) Q
"RTN","PSSHRVAL",150,0)
  . SET PSS("DoseValue")=^TMP($JOB,PSSHASH("Base"),"IN","DOSE",PSS("PharmOrderNum"))
"RTN","PSSHRVAL",151,0)
  . SET PSS("Package")=""
"RTN","PSSHRVAL",152,0)
  . SET PSS("ReasonSource")=$$GETUCI^PSSHRVL1()
"RTN","PSSHRVAL",153,0)
  . ;
"RTN","PSSHRVAL",154,0)
  . ;I '$$DEMOGRAF(.PSS,.PSSHASH) Q  ;Check age and other parameters
"RTN","PSSHRVAL",155,0)
  . ;If this is a "specific" call
"RTN","PSSHRVAL",156,0)
  . ;SET PSS("Package")="N/A"
"RTN","PSSHRVAL",157,0)
  . ;SET PSS("ReasonSource")=$$GETUCI^PSSHRVL1()
"RTN","PSSHRVAL",158,0)
  . ;SET PSS("Message")=PSSHASH("Message")
"RTN","PSSHRVAL",159,0)
  . S DOSEVALUE=PSS("DoseValue")
"RTN","PSSHRVAL",160,0)
  . S DRUGNM=$P(DOSEVALUE,U,4)
"RTN","PSSHRVAL",161,0)
  . S DOSE=$P(DOSEVALUE,U,5),DOSEUNIT=$P(DOSEVALUE,U,6),DOSERATE=$P(DOSEVALUE,U,7)
"RTN","PSSHRVAL",162,0)
  . S FREQ=$P(DOSEVALUE,U,8),DURATION=$P(DOSEVALUE,U,9)
"RTN","PSSHRVAL",163,0)
  . S DURRATE=$P(DOSEVALUE,U,10),ROUTE=$P(DOSEVALUE,U,11),DOSETYPE=$P(DOSEVALUE,U,12)
"RTN","PSSHRVAL",164,0)
  . ;Check piece 12--if not set correctly go no further
"RTN","PSSHRVAL",165,0)
  . S MESSAGE=$$CHKDSTYP^PSSHRVL1(DOSETYPE,DRUGNM) I $L(MESSAGE) D  Q
"RTN","PSSHRVAL",166,0)
  . . D SETDSEXP(.PSS,.PSSHASH,MESSAGE,12)
"RTN","PSSHRVAL",167,0)
  . D DEMOGRAF(.PSS,.PSSHASH,DRUGNM)  ;Check age and other parameters
"RTN","PSSHRVAL",168,0)
  . ;set defaults for all possible errors
"RTN","PSSHRVAL",169,0)
  . ;check piece 5 dose
"RTN","PSSHRVAL",170,0)
  . S MESSAGE=$$CHKDOSE^PSSHRVL1(DOSE,DRUGNM) I $L(MESSAGE) D
"RTN","PSSHRVAL",171,0)
  . .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,5)
"RTN","PSSHRVAL",172,0)
  . ;check piece 6-dose units
"RTN","PSSHRVAL",173,0)
  . S MESSAGE=$$CHKUNIT^PSSHRVL1(DOSEUNIT,DRUGNM) I $L(MESSAGE) D
"RTN","PSSHRVAL",174,0)
  . .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,6)
"RTN","PSSHRVAL",175,0)
  . ;Check piece 7--dose rate
"RTN","PSSHRVAL",176,0)
  . S MESSAGE=$$CHKRATE^PSSHRVL1(DOSERATE,"DOSE",DRUGNM) I $L(MESSAGE) D
"RTN","PSSHRVAL",177,0)
  . . D SETDSEXP(.PSS,.PSSHASH,MESSAGE,7)
"RTN","PSSHRVAL",178,0)
  . ;Check Piece 8--frequency
"RTN","PSSHRVAL",179,0)
  . S MESSAGE=$$CHKFREQ^PSSHRVL1(FREQ) I $L(MESSAGE) D
"RTN","PSSHRVAL",180,0)
  . .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,8)
"RTN","PSSHRVAL",181,0)
  . ;Check piece 9-duration
"RTN","PSSHRVAL",182,0)
  . S MESSAGE=$$CHKDRATN^PSSHRVL1(DURATION,DRUGNM) I $L(MESSAGE) D
"RTN","PSSHRVAL",183,0)
  . .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,9)
"RTN","PSSHRVAL",184,0)
  . ;Check piece 10-DURATION RATE
"RTN","PSSHRVAL",185,0)
  . S MESSAGE=$$CHKRATE^PSSHRVL1(DURRATE,"DURATION",DRUGNM,DURATION) I $L(MESSAGE) D
"RTN","PSSHRVAL",186,0)
  . .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,10)
"RTN","PSSHRVAL",187,0)
  . ;PIECE 11-ROUTE
"RTN","PSSHRVAL",188,0)
  . S MESSAGE=$$MEDRTE^PSSHRVL1(ROUTE,DRUGNM) I $L(MESSAGE) D
"RTN","PSSHRVAL",189,0)
  . .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,11)
"RTN","PSSHRVAL",190,0)
  . QUIT   ;Checking if dose exists.
"RTN","PSSHRVAL",191,0)
 QUIT
"RTN","PSSHRVAL",192,0)
 ;
"RTN","PSSHRVAL",193,0)
SETDSEXP(PSS,PSSHASH,MESSAGE,DOSPIECE) ;
"RTN","PSSHRVAL",194,0)
 ;SET DOSE EXCEPTION
"RTN","PSSHRVAL",195,0)
 ;PSS-ARRAY OF MED PROFILE INFORMATION(BY REF)
"RTN","PSSHRVAL",196,0)
 ;PSSHASH-HOLDS DATA EXCEPTION (BY REF)
"RTN","PSSHRVAL",197,0)
 ;MESSAGE-REASON AND ERROR REASON
"RTN","PSSHRVAL",198,0)
 ;DOSEPIECE-THE OFFENDING PIECE OF DATA FROM DOSING INFORMATON-NOT SENT IF FROM
"RTN","PSSHRVAL",199,0)
 ;DEMOGRAF CALL.
"RTN","PSSHRVAL",200,0)
 ;
"RTN","PSSHRVAL",201,0)
 SET PSS("Counter")=$$NEXTDOS(.PSS,.PSSHASH)
"RTN","PSSHRVAL",202,0)
 SET PSS("ReasonCode")=PSSHASH("ReasonCode")
"RTN","PSSHRVAL",203,0)
 SET PSS("Message")=$P(MESSAGE,U)
"RTN","PSSHRVAL",204,0)
 SET PSS("ReasonText")=$P(MESSAGE,U,2)
"RTN","PSSHRVAL",205,0)
 SET PSS("CprsOrderNumber")=""
"RTN","PSSHRVAL",206,0)
 SET PSSHASH("Exception",PSS("ProspectiveOrProfile"),"DOSE",PSS("PharmOrderNum"),PSS("Counter"))=$$DOSPIECE(.PSS)
"RTN","PSSHRVAL",207,0)
 I $G(DOSPIECE) SET PSSHASH("DoseValue",DOSPIECE)=""
"RTN","PSSHRVAL",208,0)
 QUIT
"RTN","PSSHRVAL",209,0)
 ;
"RTN","PSSHRVAL",210,0)
DOSINEXP(PSSHASH) ;
"RTN","PSSHRVAL",211,0)
 N ORDERNUM,MESSAGE,REASON,DRUGNM,ERRNUM,TMPNODE,PSS
"RTN","PSSHRVAL",212,0)
 S ORDERNUM=""
"RTN","PSSHRVAL",213,0)
 F  S ORDERNUM=$O(^TMP($JOB,PSSHASH("Base"),"IN","EXCEPTIONS","DOSE",ORDERNUM)) Q:'$L(ORDERNUM)  D
"RTN","PSSHRVAL",214,0)
 .S TMPNODE=$G(^TMP($JOB,PSSHASH("Base"),"IN","EXCEPTIONS","DOSE",ORDERNUM)) Q:'$L(TMPNODE)
"RTN","PSSHRVAL",215,0)
 .S ERRNUM=+TMPNODE  ;ERROR NUMBER
"RTN","PSSHRVAL",216,0)
 .S DRUGNM=$P(TMPNODE,U,2)
"RTN","PSSHRVAL",217,0)
 .S MESSAGE=$$DOSEMSG^PSSHRVL1(DRUGNM)
"RTN","PSSHRVAL",218,0)
 .S REASON=$$INRSON^PSSHRVL1(ERRNUM)
"RTN","PSSHRVAL",219,0)
 .S MESSAGE=MESSAGE_U_REASON
"RTN","PSSHRVAL",220,0)
 .S PSS("PharmOrderNum")=ORDERNUM
"RTN","PSSHRVAL",221,0)
 .S PSS("ProspectiveOrProfile")="PROSPECTIVE"
"RTN","PSSHRVAL",222,0)
 .S PSS("Package")=""
"RTN","PSSHRVAL",223,0)
 .S PSS("DoseValue")=""
"RTN","PSSHRVAL",224,0)
 .S PSS("ReasonSource")=$$GETUCI^PSSHRVL1()
"RTN","PSSHRVAL",225,0)
 .D SETDSEXP(.PSS,.PSSHASH,MESSAGE)
"RTN","PSSHRVAL",226,0)
 .D KILLNODE^PSSHRVL1(PSSHASH("Base"),"DOSE",ORDERNUM) ;remove so no more checks
"RTN","PSSHRVAL",227,0)
 .D KILLNODE^PSSHRVL1(PSSHASH("Base"),"PROSPECTIVE",ORDERNUM)
"RTN","PSSHRVAL",228,0)
 Q
"RTN","PSSHRVAL",229,0)
 ;
"RTN","PSSHRVAL",230,0)
OIEXP(PSSHASH) ;
"RTN","PSSHRVAL",231,0)
 N ORDITEM,ERRNUM,MESSAGE,REASON,PSS,ORDERNUM,TMPNODE
"RTN","PSSHRVAL",232,0)
 S ORDITEM=""
"RTN","PSSHRVAL",233,0)
 F  S ORDITEM=$O(^TMP($JOB,PSSHASH("Base"),"IN","EXCEPTIONS","OI",ORDITEM)) Q:'$L(ORDITEM)  D
"RTN","PSSHRVAL",234,0)
 .S TMPNODE=$G(^TMP($JOB,PSSHASH("Base"),"IN","EXCEPTIONS","OI",ORDITEM)) Q:'$L(TMPNODE)
"RTN","PSSHRVAL",235,0)
 .S ERRNUM=+TMPNODE  ;ERROR NUMBER
"RTN","PSSHRVAL",236,0)
 .S ORDERNUM=$P(TMPNODE,U,2)
"RTN","PSSHRVAL",237,0)
 .S MESSAGE=$$OIMSG^PSSHRVL1(ORDITEM)
"RTN","PSSHRVAL",238,0)
 .S REASON=$$INRSON^PSSHRVL1(ERRNUM,ORDERNUM)
"RTN","PSSHRVAL",239,0)
 .S $P(PSS("I"),U,7)=MESSAGE
"RTN","PSSHRVAL",240,0)
 .S $P(PSS("I"),U,10)=REASON
"RTN","PSSHRVAL",241,0)
 .S PSS("PharmOrderNum")=ORDERNUM
"RTN","PSSHRVAL",242,0)
 .S PSS("ProspectiveOrProfile")=$S($$ISPROF^PSSHRCOM(ORDERNUM):"PROFILE",1:"PROSPECTIVE")
"RTN","PSSHRVAL",243,0)
 .S PSS("Package")=""
"RTN","PSSHRVAL",244,0)
 .S PSS("DoseValue")=""
"RTN","PSSHRVAL",245,0)
 .S PSS("ReasonSource")=$$GETUCI^PSSHRVL1()
"RTN","PSSHRVAL",246,0)
 .S PSS("Counter")=$$NEXTGCN(.PSS,.PSSHASH)
"RTN","PSSHRVAL",247,0)
 .D SETEXCP(.PSS,.PSSHASH)
"RTN","PSSHRVAL",248,0)
 .D KILLNODE^PSSHRVL1(PSSHASH("Base"),PSS("ProspectiveOrProfile"),ORDERNUM)
"RTN","PSSHRVAL",249,0)
 Q
"RTN","PSSHRVAL",250,0)
 ;
"RTN","PSSHRVAL",251,0)
NEXTDOS(PSS,PSSHASH) ;
"RTN","PSSHRVAL",252,0)
 ;@DESC Gets the next dose
"RTN","PSSHRVAL",253,0)
 ;@PSS The temp hash
"RTN","PSSHRVAL",254,0)
 ;@PSSHASH The internal hash ;
"RTN","PSSHRVAL",255,0)
 ;@NOTE PSSHASH looks like this: 
"RTN","PSSHRVAL",256,0)
 ; PSSHASH("Exception","PROSPECTIVE","DOSE",PharmacyOrderNum,Counter
"RTN","PSSHRVAL",257,0)
 ; 
"RTN","PSSHRVAL",258,0)
 N PSNEXT
"RTN","PSSHRVAL",259,0)
 S PSNEXT=":"
"RTN","PSSHRVAL",260,0)
 S PSNEXT=$ORDER(PSSHASH("Exception","PROSPECTIVE","DOSE",PSS("PharmOrderNum"),PSNEXT),-1)
"RTN","PSSHRVAL",261,0)
 Q PSNEXT+1
"RTN","PSSHRVAL",262,0)
 ;
"RTN","PSSHRVAL",263,0)
NEXTGCN(PSS,PSSHASH) ;
"RTN","PSSHRVAL",264,0)
 ;@DESC Gets the next Gcn
"RTN","PSSHRVAL",265,0)
 ;@PSS The temp hash
"RTN","PSSHRVAL",266,0)
 ;@PSSHASH The internal hash
"RTN","PSSHRVAL",267,0)
 ;
"RTN","PSSHRVAL",268,0)
 N PSNEXT
"RTN","PSSHRVAL",269,0)
 S PSNEXT=":"
"RTN","PSSHRVAL",270,0)
 S PSNEXT=$ORDER(PSSHASH("Exception",PSS("ProspectiveOrProfile"),PSS("PharmOrderNum"),PSNEXT),-1)
"RTN","PSSHRVAL",271,0)
 Q PSNEXT+1
"RTN","PSSHRVAL",272,0)
 ;
"RTN","PSSHRVAL",273,0)
DOSPIECE(PSS) ;
"RTN","PSSHRVAL",274,0)
 ;@DESC Appends all pre-defined pieces to a temp var
"RTN","PSSHRVAL",275,0)
 ;@PSS The temp hash
"RTN","PSSHRVAL",276,0)
 ;@RETURNS The appended temp var.
"RTN","PSSHRVAL",277,0)
 ;
"RTN","PSSHRVAL",278,0)
 SET PSS("I")=$PIECE(PSS("DoseValue"),"^",1)_"^" ;GCN
"RTN","PSSHRVAL",279,0)
 SET PSS("I")=PSS("I")_$PIECE(PSS("DoseValue"),"^",2)_"^" ;Vuid
"RTN","PSSHRVAL",280,0)
 SET PSS("I")=PSS("I")_$PIECE(PSS("DoseValue"),"^",3)_"^" ;Ien
"RTN","PSSHRVAL",281,0)
 SET PSS("I")=PSS("I")_$PIECE(PSS("DoseValue"),"^",4)_"^" ;DrugName
"RTN","PSSHRVAL",282,0)
 SET PSS("I")=PSS("I")_PSS("CprsOrderNumber")_"^" ;CprsOrderNumber
"RTN","PSSHRVAL",283,0)
 SET PSS("I")=PSS("I")_PSS("Package")_"^" ;Package
"RTN","PSSHRVAL",284,0)
 SET PSS("I")=PSS("I")_PSS("Message")_"^"
"RTN","PSSHRVAL",285,0)
 SET PSS("I")=PSS("I")_PSS("ReasonCode")_"^"
"RTN","PSSHRVAL",286,0)
 SET PSS("I")=PSS("I")_PSS("ReasonSource")_"^"
"RTN","PSSHRVAL",287,0)
 SET PSS("I")=PSS("I")_PSS("ReasonText")
"RTN","PSSHRVAL",288,0)
 QUIT PSS("I")
"RTN","PSSHRVAL",289,0)
 ;
"RTN","PSSHRVAL",290,0)
CHECKGCN(PSS,PSSHASH) ;
"RTN","PSSHRVAL",291,0)
 ;@DESC Checks the GCN for a Drug
"RTN","PSSHRVAL",292,0)
 ;@PSS A temp array
"RTN","PSSHRVAL",293,0)
 ;@PSSHASH The input array
"RTN","PSSHRVAL",294,0)
 ;@ASSERT PSS("DrugValue") exists.
"RTN","PSSHRVAL",295,0)
 ;
"RTN","PSSHRVAL",296,0)
 N DRUGNM,DRUGIEN,MESSAGE,REASON,BADGCN
"RTN","PSSHRVAL",297,0)
 SET PSS("Counter")="0"
"RTN","PSSHRVAL",298,0)
 DO:'$PIECE(PSS("DrugValue"),"^",1)
"RTN","PSSHRVAL",299,0)
  . SET DRUGIEN=$P(PSS("DrugValue"),"^",3)
"RTN","PSSHRVAL",300,0)
  . SET DRUGNM=$P(PSS("DrugValue"),"^",4)
"RTN","PSSHRVAL",301,0)
  . S BADGCN=0
"RTN","PSSHRVAL",302,0)
  . S:$PIECE(PSS("DrugValue"),"^",1)'?1.N BADGCN=-1
"RTN","PSSHRVAL",303,0)
  . SET MESSAGE=$$GCNREASN^PSSHRVL1(DRUGIEN,DRUGNM,PSS("PharmOrderNum"),BADGCN)
"RTN","PSSHRVAL",304,0)
  . I $L(MESSAGE) SET REASON=$P(MESSAGE,U,2,3),MESSAGE=$P(MESSAGE,U)
"RTN","PSSHRVAL",305,0)
  . SET PSS("Counter")=$$NEXTGCN(.PSS,.PSSHASH)
"RTN","PSSHRVAL",306,0)
  . SET PSS("I")="^" ;Gcn
"RTN","PSSHRVAL",307,0)
  . SET PSS("I")=PSS("I")_$PIECE(PSS("DrugValue"),"^",2)_"^" ;Vuid
"RTN","PSSHRVAL",308,0)
  . SET PSS("I")=PSS("I")_$PIECE(PSS("DrugValue"),"^",3)_"^" ;Ien
"RTN","PSSHRVAL",309,0)
  . SET PSS("I")=PSS("I")_$PIECE(PSS("DrugValue"),"^",4)_"^" ;DrugName
"RTN","PSSHRVAL",310,0)
  . SET PSS("I")=PSS("I")_$PIECE(PSS("DrugValue"),"^",5)_"^" ;CprsOrderNumber
"RTN","PSSHRVAL",311,0)
  . SET PSS("I")=PSS("I")_$PIECE(PSS("DrugValue"),"^",6)_"^" ;Package
"RTN","PSSHRVAL",312,0)
  . SET PSS("I")=PSS("I")_MESSAGE_"^"
"RTN","PSSHRVAL",313,0)
  . ;Reason code is null for 0.5
"RTN","PSSHRVAL",314,0)
  . SET PSS("I")=PSS("I")_PSSHASH("ReasonCode")_U
"RTN","PSSHRVAL",315,0)
  . ;Set reason text
"RTN","PSSHRVAL",316,0)
  . SET PSS("I")=PSS("I")_$$GETUCI^PSSHRVL1()_U
"RTN","PSSHRVAL",317,0)
  . SET PSS("I")=PSS("I")_REASON
"RTN","PSSHRVAL",318,0)
  . ;
"RTN","PSSHRVAL",319,0)
  . D SETEXCP(.PSS,.PSSHASH)
"RTN","PSSHRVAL",320,0)
  . D KILLNODE^PSSHRVL1(PSSHASH("Base"),PSS("ProspectiveOrProfile"),PSS("PharmOrderNum"))
"RTN","PSSHRVAL",321,0)
 QUIT
"RTN","PSSHRVAL",322,0)
 ;
"RTN","PSSHRVAL",323,0)
SETEXCP(PSS,PSSHASH) ;
"RTN","PSSHRVAL",324,0)
 SET PSSHASH("Exception",PSS("ProspectiveOrProfile"),PSS("PharmOrderNum"),PSS("Counter"))=PSS("I")
"RTN","PSSHRVAL",325,0)
 Q
"RTN","PSSHRVAL",326,0)
 ;
"RTN","PSSHRVAL",327,0)
DRUGPROF(PSSHASH) ;
"RTN","PSSHRVAL",328,0)
 ;@DESC Checks the profile drugs.
"RTN","PSSHRVAL",329,0)
 ;@PSSHASH The internal hash
"RTN","PSSHRVAL",330,0)
 ;
"RTN","PSSHRVAL",331,0)
 NEW PSS
"RTN","PSSHRVAL",332,0)
 SET PSS("ProspectiveOrProfile")="PROFILE"
"RTN","PSSHRVAL",333,0)
 SET PSS("PharmOrderNum")=""
"RTN","PSSHRVAL",334,0)
 FOR  SET PSS("PharmOrderNum")=$ORDER(^TMP($JOB,PSSHASH("Base"),"IN",PSS("ProspectiveOrProfile"),PSS("PharmOrderNum"))) QUIT:PSS("PharmOrderNum")=""  DO
"RTN","PSSHRVAL",335,0)
  . SET PSS("DrugValue")=^TMP($JOB,PSSHASH("Base"),"IN",PSS("ProspectiveOrProfile"),PSS("PharmOrderNum"))
"RTN","PSSHRVAL",336,0)
  . DO CHECKGCN(.PSS,.PSSHASH)
"RTN","PSSHRVAL",337,0)
  . QUIT
"RTN","PSSHRVAL",338,0)
 QUIT
"RTN","PSSHRVAL",339,0)
 ;
"RTN","PSSHRVL1")
0^10^B194249230
"RTN","PSSHRVL1",1,0)
PSSHRVL1 ;WOIFO/Alex Vasquez, Timothy Sabat, Steve Gordon - Continuation Data Validation routine for drug checks ;01/15/07
"RTN","PSSHRVL1",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSHRVL1",3,0)
 ;
"RTN","PSSHRVL1",4,0)
 ; Reference to ^PSNDF(50.68 GCNSEQNO field is supported by IA #3735 
"RTN","PSSHRVL1",5,0)
 ; 
"RTN","PSSHRVL1",6,0)
NEXTEX(PSS,PSSHASH) ;
"RTN","PSSHRVL1",7,0)
 ;@DESC Gets the next exception
"RTN","PSSHRVL1",8,0)
 ;@PSS The temp hash
"RTN","PSSHRVL1",9,0)
 ;@PSSHASH The internal hash
"RTN","PSSHRVL1",10,0)
 ;
"RTN","PSSHRVL1",11,0)
 N PSNEXT
"RTN","PSSHRVL1",12,0)
 S PSNEXT=":"
"RTN","PSSHRVL1",13,0)
 S PSNEXT=$ORDER(^TMP($JOB,PSSHASH("Base"),"OUT","EXCEPTIONS",PSS("PharmOrderNo"),PSNEXT),-1)
"RTN","PSSHRVL1",14,0)
 Q PSNEXT+1
"RTN","PSSHRVL1",15,0)
 ;;
"RTN","PSSHRVL1",16,0)
NEXTEXD(PSS,PSSHASH) ;
"RTN","PSSHRVL1",17,0)
 ;@DESC Gets the next dose exception
"RTN","PSSHRVL1",18,0)
 ;@PSS The temp hash
"RTN","PSSHRVL1",19,0)
 ;@PSSHASH The internal hash
"RTN","PSSHRVL1",20,0)
 N PSNEXT
"RTN","PSSHRVL1",21,0)
 S PSNEXT=":"
"RTN","PSSHRVL1",22,0)
 S PSNEXT=$ORDER(^TMP($JOB,PSSHASH("Base"),"OUT","EXCEPTIONS","DOSE",PSS("PharmOrderNo"),PSNEXT),-1)
"RTN","PSSHRVL1",23,0)
 Q PSNEXT+1
"RTN","PSSHRVL1",24,0)
 ;;
"RTN","PSSHRVL1",25,0)
WRITE(PSSHASH) ;
"RTN","PSSHRVL1",26,0)
 ;@Writes a response, based on the list of exceptions stored in Hash
"RTN","PSSHRVL1",27,0)
 ;@NOTE The internal hash looks like this:
"RTN","PSSHRVL1",28,0)
 ;PSSHASH("Exception","PROSPECTIVE","DOSE",PharmacyOrderNum,Counter)=Gcn,Vuid,IEN,DrugName,CprsOrderNum,Package,Reason,ReasonCode,ResonSource,ReasonText,NoWrite
"RTN","PSSHRVL1",29,0)
 ;PSSHASH("Exception","PROSPECTIVE",PharmacyOrderNum,Counter)=Gcn,Vuid,IEN,DrugName,CprsOrderNum,Package,Reason,ReasonCode,ResonSource,ReasonText,NoWrite
"RTN","PSSHRVL1",30,0)
 ;PSSHASH("Exception","PROFILE",PharmacyOrderNum,Counter)=Gcn,Vuid,IEN,DrugName,CprsOrderNum,Package,Reason,ReasonCode,ResonSource,ReasonText,NoWrite
"RTN","PSSHRVL1",31,0)
 ;PSSHASH("Exception","PatientIenMissing")=""
"RTN","PSSHRVL1",32,0)
 ;PSSHASH("Reason")="Failed Validation"
"RTN","PSSHRVL1",33,0)
 ;
"RTN","PSSHRVL1",34,0)
 ;
"RTN","PSSHRVL1",35,0)
 NEW PSS
"RTN","PSSHRVL1",36,0)
 SET PSS("PharmOrderNo")=""
"RTN","PSSHRVL1",37,0)
 SET PSS("I")=""
"RTN","PSSHRVL1",38,0)
 FOR  SET PSS("PharmOrderNo")=$ORDER(PSSHASH("Exception","PROFILE",PSS("PharmOrderNo"))) QUIT:PSS("PharmOrderNo")=""  DO 
"RTN","PSSHRVL1",39,0)
  . FOR  SET PSS("I")=$ORDER(PSSHASH("Exception","PROFILE",PSS("PharmOrderNo"),PSS("I"))) QUIT:PSS("I")=""  DO
"RTN","PSSHRVL1",40,0)
  . . DO WPROFILE(.PSSHASH,.PSS)
"RTN","PSSHRVL1",41,0)
  . . QUIT
"RTN","PSSHRVL1",42,0)
  . QUIT
"RTN","PSSHRVL1",43,0)
 ;
"RTN","PSSHRVL1",44,0)
 SET PSS("PharmOrderNo")=""
"RTN","PSSHRVL1",45,0)
 SET PSS("I")=""
"RTN","PSSHRVL1",46,0)
 FOR  SET PSS("PharmOrderNo")=$ORDER(PSSHASH("Exception","PROSPECTIVE","DOSE",PSS("PharmOrderNo"))) QUIT:PSS("PharmOrderNo")=""  DO 
"RTN","PSSHRVL1",47,0)
  . FOR  SET PSS("I")=$ORDER(PSSHASH("Exception","PROSPECTIVE","DOSE",PSS("PharmOrderNo"),PSS("I"))) QUIT:PSS("I")=""  DO
"RTN","PSSHRVL1",48,0)
  . . DO WDOSE(.PSSHASH,.PSS)
"RTN","PSSHRVL1",49,0)
  . . ;kill off node to prevent next loop from setting PSS("PharmOrderNo") to "DOSE"
"RTN","PSSHRVL1",50,0)
  . . K PSSHASH("Exception","PROSPECTIVE","DOSE",PSS("PharmOrderNo"),PSS("I"))
"RTN","PSSHRVL1",51,0)
  . QUIT
"RTN","PSSHRVL1",52,0)
 ;
"RTN","PSSHRVL1",53,0)
 SET PSS("PharmOrderNo")=""
"RTN","PSSHRVL1",54,0)
 SET PSS("I")=""
"RTN","PSSHRVL1",55,0)
 FOR  SET PSS("PharmOrderNo")=$ORDER(PSSHASH("Exception","PROSPECTIVE",PSS("PharmOrderNo"))) QUIT:PSS("PharmOrderNo")=""  DO 
"RTN","PSSHRVL1",56,0)
  . FOR  SET PSS("I")=$ORDER(PSSHASH("Exception","PROSPECTIVE",PSS("PharmOrderNo"),PSS("I"))) QUIT:PSS("I")=""  DO
"RTN","PSSHRVL1",57,0)
  . . DO WPROSPEC(.PSSHASH,.PSS)
"RTN","PSSHRVL1",58,0)
  . QUIT
"RTN","PSSHRVL1",59,0)
 ;
"RTN","PSSHRVL1",60,0)
 QUIT
"RTN","PSSHRVL1",61,0)
 ;;
"RTN","PSSHRVL1",62,0)
WDOSE(PSSHASH,PSS) ;
"RTN","PSSHRVL1",63,0)
 ;@DESC Writes the dose exceptions out.
"RTN","PSSHRVL1",64,0)
 ;@PSSHASH The internal hash
"RTN","PSSHRVL1",65,0)
 ;@PSS The temp hash
"RTN","PSSHRVL1",66,0)
 ;@NOTE The exception hash looks like this.
"RTN","PSSHRVL1",67,0)
 ;PSSHASH("Exception","PROSPECTIVE","DOSE",PharmacyOrderNum,Counter)=Gcn,Vuid,IEN,DrugName,CprsOrderNum,Package,Reason,ReasonCode,ResonSource,ReasonText
"RTN","PSSHRVL1",68,0)
 ;
"RTN","PSSHRVL1",69,0)
 NEW TYPE,I
"RTN","PSSHRVL1",70,0)
 SET PSS("DoseValue")=$G(^TMP($JOB,PSSHASH("Base"),"IN","DOSE",PSS("PharmOrderNo")))
"RTN","PSSHRVL1",71,0)
 D
"RTN","PSSHRVL1",72,0)
 .Q:'$L(PSS("DoseValue"))  ;node was killed off if both fields 11 and 12 missing
"RTN","PSSHRVL1",73,0)
 .IF $O(PSSHASH("DoseValue",":"),-1)>10 D  QUIT
"RTN","PSSHRVL1",74,0)
 ..S PSSHASH("DoseValue","Demo")=""  ;to kill off Dose if more than one node
"RTN","PSSHRVL1",75,0)
 ;Set the next exception
"RTN","PSSHRVL1",76,0)
 D:$P(PSSHASH("Exception","PROSPECTIVE","DOSE",PSS("PharmOrderNo"),PSS("I")),U,11)'=1
"RTN","PSSHRVL1",77,0)
 .S ^TMP($JOB,PSSHASH("Base"),"OUT","EXCEPTIONS","DOSE",PSS("PharmOrderNo"),$$NEXTEXD(.PSS,.PSSHASH))=PSSHASH("Exception","PROSPECTIVE","DOSE",PSS("PharmOrderNo"),PSS("I"))
"RTN","PSSHRVL1",78,0)
 QUIT
"RTN","PSSHRVL1",79,0)
 ;;
"RTN","PSSHRVL1",80,0)
WPROFILE(PSSHASH,PSS) ;
"RTN","PSSHRVL1",81,0)
 ;@DESC Writes the profile drug exceptions out.
"RTN","PSSHRVL1",82,0)
 ;@PSSHASH The internal hash
"RTN","PSSHRVL1",83,0)
 ;@PSS The temp hash
"RTN","PSSHRVL1",84,0)
 ;Kill the corresponding profile drug
"RTN","PSSHRVL1",85,0)
 ;KILL ^TMP($JOB,PSSHASH("Base"),"IN","PROFILE",PSS("PharmOrderNo"))
"RTN","PSSHRVL1",86,0)
 ;Set the exception in the global
"RTN","PSSHRVL1",87,0)
 S:$P(PSSHASH("Exception","PROFILE",PSS("PharmOrderNo"),PSS("I")),U,11)'=1 ^TMP($JOB,PSSHASH("Base"),"OUT","EXCEPTIONS",PSS("PharmOrderNo"),$$NEXTEX(.PSS,.PSSHASH))=PSSHASH("Exception","PROFILE",PSS("PharmOrderNo"),PSS("I"))
"RTN","PSSHRVL1",88,0)
 ;If no profile drugs left and the proVpro flag exists, delete it.
"RTN","PSSHRVL1",89,0)
 DO:'$DATA(^TMP($JOB,PSSHASH("Base"),"IN","PROFILE"))
"RTN","PSSHRVL1",90,0)
  . ;KILL ^TMP($JOB,PSSHASH("Base"),"IN","PROFILEVPROFILE")
"RTN","PSSHRVL1",91,0)
  .  D KILLCHEK(PSSHASH("Base"),"PROFILEVPROFILE")
"RTN","PSSHRVL1",92,0)
  . QUIT
"RTN","PSSHRVL1",93,0)
 QUIT
"RTN","PSSHRVL1",94,0)
 ;;
"RTN","PSSHRVL1",95,0)
WPROSPEC(PSSHASH,PSS) ;
"RTN","PSSHRVL1",96,0)
 ;@DESC Writes the prospective drug exceptions out.
"RTN","PSSHRVL1",97,0)
 ;@PSSHASH The internal hash
"RTN","PSSHRVL1",98,0)
 ;@PSS The temp hash
"RTN","PSSHRVL1",99,0)
 ;@NOTE Exception Hash Looks Like
"RTN","PSSHRVL1",100,0)
 ;PSSHASH("Exception","PROSPECTIVE","DOSE",PharmacyOrderNum,Counter)=Gcn,Vuid,IEN,DrugName,CprsOrderNum,Package,Reason,ReasonCode,ResonSource,ReasonText
"RTN","PSSHRVL1",101,0)
 ;PSSHASH("Exception","PROSPECTIVE",PharmacyOrderNum,Counter)=Gcn,Vuid,IEN,DrugName,CprsOrderNum,Package,Reason,ReasonCode,ResonSource,ReasonText
"RTN","PSSHRVL1",102,0)
 ;
"RTN","PSSHRVL1",103,0)
 ;Set the exception data
"RTN","PSSHRVL1",104,0)
 S:$P(PSSHASH("Exception","PROSPECTIVE",PSS("PharmOrderNo"),PSS("I")),U,11)'=1 ^TMP($JOB,PSSHASH("Base"),"OUT","EXCEPTIONS",PSS("PharmOrderNo"),$$NEXTEX(.PSS,.PSSHASH))=PSSHASH("Exception","PROSPECTIVE",PSS("PharmOrderNo"),PSS("I"))
"RTN","PSSHRVL1",105,0)
 QUIT
"RTN","PSSHRVL1",106,0)
 ;
"RTN","PSSHRVL1",107,0)
KILLALL(BASE) ;
"RTN","PSSHRVL1",108,0)
 ;INPUTS BASE SUBCRIPT
"RTN","PSSHRVL1",109,0)
 ;@DESC Kills the DrugDrug, Therapy, ProfileVProfile, and Dose check nodes.
"RTN","PSSHRVL1",110,0)
 DO KILLCHEK("DRUGDRUG",BASE)
"RTN","PSSHRVL1",111,0)
 DO KILLCHEK("THERAPY",BASE)
"RTN","PSSHRVL1",112,0)
 DO KILLCHEK("PROFILEVPROFILE",BASE)
"RTN","PSSHRVL1",113,0)
 DO KILLCHEK("DOSE",BASE)
"RTN","PSSHRVL1",114,0)
 QUIT
"RTN","PSSHRVL1",115,0)
 ;;
"RTN","PSSHRVL1",116,0)
KILLCHEK(PSSCHECK,BASE) ;
"RTN","PSSHRVL1",117,0)
 ;@DESC Kills the check node specified in parameter
"RTN","PSSHRVL1",118,0)
 ;@PSSCHEK The node to kill
"RTN","PSSHRVL1",119,0)
 ;
"RTN","PSSHRVL1",120,0)
 KILL ^TMP($JOB,BASE,"IN",PSSCHECK)
"RTN","PSSHRVL1",121,0)
 QUIT
"RTN","PSSHRVL1",122,0)
 ;
"RTN","PSSHRVL1",123,0)
 ;
"RTN","PSSHRVL1",124,0)
KILLNODE(BASE,TYPE,ORDER) ;
"RTN","PSSHRVL1",125,0)
 ;
"RTN","PSSHRVL1",126,0)
 ;@DESC KILLS A SINGLE NODE FOR A DRUG
"RTN","PSSHRVL1",127,0)
 ;@BASE--the subscript after $JOB
"RTN","PSSHRVL1",128,0)
 ;@TYPE-Can have 3 possible values: "PROSPECTIVE","PROFILE" or "DOSE"
"RTN","PSSHRVL1",129,0)
 ;@ODRDER-Is the order information to make the node unique
"RTN","PSSHRVL1",130,0)
 KILL ^TMP($JOB,BASE,"IN",TYPE,ORDER)
"RTN","PSSHRVL1",131,0)
 Q
"RTN","PSSHRVL1",132,0)
 ;
"RTN","PSSHRVL1",133,0)
GCNREASN(DRUGIEN,DRUGNM,ORDRNUM,BADGCN) ;
"RTN","PSSHRVL1",134,0)
 ;
"RTN","PSSHRVL1",135,0)
 ;Returns a message and reason on why a drug does not have a GCNSEQNO
"RTN","PSSHRVL1",136,0)
 ;inputs: DRUGIEN-IEN OF DRUG
"RTN","PSSHRVL1",137,0)
 ;DRUGNM-NAME OF DRUG
"RTN","PSSHRVL1",138,0)
 ;ORDRNUM-PHARMACY ORDER NUM
"RTN","PSSHRVL1",139,0)
 ;BADGCN-(OPTIONAL)FLAG IS SET to 1 IF DRUG RETURNED AS NOT FOUND BY SWRI/FDB
"RTN","PSSHRVL1",140,0)
 ;        if set to -1 Missing or invalid GCNSEQNO  from Input node  
"RTN","PSSHRVL1",141,0)
 N VAPROD1,NDNODE,REASON,MESSAGE,VAIEN,PSSVQPAC,PSSVQDOS,PSSVQNOM,PSSVQREM
"RTN","PSSHRVL1",142,0)
 S MESSAGE=$$NOCHKMSG(DRUGNM,ORDRNUM),PSSVQDOS=0,PSSVQPAC=$S($E(PSSHASH("Base"),1,2)="PS":1,1:0) I $T(DS^PSSDSAPI)]"",$$DS^PSSDSAPI S PSSVQDOS=1
"RTN","PSSHRVL1",143,0)
 S REASON="",PSSVQREM=$S($P(ORDRNUM,";")="R":1,1:0)
"RTN","PSSHRVL1",144,0)
 ;
"RTN","PSSHRVL1",145,0)
 S VAPROD1=""
"RTN","PSSHRVL1",146,0)
 D  ;Case statement
"RTN","PSSHRVL1",147,0)
 .I $G(BADGCN)=1 S MESSAGE=$$NXCHKMSG(DRUGNM) S PSSVQNOM=$$GCMESS,REASON=$S(PSSVQNOM:"^1",1:"") Q
"RTN","PSSHRVL1",148,0)
 .I '$G(DRUGIEN),'PSSVQREM S REASON="No active dispense drug found for Orderable Item" Q
"RTN","PSSHRVL1",149,0)
 .S NDNODE=$G(^PSDRUG(DRUGIEN,"ND"))
"RTN","PSSHRVL1",150,0)
 .;if no ndnode or 3rd piece not populated 
"RTN","PSSHRVL1",151,0)
 .I 'PSSVQREM,'$L(NDNODE)!('$P(NDNODE,U,3)) D  Q
"RTN","PSSHRVL1",152,0)
 ..S REASON="Drug not matched to NDF" I 'PSSVQPAC S MESSAGE=$$NXCHKMSG(DRUGNM),REASON=""
"RTN","PSSHRVL1",153,0)
 .S VAIEN=$S('PSSVQREM:+$P(NDNODE,U,3),1:0)
"RTN","PSSHRVL1",154,0)
 .S:VAIEN VAPROD1=$P($G(^PSNDF(50.68,VAIEN,1)),U,5)    ; Get the GCNSEQNO
"RTN","PSSHRVL1",155,0)
 .I 'VAPROD1!($G(BADGCN)=-1) D
"RTN","PSSHRVL1",156,0)
 ..S MESSAGE=$$NXCHKMSG(DRUGNM) S PSSVQNOM=$$GCMESS,REASON=$S(PSSVQNOM:"^1",1:"")
"RTN","PSSHRVL1",157,0)
 ;
"RTN","PSSHRVL1",158,0)
 Q MESSAGE_U_REASON
"RTN","PSSHRVL1",159,0)
 ;
"RTN","PSSHRVL1",160,0)
NOCHKMSG(DRUGNM,ORDRNUM) ;
"RTN","PSSHRVL1",161,0)
 ;Returns msg that no checks could be performed.
"RTN","PSSHRVL1",162,0)
 ;INPUTS: 
"RTN","PSSHRVL1",163,0)
 ;DRUGNM-Name of drug
"RTN","PSSHRVL1",164,0)
 ;ORDRNUM-PHARMACY ORDER NUMBER
"RTN","PSSHRVL1",165,0)
 N MESSAGE
"RTN","PSSHRVL1",166,0)
 S MESSAGE="Enhanced Order Checks cannot be performed for "_$$LOCORREM(ORDRNUM)_$$OUTPAT(ORDRNUM)_" Drug: "_DRUGNM
"RTN","PSSHRVL1",167,0)
 Q MESSAGE
"RTN","PSSHRVL1",168,0)
 ;
"RTN","PSSHRVL1",169,0)
OUTPAT(ORDRNUM) ;
"RTN","PSSHRVL1",170,0)
 ; Returns " Outpatient" if it is one.
"RTN","PSSHRVL1",171,0)
 ;INPUTS: 
"RTN","PSSHRVL1",172,0)
 ;ORDRNUM-PHARMACY ORDER NUMBER
"RTN","PSSHRVL1",173,0)
 ;PSSBASE - globally defined
"RTN","PSSHRVL1",174,0)
 ;
"RTN","PSSHRVL1",175,0)
 N OUTPAT
"RTN","PSSHRVL1",176,0)
 S OUTPAT=""
"RTN","PSSHRVL1",177,0)
 I $$LOCORREM(ORDRNUM)="Local" D
"RTN","PSSHRVL1",178,0)
 .I $E(ORDRNUM)'="I",$E(ORDRNUM)'="R",ORDRNUM["PROFILE",$G(^TMP($J,PSSBASE,"IN","SOURCE"))="I" S OUTPAT=" Outpatient"
"RTN","PSSHRVL1",179,0)
 Q OUTPAT
"RTN","PSSHRVL1",180,0)
 ;
"RTN","PSSHRVL1",181,0)
OIMSG(OINAME) ;
"RTN","PSSHRVL1",182,0)
 ;INPUT: Orderable item name
"RTN","PSSHRVL1",183,0)
 ;RETURNS-ERROR MESSAGE
"RTN","PSSHRVL1",184,0)
 N MESSAGE
"RTN","PSSHRVL1",185,0)
 S MESSAGE="Enhanced Order Checks cannot be performed for Orderable Item:"_OINAME
"RTN","PSSHRVL1",186,0)
 Q MESSAGE
"RTN","PSSHRVL1",187,0)
 ;
"RTN","PSSHRVL1",188,0)
INRSON(ERRNUM,ORDERNUM) ;
"RTN","PSSHRVL1",189,0)
 ;INPUT-REASON CODE (1,2 OR 3)
"RTN","PSSHRVL1",190,0)
 ;ORDERNUM-(OPTIONAL)-ORDERNUMBER
"RTN","PSSHRVL1",191,0)
 ;OUTPUT-REASON MESSAGE
"RTN","PSSHRVL1",192,0)
 ;
"RTN","PSSHRVL1",193,0)
 N REASON,NONVAFLG
"RTN","PSSHRVL1",194,0)
 S NONVAFLG=0  ;DEFAULT
"RTN","PSSHRVL1",195,0)
 S ORDERNUM=$G(ORDERNUM)
"RTN","PSSHRVL1",196,0)
 I $E(ORDERNUM)="N" S NONVAFLG=1
"RTN","PSSHRVL1",197,0)
 D
"RTN","PSSHRVL1",198,0)
 .I ERRNUM=1 D  Q
"RTN","PSSHRVL1",199,0)
 .. I 'NONVAFLG S REASON="No active Dispense Drug found." Q   ; No active Dispense Drug found for Pending order. 
"RTN","PSSHRVL1",200,0)
 .. I NONVAFLG S REASON="No active Dispense Drug found."      ; No active Dispense Drug found for Non-VA med order.
"RTN","PSSHRVL1",201,0)
 .I ERRNUM=2 S REASON="Free Text Dosage could not be evaluated." Q
"RTN","PSSHRVL1",202,0)
 .I ERRNUM=3 S REASON="Free Text Infusion Rate could not be evaluated."
"RTN","PSSHRVL1",203,0)
 .I ERRNUM=4 S REASON="No active IV Additive/Solution marked for IV fluid order entry could be found."
"RTN","PSSHRVL1",204,0)
 Q REASON
"RTN","PSSHRVL1",205,0)
 ;
"RTN","PSSHRVL1",206,0)
DEMOCHK(AGE,BSA,WEIGHT,PSDRUG) ;
"RTN","PSSHRVL1",207,0)
 ;Checks age and returns message and error reason
"RTN","PSSHRVL1",208,0)
 ;input: AGE--AGE
"RTN","PSSHRVL1",209,0)
 ;BSA-BSA
"RTN","PSSHRVL1",210,0)
 ;WEIGHT OF THE PATIENT
"RTN","PSSHRVL1",211,0)
 ;output: message and reason strings
"RTN","PSSHRVL1",212,0)
 ;
"RTN","PSSHRVL1",213,0)
 N PSMESSAGE,PSREASON,PSRESULT,TEXT
"RTN","PSSHRVL1",214,0)
 S PSRESULT="",PSREASON="",TEXT=""
"RTN","PSSHRVL1",215,0)
 D
"RTN","PSSHRVL1",216,0)
 .I AGE'>0 S TEXT=" Age"
"RTN","PSSHRVL1",217,0)
 .I (BSA<0)!(BSA'=+BSA) D
"RTN","PSSHRVL1",218,0)
 ..I $L(TEXT) S TEXT=TEXT_","_" BSA" Q
"RTN","PSSHRVL1",219,0)
 ..S TEXT="BSA"
"RTN","PSSHRVL1",220,0)
 .I (WEIGHT<0)!(WEIGHT'=+WEIGHT) D
"RTN","PSSHRVL1",221,0)
 ..I $L(TEXT) S TEXT=TEXT_","_" WT" Q
"RTN","PSSHRVL1",222,0)
 ..S TEXT="WT"
"RTN","PSSHRVL1",223,0)
 I $L(TEXT) D
"RTN","PSSHRVL1",224,0)
 .;PASSES IN NULL BECAUSE AT THE TIME OF CALL DO NOT HAVE DRUG NAME
"RTN","PSSHRVL1",225,0)
 .S PSMESSAGE=$$DOSEMSG(PSDRUG)
"RTN","PSSHRVL1",226,0)
 .S PSREASON="One or more required patient parameters unavailable:"_TEXT
"RTN","PSSHRVL1",227,0)
 .S PSRESULT=PSMESSAGE_U_PSREASON
"RTN","PSSHRVL1",228,0)
 Q PSRESULT
"RTN","PSSHRVL1",229,0)
 ;
"RTN","PSSHRVL1",230,0)
MEDRTE(PSROUTE,PSDRUGNM) ;
"RTN","PSSHRVL1",231,0)
 ;Checks route if null
"RTN","PSSHRVL1",232,0)
 ;inputs: ROUTE-MEDICATION ROUTE
"RTN","PSSHRVL1",233,0)
 ;DRUGNM-DRUG NAME
"RTN","PSSHRVL1",234,0)
 ;RETURNS THE ERROR MESSAGE AND ERROR REASON 
"RTN","PSSHRVL1",235,0)
 N PSMESSAGE,PSREASON,PSRESULT
"RTN","PSSHRVL1",236,0)
 S PSRESULT=""
"RTN","PSSHRVL1",237,0)
 I '$L(PSROUTE) D
"RTN","PSSHRVL1",238,0)
 .S PSMESSAGE=$$DOSEMSG(PSDRUGNM)
"RTN","PSSHRVL1",239,0)
 .;S PSREASON="Unmapped Local Medication Route"
"RTN","PSSHRVL1",240,0)
 .S PSREASON="Invalid or Undefined Dose Route"
"RTN","PSSHRVL1",241,0)
 .S PSRESULT=PSMESSAGE_U_PSREASON
"RTN","PSSHRVL1",242,0)
 Q PSRESULT
"RTN","PSSHRVL1",243,0)
 ;
"RTN","PSSHRVL1",244,0)
 ;
"RTN","PSSHRVL1",245,0)
CHKDSTYP(DOSETYP,PSDRUGNM) ;
"RTN","PSSHRVL1",246,0)
 ;inputs: DOSETYP-DOSE TYPE (MAINTENANCE,LOADING)
"RTN","PSSHRVL1",247,0)
 ;PSDRUGNM-DRUG NAME
"RTN","PSSHRVL1",248,0)
 ;RETURNS THE ERROR MESSAGE AND ERROR REASON 
"RTN","PSSHRVL1",249,0)
 N PSREASON,PSRESULT,PSMSG,TEXT,OKFLAG
"RTN","PSSHRVL1",250,0)
 S PSRESULT="",OKFLAG=0
"RTN","PSSHRVL1",251,0)
 F TEXT="LOADING","MAINTENANCE","INITIAL DOSE","INTERMEDIATE DOSE","PROPHYLACTIC","SINGLE DOSE" D  Q:OKFLAG
"RTN","PSSHRVL1",252,0)
 .I DOSETYP=TEXT S OKFLAG=1 Q
"RTN","PSSHRVL1",253,0)
 I '$L(DOSETYP)!'OKFLAG D
"RTN","PSSHRVL1",254,0)
 .S PSMSG=$$DOSEMSG(PSDRUGNM)
"RTN","PSSHRVL1",255,0)
 .;S PSREASON="Undefined Dose Type"
"RTN","PSSHRVL1",256,0)
 .S PSREASON="Invalid or Undefined Dose Type"
"RTN","PSSHRVL1",257,0)
 .S PSRESULT=PSMSG_U_PSREASON
"RTN","PSSHRVL1",258,0)
 Q PSRESULT
"RTN","PSSHRVL1",259,0)
 ;
"RTN","PSSHRVL1",260,0)
CHKDOSE(PSDOSE,PSDRUGNM) ;
"RTN","PSSHRVL1",261,0)
 ;CHECKS THE DOSE OF DRUG DOSE REQUEST
"RTN","PSSHRVL1",262,0)
 ;INPUTS: PSDOSE-ORDERED DOSE OF A DRUG
"RTN","PSSHRVL1",263,0)
 ;PSDRUGNM=NAME OF DRUG
"RTN","PSSHRVL1",264,0)
 ;RETURNS THE ERROR MESSAGE AND ERROR REASON
"RTN","PSSHRVL1",265,0)
 N PSREASON,PSRESULT,PSMSG
"RTN","PSSHRVL1",266,0)
 S PSRESULT=""
"RTN","PSSHRVL1",267,0)
 I PSDOSE'=+PSDOSE D
"RTN","PSSHRVL1",268,0)
 .S PSMSG=$$DOSEMSG(PSDRUGNM)
"RTN","PSSHRVL1",269,0)
 .S PSREASON="Invalid or Undefined Dose"
"RTN","PSSHRVL1",270,0)
 .S PSRESULT=PSMSG_U_PSREASON
"RTN","PSSHRVL1",271,0)
 Q PSRESULT
"RTN","PSSHRVL1",272,0)
 ;
"RTN","PSSHRVL1",273,0)
CHKUNIT(PSUNIT,PSDRUGNM) ;
"RTN","PSSHRVL1",274,0)
 ;CHECKS THE UNITS OF A DOSE-RETURNS ERROR AND REASON
"RTN","PSSHRVL1",275,0)
 ;INPUTS: PSUNIT-UNITS OF THE DRUG
"RTN","PSSHRVL1",276,0)
 ;PSDRUGNM-NAME OF THE DRUG
"RTN","PSSHRVL1",277,0)
 N PSREASON,PSRESULT,PSMSG
"RTN","PSSHRVL1",278,0)
 S PSRESULT=""
"RTN","PSSHRVL1",279,0)
 I '$L(PSUNIT) D
"RTN","PSSHRVL1",280,0)
 .S PSMSG=$$DOSEMSG(PSDRUGNM)
"RTN","PSSHRVL1",281,0)
 .S PSREASON="Invalid or Undefined Dose Unit"
"RTN","PSSHRVL1",282,0)
 .S PSRESULT=PSMSG_U_PSREASON
"RTN","PSSHRVL1",283,0)
 Q PSRESULT
"RTN","PSSHRVL1",284,0)
 ;
"RTN","PSSHRVL1",285,0)
CHKFREQ(PSFREQ) ;
"RTN","PSSHRVL1",286,0)
 ;INPUTS: PSFREQ-HOW OFTEN A DRUG IS ADMINISTRED
"RTN","PSSHRVL1",287,0)
 ;RETURNS-ERROR MESSAGE AND ERROR REASON
"RTN","PSSHRVL1",288,0)
 N PSREASON,PSRESULT,PSMSG
"RTN","PSSHRVL1",289,0)
 S PSMSG="Daily Dosage Range Check could not be performed."
"RTN","PSSHRVL1",290,0)
 S PSRESULT=""
"RTN","PSSHRVL1",291,0)
 D
"RTN","PSSHRVL1",292,0)
 .I '$L(PSFREQ) Q  ;Freq can be null
"RTN","PSSHRVL1",293,0)
 .I '$$VALFREQ^PSSHFREQ(PSFREQ) D
"RTN","PSSHRVL1",294,0)
 ..S PSREASON="Invalid or Undefined Frequency"
"RTN","PSSHRVL1",295,0)
 ..S PSRESULT=PSMSG_U_PSREASON
"RTN","PSSHRVL1",296,0)
 Q PSRESULT
"RTN","PSSHRVL1",297,0)
 ;
"RTN","PSSHRVL1",298,0)
CHKRATE(PSRATE,TYPE,DRUGNM,DURATION) ;
"RTN","PSSHRVL1",299,0)
 ;INPUTS: PSRATE-Can be either dose or duration rate
"RTN","PSSHRVL1",300,0)
 ;TYPE-DOSE OR DURATION
"RTN","PSSHRVL1",301,0)
 ;DRUGNM-DRUG NAME
"RTN","PSSHRVL1",302,0)
 ;DURATION-OPTIONAL DURATION NUMERIC
"RTN","PSSHRVL1",303,0)
 S DURATION=$G(DURATION)
"RTN","PSSHRVL1",304,0)
 ;output: returns error message and reason
"RTN","PSSHRVL1",305,0)
 N OKFLAG,STDRATE,RESULT,REASON,PSMSG
"RTN","PSSHRVL1",306,0)
 S RESULT=""
"RTN","PSSHRVL1",307,0)
 S OKFLAG=0 ;ASSUME BAD
"RTN","PSSHRVL1",308,0)
 D
"RTN","PSSHRVL1",309,0)
 .I '$L(PSRATE),TYPE="DURATION",'$L(DURATION) Q  ;can be null for duration if duration is null
"RTN","PSSHRVL1",310,0)
 .F STDRATE="H","HOUR","MINUTE","MIN","DAY" D  Q:OKFLAG
"RTN","PSSHRVL1",311,0)
 ..I PSRATE=STDRATE S OKFLAG=1
"RTN","PSSHRVL1",312,0)
 .I 'OKFLAG D
"RTN","PSSHRVL1",313,0)
 ..S TYPE=$S(TYPE="DURATION":"Duration",TYPE="DOSE":"DOSE",1:"Duration or Dose")
"RTN","PSSHRVL1",314,0)
 ..S REASON="Invalid or Undefined "_TYPE_" Rate"
"RTN","PSSHRVL1",315,0)
 ..S PSMSG=$$DOSEMSG(DRUGNM)
"RTN","PSSHRVL1",316,0)
 ..S RESULT=PSMSG_U_REASON
"RTN","PSSHRVL1",317,0)
 Q RESULT
"RTN","PSSHRVL1",318,0)
 ;
"RTN","PSSHRVL1",319,0)
CHKDRATN(DURATION,DRUGNM) ;
"RTN","PSSHRVL1",320,0)
 ;INPUTS; DURATION-INTEGER-HOW LONG A DRUG IS TAKEN
"RTN","PSSHRVL1",321,0)
 ;PSMSG-ERROR MESSAGE
"RTN","PSSHRVL1",322,0)
 N RESULT,REASON,PSMSG
"RTN","PSSHRVL1",323,0)
 S RESULT=""
"RTN","PSSHRVL1",324,0)
 ;If not integer error
"RTN","PSSHRVL1",325,0)
 D
"RTN","PSSHRVL1",326,0)
 .I '$L(DURATION) Q  ;can be null OK
"RTN","PSSHRVL1",327,0)
 .;must be an integer > 0
"RTN","PSSHRVL1",328,0)
 .;I (DURATION'=+DURATION)!(DURATION'=(DURATION\1))!(DURATION=0) D
"RTN","PSSHRVL1",329,0)
 . I (DURATION=0)!(DURATION'?1.N) D
"RTN","PSSHRVL1",330,0)
 ..S REASON="Invalid or Undefined Duration"
"RTN","PSSHRVL1",331,0)
 ..S PSMSG=$$DOSEMSG(DRUGNM)
"RTN","PSSHRVL1",332,0)
 ..S RESULT=PSMSG_U_REASON
"RTN","PSSHRVL1",333,0)
 Q RESULT
"RTN","PSSHRVL1",334,0)
 ;
"RTN","PSSHRVL1",335,0)
DOSEMSG(DRUGNAME,TYPE) ;
"RTN","PSSHRVL1",336,0)
 ;INPUTS:DRUGNMAME
"RTN","PSSHRVL1",337,0)
 ;TYPE-either "R" for range or "S" for single or "D" for daily (optional)
"RTN","PSSHRVL1",338,0)
 ;OUTPUT STANDARD DOSAGE ERROR MESSAGE
"RTN","PSSHRVL1",339,0)
 N RETURN
"RTN","PSSHRVL1",340,0)
 S TYPE=$G(TYPE) ;OPTIONAL PARAMETER ONLY CALLED FROM PSSHRQ23
"RTN","PSSHRVL1",341,0)
 D
"RTN","PSSHRVL1",342,0)
 .I TYPE="R" D  Q
"RTN","PSSHRVL1",343,0)
 ..SET RETURN="Daily Dose Range Check could not be performed for Drug: "_DRUGNAME
"RTN","PSSHRVL1",344,0)
 .I TYPE="S" D  Q
"RTN","PSSHRVL1",345,0)
 ..;SET RETURN="Maximum Single Dose Range Check could not be performed for Drug: "_DRUGNAME
"RTN","PSSHRVL1",346,0)
 ..SET RETURN="Maximum Single Dose Check could not be performed for Drug: "_DRUGNAME
"RTN","PSSHRVL1",347,0)
 .I TYPE="D" D  Q
"RTN","PSSHRVL1",348,0)
 ..S RETURN="Daily Dose Check could not be performed for Drug: "_DRUGNAME
"RTN","PSSHRVL1",349,0)
 .;
"RTN","PSSHRVL1",350,0)
 .S RETURN="Dosing Checks could not be performed for Drug: "_DRUGNAME
"RTN","PSSHRVL1",351,0)
 Q RETURN
"RTN","PSSHRVL1",352,0)
 ;
"RTN","PSSHRVL1",353,0)
GETUCI() ;
"RTN","PSSHRVL1",354,0)
 ;RETURNS CURRENT UCI
"RTN","PSSHRVL1",355,0)
 N Y
"RTN","PSSHRVL1",356,0)
 X ^%ZOSF("UCI")
"RTN","PSSHRVL1",357,0)
 Q Y
"RTN","PSSHRVL1",358,0)
 ;
"RTN","PSSHRVL1",359,0)
ERRMSG(TYPE,DRUGNAME,ORDRNUM,WARNING) ;
"RTN","PSSHRVL1",360,0)
 ;Returns standard messages for error nodes
"RTN","PSSHRVL1",361,0)
 ;created from FDB alerts
"RTN","PSSHRVL1",362,0)
 ;inputs:
"RTN","PSSHRVL1",363,0)
 ;TYPE-DRUGDRUG,THERAPY,DOSE
"RTN","PSSHRVL1",364,0)
 ;DRUGNAME-NAME OF DRUG
"RTN","PSSHRVL1",365,0)
 ;WARNING (OPTIONAL) 1 OR 0 IF SET CAME BACKF FROM FDB AS SEVERITY OF WARINING)
"RTN","PSSHRVL1",366,0)
 ;CALLED BY MSGWRITE^PSSHRQ21
"RTN","PSSHRVL1",367,0)
 N MSG,LOCORREM
"RTN","PSSHRVL1",368,0)
 S WARNING=$G(WARNING)
"RTN","PSSHRVL1",369,0)
 S MSG=""
"RTN","PSSHRVL1",370,0)
 S LOCORREM=$$LOCORREM(ORDRNUM)
"RTN","PSSHRVL1",371,0)
 D
"RTN","PSSHRVL1",372,0)
 .I WARNING D  Q
"RTN","PSSHRVL1",373,0)
 ..I TYPE="DRUGDRUG" S MSG="Drug Interaction Order Check for "_LOCORREM_" Drug: "
"RTN","PSSHRVL1",374,0)
 ..I TYPE="THERAPY" S MSG="Duplicate Therapy Order Check for "_LOCORREM_" Drug: "
"RTN","PSSHRVL1",375,0)
 ..I TYPE="DOSE" S MSG="Dosing Order Check Warning for "_DRUGNAME_":" Q    ; do not execute the next line
"RTN","PSSHRVL1",376,0)
 ..S MSG=MSG_DRUGNAME_" Warning"
"RTN","PSSHRVL1",377,0)
 .I TYPE="DRUGDRUG" S MSG="Drug Interaction Order Check could not be performed."
"RTN","PSSHRVL1",378,0)
 .I TYPE="THERAPY" S MSG="Duplicate Therapy Order Check could not be performed for "_LOCORREM_" Drug: "_DRUGNAME
"RTN","PSSHRVL1",379,0)
 .I TYPE="DOSE" S MSG=$$DOSEMSG(DRUGNAME)
"RTN","PSSHRVL1",380,0)
 Q MSG
"RTN","PSSHRVL1",381,0)
 ;
"RTN","PSSHRVL1",382,0)
ORDRTYP(ORDERNUM) ;
"RTN","PSSHRVL1",383,0)
 ;RETURNS THE TYPE OF ORDER: OUTPATIENT PROSPECTIVE DRUG, OUTPATIENT, REMOTE OR INPATIENT
"RTN","PSSHRVL1",384,0)
 ;INPUTS: ORDERNUM: TYPE;ORDER NUMBER;DRUG TYPE (PROFILE, PROSPECTIVE, REMOTE);COUNTER
"RTN","PSSHRVL1",385,0)
 N TYPE,C1
"RTN","PSSHRVL1",386,0)
 S TYPE=""
"RTN","PSSHRVL1",387,0)
 S C1=$E(ORDERNUM)
"RTN","PSSHRVL1",388,0)
 D
"RTN","PSSHRVL1",389,0)
 .I ORDERNUM["REMOTE" S TYPE="REMOTE" Q
"RTN","PSSHRVL1",390,0)
 .I C1="O" S TYPE="OUTPATIENT" Q
"RTN","PSSHRVL1",391,0)
 .I C1="Z" S TYPE="OUTPATIENT" Q
"RTN","PSSHRVL1",392,0)
 .I C1="I" S TYPE="INPATIENT" Q
"RTN","PSSHRVL1",393,0)
 .I C1="R" S TYPE="REMOTE" Q
"RTN","PSSHRVL1",394,0)
 Q TYPE
"RTN","PSSHRVL1",395,0)
 ;
"RTN","PSSHRVL1",396,0)
LOCORREM(ORDERNUM) ;
"RTN","PSSHRVL1",397,0)
 ;INPUTS: ORDERNUM: TYPE;ORDER NUMBER;DRUG TYPE (PROFILE, PROSPECTIVE, REMOTE);COUNTER
"RTN","PSSHRVL1",398,0)
 ;OUTPUTS:-String either "local" or "Remote"
"RTN","PSSHRVL1",399,0)
 N ORDRTYP,LOCORREM
"RTN","PSSHRVL1",400,0)
 S ORDRTYP=$$ORDRTYP(ORDERNUM)
"RTN","PSSHRVL1",401,0)
 D
"RTN","PSSHRVL1",402,0)
 .I ORDRTYP="REMOTE" S LOCORREM="Remote" Q
"RTN","PSSHRVL1",403,0)
 .S LOCORREM="Local"
"RTN","PSSHRVL1",404,0)
 Q LOCORREM
"RTN","PSSHRVL1",405,0)
 ;
"RTN","PSSHRVL1",406,0)
STATMSG() ;
"RTN","PSSHRVL1",407,0)
 ;This returns the standard message when an FDB update is being performed.
"RTN","PSSHRVL1",408,0)
 ;
"RTN","PSSHRVL1",409,0)
 N MSG
"RTN","PSSHRVL1",410,0)
 ;S MSG="Enhanced Order checks are unavailable. A Vendor database update is in progress."
"RTN","PSSHRVL1",411,0)
 S MSG="The connection to the vendor database has been disabled."
"RTN","PSSHRVL1",412,0)
 Q MSG
"RTN","PSSHRVL1",413,0)
 ;
"RTN","PSSHRVL1",414,0)
 ;
"RTN","PSSHRVL1",415,0)
GCMESS() ;Get Exclude field
"RTN","PSSHRVL1",416,0)
 N PSSVQND,PSSVQEXC,PSSVQPVP
"RTN","PSSHRVL1",417,0)
 S PSSVQPVP=$P(ORDRNUM,";",3)
"RTN","PSSHRVL1",418,0)
 S PSSVQND=^TMP($J,PSSHASH("Base"),"IN",PSSVQPVP,ORDRNUM)
"RTN","PSSHRVL1",419,0)
 S PSSVQEXC=""
"RTN","PSSHRVL1",420,0)
 D GCNMESX
"RTN","PSSHRVL1",421,0)
 Q PSSVQEXC
"RTN","PSSHRVL1",422,0)
 ;
"RTN","PSSHRVL1",423,0)
 ;
"RTN","PSSHRVL1",424,0)
GCNMESX ;
"RTN","PSSHRVL1",425,0)
 N PSSVQDRG,PSSVQ1,PSSVQ3,PSSVQVUI,PSSVQAR,PSSVQ4
"RTN","PSSHRVL1",426,0)
 S PSSVQDRG=$P(PSSVQND,"^",3) I PSSVQDRG D  Q
"RTN","PSSHRVL1",427,0)
 .S PSSVQ1=$P($G(^PSDRUG(PSSVQDRG,"ND")),"^"),PSSVQ3=$P($G(^PSDRUG(PSSVQDRG,"ND")),"^",3)
"RTN","PSSHRVL1",428,0)
 .I PSSVQ1,PSSVQ3 S PSSVQEXC=$$DDIEX^PSNAPIS(PSSVQ1,PSSVQ3)
"RTN","PSSHRVL1",429,0)
 S PSSVQVUI=$P(PSSVQND,"^",2) I 'PSSVQVUI Q
"RTN","PSSHRVL1",430,0)
 S PSSVQAR="PSSVQARR"
"RTN","PSSHRVL1",431,0)
 D GETIREF^XTID(50.68,.01,PSSVQVUI,PSSVQAR)
"RTN","PSSHRVL1",432,0)
 S PSSVQ4=$O(PSSVQAR(50.68,.01,""))
"RTN","PSSHRVL1",433,0)
 I PSSVQ4 S PSSVQEXC=$$DDIEX^PSNAPIS("",PSSVQ4)
"RTN","PSSHRVL1",434,0)
 Q
"RTN","PSSHRVL1",435,0)
 ;
"RTN","PSSHRVL1",436,0)
 ;
"RTN","PSSHRVL1",437,0)
NXCHKMSG(DRUGNM) ;
"RTN","PSSHRVL1",438,0)
 N MESSAGE
"RTN","PSSHRVL1",439,0)
 S MESSAGE="Order Checks could not be done for"_$S(PSSVQREM:" Remote",2:"")_" Drug: "_DRUGNM_", please complete a manual check for Drug Interactions"_$S(PSSVQDOS:", Duplicate Therapy and appropriate Dosing.",1:" and Duplicate Therapy.")
"RTN","PSSHRVL1",440,0)
 Q MESSAGE
"RTN","PSSHTTP")
0^11^B7570296
"RTN","PSSHTTP",1,0)
PSSHTTP ;WOIFO/AV - REENGINERING Sends XML Request to PEPS via HWSC ;09/20/07
"RTN","PSSHTTP",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136**;9/30/97;Build 89
"RTN","PSSHTTP",3,0)
 ;
"RTN","PSSHTTP",4,0)
 ; @author  - Alex Vazquez, Chris Flegel, Timothy Sabat, S Gordon
"RTN","PSSHTTP",5,0)
 ; @date    - September 19, 2007
"RTN","PSSHTTP",6,0)
 ; @version - 1.0
"RTN","PSSHTTP",7,0)
 ;
"RTN","PSSHTTP",8,0)
 QUIT
"RTN","PSSHTTP",9,0)
 ;;
"RTN","PSSHTTP",10,0)
PEPSPOST(DOCHAND,XML) ;
"RTN","PSSHTTP",11,0)
 ; @DESC Sends an HTTP request to PEPS as a POST
"RTN","PSSHTTP",12,0)
 ;
"RTN","PSSHTTP",13,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHTTP",14,0)
 ; @XML XML request as string
"RTN","PSSHTTP",15,0)
 ;
"RTN","PSSHTTP",16,0)
 ; @RETURNS A handle to response XML document
"RTN","PSSHTTP",17,0)
 ;          1 for success, 0 for failure
"RTN","PSSHTTP",18,0)
 ;
"RTN","PSSHTTP",19,0)
 NEW PSS,PSSERR,$ETRAP,$ESTACK
"RTN","PSSHTTP",20,0)
 ;
"RTN","PSSHTTP",21,0)
 ; Set error trap
"RTN","PSSHTTP",22,0)
 SET $ETRAP="DO ERROR^PSSHTTP"
"RTN","PSSHTTP",23,0)
 ;
"RTN","PSSHTTP",24,0)
 SET PSS("server")="PEPS"
"RTN","PSSHTTP",25,0)
 SET PSS("webserviceName")="ORDER_CHECKS"
"RTN","PSSHTTP",26,0)
 SET PSS("path")="ordercheck"
"RTN","PSSHTTP",27,0)
 ;
"RTN","PSSHTTP",28,0)
 SET PSS("parameterName")="xmlRequest"
"RTN","PSSHTTP",29,0)
 SET PSS("parameterValue")=XML
"RTN","PSSHTTP",30,0)
 ;
"RTN","PSSHTTP",31,0)
 ; Get instance of client REST request object
"RTN","PSSHTTP",32,0)
 SET PSS("restObject")=$$GETREST^XOBWLIB(PSS("webserviceName"),PSS("server"))
"RTN","PSSHTTP",33,0)
 IF $DATA(^TMP($JOB,"OUT","EXCEPTION"))>0 QUIT 0
"RTN","PSSHTTP",34,0)
 ;
"RTN","PSSHTTP",35,0)
 ; Insert XML as parameter
"RTN","PSSHTTP",36,0)
 DO PSS("restObject").InsertFormData(PSS("parameterName"),PSS("parameterValue"))
"RTN","PSSHTTP",37,0)
 IF $DATA(^TMP($JOB,"OUT","EXCEPTION"))>0 QUIT 0
"RTN","PSSHTTP",38,0)
 ;
"RTN","PSSHTTP",39,0)
 ; Execute HTTP Post method
"RTN","PSSHTTP",40,0)
 SET PSS("postResult")=$$POST^XOBWLIB(PSS("restObject"),PSS("path"),.PSSERR)
"RTN","PSSHTTP",41,0)
 IF $DATA(^TMP($JOB,"OUT","EXCEPTION"))>0 QUIT 0
"RTN","PSSHTTP",42,0)
 ;
"RTN","PSSHTTP",43,0)
 DO:PSS("postResult")
"RTN","PSSHTTP",44,0)
 . SET PSS("result")=##class(gov.va.med.pre.ws.XMLHandler).getHandleToXmlDoc(PSS("restObject").HttpResponse.Data, .DOCHAND)
"RTN","PSSHTTP",45,0)
 . QUIT
"RTN","PSSHTTP",46,0)
 ;
"RTN","PSSHTTP",47,0)
 DO:'PSS("postResult")
"RTN","PSSHTTP",48,0)
 . SET ^TMP($JOB,"OUT","EXCEPTION")="Unable to make http request."
"RTN","PSSHTTP",49,0)
 . SET PSS("result")=0
"RTN","PSSHTTP",50,0)
 . QUIT
"RTN","PSSHTTP",51,0)
 ;
"RTN","PSSHTTP",52,0)
 QUIT PSS("result")
"RTN","PSSHTTP",53,0)
 ;;
"RTN","PSSHTTP",54,0)
ERROR ;
"RTN","PSSHTTP",55,0)
 ; @DESC Handles error during request to PEPS via webservice.
"RTN","PSSHTTP",56,0)
 ;
"RTN","PSSHTTP",57,0)
 ; Depends on GLOBAL variable PSSERR to be set in previous call.
"RTN","PSSHTTP",58,0)
 ;
"RTN","PSSHTTP",59,0)
 ; @RETURNS Nothing. Value store in global.
"RTN","PSSHTTP",60,0)
 ;
"RTN","PSSHTTP",61,0)
 NEW ERRARRAY
"RTN","PSSHTTP",62,0)
 ;
"RTN","PSSHTTP",63,0)
 ; Get error object from Error Object Factory
"RTN","PSSHTTP",64,0)
 IF $GET(PSSERR)="" SET PSSERR=$$EOFAC^XOBWLIB()
"RTN","PSSHTTP",65,0)
 ; Store the error object in the error array
"RTN","PSSHTTP",66,0)
 DO ERR2ARR^XOBWLIB(PSSERR,.ERRARRAY)
"RTN","PSSHTTP",67,0)
 ;
"RTN","PSSHTTP",68,0)
 ; Parse out the error text and store in global
"RTN","PSSHTTP",69,0)
 SET ^TMP($JOB,"OUT","EXCEPTION")=$$GETTEXT(.ERRARRAY)
"RTN","PSSHTTP",70,0)
 ;
"RTN","PSSHTTP",71,0)
 ; Set ecode to empty to return to calling function
"RTN","PSSHTTP",72,0)
 SET $ECODE=""
"RTN","PSSHTTP",73,0)
 ;
"RTN","PSSHTTP",74,0)
 QUIT
"RTN","PSSHTTP",75,0)
 ;;
"RTN","PSSHTTP",76,0)
GETTEXT(ERRARRAY) ;
"RTN","PSSHTTP",77,0)
 ; @DESC Gets the error text from the array
"RTN","PSSHTTP",78,0)
 ;
"RTN","PSSHTTP",79,0)
 ; @ERRARRAY Error array stores error in format defined by web service product.
"RTN","PSSHTTP",80,0)
 ;
"RTN","PSSHTTP",81,0)
 ; @RETURNS Error info as a single string
"RTN","PSSHTTP",82,0)
 ;
"RTN","PSSHTTP",83,0)
 NEW PSS
"RTN","PSSHTTP",84,0)
 ;
"RTN","PSSHTTP",85,0)
 ; Loop through the text subscript of error array and concatenate
"RTN","PSSHTTP",86,0)
 SET PSS("errorText")=""
"RTN","PSSHTTP",87,0)
 SET PSS("I")=""
"RTN","PSSHTTP",88,0)
 FOR  SET PSS("I")=$ORDER(ERRARRAY("text",PSS("I"))) QUIT:PSS("I")=""  DO
"RTN","PSSHTTP",89,0)
 . SET PSS("errorText")=PSS("errorText")_ERRARRAY("text",PSS("I"))
"RTN","PSSHTTP",90,0)
 . QUIT
"RTN","PSSHTTP",91,0)
 ;
"RTN","PSSHTTP",92,0)
 QUIT PSS("errorText")
"RTN","PSSHTTP",93,0)
 ;;
"SEC","^DIC",59.73,59.73,0,"AUDIT")
@
"SEC","^DIC",59.73,59.73,0,"DD")
@
"SEC","^DIC",59.73,59.73,0,"DEL")
@
"SEC","^DIC",59.73,59.73,0,"LAYGO")
@
"SEC","^DIC",59.73,59.73,0,"RD")
@
"SEC","^DIC",59.73,59.73,0,"WR")
@
"SEC","^DIC",59.74,59.74,0,"AUDIT")
@
"SEC","^DIC",59.74,59.74,0,"DD")
@
"SEC","^DIC",59.74,59.74,0,"DEL")
@
"SEC","^DIC",59.74,59.74,0,"LAYGO")
@
"SEC","^DIC",59.74,59.74,0,"RD")
@
"SEC","^DIC",59.74,59.74,0,"WR")
@
"VER")
8.0^22.0
"^DD",59.73,59.73,0)
FIELD^^1^2
"^DD",59.73,59.73,0,"DDA")
N
"^DD",59.73,59.73,0,"DT")
3080729
"^DD",59.73,59.73,0,"IX","B",59.73,.01)

"^DD",59.73,59.73,0,"NM","VENDOR DISABLE/ENABLE")

"^DD",59.73,59.73,.01,0)
DISABLE/ENABLE FLAG^RS^0:ENABLE;1:DISABLE;^0;1^Q
"^DD",59.73,59.73,.01,1,0)
^.1
"^DD",59.73,59.73,.01,1,1,0)
59.73^B
"^DD",59.73,59.73,.01,1,1,1)
S ^PS(59.73,"B",$E(X,1,30),DA)=""
"^DD",59.73,59.73,.01,1,1,2)
K ^PS(59.73,"B",$E(X,1,30),DA)
"^DD",59.73,59.73,.01,3)
Enter a zero (0) to enable or a one (1) to disable.
"^DD",59.73,59.73,.01,21,0)
^^4^4^3090608^
"^DD",59.73,59.73,.01,21,1,0)
This field is a flag that determines whether the Vendor
"^DD",59.73,59.73,.01,21,2,0)
interface is enabled or disabled. The status of the Vendor
"^DD",59.73,59.73,.01,21,3,0)
interface should only be modified when the Vendor 
"^DD",59.73,59.73,.01,21,4,0)
database is being updated
"^DD",59.73,59.73,.01,"DT")
3090608
"^DD",59.73,59.73,1,0)
ACTIVITY^59.731DA^^1;0
"^DD",59.73,59.73,1,21,0)
^^2^2^3090608^
"^DD",59.73,59.73,1,21,1,0)
This is the sub-file that records any changes to the Vendor 
"^DD",59.73,59.73,1,21,2,0)
interface
"^DD",59.73,59.731,0)
ACTIVITY SUB-FIELD^^2^3
"^DD",59.73,59.731,0,"DT")
3080729
"^DD",59.73,59.731,0,"IX","B",59.731,.01)

"^DD",59.73,59.731,0,"NM","ACTIVITY")

"^DD",59.73,59.731,0,"UP")
59.73
"^DD",59.73,59.731,.01,0)
ACTIVITY^D^^0;1^S %DT="ESTXR" D ^%DT S X=Y K:X<1 X
"^DD",59.73,59.731,.01,1,0)
^.1
"^DD",59.73,59.731,.01,1,1,0)
59.731^B
"^DD",59.73,59.731,.01,1,1,1)
S ^PS(59.73,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",59.73,59.731,.01,1,1,2)
K ^PS(59.73,DA(1),1,"B",$E(X,1,30),DA)
"^DD",59.73,59.731,.01,3)
Enter the date and time when the event occurred.
"^DD",59.73,59.731,.01,21,0)
^^2^2^3090608^
"^DD",59.73,59.731,.01,21,1,0)
This field holds the date and time when a user either disabled or enabled 
"^DD",59.73,59.731,.01,21,2,0)
the Vendor interface.
"^DD",59.73,59.731,.01,"DT")
3090608
"^DD",59.73,59.731,1,0)
USER^P200'^VA(200,^0;2^Q
"^DD",59.73,59.731,1,3)
Enter the user that enabled or disabled the Vendor interface.
"^DD",59.73,59.731,1,21,0)
^^2^2^3090608^
"^DD",59.73,59.731,1,21,1,0)
This field contains the user that changed the status of the Vendor 
"^DD",59.73,59.731,1,21,2,0)
interface.
"^DD",59.73,59.731,1,"DT")
3090608
"^DD",59.73,59.731,2,0)
ACTION^S^E:ENABLED;D:DISABLED;^0;3^Q
"^DD",59.73,59.731,2,3)
Enter an 'E' if the user enabled the Vendor interface or a 'D' if the user disabled the interface.
"^DD",59.73,59.731,2,21,0)
^^2^2^3090608^
"^DD",59.73,59.731,2,21,1,0)
This field contains the type of action performed by the user either 
"^DD",59.73,59.731,2,21,2,0)
enabling or disabling the Vendor interface.
"^DD",59.73,59.731,2,"DT")
3090608
"^DD",59.74,59.74,0)
FIELD^^3^4
"^DD",59.74,59.74,0,"DDA")
N
"^DD",59.74,59.74,0,"DT")
3090107
"^DD",59.74,59.74,0,"IX","B",59.74,.01)

"^DD",59.74,59.74,0,"NM","VENDOR INTERFACE DATA")

"^DD",59.74,59.74,.01,0)
DATE/TIME VENDOR UNAVAILABLE^RD^^0;1^S %DT="ETXR" D ^%DT S X=Y K:X<1 X
"^DD",59.74,59.74,.01,1,0)
^.1
"^DD",59.74,59.74,.01,1,1,0)
59.74^B
"^DD",59.74,59.74,.01,1,1,1)
S ^PS(59.74,"B",$E(X,1,30),DA)=""
"^DD",59.74,59.74,.01,1,1,2)
K ^PS(59.74,"B",$E(X,1,30),DA)
"^DD",59.74,59.74,.01,3)
(No range limit on date)
"^DD",59.74,59.74,.01,21,0)
^^3^3^3090608^
"^DD",59.74,59.74,.01,21,1,0)
This field contains the date and time of when the Vendor 
"^DD",59.74,59.74,.01,21,2,0)
interface was discovered to be unavailable by the monitoring background 
"^DD",59.74,59.74,.01,21,3,0)
process.
"^DD",59.74,59.74,.01,"DT")
3090608
"^DD",59.74,59.74,1,0)
DATE/TIME VENDOR AVAILABLE^D^^0;2^S %DT="ETXR" D ^%DT S X=Y K:X<1 X
"^DD",59.74,59.74,1,3)
(No range limit on date)
"^DD",59.74,59.74,1,21,0)
^^3^3^3090608^
"^DD",59.74,59.74,1,21,1,0)
This field holds the date and time when the Vendor interface was 
"^DD",59.74,59.74,1,21,2,0)
discovered by monitoring background process to be available again after
"^DD",59.74,59.74,1,21,3,0)
being unavailable.
"^DD",59.74,59.74,1,"DT")
3090608
"^DD",59.74,59.74,2,0)
TOTAL TIME NOT AVAILABLE^NJ7,0O^^0;3^K:+X'=X!(X>1000000)!(X<0)!(X?.E1"."1.N) X
"^DD",59.74,59.74,2,2)
S Y(0)=Y S Y=$$HRSMIN^PSSHRIT(Y)
"^DD",59.74,59.74,2,2.1)
S Y=$$HRSMIN^PSSHRIT(Y)
"^DD",59.74,59.74,2,3)
Type a number between 0 and 1000000, 0 Decimal Digits
"^DD",59.74,59.74,2,21,0)
^^3^3^3090608^
"^DD",59.74,59.74,2,21,1,0)
This field holds the total time in minutes that the Vendor 
"^DD",59.74,59.74,2,21,2,0)
interface was unavailable as determined by the monitoring background 
"^DD",59.74,59.74,2,21,3,0)
process.
"^DD",59.74,59.74,2,"DT")
3090608
"^DD",59.74,59.74,3,0)
MESSAGE SENT^S^1:MESSAGE SENT;^0;4^Q
"^DD",59.74,59.74,3,3)
Enter a one (1) to denote that a Mailman message was sent
"^DD",59.74,59.74,3,21,0)
^^3^3^3090608^
"^DD",59.74,59.74,3,21,1,0)
This flag is set when a Mailman bulletin is transmitted to the 
"^DD",59.74,59.74,3,21,2,0)
appropriate mail group informing the users that the Vendor 
"^DD",59.74,59.74,3,21,3,0)
interface is unavailable.
"^DD",59.74,59.74,3,"DT")
3090608
"^DIC",59.73,59.73,0)
VENDOR DISABLE/ENABLE^59.73
"^DIC",59.73,59.73,0,"GL")
^PS(59.73,
"^DIC",59.73,59.73,"%",0)
^1.005^^0
"^DIC",59.73,59.73,"%D",0)
^1.001^7^7^3090608^^^
"^DIC",59.73,59.73,"%D",1,0)
This file contains the date and time of when a particular user 
"^DIC",59.73,59.73,"%D",2,0)
disabled or enabled the Vendor interface.  This will allow site 
"^DIC",59.73,59.73,"%D",3,0)
personnel to keep track of when and who disabled or enabled the 
"^DIC",59.73,59.73,"%D",4,0)
Vendor interface in order to facilitate a Vendor update. The 
"^DIC",59.73,59.73,"%D",5,0)
status of the Vendor interface should only be modified 
"^DIC",59.73,59.73,"%D",6,0)
through the Disable Order Checks option when performing a Vendor
"^DIC",59.73,59.73,"%D",7,0)
database update.
"^DIC",59.73,"B","VENDOR DISABLE/ENABLE",59.73)

"^DIC",59.74,59.74,0)
VENDOR INTERFACE DATA^59.74
"^DIC",59.74,59.74,0,"GL")
^PS(59.74,
"^DIC",59.74,59.74,"%",0)
^1.005^^0
"^DIC",59.74,59.74,"%D",0)
^1.001^4^4^3090608^^^^
"^DIC",59.74,59.74,"%D",1,0)
This file keeps track of when and for how long the Vendor 
"^DIC",59.74,59.74,"%D",2,0)
interface is unavailable. A background process monitors the status of the 
"^DIC",59.74,59.74,"%D",3,0)
interface and records in this file when the interface is down,when it
"^DIC",59.74,59.74,"%D",4,0)
becomes available again and the total time it was unavailable.
"^DIC",59.74,"B","VENDOR INTERFACE DATA",59.74)

**END**
**END**
