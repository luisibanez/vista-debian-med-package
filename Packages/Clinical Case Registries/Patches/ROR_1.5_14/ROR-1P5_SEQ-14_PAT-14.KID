Released ROR*1.5*14 SEQ #14
Extracted from mail message
**KIDS**:ROR*1.5*14^

**INSTALL NAME**
ROR*1.5*14
"BLD",7615,0)
ROR*1.5*14^CLINICAL CASE REGISTRIES^0^3110401^y
"BLD",7615,4,0)
^9.64PA^799.4^3
"BLD",7615,4,799.33,0)
799.33
"BLD",7615,4,799.33,222)
n^n^f^^n^^y^m^n
"BLD",7615,4,799.33,224)
I $P($G(^ROR(799.33,Y,0)),U,1)="Purchased Care"
"BLD",7615,4,799.4,0)
799.4
"BLD",7615,4,799.4,2,0)
^9.641^799.4^1
"BLD",7615,4,799.4,2,799.4,0)
ROR HIV RECORD  (File-top level)
"BLD",7615,4,799.4,2,799.4,1,0)
^9.6411^12.08^2
"BLD",7615,4,799.4,2,799.4,1,.02,0)
CLINICAL AIDS
"BLD",7615,4,799.4,2,799.4,1,12.08,0)
AIDS DX - FIRST DIAGNOSED HERE
"BLD",7615,4,799.4,222)
y^n^p^^^^n^^n
"BLD",7615,4,799.4,224)

"BLD",7615,4,799.6,0)
799.6
"BLD",7615,4,799.6,222)
n^n^f^^n^^y^m^n
"BLD",7615,4,799.6,224)
I $P($G(^RORDATA(799.6,Y,0)),U,1)="PURCHASED CARE"
"BLD",7615,4,"APDD",799.4,799.4)

"BLD",7615,4,"APDD",799.4,799.4,.02)

"BLD",7615,4,"APDD",799.4,799.4,12.08)

"BLD",7615,4,"B",799.33,799.33)

"BLD",7615,4,"B",799.4,799.4)

"BLD",7615,4,"B",799.6,799.6)

"BLD",7615,6.3)
24
"BLD",7615,"INID")
^n
"BLD",7615,"INIT")
RORP014
"BLD",7615,"KRN",0)
^9.67PA^779.2^20
"BLD",7615,"KRN",.4,0)
.4
"BLD",7615,"KRN",.401,0)
.401
"BLD",7615,"KRN",.402,0)
.402
"BLD",7615,"KRN",.403,0)
.403
"BLD",7615,"KRN",.5,0)
.5
"BLD",7615,"KRN",.84,0)
.84
"BLD",7615,"KRN",.84,"NM",0)
^9.68A^5^5
"BLD",7615,"KRN",.84,"NM",1,0)
7981001.001^^0
"BLD",7615,"KRN",.84,"NM",2,0)
7981997.002^^0
"BLD",7615,"KRN",.84,"NM",3,0)
7981019.001^^0
"BLD",7615,"KRN",.84,"NM",4,0)
7981020.001^^0
"BLD",7615,"KRN",.84,"NM",5,0)
7981019.002^^0
"BLD",7615,"KRN",.84,"NM","B",7981001.001,1)

"BLD",7615,"KRN",.84,"NM","B",7981019.001,3)

"BLD",7615,"KRN",.84,"NM","B",7981019.002,5)

"BLD",7615,"KRN",.84,"NM","B",7981020.001,4)

"BLD",7615,"KRN",.84,"NM","B",7981997.002,2)

"BLD",7615,"KRN",3.6,0)
3.6
"BLD",7615,"KRN",3.8,0)
3.8
"BLD",7615,"KRN",9.2,0)
9.2
"BLD",7615,"KRN",9.8,0)
9.8
"BLD",7615,"KRN",9.8,"NM",0)
^9.68A^18^18
"BLD",7615,"KRN",9.8,"NM",1,0)
RORRP034^^0^B20975903
"BLD",7615,"KRN",9.8,"NM",2,0)
RORRP033^^0^B17317089
"BLD",7615,"KRN",9.8,"NM",3,0)
RORDD01^^0^B25430775
"BLD",7615,"KRN",9.8,"NM",4,0)
RORHIVUT^^0^B1604686
"BLD",7615,"KRN",9.8,"NM",5,0)
RORHL02^^0^B35146970
"BLD",7615,"KRN",9.8,"NM",6,0)
RORRP025^^0^B34425910
"BLD",7615,"KRN",9.8,"NM",7,0)
RORX001^^0^B43373564
"BLD",7615,"KRN",9.8,"NM",8,0)
RORHL21^^0^B60105937
"BLD",7615,"KRN",9.8,"NM",9,0)
RORX019^^0^B148477652
"BLD",7615,"KRN",9.8,"NM",10,0)
RORX019A^^0^B208916635
"BLD",7615,"KRN",9.8,"NM",11,0)
RORUPD01^^0^B79263856
"BLD",7615,"KRN",9.8,"NM",12,0)
RORUPD04^^0^B52479479
"BLD",7615,"KRN",9.8,"NM",13,0)
RORUPD50^^0^B18841385
"BLD",7615,"KRN",9.8,"NM",14,0)
RORX020A^^0^B42700433
"BLD",7615,"KRN",9.8,"NM",15,0)
RORP014^^0^B33131484
"BLD",7615,"KRN",9.8,"NM",16,0)
ROREXT02^^0^B65862605
"BLD",7615,"KRN",9.8,"NM",17,0)
RORUTL11^^0^B3195130
"BLD",7615,"KRN",9.8,"NM",18,0)
RORX020^^0^B216151292
"BLD",7615,"KRN",9.8,"NM","B","RORDD01",3)

"BLD",7615,"KRN",9.8,"NM","B","ROREXT02",16)

"BLD",7615,"KRN",9.8,"NM","B","RORHIVUT",4)

"BLD",7615,"KRN",9.8,"NM","B","RORHL02",5)

"BLD",7615,"KRN",9.8,"NM","B","RORHL21",8)

"BLD",7615,"KRN",9.8,"NM","B","RORP014",15)

"BLD",7615,"KRN",9.8,"NM","B","RORRP025",6)

"BLD",7615,"KRN",9.8,"NM","B","RORRP033",2)

"BLD",7615,"KRN",9.8,"NM","B","RORRP034",1)

"BLD",7615,"KRN",9.8,"NM","B","RORUPD01",11)

"BLD",7615,"KRN",9.8,"NM","B","RORUPD04",12)

"BLD",7615,"KRN",9.8,"NM","B","RORUPD50",13)

"BLD",7615,"KRN",9.8,"NM","B","RORUTL11",17)

"BLD",7615,"KRN",9.8,"NM","B","RORX001",7)

"BLD",7615,"KRN",9.8,"NM","B","RORX019",9)

"BLD",7615,"KRN",9.8,"NM","B","RORX019A",10)

"BLD",7615,"KRN",9.8,"NM","B","RORX020",18)

"BLD",7615,"KRN",9.8,"NM","B","RORX020A",14)

"BLD",7615,"KRN",19,0)
19
"BLD",7615,"KRN",19.1,0)
19.1
"BLD",7615,"KRN",101,0)
101
"BLD",7615,"KRN",409.61,0)
409.61
"BLD",7615,"KRN",771,0)
771
"BLD",7615,"KRN",779.2,0)
779.2
"BLD",7615,"KRN",870,0)
870
"BLD",7615,"KRN",8989.51,0)
8989.51
"BLD",7615,"KRN",8989.52,0)
8989.52
"BLD",7615,"KRN",8994,0)
8994
"BLD",7615,"KRN","B",.4,.4)

"BLD",7615,"KRN","B",.401,.401)

"BLD",7615,"KRN","B",.402,.402)

"BLD",7615,"KRN","B",.403,.403)

"BLD",7615,"KRN","B",.5,.5)

"BLD",7615,"KRN","B",.84,.84)

"BLD",7615,"KRN","B",3.6,3.6)

"BLD",7615,"KRN","B",3.8,3.8)

"BLD",7615,"KRN","B",9.2,9.2)

"BLD",7615,"KRN","B",9.8,9.8)

"BLD",7615,"KRN","B",19,19)

"BLD",7615,"KRN","B",19.1,19.1)

"BLD",7615,"KRN","B",101,101)

"BLD",7615,"KRN","B",409.61,409.61)

"BLD",7615,"KRN","B",771,771)

"BLD",7615,"KRN","B",779.2,779.2)

"BLD",7615,"KRN","B",870,870)

"BLD",7615,"KRN","B",8989.51,8989.51)

"BLD",7615,"KRN","B",8989.52,8989.52)

"BLD",7615,"KRN","B",8994,8994)

"BLD",7615,"QUES",0)
^9.62^^
"BLD",7615,"REQB",0)
^9.611^2^2
"BLD",7615,"REQB",1,0)
LA*5.2*68^2
"BLD",7615,"REQB",2,0)
ROR*1.5*13^2
"BLD",7615,"REQB","B","LA*5.2*68",1)

"BLD",7615,"REQB","B","ROR*1.5*13",2)

"DATA",799.33,20,0)
Purchased Care
"DATA",799.6,16,0)
PURCHASED CARE^1^2850101^3110309^^5^3110309^^1
"DATA",799.6,16,1,0)
^799.61P^1^1
"DATA",799.6,16,1,1,0)
20
"DATA",799.6,16,3,0)
^799.63^2^2
"DATA",799.6,16,3,1,0)
VA HEPC
"DATA",799.6,16,3,2,0)
VA HIV
"FIA",799.33)
ROR DATA AREA
"FIA",799.33,0)
^ROR(799.33,
"FIA",799.33,0,0)
799.33
"FIA",799.33,0,1)
n^n^f^^n^^y^m^n
"FIA",799.33,0,10)

"FIA",799.33,0,11)
I $P($G(^ROR(799.33,Y,0)),U,1)="Purchased Care"
"FIA",799.33,0,"RLRO")

"FIA",799.33,0,"VR")
1.5^ROR
"FIA",799.33,799.33)
0
"FIA",799.4)
ROR HIV RECORD
"FIA",799.4,0)
^RORDATA(799.4,
"FIA",799.4,0,0)
799.4sP
"FIA",799.4,0,1)
y^n^p^^^^n^^n
"FIA",799.4,0,10)

"FIA",799.4,0,11)

"FIA",799.4,0,"RLRO")

"FIA",799.4,0,"VR")
1.5^ROR
"FIA",799.4,799.4)
1
"FIA",799.4,799.4,.02)

"FIA",799.4,799.4,12.08)

"FIA",799.6)
ROR HISTORICAL DATA EXTRACTION
"FIA",799.6,0)
^RORDATA(799.6,
"FIA",799.6,0,0)
799.6
"FIA",799.6,0,1)
n^n^f^^n^^y^m^n
"FIA",799.6,0,10)

"FIA",799.6,0,11)
I $P($G(^RORDATA(799.6,Y,0)),U,1)="PURCHASED CARE"
"FIA",799.6,0,"RLRO")

"FIA",799.6,0,"VR")
1.5^ROR
"FIA",799.6,799.6)
0
"FIA",799.6,799.61)
0
"FIA",799.6,799.63)
0
"FIA",799.6,799.64)
0
"FIA",799.6,799.641)
0
"INIT")
RORP014
"IX",799.6,799.6,"ADNAUTO",0)
799.6^ADNAUTO^Activation Date & Name for automatic backpulls.^R^^R^IR^I^799.6^^^^^S
"IX",799.6,799.6,"ADNAUTO",.1,0)
^^6^6^3051031^
"IX",799.6,799.6,"ADNAUTO",.1,1,0)
This index references parameters of those
"IX",799.6,799.6,"ADNAUTO",.1,2,0)
automatic historical data extractions (TYPE =
"IX",799.6,799.6,"ADNAUTO",.1,3,0)
"Auto (HL7 messages)") that are active (ACTIVATION
"IX",799.6,799.6,"ADNAUTO",.1,4,0)
DATE > 0) but have not been completed yet (some
"IX",799.6,799.6,"ADNAUTO",.1,5,0)
records of the REGISTRY NAME multiple have no
"IX",799.6,799.6,"ADNAUTO",.1,6,0)
value in the COMPLETION DATE/TIME field).
"IX",799.6,799.6,"ADNAUTO",1)
S ^RORDATA(799.6,"ADNAUTO",X(1),$E(X(2),1,30),DA)=""
"IX",799.6,799.6,"ADNAUTO",1.4)
S X=(X(3)=1)&(X(4)>0)&($D(^RORDATA(799.6,DA,3,"ANC"))>1)
"IX",799.6,799.6,"ADNAUTO",2)
K ^RORDATA(799.6,"ADNAUTO",X(1),$E(X(2),1,30),DA)
"IX",799.6,799.6,"ADNAUTO",2.5)
K ^RORDATA(799.6,"ADNAUTO")
"IX",799.6,799.6,"ADNAUTO",11.1,0)
^.114IA^4^4
"IX",799.6,799.6,"ADNAUTO",11.1,1,0)
1^F^799.6^.07^^1^F
"IX",799.6,799.6,"ADNAUTO",11.1,2,0)
2^F^799.6^.01^30^2^F
"IX",799.6,799.6,"ADNAUTO",11.1,3,0)
3^F^799.6^.02^^^F
"IX",799.6,799.6,"ADNAUTO",11.1,4,0)
4^F^799.6^.07^^^F
"IX",799.6,799.6,"B",0)
799.6^B^Uniqueness Index for Key 'A' of File #799.6^R^^F^IR^I^799.6^^^^^LS
"IX",799.6,799.6,"B",1)
S ^RORDATA(799.6,"B",X,DA)=""
"IX",799.6,799.6,"B",2)
K ^RORDATA(799.6,"B",X,DA)
"IX",799.6,799.6,"B",2.5)
K ^RORDATA(799.6,"B")
"IX",799.6,799.6,"B",11.1,0)
^.114IA^1^1
"IX",799.6,799.6,"B",11.1,1,0)
1^F^799.6^.01^^1
"IX",799.6,799.61,"B",0)
799.61^B^Uniqueness Index for Key 'A' of Subfile #799.61^R^^F^IR^I^799.61^^^^^LS
"IX",799.6,799.61,"B",1)
S ^RORDATA(799.6,DA(1),1,"B",X,DA)=""
"IX",799.6,799.61,"B",2)
K ^RORDATA(799.6,DA(1),1,"B",X,DA)
"IX",799.6,799.61,"B",2.5)
K ^RORDATA(799.6,DA(1),1,"B")
"IX",799.6,799.61,"B",11.1,0)
^.114IA^1^1
"IX",799.6,799.61,"B",11.1,1,0)
1^F^799.61^.01^^1
"IX",799.6,799.63,"ANC",0)
799.63^ANC^Not completed registries^MU^^R^IR^I^799.63^^^^^S
"IX",799.6,799.63,"ANC",1)
D ANC7996^RORDD01(.DA,X(1),1)
"IX",799.6,799.63,"ANC",1.4)
S X=(X(2)'>0)
"IX",799.6,799.63,"ANC",2)
D ANC7996^RORDD01(.DA,X(1),0)
"IX",799.6,799.63,"ANC",2.5)
K ^RORDATA(799.6,DA(1),3,"ANC")
"IX",799.6,799.63,"ANC",11.1,0)
^.114IA^2^2
"IX",799.6,799.63,"ANC",11.1,1,0)
1^F^799.63^.01^30^1^F
"IX",799.6,799.63,"ANC",11.1,2,0)
2^F^799.63^.02^^^F
"IX",799.6,799.63,"B",0)
799.63^B^Uniqueness Index for Key 'A' of Subfile #799.63^R^^F^IR^I^799.63^^^^^LS
"IX",799.6,799.63,"B",1)
S ^RORDATA(799.6,DA(1),3,"B",X,DA)=""
"IX",799.6,799.63,"B",2)
K ^RORDATA(799.6,DA(1),3,"B",X,DA)
"IX",799.6,799.63,"B",2.5)
K ^RORDATA(799.6,DA(1),3,"B")
"IX",799.6,799.63,"B",11.1,0)
^.114IA^1^1
"IX",799.6,799.63,"B",11.1,1,0)
1^F^799.63^.01^^1
"IX",799.6,799.64,"ANC",0)
799.64^ANC^Not completed tasks^R^^R^IR^I^799.64^^^^^S
"IX",799.6,799.64,"ANC",1)
S ^RORDATA(799.6,DA(1),4,"ANC",X(1),DA)=""
"IX",799.6,799.64,"ANC",1.4)
S X=(X(2)'=3)
"IX",799.6,799.64,"ANC",2)
K ^RORDATA(799.6,DA(1),4,"ANC",X(1),DA)
"IX",799.6,799.64,"ANC",2.5)
K ^RORDATA(799.6,DA(1),4,"ANC")
"IX",799.6,799.64,"ANC",11.1,0)
^.114IA^2^2
"IX",799.6,799.64,"ANC",11.1,1,0)
1^F^799.64^.01^^1^F
"IX",799.6,799.64,"ANC",11.1,1,3)

"IX",799.6,799.64,"ANC",11.1,2,0)
2^F^799.64^.03^^^F
"IX",799.6,799.64,"ANC",11.1,2,3)

"IX",799.6,799.64,"B",0)
799.64^B^Uniqueness Index for Key 'A' of Subfile #799.64^R^^F^IR^I^799.64^^^^^LS
"IX",799.6,799.64,"B",1)
S ^RORDATA(799.6,DA(1),4,"B",X,DA)=""
"IX",799.6,799.64,"B",2)
K ^RORDATA(799.6,DA(1),4,"B",X,DA)
"IX",799.6,799.64,"B",2.5)
K ^RORDATA(799.6,DA(1),4,"B")
"IX",799.6,799.64,"B",11.1,0)
^.114IA^1^1
"IX",799.6,799.64,"B",11.1,1,0)
1^F^799.64^.01^^1
"KEY",799.6,799.6,"A",0)
799.6^A^S^697
"KEY",799.6,799.6,"A",2,0)
^.312IA^1^1
"KEY",799.6,799.6,"A",2,1,0)
.01^799.6^1
"KEY",799.6,799.61,"A",0)
799.61^A^S^698
"KEY",799.6,799.61,"A",2,0)
^.312IA^1^1
"KEY",799.6,799.61,"A",2,1,0)
.01^799.61^1
"KEY",799.6,799.63,"A",0)
799.63^A^S^700
"KEY",799.6,799.63,"A",2,0)
^.312IA^1^1
"KEY",799.6,799.63,"A",2,1,0)
.01^799.63^1
"KEY",799.6,799.64,"A",0)
799.64^A^S^702
"KEY",799.6,799.64,"A",2,0)
^.312IA^1^1
"KEY",799.6,799.64,"A",2,1,0)
.01^799.64^1
"KEYPTR",799.6,799.6,"A")
799.6^B
"KEYPTR",799.6,799.61,"A")
799.61^B
"KEYPTR",799.6,799.63,"A")
799.63^B
"KEYPTR",799.6,799.64,"A")
799.64^B
"KRN",.84,7981001.001,-1)
0^1
"KRN",.84,7981001.001,0)
7981001.001^2^^CLINICAL CASE REGISTRIES^List of Registry Patients (HTML)
"KRN",.84,7981001.001,2,0)
^^105^105^3110110^
"KRN",.84,7981001.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981001.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981001.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981001.001,2,4,0)
>
"KRN",.84,7981001.001,2,5,0)
 
"KRN",.84,7981001.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981001.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981001.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981001.001,2,9,0)
 
"KRN",.84,7981001.001,2,10,0)
<xsl:template match="/">
"KRN",.84,7981001.001,2,11,0)
 <html>
"KRN",.84,7981001.001,2,12,0)
  <head>
"KRN",.84,7981001.001,2,13,0)
   <title>List of Registry Patients</title>
"KRN",.84,7981001.001,2,14,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981001.001,2,15,0)
  </head>
"KRN",.84,7981001.001,2,16,0)
  <body>
"KRN",.84,7981001.001,2,17,0)
   <h1>List of Registry Patients</h1>
"KRN",.84,7981001.001,2,18,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981001.001,2,19,0)
   <xsl:if test="count(/REPORT/PATIENTS/PATIENT/FIRSTDIAG) > 0">
"KRN",.84,7981001.001,2,20,0)
     <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981001.001,2,21,0)
       NOTE: Data for &quot;Diagnosed at this Facility&quot; is only 
"KRN",.84,7981001.001,2,22,0)
available for patients confirmed after local installation of patch 
"KRN",.84,7981001.001,2,23,0)
ROR*1.5*14 (approximately Spring 2011)       
"KRN",.84,7981001.001,2,24,0)
     </div>
"KRN",.84,7981001.001,2,25,0)
     <br />
"KRN",.84,7981001.001,2,26,0)
   </xsl:if>
"KRN",.84,7981001.001,2,27,0)
   <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981001.001,2,28,0)
   <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981001.001,2,29,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981001.001,2,30,0)
   <div>
"KRN",.84,7981001.001,2,31,0)
    <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981001.001,2,32,0)
   </div>
"KRN",.84,7981001.001,2,33,0)
  </body>
"KRN",.84,7981001.001,2,34,0)
 </html>
"KRN",.84,7981001.001,2,35,0)
</xsl:template>
"KRN",.84,7981001.001,2,36,0)
 
"KRN",.84,7981001.001,2,37,0)
<!--[ COLUMN HEADERS ]--> 
"KRN",.84,7981001.001,2,38,0)
 
"KRN",.84,7981001.001,2,39,0)
<xsl:template match="COLUMN[@NAME='SELDT']">
"KRN",.84,7981001.001,2,40,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981001.001,2,41,0)
  <xsl:with-param name="title" select="'Selection Date'"/>
"KRN",.84,7981001.001,2,42,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981001.001,2,43,0)
 </xsl:call-template>
"KRN",.84,7981001.001,2,44,0)
</xsl:template>
"KRN",.84,7981001.001,2,45,0)
 
"KRN",.84,7981001.001,2,46,0)
<xsl:template match="COLUMN[@NAME='CONFDT']">
"KRN",.84,7981001.001,2,47,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981001.001,2,48,0)
  <xsl:with-param name="title" select="'Confirmation Date'"/>
"KRN",.84,7981001.001,2,49,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981001.001,2,50,0)
 </xsl:call-template>
"KRN",.84,7981001.001,2,51,0)
</xsl:template>
"KRN",.84,7981001.001,2,52,0)
 
"KRN",.84,7981001.001,2,53,0)
<xsl:template match="COLUMN[@NAME='SELRULES']">
"KRN",.84,7981001.001,2,54,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981001.001,2,55,0)
  <xsl:with-param name="title" select="'Reasons'"/>
"KRN",.84,7981001.001,2,56,0)
  <xsl:with-param name="sort" select="''"/>                   
"KRN",.84,7981001.001,2,57,0)
 </xsl:call-template>
"KRN",.84,7981001.001,2,58,0)
</xsl:template>
"KRN",.84,7981001.001,2,59,0)
 
"KRN",.84,7981001.001,2,60,0)
<xsl:template match="COLUMN[@NAME='PENDCOMM']">
"KRN",.84,7981001.001,2,61,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981001.001,2,62,0)
  <xsl:with-param name="title" select="'Pending Comments'"/>
"KRN",.84,7981001.001,2,63,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981001.001,2,64,0)
 </xsl:call-template>
"KRN",.84,7981001.001,2,65,0)
</xsl:template>
"KRN",.84,7981001.001,2,66,0)
 
"KRN",.84,7981001.001,2,67,0)
<xsl:template match="COLUMN[@NAME='FIRSTDIAG']">
"KRN",.84,7981001.001,2,68,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981001.001,2,69,0)
  <xsl:with-param name="title" select="'Diagnosed at this Facility'"/>
"KRN",.84,7981001.001,2,70,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981001.001,2,71,0)
 </xsl:call-template>
"KRN",.84,7981001.001,2,72,0)
</xsl:template>
"KRN",.84,7981001.001,2,73,0)
 
"KRN",.84,7981001.001,2,74,0)
<!--[ CELL VALUES ]--> 
"KRN",.84,7981001.001,2,75,0)
 
"KRN",.84,7981001.001,2,76,0)
<xsl:template match="PATIENT/SELDT">
"KRN",.84,7981001.001,2,77,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981001.001,2,78,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981001.001,2,79,0)
 </xsl:call-template>
"KRN",.84,7981001.001,2,80,0)
</xsl:template>
"KRN",.84,7981001.001,2,81,0)
 
"KRN",.84,7981001.001,2,82,0)
<xsl:template match="PATIENT/CONFDT">
"KRN",.84,7981001.001,2,83,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981001.001,2,84,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981001.001,2,85,0)
 </xsl:call-template>
"KRN",.84,7981001.001,2,86,0)
</xsl:template>
"KRN",.84,7981001.001,2,87,0)
 
"KRN",.84,7981001.001,2,88,0)
<xsl:template match="PATIENT/SELRULES">
"KRN",.84,7981001.001,2,89,0)
 <td class="selectionRules">
"KRN",.84,7981001.001,2,90,0)
  <xsl:for-each select="RULE">
"KRN",.84,7981001.001,2,91,0)
   <xsl:value-of select="@DESCR"/>
"KRN",.84,7981001.001,2,92,0)
   <xsl:if test="@DESCR=''"><xsl:text>&#160;</xsl:text></xsl:if>
"KRN",.84,7981001.001,2,93,0)
   <br/>
"KRN",.84,7981001.001,2,94,0)
  </xsl:for-each>
"KRN",.84,7981001.001,2,95,0)
 </td>
"KRN",.84,7981001.001,2,96,0)
</xsl:template>
"KRN",.84,7981001.001,2,97,0)
 
"KRN",.84,7981001.001,2,98,0)
<xsl:template match="PATIENT/PENDCOMM">
"KRN",.84,7981001.001,2,99,0)
  <td class="aLeft">
"KRN",.84,7981001.001,2,100,0)
   <xsl:value-of select="."/>
"KRN",.84,7981001.001,2,101,0)
   <xsl:if test="current()=''"><xsl:text>&#160;</xsl:text></xsl:if>
"KRN",.84,7981001.001,2,102,0)
  </td>
"KRN",.84,7981001.001,2,103,0)
</xsl:template>
"KRN",.84,7981001.001,2,104,0)
 
"KRN",.84,7981001.001,2,105,0)
</xsl:stylesheet>
"KRN",.84,7981019.001,-1)
0^3
"KRN",.84,7981019.001,0)
7981019.001^2^^CLINICAL CASE REGISTRIES^Liver Report by Range (HTML)
"KRN",.84,7981019.001,2,0)
^.844^229^229^3110121^^^
"KRN",.84,7981019.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981019.001,2,2,0)
 <xsl:stylesheet version="1.0"
"KRN",.84,7981019.001,2,3,0)
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981019.001,2,4,0)
 >
"KRN",.84,7981019.001,2,5,0)
 
"KRN",.84,7981019.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981019.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981019.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981019.001,2,9,0)
<xsl:include href="template://report/995/1"/>  <!-- Lab Data -->
"KRN",.84,7981019.001,2,10,0)
 
"KRN",.84,7981019.001,2,11,0)
<xsl:variable name="meldcnt" 
"KRN",.84,7981019.001,2,12,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MELD']
"KRN",.84,7981019.001,2,13,0)
)"/>
"KRN",.84,7981019.001,2,14,0)
<xsl:variable name="nacnt" 
"KRN",.84,7981019.001,2,15,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NA'])"
"KRN",.84,7981019.001,2,16,0)
/>
"KRN",.84,7981019.001,2,17,0)
<xsl:variable name="apricnt" 
"KRN",.84,7981019.001,2,18,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='APRI']
"KRN",.84,7981019.001,2,19,0)
)"/>
"KRN",.84,7981019.001,2,20,0)
<xsl:variable name="fib4cnt" 
"KRN",.84,7981019.001,2,21,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='FIB4']
"KRN",.84,7981019.001,2,22,0)
)"/>
"KRN",.84,7981019.001,2,23,0)
 
"KRN",.84,7981019.001,2,24,0)
 
"KRN",.84,7981019.001,2,25,0)
<xsl:template match="/">
"KRN",.84,7981019.001,2,26,0)
 <html>
"KRN",.84,7981019.001,2,27,0)
  <head>
"KRN",.84,7981019.001,2,28,0)
   <title>Liver Score by Range</title>
"KRN",.84,7981019.001,2,29,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981019.001,2,30,0)
  </head>
"KRN",.84,7981019.001,2,31,0)
  <body>
"KRN",.84,7981019.001,2,32,0)
   <h1>Liver Score by Range</h1>
"KRN",.84,7981019.001,2,33,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981019.001,2,34,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981019.001,2,35,0)
     <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981019.001,2,36,0)
       Lab tests used to calculate scores are identified by LOINC code. 
"KRN",.84,7981019.001,2,37,0)
       Your local lab ADPAC should be contacted regarding errors in LOINC 
"KRN",.84,7981019.001,2,38,0)
codes. The LOINC codes that are used are:<br />
"KRN",.84,7981019.001,2,39,0)
       <br />
"KRN",.84,7981019.001,2,40,0)
       <xsl:call-template name="ShowLOINCCodes"/>
"KRN",.84,7981019.001,2,41,0)
     </div>
"KRN",.84,7981019.001,2,42,0)
     <xsl:if test="$apricnt &gt; 0">
"KRN",.84,7981019.001,2,43,0)
       <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981019.001,2,44,0)
         *For this report, the ULN AST entered by the user and used for 
"KRN",.84,7981019.001,2,45,0)
the APRI calculation is
"KRN",.84,7981019.001,2,46,0)
         <xsl:value-of select="/REPORT/PARAMETERS/ULNAST/@VALUES"/>
"KRN",.84,7981019.001,2,47,0)
       </div>
"KRN",.84,7981019.001,2,48,0)
     </xsl:if>
"KRN",.84,7981019.001,2,49,0)
     <xsl:if test="$meldcnt &gt; 0 or $nacnt &gt; 0">
"KRN",.84,7981019.001,2,50,0)
       <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981019.001,2,51,0)
         *For this report, creatinine values &gt;12 mg/dL are assumed to 
"KRN",.84,7981019.001,2,52,0)
be 
"KRN",.84,7981019.001,2,53,0)
         erroneous and are ignored.  Sodium values &lt;100 or &gt;180 
"KRN",.84,7981019.001,2,54,0)
meq/L are also assumed to be erroneous and are ignored.
"KRN",.84,7981019.001,2,55,0)
       </div>
"KRN",.84,7981019.001,2,56,0)
     </xsl:if>
"KRN",.84,7981019.001,2,57,0)
     <br />
"KRN",.84,7981019.001,2,58,0)
     <!-- The following line changed to fix page break issue in IE 7 -->
"KRN",.84,7981019.001,2,59,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981019.001,2,60,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981019.001,2,61,0)
     <div>
"KRN",.84,7981019.001,2,62,0)
       <xsl:call-template name="MakeScrollable">
"KRN",.84,7981019.001,2,63,0)
         <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981019.001,2,64,0)
       </xsl:call-template>
"KRN",.84,7981019.001,2,65,0)
       <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981019.001,2,66,0)
     </div>
"KRN",.84,7981019.001,2,67,0)
     <xsl:call-template name="ExplainFormula"/>
"KRN",.84,7981019.001,2,68,0)
   </xsl:if>
"KRN",.84,7981019.001,2,69,0)
  </body>
"KRN",.84,7981019.001,2,70,0)
 </html>
"KRN",.84,7981019.001,2,71,0)
</xsl:template>
"KRN",.84,7981019.001,2,72,0)
 
"KRN",.84,7981019.001,2,73,0)
<xsl:template name="ShowLOINCCodes">
"KRN",.84,7981019.001,2,74,0)
 <xsl:param name="summary" select="/REPORT/LOINC_CODES"/>
"KRN",.84,7981019.001,2,75,0)
 <table cellpadding="5" cellspacing="0">
"KRN",.84,7981019.001,2,76,0)
  <thead>
"KRN",.84,7981019.001,2,77,0)
   <tr>
"KRN",.84,7981019.001,2,78,0)
    <th>LOINC Codes</th>
"KRN",.84,7981019.001,2,79,0)
   </tr>
"KRN",.84,7981019.001,2,80,0)
  </thead>
"KRN",.84,7981019.001,2,81,0)
  <tbody>
"KRN",.84,7981019.001,2,82,0)
    <xsl:for-each select="/REPORT/LOINC_CODES/CODE">
"KRN",.84,7981019.001,2,83,0)
    <tr>
"KRN",.84,7981019.001,2,84,0)
      <td class="aLeft"><xsl:value-of select="@CODE"/></td>
"KRN",.84,7981019.001,2,85,0)
    </tr>
"KRN",.84,7981019.001,2,86,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,87,0)
  </tbody>
"KRN",.84,7981019.001,2,88,0)
 </table>
"KRN",.84,7981019.001,2,89,0)
</xsl:template>
"KRN",.84,7981019.001,2,90,0)
 
"KRN",.84,7981019.001,2,91,0)
<xsl:template name="ExplainFormula">
"KRN",.84,7981019.001,2,92,0)
 <br/>
"KRN",.84,7981019.001,2,93,0)
 <div class="reportSummary">
"KRN",.84,7981019.001,2,94,0)
  <div style="float:left">
"KRN",.84,7981019.001,2,95,0)
   <table cellpadding="3" cellspacing="0">
"KRN",.84,7981019.001,2,96,0)
    <caption>Calculation Formulas</caption>
"KRN",.84,7981019.001,2,97,0)
    <thead>
"KRN",.84,7981019.001,2,98,0)
     <tr>
"KRN",.84,7981019.001,2,99,0)
      <th width="30">Description</th>
"KRN",.84,7981019.001,2,100,0)
      <th>Formula</th>
"KRN",.84,7981019.001,2,101,0)
     </tr>
"KRN",.84,7981019.001,2,102,0)
    </thead>
"KRN",.84,7981019.001,2,103,0)
    <tbody>
"KRN",.84,7981019.001,2,104,0)
     <xsl:if test="$apricnt &gt; 0">
"KRN",.84,7981019.001,2,105,0)
      <tr>
"KRN",.84,7981019.001,2,106,0)
       <td align="center">APRI (AST-to-Platelet ratio Index)</td>
"KRN",.84,7981019.001,2,107,0)
       <td class="aLeft"> ((AST/ULN AST)/Platelet) * 100
"KRN",.84,7981019.001,2,108,0)
       </td>
"KRN",.84,7981019.001,2,109,0)
      </tr>
"KRN",.84,7981019.001,2,110,0)
     </xsl:if>
"KRN",.84,7981019.001,2,111,0)
     <xsl:if test="$fib4cnt &gt; 0">
"KRN",.84,7981019.001,2,112,0)
      <tr>
"KRN",.84,7981019.001,2,113,0)
       <td align="center">FIB-4</td>
"KRN",.84,7981019.001,2,114,0)
       <td class="aLeft"> Age(in years) * AST/(Platelets * 
"KRN",.84,7981019.001,2,115,0)
ALT)<sup>1/2</sup>
"KRN",.84,7981019.001,2,116,0)
       </td>
"KRN",.84,7981019.001,2,117,0)
      </tr>
"KRN",.84,7981019.001,2,118,0)
     </xsl:if>
"KRN",.84,7981019.001,2,119,0)
     <xsl:if test="$nacnt &gt; 0 or $meldcnt &gt; 0">
"KRN",.84,7981019.001,2,120,0)
      <tr>
"KRN",.84,7981019.001,2,121,0)
       <td align="center">MELD</td>
"KRN",.84,7981019.001,2,122,0)
       <td class="aLeft"> (0.957*Ln(Serum Cr) + 0.378*Ln(Serum Bilirubin) 
"KRN",.84,7981019.001,2,123,0)
+ 1.120*Ln(INR) + 0.643) * 10<br/><br/>
"KRN",.84,7981019.001,2,124,0)
        <b>NOTES:</b>  Ln is 'natural log'<br/>
"KRN",.84,7981019.001,2,125,0)
      Lower limit of 1 for all variables with creatinine capped at 4
"KRN",.84,7981019.001,2,126,0)
       </td>
"KRN",.84,7981019.001,2,127,0)
      </tr>
"KRN",.84,7981019.001,2,128,0)
     </xsl:if>
"KRN",.84,7981019.001,2,129,0)
     <xsl:if test="$nacnt &gt; 0">
"KRN",.84,7981019.001,2,130,0)
    <tr>
"KRN",.84,7981019.001,2,131,0)
      <td align="center">MELD-Na</td>
"KRN",.84,7981019.001,2,132,0)
      <td class="aLeft">MELD calculation + 1.59 *(135 - Serum 
"KRN",.84,7981019.001,2,133,0)
Na)<br/><br/>
"KRN",.84,7981019.001,2,134,0)
       <b>NOTE:</b>  Mininum value for Serum Na is 120 mmol/L and the 
"KRN",.84,7981019.001,2,135,0)
maximum is 135 mmol/L      
"KRN",.84,7981019.001,2,136,0)
      </td>
"KRN",.84,7981019.001,2,137,0)
     </tr>
"KRN",.84,7981019.001,2,138,0)
     </xsl:if>
"KRN",.84,7981019.001,2,139,0)
    </tbody>
"KRN",.84,7981019.001,2,140,0)
   </table>
"KRN",.84,7981019.001,2,141,0)
  </div>
"KRN",.84,7981019.001,2,142,0)
 </div>
"KRN",.84,7981019.001,2,143,0)
</xsl:template>
"KRN",.84,7981019.001,2,144,0)
 
"KRN",.84,7981019.001,2,145,0)
 
"KRN",.84,7981019.001,2,146,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981019.001,2,147,0)
 
"KRN",.84,7981019.001,2,148,0)
<xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981019.001,2,149,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,150,0)
  <xsl:with-param name="title" select="'Test'"/>
"KRN",.84,7981019.001,2,151,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981019.001,2,152,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,153,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,154,0)
</xsl:template>
"KRN",.84,7981019.001,2,155,0)
 
"KRN",.84,7981019.001,2,156,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981019.001,2,157,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,158,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981019.001,2,159,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981019.001,2,160,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981019.001,2,161,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,162,0)
</xsl:template>
"KRN",.84,7981019.001,2,163,0)
 
"KRN",.84,7981019.001,2,164,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981019.001,2,165,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,166,0)
  <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981019.001,2,167,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981019.001,2,168,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981019.001,2,169,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,170,0)
</xsl:template>
"KRN",.84,7981019.001,2,171,0)
 
"KRN",.84,7981019.001,2,172,0)
<xsl:template match="COLUMN[@NAME='MELD']">
"KRN",.84,7981019.001,2,173,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,174,0)
  <xsl:with-param name="sort" select="'PATIENTS=MELD'"/> 
"KRN",.84,7981019.001,2,175,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,176,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,177,0)
</xsl:template>
"KRN",.84,7981019.001,2,178,0)
 
"KRN",.84,7981019.001,2,179,0)
<xsl:template match="COLUMN[@NAME='NA']">
"KRN",.84,7981019.001,2,180,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,181,0)
  <xsl:with-param name="title" select="'MELD-Na'"/>
"KRN",.84,7981019.001,2,182,0)
  <xsl:with-param name="sort" select="'PATIENTS=MELDNA'"/>
"KRN",.84,7981019.001,2,183,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981019.001,2,184,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,185,0)
</xsl:template>
"KRN",.84,7981019.001,2,186,0)
 
"KRN",.84,7981019.001,2,187,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981019.001,2,188,0)
 
"KRN",.84,7981019.001,2,189,0)
<xsl:template match="PATIENT/MELD">
"KRN",.84,7981019.001,2,190,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981019.001,2,191,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.001,2,192,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981019.001,2,193,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,194,0)
</xsl:template>
"KRN",.84,7981019.001,2,195,0)
 
"KRN",.84,7981019.001,2,196,0)
<xsl:template match="PATIENT/MELDNA">
"KRN",.84,7981019.001,2,197,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981019.001,2,198,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.001,2,199,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981019.001,2,200,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,201,0)
</xsl:template>
"KRN",.84,7981019.001,2,202,0)
 
"KRN",.84,7981019.001,2,203,0)
<xsl:template match="PATIENT/MELDDATA">
"KRN",.84,7981019.001,2,204,0)
 <td class="aLeft">
"KRN",.84,7981019.001,2,205,0)
   <xsl:for-each select="TEST/TNAME">
"KRN",.84,7981019.001,2,206,0)
    <xsl:value-of select="."/><br/>
"KRN",.84,7981019.001,2,207,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,208,0)
 </td>
"KRN",.84,7981019.001,2,209,0)
 <td>
"KRN",.84,7981019.001,2,210,0)
   <xsl:for-each select="TEST/DATE">
"KRN",.84,7981019.001,2,211,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981019.001,2,212,0)
       <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.001,2,213,0)
       <xsl:with-param name="value" select="."/>
"KRN",.84,7981019.001,2,214,0)
       <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,215,0)
     </xsl:call-template><br/>
"KRN",.84,7981019.001,2,216,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,217,0)
 </td>
"KRN",.84,7981019.001,2,218,0)
 <td class="aRight">
"KRN",.84,7981019.001,2,219,0)
   <xsl:for-each select="TEST/RESULT">
"KRN",.84,7981019.001,2,220,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981019.001,2,221,0)
       <xsl:with-param name="value" select="."/>
"KRN",.84,7981019.001,2,222,0)
       <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,223,0)
     </xsl:call-template><br/>
"KRN",.84,7981019.001,2,224,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,225,0)
 </td>
"KRN",.84,7981019.001,2,226,0)
 
"KRN",.84,7981019.001,2,227,0)
</xsl:template> 
"KRN",.84,7981019.001,2,228,0)
 
"KRN",.84,7981019.001,2,229,0)
</xsl:stylesheet>
"KRN",.84,7981019.002,-1)
0^5
"KRN",.84,7981019.002,0)
7981019.002^2^^CLINICAL CASE REGISTRIES^Liver Report by Range (CSV)
"KRN",.84,7981019.002,2,0)
^.844^85^85^3110131^^
"KRN",.84,7981019.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981019.002,2,2,0)
 <xsl:stylesheet version="1.0"
"KRN",.84,7981019.002,2,3,0)
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981019.002,2,4,0)
 
"KRN",.84,7981019.002,2,5,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981019.002,2,6,0)
 
"KRN",.84,7981019.002,2,7,0)
<xsl:template match="/">
"KRN",.84,7981019.002,2,8,0)
 <xsl:text>Liver Score by Range</xsl:text>
"KRN",.84,7981019.002,2,9,0)
 <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981019.002,2,10,0)
</xsl:template>
"KRN",.84,7981019.002,2,11,0)
 
"KRN",.84,7981019.002,2,12,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981019.002,2,13,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,14,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981019.002,2,15,0)
 </xsl:call-template>
"KRN",.84,7981019.002,2,16,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,17,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981019.002,2,18,0)
 </xsl:call-template>
"KRN",.84,7981019.002,2,19,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,20,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981019.002,2,21,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.002,2,22,0)
 </xsl:call-template>
"KRN",.84,7981019.002,2,23,0)
 <xsl:for-each select="MELDDATA/TEST">
"KRN",.84,7981019.002,2,24,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,25,0)
    <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981019.002,2,26,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.002,2,27,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,28,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,29,0)
    <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981019.002,2,30,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,31,0)
 </xsl:for-each>
"KRN",.84,7981019.002,2,32,0)
 <xsl:if 
"KRN",.84,7981019.002,2,33,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MELD']) 
"KRN",.84,7981019.002,2,34,0)
> 0">
"KRN",.84,7981019.002,2,35,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,36,0)
    <xsl:with-param name="value" select="MELD"/>
"KRN",.84,7981019.002,2,37,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,38,0)
 </xsl:if>
"KRN",.84,7981019.002,2,39,0)
 <xsl:if 
"KRN",.84,7981019.002,2,40,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NA']
"KRN",.84,7981019.002,2,41,0)
) > 0">
"KRN",.84,7981019.002,2,42,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,43,0)
    <xsl:with-param name="value" select="MELDNA"/>
"KRN",.84,7981019.002,2,44,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,45,0)
 </xsl:if>
"KRN",.84,7981019.002,2,46,0)
 <xsl:if 
"KRN",.84,7981019.002,2,47,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='APRI']) 
"KRN",.84,7981019.002,2,48,0)
> 0">
"KRN",.84,7981019.002,2,49,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,50,0)
    <xsl:with-param name="value" select="APRI"/>
"KRN",.84,7981019.002,2,51,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,52,0)
 </xsl:if>
"KRN",.84,7981019.002,2,53,0)
 <xsl:if 
"KRN",.84,7981019.002,2,54,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='FIB4']) 
"KRN",.84,7981019.002,2,55,0)
> 0">
"KRN",.84,7981019.002,2,56,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,57,0)
    <xsl:with-param name="value" select="FIB4"/>
"KRN",.84,7981019.002,2,58,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,59,0)
 </xsl:if>
"KRN",.84,7981019.002,2,60,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981019.002,2,61,0)
</xsl:template>
"KRN",.84,7981019.002,2,62,0)
 
"KRN",.84,7981019.002,2,63,0)
<xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981019.002,2,64,0)
 <xsl:for-each select="/REPORT/PATIENTS/PATIENT[1]/MELDDATA/TEST/TNAME">
"KRN",.84,7981019.002,2,65,0)
  <xsl:variable name="tname" select="."/>
"KRN",.84,7981019.002,2,66,0)
  <xsl:value-of select="concat($tname, ' Date', $DELIMITER)"/>
"KRN",.84,7981019.002,2,67,0)
  <xsl:value-of select="concat($tname, ' Result', $DELIMITER)"/>
"KRN",.84,7981019.002,2,68,0)
 </xsl:for-each>
"KRN",.84,7981019.002,2,69,0)
</xsl:template>
"KRN",.84,7981019.002,2,70,0)
 
"KRN",.84,7981019.002,2,71,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981019.002,2,72,0)
 <xsl:text></xsl:text>
"KRN",.84,7981019.002,2,73,0)
</xsl:template>
"KRN",.84,7981019.002,2,74,0)
 
"KRN",.84,7981019.002,2,75,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981019.002,2,76,0)
 <xsl:text></xsl:text>
"KRN",.84,7981019.002,2,77,0)
</xsl:template>
"KRN",.84,7981019.002,2,78,0)
 
"KRN",.84,7981019.002,2,79,0)
<xsl:template match="COLUMN[@NAME='NA']">
"KRN",.84,7981019.002,2,80,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.002,2,81,0)
  <xsl:with-param name="title" select="'MELD-Na'"/>
"KRN",.84,7981019.002,2,82,0)
 </xsl:call-template>
"KRN",.84,7981019.002,2,83,0)
</xsl:template>
"KRN",.84,7981019.002,2,84,0)
 
"KRN",.84,7981019.002,2,85,0)
</xsl:stylesheet>
"KRN",.84,7981020.001,-1)
0^4
"KRN",.84,7981020.001,0)
7981020.001^2^^CLINICAL CASE REGISTRIES^Renal Function by Range (HTML)
"KRN",.84,7981020.001,2,0)
^^235^235^3110111^
"KRN",.84,7981020.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981020.001,2,2,0)
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
"KRN",.84,7981020.001,2,3,0)
version="1.0">
"KRN",.84,7981020.001,2,4,0)
 
"KRN",.84,7981020.001,2,5,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981020.001,2,6,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981020.001,2,7,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981020.001,2,8,0)
 
"KRN",.84,7981020.001,2,9,0)
<xsl:template match="/">
"KRN",.84,7981020.001,2,10,0)
 <html>
"KRN",.84,7981020.001,2,11,0)
  <head>
"KRN",.84,7981020.001,2,12,0)
   <title>Renal Function by Range</title>
"KRN",.84,7981020.001,2,13,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981020.001,2,14,0)
  </head>
"KRN",.84,7981020.001,2,15,0)
  <body>
"KRN",.84,7981020.001,2,16,0)
   <h1>Renal Function by Range</h1>
"KRN",.84,7981020.001,2,17,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981020.001,2,18,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981020.001,2,19,0)
    <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981020.001,2,20,0)
       Lab tests used to calculate Cockcroft-Gault and/or eGFR by MDRD 
"KRN",.84,7981020.001,2,21,0)
scores are identified by LOINC code. 
"KRN",.84,7981020.001,2,22,0)
       Your local lab ADPAC should be contacted regarding errors in LOINC
"KRN",.84,7981020.001,2,23,0)
codes.  The LOINC codes that are used are:<br/>
"KRN",.84,7981020.001,2,24,0)
       <br/>
"KRN",.84,7981020.001,2,25,0)
       <xsl:call-template name="ShowLOINCCodes"/>
"KRN",.84,7981020.001,2,26,0)
    </div>
"KRN",.84,7981020.001,2,27,0)
    <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981020.001,2,28,0)
       *For this report, creatinine values &gt;12 mg/dL are assumed to be 
"KRN",.84,7981020.001,2,29,0)
erroneous and are ignored.  Height values on the CrCL report that are
"KRN",.84,7981020.001,2,30,0)
&lt;36 inches or &gt;96 inches are also assumed to be erroneous and are
"KRN",.84,7981020.001,2,31,0)
ignored.
"KRN",.84,7981020.001,2,32,0)
    </div>
"KRN",.84,7981020.001,2,33,0)
   </xsl:if>
"KRN",.84,7981020.001,2,34,0)
     <xsl:if 
"KRN",.84,7981020.001,2,35,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='EGFR']) 
"KRN",.84,7981020.001,2,36,0)
> 0">
"KRN",.84,7981020.001,2,37,0)
       <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981020.001,2,38,0)
         Please note eGFR results &gt;60 are imprecise.
"KRN",.84,7981020.001,2,39,0)
      </div>
"KRN",.84,7981020.001,2,40,0)
     <xsl:call-template name="RenalReportSummary"/>
"KRN",.84,7981020.001,2,41,0)
    </xsl:if>
"KRN",.84,7981020.001,2,42,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981020.001,2,43,0)
     <br />
"KRN",.84,7981020.001,2,44,0)
     <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981020.001,2,45,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981020.001,2,46,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981020.001,2,47,0)
     <div>
"KRN",.84,7981020.001,2,48,0)
       <xsl:call-template name="MakeScrollable">
"KRN",.84,7981020.001,2,49,0)
         <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981020.001,2,50,0)
       </xsl:call-template>
"KRN",.84,7981020.001,2,51,0)
       <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981020.001,2,52,0)
     </div>
"KRN",.84,7981020.001,2,53,0)
     <xsl:call-template name="ExplainFormula"/>
"KRN",.84,7981020.001,2,54,0)
   </xsl:if>
"KRN",.84,7981020.001,2,55,0)
  </body>
"KRN",.84,7981020.001,2,56,0)
 </html>
"KRN",.84,7981020.001,2,57,0)
</xsl:template>
"KRN",.84,7981020.001,2,58,0)
 
"KRN",.84,7981020.001,2,59,0)
<xsl:template name="ShowLOINCCodes">
"KRN",.84,7981020.001,2,60,0)
 <xsl:param name="summary" select="/REPORT/LOINC_CODES"/>
"KRN",.84,7981020.001,2,61,0)
 <table cellpadding="5" cellspacing="0">
"KRN",.84,7981020.001,2,62,0)
  <thead>
"KRN",.84,7981020.001,2,63,0)
   <tr>
"KRN",.84,7981020.001,2,64,0)
    <th>LOINC Codes</th>
"KRN",.84,7981020.001,2,65,0)
   </tr>
"KRN",.84,7981020.001,2,66,0)
  </thead>
"KRN",.84,7981020.001,2,67,0)
  <tbody>
"KRN",.84,7981020.001,2,68,0)
    <xsl:for-each select="/REPORT/LOINC_CODES/CODE">
"KRN",.84,7981020.001,2,69,0)
    <tr>
"KRN",.84,7981020.001,2,70,0)
      <td class="aLeft"><xsl:value-of select="@CODE"/></td>
"KRN",.84,7981020.001,2,71,0)
    </tr>
"KRN",.84,7981020.001,2,72,0)
   </xsl:for-each>
"KRN",.84,7981020.001,2,73,0)
  </tbody>
"KRN",.84,7981020.001,2,74,0)
 </table>
"KRN",.84,7981020.001,2,75,0)
</xsl:template>
"KRN",.84,7981020.001,2,76,0)
 
"KRN",.84,7981020.001,2,77,0)
<xsl:template name="RenalReportSummary">
"KRN",.84,7981020.001,2,78,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981020.001,2,79,0)
 <table cellpadding="5" cellspacing="0">
"KRN",.84,7981020.001,2,80,0)
  <thead>
"KRN",.84,7981020.001,2,81,0)
   <tr>
"KRN",.84,7981020.001,2,82,0)
    <th>Chronic Kidney Disease Stages</th>
"KRN",.84,7981020.001,2,83,0)
    <th>GFR</th>
"KRN",.84,7981020.001,2,84,0)
    <th>Number of Patients</th>
"KRN",.84,7981020.001,2,85,0)
   </tr>
"KRN",.84,7981020.001,2,86,0)
  </thead>
"KRN",.84,7981020.001,2,87,0)
  <tbody>
"KRN",.84,7981020.001,2,88,0)
    <xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981020.001,2,89,0)
    <tr>
"KRN",.84,7981020.001,2,90,0)
      <td class="aLeft"><xsl:value-of select="./DESC"/></td>
"KRN",.84,7981020.001,2,91,0)
      <td><xsl:value-of select="./VALUES"/><sup>2</sup></td>
"KRN",.84,7981020.001,2,92,0)
      <td><xsl:value-of select="./NP"/></td>
"KRN",.84,7981020.001,2,93,0)
    </tr>
"KRN",.84,7981020.001,2,94,0)
   </xsl:for-each>
"KRN",.84,7981020.001,2,95,0)
  </tbody>
"KRN",.84,7981020.001,2,96,0)
 </table>
"KRN",.84,7981020.001,2,97,0)
</xsl:template>
"KRN",.84,7981020.001,2,98,0)
 
"KRN",.84,7981020.001,2,99,0)
<xsl:template name="ExplainFormula">
"KRN",.84,7981020.001,2,100,0)
 <br/>
"KRN",.84,7981020.001,2,101,0)
 <div class="reportSummary">
"KRN",.84,7981020.001,2,102,0)
  <div style="float:left; width:50%">
"KRN",.84,7981020.001,2,103,0)
   <table cellpadding="3" cellspacing="0">
"KRN",.84,7981020.001,2,104,0)
    <caption>Calculation Formulas</caption>
"KRN",.84,7981020.001,2,105,0)
    <thead>
"KRN",.84,7981020.001,2,106,0)
     <tr>
"KRN",.84,7981020.001,2,107,0)
      <th width="60">Description</th>
"KRN",.84,7981020.001,2,108,0)
      <th>Formula</th>
"KRN",.84,7981020.001,2,109,0)
     </tr>
"KRN",.84,7981020.001,2,110,0)
    </thead>
"KRN",.84,7981020.001,2,111,0)
    <tbody>
"KRN",.84,7981020.001,2,112,0)
     <xsl:if 
"KRN",.84,7981020.001,2,113,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CRCL']) 
"KRN",.84,7981020.001,2,114,0)
> 0">
"KRN",.84,7981020.001,2,115,0)
     <tr>
"KRN",.84,7981020.001,2,116,0)
      <td align="center">Cockcroft-Gault</td>
"KRN",.84,7981020.001,2,117,0)
      <td class="aLeft"> (140-age) * ideal weight in kg (*.85 if 
"KRN",.84,7981020.001,2,118,0)
female)/(Cr*72)<br/><br/>
"KRN",.84,7981020.001,2,119,0)
       Ideal weight in kg calculated as:<br />
"KRN",.84,7981020.001,2,120,0)
       male = 51.65+(1.85*(height-60))<br/>
"KRN",.84,7981020.001,2,121,0)
       female = 48.67+(1.65*(height-60))
"KRN",.84,7981020.001,2,122,0)
      </td>
"KRN",.84,7981020.001,2,123,0)
     </tr>
"KRN",.84,7981020.001,2,124,0)
     </xsl:if>
"KRN",.84,7981020.001,2,125,0)
     <xsl:if 
"KRN",.84,7981020.001,2,126,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='EGFR']) 
"KRN",.84,7981020.001,2,127,0)
> 0">
"KRN",.84,7981020.001,2,128,0)
      <tr>
"KRN",.84,7981020.001,2,129,0)
       <td align="center">eGFR by MDRD</td>
"KRN",.84,7981020.001,2,130,0)
       <td class="aLeft"> (175 * (Cr<sup>-1.154</sup>) * 
"KRN",.84,7981020.001,2,131,0)
(age<sup>-.203</sup>) *1.212 (if Black) * .742 (if female)</td>
"KRN",.84,7981020.001,2,132,0)
      </tr>
"KRN",.84,7981020.001,2,133,0)
     </xsl:if>
"KRN",.84,7981020.001,2,134,0)
    </tbody>
"KRN",.84,7981020.001,2,135,0)
   </table>
"KRN",.84,7981020.001,2,136,0)
  </div>
"KRN",.84,7981020.001,2,137,0)
 </div>
"KRN",.84,7981020.001,2,138,0)
</xsl:template>
"KRN",.84,7981020.001,2,139,0)
 
"KRN",.84,7981020.001,2,140,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981020.001,2,141,0)
 
"KRN",.84,7981020.001,2,142,0)
<xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981020.001,2,143,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,144,0)
  <xsl:with-param name="title" select="'Test'"/>
"KRN",.84,7981020.001,2,145,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,146,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981020.001,2,147,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,148,0)
</xsl:template>
"KRN",.84,7981020.001,2,149,0)
 
"KRN",.84,7981020.001,2,150,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981020.001,2,151,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,152,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981020.001,2,153,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,154,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981020.001,2,155,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,156,0)
</xsl:template>
"KRN",.84,7981020.001,2,157,0)
 
"KRN",.84,7981020.001,2,158,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981020.001,2,159,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,160,0)
  <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981020.001,2,161,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,162,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981020.001,2,163,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,164,0)
</xsl:template>
"KRN",.84,7981020.001,2,165,0)
 
"KRN",.84,7981020.001,2,166,0)
<xsl:template match="COLUMN[@NAME='CRCL']">
"KRN",.84,7981020.001,2,167,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,168,0)
  <xsl:with-param name="title" select="'CrCL'"/>
"KRN",.84,7981020.001,2,169,0)
  <xsl:with-param name="sort" select="'PATIENTS=CRCL'"/>
"KRN",.84,7981020.001,2,170,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981020.001,2,171,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,172,0)
</xsl:template>
"KRN",.84,7981020.001,2,173,0)
 
"KRN",.84,7981020.001,2,174,0)
<xsl:template match="COLUMN[@NAME='EGFR']">
"KRN",.84,7981020.001,2,175,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,176,0)
  <xsl:with-param name="title" select="'eGFR'"/>
"KRN",.84,7981020.001,2,177,0)
  <xsl:with-param name="sort" select="'PATIENTS=EGFR'"/>
"KRN",.84,7981020.001,2,178,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981020.001,2,179,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,180,0)
</xsl:template>
"KRN",.84,7981020.001,2,181,0)
 
"KRN",.84,7981020.001,2,182,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981020.001,2,183,0)
 
"KRN",.84,7981020.001,2,184,0)
<xsl:template match="PATIENT/CRCL">
"KRN",.84,7981020.001,2,185,0)
  <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981020.001,2,186,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.001,2,187,0)
    <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981020.001,2,188,0)
  </xsl:call-template>
"KRN",.84,7981020.001,2,189,0)
</xsl:template>
"KRN",.84,7981020.001,2,190,0)
 
"KRN",.84,7981020.001,2,191,0)
<xsl:template match="PATIENT/EGFR">
"KRN",.84,7981020.001,2,192,0)
  <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981020.001,2,193,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.001,2,194,0)
    <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981020.001,2,195,0)
  </xsl:call-template>
"KRN",.84,7981020.001,2,196,0)
</xsl:template>
"KRN",.84,7981020.001,2,197,0)
 
"KRN",.84,7981020.001,2,198,0)
<xsl:template match="PATIENT/RNLDATA">
"KRN",.84,7981020.001,2,199,0)
 <xsl:variable name="CRCL" 
"KRN",.84,7981020.001,2,200,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CRCL']
"KRN",.84,7981020.001,2,201,0)
)"/>
"KRN",.84,7981020.001,2,202,0)
 <td class="aLeft">
"KRN",.84,7981020.001,2,203,0)
   <xsl:text>Cr</xsl:text>
"KRN",.84,7981020.001,2,204,0)
   <xsl:if test="$CRCL>0">
"KRN",.84,7981020.001,2,205,0)
    <br/><xsl:text>Height</xsl:text>
"KRN",.84,7981020.001,2,206,0)
   </xsl:if>
"KRN",.84,7981020.001,2,207,0)
 </td>
"KRN",.84,7981020.001,2,208,0)
 <td>
"KRN",.84,7981020.001,2,209,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,210,0)
     <xsl:with-param name="value" select="TEST/DATE"/>
"KRN",.84,7981020.001,2,211,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.001,2,212,0)
   </xsl:call-template>
"KRN",.84,7981020.001,2,213,0)
   <xsl:if test="$CRCL>0">
"KRN",.84,7981020.001,2,214,0)
     <br/>
"KRN",.84,7981020.001,2,215,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,216,0)
       <xsl:with-param name="value" select="HEIGHT/DATE"/>
"KRN",.84,7981020.001,2,217,0)
       <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.001,2,218,0)
     </xsl:call-template>
"KRN",.84,7981020.001,2,219,0)
   </xsl:if>
"KRN",.84,7981020.001,2,220,0)
 </td>
"KRN",.84,7981020.001,2,221,0)
 <td class="aRight">
"KRN",.84,7981020.001,2,222,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,223,0)
     <xsl:with-param name="value" select="TEST/RESULT"/>
"KRN",.84,7981020.001,2,224,0)
   </xsl:call-template>
"KRN",.84,7981020.001,2,225,0)
   <xsl:if test="$CRCL>0">
"KRN",.84,7981020.001,2,226,0)
     <br/>
"KRN",.84,7981020.001,2,227,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,228,0)
       <xsl:with-param name="value" select="HEIGHT/RESULT"/>
"KRN",.84,7981020.001,2,229,0)
     </xsl:call-template>
"KRN",.84,7981020.001,2,230,0)
   </xsl:if>
"KRN",.84,7981020.001,2,231,0)
 </td>
"KRN",.84,7981020.001,2,232,0)
 
"KRN",.84,7981020.001,2,233,0)
</xsl:template>
"KRN",.84,7981020.001,2,234,0)
 
"KRN",.84,7981020.001,2,235,0)
</xsl:stylesheet>
"KRN",.84,7981020.001,3,0)
^.845
"KRN",.84,7981997.002,-1)
0^2
"KRN",.84,7981997.002,0)
7981997.002^2^^CLINICAL CASE REGISTRIES^Patient data templates (CSV)
"KRN",.84,7981997.002,2,0)
^^160^160^3101129^
"KRN",.84,7981997.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981997.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981997.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981997.002,2,4,0)
 
"KRN",.84,7981997.002,2,5,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981997.002,2,6,0)
 
"KRN",.84,7981997.002,2,7,0)
<xsl:template name="BasicPatientData">
"KRN",.84,7981997.002,2,8,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.002,2,9,0)
  <xsl:with-param name="value" select="../NAME"/>
"KRN",.84,7981997.002,2,10,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,11,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.002,2,12,0)
  <xsl:with-param name="value" select="../LAST4"/>
"KRN",.84,7981997.002,2,13,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,14,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.002,2,15,0)
  <xsl:with-param name="value" select="../DOD"/>
"KRN",.84,7981997.002,2,16,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.002,2,17,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,18,0)
</xsl:template>
"KRN",.84,7981997.002,2,19,0)
 
"KRN",.84,7981997.002,2,20,0)
<!--[ PATIENT TABLE HEADINGS ]-->
"KRN",.84,7981997.002,2,21,0)
 
"KRN",.84,7981997.002,2,22,0)
<xsl:template match="COLUMN[@NAME='ADMDT']">
"KRN",.84,7981997.002,2,23,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.002,2,24,0)
  <xsl:with-param name="title" select="'Admission Date'"/>
"KRN",.84,7981997.002,2,25,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,26,0)
</xsl:template>
"KRN",.84,7981997.002,2,27,0)
 
"KRN",.84,7981997.002,2,28,0)
<xsl:template match="COLUMN[@NAME='AGE']">
"KRN",.84,7981997.002,2,29,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.002,2,30,0)
  <xsl:with-param name="title" select="'Age'"/>                 
"KRN",.84,7981997.002,2,31,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,32,0)
</xsl:template>
"KRN",.84,7981997.002,2,33,0)
 
"KRN",.84,7981997.002,2,34,0)
<xsl:template match="COLUMN[@NAME='CONFDT']">
"KRN",.84,7981997.002,2,35,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.002,2,36,0)
  <xsl:with-param name="title" select="'Confirmation Date'"/>
"KRN",.84,7981997.002,2,37,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,38,0)
</xsl:template>
"KRN",.84,7981997.002,2,39,0)
 
"KRN",.84,7981997.002,2,40,0)
<xsl:template match="COLUMN[@NAME='CSSN']">
"KRN",.84,7981997.002,2,41,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.002,2,42,0)
  <xsl:with-param name="title" select="'Coded SSN'"/>                      
"KRN",.84,7981997.002,2,43,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,44,0)
</xsl:template>
"KRN",.84,7981997.002,2,45,0)
 
"KRN",.84,7981997.002,2,46,0)
<xsl:template match="COLUMN[@NAME='DOB']">
"KRN",.84,7981997.002,2,47,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.002,2,48,0)
  <xsl:with-param name="title" select="'Date of Birth'"/>                  
"KRN",.84,7981997.002,2,49,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,50,0)
</xsl:template>
"KRN",.84,7981997.002,2,51,0)
 
"KRN",.84,7981997.002,2,52,0)
<xsl:template match="COLUMN[@NAME='ENTDT']">
"KRN",.84,7981997.002,2,53,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.002,2,54,0)
  <xsl:with-param name="title" select="'Date Entered'"/>
"KRN",.84,7981997.002,2,55,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,56,0)
</xsl:template>
"KRN",.84,7981997.002,2,57,0)
 
"KRN",.84,7981997.002,2,58,0)
<xsl:template match="COLUMN[@NAME='ETHN']">
"KRN",.84,7981997.002,2,59,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.002,2,60,0)
  <xsl:with-param name="title" select="'Ethnicity'"/>
"KRN",.84,7981997.002,2,61,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,62,0)
</xsl:template>
"KRN",.84,7981997.002,2,63,0)
 
"KRN",.84,7981997.002,2,64,0)
<xsl:template match="COLUMN[@NAME='PRIMELIG']">
"KRN",.84,7981997.002,2,65,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.002,2,66,0)
  <xsl:with-param name="title" select="'Primary Eligibility'"/>
"KRN",.84,7981997.002,2,67,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,68,0)
</xsl:template>
"KRN",.84,7981997.002,2,69,0)
 
"KRN",.84,7981997.002,2,70,0)
<xsl:template match="COLUMN[@NAME='RACE']">
"KRN",.84,7981997.002,2,71,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.002,2,72,0)
  <xsl:with-param name="title" select="'Race'"/>
"KRN",.84,7981997.002,2,73,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,74,0)
</xsl:template>
"KRN",.84,7981997.002,2,75,0)
 
"KRN",.84,7981997.002,2,76,0)
<xsl:template match="COLUMN[@NAME='SELDT']">
"KRN",.84,7981997.002,2,77,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.002,2,78,0)
  <xsl:with-param name="title" select="'Selection Date'"/>
"KRN",.84,7981997.002,2,79,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,80,0)
</xsl:template>
"KRN",.84,7981997.002,2,81,0)
 
"KRN",.84,7981997.002,2,82,0)
<xsl:template match="COLUMN[@NAME='SELRULES']">
"KRN",.84,7981997.002,2,83,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.002,2,84,0)
  <xsl:with-param name="title" select="'Reasons'"/>
"KRN",.84,7981997.002,2,85,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,86,0)
</xsl:template>
"KRN",.84,7981997.002,2,87,0)
 
"KRN",.84,7981997.002,2,88,0)
<xsl:template match="COLUMN[@NAME='FIRSTDIAG']">
"KRN",.84,7981997.002,2,89,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.002,2,90,0)
  <xsl:with-param name="title" select="'Diagnosed at this Facility'"/>
"KRN",.84,7981997.002,2,91,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,92,0)
</xsl:template>
"KRN",.84,7981997.002,2,93,0)
 
"KRN",.84,7981997.002,2,94,0)
<xsl:template match="COLUMN[@NAME='SEX']">
"KRN",.84,7981997.002,2,95,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981997.002,2,96,0)
  <xsl:with-param name="title" select="'Sex'"/>                 
"KRN",.84,7981997.002,2,97,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,98,0)
</xsl:template>
"KRN",.84,7981997.002,2,99,0)
 
"KRN",.84,7981997.002,2,100,0)
<!--[ PATIENT TABLE CELLS ]-->
"KRN",.84,7981997.002,2,101,0)
 
"KRN",.84,7981997.002,2,102,0)
<xsl:template match="PATIENT/ADMDT">
"KRN",.84,7981997.002,2,103,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.002,2,104,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.002,2,105,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,106,0)
</xsl:template>
"KRN",.84,7981997.002,2,107,0)
 
"KRN",.84,7981997.002,2,108,0)
<xsl:template match="PATIENT/CONFDT">
"KRN",.84,7981997.002,2,109,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.002,2,110,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.002,2,111,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,112,0)
</xsl:template>
"KRN",.84,7981997.002,2,113,0)
 
"KRN",.84,7981997.002,2,114,0)
<xsl:template match="PATIENT/DOB">
"KRN",.84,7981997.002,2,115,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.002,2,116,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.002,2,117,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,118,0)
</xsl:template>
"KRN",.84,7981997.002,2,119,0)
 
"KRN",.84,7981997.002,2,120,0)
<xsl:template match="PATIENT/ENTDT">
"KRN",.84,7981997.002,2,121,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.002,2,122,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.002,2,123,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,124,0)
</xsl:template>
"KRN",.84,7981997.002,2,125,0)
 
"KRN",.84,7981997.002,2,126,0)
<xsl:template match="PATIENT/RACES">
"KRN",.84,7981997.002,2,127,0)
 <xsl:text>&quot;</xsl:text>
"KRN",.84,7981997.002,2,128,0)
 <xsl:for-each select="RACE">
"KRN",.84,7981997.002,2,129,0)
  <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981997.002,2,130,0)
  <xsl:call-template name="DoubleQuotes"/>
"KRN",.84,7981997.002,2,131,0)
 </xsl:for-each>
"KRN",.84,7981997.002,2,132,0)
 <xsl:text>&quot;</xsl:text>
"KRN",.84,7981997.002,2,133,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981997.002,2,134,0)
</xsl:template>
"KRN",.84,7981997.002,2,135,0)
 
"KRN",.84,7981997.002,2,136,0)
<xsl:template match="PATIENT/SEEN">
"KRN",.84,7981997.002,2,137,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.002,2,138,0)
  <xsl:with-param name="yesno" select="1"/>
"KRN",.84,7981997.002,2,139,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,140,0)
</xsl:template>
"KRN",.84,7981997.002,2,141,0)
 
"KRN",.84,7981997.002,2,142,0)
<xsl:template match="PATIENT/SELDT">
"KRN",.84,7981997.002,2,143,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981997.002,2,144,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981997.002,2,145,0)
 </xsl:call-template>
"KRN",.84,7981997.002,2,146,0)
</xsl:template>
"KRN",.84,7981997.002,2,147,0)
 
"KRN",.84,7981997.002,2,148,0)
<xsl:template match="PATIENT/SELRULES">
"KRN",.84,7981997.002,2,149,0)
 <xsl:text>&quot;</xsl:text>
"KRN",.84,7981997.002,2,150,0)
 <xsl:for-each select="RULE">
"KRN",.84,7981997.002,2,151,0)
  <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981997.002,2,152,0)
  <xsl:call-template name="DoubleQuotes">
"KRN",.84,7981997.002,2,153,0)
   <xsl:with-param name="value" select="@DESCR"/>
"KRN",.84,7981997.002,2,154,0)
  </xsl:call-template>
"KRN",.84,7981997.002,2,155,0)
 </xsl:for-each>
"KRN",.84,7981997.002,2,156,0)
 <xsl:text>&quot;</xsl:text>
"KRN",.84,7981997.002,2,157,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981997.002,2,158,0)
</xsl:template>
"KRN",.84,7981997.002,2,159,0)
 
"KRN",.84,7981997.002,2,160,0)
</xsl:stylesheet>
"MBREQ")
0
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"PKG",618,-1)
1^1
"PKG",618,0)
CLINICAL CASE REGISTRIES^ROR^CLINICAL REGISTRIES
"PKG",618,20,0)
^9.402P^^
"PKG",618,22,0)
^9.49I^1^1
"PKG",618,22,1,0)
1.5^3060208^3060419^568
"PKG",618,22,1,"PAH",1,0)
14^3110401^520665226
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
18
"RTN","RORDD01")
0^3^B25430775^B22524971
"RTN","RORDD01",1,0)
RORDD01 ;HCIOFO/SG - DATA DICTIONARY UTILITIES ;6/14/06 2:07pm
"RTN","RORDD01",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,14**;Feb 17, 2006;Build 24
"RTN","RORDD01",3,0)
 ;
"RTN","RORDD01",4,0)
 ; This routine uses the following IAs:
"RTN","RORDD01",5,0)
 ;
"RTN","RORDD01",6,0)
 ; #2762         ^DPT(D0,-9 (controlled)
"RTN","RORDD01",7,0)
 ;
"RTN","RORDD01",8,0)
 Q
"RTN","RORDD01",9,0)
 ;******************************************************************************
"RTN","RORDD01",10,0)
 ;******************************************************************************
"RTN","RORDD01",11,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORDD01",12,0)
 ;        
"RTN","RORDD01",13,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORDD01",14,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORDD01",15,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   AIDSOI: Since clinical aids can be 9 
"RTN","RORDD01",16,0)
 ;                                      'unknown', we can't just quit if field
"RTN","RORDD01",17,0)
 ;                                      value is not zero.  Only quit if 'yes'.
"RTN","RORDD01",18,0)
 ;******************************************************************************
"RTN","RORDD01",19,0)
 ;******************************************************************************
"RTN","RORDD01",20,0)
 ;
"RTN","RORDD01",21,0)
 ;***** "AIDSOI" TRIGGER OF THE "AIDS INDICATOR DISEASE" MULTIPLE
"RTN","RORDD01",22,0)
 ;
"RTN","RORDD01",23,0)
 ; .SDA          Reference to a local array of record IENs
"RTN","RORDD01",24,0)
 ;
"RTN","RORDD01",25,0)
 ; DATE          Date of an AIDS indicator disease
"RTN","RORDD01",26,0)
 ;
"RTN","RORDD01",27,0)
AIDSOI(SDA,DATE) ;
"RTN","RORDD01",28,0)
 N IENS,TMP,RORFDA,RORMSG
"RTN","RORDD01",29,0)
 ;--- Do not do anything if the CLINICAL AIDS field is already set
"RTN","RORDD01",30,0)
 S IENS=+$G(SDA(1))  Q:IENS'>0  S IENS=IENS_","
"RTN","RORDD01",31,0)
 ;Q:$$GET1^DIQ(799.4,IENS,.02,"I",,"RORMSG")
"RTN","RORDD01",32,0)
 I $$GET1^DIQ(799.4,IENS,.02,"I",,"RORMSG")=1 Q
"RTN","RORDD01",33,0)
 ;---
"RTN","RORDD01",34,0)
 S DATE=$P(DATE,".")
"RTN","RORDD01",35,0)
 I DATE>0  D
"RTN","RORDD01",36,0)
 . S:'$E(DATE,4,5) $E(DATE,4,5)="01"
"RTN","RORDD01",37,0)
 . S:'$E(DATE,6,7) $E(DATE,6,7)="01"
"RTN","RORDD01",38,0)
 E  S DATE=$$DT^XLFDT
"RTN","RORDD01",39,0)
 ;---
"RTN","RORDD01",40,0)
 S RORFDA(799.4,IENS,.02)=1
"RTN","RORDD01",41,0)
 S RORFDA(799.4,IENS,.03)=DATE
"RTN","RORDD01",42,0)
 D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORDD01",43,0)
 Q
"RTN","RORDD01",44,0)
 ;
"RTN","RORDD01",45,0)
 ;***** "ANC" INDEX OF THE "REGISTRY NAME" MULTIPLE OF THE FILE #799.6
"RTN","RORDD01",46,0)
 ;
"RTN","RORDD01",47,0)
 ; .SDA          Reference to a local array of record IENs
"RTN","RORDD01",48,0)
 ;
"RTN","RORDD01",49,0)
 ; REGNAME       Registry name
"RTN","RORDD01",50,0)
 ;
"RTN","RORDD01",51,0)
 ; MODE          1 - Set, 0 - Kill
"RTN","RORDD01",52,0)
 ;
"RTN","RORDD01",53,0)
ANC7996(SDA,REGNAME,MODE) ;
"RTN","RORDD01",54,0)
 I MODE  S MODE=($D(^RORDATA(799.6,SDA(1),3,"ANC"))>1)  D
"RTN","RORDD01",55,0)
 . S ^RORDATA(799.6,SDA(1),3,"ANC",$E(REGNAME,1,30),SDA)=""
"RTN","RORDD01",56,0)
 E  D  S MODE=($D(^RORDATA(799.6,SDA(1),3,"ANC"))>1)
"RTN","RORDD01",57,0)
 . K ^RORDATA(799.6,SDA(1),3,"ANC",$E(REGNAME,1,30),SDA)
"RTN","RORDD01",58,0)
 Q:MODE
"RTN","RORDD01",59,0)
 ;--- Re-index the main record (the "ADNAUTO" index, in particular)
"RTN","RORDD01",60,0)
 N DA,DIK
"RTN","RORDD01",61,0)
 S DIK="^RORDATA(799.6,",DIK(1)=".01",DA=SDA(1)
"RTN","RORDD01",62,0)
 D EN^DIK
"RTN","RORDD01",63,0)
 Q
"RTN","RORDD01",64,0)
 ;
"RTN","RORDD01",65,0)
 ;***** DELETES THE DATA ASSOCIATED WITH THE MAIN REGISTRY RECORD
"RTN","RORDD01",66,0)
 ;
"RTN","RORDD01",67,0)
 ; IEN           IEN of the registry record (file #798)
"RTN","RORDD01",68,0)
 ; PTIEN         Patient IEN
"RTN","RORDD01",69,0)
 ;
"RTN","RORDD01",70,0)
DEL798(IEN,PTIEN) ;
"RTN","RORDD01",71,0)
 N DA,DIK,I,PTDEL
"RTN","RORDD01",72,0)
 ;--- Delete the HIV record from the ROR HIV RECORD file (#799.4)
"RTN","RORDD01",73,0)
 I $D(^RORDATA(799.4,IEN))  S DIK="^RORDATA(799.4,",DA=IEN  D ^DIK
"RTN","RORDD01",74,0)
 ;--- Check if the patient is added to more than one registry
"RTN","RORDD01",75,0)
 S I="",PTDEL=1
"RTN","RORDD01",76,0)
 F  S I=$O(^RORDATA(798,"B",PTIEN,I))  Q:I=""  S:I'=IEN PTDEL=0
"RTN","RORDD01",77,0)
 ;--- Delete corresponding patient's records if they are not
"RTN","RORDD01",78,0)
 ;    referenced by other registries and the patient's record
"RTN","RORDD01",79,0)
 ;--- in the PATIENT file (#2) is not a "merged" one.
"RTN","RORDD01",80,0)
 I PTDEL  D:$G(^DPT(PTIEN,-9))'>0
"RTN","RORDD01",81,0)
 . ;--- Delete the record from the ROR PATIENT file
"RTN","RORDD01",82,0)
 . S DIK="^RORDATA(798.4,",DA=PTIEN  D ^DIK
"RTN","RORDD01",83,0)
 . ;--- Delete the record from the ROR PATIENT EVENTS file
"RTN","RORDD01",84,0)
 . S DIK="^RORDATA(798.3,",DA=PTIEN  D ^DIK
"RTN","RORDD01",85,0)
 Q
"RTN","RORDD01",86,0)
 ;
"RTN","RORDD01",87,0)
 ;***** RETURNS THE VALUE OF 'DATE SELECTED' COMPUTED FIELD
"RTN","RORDD01",88,0)
 ;
"RTN","RORDD01",89,0)
 ; IEN           IEN of the registry record (file #798)
"RTN","RORDD01",90,0)
 ;
"RTN","RORDD01",91,0)
DTSEL(IEN) ;
"RTN","RORDD01",92,0)
 N DTSEL
"RTN","RORDD01",93,0)
 ;--- Earliest date of a selection rule
"RTN","RORDD01",94,0)
 S DTSEL=$O(^RORDATA(798,IEN,1,"AD",""))\1
"RTN","RORDD01",95,0)
 ;--- If SELECTION RULE multiple is empty, return DATE ENTERED
"RTN","RORDD01",96,0)
 Q $S(DTSEL>0:DTSEL,1:$P($G(^RORDATA(798,IEN,0)),U,3)\1)
"RTN","RORDD01",97,0)
 ;
"RTN","RORDD01",98,0)
 ;***** STORE THE VALUE INTO THE FIELD
"RTN","RORDD01",99,0)
 ;
"RTN","RORDD01",100,0)
 ; FILE          Sub(file) number
"RTN","RORDD01",101,0)
 ; IENS          IENS of the record
"RTN","RORDD01",102,0)
 ; FIELD         Field number
"RTN","RORDD01",103,0)
 ; VALUE         Internal value to be assigned
"RTN","RORDD01",104,0)
 ;
"RTN","RORDD01",105,0)
FILE(FILE,IENS,FIELD,VALUE) ;
"RTN","RORDD01",106,0)
 N ROR8FDA,ROR8MSG,TMP
"RTN","RORDD01",107,0)
 S TMP=$S($E(IENS,$L(IENS))=",":IENS,1:IENS_",")
"RTN","RORDD01",108,0)
 S ROR8FDA(+FILE,TMP,+FIELD)=VALUE
"RTN","RORDD01",109,0)
 D FILE^DIE(,"ROR8FDA","ROR8MSG")
"RTN","RORDD01",110,0)
 Q
"RTN","RORDD01",111,0)
 ;
"RTN","RORDD01",112,0)
 ;***** STATUS OF THE HISTORICAL DATA DEFINITION
"RTN","RORDD01",113,0)
 ;
"RTN","RORDD01",114,0)
 ; HDEIEN        IEN of the HDE definition (file #799.6)
"RTN","RORDD01",115,0)
 ;
"RTN","RORDD01",116,0)
 ; Return Values:
"RTN","RORDD01",117,0)
 ;       ""  Unknown/Undefined
"RTN","RORDD01",118,0)
 ;        0  Inactive
"RTN","RORDD01",119,0)
 ;        1  Pending/Active
"RTN","RORDD01",120,0)
 ;        2  Completed
"RTN","RORDD01",121,0)
 ;
"RTN","RORDD01",122,0)
HDESTAT(HDEIEN) ;
"RTN","RORDD01",123,0)
 N BUF,STATUS,TYPE
"RTN","RORDD01",124,0)
 S HDEIEN=+HDEIEN,BUF=$G(^RORDATA(799.6,HDEIEN,0))
"RTN","RORDD01",125,0)
 S TYPE=+$P(BUF,U,2),STATUS=""
"RTN","RORDD01",126,0)
 ;=== Auto
"RTN","RORDD01",127,0)
 I TYPE=1  D  Q STATUS
"RTN","RORDD01",128,0)
 . N ADT
"RTN","RORDD01",129,0)
 . ;--- Activation Date
"RTN","RORDD01",130,0)
 . S ADT=+$P(BUF,U,7)
"RTN","RORDD01",131,0)
 . I (ADT'>0)!(ADT<DT)  S STATUS=0  Q
"RTN","RORDD01",132,0)
 . ;--- Check if all registries have completion dates
"RTN","RORDD01",133,0)
 . I $D(^RORDATA(799.6,HDEIEN,3,"ANC"))<10  S STATUS=2  Q
"RTN","RORDD01",134,0)
 . ;--- Pending or Active
"RTN","RORDD01",135,0)
 . S STATUS=1
"RTN","RORDD01",136,0)
 ;=== Manual
"RTN","RORDD01",137,0)
 I TYPE=2  D  Q STATUS
"RTN","RORDD01",138,0)
 . N TSKIEN,TSKSTAT
"RTN","RORDD01",139,0)
 . ;--- Check if any tasks are defined
"RTN","RORDD01",140,0)
 . I $O(^RORDATA(799.6,HDEIEN,4,0))'>0  S STATUS=0  Q
"RTN","RORDD01",141,0)
 . ;--- Check if all tasks have been completed
"RTN","RORDD01",142,0)
 . I $D(^RORDATA(799.6,HDEIEN,4,"ANC"))<10  S STATUS=2  Q
"RTN","RORDD01",143,0)
 . ;--- Pending, Active, or Errors
"RTN","RORDD01",144,0)
 . S STATUS=1
"RTN","RORDD01",145,0)
 ;=== Unknown or Undefined
"RTN","RORDD01",146,0)
 Q ""
"RTN","RORDD01",147,0)
 ;
"RTN","RORDD01",148,0)
 ;***** CHECKS IF THE LOCAL REGISTRY FIELD IS ACTIVE
"RTN","RORDD01",149,0)
 ;
"RTN","RORDD01",150,0)
 ; IEN           IEN of the local field definition (file #799.53)
"RTN","RORDD01",151,0)
 ;
"RTN","RORDD01",152,0)
 ; Return Values:
"RTN","RORDD01",153,0)
 ;        0  Inactivated
"RTN","RORDD01",154,0)
 ;        1  Active
"RTN","RORDD01",155,0)
 ;
"RTN","RORDD01",156,0)
LFACTIVE(IEN) ;
"RTN","RORDD01",157,0)
 N TMP
"RTN","RORDD01",158,0)
 S TMP=$G(^ROR(799.53,+IEN,0))  Q:TMP="" 0
"RTN","RORDD01",159,0)
 S TMP=$P(TMP,U,2)\1            Q:TMP'>0 1
"RTN","RORDD01",160,0)
 Q (TMP>DT)
"RTN","RORDD01",161,0)
 ;
"RTN","RORDD01",162,0)
 ;***** RETURNS THE VALUE OF 'LOCATION' COMPUTED FIELD
"RTN","RORDD01",163,0)
 ;
"RTN","RORDD01",164,0)
 ; IEN           IEN of the registry record (file #798)
"RTN","RORDD01",165,0)
 ;
"RTN","RORDD01",166,0)
LOCSEL(IEN) ;
"RTN","RORDD01",167,0)
 N DTSEL,SRIEN
"RTN","RORDD01",168,0)
 S DTSEL=$O(^RORDATA(798,IEN,1,"AD",""))  Q:DTSEL'>0 ""
"RTN","RORDD01",169,0)
 S SRIEN=$O(^RORDATA(798,IEN,1,"AD",DTSEL,""))
"RTN","RORDD01",170,0)
 Q $S(SRIEN>0:$P($G(^RORDATA(798,IEN,1,SRIEN,0)),U,3),1:"")
"RTN","RORDD01",171,0)
 ;
"RTN","RORDD01",172,0)
 ;***** RE-INDEXES ONE RECORD OF THE (SUB)FILE
"RTN","RORDD01",173,0)
 ;
"RTN","RORDD01",174,0)
 ; FILE          File number
"RTN","RORDD01",175,0)
 ;
"RTN","RORDD01",176,0)
 ; .DA           Reference to a local array of record IENs
"RTN","RORDD01",177,0)
 ;
"RTN","RORDD01",178,0)
 ; [FIELD]       Optional field number. If it is provided, then only
"RTN","RORDD01",179,0)
 ;               cross-references for this field are re-indexed.
"RTN","RORDD01",180,0)
 ;
"RTN","RORDD01",181,0)
REINDEX1(FILE,DA,FIELD) ;
"RTN","RORDD01",182,0)
 N DIK
"RTN","RORDD01",183,0)
 S DIK=$$ROOT^DILFD(FILE,$$IENS^DILF(.DA))
"RTN","RORDD01",184,0)
 S:$G(FIELD)>0 DIK(1)=+FIELD
"RTN","RORDD01",185,0)
 D EN^DIK
"RTN","RORDD01",186,0)
 Q
"RTN","RORDD01",187,0)
 ;
"RTN","RORDD01",188,0)
 ;***** REACTS ON THE REGISTRY RECORD STATUS CHANGES
"RTN","RORDD01",189,0)
 ;
"RTN","RORDD01",190,0)
 ; MODE          Execution mode (1 - Set, 2 - Kill)
"RTN","RORDD01",191,0)
 ;
"RTN","RORDD01",192,0)
 ; IEN           Internal entry number of the registry record
"RTN","RORDD01",193,0)
 ;
"RTN","RORDD01",194,0)
 ; STOLD         Old and new internal values of the STATUS field
"RTN","RORDD01",195,0)
 ; STNEW
"RTN","RORDD01",196,0)
 ;
"RTN","RORDD01",197,0)
RST798(MODE,IEN,STOLD,STNEW) ;
"RTN","RORDD01",198,0)
 Q:STNEW=STOLD
"RTN","RORDD01",199,0)
 N IENS,RORFDA,RORMSG
"RTN","RORDD01",200,0)
 S IENS=(+IEN)_","
"RTN","RORDD01",201,0)
 ;---
"RTN","RORDD01",202,0)
 D
"RTN","RORDD01",203,0)
 . ;--- Deleted
"RTN","RORDD01",204,0)
 . I STNEW=5  D  Q
"RTN","RORDD01",205,0)
 . . S RORFDA(798,IENS,6)=$$NOW^XLFDT
"RTN","RORDD01",206,0)
 . . S:$G(DUZ)>0 RORFDA(798,IENS,6.1)=+DUZ
"RTN","RORDD01",207,0)
 . ;--- Confirmed
"RTN","RORDD01",208,0)
 . I STOLD=4,'STNEW  D  Q
"RTN","RORDD01",209,0)
 . . S RORFDA(798,IENS,2)=$$NOW^XLFDT
"RTN","RORDD01",210,0)
 . . S:$G(DUZ)>0 RORFDA(798,IENS,2.1)=+DUZ
"RTN","RORDD01",211,0)
 ;---
"RTN","RORDD01",212,0)
 D:$D(RORFDA)>1 FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORDD01",213,0)
 Q
"RTN","RORDD01",214,0)
 ;
"RTN","RORDD01",215,0)
 ;***** GENERATES THE INDEX VALUE OF THE REPORT ELEMENT
"RTN","RORDD01",216,0)
 ;
"RTN","RORDD01",217,0)
 ; MODE          Sort mode (see the SORT BY field of the REPORT
"RTN","RORDD01",218,0)
 ;               ELEMENT multiple of the ROR TASK file for details)
"RTN","RORDD01",219,0)
 ; VAL           Value of the report element
"RTN","RORDD01",220,0)
 ;
"RTN","RORDD01",221,0)
SORTBY(MODE,VAL) ;
"RTN","RORDD01",222,0)
 Q $S(MODE=3:+VAL,VAL="":" ",MODE=2:$E(VAL,1,29)_" ",1:$E(VAL,1,30))
"RTN","ROREXT02")
0^16^B65862605^B43965789
"RTN","ROREXT02",1,0)
ROREXT02 ;HCIOFO/SG - DEFAULT MESSAGE BUILDER ;12/7/05 10:44am
"RTN","ROREXT02",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,13,14**;Feb 17, 2006;Build 24
"RTN","ROREXT02",3,0)
 ;
"RTN","ROREXT02",4,0)
 ; This routine uses the following IAs:
"RTN","ROREXT02",5,0)
 ;
"RTN","ROREXT02",6,0)
 ; #2056    $$GET1^DIQ (supported)
"RTN","ROREXT02",7,0)
 Q
"RTN","ROREXT02",8,0)
 ;
"RTN","ROREXT02",9,0)
 ;***** CHECKS IF DEMOGRAPHIC DATA HAS BEEN UPDATED
"RTN","ROREXT02",10,0)
 ;
"RTN","ROREXT02",11,0)
 ; .RGIENLST     Reference to a local array containing registry
"RTN","ROREXT02",12,0)
 ;               IENs as subscripts and IENs of the corresponding
"RTN","ROREXT02",13,0)
 ;               patient's registry records as values.
"RTN","ROREXT02",14,0)
 ;
"RTN","ROREXT02",15,0)
 ; Return Values:
"RTN","ROREXT02",16,0)
 ;       <0  Error Code
"RTN","ROREXT02",17,0)
 ;        0  Demographic data is unchanged
"RTN","ROREXT02",18,0)
 ;       >0  Demographic data has been updated
"RTN","ROREXT02",19,0)
 ;
"RTN","ROREXT02",20,0)
DEMCHK(RGIENLST) ;
"RTN","ROREXT02",21,0)
 N DEM,IENS,RC,REGIEN,RORMSG
"RTN","ROREXT02",22,0)
 S (DEM,RC,REGIEN)=0
"RTN","ROREXT02",23,0)
 F  S REGIEN=$O(RGIENLST(REGIEN))  Q:REGIEN'>0  D  Q:DEM!(RC<0)
"RTN","ROREXT02",24,0)
 . S IENS=+RGIENLST(REGIEN)_","  Q:IENS'>0
"RTN","ROREXT02",25,0)
 . S DEM=+$$GET1^DIQ(798,IENS,4,"I",,"RORMSG")
"RTN","ROREXT02",26,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","ROREXT02",27,0)
 Q $S(RC<0:RC,1:DEM)
"RTN","ROREXT02",28,0)
 ;
"RTN","ROREXT02",29,0)
 ;***** EXTRACTS AND PREPARES LABORATORY DATA
"RTN","ROREXT02",30,0)
 ;
"RTN","ROREXT02",31,0)
 ; PTIEN         Patient IEN
"RTN","ROREXT02",32,0)
 ;
"RTN","ROREXT02",33,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","ROREXT02",34,0)
 ;               data extraction time frames are stored.
"RTN","ROREXT02",35,0)
 ;
"RTN","ROREXT02",36,0)
 ; [HDTMODE]     If this parameter is defined and non-zero, start and
"RTN","ROREXT02",37,0)
 ;               end dates are specimen collection dates (historical
"RTN","ROREXT02",38,0)
 ;               extraction). Otherwise, they are dates of the results
"RTN","ROREXT02",39,0)
 ;               (nightly extraction).
"RTN","ROREXT02",40,0)
 ;
"RTN","ROREXT02",41,0)
 ; The function uses node ^TMP("RORTMP",$J) as a temporary storage.
"RTN","ROREXT02",42,0)
 ;
"RTN","ROREXT02",43,0)
 ; Return Values:
"RTN","ROREXT02",44,0)
 ;       <0  Error Code
"RTN","ROREXT02",45,0)
 ;        0  Ok
"RTN","ROREXT02",46,0)
 ;
"RTN","ROREXT02",47,0)
LABDATA(PTIEN,DXDTS,HDTMODE) ;
"RTN","ROREXT02",48,0)
 N ENDT,IDX,RC,RORTMP,STDT,TMP
"RTN","ROREXT02",49,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","ROREXT02",50,0)
 S (IDX,RC)=0
"RTN","ROREXT02",51,0)
 F  S IDX=$O(DXDTS(1,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","ROREXT02",52,0)
 . S STDT=$P(DXDTS(1,IDX),U),ENDT=$P(DXDTS(1,IDX),U,2)
"RTN","ROREXT02",53,0)
 . ;--- Get the Lab results
"RTN","ROREXT02",54,0)
 . K @RORTMP  S TMP=$S($G(HDTMODE):"^CD",1:"^RAD")
"RTN","ROREXT02",55,0)
 . S RC=$$LABRSLTS^RORUTL02(PTIEN,STDT_TMP,ENDT_TMP,RORTMP)
"RTN","ROREXT02",56,0)
 . Q:RC<0
"RTN","ROREXT02",57,0)
 . ;--- Call the Lab data post-processor
"RTN","ROREXT02",58,0)
 . S RC=$$LABPROC(RORTMP,PTIEN)
"RTN","ROREXT02",59,0)
 . ;---
"RTN","ROREXT02",60,0)
 D FREE^RORTMP(RORTMP)
"RTN","ROREXT02",61,0)
 Q $S(RC<0:RC,1:0)
"RTN","ROREXT02",62,0)
 ;
"RTN","ROREXT02",63,0)
 ;***** LABORATORY DATA POST-PROCESSOR
"RTN","ROREXT02",64,0)
 ;
"RTN","ROREXT02",65,0)
 ; ROR8TMP       Closed root of the array (local or global), which
"RTN","ROREXT02",66,0)
 ;               contains the data loaded by the $$GCPR^LA7QRY
"RTN","ROREXT02",67,0)
 ;
"RTN","ROREXT02",68,0)
 ; PTIEN         Patient IEN
"RTN","ROREXT02",69,0)
 ;
"RTN","ROREXT02",70,0)
 ; Return Values:
"RTN","ROREXT02",71,0)
 ;       <0  Error Code
"RTN","ROREXT02",72,0)
 ;        0  Ok
"RTN","ROREXT02",73,0)
 ;
"RTN","ROREXT02",74,0)
LABPROC(ROR8TMP,PTIEN) ;
"RTN","ROREXT02",75,0)
 N BUF,CS,DFLTSITE,FS,I,J,LABC,SEG,TMP
"RTN","ROREXT02",76,0)
 ;--- Extract separators from the MSH segment
"RTN","ROREXT02",77,0)
 S BUF=$G(@ROR8TMP@(1))
"RTN","ROREXT02",78,0)
 S:$E(BUF,1,3)="MSH" CS=$E(BUF,5)
"RTN","ROREXT02",79,0)
 S:$G(CS)="" CS="^"
"RTN","ROREXT02",80,0)
 ;--- Initialize constants and variables
"RTN","ROREXT02",81,0)
 S LABC="LABC"_CS_"Lab Comment"_CS_"VA080"
"RTN","ROREXT02",82,0)
 ;--- Get the default station number and name
"RTN","ROREXT02",83,0)
 S DFLTSITE=$$SITE^RORUTL03(CS)
"RTN","ROREXT02",84,0)
 ;
"RTN","ROREXT02",85,0)
 ;--- Add the results to the message
"RTN","ROREXT02",86,0)
 S I=0
"RTN","ROREXT02",87,0)
 F  S I=$O(@ROR8TMP@(I))  Q:I=""  D
"RTN","ROREXT02",88,0)
 . ;--- Load the full segment
"RTN","ROREXT02",89,0)
 . D LOADSEG^RORHL7A(.SEG,$NA(@ROR8TMP@(I)))  Q:$G(SEG(0))=""
"RTN","ROREXT02",90,0)
 . D
"RTN","ROREXT02",91,0)
 . . ;--- Use the default station if the local one is missing
"RTN","ROREXT02",92,0)
 . . I SEG(0)="OBX"  D  Q
"RTN","ROREXT02",93,0)
 . . . S:$P($G(SEG(15)),CS)="" SEG(15)=DFLTSITE
"RTN","ROREXT02",94,0)
 . . ;--- Leave only the code of the Provider
"RTN","ROREXT02",95,0)
 . . I SEG(0)="OBR"  D  Q
"RTN","ROREXT02",96,0)
 . . . S SEG(16)=+$G(SEG(16)),SEG(24)="LAB"
"RTN","ROREXT02",97,0)
 . . ;--- Replace NTE's with OBX's
"RTN","ROREXT02",98,0)
 . . I SEG(0)="NTE"  D  Q
"RTN","ROREXT02",99,0)
 . . . K TMP  M TMP=SEG(3)  K SEG
"RTN","ROREXT02",100,0)
 . . . S SEG(0)="OBX"
"RTN","ROREXT02",101,0)
 . . . S SEG(2)="ST",SEG(3)=LABC,SEG(4)="LCOMM"
"RTN","ROREXT02",102,0)
 . . . M SEG(5)=TMP
"RTN","ROREXT02",103,0)
 . . . S SEG(11)="F"
"RTN","ROREXT02",104,0)
 . . ;--- Skip all other segments
"RTN","ROREXT02",105,0)
 . . K SEG
"RTN","ROREXT02",106,0)
 . ;--- Store the segment
"RTN","ROREXT02",107,0)
 . D:$D(SEG)>1 ADDSEG^RORHL7(.SEG)
"RTN","ROREXT02",108,0)
 . ;check for Lab HCV LOINC during nightly extract
"RTN","ROREXT02",109,0)
 . I $G(SEG(0))="OBX",'$G(HDTMODE) D HCV(.SEG,$G(PTIEN),$G(CS))
"RTN","ROREXT02",110,0)
 Q 0
"RTN","ROREXT02",111,0)
 ;
"RTN","ROREXT02",112,0)
 ;***** EXTRACTS PATIENT'S DATA AND CREATES THE MESSAGE BODY
"RTN","ROREXT02",113,0)
 ;
"RTN","ROREXT02",114,0)
 ; PTIEN         Patient IEN
"RTN","ROREXT02",115,0)
 ;
"RTN","ROREXT02",116,0)
 ; .RGIENLST     Reference to a local array containing registry
"RTN","ROREXT02",117,0)
 ;               IENs as subscripts and IENs of the corresponding
"RTN","ROREXT02",118,0)
 ;               patient's registry records as values.
"RTN","ROREXT02",119,0)
 ;
"RTN","ROREXT02",120,0)
 ; .DXDTS        Either a single time frame in StartDate^EndDate
"RTN","ROREXT02",121,0)
 ;               format or a reference to a local variable containing
"RTN","ROREXT02",122,0)
 ;               the list of data extraction time frames. The main
"RTN","ROREXT02",123,0)
 ;               time frame should be stored in the root node:
"RTN","ROREXT02",124,0)
 ;
"RTN","ROREXT02",125,0)
 ;  DXDTS(         MainStartDate^MainEndDate  (FileMan)
"RTN","ROREXT02",126,0)
 ;    DataArea,
"RTN","ROREXT02",127,0)
 ;      i)         StartDate^EndDate          (FileMan)
"RTN","ROREXT02",128,0)
 ;
"RTN","ROREXT02",129,0)
 ;               See the $$DXPERIOD^ROREXTUT function for details.
"RTN","ROREXT02",130,0)
 ;
"RTN","ROREXT02",131,0)
 ; [HDTMODE]     This parameter is defined and non-zero during the
"RTN","ROREXT02",132,0)
 ;               historical data extraction.
"RTN","ROREXT02",133,0)
 ;
"RTN","ROREXT02",134,0)
 ; Return Values:
"RTN","ROREXT02",135,0)
 ;       <0  Error Code
"RTN","ROREXT02",136,0)
 ;        0  Ok
"RTN","ROREXT02",137,0)
 ;       >0  Nothing to send
"RTN","ROREXT02",138,0)
 ;
"RTN","ROREXT02",139,0)
MESSAGE(PTIEN,RGIENLST,DXDTS,HDTMODE) ;
"RTN","ROREXT02",140,0)
 N RORDEM        ; Update demographics
"RTN","ROREXT02",141,0)
 ;
"RTN","ROREXT02",142,0)
 N CLINPTR,CSRPTR,DEMPTR,PV1PTR,RC,REGIEN,RORMSG,RORPTR,TMP
"RTN","ROREXT02",143,0)
 S HDTMODE=+$G(HDTMODE)
"RTN","ROREXT02",144,0)
 ;--- If only the main time frame is provided then
"RTN","ROREXT02",145,0)
 ;--- generate the data-specific ones automatically
"RTN","ROREXT02",146,0)
 I $D(DXDTS)<10  D  D DXMERGE^ROREXTUT(.DXDTS)
"RTN","ROREXT02",147,0)
 . D DXADD^ROREXTUT(.DXDTS,$P(DXDTS,U),$P(DXDTS,U,2),0,1)
"RTN","ROREXT02",148,0)
 ;--- Initialize variables
"RTN","ROREXT02",149,0)
 S RC=$$INIT^RORHL7()  Q:RC<0 RC
"RTN","ROREXT02",150,0)
 S RORDEM=$$DEMCHK(.RGIENLST)
"RTN","ROREXT02",151,0)
 ;
"RTN","ROREXT02",152,0)
 ;=== Demographic data segments
"RTN","ROREXT02",153,0)
 S DEMPTR=$$PTR^RORHL7
"RTN","ROREXT02",154,0)
 S RC=$$PID^RORHL01(PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",155,0)
 ;--- Period of Service
"RTN","ROREXT02",156,0)
 S RC=$$ZSP^RORHL01(PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",157,0)
 ;--- Rated Disabilities
"RTN","ROREXT02",158,0)
 S RC=$$ZRD^RORHL01(PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",159,0)
 ;
"RTN","ROREXT02",160,0)
 ;=== Inpatient and Outpatient Encounter Data
"RTN","ROREXT02",161,0)
 S PV1PTR=$$PTR^RORHL7
"RTN","ROREXT02",162,0)
 ;--- Inpatient
"RTN","ROREXT02",163,0)
 S RC=$$EN1^RORHL08(PTIEN,.DXDTS,"PV1")  Q:RC<0 RC
"RTN","ROREXT02",164,0)
 ;--- Outpatient
"RTN","ROREXT02",165,0)
 S RC=$$EN1^RORHL09(PTIEN,.DXDTS,"PV1")  Q:RC<0 RC
"RTN","ROREXT02",166,0)
 ;
"RTN","ROREXT02",167,0)
 ;=== Required CSR segment (dummy)
"RTN","ROREXT02",168,0)
 S CSRPTR=$$PTR^RORHL7
"RTN","ROREXT02",169,0)
 S RC=$$CSR^RORHL02(,PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",170,0)
 ;
"RTN","ROREXT02",171,0)
 ;=== Add other encounter data segments
"RTN","ROREXT02",172,0)
 S CLINPTR=$$PTR^RORHL7
"RTN","ROREXT02",173,0)
 ;---Inpatient
"RTN","ROREXT02",174,0)
 S RC=$$EN1^RORHL08(PTIEN,.DXDTS,"OBR")    Q:RC<0 RC
"RTN","ROREXT02",175,0)
 ;--- Outpatient
"RTN","ROREXT02",176,0)
 S RC=$$EN1^RORHL09(PTIEN,.DXDTS,"OBR")    Q:RC<0 RC
"RTN","ROREXT02",177,0)
 ;--- Radiology
"RTN","ROREXT02",178,0)
 S RC=$$EN1^RORHL04(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",179,0)
 ;--- Autopsy
"RTN","ROREXT02",180,0)
 S RC=$$EN1^RORHL05(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",181,0)
 ;--- Surgical Pathology
"RTN","ROREXT02",182,0)
 S RC=$$EN1^RORHL10(PTIEN,.DXDTS,HDTMODE)  Q:RC<0 RC
"RTN","ROREXT02",183,0)
 ;--- Cytopathology
"RTN","ROREXT02",184,0)
 S RC=$$EN1^RORHL11(PTIEN,.DXDTS,HDTMODE)  Q:RC<0 RC
"RTN","ROREXT02",185,0)
 ;--- Microbiology
"RTN","ROREXT02",186,0)
 S RC=$$EN1^RORHL12(PTIEN,.DXDTS,HDTMODE)  Q:RC<0 RC
"RTN","ROREXT02",187,0)
 ;--- EKG (Medical Procedures)
"RTN","ROREXT02",188,0)
 S RC=$$EN1^RORHL13(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",189,0)
 ;--- Allergy
"RTN","ROREXT02",190,0)
 S RC=$$EN1^RORHL14(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",191,0)
 ;--- IV
"RTN","ROREXT02",192,0)
 S RC=$$EN1^RORHL15(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",193,0)
 ;--- Vitals
"RTN","ROREXT02",194,0)
 S RC=$$EN1^RORHL16(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",195,0)
 ;--- Problem List
"RTN","ROREXT02",196,0)
 S RC=$$EN1^RORHL17(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",197,0)
 ;--- Lab data
"RTN","ROREXT02",198,0)
 S RC=$$LABDATA(PTIEN,.DXDTS,HDTMODE)      Q:RC<0 RC
"RTN","ROREXT02",199,0)
 ;--- Pharmacy
"RTN","ROREXT02",200,0)
 S RC=$$EN1^RORHL03(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",201,0)
 ;--- Immunization
"RTN","ROREXT02",202,0)
 S RC=$$EN1^RORHL18(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",203,0)
 ;--- Skin Test Results
"RTN","ROREXT02",204,0)
 S RC=$$EN1^RORHL19(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",205,0)
 ;--- Non-VA Meds
"RTN","ROREXT02",206,0)
 S RC=$$EN1^RORHL20(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",207,0)
 ;--- Purchased Care
"RTN","ROREXT02",208,0)
 S RC=$$EN1^RORHL21(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",209,0)
 ;
"RTN","ROREXT02",210,0)
 ;=== Analyze the structure of the message
"RTN","ROREXT02",211,0)
 S RORPTR=$$PTR^RORHL7
"RTN","ROREXT02",212,0)
 ;--- If the demographic data has not changed since the previous
"RTN","ROREXT02",213,0)
 ;    data extraction and no clinical data has been added to the
"RTN","ROREXT02",214,0)
 ;--- message, then remove the demographic section completely.
"RTN","ROREXT02",215,0)
 I 'RORDEM,RORPTR'>CLINPTR,CSRPTR'>PV1PTR  D
"RTN","ROREXT02",216,0)
 . D ROLLBACK^RORHL7(DEMPTR,1)  S CLINPTR=0
"RTN","ROREXT02",217,0)
 ;
"RTN","ROREXT02",218,0)
 ;=== Registry Data
"RTN","ROREXT02",219,0)
 N IEN
"RTN","ROREXT02",220,0)
 S REGIEN=0
"RTN","ROREXT02",221,0)
 F  S REGIEN=$O(RGIENLST(REGIEN)),RC=0  Q:REGIEN'>0  D  Q:RC<0
"RTN","ROREXT02",222,0)
 . S IEN=+RGIENLST(REGIEN)  Q:IEN'>0
"RTN","ROREXT02",223,0)
 . ;--- If no clinical or demographics data is sent and the local
"RTN","ROREXT02",224,0)
 . ;    registry data has not been modified since the last data
"RTN","ROREXT02",225,0)
 . ;--- extraction, then do not include the registry data section.
"RTN","ROREXT02",226,0)
 . I 'CLINPTR  D  Q:RC
"RTN","ROREXT02",227,0)
 . . S RC='$$GET1^DIQ(798,IEN_",",5,"I",,"RORMSG")
"RTN","ROREXT02",228,0)
 . . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,PTIEN,798,IEN_",")
"RTN","ROREXT02",229,0)
 . ;---
"RTN","ROREXT02",230,0)
 . I $G(ROREXT("MSGBLD",REGIEN))'=""  D
"RTN","ROREXT02",231,0)
 . . X "S RC="_ROREXT("MSGBLD",REGIEN)_"(IEN,PTIEN,.DXDTS)"
"RTN","ROREXT02",232,0)
 . E  S RC=$$REGDATA(IEN,PTIEN,.DXDTS)
"RTN","ROREXT02",233,0)
 ;
"RTN","ROREXT02",234,0)
 ;=== Analyze the structure of the message
"RTN","ROREXT02",235,0)
 S RORPTR=$$PTR^RORHL7
"RTN","ROREXT02",236,0)
 Q (RORPTR'>DEMPTR)
"RTN","ROREXT02",237,0)
 ;
"RTN","ROREXT02",238,0)
 ;***** EXTRACTS REGISTRY-SPECIFIC DATA
"RTN","ROREXT02",239,0)
 ;
"RTN","ROREXT02",240,0)
 ; RORIEN        IEN of the patient record in the registry
"RTN","ROREXT02",241,0)
 ;
"RTN","ROREXT02",242,0)
 ; PTIEN         Patient IEN
"RTN","ROREXT02",243,0)
 ;
"RTN","ROREXT02",244,0)
 ; .DXDTS        Data extraction time frames
"RTN","ROREXT02",245,0)
 ;
"RTN","ROREXT02",246,0)
 ; [HDTMODE]     This parameter is defined and non-zero during the
"RTN","ROREXT02",247,0)
 ;               historical data extraction.
"RTN","ROREXT02",248,0)
 ;
"RTN","ROREXT02",249,0)
 ; Return Values:
"RTN","ROREXT02",250,0)
 ;       <0  Error Code
"RTN","ROREXT02",251,0)
 ;        0  Ok
"RTN","ROREXT02",252,0)
 ;       >0  Nothing to send
"RTN","ROREXT02",253,0)
 ;
"RTN","ROREXT02",254,0)
REGDATA(RORIEN,PTIEN,DXDTS,HDTMODE) ;
"RTN","ROREXT02",255,0)
 N IENS,RC
"RTN","ROREXT02",256,0)
 S IENS=RORIEN_","
"RTN","ROREXT02",257,0)
 S RC=$$PID^RORHL01(PTIEN)       Q:RC<0 RC
"RTN","ROREXT02",258,0)
 S RC=$$CSR^RORHL02(IENS,PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",259,0)
 S RC=$$CSP^RORHL02(IENS,DXDTS)  Q:RC<0 RC
"RTN","ROREXT02",260,0)
 Q 0
"RTN","ROREXT02",261,0)
 ;
"RTN","ROREXT02",262,0)
 ;***** CHANGE STATUS FROM PENDING TO CONFIRMED IF POSITIVE LAB HCV TEST RESULT
"RTN","ROREXT02",263,0)
 ;Pending patients in the HEPC registry will be confirmed during the nightly
"RTN","ROREXT02",264,0)
 ;extract job if they have a positive HCV test result during the extract date range
"RTN","ROREXT02",265,0)
 ;
"RTN","ROREXT02",266,0)
 ;Input
"RTN","ROREXT02",267,0)
 ;  SEG      Array with Lab HL7 segment "OBX"
"RTN","ROREXT02",268,0)
 ;  DFN      Patient DFN
"RTN","ROREXT02",269,0)
 ;  CS       HL7 Component separator
"RTN","ROREXT02",270,0)
 ;
"RTN","ROREXT02",271,0)
HCV(SEG,DFN,CS) ;
"RTN","ROREXT02",272,0)
 Q:'DFN
"RTN","ROREXT02",273,0)
 I $G(CS)="" S CS="^"
"RTN","ROREXT02",274,0)
 N SEG3 S SEG3=$P($G(SEG(3)),CS,1) I $G(SEG3)="" Q  ;Lab LOINC
"RTN","ROREXT02",275,0)
 N SEG5 S SEG5=$G(SEG(5)) I $G(SEG5)="" Q  ;test result value
"RTN","ROREXT02",276,0)
 S SEG5=$TR($G(SEG(5)),"""","") ;get rid of any double quotes around test result
"RTN","ROREXT02",277,0)
 I $E($G(SEG5),1,1)=">" D  ;if positive test result
"RTN","ROREXT02",278,0)
 . N HEPCIEN S HEPCIEN=$O(^ROR(798.1,"B","VA HEPC",0)) Q:'HEPCIEN  ;HEPC registry IEN
"RTN","ROREXT02",279,0)
 . N IEN S IEN=$O(^RORDATA(798,"KEY",DFN,HEPCIEN,0)) Q:(IEN'>0)  ;patient IEN in HEPC registry
"RTN","ROREXT02",280,0)
 . D HCVLOAD^RORUPD01 ;load temp ROR HCV LIST array with HVC LOINCs
"RTN","ROREXT02",281,0)
 . I $D(^TMP("ROR HCV LIST",$J,SEG3))>0 D  ;patient has HCV LOINC
"RTN","ROREXT02",282,0)
 .. ;if status is pending, change to confirmed
"RTN","ROREXT02",283,0)
 .. I $P($G(^RORDATA(798,IEN,0)),U,5)=4 D
"RTN","ROREXT02",284,0)
 ... N RORFDA,IENS,RORMSG
"RTN","ROREXT02",285,0)
 ... S IENS=IEN_","
"RTN","ROREXT02",286,0)
 ... S RORFDA(798,IENS,3)=0 ;status=confirmed
"RTN","ROREXT02",287,0)
 ... S RORFDA(798,IENS,12)="" ;remove pending comment
"RTN","ROREXT02",288,0)
 ... D FILE^DIE(,"RORFDA","RORMSG")
"RTN","ROREXT02",289,0)
 K ^TMP("ROR HCV LIST")
"RTN","ROREXT02",290,0)
 Q
"RTN","RORHIVUT")
0^4^B1604686^B835917
"RTN","RORHIVUT",1,0)
RORHIVUT ;HCIOFO/SG - HIV UTILITIES ;9/14/05 8:15am
"RTN","RORHIVUT",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**14**;Feb 17, 2006;Build 24
"RTN","RORHIVUT",3,0)
 ;
"RTN","RORHIVUT",4,0)
 Q
"RTN","RORHIVUT",5,0)
 ;******************************************************************************
"RTN","RORHIVUT",6,0)
 ;******************************************************************************
"RTN","RORHIVUT",7,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORHIVUT",8,0)
 ;        
"RTN","RORHIVUT",9,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORHIVUT",10,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORHIVUT",11,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   CLINAIDS: also quit if 'unknown'
"RTN","RORHIVUT",12,0)
 ;******************************************************************************
"RTN","RORHIVUT",13,0)
 ;******************************************************************************
"RTN","RORHIVUT",14,0)
 ;
"RTN","RORHIVUT",15,0)
 ;***** RETURNS THE CATEGORY SUBSCRIPT AND HEADER
"RTN","RORHIVUT",16,0)
CAT(I) ;
"RTN","RORHIVUT",17,0)
 ;;ALL^AIDS^HIV
"RTN","RORHIVUT",18,0)
 ;;All Patients^AIDS OI^HIV+ (no AIDS OI)
"RTN","RORHIVUT",19,0)
 ;
"RTN","RORHIVUT",20,0)
 Q $P($P($T(CAT+1),";;",2),U,I)_U_$P($P($T(CAT+2),";;",2),U,I)
"RTN","RORHIVUT",21,0)
 ;
"RTN","RORHIVUT",22,0)
 ;***** RETURNS CLINICAL AIDS STATUS OF THE PATIENT
"RTN","RORHIVUT",23,0)
 ;
"RTN","RORHIVUT",24,0)
 ; IEN           IEN of the registry record
"RTN","RORHIVUT",25,0)
 ;
"RTN","RORHIVUT",26,0)
 ; [DATE]        Date that the status should be determined on.
"RTN","RORHIVUT",27,0)
 ;
"RTN","RORHIVUT",28,0)
 ;               If not defined or not greater than 0 then the
"RTN","RORHIVUT",29,0)
 ;               date of Clinical AIDS is not checked.
"RTN","RORHIVUT",30,0)
 ;
"RTN","RORHIVUT",31,0)
 ; Return Values:
"RTN","RORHIVUT",32,0)
 ;        0  No Clinical AIDS
"RTN","RORHIVUT",33,0)
 ;        1  Clinical AIDS. The second "^"-piece will
"RTN","RORHIVUT",34,0)
 ;           contain the Clinical AIDS date
"RTN","RORHIVUT",35,0)
 ;
"RTN","RORHIVUT",36,0)
CLINAIDS(IEN,DATE) ;
"RTN","RORHIVUT",37,0)
 N X  S X=$P($G(^RORDATA(799.4,+IEN,0)),U,2,3)
"RTN","RORHIVUT",38,0)
 Q:'X 0 ;quit if 'no' or null in first piece (clinical aids indicator)
"RTN","RORHIVUT",39,0)
 I +$G(X)=9 Q 0  ;quit if 'unknown'
"RTN","RORHIVUT",40,0)
 I $G(DATE)>0  Q:$P(X,U,2)\1>DATE 0
"RTN","RORHIVUT",41,0)
 Q "1"_U_$P(X,U,2)
"RTN","RORHIVUT",42,0)
 ;
"RTN","RORHIVUT",43,0)
 ;***** CHECKS IF THE ICR RECORD EXISTS
"RTN","RORHIVUT",44,0)
 ;
"RTN","RORHIVUT",45,0)
 ; IEN           IEN of the registry record
"RTN","RORHIVUT",46,0)
 ;
"RTN","RORHIVUT",47,0)
 ; Return Values:
"RTN","RORHIVUT",48,0)
 ;        0  Record does not exist
"RTN","RORHIVUT",49,0)
 ;        1  The ICR record exists
"RTN","RORHIVUT",50,0)
 ;
"RTN","RORHIVUT",51,0)
ICRDEF(IEN) ;
"RTN","RORHIVUT",52,0)
 Q $G(^RORDATA(799.4,+IEN,0))>0
"RTN","RORHIVUT",53,0)
 ;
"RTN","RORHIVUT",54,0)
 ;***** RETURNS NUMBER OF AVAILABLE CATEGORIES
"RTN","RORHIVUT",55,0)
NCAT() ;
"RTN","RORHIVUT",56,0)
 Q $L($P($T(CAT+1),";;",2),U)
"RTN","RORHL02")
0^5^B35146970^B29938860
"RTN","RORHL02",1,0)
RORHL02 ;HOIFO/CRT,SG - HL7 REGISTRY DATA: CSP,CSR,CSS ;12/6/05 2:36pm
"RTN","RORHL02",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**14**;Feb 17, 2006;Build 24
"RTN","RORHL02",3,0)
 ;
"RTN","RORHL02",4,0)
 Q
"RTN","RORHL02",5,0)
 ;******************************************************************************
"RTN","RORHL02",6,0)
 ;******************************************************************************
"RTN","RORHL02",7,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORHL02",8,0)
 ;        
"RTN","RORHL02",9,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORHL02",10,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORHL02",11,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   CSR: Added HIV DX - FIRST DIAGNOSED
"RTN","RORHL02",12,0)
 ;                                      (#12.08) to CSR-12.  Date of Clnincal
"RTN","RORHL02",13,0)
 ;                                      AIDS logic modified for 'unknown'.
"RTN","RORHL02",14,0)
 ;******************************************************************************
"RTN","RORHL02",15,0)
 ;******************************************************************************
"RTN","RORHL02",16,0)
 ;
"RTN","RORHL02",17,0)
 ;***** CSP SEGMENTS BUILDER
"RTN","RORHL02",18,0)
 ;
"RTN","RORHL02",19,0)
 ; RORIENS       IENS of Patient Record in Registry File
"RTN","RORHL02",20,0)
 ;
"RTN","RORHL02",21,0)
 ; DXDTS         Main time frame for data extraction in
"RTN","RORHL02",22,0)
 ;               StartDate^EndDate format
"RTN","RORHL02",23,0)
 ;
"RTN","RORHL02",24,0)
 ; Return Values:
"RTN","RORHL02",25,0)
 ;       <0  Error Code
"RTN","RORHL02",26,0)
 ;        0  Ok
"RTN","RORHL02",27,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL02",28,0)
 ;
"RTN","RORHL02",29,0)
CSP(RORIENS,DXDTS) ;
"RTN","RORHL02",30,0)
 N CS,ERRCNT,FLDS,RC,RORMSG,ROROUT,STATUS,TMP
"RTN","RORHL02",31,0)
 S (ERRCNT,RC)=0
"RTN","RORHL02",32,0)
 ;--- Check the parameters
"RTN","RORHL02",33,0)
 S:$E(RORIENS,$L(RORIENS))'="," RORIENS=RORIENS_","
"RTN","RORHL02",34,0)
 ;
"RTN","RORHL02",35,0)
 S FLDS="1;2;3;3.2;6"
"RTN","RORHL02",36,0)
 D GETS^DIQ(798,RORIENS,FLDS,"IE","ROROUT","RORMSG")
"RTN","RORHL02",37,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798,RORIENS)
"RTN","RORHL02",38,0)
 I $$ICRDEF^RORHIVUT(+RORIENS)  D  Q:RC<0 RC
"RTN","RORHL02",39,0)
 . D GETS^DIQ(799.4,RORIENS,"9.01","IE","ROROUT","RORMSG")
"RTN","RORHL02",40,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,799.4,RORIENS)
"RTN","RORHL02",41,0)
 ;
"RTN","RORHL02",42,0)
 S STATUS=+$G(ROROUT(798,RORIENS,3,"I"))
"RTN","RORHL02",43,0)
 ;--- UPDATE
"RTN","RORHL02",44,0)
 I $G(DXDTS)>0  D  Q:RC<0 RC
"RTN","RORHL02",45,0)
 . S RC=$$CSPSEG(0,$P(DXDTS,U),$P(DXDTS,U,2))
"RTN","RORHL02",46,0)
 ;--- SELECT
"RTN","RORHL02",47,0)
 S RC=$$CSPSEG(1,$G(ROROUT(798,RORIENS,3.2,"I")))  Q:RC<0 RC
"RTN","RORHL02",48,0)
 ;--- ADD
"RTN","RORHL02",49,0)
 S RC=$$CSPSEG(2,$G(ROROUT(798,RORIENS,1,"I")))  Q:RC<0 RC
"RTN","RORHL02",50,0)
 ;--- CONFIRM
"RTN","RORHL02",51,0)
 I $G(ROROUT(798,RORIENS,2,"I"))>0  D  Q:RC<0 RC
"RTN","RORHL02",52,0)
 . S RC=$$CSPSEG(3,ROROUT(798,RORIENS,2,"I"))
"RTN","RORHL02",53,0)
 ;--- DELETE
"RTN","RORHL02",54,0)
 I STATUS=5  D  Q:RC<0 RC
"RTN","RORHL02",55,0)
 . S RC=$$CSPSEG(4,$G(ROROUT(798,RORIENS,6,"I")))
"RTN","RORHL02",56,0)
 ;--- CDC
"RTN","RORHL02",57,0)
 I $G(ROROUT(799.4,RORIENS,9.01,"I"))>0  D  Q:RC<0 RC
"RTN","RORHL02",58,0)
 . S RC=$$CSPSEG(5,ROROUT(799.4,RORIENS,9.01,"I"))
"RTN","RORHL02",59,0)
 ;---
"RTN","RORHL02",60,0)
 Q ERRCNT
"RTN","RORHL02",61,0)
 ;
"RTN","RORHL02",62,0)
 ;***** LOW-LEVEL CSP BUILDER
"RTN","RORHL02",63,0)
 ;
"RTN","RORHL02",64,0)
 ; RGEVC         Registry event code
"RTN","RORHL02",65,0)
 ; DATE          Event date (FileMan)
"RTN","RORHL02",66,0)
 ; [ENDT]        End date (FileMan)
"RTN","RORHL02",67,0)
 ;
"RTN","RORHL02",68,0)
 ; Return Values:
"RTN","RORHL02",69,0)
 ;       <0  Error Code
"RTN","RORHL02",70,0)
 ;        0  Ok
"RTN","RORHL02",71,0)
 ;
"RTN","RORHL02",72,0)
CSPSEG(RGEVC,DATE,ENDT,CSP4) ;
"RTN","RORHL02",73,0)
 ;;UPDATE^SELECT^ADD^CONFIRM^DELETE^CDC^MERGE
"RTN","RORHL02",74,0)
 N CS,RORSEG,TMP
"RTN","RORHL02",75,0)
 D ECH^RORHL7(.CS)
"RTN","RORHL02",76,0)
 ;
"RTN","RORHL02",77,0)
 ;--- Initialize the segment
"RTN","RORHL02",78,0)
 S RORSEG(0)="CSP"
"RTN","RORHL02",79,0)
 ;
"RTN","RORHL02",80,0)
 ;--- CSP-1
"RTN","RORHL02",81,0)
 S TMP=$S(RGEVC'<0:$P($P($T(CSPSEG+1),";;",2),U,RGEVC+1),1:"")
"RTN","RORHL02",82,0)
 Q:TMP="" $$ERROR^RORERR(-88,,,,"RGEVC",RGEVC)
"RTN","RORHL02",83,0)
 S RORSEG(1)=RGEVC_CS_TMP
"RTN","RORHL02",84,0)
 ;
"RTN","RORHL02",85,0)
 ;--- CSP-2
"RTN","RORHL02",86,0)
 S RORSEG(2)=$$FM2HL^RORHL7(DATE)
"RTN","RORHL02",87,0)
 ;
"RTN","RORHL02",88,0)
 ;--- CSP-3
"RTN","RORHL02",89,0)
 S:$G(ENDT)>0 RORSEG(3)=$$FM2HL^RORHL7(ENDT)
"RTN","RORHL02",90,0)
 ;
"RTN","RORHL02",91,0)
 ;--- CSP-4
"RTN","RORHL02",92,0)
 S:$G(CSP4)'?." " RORSEG(4)=CSP4
"RTN","RORHL02",93,0)
 ;
"RTN","RORHL02",94,0)
 ;--- Store the segment
"RTN","RORHL02",95,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL02",96,0)
 Q 0
"RTN","RORHL02",97,0)
 ;
"RTN","RORHL02",98,0)
 ;***** CSR SEGMENT BUILDER
"RTN","RORHL02",99,0)
 ;
"RTN","RORHL02",100,0)
 ; [RORIENS]     IENS of Patient Record in Registry File. Either this
"RTN","RORHL02",101,0)
 ;               parameter or the PTIEN must have a valid value.
"RTN","RORHL02",102,0)
 ;
"RTN","RORHL02",103,0)
 ; [PTIEN]       Patient IEN (DFN). If no value is provided for this
"RTN","RORHL02",104,0)
 ;               parameter, then the function uses the value of the
"RTN","RORHL02",105,0)
 ;               .01 field of the patient's registry record.
"RTN","RORHL02",106,0)
 ;
"RTN","RORHL02",107,0)
 ; [RORFLDS]     Segment Fields to populate
"RTN","RORHL02",108,0)
 ;               (1,3,4,6,9,10,12 available)
"RTN","RORHL02",109,0)
 ;
"RTN","RORHL02",110,0)
 ; Return Values:
"RTN","RORHL02",111,0)
 ;       <0  Error Code
"RTN","RORHL02",112,0)
 ;        0  Ok
"RTN","RORHL02",113,0)
 ;       >0  Non-fatal error(s)
"RTN","RORHL02",114,0)
 ;
"RTN","RORHL02",115,0)
CSR(RORIENS,PTIEN,RORFLDS) ;
"RTN","RORHL02",116,0)
 N BUF,CS,ERRCNT,HIVIENS,RC,RORMSG,ROROUT,RORSEG,RORTXT,RPS,SCS,TMP,VER
"RTN","RORHL02",117,0)
 S (ERRCNT,RC)=0,HIVIENS=""
"RTN","RORHL02",118,0)
 D ECH^RORHL7(.CS,.SCS,.RPS)
"RTN","RORHL02",119,0)
 S PTIEN=+$G(PTIEN)
"RTN","RORHL02",120,0)
 ;
"RTN","RORHL02",121,0)
 I $G(RORIENS)>0  D  Q:RC<0 RC
"RTN","RORHL02",122,0)
 . S:$E(RORIENS,$L(RORIENS))'="," RORIENS=RORIENS_","
"RTN","RORHL02",123,0)
 . D GETS^DIQ(798,RORIENS,".01;.02;1","IE","ROROUT","RORMSG")
"RTN","RORHL02",124,0)
 . I $G(DIERR)  S RC=$$DBS^RORERR("RORMSG",-9,,,798,RORIENS)  Q
"RTN","RORHL02",125,0)
 . S:PTIEN'>0 PTIEN=+$G(ROROUT(798,RORIENS,.01,"I"))
"RTN","RORHL02",126,0)
 . S:$D(^RORDATA(799.4,+RORIENS,0)) HIVIENS=RORIENS
"RTN","RORHL02",127,0)
 E  S RORIENS=""
"RTN","RORHL02",128,0)
 ;
"RTN","RORHL02",129,0)
 I $G(RORFLDS)'=""  D
"RTN","RORHL02",130,0)
 . S:$E(RORFLDS)'="," RORFLDS=","_RORFLDS
"RTN","RORHL02",131,0)
 . S:$E(RORFLDS,$L(RORFLDS))'="," RORFLDS=RORFLDS_","
"RTN","RORHL02",132,0)
 E  S RORFLDS=",1,3,4,6,9,10,12," ; Default HL7 fields
"RTN","RORHL02",133,0)
 ;
"RTN","RORHL02",134,0)
 ;--- Initialize the segment
"RTN","RORHL02",135,0)
 S RORSEG(0)="CSR"
"RTN","RORHL02",136,0)
 ;
"RTN","RORHL02",137,0)
 ;--- CSR-1 - Name of the registry and version of the CCR
"RTN","RORHL02",138,0)
 I RORFLDS[",1,"  D
"RTN","RORHL02",139,0)
 . S VER=+$P(ROREXT("VERSION"),U)              ; Version
"RTN","RORHL02",140,0)
 . S:$P(VER,".",2)="" $P(VER,".",2)="0"
"RTN","RORHL02",141,0)
 . S $P(VER,".",3)=+$P(ROREXT("VERSION"),U,2)  ; Patch Number
"RTN","RORHL02",142,0)
 . S $P(VER,".",4)=+$$BUILD^ROR                ; Build Number
"RTN","RORHL02",143,0)
 . S TMP=$S(RORIENS'="":$G(ROROUT(798,RORIENS,.02,"E")),1:"")
"RTN","RORHL02",144,0)
 . S RORSEG(1)=$S(TMP'="":TMP,1:"CCR")_CS_VER
"RTN","RORHL02",145,0)
 ;
"RTN","RORHL02",146,0)
 ;--- CSR-3 - Institution
"RTN","RORHL02",147,0)
 I RORFLDS[",3,"  D
"RTN","RORHL02",148,0)
 . S RORSEG(3)=$$SITE^RORUTL03(CS)
"RTN","RORHL02",149,0)
 ;
"RTN","RORHL02",150,0)
 ;--- CSR-4 - Patient ID
"RTN","RORHL02",151,0)
 I RORFLDS[",4,"  D
"RTN","RORHL02",152,0)
 . S RORSEG(4)=PTIEN_CS_CS_CS_"USVHA"_CS_"PI"
"RTN","RORHL02",153,0)
 ;
"RTN","RORHL02",154,0)
 ;--- CSR-6 - Date when added to the registry
"RTN","RORHL02",155,0)
 I RORFLDS[",6,",RORIENS'=""  D  Q:RC<0 RC
"RTN","RORHL02",156,0)
 . S TMP=$$FMTHL7^XLFDT($G(ROROUT(798,RORIENS,1,"I"))\1)
"RTN","RORHL02",157,0)
 . I TMP'>0  S RC=$$ERROR^RORERR(-95,,,,798,RORIENS,1)  Q
"RTN","RORHL02",158,0)
 . S RORSEG(6)=TMP
"RTN","RORHL02",159,0)
 ;
"RTN","RORHL02",160,0)
 ;--- CSR-9 - Date of Clinical AIDS (HIV)
"RTN","RORHL02",161,0)
 I RORFLDS[",9,",HIVIENS'=""  D  Q:RC<0 RC
"RTN","RORHL02",162,0)
 . D GETS^DIQ(799.4,HIVIENS,".02;.03","I","ROROUT","RORMSG")
"RTN","RORHL02",163,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1  Q
"RTN","RORHL02",164,0)
 . . D DBS^RORERR("RORMSG",-9,,,799.4,HIVIENS)
"RTN","RORHL02",165,0)
 . ;if not 'yes', set date to null
"RTN","RORHL02",166,0)
 . I $G(ROROUT(799.4,HIVIENS,.02,"I"))'=1  S TMP=""
"RTN","RORHL02",167,0)
 . E  S TMP=$G(ROROUT(799.4,HIVIENS,.03,"I"))
"RTN","RORHL02",168,0)
 . S RORSEG(9)=$$FM2HL^RORHL7(TMP)
"RTN","RORHL02",169,0)
 ;
"RTN","RORHL02",170,0)
 ;--- CSR-10 - Reason for addition of the patient to the registry
"RTN","RORHL02",171,0)
 I RORFLDS[",10,",RORIENS'=""  D  Q:RC<0 RC
"RTN","RORHL02",172,0)
 . S RORSEG(10)=$$ADREASON^RORHLUT1(RORIENS,CS)
"RTN","RORHL02",173,0)
 ;
"RTN","RORHL02",174,0)
 ;--- CSR-12 - Risk factors
"RTN","RORHL02",175,0)
 I RORFLDS[",12,",HIVIENS'=""  D  Q:RC<0 RC
"RTN","RORHL02",176,0)
 . N CNT,EV,FLD,RFLST,RORBUF,RORQUIT,RORRISK
"RTN","RORHL02",177,0)
 . ;S RFLST="14.01;14.02;14.03;14.04;14.07;14.08;14.09;14.1;14.11;14.12;14.13;14.16;14.17"
"RTN","RORHL02",178,0)
 . S RFLST="14.01;14.02;14.03;14.04;14.07;14.08;14.09;14.1;14.11;14.12;14.13;14.16;14.17;12.08"
"RTN","RORHL02",179,0)
 . D GETS^DIQ(799.4,HIVIENS,RFLST,"I","RORBUF","RORMSG")
"RTN","RORHL02",180,0)
 . I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORHL02",181,0)
 . . D DBS^RORERR("RORMSG",-9,,,799.4,HIVIENS)
"RTN","RORHL02",182,0)
 . ;---
"RTN","RORHL02",183,0)
 . S RORRISK="",RORQUIT=0
"RTN","RORHL02",184,0)
 . F CNT=1:1  S FLD=$P(RFLST,";",CNT)  Q:FLD=""  D:FLD>0  Q:RORQUIT
"RTN","RORHL02",185,0)
 . . S TMP=$G(RORBUF(799.4,HIVIENS,FLD,"I"))
"RTN","RORHL02",186,0)
 . . S EV=$S(TMP=0:"NO",TMP=1:"YES",TMP=9:"UNKNOWN",1:"")
"RTN","RORHL02",187,0)
 . . ;I EV=""  S RORRISK="",RORQUIT=1  Q  ;risk factors can be null
"RTN","RORHL02",188,0)
 . . I $G(EV)="" S TMP=""
"RTN","RORHL02",189,0)
 . . S $P(RORRISK,RPS,CNT)=$G(TMP)_CS_$G(EV)
"RTN","RORHL02",190,0)
 . S RORSEG(12)=RORRISK
"RTN","RORHL02",191,0)
 ;
"RTN","RORHL02",192,0)
 ;--- Store the segment
"RTN","RORHL02",193,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL02",194,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORHL21")
0^8^B60105937^n/a
"RTN","RORHL21",1,0)
RORHL21 ;BPOIFO/ACS - HL7 PURCHASED CARE: ZIN,ZSV,ZRX ;8/23/10
"RTN","RORHL21",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**14**;Feb 17, 2006;Build 24
"RTN","RORHL21",3,0)
 ;
"RTN","RORHL21",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL21",5,0)
 ;
"RTN","RORHL21",6,0)
 ; #5409         File 162.11 (controlled)
"RTN","RORHL21",7,0)
 ; #5107         Files 162.02, 162.03 (controlled)
"RTN","RORHL21",8,0)
 ; #5104         File 162.4 (controlled)
"RTN","RORHL21",9,0)
 ; #4533         DATA^PSS50 (supported)
"RTN","RORHL21",10,0)
 ; #XXXX         File 162.5 (private - approval in progress)
"RTN","RORHL21",11,0)
 ;
"RTN","RORHL21",12,0)
 Q
"RTN","RORHL21",13,0)
 ;
"RTN","RORHL21",14,0)
 ;***** SEARCH FOR PURCHASED CARE
"RTN","RORHL21",15,0)
 ;
"RTN","RORHL21",16,0)
 ; RORDFN        DFN of the patient in the PATIENT file (#2)
"RTN","RORHL21",17,0)
 ;.DXDTS         Reference to a local variable where the
"RTN","RORHL21",18,0)
 ;               data extraction time frames are stored.
"RTN","RORHL21",19,0)
 ;
"RTN","RORHL21",20,0)
 ; Return Values:
"RTN","RORHL21",21,0)
 ;        0  Ok
"RTN","RORHL21",22,0)
 ;
"RTN","RORHL21",23,0)
EN1(RORDFN,DXDTS) ;DATA AREA = 20
"RTN","RORHL21",24,0)
 N IDX,RORSTDT,RORENDT
"RTN","RORHL21",25,0)
 S IDX=0
"RTN","RORHL21",26,0)
 F  S IDX=$O(DXDTS(20,IDX))  Q:IDX'>0  D
"RTN","RORHL21",27,0)
 . S RORSTDT=$P(DXDTS(20,IDX),U),RORENDT=$P(DXDTS(20,IDX),U,2)
"RTN","RORHL21",28,0)
 . D EN2(RORDFN,RORSTDT,RORENDT) ;get purchased care data for patient
"RTN","RORHL21",29,0)
 Q 0
"RTN","RORHL21",30,0)
 ;
"RTN","RORHL21",31,0)
 ;***** LOOP THROUGH PURCHASED CARE DATA
"RTN","RORHL21",32,0)
 ;Input
"RTN","RORHL21",33,0)
 ; RORDFN        DFN of the patient in the PATIENT file (#2)
"RTN","RORHL21",34,0)
 ; RORSTDT       Start date of CCR extract
"RTN","RORHL21",35,0)
 ; RORENDT       End date of CCR extract
"RTN","RORHL21",36,0)
 ;
"RTN","RORHL21",37,0)
EN2(RORDFN,RORSTDT,RORENDT) ;
"RTN","RORHL21",38,0)
 N CS D ECH^RORHL7(.CS) ;get component separator
"RTN","RORHL21",39,0)
 N SCS D ECH^RORHL7(,.SCS) ;get sub-component separator
"RTN","RORHL21",40,0)
 N RPS D ECH^RORHL7(,,.RPS) ;get repetition separator
"RTN","RORHL21",41,0)
 ;
"RTN","RORHL21",42,0)
 ;GET INPATIENT DATA FROM FEE BASIS INVOICE FILE #162.5
"RTN","RORHL21",43,0)
 ;Date Finalized is used to determine inclusion for HL7 message
"RTN","RORHL21",44,0)
 N RORIP,IPIEN,IENS,RORDATA,RORERR,DATA7078,ERR7078,FINALDT,PREPTR
"RTN","RORHL21",45,0)
 S IPIEN=0
"RTN","RORHL21",46,0)
 F  S IPIEN=$O(^FBAAI("D",RORDFN,IPIEN)) Q:'IPIEN  D  ;DFN x-ref
"RTN","RORHL21",47,0)
 . K RORIP ;clean out previous data
"RTN","RORHL21",48,0)
 . S RORIP("IEN")=IPIEN
"RTN","RORHL21",49,0)
 . S IENS=IPIEN_","
"RTN","RORHL21",50,0)
 . K RORDATA,RORERR D GETS^DIQ(162.5,IENS,"4;5;6;6.5;6.6;8;19;24;30;31;32;33;34;40;41;42;43;44;54","IE","RORDATA","RORERR")
"RTN","RORHL21",51,0)
 . S FINALDT=$G(RORDATA(162.5,IENS,19,"I")) ;Date finalized
"RTN","RORHL21",52,0)
 . Q:'FINALDT
"RTN","RORHL21",53,0)
 . Q:((FINALDT<RORSTDT)!(FINALDT>RORENDT))  ;quit if outside extract range
"RTN","RORHL21",54,0)
 . S RORIP("FINALDT")=$G(FINALDT)
"RTN","RORHL21",55,0)
 . S PREPTR=$G(RORDATA(162.5,IENS,4,"I")) ;Pre-authorization pointer
"RTN","RORHL21",56,0)
 . I $G(PREPTR)["FB7078" S PREPTR=+PREPTR I $G(PREPTR)>0 D
"RTN","RORHL21",57,0)
 .. N IENS7078 S IENS7078=PREPTR_","
"RTN","RORHL21",58,0)
 .. K DATA7078,ERR7078 D GETS^DIQ(162.4,IENS7078,"3.5;4.5","I","DATA7078","ERR7078") ;DBIA 5104 (controlled
"RTN","RORHL21",59,0)
 .. S RORIP("ADMDT")=$G(DATA7078(162.4,IENS7078,3.5,"I")) ;Date of admission
"RTN","RORHL21",60,0)
 .. S RORIP("DISDT")=$G(DATA7078(162.4,IENS7078,4.5,"I")) ;Date of discharge
"RTN","RORHL21",61,0)
 . S RORIP("TRFROMDT")=$G(RORDATA(162.5,IENS,5,"I")) ;Treatement 'from' date
"RTN","RORHL21",62,0)
 . S RORIP("TRTODT")=$G(RORDATA(162.5,IENS,6,"I")) ;Treatment 'to' date
"RTN","RORHL21",63,0)
 . S RORIP("DISTYPE")=$G(RORDATA(162.5,IENS,6.5,"I")) ;Discharge type code
"RTN","RORHL21",64,0)
 . S RORIP("PAID")=$G(RORDATA(162.5,IENS,8,"I")) ;Amount paid
"RTN","RORHL21",65,0)
 . S RORIP("BILLED")=$G(RORDATA(162.5,IENS,6.6,"I")) ;Billed charges
"RTN","RORHL21",66,0)
 . S RORIP("DISDRG")=$G(RORDATA(162.5,IENS,24,"E")) ;Discharge DRG
"RTN","RORHL21",67,0)
 . S RORIP("COVDAYS")=$G(RORDATA(162.5,IENS,54,"E")) ;covered days
"RTN","RORHL21",68,0)
 . S RORIP("ICD1")=$G(RORDATA(162.5,IENS,30,"E")) ;ICD 1
"RTN","RORHL21",69,0)
 . S RORIP("ICD2")=$G(RORDATA(162.5,IENS,31,"E")) ;ICD 2
"RTN","RORHL21",70,0)
 . S RORIP("ICD3")=$G(RORDATA(162.5,IENS,32,"E")) ;ICD 3
"RTN","RORHL21",71,0)
 . S RORIP("ICD4")=$G(RORDATA(162.5,IENS,33,"E")) ;ICD 4
"RTN","RORHL21",72,0)
 . S RORIP("ICD5")=$G(RORDATA(162.5,IENS,34,"E")) ;ICD 5
"RTN","RORHL21",73,0)
 . S RORIP("PROC1")=$G(RORDATA(162.5,IENS,40,"E")) ;Procedure 1
"RTN","RORHL21",74,0)
 . S RORIP("PROC2")=$G(RORDATA(162.5,IENS,41,"E")) ;Procedure 2
"RTN","RORHL21",75,0)
 . S RORIP("PROC3")=$G(RORDATA(162.5,IENS,42,"E")) ;Procedure 3
"RTN","RORHL21",76,0)
 . S RORIP("PROC4")=$G(RORDATA(162.5,IENS,43,"E")) ;Procedure 4
"RTN","RORHL21",77,0)
 . S RORIP("PROC5")=$G(RORDATA(162.5,IENS,44,"E")) ;Procedure 5
"RTN","RORHL21",78,0)
 . D ZIN(.RORIP)
"RTN","RORHL21",79,0)
 ;
"RTN","RORHL21",80,0)
 ;---GET OUTPATIENT DATA FROM FEE BASIS PAYMENT FILE #162
"RTN","RORHL21",81,0)
 ;Date Finalized is used to determine inclusion for HL7 message
"RTN","RORHL21",82,0)
 N RORVENDOR ;authorization vendor IEN
"RTN","RORHL21",83,0)
 N RORITDT ;initial treatment date IEN
"RTN","RORHL21",84,0)
 N RORSVC ;service IEN
"RTN","RORHL21",85,0)
 N IENS,FINALDT
"RTN","RORHL21",86,0)
 S RORVENDOR=0 F  S RORVENDOR=$O(^FBAAC(RORDFN,1,RORVENDOR)) Q:'RORVENDOR  D
"RTN","RORHL21",87,0)
 . ;go to 'initial treatment date' level and get requested data
"RTN","RORHL21",88,0)
 . S RORITDT=0 F  S RORITDT=$O(^FBAAC(RORDFN,1,RORVENDOR,1,RORITDT)) Q:'RORITDT  D
"RTN","RORHL21",89,0)
 .. N ROROP ;array to hold outpatient data
"RTN","RORHL21",90,0)
 .. K IENS S IENS=RORITDT_","_RORVENDOR_","_RORDFN_","
"RTN","RORHL21",91,0)
 .. K RORDATA,RORERR D GETS^DIQ(162.02,IENS,".01;1.5","IE","RORDATA","RORERR")
"RTN","RORHL21",92,0)
 .. S ROROP("TRDT")=$G(RORDATA(162.02,IENS,.01,"I")) ;initial treatment date
"RTN","RORHL21",93,0)
 .. S ROROP("FEEPGM")=$G(RORDATA(162.02,IENS,1.5,"I")) ;fee program
"RTN","RORHL21",94,0)
 .. ;go to 'service provided' level and get requested data
"RTN","RORHL21",95,0)
 .. S RORSVC=0 F  S RORSVC=$O(^FBAAC(RORDFN,1,RORVENDOR,1,RORITDT,1,RORSVC)) Q:'RORSVC  D
"RTN","RORHL21",96,0)
 ... N IENSVC S IENSVC=RORSVC_","_RORITDT_","_RORVENDOR_","_RORDFN_","
"RTN","RORHL21",97,0)
 ... K RORDATA,RORERR D GETS^DIQ(162.03,IENSVC,".01;5;16;28;30","IE","RORDATA","RORERR")
"RTN","RORHL21",98,0)
 ... S FINALDT=$G(RORDATA(162.03,IENSVC,5,"I")) ;date finalized
"RTN","RORHL21",99,0)
 ... Q:(($G(FINALDT)<RORSTDT)!($G(FINALDT)>(RORENDT)))  ;quit if outside date range
"RTN","RORHL21",100,0)
 ... S ROROP("FINALDT")=FINALDT
"RTN","RORHL21",101,0)
 ... S ROROP("SVC")=$G(RORDATA(162.03,IENSVC,.01,"E")) ;service provided
"RTN","RORHL21",102,0)
 ... S ROROP("POV")=$G(RORDATA(162.03,IENSVC,16,"E")) ;purpose of visit
"RTN","RORHL21",103,0)
 ... S ROROP("PDIAG")=$G(RORDATA(162.03,IENSVC,28,"E")) ;primary diagnosis
"RTN","RORHL21",104,0)
 ... S ROROP("POS")=$G(RORDATA(162.03,IENSVC,30,"E")) ;place of service
"RTN","RORHL21",105,0)
 ... S ROROP("IEN")=RORDFN_"-"_RORVENDOR_"-"_RORITDT_"-"_RORSVC
"RTN","RORHL21",106,0)
 ... D ZSV(.ROROP)
"RTN","RORHL21",107,0)
 ;
"RTN","RORHL21",108,0)
 ;
"RTN","RORHL21",109,0)
 ;---GET DRUG DATA FROM FEE BASIS PHARMACY INVOICE FILE #162.1
"RTN","RORHL21",110,0)
 ;Date Certified for Payment (RORDCP) is used to determine inclusion in HL7 message
"RTN","RORHL21",111,0)
 N RORRX,RORDCP,RXIEN0,RXIEN1
"RTN","RORHL21",112,0)
 S RORDCP=(RORSTDT-.01) F  S RORDCP=$O(^FBAA(162.1,"AA",RORDCP)) Q:'RORDCP  Q:(RORDCP>RORENDT)  D
"RTN","RORHL21",113,0)
 . S RXIEN0=0
"RTN","RORHL21",114,0)
 . F  S RXIEN0=$O(^FBAA(162.1,"AA",RORDCP,RORDFN,RXIEN0)) Q:'RXIEN0  D
"RTN","RORHL21",115,0)
 .. S RXIEN1=0 F  S RXIEN1=$O(^FBAA(162.1,"AA",RORDCP,RORDFN,RXIEN0,RXIEN1)) Q:'RXIEN1  D
"RTN","RORHL21",116,0)
 ... K RORRX ;clean out previous data
"RTN","RORHL21",117,0)
 ... S RORRX("NUM")=$P($G(^FBAA(162.1,RXIEN0,"RX",RXIEN1,0)),U,1) ;rx number
"RTN","RORHL21",118,0)
 ... S RORRX("NAME")=$P($G(^FBAA(162.1,RXIEN0,"RX",RXIEN1,0)),U,2) ;drug name
"RTN","RORHL21",119,0)
 ... Q:($G(RORRX("NAME"))="")  ;drug name is required
"RTN","RORHL21",120,0)
 ... S RORRX("FILLDT")=$P($G(^FBAA(162.1,RXIEN0,"RX",RXIEN1,0)),U,3) ;date filled
"RTN","RORHL21",121,0)
 ... S RORRX("GENIEN")=$P($G(^FBAA(162.1,RXIEN0,"RX",RXIEN1,0)),U,10) ;generic drug IEN
"RTN","RORHL21",122,0)
 ... I $G(RORRX("GENIEN")) D  ;get generic drug name
"RTN","RORHL21",123,0)
 .... D DATA^PSS50(RORRX("GENIEN"),,,,,"RORDRUG")
"RTN","RORHL21",124,0)
 .... S RORRX("GENERIC")=$G(^TMP($J,"RORDRUG",RORRX("GENIEN"),.01)) ;generic drug name
"RTN","RORHL21",125,0)
 .... K ^TMP($J,"RORDRUG")
"RTN","RORHL21",126,0)
 ... S RORRX("STRENGTH")=$P($G(^FBAA(162.1,RXIEN0,"RX",RXIEN1,0)),U,12) ;drug strength
"RTN","RORHL21",127,0)
 ... S RORRX("QUANTITY")=$P($G(^FBAA(162.1,RXIEN0,"RX",RXIEN1,0)),U,13) ;drug quantity
"RTN","RORHL21",128,0)
 ... S RORRX("IEN1")=$G(RXIEN0) S RORRX("IEN2")=$G(RXIEN1)
"RTN","RORHL21",129,0)
 ... D ZRX(.RORRX)
"RTN","RORHL21",130,0)
 Q
"RTN","RORHL21",131,0)
 ;
"RTN","RORHL21",132,0)
 ;
"RTN","RORHL21",133,0)
 ;***** ZIN SEGMENT BUILDER
"RTN","RORHL21",134,0)
 ;
"RTN","RORHL21",135,0)
 ;Input
"RTN","RORHL21",136,0)
 ;  RORIP     Array with inpatient data
"RTN","RORHL21",137,0)
 ;
"RTN","RORHL21",138,0)
ZIN(RORIP) ;
"RTN","RORHL21",139,0)
 ;--- Segment type
"RTN","RORHL21",140,0)
 N RORSEG S RORSEG(0)="ZIN"
"RTN","RORHL21",141,0)
 ;ZIN-1: Unique Key (IEN)
"RTN","RORHL21",142,0)
 S RORSEG(1)=$G(RORIP("IEN"))
"RTN","RORHL21",143,0)
 ;ZIN-2: Treatment 'from' date
"RTN","RORHL21",144,0)
 I $G(RORIP("TRFROMDT")) S RORSEG(2)=$$FM2HL^RORHL7(RORIP("TRFROMDT"))
"RTN","RORHL21",145,0)
 ;ZIN-3: Treatment 'to' date
"RTN","RORHL21",146,0)
 I $G(RORIP("TRTODT")) S RORSEG(3)=$$FM2HL^RORHL7(RORIP("TRTODT"))
"RTN","RORHL21",147,0)
 ;ZIN-4: Discharge Type code
"RTN","RORHL21",148,0)
 S RORSEG(4)=$G(RORIP("DISTYPE"))
"RTN","RORHL21",149,0)
 ;ZIN-5: Amount Billed
"RTN","RORHL21",150,0)
 S RORSEG(5)=$G(RORIP("BILLED"))
"RTN","RORHL21",151,0)
 ;ZIN-6: Amount Paid
"RTN","RORHL21",152,0)
 S RORSEG(6)=$G(RORIP("PAID"))
"RTN","RORHL21",153,0)
 ;ZIN-7: Date Finalized
"RTN","RORHL21",154,0)
 I $G(RORIP("FINALDT")) S RORSEG(7)=$$FM2HL^RORHL7(RORIP("FINALDT"))
"RTN","RORHL21",155,0)
 ;ZIN-8: Discharge DRG
"RTN","RORHL21",156,0)
 S RORSEG(8)=$G(RORIP("DISDRG"))
"RTN","RORHL21",157,0)
 ;ZIN-9: Date of Admission
"RTN","RORHL21",158,0)
 I $G(RORIP("ADMDT")) S RORSEG(9)=$$FM2HL^RORHL7(RORIP("ADMDT"))
"RTN","RORHL21",159,0)
 ;ZIN-10: Date of Discharge
"RTN","RORHL21",160,0)
 I $G(RORIP("DISDT")) S RORSEG(10)=$$FM2HL^RORHL7(RORIP("DISDT"))
"RTN","RORHL21",161,0)
 ;ZIN-11: Covered Days
"RTN","RORHL21",162,0)
 S RORSEG(11)=$G(RORIP("COVDAYS"))
"RTN","RORHL21",163,0)
 ;ZIN-12: ICD 1
"RTN","RORHL21",164,0)
 S RORSEG(12)=$G(RORIP("ICD1"))
"RTN","RORHL21",165,0)
 ;ZIN-13: ICD 2
"RTN","RORHL21",166,0)
 S RORSEG(13)=$G(RORIP("ICD2"))
"RTN","RORHL21",167,0)
 ;ZIN-14: ICD 3
"RTN","RORHL21",168,0)
 S RORSEG(14)=$G(RORIP("ICD3"))
"RTN","RORHL21",169,0)
 ;ZIN-15: ICD 4
"RTN","RORHL21",170,0)
 S RORSEG(15)=$G(RORIP("ICD4"))
"RTN","RORHL21",171,0)
 ;ZIN-16: ICD 5
"RTN","RORHL21",172,0)
 S RORSEG(16)=$G(RORIP("ICD5"))
"RTN","RORHL21",173,0)
 ;ZIN-17: Procedure 1
"RTN","RORHL21",174,0)
 S RORSEG(17)=$G(RORIP("PROC1"))
"RTN","RORHL21",175,0)
 ;ZIN-18: Procedure 2
"RTN","RORHL21",176,0)
 S RORSEG(18)=$G(RORIP("PROC2"))
"RTN","RORHL21",177,0)
 ;ZIN-19: Procedure 3
"RTN","RORHL21",178,0)
 S RORSEG(19)=$G(RORIP("PROC3"))
"RTN","RORHL21",179,0)
 ;ZIN-20: Procedure 4
"RTN","RORHL21",180,0)
 S RORSEG(20)=$G(RORIP("PROC4"))
"RTN","RORHL21",181,0)
 ;ZIN-21: Procedure 5
"RTN","RORHL21",182,0)
 S RORSEG(21)=$G(RORIP("PROC5"))
"RTN","RORHL21",183,0)
 ;
"RTN","RORHL21",184,0)
 ;--- Store the segment
"RTN","RORHL21",185,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL21",186,0)
 Q
"RTN","RORHL21",187,0)
 ;
"RTN","RORHL21",188,0)
 ;***** ZSV SEGMENT BUILDER
"RTN","RORHL21",189,0)
 ;
"RTN","RORHL21",190,0)
 ;Input
"RTN","RORHL21",191,0)
 ;  ROROP     Array with outpatient data
"RTN","RORHL21",192,0)
 ;
"RTN","RORHL21",193,0)
ZSV(ROROP) ;
"RTN","RORHL21",194,0)
 ;--- Segment type
"RTN","RORHL21",195,0)
 N RORSEG S RORSEG(0)="ZSV"
"RTN","RORHL21",196,0)
 ;ZSV-1: Unique key (IEN)
"RTN","RORHL21",197,0)
 S RORSEG(1)=$G(ROROP("IEN"))
"RTN","RORHL21",198,0)
 ;ZSV-2: Initial Treatment Date
"RTN","RORHL21",199,0)
 I $G(ROROP("TRDT")) S RORSEG(2)=$$FM2HL^RORHL7(ROROP("TRDT"))
"RTN","RORHL21",200,0)
 ;ZSV-3: Fee Program IEN
"RTN","RORHL21",201,0)
 S RORSEG(3)=$G(ROROP("FEEPGM"))
"RTN","RORHL21",202,0)
 ;ZSV-4: Service Provided
"RTN","RORHL21",203,0)
 S RORSEG(4)=$G(ROROP("SVC"))
"RTN","RORHL21",204,0)
 ;ZSV-5: Purpose of Visit
"RTN","RORHL21",205,0)
 S RORSEG(5)=$G(ROROP("POV"))
"RTN","RORHL21",206,0)
 ;ZSV-6: Primary Diagnosis
"RTN","RORHL21",207,0)
 S RORSEG(6)=$G(ROROP("PDIAG"))
"RTN","RORHL21",208,0)
 ;ZSV-7: Place of Service
"RTN","RORHL21",209,0)
 S RORSEG(7)=$G(ROROP("POS"))
"RTN","RORHL21",210,0)
 ;
"RTN","RORHL21",211,0)
 ;--- Store the segment
"RTN","RORHL21",212,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL21",213,0)
 Q
"RTN","RORHL21",214,0)
 ;
"RTN","RORHL21",215,0)
 ;***** ZRX SEGMENT BUILDER
"RTN","RORHL21",216,0)
 ;
"RTN","RORHL21",217,0)
 ;Input
"RTN","RORHL21",218,0)
 ;  RORRX     Array with drug data
"RTN","RORHL21",219,0)
 ;
"RTN","RORHL21",220,0)
ZRX(RORRX) ;
"RTN","RORHL21",221,0)
 ;--- Segment type
"RTN","RORHL21",222,0)
 N RORSEG S RORSEG(0)="ZRX"
"RTN","RORHL21",223,0)
 ;ZRX-1: Unique key (IEN)
"RTN","RORHL21",224,0)
 S RORSEG(1)=$G(RORRX("IEN1"))_"-"_$G(RORRX("IEN2"))
"RTN","RORHL21",225,0)
 ;ZRX-2: Rx Number
"RTN","RORHL21",226,0)
 S RORSEG(2)=$G(RORRX("NUM"))
"RTN","RORHL21",227,0)
 ;ZRX-3: Date Rx Filled
"RTN","RORHL21",228,0)
 I $G(RORRX("FILLDT")) S RORSEG(3)=$$FM2HL^RORHL7(RORRX("FILLDT"))
"RTN","RORHL21",229,0)
 ;ZRX-4: Drug Name
"RTN","RORHL21",230,0)
 S RORSEG(4)=$G(RORRX("NAME"))
"RTN","RORHL21",231,0)
 ;ZRX-5: Generic Drug Name
"RTN","RORHL21",232,0)
 S RORSEG(5)=$G(RORRX("GENERIC"))
"RTN","RORHL21",233,0)
 ;ZRX-6: Drug Strength
"RTN","RORHL21",234,0)
 S RORSEG(6)=$G(RORRX("STRENGTH"))
"RTN","RORHL21",235,0)
 ;ZRX-7: Drug Quantity
"RTN","RORHL21",236,0)
 S RORSEG(7)=$G(RORRX("QUANTITY"))
"RTN","RORHL21",237,0)
 ;
"RTN","RORHL21",238,0)
 ;--- Store the segment
"RTN","RORHL21",239,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL21",240,0)
 Q
"RTN","RORP014")
0^15^B33131484^n/a
"RTN","RORP014",1,0)
RORP014 ;BP/ACS CCR POST-INIT PATCH 14 ;12/31/10
"RTN","RORP014",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**14**;Feb 17, 2006;Build 24
"RTN","RORP014",3,0)
 ;
"RTN","RORP014",4,0)
 ; This routine uses the following IAs:
"RTN","RORP014",5,0)
 ;
"RTN","RORP014",6,0)
 ; #3556    GCPR^LA7QRY (controlled)
"RTN","RORP014",7,0)
 ;
"RTN","RORP014",8,0)
 ;******************************************************************************
"RTN","RORP014",9,0)
 ;Change name of MELD report to "Liver Score by Range" in the ROR REPORT
"RTN","RORP014",10,0)
 ;PARAMETERS file (#799.34)
"RTN","RORP014",11,0)
 ;******************************************************************************
"RTN","RORP014",12,0)
 ;find IEN of existing "MELD Score by Range" entry
"RTN","RORP014",13,0)
 N IEN,IENS,RORFDA,RORMSG S IEN=$O(^ROR(799.34,"B","MELD Score by Range",0))
"RTN","RORP014",14,0)
 I $G(IEN) S IENS=IEN_"," D
"RTN","RORP014",15,0)
 . S RORFDA(799.34,IENS,.01)="Liver Score by Range"
"RTN","RORP014",16,0)
 . K RORMSG D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORP014",17,0)
 K RORFDA,RORMSG
"RTN","RORP014",18,0)
 ;
"RTN","RORP014",19,0)
 ;******************************************************************************
"RTN","RORP014",20,0)
 ;Add new entries to the ROR XML ITEM file (#799.31).  These entries are needed
"RTN","RORP014",21,0)
 ;for the new APRI/FIB4 calculations in the Liver Score by Range report.
"RTN","RORP014",22,0)
 ;******************************************************************************
"RTN","RORP014",23,0)
 N RORXML,RORTAG,RORFDA,RORERR
"RTN","RORP014",24,0)
 ;--- add codes
"RTN","RORP014",25,0)
 F I=1:1:5 S RORTAG="XML"_I D
"RTN","RORP014",26,0)
 . S RORXML=$T(@RORTAG)
"RTN","RORP014",27,0)
 . S RORXML=$P(RORXML,";;",2)
"RTN","RORP014",28,0)
 . ;don't add if it's already in the global
"RTN","RORP014",29,0)
 . Q:$D(^ROR(799.31,"B",RORXML))
"RTN","RORP014",30,0)
 . S RORFDA(799.31,"+1,",.01)=RORXML
"RTN","RORP014",31,0)
 . D UPDATE^DIE(,"RORFDA",,"RORERR")
"RTN","RORP014",32,0)
 K RORFDA,RORERR
"RTN","RORP014",33,0)
 ;
"RTN","RORP014",34,0)
 ;******************************************************************************
"RTN","RORP014",35,0)
 ;Add "Purchased Care" to the ROR DATA AREA file (#799.33)
"RTN","RORP014",36,0)
 ;******************************************************************************
"RTN","RORP014",37,0)
 ;remove old entries if they exist
"RTN","RORP014",38,0)
 N DA,DIK
"RTN","RORP014",39,0)
 S DIK="^ROR(799.33,",DA=$O(^ROR(799.33,"B","Purchased Care",0)) I $G(DA)>0 D ^DIK
"RTN","RORP014",40,0)
 N RORDA F RORDA="Purchased Care" D
"RTN","RORP014",41,0)
 . Q:$D(^ROR(799.33,"B",RORDA))  ;don't add if already in global
"RTN","RORP014",42,0)
 . N RORFDA,RORERR,RORIEN
"RTN","RORP014",43,0)
 . S RORFDA(799.33,"+1,",.01)=RORDA
"RTN","RORP014",44,0)
 . S RORIEN(1)=20 ;IEN=20 for Purchased Care
"RTN","RORP014",45,0)
 . D UPDATE^DIE(,"RORFDA","RORIEN","RORERR")
"RTN","RORP014",46,0)
 . K RORFDA,RORERR,RORIEN
"RTN","RORP014",47,0)
 ;
"RTN","RORP014",48,0)
 ;******************************************************************************
"RTN","RORP014",49,0)
 ;Update the PURCHASED CARE backpull entry in the ROR HISTORICAL DATA 
"RTN","RORP014",50,0)
 ;EXTRACT file with END DATE and ACTIVATION DATE = current date.
"RTN","RORP014",51,0)
 ;******************************************************************************
"RTN","RORP014",52,0)
 N RORIEN S RORIEN=$O(^RORDATA(799.6,"B","PURCHASED CARE",0))
"RTN","RORP014",53,0)
 I $G(RORIEN) D
"RTN","RORP014",54,0)
 . N DIE,DA,DR
"RTN","RORP014",55,0)
 . S DIE="^RORDATA(799.6,",DA=RORIEN,DR=".04///"_DT_";.07///"_DT D ^DIE
"RTN","RORP014",56,0)
 ;
"RTN","RORP014",57,0)
 ;******************************************************************************
"RTN","RORP014",58,0)
 ;Add new entries to the ROR LIST ITEM file (#799.1) for the 2 new Liver reports
"RTN","RORP014",59,0)
 ;in the MELD group
"RTN","RORP014",60,0)
 ;******************************************************************************
"RTN","RORP014",61,0)
 N RORDATA,RORTAG,RORFDA,I,TEXT,TYPE,REGISTRY,CODE
"RTN","RORP014",62,0)
 F I=1:1:4  S RORTAG="LI"_I D
"RTN","RORP014",63,0)
 . S RORDATA=$P($T(@RORTAG),";;",2)
"RTN","RORP014",64,0)
 . S TEXT=$P(RORDATA,"^",1) ;TEXT to add
"RTN","RORP014",65,0)
 . S TYPE=$P(RORDATA,"^",2) ;TYPE to add
"RTN","RORP014",66,0)
 . S REGISTRY=$P(RORDATA,"^",3) ;REGISTRY to add
"RTN","RORP014",67,0)
 . S CODE=$P(RORDATA,"^",4) ;CODE to add
"RTN","RORP014",68,0)
 . ;don't add if it's already in the global
"RTN","RORP014",69,0)
 . Q:$D(^ROR(799.1,"KEY",TYPE,REGISTRY,CODE))
"RTN","RORP014",70,0)
 . S RORFDA(799.1,"+1,",.01)=TEXT
"RTN","RORP014",71,0)
 . S RORFDA(799.1,"+1,",.02)=TYPE
"RTN","RORP014",72,0)
 . S RORFDA(799.1,"+1,",.03)=REGISTRY
"RTN","RORP014",73,0)
 . S RORFDA(799.1,"+1,",.04)=CODE
"RTN","RORP014",74,0)
 . D UPDATE^DIE(,"RORFDA",,"RORERR")
"RTN","RORP014",75,0)
 K RORFDA,RORERR
"RTN","RORP014",76,0)
 ;
"RTN","RORP014",77,0)
 ;******************************************************************************
"RTN","RORP014",78,0)
 ;Add new LOINC codes to the VA HEPC lab search criteria in the
"RTN","RORP014",79,0)
 ;ROR LAB SEARCH file #798.9.  Don't add them if they already exist.  Do not
"RTN","RORP014",80,0)
 ;add the 'dash' or the number following it.
"RTN","RORP014",81,0)
 ;******************************************************************************
"RTN","RORP014",82,0)
 N I,HEPCIEN,RORDATA,RORLOINC,RORTAG K RORMSG
"RTN","RORP014",83,0)
 N HEPCNT S HEPCNT=0
"RTN","RORP014",84,0)
 S HEPCIEN=$O(^ROR(798.9,"B","VA HEPC",0)) ;HEPC top level IEN
"RTN","RORP014",85,0)
 ;--- add LOINC codes to the VA HEPC search criteria
"RTN","RORP014",86,0)
 F I=1:1:9  S RORTAG="HEP"_I D
"RTN","RORP014",87,0)
 . S RORLOINC=$P($P($T(@RORTAG),";;",2),"-",1)
"RTN","RORP014",88,0)
 . ;don't add if it's already in the global
"RTN","RORP014",89,0)
 . Q:($D(^ROR(798.9,HEPCIEN,1,"B",RORLOINC)))
"RTN","RORP014",90,0)
 . S RORDATA(1,798.92,"+2,"_HEPCIEN_",",.01)=$G(RORLOINC)
"RTN","RORP014",91,0)
 . S RORDATA(1,798.92,"+2,"_HEPCIEN_",",1)=0 ;indicator: ingore
"RTN","RORP014",92,0)
 . D UPDATE^DIE("","RORDATA(1)",,"RORMSG")
"RTN","RORP014",93,0)
 . S HEPCNT=HEPCNT+1
"RTN","RORP014",94,0)
 K RORDATA,RORMSG
"RTN","RORP014",95,0)
 ;
"RTN","RORP014",96,0)
 ;******************************************************************************
"RTN","RORP014",97,0)
 ;Check each pending patient in the HEPC registry to see if they have ever had a positve
"RTN","RORP014",98,0)
 ;HCV LOINC.  If they have, then confirm them into the registry immediately.
"RTN","RORP014",99,0)
 ;******************************************************************************
"RTN","RORP014",100,0)
 N IEN,DFN,PTID,START,END,RORFS,RORCS,H7CH,HEPCREG
"RTN","RORP014",101,0)
 S H7CH="|^~\&",RORFS="|",RORCS="^"
"RTN","RORP014",102,0)
 S HEPCREG=$O(^ROR(798.1,"B","VA HEPC",0)) Q:'HEPCREG  ;HEPC Registry IEN
"RTN","RORP014",103,0)
 S IEN=0 F  S IEN=$O(^RORDATA(798,IEN)) Q:'IEN  D
"RTN","RORP014",104,0)
 . Q:$P($G(^RORDATA(798,IEN,0)),U,2)'=HEPCREG  ;quit if not HEPC registry
"RTN","RORP014",105,0)
 . Q:$P($G(^RORDATA(798,IEN,0)),U,5)'=4  ;quit if not pending patient
"RTN","RORP014",106,0)
 . S DFN=$P($G(^RORDATA(798,IEN,0)),U,1) ;get patient DFN
"RTN","RORP014",107,0)
 . Q:'DFN
"RTN","RORP014",108,0)
 . S PTID=$$PTID^RORUTL02(DFN) ;get patient ID for call to GCPR^LA7QRY
"RTN","RORP014",109,0)
 . Q:+PTID'>0
"RTN","RORP014",110,0)
 . S START="2000101^CD" ;start date 1/1/1900
"RTN","RORP014",111,0)
 . S END=DT_".235959^CD"
"RTN","RORP014",112,0)
 . N RORLC,RORMSG,RORHCV
"RTN","RORP014",113,0)
 . S RORLC="CH,MI" ;search Chem and Micro sub-files in #63
"RTN","RORP014",114,0)
 . S RORLC(12)="11011-4^LN"
"RTN","RORP014",115,0)
 . S RORLC(13)="29609-5^LN"
"RTN","RORP014",116,0)
 . S RORLC(14)="34703-9^LN"
"RTN","RORP014",117,0)
 . S RORLC(15)="34704-7^LN"
"RTN","RORP014",118,0)
 . S RORLC(16)="10676-5^LN"
"RTN","RORP014",119,0)
 . S RORLC(17)="20416-4^LN"
"RTN","RORP014",120,0)
 . S RORLC(18)="20571-6^LN"
"RTN","RORP014",121,0)
 . S RORLC(19)="49758-6^LN"
"RTN","RORP014",122,0)
 . S RORLC(20)="50023-1^LN"
"RTN","RORP014",123,0)
 . S RORHCV=$NA(^TMP("RORHCV",$J)) K @RORHCV ;output to hold the HCV test results
"RTN","RORP014",124,0)
 . N RC S RC=$$GCPR^LA7QRY(PTID,START,END,.RORLC,"*",.RORMSG,RORHCV,H7CH)
"RTN","RORP014",125,0)
 . I $D(@RORHCV)'>1 Q
"RTN","RORP014",126,0)
 . N RORNODE,RORSEG,RORVAL,RORDONE,SEGTYPE
"RTN","RORP014",127,0)
 . S RORNODE=0,RORDONE=0
"RTN","RORP014",128,0)
 . ;loop through output and see if the test result value in OBX contains ">" in first character
"RTN","RORP014",129,0)
 . F  S RORNODE=$O(^TMP("RORHCV",$J,RORNODE)) Q:(($G(RORNODE)="")!(RORDONE))  D
"RTN","RORP014",130,0)
 .. S RORSEG=$G(^TMP("RORHCV",$J,RORNODE)) ;entire HL7 segment
"RTN","RORP014",131,0)
 .. S SEGTYPE=$P(RORSEG,RORFS,1) ;segment type (PID,OBR,OBX,etc.)
"RTN","RORP014",132,0)
 .. Q:SEGTYPE'="OBX"  ;we want OBX segments only
"RTN","RORP014",133,0)
 .. S RORVAL=$P(RORSEG,RORFS,6) ;test result value
"RTN","RORP014",134,0)
 .. S RORVAL=$TR(RORVAL,"""","") ;get rid of double quotes around values
"RTN","RORP014",135,0)
 .. N IENS I $E($G(RORVAL),1,1)=">" S IENS=IEN_"," D  ;if positive test result
"RTN","RORP014",136,0)
 ... S RORFDA(798,IENS,3)=0 ;set status = confirmed
"RTN","RORP014",137,0)
 ... S RORFDA(798,IENS,12)="" ;set pending comment field to null
"RTN","RORP014",138,0)
 ... K RORMSG D FILE^DIE(,"RORFDA","RORMSG") ;update
"RTN","RORP014",139,0)
 ... S RORDONE=1
"RTN","RORP014",140,0)
 ;
"RTN","RORP014",141,0)
 D CLEAN^DILF
"RTN","RORP014",142,0)
 Q
"RTN","RORP014",143,0)
 ;******************************************************************************
"RTN","RORP014",144,0)
 ;New HEPC LOINC codes
"RTN","RORP014",145,0)
 ;******************************************************************************
"RTN","RORP014",146,0)
HEP1 ;;11011-4
"RTN","RORP014",147,0)
HEP2 ;;29609-5
"RTN","RORP014",148,0)
HEP3 ;;34703-9
"RTN","RORP014",149,0)
HEP4 ;;34704-7
"RTN","RORP014",150,0)
HEP5 ;;10676-5
"RTN","RORP014",151,0)
HEP6 ;;20416-4
"RTN","RORP014",152,0)
HEP7 ;;20571-6
"RTN","RORP014",153,0)
HEP8 ;;49758-6
"RTN","RORP014",154,0)
HEP9 ;;50023-1
"RTN","RORP014",155,0)
 ;
"RTN","RORP014",156,0)
 ;
"RTN","RORP014",157,0)
 ;******************************************************************************
"RTN","RORP014",158,0)
 ;new XML tags to be added to ROR XML ITEM file (#799.31)
"RTN","RORP014",159,0)
 ;******************************************************************************
"RTN","RORP014",160,0)
XML1 ;;LOINC_CODES
"RTN","RORP014",161,0)
XML2 ;;FIRSTDIAG
"RTN","RORP014",162,0)
XML3 ;;APRI
"RTN","RORP014",163,0)
XML4 ;;FIB4
"RTN","RORP014",164,0)
XML5 ;;ULNAST
"RTN","RORP014",165,0)
 ;
"RTN","RORP014",166,0)
 ;******************************************************************************
"RTN","RORP014",167,0)
 ; Data to be added to ROR LIST ITEM file (#799.1)
"RTN","RORP014",168,0)
 ; TEXT^TYPE^REGIEN^CODE
"RTN","RORP014",169,0)
 ;******************************************************************************
"RTN","RORP014",170,0)
LI1 ;;APRI^6^1^3
"RTN","RORP014",171,0)
LI2 ;;FIB-4^6^1^4
"RTN","RORP014",172,0)
LI3 ;;APRI^6^2^3
"RTN","RORP014",173,0)
LI4 ;;FIB-4^6^2^4
"RTN","RORRP025")
0^6^B34425910^B32323014
"RTN","RORRP025",1,0)
RORRP025 ;HCIOFO/SG - RPC: RORICR CDC LOAD ;2/3/04 8:11am
"RTN","RORRP025",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**14**;Feb 17, 2006;Build 24
"RTN","RORRP025",3,0)
 ;
"RTN","RORRP025",4,0)
 ; This routine uses the following IAs:
"RTN","RORRP025",5,0)
 ;
"RTN","RORRP025",6,0)
 ; #10060        Read access to the NEW PERSON file (#200)
"RTN","RORRP025",7,0)
 ;
"RTN","RORRP025",8,0)
 ;--------------------------------------------------------------------
"RTN","RORRP025",9,0)
 ; Registry: [VA HIV]
"RTN","RORRP025",10,0)
 ;--------------------------------------------------------------------
"RTN","RORRP025",11,0)
 Q
"RTN","RORRP025",12,0)
 ;******************************************************************************
"RTN","RORRP025",13,0)
 ;******************************************************************************
"RTN","RORRP025",14,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORRP025",15,0)
 ;        
"RTN","RORRP025",16,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORRP025",17,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORRP025",18,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   CS: quit if not 'yes'
"RTN","RORRP025",19,0)
 ;******************************************************************************
"RTN","RORRP025",20,0)
 ;******************************************************************************
"RTN","RORRP025",21,0)
 ;
"RTN","RORRP025",22,0)
 ;***** DEMOGRAPHIC INFORMATION (III)
"RTN","RORRP025",23,0)
CDM(IENS) ;
"RTN","RORRP025",24,0)
 N BUF,RC,RORBUF,TMP
"RTN","RORRP025",25,0)
 S BUF="CDM"
"RTN","RORRP025",26,0)
 S RC=$$LOAD^RORRP026(IENS,"CDM^RORRP026",.BUF,.RORBUF)  Q:RC<0 RC
"RTN","RORRP025",27,0)
 ;--- Age at diagnosis
"RTN","RORRP025",28,0)
 S TMP=+$G(RORBUF(799.4,IENS,9.02,"I"))
"RTN","RORRP025",29,0)
 S:TMP=1 $P(BUF,U,4)=$G(RORBUF(799.4,IENS,9.03,"I"))
"RTN","RORRP025",30,0)
 S:TMP=2 $P(BUF,U,4)=$G(RORBUF(799.4,IENS,9.04,"I"))
"RTN","RORRP025",31,0)
 ;--- Country of birth
"RTN","RORRP025",32,0)
 S TMP=+$G(RORBUF(799.4,IENS,9.07,"I"))
"RTN","RORRP025",33,0)
 S:TMP=7 $P(BUF,U,8)=$G(RORBUF(799.4,IENS,9.08,"I"))
"RTN","RORRP025",34,0)
 S:TMP=8 $P(BUF,U,8)=$G(RORBUF(799.4,IENS,9.09,"I"))
"RTN","RORRP025",35,0)
 ;--- Store the data into the result buffer
"RTN","RORRP025",36,0)
 S RORPTR=RORPTR+1,RORDST(RORPTR)=BUF
"RTN","RORRP025",37,0)
 Q 0
"RTN","RORRP025",38,0)
 ;
"RTN","RORRP025",39,0)
 ;***** COMMENTS (X)
"RTN","RORRP025",40,0)
CMT(IENS) ;
"RTN","RORRP025",41,0)
 N BUF,I,RC,RORBUF,RORMSG,TMP
"RTN","RORRP025",42,0)
 S TMP=$$GET1^DIQ(799.4,IENS,25,,"RORBUF","RORMSG")
"RTN","RORRP025",43,0)
 I $G(DIERR)  D  Q RC
"RTN","RORRP025",44,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,799.4,IENS)
"RTN","RORRP025",45,0)
 ;--- Store the data into the result buffer
"RTN","RORRP025",46,0)
 S I=0
"RTN","RORRP025",47,0)
 F  S I=$O(RORBUF(I))  Q:I'>0  D
"RTN","RORRP025",48,0)
 . S RORPTR=RORPTR+1,RORDST(RORPTR)="CMT"_U_I_U_RORBUF(I)
"RTN","RORRP025",49,0)
 Q 0
"RTN","RORRP025",50,0)
 ;
"RTN","RORRP025",51,0)
 ;***** CLINICAL STATUS (VIII)
"RTN","RORRP025",52,0)
CS(IENS) ;
"RTN","RORRP025",53,0)
 N BUF,I,IENS1,RC,RORBUF,RORMSG,TMP
"RTN","RORRP025",54,0)
 S BUF="CS"
"RTN","RORRP025",55,0)
 S RC=$$LOAD^RORRP026(IENS,"CS^RORRP026",.BUF)  Q:RC<0 RC
"RTN","RORRP025",56,0)
 ;--- Store the data into the result buffer
"RTN","RORRP025",57,0)
 S RORPTR=RORPTR+1,RORDST(RORPTR)=BUF
"RTN","RORRP025",58,0)
 ;--- Load the AIDS Indicator diseases
"RTN","RORRP025",59,0)
 S IENS1=","_IENS,TMP="@;.01I;.02I;.03I"
"RTN","RORRP025",60,0)
 D LIST^DIC(799.41,IENS1,TMP,,,,,"B",,,"RORBUF","RORMSG")
"RTN","RORRP025",61,0)
 I $G(DIERR)  D  Q RC
"RTN","RORRP025",62,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,799.41,IENS1)
"RTN","RORRP025",63,0)
 ;--- Process the list
"RTN","RORRP025",64,0)
 S I=0
"RTN","RORRP025",65,0)
 F  S I=$O(RORBUF("DILIST","ID",I))  Q:I'>0  D
"RTN","RORRP025",66,0)
 . S BUF="AID"_U_$G(RORBUF("DILIST","ID",I,.01))
"RTN","RORRP025",67,0)
 . S TMP=$G(RORBUF("DILIST","ID",I,.02))  Q:TMP'=1
"RTN","RORRP025",68,0)
 . S $P(BUF,U,3)=TMP
"RTN","RORRP025",69,0)
 . S $P(BUF,U,4)=$$DATE^RORRP026($G(RORBUF("DILIST","ID",I,.03)))
"RTN","RORRP025",70,0)
 . ;--- Store the data into the result buffer
"RTN","RORRP025",71,0)
 . S RORPTR=RORPTR+1,RORDST(RORPTR)=BUF
"RTN","RORRP025",72,0)
 Q 0
"RTN","RORRP025",73,0)
 ;
"RTN","RORRP025",74,0)
 ;***** PROCESSES THE ERROR(S) AND UNLOCKS THE RECORDS
"RTN","RORRP025",75,0)
ERROR(RESULTS,RC) ;
"RTN","RORRP025",76,0)
 D RPCSTK^RORERR(.RESULTS,RC)
"RTN","RORRP025",77,0)
 D UNLOCK^RORLOCK(.RORLOCK)
"RTN","RORRP025",78,0)
 Q
"RTN","RORRP025",79,0)
 ;
"RTN","RORRP025",80,0)
 ;***** FACILITY OF DIAGNOSIS (IV)
"RTN","RORRP025",81,0)
FD(IENS) ;
"RTN","RORRP025",82,0)
 N BUF,RC,RORBUF,TMP
"RTN","RORRP025",83,0)
 S BUF="FD"
"RTN","RORRP025",84,0)
 S RC=$$LOAD^RORRP026(IENS,"FD^RORRP026",.BUF)  Q:RC<0 RC
"RTN","RORRP025",85,0)
 ;--- Store the data into the result buffer
"RTN","RORRP025",86,0)
 S RORPTR=RORPTR+1,RORDST(RORPTR)=BUF
"RTN","RORRP025",87,0)
 Q 0
"RTN","RORRP025",88,0)
 ;
"RTN","RORRP025",89,0)
 ;***** FORM HEADERS
"RTN","RORRP025",90,0)
HDR(IENS) ;
"RTN","RORRP025",91,0)
 N BUF,IENS200,RC,RORBUF,RORMSG,TMP
"RTN","RORRP025",92,0)
 S BUF="HDR"
"RTN","RORRP025",93,0)
 S RC=$$LOAD^RORRP026(IENS,"HDR^RORRP026",.BUF)  Q:RC<0 RC
"RTN","RORRP025",94,0)
 ;--- Date when the CDC form was completed
"RTN","RORRP025",95,0)
 S:$P(BUF,U,3)="" $P(BUF,U,3)=$$DT^XLFDT
"RTN","RORRP025",96,0)
 ;--- Person who is completing the form
"RTN","RORRP025",97,0)
 S IENS200=DUZ_","
"RTN","RORRP025",98,0)
 D GETS^DIQ(200,IENS200,".01;.132",,"RORBUF","RORMSG")
"RTN","RORRP025",99,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,200,IENS200)
"RTN","RORRP025",100,0)
 S $P(BUF,U,4)=DUZ
"RTN","RORRP025",101,0)
 S $P(BUF,U,5)=$G(RORBUF(200,IENS200,.01))
"RTN","RORRP025",102,0)
 S $P(BUF,U,6)=$G(RORBUF(200,IENS200,.132))
"RTN","RORRP025",103,0)
 ;--- Medical record number (it is the SSN now)
"RTN","RORRP025",104,0)
 S $P(BUF,U,7)=$P($G(RORDST(1)),U,6)
"RTN","RORRP025",105,0)
 ;--- Store the data into the result buffer
"RTN","RORRP025",106,0)
 S RORPTR=RORPTR+1,RORDST(RORPTR)=BUF
"RTN","RORRP025",107,0)
 Q 0
"RTN","RORRP025",108,0)
 ;
"RTN","RORRP025",109,0)
 ;***** LABORATORY DATA (VI)
"RTN","RORRP025",110,0)
LD(IENS) ;
"RTN","RORRP025",111,0)
 N BUF,FLD,RC,RORBUF,TMP
"RTN","RORRP025",112,0)
 S BUF="LD1"
"RTN","RORRP025",113,0)
 S RC=$$LOAD^RORRP026(IENS,"LD1^RORRP026",.BUF,.RORBUF)  Q:RC<0 RC
"RTN","RORRP025",114,0)
 ;--- Positive HIV detection test
"RTN","RORRP025",115,0)
 S FLD=$$PHIVFLD^RORRP026($P(BUF,U,12))
"RTN","RORRP025",116,0)
 S:FLD $P(BUF,U,13)=$$DATE^RORRP026($G(RORBUF(799.4,IENS,FLD,"I")))
"RTN","RORRP025",117,0)
 ;--- Store the data into the result buffer
"RTN","RORRP025",118,0)
 S RORPTR=RORPTR+1,RORDST(RORPTR)=BUF
"RTN","RORRP025",119,0)
 ;--- The second segment
"RTN","RORRP025",120,0)
 S BUF="LD2"
"RTN","RORRP025",121,0)
 S RC=$$LOAD^RORRP026(IENS,"LD2^RORRP026",.BUF)  Q:RC<0 RC
"RTN","RORRP025",122,0)
 ;--- Store the data into the result buffer
"RTN","RORRP025",123,0)
 S RORPTR=RORPTR+1,RORDST(RORPTR)=BUF
"RTN","RORRP025",124,0)
 Q 0
"RTN","RORRP025",125,0)
 ;
"RTN","RORRP025",126,0)
 ;***** LOADS THE ICR CDC DATA
"RTN","RORRP025",127,0)
 ; RPC: [RORICR CDC LOAD]
"RTN","RORRP025",128,0)
 ;
"RTN","RORRP025",129,0)
 ; .RORDST       Reference to a local variable where the results
"RTN","RORRP025",130,0)
 ;               are returned to.
"RTN","RORRP025",131,0)
 ;
"RTN","RORRP025",132,0)
 ; REGIEN        Registry IEN
"RTN","RORRP025",133,0)
 ;
"RTN","RORRP025",134,0)
 ; PATIEN        IEN of the registry patient (DFN)
"RTN","RORRP025",135,0)
 ;
"RTN","RORRP025",136,0)
 ; [LOCK]        Lock the ICR record before loading the data and
"RTN","RORRP025",137,0)
 ;               leave it locked.
"RTN","RORRP025",138,0)
 ;
"RTN","RORRP025",139,0)
 ; Return Values:
"RTN","RORRP025",140,0)
 ;
"RTN","RORRP025",141,0)
 ; A negative value of the first "^"-piece of the RORDST(0)
"RTN","RORRP025",142,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP025",143,0)
 ; details).
"RTN","RORRP025",144,0)
 ;
"RTN","RORRP025",145,0)
 ; If locking was requested (see the LOCK parameter) and the record
"RTN","RORRP025",146,0)
 ; could not be locked then the first "^"-piece of the RORDST(0)
"RTN","RORRP025",147,0)
 ; would be greater than 0. The RORDST(0) would contain the lock
"RTN","RORRP025",148,0)
 ; descriptor and subsequent nodes of the global array would contain
"RTN","RORRP025",149,0)
 ; the data (see below). The lock descriptor contains information
"RTN","RORRP025",150,0)
 ; about the propcess, which owns the most recent lock of the record.
"RTN","RORRP025",151,0)
 ;
"RTN","RORRP025",152,0)
 ; RORDST(0)             Lock Descriptor
"RTN","RORRP025",153,0)
 ;                         ^01: Date/Time (FileMan)
"RTN","RORRP025",154,0)
 ;                         ^02: User/Process name
"RTN","RORRP025",155,0)
 ;                         ^03: User IEN (DUZ)
"RTN","RORRP025",156,0)
 ;                         ^04: $JOB
"RTN","RORRP025",157,0)
 ;                         ^05: Task number
"RTN","RORRP025",158,0)
 ;
"RTN","RORRP025",159,0)
 ; THE DATA ARE LOADED ONLY FOR VIEWING PURPOSES (READ-ONLY)!
"RTN","RORRP025",160,0)
 ;
"RTN","RORRP025",161,0)
 ; Otherwise, zero is returned in the RORDST(0) and the subsequent
"RTN","RORRP025",162,0)
 ; nodes of the array contain the data.
"RTN","RORRP025",163,0)
 ; 
"RTN","RORRP025",164,0)
 ; RORDST(0)             0
"RTN","RORRP025",165,0)
 ;
"RTN","RORRP025",166,0)
 ; RORDST(i)             Data Item
"RTN","RORRP025",167,0)
 ;                         ^01: Type
"RTN","RORRP025",168,0)
 ;                         ^02: Sequential Number or Item Code
"RTN","RORRP025",169,0)
 ;                         ^03: Value
"RTN","RORRP025",170,0)
 ;                         ^04: ...
"RTN","RORRP025",171,0)
 ;
"RTN","RORRP025",172,0)
 ;                       Item Types:
"RTN","RORRP025",173,0)
 ;                         DEM  Demographic Information
"RTN","RORRP025",174,0)
 ;                         ADR  Patient's Address
"RTN","RORRP025",175,0)
 ;                         RCE  Race Information
"RTN","RORRP025",176,0)
 ;                         ETN  Ethnicity Information
"RTN","RORRP025",177,0)
 ;                         HDR  Headers
"RTN","RORRP025",178,0)
 ;                         CDM  CDC Demographics
"RTN","RORRP025",179,0)
 ;                         FD   Facility of Diagnosis
"RTN","RORRP025",180,0)
 ;                         PH   Patient History
"RTN","RORRP025",181,0)
 ;                         LD1  Laboratory Data
"RTN","RORRP025",182,0)
 ;                         LD2  Laboratory Data
"RTN","RORRP025",183,0)
 ;                         CS   Clinical Status
"RTN","RORRP025",184,0)
 ;                         AID  AIDS Indicator Disease
"RTN","RORRP025",185,0)
 ;                         TS1  Treatment/Services
"RTN","RORRP025",186,0)
 ;                         TS2  Treatment/Services
"RTN","RORRP025",187,0)
 ;                         CMT  Comments
"RTN","RORRP025",188,0)
 ;
"RTN","RORRP025",189,0)
 ; See the CDC FIELD TABLE section (CDCFLDS^RORRP026) and the
"RTN","RORRP025",190,0)
 ; description of the RORICR CDC LOAD remote procedure for details.
"RTN","RORRP025",191,0)
 ;
"RTN","RORRP025",192,0)
LOADCDC(RORDST,REGIEN,PATIEN,LOCK) ;
"RTN","RORRP025",193,0)
 N BUF,IEN,RC,RDONLY,RORERRDL,RORLOCK,RORPTR
"RTN","RORRP025",194,0)
 D CLEAR^RORERR("LOADCDC^RORRP025",1)
"RTN","RORRP025",195,0)
 K RORDST  S (RDONLY,RORDST(0))=0
"RTN","RORRP025",196,0)
 ;--- Check the parameters
"RTN","RORRP025",197,0)
 S RC=0  D  I RC<0  D ERROR(.RORDST,RC)  Q
"RTN","RORRP025",198,0)
 . ;--- Registry IEN
"RTN","RORRP025",199,0)
 . I $G(REGIEN)'>0  D  Q
"RTN","RORRP025",200,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"REGIEN",$G(REGIEN))
"RTN","RORRP025",201,0)
 . S REGIEN=+REGIEN
"RTN","RORRP025",202,0)
 . ;--- Patient IEN
"RTN","RORRP025",203,0)
 . I $G(PATIEN)'>0  D  Q
"RTN","RORRP025",204,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"PATIEN",$G(PATIEN))
"RTN","RORRP025",205,0)
 . S PATIEN=+PATIEN
"RTN","RORRP025",206,0)
 ;
"RTN","RORRP025",207,0)
 ;--- Load the patient's demographic data
"RTN","RORRP025",208,0)
 D GETPTDAT^RORRP021(.RORDST,PATIEN,"AER")
"RTN","RORRP025",209,0)
 Q:$G(RORDST(0))<0
"RTN","RORRP025",210,0)
 S RORPTR=+$O(RORDST(""),-1)
"RTN","RORRP025",211,0)
 ;
"RTN","RORRP025",212,0)
 ;--- Get the IEN of the registry record
"RTN","RORRP025",213,0)
 S IEN=$$PRRIEN^RORUTL01(PATIEN,REGIEN)  Q:IEN'>0
"RTN","RORRP025",214,0)
 S IENS=IEN_","
"RTN","RORRP025",215,0)
 ;
"RTN","RORRP025",216,0)
 ;--- Lock the record
"RTN","RORRP025",217,0)
 I $G(LOCK)  D  I RDONLY<0  D ERROR(.RORDST,+RDONLY)  Q
"RTN","RORRP025",218,0)
 . S RORLOCK(799.4,IENS)=""
"RTN","RORRP025",219,0)
 . S RDONLY=$$LOCK^RORLOCK(799.4,IENS)
"RTN","RORRP025",220,0)
 ;
"RTN","RORRP025",221,0)
 ;--- Create the data segments
"RTN","RORRP025",222,0)
 S RC=0  D  I RC<0  D ERROR(.RORDST,RC)  Q
"RTN","RORRP025",223,0)
 . S RC=$$HDR(IENS)  Q:RC<0
"RTN","RORRP025",224,0)
 . S RC=$$CDM(IENS)  Q:RC<0
"RTN","RORRP025",225,0)
 . S RC=$$FD(IENS)   Q:RC<0
"RTN","RORRP025",226,0)
 . S RC=$$PH(IENS)   Q:RC<0
"RTN","RORRP025",227,0)
 . S RC=$$LD(IENS)   Q:RC<0
"RTN","RORRP025",228,0)
 . S RC=$$CS(IENS)   Q:RC<0
"RTN","RORRP025",229,0)
 . S RC=$$TS(IENS)   Q:RC<0
"RTN","RORRP025",230,0)
 . S RC=$$CMT(IENS)  Q:RC<0
"RTN","RORRP025",231,0)
 ;---
"RTN","RORRP025",232,0)
 S RORDST(0)=RDONLY
"RTN","RORRP025",233,0)
 Q
"RTN","RORRP025",234,0)
 ;
"RTN","RORRP025",235,0)
 ;***** PATIENT HISTORY (V)
"RTN","RORRP025",236,0)
PH(IENS) ;
"RTN","RORRP025",237,0)
 N BUF,RC,RORBUF,TMP
"RTN","RORRP025",238,0)
 S BUF="PH"
"RTN","RORRP025",239,0)
 S RC=$$LOAD^RORRP026(IENS,"PH^RORRP026",.BUF)  Q:RC<0 RC
"RTN","RORRP025",240,0)
 ;--- Store the data into the result buffer
"RTN","RORRP025",241,0)
 S RORPTR=RORPTR+1,RORDST(RORPTR)=BUF
"RTN","RORRP025",242,0)
 Q 0
"RTN","RORRP025",243,0)
 ;
"RTN","RORRP025",244,0)
 ;***** TREATMENT/SERVICES REFERRALS (IX)
"RTN","RORRP025",245,0)
TS(IENS) ;
"RTN","RORRP025",246,0)
 N BUF,RC,RORBUF,TMP
"RTN","RORRP025",247,0)
 S BUF="TS1"
"RTN","RORRP025",248,0)
 S RC=$$LOAD^RORRP026(IENS,"TS1^RORRP026",.BUF)  Q:RC<0 RC
"RTN","RORRP025",249,0)
 ;--- Store the data into the result buffer
"RTN","RORRP025",250,0)
 S RORPTR=RORPTR+1,RORDST(RORPTR)=BUF
"RTN","RORRP025",251,0)
 ;--- The second segment
"RTN","RORRP025",252,0)
 S BUF="TS2"
"RTN","RORRP025",253,0)
 S RC=$$LOAD^RORRP026(IENS,"TS2^RORRP026",.BUF)  Q:RC<0 RC
"RTN","RORRP025",254,0)
 ;--- Store the data into the result buffer
"RTN","RORRP025",255,0)
 S RORPTR=RORPTR+1,RORDST(RORPTR)=BUF
"RTN","RORRP025",256,0)
 Q 0
"RTN","RORRP033")
0^2^B17317089^B14303142
"RTN","RORRP033",1,0)
RORRP033 ;HCIOFO/SG - RPC: HIV PATIENT LOAD ;10/27/05 2:12pm
"RTN","RORRP033",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**14**;Feb 17, 2006;Build 24
"RTN","RORRP033",3,0)
 ;
"RTN","RORRP033",4,0)
 Q
"RTN","RORRP033",5,0)
 ;
"RTN","RORRP033",6,0)
 ;******************************************************************************
"RTN","RORRP033",7,0)
 ;******************************************************************************
"RTN","RORRP033",8,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORRP033",9,0)
 ;        
"RTN","RORRP033",10,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORRP033",11,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORRP033",12,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   LOAD: Added AIDS DX - FIRST DIAGNOSED
"RTN","RORRP033",13,0)
 ;                                      (#12.08) from file 799.4 to the ICR
"RTN","RORRP033",14,0)
 ;                                      segment in the returned array
"RTN","RORRP033",15,0)
 ;******************************************************************************
"RTN","RORRP033",16,0)
 ;******************************************************************************
"RTN","RORRP033",17,0)
 ;***** PROCESSES THE ERROR(S) AND UNLOCKS THE RECORDS
"RTN","RORRP033",18,0)
ERROR(RESULTS,RC) ;
"RTN","RORRP033",19,0)
 D RPCSTK^RORERR(.RESULTS,RC)
"RTN","RORRP033",20,0)
 D UNLOCK^RORLOCK(.RORLOCK)
"RTN","RORRP033",21,0)
 Q
"RTN","RORRP033",22,0)
 ;
"RTN","RORRP033",23,0)
 ;***** LOADS THE PATIENT'S DATA FOR EDITING
"RTN","RORRP033",24,0)
 ; RPC: [RORICR PATIENT LOAD]
"RTN","RORRP033",25,0)
 ;
"RTN","RORRP033",26,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP033",27,0)
 ;               are returned to.
"RTN","RORRP033",28,0)
 ;
"RTN","RORRP033",29,0)
 ; REGIEN        Registry IEN
"RTN","RORRP033",30,0)
 ;
"RTN","RORRP033",31,0)
 ; PATIEN        IEN of the registry patient (DFN)
"RTN","RORRP033",32,0)
 ;
"RTN","RORRP033",33,0)
 ; [LOCK]        Lock the registry record before loading the data and
"RTN","RORRP033",34,0)
 ;               leave it locked.
"RTN","RORRP033",35,0)
 ;
"RTN","RORRP033",36,0)
 ; Return Values:
"RTN","RORRP033",37,0)
 ;
"RTN","RORRP033",38,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP033",39,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP033",40,0)
 ; details).
"RTN","RORRP033",41,0)
 ;
"RTN","RORRP033",42,0)
 ; If locking was requested (see the LOCK parameter) and the record
"RTN","RORRP033",43,0)
 ; could not be locked then the first "^"-piece of the @RESULTS@(0)
"RTN","RORRP033",44,0)
 ; would be greater than 0. The @RESULTS@(0) would contain the lock
"RTN","RORRP033",45,0)
 ; descriptor and subsequent nodes of the global array would contain
"RTN","RORRP033",46,0)
 ; the data (see below). The lock descriptor contains information
"RTN","RORRP033",47,0)
 ; about the process, which owns the most recent lock of the record.
"RTN","RORRP033",48,0)
 ; The "O" flag (read-only) would also be added to the 15th field
"RTN","RORRP033",49,0)
 ; of the "PRD" segment.
"RTN","RORRP033",50,0)
 ;
"RTN","RORRP033",51,0)
 ; @RESULTS@(0)          Lock Descriptor
"RTN","RORRP033",52,0)
 ;                         ^01: Date/Time (FileMan)
"RTN","RORRP033",53,0)
 ;                         ^02: User/Process name
"RTN","RORRP033",54,0)
 ;                         ^03: User IEN (DUZ)
"RTN","RORRP033",55,0)
 ;                         ^04: $JOB
"RTN","RORRP033",56,0)
 ;                         ^05: Task number
"RTN","RORRP033",57,0)
 ;
"RTN","RORRP033",58,0)
 ; THE DATA IS LOADED ONLY FOR VIEWING PURPOSES (READ-ONLY)!
"RTN","RORRP033",59,0)
 ;
"RTN","RORRP033",60,0)
 ; Otherwise, zero is returned in the @RESULTS@(0) and the
"RTN","RORRP033",61,0)
 ; subsequent nodes of the global array contain the patient's data.
"RTN","RORRP033",62,0)
 ; 
"RTN","RORRP033",63,0)
 ; @RESULTS@(0)          0
"RTN","RORRP033",64,0)
 ;
"RTN","RORRP033",65,0)
 ; @RESULTS@(i)          Demographic data
"RTN","RORRP033",66,0)
 ;                         ^01: "DEM"
"RTN","RORRP033",67,0)
 ;                         ^02: ""
"RTN","RORRP033",68,0)
 ;                         ...  See description of the ROR PATIENT
"RTN","RORRP033",69,0)
 ;                              GET DATA remote procedure
"RTN","RORRP033",70,0)
 ;
"RTN","RORRP033",71,0)
 ; @RESULTS@(i)          Basic registry data
"RTN","RORRP033",72,0)
 ;                         ^01: "PRD"
"RTN","RORRP033",73,0)
 ;                         ^02: ""
"RTN","RORRP033",74,0)
 ;                         ...  See description of the ROR PATIENT
"RTN","RORRP033",75,0)
 ;                              GET DATA remote procedure
"RTN","RORRP033",76,0)
 ;
"RTN","RORRP033",77,0)
 ; RESULTS(i)            Local field data
"RTN","RORRP033",78,0)
 ;                         ^O1: "LFV"
"RTN","RORRP033",79,0)
 ;                         ...  See description of the ROR PATIENT
"RTN","RORRP033",80,0)
 ;                              GET DATA remote procedure
"RTN","RORRP033",81,0)
 ;
"RTN","RORRP033",82,0)
 ; RESULTS(i)            Selection Rule
"RTN","RORRP033",83,0)
 ;                         ^01: "PSR"
"RTN","RORRP033",84,0)
 ;                         ...  See description of the ROR PATIENT
"RTN","RORRP033",85,0)
 ;                              GET DATA remote procedure
"RTN","RORRP033",86,0)
 ;
"RTN","RORRP033",87,0)
 ; @RESULTS@(i)          Patient's history (risk factors)
"RTN","RORRP033",88,0)
 ;                         ^01: "PH"
"RTN","RORRP033",89,0)
 ;                         ^02: ""
"RTN","RORRP033",90,0)
 ;                         ...  See description of the RORICR
"RTN","RORRP033",91,0)
 ;                              CDC LOAD remote procedure
"RTN","RORRP033",92,0)
 ;
"RTN","RORRP033",93,0)
 ; @RESULTS@(i)          Registry data
"RTN","RORRP033",94,0)
 ;                         ^01: "ICR"
"RTN","RORRP033",95,0)
 ;                         ^02: ""
"RTN","RORRP033",96,0)
 ;                         ^03: Clinical AIDS (null/0/1/9)
"RTN","RORRP033",97,0)
 ;                         ^04: Date of Clinical AIDS (FileMan)
"RTN","RORRP033",98,0)
 ;                         ^05: reserved
"RTN","RORRP033",99,0)
 ;                         ^06: HIV first DX at this facility (null,0/1/9)
"RTN","RORRP033",100,0)
 ;
"RTN","RORRP033",101,0)
LOAD(RESULTS,REGIEN,PATIEN,LOCK) ;
"RTN","RORRP033",102,0)
 N I,ICRBUF,IENS,LOCKRC,RC,RESPTR,RORBUF,RORERRDL,RORLOCK,RORMSG,TMP
"RTN","RORRP033",103,0)
 D CLEAR^RORERR("LOAD^RORRP033",1)
"RTN","RORRP033",104,0)
 K RESULTS  S RESULTS=$$ALLOC^RORTMP()
"RTN","RORRP033",105,0)
 S ICRBUF="ICR",LOCKRC=0
"RTN","RORRP033",106,0)
 ;=== Check the parameters
"RTN","RORRP033",107,0)
 S RC=0  D  I RC<0  D ERROR(.RESULTS,RC)  Q
"RTN","RORRP033",108,0)
 . ;--- Registry IEN
"RTN","RORRP033",109,0)
 . I $G(REGIEN)'>0  D  Q
"RTN","RORRP033",110,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"REGIEN",$G(REGIEN))
"RTN","RORRP033",111,0)
 . S REGIEN=+REGIEN
"RTN","RORRP033",112,0)
 . ;--- Patient IEN
"RTN","RORRP033",113,0)
 . I $G(PATIEN)'>0  D  Q
"RTN","RORRP033",114,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"PATIEN",$G(PATIEN))
"RTN","RORRP033",115,0)
 . S PATIEN=+PATIEN
"RTN","RORRP033",116,0)
 ;
"RTN","RORRP033",117,0)
 ;=== Get the IENS of the registry record
"RTN","RORRP033",118,0)
 S IENS=$$PRRIEN^RORUTL01(PATIEN,REGIEN)_","
"RTN","RORRP033",119,0)
 ;
"RTN","RORRP033",120,0)
 ;=== Lock the records
"RTN","RORRP033",121,0)
 I $G(LOCK),IENS>0  D  I LOCKRC<0  D ERROR(.RESULTS,+LOCKRC)  Q
"RTN","RORRP033",122,0)
 . S RORLOCK(798,IENS)=""
"RTN","RORRP033",123,0)
 . S RORLOCK(799.4,IENS)=""
"RTN","RORRP033",124,0)
 . S LOCKRC=$$LOCK^RORLOCK(.RORLOCK)
"RTN","RORRP033",125,0)
 ;
"RTN","RORRP033",126,0)
 ;=== Get the patient's data
"RTN","RORRP033",127,0)
 D GETPTDAT^RORRP021(.RORBUF,PATIEN,"LS",REGIEN)
"RTN","RORRP033",128,0)
 I $G(RORBUF(0))<0  D ERROR(.RESULTS,+RORBUF(0))  Q
"RTN","RORRP033",129,0)
 ;---
"RTN","RORRP033",130,0)
 S I=""
"RTN","RORRP033",131,0)
 F  S I=$O(RORBUF(I))  Q:I=""  Q:$P(RORBUF(I),U)="PRD"
"RTN","RORRP033",132,0)
 D:I'=""
"RTN","RORRP033",133,0)
 . S TMP=$P(RORBUF(I),U,15)
"RTN","RORRP033",134,0)
 . I TMP'["O"  S:LOCKRC $P(RORBUF(I),U,15)=TMP_"O" ; Read Only
"RTN","RORRP033",135,0)
 . E  D UNLOCK^RORLOCK(.RORLOCK)  S LOCKRC=0
"RTN","RORRP033",136,0)
 ;---
"RTN","RORRP033",137,0)
 M @RESULTS=RORBUF  S RESPTR=$O(RORBUF(""),-1)
"RTN","RORRP033",138,0)
 K RORBUF
"RTN","RORRP033",139,0)
 ;
"RTN","RORRP033",140,0)
 ;=== Load the ICR data
"RTN","RORRP033",141,0)
 I IENS>0  S RC=0  D  I RC<0  D ERROR(.RESULTS,RC)  Q
"RTN","RORRP033",142,0)
 . Q:$D(^RORDATA(799.4,+IENS))<10
"RTN","RORRP033",143,0)
 . ;--- Patient's history (risk factors)
"RTN","RORRP033",144,0)
 . S RORBUF="PH"
"RTN","RORRP033",145,0)
 . S RC=$$LOAD^RORRP026(IENS,"PH^RORRP026",.RORBUF)  Q:RC<0
"RTN","RORRP033",146,0)
 . S RESPTR=RESPTR+1,@RESULTS@(RESPTR)=RORBUF
"RTN","RORRP033",147,0)
 . ;--- Other registry data
"RTN","RORRP033",148,0)
 . D GETS^DIQ(799.4,IENS,".02;.03;12.08","I","RORBUF","RORMSG")
"RTN","RORRP033",149,0)
 . I $G(DIERR)  D  Q
"RTN","RORRP033",150,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,PATIEN,799.4,IENS)
"RTN","RORRP033",151,0)
 . S $P(ICRBUF,U,3)=$G(RORBUF(799.4,IENS,.02,"I")) ;send actual value
"RTN","RORRP033",152,0)
 . S $P(ICRBUF,U,4)=$G(RORBUF(799.4,IENS,.03,"I"))
"RTN","RORRP033",153,0)
 . S $P(ICRBUF,U,6)=$G(RORBUF(799.4,IENS,12.08,"I")) ;HIV first Diagnosed at this Facility?
"RTN","RORRP033",154,0)
 ;
"RTN","RORRP033",155,0)
 ;===
"RTN","RORRP033",156,0)
 S RESPTR=RESPTR+1,@RESULTS@(RESPTR)=ICRBUF
"RTN","RORRP033",157,0)
 S @RESULTS@(0)=LOCKRC
"RTN","RORRP033",158,0)
 Q
"RTN","RORRP034")
0^1^B20975903^B16836450
"RTN","RORRP034",1,0)
RORRP034 ;HIOFO/SG,VC - RPC: HIV PATIENT SAVE/CANCEL ;1/29/09 9:46am
"RTN","RORRP034",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**2,8,14**;Feb 17, 2006;Build 24
"RTN","RORRP034",3,0)
 ;Per VHA Directive 10-92-142, this routine should not be modified.
"RTN","RORRP034",4,0)
 ;
"RTN","RORRP034",5,0)
 ; This routine uses the following IAs:
"RTN","RORRP034",6,0)
 ;
"RTN","RORRP034",7,0)
 ; #2053         FILE^DIC (supported)
"RTN","RORRP034",8,0)
 Q
"RTN","RORRP034",9,0)
 ;******************************************************************************
"RTN","RORRP034",10,0)
 ;******************************************************************************
"RTN","RORRP034",11,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORRP034",12,0)
 ;        
"RTN","RORRP034",13,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORRP034",14,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORRP034",15,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   SAVE1: Added AIDS DX - FIRST DIAGNOSED
"RTN","RORRP034",16,0)
 ;                                      (#12.08) to the data that gets saved in
"RTN","RORRP034",17,0)
 ;                                      file 799.4.  Modified logic for the
"RTN","RORRP034",18,0)
 ;                                      CLINICAL AIDS DATE (#.03) to correctly
"RTN","RORRP034",19,0)
 ;                                      handle additional values (null/0/1/9).
"RTN","RORRP034",20,0)
 ;******************************************************************************
"RTN","RORRP034",21,0)
 ;******************************************************************************
"RTN","RORRP034",22,0)
 ;
"RTN","RORRP034",23,0)
 ;***** UPDATES THE PATIENT'S REGISTRY DATA
"RTN","RORRP034",24,0)
 ; RPC: [RORICR PATIENT SAVE]
"RTN","RORRP034",25,0)
 ;
"RTN","RORRP034",26,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP034",27,0)
 ;               are returned to.
"RTN","RORRP034",28,0)
 ;
"RTN","RORRP034",29,0)
 ; REGIEN        Registry IEN
"RTN","RORRP034",30,0)
 ;
"RTN","RORRP034",31,0)
 ; PTIEN         IEN of the registry patient (DFN)
"RTN","RORRP034",32,0)
 ;
"RTN","RORRP034",33,0)
 ; [CANCEL]      Cancel the update and unlock the registry data
"RTN","RORRP034",34,0)
 ;
"RTN","RORRP034",35,0)
 ; .DATA         Reference to a local array that contains the data
"RTN","RORRP034",36,0)
 ;               in the same format as the output of the RORICR
"RTN","RORRP034",37,0)
 ;               PATIENT LOAD remote procedure. Only PH, ICR, and
"RTN","RORRP034",38,0)
 ;               LFV segments are processed; the others are ignored.
"RTN","RORRP034",39,0)
 ;
"RTN","RORRP034",40,0)
 ; Revision for Patch 1.5*8 to add Comments
"RTN","RORRP034",41,0)
 ;   In DATA array there will be a 3 piece record, formated as follows
"RTN","RORRP034",42,0)
 ; PC^STAT^COMMENT  If STAT is P then the COMMENT will be added.  If
"RTN","RORRP034",43,0)
 ;                  STAT is C then the COMMENT will be a blank.
"RTN","RORRP034",44,0)
 ;
"RTN","RORRP034",45,0)
 ; Return Values:
"RTN","RORRP034",46,0)
 ;
"RTN","RORRP034",47,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP034",48,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP034",49,0)
 ; details).
"RTN","RORRP034",50,0)
 ;
"RTN","RORRP034",51,0)
 ; Otherwise, zero is returned in the RESULTS(0).
"RTN","RORRP034",52,0)
 ;
"RTN","RORRP034",53,0)
SAVE(RESULTS,REGIEN,PTIEN,CANCEL,DATA) ;
"RTN","RORRP034",54,0)
 N IENS,LOCK,RC,RORERRDL,STAT,COMMENT
"RTN","RORRP034",55,0)
 D CLEAR^RORERR("SAVE^RORRP034",1)
"RTN","RORRP034",56,0)
 K RESULTS  S (RESULTS(0),RC)=0
"RTN","RORRP034",57,0)
 D
"RTN","RORRP034",58,0)
 . ;--- Registry IEN
"RTN","RORRP034",59,0)
 . I $G(REGIEN)'>0  D  Q
"RTN","RORRP034",60,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"REGIEN",$G(REGIEN))
"RTN","RORRP034",61,0)
 . S REGIEN=+REGIEN
"RTN","RORRP034",62,0)
 . ;--- Patient IEN
"RTN","RORRP034",63,0)
 . I $G(PTIEN)'>0  D  Q
"RTN","RORRP034",64,0)
 . . S RC=$$ERROR^RORERR(-88,,,,"PTIEN",$G(PTIEN))
"RTN","RORRP034",65,0)
 . S PTIEN=+PTIEN
"RTN","RORRP034",66,0)
 . ;--- Get the IENS of the registry record
"RTN","RORRP034",67,0)
 . S IENS=$$PRRIEN^RORUTL01(PTIEN,REGIEN)_","
"RTN","RORRP034",68,0)
 . S:IENS>0 (LOCK(798,IENS),LOCK(799.4,IENS))=""
"RTN","RORRP034",69,0)
 . Q:$G(CANCEL)=1
"RTN","RORRP034",70,0)
 . ;--- Save the data
"RTN","RORRP034",71,0)
 . S RC=$$SAVE1(.IENS)
"RTN","RORRP034",72,0)
 . I '$D(LOCK)  S:IENS>0 (LOCK(798,IENS),LOCK(799.4,IENS))=""
"RTN","RORRP034",73,0)
 . S:RC>0 RESULTS(0)=RC
"RTN","RORRP034",74,0)
 ;
"RTN","RORRP034",75,0)
 ;--- Do not unlock the records if there are errors in the data
"RTN","RORRP034",76,0)
 ;    (positive value is returned by the $$SAVE1), since the user
"RTN","RORRP034",77,0)
 ;--- will have another chance to correct the data and save it.
"RTN","RORRP034",78,0)
 D:RC'>0 UNLOCK^RORLOCK(.LOCK)
"RTN","RORRP034",79,0)
 D:RC<0 RPCSTK^RORERR(.RESULTS,RC)
"RTN","RORRP034",80,0)
 Q
"RTN","RORRP034",81,0)
 ;
"RTN","RORRP034",82,0)
 ;***** INTERNAL ENTRY POINT THAT UPDATES THE REGISTRY DATA
"RTN","RORRP034",83,0)
SAVE1(IENS798) ;
"RTN","RORRP034",84,0)
 N IENS,LFIEN,LFV,RC,RDI,REGNAME,RORFDA,RORMSG,SEG,TMP
"RTN","RORRP034",85,0)
 ;
"RTN","RORRP034",86,0)
 ;=== Add the patient to the registry if necessary
"RTN","RORRP034",87,0)
 I IENS798'>0  S RC=0  D  Q:RC<0 RC
"RTN","RORRP034",88,0)
 . S REGNAME=$P($$REGNAME^RORUTL01(REGIEN),U)
"RTN","RORRP034",89,0)
 . ;--- Add the patient to the registry
"RTN","RORRP034",90,0)
 . S RC=$$ADDPAT^RORUPD06(PTIEN,REGNAME)  Q:RC<0
"RTN","RORRP034",91,0)
 . ;--- Get the IENS of the registry record
"RTN","RORRP034",92,0)
 . S IENS798=$$PRRIEN^RORUTL01(PTIEN,REGIEN)_","
"RTN","RORRP034",93,0)
 . S:IENS798'>0 RC=$$ERROR^RORERR(-97,,,PTIEN,REGNAME)
"RTN","RORRP034",94,0)
 ;
"RTN","RORRP034",95,0)
 ;=== Prepare the data
"RTN","RORRP034",96,0)
 N LFCNT ;added 'new' statement
"RTN","RORRP034",97,0)
 S (LFCNT,RDI,RC)=0
"RTN","RORRP034",98,0)
 F  S RDI=$O(DATA(RDI))  Q:RDI'>0  D  Q:RC
"RTN","RORRP034",99,0)
 . S SEG=$P(DATA(RDI),U)
"RTN","RORRP034",100,0)
 . ;--- Risk factors
"RTN","RORRP034",101,0)
 . I SEG="PH"  D  Q
"RTN","RORRP034",102,0)
 . . S RC=$$CDCFDA^RORRP026(IENS798,"PH^RORRP026",DATA(RDI),.RORFDA)
"RTN","RORRP034",103,0)
 . ;--- Registry data
"RTN","RORRP034",104,0)
 . I SEG="ICR"  D  Q
"RTN","RORRP034",105,0)
 . . S TMP=$P(DATA(RDI),U,3)
"RTN","RORRP034",106,0)
 . . S RORFDA(799.4,IENS798,.02)=$G(TMP) ;clinical AIDS
"RTN","RORRP034",107,0)
 . . ;S RORFDA(799.4,IENS798,.03)=$S(TMP:$P(DATA(RDI),U,4),1:"")
"RTN","RORRP034",108,0)
 . . S RORFDA(799.4,IENS798,.03)=$S($G(TMP)=1:$P(DATA(RDI),U,4),1:"") ;clinical AIDS date
"RTN","RORRP034",109,0)
 . . S RORFDA(799.4,IENS798,12.08)=$P(DATA(RDI),U,6) ;first VA site to diagnose HIV
"RTN","RORRP034",110,0)
 . ;--- Local field values
"RTN","RORRP034",111,0)
 . I SEG="LFV"  D  Q
"RTN","RORRP034",112,0)
 . . S LFIEN=+$P(DATA(RDI),U,3)
"RTN","RORRP034",113,0)
 . . S:LFIEN>0 LFV(LFIEN)=DATA(RDI)
"RTN","RORRP034",114,0)
 . ;---  If there is a comment for a Pending Patient
"RTN","RORRP034",115,0)
 . I SEG="PC" D  Q
"RTN","RORRP034",116,0)
 . . S STAT=$P(DATA(RDI),U,2)
"RTN","RORRP034",117,0)
 . . S COMMENT=$P(DATA(RDI),U,3)
"RTN","RORRP034",118,0)
 Q:RC RC
"RTN","RORRP034",119,0)
 ;
"RTN","RORRP034",120,0)
 ;=== Confirm the pending patient
"RTN","RORRP034",121,0)
 ;D:$$GET1^DIQ(798,IENS798,3,"I",,"RORMSG")=4
"RTN","RORRP034",122,0)
 I CANCEL=0 D
"RTN","RORRP034",123,0)
 . ;--- Do not clear the DON'T SEND flag for 'test' patients
"RTN","RORRP034",124,0)
 . S:'$$TESTPAT^RORUTL01(PTIEN) RORFDA(798,IENS798,11)="@"
"RTN","RORRP034",125,0)
 . ;--- Change the STATUS from 'Pending' to 'Active'
"RTN","RORRP034",126,0)
 . S RORFDA(798,IENS798,3)=0
"RTN","RORRP034",127,0)
 . ;--- Delete any comment fields
"RTN","RORRP034",128,0)
 . S RORFDA(798,IENS798,12)=" "
"RTN","RORRP034",129,0)
 ;
"RTN","RORRP034",130,0)
 ;=== Update local fields
"RTN","RORRP034",131,0)
 ;S RC=$$UPDLFV^RORUTL19(IENS798,.LFV)  Q:RC<0 RC
"RTN","RORRP034",132,0)
 S RC=$$UPDLFV^RORUTL19(IENS798,.LFV)
"RTN","RORRP034",133,0)
 S:RC RORFDA(798,IENS798,5)=1  ; UPDATE LOCAL REGISTRY DATA
"RTN","RORRP034",134,0)
 ;=== Update the COMMENTS field
"RTN","RORRP034",135,0)
 I STAT="P" S RORFDA(798,IENS798,12)=$G(COMMENT)
"RTN","RORRP034",136,0)
 ;
"RTN","RORRP034",137,0)
 ;=== Update the record(s)
"RTN","RORRP034",138,0)
 I $D(RORFDA)>1  D  Q:RC<0 RC
"RTN","RORRP034",139,0)
 . ; UPDATE LOCAL REGISTRY DATA
"RTN","RORRP034",140,0)
 . K RORMSG D FILE^DIE(,"RORFDA","RORMSG")
"RTN","RORRP034",141,0)
 . ;S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,PTIEN,"798&799.4",IENS798)
"RTN","RORRP034",142,0)
 . S:$G(RORMSG("DIERR")) RC=$$DBS^RORERR("RORMSG",-9,,PTIEN,"798&799.4",IENS798)
"RTN","RORRP034",143,0)
 ;
"RTN","RORRP034",144,0)
 ;=== Success
"RTN","RORRP034",145,0)
 Q 0
"RTN","RORUPD01")
0^11^B79263856^B64834418
"RTN","RORUPD01",1,0)
RORUPD01 ;HCIOFO/SG - PROCESSING OF THE FILES ;7/21/03 10:19am
"RTN","RORUPD01",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**14**;Feb 17, 2006;Build 24
"RTN","RORUPD01",3,0)
 ;
"RTN","RORUPD01",4,0)
 ; This routine uses the following IA's:
"RTN","RORUPD01",5,0)
 ;
"RTN","RORUPD01",6,0)
 ; #3646         $$EMPL^DGSEC4
"RTN","RORUPD01",7,0)
 ; #10035        Browse through IENs of the file #2
"RTN","RORUPD01",8,0)
 Q
"RTN","RORUPD01",9,0)
 ;******************************************************************************
"RTN","RORUPD01",10,0)
 ;******************************************************************************
"RTN","RORUPD01",11,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORUPD01",12,0)
 ;        
"RTN","RORUPD01",13,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUPD01",14,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUPD01",15,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   Tags HCVLOAD and HCVLIST added for auto-
"RTN","RORUPD01",16,0)
 ;                                      confirm functionality.  PROCESS: call
"RTN","RORUPD01",17,0)
 ;                                      to tag HCVLOAD is added.
"RTN","RORUPD01",18,0)
 ;******************************************************************************
"RTN","RORUPD01",19,0)
 ;******************************************************************************
"RTN","RORUPD01",20,0)
 ;
"RTN","RORUPD01",21,0)
 ;
"RTN","RORUPD01",22,0)
 ;***** CHECKS FOR A STOP REQUESTS (TASKMAN & PROPRIETARY)
"RTN","RORUPD01",23,0)
 ;
"RTN","RORUPD01",24,0)
 ; Return Values:
"RTN","RORUPD01",25,0)
 ;        0  Continue running
"RTN","RORUPD01",26,0)
 ;        1  Stop the subtask
"RTN","RORUPD01",27,0)
 ;
"RTN","RORUPD01",28,0)
CHKSTOP() ;
"RTN","RORUPD01",29,0)
 Q:'$G(RORUPD("JOB")) $$S^%ZTLOAD
"RTN","RORUPD01",30,0)
 L +@RORUPDPI@("T",0):0
"RTN","RORUPD01",31,0)
 I  L -@RORUPDPI@("T",0)  Q 1
"RTN","RORUPD01",32,0)
 Q $$S^%ZTLOAD
"RTN","RORUPD01",33,0)
 ;
"RTN","RORUPD01",34,0)
 ;***** LOAD DATA ELEMENTS
"RTN","RORUPD01",35,0)
 ;
"RTN","RORUPD01",36,0)
 ; IENS          IENS of the current record
"RTN","RORUPD01",37,0)
 ;
"RTN","RORUPD01",38,0)
 ; Return values:
"RTN","RORUPD01",39,0)
 ;       <0  Error code
"RTN","RORUPD01",40,0)
 ;        0  Ok
"RTN","RORUPD01",41,0)
 ;
"RTN","RORUPD01",42,0)
LOAD(IENS) ;
"RTN","RORUPD01",43,0)
 N RC  S RC=0
"RTN","RORUPD01",44,0)
 ;--- API #1
"RTN","RORUPD01",45,0)
 I $D(RORUPD("SR",2,"F",1))  D  Q:RC<0 RC
"RTN","RORUPD01",46,0)
 . S RC=$$LOADFLDS^RORUPDUT(2,IENS)
"RTN","RORUPD01",47,0)
 ;--- API #2
"RTN","RORUPD01",48,0)
 Q 0
"RTN","RORUPD01",49,0)
 ;
"RTN","RORUPD01",50,0)
 ;***** INITIALIZES LOOP CONTROL LISTS
"RTN","RORUPD01",51,0)
 ;
"RTN","RORUPD01",52,0)
 ; PATIEN        Patient IEN
"RTN","RORUPD01",53,0)
 ;
"RTN","RORUPD01",54,0)
 ; Return Values:
"RTN","RORUPD01",55,0)
 ;       <0  Error code
"RTN","RORUPD01",56,0)
 ;        0  Ok
"RTN","RORUPD01",57,0)
 ;
"RTN","RORUPD01",58,0)
 ; The RORUPD("LM",1,Rule Name) list contains names of the top level
"RTN","RORUPD01",59,0)
 ; rules that have not been triggered by now.
"RTN","RORUPD01",60,0)
 ;
"RTN","RORUPD01",61,0)
 ; The RORUPD("LM",2,Registry#) list contains IENs of the registries
"RTN","RORUPD01",62,0)
 ; that do not contain the patient by now.
"RTN","RORUPD01",63,0)
 ;
"RTN","RORUPD01",64,0)
 ; If the patient is an employee and the registry must not include
"RTN","RORUPD01",65,0)
 ; employees (see the EXCLUDE EMPLOYEES field of the ROR REGISTRY
"RTN","RORUPD01",66,0)
 ; PARAMETERS file), the function initializes the corresponding items
"RTN","RORUPD01",67,0)
 ; of control lists as if the patient were already in the registry.
"RTN","RORUPD01",68,0)
 ; Therefore, the patient will not be added to this registry.
"RTN","RORUPD01",69,0)
 ;
"RTN","RORUPD01",70,0)
LOOPINIT(PATIEN) ;
"RTN","RORUPD01",71,0)
 N I,EMPL,REGIEN
"RTN","RORUPD01",72,0)
 K RORUPD("LM",1),RORUPD("LM",2)
"RTN","RORUPD01",73,0)
 S EMPL=$$EMPL^DGSEC4(PATIEN,"P")
"RTN","RORUPD01",74,0)
 M RORUPD("LM",1)=RORUPD("LM1")
"RTN","RORUPD01",75,0)
 S REGIEN=""
"RTN","RORUPD01",76,0)
 F  S REGIEN=$O(RORUPD("LM2",REGIEN))  Q:REGIEN=""  D
"RTN","RORUPD01",77,0)
 . S $P(RORUPD("LM2",REGIEN),U)=0
"RTN","RORUPD01",78,0)
 . ;--- Check if the patient is already in the registry
"RTN","RORUPD01",79,0)
 . Q:$D(^RORDATA(798,"KEY",PATIEN,REGIEN))
"RTN","RORUPD01",80,0)
 . ;--- Check if the patient is an employee and the
"RTN","RORUPD01",81,0)
 . ;--- employees must not be added to the registry
"RTN","RORUPD01",82,0)
 . I EMPL  Q:$P(RORUPD("LM2",REGIEN),U,2)
"RTN","RORUPD01",83,0)
 . ;--- Initialize the items of control lists
"RTN","RORUPD01",84,0)
 . S $P(RORUPD("LM2",REGIEN),U)=1,RORUPD("LM",2,REGIEN)=""
"RTN","RORUPD01",85,0)
 Q 0
"RTN","RORUPD01",86,0)
 ;
"RTN","RORUPD01",87,0)
 ;***** PROCESS EVERY PATIENT IN THE 'PATIENT' FILE
"RTN","RORUPD01",88,0)
 ;
"RTN","RORUPD01",89,0)
 ; BEGIEN        Start IEN in the PATIENT file
"RTN","RORUPD01",90,0)
 ; ENDIEN        End IEN in the PATIENT file
"RTN","RORUPD01",91,0)
 ;
"RTN","RORUPD01",92,0)
 ; Return Values:
"RTN","RORUPD01",93,0)
 ;       <0  Error code
"RTN","RORUPD01",94,0)
 ;      >=0  Statistics
"RTN","RORUPD01",95,0)
 ;             ^1: Total number of processed patients
"RTN","RORUPD01",96,0)
 ;             ^2: Number of patients processed with errors
"RTN","RORUPD01",97,0)
 ;
"RTN","RORUPD01",98,0)
 ; If there is an error in processing of a patient, routine behavior
"RTN","RORUPD01",99,0)
 ; depends on the mode of execution:
"RTN","RORUPD01",100,0)
 ;
"RTN","RORUPD01",101,0)
 ; In the normal mode program logs the errors, adds a record to the
"RTN","RORUPD01",102,0)
 ; ROR PATIENT EVENTS file (#798.3), and continues processing of
"RTN","RORUPD01",103,0)
 ; the remaining patients. Next registry update wil start data scan
"RTN","RORUPD01",104,0)
 ; for this patient from the date stored in the file #798.3.
"RTN","RORUPD01",105,0)
 ;
"RTN","RORUPD01",106,0)
 ; In the debug mode 3 program is aborted if there is an error
"RTN","RORUPD01",107,0)
 ; during processing of a patient.
"RTN","RORUPD01",108,0)
 ;
"RTN","RORUPD01",109,0)
PROCESS(BEGIEN,ENDIEN) ;
"RTN","RORUPD01",110,0)
 ;Patch 14 adds functionality to automatically confirm patients with
"RTN","RORUPD01",111,0)
 ;certain HCV LOINCs.  A list of the LOINCs are loaded into an array
"RTN","RORUPD01",112,0)
 ;for future comparison
"RTN","RORUPD01",113,0)
 D HCVLOAD ;Load list of HCV LOINCs into an array for use in HCV^RORUPD04
"RTN","RORUPD01",114,0)
 N CNT,DTNEXT,ECNT,EXIT,PATIEN,RC,TH,TMP
"RTN","RORUPD01",115,0)
 ;--- Loop through the patients
"RTN","RORUPD01",116,0)
 S:$G(ENDIEN)'>0 ENDIEN=0
"RTN","RORUPD01",117,0)
 S PATIEN=$S($G(BEGIEN)>0:$O(^DPT(BEGIEN),-1),1:0)
"RTN","RORUPD01",118,0)
 S (CNT,ECNT,EXIT,RC)=0
"RTN","RORUPD01",119,0)
 F  S PATIEN=$O(^DPT(PATIEN))  Q:PATIEN'>0  D  Q:EXIT!(RC<0)
"RTN","RORUPD01",120,0)
 . I ENDIEN,PATIEN'<ENDIEN  S EXIT=1  Q
"RTN","RORUPD01",121,0)
 . ;--- For a queued task only
"RTN","RORUPD01",122,0)
 . I $D(ZTQUEUED)  S RC=0  D  Q:RC<0
"RTN","RORUPD01",123,0)
 . . ;--- Check if task stop has been requested
"RTN","RORUPD01",124,0)
 . . I $$CHKSTOP()  S RC=$$ERROR^RORERR(-42)  Q
"RTN","RORUPD01",125,0)
 . . ;--- Check if the task should be suspended
"RTN","RORUPD01",126,0)
 . . Q:'$G(RORUPD("SUSPEND"))
"RTN","RORUPD01",127,0)
 . . Q:$$NOW^XLFDT<$G(DTNEXT)
"RTN","RORUPD01",128,0)
 . . Q:'$$SUSPEND(.DTNEXT)
"RTN","RORUPD01",129,0)
 . . ;--- Suspend the task during the peak hours
"RTN","RORUPD01",130,0)
 . . F  D  Q:'TH!(RC<0)
"RTN","RORUPD01",131,0)
 . . . S TH=$$FMDIFF^XLFDT(DTNEXT,$$NOW^XLFDT,2)
"RTN","RORUPD01",132,0)
 . . . I TH<60  S TH=0  Q       ; Do not HANG for less than a
"RTN","RORUPD01",133,0)
 . . . H $S(TH>3600:3600,1:TH)  ; minute and more than an hour
"RTN","RORUPD01",134,0)
 . . . ;--- Check if task stop has been requested
"RTN","RORUPD01",135,0)
 . . . S:$$CHKSTOP() RC=$$ERROR^RORERR(-42)
"RTN","RORUPD01",136,0)
 . ;--- Update the progress indicator
"RTN","RORUPD01",137,0)
 . S CNT=CNT+1
"RTN","RORUPD01",138,0)
 . I $G(RORPARM("DEBUG"))>1  W:$E($G(IOST),1,2)="C-" *13,CNT
"RTN","RORUPD01",139,0)
 . ;--- Process the patient
"RTN","RORUPD01",140,0)
 . S RC=$$PROCPAT(PATIEN)
"RTN","RORUPD01",141,0)
 . I $G(RORPARM("SETUP"))  D:'(CNT#1000)
"RTN","RORUPD01",142,0)
 . . D LOG^RORLOG(2,"Number of patients processed by now: "_CNT)
"RTN","RORUPD01",143,0)
 . ;--- Process the error (if any)
"RTN","RORUPD01",144,0)
 . I RC<0  D  S:$G(RORPARM("DEBUG"))<3 RC=0
"RTN","RORUPD01",145,0)
 . . I RC=-66  S RC=0  Q        ; Counter in the file #798.3
"RTN","RORUPD01",146,0)
 . . S ECNT=ECNT+1
"RTN","RORUPD01",147,0)
 . . S RC=$$ERROR^RORERR(-15,,,PATIEN)
"RTN","RORUPD01",148,0)
 . . ;--- Create a record in the file #798.3
"RTN","RORUPD01",149,0)
 . . S TMP=$$ADD^RORUPP01(PATIEN,RORUPD("DSBEG"))
"RTN","RORUPD01",150,0)
 . . S:TMP<0 RC=TMP
"RTN","RORUPD01",151,0)
 K ^TMP("ROR HCV LIST"),^TMP("ROR HCV CONFIRM")
"RTN","RORUPD01",152,0)
 Q $S(RC<0:RC,1:CNT_"^"_ECNT)
"RTN","RORUPD01",153,0)
 ;
"RTN","RORUPD01",154,0)
 ;***** PROCESSES PATIENT'S DATA (EXCEPT DEMOGRAPHIC DATA)
"RTN","RORUPD01",155,0)
 ;
"RTN","RORUPD01",156,0)
 ; PATIEN        Patient IEN
"RTN","RORUPD01",157,0)
 ; [NOUPD]       Disable registry update (0 by default)
"RTN","RORUPD01",158,0)
 ;
"RTN","RORUPD01",159,0)
 ; Return Values:
"RTN","RORUPD01",160,0)
 ;       <0  Error code
"RTN","RORUPD01",161,0)
 ;        0  Ok
"RTN","RORUPD01",162,0)
 ;
"RTN","RORUPD01",163,0)
 ; If there is a record for the patient in the ROR PATIENT EVENTS
"RTN","RORUPD01",164,0)
 ; file (#798.3) and date in that record is less than a value of the
"RTN","RORUPD01",165,0)
 ; RORUPD("DSBEG") then it is used as a start date of the data scan
"RTN","RORUPD01",166,0)
 ; for the patient. Otherwise, the RORUPD("DSBEG") is used.
"RTN","RORUPD01",167,0)
 ;
"RTN","RORUPD01",168,0)
PROCPAT(PATIEN,NOUPD) ;
"RTN","RORUPD01",169,0)
 ;--- Quit if the patient has already been processed
"RTN","RORUPD01",170,0)
 Q:$D(@RORUPDPI@("U",PATIEN)) 0
"RTN","RORUPD01",171,0)
 ;--- Quit if the patient's record has been merged
"RTN","RORUPD01",172,0)
 Q:$G(^DPT(PATIEN,-9)) 0
"RTN","RORUPD01",173,0)
 ;--- Do not update the registries with a "test patient"
"RTN","RORUPD01",174,0)
 I '$G(NOUPD),$$TESTPAT^RORUTL01(PATIEN) D  Q 0
"RTN","RORUPD01",175,0)
 . S @RORUPDPI@("U",PATIEN)=""
"RTN","RORUPD01",176,0)
 ;
"RTN","RORUPD01",177,0)
 N RORERRDL      ; Default error location
"RTN","RORUPD01",178,0)
 ;
"RTN","RORUPD01",179,0)
 N PATIENS,RC,RLST,RORMSG,SDSDT,TMP,UPDREG,UPDSTART
"RTN","RORUPD01",180,0)
 S PATIENS=PATIEN_","
"RTN","RORUPD01",181,0)
 ;--- Initialize the variables
"RTN","RORUPD01",182,0)
 D CLEAR^RORERR("PROCPAT^RORUPD01"),CLREC^RORUPDUT
"RTN","RORUPD01",183,0)
 K RORVALS ; Clear all calculated values
"RTN","RORUPD01",184,0)
 S RC=$$LOOPINIT(PATIEN)  Q:RC<0 RC
"RTN","RORUPD01",185,0)
 ;
"RTN","RORUPD01",186,0)
 ;--- If the loop control list of registries is empty, the patient
"RTN","RORUPD01",187,0)
 ;    is already in all the registries that we are going to process.
"RTN","RORUPD01",188,0)
 S UPDREG=0
"RTN","RORUPD01",189,0)
 I $D(RORUPD("LM",2))>1  S RC=0  D  G:RC<0 PPEX  S UPDREG='$G(NOUPD)
"RTN","RORUPD01",190,0)
 . ;--- Determine start date of the data scan
"RTN","RORUPD01",191,0)
 . S UPDSTART=RORUPD("DSBEG")
"RTN","RORUPD01",192,0)
 . S SDSDT=$$SDSDATE^RORUPP01(PATIEN)
"RTN","RORUPD01",193,0)
 . I SDSDT<0  S RC=SDSDT  Q
"RTN","RORUPD01",194,0)
 . I SDSDT  S:SDSDT<UPDSTART UPDSTART=SDSDT
"RTN","RORUPD01",195,0)
 . S UPDSTART=$$FMADD^XLFDT(UPDSTART\1,-RORUPD("LD",1))
"RTN","RORUPD01",196,0)
 . ;--- Load necessary data elements
"RTN","RORUPD01",197,0)
 . I $D(RORUPD("SR",2,"F"))>1  D  Q:RC<0
"RTN","RORUPD01",198,0)
 . . S RC=$$LOAD(PATIENS)
"RTN","RORUPD01",199,0)
 . D SETVAL^RORUPDUT("ROR DFN",PATIEN)
"RTN","RORUPD01",200,0)
 . ;--- Apply "before" rules
"RTN","RORUPD01",201,0)
 . S RC=$$APLRULES^RORUPDUT(2,PATIENS,"B")  Q:RC
"RTN","RORUPD01",202,0)
 . ;
"RTN","RORUPD01",203,0)
 . ;--- Process patient data from other VistA files
"RTN","RORUPD01",204,0)
 . I $D(RORUPD("SR",9000010))  D  Q:RC
"RTN","RORUPD01",205,0)
 . . S RC=$$VISIT^RORUPD08(UPDSTART,PATIEN)
"RTN","RORUPD01",206,0)
 . I $D(RORUPD("SR",9000011))  D  Q:RC
"RTN","RORUPD01",207,0)
 . . S RC=$$PROBLEM^RORUPD07(UPDSTART,PATIEN)
"RTN","RORUPD01",208,0)
 . I $D(RORUPD("SR",45))  D       Q:RC
"RTN","RORUPD01",209,0)
 . . S RC=$$PTF^RORUPD09(UPDSTART,PATIEN)
"RTN","RORUPD01",210,0)
 . I $D(RORUPD("SR",63))  D       Q:RC
"RTN","RORUPD01",211,0)
 . . S RC=$$LAB^RORUPD04(UPDSTART,PATIEN)
"RTN","RORUPD01",212,0)
 . ; <--- Insert processing of other files here. Do not forget to add
"RTN","RORUPD01",213,0)
 . ;      definitions of these files into the 'ROR METADATA' file.
"RTN","RORUPD01",214,0)
 . ;
"RTN","RORUPD01",215,0)
 . ;--- Apply "after" rules
"RTN","RORUPD01",216,0)
 . S RC=$$APLRULES^RORUPDUT(2,PATIENS,"A")  Q:RC
"RTN","RORUPD01",217,0)
 ;
"RTN","RORUPD01",218,0)
 ;--- Update the registries if necessary
"RTN","RORUPD01",219,0)
 I UPDREG  S RC=$$UPDREG^RORUPD50(PATIEN)  G:RC<0 PPEX
"RTN","RORUPD01",220,0)
 ;--- Error processing
"RTN","RORUPD01",221,0)
 I $$GETEC^RORUPDUT  D  S RC=-15
"RTN","RORUPD01",222,0)
 . S RLST=$NA(@RORUPDPI@("U",PATIEN,2))
"RTN","RORUPD01",223,0)
 E  S RLST="",RC=0
"RTN","RORUPD01",224,0)
 ;--- If there are records in the file #798.3 for the patient,
"RTN","RORUPD01",225,0)
 ;    remove them (log a warning if cannot remove). If the patient
"RTN","RORUPD01",226,0)
 ;    has been processed with errors, remove only records associated
"RTN","RORUPD01",227,0)
 ;--- with the registries that the patient has been added to.
"RTN","RORUPD01",228,0)
 D:$G(SDSDT)
"RTN","RORUPD01",229,0)
 . S TMP=$$REMOVE^RORUPP01(PATIEN,RLST)
"RTN","RORUPD01",230,0)
 . S:TMP<0 TMP=$$ERROR^RORERR(-31,,,PATIEN)
"RTN","RORUPD01",231,0)
 ;--- Mark the patient as processed
"RTN","RORUPD01",232,0)
 S @RORUPDPI@("U",PATIEN)=""
"RTN","RORUPD01",233,0)
PPEX ;--- Cleanup
"RTN","RORUPD01",234,0)
 D CLRDES^RORUPDUT(2)
"RTN","RORUPD01",235,0)
 Q RC
"RTN","RORUPD01",236,0)
 ;
"RTN","RORUPD01",237,0)
 ;***** CHECKS IF THE TASK SHOULD BE SUSPENDED
"RTN","RORUPD01",238,0)
 ;
"RTN","RORUPD01",239,0)
 ; .DTNEXT       Date/Time of the next event (suspend/resume)
"RTN","RORUPD01",240,0)
 ;               is returned via this parameter
"RTN","RORUPD01",241,0)
 ;
"RTN","RORUPD01",242,0)
 ; Return Values:
"RTN","RORUPD01",243,0)
 ;        0  Continue/Resume
"RTN","RORUPD01",244,0)
 ;        1  Suspend
"RTN","RORUPD01",245,0)
 ;
"RTN","RORUPD01",246,0)
SUSPEND(DTNEXT) ;
"RTN","RORUPD01",247,0)
 N DATE,NOW,SUSPEND,TIME,TS,TR
"RTN","RORUPD01",248,0)
 S TS=$P(RORUPD("SUSPEND"),U,1)
"RTN","RORUPD01",249,0)
 S TR=$P(RORUPD("SUSPEND"),U,2)
"RTN","RORUPD01",250,0)
 S NOW=$$NOW^XLFDT,DATE=NOW\1
"RTN","RORUPD01",251,0)
 ;--- A working day
"RTN","RORUPD01",252,0)
 I $$WDCHK^RORUTL01(DATE)  D  Q SUSPEND
"RTN","RORUPD01",253,0)
 . S TIME=NOW-DATE,SUSPEND=0
"RTN","RORUPD01",254,0)
 . I TIME<TS   S DTNEXT=DATE+TS  Q
"RTN","RORUPD01",255,0)
 . I TIME'<TR  S DTNEXT=$$WDNEXT^RORUTL01(DATE)+TS  Q
"RTN","RORUPD01",256,0)
 . S DTNEXT=DATE+TR,SUSPEND=1
"RTN","RORUPD01",257,0)
 ;--- Saturday, Sunday or Holiday
"RTN","RORUPD01",258,0)
 S DTNEXT=$$WDNEXT^RORUTL01(DATE)+TS
"RTN","RORUPD01",259,0)
 Q 0
"RTN","RORUPD01",260,0)
 ;
"RTN","RORUPD01",261,0)
 ;***** UPDATES REGISTRY UPDATE PARAMETERS
"RTN","RORUPD01",262,0)
 ;
"RTN","RORUPD01",263,0)
 ; .REGLST       Reference to a local array containing registry names
"RTN","RORUPD01",264,0)
 ;               as subscripts and optional registry IENs as values
"RTN","RORUPD01",265,0)
 ;
"RTN","RORUPD01",266,0)
 ; Return values:
"RTN","RORUPD01",267,0)
 ;       <0  Error code
"RTN","RORUPD01",268,0)
 ;        0  Ok
"RTN","RORUPD01",269,0)
 ;
"RTN","RORUPD01",270,0)
TMSTMP(REGLST) ;
"RTN","RORUPD01",271,0)
 N DATE,RC,REGIEN,REGIENS,REGNAME,RORFDA,RORMSG,TMP
"RTN","RORUPD01",272,0)
 S REGNAME="",RC=0
"RTN","RORUPD01",273,0)
 F  S REGNAME=$O(REGLST(REGNAME))  Q:REGNAME=""  D  Q:RC<0
"RTN","RORUPD01",274,0)
 . S REGIEN=+$G(REGLST(REGNAME))
"RTN","RORUPD01",275,0)
 . I REGIEN'>0  D  I REGIEN'>0  S RC=+REGIEN  Q
"RTN","RORUPD01",276,0)
 . . S REGIEN=$$REGIEN^RORUTL02(REGNAME)
"RTN","RORUPD01",277,0)
 . S REGIENS=REGIEN_","
"RTN","RORUPD01",278,0)
 . ;--- Check if the new date until that registry is updated is
"RTN","RORUPD01",279,0)
 . ;    greater than that stored in the registry parameters
"RTN","RORUPD01",280,0)
 . S TMP=$$GET1^DIQ(798.1,REGIENS,1,"I",,"RORMSG")
"RTN","RORUPD01",281,0)
 . I $G(DIERR)  D  Q
"RTN","RORUPD01",282,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,,798.1,REGIENS)
"RTN","RORUPD01",283,0)
 . S DATE=RORUPD("DSEND")\1
"RTN","RORUPD01",284,0)
 . S:DATE>TMP RORFDA(798.1,REGIENS,1)=DATE
"RTN","RORUPD01",285,0)
 . ;--- Update registry parameters (if necessary)
"RTN","RORUPD01",286,0)
 . Q:$D(RORFDA)<10
"RTN","RORUPD01",287,0)
 . D FILE^DIE("K","RORFDA","RORMSG")
"RTN","RORUPD01",288,0)
 . I $G(DIERR)  D  Q
"RTN","RORUPD01",289,0)
 . . S RC=$$DBS^RORERR("RORMSG",-9,,,798.1,REGIENS)
"RTN","RORUPD01",290,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORUPD01",291,0)
 ;
"RTN","RORUPD01",292,0)
 ;***** LOAD LIST OF HCV LOINCS INTO AN ARRAY FOR USE IN ADD^RORUPD50
"RTN","RORUPD01",293,0)
 ;
"RTN","RORUPD01",294,0)
HCVLOAD ;
"RTN","RORUPD01",295,0)
 K ^TMP("ROR HCV LIST") ;initialize HCV arrays
"RTN","RORUPD01",296,0)
 N I,RORDONE,RORLOINC
"RTN","RORUPD01",297,0)
 S RORDONE=0
"RTN","RORUPD01",298,0)
 F I=1:1 S RORLOINC=$P($T(HCVLIST+I),";;",2) Q:RORDONE  D
"RTN","RORUPD01",299,0)
 . I (($G(RORLOINC)="END OF LIST")!($G(RORLOINC)="")) S RORDONE=1 Q
"RTN","RORUPD01",300,0)
 . S ^TMP("ROR HCV LIST",$J,RORLOINC)="" ;add LOINC to array
"RTN","RORUPD01",301,0)
 ;
"RTN","RORUPD01",302,0)
 Q
"RTN","RORUPD01",303,0)
 ;LIST OF HCV LOINCS
"RTN","RORUPD01",304,0)
 ;Patients with a positive value in any of these HCV LOINCs will be confirmed into
"RTN","RORUPD01",305,0)
 ;the registry during the nightly update.  If a LOINC needs to be added to the
"RTN","RORUPD01",306,0)
 ;list, add it above the 'end of list' entry.
"RTN","RORUPD01",307,0)
HCVLIST ;
"RTN","RORUPD01",308,0)
 ;;11011-4
"RTN","RORUPD01",309,0)
 ;;29609-5
"RTN","RORUPD01",310,0)
 ;;34703-9
"RTN","RORUPD01",311,0)
 ;;34704-7
"RTN","RORUPD01",312,0)
 ;;10676-5
"RTN","RORUPD01",313,0)
 ;;20416-4
"RTN","RORUPD01",314,0)
 ;;20571-6
"RTN","RORUPD01",315,0)
 ;;49758-6
"RTN","RORUPD01",316,0)
 ;;50023-1
"RTN","RORUPD01",317,0)
 ;;END OF LIST
"RTN","RORUPD04")
0^12^B52479479^B32325986
"RTN","RORUPD04",1,0)
RORUPD04 ;HCIOFO/SG - PROCESSING OF THE LAB DATA ;12/8/05 8:20am
"RTN","RORUPD04",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**14**;Feb 17, 2006;Build 24
"RTN","RORUPD04",3,0)
 ;
"RTN","RORUPD04",4,0)
 Q
"RTN","RORUPD04",5,0)
 ;
"RTN","RORUPD04",6,0)
 ;******************************************************************************
"RTN","RORUPD04",7,0)
 ;******************************************************************************
"RTN","RORUPD04",8,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORUPD04",9,0)
 ;        
"RTN","RORUPD04",10,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUPD04",11,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUPD04",12,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   LAB: added call to new tag HCV to look
"RTN","RORUPD04",13,0)
 ;                                      for HCV results.
"RTN","RORUPD04",14,0)
 ;******************************************************************************
"RTN","RORUPD04",15,0)
 ;******************************************************************************
"RTN","RORUPD04",16,0)
 ;***** CHECKS AN INDICATOR CONDITION
"RTN","RORUPD04",17,0)
 ;
"RTN","RORUPD04",18,0)
 ; LSI           Indicator (internal value)
"RTN","RORUPD04",19,0)
 ; VAL           Indicated value
"RTN","RORUPD04",20,0)
 ; .RESULT(      Result value
"RTN","RORUPD04",21,0)
 ;   "RH")       Reference high
"RTN","RORUPD04",22,0)
 ;   "RL")       Reference low
"RTN","RORUPD04",23,0)
 ;
"RTN","RORUPD04",24,0)
 ; Return Values:
"RTN","RORUPD04",25,0)
 ;        0  False
"RTN","RORUPD04",26,0)
 ;       >0  True
"RTN","RORUPD04",27,0)
 ;
"RTN","RORUPD04",28,0)
CHKIND(LSI,VAL,RESULT) ;
"RTN","RORUPD04",29,0)
 S RESULT=$$UP^XLFSTR(RESULT)
"RTN","RORUPD04",30,0)
 ;--- Reference Range
"RTN","RORUPD04",31,0)
 I LSI=1  D  Q LSI
"RTN","RORUPD04",32,0)
 . I $G(RESULT("RL"))'=""  Q:RESULT<RESULT("RL")
"RTN","RORUPD04",33,0)
 . I $G(RESULT("RH"))'=""  Q:RESULT>RESULT("RH")
"RTN","RORUPD04",34,0)
 . S LSI=0
"RTN","RORUPD04",35,0)
 ;--- Positive Result
"RTN","RORUPD04",36,0)
 I LSI=6  S VAL=0  D  Q VAL
"RTN","RORUPD04",37,0)
 . I (RESULT="P")!(RESULT="R")  S VAL=1  Q
"RTN","RORUPD04",38,0)
 . I RESULT'["POS",RESULT'["REA",RESULT'["DETEC"  Q
"RTN","RORUPD04",39,0)
 . I RESULT'["NEG",RESULT'["NO",RESULT'["IND"  S VAL=1
"RTN","RORUPD04",40,0)
 ;--- Compare to the value
"RTN","RORUPD04",41,0)
 Q:VAL="" 0
"RTN","RORUPD04",42,0)
 I LSI=3  Q (RESULT>VAL)
"RTN","RORUPD04",43,0)
 I LSI=4  Q (RESULT<VAL)
"RTN","RORUPD04",44,0)
 S VAL=$$UP^XLFSTR(VAL)
"RTN","RORUPD04",45,0)
 I LSI=2  Q (RESULT[VAL)
"RTN","RORUPD04",46,0)
 I LSI=5  Q (RESULT=VAL)
"RTN","RORUPD04",47,0)
 Q 0
"RTN","RORUPD04",48,0)
 ;
"RTN","RORUPD04",49,0)
 ;***** PROCESSING OF THE 'LAB DATA' FILE
"RTN","RORUPD04",50,0)
 ;
"RTN","RORUPD04",51,0)
 ; UPDSTART      Date of the earliest update (DO NOT pass by
"RTN","RORUPD04",52,0)
 ;               reference)
"RTN","RORUPD04",53,0)
 ; PATIEN        Patient IEN
"RTN","RORUPD04",54,0)
 ;
"RTN","RORUPD04",55,0)
 ; Return values:
"RTN","RORUPD04",56,0)
 ;       <0  Error code
"RTN","RORUPD04",57,0)
 ;        0  Continue processing of the current patient
"RTN","RORUPD04",58,0)
 ;        1  Stop processing
"RTN","RORUPD04",59,0)
 ;
"RTN","RORUPD04",60,0)
LAB(UPDSTART,PATIEN) ;
"RTN","RORUPD04",61,0)
 N RORFILE       ; File number
"RTN","RORUPD04",62,0)
 ;
"RTN","RORUPD04",63,0)
 N DM,DSEND,LABIENS,RC,RORLAB,TMP
"RTN","RORUPD04",64,0)
 S RORFILE=63,DSEND=RORUPD("DSEND")
"RTN","RORUPD04",65,0)
 K RORVALS("LS")
"RTN","RORUPD04",66,0)
 ;--- If the start date is more than 60 days in the past, results
"RTN","RORUPD04",67,0)
 ;    should be loaded using collection dates. Otherwise, dates of
"RTN","RORUPD04",68,0)
 ;--- the results are used).
"RTN","RORUPD04",69,0)
 S DM=$S($$FMDIFF^XLFDT(DT,UPDSTART)>60:"^CD",1:"^RAD")
"RTN","RORUPD04",70,0)
 ;--- Check the event references if the events are enabled
"RTN","RORUPD04",71,0)
 I $G(RORUPD("FLAGS"))["E"  D  Q:RC'>0 RC
"RTN","RORUPD04",72,0)
 . S RC=$$GET^RORUPP02(PATIEN,1,.UPDSTART,.DSEND)
"RTN","RORUPD04",73,0)
 . ;--- If dates have been modified according to the event references,
"RTN","RORUPD04",74,0)
 . ;--- they are the collection dates/times.
"RTN","RORUPD04",75,0)
 . S:RC>1 UPDSTART=UPDSTART\1,DSEND=$$FMADD^XLFDT(DSEND\1,1),DM="^CD"
"RTN","RORUPD04",76,0)
 ;---
"RTN","RORUPD04",77,0)
 S TMP=$$LABREF^RORUTL18(PATIEN)  Q:TMP'>0 TMP
"RTN","RORUPD04",78,0)
 S LABIENS=TMP_",",RC=0
"RTN","RORUPD04",79,0)
 ;
"RTN","RORUPD04",80,0)
 S RORLAB=$$ALLOC^RORTMP()  D  D FREE^RORTMP(RORLAB)
"RTN","RORUPD04",81,0)
 . ;--- Load the Lab results
"RTN","RORUPD04",82,0)
 . I $G(RORLRC)="" S RORLRC="CH,MI"
"RTN","RORUPD04",83,0)
 . S RC=$$LABRSLTS^RORUTL02(PATIEN,UPDSTART_DM,DSEND_DM,RORLAB)
"RTN","RORUPD04",84,0)
 . I RC<0  D INCEC^RORUPDUT(.RC)  Q
"RTN","RORUPD04",85,0)
 . ;--- Process the results
"RTN","RORUPD04",86,0)
 . Q:$$RESULTS(PATIEN,RORLAB)<0
"RTN","RORUPD04",87,0)
 . ;--- Load necessary data elements
"RTN","RORUPD04",88,0)
 . I $D(RORUPD("SR",RORFILE,"F"))>1  D  I TMP<0  D INCEC^RORUPDUT()  Q
"RTN","RORUPD04",89,0)
 . . S TMP=$$LOAD(LABIENS)
"RTN","RORUPD04",90,0)
 . ;--- Apply "before" rules
"RTN","RORUPD04",91,0)
 . S RC=$$APLRULES^RORUPDUT(RORFILE,LABIENS,"B")
"RTN","RORUPD04",92,0)
 . I RC  D INCEC^RORUPDUT(.RC)  Q
"RTN","RORUPD04",93,0)
 . ;--- Apply "after" rules
"RTN","RORUPD04",94,0)
 . S RC=$$APLRULES^RORUPDUT(RORFILE,LABIENS,"A")
"RTN","RORUPD04",95,0)
 . I RC  D INCEC^RORUPDUT(.RC)  Q
"RTN","RORUPD04",96,0)
 . ;check if patient has positive HCV LOINC test result
"RTN","RORUPD04",97,0)
 . D HCV(PATIEN,RORLAB)
"RTN","RORUPD04",98,0)
 ;
"RTN","RORUPD04",99,0)
 D CLRDES^RORUPDUT(RORFILE)
"RTN","RORUPD04",100,0)
 Q RC
"RTN","RORUPD04",101,0)
 ;
"RTN","RORUPD04",102,0)
 ;***** LOAD DATA ELEMENTS
"RTN","RORUPD04",103,0)
 ;
"RTN","RORUPD04",104,0)
 ; IENS          IENS of the current record
"RTN","RORUPD04",105,0)
 ;
"RTN","RORUPD04",106,0)
 ; Return values:
"RTN","RORUPD04",107,0)
 ;       <0  Error code
"RTN","RORUPD04",108,0)
 ;        0  Ok
"RTN","RORUPD04",109,0)
 ;
"RTN","RORUPD04",110,0)
LOAD(IENS) ;
"RTN","RORUPD04",111,0)
 N RC  S RC=0
"RTN","RORUPD04",112,0)
 ;--- API #1
"RTN","RORUPD04",113,0)
 I $D(RORUPD("SR",RORFILE,"F",1))  D  Q:RC<0 RC
"RTN","RORUPD04",114,0)
 . S RC=$$LOADFLDS^RORUPDUT(RORFILE,IENS)
"RTN","RORUPD04",115,0)
 ;--- API #2
"RTN","RORUPD04",116,0)
 Q 0
"RTN","RORUPD04",117,0)
 ;
"RTN","RORUPD04",118,0)
 ;***** EXTRACTS PROPER RESULT CODE FROM THE OBSERVATION ID
"RTN","RORUPD04",119,0)
 ;
"RTN","RORUPD04",120,0)
 ; OID           Observation ID in HL7 format
"RTN","RORUPD04",121,0)
 ; CS            HL7 component separator
"RTN","RORUPD04",122,0)
 ;
"RTN","RORUPD04",123,0)
 ; Return values:
"RTN","RORUPD04",124,0)
 ;           Lab result code (see the LA7SC parameter of
"RTN","RORUPD04",125,0)
 ;           the GCPR^LA7QRY entry point)
"RTN","RORUPD04",126,0)
 ;             ^1: Result code
"RTN","RORUPD04",127,0)
 ;             ^2: Coding system ("LN" or "NLT")
"RTN","RORUPD04",128,0)
 ;           Or an empty string if coding system is unknown or there
"RTN","RORUPD04",129,0)
 ;           are no active search indicators exist for this code.
"RTN","RORUPD04",130,0)
 ;
"RTN","RORUPD04",131,0)
RESCODE(OID,CS) ;
"RTN","RORUPD04",132,0)
 N CODE,I,RESCODE,TYPE
"RTN","RORUPD04",133,0)
 S RESCODE=""
"RTN","RORUPD04",134,0)
 F I=1,4  D  Q:RESCODE'=""
"RTN","RORUPD04",135,0)
 . S CODE=$P(OID,CS,I),TYPE=$P(OID,CS,I+2)             Q:CODE=""
"RTN","RORUPD04",136,0)
 . S TYPE=$S(TYPE="LN":"LN",TYPE="99VA64":"NLT",1:"")  Q:TYPE=""
"RTN","RORUPD04",137,0)
 . ;--- Check if the search indicators exist for this code
"RTN","RORUPD04",138,0)
 . S RESCODE=CODE_U_TYPE
"RTN","RORUPD04",139,0)
 . S:$D(@RORUPDPI@("LS",RESCODE))<10 RESCODE=""
"RTN","RORUPD04",140,0)
 Q RESCODE
"RTN","RORUPD04",141,0)
 ;
"RTN","RORUPD04",142,0)
 ;***** LOADS AND PROCESSES RESULTS OF THE TESTS
"RTN","RORUPD04",143,0)
 ;
"RTN","RORUPD04",144,0)
 ; PATIEN        Patient IEN
"RTN","RORUPD04",145,0)
 ; ROR8LAB       Closed root of the HL7 message created by GCPR^LA7QRY
"RTN","RORUPD04",146,0)
 ;
"RTN","RORUPD04",147,0)
 ; Return values:
"RTN","RORUPD04",148,0)
 ;       <0  Error code
"RTN","RORUPD04",149,0)
 ;        0  Ok
"RTN","RORUPD04",150,0)
 ;
"RTN","RORUPD04",151,0)
RESULTS(PATIEN,ROR8LAB) ;
"RTN","RORUPD04",152,0)
 N CS,DATE,FS,I,ISEG,LOCATION,LSIEN,LSNODE,RC,RESCODE,RESVAL,RORHL,SEG,SEGTYPE,TMP
"RTN","RORUPD04",153,0)
 S ISEG="",RC=0
"RTN","RORUPD04",154,0)
 F  S ISEG=$O(@ROR8LAB@(ISEG))  Q:ISEG=""  D  Q:RC<0
"RTN","RORUPD04",155,0)
 . S SEG=$G(@ROR8LAB@(ISEG))
"RTN","RORUPD04",156,0)
 . ;--- Extract separators from the MSH segment
"RTN","RORUPD04",157,0)
 . I $E(SEG,1,3)="MSH"  D  Q
"RTN","RORUPD04",158,0)
 . . S (RORHL("FS"),FS)=$E(SEG,4),TMP=$P(SEG,FS,2)
"RTN","RORUPD04",159,0)
 . . S CS=$E(TMP,1)
"RTN","RORUPD04",160,0)
 . ;--- Skip all segments except OBX
"RTN","RORUPD04",161,0)
 . S SEGTYPE=$P(SEG,FS)
"RTN","RORUPD04",162,0)
 . Q:SEGTYPE'="OBX"
"RTN","RORUPD04",163,0)
 . ;--- Get lab result code
"RTN","RORUPD04",164,0)
 . S RESCODE=$$RESCODE($P(SEG,FS,4),CS)  Q:RESCODE=""
"RTN","RORUPD04",165,0)
 . ;--- Load the full segment
"RTN","RORUPD04",166,0)
 . D LOADSEG^RORHL7A(.SEG,$NA(@ROR8LAB@(ISEG)))
"RTN","RORUPD04",167,0)
 . ;--- Get the result data
"RTN","RORUPD04",168,0)
 . S RESVAL=$G(SEG(5)),TMP=$G(SEG(7))
"RTN","RORUPD04",169,0)
 . S RESVAL("RL")=$P(TMP,"-",1) ; Reference Low
"RTN","RORUPD04",170,0)
 . S RESVAL("RH")=$P(TMP,"-",2) ; Reference High
"RTN","RORUPD04",171,0)
 . S DATE=$$HL7TFM^XLFDT($G(SEG(14)),"L")\1
"RTN","RORUPD04",172,0)
 . ;--- Analyze the result
"RTN","RORUPD04",173,0)
 . K LOCATION
"RTN","RORUPD04",174,0)
 . S LSNODE=$NA(@RORUPDPI@("LS",RESCODE))
"RTN","RORUPD04",175,0)
 . S LSIEN=""
"RTN","RORUPD04",176,0)
 . F  S LSIEN=$O(@LSNODE@(LSIEN))  Q:LSIEN=""  D  Q:RC<0
"RTN","RORUPD04",177,0)
 . . S I="",RC=0
"RTN","RORUPD04",178,0)
 . . F  S I=$O(@LSNODE@(LSIEN,I))  Q:I=""  D  Q:RC
"RTN","RORUPD04",179,0)
 . . . S TMP=$G(@LSNODE@(LSIEN,I))
"RTN","RORUPD04",180,0)
 . . . S RC=$$CHKIND(+TMP,$P(TMP,U,2),.RESVAL)
"RTN","RORUPD04",181,0)
 . . Q:RC'>0
"RTN","RORUPD04",182,0)
 . . S TMP=+$G(RORVALS("LS",LSIEN))
"RTN","RORUPD04",183,0)
 . . I TMP  Q:(DATE'>0)!(DATE'<TMP)
"RTN","RORUPD04",184,0)
 . . S:'$D(LOCATION) LOCATION=$$IEN^XUAF4($P($G(SEG(15)),CS))
"RTN","RORUPD04",185,0)
 . . S RORVALS("LS",LSIEN)=DATE_U_LOCATION
"RTN","RORUPD04",186,0)
 ;---
"RTN","RORUPD04",187,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORUPD04",188,0)
 ;
"RTN","RORUPD04",189,0)
 ;***** IMPLEMENTATION OF THE SELECTION RULE
"RTN","RORUPD04",190,0)
 ;
"RTN","RORUPD04",191,0)
 ; LSIEN         Lab Search IEN
"RTN","RORUPD04",192,0)
 ;
"RTN","RORUPD04",193,0)
 ; Return values:
"RTN","RORUPD04",194,0)
 ;        0  Skip the patient
"RTN","RORUPD04",195,0)
 ;        1  Add the patient
"RTN","RORUPD04",196,0)
 ;
"RTN","RORUPD04",197,0)
RULE(LSIEN) ;
"RTN","RORUPD04",198,0)
 Q:'$D(RORVALS("LS",LSIEN)) 0
"RTN","RORUPD04",199,0)
 N DATE,LOC,SRDT
"RTN","RORUPD04",200,0)
 S DATE=+$G(RORVALS("LS",LSIEN))
"RTN","RORUPD04",201,0)
 D:DATE>0
"RTN","RORUPD04",202,0)
 . S LOC=$P($G(RORVALS("LS",LSIEN)),U,2)
"RTN","RORUPD04",203,0)
 . S SRDT=$$GETVAL^RORUPDUT("ROR SRDT")
"RTN","RORUPD04",204,0)
 . I (DATE<SRDT)!(SRDT'>0)  D  Q
"RTN","RORUPD04",205,0)
 . . S RORVALS("SV","ROR SRDT")=DATE
"RTN","RORUPD04",206,0)
 . . S RORVALS("SV","ROR SRLOC")=LOC
"RTN","RORUPD04",207,0)
 . I DATE=SRDT  D:$$GETVAL^RORUPDUT("ROR SRLOC")=""  Q
"RTN","RORUPD04",208,0)
 . . S RORVALS("SV","ROR SRLOC")=LOC
"RTN","RORUPD04",209,0)
 Q 1
"RTN","RORUPD04",210,0)
 ;
"RTN","RORUPD04",211,0)
 ;***** ADD PATIENT TO ARRAY IF THEY HAVE A POSITIVE HCV TEST RESULT
"RTN","RORUPD04",212,0)
 ;Patients will be automatically confirmed into the registry during the
"RTN","RORUPD04",213,0)
 ;nightly job in ADD^RORUPD50 if they have a positive HCV test result
"RTN","RORUPD04",214,0)
 ;Note: all other registry 'update' criteria must be met as well
"RTN","RORUPD04",215,0)
 ;
"RTN","RORUPD04",216,0)
 ;Input
"RTN","RORUPD04",217,0)
 ;  DFN      Patient DFN
"RTN","RORUPD04",218,0)
 ;  RORLAB   Array with patient's lab test results.  In HL7 format,
"RTN","RORUPD04",219,0)
 ;           returned from GCPR^LA7QRY
"RTN","RORUPD04",220,0)
 ;
"RTN","RORUPD04",221,0)
 ;Output
"RTN","RORUPD04",222,0)
 ;  ^TMP("ROR HCV CONFIRM",$J,DFN)=""  patient is added to this array if they
"RTN","RORUPD04",223,0)
 ;  have positive HCV test result.  Array is used in ADD^RORUPD50.
"RTN","RORUPD04",224,0)
 ;
"RTN","RORUPD04",225,0)
HCV(DFN,RORLAB) ;
"RTN","RORUPD04",226,0)
 N RORI,RORSEG,RORTYPE,RORVAL,HLFS,HLCS,RORLOINC,RORDONE
"RTN","RORUPD04",227,0)
 S HLFS="|",HLCS="^" ;HL7 field and component separator in the Lab data array
"RTN","RORUPD04",228,0)
 ;loop through lab output and see if the test result value is for an HCV LOINC
"RTN","RORUPD04",229,0)
 ;Array is used in ADD^RORUPD50
"RTN","RORUPD04",230,0)
 S RORI=0,RORDONE=0
"RTN","RORUPD04",231,0)
 F  S RORI=$O(@RORLAB@(RORI)) Q:'RORI  Q:RORDONE  D
"RTN","RORUPD04",232,0)
 . S RORSEG=$G(@RORLAB@(RORI)) ;entire HL7 segment data
"RTN","RORUPD04",233,0)
 . S SEGTYPE=$P(RORSEG,HLFS,1) ;segment type (PID,OBR,OBX,etc.)
"RTN","RORUPD04",234,0)
 . Q:SEGTYPE'="OBX"  ;we only want OBX segments
"RTN","RORUPD04",235,0)
 . S RORLOINC=$P($P($G(RORSEG),HLFS,4),HLCS,1)
"RTN","RORUPD04",236,0)
 . I $G(RORLOINC)'="",'$D(^TMP("ROR HCV LIST",$J,RORLOINC)) Q  ;quit if not HCV LOINC
"RTN","RORUPD04",237,0)
 . S RORVAL=$P(RORSEG,HLFS,6) ; HCV test result value
"RTN","RORUPD04",238,0)
 . I $L($G(RORVAL))>0 S RORVAL=$TR(RORVAL,"""","") ;get rid of any double quotes
"RTN","RORUPD04",239,0)
 . I $E($G(RORVAL),1,1)=">" D  ;if positive test result
"RTN","RORUPD04",240,0)
 .. S ^TMP("ROR HCV CONFIRM",$J,DFN)="" ;add patient to HCV auto-confirm list
"RTN","RORUPD04",241,0)
 .. S RORDONE=1 ;end of HCV processing for this patient
"RTN","RORUPD04",242,0)
 ;
"RTN","RORUPD04",243,0)
 Q
"RTN","RORUPD50")
0^13^B18841385^B15673892
"RTN","RORUPD50",1,0)
RORUPD50 ;HCIOFO/SG - UPDATE THE PATIENT IN THE REGISTRIES ;8/2/05 9:14am
"RTN","RORUPD50",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,14**;Feb 17, 2006;Build 24
"RTN","RORUPD50",3,0)
 ;
"RTN","RORUPD50",4,0)
 ; This routine uses the following IAs:
"RTN","RORUPD50",5,0)
 ;
"RTN","RORUPD50",6,0)
 ; #2051  FIND^DIC (supported)
"RTN","RORUPD50",7,0)
 ; #10013 ^DIK (supported)
"RTN","RORUPD50",8,0)
 ; #2056  $$GET1^DIQ (supported)
"RTN","RORUPD50",9,0)
 ; #2055  $$ROOT^DILFD (supported)
"RTN","RORUPD50",10,0)
 ; #2053  UPDATE^DIE (supported)
"RTN","RORUPD50",11,0)
 Q
"RTN","RORUPD50",12,0)
 ;******************************************************************************
"RTN","RORUPD50",13,0)
 ;******************************************************************************
"RTN","RORUPD50",14,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORUPD50",15,0)
 ;        
"RTN","RORUPD50",16,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUPD50",17,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUPD50",18,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   ADD: add patient as confirmed if they 
"RTN","RORUPD50",19,0)
 ;                                      are in the "ROR HCV CONFIRM" array, 
"RTN","RORUPD50",20,0)
 ;                                      created in HCV^RORUPD04.
"RTN","RORUPD50",21,0)
 ;******************************************************************************
"RTN","RORUPD50",22,0)
 ;******************************************************************************
"RTN","RORUPD50",23,0)
 ;
"RTN","RORUPD50",24,0)
 ;***** ADDS THE PATIENT TO THE REGISTRY
"RTN","RORUPD50",25,0)
 ;
"RTN","RORUPD50",26,0)
 ; PATIEN        Patient IEN
"RTN","RORUPD50",27,0)
 ; REGIEN        Registry IEN
"RTN","RORUPD50",28,0)
 ;
"RTN","RORUPD50",29,0)
 ; [ROR8RULS]    Closed root of a local array containing list of
"RTN","RORUPD50",30,0)
 ;               triggered selection rules:
"RTN","RORUPD50",31,0)
 ;                 @ROR8RULS@(RuleIEN)=Date
"RTN","RORUPD50",32,0)
 ;               If this parameter is not defined or equals to
"RTN","RORUPD50",33,0)
 ;               an empty string, selection rules are loaded from
"RTN","RORUPD50",34,0)
 ;               corresponding sub-node of the ^TMP("RORUPD",$J,"U").
"RTN","RORUPD50",35,0)
 ;
"RTN","RORUPD50",36,0)
 ; [[.]DOD]      Date of death. If this parameter is undefined,
"RTN","RORUPD50",37,0)
 ;               its value will be taken from the ROR PATIENT file.
"RTN","RORUPD50",38,0)
 ;               If you are going to call this function several times
"RTN","RORUPD50",39,0)
 ;               for the same patient (for different registries),
"RTN","RORUPD50",40,0)
 ;               pass a reference to undefined local variable (the
"RTN","RORUPD50",41,0)
 ;               DOD will be read from the file only once).
"RTN","RORUPD50",42,0)
 ;
"RTN","RORUPD50",43,0)
 ; Return values:
"RTN","RORUPD50",44,0)
 ;       <0  Error code
"RTN","RORUPD50",45,0)
 ;        0  Ok
"RTN","RORUPD50",46,0)
 ;        1  Patient has already existed in the registry
"RTN","RORUPD50",47,0)
 ;
"RTN","RORUPD50",48,0)
 ;NOTE: Patch 14 includes functionality to automatically confirm a HEPC patient
"RTN","RORUPD50",49,0)
 ;into the registry if the patient had a positive test result for any 1 of
"RTN","RORUPD50",50,0)
 ;the 9 new HCV LOINCS added with the patch.
"RTN","RORUPD50",51,0)
 ;
"RTN","RORUPD50",52,0)
ADD(PATIEN,REGIEN,ROR8RULS,DOD) ;
"RTN","RORUPD50",53,0)
 N I,IENS,IENS01,RC,RORFDA,RORIEN,RORMSG,RULEIEN,TMP
"RTN","RORUPD50",54,0)
 ;--- Quit if the patient is already in the registry
"RTN","RORUPD50",55,0)
 Q:$$PRRIEN^RORUTL01(PATIEN,REGIEN)>0 1
"RTN","RORUPD50",56,0)
 ;
"RTN","RORUPD50",57,0)
 ;--- Prepare registry data
"RTN","RORUPD50",58,0)
 K RORFDA  S IENS="+1,"
"RTN","RORUPD50",59,0)
 S RORFDA(798,IENS,.01)=PATIEN           ; Patient Name
"RTN","RORUPD50",60,0)
 S RORFDA(798,IENS,.02)=REGIEN           ; Registry
"RTN","RORUPD50",61,0)
 S RORFDA(798,IENS,3)=4                  ; Pending
"RTN","RORUPD50",62,0)
 ;add patient as "confirmed" if patient had + HCV test (HEPC registry only)
"RTN","RORUPD50",63,0)
 I REGIEN=1,$D(^TMP("ROR HCV CONFIRM",$J,PATIEN)) S RORFDA(798,IENS,3)=0 ;Confirmed
"RTN","RORUPD50",64,0)
 S RORFDA(798,IENS,4)=1                  ; Update Demographics
"RTN","RORUPD50",65,0)
 S RORFDA(798,IENS,5)=1                  ; Update Local Data
"RTN","RORUPD50",66,0)
 I $$TESTPAT^RORUTL01(PATIEN) S RORFDA(798,IENS,11)=1 ; Don't Send = 1 if test patient
"RTN","RORUPD50",67,0)
 ;--- Get the date of death
"RTN","RORUPD50",68,0)
 S:'($D(DOD)#10) DOD=$$GET1^DIQ(798.4,PATIEN_",",.351,"I",,"RORMSG")
"RTN","RORUPD50",69,0)
 ;--- Load list of triggered rules
"RTN","RORUPD50",70,0)
 S:$G(ROR8RULS)="" ROR8RULS=$NA(@RORUPDPI@("U",PATIEN,2,REGIEN))
"RTN","RORUPD50",71,0)
 S RULEIEN=""
"RTN","RORUPD50",72,0)
 F I=1:1  S RULEIEN=$O(@ROR8RULS@(RULEIEN))  Q:RULEIEN=""  D
"RTN","RORUPD50",73,0)
 . S IENS01="+"_(1000+I)_","_IENS
"RTN","RORUPD50",74,0)
 . S RORFDA(798.01,IENS01,.01)=RULEIEN  ; SELECTION RULE
"RTN","RORUPD50",75,0)
 . S TMP=$P(@ROR8RULS@(RULEIEN),U)\1
"RTN","RORUPD50",76,0)
 . S:TMP>0 RORFDA(798.01,IENS01,1)=TMP  ; DATE
"RTN","RORUPD50",77,0)
 . S TMP=+$P(@ROR8RULS@(RULEIEN),U,2)
"RTN","RORUPD50",78,0)
 . S:TMP>0 RORFDA(798.01,IENS01,2)=TMP  ; LOCATION
"RTN","RORUPD50",79,0)
 ;
"RTN","RORUPD50",80,0)
 ;--- Registry update transaction
"RTN","RORUPD50",81,0)
 S RC=0  D
"RTN","RORUPD50",82,0)
 . ;--- Call "before update" entry point
"RTN","RORUPD50",83,0)
 . S ENTRY=$G(RORUPD("UPD",REGIEN,1))
"RTN","RORUPD50",84,0)
 . I ENTRY'=""  X "S RC="_ENTRY_"(.RORFDA,PATIEN,REGIEN)"  Q:RC<0
"RTN","RORUPD50",85,0)
 . ;--- Make sure that the DON'T SEND flag is set for 'test' patient
"RTN","RORUPD50",86,0)
 . S:$$TESTPAT^RORUTL01(PATIEN) RORFDA(798,IENS,11)=1
"RTN","RORUPD50",87,0)
 . ;--- Update the registry
"RTN","RORUPD50",88,0)
 . D UPDATE^DIE(,"RORFDA","RORIEN","RORMSG")
"RTN","RORUPD50",89,0)
 . I $G(RORMSG("DIERR"))  S RC=$$DBS^RORERR("RORMSG",-9)  Q
"RTN","RORUPD50",90,0)
 . ;--- Call "after update" entry point
"RTN","RORUPD50",91,0)
 . S ENTRY=$G(RORUPD("UPD",REGIEN,2))
"RTN","RORUPD50",92,0)
 . I ENTRY'=""  X "S RC="_ENTRY_"(RORIEN(1),PATIEN,REGIEN)"  Q:RC<0
"RTN","RORUPD50",93,0)
 Q:RC'<0 0
"RTN","RORUPD50",94,0)
 ;
"RTN","RORUPD50",95,0)
 ;--- Rollback the update in case of error(s)
"RTN","RORUPD50",96,0)
 N DA,DIK
"RTN","RORUPD50",97,0)
 S DIK=$$ROOT^DILFD(798),DA=$G(RORIEN(1))
"RTN","RORUPD50",98,0)
 D:DA>0 ^DIK
"RTN","RORUPD50",99,0)
 Q RC
"RTN","RORUPD50",100,0)
 ;
"RTN","RORUPD50",101,0)
 ;***** ADDS PATIENT DATA TO THE 'ROR PATIENT' FILE
"RTN","RORUPD50",102,0)
 ;
"RTN","RORUPD50",103,0)
 ; PATIEN        Patient IEN
"RTN","RORUPD50",104,0)
 ;
"RTN","RORUPD50",105,0)
 ; Return values:
"RTN","RORUPD50",106,0)
 ;       <0  Error code
"RTN","RORUPD50",107,0)
 ;        0  Ok
"RTN","RORUPD50",108,0)
 ;        1  Patient data have already existed
"RTN","RORUPD50",109,0)
 ;
"RTN","RORUPD50",110,0)
ADDPDATA(PATIEN) ;
"RTN","RORUPD50",111,0)
 N IENS,RC,RORBUF,RORPAT,RORIEN,RORMSG
"RTN","RORUPD50",112,0)
 ;--- Try to find patient data
"RTN","RORUPD50",113,0)
 D FIND^DIC(798.4,,"@","QUX",PATIEN,1,"B",,,"RORBUF","RORMSG")
"RTN","RORUPD50",114,0)
 Q:$G(RORMSG("DIERR")) $$DBS^RORERR("RORMSG",-9,,,798.4)
"RTN","RORUPD50",115,0)
 ;--- Patient data already exists in the file
"RTN","RORUPD50",116,0)
 Q:$G(RORBUF("DILIST",0)) 1
"RTN","RORUPD50",117,0)
 ;--- Check if the patient record in the file #2 is valid
"RTN","RORUPD50",118,0)
 S RC=$$CHKPTR^RORUTL05(PATIEN)  Q:RC<0 RC
"RTN","RORUPD50",119,0)
 ;--- Prepare patient data
"RTN","RORUPD50",120,0)
 S IENS="+1,"
"RTN","RORUPD50",121,0)
 S RC=$$PATDATA^RORUPD52(PATIEN_",",.RORPAT,IENS)  Q:RC<0 RC
"RTN","RORUPD50",122,0)
 S RORIEN(1)=PATIEN                      ; IEN of the new record
"RTN","RORUPD50",123,0)
 S RORPAT(798.4,IENS,.01)=PATIEN         ; Patient Name
"RTN","RORUPD50",124,0)
 ;--- Add the patient record to the file
"RTN","RORUPD50",125,0)
 D UPDATE^DIE(,"RORPAT","RORIEN","RORMSG")
"RTN","RORUPD50",126,0)
 I $G(RORMSG("DIERR"))  D  Q:RC
"RTN","RORUPD50",127,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,PATIEN,798.4)
"RTN","RORUPD50",128,0)
 Q 0
"RTN","RORUPD50",129,0)
 ;
"RTN","RORUPD50",130,0)
 ;***** ADDS THE PATIENT TO MARKED REGISTRIES
"RTN","RORUPD50",131,0)
 ;
"RTN","RORUPD50",132,0)
 ; PATIEN        Patient IEN
"RTN","RORUPD50",133,0)
 ;
"RTN","RORUPD50",134,0)
 ; Return values:
"RTN","RORUPD50",135,0)
 ;       <0  Error code
"RTN","RORUPD50",136,0)
 ;        0  Patient should not be added to the registry
"RTN","RORUPD50",137,0)
 ;       >0  Patient has been added to the registry
"RTN","RORUPD50",138,0)
 ;
"RTN","RORUPD50",139,0)
UPDREG(PATIEN) ;
"RTN","RORUPD50",140,0)
 N DOD,ENTRY,INCTVDT,RC,REGIEN
"RTN","RORUPD50",141,0)
 ;--- Check if patient should be added to any registry
"RTN","RORUPD50",142,0)
 Q:$D(@RORUPDPI@("U",PATIEN,2))<10 0
"RTN","RORUPD50",143,0)
 ;--- Add patient data
"RTN","RORUPD50",144,0)
 S RC=$$ADDPDATA(PATIEN)  Q:RC<0 RC
"RTN","RORUPD50",145,0)
 ;--- Update all marked registries
"RTN","RORUPD50",146,0)
 S REGIEN="",RC=0
"RTN","RORUPD50",147,0)
 F  D  Q:REGIEN=""  S RC=$$ADD(PATIEN,REGIEN,,.DOD)  Q:RC<0
"RTN","RORUPD50",148,0)
 . S REGIEN=$O(@RORUPDPI@("U",PATIEN,2,REGIEN))
"RTN","RORUPD50",149,0)
 Q $S(RC<0:RC,1:1)
"RTN","RORUTL11")
0^17^B3195130^B3337131
"RTN","RORUTL11",1,0)
RORUTL11 ;HCIOFO/SG - ACCESS AND SECURITY UTILITIES ;7/21/03 10:28am
"RTN","RORUTL11",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**13,14**;Feb 17, 2006;Build 24
"RTN","RORUTL11",3,0)
 ;
"RTN","RORUTL11",4,0)
 ;******************************************************************************
"RTN","RORUTL11",5,0)
 ;******************************************************************************
"RTN","RORUTL11",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL11",7,0)
 ;        
"RTN","RORUTL11",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL11",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL11",10,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added tag VERSRV to return an associated
"RTN","RORUTL11",11,0)
 ;                                      version to the GUI during RPC call ROR
"RTN","RORUTL11",12,0)
 ;                                      GET M VERSION
"RTN","RORUTL11",13,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   Updated version in tag VERSRV
"RTN","RORUTL11",14,0)
 ;                                      
"RTN","RORUTL11",15,0)
 ;******************************************************************************
"RTN","RORUTL11",16,0)
 ;******************************************************************************
"RTN","RORUTL11",17,0)
 Q
"RTN","RORUTL11",18,0)
 ;
"RTN","RORUTL11",19,0)
 ;***** REBUILDS THE "ACL" CROSS-REFERENCE (USER ACCESS)
"RTN","RORUTL11",20,0)
 ;
"RTN","RORUTL11",21,0)
 ; Return Values:
"RTN","RORUTL11",22,0)
 ;       <0  Error code
"RTN","RORUTL11",23,0)
 ;        0  Ok
"RTN","RORUTL11",24,0)
 ;
"RTN","RORUTL11",25,0)
RNDXACL() ;
"RTN","RORUTL11",26,0)
 N DA,DIK,REGIEN,ROOT
"RTN","RORUTL11",27,0)
 S ROOT=$$ROOT^DILFD(798.1,,1)  K @ROOT@("ACL")
"RTN","RORUTL11",28,0)
 S REGIEN=0
"RTN","RORUTL11",29,0)
 F  S REGIEN=$O(@ROOT@(REGIEN))  Q:'REGIEN  D
"RTN","RORUTL11",30,0)
 . S DIK=$$ROOT^DILFD(798.118,","_REGIEN_","),DIK(1)=".01^ACL"
"RTN","RORUTL11",31,0)
 . S DA(1)=REGIEN  D ENALL^DIK
"RTN","RORUTL11",32,0)
 Q 0
"RTN","RORUTL11",33,0)
 ;
"RTN","RORUTL11",34,0)
 ;***** CHECKS IF THE RPC CAN BE CALLED BY THE CURRENT USER
"RTN","RORUTL11",35,0)
 ;
"RTN","RORUTL11",36,0)
 ; RPCNAME       Name of the RPC
"RTN","RORUTL11",37,0)
 ;
"RTN","RORUTL11",38,0)
 ; [REGIEN]      Registry IEN
"RTN","RORUTL11",39,0)
 ;
"RTN","RORUTL11",40,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORUTL11",41,0)
 ;                 A  Administrator Only
"RTN","RORUTL11",42,0)
 ;                 I  IRM Only
"RTN","RORUTL11",43,0)
 ;
"RTN","RORUTL11",44,0)
 ; Return Values:
"RTN","RORUTL11",45,0)
 ;       <0  Error code
"RTN","RORUTL11",46,0)
 ;        0  Ok
"RTN","RORUTL11",47,0)
 ;       >0  Access denied
"RTN","RORUTL11",48,0)
 ;
"RTN","RORUTL11",49,0)
RPCHECK(RPCNAME,REGIEN,FLAGS) ;
"RTN","RORUTL11",50,0)
 N ACCESS,KEY,RC
"RTN","RORUTL11",51,0)
 Q:$G(DUZ)'>0 $$ERROR^RORERR(-40,,,,"DUZ")
"RTN","RORUTL11",52,0)
 S FLAGS=$G(FLAGS),REGIEN=+$G(REGIEN)
"RTN","RORUTL11",53,0)
 ;---
"RTN","RORUTL11",54,0)
 S (ACCESS,RC)=0
"RTN","RORUTL11",55,0)
 D  Q:ACCESS 0
"RTN","RORUTL11",56,0)
 . I REGIEN  Q:$D(^ROR(798.1,"ACL",DUZ,REGIEN))<10
"RTN","RORUTL11",57,0)
 . E  Q:$D(^ROR(798.1,"ACL",DUZ))<10
"RTN","RORUTL11",58,0)
 . I FLAGS["I"  Q:'$D(^XUSEC("ROR VA IRM",DUZ))
"RTN","RORUTL11",59,0)
 . I FLAGS["A"  S RC=1,KEY=""  D  Q:RC
"RTN","RORUTL11",60,0)
 . . F  S KEY=$O(^ROR(798.1,"ACL",DUZ,REGIEN,KEY))  Q:KEY=""  D  Q:'RC
"RTN","RORUTL11",61,0)
 . . . I KEY?1"ROR"1.E  S:KEY["ADMIN" RC=0
"RTN","RORUTL11",62,0)
 . S ACCESS=1
"RTN","RORUTL11",63,0)
 ;---
"RTN","RORUTL11",64,0)
 D ACVIOLTN^RORLOG(X,$G(REGIEN),RPCNAME)
"RTN","RORUTL11",65,0)
 Q 1
"RTN","RORUTL11",66,0)
 ;
"RTN","RORUTL11",67,0)
 ;***** RETURNS SERVER VERSION
"RTN","RORUTL11",68,0)
 ;REMOTE PROCEDURE: ROR GET M VERSION
"RTN","RORUTL11",69,0)
 ;
"RTN","RORUTL11",70,0)
 ;The purpose of this RPC is to catch when the GUI executable has been
"RTN","RORUTL11",71,0)
 ;upgraded AND REQUIRES an associated M patch, but the M patch has not
"RTN","RORUTL11",72,0)
 ;been installed yet.
"RTN","RORUTL11",73,0)
 ;
"RTN","RORUTL11",74,0)
 ; VAL n.n.n represents the CCR package version and the m patch number that
"RTN","RORUTL11",75,0)
 ; contains the associated M changes that the GUI is expecting.
"RTN","RORUTL11",76,0)
 ;
"RTN","RORUTL11",77,0)
 ;NOTE TO CCR MAINTENANCE TEAM: For M changes made by the maintenance team,
"RTN","RORUTL11",78,0)
 ;the server version below should not be modified.  The only time the server
"RTN","RORUTL11",79,0)
 ;version should be modified is if the GUI was changed AND there were
"RTN","RORUTL11",80,0)
 ;associated M changes needed for it.
"RTN","RORUTL11",81,0)
 ;
"RTN","RORUTL11",82,0)
VERSRV(VAL) ;
"RTN","RORUTL11",83,0)
 S VAL="1.5.14"
"RTN","RORUTL11",84,0)
 Q
"RTN","RORX001")
0^7^B43373564^B38212048
"RTN","RORX001",1,0)
RORX001 ;HOIFO/SG,VAC - LIST OF REGISTRY PATIENTS ;4/16/09 11:53am
"RTN","RORX001",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,10,14**;Feb 17, 2006;Build 24
"RTN","RORX001",3,0)
 ;
"RTN","RORX001",4,0)
 ; This routine uses the following IAs:
"RTN","RORX001",5,0)
 ;
"RTN","RORX001",6,0)
 ; #2051         LIST^DIC (supported)
"RTN","RORX001",7,0)
 ; #2056         GET1^DIQ, GETS^DIQ (supported)
"RTN","RORX001",8,0)
 ; #10061        DEM^VADPT (supported)
"RTN","RORX001",9,0)
 ;
"RTN","RORX001",10,0)
 ; This routine modified March 2009 to handle ICD9 Filter for Include
"RTN","RORX001",11,0)
 ;    or Exclude
"RTN","RORX001",12,0)
 Q
"RTN","RORX001",13,0)
 ;******************************************************************************
"RTN","RORX001",14,0)
 ;******************************************************************************
"RTN","RORX001",15,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORX001",16,0)
 ;        
"RTN","RORX001",17,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX001",18,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX001",19,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   Added column and data for 'FIRSTDIAG'.
"RTN","RORX001",20,0)
 ;******************************************************************************
"RTN","RORX001",21,0)
 ;******************************************************************************
"RTN","RORX001",22,0)
 ;
"RTN","RORX001",23,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX001",24,0)
 ;
"RTN","RORX001",25,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX001",26,0)
 ;
"RTN","RORX001",27,0)
 ; Return Values:
"RTN","RORX001",28,0)
 ;       <0  Error code
"RTN","RORX001",29,0)
 ;        0  Ok
"RTN","RORX001",30,0)
 ;
"RTN","RORX001",31,0)
HEADER(PARTAG) ;
"RTN","RORX001",32,0)
 N COL,COLUMNS,HEADER,TMP
"RTN","RORX001",33,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX001",34,0)
 S COLUMNS=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORX001",35,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"NAME","PATIENTS")
"RTN","RORX001",36,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"HEADER","1")
"RTN","RORX001",37,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"FOOTER","1")
"RTN","RORX001",38,0)
 S RORFLDS=".01"
"RTN","RORX001",39,0)
 ;--- Required columns
"RTN","RORX001",40,0)
 F COL="#","NAME"  D
"RTN","RORX001",41,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX001",42,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX001",43,0)
 ;--- Additional columns
"RTN","RORX001",44,0)
 F COL="DOD","CSSN","LAST4","SELRULES","SELDT","CONFDT","PENDCOMM","FIRSTDIAG"  D
"RTN","RORX001",45,0)
 . Q:'$$OPTCOL^RORXU006(COL)
"RTN","RORX001",46,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX001",47,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX001",48,0)
 ;---
"RTN","RORX001",49,0)
 S:$$OPTCOL^RORXU006("CONFDT") RORFLDS=RORFLDS_";2"
"RTN","RORX001",50,0)
 S:$$OPTCOL^RORXU006("SELDT") RORFLDS=RORFLDS_";3.2"
"RTN","RORX001",51,0)
 S:$$OPTCOL^RORXU006("PENDCOMM") RORFLDS=RORFLDS_";12"
"RTN","RORX001",52,0)
 Q 0
"RTN","RORX001",53,0)
 ;
"RTN","RORX001",54,0)
 ;***** ADDS THE PATIENT DATA TO THE REPORT
"RTN","RORX001",55,0)
 ;
"RTN","RORX001",56,0)
 ; IENS          IENS of the patient's record in the registry
"RTN","RORX001",57,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX001",58,0)
 ;
"RTN","RORX001",59,0)
 ; Return Values:
"RTN","RORX001",60,0)
 ;       <0  Error code
"RTN","RORX001",61,0)
 ;        0  Ok
"RTN","RORX001",62,0)
 ;
"RTN","RORX001",63,0)
PATIENT(IENS,PARTAG) ;
"RTN","RORX001",64,0)
 N DFN,IATIME,NAME,RC,RORBUF,RORMSG,TMP,VA,VADM,VAHOW,VAROOT
"RTN","RORX001",65,0)
 K RORMSG D GETS^DIQ(798,IENS,RORFLDS,"I","RORBUF","RORMSG")
"RTN","RORX001",66,0)
 ;Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORX001",67,0)
 Q:$G(RORMSG("DIERR")) $$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORX001",68,0)
 S DFN=$G(RORBUF(798,IENS,.01,"I"))
"RTN","RORX001",69,0)
 ;--- Load the demographic data
"RTN","RORX001",70,0)
 D DEM^VADPT
"RTN","RORX001",71,0)
 ;--- The <PATIENT> tag
"RTN","RORX001",72,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PARTAG,,DFN)
"RTN","RORX001",73,0)
 ;--- Patient Name
"RTN","RORX001",74,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX001",75,0)
 ;--- Date of Death
"RTN","RORX001",76,0)
 D:$$OPTCOL^RORXU006("DOD")
"RTN","RORX001",77,0)
 . S TMP=$$DATE^RORXU002(VADM(6)\1)
"RTN","RORX001",78,0)
 . D ADDVAL^RORTSK11(RORTSK,"DOD",TMP,PTAG,1)
"RTN","RORX001",79,0)
 ;--- Coded SSN
"RTN","RORX001",80,0)
 D:$$OPTCOL^RORXU006("CSSN")
"RTN","RORX001",81,0)
 . S TMP=$$XOR^RORUTL03($P(VADM(2),U))
"RTN","RORX001",82,0)
 . D ADDVAL^RORTSK11(RORTSK,"CSSN",TMP,PTAG,1)
"RTN","RORX001",83,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX001",84,0)
 D:$$OPTCOL^RORXU006("LAST4")
"RTN","RORX001",85,0)
 . D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX001",86,0)
 ;--- Selection Rules
"RTN","RORX001",87,0)
 I $$OPTCOL^RORXU006("SELRULES")  D  Q:RC<0 RC
"RTN","RORX001",88,0)
 . S RC=$$SELRULES(IENS,PTAG)
"RTN","RORX001",89,0)
 ;--- Date Selected for the Registry
"RTN","RORX001",90,0)
 D:$$OPTCOL^RORXU006("SELDT")
"RTN","RORX001",91,0)
 . S TMP=$$DATE^RORXU002($G(RORBUF(798,IENS,3.2,"I"))\1)
"RTN","RORX001",92,0)
 . D ADDVAL^RORTSK11(RORTSK,"SELDT",TMP,PTAG,1)
"RTN","RORX001",93,0)
 ;--- Date Confirmed in the Registry
"RTN","RORX001",94,0)
 D:$$OPTCOL^RORXU006("CONFDT")
"RTN","RORX001",95,0)
 . S TMP=$$DATE^RORXU002($G(RORBUF(798,IENS,2,"I"))\1)
"RTN","RORX001",96,0)
 . D ADDVAL^RORTSK11(RORTSK,"CONFDT",TMP,PTAG,1)
"RTN","RORX001",97,0)
 ;--- Patient IEN (DFN)
"RTN","RORX001",98,0)
 ;S:$$OPTCOL^RORXU006("DFN") TMP=$$ADDVAL^RORTSK11(RORTSK,"DFN",DFN,PTAG)
"RTN","RORX001",99,0)
 ;--- Integration Control Number
"RTN","RORX001",100,0)
 ;D:$$OPTCOL^RORXU006("ICN")
"RTN","RORX001",101,0)
 ;. S TMP=$$ICN^RORUTL02(DFN)
"RTN","RORX001",102,0)
 ;. D ADDVAL^RORTSK11(RORTSK,"ICN",$P(TMP,"V"),PTAG,1)
"RTN","RORX001",103,0)
 ;--- Pending Comment
"RTN","RORX001",104,0)
 D:$$OPTCOL^RORXU006("PENDCOMM")
"RTN","RORX001",105,0)
 . S TMP=$G(RORBUF(798,IENS,12,"I"))
"RTN","RORX001",106,0)
 . S TMP=$S($L(TMP)>0:TMP,1:"")
"RTN","RORX001",107,0)
 . D ADDVAL^RORTSK11(RORTSK,"PENDCOMM",TMP,PTAG,1)
"RTN","RORX001",108,0)
 ;--- First Healthcare Setting to Diagnose HIV
"RTN","RORX001",109,0)
 D:$$OPTCOL^RORXU006("FIRSTDIAG")
"RTN","RORX001",110,0)
 . K RORBUF,RORMSG D GETS^DIQ(799.4,IENS,12.08,"I","RORBUF","RORMSG")
"RTN","RORX001",111,0)
 . S TMP=$G(RORBUF(799.4,IENS,12.08,"I"))
"RTN","RORX001",112,0)
 . S TMP=$S($G(TMP)=1:"Yes",$G(TMP)=0:"No",$G(TMP)=9:"Unknown",1:"")
"RTN","RORX001",113,0)
 . D ADDVAL^RORTSK11(RORTSK,"FIRSTDIAG",$G(TMP),PTAG,1)
"RTN","RORX001",114,0)
 ;
"RTN","RORX001",115,0)
 Q 0
"RTN","RORX001",116,0)
 ;
"RTN","RORX001",117,0)
 ;***** COMPILES A LIST OF REGISTRY PATIENTS
"RTN","RORX001",118,0)
 ; REPORT CODE: 001
"RTN","RORX001",119,0)
 ;
"RTN","RORX001",120,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX001",121,0)
 ;
"RTN","RORX001",122,0)
 ; Return Values:
"RTN","RORX001",123,0)
 ;       <0  Error code
"RTN","RORX001",124,0)
 ;        0  Ok
"RTN","RORX001",125,0)
 ;
"RTN","RORX001",126,0)
REGPTLST(RORTSK) ;
"RTN","RORX001",127,0)
 N RORFLDS       ; Fields to load from the file #798
"RTN","RORX001",128,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX001",129,0)
 N RORREG        ; Registry IEN
"RTN","RORX001",130,0)
 ;
"RTN","RORX001",131,0)
 N BODY,CNT,ECNT,IEN,IENS,MODE,PTNAME,RC,REPORT,SFLAGS,TMP,XREFNODE
"RTN","RORX001",132,0)
 N RCC,FLAG
"RTN","RORX001",133,0)
 ;--- Root node of the report
"RTN","RORX001",134,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX001",135,0)
 Q:REPORT<0 REPORT
"RTN","RORX001",136,0)
 ;
"RTN","RORX001",137,0)
 ;--- Get and prepare the report parameters
"RTN","RORX001",138,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")
"RTN","RORX001",139,0)
 S RC=$$PARAMS^RORXU002(.RORTSK,REPORT,,,.SFLAGS)  Q:RC<0 RC
"RTN","RORX001",140,0)
 S SFLAGS=$TR(SFLAGS,"DG")
"RTN","RORX001",141,0)
 S:'$$PARAM^RORTSK01("PATIENTS","CONFIRMED") SFLAGS=SFLAGS_"C"
"RTN","RORX001",142,0)
 S:'$$PARAM^RORTSK01("PATIENTS","PENDING") SFLAGS=SFLAGS_"G"
"RTN","RORX001",143,0)
 D ADDVAL^RORTSK11(RORTSK,"TYPE",SFLAGS,REPORT)
"RTN","RORX001",144,0)
 ;
"RTN","RORX001",145,0)
 ;--- Initialize constants and variables
"RTN","RORX001",146,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX001",147,0)
 S ECNT=0,XREFNODE=$NA(^RORDATA(798,"ARP",RORREG_"#"))
"RTN","RORX001",148,0)
 ;
"RTN","RORX001",149,0)
 ;--- The report header and list of patients
"RTN","RORX001",150,0)
 S RC=$$HEADER(REPORT)  Q:RC<0 RC
"RTN","RORX001",151,0)
 S BODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX001",152,0)
 D ADDATTR^RORTSK11(RORTSK,BODY,"TABLE","PATIENTS")
"RTN","RORX001",153,0)
 Q:BODY<0 BODY
"RTN","RORX001",154,0)
 ;
"RTN","RORX001",155,0)
 ;--- Browse through the registry records
"RTN","RORX001",156,0)
 S PTNAME="",(CNT,RC)=0
"RTN","RORX001",157,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX001",158,0)
 F  S PTNAME=$O(@XREFNODE@(PTNAME))  Q:PTNAME=""  D  Q:RC<0
"RTN","RORX001",159,0)
 . S IEN=0
"RTN","RORX001",160,0)
 . F  S IEN=$O(@XREFNODE@(PTNAME,IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX001",161,0)
 . . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX001",162,0)
 . . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX001",163,0)
 . . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX001",164,0)
 . . ;--- Check if the patient should be skipped
"RTN","RORX001",165,0)
 . . Q:$$SKIP^RORXU005(IEN,SFLAGS)
"RTN","RORX001",166,0)
 . .;--- Check the patient against the ICD9 Filter
"RTN","RORX001",167,0)
 . . S DFN=$$PTIEN^RORUTL01(+IENS)
"RTN","RORX001",168,0)
 . . S RCC=0
"RTN","RORX001",169,0)
 . . I FLAG'="ALL" D
"RTN","RORX001",170,0)
 . . . S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX001",171,0)
 . . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX001",172,0)
 . . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX001",173,0)
 . .;--- End of filter check
"RTN","RORX001",174,0)
 . . ;--- Process the registry record
"RTN","RORX001",175,0)
 . . I $$PATIENT(IENS,BODY)<0  S ECNT=ECNT+1  Q
"RTN","RORX001",176,0)
 ;---
"RTN","RORX001",177,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX001",178,0)
 ;
"RTN","RORX001",179,0)
 ;***** ADDS THE SELECTION RULES TO THE REPORT
"RTN","RORX001",180,0)
 ;
"RTN","RORX001",181,0)
 ; IENS          IENS of the patient's record in the registry
"RTN","RORX001",182,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX001",183,0)
 ;
"RTN","RORX001",184,0)
 ; Return Values:
"RTN","RORX001",185,0)
 ;       <0  Error code
"RTN","RORX001",186,0)
 ;        0  Ok
"RTN","RORX001",187,0)
 ;
"RTN","RORX001",188,0)
SELRULES(IENS,PARTAG) ;
"RTN","RORX001",189,0)
 N CNT,I,RORBUF,RORMSG,RT,SRLTAG,TMP
"RTN","RORX001",190,0)
 ;--- Load the list of selection rules
"RTN","RORX001",191,0)
 K RORMSG D LIST^DIC(798.01,","_IENS,"@;.01I;1I",,,,,"B",,,"RORBUF","RORMSG")
"RTN","RORX001",192,0)
 ;Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.01,IENS)
"RTN","RORX001",193,0)
 Q:$G(RORMSG("DIERR")) $$DBS^RORERR("RORMSG",-9,,,798.01,IENS)
"RTN","RORX001",194,0)
 ;--- The <SELRULES> ... </SELRULES> tags
"RTN","RORX001",195,0)
 S SRLTAG=$$ADDVAL^RORTSK11(RORTSK,"SELRULES",,PARTAG)
"RTN","RORX001",196,0)
 ;--- Add the selection rules to the report
"RTN","RORX001",197,0)
 S I="",CNT=0
"RTN","RORX001",198,0)
 F  S I=$O(RORBUF("DILIST","ID",I))  Q:I=""  D
"RTN","RORX001",199,0)
 . S RT=$$ADDVAL^RORTSK11(RORTSK,"RULE",,SRLTAG),CNT=CNT+1
"RTN","RORX001",200,0)
 . S TMP=$G(RORBUF("DILIST","ID",I,.01))
"RTN","RORX001",201,0)
 . K RORMSG S TMP=$$GET1^DIQ(798.2,TMP_",",4,,,"RORMSG")
"RTN","RORX001",202,0)
 . ;Q:$G(DIERR)!(TMP="")
"RTN","RORX001",203,0)
 . Q:$G(RORMSG("DIERR"))!(TMP="")
"RTN","RORX001",204,0)
 . D ADDATTR^RORTSK11(RORTSK,RT,"DESCR",TMP)
"RTN","RORX001",205,0)
 . S TMP=$$DATE^RORXU002($G(RORBUF("DILIST","ID",I,1))\1)
"RTN","RORX001",206,0)
 . D:TMP'="" ADDATTR^RORTSK11(RORTSK,RT,"DATE",TMP)
"RTN","RORX001",207,0)
 ;--- Add the default item if no selection rules have been found
"RTN","RORX001",208,0)
 D:CNT'>0
"RTN","RORX001",209,0)
 . S RT=$$ADDVAL^RORTSK11(RORTSK,"RULE",,SRLTAG)
"RTN","RORX001",210,0)
 . D ADDATTR^RORTSK11(RORTSK,RT,"DESCR","Manual Entry")
"RTN","RORX001",211,0)
 Q 0
"RTN","RORX019")
0^9^B148477652^B84618518
"RTN","RORX019",1,0)
RORX019 ;BPOIFO/ACS - LIVER SCORE BY RANGE ;11/1/09
"RTN","RORX019",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,13,14**;Feb 17, 2006;Build 24
"RTN","RORX019",3,0)
 ;
"RTN","RORX019",4,0)
 ;******************************************************************************
"RTN","RORX019",5,0)
 ;******************************************************************************
"RTN","RORX019",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX019",7,0)
 ;        
"RTN","RORX019",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX019",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX019",10,0)
 ;ROR*1.5*10   MAR  2010   A SAUNDERS   Routine created
"RTN","RORX019",11,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX019",12,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX019",13,0)
 ;                                      Modified XML tags for sort.
"RTN","RORX019",14,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   Added APRI and FIB4 scores.
"RTN","RORX019",15,0)
 ;******************************************************************************
"RTN","RORX019",16,0)
 ;******************************************************************************
"RTN","RORX019",17,0)
 Q
"RTN","RORX019",18,0)
 ;************************************************************************
"RTN","RORX019",19,0)
 ;COMPILE THE "LIVER SCORE BY RANGE" REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",20,0)
 ;REPORT CODE: 019
"RTN","RORX019",21,0)
 ;
"RTN","RORX019",22,0)
 ;Called by entry "Liver Score by Range" in ROR REPORT PARAMETERS (#799.34)
"RTN","RORX019",23,0)
 ;
"RTN","RORX019",24,0)
 ;INPUT
"RTN","RORX019",25,0)
 ;  RORTSK     Task number and task parameters
"RTN","RORX019",26,0)
 ;
"RTN","RORX019",27,0)
 ;
"RTN","RORX019",28,0)
 ;  Below is a sample RORTSK input array for utilization in 2003, most recent
"RTN","RORX019",29,0)
 ;  scores, MELD range from 10 to 30, MELD Na range from 20 to 50:
"RTN","RORX019",30,0)
 ;  
"RTN","RORX019",31,0)
 ;  RORTSK=nnn   (the task number)
"RTN","RORX019",32,0)
 ;  RORTSK("EP")="$$MLDRANGE^RORX019"
"RTN","RORX019",33,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","END")=3031231
"RTN","RORX019",34,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","START")=3030101
"RTN","RORX019",35,0)
 ;  RORTSK("PARAMS","ICD9FILT","A","FILTER")="ALL"
"RTN","RORX019",36,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1)=""
"RTN","RORX019",37,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"H")=30
"RTN","RORX019",38,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"L")=10
"RTN","RORX019",39,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2)=""
"RTN","RORX019",40,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"H")=50
"RTN","RORX019",41,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"L")=20
"RTN","RORX019",42,0)
 ;  RORTSK("PARAMS","OPTIONS","A","COMPLETE")=1
"RTN","RORX019",43,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX019",44,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_AFTER")=1
"RTN","RORX019",45,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_BEFORE")=1
"RTN","RORX019",46,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_DURING")=1
"RTN","RORX019",47,0)
 ;  RORTSK("PARAMS","REGIEN")=1
"RTN","RORX019",48,0)
 ;  
"RTN","RORX019",49,0)
 ;  If the user selected an 'as of' date = 12/31/2005:
"RTN","RORX019",50,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX019",51,0)
 ;     is replaced with:  
"RTN","RORX019",52,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MAX_DATE")=3051231
"RTN","RORX019",53,0)
 ;
"RTN","RORX019",54,0)
 ;
"RTN","RORX019",55,0)
 ;OUTPUT
"RTN","RORX019",56,0)
 ;  <0  Error code
"RTN","RORX019",57,0)
 ;   0  Ok
"RTN","RORX019",58,0)
 ;************************************************************************
"RTN","RORX019",59,0)
MLDRANGE(RORTSK) ;
"RTN","RORX019",60,0)
 N RORREG        ; Registry IEN
"RTN","RORX019",61,0)
 N RORSDT        ; report start date
"RTN","RORX019",62,0)
 N ROREDT        ; report end date
"RTN","RORX019",63,0)
 N RORDATA       ; array to hold ROR data and summary totals
"RTN","RORX019",64,0)
 N RORPTIEN      ; IEN of patient in the ROR registry
"RTN","RORX019",65,0)
 N DFN           ; DFN of patient in the PATIENT file (#2)
"RTN","RORX019",66,0)
 N RORLC         ; sub-file and array of LOINC codes to search Lab data
"RTN","RORX019",67,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX019",68,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX019",69,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX019",70,0)
 ;
"RTN","RORX019",71,0)
 N REPORT,RC,I,TMP,SFLAGS,PARAMS
"RTN","RORX019",72,0)
 ;--- Establish the root XML Node of the report and put into output
"RTN","RORX019",73,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX019",74,0)
 Q:REPORT<0 REPORT
"RTN","RORX019",75,0)
 ;
"RTN","RORX019",76,0)
 ;--- Get registry IEN
"RTN","RORX019",77,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX019",78,0)
 ;
"RTN","RORX019",79,0)
 ;--- Set standard report parameters data into output:
"RTN","RORX019",80,0)
 ;registry, comment, patients (before, during, after), options (summary vs.
"RTN","RORX019",81,0)
 ;complete), other registries, and other diagnoses
"RTN","RORX019",82,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS) Q:PARAMS<0 PARAMS
"RTN","RORX019",83,0)
 ;
"RTN","RORX019",84,0)
 ;--- Add range parameters to output
"RTN","RORX019",85,0)
 S RC=$$PARAMS^RORX019A(PARAMS,.RORDATA,.RORTSK) Q:RC<0 RC
"RTN","RORX019",86,0)
 ;
"RTN","RORX019",87,0)
 ;--- Get ULNAST value for calculations
"RTN","RORX019",88,0)
 I $D(RORTSK("PARAMS","ULNAST")) S RORDATA("ULNAST")=$G(RORTSK("PARAMS","ULNAST"))
"RTN","RORX019",89,0)
 ;
"RTN","RORX019",90,0)
 ;--- Put report header data into output:
"RTN","RORX019",91,0)
 ;report creation date, task number, last registry update date, last
"RTN","RORX019",92,0)
 ;data extraction date, and ULNAST if present
"RTN","RORX019",93,0)
 S RC=$$HEADER(REPORT,PARAMS) Q:RC<0 RC
"RTN","RORX019",94,0)
 ;
"RTN","RORX019",95,0)
 ;--- Get test ranges requested
"RTN","RORX019",96,0)
 ;I=1 ==> report = MELD      I=2 ==> report = MELD Na
"RTN","RORX019",97,0)
 ;I=3 ==> report = APRI      I=4 ==> report = FIB-4
"RTN","RORX019",98,0)
 S I=0 F  S I=$O(RORTSK("PARAMS","LRGRANGES","C",I)) Q:I=""  D
"RTN","RORX019",99,0)
 . S RORDATA("L",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"L")) ;low range
"RTN","RORX019",100,0)
 . S RORDATA("H",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"H")) ;high range
"RTN","RORX019",101,0)
 ;
"RTN","RORX019",102,0)
 ;--- Get Max Date for test results  OUTPUT: RORDATA("DATE")
"RTN","RORX019",103,0)
 ;In the GUI, the user selects either 'most recent' or 'as of' date
"RTN","RORX019",104,0)
 S RORDATA("DATE")=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORX019",105,0)
 I $G(RORDATA("DATE"))="" S RORDATA("DATE")=DT
"RTN","RORX019",106,0)
 ;
"RTN","RORX019",107,0)
 ;--- Create 'patients' table
"RTN","RORX019",108,0)
 N RORBODY S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX019",109,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX019",110,0)
 ;
"RTN","RORX019",111,0)
 ;--- Check utilization
"RTN","RORX019",112,0)
 N CNT,ECNT,UTSDT,UTEDT,SKIPSDT,SKIPEDT
"RTN","RORX019",113,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX019",114,0)
 ; Utilization date range is always sent
"RTN","RORX019",115,0)
 S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX019",116,0)
 S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX019",117,0)
 ; Combined date range
"RTN","RORX019",118,0)
 S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,$G(UTSDT))
"RTN","RORX019",119,0)
 S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,$G(UTEDT))
"RTN","RORX019",120,0)
 ;
"RTN","RORX019",121,0)
 ;--- Number of patients in the registry - used for calculating the
"RTN","RORX019",122,0)
 ;task progress percentage (shown on the GUI screen)
"RTN","RORX019",123,0)
 N RORPTCNT S RORPTCNT=$$REGSIZE^RORUTL02(+RORREG) S:RORPTCNT<0 RORPTCNT=0
"RTN","RORX019",124,0)
 ;
"RTN","RORX019",125,0)
 ;--- LOINC codes
"RTN","RORX019",126,0)
 I "1,2"[RORDATA("IDLST") D  ;If MELD or MELD-NA scores requested
"RTN","RORX019",127,0)
 . ;create list for future comparison
"RTN","RORX019",128,0)
 . S RORDATA("CR_LOINC")=";15045-8;21232-4;2160-0;" ;Creatinine
"RTN","RORX019",129,0)
 . S RORDATA("BIL_LOINC")=";14631-6;1975-2;" ;Bilirubin
"RTN","RORX019",130,0)
 . S RORDATA("SOD_LOINC")=";2947-0;2951-2;32717-1;" ;Sodium
"RTN","RORX019",131,0)
 . S RORDATA("INR_LOINC")=";34714-6;6301-6;" ;INR 
"RTN","RORX019",132,0)
 . ;set up array for future call to Lab API
"RTN","RORX019",133,0)
 . S RORLC="CH" ;chemistry sub-file to search in #63
"RTN","RORX019",134,0)
 . S RORLC(1)="15045-8^LN" ;Creatinine LOINC
"RTN","RORX019",135,0)
 . S RORLC(2)="21232-4^LN" ;Creatinine LOINC
"RTN","RORX019",136,0)
 . S RORLC(3)="2160-0^LN"  ;Creatinine LOINC
"RTN","RORX019",137,0)
 . S RORLC(4)="14631-6^LN" ;Bilirubin LOINC
"RTN","RORX019",138,0)
 . S RORLC(5)="1975-2^LN"  ;Bilirubin LOINC
"RTN","RORX019",139,0)
 . S RORLC(6)="2947-0^LN"  ;Sodium LOINC
"RTN","RORX019",140,0)
 . S RORLC(7)="2951-2^LN"  ;Sodium LOINC
"RTN","RORX019",141,0)
 . S RORLC(8)="32717-1^LN" ;Sodium LOINC
"RTN","RORX019",142,0)
 . S RORLC(9)="34714-6^LN" ;INR LOINC
"RTN","RORX019",143,0)
 . S RORLC(10)="6301-6^LN" ;INR LOINC
"RTN","RORX019",144,0)
 ;
"RTN","RORX019",145,0)
 I "3,4"[RORDATA("IDLST") D  ;If APRI or FIB-4 scores requested
"RTN","RORX019",146,0)
 . ;create list for future comparison
"RTN","RORX019",147,0)
 . S RORDATA("AST_LOINC")=";1916-6;1920-8;127344-1;" ;AST 
"RTN","RORX019",148,0)
 . S RORDATA("PLAT_LOINC")=";777-3;778-1;26515-7;" ;Platelets 
"RTN","RORX019",149,0)
 . S RORDATA("ALT_LOINC")=";1742-6;16325-3;" ;ALT 
"RTN","RORX019",150,0)
 . ;set up array for future call to Lab API
"RTN","RORX019",151,0)
 . S RORLC="CH" ;chemistry sub-file to search in #63
"RTN","RORX019",152,0)
 . S RORLC(1)="1916-6^LN" ;AST LOINC
"RTN","RORX019",153,0)
 . S RORLC(2)="1920-8^LN" ;AST LOINC
"RTN","RORX019",154,0)
 . ;S RORLC(3)="127344-1^LN" ;AST LOINC
"RTN","RORX019",155,0)
 . S RORLC(4)="777-3^LN" ;Platelets LOINC
"RTN","RORX019",156,0)
 . S RORLC(5)="778-1^LN" ;Platelets LOINC
"RTN","RORX019",157,0)
 . S RORLC(6)="26515-7^LN" ;Platelets LOINC
"RTN","RORX019",158,0)
 . S RORLC(7)="1742-6^LN" ;ALT LOINC
"RTN","RORX019",159,0)
 . S RORLC(8)="16325-3^LN" ;ALT LOINC
"RTN","RORX019",160,0)
 ;
"RTN","RORX019",161,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX019",162,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX019",163,0)
 ;
"RTN","RORX019",164,0)
 ;--- Get registry records
"RTN","RORX019",165,0)
 N RCC,FLAG,TMP,DFN,SKIP
"RTN","RORX019",166,0)
 S (CNT,RORPTIEN,RC)=0
"RTN","RORX019",167,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX019",168,0)
 F  S RORPTIEN=$O(^RORDATA(798,"AC",RORREG,RORPTIEN))  Q:RORPTIEN'>0  D  Q:RC<0
"RTN","RORX019",169,0)
 . ;--- Calculate 'progress' for the GUI display
"RTN","RORX019",170,0)
 . S TMP=$S(RORPTCNT>0:CNT/RORPTCNT,1:"")
"RTN","RORX019",171,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX019",172,0)
 . S CNT=CNT+1
"RTN","RORX019",173,0)
 . ;--- Get patient DFN
"RTN","RORX019",174,0)
 . S DFN=$$PTIEN^RORUTL01(RORPTIEN) Q:DFN'>0
"RTN","RORX019",175,0)
 . ;check for patient list and quit if not on list
"RTN","RORX019",176,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",DFN)) Q
"RTN","RORX019",177,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX019",178,0)
 . Q:$$SKIP^RORXU005(RORPTIEN,SFLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX019",179,0)
 . ;--- Check if patient has passed the ICD9 filter
"RTN","RORX019",180,0)
 . S RCC=0
"RTN","RORX019",181,0)
 . I FLAG'="ALL" D
"RTN","RORX019",182,0)
 . . S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX019",183,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX019",184,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX019",185,0)
 . ;
"RTN","RORX019",186,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX019",187,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,DFN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX019",188,0)
 . ;
"RTN","RORX019",189,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX019",190,0)
 . S SKIP=0 I $G(UTSDT)>0 D
"RTN","RORX019",191,0)
 .. N UTIL K TMP S TMP("ALL")=1
"RTN","RORX019",192,0)
 .. S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,DFN,.TMP)
"RTN","RORX019",193,0)
 .. S:'UTIL SKIP=1
"RTN","RORX019",194,0)
 . ;--- Skip the patient if they have no utilization in the range
"RTN","RORX019",195,0)
 . I $G(SKIP) Q
"RTN","RORX019",196,0)
 . ;
"RTN","RORX019",197,0)
 . ;--- For each patient, process the registry record and create report
"RTN","RORX019",198,0)
 . I $$PATIENT(DFN,RORBODY,.RORDATA,RORPTIEN,.RORLC)<0 S ECNT=ECNT+1 ;error count
"RTN","RORX019",199,0)
 ;
"RTN","RORX019",200,0)
 K ^TMP("RORX019",$J)
"RTN","RORX019",201,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX019",202,0)
 ;
"RTN","RORX019",203,0)
 ;************************************************************************
"RTN","RORX019",204,0)
 ;ADD PATIENT DATA TO THE REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",205,0)
 ;
"RTN","RORX019",206,0)
 ;INPUT
"RTN","RORX019",207,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX019",208,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX019",209,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019",210,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX019",211,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX019",212,0)
 ;
"RTN","RORX019",213,0)
 ;OUTPUT
"RTN","RORX019",214,0)
 ;  1        ok
"RTN","RORX019",215,0)
 ; <0        error
"RTN","RORX019",216,0)
 ;************************************************************************
"RTN","RORX019",217,0)
PATIENT(DFN,PTAG,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX019",218,0)
 ;Calculate the scores requested by the user
"RTN","RORX019",219,0)
 I ((RORDATA("IDLST")[1)!(RORDATA("IDLST")[2)) I $$CALCMLD^RORX019A(DFN,PTAG,.RORDATA,RORPTIEN,.RORLC)<0 Q 1
"RTN","RORX019",220,0)
 I ((RORDATA("IDLST")[3)!(RORDATA("IDLST")[4)) I $$CALCFIB^RORX019A(DFN,PTAG,.RORDATA,RORPTIEN,.RORLC)<0 Q 1
"RTN","RORX019",221,0)
 I '$$INRANGE(.RORDATA) Q 1  ;exclude patient from report if ANY score is out of range
"RTN","RORX019",222,0)
 ;--- Get patient data and put into the report
"RTN","RORX019",223,0)
 N VADM,VA,RORDOD,MTAG,TTAG
"RTN","RORX019",224,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX019",225,0)
 ;--- The <PATIENT> tag
"RTN","RORX019",226,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTAG,,DFN)
"RTN","RORX019",227,0)
 I PTAG<0 Q PTAG
"RTN","RORX019",228,0)
 ;--- Patient Name
"RTN","RORX019",229,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX019",230,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX019",231,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX019",232,0)
 ;--- Date of death
"RTN","RORX019",233,0)
 S RORDOD=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX019",234,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$G(RORDOD),PTAG,1)
"RTN","RORX019",235,0)
 ;--- MELDDATA tag
"RTN","RORX019",236,0)
 S MTAG=$$ADDVAL^RORTSK11(RORTSK,"MELDDATA",,PTAG)
"RTN","RORX019",237,0)
 I MTAG<0 Q MTAG
"RTN","RORX019",238,0)
 ;--- Test Result Values
"RTN","RORX019",239,0)
 N TNAME,TNAMEMIX F TNAME="BILI","CR","INR","NA","AST","PLAT","ALT" D
"RTN","RORX019",240,0)
 . ;--- TEST tag
"RTN","RORX019",241,0)
 . S TTAG=$$ADDVAL^RORTSK11(RORTSK,"TEST",,MTAG)
"RTN","RORX019",242,0)
 . I TTAG<0 Q
"RTN","RORX019",243,0)
 . ;--- Mixed case test name for GUI application
"RTN","RORX019",244,0)
 . I TNAME="BILI" S TNAMEMIX="Bili"
"RTN","RORX019",245,0)
 . I TNAME="CR" S TNAMEMIX="Cr"
"RTN","RORX019",246,0)
 . I TNAME="INR" S TNAMEMIX="INR"
"RTN","RORX019",247,0)
 . I TNAME="NA" S TNAMEMIX="Na"
"RTN","RORX019",248,0)
 . I TNAME="AST" S TNAMEMIX="AST"
"RTN","RORX019",249,0)
 . I TNAME="PLAT" S TNAMEMIX="Platelet"
"RTN","RORX019",250,0)
 . I TNAME="ALT" S TNAMEMIX="ALT"
"RTN","RORX019",251,0)
 . ;---  Test Name
"RTN","RORX019",252,0)
 . D ADDVAL^RORTSK11(RORTSK,"TNAME",TNAMEMIX,TTAG)
"RTN","RORX019",253,0)
 . ;---  Test Date
"RTN","RORX019",254,0)
 . D ADDVAL^RORTSK11(RORTSK,"DATE",$P($G(RORDATA(TNAME)),U,2),TTAG)
"RTN","RORX019",255,0)
 . ;---  Test Result Value
"RTN","RORX019",256,0)
 . D ADDVAL^RORTSK11(RORTSK,"RESULT",$P($G(RORDATA(TNAME)),U,1),TTAG)
"RTN","RORX019",257,0)
 ;---  MELD score
"RTN","RORX019",258,0)
 I RORDATA("IDLST")[1 D ADDVAL^RORTSK11(RORTSK,"MELD",$G(RORDATA("SCORE",1)),PTAG,3)
"RTN","RORX019",259,0)
 ;---  MELD-Na Score
"RTN","RORX019",260,0)
 I RORDATA("IDLST")[2 D ADDVAL^RORTSK11(RORTSK,"MELDNA",$G(RORDATA("SCORE",2)),PTAG,3)
"RTN","RORX019",261,0)
 ;---  APRI Score
"RTN","RORX019",262,0)
 I RORDATA("IDLST")[3 D ADDVAL^RORTSK11(RORTSK,"APRI",$G(RORDATA("SCORE",3)),PTAG,3)
"RTN","RORX019",263,0)
 ;---  FIB-4 Score
"RTN","RORX019",264,0)
 I RORDATA("IDLST")[4 D ADDVAL^RORTSK11(RORTSK,"FIB4",$G(RORDATA("SCORE",4)),PTAG,3)
"RTN","RORX019",265,0)
 Q ($S($G(TTAG)<0:TTAG,1:1))
"RTN","RORX019",266,0)
 ;
"RTN","RORX019",267,0)
 ;************************************************************************
"RTN","RORX019",268,0)
 ;DETERMINE IF THE SCORES ARE WITHIN THE REQUESTED RANGES
"RTN","RORX019",269,0)
 ;-- If both tests contain ranges: scores for BOTH tests must fall in the
"RTN","RORX019",270,0)
 ;ranges...treated like an 'AND'
"RTN","RORX019",271,0)
 ;-- If 1 test contains a range: only patients with scores in the requested range
"RTN","RORX019",272,0)
 ;will be displayed, and the test without the range will also be displayed
"RTN","RORX019",273,0)
 ;with the calculated score (if applicable)
"RTN","RORX019",274,0)
 ;-- If neither test contains a range: all patients and their test results
"RTN","RORX019",275,0)
 ;and scores (null if they can't be calculated) are returned
"RTN","RORX019",276,0)
 ;
"RTN","RORX019",277,0)
 ;INPUT
"RTN","RORX019",278,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019",279,0)
 ;OUTPUT
"RTN","RORX019",280,0)
 ;  1        include on report
"RTN","RORX019",281,0)
 ;  0        exclude from report
"RTN","RORX019",282,0)
 ;************************************************************************
"RTN","RORX019",283,0)
INRANGE(RORDATA) ;
"RTN","RORX019",284,0)
 ;include data and quit if no range was sent in
"RTN","RORX019",285,0)
 Q:($D(RORDATA("RANGE"))'>1) 1
"RTN","RORX019",286,0)
 ;check scores to see if they are within the user-selected range(s)
"RTN","RORX019",287,0)
 N I,RETURN,SCORE S RETURN=1 ;default is set to 'within range'
"RTN","RORX019",288,0)
 S I=0 F  S I=$O(RORDATA("RANGE",I)) Q:I=""  D
"RTN","RORX019",289,0)
 . I $G(RORDATA("L",I))'="" D
"RTN","RORX019",290,0)
 .. S SCORE=$G(RORDATA("SCORE",I))
"RTN","RORX019",291,0)
 .. I $G(SCORE)="" S RETURN=0 Q
"RTN","RORX019",292,0)
 .. I SCORE<RORDATA("L",I) S RETURN=0
"RTN","RORX019",293,0)
 . I $G(RORDATA("H",I))'="" D
"RTN","RORX019",294,0)
 .. S SCORE=$G(RORDATA("SCORE",I))
"RTN","RORX019",295,0)
 .. I $G(SCORE)="" S RETURN=0 Q
"RTN","RORX019",296,0)
 .. I SCORE>$G(RORDATA("H",I)) S RETURN=0
"RTN","RORX019",297,0)
 ;
"RTN","RORX019",298,0)
 Q RETURN
"RTN","RORX019",299,0)
 ;
"RTN","RORX019",300,0)
 ;************************************************************************
"RTN","RORX019",301,0)
 ;ADD THE HEADERS TO THE REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",302,0)
 ;
"RTN","RORX019",303,0)
 ;INPUT
"RTN","RORX019",304,0)
 ;  PARTAG  Reference IEN to the 'report' parent XML tag
"RTN","RORX019",305,0)
 ;  PARAMS  Reference IEN to the 'params' parent XML tag
"RTN","RORX019",306,0)
 ;
"RTN","RORX019",307,0)
 ;OUTPUT
"RTN","RORX019",308,0)
 ;  <0      error
"RTN","RORX019",309,0)
 ;  >0      'Header' XML tag number or error code
"RTN","RORX019",310,0)
 ;************************************************************************
"RTN","RORX019",311,0)
HEADER(PARTAG,PARAMS) ;
"RTN","RORX019",312,0)
 N HEADER,RC,COL,COLUMNS,TMP S RC=0
"RTN","RORX019",313,0)
 ;call to $$HEADER^RORXU002 will populate the report created date, task number,
"RTN","RORX019",314,0)
 ;last registry update, and last data extraction.
"RTN","RORX019",315,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX019",316,0)
 Q:HEADER<0 HEADER
"RTN","RORX019",317,0)
 ;manually build the table defintion(s) listed below
"RTN","RORX019",318,0)
 ;PATIENTS(#,NAME,LAST4,DOD,TEST,DATE,RESULT,MELD,MELDNA,APRI,FIB4)
"RTN","RORX019",319,0)
 S COLUMNS=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORX019",320,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"NAME","PATIENTS")
"RTN","RORX019",321,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"HEADER","1")
"RTN","RORX019",322,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"FOOTER","1")
"RTN","RORX019",323,0)
 ;--- Required columns
"RTN","RORX019",324,0)
 F COL="#","NAME","LAST4","DOD","TEST","DATE","RESULT"  D
"RTN","RORX019",325,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",326,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX019",327,0)
 ;--- Additional columns
"RTN","RORX019",328,0)
 I RORDATA("IDLST")[1 D
"RTN","RORX019",329,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",330,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","MELD")
"RTN","RORX019",331,0)
 I RORDATA("IDLST")[2 D
"RTN","RORX019",332,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",333,0)
 . ;D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","MELDNA")
"RTN","RORX019",334,0)
 . ;note: the column name length above was causing problems in the
"RTN","RORX019",335,0)
 . ;XSL diaglog file entry 7981019.001, so we shortened it to just "NA".
"RTN","RORX019",336,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","NA")
"RTN","RORX019",337,0)
 I RORDATA("IDLST")[3 D
"RTN","RORX019",338,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",339,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","APRI")
"RTN","RORX019",340,0)
 I RORDATA("IDLST")[4 D
"RTN","RORX019",341,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",342,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","FIB4")
"RTN","RORX019",343,0)
 ;--- LOINC codes
"RTN","RORX019",344,0)
 N LTAG S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOINC_CODES",,PARTAG)
"RTN","RORX019",345,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",346,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","ALT: 1742-6, 16325-3")
"RTN","RORX019",347,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",348,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","AST: 1916-6, 1920-8, 127344-1")
"RTN","RORX019",349,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",350,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Billirubin: 14631-6, 1975-2")
"RTN","RORX019",351,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",352,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Creatinine: 15045-8, 21232-4, 2160-0")
"RTN","RORX019",353,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",354,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","INR: 34714-6, 6301-6")
"RTN","RORX019",355,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",356,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Platelets: 777-3, 778-1, 26515-7")
"RTN","RORX019",357,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX019",358,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Sodium: 2947-0, 2951-2, 32717-1")
"RTN","RORX019",359,0)
 ;
"RTN","RORX019",360,0)
 ;Add ULNAST value if passed in
"RTN","RORX019",361,0)
 I $G(RORTSK("PARAMS","ULNAST")) D
"RTN","RORX019",362,0)
 . N ULNAST S ULNAST=$$ADDVAL^RORTSK11(RORTSK,"ULNAST",,PARAMS)
"RTN","RORX019",363,0)
 . D ADDATTR^RORTSK11(RORTSK,ULNAST,"VALUES",$G(RORDATA("ULNAST")))
"RTN","RORX019",364,0)
 ;
"RTN","RORX019",365,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX019",366,0)
 ;
"RTN","RORX019A")
0^10^B208916635^B87729688
"RTN","RORX019A",1,0)
RORX019A ;BPOIFO/ACS - LIVER SCORE BY RANGE (CONT.) ;11/1/09
"RTN","RORX019A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,13,14**;Feb 17, 2006;Build 24
"RTN","RORX019A",3,0)
 ;
"RTN","RORX019A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX019A",5,0)
 ;
"RTN","RORX019A",6,0)
 ; #10105 $$LN^XLFMTH (supported)
"RTN","RORX019A",7,0)
 ; #3556  GCPR^LA7QRY (supported)
"RTN","RORX019A",8,0)
 ; #10061 DEM^VADPT   (supported)
"RTN","RORX019A",9,0)
 ;
"RTN","RORX019A",10,0)
 ;******************************************************************************
"RTN","RORX019A",11,0)
 ;******************************************************************************
"RTN","RORX019A",12,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX019A",13,0)
 ;        
"RTN","RORX019A",14,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX019A",15,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX019A",16,0)
 ;ROR*1.5*10   MAR  2010   A SAUNDERS   Routine created
"RTN","RORX019A",17,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Moved tag CALCMLD to this routine
"RTN","RORX019A",18,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   Added logic to calculate the APRI and
"RTN","RORX019A",19,0)
 ;                                      FIB4 scores.
"RTN","RORX019A",20,0)
 ;                                      
"RTN","RORX019A",21,0)
 ;******************************************************************************
"RTN","RORX019A",22,0)
 ;******************************************************************************
"RTN","RORX019A",23,0)
 Q
"RTN","RORX019A",24,0)
 ;
"RTN","RORX019A",25,0)
 ;*****************************************************************************
"RTN","RORX019A",26,0)
 ;OUTPUT REPORT 'RANGE' PARAMETERS, SET UP REPORT ID LIST (EXTRINISIC FUNCTION)
"RTN","RORX019A",27,0)
 ;
"RTN","RORX019A",28,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX019A",29,0)
 ;
"RTN","RORX019A",30,0)
 ; Return Values:
"RTN","RORX019A",31,0)
 ;        RORDATA("IDLST") - list of IDs for tests requested
"RTN","RORX019A",32,0)
 ;       <0  Error code
"RTN","RORX019A",33,0)
 ;        0  Ok
"RTN","RORX019A",34,0)
 ;*****************************************************************************
"RTN","RORX019A",35,0)
PARAMS(PARTAG,RORDATA,RORTSK) ;
"RTN","RORX019A",36,0)
 N PARAMS,DESC,TMP,RC S RC=0
"RTN","RORX019A",37,0)
 ;--- Lab test ranges
"RTN","RORX019A",38,0)
 S RORDATA("RANGE",1)=0 ;initialize MELD to 'no range passed in'
"RTN","RORX019A",39,0)
 S RORDATA("RANGE",2)=0 ;initialize MELD Na to 'no range passed in'
"RTN","RORX019A",40,0)
 S RORDATA("RANGE",3)=0 ;initialize APRI to 'no range passed in'
"RTN","RORX019A",41,0)
 S RORDATA("RANGE",4)=0 ;initialize FIB4 to 'no range passed in'
"RTN","RORX019A",42,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORX019A",43,0)
 . N GRC,ELEMENT,NODE,RTAG,RANGE
"RTN","RORX019A",44,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX019A",45,0)
 . S RTAG=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGES",,PARTAG)
"RTN","RORX019A",46,0)
 . S (GRC,RC)=0
"RTN","RORX019A",47,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORX019A",48,0)
 .. S RANGE=0,DESC=$$RTEXT(GRC,.RORDATA,.RORTSK) ;get range description
"RTN","RORX019A",49,0)
 .. S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGE",DESC,RTAG) ;add desc to output
"RTN","RORX019A",50,0)
 .. I ELEMENT<0 S RC=ELEMENT Q
"RTN","RORX019A",51,0)
 .. D ADDATTR^RORTSK11(RORTSK,ELEMENT,"ID",GRC)
"RTN","RORX019A",52,0)
 .. ;add test ID to the test ID 'list'
"RTN","RORX019A",53,0)
 .. S RORDATA("IDLST")=$G(RORDATA("IDLST"))_$S($G(RORDATA("IDLST"))'="":","_GRC,1:GRC)
"RTN","RORX019A",54,0)
 .. ;--- Process the range values
"RTN","RORX019A",55,0)
 .. S TMP=$G(@NODE@(GRC,"L"))
"RTN","RORX019A",56,0)
 .. I TMP'="" D  S RANGE=1
"RTN","RORX019A",57,0)
 ... D ADDATTR^RORTSK11(RORTSK,ELEMENT,"LOW",TMP) S RORDATA("RANGE",GRC)=1
"RTN","RORX019A",58,0)
 .. S TMP=$G(@NODE@(GRC,"H"))
"RTN","RORX019A",59,0)
 .. I TMP'="" D  S RANGE=1
"RTN","RORX019A",60,0)
 ... D ADDATTR^RORTSK11(RORTSK,ELEMENT,"HIGH",TMP) S RORDATA("RANGE",GRC)=1
"RTN","RORX019A",61,0)
 .. I RANGE D ADDATTR^RORTSK11(RORTSK,ELEMENT,"RANGE",1)
"RTN","RORX019A",62,0)
 ;if user didn't select any tests, default to both tests
"RTN","RORX019A",63,0)
 ;I $G(RORDATA("IDLST"))="" S RORDATA("IDLST")="1,2" ;user must select a report in PATCH 12
"RTN","RORX019A",64,0)
 ;--- Success
"RTN","RORX019A",65,0)
 Q RC
"RTN","RORX019A",66,0)
 ;
"RTN","RORX019A",67,0)
 ;*****************************************************************************
"RTN","RORX019A",68,0)
 ;RETURN RANGE TEXT, ADD RANGE VALUES TO RORDATA (EXTRINISIC FUNCTION)
"RTN","RORX019A",69,0)
 ;
"RTN","RORX019A",70,0)
 ;INPUT:
"RTN","RORX019A",71,0)
 ;  GRC   Test ID number
"RTN","RORX019A",72,0)
 ;        ID=1: MELD
"RTN","RORX019A",73,0)
 ;        ID=2: MELD-Na
"RTN","RORX019A",74,0)
 ;        ID=3: APRI
"RTN","RORX019A",75,0)
 ;        ID=4: FIB4
"RTN","RORX019A",76,0)
 ;  RORDATA - Array with ROR data
"RTN","RORX019A",77,0)
 ;  RORTSK  - Task parameters
"RTN","RORX019A",78,0)
 ;
"RTN","RORX019A",79,0)
 ;OUTPUT:
"RTN","RORX019A",80,0)
 ;  RORDATA(ID,"L") - test ID low range
"RTN","RORX019A",81,0)
 ;  RORDATA(ID,"H") - test ID high range
"RTN","RORX019A",82,0)
 ;  Description - <range>
"RTN","RORX019A",83,0)
 ;*****************************************************************************
"RTN","RORX019A",84,0)
RTEXT(GRC,RORDATA,RORTSK) ;
"RTN","RORX019A",85,0)
 N RANGE,TMP
"RTN","RORX019A",86,0)
 S RANGE=""
"RTN","RORX019A",87,0)
 ;--- Range
"RTN","RORX019A",88,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C",GRC))>1 D
"RTN","RORX019A",89,0)
 . ;--- Low
"RTN","RORX019A",90,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"L"))
"RTN","RORX019A",91,0)
 . S RORDATA(GRC,"L")=$G(TMP)
"RTN","RORX019A",92,0)
 . S:TMP'="" RANGE=RANGE_" not less than "_TMP
"RTN","RORX019A",93,0)
 . ;--- High
"RTN","RORX019A",94,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"H"))
"RTN","RORX019A",95,0)
 . S RORDATA(GRC,"H")=$G(TMP)
"RTN","RORX019A",96,0)
 . I TMP'=""  D:RANGE'=""  S RANGE=RANGE_" not greater than "_TMP
"RTN","RORX019A",97,0)
 . . S RANGE=RANGE_" and"
"RTN","RORX019A",98,0)
 ;--- Description
"RTN","RORX019A",99,0)
 S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC))
"RTN","RORX019A",100,0)
 S:TMP="" TMP="Unknown ("_GRC_")"
"RTN","RORX019A",101,0)
 Q TMP_" - "_$S(RANGE'="":"numeric results"_RANGE,1:"all results")
"RTN","RORX019A",102,0)
 ;
"RTN","RORX019A",103,0)
 ;************************************************************************
"RTN","RORX019A",104,0)
 ;CALCULATE THE MELD SCORE(S) - MELD AND MELD-NA
"RTN","RORX019A",105,0)
 ;
"RTN","RORX019A",106,0)
 ;INPUT
"RTN","RORX019A",107,0)
 ;  DFN      Patient DFN in LAB DATA file (#63)
"RTN","RORX019A",108,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX019A",109,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019A",110,0)
 ;           RORDATA("FIELDS") - Field list for retrieving the test results
"RTN","RORX019A",111,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX019A",112,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX019A",113,0)
 ;           
"RTN","RORX019A",114,0)
 ;OUTPUT
"RTN","RORX019A",115,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019A",116,0)
 ;           RORDATA("BILI")=RESULT^DATE   - Bilirubin result and date
"RTN","RORX019A",117,0)
 ;           RORDATA("CR")=RESULT^DATE     - Creatinine result and date
"RTN","RORX019A",118,0)
 ;           RORDATA("INR")=RESULT^DATE    - INR result and date
"RTN","RORX019A",119,0)
 ;           RORDATA("NA")=RESULT^DATE     - Sodium result and date
"RTN","RORX019A",120,0)
 ;           RORDATA("SCORE",1)            - MELD score
"RTN","RORX019A",121,0)
 ;           RORDATA("SCORE",2)            - MELD-Na score
"RTN","RORX019A",122,0)
 ;
"RTN","RORX019A",123,0)
 ;    1      Patient should appear on report
"RTN","RORX019A",124,0)
 ;   -1      Patient should NOT appear on report
"RTN","RORX019A",125,0)
 ;   
"RTN","RORX019A",126,0)
 ;   NOTE: the 'invalid' results will be stored as 'backup' results, in
"RTN","RORX019A",127,0)
 ;   case no valid result is found for Creatinine or Sodium.  An invalid
"RTN","RORX019A",128,0)
 ;   creatinine result is >12.  An invalid Sodium result is <100 or >180.
"RTN","RORX019A",129,0)
 ;   These results will be displayed on the report if no MELD range was 
"RTN","RORX019A",130,0)
 ;   specifically requested by the user, but the score will not be calculated.
"RTN","RORX019A",131,0)
 ;   They will not be displayed on the report if the user requested a MELD
"RTN","RORX019A",132,0)
 ;   range.
"RTN","RORX019A",133,0)
 ;************************************************************************
"RTN","RORX019A",134,0)
CALCMLD(DFN,PTAG,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX019A",135,0)
 N RORID,RORST,ROREND,RORLAB,RORMSG,RC
"RTN","RORX019A",136,0)
 S RORDATA("CALC")=0,RORDATA("CALCNA")=0 ;don't automatically calculate scores
"RTN","RORX019A",137,0)
 K RORDATA("SCORE",1),RORDATA("SCORE",2) ;calculated test scores
"RTN","RORX019A",138,0)
 K RORDATA("BVAL"),RORDATA("CVAL"),RORDATA("IVAL"),RORDATA("SVAL") ;test results
"RTN","RORX019A",139,0)
 K RORDATA("CINV"),RORDATA("SINV") ;test results
"RTN","RORX019A",140,0)
 K RORDATA("BILI"),RORDATA("CR"),RORDATA("INR"),RORDATA("NA") ;test result&date
"RTN","RORX019A",141,0)
 ;get patient ICN or SSN
"RTN","RORX019A",142,0)
 S RORID=$$PTID^RORUTL02(DFN)
"RTN","RORX019A",143,0)
 Q:'$G(RORID) -1
"RTN","RORX019A",144,0)
 ;---SET UP LAB API INPUT/OUTPUT PARMS---
"RTN","RORX019A",145,0)
 S RORST="2000101^CD" ;start date 1/1/1900
"RTN","RORX019A",146,0)
 S ROREND=$G(RORDATA("DATE"))\1 ;end date
"RTN","RORX019A",147,0)
 ;add 1 to the end date so the Lab API INCLUDES the end date correctly
"RTN","RORX019A",148,0)
 N X1,X2,X3 S X1=ROREND,X2=1 D C^%DTC S ROREND=X K X,X1,X2
"RTN","RORX019A",149,0)
 S ROREND=ROREND_"^CD"
"RTN","RORX019A",150,0)
 S RORLAB=$NA(^TMP("ROROUT",$J)) ;lab API output global
"RTN","RORX019A",151,0)
 K RORMSG,@RORLAB ;initialize prior to call
"RTN","RORX019A",152,0)
 ;---CALL LAB API---
"RTN","RORX019A",153,0)
 S RC=$$GCPR^LA7QRY(RORID,RORST,ROREND,.RORLC,"*",.RORMSG,RORLAB)
"RTN","RORX019A",154,0)
 I RC="",$D(RORMSG)>1  D  ;quit if error returned
"RTN","RORX019A",155,0)
 . N ERR,I,LST,TMP
"RTN","RORX019A",156,0)
 . S (ERR,LST)=""
"RTN","RORX019A",157,0)
 . F I=1:1  S ERR=$O(RORMSG(ERR))  Q:ERR=""  D
"RTN","RORX019A",158,0)
 . . S LST=LST_","_ERR,TMP=RORMSG(ERR)
"RTN","RORX019A",159,0)
 . . K RORMSG(ERR)  S RORMSG(I)=TMP
"RTN","RORX019A",160,0)
 . S LST=$P(LST,",",2,999)  Q:(LST=3)!(LST=99)
"RTN","RORX019A",161,0)
 . S RC=$$ERROR^RORERR(-27,,.RORMSG,RORPTIEN)
"RTN","RORX019A",162,0)
 I RC<0 Q -1
"RTN","RORX019A",163,0)
 ;Note: the Lab API returns data in the form of HL7 segments
"RTN","RORX019A",164,0)
 N TMP,RORSPEC,RORVAL,RORNODE,RORSEG,SEGTYPE,RORLOINC,RORDONE,RORDATE,RORTEST
"RTN","RORX019A",165,0)
 N RORCR,RORBIL,RORSOD,RORINR,FS
"RTN","RORX019A",166,0)
 S FS="|" ;HL7 field separator for lab data
"RTN","RORX019A",167,0)
 S (RORCR,RORBIL,RORSOD,RORINR,RORDONE,RORNODE)=0
"RTN","RORX019A",168,0)
 F  S RORNODE=$O(^TMP("ROROUT",$J,RORNODE)) Q:((RORNODE="")!(RORDONE))  D
"RTN","RORX019A",169,0)
 . S RORSEG=$G(^TMP("ROROUT",$J,RORNODE)) ;get entire HL7 segment
"RTN","RORX019A",170,0)
 . S SEGTYPE=$P(RORSEG,FS,1) ;get segment type (PID,OBR,OBX,etc.)
"RTN","RORX019A",171,0)
 . Q:SEGTYPE'="OBX"  ;we want OBX segments only
"RTN","RORX019A",172,0)
 . S RORSPEC=$P($P(RORSEG,FS,4),U,2) ;specimen type string (urine, serum, etc.)
"RTN","RORX019A",173,0)
 . S RORSPEC=":"_RORSPEC_":" ;append ":" as prefix and suffix
"RTN","RORX019A",174,0)
 . I ((RORSPEC[":UA:")!(RORSPEC[":UR:")) Q  ;quit if specimen type is urine
"RTN","RORX019A",175,0)
 . S RORLOINC=$P($P(RORSEG,FS,4),U,1) ;get LOINC code for test
"RTN","RORX019A",176,0)
 . S RORVAL=$P(RORSEG,FS,6) ;test result value
"RTN","RORX019A",177,0)
 . S RORVAL=$TR(RORVAL,"""","") ;get rid of double quotes around values
"RTN","RORX019A",178,0)
 . Q:($G(RORVAL)'>0)  ;quit if no value
"RTN","RORX019A",179,0)
 . S RORDATE=$$HL7TFM^XLFDT($P(RORSEG,FS,15)) ;get date collected
"RTN","RORX019A",180,0)
 . S RORDATE=RORDATE\1
"RTN","RORX019A",181,0)
 . ;---check for Creatinine match on LOINC---
"RTN","RORX019A",182,0)
 . I 'RORCR,RORDATA("CR_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019A",183,0)
 .. ;store 'valid' value (12 or less) if no 'valid' value has been stored yet
"RTN","RORX019A",184,0)
 .. I RORVAL'>12,$O(RORDATA("CVAL",0))="" S RORDATA("CVAL",RORDATE)=RORVAL,RORCR=1 Q
"RTN","RORX019A",185,0)
 .. ;store 'invalid' value (>12) if no other value has been stored
"RTN","RORX019A",186,0)
 .. I RORVAL>12,$O(RORDATA("CVAL",0))="",$O(RORDATA("CINV",0))="" D
"RTN","RORX019A",187,0)
 ... S RORDATA("CINV",RORDATE)=$G(RORVAL)_"*" ;mark as 'invalid' value
"RTN","RORX019A",188,0)
 . ;---check for Sodium match on LOINC---
"RTN","RORX019A",189,0)
 . I 'RORSOD,RORDATA("SOD_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019A",190,0)
 .. ;store 'valid' value (100 to 180) if no other 'valid' value has been stored
"RTN","RORX019A",191,0)
 .. I RORVAL'<100,RORVAL'>180,$O(RORDATA("SVAL",0))="" D  Q
"RTN","RORX019A",192,0)
 ... S RORDATA("SVAL",RORDATE)=$G(RORVAL),RORSOD=1
"RTN","RORX019A",193,0)
 .. ;store 'invalid' value (<100 or >180) if no other value has been stored yet
"RTN","RORX019A",194,0)
 .. I ((RORVAL<100)!(RORVAL>180)),$O(RORDATA("SVAL",0))="",$O(RORDATA("SINV",0))="" D  Q
"RTN","RORX019A",195,0)
 ... S RORDATA("SINV",RORDATE)=RORVAL_"*" Q   ;mark as 'invalid' value
"RTN","RORX019A",196,0)
 . ;---check for Bilirubin match on LOINC---
"RTN","RORX019A",197,0)
 . I 'RORBIL,RORDATA("BIL_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019A",198,0)
 .. ;store first Bilirubin value
"RTN","RORX019A",199,0)
 .. I $O(RORDATA("BVAL",0))="" S RORDATA("BVAL",RORDATE)=RORVAL,RORBIL=1
"RTN","RORX019A",200,0)
 . ;---check for INR match on LOINC---
"RTN","RORX019A",201,0)
 . I 'RORINR,RORDATA("INR_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019A",202,0)
 .. ;store first INR value
"RTN","RORX019A",203,0)
 .. I $O(RORDATA("IVAL",0))="" S RORDATA("IVAL",RORDATE)=RORVAL,RORINR=1
"RTN","RORX019A",204,0)
 . ;set flags to indicate if MELD/MELD-NA scores are ready to be calculated for this patient
"RTN","RORX019A",205,0)
 . I RORCR,RORBIL,RORINR S RORDATA("CALC")=1 D
"RTN","RORX019A",206,0)
 .. I RORDATA("IDLST")=1 S RORDONE=1 Q
"RTN","RORX019A",207,0)
 .. I RORSOD S RORDATA("CALCNA")=1,RORDONE=1
"RTN","RORX019A",208,0)
 ;
"RTN","RORX019A",209,0)
 ;if patient doesn't have data for either score, don't put them on report
"RTN","RORX019A",210,0)
 I '$G(RORDATA("CALC")),'$G(RORDATA("CALCNA")) Q -1
"RTN","RORX019A",211,0)
 ;--- put test result and test date into RORDATA(<test_name>)=result^date
"RTN","RORX019A",212,0)
 N DATE
"RTN","RORX019A",213,0)
 S DATE=$O(RORDATA("BVAL",0)) ;Bilirubin
"RTN","RORX019A",214,0)
 S RORDATA("BILI")=$S($G(DATE)="":U,1:$G(RORDATA("BVAL",DATE))_U_$G(DATE))
"RTN","RORX019A",215,0)
 S DATE=$O(RORDATA("CVAL",0)) ;Creatinine
"RTN","RORX019A",216,0)
 I $G(DATE)="" D  ;if regular Creatinine value is null, take invalid value
"RTN","RORX019A",217,0)
 . S DATE=$O(RORDATA("CINV",0)) I $G(DATE)>0 S RORDATA("CVAL",DATE)=$G(RORDATA("CINV",DATE))
"RTN","RORX019A",218,0)
 S RORDATA("CR")=$S($G(DATE)="":U,1:$G(RORDATA("CVAL",DATE))_U_$G(DATE))
"RTN","RORX019A",219,0)
 S DATE=$O(RORDATA("IVAL",0)) ;INR
"RTN","RORX019A",220,0)
 S RORDATA("INR")=$S($G(DATE)="":U,1:$G(RORDATA("IVAL",DATE))_U_$G(DATE))
"RTN","RORX019A",221,0)
 S DATE=$O(RORDATA("SVAL",0)) ;Sodium
"RTN","RORX019A",222,0)
 I $G(DATE)="" D  ;if regular Sodium value is null, take invalid value
"RTN","RORX019A",223,0)
 . S DATE=$O(RORDATA("SINV",0)) I $G(DATE)>0 S RORDATA("SVAL",DATE)=$G(RORDATA("SINV",DATE))
"RTN","RORX019A",224,0)
 S RORDATA("NA")=$S($G(DATE)="":U,1:$G(RORDATA("SVAL",DATE))_U_$G(DATE))
"RTN","RORX019A",225,0)
 ;
"RTN","RORX019A",226,0)
 N TEST,BILI,CR,INR,NA
"RTN","RORX019A",227,0)
 ;set lower limits for Bili, Cr, and INR to 1 if there's a value in there
"RTN","RORX019A",228,0)
 F TEST="BILI","CR","INR" D
"RTN","RORX019A",229,0)
 . S @TEST=$P($G(RORDATA(TEST)),U,1) Q:$G(@TEST)["*"  I $G(@TEST),@TEST<1 S @TEST=1
"RTN","RORX019A",230,0)
 ;for valid creatinine, use max=4 for calculations
"RTN","RORX019A",231,0)
 I $G(CR)'["*" D
"RTN","RORX019A",232,0)
 . I $G(CR)>4 S CR=4
"RTN","RORX019A",233,0)
 S NA=$P($G(RORDATA("NA")),U,1)
"RTN","RORX019A",234,0)
 ;for valid sodium, use min=120, max=135 for calculations
"RTN","RORX019A",235,0)
 I $G(NA)'["*" D
"RTN","RORX019A",236,0)
 . I $G(NA)>135 S NA=135 Q
"RTN","RORX019A",237,0)
 . I $G(NA)'="" I NA<120 S NA=120
"RTN","RORX019A",238,0)
 ;
"RTN","RORX019A",239,0)
 N TMP1,TMP2
"RTN","RORX019A",240,0)
 ;RORDATA("SCORE",1) will hold the calculated MELD score
"RTN","RORX019A",241,0)
 ;RORDATA("SCORE",2) will hold the calculated MELD Na score
"RTN","RORX019A",242,0)
 S (RORDATA("SCORE",1),RORDATA("SCORE",2))="" ;init calculated scores to null
"RTN","RORX019A",243,0)
 D
"RTN","RORX019A",244,0)
 . Q:($G(CR)["*")  ;quit if no calculation should occur
"RTN","RORX019A",245,0)
 . I $G(BILI),$G(CR),$G(INR) D
"RTN","RORX019A",246,0)
 .. ;MELD forumula: (.957*lne(Cr) + .378*lne(Bili) + 1.120*lne(Inr) + .643) * 10
"RTN","RORX019A",247,0)
 .. S TMP1=(.957*($$LN^XLFMTH(CR))+(.378*($$LN^XLFMTH(BILI)))+(1.120*($$LN^XLFMTH(INR)))+.643)*10
"RTN","RORX019A",248,0)
 .. S RORDATA("SCORE",1)=$J($G(TMP1),0,0) ;round MELD to whole number
"RTN","RORX019A",249,0)
 .. Q:($G(NA)["*")  ;quit if no calculation should occur
"RTN","RORX019A",250,0)
 .. ;if meld NA requested, sodium test must have a valid value
"RTN","RORX019A",251,0)
 .. I $G(NA),RORDATA("SCORE",1),RORDATA("IDLST")[2 D
"RTN","RORX019A",252,0)
 ... ;MELD-Na forumula: MELD + (1.59 *(135-Na))
"RTN","RORX019A",253,0)
 ... S TMP2=$G(RORDATA("SCORE",1))+(1.59*(135-NA))
"RTN","RORX019A",254,0)
 ... S RORDATA("SCORE",2)=$J($G(TMP2),0,0)
"RTN","RORX019A",255,0)
 Q 1
"RTN","RORX019A",256,0)
 ;************************************************************************
"RTN","RORX019A",257,0)
 ;CALCULATE THE FIBROSIS SCORE(S) - APRI and FIB4
"RTN","RORX019A",258,0)
 ;
"RTN","RORX019A",259,0)
 ;INPUT
"RTN","RORX019A",260,0)
 ;  DFN      Patient DFN in LAB DATA file (#63)
"RTN","RORX019A",261,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX019A",262,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019A",263,0)
 ;           RORDATA("FIELDS") - Field list for retrieving the test results
"RTN","RORX019A",264,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX019A",265,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX019A",266,0)
 ;           
"RTN","RORX019A",267,0)
 ;OUTPUT
"RTN","RORX019A",268,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019A",269,0)
 ;           RORDATA("AST")=RESULT^DATE   - AST result and date
"RTN","RORX019A",270,0)
 ;           RORDATA("PLAT")=RESULT^DATE  - Platelet result and date
"RTN","RORX019A",271,0)
 ;           RORDATA("ALT")=RESULT^DATE   - ALT result and date
"RTN","RORX019A",272,0)
 ;           RORDATA("SCORE",3)           - calculated APRI score
"RTN","RORX019A",273,0)
 ;           RORDATA("SCORE",4)           - calculated FIB4 score
"RTN","RORX019A",274,0)
 ;    1      Patient should appear on report
"RTN","RORX019A",275,0)
 ;   -1      Patient should NOT appear on report
"RTN","RORX019A",276,0)
 ;   
"RTN","RORX019A",277,0)
 ;************************************************************************
"RTN","RORX019A",278,0)
CALCFIB(DFN,PTAG,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX019A",279,0)
 N RORID,RORST,ROREND,RORLAB,RORMSG,RC
"RTN","RORX019A",280,0)
 S RORDATA("CALCAPRI")=0,RORDATA("CALCFIB4")=0 ;don't automatically calculate scores
"RTN","RORX019A",281,0)
 K RORDATA("SCORE",3),RORDATA("SCORE",4) ;calculated test scores
"RTN","RORX019A",282,0)
 K RORDATA("SVAL"),RORDATA("PVAL"),RORDATA("LVAL") ;test results
"RTN","RORX019A",283,0)
 K RORDATA("ALT"),RORDATA("PLAT"),RORDATA("AST") ; tes result and date
"RTN","RORX019A",284,0)
 ;get patient ICN or SSN
"RTN","RORX019A",285,0)
 S RORID=$$PTID^RORUTL02(DFN)
"RTN","RORX019A",286,0)
 Q:'$G(RORID) -1
"RTN","RORX019A",287,0)
 ;---SET UP LAB API INPUT/OUTPUT PARMS---
"RTN","RORX019A",288,0)
 S RORST="2000101^CD" ;start date 1/1/1900
"RTN","RORX019A",289,0)
 S ROREND=$G(RORDATA("DATE"))\1 ;end date
"RTN","RORX019A",290,0)
 ;add 1 to the end date so the Lab API INCLUDES the end date correctly
"RTN","RORX019A",291,0)
 N X1,X2,X3 S X1=ROREND,X2=1 D C^%DTC S ROREND=X K X,X1,X2
"RTN","RORX019A",292,0)
 S ROREND=ROREND_"^CD"
"RTN","RORX019A",293,0)
 S RORLAB=$NA(^TMP("ROROUT",$J)) ;lab API output global
"RTN","RORX019A",294,0)
 K RORMSG,@RORLAB ;initialize prior to call
"RTN","RORX019A",295,0)
 ;---CALL LAB API TO GET TEST RESULTS---
"RTN","RORX019A",296,0)
 S RC=$$GCPR^LA7QRY(RORID,RORST,ROREND,.RORLC,"*",.RORMSG,RORLAB)
"RTN","RORX019A",297,0)
 I RC="",$D(RORMSG)>1  D  Q -1 ;quit if error returned
"RTN","RORX019A",298,0)
 . N ERR,I,LST,TMP
"RTN","RORX019A",299,0)
 . S (ERR,LST)=""
"RTN","RORX019A",300,0)
 . F I=1:1  S ERR=$O(RORMSG(ERR))  Q:ERR=""  D
"RTN","RORX019A",301,0)
 . . S LST=LST_","_ERR,TMP=RORMSG(ERR)
"RTN","RORX019A",302,0)
 . . K RORMSG(ERR)  S RORMSG(I)=TMP
"RTN","RORX019A",303,0)
 . S LST=$P(LST,",",2,999)  Q:(LST=3)!(LST=99)
"RTN","RORX019A",304,0)
 . S RC=$$ERROR^RORERR(-27,,.RORMSG,RORPTIEN)
"RTN","RORX019A",305,0)
 I RC<0 Q -1
"RTN","RORX019A",306,0)
 ;Note: the Lab API returns data in the form of HL7 segments
"RTN","RORX019A",307,0)
 N TMP,RORSPEC,RORVAL,RORNODE,RORSEG,SEGTYPE,RORLOINC,RORDONE,RORDATE,RORTEST
"RTN","RORX019A",308,0)
 N RORAST,RORPLAT,RORALT,FS
"RTN","RORX019A",309,0)
 S FS="|" ;HL7 field separator for lab data
"RTN","RORX019A",310,0)
 S (RORAST,RORPLAT,RORALT,RORDONE,RORNODE)=0
"RTN","RORX019A",311,0)
 F  S RORNODE=$O(^TMP("ROROUT",$J,RORNODE)) Q:((RORNODE="")!(RORDONE))  D
"RTN","RORX019A",312,0)
 . S RORSEG=$G(^TMP("ROROUT",$J,RORNODE)) ;entire HL7 segment
"RTN","RORX019A",313,0)
 . S SEGTYPE=$P(RORSEG,FS,1) ;segment type (PID,OBR,OBX,etc.)
"RTN","RORX019A",314,0)
 . Q:SEGTYPE'="OBX"  ;test results are in the OBX segment
"RTN","RORX019A",315,0)
 . S RORSPEC=$P($P(RORSEG,FS,4),U,2) ;specimen type (urine, serum, etc.)
"RTN","RORX019A",316,0)
 . S RORSPEC=":"_RORSPEC_":" ;append ":" as prefix and suffix
"RTN","RORX019A",317,0)
 . I ((RORSPEC[":UA:")!(RORSPEC[":UR:")) Q  ;quit if specimen type is urine
"RTN","RORX019A",318,0)
 . S RORLOINC=$P($P(RORSEG,FS,4),U,1) ;LOINC code for test
"RTN","RORX019A",319,0)
 . S RORVAL=$P(RORSEG,FS,6) ;test result value
"RTN","RORX019A",320,0)
 . S RORVAL=$TR(RORVAL,"""","") ;get rid of double quotes around values
"RTN","RORX019A",321,0)
 . Q:($G(RORVAL)'>0)  ;quit if no value
"RTN","RORX019A",322,0)
 . S RORDATE=$$HL7TFM^XLFDT($P(RORSEG,FS,15)) ;get date collected
"RTN","RORX019A",323,0)
 . S RORDATE=RORDATE\1
"RTN","RORX019A",324,0)
 . ;test results will be stored in RORDATA("SVAL"),RORDATA("PVAL"), and RORDATA("LVAL")
"RTN","RORX019A",325,0)
 . ;---check for AST match on LOINC if not yet found and store it---
"RTN","RORX019A",326,0)
 . I 'RORAST,RORDATA("AST_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019A",327,0)
 .. S RORDATA("SVAL",RORDATE)=RORVAL,RORAST=1 Q
"RTN","RORX019A",328,0)
 . ;---check for Platelet match on LOINC if not yet found and store it---
"RTN","RORX019A",329,0)
 . I 'RORPLAT,RORDATA("PLAT_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019A",330,0)
 .. S RORDATA("PVAL",RORDATE)=$G(RORVAL),RORPLAT=1
"RTN","RORX019A",331,0)
 . ;---check for ALT match on LOINC if not yet found and store it---
"RTN","RORX019A",332,0)
 . I 'RORALT,RORDATA("ALT_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019A",333,0)
 .. S RORDATA("LVAL",RORDATE)=RORVAL,RORALT=1
"RTN","RORX019A",334,0)
 . ;set flags to indicate if APRI/FIB4 scores are ready to be calculated for this patient
"RTN","RORX019A",335,0)
 . I RORAST,RORPLAT S RORDATA("CALCAPRI")=1 D
"RTN","RORX019A",336,0)
 .. I RORDATA("IDLST")=3 S RORDONE=1 ;done if APRI is the only score requested
"RTN","RORX019A",337,0)
 .. I RORALT S RORDATA("CALCFIB4")=1,RORDONE=1
"RTN","RORX019A",338,0)
 ;
"RTN","RORX019A",339,0)
 ;if patient doesn't have data for either score, then they shouldn't show up on report
"RTN","RORX019A",340,0)
 I '$G(RORDATA("CALCAPRI")),'$G(RORDATA("CALCFIB4")) Q -1
"RTN","RORX019A",341,0)
 ;--- put test result and test date into RORDATA(<test_name>)=result^date
"RTN","RORX019A",342,0)
 N DATE
"RTN","RORX019A",343,0)
 S DATE=$O(RORDATA("SVAL",0)) ;AST
"RTN","RORX019A",344,0)
 S RORDATA("AST")=$S($G(DATE)="":U,1:$G(RORDATA("SVAL",DATE))_U_$G(DATE))
"RTN","RORX019A",345,0)
 S DATE=$O(RORDATA("PVAL",0)) ;Platelet
"RTN","RORX019A",346,0)
 S RORDATA("PLAT")=$S($G(DATE)="":U,1:$G(RORDATA("PVAL",DATE))_U_$G(DATE))
"RTN","RORX019A",347,0)
 S DATE=$O(RORDATA("LVAL",0)) ;ALT
"RTN","RORX019A",348,0)
 S RORDATA("ALT")=$S($G(DATE)="":U,1:$G(RORDATA("LVAL",DATE))_U_$G(DATE))
"RTN","RORX019A",349,0)
 ;--- get just the test result values from array
"RTN","RORX019A",350,0)
 N TEST,AST,PLAT,ALT
"RTN","RORX019A",351,0)
 F TEST="AST","PLAT","ALT" S @TEST=$P($G(RORDATA(TEST)),U,1)
"RTN","RORX019A",352,0)
 ;--- calculate APRI/FIB4 scores
"RTN","RORX019A",353,0)
 N TMP1,TMP2
"RTN","RORX019A",354,0)
 ;RORDATA("SCORE",3) will hold the calculated APRI score
"RTN","RORX019A",355,0)
 ;RORDATA("SCORE",4) will hold the calculated FIB4 score
"RTN","RORX019A",356,0)
 S (RORDATA("SCORE",3),RORDATA("SCORE",4))="" ;init calculated scores to null
"RTN","RORX019A",357,0)
 S RC=1
"RTN","RORX019A",358,0)
 I $G(AST),$G(PLAT) D
"RTN","RORX019A",359,0)
 . I RORDATA("IDLST")[3 D  ;calculate APRI score: [AST/ULNAST/PLAT] * 100
"RTN","RORX019A",360,0)
 .. S TMP1=(AST/RORDATA("ULNAST")/PLAT)*100
"RTN","RORX019A",361,0)
 .. S RORDATA("SCORE",3)=$J($G(TMP1),0,2) ;round to 2 decimal points
"RTN","RORX019A",362,0)
 . I $G(ALT),RORDATA("IDLST")[4 D  ;calculate FIB4 score: (AGE*AST)/[(PLAT*ALT) to 1/2 power]
"RTN","RORX019A",363,0)
 .. N AGE S AGE=$$AGE(DFN,RORDATA("DATE")) ;get patient age
"RTN","RORX019A",364,0)
 .. I '$G(AGE) S RC=-1 Q  ;quit if age can't be calculated
"RTN","RORX019A",365,0)
 .. S TMP2=(AGE*AST)/$$PWR^XLFMTH((PLAT*ALT),.5)
"RTN","RORX019A",366,0)
 .. S RORDATA("SCORE",4)=$J($G(TMP2),0,0) ;round to whole number
"RTN","RORX019A",367,0)
 Q RC
"RTN","RORX019A",368,0)
 ;
"RTN","RORX019A",369,0)
 ;************************************************************************
"RTN","RORX019A",370,0)
 ;CALCULATE PATIENT AGE - EXTRINSIC FUNCTION
"RTN","RORX019A",371,0)
 ;
"RTN","RORX019A",372,0)
 ;INPUT
"RTN","RORX019A",373,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX019A",374,0)
 ;  DATE     user-selected date for report calculations
"RTN","RORX019A",375,0)
 ;
"RTN","RORX019A",376,0)
 ;OUTPUT
"RTN","RORX019A",377,0)
 ;  Patient age is returned
"RTN","RORX019A",378,0)
 ;************************************************************************
"RTN","RORX019A",379,0)
AGE(DFN,DATE) ;
"RTN","RORX019A",380,0)
 ;--- get patient dob and dod using DEM^VADPT
"RTN","RORX019A",381,0)
 N RORDEM,RORDOB,RORDOD,RORAGE,VAROOT
"RTN","RORX019A",382,0)
 S VAROOT="RORDEM" D DEM^VADPT
"RTN","RORX019A",383,0)
 S RORDOB=$P($G(RORDEM(3)),U,1) ;date of birth
"RTN","RORX019A",384,0)
 S RORAGE=$P($G(RORDEM(4)),U,1) ;age as of today (DT)
"RTN","RORX019A",385,0)
 S RORDOD=$P($G(RORDEM(6)),U,1) ;date of death
"RTN","RORX019A",386,0)
 I DATE=DT Q $G(RORAGE)  ;if 'most recent' date, return age in API results
"RTN","RORX019A",387,0)
 ;compare DOD and user-selected 'as of' DATE
"RTN","RORX019A",388,0)
 I $G(RORDOD),$G(RORDOD)<DATE S DATE=RORDOD\1 ;use DOD if earlier than DATE
"RTN","RORX019A",389,0)
 S RORAGE=DATE-RORDOB ;calculate age
"RTN","RORX019A",390,0)
 S RORAGE=$S($L(RORAGE)=6:$E($G(RORAGE),1,2),1:$E($G(RORAGE),1,3))
"RTN","RORX019A",391,0)
 Q $G(RORAGE)
"RTN","RORX020")
0^18^B216151292^B219381178
"RTN","RORX020",1,0)
RORX020 ;BPOIFO/ACS - RENAL FUNCTION BY RANGE ; 3/31/11 2:21pm
"RTN","RORX020",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,13,14**;Feb 17, 2006;Build 24
"RTN","RORX020",3,0)
 ;
"RTN","RORX020",4,0)
 ; This routine uses the following IAs:
"RTN","RORX020",5,0)
 ;
"RTN","RORX020",6,0)
 ; #4290         ^PXRMINDX(120.5 (controlled)
"RTN","RORX020",7,0)
 ; #3647         $$EN^GMVPXRM (controlled)
"RTN","RORX020",8,0)
 ; #10061        DEM^VADPT (supported)
"RTN","RORX020",9,0)
 ; #10105        PWR^XLFMTH (supported)
"RTN","RORX020",10,0)
 ; #5047         $$GETIEN^GMVGETVT (supported)
"RTN","RORX020",11,0)
 ; #3556         GCPR^LA7QRY (supported)
"RTN","RORX020",12,0)
 ;
"RTN","RORX020",13,0)
 ;******************************************************************************
"RTN","RORX020",14,0)
 ;******************************************************************************
"RTN","RORX020",15,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX020",16,0)
 ;        
"RTN","RORX020",17,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX020",18,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX020",19,0)
 ;ROR*1.5*10   MAR  2010   A SAUNDERS   Routine created
"RTN","RORX020",20,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX020",21,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX020",22,0)
 ;                                      Modified XML tags for sort.
"RTN","RORX020",23,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   CALCRF: Age calculation now uses 
"RTN","RORX020",24,0)
 ;                                      $$AGE^RORX019A.
"RTN","RORX020",25,0)
 ;******************************************************************************
"RTN","RORX020",26,0)
 ;******************************************************************************
"RTN","RORX020",27,0)
 Q
"RTN","RORX020",28,0)
 ;
"RTN","RORX020",29,0)
 ;************************************************************************
"RTN","RORX020",30,0)
 ;COMPILE THE "RENAL FUNCTION BY RANGE" REPORT
"RTN","RORX020",31,0)
 ;REPORT CODE: 020
"RTN","RORX020",32,0)
 ;
"RTN","RORX020",33,0)
 ;Called by entry "Renal Function by Range" in ROR REPORT PARAMETERS (#799.34)
"RTN","RORX020",34,0)
 ;
"RTN","RORX020",35,0)
 ;INPUT
"RTN","RORX020",36,0)
 ;  RORTSK     Task number and task parameters
"RTN","RORX020",37,0)
 ;  
"RTN","RORX020",38,0)
 ;  Below is a sample RORTSK input array for utilization in 2003, most recent
"RTN","RORX020",39,0)
 ;  scores, CrCL range from 20 to 50, eGFR range from 30 to 60:
"RTN","RORX020",40,0)
 ;  
"RTN","RORX020",41,0)
 ;  RORTSK=nnn   (the task number)
"RTN","RORX020",42,0)
 ;  RORTSK("EP")="$$RFRANGE^RORX020"
"RTN","RORX020",43,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","END")=3031231
"RTN","RORX020",44,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","START")=3030101
"RTN","RORX020",45,0)
 ;  RORTSK("PARAMS","ICD9FILT","A","FILTER")="ALL"
"RTN","RORX020",46,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1)=""
"RTN","RORX020",47,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"H")=50
"RTN","RORX020",48,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"L")=20
"RTN","RORX020",49,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2)=""
"RTN","RORX020",50,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"H")=60
"RTN","RORX020",51,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"L")=30
"RTN","RORX020",52,0)
 ;  RORTSK("PARAMS","OPTIONS","A","COMPLETE")=1
"RTN","RORX020",53,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX020",54,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_AFTER")=1
"RTN","RORX020",55,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_BEFORE")=1
"RTN","RORX020",56,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_DURING")=1
"RTN","RORX020",57,0)
 ;  RORTSK("PARAMS","REGIEN")=1
"RTN","RORX020",58,0)
 ;  
"RTN","RORX020",59,0)
 ;  If the user selected an 'as of' date = 12/31/2005:
"RTN","RORX020",60,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX020",61,0)
 ;  is replaced with:  
"RTN","RORX020",62,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MAX_DATE")=3051231
"RTN","RORX020",63,0)
 ;
"RTN","RORX020",64,0)
 ;OUTPUT
"RTN","RORX020",65,0)
 ;  <0  Error code
"RTN","RORX020",66,0)
 ;   0  Ok
"RTN","RORX020",67,0)
 ;************************************************************************
"RTN","RORX020",68,0)
RFRANGE(RORTSK) ;
"RTN","RORX020",69,0)
 N RORDATA       ; array to hold ROR data and summary totals
"RTN","RORX020",70,0)
 N RORREG        ; Registry IEN
"RTN","RORX020",71,0)
 N RORSDT        ; report start date
"RTN","RORX020",72,0)
 N ROREDT        ; report end date
"RTN","RORX020",73,0)
 N RORPTIEN      ; IEN of patient in the ROR registry
"RTN","RORX020",74,0)
 N DFN           ; DFN of patient in the PATIENT file (#2)
"RTN","RORX020",75,0)
 N RORLC         ; sub-file and array of LOINC codes to search Lab data
"RTN","RORX020",76,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX020",77,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX020",78,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX020",79,0)
 ;
"RTN","RORX020",80,0)
 N REPORT,RC,I,SFLAGS,PARAMS
"RTN","RORX020",81,0)
 ;--- Establish the root XML Node of the report and put into output
"RTN","RORX020",82,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX020",83,0)
 Q:REPORT<0 REPORT
"RTN","RORX020",84,0)
 ;
"RTN","RORX020",85,0)
 ;--- Get registry IEN
"RTN","RORX020",86,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX020",87,0)
 ;
"RTN","RORX020",88,0)
 ;--- Set standard report parameters data into output:
"RTN","RORX020",89,0)
 ;registry, comment, patients (before, during, after), options (summary vs.
"RTN","RORX020",90,0)
 ;complete), other registries, and other diagnoses
"RTN","RORX020",91,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS) Q:PARAMS<0 PARAMS
"RTN","RORX020",92,0)
 ;
"RTN","RORX020",93,0)
 ;--- Add range parameters to output
"RTN","RORX020",94,0)
 S RC=$$PARAMS^RORX020A(PARAMS,.RORDATA) Q:RC<0 RC
"RTN","RORX020",95,0)
 ;
"RTN","RORX020",96,0)
 ;--- Put report header data into output:
"RTN","RORX020",97,0)
 ;report creation date, task number, last registry update date, and
"RTN","RORX020",98,0)
 ;last data extraction date
"RTN","RORX020",99,0)
 S RC=$$HEADER^RORX020A(REPORT,.RORTSK) Q:RC<0 RC
"RTN","RORX020",100,0)
 ;
"RTN","RORX020",101,0)
 ;--- Get Renal ranges requested
"RTN","RORX020",102,0)
 ;I=1 ==> report = CrCL      I=2 ==> report = eGFR by MDRD
"RTN","RORX020",103,0)
 S I=0 F  S I=$O(RORTSK("PARAMS","LRGRANGES","C",I)) Q:I=""  D
"RTN","RORX020",104,0)
 . S RORDATA("L",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"L")) ;low range
"RTN","RORX020",105,0)
 . S RORDATA("H",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"H")) ;high range
"RTN","RORX020",106,0)
 ;
"RTN","RORX020",107,0)
 ;--- Get GMRV VITAL TYPE pointer for HEIGHT
"RTN","RORX020",108,0)
 S RORDATA("HGTP")=$$GETIEN^GMVGETVT("HEIGHT",1)
"RTN","RORX020",109,0)
 I '$G(RORDATA("HGTP")) Q -1
"RTN","RORX020",110,0)
 ;
"RTN","RORX020",111,0)
 ;--- Get Max Date  OUTPUT: RORDATA("DATE")  - Max Date for test scores
"RTN","RORX020",112,0)
 S RORDATA("DATE")=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORX020",113,0)
 I $G(RORDATA("DATE"))="" S RORDATA("DATE")=DT
"RTN","RORX020",114,0)
 ;
"RTN","RORX020",115,0)
 ;--- Summary vs. complete report requested
"RTN","RORX020",116,0)
 S RORDATA("COMPLETE")=0 ;default to 'summary' only
"RTN","RORX020",117,0)
 I $$PARAM^RORTSK01("OPTIONS","COMPLETE") S RORDATA("COMPLETE")=1
"RTN","RORX020",118,0)
 ;
"RTN","RORX020",119,0)
 ;--- Set the number of Renal ranges and initialize their values to 0
"RTN","RORX020",120,0)
 S RORDATA("RCNT")=5 D INIT^RORX020A(.RORDATA)
"RTN","RORX020",121,0)
 ;
"RTN","RORX020",122,0)
 ;--- Create 'patients' table
"RTN","RORX020",123,0)
 N RORBODY S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX020",124,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX020",125,0)
 ;
"RTN","RORX020",126,0)
 ;--- Check utilization
"RTN","RORX020",127,0)
 N CNT,ECNT,UTSDT,UTEDT,SKIPSDT,SKIPEDT
"RTN","RORX020",128,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX020",129,0)
 ; Utilization date range is always sent
"RTN","RORX020",130,0)
 S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX020",131,0)
 S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX020",132,0)
 ; Combined date range
"RTN","RORX020",133,0)
 S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,$G(UTSDT))
"RTN","RORX020",134,0)
 S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,$G(UTEDT))
"RTN","RORX020",135,0)
 ;
"RTN","RORX020",136,0)
 ;--- Number of patients in the registry - used for calculating the
"RTN","RORX020",137,0)
 ;task progress percentage (shown on the GUI screen)
"RTN","RORX020",138,0)
 N RORPTCNT S RORPTCNT=$$REGSIZE^RORUTL02(+RORREG) S:RORPTCNT<0 RORPTCNT=0
"RTN","RORX020",139,0)
 ;
"RTN","RORX020",140,0)
 ;--- LOINC codes for Creatinine
"RTN","RORX020",141,0)
 ;create list for future comparison
"RTN","RORX020",142,0)
 S RORDATA("LOINC")=";15045-8;21232-4;2160-0;"
"RTN","RORX020",143,0)
 ;set up array for future call to Lab API
"RTN","RORX020",144,0)
 S RORLC="CH" ;chemistry sub-file to search in #63
"RTN","RORX020",145,0)
 S RORLC(1)="15045-8^LN" ;Creatinine LOINC
"RTN","RORX020",146,0)
 S RORLC(2)="21232-4^LN" ;Creatinine LOINC
"RTN","RORX020",147,0)
 S RORLC(3)="2160-0^LN"  ;Creatinine LOINC
"RTN","RORX020",148,0)
 ;
"RTN","RORX020",149,0)
 ;--- RACE code 2054-5 = 'black or african american' in RACE file (IEN=9)
"RTN","RORX020",150,0)
 S RORDATA("BAM")=";9;"
"RTN","RORX020",151,0)
 ;
"RTN","RORX020",152,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX020",153,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX020",154,0)
 ;
"RTN","RORX020",155,0)
 ;--- Get registry records
"RTN","RORX020",156,0)
 N RCC,FLAG,SKIP,TMP
"RTN","RORX020",157,0)
 S (CNT,RORPTIEN,RC)=0
"RTN","RORX020",158,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX020",159,0)
 F  S RORPTIEN=$O(^RORDATA(798,"AC",RORREG,RORPTIEN))  Q:RORPTIEN'>0  D  Q:RC<0
"RTN","RORX020",160,0)
 . ;--- Calculate 'progress' for the GUI display
"RTN","RORX020",161,0)
 . S TMP=$S(RORPTCNT>0:CNT/RORPTCNT,1:"")
"RTN","RORX020",162,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX020",163,0)
 . S CNT=CNT+1
"RTN","RORX020",164,0)
 . ;--- Get the patient DFN
"RTN","RORX020",165,0)
 . S DFN=$$PTIEN^RORUTL01(RORPTIEN)  Q:DFN'>0
"RTN","RORX020",166,0)
 . ;--- Check for patient list and quit if not on list
"RTN","RORX020",167,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",DFN)) Q
"RTN","RORX020",168,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX020",169,0)
 . Q:$$SKIP^RORXU005(RORPTIEN,SFLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX020",170,0)
 . ;--- Check if patient has passed the ICD9 filter
"RTN","RORX020",171,0)
 . S RCC=0
"RTN","RORX020",172,0)
 . I FLAG'="ALL" D
"RTN","RORX020",173,0)
 . . S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX020",174,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX020",175,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX020",176,0)
 . ;
"RTN","RORX020",177,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX020",178,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,DFN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX020",179,0)
 . ;
"RTN","RORX020",180,0)
 . ;--- Check for utilization in the corresponding 'utilization' date range
"RTN","RORX020",181,0)
 . S SKIP=0 I $G(UTSDT)>0 D
"RTN","RORX020",182,0)
 .. N UTIL K TMP S TMP("ALL")=1
"RTN","RORX020",183,0)
 .. S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,DFN,.TMP)
"RTN","RORX020",184,0)
 .. I 'UTIL S SKIP=1
"RTN","RORX020",185,0)
 . ;--- Skip the patient if they have no utilization in the range
"RTN","RORX020",186,0)
 . I $G(SKIP) Q
"RTN","RORX020",187,0)
 . ;
"RTN","RORX020",188,0)
 . ;--- For each patient, process the registry record and create report
"RTN","RORX020",189,0)
 . I $$PATIENT(DFN,RORBODY,.RORDATA,RORPTIEN,.RORLC)<0 S ECNT=ECNT+1 ;error count
"RTN","RORX020",190,0)
 ;
"RTN","RORX020",191,0)
 ;--- If user selected eGFR by MDRD (ID=2), create summary report
"RTN","RORX020",192,0)
 I RORDATA("IDLST")[2 S RC=$$SUMMARY^RORX020A(RORTSK,REPORT,.RORDATA)
"RTN","RORX020",193,0)
 Q:RC<0 RC
"RTN","RORX020",194,0)
 K ^TMP("RORX020",$J),^TMP("ROROUT",$J)
"RTN","RORX020",195,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX020",196,0)
 ;
"RTN","RORX020",197,0)
 ;************************************************************************
"RTN","RORX020",198,0)
 ;ADD THE PATIENT DATA TO THE REPORT
"RTN","RORX020",199,0)
 ;
"RTN","RORX020",200,0)
 ;INPUT
"RTN","RORX020",201,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX020",202,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX020",203,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020",204,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX020",205,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX020",206,0)
 ;
"RTN","RORX020",207,0)
 ;OUTPUT
"RTN","RORX020",208,0)
 ;  1        ok
"RTN","RORX020",209,0)
 ; <0        error
"RTN","RORX020",210,0)
 ;************************************************************************
"RTN","RORX020",211,0)
PATIENT(DFN,PTAG,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX020",212,0)
 ;calculate Renal Function scores
"RTN","RORX020",213,0)
 I $$CALCRF(DFN,.RORDATA,RORPTIEN,.RORLC)<0 Q 1  ;quit if patient data not available
"RTN","RORX020",214,0)
 I '$$INRANGE^RORX020A(.RORDATA) Q 1  ;quit if score(s) out of requested range
"RTN","RORX020",215,0)
 ;if eGFR by MDRD requested, add 1 to appropriate category count
"RTN","RORX020",216,0)
 I RORDATA("IDLST")[2 D EGFRCAT^RORX020A(.RORDATA)
"RTN","RORX020",217,0)
 Q:'RORDATA("COMPLETE") 1  ;continue only if 'complete' report is requested
"RTN","RORX020",218,0)
 ;--- Get patient data and put into the report
"RTN","RORX020",219,0)
 N VADM,VA,RORDOD,TTAG,RTAG
"RTN","RORX020",220,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX020",221,0)
 ;--- The <PATIENT> tag
"RTN","RORX020",222,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTAG,,DFN)
"RTN","RORX020",223,0)
 I PTAG<0 Q PTAG
"RTN","RORX020",224,0)
 ;--- Patient Name
"RTN","RORX020",225,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX020",226,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX020",227,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX020",228,0)
 ;--- Date of death
"RTN","RORX020",229,0)
 S RORDOD=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX020",230,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$G(RORDOD),PTAG,1)
"RTN","RORX020",231,0)
 ;--- RENAL DATA tag
"RTN","RORX020",232,0)
 S RTAG=$$ADDVAL^RORTSK11(RORTSK,"RNLDATA",,PTAG)
"RTN","RORX020",233,0)
 Q:RTAG<0 RTAG
"RTN","RORX020",234,0)
 ;---  CR Test Tag
"RTN","RORX020",235,0)
 S TTAG=$$ADDVAL^RORTSK11(RORTSK,"TEST",,RTAG)
"RTN","RORX020",236,0)
 Q:TTAG<0 TTAG
"RTN","RORX020",237,0)
 ;---  Date Cr Test Taken
"RTN","RORX020",238,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("CRDATE")),TTAG)
"RTN","RORX020",239,0)
 ;---  Cr Test Value
"RTN","RORX020",240,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("CR")),TTAG)
"RTN","RORX020",241,0)
 ;--- Height tag
"RTN","RORX020",242,0)
 S TTAG=$$ADDVAL^RORTSK11(RORTSK,"HEIGHT",,RTAG)
"RTN","RORX020",243,0)
 Q:TTAG<0 TTAG
"RTN","RORX020",244,0)
 ;---  Date Height Taken
"RTN","RORX020",245,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("HDATE")),TTAG)
"RTN","RORX020",246,0)
 ;---  Height value
"RTN","RORX020",247,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("HGT")),TTAG)
"RTN","RORX020",248,0)
 ;---  Calculated CRCL
"RTN","RORX020",249,0)
 I RORDATA("IDLST")[1 D ADDVAL^RORTSK11(RORTSK,"CRCL",$G(RORDATA("SCORE",1)),PTAG,3)
"RTN","RORX020",250,0)
 ;---  Calculated eGFR
"RTN","RORX020",251,0)
 I RORDATA("IDLST")[2 D ADDVAL^RORTSK11(RORTSK,"EGFR",$G(RORDATA("SCORE",2)),PTAG,3)
"RTN","RORX020",252,0)
 ;
"RTN","RORX020",253,0)
 Q ($S(TTAG<0:TTAG,1:1))
"RTN","RORX020",254,0)
 ;
"RTN","RORX020",255,0)
 ;************************************************************************
"RTN","RORX020",256,0)
 ;CALCULATE THE RENAL FUNCTION VALUE(S)
"RTN","RORX020",257,0)
 ;Note1: If no range has been passed in and a patient has a Creatinine 
"RTN","RORX020",258,0)
 ;       result > 12, the patient will be listed on the report with an 
"RTN","RORX020",259,0)
 ;       asterisk (*) next to the test result value, but no scores will be 
"RTN","RORX020",260,0)
 ;       calculated.
"RTN","RORX020",261,0)
 ;Note2: If no range has been passed in and a patient has an invalid Height
"RTN","RORX020",262,0)
 ;       result, the patient will be listed on the report with an asterisk (*)
"RTN","RORX020",263,0)
 ;       next to the test result value, but no CrCl score will be calculated. 
"RTN","RORX020",264,0)
 ;Note3: If a range has been passed in and the patient has a Creatinine result 
"RTN","RORX020",265,0)
 ;       >12, the patient will NOT be listed on the report.
"RTN","RORX020",266,0)
 ;
"RTN","RORX020",267,0)
 ;INPUT
"RTN","RORX020",268,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX020",269,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020",270,0)
 ;           RORDATA("BAM") - 'black' or 'african american' race pointers
"RTN","RORX020",271,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX020",272,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX020",273,0)
 ;  
"RTN","RORX020",274,0)
 ;OUTPUT
"RTN","RORX020",275,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020",276,0)
 ;  1        Patient will be listed on report
"RTN","RORX020",277,0)
 ; -1        Patient will not be listed on report
"RTN","RORX020",278,0)
 ;************************************************************************
"RTN","RORX020",279,0)
CALCRF(DFN,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX020",280,0)
 N RORID,RORST,ROREND,RORLAB,RORMSG,RC
"RTN","RORX020",281,0)
 S RORDATA("CALC")=1 ;default - the score for this patient should be calculated
"RTN","RORX020",282,0)
 K RORDATA("SCORE",1),RORDATA("SCORE",2) ;test scores
"RTN","RORX020",283,0)
 K RORDATA("CVAL"),RORDATA("CINV"),RORDATA("CR"),RORDATA("CRDATE") ;Cr data
"RTN","RORX020",284,0)
 K RORDATA("HGT"),RORDATA("HDATE") ;height data
"RTN","RORX020",285,0)
 ;get patient ICN or SSN
"RTN","RORX020",286,0)
 S RORID=$$PTID^RORUTL02(DFN)
"RTN","RORX020",287,0)
 Q:'$G(RORID) -1
"RTN","RORX020",288,0)
 ;---SET UP LAB API INPUT/OUTPUT PARMS---
"RTN","RORX020",289,0)
 S RORST="2000101^CD" ;start date 1/1/1900
"RTN","RORX020",290,0)
 S ROREND=$G(RORDATA("DATE"))\1 ;end date
"RTN","RORX020",291,0)
 ;add 1 to the end date so the Lab API INCLUDES tests on that date
"RTN","RORX020",292,0)
 N X1,X2,X3 S X1=ROREND,X2=1 D C^%DTC S ROREND=X K X,X1,X2
"RTN","RORX020",293,0)
 S ROREND=ROREND_"^CD"
"RTN","RORX020",294,0)
 S RORLAB=$NA(^TMP("ROROUT",$J)) ;lab API output global
"RTN","RORX020",295,0)
 K RORMSG,@RORLAB ;initialize prior to call
"RTN","RORX020",296,0)
 ;---CALL LAB API USING COLLECTION DATE AND LOINC CODE LIST---
"RTN","RORX020",297,0)
 S RC=$$GCPR^LA7QRY(RORID,RORST,ROREND,.RORLC,"*",.RORMSG,RORLAB)
"RTN","RORX020",298,0)
 I $G(RC)="",$D(RORMSG)>1  D  ;quit if error returned
"RTN","RORX020",299,0)
 . N ERR,I,LST,TMP
"RTN","RORX020",300,0)
 . S (ERR,LST)=""
"RTN","RORX020",301,0)
 . F I=1:1  S ERR=$O(RORMSG(ERR))  Q:ERR=""  D
"RTN","RORX020",302,0)
 . . S LST=LST_","_ERR,TMP=RORMSG(ERR)
"RTN","RORX020",303,0)
 . . K RORMSG(ERR)  S RORMSG(I)=TMP
"RTN","RORX020",304,0)
 . S LST=$P(LST,",",2,999)  Q:(LST=3)!(LST=99)
"RTN","RORX020",305,0)
 . S RC=$$ERROR^RORERR(-27,,.RORMSG,RORPTIEN)
"RTN","RORX020",306,0)
 I RC<0 Q -1
"RTN","RORX020",307,0)
 ;Note: the Lab API returns data in the form of HL7 segments
"RTN","RORX020",308,0)
 N TMP,RORSPEC,RORVAL,RORNODE,RORSEG,SEGTYPE,RORLOINC,RORDONE,RORDATE,FS
"RTN","RORX020",309,0)
 S FS="|" ;default HL7 field separator for lab data
"RTN","RORX020",310,0)
 S RORDONE=0 ;flag to indicate if 'valid' data has been found
"RTN","RORX020",311,0)
 S RORNODE=0 F  S RORNODE=$O(^TMP("ROROUT",$J,RORNODE)) Q:((RORNODE="")!(RORDONE))  D
"RTN","RORX020",312,0)
 . S RORSEG=$G(^TMP("ROROUT",$J,RORNODE)) ;get entire HL7 segment
"RTN","RORX020",313,0)
 . S SEGTYPE=$P(RORSEG,FS,1) ;get segment type (PID,OBR,OBX,etc.)
"RTN","RORX020",314,0)
 . Q:SEGTYPE'="OBX"  ;we want OBX segments only
"RTN","RORX020",315,0)
 . S RORSPEC=$P($P(RORSEG,FS,4),U,2) ;specimen type string (urine, serum, etc.)
"RTN","RORX020",316,0)
 . S RORSPEC=":"_RORSPEC_":" ;append ":" as prefix and suffix
"RTN","RORX020",317,0)
 . I ((RORSPEC[":UA:")!(RORSPEC[":UR:")) Q  ;quit if specimen type is urine
"RTN","RORX020",318,0)
 . S RORLOINC=$P($P(RORSEG,FS,4),"^",1) ;get LOINC code
"RTN","RORX020",319,0)
 . Q:(RORDATA("LOINC")'[(";"_RORLOINC_";"))  ;LOINC must match Creatinine
"RTN","RORX020",320,0)
 . ;test result found
"RTN","RORX020",321,0)
 . S RORVAL=$P(RORSEG,FS,6) ;Creatinine test result value
"RTN","RORX020",322,0)
 . Q:($G(RORVAL)'>0)  ;quit if no value
"RTN","RORX020",323,0)
 . S RORDATE=$$HL7TFM^XLFDT($P(RORSEG,FS,15)) ;get date collected
"RTN","RORX020",324,0)
 . S RORDATE=RORDATE\1
"RTN","RORX020",325,0)
 . ;store 'valid' (12 or less) value if no 'valid' value has been stored yet
"RTN","RORX020",326,0)
 . I RORVAL'>12,$O(RORDATA("CVAL",0))="" S RORDATA("CVAL",RORDATE)=RORVAL,RORDONE=1 Q
"RTN","RORX020",327,0)
 . ;store 'invalid' (>12) value if no other value has been stored
"RTN","RORX020",328,0)
 . I RORVAL>12,$O(RORDATA("CVAL",0))="",$O(RORDATA("CINV",0))="" D
"RTN","RORX020",329,0)
 .. S RORDATA("CINV",RORDATE)=$G(RORVAL)_"*" ;mark as 'invalid' value
"RTN","RORX020",330,0)
 ;
"RTN","RORX020",331,0)
 ;quit if patient had no Creatinine results (valid or invalid)
"RTN","RORX020",332,0)
 Q:(($D(RORDATA("CVAL"))'>1)&($D(RORDATA("CINV"))'>1)) -1
"RTN","RORX020",333,0)
 ;
"RTN","RORX020",334,0)
 ;--- set Creatinine result and date into data array
"RTN","RORX020",335,0)
 N DATE
"RTN","RORX020",336,0)
 S DATE=$O(RORDATA("CVAL",0)) ;'valid' Cr date
"RTN","RORX020",337,0)
 I $G(DATE)="" D  ;if no 'valid' Cr value, get 'invalid' value
"RTN","RORX020",338,0)
 . S DATE=$O(RORDATA("CINV",0))
"RTN","RORX020",339,0)
 . S RORDATA("CVAL",DATE)=$G(RORDATA("CINV",DATE))
"RTN","RORX020",340,0)
 . S RORDATA("CALC")=0 ;no score calculations can be done on 'invalid' data
"RTN","RORX020",341,0)
 S RORDATA("CR")=$G(RORDATA("CVAL",DATE))
"RTN","RORX020",342,0)
 ;S RORDATA("CRDATE")=$P((9999999-$G(DATE)),".",1)
"RTN","RORX020",343,0)
 S RORDATA("CRDATE")=DATE\1
"RTN","RORX020",344,0)
 ;
"RTN","RORX020",345,0)
 ;--- get height date and height IEN
"RTN","RORX020",346,0)
 N RORHTDT,RORHTIEN,RORARY
"RTN","RORX020",347,0)
 S RORDATE=RORDATA("DATE")
"RTN","RORX020",348,0)
 S RORHTDT=$O(^PXRMINDX(120.5,"PI",DFN,RORDATA("HGTP"),RORDATE),-1) ;height date
"RTN","RORX020",349,0)
 Q:$G(RORHTDT)="" -1
"RTN","RORX020",350,0)
 S RORHTIEN=$O(^PXRMINDX(120.5,"PI",DFN,RORDATA("HGTP"),RORHTDT,0)) ;height IEN
"RTN","RORX020",351,0)
 Q:$G(RORHTIEN)="" -1
"RTN","RORX020",352,0)
 ;--- call API to get get height measurement
"RTN","RORX020",353,0)
 K RORARY D EN^GMVPXRM(.RORARY,RORHTIEN,"I")
"RTN","RORX020",354,0)
 S RORDATA("HGT")=$G(RORARY(7)),RORDATA("HDATE")=$P(RORHTDT,".",1)
"RTN","RORX020",355,0)
 I ($G(RORDATA("HGT"))'>0) Q -1  ;quit if height not > 0
"RTN","RORX020",356,0)
 ;strip out characters "IN", ",E"
"RTN","RORX020",357,0)
 I ((RORDATA("HGT")["IN")!(RORDATA("HGT")[",E")) S RORDATA("HGT")=+RORDATA("HGT")
"RTN","RORX020",358,0)
 ;mark as 'invalid' if height contains "CM", or "'" or double quote
"RTN","RORX020",359,0)
 I ((RORDATA("HGT")["CM")!(RORDATA("HGT")["'")!(RORDATA("HGT")["""")) D
"RTN","RORX020",360,0)
 . I RORDATA("IDLST")[1 S RORDATA("CALC")=0 ;no CrCl calculations can be done on 'invalid' data
"RTN","RORX020",361,0)
 . S RORDATA("HGT")=RORDATA("HGT")_"*" ;mark as 'invalid' value
"RTN","RORX020",362,0)
 ;set CALC flag to 0 and add "*" if invalid height: not between 36 and 96 inches
"RTN","RORX020",363,0)
 I ((RORDATA("HGT")'["*")&((RORDATA("HGT")<36)!(RORDATA("HGT")>96))) D
"RTN","RORX020",364,0)
 . I RORDATA("IDLST")[1 S RORDATA("CALC")=0 ;no CrCl calculations can be done on 'invalid' data
"RTN","RORX020",365,0)
 . S RORDATA("HGT")=RORDATA("HGT")_"*" ;mark as 'invalid' value
"RTN","RORX020",366,0)
 ;
"RTN","RORX020",367,0)
 ;include patient on reports but don't calculate score if no high/low
"RTN","RORX020",368,0)
 ;range passed in and invalid CR data exists
"RTN","RORX020",369,0)
 I RORDATA("CR")["*",RORDATA("RANGE")=0 Q 1
"RTN","RORX020",370,0)
 ;don't include patient on report if range IS passed in and invalid Cr data
"RTN","RORX020",371,0)
 ;exists since neither score can't be calculated
"RTN","RORX020",372,0)
 I RORDATA("CR")["*",RORDATA("RANGE")=1 Q -1
"RTN","RORX020",373,0)
 ;
"RTN","RORX020",374,0)
 ;---CALCULATE RENAL TEST SCORES USING VALID CR VALUE
"RTN","RORX020",375,0)
 ;
"RTN","RORX020",376,0)
 ;--- get patient race, gender, age, and dob using DEM^VADPT
"RTN","RORX020",377,0)
 N RORDEM,RORGENDER,RORRACE,RORM,RORF,RORAGE,VAROOT
"RTN","RORX020",378,0)
 S (RORF,RORM)=0
"RTN","RORX020",379,0)
 S VAROOT="RORDEM" D DEM^VADPT
"RTN","RORX020",380,0)
 S RORGENDER=$P($G(RORDEM(5)),U,1) ;M or F
"RTN","RORX020",381,0)
 Q:$G(RORGENDER)="" -1
"RTN","RORX020",382,0)
 S:RORGENDER="F" RORF=1 S:RORGENDER="M" RORM=1
"RTN","RORX020",383,0)
 ;--- get age
"RTN","RORX020",384,0)
 ;if 'most recent' date, use age returned from DEM^VADPT
"RTN","RORX020",385,0)
 ;if not 'most recent', calculate age
"RTN","RORX020",386,0)
 I $$PARAM^RORTSK01("OPTIONS","MOST_RECENT") S RORAGE=RORDEM(4)
"RTN","RORX020",387,0)
 E  S RORAGE=$$AGE^RORX019A(DFN,RORDATE)
"RTN","RORX020",388,0)
 ;
"RTN","RORX020",389,0)
 ;--- Cockcroft-Gault CrCl ---
"RTN","RORX020",390,0)
 ;Calculation: (140-age) x ideal weight in kg (*.85 if female)/(creatinine*72)
"RTN","RORX020",391,0)
 ;Ideal weight in kg:
"RTN","RORX020",392,0)
 ;  males   = 51.65+(1.85*(height-60))
"RTN","RORX020",393,0)
 ;  females = 48.67+(1.65*(height-60))
"RTN","RORX020",394,0)
 ;  
"RTN","RORX020",395,0)
 N RORMIW,RORFIW,MULT2,TMP
"RTN","RORX020",396,0)
 D
"RTN","RORX020",397,0)
 . ;if male, use this calculation
"RTN","RORX020",398,0)
 . I RORM=1 D  ;get male ideal weight in kg 
"RTN","RORX020",399,0)
 .. S MULT2=1 ;no additional multiplier if male
"RTN","RORX020",400,0)
 .. Q:RORDATA("HGT")["*"  ;quit if invalid height value
"RTN","RORX020",401,0)
 .. S RORMIW=51.65+(1.85*(RORDATA("HGT")-60)) ;male ideal weight
"RTN","RORX020",402,0)
 .. S TMP=(140-RORAGE)*RORMIW/(RORDATA("CR")*72) ;CrCl score
"RTN","RORX020",403,0)
 . ;if female, use this calculation
"RTN","RORX020",404,0)
 . I RORF=1 D
"RTN","RORX020",405,0)
 .. S MULT2=.742 ;set multiplier for eGFR calculation if female
"RTN","RORX020",406,0)
 .. Q:RORDATA("HGT")["*"  ;quit if invalid height value
"RTN","RORX020",407,0)
 .. S RORFIW=48.67+(1.65*(RORDATA("HGT")-60)) ;female ideal weight
"RTN","RORX020",408,0)
 .. S TMP=(140-RORAGE)*RORFIW*.85/(RORDATA("CR")*72) ;CrCl score
"RTN","RORX020",409,0)
 . ;
"RTN","RORX020",410,0)
 . I RORDATA("IDLST")[1 S RORDATA("SCORE",1)=$S($G(TMP)>0:$J($G(TMP),0,0),1:"") ;round CrCl score to whole number
"RTN","RORX020",411,0)
 ;
"RTN","RORX020",412,0)
 ;--- eGFR by MDRD ---
"RTN","RORX020",413,0)
 ;default race multiplier set to 1 (i.e. no multiplier)
"RTN","RORX020",414,0)
 N RORCNT,MULT1,I S MULT1=1
"RTN","RORX020",415,0)
 D
"RTN","RORX020",416,0)
 . ;get count of race values (could be more than 1 entry)
"RTN","RORX020",417,0)
 . S RORCNT=$G(RORDEM(12)) I RORCNT>0 D
"RTN","RORX020",418,0)
 .. ;check each race value for match on 'black or 'african american'
"RTN","RORX020",419,0)
 .. F I=1:1:RORCNT D  Q:MULT1=1.212
"RTN","RORX020",420,0)
 ... S RORRACE=$P($G(RORDEM(12,I)),U,1) ;race pointer value
"RTN","RORX020",421,0)
 ... ;if any of the race values are black or african american, set multiplier
"RTN","RORX020",422,0)
 ... I $G(RORDATA("BAM"))[(";"_$G(RORRACE)_";") S MULT1=1.212
"RTN","RORX020",423,0)
 . ;--- calculate eGFR by MDRD score  Calculation:
"RTN","RORX020",424,0)
 . ;(175 * (creatinine ^ -1.154) * (age ^ -.203) *1.212 (if black) * .742 (if female)
"RTN","RORX020",425,0)
 . S TMP=175*($$PWR^XLFMTH(RORDATA("CR"),-1.154))*($$PWR^XLFMTH(RORAGE,-0.203))*MULT1*MULT2 ;eGFR
"RTN","RORX020",426,0)
 . ;
"RTN","RORX020",427,0)
 . I RORDATA("IDLST")[2 S RORDATA("SCORE",2)=$J($G(TMP),0,0) ;round eGFR score to whole number
"RTN","RORX020",428,0)
 ;
"RTN","RORX020",429,0)
 Q 1
"RTN","RORX020A")
0^14^B42700433^B38074904
"RTN","RORX020A",1,0)
RORX020A ;BPOIFO/ACS - RENAL FUNCTION BY RANGE (CONT.) ;11/1/09
"RTN","RORX020A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,14**;Feb 17, 2006;Build 24
"RTN","RORX020A",3,0)
 ;
"RTN","RORX020A",4,0)
 Q
"RTN","RORX020A",5,0)
 ;******************************************************************************
"RTN","RORX020A",6,0)
 ;******************************************************************************
"RTN","RORX020A",7,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX020A",8,0)
 ;        
"RTN","RORX020A",9,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX020A",10,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX020A",11,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   HEADER: Added LOINCs to report header
"RTN","RORX020A",12,0)
 ;                                      
"RTN","RORX020A",13,0)
 ;******************************************************************************
"RTN","RORX020A",14,0)
 ;******************************************************************************
"RTN","RORX020A",15,0)
 ;
"RTN","RORX020A",16,0)
 ;************************************************************************
"RTN","RORX020A",17,0)
 ;ADD THE HEADERS TO THE REPORT (EXTRINSIC FUNCTION)
"RTN","RORX020A",18,0)
 ;
"RTN","RORX020A",19,0)
 ;INPUT
"RTN","RORX020A",20,0)
 ;  PARTAG  Reference IEN to the 'report' parent XML tag
"RTN","RORX020A",21,0)
 ;
"RTN","RORX020A",22,0)
 ;OUTPUT
"RTN","RORX020A",23,0)
 ;  <0      error
"RTN","RORX020A",24,0)
 ;  >0      'Header' XML tag number or error code
"RTN","RORX020A",25,0)
 ;************************************************************************
"RTN","RORX020A",26,0)
HEADER(PARTAG,RORTSK) ;
"RTN","RORX020A",27,0)
 N HEADER,RC,COL,COLUMNS,TMP S RC=0
"RTN","RORX020A",28,0)
 ;call to $$HEADER^RORXU002 will populate the report created date, task number,
"RTN","RORX020A",29,0)
 ;last registry update, and last data extraction.
"RTN","RORX020A",30,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX020A",31,0)
 Q:HEADER<0 HEADER
"RTN","RORX020A",32,0)
 ;manually build the table definition(s) listed below
"RTN","RORX020A",33,0)
 ;PATIENTS(#,NAME,LAST4,DOD,TEST,DATE,RESULT,CRCL,EGFR)
"RTN","RORX020A",34,0)
 S COLUMNS=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORX020A",35,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"NAME","PATIENTS")
"RTN","RORX020A",36,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"HEADER","1")
"RTN","RORX020A",37,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"FOOTER","1")
"RTN","RORX020A",38,0)
 ;--- Required columns
"RTN","RORX020A",39,0)
 F COL="#","NAME","LAST4","DOD","TEST","DATE","RESULT"  D
"RTN","RORX020A",40,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX020A",41,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX020A",42,0)
 ;--- Additional columns
"RTN","RORX020A",43,0)
 I RORDATA("IDLST")[1 D
"RTN","RORX020A",44,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX020A",45,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","CRCL")
"RTN","RORX020A",46,0)
 I RORDATA("IDLST")[2 D
"RTN","RORX020A",47,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX020A",48,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","EGFR")
"RTN","RORX020A",49,0)
 ;--- LOINC codes
"RTN","RORX020A",50,0)
 N LTAG S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOINC_CODES",,PARTAG)
"RTN","RORX020A",51,0)
 N CTAG S CTAG=$$ADDVAL^RORTSK11(RORTSK,"CODE",,LTAG)
"RTN","RORX020A",52,0)
 D ADDATTR^RORTSK11(RORTSK,CTAG,"CODE","Creatinine: 15045-8, 21232-4, 2160-0")
"RTN","RORX020A",53,0)
 ;---
"RTN","RORX020A",54,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX020A",55,0)
 ;
"RTN","RORX020A",56,0)
 ;*****************************************************************************
"RTN","RORX020A",57,0)
 ;INITIALIZE THE RANGE COUNTS TO 0
"RTN","RORX020A",58,0)
 ;
"RTN","RORX020A",59,0)
 ;INPUT
"RTN","RORX020A",60,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020A",61,0)
 ;           RORDATA("RCNT") Number of ranges/groupings to initialize
"RTN","RORX020A",62,0)
 ;*****************************************************************************
"RTN","RORX020A",63,0)
INIT(RORDATA) ;
"RTN","RORX020A",64,0)
 I $G(RORDATA("RCNT"))="" Q
"RTN","RORX020A",65,0)
 N I
"RTN","RORX020A",66,0)
 F I=1:1:RORDATA("RCNT") D
"RTN","RORX020A",67,0)
 . S RORDATA("NP",I)=0
"RTN","RORX020A",68,0)
 Q
"RTN","RORX020A",69,0)
 ;
"RTN","RORX020A",70,0)
 ;*****************************************************************************
"RTN","RORX020A",71,0)
 ;OUTPUT REPORT 'RANGE' PARAMETERS, SET UP REPORT ID LIST (EXTRINISIC FUNCTION)
"RTN","RORX020A",72,0)
 ;
"RTN","RORX020A",73,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX020A",74,0)
 ;
"RTN","RORX020A",75,0)
 ; Return Values:
"RTN","RORX020A",76,0)
 ;        RORDATA("IDLST") - list of IDs for tests requested
"RTN","RORX020A",77,0)
 ;        RORDATA("RANGE") - 1 if range passed in for either test, else 0
"RTN","RORX020A",78,0)
 ;       <0  Error code
"RTN","RORX020A",79,0)
 ;        0  Ok
"RTN","RORX020A",80,0)
 ;*****************************************************************************
"RTN","RORX020A",81,0)
PARAMS(PARTAG,RORDATA) ;
"RTN","RORX020A",82,0)
 N PARAMS,DESC,TMP,RC,RANGE S RC=0
"RTN","RORX020A",83,0)
 S RORDATA("RANGE")=0 ;initialize to 'no range passed in'
"RTN","RORX020A",84,0)
 ;--- Lab test ranges
"RTN","RORX020A",85,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORX020A",86,0)
 . N GRC,ELEMENT,NODE,RTAG,RANGE
"RTN","RORX020A",87,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX020A",88,0)
 . S RTAG=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGES",,PARTAG)
"RTN","RORX020A",89,0)
 . S (GRC,RC)=0
"RTN","RORX020A",90,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORX020A",91,0)
 . . S RANGE=0,DESC=$$RTEXT(GRC,.RORDATA)
"RTN","RORX020A",92,0)
 . . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGE",DESC,RTAG)
"RTN","RORX020A",93,0)
 . . I ELEMENT<0 S RC=ELEMENT Q
"RTN","RORX020A",94,0)
 . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"ID",GRC)
"RTN","RORX020A",95,0)
 . . ;add the user-requested test ID to the test ID 'list'
"RTN","RORX020A",96,0)
 . . S RORDATA("IDLST")=$G(RORDATA("IDLST"))_$S($G(RORDATA("IDLST"))'="":","_GRC,1:GRC)
"RTN","RORX020A",97,0)
 . . ;--- Process the range values
"RTN","RORX020A",98,0)
 . . S TMP=$G(@NODE@(GRC,"L"))
"RTN","RORX020A",99,0)
 . . I TMP'="" D  S RANGE=1
"RTN","RORX020A",100,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"LOW",TMP)
"RTN","RORX020A",101,0)
 . . S TMP=$G(@NODE@(GRC,"H"))
"RTN","RORX020A",102,0)
 . . I TMP'="" D  S RANGE=1
"RTN","RORX020A",103,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"HIGH",TMP)
"RTN","RORX020A",104,0)
 . . I RANGE D 
"RTN","RORX020A",105,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"RANGE",1)
"RTN","RORX020A",106,0)
 . . . S RORDATA("RANGE")=1
"RTN","RORX020A",107,0)
 ;--- Success
"RTN","RORX020A",108,0)
 ;if user didn't select any tests, default to both tests
"RTN","RORX020A",109,0)
 I $G(RORDATA("IDLST"))="" S RORDATA("IDLST")="1,2"
"RTN","RORX020A",110,0)
 Q RC
"RTN","RORX020A",111,0)
 ;
"RTN","RORX020A",112,0)
 ;*****************************************************************************
"RTN","RORX020A",113,0)
 ;RETURN RANGE TEXT AND ADD RANGE VALUES TO RORDATA (EXTRINISIC FUNCTION) 
"RTN","RORX020A",114,0)
 ;ID=1: MELD
"RTN","RORX020A",115,0)
 ;ID=2: MELD-Na
"RTN","RORX020A",116,0)
 ;
"RTN","RORX020A",117,0)
 ;INPUT:
"RTN","RORX020A",118,0)
 ;  GRC   Test ID number
"RTN","RORX020A",119,0)
 ;  RORDATA - Array with ROR data
"RTN","RORX020A",120,0)
 ;
"RTN","RORX020A",121,0)
 ;OUTPUT:
"RTN","RORX020A",122,0)
 ;  RORDATA("L",ID) - test ID low range
"RTN","RORX020A",123,0)
 ;  RORDATA("H",ID) - test ID high range
"RTN","RORX020A",124,0)
 ;  Description - <range>
"RTN","RORX020A",125,0)
 ;*****************************************************************************
"RTN","RORX020A",126,0)
RTEXT(GRC,RORDATA) ;
"RTN","RORX020A",127,0)
 N RANGE,TMP
"RTN","RORX020A",128,0)
 S RANGE=""
"RTN","RORX020A",129,0)
 ;--- Range
"RTN","RORX020A",130,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C",GRC))>1 D
"RTN","RORX020A",131,0)
 . ;--- Low
"RTN","RORX020A",132,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"L"))
"RTN","RORX020A",133,0)
 . S RORDATA("L",GRC)=$G(TMP)
"RTN","RORX020A",134,0)
 . S:TMP'="" RANGE=RANGE_" not less than "_TMP
"RTN","RORX020A",135,0)
 . ;--- High
"RTN","RORX020A",136,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"H"))
"RTN","RORX020A",137,0)
 . S RORDATA("H",GRC)=$G(TMP)
"RTN","RORX020A",138,0)
 . I TMP'=""  D:RANGE'=""  S RANGE=RANGE_" not greater than "_TMP
"RTN","RORX020A",139,0)
 . . S RANGE=RANGE_" and"
"RTN","RORX020A",140,0)
 ;--- Description
"RTN","RORX020A",141,0)
 S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC))
"RTN","RORX020A",142,0)
 S:TMP="" TMP="Unknown ("_GRC_")"
"RTN","RORX020A",143,0)
 Q TMP_" - "_$S(RANGE'="":"numeric results"_RANGE,1:"all results")
"RTN","RORX020A",144,0)
 ;
"RTN","RORX020A",145,0)
 ;************************************************************************
"RTN","RORX020A",146,0)
 ;DETERMINE IF THE SCORES ARE WITHIN THE REQUESTED RANGES (EXTRINSIC FUNCTION)
"RTN","RORX020A",147,0)
 ;If not in the range, exclude from report
"RTN","RORX020A",148,0)
 ;
"RTN","RORX020A",149,0)
 ;INPUT:
"RTN","RORX020A",150,0)
 ;  RORDATA  RORDATA("SCORE",I) contains computed test score for test ID 'I'
"RTN","RORX020A",151,0)
 ;
"RTN","RORX020A",152,0)
 ;OUTPUT:
"RTN","RORX020A",153,0)
 ;  1  include on report
"RTN","RORX020A",154,0)
 ;  0  exclude from report
"RTN","RORX020A",155,0)
 ;************************************************************************
"RTN","RORX020A",156,0)
INRANGE(RORDATA) ;
"RTN","RORX020A",157,0)
 ;if range exists for either test, and any result is considered 'invalid',
"RTN","RORX020A",158,0)
 ;then skip the range check and exclude data from report
"RTN","RORX020A",159,0)
 ;I $G(RORDATA("RANGE")),'$G(RORDATA("CALC")) Q 0
"RTN","RORX020A",160,0)
 ;if range does not exist for either test, and any result is considered 'invalid',
"RTN","RORX020A",161,0)
 ;then skip the range check and include data in the report
"RTN","RORX020A",162,0)
 I '$G(RORDATA("RANGE")),'$G(RORDATA("CALC")) Q 1
"RTN","RORX020A",163,0)
 ;
"RTN","RORX020A",164,0)
 ;---Range Check
"RTN","RORX020A",165,0)
 N I,RETURN S RETURN=1 ;default is set to 'within range'
"RTN","RORX020A",166,0)
 S I=0 F  S I=$O(RORDATA("SCORE",I)) Q:I=""  D
"RTN","RORX020A",167,0)
 . I $G(RORDATA("L",I))'="" D
"RTN","RORX020A",168,0)
 .. ;if score is less than 'low' range, do not include on report 
"RTN","RORX020A",169,0)
 .. I $G(RORDATA("SCORE",I))<RORDATA("L",I) S RETURN=0
"RTN","RORX020A",170,0)
 . I $G(RORDATA("H",I))'="" D
"RTN","RORX020A",171,0)
 .. ;if score is higher than 'high' range, do not include on report 
"RTN","RORX020A",172,0)
 .. I $G(RORDATA("SCORE",I))>RORDATA("H",I) S RETURN=0
"RTN","RORX020A",173,0)
 ;
"RTN","RORX020A",174,0)
 Q RETURN
"RTN","RORX020A",175,0)
 ;
"RTN","RORX020A",176,0)
 ;************************************************************************
"RTN","RORX020A",177,0)
 ;ADD 1 TO APPROPRIATE eGFR CATEGORY
"RTN","RORX020A",178,0)
 ;
"RTN","RORX020A",179,0)
 ;INPUT
"RTN","RORX020A",180,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020A",181,0)
 ;************************************************************************
"RTN","RORX020A",182,0)
EGFRCAT(RORDATA) ;
"RTN","RORX020A",183,0)
 I '$G(RORDATA("SCORE",2)) Q  ;quit if no score was calculated
"RTN","RORX020A",184,0)
 I $G(RORDATA("SCORE",2))>89 S RORDATA("NP",1)=$G(RORDATA("NP",1))+1 Q
"RTN","RORX020A",185,0)
 I $G(RORDATA("SCORE",2))>59 S RORDATA("NP",2)=$G(RORDATA("NP",2))+1 Q
"RTN","RORX020A",186,0)
 I $G(RORDATA("SCORE",2))>29 S RORDATA("NP",3)=$G(RORDATA("NP",3))+1 Q
"RTN","RORX020A",187,0)
 I $G(RORDATA("SCORE",2))>14 S RORDATA("NP",4)=$G(RORDATA("NP",4))+1 Q
"RTN","RORX020A",188,0)
 S RORDATA("NP",5)=$G(RORDATA("NP",5))+1 Q
"RTN","RORX020A",189,0)
 Q
"RTN","RORX020A",190,0)
 ;
"RTN","RORX020A",191,0)
 ;*****************************************************************************
"RTN","RORX020A",192,0)
 ;ADD SUMMARY DATA TO THE REPORT (EXTRINSIC FUNCTION)
"RTN","RORX020A",193,0)
 ;
"RTN","RORX020A",194,0)
 ;INPUT
"RTN","RORX020A",195,0)
 ;  RORTSK   Task number and task parameters
"RTN","RORX020A",196,0)
 ;  REPORT   'Report' XML tag number
"RTN","RORX020A",197,0)
 ;  RORDATA  Array with summary data:
"RTN","RORX020A",198,0)
 ;           RORDATA("NP",1) - total count of patients in 1st range
"RTN","RORX020A",199,0)
 ;           RORDATA("NP",2) - total count of patients in 2nd range
"RTN","RORX020A",200,0)
 ;           RORDATA("NP",3) - total count of patients in 3rd range
"RTN","RORX020A",201,0)
 ;           RORDATA("NP",4) - total count of patients in 4th range
"RTN","RORX020A",202,0)
 ;           RORDATA("NP",5) - total count of patients in 5th range
"RTN","RORX020A",203,0)
 ;
"RTN","RORX020A",204,0)
 ;OUTPUT
"RTN","RORX020A",205,0)
 ;  STAG     XML 'summary' tag number or error code
"RTN","RORX020A",206,0)
 ;*****************************************************************************
"RTN","RORX020A",207,0)
SUMMARY(RORTSK,REPORT,RORDATA) ; Add the summary values to the report
"RTN","RORX020A",208,0)
 N SUMMARY,I,STAG,RORTAG,RORNAME,RORRANGE
"RTN","RORX020A",209,0)
 S SUMMARY=$$ADDVAL^RORTSK11(RORTSK,"SUMMARY",,REPORT)
"RTN","RORX020A",210,0)
 Q:SUMMARY<0 SUMMARY
"RTN","RORX020A",211,0)
 ;add data for the summary entries
"RTN","RORX020A",212,0)
 F I=1:1:RORDATA("RCNT")  D  Q:STAG<0
"RTN","RORX020A",213,0)
 . S STAG=$$ADDVAL^RORTSK11(RORTSK,"DATA",,SUMMARY)
"RTN","RORX020A",214,0)
 . Q:STAG<0
"RTN","RORX020A",215,0)
 . ;get each value
"RTN","RORX020A",216,0)
 . S RORTAG="S"_I S RORNAME=$P($T(@RORTAG),";;",2)
"RTN","RORX020A",217,0)
 . S RORRANGE=$P($T(@RORTAG),";;",3)
"RTN","RORX020A",218,0)
 . D ADDVAL^RORTSK11(RORTSK,"DESC",$G(RORNAME),STAG) ;severity
"RTN","RORX020A",219,0)
 . D ADDVAL^RORTSK11(RORTSK,"VALUES",$G(RORRANGE),STAG) ;range
"RTN","RORX020A",220,0)
 . D ADDVAL^RORTSK11(RORTSK,"NP",$G(RORDATA("NP",I)),STAG) ;count
"RTN","RORX020A",221,0)
 Q STAG
"RTN","RORX020A",222,0)
 ;************************************************************************
"RTN","RORX020A",223,0)
 ;eGFR by MDRD Categories and Values for the summary table.
"RTN","RORX020A",224,0)
 ;NOTE: the number of entries below must match the value of RORDATA("RCNT")
"RTN","RORX020A",225,0)
 ;************************************************************************
"RTN","RORX020A",226,0)
S1 ;;Normal or CKD1;;>=90 mL/min/1.73m
"RTN","RORX020A",227,0)
S2 ;;CKD2 (Mild);;60-89 mL/min/1.73m
"RTN","RORX020A",228,0)
S3 ;;CKD3 (Moderate);;30-59 mL/min/1.73m
"RTN","RORX020A",229,0)
S4 ;;CKD4 (Severe);;15-29 mL/min/1.73m
"RTN","RORX020A",230,0)
S5 ;;CKD5 (Kidney failure);;<15 mL/min/1.73m
"VER")
8.0^22.0
"^DD",799.33,799.33,0)
FIELD^^.01^2
"^DD",799.33,799.33,0,"DDA")
N
"^DD",799.33,799.33,0,"DT")
3030606
"^DD",799.33,799.33,0,"IX","B",799.33,.01)

"^DD",799.33,799.33,0,"NM","ROR DATA AREA")

"^DD",799.33,799.33,0,"PT",798.32,1)

"^DD",799.33,799.33,0,"PT",799.61,.01)

"^DD",799.33,799.33,0,"VRPK")
ROR
"^DD",799.33,799.33,.001,0)
NUMBER^NJ2,0^^ ^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",799.33,799.33,.001,3)
Type a Number between 1 and 99, 0 Decimal Digits.
"^DD",799.33,799.33,.001,8.5)
@
"^DD",799.33,799.33,.001,9)
@
"^DD",799.33,799.33,.001,"DT")
3030606
"^DD",799.33,799.33,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.33,,-1)  K:$L(X)>30!($L(X)<2)!'(X'?1P.E) X
"^DD",799.33,799.33,.01,1,0)
^.1
"^DD",799.33,799.33,.01,1,1,0)
799.33^B
"^DD",799.33,799.33,.01,1,1,1)
S ^ROR(799.33,"B",$E(X,1,30),DA)=""
"^DD",799.33,799.33,.01,1,1,2)
K ^ROR(799.33,"B",$E(X,1,30),DA)
"^DD",799.33,799.33,.01,1,1,3)
Do not delete!
"^DD",799.33,799.33,.01,3)
Enter name of the data area (2-30 characters).
"^DD",799.33,799.33,.01,8.5)
@
"^DD",799.33,799.33,.01,9)
@
"^DD",799.33,799.33,.01,21,0)
^^4^4^3050427^
"^DD",799.33,799.33,.01,21,1,0)
This field stores the name of the data area 
"^DD",799.33,799.33,.01,21,2,0)
referenced by the DATA AREA fields of the HL7
"^DD",799.33,799.33,.01,21,3,0)
SEGMENT (the ROR REGISTRY PARAMETERS file) and
"^DD",799.33,799.33,.01,21,4,0)
EVENT (the ROR PATIENT EVENTS file) multiples.
"^DD",799.33,799.33,.01,"DEL",1,0)
I $$VADEL^RORDD(799.33,,-1)
"^DD",799.33,799.33,.01,"DT")
3030606
"^DD",799.4,799.4,.02,0)
CLINICAL AIDS^S^0:NO;1:YES;9:UNKNOWN;^0;2^Q
"^DD",799.4,799.4,.02,3)
Has clinical AIDS been diagnosed for this patient?
"^DD",799.4,799.4,.02,21,0)
^^3^3^3101014^^^
"^DD",799.4,799.4,.02,21,1,0)
The CLINICAL AIDS field indicates if the 
"^DD",799.4,799.4,.02,21,2,0)
clinical AIDS (category 4) was diagnosed for 
"^DD",799.4,799.4,.02,21,3,0)
the patient.
"^DD",799.4,799.4,.02,"DT")
3110119
"^DD",799.4,799.4,12.08,0)
HIV DX - FIRST DIAGNOSED HERE^S^0:NO;1:YES;9:UNKNOWN;^12;8^Q
"^DD",799.4,799.4,12.08,3)
Is this facility the first health care setting (VA or non-VA) to diagnose HIV for this patient?
"^DD",799.4,799.4,12.08,21,0)
^^2^2^3110120^^^
"^DD",799.4,799.4,12.08,21,1,0)
This field indicates if this facility was the first health care setting 
"^DD",799.4,799.4,12.08,21,2,0)
(VA or non-VA) to diagnose HIV in this patient.
"^DD",799.4,799.4,12.08,"DT")
3110120
"^DD",799.6,799.6,0)
FIELD^^5^14
"^DD",799.6,799.6,0,"DDA")
N
"^DD",799.6,799.6,0,"DT")
3051101
"^DD",799.6,799.6,0,"NM","ROR HISTORICAL DATA EXTRACTION")

"^DD",799.6,799.6,0,"PT",798.1,21.01)

"^DD",799.6,799.6,0,"VRPK")
ROR
"^DD",799.6,799.6,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.6,$G(DA))  K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",799.6,799.6,.01,1,0)
^.1^^-1
"^DD",799.6,799.6,.01,1,2,0)
^^TRIGGER^799.6^.07
"^DD",799.6,799.6,.01,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^RORDATA(799.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,7)'>0 I X S X=DIV S Y(1)=$S($D(^RORDATA(799.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X=DIV S X=DT X ^DD(799.6,.01,1,2,1.4)
"^DD",799.6,799.6,.01,1,2,1.4)
S DIH=$G(^RORDATA(799.6,DIV(0),0)),DIV=X S $P(^(0),U,7)=DIV,DIH=799.6,DIG=.07 D ^DICR
"^DD",799.6,799.6,.01,1,2,2)
Q
"^DD",799.6,799.6,.01,1,2,3)
Do not delete!
"^DD",799.6,799.6,.01,1,2,"%D",0)
^^7^7^3051101^
"^DD",799.6,799.6,.01,1,2,"%D",1,0)
If the ACTIVATION DATE field (.07) is empty, then
"^DD",799.6,799.6,.01,1,2,"%D",2,0)
this trigger populates it with the current date 
"^DD",799.6,799.6,.01,1,2,"%D",3,0)
when the package is installed.
"^DD",799.6,799.6,.01,1,2,"%D",4,0)
 
"^DD",799.6,799.6,.01,1,2,"%D",5,0)
Thus the historical data extraction parameters
"^DD",799.6,799.6,.01,1,2,"%D",6,0)
become active and will be processed by the next 
"^DD",799.6,799.6,.01,1,2,"%D",7,0)
run of the nightly task.
"^DD",799.6,799.6,.01,1,2,"CREATE CONDITION")
ACTIVATION DATE'>0
"^DD",799.6,799.6,.01,1,2,"CREATE VALUE")
TODAY
"^DD",799.6,799.6,.01,1,2,"DELETE VALUE")
NO EFFECT
"^DD",799.6,799.6,.01,1,2,"DT")
3051031
"^DD",799.6,799.6,.01,1,2,"FIELD")
ACTIVATION DATE
"^DD",799.6,799.6,.01,3)
Enter the unique data extraction name (3-30 characters).
"^DD",799.6,799.6,.01,8.5)
@
"^DD",799.6,799.6,.01,9)
@
"^DD",799.6,799.6,.01,20,0)
^.3LA^1^1
"^DD",799.6,799.6,.01,20,1,0)
DEFINITION
"^DD",799.6,799.6,.01,21,0)
^^7^7^3060203^
"^DD",799.6,799.6,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.6,799.6,.01,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,.01,21,3,0)
 
"^DD",799.6,799.6,.01,21,4,0)
This field stores the unique name of the
"^DD",799.6,799.6,.01,21,5,0)
historical data extraction. If an extraction is
"^DD",799.6,799.6,.01,21,6,0)
initiated by a patch, it is a good idea to include
"^DD",799.6,799.6,.01,21,7,0)
the patch number.
"^DD",799.6,799.6,.01,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.01,"DT")
3051101
"^DD",799.6,799.6,.02,0)
TYPE^RSX^1:Auto (HL7 messages);2:Manual (host files);^0;2^Q:$$VAEDT^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.02,8.5)
@
"^DD",799.6,799.6,.02,9)
@
"^DD",799.6,799.6,.02,20,0)
^.3LA^1^1
"^DD",799.6,799.6,.02,20,1,0)
DEFINITION
"^DD",799.6,799.6,.02,21,0)
^^15^15^3060203^
"^DD",799.6,799.6,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.6,.02,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,.02,21,3,0)
 
"^DD",799.6,799.6,.02,21,4,0)
This field defines the type of data extraction.
"^DD",799.6,799.6,.02,21,5,0)
 
"^DD",799.6,799.6,.02,21,6,0)
Automatic data extractions are initiated by the 
"^DD",799.6,799.6,.02,21,7,0)
CCR patches. Data is extracted by the nightly task
"^DD",799.6,799.6,.02,21,8,0)
and sent via regular batch HL7 messages.
"^DD",799.6,799.6,.02,21,9,0)
 
"^DD",799.6,799.6,.02,21,10,0)
Manual data extractions are initiated by the users
"^DD",799.6,799.6,.02,21,11,0)
using the options from the maintenance menu. They 
"^DD",799.6,799.6,.02,21,12,0)
schedule the data extraction tasks and verify 
"^DD",799.6,799.6,.02,21,13,0)
their completion. Data is written to host files, 
"^DD",799.6,799.6,.02,21,14,0)
which are transferred to the AAC via FTP or any
"^DD",799.6,799.6,.02,21,15,0)
other means.
"^DD",799.6,799.6,.02,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.02,"DT")
3051031
"^DD",799.6,799.6,.03,0)
START DATE^RDX^^0;3^Q:$$VAEDT^RORDD(799.6,$G(DA))  S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",799.6,799.6,.03,1,0)
^.1
"^DD",799.6,799.6,.03,1,1,0)
^^TRIGGER^799.6^.04
"^DD",799.6,799.6,.03,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^RORDATA(799.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,4)'>0 I X S X=DIV S Y(1)=$S($D(^RORDATA(799.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X=DT X ^DD(799.6,.03,1,1,1.4)
"^DD",799.6,799.6,.03,1,1,1.4)
S DIH=$G(^RORDATA(799.6,DIV(0),0)),DIV=X S $P(^(0),U,4)=DIV,DIH=799.6,DIG=.04 D ^DICR
"^DD",799.6,799.6,.03,1,1,2)
Q
"^DD",799.6,799.6,.03,1,1,3)
Do not delete!
"^DD",799.6,799.6,.03,1,1,"%D",0)
^^3^3^3051101^
"^DD",799.6,799.6,.03,1,1,"%D",1,0)
If the END DATE field (.04) is empty, then this
"^DD",799.6,799.6,.03,1,1,"%D",2,0)
trigger populates it with the current date when
"^DD",799.6,799.6,.03,1,1,"%D",3,0)
the package is installed.
"^DD",799.6,799.6,.03,1,1,"CREATE CONDITION")
END DATE'>0
"^DD",799.6,799.6,.03,1,1,"CREATE VALUE")
TODAY
"^DD",799.6,799.6,.03,1,1,"DELETE VALUE")
NO EFFECT
"^DD",799.6,799.6,.03,1,1,"DT")
3051101
"^DD",799.6,799.6,.03,1,1,"FIELD")
END DATE
"^DD",799.6,799.6,.03,8.5)
@
"^DD",799.6,799.6,.03,9)
@
"^DD",799.6,799.6,.03,20,0)
^.3LA^1^1
"^DD",799.6,799.6,.03,20,1,0)
DEFINITION
"^DD",799.6,799.6,.03,21,0)
^.001^5^5^3051101^^
"^DD",799.6,799.6,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.6,.03,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,.03,21,3,0)
 
"^DD",799.6,799.6,.03,21,4,0)
This field indicates the start date for the 
"^DD",799.6,799.6,.03,21,5,0)
historical data extraction.
"^DD",799.6,799.6,.03,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.03,"DT")
3051101
"^DD",799.6,799.6,.04,0)
END DATE^DX^^0;4^Q:$$VAEDT^RORDD(799.6,$G(DA))  S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",799.6,799.6,.04,5,1,0)
799.6^.03^1
"^DD",799.6,799.6,.04,8.5)
@
"^DD",799.6,799.6,.04,9)
@
"^DD",799.6,799.6,.04,20,0)
^.3LA^1^1
"^DD",799.6,799.6,.04,20,1,0)
DEFINITION
"^DD",799.6,799.6,.04,21,0)
^^5^5^3051101^
"^DD",799.6,799.6,.04,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.6,.04,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,.04,21,3,0)
 
"^DD",799.6,799.6,.04,21,4,0)
This field indicates the end date for the 
"^DD",799.6,799.6,.04,21,5,0)
historical data extraction.
"^DD",799.6,799.6,.04,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.04,"DT")
3051101
"^DD",799.6,799.6,.05,0)
PATIENTS PER BATCH^NJ9,0X^^0;5^Q:$$VAEDT^RORDD(799.6,$G(DA))  K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",799.6,799.6,.05,3)
Type a Number between 1 and 999999999, 0 Decimal Digits.
"^DD",799.6,799.6,.05,8.5)
@
"^DD",799.6,799.6,.05,9)
@
"^DD",799.6,799.6,.05,20,0)
^.3LA^2^2
"^DD",799.6,799.6,.05,20,1,0)
DEFINITION
"^DD",799.6,799.6,.05,20,2,0)
MANUAL
"^DD",799.6,799.6,.05,21,0)
^^6^6^3051219^
"^DD",799.6,799.6,.05,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.6,.05,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,.05,21,3,0)
 
"^DD",799.6,799.6,.05,21,4,0)
The PATIENTS PER BATCH field holds the maximum
"^DD",799.6,799.6,.05,21,5,0)
number of patients whose data is written into a
"^DD",799.6,799.6,.05,21,6,0)
single historical data extraction output file.
"^DD",799.6,799.6,.05,23,0)
^.001^2^2^3060203^^^^
"^DD",799.6,799.6,.05,23,1,0)
This field is used only during manual historical data
"^DD",799.6,799.6,.05,23,2,0)
extractions.
"^DD",799.6,799.6,.05,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.05,"DT")
3050725
"^DD",799.6,799.6,.06,0)
MAXIMUM MESSAGE SIZE^NJ4,1X^^0;6^Q:$$VAEDT^RORDD(799.6,$G(DA))  K:+X'=X!(X>99)!(X<0)!(X?.E1"."2N.N) X
"^DD",799.6,799.6,.06,3)
Type a Number between 0 and 99, 1 Decimal Digit.
"^DD",799.6,799.6,.06,8.5)
@
"^DD",799.6,799.6,.06,9)
@
"^DD",799.6,799.6,.06,20,0)
^.3LA^2^2
"^DD",799.6,799.6,.06,20,1,0)
DEFINITION
"^DD",799.6,799.6,.06,20,2,0)
AUTO
"^DD",799.6,799.6,.06,21,0)
^.001^7^7^3051219^^
"^DD",799.6,799.6,.06,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.6,.06,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,.06,21,3,0)
 
"^DD",799.6,799.6,.06,21,4,0)
This field stores the maximum size (in megabytes)
"^DD",799.6,799.6,.06,21,5,0)
of a batch HL7 message that can be sent to Austin
"^DD",799.6,799.6,.06,21,6,0)
Automation Center (AAC). If this field is empty or
"^DD",799.6,799.6,.06,21,7,0)
contains 0, the size is not limited.
"^DD",799.6,799.6,.06,23,0)
^.001^11^11^3060203^^
"^DD",799.6,799.6,.06,23,1,0)
Actual size of an HL7 batch can be greater than the
"^DD",799.6,799.6,.06,23,2,0)
value of this field because the software does not break
"^DD",799.6,799.6,.06,23,3,0)
in the middle of an individual HL7 message.
"^DD",799.6,799.6,.06,23,4,0)
 
"^DD",799.6,799.6,.06,23,5,0)
For example, if the maximum size is 10Mb, the current
"^DD",799.6,799.6,.06,23,6,0)
size is 9Mb and 3Mb should be sent for the patient
"^DD",799.6,799.6,.06,23,7,0)
being processed then the actual size of the batch will
"^DD",799.6,799.6,.06,23,8,0)
be 12Mb.
"^DD",799.6,799.6,.06,23,9,0)
 
"^DD",799.6,799.6,.06,23,10,0)
This field is used only during automatic historical 
"^DD",799.6,799.6,.06,23,11,0)
data extractions.
"^DD",799.6,799.6,.06,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.06,"DT")
3051101
"^DD",799.6,799.6,.07,0)
ACTIVATION DATE^D^^0;7^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",799.6,799.6,.07,5,1,0)
799.6^.01^2
"^DD",799.6,799.6,.07,8.5)
@
"^DD",799.6,799.6,.07,9)
@
"^DD",799.6,799.6,.07,20,0)
^.3LA^2^2
"^DD",799.6,799.6,.07,20,1,0)
STATE
"^DD",799.6,799.6,.07,20,2,0)
AUTO
"^DD",799.6,799.6,.07,21,0)
^^5^5^3051219^
"^DD",799.6,799.6,.07,21,1,0)
This field is used only for automatic data 
"^DD",799.6,799.6,.07,21,2,0)
extractions. If it is empty, then the nightly task
"^DD",799.6,799.6,.07,21,3,0)
ignores this record completely. Otherwise, the
"^DD",799.6,799.6,.07,21,4,0)
data extraction will not start before the date and
"^DD",799.6,799.6,.07,21,5,0)
time stored in this field.
"^DD",799.6,799.6,.07,"DT")
3051031
"^DD",799.6,799.6,.08,0)
BASE FILE NAME^FX^^0;8^K:$L(X)>15!($L(X)<1) X
"^DD",799.6,799.6,.08,3)
Answer must be 1-15 characters in length.
"^DD",799.6,799.6,.08,8.5)
@
"^DD",799.6,799.6,.08,9)
@
"^DD",799.6,799.6,.08,20,0)
^.3LA^2^2
"^DD",799.6,799.6,.08,20,1,0)
DEFINITION
"^DD",799.6,799.6,.08,20,2,0)
MANUAL
"^DD",799.6,799.6,.08,21,0)
^^19^19^3051219^
"^DD",799.6,799.6,.08,21,1,0)
The base part for the output file names is stored
"^DD",799.6,799.6,.08,21,2,0)
in this field. It is populated either by a patch 
"^DD",799.6,799.6,.08,21,3,0)
or by the user (if they are instructed to do so).
"^DD",799.6,799.6,.08,21,4,0)
 
"^DD",799.6,799.6,.08,21,5,0)
The output file names will have the following
"^DD",799.6,799.6,.08,21,6,0)
structure:
"^DD",799.6,799.6,.08,21,7,0)
 
"^DD",799.6,799.6,.08,21,8,0)
  BASE-SSS-TT.HDT
"^DD",799.6,799.6,.08,21,9,0)
 
"^DD",799.6,799.6,.08,21,10,0)
where 'BASE' is the value of this field, 'SSS' is
"^DD",799.6,799.6,.08,21,11,0)
the site number (3 digits), and 'TT' is the
"^DD",799.6,799.6,.08,21,12,0)
sequential number of the task (2 digits).
"^DD",799.6,799.6,.08,21,13,0)
                                                     
"^DD",799.6,799.6,.08,21,14,0)
If the task is restarted, the optional numeric
"^DD",799.6,799.6,.08,21,15,0)
modifier '##' (2 digits) will be added to the name
"^DD",799.6,799.6,.08,21,16,0)
so that the already extracted data will not be
"^DD",799.6,799.6,.08,21,17,0)
overwritten:
"^DD",799.6,799.6,.08,21,18,0)
                                                     
"^DD",799.6,799.6,.08,21,19,0)
  BASE-SSS-TT-##.HDT 
"^DD",799.6,799.6,.08,23,0)
^^2^2^3060203^
"^DD",799.6,799.6,.08,23,1,0)
This field is used only during manual historical data
"^DD",799.6,799.6,.08,23,2,0)
extractions.
"^DD",799.6,799.6,.08,"DT")
3051219
"^DD",799.6,799.6,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;9^Q:$$VAEDT^RORDD(799.6,,-1)
"^DD",799.6,799.6,.09,8.5)
@
"^DD",799.6,799.6,.09,9)
@
"^DD",799.6,799.6,.09,20,0)
^.3LA^1^1
"^DD",799.6,799.6,.09,20,1,0)
DEFINITION
"^DD",799.6,799.6,.09,21,0)
^^6^6^3060203^
"^DD",799.6,799.6,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",799.6,799.6,.09,21,2,0)
EDIT THIS FIELD!
"^DD",799.6,799.6,.09,21,3,0)
 
"^DD",799.6,799.6,.09,21,4,0)
National historical data extractions (backpulls)
"^DD",799.6,799.6,.09,21,5,0)
must have this field set to "YES". This prevents
"^DD",799.6,799.6,.09,21,6,0)
local editing of other fields of the definitions.
"^DD",799.6,799.6,.09,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.09,"DT")
3050725
"^DD",799.6,799.6,1,0)
DATA AREA^799.61P^^1;0
"^DD",799.6,799.6,1,9)
@
"^DD",799.6,799.6,1,20,0)
^.3LA^1^1
"^DD",799.6,799.6,1,20,1,0)
DEFINITION
"^DD",799.6,799.6,1,21,0)
^.001^7^7^3051219^^
"^DD",799.6,799.6,1,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.6,1,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,1,21,3,0)
 
"^DD",799.6,799.6,1,21,4,0)
This multiple lists all data areas in which the 
"^DD",799.6,799.6,1,21,5,0)
data extraction will be performed. It can also
"^DD",799.6,799.6,1,21,6,0)
contain additional time frames for these data
"^DD",799.6,799.6,1,21,7,0)
areas.
"^DD",799.6,799.6,2,0)
OUTPUT DIRECTORY^F^^2;E1,240^K:$L(X)>240!($L(X)<1) X
"^DD",799.6,799.6,2,3)
Enter a valid name of the output directory (1-240 characters).
"^DD",799.6,799.6,2,20,0)
^.3LA^2^2
"^DD",799.6,799.6,2,20,1,0)
PARAMETERS
"^DD",799.6,799.6,2,20,2,0)
MANUAL
"^DD",799.6,799.6,2,21,0)
^^19^19^3060203^
"^DD",799.6,799.6,2,21,1,0)
A directory must be created within the file system
"^DD",799.6,799.6,2,21,2,0)
of the host operating system (VMS, Windows,
"^DD",799.6,799.6,2,21,3,0)
etc.). Text files containing historical data in
"^DD",799.6,799.6,2,21,4,0)
the HL7 format will be created in this directory
"^DD",799.6,799.6,2,21,5,0)
by the data extraction tasks.
"^DD",799.6,799.6,2,21,6,0)
 
"^DD",799.6,799.6,2,21,7,0)
The full name of the directory must be entered as
"^DD",799.6,799.6,2,21,8,0)
a value of this field. For example, the value can
"^DD",799.6,799.6,2,21,9,0)
look something like this:
"^DD",799.6,799.6,2,21,10,0)
 
"^DD",799.6,799.6,2,21,11,0)
   VA2$:[OUTPUT] - VAX VMS 
"^DD",799.6,799.6,2,21,12,0)
   D:\Output\    - Windows, MS-DOS
"^DD",799.6,799.6,2,21,13,0)
 
"^DD",799.6,799.6,2,21,14,0)
Because a file name will be concatenated to the
"^DD",799.6,799.6,2,21,15,0)
directory name, the trailing slash in the Windows
"^DD",799.6,799.6,2,21,16,0)
directory name is required.
"^DD",799.6,799.6,2,21,17,0)
 
"^DD",799.6,799.6,2,21,18,0)
Do not forget to enable read/write access to this
"^DD",799.6,799.6,2,21,19,0)
directory for M processes!
"^DD",799.6,799.6,2,"DT")
3050722
"^DD",799.6,799.6,3,0)
REGISTRY NAME^799.63^^3;0
"^DD",799.6,799.6,3,9)
@
"^DD",799.6,799.6,3,21,0)
^^3^3^3051219^
"^DD",799.6,799.6,3,21,1,0)
This multiple references the registries that the
"^DD",799.6,799.6,3,21,2,0)
data extraction will be performed for and
"^DD",799.6,799.6,3,21,3,0)
indicates the extraction status.
"^DD",799.6,799.6,3,"DT")
3051031
"^DD",799.6,799.6,4,0)
TASK^799.64^^4;0
"^DD",799.6,799.6,4,9)
@
"^DD",799.6,799.6,4,20,0)
^.3LA^2^2
"^DD",799.6,799.6,4,20,1,0)
STATE
"^DD",799.6,799.6,4,20,2,0)
MANUAL
"^DD",799.6,799.6,5,0)
STATUS^CJ2,0^^ ; ^S X=$$HDESTAT^RORDD01(+$G(D0))
"^DD",799.6,799.6,5,9)
^
"^DD",799.6,799.6,5,9.01)

"^DD",799.6,799.6,5,9.1)
S X=$$HDESTAT^RORDD01(+$G(D0))
"^DD",799.6,799.6,5,20,0)
^.3LA^1^1
"^DD",799.6,799.6,5,20,1,0)
STATE
"^DD",799.6,799.6,5,21,0)
^^7^7^3060106^
"^DD",799.6,799.6,5,21,1,0)
This field indicates a generic status of the 
"^DD",799.6,799.6,5,21,2,0)
historical data extraction:
"^DD",799.6,799.6,5,21,3,0)
 
"^DD",799.6,799.6,5,21,4,0)
  ""  Unknown/Undefined
"^DD",799.6,799.6,5,21,5,0)
   0  Inactive
"^DD",799.6,799.6,5,21,6,0)
   1  Pending/Active
"^DD",799.6,799.6,5,21,7,0)
   2  Completed
"^DD",799.6,799.6,5,"DT")
3051114
"^DD",799.6,799.61,0)
DATA AREA SUB-FIELD^^.03^3
"^DD",799.6,799.61,0,"DT")
3050722
"^DD",799.6,799.61,0,"NM","DATA AREA")

"^DD",799.6,799.61,0,"UP")
799.6
"^DD",799.6,799.61,.01,0)
DATA AREA^MP799.33'X^ROR(799.33,^0;1^Q:$$VAEDT^RORDD(799.6,$G(DA(1)))
"^DD",799.6,799.61,.01,1,0)
^.1^^0
"^DD",799.6,799.61,.01,3)

"^DD",799.6,799.61,.01,8.5)
@
"^DD",799.6,799.61,.01,9)
@
"^DD",799.6,799.61,.01,20,0)
^.3LA^^0
"^DD",799.6,799.61,.01,21,0)
^^6^6^3051219^
"^DD",799.6,799.61,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.61,.01,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.61,.01,21,3,0)
 
"^DD",799.6,799.61,.01,21,4,0)
Select the data area where the data extraction 
"^DD",799.6,799.61,.01,21,5,0)
will be performed. Data will be extracted only 
"^DD",799.6,799.61,.01,21,6,0)
from the data areas referenced by this field.
"^DD",799.6,799.61,.01,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA(1)))
"^DD",799.6,799.61,.01,"DT")
3050725
"^DD",799.6,799.61,.02,0)
START DATE^DX^^0;2^Q:$$VAEDT^RORDD(799.6,$G(DA(1)))  S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",799.6,799.61,.02,1,0)
^.1
"^DD",799.6,799.61,.02,1,1,0)
^^TRIGGER^799.61^.03
"^DD",799.6,799.61,.02,1,1,1)
X ^DD(799.61,.02,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^RORDATA(799.6,D0,1,D1,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=DT X ^DD(799.61,.02,1,1,1.4)
"^DD",799.6,799.61,.02,1,1,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S Y(1)=$S($D(^RORDATA(799.6,D0,1,D1,0)):^(0),1:"") S X=$P(Y(1),U,3)'>0
"^DD",799.6,799.61,.02,1,1,1.4)
S DIH=$G(^RORDATA(799.6,DIV(0),1,DIV(1),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=799.61,DIG=.03 D ^DICR
"^DD",799.6,799.61,.02,1,1,2)
Q
"^DD",799.6,799.61,.02,1,1,3)
Do not delete!
"^DD",799.6,799.61,.02,1,1,"%D",0)
^^3^3^3060106^
"^DD",799.6,799.61,.02,1,1,"%D",1,0)
If the END DATE field (.03) is empty, then this 
"^DD",799.6,799.61,.02,1,1,"%D",2,0)
trigger populates it with the current date when
"^DD",799.6,799.61,.02,1,1,"%D",3,0)
the package is installed.
"^DD",799.6,799.61,.02,1,1,"CREATE CONDITION")
END DATE'>0
"^DD",799.6,799.61,.02,1,1,"CREATE VALUE")
TODAY
"^DD",799.6,799.61,.02,1,1,"DELETE VALUE")
NO EFFECT
"^DD",799.6,799.61,.02,1,1,"FIELD")
END DATE
"^DD",799.6,799.61,.02,8.5)
@
"^DD",799.6,799.61,.02,9)
@
"^DD",799.6,799.61,.02,20,0)
^.3LA^^0
"^DD",799.6,799.61,.02,21,0)
^^10^10^3051219^
"^DD",799.6,799.61,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.61,.02,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.61,.02,21,3,0)
 
"^DD",799.6,799.61,.02,21,4,0)
This field stores the start date of an additional 
"^DD",799.6,799.61,.02,21,5,0)
data extraction time frame for this data area.
"^DD",799.6,799.61,.02,21,6,0)
 
"^DD",799.6,799.61,.02,21,7,0)
If this field is empty, then the data is extracted
"^DD",799.6,799.61,.02,21,8,0)
only in the main time frame defined by the
"^DD",799.6,799.61,.02,21,9,0)
top-level fields START DATE (.03) and END DATE
"^DD",799.6,799.61,.02,21,10,0)
(.04).
"^DD",799.6,799.61,.02,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA(1)))
"^DD",799.6,799.61,.02,"DT")
3051101
"^DD",799.6,799.61,.03,0)
END DATE^DX^^0;3^Q:$$VAEDT^RORDD(799.6,$G(DA(1)))  S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",799.6,799.61,.03,5,1,0)
799.61^.02^1
"^DD",799.6,799.61,.03,8.5)
@
"^DD",799.6,799.61,.03,9)
@
"^DD",799.6,799.61,.03,20,0)
^.3LA^^0
"^DD",799.6,799.61,.03,21,0)
^^10^10^3051219^
"^DD",799.6,799.61,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.61,.03,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.61,.03,21,3,0)
 
"^DD",799.6,799.61,.03,21,4,0)
This field stores the end date of an additional 
"^DD",799.6,799.61,.03,21,5,0)
data extraction time frame for this data area.
"^DD",799.6,799.61,.03,21,6,0)
 
"^DD",799.6,799.61,.03,21,7,0)
If this field is empty, then the data is extracted
"^DD",799.6,799.61,.03,21,8,0)
only in the main time frame defined by the
"^DD",799.6,799.61,.03,21,9,0)
top-level fields START DATE (.03) and END DATE
"^DD",799.6,799.61,.03,21,10,0)
(.04).
"^DD",799.6,799.61,.03,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA(1)))
"^DD",799.6,799.61,.03,"DT")
3051101
"^DD",799.6,799.63,0)
REGISTRY NAME SUB-FIELD^^.02^2
"^DD",799.6,799.63,0,"DT")
3051031
"^DD",799.6,799.63,0,"NM","REGISTRY NAME")

"^DD",799.6,799.63,0,"UP")
799.6
"^DD",799.6,799.63,.01,0)
REGISTRY NAME^MRFX^^0;1^Q:$$VAEDT^RORDD(799.6,$G(DA(1)))  K:$L(X)>30!($L(X)<3) X I $D(X) K:'$D(^ROR(798.1,"B",$E(X,1,30))) X
"^DD",799.6,799.63,.01,1,0)
^.1^^0
"^DD",799.6,799.63,.01,3)
Enter the registry name (3-30 characters).
"^DD",799.6,799.63,.01,4)
I $G(X)="??" N D,DIC,DZ S DIC="^ROR(798.1,",DIC(0)="",D="B",DZ="??" D DQ^DICQ,EN^DDIOL("",,"!")
"^DD",799.6,799.63,.01,8.5)
@
"^DD",799.6,799.63,.01,9)
@
"^DD",799.6,799.63,.01,20,0)
^.3LA^1^1
"^DD",799.6,799.63,.01,20,1,0)
DEFINITION
"^DD",799.6,799.63,.01,21,0)
^^5^5^3051101^
"^DD",799.6,799.63,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.63,.01,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.63,.01,21,3,0)
 
"^DD",799.6,799.63,.01,21,4,0)
Enter a name of the registry exactly as it appears
"^DD",799.6,799.63,.01,21,5,0)
in the ROR REGISTRY PARAMETERS file (#798.1).
"^DD",799.6,799.63,.01,23,0)
^.001^3^3^3051101^^^^
"^DD",799.6,799.63,.01,23,1,0)
Names of the registries are used here instead of 
"^DD",799.6,799.63,.01,23,2,0)
pointers because the KIDS pointer resolving feature 
"^DD",799.6,799.63,.01,23,3,0)
does not work for .01 fields.
"^DD",799.6,799.63,.01,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA(1)))
"^DD",799.6,799.63,.01,"DT")
3051031
"^DD",799.6,799.63,.02,0)
COMPLETION DATE/TIME^D^^0;2^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",799.6,799.63,.02,8.5)
@
"^DD",799.6,799.63,.02,9)
@
"^DD",799.6,799.63,.02,20,0)
^.3LA^1^1
"^DD",799.6,799.63,.02,20,1,0)
STATE
"^DD",799.6,799.63,.02,21,0)
^^7^7^3060203^
"^DD",799.6,799.63,.02,21,1,0)
A valid date in this field indicates that the data
"^DD",799.6,799.63,.02,21,2,0)
extraction has been successfully completed for
"^DD",799.6,799.63,.02,21,3,0)
this registry. 
"^DD",799.6,799.63,.02,21,4,0)
 
"^DD",799.6,799.63,.02,21,5,0)
If the data must be re-extracted, clear this field
"^DD",799.6,799.63,.02,21,6,0)
and the nightly task will repeat the historical
"^DD",799.6,799.63,.02,21,7,0)
data extraction for this registry.
"^DD",799.6,799.63,.02,23,0)
^^4^4^3060203^
"^DD",799.6,799.63,.02,23,1,0)
This field is populated by the $$CHECKMSG^ROR10 
"^DD",799.6,799.63,.02,23,2,0)
function after it confirms successful transmission of 
"^DD",799.6,799.63,.02,23,3,0)
the HL7 messages before the next nightly data
"^DD",799.6,799.63,.02,23,4,0)
extraction.
"^DD",799.6,799.63,.02,"DT")
3051031
"^DD",799.6,799.64,0)
TASK SUB-FIELD^^1^6
"^DD",799.6,799.64,0,"DT")
3050725
"^DD",799.6,799.64,0,"IX","T",799.64,.02)

"^DD",799.6,799.64,0,"NM","TASK")

"^DD",799.6,799.64,0,"UP")
799.6
"^DD",799.6,799.64,.01,0)
START RECORD IEN^MNJ22,9^^0;1^K:+X'=X!(X>999999999999)!(X<1)!(X?.E1"."10N.N) X
"^DD",799.6,799.64,.01,1,0)
^.1^^0
"^DD",799.6,799.64,.01,3)
Enter a patient's IEN (DFN).
"^DD",799.6,799.64,.01,8.5)
@
"^DD",799.6,799.64,.01,9)
@
"^DD",799.6,799.64,.01,21,0)
^^16^16^3060203^
"^DD",799.6,799.64,.01,21,1,0)
All patients of the registries are distributed 
"^DD",799.6,799.64,.01,21,2,0)
between the data extraction tasks. Each task
"^DD",799.6,799.64,.01,21,3,0)
extracts the data of the patients whose DFNs are
"^DD",799.6,799.64,.01,21,4,0)
not less than the value of this field in the task
"^DD",799.6,799.64,.01,21,5,0)
record and are less than the value of the field in
"^DD",799.6,799.64,.01,21,6,0)
the next task record.
"^DD",799.6,799.64,.01,21,7,0)
                                                     
"^DD",799.6,799.64,.01,21,8,0)
The first task always has 1 as a value in this
"^DD",799.6,799.64,.01,21,9,0)
field (just in case).
"^DD",799.6,799.64,.01,21,10,0)
                                                     
"^DD",799.6,799.64,.01,21,11,0)
The last task extracts the data of all patients
"^DD",799.6,799.64,.01,21,12,0)
whose registry records have IENs not less than the
"^DD",799.6,799.64,.01,21,13,0)
value of this field.  
"^DD",799.6,799.64,.01,21,14,0)
                                                     
"^DD",799.6,799.64,.01,21,15,0)
Usually, this field should not be edited. It is
"^DD",799.6,799.64,.01,21,16,0)
populated automatically when the task is created.
"^DD",799.6,799.64,.01,23,0)
^^7^7^3060203^
"^DD",799.6,799.64,.01,23,1,0)
The value of this field is not a real pointer to the 
"^DD",799.6,799.64,.01,23,2,0)
ROR REGISTRY RECORD file. There can be no record in the
"^DD",799.6,799.64,.01,23,3,0)
local registry with an IEN stored in this field.
"^DD",799.6,799.64,.01,23,4,0)
 
"^DD",799.6,799.64,.01,23,5,0)
The historical data extraction task will start 
"^DD",799.6,799.64,.01,23,6,0)
processing from the registry record with an IEN that 
"^DD",799.6,799.64,.01,23,7,0)
is not less than the value of this field.
"^DD",799.6,799.64,.01,"DT")
3051114
"^DD",799.6,799.64,.02,0)
TASK NUMBER^NJ10,0I^^0;2^K:+X'=X!(X>9899999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",799.6,799.64,.02,1,0)
^.1
"^DD",799.6,799.64,.02,1,1,0)
799.64^T
"^DD",799.6,799.64,.02,1,1,1)
S ^RORDATA(799.6,DA(1),4,"T",$E(X,1,30),DA)=""
"^DD",799.6,799.64,.02,1,1,2)
K ^RORDATA(799.6,DA(1),4,"T",$E(X,1,30),DA)
"^DD",799.6,799.64,.02,1,1,3)
Do not delete!
"^DD",799.6,799.64,.02,1,1,"DT")
3050725
"^DD",799.6,799.64,.02,3)
Type a Number between 1 and 9899999999, 0 Decimal Digits.
"^DD",799.6,799.64,.02,8.5)
@
"^DD",799.6,799.64,.02,9)
@
"^DD",799.6,799.64,.02,21,0)
^^6^6^3050725^
"^DD",799.6,799.64,.02,21,1,0)
This field contains the number of the Taskman 
"^DD",799.6,799.64,.02,21,2,0)
task (scheduled or running) that does the data
"^DD",799.6,799.64,.02,21,3,0)
extraction.
"^DD",799.6,799.64,.02,21,4,0)
 
"^DD",799.6,799.64,.02,21,5,0)
This field cannot be edited. It is updated
"^DD",799.6,799.64,.02,21,6,0)
automatically by the data extraction task.
"^DD",799.6,799.64,.02,"DT")
3050725
"^DD",799.6,799.64,.03,0)
STATUS^S^0:Unknown;1:Active> Pending;2:Active> Running;3:Inactive> Finished;4:Inactive> Available;5:Inactive> Interrupted;100:Inactive> Crashed;101:Inactive> Errors;102:Active> Suspended;103:Active> Stopping;^0;3^Q
"^DD",799.6,799.64,.03,3)

"^DD",799.6,799.64,.03,8.5)
@
"^DD",799.6,799.64,.03,9)
@
"^DD",799.6,799.64,.03,21,0)
^^2^2^3050725^
"^DD",799.6,799.64,.03,21,1,0)
The STATUS field stores the last known task
"^DD",799.6,799.64,.03,21,2,0)
status.
"^DD",799.6,799.64,.03,23,0)
^^8^8^3060203^
"^DD",799.6,799.64,.03,23,1,0)
This field is populated with the value returned by the
"^DD",799.6,799.64,.03,23,2,0)
$$STATUS^RORTSK02 function. It will reflect the last 
"^DD",799.6,799.64,.03,23,3,0)
known status of the task even after the task is deleted
"^DD",799.6,799.64,.03,23,4,0)
by the Taskman and its record is deleted from the ROR
"^DD",799.6,799.64,.03,23,5,0)
TASK file (#798.8).
"^DD",799.6,799.64,.03,23,6,0)
 
"^DD",799.6,799.64,.03,23,7,0)
Please do not get value of this field directly; use the
"^DD",799.6,799.64,.03,23,8,0)
$$STATUS^RORHDTUT function instead.
"^DD",799.6,799.64,.03,"DT")
3051114
"^DD",799.6,799.64,.04,0)
NEXT PATIENT IEN^NJ22,9^^0;4^K:+X'=X!(X>999999999999)!(X<1)!(X?.E1"."10N.N) X
"^DD",799.6,799.64,.04,3)
Enter the next patient IEN (1-999999999999, 9 Decimal Digits).
"^DD",799.6,799.64,.04,8.5)
@
"^DD",799.6,799.64,.04,9)
@
"^DD",799.6,799.64,.04,21,0)
^.001^10^10^3060122^^
"^DD",799.6,799.64,.04,21,1,0)
If the data extraction task is stopped, it 
"^DD",799.6,799.64,.04,21,2,0)
finishes processing the current patient and stores
"^DD",799.6,799.64,.04,21,3,0)
the IEN of the patient that should be processed
"^DD",799.6,799.64,.04,21,4,0)
next as the value of this field.
"^DD",799.6,799.64,.04,21,5,0)
 
"^DD",799.6,799.64,.04,21,6,0)
When the task is restarted, it starts from the
"^DD",799.6,799.64,.04,21,7,0)
patient IEN stored in this field.
"^DD",799.6,799.64,.04,21,8,0)
 
"^DD",799.6,799.64,.04,21,9,0)
Usually, this field should not be edited. It is
"^DD",799.6,799.64,.04,21,10,0)
updated automatically by the data extraction task.
"^DD",799.6,799.64,.04,23,0)
^^7^7^3060203^
"^DD",799.6,799.64,.04,23,1,0)
The value of this field is not a real pointer to the 
"^DD",799.6,799.64,.04,23,2,0)
ROR PATIENT file. There can be no record in the file
"^DD",799.6,799.64,.04,23,3,0)
with IEN stored in this field.
"^DD",799.6,799.64,.04,23,4,0)
 
"^DD",799.6,799.64,.04,23,5,0)
The restarted historical data extraction task will 
"^DD",799.6,799.64,.04,23,6,0)
continue processing from the patient with an IEN that
"^DD",799.6,799.64,.04,23,7,0)
is not less than the value of this field.
"^DD",799.6,799.64,.04,"DT")
3060122
"^DD",799.6,799.64,.05,0)
FILE NAME^F^^0;5^K:$L(X)>50!($L(X)<1) X
"^DD",799.6,799.64,.05,3)
Answer must be 1-50 characters in length.
"^DD",799.6,799.64,.05,8.5)
@
"^DD",799.6,799.64,.05,9)
@
"^DD",799.6,799.64,.05,21,0)
^.001^22^22^3051101^^
"^DD",799.6,799.64,.05,21,1,0)
The output file name is stored in this field. This
"^DD",799.6,799.64,.05,21,2,0)
name is generated automatically when the task is
"^DD",799.6,799.64,.05,21,3,0)
created. The name has the following structure:
"^DD",799.6,799.64,.05,21,4,0)
 
"^DD",799.6,799.64,.05,21,5,0)
   BASE-SSS-TT.HDT
"^DD",799.6,799.64,.05,21,6,0)
 
"^DD",799.6,799.64,.05,21,7,0)
where 'BASE' is the base part of the file name
"^DD",799.6,799.64,.05,21,8,0)
provided by the user during creation of the task
"^DD",799.6,799.64,.05,21,9,0)
table 'SSS' is the site number (3 digits), and
"^DD",799.6,799.64,.05,21,10,0)
'TT' is the sequential number of the task (2
"^DD",799.6,799.64,.05,21,11,0)
digits).
"^DD",799.6,799.64,.05,21,12,0)
 
"^DD",799.6,799.64,.05,21,13,0)
If the task is restarted, the optional numeric
"^DD",799.6,799.64,.05,21,14,0)
modifier '##' (2 digits) can be added to the name
"^DD",799.6,799.64,.05,21,15,0)
so that the already extracted data will not be
"^DD",799.6,799.64,.05,21,16,0)
overwritten:
"^DD",799.6,799.64,.05,21,17,0)
 
"^DD",799.6,799.64,.05,21,18,0)
   BASE-SSS-TT-##.HDT
"^DD",799.6,799.64,.05,21,19,0)
 
"^DD",799.6,799.64,.05,21,20,0)
Usually, this field should not be edited. It is
"^DD",799.6,799.64,.05,21,21,0)
populated automatically when the task is created
"^DD",799.6,799.64,.05,21,22,0)
or restarted.
"^DD",799.6,799.64,.05,"DT")
3050722
"^DD",799.6,799.64,1,0)
ERROR^799.641P^^1;0
"^DD",799.6,799.64,1,9)
@
"^DD",799.6,799.64,1,21,0)
^^11^11^3060106^
"^DD",799.6,799.64,1,21,1,0)
This multiple contains a list of registry records 
"^DD",799.6,799.64,1,21,2,0)
that were processed with errors.
"^DD",799.6,799.64,1,21,3,0)
                                 
"^DD",799.6,799.64,1,21,4,0)
When the data extraction task is restarted, it
"^DD",799.6,799.64,1,21,5,0)
tries to re-extract the data for these patients.
"^DD",799.6,799.64,1,21,6,0)
If it succeeds, it deletes the corresponding
"^DD",799.6,799.64,1,21,7,0)
records from the list.
"^DD",799.6,799.64,1,21,8,0)
                                 
"^DD",799.6,799.64,1,21,9,0)
The records of the multiple have the same IENs as
"^DD",799.6,799.64,1,21,10,0)
the corresponding registry records in the ROR
"^DD",799.6,799.64,1,21,11,0)
REGISTRY RECORD file (#798).
"^DD",799.6,799.641,0)
ERROR SUB-FIELD^^.01^1
"^DD",799.6,799.641,0,"DT")
3050722
"^DD",799.6,799.641,0,"IX","B",799.641,.01)

"^DD",799.6,799.641,0,"NM","ERROR")

"^DD",799.6,799.641,0,"UP")
799.64
"^DD",799.6,799.641,.01,0)
ERROR^MP798.4'X^RORDATA(798.4,^0;1^S:$D(X) DINUM=X
"^DD",799.6,799.641,.01,1,0)
^.1
"^DD",799.6,799.641,.01,1,1,0)
799.641^B
"^DD",799.6,799.641,.01,1,1,1)
S ^RORDATA(799.6,DA(2),4,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",799.6,799.641,.01,1,1,2)
K ^RORDATA(799.6,DA(2),4,DA(1),1,"B",$E(X,1,30),DA)
"^DD",799.6,799.641,.01,8.5)
@
"^DD",799.6,799.641,.01,9)
@
"^DD",799.6,799.641,.01,"DT")
3060122
"^DIC",799.33,799.33,0)
ROR DATA AREA^799.33
"^DIC",799.33,799.33,0,"GL")
^ROR(799.33,
"^DIC",799.33,799.33,"%",0)
^1.005^^0
"^DIC",799.33,799.33,"%D",0)
^^11^11^3060131^
"^DIC",799.33,799.33,"%D",1,0)
THIS FILE MUST NOT BE MODIFIED LOCALLY! ONLY 
"^DIC",799.33,799.33,"%D",2,0)
AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN EDIT
"^DIC",799.33,799.33,"%D",3,0)
THIS FILE!
"^DIC",799.33,799.33,"%D",4,0)
 
"^DIC",799.33,799.33,"%D",5,0)
The ROR DATA AREA file stores codes and names of
"^DIC",799.33,799.33,"%D",6,0)
the data areas referenced by the DATA AREA (the
"^DIC",799.33,799.33,"%D",7,0)
ROR HISTORICAL DATA EXTRACTION file) and the EVENT
"^DIC",799.33,799.33,"%D",8,0)
(the ROR PATIENT EVENTS file) multiples.
"^DIC",799.33,799.33,"%D",9,0)
 
"^DIC",799.33,799.33,"%D",10,0)
DO NOT EDIT OR DELETE RECORDS FROM THIS FILE IF
"^DIC",799.33,799.33,"%D",11,0)
THEY HAVE BEEN DISTRIBUTED TO THE SITES ALREADY!
"^DIC",799.33,"B","ROR DATA AREA",799.33)

"^DIC",799.6,799.6,0)
ROR HISTORICAL DATA EXTRACTION^799.6
"^DIC",799.6,799.6,0,"GL")
^RORDATA(799.6,
"^DIC",799.6,799.6,"%",0)
^1.005^^0
"^DIC",799.6,799.6,"%D",0)
^^9^9^3051031^
"^DIC",799.6,799.6,"%D",1,0)
Records of this file store parameters of the 
"^DIC",799.6,799.6,"%D",2,0)
historical data extractions (backpulls) performed
"^DIC",799.6,799.6,"%D",3,0)
on the registries and reflect status of these data
"^DIC",799.6,799.6,"%D",4,0)
extractions.
"^DIC",799.6,799.6,"%D",5,0)
 
"^DIC",799.6,799.6,"%D",6,0)
Records of the file are uniquely identified by the
"^DIC",799.6,799.6,"%D",7,0)
historical data extraction name (the "A" primary
"^DIC",799.6,799.6,"%D",8,0)
key and the uniqueness index "B" are used for that
"^DIC",799.6,799.6,"%D",9,0)
purpose).
"^DIC",799.6,"B","ROR HISTORICAL DATA EXTRACTION",799.6)

"BLD",7615,6)
^14
**END**
**END**
