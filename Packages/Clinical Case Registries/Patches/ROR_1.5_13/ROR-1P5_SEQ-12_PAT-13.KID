Released ROR*1.5*13 SEQ #12
Extracted from mail message
**KIDS**:ROR*1.5*13^

**INSTALL NAME**
ROR*1.5*13
"BLD",8121,0)
ROR*1.5*13^CLINICAL CASE REGISTRIES^0^3101220^y
"BLD",8121,4,0)
^9.64PA^799.6^3
"BLD",8121,4,799.33,0)
799.33
"BLD",8121,4,799.33,222)
n^n^f^^n^^y^m^n
"BLD",8121,4,799.33,224)
I $P($G(^ROR(799.33,Y,0)),U,1)="Non-VA Meds"
"BLD",8121,4,799.6,0)
799.6
"BLD",8121,4,799.6,222)
n^n^f^^n^^y^m^n
"BLD",8121,4,799.6,224)
I $P($G(^RORDATA(799.6,Y,0)),U,1)="NON-VA MEDS"
"BLD",8121,4,8994,0)
8994
"BLD",8121,4,8994,222)
n^n^f^^n^^y^m^n
"BLD",8121,4,8994,224)
I $P($G(^XWB(8994,Y,0)),U,1)="ROR GET M VERSION"
"BLD",8121,4,"B",799.33,799.33)

"BLD",8121,4,"B",799.6,799.6)

"BLD",8121,4,"B",8994,8994)

"BLD",8121,6)
2^
"BLD",8121,6.3)
27
"BLD",8121,"INID")
^n
"BLD",8121,"INIT")
RORP013
"BLD",8121,"KRN",0)
^9.67PA^779.2^20
"BLD",8121,"KRN",.4,0)
.4
"BLD",8121,"KRN",.401,0)
.401
"BLD",8121,"KRN",.402,0)
.402
"BLD",8121,"KRN",.403,0)
.403
"BLD",8121,"KRN",.5,0)
.5
"BLD",8121,"KRN",.84,0)
.84
"BLD",8121,"KRN",.84,"NM",0)
^9.68A^9^9
"BLD",8121,"KRN",.84,"NM",1,0)
7981999.001^^0
"BLD",8121,"KRN",.84,"NM",2,0)
7981011.001^^0
"BLD",8121,"KRN",.84,"NM",3,0)
7981011.002^^0
"BLD",8121,"KRN",.84,"NM",4,0)
7981018.001^^0
"BLD",8121,"KRN",.84,"NM",5,0)
7981018.002^^0
"BLD",8121,"KRN",.84,"NM",6,0)
7981019.001^^0
"BLD",8121,"KRN",.84,"NM",7,0)
7981019.002^^0
"BLD",8121,"KRN",.84,"NM",8,0)
7981020.001^^0
"BLD",8121,"KRN",.84,"NM",9,0)
7981020.002^^0
"BLD",8121,"KRN",.84,"NM","B",7981011.001,2)

"BLD",8121,"KRN",.84,"NM","B",7981011.002,3)

"BLD",8121,"KRN",.84,"NM","B",7981018.001,4)

"BLD",8121,"KRN",.84,"NM","B",7981018.002,5)

"BLD",8121,"KRN",.84,"NM","B",7981019.001,6)

"BLD",8121,"KRN",.84,"NM","B",7981019.002,7)

"BLD",8121,"KRN",.84,"NM","B",7981020.001,8)

"BLD",8121,"KRN",.84,"NM","B",7981020.002,9)

"BLD",8121,"KRN",.84,"NM","B",7981999.001,1)

"BLD",8121,"KRN",3.6,0)
3.6
"BLD",8121,"KRN",3.8,0)
3.8
"BLD",8121,"KRN",9.2,0)
9.2
"BLD",8121,"KRN",9.8,0)
9.8
"BLD",8121,"KRN",9.8,"NM",0)
^9.68A^29^26
"BLD",8121,"KRN",9.8,"NM",2,0)
RORXU001^^0^B64898182
"BLD",8121,"KRN",9.8,"NM",3,0)
RORXU002^^0^B111065586
"BLD",8121,"KRN",9.8,"NM",5,0)
RORX003^^0^B37325159
"BLD",8121,"KRN",9.8,"NM",6,0)
RORX004^^0^B25410396
"BLD",8121,"KRN",9.8,"NM",8,0)
RORUTL15^^0^B55128247
"BLD",8121,"KRN",9.8,"NM",9,0)
RORX016A^^0^B14087578
"BLD",8121,"KRN",9.8,"NM",10,0)
RORXU006^^0^B37916255
"BLD",8121,"KRN",9.8,"NM",11,0)
RORX005A^^0^B38542920
"BLD",8121,"KRN",9.8,"NM",12,0)
RORX006A^^0^B33446739
"BLD",8121,"KRN",9.8,"NM",13,0)
RORX007A^^0^B25232646
"BLD",8121,"KRN",9.8,"NM",14,0)
RORX008A^^0^B41054061
"BLD",8121,"KRN",9.8,"NM",15,0)
RORX009A^^0^B78980793
"BLD",8121,"KRN",9.8,"NM",16,0)
RORX010^^0^B59198848
"BLD",8121,"KRN",9.8,"NM",17,0)
RORX011^^0^B97364438
"BLD",8121,"KRN",9.8,"NM",18,0)
RORX012A^^0^B86805561
"BLD",8121,"KRN",9.8,"NM",19,0)
RORX013A^^0^B66335578
"BLD",8121,"KRN",9.8,"NM",20,0)
RORX014A^^0^B41146323
"BLD",8121,"KRN",9.8,"NM",21,0)
RORX015A^^0^B92384089
"BLD",8121,"KRN",9.8,"NM",22,0)
RORX018^^0^B163618513
"BLD",8121,"KRN",9.8,"NM",23,0)
RORX019^^0^B84618518
"BLD",8121,"KRN",9.8,"NM",24,0)
RORX020^^0^B219381178
"BLD",8121,"KRN",9.8,"NM",25,0)
RORUTL11^^0^B3337131
"BLD",8121,"KRN",9.8,"NM",26,0)
RORHL20^^0^B32758801
"BLD",8121,"KRN",9.8,"NM",27,0)
ROREXT02^^0^B43965789
"BLD",8121,"KRN",9.8,"NM",28,0)
RORX019A^^0^B87729688
"BLD",8121,"KRN",9.8,"NM",29,0)
RORP013^^0^B15779952
"BLD",8121,"KRN",9.8,"NM","B","ROREXT02",27)

"BLD",8121,"KRN",9.8,"NM","B","RORHL20",26)

"BLD",8121,"KRN",9.8,"NM","B","RORP013",29)

"BLD",8121,"KRN",9.8,"NM","B","RORUTL11",25)

"BLD",8121,"KRN",9.8,"NM","B","RORUTL15",8)

"BLD",8121,"KRN",9.8,"NM","B","RORX003",5)

"BLD",8121,"KRN",9.8,"NM","B","RORX004",6)

"BLD",8121,"KRN",9.8,"NM","B","RORX005A",11)

"BLD",8121,"KRN",9.8,"NM","B","RORX006A",12)

"BLD",8121,"KRN",9.8,"NM","B","RORX007A",13)

"BLD",8121,"KRN",9.8,"NM","B","RORX008A",14)

"BLD",8121,"KRN",9.8,"NM","B","RORX009A",15)

"BLD",8121,"KRN",9.8,"NM","B","RORX010",16)

"BLD",8121,"KRN",9.8,"NM","B","RORX011",17)

"BLD",8121,"KRN",9.8,"NM","B","RORX012A",18)

"BLD",8121,"KRN",9.8,"NM","B","RORX013A",19)

"BLD",8121,"KRN",9.8,"NM","B","RORX014A",20)

"BLD",8121,"KRN",9.8,"NM","B","RORX015A",21)

"BLD",8121,"KRN",9.8,"NM","B","RORX016A",9)

"BLD",8121,"KRN",9.8,"NM","B","RORX018",22)

"BLD",8121,"KRN",9.8,"NM","B","RORX019",23)

"BLD",8121,"KRN",9.8,"NM","B","RORX019A",28)

"BLD",8121,"KRN",9.8,"NM","B","RORX020",24)

"BLD",8121,"KRN",9.8,"NM","B","RORXU001",2)

"BLD",8121,"KRN",9.8,"NM","B","RORXU002",3)

"BLD",8121,"KRN",9.8,"NM","B","RORXU006",10)

"BLD",8121,"KRN",19,0)
19
"BLD",8121,"KRN",19,"NM",0)
^9.68A^^0
"BLD",8121,"KRN",19.1,0)
19.1
"BLD",8121,"KRN",101,0)
101
"BLD",8121,"KRN",409.61,0)
409.61
"BLD",8121,"KRN",771,0)
771
"BLD",8121,"KRN",779.2,0)
779.2
"BLD",8121,"KRN",870,0)
870
"BLD",8121,"KRN",8989.51,0)
8989.51
"BLD",8121,"KRN",8989.52,0)
8989.52
"BLD",8121,"KRN",8994,0)
8994
"BLD",8121,"KRN",8994,"NM",0)
^9.68A^1^1
"BLD",8121,"KRN",8994,"NM",1,0)
ROR GET M VERSION^^0
"BLD",8121,"KRN",8994,"NM","B","ROR GET M VERSION",1)

"BLD",8121,"KRN","B",.4,.4)

"BLD",8121,"KRN","B",.401,.401)

"BLD",8121,"KRN","B",.402,.402)

"BLD",8121,"KRN","B",.403,.403)

"BLD",8121,"KRN","B",.5,.5)

"BLD",8121,"KRN","B",.84,.84)

"BLD",8121,"KRN","B",3.6,3.6)

"BLD",8121,"KRN","B",3.8,3.8)

"BLD",8121,"KRN","B",9.2,9.2)

"BLD",8121,"KRN","B",9.8,9.8)

"BLD",8121,"KRN","B",19,19)

"BLD",8121,"KRN","B",19.1,19.1)

"BLD",8121,"KRN","B",101,101)

"BLD",8121,"KRN","B",409.61,409.61)

"BLD",8121,"KRN","B",771,771)

"BLD",8121,"KRN","B",779.2,779.2)

"BLD",8121,"KRN","B",870,870)

"BLD",8121,"KRN","B",8989.51,8989.51)

"BLD",8121,"KRN","B",8989.52,8989.52)

"BLD",8121,"KRN","B",8994,8994)

"BLD",8121,"QUES",0)
^9.62^^
"BLD",8121,"REQB",0)
^9.611^1^1
"BLD",8121,"REQB",1,0)
ROR*1.5*10^2
"BLD",8121,"REQB","B","ROR*1.5*10",1)

"DATA",799.33,19,0)
Non-VA Meds
"DATA",799.6,1,0)
NON-VA MEDS^1^2850101^3101220^^5^3101220^^1
"DATA",799.6,1,1,0)
^799.61P^2^2
"DATA",799.6,1,1,1,0)
20
"DATA",799.6,1,1,2,0)
19
"DATA",799.6,1,3,0)
^799.63^2^2
"DATA",799.6,1,3,1,0)
VA HIV^3100922.1015
"DATA",799.6,1,3,2,0)
VA HEPC^3100922.1015
"DATA",8994,2835,0)
ROR GET M VERSION^VERSRV^RORUTL11^1^R
"DATA",8994,2835,1,0)
^^3^3^3101220^
"DATA",8994,2835,1,1,0)
Used by CCR to return an agreed-upon version number to the GUI 
"DATA",8994,2835,1,2,0)
application.  The GUI will analyze the version number and display a 
"DATA",8994,2835,1,3,0)
message if the client and server are out of sync.
"FIA",799.33)
ROR DATA AREA
"FIA",799.33,0)
^ROR(799.33,
"FIA",799.33,0,0)
799.33
"FIA",799.33,0,1)
n^n^f^^n^^y^m^n
"FIA",799.33,0,10)

"FIA",799.33,0,11)
I $P($G(^ROR(799.33,Y,0)),U,1)="Non-VA Meds"
"FIA",799.33,0,"RLRO")

"FIA",799.33,0,"VR")
1.5^ROR
"FIA",799.33,799.33)
0
"FIA",799.6)
ROR HISTORICAL DATA EXTRACTION
"FIA",799.6,0)
^RORDATA(799.6,
"FIA",799.6,0,0)
799.6
"FIA",799.6,0,1)
n^n^f^^n^^y^m^n
"FIA",799.6,0,10)

"FIA",799.6,0,11)
I $P($G(^RORDATA(799.6,Y,0)),U,1)="NON-VA MEDS"
"FIA",799.6,0,"RLRO")

"FIA",799.6,0,"VR")
1.5^ROR
"FIA",799.6,799.6)
0
"FIA",799.6,799.61)
0
"FIA",799.6,799.63)
0
"FIA",799.6,799.64)
0
"FIA",799.6,799.641)
0
"FIA",8994)
REMOTE PROCEDURE
"FIA",8994,0)
^XWB(8994,
"FIA",8994,0,0)
8994
"FIA",8994,0,1)
n^n^f^^n^^y^m^n
"FIA",8994,0,10)

"FIA",8994,0,11)
I $P($G(^XWB(8994,Y,0)),U,1)="ROR GET M VERSION"
"FIA",8994,0,"RLRO")

"FIA",8994,0,"VR")
1.5^ROR
"FIA",8994,8994)
0
"FIA",8994,8994.01)
0
"FIA",8994,8994.02)
0
"FIA",8994,8994.021)
0
"FIA",8994,8994.03)
0
"INIT")
RORP013
"IX",799.6,799.6,"ADNAUTO",0)
799.6^ADNAUTO^Activation Date & Name for automatic backpulls.^R^^R^IR^I^799.6^^^^^S
"IX",799.6,799.6,"ADNAUTO",.1,0)
^^6^6^3051031^
"IX",799.6,799.6,"ADNAUTO",.1,1,0)
This index references parameters of those
"IX",799.6,799.6,"ADNAUTO",.1,2,0)
automatic historical data extractions (TYPE =
"IX",799.6,799.6,"ADNAUTO",.1,3,0)
"Auto (HL7 messages)") that are active (ACTIVATION
"IX",799.6,799.6,"ADNAUTO",.1,4,0)
DATE > 0) but have not been completed yet (some
"IX",799.6,799.6,"ADNAUTO",.1,5,0)
records of the REGISTRY NAME multiple have no
"IX",799.6,799.6,"ADNAUTO",.1,6,0)
value in the COMPLETION DATE/TIME field).
"IX",799.6,799.6,"ADNAUTO",1)
S ^RORDATA(799.6,"ADNAUTO",X(1),$E(X(2),1,30),DA)=""
"IX",799.6,799.6,"ADNAUTO",1.4)
S X=(X(3)=1)&(X(4)>0)&($D(^RORDATA(799.6,DA,3,"ANC"))>1)
"IX",799.6,799.6,"ADNAUTO",2)
K ^RORDATA(799.6,"ADNAUTO",X(1),$E(X(2),1,30),DA)
"IX",799.6,799.6,"ADNAUTO",2.5)
K ^RORDATA(799.6,"ADNAUTO")
"IX",799.6,799.6,"ADNAUTO",11.1,0)
^.114IA^4^4
"IX",799.6,799.6,"ADNAUTO",11.1,1,0)
1^F^799.6^.07^^1^F
"IX",799.6,799.6,"ADNAUTO",11.1,2,0)
2^F^799.6^.01^30^2^F
"IX",799.6,799.6,"ADNAUTO",11.1,3,0)
3^F^799.6^.02^^^F
"IX",799.6,799.6,"ADNAUTO",11.1,4,0)
4^F^799.6^.07^^^F
"IX",799.6,799.6,"B",0)
799.6^B^Uniqueness Index for Key 'A' of File #799.6^R^^F^IR^I^799.6^^^^^LS
"IX",799.6,799.6,"B",1)
S ^RORDATA(799.6,"B",X,DA)=""
"IX",799.6,799.6,"B",2)
K ^RORDATA(799.6,"B",X,DA)
"IX",799.6,799.6,"B",2.5)
K ^RORDATA(799.6,"B")
"IX",799.6,799.6,"B",11.1,0)
^.114IA^1^1
"IX",799.6,799.6,"B",11.1,1,0)
1^F^799.6^.01^^1
"IX",799.6,799.61,"B",0)
799.61^B^Uniqueness Index for Key 'A' of Subfile #799.61^R^^F^IR^I^799.61^^^^^LS
"IX",799.6,799.61,"B",1)
S ^RORDATA(799.6,DA(1),1,"B",X,DA)=""
"IX",799.6,799.61,"B",2)
K ^RORDATA(799.6,DA(1),1,"B",X,DA)
"IX",799.6,799.61,"B",2.5)
K ^RORDATA(799.6,DA(1),1,"B")
"IX",799.6,799.61,"B",11.1,0)
^.114IA^1^1
"IX",799.6,799.61,"B",11.1,1,0)
1^F^799.61^.01^^1
"IX",799.6,799.63,"ANC",0)
799.63^ANC^Not completed registries^MU^^R^IR^I^799.63^^^^^S
"IX",799.6,799.63,"ANC",1)
D ANC7996^RORDD01(.DA,X(1),1)
"IX",799.6,799.63,"ANC",1.4)
S X=(X(2)'>0)
"IX",799.6,799.63,"ANC",2)
D ANC7996^RORDD01(.DA,X(1),0)
"IX",799.6,799.63,"ANC",2.5)
K ^RORDATA(799.6,DA(1),3,"ANC")
"IX",799.6,799.63,"ANC",11.1,0)
^.114IA^2^2
"IX",799.6,799.63,"ANC",11.1,1,0)
1^F^799.63^.01^30^1^F
"IX",799.6,799.63,"ANC",11.1,2,0)
2^F^799.63^.02^^^F
"IX",799.6,799.63,"B",0)
799.63^B^Uniqueness Index for Key 'A' of Subfile #799.63^R^^F^IR^I^799.63^^^^^LS
"IX",799.6,799.63,"B",1)
S ^RORDATA(799.6,DA(1),3,"B",X,DA)=""
"IX",799.6,799.63,"B",2)
K ^RORDATA(799.6,DA(1),3,"B",X,DA)
"IX",799.6,799.63,"B",2.5)
K ^RORDATA(799.6,DA(1),3,"B")
"IX",799.6,799.63,"B",11.1,0)
^.114IA^1^1
"IX",799.6,799.63,"B",11.1,1,0)
1^F^799.63^.01^^1
"IX",799.6,799.64,"ANC",0)
799.64^ANC^Not completed tasks^R^^R^IR^I^799.64^^^^^S
"IX",799.6,799.64,"ANC",1)
S ^RORDATA(799.6,DA(1),4,"ANC",X(1),DA)=""
"IX",799.6,799.64,"ANC",1.4)
S X=(X(2)'=3)
"IX",799.6,799.64,"ANC",2)
K ^RORDATA(799.6,DA(1),4,"ANC",X(1),DA)
"IX",799.6,799.64,"ANC",2.5)
K ^RORDATA(799.6,DA(1),4,"ANC")
"IX",799.6,799.64,"ANC",11.1,0)
^.114IA^2^2
"IX",799.6,799.64,"ANC",11.1,1,0)
1^F^799.64^.01^^1^F
"IX",799.6,799.64,"ANC",11.1,1,3)

"IX",799.6,799.64,"ANC",11.1,2,0)
2^F^799.64^.03^^^F
"IX",799.6,799.64,"ANC",11.1,2,3)

"IX",799.6,799.64,"B",0)
799.64^B^Uniqueness Index for Key 'A' of Subfile #799.64^R^^F^IR^I^799.64^^^^^LS
"IX",799.6,799.64,"B",1)
S ^RORDATA(799.6,DA(1),4,"B",X,DA)=""
"IX",799.6,799.64,"B",2)
K ^RORDATA(799.6,DA(1),4,"B",X,DA)
"IX",799.6,799.64,"B",2.5)
K ^RORDATA(799.6,DA(1),4,"B")
"IX",799.6,799.64,"B",11.1,0)
^.114IA^1^1
"IX",799.6,799.64,"B",11.1,1,0)
1^F^799.64^.01^^1
"KEY",799.6,799.6,"A",0)
799.6^A^S^667
"KEY",799.6,799.6,"A",2,0)
^.312IA^1^1
"KEY",799.6,799.6,"A",2,1,0)
.01^799.6^1
"KEY",799.6,799.61,"A",0)
799.61^A^S^668
"KEY",799.6,799.61,"A",2,0)
^.312IA^1^1
"KEY",799.6,799.61,"A",2,1,0)
.01^799.61^1
"KEY",799.6,799.63,"A",0)
799.63^A^S^670
"KEY",799.6,799.63,"A",2,0)
^.312IA^1^1
"KEY",799.6,799.63,"A",2,1,0)
.01^799.63^1
"KEY",799.6,799.64,"A",0)
799.64^A^S^672
"KEY",799.6,799.64,"A",2,0)
^.312IA^1^1
"KEY",799.6,799.64,"A",2,1,0)
.01^799.64^1
"KEYPTR",799.6,799.6,"A")
799.6^B
"KEYPTR",799.6,799.61,"A")
799.61^B
"KEYPTR",799.6,799.63,"A")
799.63^B
"KEYPTR",799.6,799.64,"A")
799.64^B
"KRN",.84,7981011.001,-1)
0^2
"KRN",.84,7981011.001,0)
7981011.001^2^^CLINICAL CASE REGISTRIES^Patient Medication History (HTML)
"KRN",.84,7981011.001,2,0)
^^161^161^3100406^
"KRN",.84,7981011.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981011.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981011.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981011.001,2,4,0)
>
"KRN",.84,7981011.001,2,5,0)
 
"KRN",.84,7981011.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   --> 
"KRN",.84,7981011.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981011.001,2,8,0)
<xsl:import  href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981011.001,2,9,0)
<xsl:include href="template://report/996/1"/>  <!-- Pharmacy -->
"KRN",.84,7981011.001,2,10,0)
 
"KRN",.84,7981011.001,2,11,0)
<xsl:template match="/">
"KRN",.84,7981011.001,2,12,0)
 <html>
"KRN",.84,7981011.001,2,13,0)
  <head>
"KRN",.84,7981011.001,2,14,0)
   <title>Patient Medication History</title>
"KRN",.84,7981011.001,2,15,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981011.001,2,16,0)
  </head>
"KRN",.84,7981011.001,2,17,0)
  <body>
"KRN",.84,7981011.001,2,18,0)
   <h1>Patient Medication History</h1>
"KRN",.84,7981011.001,2,19,0)
   <xsl:call-template name="ReportHeader"/> 
"KRN",.84,7981011.001,2,20,0)
   <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981011.001,2,21,0)
  </body>
"KRN",.84,7981011.001,2,22,0)
 </html>
"KRN",.84,7981011.001,2,23,0)
</xsl:template>
"KRN",.84,7981011.001,2,24,0)
 
"KRN",.84,7981011.001,2,25,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981011.001,2,26,0)
 <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981011.001,2,27,0)
 <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981011.001,2,28,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981011.001,2,29,0)
 <div>
"KRN",.84,7981011.001,2,30,0)
  <h2><xsl:value-of select="NAME"/></h2>
"KRN",.84,7981011.001,2,31,0)
  <table width="70%" cellpadding="5" cellspacing="0">
"KRN",.84,7981011.001,2,32,0)
   <thead>
"KRN",.84,7981011.001,2,33,0)
    <tr>
"KRN",.84,7981011.001,2,34,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,35,0)
      <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981011.001,2,36,0)
      <xsl:with-param name="title" select="'#'"/>
"KRN",.84,7981011.001,2,37,0)
      <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981011.001,2,38,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,39,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,40,0)
      <xsl:with-param name="sort" select="'PATIENTS=NAME'"/>
"KRN",.84,7981011.001,2,41,0)
      <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981011.001,2,42,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,43,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,44,0)
      <xsl:with-param name="sort" select="'PATIENTS=LAST4'"/>
"KRN",.84,7981011.001,2,45,0)
      <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981011.001,2,46,0)
      <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981011.001,2,47,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,48,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,49,0)
      <xsl:with-param name="sort" select="'PATIENTS=DOB'"/>
"KRN",.84,7981011.001,2,50,0)
      <xsl:with-param name="title" select="'Date of Birth'"/>
"KRN",.84,7981011.001,2,51,0)
      <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981011.001,2,52,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,53,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,54,0)
      <xsl:with-param name="sort" select="'PATIENTS=AGE'"/>
"KRN",.84,7981011.001,2,55,0)
      <xsl:with-param name="title" select="'Age'"/>
"KRN",.84,7981011.001,2,56,0)
      <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981011.001,2,57,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,58,0)
     <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,59,0)
      <xsl:with-param name="sort" select="'PATIENTS=DOD'"/>
"KRN",.84,7981011.001,2,60,0)
      <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981011.001,2,61,0)
      <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981011.001,2,62,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,63,0)
    </tr>
"KRN",.84,7981011.001,2,64,0)
   </thead>
"KRN",.84,7981011.001,2,65,0)
   <tbody>
"KRN",.84,7981011.001,2,66,0)
    <tr>
"KRN",.84,7981011.001,2,67,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,68,0)
      <xsl:with-param name="value" select="position()"/>
"KRN",.84,7981011.001,2,69,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,70,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,71,0)
      <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981011.001,2,72,0)
      <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981011.001,2,73,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,74,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,75,0)
      <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981011.001,2,76,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,77,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,78,0)
      <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981011.001,2,79,0)
      <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.001,2,80,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,81,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,82,0)
      <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981011.001,2,83,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,84,0)
     <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,85,0)
      <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981011.001,2,86,0)
      <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.001,2,87,0)
     </xsl:call-template>
"KRN",.84,7981011.001,2,88,0)
    </tr>
"KRN",.84,7981011.001,2,89,0)
   </tbody>
"KRN",.84,7981011.001,2,90,0)
  </table>
"KRN",.84,7981011.001,2,91,0)
  <h3>Drug History</h3>
"KRN",.84,7981011.001,2,92,0)
  <xsl:apply-templates select="PTRXL"/>
"KRN",.84,7981011.001,2,93,0)
 </div>
"KRN",.84,7981011.001,2,94,0)
</xsl:template>
"KRN",.84,7981011.001,2,95,0)
 
"KRN",.84,7981011.001,2,96,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981011.001,2,97,0)
 
"KRN",.84,7981011.001,2,98,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981011.001,2,99,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,100,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981011.001,2,101,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981011.001,2,102,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,103,0)
</xsl:template>
"KRN",.84,7981011.001,2,104,0)
 
"KRN",.84,7981011.001,2,105,0)
<xsl:template match="COLUMN[@NAME='DAYSPLY']">
"KRN",.84,7981011.001,2,106,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,107,0)
  <xsl:with-param name="title" select="'Days Supply'"/>
"KRN",.84,7981011.001,2,108,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981011.001,2,109,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,110,0)
</xsl:template>
"KRN",.84,7981011.001,2,111,0)
 
"KRN",.84,7981011.001,2,112,0)
<xsl:template match="COLUMN[@NAME='FILLTYPE']">
"KRN",.84,7981011.001,2,113,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,114,0)
  <xsl:with-param name="title" select="'Fill Type'"/>
"KRN",.84,7981011.001,2,115,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981011.001,2,116,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,117,0)
</xsl:template>
"KRN",.84,7981011.001,2,118,0)
 
"KRN",.84,7981011.001,2,119,0)
<xsl:template match="COLUMN[@NAME='REFILLS']">
"KRN",.84,7981011.001,2,120,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,121,0)
  <xsl:with-param name="title" select="'Refills Remaining'"/>
"KRN",.84,7981011.001,2,122,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981011.001,2,123,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,124,0)
</xsl:template>
"KRN",.84,7981011.001,2,125,0)
 
"KRN",.84,7981011.001,2,126,0)
<xsl:template match="COLUMN[@NAME='GENERIC']">
"KRN",.84,7981011.001,2,127,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,128,0)
  <xsl:with-param name="title" select="'Generic Name'"/>
"KRN",.84,7981011.001,2,129,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,130,0)
</xsl:template>
"KRN",.84,7981011.001,2,131,0)
 
"KRN",.84,7981011.001,2,132,0)
<xsl:template match="COLUMN[@NAME='ORDER']">
"KRN",.84,7981011.001,2,133,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,134,0)
  <xsl:with-param name="title" select="'Rx#'"/>
"KRN",.84,7981011.001,2,135,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981011.001,2,136,0)
  <xsl:with-param name="sort" select="'PTRXL=ORDER'"/>
"KRN",.84,7981011.001,2,137,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,138,0)
</xsl:template>
"KRN",.84,7981011.001,2,139,0)
 
"KRN",.84,7981011.001,2,140,0)
<xsl:template match="COLUMN[@NAME='TYPE']">
"KRN",.84,7981011.001,2,141,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.001,2,142,0)
  <xsl:with-param name="title" select="'Type'"/>
"KRN",.84,7981011.001,2,143,0)
  <xsl:with-param name="width" select="'5%'"/>
"KRN",.84,7981011.001,2,144,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,145,0)
</xsl:template>
"KRN",.84,7981011.001,2,146,0)
 
"KRN",.84,7981011.001,2,147,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981011.001,2,148,0)
 
"KRN",.84,7981011.001,2,149,0)
<xsl:template match="DRUG/DATE">
"KRN",.84,7981011.001,2,150,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,151,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.001,2,152,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,153,0)
</xsl:template>
"KRN",.84,7981011.001,2,154,0)
 
"KRN",.84,7981011.001,2,155,0)
<xsl:template match="DRUG/GENERIC">
"KRN",.84,7981011.001,2,156,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.001,2,157,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981011.001,2,158,0)
 </xsl:call-template>
"KRN",.84,7981011.001,2,159,0)
</xsl:template>
"KRN",.84,7981011.001,2,160,0)
 
"KRN",.84,7981011.001,2,161,0)
</xsl:stylesheet>
"KRN",.84,7981011.002,-1)
0^3
"KRN",.84,7981011.002,0)
7981011.002^2^^CLINICAL CASE REGISTRIES^Patient Medication History (CSV)
"KRN",.84,7981011.002,2,0)
^^92^92^3100407^
"KRN",.84,7981011.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981011.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981011.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981011.002,2,4,0)
>
"KRN",.84,7981011.002,2,5,0)
 
"KRN",.84,7981011.002,2,6,0)
<xsl:import  href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981011.002,2,7,0)
<xsl:include href="template://report/997/2"/>  <!-- Patients -->
"KRN",.84,7981011.002,2,8,0)
 
"KRN",.84,7981011.002,2,9,0)
<xsl:template match="/">
"KRN",.84,7981011.002,2,10,0)
 <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981011.002,2,11,0)
</xsl:template>
"KRN",.84,7981011.002,2,12,0)
 
"KRN",.84,7981011.002,2,13,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981011.002,2,14,0)
 <xsl:text>Patient Medication History</xsl:text>
"KRN",.84,7981011.002,2,15,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981011.002,2,16,0)
 <xsl:text>Patient Name,SSN,Date of Birth,Age,Date of Death</xsl:text>
"KRN",.84,7981011.002,2,17,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981011.002,2,18,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,19,0)
  <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981011.002,2,20,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,21,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,22,0)
  <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981011.002,2,23,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,24,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,25,0)
  <xsl:with-param name="value" select="DOB"/>
"KRN",.84,7981011.002,2,26,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.002,2,27,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,28,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,29,0)
  <xsl:with-param name="value" select="AGE"/>
"KRN",.84,7981011.002,2,30,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,31,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,32,0)
  <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981011.002,2,33,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.002,2,34,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,35,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981011.002,2,36,0)
 <xsl:apply-templates select="PTRXL"/>
"KRN",.84,7981011.002,2,37,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981011.002,2,38,0)
</xsl:template>
"KRN",.84,7981011.002,2,39,0)
 
"KRN",.84,7981011.002,2,40,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981011.002,2,41,0)
 
"KRN",.84,7981011.002,2,42,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981011.002,2,43,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,44,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981011.002,2,45,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,46,0)
</xsl:template>
"KRN",.84,7981011.002,2,47,0)
 
"KRN",.84,7981011.002,2,48,0)
<xsl:template match="COLUMN[@NAME='DAYSPLY']">
"KRN",.84,7981011.002,2,49,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,50,0)
  <xsl:with-param name="title" select="'Days Supply'"/>
"KRN",.84,7981011.002,2,51,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,52,0)
</xsl:template>
"KRN",.84,7981011.002,2,53,0)
 
"KRN",.84,7981011.002,2,54,0)
<xsl:template match="COLUMN[@NAME='FILLTYPE']">
"KRN",.84,7981011.002,2,55,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,56,0)
  <xsl:with-param name="title" select="'Fill Type'"/>
"KRN",.84,7981011.002,2,57,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,58,0)
</xsl:template>
"KRN",.84,7981011.002,2,59,0)
 
"KRN",.84,7981011.002,2,60,0)
<xsl:template match="COLUMN[@NAME='REFILLS']">
"KRN",.84,7981011.002,2,61,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,62,0)
  <xsl:with-param name="title" select="'Refills Remaining'"/>
"KRN",.84,7981011.002,2,63,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,64,0)
</xsl:template>
"KRN",.84,7981011.002,2,65,0)
 
"KRN",.84,7981011.002,2,66,0)
<xsl:template match="COLUMN[@NAME='GENERIC']">
"KRN",.84,7981011.002,2,67,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,68,0)
  <xsl:with-param name="title" select="'Generic Name'"/>
"KRN",.84,7981011.002,2,69,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,70,0)
</xsl:template>
"KRN",.84,7981011.002,2,71,0)
 
"KRN",.84,7981011.002,2,72,0)
<xsl:template match="COLUMN[@NAME='ORDER']">
"KRN",.84,7981011.002,2,73,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,74,0)
  <xsl:with-param name="title" select="'Rx#'"/>
"KRN",.84,7981011.002,2,75,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,76,0)
</xsl:template>
"KRN",.84,7981011.002,2,77,0)
 
"KRN",.84,7981011.002,2,78,0)
<xsl:template match="COLUMN[@NAME='TYPE']">
"KRN",.84,7981011.002,2,79,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981011.002,2,80,0)
  <xsl:with-param name="title" select="'Type'"/>
"KRN",.84,7981011.002,2,81,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,82,0)
</xsl:template>
"KRN",.84,7981011.002,2,83,0)
 
"KRN",.84,7981011.002,2,84,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981011.002,2,85,0)
 
"KRN",.84,7981011.002,2,86,0)
<xsl:template match="DRUG/DATE">
"KRN",.84,7981011.002,2,87,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981011.002,2,88,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981011.002,2,89,0)
 </xsl:call-template>
"KRN",.84,7981011.002,2,90,0)
</xsl:template>
"KRN",.84,7981011.002,2,91,0)
 
"KRN",.84,7981011.002,2,92,0)
</xsl:stylesheet>
"KRN",.84,7981018.001,-1)
0^4
"KRN",.84,7981018.001,0)
7981018.001^2^^CLINICAL CASE REGISTRIES^BMI Report by Range (HTML)
"KRN",.84,7981018.001,2,0)
^^132^132^3100518^
"KRN",.84,7981018.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981018.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981018.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981018.001,2,4,0)
 
"KRN",.84,7981018.001,2,5,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981018.001,2,6,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981018.001,2,7,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients --> 
"KRN",.84,7981018.001,2,8,0)
 
"KRN",.84,7981018.001,2,9,0)
<xsl:template match="/">
"KRN",.84,7981018.001,2,10,0)
 <html>
"KRN",.84,7981018.001,2,11,0)
  <head>
"KRN",.84,7981018.001,2,12,0)
   <title>BMI by Range</title>
"KRN",.84,7981018.001,2,13,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981018.001,2,14,0)
  </head>
"KRN",.84,7981018.001,2,15,0)
  <body>
"KRN",.84,7981018.001,2,16,0)
   <h1>BMI by Range</h1>
"KRN",.84,7981018.001,2,17,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981018.001,2,18,0)
    <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981018.001,2,19,0)
     *For this report, height values that are &lt;36 inches or
"KRN",.84,7981018.001,2,20,0)
&gt;96 inches are assumed to be erroneous and are ignored.
"KRN",.84,7981018.001,2,21,0)
    </div>
"KRN",.84,7981018.001,2,22,0)
   <xsl:call-template name="BMIReportSummary"/>
"KRN",.84,7981018.001,2,23,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981018.001,2,24,0)
     <br />
"KRN",.84,7981018.001,2,25,0)
     <!-- The following line changed to fix page break issue in IE 7 -->
"KRN",.84,7981018.001,2,26,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981018.001,2,27,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981018.001,2,28,0)
     <div>
"KRN",.84,7981018.001,2,29,0)
       <xsl:call-template name="MakeScrollable">
"KRN",.84,7981018.001,2,30,0)
         <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981018.001,2,31,0)
       </xsl:call-template>
"KRN",.84,7981018.001,2,32,0)
       <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981018.001,2,33,0)
   </div>
"KRN",.84,7981018.001,2,34,0)
   </xsl:if>
"KRN",.84,7981018.001,2,35,0)
  </body>
"KRN",.84,7981018.001,2,36,0)
 </html>
"KRN",.84,7981018.001,2,37,0)
</xsl:template>
"KRN",.84,7981018.001,2,38,0)
 
"KRN",.84,7981018.001,2,39,0)
<xsl:template name="BMIReportSummary">
"KRN",.84,7981018.001,2,40,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981018.001,2,41,0)
 <table width="45%" cellpadding="5" cellspacing="0">
"KRN",.84,7981018.001,2,42,0)
  <thead>
"KRN",.84,7981018.001,2,43,0)
   <tr>
"KRN",.84,7981018.001,2,44,0)
    <th width="33%">BMI Categories</th>
"KRN",.84,7981018.001,2,45,0)
    <th width="33%">BMI Values</th>
"KRN",.84,7981018.001,2,46,0)
    <th width="33%">Number of Patients</th>
"KRN",.84,7981018.001,2,47,0)
   </tr>
"KRN",.84,7981018.001,2,48,0)
  </thead>
"KRN",.84,7981018.001,2,49,0)
  <tbody>
"KRN",.84,7981018.001,2,50,0)
    <xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981018.001,2,51,0)
    <tr>
"KRN",.84,7981018.001,2,52,0)
      <td class="aLeft"><xsl:value-of select="./DESC"/></td>
"KRN",.84,7981018.001,2,53,0)
      <td><xsl:value-of select="./VALUES"/></td>
"KRN",.84,7981018.001,2,54,0)
      <td><xsl:value-of select="./NP"/></td>
"KRN",.84,7981018.001,2,55,0)
    </tr>
"KRN",.84,7981018.001,2,56,0)
   </xsl:for-each>
"KRN",.84,7981018.001,2,57,0)
  </tbody>
"KRN",.84,7981018.001,2,58,0)
 </table>
"KRN",.84,7981018.001,2,59,0)
</xsl:template>
"KRN",.84,7981018.001,2,60,0)
 
"KRN",.84,7981018.001,2,61,0)
 
"KRN",.84,7981018.001,2,62,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981018.001,2,63,0)
 
"KRN",.84,7981018.001,2,64,0)
<xsl:template match="COLUMN[@NAME='VITAL']">
"KRN",.84,7981018.001,2,65,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981018.001,2,66,0)
  <xsl:with-param name="title" select="'Vital'"/>
"KRN",.84,7981018.001,2,67,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981018.001,2,68,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981018.001,2,69,0)
 </xsl:call-template>
"KRN",.84,7981018.001,2,70,0)
</xsl:template>
"KRN",.84,7981018.001,2,71,0)
 
"KRN",.84,7981018.001,2,72,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981018.001,2,73,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981018.001,2,74,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981018.001,2,75,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981018.001,2,76,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981018.001,2,77,0)
 </xsl:call-template>
"KRN",.84,7981018.001,2,78,0)
</xsl:template>
"KRN",.84,7981018.001,2,79,0)
 
"KRN",.84,7981018.001,2,80,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981018.001,2,81,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981018.001,2,82,0)
  <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981018.001,2,83,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981018.001,2,84,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981018.001,2,85,0)
 </xsl:call-template>
"KRN",.84,7981018.001,2,86,0)
</xsl:template>
"KRN",.84,7981018.001,2,87,0)
 
"KRN",.84,7981018.001,2,88,0)
<xsl:template match="COLUMN[@NAME='BMI']">
"KRN",.84,7981018.001,2,89,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981018.001,2,90,0)
  <xsl:with-param name="sort" select="'PATIENTS=BMI'"/>
"KRN",.84,7981018.001,2,91,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981018.001,2,92,0)
 </xsl:call-template>
"KRN",.84,7981018.001,2,93,0)
</xsl:template>
"KRN",.84,7981018.001,2,94,0)
 
"KRN",.84,7981018.001,2,95,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981018.001,2,96,0)
 
"KRN",.84,7981018.001,2,97,0)
<xsl:template match="PATIENT/BMI">
"KRN",.84,7981018.001,2,98,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981018.001,2,99,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981018.001,2,100,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981018.001,2,101,0)
 </xsl:call-template>
"KRN",.84,7981018.001,2,102,0)
</xsl:template>
"KRN",.84,7981018.001,2,103,0)
 
"KRN",.84,7981018.001,2,104,0)
<xsl:template match="PATIENT/BMIDATA">
"KRN",.84,7981018.001,2,105,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981018.001,2,106,0)
 <td class="aLeft">
"KRN",.84,7981018.001,2,107,0)
   <xsl:text>Height</xsl:text><br/>  
"KRN",.84,7981018.001,2,108,0)
   <xsl:text>Weight</xsl:text>  
"KRN",.84,7981018.001,2,109,0)
 </td>
"KRN",.84,7981018.001,2,110,0)
 <td>
"KRN",.84,7981018.001,2,111,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981018.001,2,112,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.001,2,113,0)
     <xsl:with-param name="value" select="HEIGHT/DATE"/>
"KRN",.84,7981018.001,2,114,0)
     <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981018.001,2,115,0)
   </xsl:call-template><br/>
"KRN",.84,7981018.001,2,116,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981018.001,2,117,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.001,2,118,0)
     <xsl:with-param name="value" select="WEIGHT/DATE"/>
"KRN",.84,7981018.001,2,119,0)
   </xsl:call-template>
"KRN",.84,7981018.001,2,120,0)
 </td>
"KRN",.84,7981018.001,2,121,0)
 <td class="aRight">
"KRN",.84,7981018.001,2,122,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981018.001,2,123,0)
     <xsl:with-param name="value" select="HEIGHT/RESULT"/>
"KRN",.84,7981018.001,2,124,0)
     <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981018.001,2,125,0)
   </xsl:call-template><br/>
"KRN",.84,7981018.001,2,126,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981018.001,2,127,0)
     <xsl:with-param name="value" select="WEIGHT/RESULT"/>
"KRN",.84,7981018.001,2,128,0)
   </xsl:call-template>
"KRN",.84,7981018.001,2,129,0)
 </td>
"KRN",.84,7981018.001,2,130,0)
</xsl:template>
"KRN",.84,7981018.001,2,131,0)
 
"KRN",.84,7981018.001,2,132,0)
</xsl:stylesheet>
"KRN",.84,7981018.002,-1)
0^5
"KRN",.84,7981018.002,0)
7981018.002^2^^CLINICAL CASE REGISTRIES^BMI Report by Range (CSV)
"KRN",.84,7981018.002,2,0)
^^87^87^3100518^
"KRN",.84,7981018.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981018.002,2,2,0)
 <xsl:stylesheet version="1.0"
"KRN",.84,7981018.002,2,3,0)
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981018.002,2,4,0)
 >
"KRN",.84,7981018.002,2,5,0)
 
"KRN",.84,7981018.002,2,6,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981018.002,2,7,0)
 
"KRN",.84,7981018.002,2,8,0)
<xsl:template match="/">
"KRN",.84,7981018.002,2,9,0)
  <xsl:call-template name="BMIReportSummary"/>
"KRN",.84,7981018.002,2,10,0)
  <xsl:text>BMI by Range</xsl:text>
"KRN",.84,7981018.002,2,11,0)
  <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981018.002,2,12,0)
</xsl:template>
"KRN",.84,7981018.002,2,13,0)
 
"KRN",.84,7981018.002,2,14,0)
<xsl:template name="BMIReportSummary">
"KRN",.84,7981018.002,2,15,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981018.002,2,16,0)
 <xsl:text>BMI by Range (Summary)</xsl:text>
"KRN",.84,7981018.002,2,17,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,18,0)
 <xsl:text>BMI Categories</xsl:text>
"KRN",.84,7981018.002,2,19,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,20,0)
 <xsl:text>BMI Values</xsl:text>
"KRN",.84,7981018.002,2,21,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,22,0)
 <xsl:text>Number of Patients</xsl:text>
"KRN",.84,7981018.002,2,23,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,24,0)
 <xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981018.002,2,25,0)
   <xsl:value-of select="./DESC"/>
"KRN",.84,7981018.002,2,26,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,27,0)
   <xsl:value-of select="./VALUES"/>
"KRN",.84,7981018.002,2,28,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,29,0)
   <xsl:value-of select="./NP"/>
"KRN",.84,7981018.002,2,30,0)
   <xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,31,0)
 </xsl:for-each>
"KRN",.84,7981018.002,2,32,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981018.002,2,33,0)
</xsl:template>
"KRN",.84,7981018.002,2,34,0)
 
"KRN",.84,7981018.002,2,35,0)
 <xsl:template match="COLUMN[@NAME='VITAL']">
"KRN",.84,7981018.002,2,36,0)
  <xsl:value-of select="''"/>
"KRN",.84,7981018.002,2,37,0)
 </xsl:template>
"KRN",.84,7981018.002,2,38,0)
 
"KRN",.84,7981018.002,2,39,0)
 <xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981018.002,2,40,0)
  <xsl:value-of select="'Height Date'"/>
"KRN",.84,7981018.002,2,41,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,42,0)
  <xsl:value-of select="'Height'"/>
"KRN",.84,7981018.002,2,43,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,44,0)
 </xsl:template>
"KRN",.84,7981018.002,2,45,0)
 
"KRN",.84,7981018.002,2,46,0)
 <xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981018.002,2,47,0)
  <xsl:value-of select="'Weight Date'"/>
"KRN",.84,7981018.002,2,48,0)
  <xsl:value-of select="$DELIMITER"/>  
"KRN",.84,7981018.002,2,49,0)
  <xsl:value-of select="'Weight'"/>
"KRN",.84,7981018.002,2,50,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981018.002,2,51,0)
 </xsl:template>
"KRN",.84,7981018.002,2,52,0)
 
"KRN",.84,7981018.002,2,53,0)
 <xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981018.002,2,54,0)
  <xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981018.002,2,55,0)
  <xsl:variable name="ssn" select="LAST4"/>
"KRN",.84,7981018.002,2,56,0)
  <xsl:variable name="dod" select="DOD"/>
"KRN",.84,7981018.002,2,57,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,58,0)
   <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981018.002,2,59,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,60,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,61,0)
   <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981018.002,2,62,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,63,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,64,0)
   <xsl:with-param name="value" select="$dod"/>
"KRN",.84,7981018.002,2,65,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,66,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,67,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,68,0)
   <xsl:with-param name="value" select="BMIDATA/HEIGHT/DATE"/>
"KRN",.84,7981018.002,2,69,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,70,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,71,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,72,0)
   <xsl:with-param name="value" select="BMIDATA/HEIGHT/RESULT"/>
"KRN",.84,7981018.002,2,73,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,74,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,75,0)
   <xsl:with-param name="value" select="BMIDATA/WEIGHT/DATE"/>
"KRN",.84,7981018.002,2,76,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981018.002,2,77,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,78,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,79,0)
   <xsl:with-param name="value" select="BMIDATA/WEIGHT/RESULT"/>
"KRN",.84,7981018.002,2,80,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,81,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981018.002,2,82,0)
   <xsl:with-param name="value" select="BMI"/>
"KRN",.84,7981018.002,2,83,0)
  </xsl:call-template>
"KRN",.84,7981018.002,2,84,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981018.002,2,85,0)
 </xsl:template>
"KRN",.84,7981018.002,2,86,0)
 
"KRN",.84,7981018.002,2,87,0)
</xsl:stylesheet>
"KRN",.84,7981019.001,-1)
0^6
"KRN",.84,7981019.001,0)
7981019.001^2^^CLINICAL CASE REGISTRIES^MELD Report by Range (HTML)
"KRN",.84,7981019.001,2,0)
^.844^171^171^3100518^^
"KRN",.84,7981019.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981019.001,2,2,0)
 <xsl:stylesheet version="1.0"
"KRN",.84,7981019.001,2,3,0)
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981019.001,2,4,0)
 >
"KRN",.84,7981019.001,2,5,0)
 
"KRN",.84,7981019.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981019.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981019.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981019.001,2,9,0)
<xsl:include href="template://report/995/1"/>  <!-- Lab Data -->
"KRN",.84,7981019.001,2,10,0)
 
"KRN",.84,7981019.001,2,11,0)
<xsl:template match="/">
"KRN",.84,7981019.001,2,12,0)
 <html>
"KRN",.84,7981019.001,2,13,0)
  <head>
"KRN",.84,7981019.001,2,14,0)
   <title>MELD Score by Range</title>
"KRN",.84,7981019.001,2,15,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981019.001,2,16,0)
  </head>
"KRN",.84,7981019.001,2,17,0)
  <body>
"KRN",.84,7981019.001,2,18,0)
   <h1>MELD Score by Range</h1>
"KRN",.84,7981019.001,2,19,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981019.001,2,20,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981019.001,2,21,0)
     <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981019.001,2,22,0)
       Lab tests used to calculate MELD scores are identified by LOINC 
"KRN",.84,7981019.001,2,23,0)
code. 
"KRN",.84,7981019.001,2,24,0)
       Your local lab ADPAC should be contacted regarding errors in LOINC 
"KRN",.84,7981019.001,2,25,0)
codes.
"KRN",.84,7981019.001,2,26,0)
     </div>
"KRN",.84,7981019.001,2,27,0)
     <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981019.001,2,28,0)
       *For this report, creatinine values &gt;12 mg/dL are assumed to be 
"KRN",.84,7981019.001,2,29,0)
       erroneous and are ignored.  Sodium values &lt;100 or &gt;180 meq/L 
"KRN",.84,7981019.001,2,30,0)
are also assumed to be erroneous and are ignored.
"KRN",.84,7981019.001,2,31,0)
     </div>
"KRN",.84,7981019.001,2,32,0)
     <br />
"KRN",.84,7981019.001,2,33,0)
     <!-- The following line changed to fix page break issue in IE 7 -->
"KRN",.84,7981019.001,2,34,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981019.001,2,35,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981019.001,2,36,0)
     <div>
"KRN",.84,7981019.001,2,37,0)
       <xsl:call-template name="MakeScrollable">
"KRN",.84,7981019.001,2,38,0)
         <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981019.001,2,39,0)
       </xsl:call-template>
"KRN",.84,7981019.001,2,40,0)
       <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981019.001,2,41,0)
     </div>
"KRN",.84,7981019.001,2,42,0)
     <xsl:call-template name="ExplainFormula"/>
"KRN",.84,7981019.001,2,43,0)
   </xsl:if>
"KRN",.84,7981019.001,2,44,0)
  </body>
"KRN",.84,7981019.001,2,45,0)
 </html>
"KRN",.84,7981019.001,2,46,0)
</xsl:template>
"KRN",.84,7981019.001,2,47,0)
 
"KRN",.84,7981019.001,2,48,0)
<xsl:template name="ExplainFormula">
"KRN",.84,7981019.001,2,49,0)
 <br/>
"KRN",.84,7981019.001,2,50,0)
 <div class="reportSummary">
"KRN",.84,7981019.001,2,51,0)
  <div style="float:left">
"KRN",.84,7981019.001,2,52,0)
   <table cellpadding="3" cellspacing="0">
"KRN",.84,7981019.001,2,53,0)
    <caption>Calculation Formulas</caption>
"KRN",.84,7981019.001,2,54,0)
    <thead>
"KRN",.84,7981019.001,2,55,0)
     <tr>
"KRN",.84,7981019.001,2,56,0)
      <th width="30">Description</th>
"KRN",.84,7981019.001,2,57,0)
      <th>Formula</th>
"KRN",.84,7981019.001,2,58,0)
     </tr>
"KRN",.84,7981019.001,2,59,0)
    </thead>
"KRN",.84,7981019.001,2,60,0)
    <tbody>
"KRN",.84,7981019.001,2,61,0)
     <tr>
"KRN",.84,7981019.001,2,62,0)
      <td align="center">MELD</td>
"KRN",.84,7981019.001,2,63,0)
      <td class="aLeft"> (0.957*Ln(Serum Cr) + 0.378*Ln(Serum Bilirubin) 
"KRN",.84,7981019.001,2,64,0)
+ 1.120*Ln(INR) + 0.643) * 10<br/><br/>
"KRN",.84,7981019.001,2,65,0)
       <b>NOTES:</b>  Ln is 'natural log'<br/>
"KRN",.84,7981019.001,2,66,0)
      Lower limit of 1 for all variables with creatinine capped at 4
"KRN",.84,7981019.001,2,67,0)
      </td>
"KRN",.84,7981019.001,2,68,0)
     </tr>
"KRN",.84,7981019.001,2,69,0)
     <xsl:if 
"KRN",.84,7981019.001,2,70,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MELDNA']
"KRN",.84,7981019.001,2,71,0)
) > 0">
"KRN",.84,7981019.001,2,72,0)
    <tr>
"KRN",.84,7981019.001,2,73,0)
      <td align="center">MELD-Na</td>
"KRN",.84,7981019.001,2,74,0)
      <td class="aLeft">MELD calculation + 1.59 *(135 - Serum 
"KRN",.84,7981019.001,2,75,0)
Na)<br/><br/>
"KRN",.84,7981019.001,2,76,0)
       <b>NOTE:</b>  Mininum value for Serum Na is 120 mmol/L and the 
"KRN",.84,7981019.001,2,77,0)
maximum is 135 mmol/L      
"KRN",.84,7981019.001,2,78,0)
      </td>
"KRN",.84,7981019.001,2,79,0)
     </tr>
"KRN",.84,7981019.001,2,80,0)
     </xsl:if>
"KRN",.84,7981019.001,2,81,0)
    </tbody>
"KRN",.84,7981019.001,2,82,0)
   </table>
"KRN",.84,7981019.001,2,83,0)
  </div>
"KRN",.84,7981019.001,2,84,0)
 </div>
"KRN",.84,7981019.001,2,85,0)
</xsl:template>
"KRN",.84,7981019.001,2,86,0)
 
"KRN",.84,7981019.001,2,87,0)
 
"KRN",.84,7981019.001,2,88,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981019.001,2,89,0)
 
"KRN",.84,7981019.001,2,90,0)
<xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981019.001,2,91,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,92,0)
  <xsl:with-param name="title" select="'Test'"/>
"KRN",.84,7981019.001,2,93,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981019.001,2,94,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,95,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,96,0)
</xsl:template>
"KRN",.84,7981019.001,2,97,0)
 
"KRN",.84,7981019.001,2,98,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981019.001,2,99,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,100,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981019.001,2,101,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981019.001,2,102,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981019.001,2,103,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,104,0)
</xsl:template>
"KRN",.84,7981019.001,2,105,0)
 
"KRN",.84,7981019.001,2,106,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981019.001,2,107,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,108,0)
  <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981019.001,2,109,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981019.001,2,110,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981019.001,2,111,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,112,0)
</xsl:template>
"KRN",.84,7981019.001,2,113,0)
 
"KRN",.84,7981019.001,2,114,0)
<xsl:template match="COLUMN[@NAME='MELD']">
"KRN",.84,7981019.001,2,115,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,116,0)
  <xsl:with-param name="sort" select="'PATIENTS=MELD'"/> 
"KRN",.84,7981019.001,2,117,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,118,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,119,0)
</xsl:template>
"KRN",.84,7981019.001,2,120,0)
 
"KRN",.84,7981019.001,2,121,0)
<xsl:template match="COLUMN[@NAME='MELDNA']">
"KRN",.84,7981019.001,2,122,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,123,0)
  <xsl:with-param name="title" select="'MELD-Na'"/>
"KRN",.84,7981019.001,2,124,0)
  <xsl:with-param name="sort" select="'PATIENTS=MELDNA'"/>
"KRN",.84,7981019.001,2,125,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981019.001,2,126,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,127,0)
</xsl:template>
"KRN",.84,7981019.001,2,128,0)
 
"KRN",.84,7981019.001,2,129,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981019.001,2,130,0)
 
"KRN",.84,7981019.001,2,131,0)
<xsl:template match="PATIENT/MELD">
"KRN",.84,7981019.001,2,132,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981019.001,2,133,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.001,2,134,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981019.001,2,135,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,136,0)
</xsl:template>
"KRN",.84,7981019.001,2,137,0)
 
"KRN",.84,7981019.001,2,138,0)
<xsl:template match="PATIENT/MELDNA">
"KRN",.84,7981019.001,2,139,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981019.001,2,140,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.001,2,141,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981019.001,2,142,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,143,0)
</xsl:template>
"KRN",.84,7981019.001,2,144,0)
 
"KRN",.84,7981019.001,2,145,0)
<xsl:template match="PATIENT/MELDDATA">
"KRN",.84,7981019.001,2,146,0)
 <td class="aLeft">
"KRN",.84,7981019.001,2,147,0)
   <xsl:for-each select="TEST/TNAME">
"KRN",.84,7981019.001,2,148,0)
    <xsl:value-of select="."/><br/>
"KRN",.84,7981019.001,2,149,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,150,0)
 </td>
"KRN",.84,7981019.001,2,151,0)
 <td>
"KRN",.84,7981019.001,2,152,0)
   <xsl:for-each select="TEST/DATE">
"KRN",.84,7981019.001,2,153,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981019.001,2,154,0)
       <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.001,2,155,0)
       <xsl:with-param name="value" select="."/>
"KRN",.84,7981019.001,2,156,0)
       <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,157,0)
     </xsl:call-template><br/>
"KRN",.84,7981019.001,2,158,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,159,0)
 </td>
"KRN",.84,7981019.001,2,160,0)
 <td class="aRight">
"KRN",.84,7981019.001,2,161,0)
   <xsl:for-each select="TEST/RESULT">
"KRN",.84,7981019.001,2,162,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981019.001,2,163,0)
       <xsl:with-param name="value" select="."/>
"KRN",.84,7981019.001,2,164,0)
       <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,165,0)
     </xsl:call-template><br/>
"KRN",.84,7981019.001,2,166,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,167,0)
 </td>
"KRN",.84,7981019.001,2,168,0)
 
"KRN",.84,7981019.001,2,169,0)
</xsl:template> 
"KRN",.84,7981019.001,2,170,0)
 
"KRN",.84,7981019.001,2,171,0)
</xsl:stylesheet>
"KRN",.84,7981019.002,-1)
0^7
"KRN",.84,7981019.002,0)
7981019.002^2^^CLINICAL CASE REGISTRIES^MELD Report by Range (CSV)
"KRN",.84,7981019.002,2,0)
^^71^71^3100518^
"KRN",.84,7981019.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981019.002,2,2,0)
 <xsl:stylesheet version="1.0"
"KRN",.84,7981019.002,2,3,0)
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981019.002,2,4,0)
 
"KRN",.84,7981019.002,2,5,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981019.002,2,6,0)
 
"KRN",.84,7981019.002,2,7,0)
<xsl:template match="/">
"KRN",.84,7981019.002,2,8,0)
 <xsl:text>MELD Score by Range</xsl:text>
"KRN",.84,7981019.002,2,9,0)
 <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981019.002,2,10,0)
</xsl:template>
"KRN",.84,7981019.002,2,11,0)
 
"KRN",.84,7981019.002,2,12,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981019.002,2,13,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,14,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981019.002,2,15,0)
 </xsl:call-template>
"KRN",.84,7981019.002,2,16,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,17,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981019.002,2,18,0)
 </xsl:call-template>
"KRN",.84,7981019.002,2,19,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,20,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981019.002,2,21,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.002,2,22,0)
 </xsl:call-template>
"KRN",.84,7981019.002,2,23,0)
 <xsl:for-each select="MELDDATA/TEST">
"KRN",.84,7981019.002,2,24,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,25,0)
    <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981019.002,2,26,0)
    <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.002,2,27,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,28,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,29,0)
    <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981019.002,2,30,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,31,0)
 </xsl:for-each>
"KRN",.84,7981019.002,2,32,0)
 <xsl:if 
"KRN",.84,7981019.002,2,33,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MELD']) 
"KRN",.84,7981019.002,2,34,0)
> 0">
"KRN",.84,7981019.002,2,35,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,36,0)
    <xsl:with-param name="value" select="MELD"/>
"KRN",.84,7981019.002,2,37,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,38,0)
 </xsl:if>
"KRN",.84,7981019.002,2,39,0)
 <xsl:if 
"KRN",.84,7981019.002,2,40,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MELDNA']
"KRN",.84,7981019.002,2,41,0)
) > 0">
"KRN",.84,7981019.002,2,42,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981019.002,2,43,0)
    <xsl:with-param name="value" select="MELDNA"/>
"KRN",.84,7981019.002,2,44,0)
  </xsl:call-template>
"KRN",.84,7981019.002,2,45,0)
 </xsl:if>
"KRN",.84,7981019.002,2,46,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981019.002,2,47,0)
</xsl:template>
"KRN",.84,7981019.002,2,48,0)
 
"KRN",.84,7981019.002,2,49,0)
<xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981019.002,2,50,0)
 <xsl:for-each select="/REPORT/PATIENTS/PATIENT[1]/MELDDATA/TEST/TNAME">
"KRN",.84,7981019.002,2,51,0)
  <xsl:variable name="tname" select="."/>
"KRN",.84,7981019.002,2,52,0)
  <xsl:value-of select="concat($tname, ' Date', $DELIMITER)"/>
"KRN",.84,7981019.002,2,53,0)
  <xsl:value-of select="concat($tname, ' Result', $DELIMITER)"/>
"KRN",.84,7981019.002,2,54,0)
 </xsl:for-each>
"KRN",.84,7981019.002,2,55,0)
</xsl:template>
"KRN",.84,7981019.002,2,56,0)
 
"KRN",.84,7981019.002,2,57,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981019.002,2,58,0)
 <xsl:text></xsl:text>
"KRN",.84,7981019.002,2,59,0)
</xsl:template>
"KRN",.84,7981019.002,2,60,0)
 
"KRN",.84,7981019.002,2,61,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981019.002,2,62,0)
 <xsl:text></xsl:text>
"KRN",.84,7981019.002,2,63,0)
</xsl:template>
"KRN",.84,7981019.002,2,64,0)
 
"KRN",.84,7981019.002,2,65,0)
<xsl:template match="COLUMN[@NAME='MELDNA']">
"KRN",.84,7981019.002,2,66,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.002,2,67,0)
  <xsl:with-param name="title" select="'MELD-Na'"/>
"KRN",.84,7981019.002,2,68,0)
 </xsl:call-template>
"KRN",.84,7981019.002,2,69,0)
</xsl:template>
"KRN",.84,7981019.002,2,70,0)
 
"KRN",.84,7981019.002,2,71,0)
</xsl:stylesheet>
"KRN",.84,7981020.001,-1)
0^8
"KRN",.84,7981020.001,0)
7981020.001^2^^CLINICAL CASE REGISTRIES^Renal Function by Range (HTML)
"KRN",.84,7981020.001,2,0)
^^215^215^3100518^
"KRN",.84,7981020.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981020.001,2,2,0)
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
"KRN",.84,7981020.001,2,3,0)
version="1.0">
"KRN",.84,7981020.001,2,4,0)
 
"KRN",.84,7981020.001,2,5,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981020.001,2,6,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981020.001,2,7,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981020.001,2,8,0)
 
"KRN",.84,7981020.001,2,9,0)
<xsl:template match="/">
"KRN",.84,7981020.001,2,10,0)
 <html>
"KRN",.84,7981020.001,2,11,0)
  <head>
"KRN",.84,7981020.001,2,12,0)
   <title>Renal Function by Range</title>
"KRN",.84,7981020.001,2,13,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981020.001,2,14,0)
  </head>
"KRN",.84,7981020.001,2,15,0)
  <body>
"KRN",.84,7981020.001,2,16,0)
   <h1>Renal Function by Range</h1>
"KRN",.84,7981020.001,2,17,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981020.001,2,18,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981020.001,2,19,0)
    <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981020.001,2,20,0)
       Lab tests used to calculate Cockcroft-Gault and/or eGFR by MDRD 
"KRN",.84,7981020.001,2,21,0)
scores are identified by LOINC code. 
"KRN",.84,7981020.001,2,22,0)
       Your local lab ADPAC should be 
"KRN",.84,7981020.001,2,23,0)
contacted regarding errors in LOINC codes.
"KRN",.84,7981020.001,2,24,0)
    </div>
"KRN",.84,7981020.001,2,25,0)
    <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981020.001,2,26,0)
       *For this report, creatinine values &gt;12 mg/dL are assumed to be 
"KRN",.84,7981020.001,2,27,0)
erroneous and are ignored.  Height values on the CrCL report that are
"KRN",.84,7981020.001,2,28,0)
&lt;36 inches or &gt;96 inches are also assumed to be erroneous and are
"KRN",.84,7981020.001,2,29,0)
ignored.
"KRN",.84,7981020.001,2,30,0)
    </div>
"KRN",.84,7981020.001,2,31,0)
   </xsl:if>
"KRN",.84,7981020.001,2,32,0)
     <xsl:if 
"KRN",.84,7981020.001,2,33,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='EGFR']) 
"KRN",.84,7981020.001,2,34,0)
> 0">
"KRN",.84,7981020.001,2,35,0)
       <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981020.001,2,36,0)
         Please note eGFR results &gt;60 are imprecise.
"KRN",.84,7981020.001,2,37,0)
      </div>
"KRN",.84,7981020.001,2,38,0)
     <xsl:call-template name="RenalReportSummary"/>
"KRN",.84,7981020.001,2,39,0)
    </xsl:if>
"KRN",.84,7981020.001,2,40,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981020.001,2,41,0)
     <br />
"KRN",.84,7981020.001,2,42,0)
     <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981020.001,2,43,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981020.001,2,44,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981020.001,2,45,0)
     <div>
"KRN",.84,7981020.001,2,46,0)
       <xsl:call-template name="MakeScrollable">
"KRN",.84,7981020.001,2,47,0)
         <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981020.001,2,48,0)
       </xsl:call-template>
"KRN",.84,7981020.001,2,49,0)
       <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981020.001,2,50,0)
     </div>
"KRN",.84,7981020.001,2,51,0)
     <xsl:call-template name="ExplainFormula"/>
"KRN",.84,7981020.001,2,52,0)
   </xsl:if>
"KRN",.84,7981020.001,2,53,0)
  </body>
"KRN",.84,7981020.001,2,54,0)
 </html>
"KRN",.84,7981020.001,2,55,0)
</xsl:template>
"KRN",.84,7981020.001,2,56,0)
 
"KRN",.84,7981020.001,2,57,0)
<xsl:template name="RenalReportSummary">
"KRN",.84,7981020.001,2,58,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981020.001,2,59,0)
 <table cellpadding="5" cellspacing="0">
"KRN",.84,7981020.001,2,60,0)
  <thead>
"KRN",.84,7981020.001,2,61,0)
   <tr>
"KRN",.84,7981020.001,2,62,0)
    <th>Chronic Kidney Disease Stages</th>
"KRN",.84,7981020.001,2,63,0)
    <th>GFR</th>
"KRN",.84,7981020.001,2,64,0)
    <th>Number of Patients</th>
"KRN",.84,7981020.001,2,65,0)
   </tr>
"KRN",.84,7981020.001,2,66,0)
  </thead>
"KRN",.84,7981020.001,2,67,0)
  <tbody>
"KRN",.84,7981020.001,2,68,0)
    <xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981020.001,2,69,0)
    <tr>
"KRN",.84,7981020.001,2,70,0)
      <td class="aLeft"><xsl:value-of select="./DESC"/></td>
"KRN",.84,7981020.001,2,71,0)
      <td><xsl:value-of select="./VALUES"/><sup>2</sup></td>
"KRN",.84,7981020.001,2,72,0)
      <td><xsl:value-of select="./NP"/></td>
"KRN",.84,7981020.001,2,73,0)
    </tr>
"KRN",.84,7981020.001,2,74,0)
   </xsl:for-each>
"KRN",.84,7981020.001,2,75,0)
  </tbody>
"KRN",.84,7981020.001,2,76,0)
 </table>
"KRN",.84,7981020.001,2,77,0)
</xsl:template>
"KRN",.84,7981020.001,2,78,0)
 
"KRN",.84,7981020.001,2,79,0)
<xsl:template name="ExplainFormula">
"KRN",.84,7981020.001,2,80,0)
 <br/>
"KRN",.84,7981020.001,2,81,0)
 <div class="reportSummary">
"KRN",.84,7981020.001,2,82,0)
  <div style="float:left; width:50%">
"KRN",.84,7981020.001,2,83,0)
   <table cellpadding="3" cellspacing="0">
"KRN",.84,7981020.001,2,84,0)
    <caption>Calculation Formulas</caption>
"KRN",.84,7981020.001,2,85,0)
    <thead>
"KRN",.84,7981020.001,2,86,0)
     <tr>
"KRN",.84,7981020.001,2,87,0)
      <th width="60">Description</th>
"KRN",.84,7981020.001,2,88,0)
      <th>Formula</th>
"KRN",.84,7981020.001,2,89,0)
     </tr>
"KRN",.84,7981020.001,2,90,0)
    </thead>
"KRN",.84,7981020.001,2,91,0)
    <tbody>
"KRN",.84,7981020.001,2,92,0)
     <xsl:if 
"KRN",.84,7981020.001,2,93,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CRCL']) 
"KRN",.84,7981020.001,2,94,0)
> 0">
"KRN",.84,7981020.001,2,95,0)
     <tr>
"KRN",.84,7981020.001,2,96,0)
      <td align="center">Cockcroft-Gault</td>
"KRN",.84,7981020.001,2,97,0)
      <td class="aLeft"> (140-age) * ideal weight in kg (*.85 if 
"KRN",.84,7981020.001,2,98,0)
female)/(Cr*72)<br/><br/>
"KRN",.84,7981020.001,2,99,0)
       Ideal weight in kg calculated as:<br />
"KRN",.84,7981020.001,2,100,0)
       male = 51.65+(1.85*(height-60))<br/>
"KRN",.84,7981020.001,2,101,0)
       female = 48.67+(1.65*(height-60))
"KRN",.84,7981020.001,2,102,0)
      </td>
"KRN",.84,7981020.001,2,103,0)
     </tr>
"KRN",.84,7981020.001,2,104,0)
     </xsl:if>
"KRN",.84,7981020.001,2,105,0)
     <xsl:if 
"KRN",.84,7981020.001,2,106,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='EGFR']) 
"KRN",.84,7981020.001,2,107,0)
> 0">
"KRN",.84,7981020.001,2,108,0)
      <tr>
"KRN",.84,7981020.001,2,109,0)
       <td align="center">eGFR by MDRD</td>
"KRN",.84,7981020.001,2,110,0)
       <td class="aLeft"> (175 * (Cr<sup>-1.154</sup>) * 
"KRN",.84,7981020.001,2,111,0)
(age<sup>-.203</sup>) *1.212 (if Black) * .742 (if female)</td>
"KRN",.84,7981020.001,2,112,0)
      </tr>
"KRN",.84,7981020.001,2,113,0)
     </xsl:if>
"KRN",.84,7981020.001,2,114,0)
    </tbody>
"KRN",.84,7981020.001,2,115,0)
   </table>
"KRN",.84,7981020.001,2,116,0)
  </div>
"KRN",.84,7981020.001,2,117,0)
 </div>
"KRN",.84,7981020.001,2,118,0)
</xsl:template>
"KRN",.84,7981020.001,2,119,0)
 
"KRN",.84,7981020.001,2,120,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981020.001,2,121,0)
 
"KRN",.84,7981020.001,2,122,0)
<xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981020.001,2,123,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,124,0)
  <xsl:with-param name="title" select="'Test'"/>
"KRN",.84,7981020.001,2,125,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,126,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981020.001,2,127,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,128,0)
</xsl:template>
"KRN",.84,7981020.001,2,129,0)
 
"KRN",.84,7981020.001,2,130,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981020.001,2,131,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,132,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981020.001,2,133,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,134,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981020.001,2,135,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,136,0)
</xsl:template>
"KRN",.84,7981020.001,2,137,0)
 
"KRN",.84,7981020.001,2,138,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981020.001,2,139,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,140,0)
  <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981020.001,2,141,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,142,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981020.001,2,143,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,144,0)
</xsl:template>
"KRN",.84,7981020.001,2,145,0)
 
"KRN",.84,7981020.001,2,146,0)
<xsl:template match="COLUMN[@NAME='CRCL']">
"KRN",.84,7981020.001,2,147,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,148,0)
  <xsl:with-param name="title" select="'CrCL'"/>
"KRN",.84,7981020.001,2,149,0)
  <xsl:with-param name="sort" select="'PATIENTS=CRCL'"/>
"KRN",.84,7981020.001,2,150,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981020.001,2,151,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,152,0)
</xsl:template>
"KRN",.84,7981020.001,2,153,0)
 
"KRN",.84,7981020.001,2,154,0)
<xsl:template match="COLUMN[@NAME='EGFR']">
"KRN",.84,7981020.001,2,155,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,156,0)
  <xsl:with-param name="title" select="'eGFR'"/>
"KRN",.84,7981020.001,2,157,0)
  <xsl:with-param name="sort" select="'PATIENTS=EGFR'"/>
"KRN",.84,7981020.001,2,158,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981020.001,2,159,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,160,0)
</xsl:template>
"KRN",.84,7981020.001,2,161,0)
 
"KRN",.84,7981020.001,2,162,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981020.001,2,163,0)
 
"KRN",.84,7981020.001,2,164,0)
<xsl:template match="PATIENT/CRCL">
"KRN",.84,7981020.001,2,165,0)
  <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981020.001,2,166,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.001,2,167,0)
    <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981020.001,2,168,0)
  </xsl:call-template>
"KRN",.84,7981020.001,2,169,0)
</xsl:template>
"KRN",.84,7981020.001,2,170,0)
 
"KRN",.84,7981020.001,2,171,0)
<xsl:template match="PATIENT/EGFR">
"KRN",.84,7981020.001,2,172,0)
  <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981020.001,2,173,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.001,2,174,0)
    <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981020.001,2,175,0)
  </xsl:call-template>
"KRN",.84,7981020.001,2,176,0)
</xsl:template>
"KRN",.84,7981020.001,2,177,0)
 
"KRN",.84,7981020.001,2,178,0)
<xsl:template match="PATIENT/RNLDATA">
"KRN",.84,7981020.001,2,179,0)
 <xsl:variable name="CRCL" 
"KRN",.84,7981020.001,2,180,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CRCL']
"KRN",.84,7981020.001,2,181,0)
)"/>
"KRN",.84,7981020.001,2,182,0)
 <td class="aLeft">
"KRN",.84,7981020.001,2,183,0)
   <xsl:text>Cr</xsl:text>
"KRN",.84,7981020.001,2,184,0)
   <xsl:if test="$CRCL>0">
"KRN",.84,7981020.001,2,185,0)
    <br/><xsl:text>Height</xsl:text>
"KRN",.84,7981020.001,2,186,0)
   </xsl:if>
"KRN",.84,7981020.001,2,187,0)
 </td>
"KRN",.84,7981020.001,2,188,0)
 <td>
"KRN",.84,7981020.001,2,189,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,190,0)
     <xsl:with-param name="value" select="TEST/DATE"/>
"KRN",.84,7981020.001,2,191,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.001,2,192,0)
   </xsl:call-template>
"KRN",.84,7981020.001,2,193,0)
   <xsl:if test="$CRCL>0">
"KRN",.84,7981020.001,2,194,0)
     <br/>
"KRN",.84,7981020.001,2,195,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,196,0)
       <xsl:with-param name="value" select="HEIGHT/DATE"/>
"KRN",.84,7981020.001,2,197,0)
       <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.001,2,198,0)
     </xsl:call-template>
"KRN",.84,7981020.001,2,199,0)
   </xsl:if>
"KRN",.84,7981020.001,2,200,0)
 </td>
"KRN",.84,7981020.001,2,201,0)
 <td class="aRight">
"KRN",.84,7981020.001,2,202,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,203,0)
     <xsl:with-param name="value" select="TEST/RESULT"/>
"KRN",.84,7981020.001,2,204,0)
   </xsl:call-template>
"KRN",.84,7981020.001,2,205,0)
   <xsl:if test="$CRCL>0">
"KRN",.84,7981020.001,2,206,0)
     <br/>
"KRN",.84,7981020.001,2,207,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,208,0)
       <xsl:with-param name="value" select="HEIGHT/RESULT"/>
"KRN",.84,7981020.001,2,209,0)
     </xsl:call-template>
"KRN",.84,7981020.001,2,210,0)
   </xsl:if>
"KRN",.84,7981020.001,2,211,0)
 </td>
"KRN",.84,7981020.001,2,212,0)
 
"KRN",.84,7981020.001,2,213,0)
</xsl:template>
"KRN",.84,7981020.001,2,214,0)
 
"KRN",.84,7981020.001,2,215,0)
</xsl:stylesheet>
"KRN",.84,7981020.001,3,0)
^.845
"KRN",.84,7981020.002,-1)
0^9
"KRN",.84,7981020.002,0)
7981020.002^2^^CLINICAL CASE REGISTRIES^Renal Function by Range (CSV)
"KRN",.84,7981020.002,2,0)
^^117^117^3100519^
"KRN",.84,7981020.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981020.002,2,2,0)
 <xsl:stylesheet version="1.0"
"KRN",.84,7981020.002,2,3,0)
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981020.002,2,4,0)
 
"KRN",.84,7981020.002,2,5,0)
<xsl:import href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981020.002,2,6,0)
 
"KRN",.84,7981020.002,2,7,0)
<xsl:variable name="CRCLUSED" 
"KRN",.84,7981020.002,2,8,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CRCL']
"KRN",.84,7981020.002,2,9,0)
)"/>
"KRN",.84,7981020.002,2,10,0)
 
"KRN",.84,7981020.002,2,11,0)
<xsl:template match="/">
"KRN",.84,7981020.002,2,12,0)
  <xsl:if 
"KRN",.84,7981020.002,2,13,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='EGFR']) 
"KRN",.84,7981020.002,2,14,0)
> 0">
"KRN",.84,7981020.002,2,15,0)
    <xsl:call-template name="RenalReportSummary"/>
"KRN",.84,7981020.002,2,16,0)
  </xsl:if>
"KRN",.84,7981020.002,2,17,0)
  <xsl:text>Renal Function by Range</xsl:text>
"KRN",.84,7981020.002,2,18,0)
  <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981020.002,2,19,0)
</xsl:template>
"KRN",.84,7981020.002,2,20,0)
 
"KRN",.84,7981020.002,2,21,0)
<xsl:template name="RenalReportSummary">
"KRN",.84,7981020.002,2,22,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981020.002,2,23,0)
 <xsl:text>Renal Function by Range (Summary)</xsl:text>
"KRN",.84,7981020.002,2,24,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,25,0)
 <xsl:text>Chronic Kidney Disease Stages</xsl:text>
"KRN",.84,7981020.002,2,26,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,27,0)
 <xsl:text>GFR</xsl:text>
"KRN",.84,7981020.002,2,28,0)
 <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,29,0)
 <xsl:text>Number of Patients</xsl:text>
"KRN",.84,7981020.002,2,30,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,31,0)
 <xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981020.002,2,32,0)
   <xsl:value-of select="./DESC"/>
"KRN",.84,7981020.002,2,33,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,34,0)
   <xsl:value-of select="./VALUES"/>
"KRN",.84,7981020.002,2,35,0)
   <xsl:text> sq</xsl:text>
"KRN",.84,7981020.002,2,36,0)
   <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,37,0)
   <xsl:value-of select="./NP"/>
"KRN",.84,7981020.002,2,38,0)
   <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,39,0)
 </xsl:for-each>
"KRN",.84,7981020.002,2,40,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981020.002,2,41,0)
</xsl:template>
"KRN",.84,7981020.002,2,42,0)
 
"KRN",.84,7981020.002,2,43,0)
 <xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981020.002,2,44,0)
  <xsl:value-of select="''"/>
"KRN",.84,7981020.002,2,45,0)
 </xsl:template>
"KRN",.84,7981020.002,2,46,0)
 
"KRN",.84,7981020.002,2,47,0)
 <xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981020.002,2,48,0)
  <xsl:value-of select="'Cr Date'"/>
"KRN",.84,7981020.002,2,49,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,50,0)
  <xsl:value-of select="'Cr'"/>
"KRN",.84,7981020.002,2,51,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,52,0)
 </xsl:template>
"KRN",.84,7981020.002,2,53,0)
 
"KRN",.84,7981020.002,2,54,0)
 <xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981020.002,2,55,0)
  <xsl:if test="$CRCLUSED > 0">
"KRN",.84,7981020.002,2,56,0)
    <xsl:value-of select="'Height Date'"/>
"KRN",.84,7981020.002,2,57,0)
    <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,58,0)
    <xsl:value-of select="'Height'"/>
"KRN",.84,7981020.002,2,59,0)
    <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981020.002,2,60,0)
  </xsl:if>
"KRN",.84,7981020.002,2,61,0)
 </xsl:template>
"KRN",.84,7981020.002,2,62,0)
 
"KRN",.84,7981020.002,2,63,0)
<xsl:template match="COLUMN[@NAME='CRCL']">
"KRN",.84,7981020.002,2,64,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.002,2,65,0)
  <xsl:with-param name="title" select="'CrCL'"/>
"KRN",.84,7981020.002,2,66,0)
 </xsl:call-template>
"KRN",.84,7981020.002,2,67,0)
</xsl:template>
"KRN",.84,7981020.002,2,68,0)
 
"KRN",.84,7981020.002,2,69,0)
<xsl:template match="COLUMN[@NAME='EGFR']">
"KRN",.84,7981020.002,2,70,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.002,2,71,0)
  <xsl:with-param name="title" select="'eGFR'"/>
"KRN",.84,7981020.002,2,72,0)
 </xsl:call-template>
"KRN",.84,7981020.002,2,73,0)
</xsl:template>
"KRN",.84,7981020.002,2,74,0)
 
"KRN",.84,7981020.002,2,75,0)
<xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981020.002,2,76,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,77,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981020.002,2,78,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,79,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,80,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981020.002,2,81,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,82,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,83,0)
   <xsl:with-param name="value" select="DOD"/>
"KRN",.84,7981020.002,2,84,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,85,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,86,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,87,0)
   <xsl:with-param name="value" select="RNLDATA/TEST/DATE"/>
"KRN",.84,7981020.002,2,88,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,89,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,90,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,91,0)
    <xsl:with-param name="value" select="RNLDATA/TEST/RESULT"/>
"KRN",.84,7981020.002,2,92,0)
  </xsl:call-template>
"KRN",.84,7981020.002,2,93,0)
  <xsl:if test="$CRCLUSED > 0">
"KRN",.84,7981020.002,2,94,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,95,0)
     <xsl:with-param name="value" select="RNLDATA/HEIGHT/DATE"/>
"KRN",.84,7981020.002,2,96,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.002,2,97,0)
   </xsl:call-template>
"KRN",.84,7981020.002,2,98,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,99,0)
     <xsl:with-param name="value" select="RNLDATA/HEIGHT/RESULT"/>
"KRN",.84,7981020.002,2,100,0)
   </xsl:call-template>
"KRN",.84,7981020.002,2,101,0)
  </xsl:if>
"KRN",.84,7981020.002,2,102,0)
  <xsl:if test="$CRCLUSED > 0">
"KRN",.84,7981020.002,2,103,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,104,0)
     <xsl:with-param name="value" select="CRCL"/>
"KRN",.84,7981020.002,2,105,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,106,0)
  </xsl:if>
"KRN",.84,7981020.002,2,107,0)
  <xsl:if 
"KRN",.84,7981020.002,2,108,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='EGFR']) 
"KRN",.84,7981020.002,2,109,0)
> 0">
"KRN",.84,7981020.002,2,110,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981020.002,2,111,0)
     <xsl:with-param name="value" select="EGFR"/>
"KRN",.84,7981020.002,2,112,0)
    </xsl:call-template>
"KRN",.84,7981020.002,2,113,0)
  </xsl:if>
"KRN",.84,7981020.002,2,114,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981020.002,2,115,0)
 </xsl:template>
"KRN",.84,7981020.002,2,116,0)
 
"KRN",.84,7981020.002,2,117,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,-1)
0^1
"KRN",.84,7981999.001,0)
7981999.001^2^^CLINICAL CASE REGISTRIES^Common XSL templates (HTML)
"KRN",.84,7981999.001,2,0)
^^772^772^3100406^
"KRN",.84,7981999.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981999.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981999.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981999.001,2,4,0)
 
"KRN",.84,7981999.001,2,5,0)
<xsl:param name="REMOVE_URLS"/>
"KRN",.84,7981999.001,2,6,0)
 
"KRN",.84,7981999.001,2,7,0)
<xsl:output method="html" indent="yes" encoding="iso-8859-1"/>
"KRN",.84,7981999.001,2,8,0)
<xsl:strip-space elements="*"/>
"KRN",.84,7981999.001,2,9,0)
 
"KRN",.84,7981999.001,2,10,0)
<xsl:template match="REPORT/HEADER//*"></xsl:template>
"KRN",.84,7981999.001,2,11,0)
<xsl:template match="REPORT/PARAMETERS//*"></xsl:template>
"KRN",.84,7981999.001,2,12,0)
 
"KRN",.84,7981999.001,2,13,0)
<xsl:key name="TableDefs" match="/REPORT/HEADER/TBLDEF" use="@NAME"/>
"KRN",.84,7981999.001,2,14,0)
 
"KRN",.84,7981999.001,2,15,0)
<!--
"KRN",.84,7981999.001,2,16,0)
=========================================================================
"KRN",.84,7981999.001,2,17,0)
                                UTILITIES
"KRN",.84,7981999.001,2,18,0)
=========================================================================
"KRN",.84,7981999.001,2,19,0)
-->
"KRN",.84,7981999.001,2,20,0)
 
"KRN",.84,7981999.001,2,21,0)
<!-- Formats the value of table cell -->
"KRN",.84,7981999.001,2,22,0)
 
"KRN",.84,7981999.001,2,23,0)
<xsl:template name="CellValue">
"KRN",.84,7981999.001,2,24,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,25,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,26,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,27,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,28,0)
  <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,29,0)
  <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,30,0)
   <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,31,0)
    <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,32,0)
   </xsl:call-template>
"KRN",.84,7981999.001,2,33,0)
  </xsl:when>
"KRN",.84,7981999.001,2,34,0)
  <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,35,0)
   <xsl:choose>
"KRN",.84,7981999.001,2,36,0)
    <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,37,0)
    <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,38,0)
   </xsl:choose>
"KRN",.84,7981999.001,2,39,0)
  </xsl:when>
"KRN",.84,7981999.001,2,40,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,41,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,42,0)
</xsl:template>
"KRN",.84,7981999.001,2,43,0)
 
"KRN",.84,7981999.001,2,44,0)
<!-- Converts the FileMan date/time in printable format -->
"KRN",.84,7981999.001,2,45,0)
 
"KRN",.84,7981999.001,2,46,0)
<xsl:template name="DateTime">
"KRN",.84,7981999.001,2,47,0)
 <xsl:param name="dt" select="."/>
"KRN",.84,7981999.001,2,48,0)
 <!--
"KRN",.84,7981999.001,2,49,0)
     Date (YYYMMDD)
"KRN",.84,7981999.001,2,50,0)
 -->
"KRN",.84,7981999.001,2,51,0)
 <xsl:variable name="date"
"KRN",.84,7981999.001,2,52,0)
               select="substring-before(concat($dt,'.'),'.')"/>
"KRN",.84,7981999.001,2,53,0)
 <xsl:if test="$date!=''">
"KRN",.84,7981999.001,2,54,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,55,0)
   <xsl:when test="string-length($date)=7">
"KRN",.84,7981999.001,2,56,0)
    <xsl:variable name="year"
"KRN",.84,7981999.001,2,57,0)
                  select="string(number(substring($date,1,3))+1700)"/>
"KRN",.84,7981999.001,2,58,0)
    <xsl:variable name="month" select="substring($date,4,2)"/>
"KRN",.84,7981999.001,2,59,0)
    <xsl:variable name="day" select="substring($date,6,2)"/>
"KRN",.84,7981999.001,2,60,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,61,0)
     <xsl:when test="$day!='00'">
"KRN",.84,7981999.001,2,62,0)
      <xsl:value-of select="concat($month,'/',$day,'/',$year)"/>
"KRN",.84,7981999.001,2,63,0)
     </xsl:when>
"KRN",.84,7981999.001,2,64,0)
     <xsl:when test="$month!='00'">
"KRN",.84,7981999.001,2,65,0)
      <xsl:value-of select="concat($month,'/',$year)"/>
"KRN",.84,7981999.001,2,66,0)
     </xsl:when>
"KRN",.84,7981999.001,2,67,0)
     <xsl:otherwise><xsl:value-of select="$year"/></xsl:otherwise>
"KRN",.84,7981999.001,2,68,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,69,0)
   </xsl:when>
"KRN",.84,7981999.001,2,70,0)
   <xsl:otherwise>{error}</xsl:otherwise>
"KRN",.84,7981999.001,2,71,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,72,0)
  <!--
"KRN",.84,7981999.001,2,73,0)
      Time (HHMMSS)
"KRN",.84,7981999.001,2,74,0)
  -->
"KRN",.84,7981999.001,2,75,0)
  <xsl:variable name="time"
"KRN",.84,7981999.001,2,76,0)
                select="concat(substring-after($dt,'.'),'000000')"/>
"KRN",.84,7981999.001,2,77,0)
  <xsl:if test="number($time)>0">
"KRN",.84,7981999.001,2,78,0)
   <xsl:text>@</xsl:text>
"KRN",.84,7981999.001,2,79,0)
   <xsl:value-of select="substring($time,1,2)"/>
"KRN",.84,7981999.001,2,80,0)
   <xsl:text>:</xsl:text>
"KRN",.84,7981999.001,2,81,0)
   <xsl:value-of select="substring($time,3,2)"/>
"KRN",.84,7981999.001,2,82,0)
  </xsl:if>
"KRN",.84,7981999.001,2,83,0)
 </xsl:if>
"KRN",.84,7981999.001,2,84,0)
</xsl:template>
"KRN",.84,7981999.001,2,85,0)
 
"KRN",.84,7981999.001,2,86,0)
<xsl:template name="HUPatientsHeader">
"KRN",.84,7981999.001,2,87,0)
 <xsl:value-of select="/REPORT/PARAMETERS/MAXUTNUM"/>
"KRN",.84,7981999.001,2,88,0)
 <xsl:text> patient(s) with highest utilization</xsl:text>
"KRN",.84,7981999.001,2,89,0)
</xsl:template>
"KRN",.84,7981999.001,2,90,0)
 
"KRN",.84,7981999.001,2,91,0)
<!-- Conditional hyperlink -->
"KRN",.84,7981999.001,2,92,0)
 
"KRN",.84,7981999.001,2,93,0)
<xsl:template name="HyperLink">
"KRN",.84,7981999.001,2,94,0)
 <xsl:param name="href" select="''"/>
"KRN",.84,7981999.001,2,95,0)
 <xsl:param name="keep" select="0"/>
"KRN",.84,7981999.001,2,96,0)
 <xsl:param name="name" select="''"/>
"KRN",.84,7981999.001,2,97,0)
 <xsl:param name="text" select="."/>
"KRN",.84,7981999.001,2,98,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,99,0)
  <xsl:when test="$text=''"><xsl:text>&#160;</xsl:text></xsl:when>
"KRN",.84,7981999.001,2,100,0)
  <xsl:when test="boolean($keep) or not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,101,0)
   <a>
"KRN",.84,7981999.001,2,102,0)
    <xsl:if test="$name!=''">
"KRN",.84,7981999.001,2,103,0)
     <xsl:attribute name="name">
"KRN",.84,7981999.001,2,104,0)
      <xsl:value-of select="$name"/>
"KRN",.84,7981999.001,2,105,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,106,0)
    </xsl:if>
"KRN",.84,7981999.001,2,107,0)
    <xsl:if test="$href!=''">
"KRN",.84,7981999.001,2,108,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,109,0)
      <xsl:value-of select="$href"/>
"KRN",.84,7981999.001,2,110,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,111,0)
    </xsl:if>
"KRN",.84,7981999.001,2,112,0)
    <xsl:value-of select="$text"/>
"KRN",.84,7981999.001,2,113,0)
   </a>
"KRN",.84,7981999.001,2,114,0)
  </xsl:when>
"KRN",.84,7981999.001,2,115,0)
  <xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
"KRN",.84,7981999.001,2,116,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,117,0)
</xsl:template>
"KRN",.84,7981999.001,2,118,0)
 
"KRN",.84,7981999.001,2,119,0)
<!-- Makes the parent container scrollable -->
"KRN",.84,7981999.001,2,120,0)
 
"KRN",.84,7981999.001,2,121,0)
<xsl:template name="MakeScrollable">
"KRN",.84,7981999.001,2,122,0)
 <xsl:param name="condition" select="0"/>
"KRN",.84,7981999.001,2,123,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,124,0)
  <xsl:when test="$condition">
"KRN",.84,7981999.001,2,125,0)
   <xsl:attribute name="class">scrollableContainer</xsl:attribute>
"KRN",.84,7981999.001,2,126,0)
  </xsl:when>
"KRN",.84,7981999.001,2,127,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,128,0)
   <xsl:attribute name="class">simpleContainer</xsl:attribute>
"KRN",.84,7981999.001,2,129,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,130,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,131,0)
</xsl:template>
"KRN",.84,7981999.001,2,132,0)
 
"KRN",.84,7981999.001,2,133,0)
<!-- Outputs content of the multivalued report parameter -->
"KRN",.84,7981999.001,2,134,0)
 
"KRN",.84,7981999.001,2,135,0)
<xsl:template name="ParamsList">
"KRN",.84,7981999.001,2,136,0)
 <xsl:param name="heading"/>
"KRN",.84,7981999.001,2,137,0)
 <xsl:param name="list" select="."/>
"KRN",.84,7981999.001,2,138,0)
 <tr>
"KRN",.84,7981999.001,2,139,0)
  <th scope="row">
"KRN",.84,7981999.001,2,140,0)
   <xsl:value-of select="concat($heading,':&#160;')"/>
"KRN",.84,7981999.001,2,141,0)
  </th>
"KRN",.84,7981999.001,2,142,0)
  <td>
"KRN",.84,7981999.001,2,143,0)
   <xsl:if test="$list/@DESCR">
"KRN",.84,7981999.001,2,144,0)
    <xsl:value-of select="$list/@DESCR"/><br/>
"KRN",.84,7981999.001,2,145,0)
   </xsl:if>
"KRN",.84,7981999.001,2,146,0)
   <xsl:if test="$list='ALL'">ALL</xsl:if>
"KRN",.84,7981999.001,2,147,0)
   <xsl:for-each select="$list/*">
"KRN",.84,7981999.001,2,148,0)
    <xsl:sort select="."/>
"KRN",.84,7981999.001,2,149,0)
    <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,150,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,151,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,152,0)
  </td>
"KRN",.84,7981999.001,2,153,0)
 </tr>
"KRN",.84,7981999.001,2,154,0)
</xsl:template>
"KRN",.84,7981999.001,2,155,0)
 
"KRN",.84,7981999.001,2,156,0)
<!-- Outputs singular or plural form of the word -->
"KRN",.84,7981999.001,2,157,0)
 
"KRN",.84,7981999.001,2,158,0)
<xsl:template name="Plural">
"KRN",.84,7981999.001,2,159,0)
 <xsl:param name="qnty" select="0"/>
"KRN",.84,7981999.001,2,160,0)
 <xsl:param name="sq" select="0"/>
"KRN",.84,7981999.001,2,161,0)
 <xsl:param name="word" select="."/>
"KRN",.84,7981999.001,2,162,0)
 <xsl:if test="$sq=0">
"KRN",.84,7981999.001,2,163,0)
  <xsl:value-of select="$qnty"/><xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,164,0)
 </xsl:if>
"KRN",.84,7981999.001,2,165,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,166,0)
  <xsl:when test="$qnty=1">
"KRN",.84,7981999.001,2,167,0)
   <xsl:value-of select="substring-before($word,'^')"/>
"KRN",.84,7981999.001,2,168,0)
  </xsl:when>
"KRN",.84,7981999.001,2,169,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,170,0)
   <xsl:value-of select="substring-after($word,'^')"/>
"KRN",.84,7981999.001,2,171,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,172,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,173,0)
</xsl:template>
"KRN",.84,7981999.001,2,174,0)
 
"KRN",.84,7981999.001,2,175,0)
<!-- Formats basic information about the report -->
"KRN",.84,7981999.001,2,176,0)
 
"KRN",.84,7981999.001,2,177,0)
<xsl:template name="ReportInfo">
"KRN",.84,7981999.001,2,178,0)
 <xsl:variable name="HDR" select="/REPORT/HEADER"/>
"KRN",.84,7981999.001,2,179,0)
 <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,180,0)
  <tr>
"KRN",.84,7981999.001,2,181,0)
   <th scope="row">Report&#160;Created:&#160;</th>
"KRN",.84,7981999.001,2,182,0)
   <td>
"KRN",.84,7981999.001,2,183,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,184,0)
     <xsl:with-param name="dt" select="$HDR/DATE"/>
"KRN",.84,7981999.001,2,185,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,186,0)
   </td>
"KRN",.84,7981999.001,2,187,0)
  </tr>
"KRN",.84,7981999.001,2,188,0)
  <tr>
"KRN",.84,7981999.001,2,189,0)
   <th scope="row">Task&#160;Number:&#160;</th>
"KRN",.84,7981999.001,2,190,0)
   <td>
"KRN",.84,7981999.001,2,191,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981999.001,2,192,0)
     <xsl:with-param name="value" select="$HDR/TASK_NUMBER"/>
"KRN",.84,7981999.001,2,193,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,194,0)
   </td>
"KRN",.84,7981999.001,2,195,0)
  </tr>
"KRN",.84,7981999.001,2,196,0)
  <tr>
"KRN",.84,7981999.001,2,197,0)
   <th scope="row">Last&#160;Registry&#160;Update:&#160;</th>
"KRN",.84,7981999.001,2,198,0)
   <td>
"KRN",.84,7981999.001,2,199,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,200,0)
     <xsl:with-param name="dt" select="$HDR/UPDATED_UNTIL"/>
"KRN",.84,7981999.001,2,201,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,202,0)
   </td>
"KRN",.84,7981999.001,2,203,0)
  </tr>
"KRN",.84,7981999.001,2,204,0)
  <tr>
"KRN",.84,7981999.001,2,205,0)
   <th scope="row">Last&#160;Data&#160;Extraction:&#160;</th>
"KRN",.84,7981999.001,2,206,0)
   <td>
"KRN",.84,7981999.001,2,207,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,208,0)
     <xsl:with-param name="dt" select="$HDR/EXTRACTED_UNTIL"/>
"KRN",.84,7981999.001,2,209,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,210,0)
   </td>
"KRN",.84,7981999.001,2,211,0)
  </tr>
"KRN",.84,7981999.001,2,212,0)
 </table>
"KRN",.84,7981999.001,2,213,0)
</xsl:template>
"KRN",.84,7981999.001,2,214,0)
 
"KRN",.84,7981999.001,2,215,0)
<!-- Default report summary -->
"KRN",.84,7981999.001,2,216,0)
 
"KRN",.84,7981999.001,2,217,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981999.001,2,218,0)
 <xsl:variable name="SUMMARY" select="/REPORT/SUMMARY"/>
"KRN",.84,7981999.001,2,219,0)
 <xsl:if test="$SUMMARY/*[1]">
"KRN",.84,7981999.001,2,220,0)
  <div class="reportSummary">
"KRN",.84,7981999.001,2,221,0)
   <xsl:apply-templates select="$SUMMARY"/>
"KRN",.84,7981999.001,2,222,0)
  </div>
"KRN",.84,7981999.001,2,223,0)
 </xsl:if>
"KRN",.84,7981999.001,2,224,0)
</xsl:template>
"KRN",.84,7981999.001,2,225,0)
 
"KRN",.84,7981999.001,2,226,0)
<!-- Indicator of an empty table -->
"KRN",.84,7981999.001,2,227,0)
 
"KRN",.84,7981999.001,2,228,0)
<xsl:template name="TableNoData">
"KRN",.84,7981999.001,2,229,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,230,0)
   <tr><td>No data has been found.</td></tr>
"KRN",.84,7981999.001,2,231,0)
 </table>
"KRN",.84,7981999.001,2,232,0)
</xsl:template>
"KRN",.84,7981999.001,2,233,0)
 
"KRN",.84,7981999.001,2,234,0)
<!--
"KRN",.84,7981999.001,2,235,0)
=========================================================================
"KRN",.84,7981999.001,2,236,0)
                              REPORT HEADER
"KRN",.84,7981999.001,2,237,0)
=========================================================================
"KRN",.84,7981999.001,2,238,0)
-->
"KRN",.84,7981999.001,2,239,0)
 
"KRN",.84,7981999.001,2,240,0)
<xsl:template name="ReportHeader">
"KRN",.84,7981999.001,2,241,0)
 <xsl:variable name="mvplist" select="/REPORT/PARAMETERS/*[*[1]]"/>
"KRN",.84,7981999.001,2,242,0)
 <xsl:variable name="notecnt" select="count(/REPORT/HEADER/NOTES/*)"/>
"KRN",.84,7981999.001,2,243,0)
 <div class="reportHeader">
"KRN",.84,7981999.001,2,244,0)
  <table width="100%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,245,0)
   <tr>
"KRN",.84,7981999.001,2,246,0)
    <td style="text-align:left">
"KRN",.84,7981999.001,2,247,0)
     <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,248,0)
      <xsl:apply-templates select="/REPORT/PARAMETERS/*[not(*[1])]"/>
"KRN",.84,7981999.001,2,249,0)
     </table>
"KRN",.84,7981999.001,2,250,0)
    </td>
"KRN",.84,7981999.001,2,251,0)
    <td style="text-align:right; padding-left:3%; width:10%">
"KRN",.84,7981999.001,2,252,0)
     <xsl:call-template name="ReportInfo"/>
"KRN",.84,7981999.001,2,253,0)
    </td>
"KRN",.84,7981999.001,2,254,0)
   </tr>
"KRN",.84,7981999.001,2,255,0)
  </table>
"KRN",.84,7981999.001,2,256,0)
  <xsl:if test="$mvplist[1]">
"KRN",.84,7981999.001,2,257,0)
   <table style="width:100%; margin-top:1%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,258,0)
    <xsl:apply-templates select="$mvplist"/>
"KRN",.84,7981999.001,2,259,0)
   </table>
"KRN",.84,7981999.001,2,260,0)
  </xsl:if>
"KRN",.84,7981999.001,2,261,0)
  <xsl:if test="/REPORT//PATIENT[1]">
"KRN",.84,7981999.001,2,262,0)
   <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981999.001,2,263,0)
    This report contains confidential patient information and must be
"KRN",.84,7981999.001,2,264,0)
    handled in accordance with established policies.
"KRN",.84,7981999.001,2,265,0)
   </div>
"KRN",.84,7981999.001,2,266,0)
  </xsl:if>
"KRN",.84,7981999.001,2,267,0)
  <xsl:if test="$notecnt>0">
"KRN",.84,7981999.001,2,268,0)
   <dl style="text-align:left">
"KRN",.84,7981999.001,2,269,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,270,0)
     <xsl:when test="$notecnt>1">
"KRN",.84,7981999.001,2,271,0)
      <xsl:for-each select="/REPORT/HEADER/NOTES/*">
"KRN",.84,7981999.001,2,272,0)
       <dt>Note #<xsl:value-of select="position()"/>:</dt>
"KRN",.84,7981999.001,2,273,0)
       <dd><xsl:apply-templates select="."/></dd>
"KRN",.84,7981999.001,2,274,0)
      </xsl:for-each>
"KRN",.84,7981999.001,2,275,0)
     </xsl:when>
"KRN",.84,7981999.001,2,276,0)
     <xsl:otherwise>
"KRN",.84,7981999.001,2,277,0)
      <dt>Note:</dt>
"KRN",.84,7981999.001,2,278,0)
      <dd><xsl:apply-templates select="/REPORT/HEADER/NOTES/*"/></dd>
"KRN",.84,7981999.001,2,279,0)
     </xsl:otherwise>
"KRN",.84,7981999.001,2,280,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,281,0)
   </dl>
"KRN",.84,7981999.001,2,282,0)
  </xsl:if>
"KRN",.84,7981999.001,2,283,0)
 </div>
"KRN",.84,7981999.001,2,284,0)
</xsl:template>
"KRN",.84,7981999.001,2,285,0)
 
"KRN",.84,7981999.001,2,286,0)
<xsl:template match="HEADER/NOTES/AGE">
"KRN",.84,7981999.001,2,287,0)
 Age of patients is calculated as of the date when the report is run
"KRN",.84,7981999.001,2,288,0)
 (<xsl:call-template name="DateTime"/>). If a patient died then the
"KRN",.84,7981999.001,2,289,0)
 age is calculated as of date of death.
"KRN",.84,7981999.001,2,290,0)
</xsl:template>
"KRN",.84,7981999.001,2,291,0)
 
"KRN",.84,7981999.001,2,292,0)
<xsl:template match="HEADER/NOTES/AGE_BASE_DATE">
"KRN",.84,7981999.001,2,293,0)
 Age of patients is calculated as of <xsl:call-template name="DateTime"/>,
"KRN",.84,7981999.001,2,294,0)
 which is the middle of the report date range. If a patient was born after
"KRN",.84,7981999.001,2,295,0)
 this date then the field will be empty. If a patient died before this
"KRN",.84,7981999.001,2,296,0)
 date then the age is calculated as of date of death.
"KRN",.84,7981999.001,2,297,0)
</xsl:template>
"KRN",.84,7981999.001,2,298,0)
 
"KRN",.84,7981999.001,2,299,0)
<xsl:template match="PARAMETERS/CLINICS">
"KRN",.84,7981999.001,2,300,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,301,0)
  <xsl:with-param name="heading" select="'Clinics'"/>
"KRN",.84,7981999.001,2,302,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,303,0)
</xsl:template>
"KRN",.84,7981999.001,2,304,0)
 
"KRN",.84,7981999.001,2,305,0)
<xsl:template match="PARAMETERS/CPTLST">
"KRN",.84,7981999.001,2,306,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,307,0)
  <xsl:with-param name="heading" select="'CPT'"/>
"KRN",.84,7981999.001,2,308,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,309,0)
</xsl:template>
"KRN",.84,7981999.001,2,310,0)
 
"KRN",.84,7981999.001,2,311,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,312,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,313,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,314,0)
 <xsl:if test="($dtr/@START!='') and ($dtr/@END!='')">
"KRN",.84,7981999.001,2,315,0)
  <tr>
"KRN",.84,7981999.001,2,316,0)
   <th scope="row">
"KRN",.84,7981999.001,2,317,0)
    <xsl:if test="$title!=''">
"KRN",.84,7981999.001,2,318,0)
     <xsl:value-of select="concat($title,'&#160;')"/>
"KRN",.84,7981999.001,2,319,0)
    </xsl:if>
"KRN",.84,7981999.001,2,320,0)
    <xsl:text>Date&#160;Range:&#160;</xsl:text>
"KRN",.84,7981999.001,2,321,0)
   </th>
"KRN",.84,7981999.001,2,322,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,323,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,324,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,325,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,326,0)
    <xsl:text>&#160;-&#160;</xsl:text>
"KRN",.84,7981999.001,2,327,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,328,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>  
"KRN",.84,7981999.001,2,329,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,330,0)
   </td>
"KRN",.84,7981999.001,2,331,0)
  </tr>
"KRN",.84,7981999.001,2,332,0)
 </xsl:if>
"KRN",.84,7981999.001,2,333,0)
</xsl:template>
"KRN",.84,7981999.001,2,334,0)
 
"KRN",.84,7981999.001,2,335,0)
<!-- 
"KRN",.84,7981999.001,2,336,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,337,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,338,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,339,0)
 <xsl:if test="$dtr/@START!=''">
"KRN",.84,7981999.001,2,340,0)
  <tr>
"KRN",.84,7981999.001,2,341,0)
   <th scope="row"><xsl:value-of select="$title"/> Start&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,342,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,343,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,344,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,345,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,346,0)
   </td>
"KRN",.84,7981999.001,2,347,0)
  </tr>
"KRN",.84,7981999.001,2,348,0)
 </xsl:if>
"KRN",.84,7981999.001,2,349,0)
 <xsl:if test="$dtr/@END!=''">
"KRN",.84,7981999.001,2,350,0)
  <tr>
"KRN",.84,7981999.001,2,351,0)
   <th scope="row"><xsl:value-of select="$title"/> End&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,352,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,353,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,354,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>
"KRN",.84,7981999.001,2,355,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,356,0)
   </td>
"KRN",.84,7981999.001,2,357,0)
  </tr>
"KRN",.84,7981999.001,2,358,0)
 </xsl:if>
"KRN",.84,7981999.001,2,359,0)
</xsl:template>
"KRN",.84,7981999.001,2,360,0)
-->
"KRN",.84,7981999.001,2,361,0)
 
"KRN",.84,7981999.001,2,362,0)
<xsl:template match="PARAMETERS/DIVISIONS">
"KRN",.84,7981999.001,2,363,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,364,0)
  <xsl:with-param name="heading" select="'Divisions'"/>
"KRN",.84,7981999.001,2,365,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,366,0)
</xsl:template>
"KRN",.84,7981999.001,2,367,0)
 
"KRN",.84,7981999.001,2,368,0)
<xsl:template match="PARAMETERS/ICD9LST">
"KRN",.84,7981999.001,2,369,0)
 <tr>
"KRN",.84,7981999.001,2,370,0)
  <th scope="row">ICD-9:&#160;</th>
"KRN",.84,7981999.001,2,371,0)
  <td>
"KRN",.84,7981999.001,2,372,0)
   <dl>
"KRN",.84,7981999.001,2,373,0)
    <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,374,0)
     <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,375,0)
    </xsl:if>
"KRN",.84,7981999.001,2,376,0)
    <xsl:if test=".='ALL'"><dt>ALL</dt></xsl:if>
"KRN",.84,7981999.001,2,377,0)
    <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,378,0)
   </dl>
"KRN",.84,7981999.001,2,379,0)
  </td>
"KRN",.84,7981999.001,2,380,0)
 </tr>
"KRN",.84,7981999.001,2,381,0)
</xsl:template>
"KRN",.84,7981999.001,2,382,0)
 
"KRN",.84,7981999.001,2,383,0)
<xsl:template match="PARAMETERS/ICD9LST/GROUP">
"KRN",.84,7981999.001,2,384,0)
 <dt><b><xsl:value-of select="@NAME"/></b></dt>
"KRN",.84,7981999.001,2,385,0)
 <dd><dl>
"KRN",.84,7981999.001,2,386,0)
  <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,387,0)
   <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,388,0)
  </xsl:if>
"KRN",.84,7981999.001,2,389,0)
  <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,390,0)
   <xsl:sort select="."/>
"KRN",.84,7981999.001,2,391,0)
   <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,392,0)
   <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,393,0)
  </xsl:for-each>
"KRN",.84,7981999.001,2,394,0)
 </dl></dd>
"KRN",.84,7981999.001,2,395,0)
</xsl:template>
"KRN",.84,7981999.001,2,396,0)
 
"KRN",.84,7981999.001,2,397,0)
<xsl:template match="PARAMETERS/ICD9FILT">
"KRN",.84,7981999.001,2,398,0)
 <tr>
"KRN",.84,7981999.001,2,399,0)
  <th scope="row">Other Diagnoses:&#160;</th>
"KRN",.84,7981999.001,2,400,0)
  <td>
"KRN",.84,7981999.001,2,401,0)
   <dl>
"KRN",.84,7981999.001,2,402,0)
    <xsl:if test="@FILTER!=''">
"KRN",.84,7981999.001,2,403,0)
      <xsl:choose>
"KRN",.84,7981999.001,2,404,0)
        <xsl:when test="@FILTER='EXCLUDE'">
"KRN",.84,7981999.001,2,405,0)
          <dt><xsl:text>Exclude</xsl:text></dt>
"KRN",.84,7981999.001,2,406,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,407,0)
        </xsl:when>
"KRN",.84,7981999.001,2,408,0)
        <xsl:when test="@FILTER='INCLUDE'">
"KRN",.84,7981999.001,2,409,0)
          <dt><xsl:text>Include</xsl:text></dt>
"KRN",.84,7981999.001,2,410,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,411,0)
        </xsl:when>
"KRN",.84,7981999.001,2,412,0)
        <xsl:otherwise>
"KRN",.84,7981999.001,2,413,0)
          <dt><xsl:text>All</xsl:text></dt>
"KRN",.84,7981999.001,2,414,0)
        </xsl:otherwise>
"KRN",.84,7981999.001,2,415,0)
      </xsl:choose>
"KRN",.84,7981999.001,2,416,0)
    </xsl:if>
"KRN",.84,7981999.001,2,417,0)
   </dl>
"KRN",.84,7981999.001,2,418,0)
  </td>
"KRN",.84,7981999.001,2,419,0)
 </tr>
"KRN",.84,7981999.001,2,420,0)
</xsl:template>
"KRN",.84,7981999.001,2,421,0)
 
"KRN",.84,7981999.001,2,422,0)
<xsl:template match="PARAMETERS/ICD9FILT/GROUP">
"KRN",.84,7981999.001,2,423,0)
 <dt><b><xsl:value-of select="@ID"/></b></dt>
"KRN",.84,7981999.001,2,424,0)
 <dd><dl>
"KRN",.84,7981999.001,2,425,0)
  <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,426,0)
   <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,427,0)
   <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,428,0)
   <xsl:value-of select="@ID"/>
"KRN",.84,7981999.001,2,429,0)
  </xsl:for-each>
"KRN",.84,7981999.001,2,430,0)
 </dl></dd>
"KRN",.84,7981999.001,2,431,0)
</xsl:template> 
"KRN",.84,7981999.001,2,432,0)
 
"KRN",.84,7981999.001,2,433,0)
<xsl:template match="PARAMETERS/LOCAL_FIELDS">
"KRN",.84,7981999.001,2,434,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,435,0)
  <xsl:with-param name="heading" select="'Local Fields'"/>
"KRN",.84,7981999.001,2,436,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,437,0)
</xsl:template>
"KRN",.84,7981999.001,2,438,0)
 
"KRN",.84,7981999.001,2,439,0)
<xsl:template match="PARAMETERS/OPTIONS">
"KRN",.84,7981999.001,2,440,0)
 <tr>
"KRN",.84,7981999.001,2,441,0)
  <th scope="row">Options:&#160;</th>
"KRN",.84,7981999.001,2,442,0)
  <td>
"KRN",.84,7981999.001,2,443,0)
    <xsl:if test="@ALL_FILLS='1'"><xsl:text>All fills</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,444,0)
    <xsl:if test="@RECENT_FILLS='1'"><xsl:text>Most recent fill in time 
"KRN",.84,7981999.001,2,445,0)
period</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,446,0)
    <xsl:if test="@RECENT_FILLS!='1' and @ALL_FILLS!='1'"><xsl:value-of 
"KRN",.84,7981999.001,2,447,0)
select="."/></xsl:if>
"KRN",.84,7981999.001,2,448,0)
  </td>
"KRN",.84,7981999.001,2,449,0)
 </tr>
"KRN",.84,7981999.001,2,450,0)
 <xsl:if test="@MOST_RECENT='1'">
"KRN",.84,7981999.001,2,451,0)
  <tr>
"KRN",.84,7981999.001,2,452,0)
   <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,453,0)
   <td><xsl:text>Most Recent</xsl:text></td>
"KRN",.84,7981999.001,2,454,0)
  </tr>
"KRN",.84,7981999.001,2,455,0)
 </xsl:if>
"KRN",.84,7981999.001,2,456,0)
 <xsl:if test="@MAX_DATE='1'">
"KRN",.84,7981999.001,2,457,0)
  <tr>
"KRN",.84,7981999.001,2,458,0)
   <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,459,0)
   <td>
"KRN",.84,7981999.001,2,460,0)
    <xsl:text>As of </xsl:text>
"KRN",.84,7981999.001,2,461,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,462,0)
     <xsl:with-param name="dt" select="../MAX_DATE"/>
"KRN",.84,7981999.001,2,463,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,464,0)
   </td>
"KRN",.84,7981999.001,2,465,0)
  </tr>
"KRN",.84,7981999.001,2,466,0)
 </xsl:if>
"KRN",.84,7981999.001,2,467,0)
</xsl:template>
"KRN",.84,7981999.001,2,468,0)
 
"KRN",.84,7981999.001,2,469,0)
<xsl:template match="PARAMETERS/OTHER_REGISTRIES">
"KRN",.84,7981999.001,2,470,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,471,0)
  <xsl:with-param name="heading" select="'Other Registries'"/>
"KRN",.84,7981999.001,2,472,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,473,0)
</xsl:template>
"KRN",.84,7981999.001,2,474,0)
 
"KRN",.84,7981999.001,2,475,0)
<xsl:template match="PARAMETERS/PATIENTS">
"KRN",.84,7981999.001,2,476,0)
 <tr>
"KRN",.84,7981999.001,2,477,0)
  <th scope="row">Patients:&#160;</th>
"KRN",.84,7981999.001,2,478,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,479,0)
 </tr>
"KRN",.84,7981999.001,2,480,0)
</xsl:template>
"KRN",.84,7981999.001,2,481,0)
 
"KRN",.84,7981999.001,2,482,0)
<xsl:template match="PARAMETERS/REGNAME">
"KRN",.84,7981999.001,2,483,0)
 <tr>
"KRN",.84,7981999.001,2,484,0)
  <th scope="row">Registry:&#160;</th>
"KRN",.84,7981999.001,2,485,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,486,0)
 </tr>
"KRN",.84,7981999.001,2,487,0)
</xsl:template>
"KRN",.84,7981999.001,2,488,0)
 
"KRN",.84,7981999.001,2,489,0)
<xsl:template match="PARAMETERS/TASK_COMMENT">
"KRN",.84,7981999.001,2,490,0)
 <tr>
"KRN",.84,7981999.001,2,491,0)
  <th scope="row">Comment:&#160;</th>
"KRN",.84,7981999.001,2,492,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,493,0)
 </tr>
"KRN",.84,7981999.001,2,494,0)
</xsl:template>
"KRN",.84,7981999.001,2,495,0)
 
"KRN",.84,7981999.001,2,496,0)
<xsl:template match="PARAMETERS/UTIL_TYPES">
"KRN",.84,7981999.001,2,497,0)
 <tr>
"KRN",.84,7981999.001,2,498,0)
  <th scope="row">Utilization:&#160;</th>
"KRN",.84,7981999.001,2,499,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,500,0)
 </tr>
"KRN",.84,7981999.001,2,501,0)
</xsl:template>
"KRN",.84,7981999.001,2,502,0)
 
"KRN",.84,7981999.001,2,503,0)
<xsl:template match="PARAMETERS/LRGRANGES">
"KRN",.84,7981999.001,2,504,0)
 <tr>
"KRN",.84,7981999.001,2,505,0)
  <th scope="row">Results:&#160;</th>
"KRN",.84,7981999.001,2,506,0)
  <td>
"KRN",.84,7981999.001,2,507,0)
   <xsl:for-each select="LRGRANGE">
"KRN",.84,7981999.001,2,508,0)
    <xsl:value-of select="."/><br/>
"KRN",.84,7981999.001,2,509,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,510,0)
  </td>
"KRN",.84,7981999.001,2,511,0)
 </tr>
"KRN",.84,7981999.001,2,512,0)
</xsl:template>
"KRN",.84,7981999.001,2,513,0)
 
"KRN",.84,7981999.001,2,514,0)
<xsl:template match="PARAMETERS/DATE_RANGE_3">
"KRN",.84,7981999.001,2,515,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981999.001,2,516,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981999.001,2,517,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,518,0)
</xsl:template>
"KRN",.84,7981999.001,2,519,0)
 
"KRN",.84,7981999.001,2,520,0)
 
"KRN",.84,7981999.001,2,521,0)
<!--
"KRN",.84,7981999.001,2,522,0)
=========================================================================
"KRN",.84,7981999.001,2,523,0)
                       DEFAULT DATA GRID TEMPLATES
"KRN",.84,7981999.001,2,524,0)
=========================================================================
"KRN",.84,7981999.001,2,525,0)
-->
"KRN",.84,7981999.001,2,526,0)
 
"KRN",.84,7981999.001,2,527,0)
<xsl:template name="DataGrid" match="*[@TABLE!='']">
"KRN",.84,7981999.001,2,528,0)
 <xsl:param name="divstyle" select="''"/>
"KRN",.84,7981999.001,2,529,0)
 <xsl:param name="scroll" select="*[31]"/>
"KRN",.84,7981999.001,2,530,0)
 <xsl:variable name="tbldef" select="key('TableDefs',@TABLE)"/>
"KRN",.84,7981999.001,2,531,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,532,0)
  <xsl:when test="*[1]">
"KRN",.84,7981999.001,2,533,0)
   <div>
"KRN",.84,7981999.001,2,534,0)
    <xsl:if test="$divstyle!=''">
"KRN",.84,7981999.001,2,535,0)
     <xsl:attribute name="style">
"KRN",.84,7981999.001,2,536,0)
      <xsl:value-of select="$divstyle"/>
"KRN",.84,7981999.001,2,537,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,538,0)
    </xsl:if>
"KRN",.84,7981999.001,2,539,0)
    <xsl:call-template name="MakeScrollable">
"KRN",.84,7981999.001,2,540,0)
     <xsl:with-param name="condition" select="$scroll"/>
"KRN",.84,7981999.001,2,541,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,542,0)
    <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,543,0)
     <xsl:apply-templates select="$tbldef/@HEADER"/>
"KRN",.84,7981999.001,2,544,0)
     <xsl:apply-templates select="$tbldef/@FOOTER"/>
"KRN",.84,7981999.001,2,545,0)
     <tbody>
"KRN",.84,7981999.001,2,546,0)
      <xsl:apply-templates select="*">
"KRN",.84,7981999.001,2,547,0)
       <xsl:with-param name="seqnum"
"KRN",.84,7981999.001,2,548,0)
            select="count($tbldef/COLUMN[@NAME='#'])"/>
"KRN",.84,7981999.001,2,549,0)
      </xsl:apply-templates>
"KRN",.84,7981999.001,2,550,0)
     </tbody>
"KRN",.84,7981999.001,2,551,0)
    </table>
"KRN",.84,7981999.001,2,552,0)
   </div>
"KRN",.84,7981999.001,2,553,0)
  </xsl:when>
"KRN",.84,7981999.001,2,554,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,555,0)
   <xsl:call-template name="TableNoData"/>
"KRN",.84,7981999.001,2,556,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,557,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,558,0)
</xsl:template>
"KRN",.84,7981999.001,2,559,0)
 
"KRN",.84,7981999.001,2,560,0)
<!-- Default data grid header -->
"KRN",.84,7981999.001,2,561,0)
 
"KRN",.84,7981999.001,2,562,0)
<xsl:template match="HEADER/TBLDEF/@HEADER">
"KRN",.84,7981999.001,2,563,0)
 <thead>
"KRN",.84,7981999.001,2,564,0)
  <tr><xsl:apply-templates select="../COLUMN"/></tr>
"KRN",.84,7981999.001,2,565,0)
 </thead>
"KRN",.84,7981999.001,2,566,0)
</xsl:template>
"KRN",.84,7981999.001,2,567,0)
 
"KRN",.84,7981999.001,2,568,0)
<!-- Default column heading cell -->
"KRN",.84,7981999.001,2,569,0)
 
"KRN",.84,7981999.001,2,570,0)
<xsl:template name="ColumnHeader" match="HEADER/TBLDEF/COLUMN">
"KRN",.84,7981999.001,2,571,0)
 <xsl:param name="column" select="."/>
"KRN",.84,7981999.001,2,572,0)
 <xsl:param name="colname" select="$column/@NAME"/>
"KRN",.84,7981999.001,2,573,0)
 <xsl:param name="sortmode"/>
"KRN",.84,7981999.001,2,574,0)
 <xsl:param name="sort" 
"KRN",.84,7981999.001,2,575,0)
      select="concat($column/../@NAME,'=',$colname,$sortmode)"/>
"KRN",.84,7981999.001,2,576,0)
 <xsl:param name="title" select="$colname"/>
"KRN",.84,7981999.001,2,577,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,578,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,579,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,580,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,581,0)
 <th scope="col">
"KRN",.84,7981999.001,2,582,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,583,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,584,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,585,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,586,0)
  </xsl:if>
"KRN",.84,7981999.001,2,587,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,588,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,589,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,590,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,591,0)
  </xsl:if>
"KRN",.84,7981999.001,2,592,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,593,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,594,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,595,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,596,0)
  </xsl:if>
"KRN",.84,7981999.001,2,597,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,598,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,599,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,600,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,601,0)
  </xsl:if>
"KRN",.84,7981999.001,2,602,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,603,0)
   <xsl:when test="$title=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,604,0)
   <xsl:when test="($sort!='') and not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,605,0)
    <xsl:element name="a">
"KRN",.84,7981999.001,2,606,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,607,0)
      <xsl:text>http://vista/report/sort?</xsl:text>
"KRN",.84,7981999.001,2,608,0)
      <xsl:value-of select="$sort"/>
"KRN",.84,7981999.001,2,609,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,610,0)
     <xsl:value-of select="$title"/>
"KRN",.84,7981999.001,2,611,0)
    </xsl:element>
"KRN",.84,7981999.001,2,612,0)
   </xsl:when>
"KRN",.84,7981999.001,2,613,0)
   <xsl:otherwise><xsl:value-of select="$title"/></xsl:otherwise>
"KRN",.84,7981999.001,2,614,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,615,0)
 </th>
"KRN",.84,7981999.001,2,616,0)
</xsl:template>
"KRN",.84,7981999.001,2,617,0)
 
"KRN",.84,7981999.001,2,618,0)
<!-- Default Footer -->
"KRN",.84,7981999.001,2,619,0)
 
"KRN",.84,7981999.001,2,620,0)
<xsl:template name="DataGridFooter" match="TBLDEF/@FOOTER">
"KRN",.84,7981999.001,2,621,0)
 <xsl:param name="colspan"
"KRN",.84,7981999.001,2,622,0)
      select="count(..//COLUMN[not(child::COLUMN[1])])"/>
"KRN",.84,7981999.001,2,623,0)
 <tfoot><tr><td>
"KRN",.84,7981999.001,2,624,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,625,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,626,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,627,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,628,0)
  </xsl:if>
"KRN",.84,7981999.001,2,629,0)
  <xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,630,0)
 </td></tr></tfoot>
"KRN",.84,7981999.001,2,631,0)
</xsl:template>
"KRN",.84,7981999.001,2,632,0)
 
"KRN",.84,7981999.001,2,633,0)
<!-- Default data grid row -->
"KRN",.84,7981999.001,2,634,0)
 
"KRN",.84,7981999.001,2,635,0)
<xsl:template match="*[@TABLE!='']/*">
"KRN",.84,7981999.001,2,636,0)
 <xsl:param name="seqnum" select="0"/>
"KRN",.84,7981999.001,2,637,0)
 <tr>
"KRN",.84,7981999.001,2,638,0)
  <xsl:if test="$seqnum">
"KRN",.84,7981999.001,2,639,0)
   <td><xsl:value-of select="position()"/></td>
"KRN",.84,7981999.001,2,640,0)
  </xsl:if>
"KRN",.84,7981999.001,2,641,0)
  <xsl:apply-templates select="child::*"/>
"KRN",.84,7981999.001,2,642,0)
 </tr>
"KRN",.84,7981999.001,2,643,0)
</xsl:template>
"KRN",.84,7981999.001,2,644,0)
 
"KRN",.84,7981999.001,2,645,0)
<!-- Data grid cell -->
"KRN",.84,7981999.001,2,646,0)
 
"KRN",.84,7981999.001,2,647,0)
<xsl:template name="TableCell" match="*[@TABLE!='']/*/*">
"KRN",.84,7981999.001,2,648,0)
 <xsl:param name="class"/>
"KRN",.84,7981999.001,2,649,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,650,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,651,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,652,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,653,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,654,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,655,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,656,0)
 <td>
"KRN",.84,7981999.001,2,657,0)
  <xsl:if test="string($class)!=''">
"KRN",.84,7981999.001,2,658,0)
   <xsl:attribute name="class">
"KRN",.84,7981999.001,2,659,0)
    <xsl:value-of select="$class"/>
"KRN",.84,7981999.001,2,660,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,661,0)
  </xsl:if>
"KRN",.84,7981999.001,2,662,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,663,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,664,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,665,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,666,0)
  </xsl:if>
"KRN",.84,7981999.001,2,667,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,668,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,669,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,670,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,671,0)
  </xsl:if>
"KRN",.84,7981999.001,2,672,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,673,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,674,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,675,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,676,0)
  </xsl:if>
"KRN",.84,7981999.001,2,677,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,678,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,679,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,680,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,681,0)
  </xsl:if>
"KRN",.84,7981999.001,2,682,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,683,0)
   <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,684,0)
   <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,685,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,686,0)
     <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,687,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,688,0)
   </xsl:when>
"KRN",.84,7981999.001,2,689,0)
   <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,690,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,691,0)
     <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,692,0)
     <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,693,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,694,0)
   </xsl:when>
"KRN",.84,7981999.001,2,695,0)
   <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,696,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,697,0)
 </td>
"KRN",.84,7981999.001,2,698,0)
</xsl:template>
"KRN",.84,7981999.001,2,699,0)
 
"KRN",.84,7981999.001,2,700,0)
<!-- Default column headings -->
"KRN",.84,7981999.001,2,701,0)
 
"KRN",.84,7981999.001,2,702,0)
<xsl:template match="TBLDEF/COLUMN[@NAME='#']">
"KRN",.84,7981999.001,2,703,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,704,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,705,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,706,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981999.001,2,707,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981999.001,2,708,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,709,0)
</xsl:template>
"KRN",.84,7981999.001,2,710,0)
 
"KRN",.84,7981999.001,2,711,0)
<xsl:template match="COLUMN[@NAME='DATE']">                                    
"KRN",.84,7981999.001,2,712,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,713,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,714,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,715,0)
  <xsl:with-param name="title" select="'Date'"/>                               
"KRN",.84,7981999.001,2,716,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981999.001,2,717,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,718,0)
</xsl:template>
"KRN",.84,7981999.001,2,719,0)
 
"KRN",.84,7981999.001,2,720,0)
<xsl:template match="COLUMN[@NAME='DOD']">
"KRN",.84,7981999.001,2,721,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,722,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,723,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,724,0)
  <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981999.001,2,725,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,726,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,727,0)
</xsl:template>
"KRN",.84,7981999.001,2,728,0)
 
"KRN",.84,7981999.001,2,729,0)
<xsl:template match="COLUMN[@NAME='LAST4']">
"KRN",.84,7981999.001,2,730,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,731,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,732,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,733,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981999.001,2,734,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,735,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,736,0)
</xsl:template>
"KRN",.84,7981999.001,2,737,0)
 
"KRN",.84,7981999.001,2,738,0)
<xsl:template match="COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,739,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,740,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,741,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,742,0)
  <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981999.001,2,743,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,744,0)
</xsl:template>
"KRN",.84,7981999.001,2,745,0)
 
"KRN",.84,7981999.001,2,746,0)
<xsl:template match="TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,747,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,748,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,749,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,750,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981999.001,2,751,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,752,0)
</xsl:template>
"KRN",.84,7981999.001,2,753,0)
 
"KRN",.84,7981999.001,2,754,0)
<!-- Default cells -->
"KRN",.84,7981999.001,2,755,0)
 
"KRN",.84,7981999.001,2,756,0)
<xsl:template match="PATIENT/DOD">
"KRN",.84,7981999.001,2,757,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,758,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,759,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981999.001,2,760,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,761,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,762,0)
</xsl:template>
"KRN",.84,7981999.001,2,763,0)
 
"KRN",.84,7981999.001,2,764,0)
<xsl:template match="*[@TABLE!='']/*/NAME">
"KRN",.84,7981999.001,2,765,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,766,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,767,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981999.001,2,768,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,769,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,770,0)
</xsl:template>
"KRN",.84,7981999.001,2,771,0)
 
"KRN",.84,7981999.001,2,772,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,3,0)
^.845
"KRN",8994,2835,-1)
0^1
"KRN",8994,2835,0)
ROR GET M VERSION^VERSRV^RORUTL11^1^R
"KRN",8994,2835,1,0)
^^3^3^3101220^
"KRN",8994,2835,1,1,0)
Used by CCR to return an agreed-upon version number to the GUI 
"KRN",8994,2835,1,2,0)
application.  The GUI will analyze the version number and display a 
"KRN",8994,2835,1,3,0)
message if the client and server are out of sync.
"MBREQ")
0
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"PKG",554,-1)
1^1
"PKG",554,0)
CLINICAL CASE REGISTRIES^ROR^CLINICAL REGISTRIES
"PKG",554,20,0)
^9.402P^^
"PKG",554,22,0)
^9.49I^1^1
"PKG",554,22,1,0)
1.5^3060208^3060308^35193
"PKG",554,22,1,"PAH",1,0)
13^3101220
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
26
"RTN","ROREXT02")
0^27^B43965789^B43965789
"RTN","ROREXT02",1,0)
ROREXT02 ;HCIOFO/SG - DEFAULT MESSAGE BUILDER ;12/7/05 10:44am
"RTN","ROREXT02",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,13**;Feb 17, 2006;Build 27
"RTN","ROREXT02",3,0)
 ;
"RTN","ROREXT02",4,0)
 ; This routine uses the following IAs:
"RTN","ROREXT02",5,0)
 ;
"RTN","ROREXT02",6,0)
 ; #2056    $$GET1^DIQ (supported)
"RTN","ROREXT02",7,0)
 Q
"RTN","ROREXT02",8,0)
 ;
"RTN","ROREXT02",9,0)
 ;***** CHECKS IF DEMOGRAPHIC DATA HAS BEEN UPDATED
"RTN","ROREXT02",10,0)
 ;
"RTN","ROREXT02",11,0)
 ; .RGIENLST     Reference to a local array containing registry
"RTN","ROREXT02",12,0)
 ;               IENs as subscripts and IENs of the corresponding
"RTN","ROREXT02",13,0)
 ;               patient's registry records as values.
"RTN","ROREXT02",14,0)
 ;
"RTN","ROREXT02",15,0)
 ; Return Values:
"RTN","ROREXT02",16,0)
 ;       <0  Error Code
"RTN","ROREXT02",17,0)
 ;        0  Demographic data is unchanged
"RTN","ROREXT02",18,0)
 ;       >0  Demographic data has been updated
"RTN","ROREXT02",19,0)
 ;
"RTN","ROREXT02",20,0)
DEMCHK(RGIENLST) ;
"RTN","ROREXT02",21,0)
 N DEM,IENS,RC,REGIEN,RORMSG
"RTN","ROREXT02",22,0)
 S (DEM,RC,REGIEN)=0
"RTN","ROREXT02",23,0)
 F  S REGIEN=$O(RGIENLST(REGIEN))  Q:REGIEN'>0  D  Q:DEM!(RC<0)
"RTN","ROREXT02",24,0)
 . S IENS=+RGIENLST(REGIEN)_","  Q:IENS'>0
"RTN","ROREXT02",25,0)
 . S DEM=+$$GET1^DIQ(798,IENS,4,"I",,"RORMSG")
"RTN","ROREXT02",26,0)
 . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","ROREXT02",27,0)
 Q $S(RC<0:RC,1:DEM)
"RTN","ROREXT02",28,0)
 ;
"RTN","ROREXT02",29,0)
 ;***** EXTRACTS AND PREPARES LABORATORY DATA
"RTN","ROREXT02",30,0)
 ;
"RTN","ROREXT02",31,0)
 ; PTIEN         Patient IEN
"RTN","ROREXT02",32,0)
 ;
"RTN","ROREXT02",33,0)
 ; .DXDTS        Reference to a local variable where the
"RTN","ROREXT02",34,0)
 ;               data extraction time frames are stored.
"RTN","ROREXT02",35,0)
 ;
"RTN","ROREXT02",36,0)
 ; [HDTMODE]     If this parameter is defined and non-zero, start and
"RTN","ROREXT02",37,0)
 ;               end dates are specimen collection dates. Otherwise,
"RTN","ROREXT02",38,0)
 ;               they are dates of the results.
"RTN","ROREXT02",39,0)
 ;
"RTN","ROREXT02",40,0)
 ; The function uses node ^TMP("RORTMP",$J) as a temporary storage.
"RTN","ROREXT02",41,0)
 ;
"RTN","ROREXT02",42,0)
 ; Return Values:
"RTN","ROREXT02",43,0)
 ;       <0  Error Code
"RTN","ROREXT02",44,0)
 ;        0  Ok
"RTN","ROREXT02",45,0)
 ;
"RTN","ROREXT02",46,0)
LABDATA(PTIEN,DXDTS,HDTMODE) ;
"RTN","ROREXT02",47,0)
 N ENDT,IDX,RC,RORTMP,STDT,TMP
"RTN","ROREXT02",48,0)
 S RORTMP=$$ALLOC^RORTMP()
"RTN","ROREXT02",49,0)
 S (IDX,RC)=0
"RTN","ROREXT02",50,0)
 F  S IDX=$O(DXDTS(1,IDX))  Q:IDX'>0  D  Q:RC<0
"RTN","ROREXT02",51,0)
 . S STDT=$P(DXDTS(1,IDX),U),ENDT=$P(DXDTS(1,IDX),U,2)
"RTN","ROREXT02",52,0)
 . ;--- Get the Lab results
"RTN","ROREXT02",53,0)
 . K @RORTMP  S TMP=$S($G(HDTMODE):"^CD",1:"^RAD")
"RTN","ROREXT02",54,0)
 . S RC=$$LABRSLTS^RORUTL02(PTIEN,STDT_TMP,ENDT_TMP,RORTMP)
"RTN","ROREXT02",55,0)
 . Q:RC<0
"RTN","ROREXT02",56,0)
 . ;--- Call the Lab data post-processor
"RTN","ROREXT02",57,0)
 . S RC=$$LABPROC(RORTMP,PTIEN)
"RTN","ROREXT02",58,0)
 . ;---
"RTN","ROREXT02",59,0)
 D FREE^RORTMP(RORTMP)
"RTN","ROREXT02",60,0)
 Q $S(RC<0:RC,1:0)
"RTN","ROREXT02",61,0)
 ;
"RTN","ROREXT02",62,0)
 ;***** LABORATORY DATA POST-PROCESSOR
"RTN","ROREXT02",63,0)
 ;
"RTN","ROREXT02",64,0)
 ; ROR8TMP       Closed root of the array (local or global), which
"RTN","ROREXT02",65,0)
 ;               contains the data loaded by the $$GCPR^LA7QRY
"RTN","ROREXT02",66,0)
 ;
"RTN","ROREXT02",67,0)
 ; PTIEN         Patient IEN
"RTN","ROREXT02",68,0)
 ;
"RTN","ROREXT02",69,0)
 ; Return Values:
"RTN","ROREXT02",70,0)
 ;       <0  Error Code
"RTN","ROREXT02",71,0)
 ;        0  Ok
"RTN","ROREXT02",72,0)
 ;
"RTN","ROREXT02",73,0)
LABPROC(ROR8TMP,PTIEN) ;
"RTN","ROREXT02",74,0)
 N BUF,CS,DFLTSITE,FS,I,J,LABC,SEG,TMP
"RTN","ROREXT02",75,0)
 ;--- Extract separators from the MSH segment
"RTN","ROREXT02",76,0)
 S BUF=$G(@ROR8TMP@(1))
"RTN","ROREXT02",77,0)
 S:$E(BUF,1,3)="MSH" CS=$E(BUF,5)
"RTN","ROREXT02",78,0)
 S:$G(CS)="" CS="^"
"RTN","ROREXT02",79,0)
 ;--- Initialize constants and variables
"RTN","ROREXT02",80,0)
 S LABC="LABC"_CS_"Lab Comment"_CS_"VA080"
"RTN","ROREXT02",81,0)
 ;--- Get the default station number and name
"RTN","ROREXT02",82,0)
 S DFLTSITE=$$SITE^RORUTL03(CS)
"RTN","ROREXT02",83,0)
 ;
"RTN","ROREXT02",84,0)
 ;--- Add the results to the message
"RTN","ROREXT02",85,0)
 S I=0
"RTN","ROREXT02",86,0)
 F  S I=$O(@ROR8TMP@(I))  Q:I=""  D
"RTN","ROREXT02",87,0)
 . ;--- Load the full segment
"RTN","ROREXT02",88,0)
 . D LOADSEG^RORHL7A(.SEG,$NA(@ROR8TMP@(I)))  Q:$G(SEG(0))=""
"RTN","ROREXT02",89,0)
 . D
"RTN","ROREXT02",90,0)
 . . ;--- Use the default station if the local one is missing
"RTN","ROREXT02",91,0)
 . . I SEG(0)="OBX"  D  Q
"RTN","ROREXT02",92,0)
 . . . S:$P($G(SEG(15)),CS)="" SEG(15)=DFLTSITE
"RTN","ROREXT02",93,0)
 . . ;--- Leave only the code of the Provider
"RTN","ROREXT02",94,0)
 . . I SEG(0)="OBR"  D  Q
"RTN","ROREXT02",95,0)
 . . . S SEG(16)=+$G(SEG(16)),SEG(24)="LAB"
"RTN","ROREXT02",96,0)
 . . ;--- Replace NTE's with OBX's
"RTN","ROREXT02",97,0)
 . . I SEG(0)="NTE"  D  Q
"RTN","ROREXT02",98,0)
 . . . K TMP  M TMP=SEG(3)  K SEG
"RTN","ROREXT02",99,0)
 . . . S SEG(0)="OBX"
"RTN","ROREXT02",100,0)
 . . . S SEG(2)="ST",SEG(3)=LABC,SEG(4)="LCOMM"
"RTN","ROREXT02",101,0)
 . . . M SEG(5)=TMP
"RTN","ROREXT02",102,0)
 . . . S SEG(11)="F"
"RTN","ROREXT02",103,0)
 . . ;--- Skip all other segments
"RTN","ROREXT02",104,0)
 . . K SEG
"RTN","ROREXT02",105,0)
 . ;--- Store the segment
"RTN","ROREXT02",106,0)
 . D:$D(SEG)>1 ADDSEG^RORHL7(.SEG)
"RTN","ROREXT02",107,0)
 Q 0
"RTN","ROREXT02",108,0)
 ;
"RTN","ROREXT02",109,0)
 ;***** EXTRACTS PATIENT'S DATA AND CREATES THE MESSAGE BODY
"RTN","ROREXT02",110,0)
 ;
"RTN","ROREXT02",111,0)
 ; PTIEN         Patient IEN
"RTN","ROREXT02",112,0)
 ;
"RTN","ROREXT02",113,0)
 ; .RGIENLST     Reference to a local array containing registry
"RTN","ROREXT02",114,0)
 ;               IENs as subscripts and IENs of the corresponding
"RTN","ROREXT02",115,0)
 ;               patient's registry records as values.
"RTN","ROREXT02",116,0)
 ;
"RTN","ROREXT02",117,0)
 ; .DXDTS        Either a single time frame in StartDate^EndDate
"RTN","ROREXT02",118,0)
 ;               format or a reference to a local variable containing
"RTN","ROREXT02",119,0)
 ;               the list of data extraction time frames. The main
"RTN","ROREXT02",120,0)
 ;               time frame should be stored in the root node:
"RTN","ROREXT02",121,0)
 ;
"RTN","ROREXT02",122,0)
 ;  DXDTS(         MainStartDate^MainEndDate  (FileMan)
"RTN","ROREXT02",123,0)
 ;    DataArea,
"RTN","ROREXT02",124,0)
 ;      i)         StartDate^EndDate          (FileMan)
"RTN","ROREXT02",125,0)
 ;
"RTN","ROREXT02",126,0)
 ;               See the $$DXPERIOD^ROREXTUT function for details.
"RTN","ROREXT02",127,0)
 ;
"RTN","ROREXT02",128,0)
 ; [HDTMODE]     This parameter is defined and non-zero during the
"RTN","ROREXT02",129,0)
 ;               historical data extraction.
"RTN","ROREXT02",130,0)
 ;
"RTN","ROREXT02",131,0)
 ; Return Values:
"RTN","ROREXT02",132,0)
 ;       <0  Error Code
"RTN","ROREXT02",133,0)
 ;        0  Ok
"RTN","ROREXT02",134,0)
 ;       >0  Nothing to send
"RTN","ROREXT02",135,0)
 ;
"RTN","ROREXT02",136,0)
MESSAGE(PTIEN,RGIENLST,DXDTS,HDTMODE) ;
"RTN","ROREXT02",137,0)
 N RORDEM        ; Update demographics
"RTN","ROREXT02",138,0)
 ;
"RTN","ROREXT02",139,0)
 N CLINPTR,CSRPTR,DEMPTR,PV1PTR,RC,REGIEN,RORMSG,RORPTR,TMP
"RTN","ROREXT02",140,0)
 S HDTMODE=+$G(HDTMODE)
"RTN","ROREXT02",141,0)
 ;--- If only the main time frame is provided then
"RTN","ROREXT02",142,0)
 ;--- generate the data-specific ones automatically
"RTN","ROREXT02",143,0)
 I $D(DXDTS)<10  D  D DXMERGE^ROREXTUT(.DXDTS)
"RTN","ROREXT02",144,0)
 . D DXADD^ROREXTUT(.DXDTS,$P(DXDTS,U),$P(DXDTS,U,2),0,1)
"RTN","ROREXT02",145,0)
 ;--- Initialize variables
"RTN","ROREXT02",146,0)
 S RC=$$INIT^RORHL7()  Q:RC<0 RC
"RTN","ROREXT02",147,0)
 S RORDEM=$$DEMCHK(.RGIENLST)
"RTN","ROREXT02",148,0)
 ;
"RTN","ROREXT02",149,0)
 ;=== Demographic data segments
"RTN","ROREXT02",150,0)
 S DEMPTR=$$PTR^RORHL7
"RTN","ROREXT02",151,0)
 S RC=$$PID^RORHL01(PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",152,0)
 ;--- Period of Service
"RTN","ROREXT02",153,0)
 S RC=$$ZSP^RORHL01(PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",154,0)
 ;--- Rated Disabilities
"RTN","ROREXT02",155,0)
 S RC=$$ZRD^RORHL01(PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",156,0)
 ;
"RTN","ROREXT02",157,0)
 ;=== Inpatient and Outpatient Encounter Data
"RTN","ROREXT02",158,0)
 S PV1PTR=$$PTR^RORHL7
"RTN","ROREXT02",159,0)
 ;--- Inpatient
"RTN","ROREXT02",160,0)
 S RC=$$EN1^RORHL08(PTIEN,.DXDTS,"PV1")  Q:RC<0 RC
"RTN","ROREXT02",161,0)
 ;--- Outpatient
"RTN","ROREXT02",162,0)
 S RC=$$EN1^RORHL09(PTIEN,.DXDTS,"PV1")  Q:RC<0 RC
"RTN","ROREXT02",163,0)
 ;
"RTN","ROREXT02",164,0)
 ;=== Required CSR segment (dummy)
"RTN","ROREXT02",165,0)
 S CSRPTR=$$PTR^RORHL7
"RTN","ROREXT02",166,0)
 S RC=$$CSR^RORHL02(,PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",167,0)
 ;
"RTN","ROREXT02",168,0)
 ;=== Add other encounter data segments
"RTN","ROREXT02",169,0)
 S CLINPTR=$$PTR^RORHL7
"RTN","ROREXT02",170,0)
 ;---Inpatient
"RTN","ROREXT02",171,0)
 S RC=$$EN1^RORHL08(PTIEN,.DXDTS,"OBR")    Q:RC<0 RC
"RTN","ROREXT02",172,0)
 ;--- Outpatient
"RTN","ROREXT02",173,0)
 S RC=$$EN1^RORHL09(PTIEN,.DXDTS,"OBR")    Q:RC<0 RC
"RTN","ROREXT02",174,0)
 ;--- Radiology
"RTN","ROREXT02",175,0)
 S RC=$$EN1^RORHL04(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",176,0)
 ;--- Autopsy
"RTN","ROREXT02",177,0)
 S RC=$$EN1^RORHL05(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",178,0)
 ;--- Surgical Pathology
"RTN","ROREXT02",179,0)
 S RC=$$EN1^RORHL10(PTIEN,.DXDTS,HDTMODE)  Q:RC<0 RC
"RTN","ROREXT02",180,0)
 ;--- Cytopathology
"RTN","ROREXT02",181,0)
 S RC=$$EN1^RORHL11(PTIEN,.DXDTS,HDTMODE)  Q:RC<0 RC
"RTN","ROREXT02",182,0)
 ;--- Microbiology
"RTN","ROREXT02",183,0)
 S RC=$$EN1^RORHL12(PTIEN,.DXDTS,HDTMODE)  Q:RC<0 RC
"RTN","ROREXT02",184,0)
 ;--- EKG (Medical Procedures)
"RTN","ROREXT02",185,0)
 S RC=$$EN1^RORHL13(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",186,0)
 ;--- Allergy
"RTN","ROREXT02",187,0)
 S RC=$$EN1^RORHL14(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",188,0)
 ;--- IV
"RTN","ROREXT02",189,0)
 S RC=$$EN1^RORHL15(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",190,0)
 ;--- Vitals
"RTN","ROREXT02",191,0)
 S RC=$$EN1^RORHL16(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",192,0)
 ;--- Problem List
"RTN","ROREXT02",193,0)
 S RC=$$EN1^RORHL17(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",194,0)
 ;--- Lab data
"RTN","ROREXT02",195,0)
 S RC=$$LABDATA(PTIEN,.DXDTS,HDTMODE)      Q:RC<0 RC
"RTN","ROREXT02",196,0)
 ;--- Pharmacy
"RTN","ROREXT02",197,0)
 S RC=$$EN1^RORHL03(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",198,0)
 ;--- Immunization
"RTN","ROREXT02",199,0)
 S RC=$$EN1^RORHL18(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",200,0)
 ;--- Skin Test Results
"RTN","ROREXT02",201,0)
 S RC=$$EN1^RORHL19(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",202,0)
 ;--- Non-VA Meds
"RTN","ROREXT02",203,0)
 S RC=$$EN1^RORHL20(PTIEN,.DXDTS)          Q:RC<0 RC
"RTN","ROREXT02",204,0)
 ;
"RTN","ROREXT02",205,0)
 ;=== Analyze the structure of the message
"RTN","ROREXT02",206,0)
 S RORPTR=$$PTR^RORHL7
"RTN","ROREXT02",207,0)
 ;--- If the demographic data has not changed since the previous
"RTN","ROREXT02",208,0)
 ;    data extraction and no clinical data has been added to the
"RTN","ROREXT02",209,0)
 ;--- message, then remove the demographic section completely.
"RTN","ROREXT02",210,0)
 I 'RORDEM,RORPTR'>CLINPTR,CSRPTR'>PV1PTR  D
"RTN","ROREXT02",211,0)
 . D ROLLBACK^RORHL7(DEMPTR,1)  S CLINPTR=0
"RTN","ROREXT02",212,0)
 ;
"RTN","ROREXT02",213,0)
 ;=== Registry Data
"RTN","ROREXT02",214,0)
 S REGIEN=0
"RTN","ROREXT02",215,0)
 F  S REGIEN=$O(RGIENLST(REGIEN)),RC=0  Q:REGIEN'>0  D  Q:RC<0
"RTN","ROREXT02",216,0)
 . S IEN=+RGIENLST(REGIEN)  Q:IEN'>0
"RTN","ROREXT02",217,0)
 . ;--- If no clinical or demographics data is sent and the local
"RTN","ROREXT02",218,0)
 . ;    registry data has not been modified since the last data
"RTN","ROREXT02",219,0)
 . ;--- extraction, then do not include the registry data section.
"RTN","ROREXT02",220,0)
 . I 'CLINPTR  D  Q:RC
"RTN","ROREXT02",221,0)
 . . S RC='$$GET1^DIQ(798,IEN_",",5,"I",,"RORMSG")
"RTN","ROREXT02",222,0)
 . . S:$G(DIERR) RC=$$DBS^RORERR("RORMSG",-9,,PTIEN,798,IEN_",")
"RTN","ROREXT02",223,0)
 . ;---
"RTN","ROREXT02",224,0)
 . I $G(ROREXT("MSGBLD",REGIEN))'=""  D
"RTN","ROREXT02",225,0)
 . . X "S RC="_ROREXT("MSGBLD",REGIEN)_"(IEN,PTIEN,.DXDTS)"
"RTN","ROREXT02",226,0)
 . E  S RC=$$REGDATA(IEN,PTIEN,.DXDTS)
"RTN","ROREXT02",227,0)
 ;
"RTN","ROREXT02",228,0)
 ;=== Analyze the structure of the message
"RTN","ROREXT02",229,0)
 S RORPTR=$$PTR^RORHL7
"RTN","ROREXT02",230,0)
 Q (RORPTR'>DEMPTR)
"RTN","ROREXT02",231,0)
 ;
"RTN","ROREXT02",232,0)
 ;***** EXTRACTS REGISTRY-SPECIFIC DATA
"RTN","ROREXT02",233,0)
 ;
"RTN","ROREXT02",234,0)
 ; RORIEN        IEN of the patient record in the registry
"RTN","ROREXT02",235,0)
 ;
"RTN","ROREXT02",236,0)
 ; PTIEN         Patient IEN
"RTN","ROREXT02",237,0)
 ;
"RTN","ROREXT02",238,0)
 ; .DXDTS        Data extraction time frames
"RTN","ROREXT02",239,0)
 ;
"RTN","ROREXT02",240,0)
 ; [HDTMODE]     This parameter is defined and non-zero during the
"RTN","ROREXT02",241,0)
 ;               historical data extraction.
"RTN","ROREXT02",242,0)
 ;
"RTN","ROREXT02",243,0)
 ; Return Values:
"RTN","ROREXT02",244,0)
 ;       <0  Error Code
"RTN","ROREXT02",245,0)
 ;        0  Ok
"RTN","ROREXT02",246,0)
 ;       >0  Nothing to send
"RTN","ROREXT02",247,0)
 ;
"RTN","ROREXT02",248,0)
REGDATA(RORIEN,PTIEN,DXDTS,HDTMODE) ;
"RTN","ROREXT02",249,0)
 N IENS,RC
"RTN","ROREXT02",250,0)
 S IENS=RORIEN_","
"RTN","ROREXT02",251,0)
 S RC=$$PID^RORHL01(PTIEN)       Q:RC<0 RC
"RTN","ROREXT02",252,0)
 S RC=$$CSR^RORHL02(IENS,PTIEN)  Q:RC<0 RC
"RTN","ROREXT02",253,0)
 S RC=$$CSP^RORHL02(IENS,DXDTS)  Q:RC<0 RC
"RTN","ROREXT02",254,0)
 Q 0
"RTN","RORHL20")
0^26^B32758801^B35413301
"RTN","RORHL20",1,0)
RORHL20 ;BPOIFO/ACS - HL7 NON-VA MEDS: ORC,RXE ;8/23/10
"RTN","RORHL20",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**13**;Feb 17, 2006;Build 27
"RTN","RORHL20",3,0)
 ;
"RTN","RORHL20",4,0)
 ; This routine uses the following IAs:
"RTN","RORHL20",5,0)
 ;
"RTN","RORHL20",6,0)
 ; #330          ^PSOHCSUM (controlled)
"RTN","RORHL20",7,0)
 ; #10104        TRIM^XLFSTR (supported)
"RTN","RORHL20",8,0)
 ;
"RTN","RORHL20",9,0)
 Q
"RTN","RORHL20",10,0)
 ;
"RTN","RORHL20",11,0)
 ;***** SEARCH FOR NON-VA MEDS
"RTN","RORHL20",12,0)
 ;
"RTN","RORHL20",13,0)
 ; DFN           DFN of the patient in the PATIENT file (#2)
"RTN","RORHL20",14,0)
 ;.DXDTS         Reference to a local variable where the
"RTN","RORHL20",15,0)
 ;               data extraction time frames are stored.
"RTN","RORHL20",16,0)
 ;
"RTN","RORHL20",17,0)
 ; Return Values:
"RTN","RORHL20",18,0)
 ;        0  Ok
"RTN","RORHL20",19,0)
 ;
"RTN","RORHL20",20,0)
EN1(RORDFN,DXDTS) ;DATA AREA = 19
"RTN","RORHL20",21,0)
 N IDX,RORSTDT,RORENDT
"RTN","RORHL20",22,0)
 S IDX=0
"RTN","RORHL20",23,0)
 F  S IDX=$O(DXDTS(19,IDX))  Q:IDX'>0  D
"RTN","RORHL20",24,0)
 . S RORSTDT=$P(DXDTS(19,IDX),U),RORENDT=$P(DXDTS(19,IDX),U,2)
"RTN","RORHL20",25,0)
 . D EN2(RORDFN,RORSTDT,RORENDT) ;get Non-VA meds for patient
"RTN","RORHL20",26,0)
 Q 0
"RTN","RORHL20",27,0)
 ;
"RTN","RORHL20",28,0)
 ;***** GET NON-VA MEDS
"RTN","RORHL20",29,0)
 ;Input
"RTN","RORHL20",30,0)
 ; RORDFN        DFN of the patient in the PATIENT file (#2)
"RTN","RORHL20",31,0)
 ; RORSTDT       Start date of extract
"RTN","RORHL20",32,0)
 ; RORENDT       End date of extract
"RTN","RORHL20",33,0)
 ;
"RTN","RORHL20",34,0)
 ; Return Values:
"RTN","RORHL20",35,0)
 ;        0  Ok
"RTN","RORHL20",36,0)
 ;
"RTN","RORHL20",37,0)
EN2(RORDFN,RORSTDT,RORENDT) ;
"RTN","RORHL20",38,0)
 N CS D ECH^RORHL7(.CS) ;component separator
"RTN","RORHL20",39,0)
 N SCS D ECH^RORHL7(,.SCS) ;sub-component separator
"RTN","RORHL20",40,0)
 N DFN S DFN=$G(RORDFN) ;must be set for call to ^PSOHCSUM
"RTN","RORHL20",41,0)
 ;^PSOHCSUM will return all Non-VA meds, regardless of what date is passed in.
"RTN","RORHL20",42,0)
 ;To minimize the number of other meds returned, set start = current date
"RTN","RORHL20",43,0)
 N PSOBEGIN S PSOBEGIN=DT D ^PSOHCSUM
"RTN","RORHL20",44,0)
 N COUNT,RORNVA,RORKEEP,I,DATA10,DATA0,RORTEXT
"RTN","RORHL20",45,0)
 S COUNT=0 F  S COUNT=$O(^TMP("PSOO",$J,"NVA",COUNT)) Q:'COUNT  D
"RTN","RORHL20",46,0)
 . K RORNVA
"RTN","RORHL20",47,0)
 . S RORNVA("DOCDT")=$P($G(^TMP("PSOO",$J,"NVA",COUNT,0)),U,5) ;documented date
"RTN","RORHL20",48,0)
 . S RORNVA("DISDT")=$P($G(^TMP("PSOO",$J,"NVA",COUNT,0)),U,7) ;discontinued date
"RTN","RORHL20",49,0)
 . S RORKEEP=0
"RTN","RORHL20",50,0)
 . ;Documented date or discontinued date must be in the extract range
"RTN","RORHL20",51,0)
 . I $G(RORNVA("DOCDT")),RORNVA("DOCDT")\1'<RORSTDT\1,RORNVA("DOCDT")'>RORENDT\1 S RORKEEP=1
"RTN","RORHL20",52,0)
 . I $G(RORNVA("DISDT")),RORNVA("DISDT")\1'<RORSTDT\1,RORNVA("DISDT")'>RORENDT\1 S RORKEEP=1
"RTN","RORHL20",53,0)
 . I 'RORKEEP Q  ;quit if not in range
"RTN","RORHL20",54,0)
 . ;Populate RORNVA with data
"RTN","RORHL20",55,0)
 . S RORNVA("ORDNUM")=$P($G(^TMP("PSOO",$J,"NVA",COUNT,0)),U,4) ;CPRS order#
"RTN","RORHL20",56,0)
 . S RORNVA("IEN522")=COUNT ;Non-VA med IEN in sub-file 52.2
"RTN","RORHL20",57,0)
 . S DATA10=$G(^TMP("PSOO",$J,"NVA",COUNT,1,0)) ;1,0 node
"RTN","RORHL20",58,0)
 . S DATA0=$G(^TMP("PSOO",$J,"NVA",COUNT,0)) ;0 node
"RTN","RORHL20",59,0)
 . S RORNVA("DOSE")=$P($G(DATA10),U,1) ;dosage
"RTN","RORHL20",60,0)
 . S RORNVA("MEDROUTE")=$P($G(DATA10),U,2) ;med route
"RTN","RORHL20",61,0)
 . S RORNVA("SCHED")=$P($G(DATA10),U,3) ;schedule
"RTN","RORHL20",62,0)
 . S RORNVA("DRUGINFO")=$P($G(DATA10),U,4) ;drug IEN;name
"RTN","RORHL20",63,0)
 . S RORNVA("DRUGIEN")=$P($G(RORNVA("DRUGINFO")),";",1) ;drug IEN
"RTN","RORHL20",64,0)
 . S RORNVA("DRUGNAME")=$P($G(RORNVA("DRUGINFO")),";",2) ;drug name
"RTN","RORHL20",65,0)
 . S RORNVA("CLINICINFO")=$P($G(DATA10),U,5) ;clinic IEN;name
"RTN","RORHL20",66,0)
 . S RORNVA("CLIEN")=$P($G(RORNVA("CLINICINFO")),";",1) ;clinic IEN
"RTN","RORHL20",67,0)
 . S RORNVA("CLNAME")=$P($G(RORNVA("CLINICINFO")),";",2) ;clinic name
"RTN","RORHL20",68,0)
 . S RORNVA("OIDF")=$P($G(DATA0),U,1) ;orderable item + dose form
"RTN","RORHL20",69,0)
 . S RORNVA("STATUS")=$P($G(DATA0),U,2) ;status
"RTN","RORHL20",70,0)
 . S RORNVA("STATUS")=$$UPCASE($G(RORNVA("STATUS")))
"RTN","RORHL20",71,0)
 . S RORNVA("START")=$P($G(DATA0),U,3) ;start date
"RTN","RORHL20",72,0)
 . S RORNVA("DOCBY")=$P($G(DATA0),U,6) ;doc by IEN;name
"RTN","RORHL20",73,0)
 . S RORNVA("DBIEN")=$P($G(RORNVA("DOCBY")),";",1) ;doc by IEN
"RTN","RORHL20",74,0)
 . S RORNVA("DBNAME")=$P($G(RORNVA("DOCBY")),";",2) ;doc by name
"RTN","RORHL20",75,0)
 . S RORNVA("STOPCD")=$$STOPCODE^RORUTL18($G(RORNVA("CLIEN"))) ;clinic stop
"RTN","RORHL20",76,0)
 . K RORNVA("DISCL") S I=0 F  S I=$O(^TMP("PSOO",$J,"NVA",COUNT,"DSC",I)) Q:'I  D
"RTN","RORHL20",77,0)
 . . S RORTEXT=$G(^TMP("PSOO",$J,"NVA",COUNT,"DSC",I,0))
"RTN","RORHL20",78,0)
 . . I $L($G(RORNVA("DISCL")))>0 S RORNVA("DISCL")=RORNVA("DISCL")_" "_$$TRIM^XLFSTR($G(RORTEXT))
"RTN","RORHL20",79,0)
 . . I $L($G(RORNVA("DISCL")))'>0 S RORNVA("DISCL")=$$TRIM^XLFSTR($G(RORTEXT))
"RTN","RORHL20",80,0)
 . D ORC(CS,SCS,.RORNVA)
"RTN","RORHL20",81,0)
 . D RXE(CS,SCS,.RORNVA)
"RTN","RORHL20",82,0)
 K RORNVA,^TMP("PSOO",$J)
"RTN","RORHL20",83,0)
 Q 0
"RTN","RORHL20",84,0)
 ;
"RTN","RORHL20",85,0)
 ;***** NON-VA MEDS ORC SEGMENT BUILDER
"RTN","RORHL20",86,0)
 ;
"RTN","RORHL20",87,0)
 ;Input
"RTN","RORHL20",88,0)
 ;  CS        Component separator
"RTN","RORHL20",89,0)
 ;  SCS       Sub-component separator
"RTN","RORHL20",90,0)
 ;  RORNVA    Array containing Non-VA medication information:
"RTN","RORHL20",91,0)
 ;     RORNVA("IEN522")    Non-VA med IEN in sub-file 52.2
"RTN","RORHL20",92,0)
 ;     RORNVA("ORDNUM")    CPRS Order Number
"RTN","RORHL20",93,0)
 ;     RORNVA("DOCDT")     Documented Date
"RTN","RORHL20",94,0)
 ;     RORNVA("DISDT")     Discontinued Date
"RTN","RORHL20",95,0)
 ;     RORNVA("DOSE")      Dosage
"RTN","RORHL20",96,0)
 ;     RORNVA("MEDROUTE")  Medication Route
"RTN","RORHL20",97,0)
 ;     RORNVA("SCHED")     Schedule
"RTN","RORHL20",98,0)
 ;     RORNVA("DRUGIEN")   Drug IEN
"RTN","RORHL20",99,0)
 ;     RORNVA("DRUGNAME")  Drug name
"RTN","RORHL20",100,0)
 ;     RORNVA("STOPCD")    Clinic Stop Code
"RTN","RORHL20",101,0)
 ;     RORNVA("CLIEN")     Clinic IEN
"RTN","RORHL20",102,0)
 ;     RORNVA("CLNAME")    Clinic Name
"RTN","RORHL20",103,0)
 ;     RORNVA("OIDF")      Orderable Item + Dose Form
"RTN","RORHL20",104,0)
 ;     RORNVA("STATUS")    Status
"RTN","RORHL20",105,0)
 ;     RORNVA("START")     Start Date
"RTN","RORHL20",106,0)
 ;     RORNVA("DBIEN")     Documented by IEN
"RTN","RORHL20",107,0)
 ;     RORNVA("DBNAME")    Documented by Name
"RTN","RORHL20",108,0)
 ;     RORNVA("DISCL")     Disclaimer text
"RTN","RORHL20",109,0)
 ; 
"RTN","RORHL20",110,0)
ORC(CS,SCS,RORNVA) ;
"RTN","RORHL20",111,0)
 ;--- Initialize the segment
"RTN","RORHL20",112,0)
 N RORSEG S RORSEG(0)="ORC"
"RTN","RORHL20",113,0)
 ;
"RTN","RORHL20",114,0)
 ;--- ORC-1 - Order Control
"RTN","RORHL20",115,0)
 S RORSEG(1)="NW"
"RTN","RORHL20",116,0)
 ;
"RTN","RORHL20",117,0)
 ;--- ORC-2 - Placer Order #
"RTN","RORHL20",118,0)
 S RORSEG(2)=$G(RORNVA("IEN522"))_CS_"NVA"
"RTN","RORHL20",119,0)
 ;
"RTN","RORHL20",120,0)
 ;--- ORC-5 - Order Status: IP for active, DC for discontinued
"RTN","RORHL20",121,0)
 S RORSEG(5)=$S($G(RORNVA("STATUS"))="ACTIVE":"IP",$G(RORNVA("STATUS"))="DISCONTINUED":"DC",1:"")
"RTN","RORHL20",122,0)
 ;
"RTN","RORHL20",123,0)
 ;--- ORC-9 - Date/Time of Transaction: Documented Date/Time
"RTN","RORHL20",124,0)
 I $G(RORNVA("DOCDT")) S RORSEG(9)=$$FM2HL^RORHL7(RORNVA("DOCDT"))
"RTN","RORHL20",125,0)
 ;
"RTN","RORHL20",126,0)
 ;--- ORC-12 - Documented By IEN ^^^^^^^^^^^^ Provider Class
"RTN","RORHL20",127,0)
 S RORSEG(12)=$G(RORNVA("DBIEN"))
"RTN","RORHL20",128,0)
 I $G(RORSEG(12))>0  D
"RTN","RORHL20",129,0)
 . S $P(RORSEG(12),CS,13)=$$GET1^DIQ(200,+RORSEG(12)_",",53.5,"E",,"RORMSG")
"RTN","RORHL20",130,0)
 ;
"RTN","RORHL20",131,0)
 ;--- ORC-16 - Control Code Reason
"RTN","RORHL20",132,0)
 S RORSEG(16)=CS_CS_CS_CS_"NEW"
"RTN","RORHL20",133,0)
 ;
"RTN","RORHL20",134,0)
 ;--- ORC-17 - Enterer's Organization: Division= Station Number ^ Station Name ^ 99VA4
"RTN","RORHL20",135,0)
 S RORSEG(17)=$$SITE^RORUTL03(CS)
"RTN","RORHL20",136,0)
 ;
"RTN","RORHL20",137,0)
 ;--- Store the segment
"RTN","RORHL20",138,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL20",139,0)
 Q
"RTN","RORHL20",140,0)
 ;
"RTN","RORHL20",141,0)
 ;***** NON-VA MEDS RXE SEGMENT BUILDER
"RTN","RORHL20",142,0)
 ;
"RTN","RORHL20",143,0)
 ;Input
"RTN","RORHL20",144,0)
 ;  CS        component separator
"RTN","RORHL20",145,0)
 ;  SCS       sub-component separator
"RTN","RORHL20",146,0)
 ;  RORNVA    Array containing Non-VA medication information:
"RTN","RORHL20",147,0)
 ;     RORNVA("IEN522")    Non-VA med IEN in sub-file 52.2
"RTN","RORHL20",148,0)
 ;     RORNVA("ORDNUM")    CPRS Order Number
"RTN","RORHL20",149,0)
 ;     RORNVA("DOCDT")     Documented Date
"RTN","RORHL20",150,0)
 ;     RORNVA("DISDT")     Discontinued Date
"RTN","RORHL20",151,0)
 ;     RORNVA("DOSE")      Dosage
"RTN","RORHL20",152,0)
 ;     RORNVA("MEDROUTE")  Medication Route
"RTN","RORHL20",153,0)
 ;     RORNVA("SCHED")     Schedule
"RTN","RORHL20",154,0)
 ;     RORNVA("DRUGIEN")   Drug IEN
"RTN","RORHL20",155,0)
 ;     RORNVA("DRUGNAME")  Drug name
"RTN","RORHL20",156,0)
 ;     RORNVA("STOPCD")    Clinic Stop Code
"RTN","RORHL20",157,0)
 ;     RORNVA("CLIEN")     Clinic IEN
"RTN","RORHL20",158,0)
 ;     RORNVA("CLNAME")    Clinic Name
"RTN","RORHL20",159,0)
 ;     RORNVA("OIDF")      Orderable Item + Dose Form
"RTN","RORHL20",160,0)
 ;     RORNVA("STATUS")    Status
"RTN","RORHL20",161,0)
 ;     RORNVA("START")     Start Date
"RTN","RORHL20",162,0)
 ;     RORNVA("DBIEN")     Documented by IEN
"RTN","RORHL20",163,0)
 ;     RORNVA("DBNAME")    Documented by Name
"RTN","RORHL20",164,0)
 ;     RORNVA("DISCL")     Disclaimer text
"RTN","RORHL20",165,0)
 ;
"RTN","RORHL20",166,0)
RXE(CS,SCS,RORNVA) ;
"RTN","RORHL20",167,0)
 ;--- Initialize the segment
"RTN","RORHL20",168,0)
 N RORSEG S RORSEG(0)="RXE"
"RTN","RORHL20",169,0)
 ;
"RTN","RORHL20",170,0)
 ;--- RXE-1 - Quantity/Timing: Dosage ^ Schedule ^^ Start Date ^ Discontinue Date ^^^ Medication Route
"RTN","RORHL20",171,0)
 N START I $G(RORNVA("START")) S START=$$FM2HL^RORHL7(RORNVA("START"))
"RTN","RORHL20",172,0)
 N END I $G(RORNVA("DISDT")) S END=$$FM2HL^RORHL7(RORNVA("DISDT"))
"RTN","RORHL20",173,0)
 S RORSEG(1)=$G(RORNVA("DOSE"))_CS_$G(RORNVA("SCHED"))_CS_CS_$G(START)_CS_$G(END)_CS_CS_CS_$G(RORNVA("MEDROUTE"))
"RTN","RORHL20",174,0)
 ;
"RTN","RORHL20",175,0)
 ;--- RXE-2 - Give Code: NDC code^VA Product Name^PSNDF^ NDF IEN + VA drug class code^Generic name^99PSD
"RTN","RORHL20",176,0)
 ;                   or: ^^^^ orderable item + dose form
"RTN","RORHL20",177,0)
 N DRUGIEN,DRUGINFO,INDF,TMP S DRUGIEN=$G(RORNVA("DRUGIEN"))
"RTN","RORHL20",178,0)
 I $G(DRUGIEN) S DRUGINFO="",TMP=$$RXE2^RORHL031(DRUGIEN,CS,.DRUGINFO,.INDF)
"RTN","RORHL20",179,0)
 I '$G(DRUGIEN) S $P(DRUGINFO,CS,5)=$G(RORNVA("OIDF"))
"RTN","RORHL20",180,0)
 S RORSEG(2)=$G(DRUGINFO)
"RTN","RORHL20",181,0)
 ;
"RTN","RORHL20",182,0)
 ;--- RXE-7 - Provider's Administration Instructions: Disclaimer text
"RTN","RORHL20",183,0)
 I $L($G(RORNVA("DISCL")))>0 S RORSEG(7)=CS_$$TRIM^XLFSTR($G(RORNVA("DISCL")))
"RTN","RORHL20",184,0)
 I $L($G(RORSEG(7)))>4001 S RORSEG(7)=$E(RORSEG(7),1,4001) ;CS + 4000 characters
"RTN","RORHL20",185,0)
 ;
"RTN","RORHL20",186,0)
 ;--- RXE-15 - Prescription Number: CPRS Order Number
"RTN","RORHL20",187,0)
 S RORSEG(15)=$G(RORNVA("ORDNUM"))
"RTN","RORHL20",188,0)
 ;
"RTN","RORHL20",189,0)
 ;--- RXE-21 - Stop Code
"RTN","RORHL20",190,0)
 S RORSEG(21)=$G(RORNVA("STOPCD"))
"RTN","RORHL20",191,0)
 ;
"RTN","RORHL20",192,0)
 ;--- Store the segment
"RTN","RORHL20",193,0)
 D ADDSEG^RORHL7(.RORSEG)
"RTN","RORHL20",194,0)
 Q
"RTN","RORHL20",195,0)
 ;
"RTN","RORHL20",196,0)
UPCASE(DATA) ;
"RTN","RORHL20",197,0)
 Q $TR(DATA,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","RORHL20",198,0)
 ; 
"RTN","RORP013")
0^29^B15779952^n/a
"RTN","RORP013",1,0)
RORP013 ;BP/ACS CCR POST-INIT PATCH 13 ;08/31/09
"RTN","RORP013",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**13**;Feb 17, 2006;Build 27
"RTN","RORP013",3,0)
 ;
"RTN","RORP013",4,0)
 ; This routine uses the following IAs:
"RTN","RORP013",5,0)
 ;
"RTN","RORP013",6,0)
 ; #2053    UPDATE^DIE (supported)
"RTN","RORP013",7,0)
 ; #10075   OPTION file r/w
"RTN","RORP013",8,0)
 ;
"RTN","RORP013",9,0)
 N RORPARM S RORPARM("DEVELOPER")=1
"RTN","RORP013",10,0)
 ;
"RTN","RORP013",11,0)
 ;******************************************************************************
"RTN","RORP013",12,0)
 ;Add new LOINC code 57006-9 to the VA HEPC lab search criterion in the
"RTN","RORP013",13,0)
 ;ROR LAB SEARCH file #798.9.  Do not add the 'dash' or the number following it
"RTN","RORP013",14,0)
 ;******************************************************************************
"RTN","RORP013",15,0)
 N I,HEPCIEN,RORDATA,RORLOINC K RORMSG
"RTN","RORP013",16,0)
 S HEPCIEN=$O(^ROR(798.9,"B","VA HEPC",0)) ;HEPC Registry top level IEN
"RTN","RORP013",17,0)
 ;--- add LOINC code to the VA HEPC search criteria
"RTN","RORP013",18,0)
 S RORLOINC=57006
"RTN","RORP013",19,0)
 ;add if it isn't already in the global
"RTN","RORP013",20,0)
 I '$D(^ROR(798.9,HEPCIEN,1,"B",RORLOINC)) D
"RTN","RORP013",21,0)
 . S RORDATA(1,798.92,"+2,"_HEPCIEN_",",.01)=$G(RORLOINC)
"RTN","RORP013",22,0)
 . S RORDATA(1,798.92,"+2,"_HEPCIEN_",",1)=6
"RTN","RORP013",23,0)
 . D UPDATE^DIE("","RORDATA(1)",,"RORMSG")
"RTN","RORP013",24,0)
 . K RORDATA,RORMSG
"RTN","RORP013",25,0)
 ;
"RTN","RORP013",26,0)
 ;******************************************************************************
"RTN","RORP013",27,0)
 ;Add new Non-VA Meds data area to file ROR DATA AREA
"RTN","RORP013",28,0)
 ;******************************************************************************
"RTN","RORP013",29,0)
 ;remove old entry if it exists
"RTN","RORP013",30,0)
 N DIK S DIK="^ROR(799.33,",DA=$O(^ROR(799.33,"B","Non-VA Meds",0)) I $G(DA)>0 D ^DIK
"RTN","RORP013",31,0)
 N RORFDA,RORERR,RORIEN
"RTN","RORP013",32,0)
 S RORFDA(799.33,"+1,",.01)="Non-VA Meds"
"RTN","RORP013",33,0)
 S RORIEN(1)=19 ;set IEN to 19
"RTN","RORP013",34,0)
 D UPDATE^DIE(,"RORFDA","RORIEN","RORERR")
"RTN","RORP013",35,0)
 K RORFDA,RORERR,RORIEN
"RTN","RORP013",36,0)
 ;
"RTN","RORP013",37,0)
 ;******************************************************************************
"RTN","RORP013",38,0)
 ;Update the NON-VA MEDS backpull entry in the ROR HISTORICAL DATA 
"RTN","RORP013",39,0)
 ;EXTRACT file with END DATE and ACTIVATION DATE = current date.
"RTN","RORP013",40,0)
 ;******************************************************************************
"RTN","RORP013",41,0)
 N RORIEN S RORIEN=$O(^RORDATA(799.6,"B","NON-VA MEDS",0))
"RTN","RORP013",42,0)
 I $G(RORIEN) D
"RTN","RORP013",43,0)
 . N DIE,DA,DR
"RTN","RORP013",44,0)
 . S DIE="^RORDATA(799.6,",DA=RORIEN,DR=".04///"_DT_";.07///"_DT D ^DIE
"RTN","RORP013",45,0)
 ;
"RTN","RORP013",46,0)
 ;******************************************************************************
"RTN","RORP013",47,0)
 ;Add new entries to the ROR XML ITEM file (#799.31)
"RTN","RORP013",48,0)
 ;******************************************************************************
"RTN","RORP013",49,0)
 N RORXML,RORTAG,RORFDA,RORERR
"RTN","RORP013",50,0)
 ;--- add codes
"RTN","RORP013",51,0)
 F I="REFILLS","ALL_FILLS","RECENT_FILLS" D 
"RTN","RORP013",52,0)
 . S RORXML=I
"RTN","RORP013",53,0)
 . ;don't add if it's already in the global
"RTN","RORP013",54,0)
 . Q:$D(^ROR(799.31,"B",RORXML))
"RTN","RORP013",55,0)
 . S RORFDA(799.31,"+1,",.01)=RORXML
"RTN","RORP013",56,0)
 . D UPDATE^DIE(,"RORFDA",,"RORERR")
"RTN","RORP013",57,0)
 K RORFDA,RORERR
"RTN","RORP013",58,0)
 ;
"RTN","RORP013",59,0)
 ;******************************************************************************
"RTN","RORP013",60,0)
 ;Update report parameter panels in ROR REPORT PARAMETERS file (#799.34) for
"RTN","RORP013",61,0)
 ;reports impacted by the Clinic, Division, or Patient panels
"RTN","RORP013",62,0)
 ;******************************************************************************
"RTN","RORP013",63,0)
 N RORIEN,RORPANEL,DIE,DA,DR
"RTN","RORP013",64,0)
 F RORIEN=3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20 D
"RTN","RORP013",65,0)
 . S RORTAG="RP"_RORIEN
"RTN","RORP013",66,0)
 . S RORPANEL=$P($T(@RORTAG),";;",2)
"RTN","RORP013",67,0)
 . Q:'RORPANEL
"RTN","RORP013",68,0)
 . S DIE="^ROR(799.34,",DA=RORIEN,DR="1///"_RORPANEL D ^DIE
"RTN","RORP013",69,0)
 ;
"RTN","RORP013",70,0)
 ;******************************************************************************
"RTN","RORP013",71,0)
 ;Add RPC 'ROR GET M VERSION' to OPTION 'ROR GUI' in file 19.
"RTN","RORP013",72,0)
 ;******************************************************************************
"RTN","RORP013",73,0)
 N VALUE,IEN S VALUE="ROR GUI" S IEN=$$FIND1^DIC(19,,"X",.VALUE)
"RTN","RORP013",74,0)
 I $G(IEN) D
"RTN","RORP013",75,0)
 . N DIC,X,Y
"RTN","RORP013",76,0)
 . K DA S DA(1)=IEN
"RTN","RORP013",77,0)
 . S DIC="^DIC(19,"_DA(1)_",""RPC"","
"RTN","RORP013",78,0)
 . S DIC(0)="XL",X="ROR GET M VERSION"
"RTN","RORP013",79,0)
 . D ^DIC
"RTN","RORP013",80,0)
 ;
"RTN","RORP013",81,0)
 Q
"RTN","RORP013",82,0)
 ;******************************************************************************
"RTN","RORP013",83,0)
 ;updated report panels in 799.34
"RTN","RORP013",84,0)
 ;******************************************************************************
"RTN","RORP013",85,0)
RP3 ;;10,14,22,62,35,30,34,50,140,180,70,100;;General Utilization & Demographics
"RTN","RORP013",86,0)
RP4 ;;10,14,22,60,66,50,34,140,180,70,100;;Clinic Follow Up
"RTN","RORP013",87,0)
RP5 ;;10,14,22,170,110,46,34,140,180,70,100;;Inpatient Utilization
"RTN","RORP013",88,0)
RP6 ;;10,14,22,110,120,52,34,50,140,180,70,100;;Lab Utilization
"RTN","RORP013",89,0)
RP7 ;;10,14,22,110,120,34,50,140,180,70,100;;Radiology Utilization
"RTN","RORP013",90,0)
RP9 ;;10,14,22,170,26,110,46,54,44,90,34,50,140,180,70,100;;Pharmacy Prescription Utilization
"RTN","RORP013",91,0)
RP10 ;;10,14,22,47,34,50,140,180,70,100;;Registry Lab Tests by Range
"RTN","RORP013",92,0)
RP11 ;;10,14,170,26,45,54,34,50,140,180,70,100;;Patient Medication History
"RTN","RORP013",93,0)
RP12 ;;14,22,64,66,10,54,44,11,53,12,34,50,140,180,70,100;;Combined Meds and Labs
"RTN","RORP013",94,0)
RP13 ;;10,14,22,62,160,34,50,140,70,100;;Diagnoses
"RTN","RORP013",95,0)
RP14 ;;10,14,22,170,26,62,84,56,34,50,140,180,70,100;;Registry Medications
"RTN","RORP013",96,0)
RP15 ;;10,14,22,150,65,66,62,160,59,12,34,50,140,180,70,100;;Procedures
"RTN","RORP013",97,0)
RP16 ;;10,14,22,170,110,46,34,140,180,70,100;;Outpatient Utilization
"RTN","RORP013",98,0)
RP17 ;;10,14,22,24,28,84,56,34,50,140,180,70,100;;VERA Reimbursement
"RTN","RORP013",99,0)
RP18 ;;14,22,62,201,47,12,34,50,140,180,70,100;;BMI
"RTN","RORP013",100,0)
RP19 ;;14,22,201,47,12,34,50,140,180,70,100;;MELD
"RTN","RORP013",101,0)
RP20 ;;14,22,62,201,47,12,34,50,140,180,70,100;;Renal Function by Range
"RTN","RORUTL11")
0^25^B3337131^B5217306
"RTN","RORUTL11",1,0)
RORUTL11 ;HCIOFO/SG - ACCESS AND SECURITY UTILITIES ;7/21/03 10:28am
"RTN","RORUTL11",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**13**;Feb 17, 2006;Build 27
"RTN","RORUTL11",3,0)
 ;
"RTN","RORUTL11",4,0)
 ; This routine uses the following IAs:
"RTN","RORUTL11",5,0)
 ;
"RTN","RORUTL11",6,0)
 ; #10141  VERSION^XPDUTL,LAST^XPDUTL (supported)
"RTN","RORUTL11",7,0)
 ;
"RTN","RORUTL11",8,0)
 ;******************************************************************************
"RTN","RORUTL11",9,0)
 ;******************************************************************************
"RTN","RORUTL11",10,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL11",11,0)
 ;        
"RTN","RORUTL11",12,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL11",13,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL11",14,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added tag VERSRV to return an associated
"RTN","RORUTL11",15,0)
 ;                                      version to the GUI during RPC call ROR
"RTN","RORUTL11",16,0)
 ;                                      GET M VERSION
"RTN","RORUTL11",17,0)
 ;                                      
"RTN","RORUTL11",18,0)
 ;******************************************************************************
"RTN","RORUTL11",19,0)
 ;******************************************************************************
"RTN","RORUTL11",20,0)
 Q
"RTN","RORUTL11",21,0)
 ;
"RTN","RORUTL11",22,0)
 ;***** REBUILDS THE "ACL" CROSS-REFERENCE (USER ACCESS)
"RTN","RORUTL11",23,0)
 ;
"RTN","RORUTL11",24,0)
 ; Return Values:
"RTN","RORUTL11",25,0)
 ;       <0  Error code
"RTN","RORUTL11",26,0)
 ;        0  Ok
"RTN","RORUTL11",27,0)
 ;
"RTN","RORUTL11",28,0)
RNDXACL() ;
"RTN","RORUTL11",29,0)
 N DA,DIK,REGIEN,ROOT
"RTN","RORUTL11",30,0)
 S ROOT=$$ROOT^DILFD(798.1,,1)  K @ROOT@("ACL")
"RTN","RORUTL11",31,0)
 S REGIEN=0
"RTN","RORUTL11",32,0)
 F  S REGIEN=$O(@ROOT@(REGIEN))  Q:'REGIEN  D
"RTN","RORUTL11",33,0)
 . S DIK=$$ROOT^DILFD(798.118,","_REGIEN_","),DIK(1)=".01^ACL"
"RTN","RORUTL11",34,0)
 . S DA(1)=REGIEN  D ENALL^DIK
"RTN","RORUTL11",35,0)
 Q 0
"RTN","RORUTL11",36,0)
 ;
"RTN","RORUTL11",37,0)
 ;***** CHECKS IF THE RPC CAN BE CALLED BY THE CURRENT USER
"RTN","RORUTL11",38,0)
 ;
"RTN","RORUTL11",39,0)
 ; RPCNAME       Name of the RPC
"RTN","RORUTL11",40,0)
 ;
"RTN","RORUTL11",41,0)
 ; [REGIEN]      Registry IEN
"RTN","RORUTL11",42,0)
 ;
"RTN","RORUTL11",43,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORUTL11",44,0)
 ;                 A  Administrator Only
"RTN","RORUTL11",45,0)
 ;                 I  IRM Only
"RTN","RORUTL11",46,0)
 ;
"RTN","RORUTL11",47,0)
 ; Return Values:
"RTN","RORUTL11",48,0)
 ;       <0  Error code
"RTN","RORUTL11",49,0)
 ;        0  Ok
"RTN","RORUTL11",50,0)
 ;       >0  Access denied
"RTN","RORUTL11",51,0)
 ;
"RTN","RORUTL11",52,0)
RPCHECK(RPCNAME,REGIEN,FLAGS) ;
"RTN","RORUTL11",53,0)
 N ACCESS,KEY,RC
"RTN","RORUTL11",54,0)
 Q:$G(DUZ)'>0 $$ERROR^RORERR(-40,,,,"DUZ")
"RTN","RORUTL11",55,0)
 S FLAGS=$G(FLAGS),REGIEN=+$G(REGIEN)
"RTN","RORUTL11",56,0)
 ;---
"RTN","RORUTL11",57,0)
 S (ACCESS,RC)=0
"RTN","RORUTL11",58,0)
 D  Q:ACCESS 0
"RTN","RORUTL11",59,0)
 . I REGIEN  Q:$D(^ROR(798.1,"ACL",DUZ,REGIEN))<10
"RTN","RORUTL11",60,0)
 . E  Q:$D(^ROR(798.1,"ACL",DUZ))<10
"RTN","RORUTL11",61,0)
 . I FLAGS["I"  Q:'$D(^XUSEC("ROR VA IRM",DUZ))
"RTN","RORUTL11",62,0)
 . I FLAGS["A"  S RC=1,KEY=""  D  Q:RC
"RTN","RORUTL11",63,0)
 . . F  S KEY=$O(^ROR(798.1,"ACL",DUZ,REGIEN,KEY))  Q:KEY=""  D  Q:'RC
"RTN","RORUTL11",64,0)
 . . . I KEY?1"ROR"1.E  S:KEY["ADMIN" RC=0
"RTN","RORUTL11",65,0)
 . S ACCESS=1
"RTN","RORUTL11",66,0)
 ;---
"RTN","RORUTL11",67,0)
 D ACVIOLTN^RORLOG(X,$G(REGIEN),RPCNAME)
"RTN","RORUTL11",68,0)
 Q 1
"RTN","RORUTL11",69,0)
 ;
"RTN","RORUTL11",70,0)
 ;***** RETURNS A VERSION NUMBER
"RTN","RORUTL11",71,0)
 ;REMOTE PROCEDURE: ROR GET M VERSION
"RTN","RORUTL11",72,0)
 ;
"RTN","RORUTL11",73,0)
 ;The purpose of this RPC is to catch when the GUI executable has been
"RTN","RORUTL11",74,0)
 ;upgraded, but the associated M patch has not been installed yet.
"RTN","RORUTL11",75,0)
 ;
"RTN","RORUTL11",76,0)
 ; VAL n.n.n represents the CCR package version and the m patch number that
"RTN","RORUTL11",77,0)
 ; contains the associated minimum M changes that the GUI is expecting.
"RTN","RORUTL11",78,0)
 ;
"RTN","RORUTL11",79,0)
 ;NOTE TO CCR MAINTENANCE TEAM: for M changes made by the maintenance team,
"RTN","RORUTL11",80,0)
 ;the number returned from this RPC should NOT be modified. The version
"RTN","RORUTL11",81,0)
 ;below is an agreed-upon version number that the GUI will check to make
"RTN","RORUTL11",82,0)
 ;sure the M side and the client side are in sync.  It is hardcoded in both
"RTN","RORUTL11",83,0)
 ;the GUI and in the code below.  Since maintenance patches do NOT cause the
"RTN","RORUTL11",84,0)
 ;client and server to be out of sync, there is no need to modify this.  In
"RTN","RORUTL11",85,0)
 ;fact, modification without the associated GUI modification would cause
"RTN","RORUTL11",86,0)
 ;an error to be displayed in the GUI.
"RTN","RORUTL11",87,0)
 ;
"RTN","RORUTL11",88,0)
VERSRV(VAL) ;
"RTN","RORUTL11",89,0)
 S VAL="1.5.13"
"RTN","RORUTL11",90,0)
 Q
"RTN","RORUTL15")
0^8^B55128247^B54143308
"RTN","RORUTL15",1,0)
RORUTL15 ;HCIOFO/BH,SG - PHARMACY DATA SEARCH (TOOLS) ;12/21/05 11:11am
"RTN","RORUTL15",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**13**;Feb 17, 2006;Build 27
"RTN","RORUTL15",3,0)
 ;
"RTN","RORUTL15",4,0)
 ; This routine uses the following IAs:
"RTN","RORUTL15",5,0)
 ;
"RTN","RORUTL15",6,0)
 ; #2400         OCL^PSOORRL and OEL^PSOORRL (controlled)
"RTN","RORUTL15",7,0)
 ; #4533         ARWS^PSS50 (supported)
"RTN","RORUTL15",8,0)
 ; #4543         IEN^PSN50P65 (supported)
"RTN","RORUTL15",9,0)
 ; #4549         ZERO^PSS52P6 (supported)
"RTN","RORUTL15",10,0)
 ; #4826         PSS436^PSS55 (supported)
"RTN","RORUTL15",11,0)
 ;
"RTN","RORUTL15",12,0)
 ;******************************************************************************
"RTN","RORUTL15",13,0)
 ;******************************************************************************
"RTN","RORUTL15",14,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL15",15,0)
 ;        
"RTN","RORUTL15",16,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL15",17,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL15",18,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Patient Med History Report: retrieve 
"RTN","RORUTL15",19,0)
 ;                                      #refills remaining and add to the 
"RTN","RORUTL15",20,0)
 ;                                      'callback' function call
"RTN","RORUTL15",21,0)
 ;                                      NOTE: Patch 11 became patch 13.
"RTN","RORUTL15",22,0)
 ;                                      Any references to patch 11 in the code
"RTN","RORUTL15",23,0)
 ;                                      below is referring to path 13.
"RTN","RORUTL15",24,0)
 ;
"RTN","RORUTL15",25,0)
 ;******************************************************************************
"RTN","RORUTL15",26,0)
 ;******************************************************************************
"RTN","RORUTL15",27,0)
 Q
"RTN","RORUTL15",28,0)
 ;
"RTN","RORUTL15",29,0)
 ;***** DOUBLE-CHECKS THE OUTPATIENT RX (ORDER, REFILLS AND PARTIALS)
"RTN","RORUTL15",30,0)
 ;
"RTN","RORUTL15",31,0)
 ; STDT          Start Date (FileMan)
"RTN","RORUTL15",32,0)
 ; ENDT          End Date   (FileMan)
"RTN","RORUTL15",33,0)
 ;
"RTN","RORUTL15",34,0)
 ; [.NREF]       Number of refills is returned via this parameter
"RTN","RORUTL15",35,0)
 ;
"RTN","RORUTL15",36,0)
 ; [.NPAR]       Nubmer of partials is returned via this parameter
"RTN","RORUTL15",37,0)
 ;
"RTN","RORUTL15",38,0)
 ; The ^TMP("PS",$J) node must be populated by the OEL^PSOORRL
"RTN","RORUTL15",39,0)
 ; before calling this function.
"RTN","RORUTL15",40,0)
 ;
"RTN","RORUTL15",41,0)
 ; Return Values:
"RTN","RORUTL15",42,0)
 ;        0  Ok
"RTN","RORUTL15",43,0)
 ;        1  Skip the order
"RTN","RORUTL15",44,0)
 ;
"RTN","RORUTL15",45,0)
DTCHECK(STDT,ENDT,NREF,NPAR) ;
"RTN","RORUTL15",46,0)
 N IRP,RXDT,SKIP
"RTN","RORUTL15",47,0)
 S RXDT=+$P($G(^TMP("PS",$J,"RXN",0)),U,6),(NREF,NPAR)=0
"RTN","RORUTL15",48,0)
 S SKIP=(RXDT<STDT)!(RXDT'<ENDT)
"RTN","RORUTL15",49,0)
 ;--- Refills
"RTN","RORUTL15",50,0)
 S IRP=0
"RTN","RORUTL15",51,0)
 F  S IRP=$O(^TMP("PS",$J,"REF",IRP))  Q:IRP'>0  D
"RTN","RORUTL15",52,0)
 . S RXDT=+$P($G(^TMP("PS",$J,"REF",IRP,0)),U)
"RTN","RORUTL15",53,0)
 . I RXDT'<STDT,RXDT<ENDT  S SKIP=0,NREF=NREF+1  Q
"RTN","RORUTL15",54,0)
 . K ^TMP("PS",$J,"REF",IRP)
"RTN","RORUTL15",55,0)
 ;--- Partials
"RTN","RORUTL15",56,0)
 S IRP=0
"RTN","RORUTL15",57,0)
 F  S IRP=$O(^TMP("PS",$J,"PAR",IRP))  Q:IRP'>0  D
"RTN","RORUTL15",58,0)
 . S RXDT=+$P($G(^TMP("PS",$J,"PAR",IRP,0)),U)
"RTN","RORUTL15",59,0)
 . I RXDT'<STDT,RXDT<ENDT  S SKIP=0,NPAR=NPAR+1  Q
"RTN","RORUTL15",60,0)
 . K ^TMP("PS",$J,"PAR",IRP)
"RTN","RORUTL15",61,0)
 ;---
"RTN","RORUTL15",62,0)
 Q SKIP
"RTN","RORUTL15",63,0)
 ;
"RTN","RORUTL15",64,0)
 ;***** PROCESSES THE LIST OF PRESELECTED PHARMACY ORDERS
"RTN","RORUTL15",65,0)
 ;
"RTN","RORUTL15",66,0)
 ; PTIEN         IEN of the patient (DFN)
"RTN","RORUTL15",67,0)
 ;
"RTN","RORUTL15",68,0)
 ; RORFLAGS      Flags to control processing
"RTN","RORUTL15",69,0)
 ;
"RTN","RORUTL15",70,0)
 ; ROR8LST       Closed root of the list of preselected orders
"RTN","RORUTL15",71,0)
 ;
"RTN","RORUTL15",72,0)
 ; Return Values:
"RTN","RORUTL15",73,0)
 ;       <0  Error code
"RTN","RORUTL15",74,0)
 ;        0  No orders have been found
"RTN","RORUTL15",75,0)
 ;       >0  Number of orders
"RTN","RORUTL15",76,0)
 ;
"RTN","RORUTL15",77,0)
PROCESS(PTIEN,RORFLAGS,ROR8LST) ;
"RTN","RORUTL15",78,0)
 N DRUGIEN,IRX,IVM,LOADEXT,ORDDATE,ORDER,ORDIEN,ORDFLG,RC,ROR8SET,RORLST,RORTMP,RORTS,RORXCNT,TMP,NUMREF
"RTN","RORUTL15",79,0)
 S LOADEXT=(RORFLAGS["E")
"RTN","RORUTL15",80,0)
 S (RC,RORXCNT)=0
"RTN","RORUTL15",81,0)
 S RORTMP=$$ALLOC^RORTMP(.RORTS)
"RTN","RORUTL15",82,0)
 ;
"RTN","RORUTL15",83,0)
 ;=== Determine the storage method (default or callback)
"RTN","RORUTL15",84,0)
 I $G(ROR8DST("RORCB"))?2"$"1.8UN1"^"1.8UN  D
"RTN","RORUTL15",85,0)
 . ;standard callback setup
"RTN","RORUTL15",86,0)
 . S ROR8SET="S RC="_ROR8DST("RORCB")_"(.ROR8DST,ORDER"
"RTN","RORUTL15",87,0)
 . S ROR8SET=ROR8SET_",ORDFLG,DRUGIEN_U_DRUGNAME,ORDDATE)"
"RTN","RORUTL15",88,0)
 . ;Patch 11: Variable 'RORX011' is set in routine RORX011 for the
"RTN","RORUTL15",89,0)
 . ;Patient Medications History report.  If set, add # refills
"RTN","RORUTL15",90,0)
 . ;remaining (NUMREF) to the callback parameter list.
"RTN","RORUTL15",91,0)
 . I $G(RORX011) S ROR8SET=$E(ROR8SET,1,$L(ROR8SET)-1)_",$G(NUMREF))"
"RTN","RORUTL15",92,0)
 . ;---
"RTN","RORUTL15",93,0)
 . S ROR8DST("RORDFN")=PTIEN
"RTN","RORUTL15",94,0)
 . S ROR8DST("ROREDT")=ROREDT
"RTN","RORUTL15",95,0)
 . S ROR8DST("RORFLAGS")=RORFLAGS
"RTN","RORUTL15",96,0)
 . S ROR8DST("RORSDT")=RORSDT
"RTN","RORUTL15",97,0)
 E  S ROR8SET=""  K @ROR8DST
"RTN","RORUTL15",98,0)
 ;
"RTN","RORUTL15",99,0)
 ;=== Process the list of preselected orders
"RTN","RORUTL15",100,0)
 S (IRX,RC)=0
"RTN","RORUTL15",101,0)
 F  S IRX=$O(@ROR8LST@(IRX))  Q:'IRX  D  Q:RC
"RTN","RORUTL15",102,0)
 . S ORDFLG=$P(@ROR8LST@(IRX),U)
"RTN","RORUTL15",103,0)
 . S TMP=@ROR8LST@(IRX,0)
"RTN","RORUTL15",104,0)
 . S ORDER=$P(TMP,U),ORDDATE=$P(TMP,U,15)
"RTN","RORUTL15",105,0)
 . ;Patch 11: get #refills remaining for Patient Medication History report:
"RTN","RORUTL15",106,0)
 . I $G(RORX011) S NUMREF=$P(TMP,U,5)
"RTN","RORUTL15",107,0)
 . ;--- Get the order details
"RTN","RORUTL15",108,0)
 . K ^TMP("PS",$J)
"RTN","RORUTL15",109,0)
 . D OEL^PSOORRL(PTIEN,ORDER)
"RTN","RORUTL15",110,0)
 . Q:$D(^TMP("PS",$J))<10
"RTN","RORUTL15",111,0)
 . ;=== Inpatient and Outpatient Medications
"RTN","RORUTL15",112,0)
 . I ORDFLG'["V"  D  Q
"RTN","RORUTL15",113,0)
 . . ;--- Double-check the dates for outpatient orders
"RTN","RORUTL15",114,0)
 . . I ORDFLG["O"  Q:$$DTCHECK(RORSDT,ROREDT)
"RTN","RORUTL15",115,0)
 . . ;--- Get the drug IEN in the DRUG file (#50)
"RTN","RORUTL15",116,0)
 . . S TMP=$G(^TMP("PS",$J,"DD",1,0)),DRUGIEN=+$P(TMP,U,3)
"RTN","RORUTL15",117,0)
 . . I DRUGIEN'>0  S DRUGIEN=+$P(TMP,U)  Q:DRUGIEN'>0
"RTN","RORUTL15",118,0)
 . . ;--- Process the order
"RTN","RORUTL15",119,0)
 . . S RC=$$PROCMED(ORDER,ORDFLG,DRUGIEN,ORDDATE)
"RTN","RORUTL15",120,0)
 . . S:'RC RORXCNT=RORXCNT+1
"RTN","RORUTL15",121,0)
 . . S:RC=1 RC=0
"RTN","RORUTL15",122,0)
 . ;=== IV Medications
"RTN","RORUTL15",123,0)
 . S RORLST=$$ALLOC^RORTMP(.TMP),ORDIEN=+ORDER
"RTN","RORUTL15",124,0)
 . D
"RTN","RORUTL15",125,0)
 . . N IEN,ORDER  ; Workaround for the bug in the API
"RTN","RORUTL15",126,0)
 . . D PSS436^PSS55(PTIEN,ORDIEN,TMP)
"RTN","RORUTL15",127,0)
 . I $G(@RORLST@(0))'>0  D FREE^RORTMP(RORLST)  Q
"RTN","RORUTL15",128,0)
 . ;--- Process the additives
"RTN","RORUTL15",129,0)
 . S IVM=0
"RTN","RORUTL15",130,0)
 . F  S IVM=$O(@RORLST@(ORDIEN,"ADD",IVM))  Q:IVM'>0  D  Q:RC
"RTN","RORUTL15",131,0)
 . . ;--- IEN in the IV ADDITIVES file (#52.6)
"RTN","RORUTL15",132,0)
 . . S DRUGIEN=+$P($G(@RORLST@(ORDIEN,"ADD",IVM,.01)),U)
"RTN","RORUTL15",133,0)
 . . Q:DRUGIEN'>0
"RTN","RORUTL15",134,0)
 . . ;--- IEN in the DRUG file (#50)
"RTN","RORUTL15",135,0)
 . . D ZERO^PSS52P6(DRUGIEN,,,RORTS)
"RTN","RORUTL15",136,0)
 . . Q:$G(@RORTMP@(0))'>0
"RTN","RORUTL15",137,0)
 . . S DRUGIEN=+$P($G(@RORTMP@(DRUGIEN,1)),U)
"RTN","RORUTL15",138,0)
 . . Q:DRUGIEN'>0
"RTN","RORUTL15",139,0)
 . . ;--- Process the medication
"RTN","RORUTL15",140,0)
 . . S RC=$$PROCMED(ORDER,ORDFLG,DRUGIEN,ORDDATE)
"RTN","RORUTL15",141,0)
 . . S:'RC RORXCNT=RORXCNT+1
"RTN","RORUTL15",142,0)
 . . S:RC=1 RC=0
"RTN","RORUTL15",143,0)
 . ;---
"RTN","RORUTL15",144,0)
 . D FREE^RORTMP(RORLST)
"RTN","RORUTL15",145,0)
 ;
"RTN","RORUTL15",146,0)
 ;===
"RTN","RORUTL15",147,0)
 D FREE^RORTMP(RORTMP)
"RTN","RORUTL15",148,0)
 Q $S(RC<0:RC,1:RORXCNT)
"RTN","RORUTL15",149,0)
 ;
"RTN","RORUTL15",150,0)
 ;***** PROCESS THE MEDICATION (internal)
"RTN","RORUTL15",151,0)
 ;
"RTN","RORUTL15",152,0)
 ; DRUGIEN       IEN of the medication in the DRUG file (#50)
"RTN","RORUTL15",153,0)
 ;
"RTN","RORUTL15",154,0)
 ; The ROR8DST, ROR8RXS, ROR8SET, RORTMP, and RORTS variables
"RTN","RORUTL15",155,0)
 ; must be defined before calling this function.
"RTN","RORUTL15",156,0)
 ;
"RTN","RORUTL15",157,0)
 ; Return Values:
"RTN","RORUTL15",158,0)
 ;       <0  Error code
"RTN","RORUTL15",159,0)
 ;        0  Ok
"RTN","RORUTL15",160,0)
 ;        1  Skip this medication
"RTN","RORUTL15",161,0)
 ;        2  Skip this and all remaining medications
"RTN","RORUTL15",162,0)
 ;
"RTN","RORUTL15",163,0)
PROCMED(ORDER,ORDFLG,DRUGIEN,ORDDATE) ;
"RTN","RORUTL15",164,0)
 N DRUGNAME,RC,ROR8BUF,SKIP,TMP
"RTN","RORUTL15",165,0)
 S RC=0
"RTN","RORUTL15",166,0)
 ;=== Load some drug data
"RTN","RORUTL15",167,0)
 D ARWS^PSS50(DRUGIEN,,RORTS)  K ROR8BUF
"RTN","RORUTL15",168,0)
 F TMP=2,20,25  S ROR8BUF(TMP)=$G(@RORTMP@(DRUGIEN,TMP))
"RTN","RORUTL15",169,0)
 S DRUGNAME=$G(@RORTMP@(DRUGIEN,.01))
"RTN","RORUTL15",170,0)
 S:DRUGNAME="" DRUGNAME="Unknown (IEN="_DRUGIEN_")"
"RTN","RORUTL15",171,0)
 K @RORTMP
"RTN","RORUTL15",172,0)
 ;--- Generic Drug
"RTN","RORUTL15",173,0)
 S ROR8DST("RORXGEN")=ROR8BUF(20)
"RTN","RORUTL15",174,0)
 I $P(ROR8BUF(20),U,2)=""  D  S $P(ROR8DST("RORXGEN"),U,2)=TMP
"RTN","RORUTL15",175,0)
 . S TMP="Unknown ("_(+ROR8BUF(20))_")"
"RTN","RORUTL15",176,0)
 ;--- VA Drug Class
"RTN","RORUTL15",177,0)
 S ROR8DST("RORXVCL")=""
"RTN","RORUTL15",178,0)
 D:ROR8BUF(2)'=""
"RTN","RORUTL15",179,0)
 . ;--- If the "national" drug class is the same, use its IEN
"RTN","RORUTL15",180,0)
 . I $P(ROR8BUF(25),U,2)=ROR8BUF(2)  D  Q
"RTN","RORUTL15",181,0)
 . . S ROR8DST("RORXVCL")=$P(ROR8BUF(25),U,1,2)
"RTN","RORUTL15",182,0)
 . ;--- Get the Drug Class IEN
"RTN","RORUTL15",183,0)
 . D IEN^PSN50P65(,ROR8BUF(2),RORTS)
"RTN","RORUTL15",184,0)
 . S TMP=+$G(@RORTMP@(0))
"RTN","RORUTL15",185,0)
 . S:TMP=1 ROR8DST("RORXVCL")=+$O(@RORTMP@(0))_U_ROR8BUF(2)
"RTN","RORUTL15",186,0)
 . K @RORTMP
"RTN","RORUTL15",187,0)
 ;
"RTN","RORUTL15",188,0)
 ;=== Check if the drug should be skipped
"RTN","RORUTL15",189,0)
 I ROR8RXS'="*"  S SKIP=0  D  Q:SKIP 1
"RTN","RORUTL15",190,0)
 . Q:$D(@ROR8RXS@(DRUGIEN))
"RTN","RORUTL15",191,0)
 . I $D(@ROR8RXS@("C"))>1  Q:$D(@ROR8RXS@("C",+ROR8DST("RORXVCL")))
"RTN","RORUTL15",192,0)
 . I $D(@ROR8RXS@("G"))>1  Q:$D(@ROR8RXS@("G",+ROR8DST("RORXGEN")))
"RTN","RORUTL15",193,0)
 . S SKIP=1
"RTN","RORUTL15",194,0)
 ;
"RTN","RORUTL15",195,0)
 ;--- Load additional drug data
"RTN","RORUTL15",196,0)
 ;D:LOADEXT
"RTN","RORUTL15",197,0)
 ;.
"RTN","RORUTL15",198,0)
 ;
"RTN","RORUTL15",199,0)
 ;=== Default output
"RTN","RORUTL15",200,0)
 I ROR8SET=""  D  Q 0
"RTN","RORUTL15",201,0)
 . S RORXCNT=RORXCNT+1
"RTN","RORUTL15",202,0)
 . M @ROR8DST@(RORXCNT)=^TMP("PS",$J)
"RTN","RORUTL15",203,0)
 . S TMP=ORDER_U_ORDFLG_U_ROR8DST("RORXGEN")
"RTN","RORUTL15",204,0)
 . S $P(TMP,U,5,6)=ROR8DST("RORXVCL")
"RTN","RORUTL15",205,0)
 . S @ROR8DST@(RORXCNT)=TMP
"RTN","RORUTL15",206,0)
 ;=== Callback function
"RTN","RORUTL15",207,0)
 X ROR8SET  ; (.ROR8DST,ORDER,ORDFLG,DRUGIEN_U_DRUGNAME,ORDDATE)
"RTN","RORUTL15",208,0)
 Q RC
"RTN","RORUTL15",209,0)
 ;
"RTN","RORUTL15",210,0)
 ;***** LOADS AND PRESELECTS PHARMACY ORDERS
"RTN","RORUTL15",211,0)
 ;
"RTN","RORUTL15",212,0)
 ; PTIEN         IEN of the patient (DFN)
"RTN","RORUTL15",213,0)
 ;
"RTN","RORUTL15",214,0)
 ; FLAGS         Flags to control processing
"RTN","RORUTL15",215,0)
 ;
"RTN","RORUTL15",216,0)
 ; STDT          Start date (FileMan)
"RTN","RORUTL15",217,0)
 ; ENDT          End date   (FileMan)
"RTN","RORUTL15",218,0)
 ;
"RTN","RORUTL15",219,0)
 ; ROR8LST       Closed root for the list of preselected orders
"RTN","RORUTL15",220,0)
 ;
"RTN","RORUTL15",221,0)
 ; @ROR8LST@(
"RTN","RORUTL15",222,0)
 ;   Seq#,               Flags that describe the order (I,O,P, etc.)
"RTN","RORUTL15",223,0)
 ;     0)                Content of the ^TMP("PS",$J,i,0) node
"RTN","RORUTL15",224,0)
 ;                       returned by the OCL^PSOORRL (see the DBIA
"RTN","RORUTL15",225,0)
 ;                       #2400 for details).
"RTN","RORUTL15",226,0)
 ;
"RTN","RORUTL15",227,0)
 ; Return Values:
"RTN","RORUTL15",228,0)
 ;       <0  Error code
"RTN","RORUTL15",229,0)
 ;        0  No orders have been found
"RTN","RORUTL15",230,0)
 ;       >0  Number of orders
"RTN","RORUTL15",231,0)
 ;
"RTN","RORUTL15",232,0)
QUERY(PTIEN,FLAGS,STDT,ENDT,ROR8LST) ;
"RTN","RORUTL15",233,0)
 N IEN,IRX,ORDER,RXCNT,TMP,TYPE
"RTN","RORUTL15",234,0)
 K ^TMP("PS",$J),@ROR8LST
"RTN","RORUTL15",235,0)
 ;
"RTN","RORUTL15",236,0)
 ;--- Prepare the flags
"RTN","RORUTL15",237,0)
 I FLAGS["I"  D  S TYPE("U;I")="I"
"RTN","RORUTL15",238,0)
 . S:FLAGS["P" TYPE("P;I")="IP"
"RTN","RORUTL15",239,0)
 . S:FLAGS["V" TYPE("V;I")="IV"
"RTN","RORUTL15",240,0)
 I FLAGS["O"  D  S TYPE("R;O")="O"
"RTN","RORUTL15",241,0)
 . S:FLAGS["P" TYPE("P;O")="OP"
"RTN","RORUTL15",242,0)
 ;
"RTN","RORUTL15",243,0)
 ;--- Load the list of pharmacy orders
"RTN","RORUTL15",244,0)
 D OCL^PSOORRL(PTIEN,STDT,ENDT)
"RTN","RORUTL15",245,0)
 Q:$D(^TMP("PS",$J))<10 0
"RTN","RORUTL15",246,0)
 ;
"RTN","RORUTL15",247,0)
 ;--- Preselect the orders
"RTN","RORUTL15",248,0)
 S (IRX,RXCNT)=0
"RTN","RORUTL15",249,0)
 F  S IRX=$O(^TMP("PS",$J,IRX))  Q:'IRX  D
"RTN","RORUTL15",250,0)
 . S ORDER=$P($G(^TMP("PS",$J,IRX,0)),U)  Q:ORDER'>0
"RTN","RORUTL15",251,0)
 . ;--- Check the type of order
"RTN","RORUTL15",252,0)
 . S TMP=$L(ORDER),TYPE=$E(ORDER,TMP-2,TMP)
"RTN","RORUTL15",253,0)
 . S TYPE=$G(TYPE(TYPE))  Q:TYPE=""
"RTN","RORUTL15",254,0)
 . ;--- Double-check the dates
"RTN","RORUTL15",255,0)
 . I TYPE["I"  D  Q:(TMP<STDT)!(TMP'<ENDT)
"RTN","RORUTL15",256,0)
 . . S TMP=+$P($G(^TMP("PS",$J,IRX,0)),U,15)
"RTN","RORUTL15",257,0)
 . I TYPE["O"  D  Q:TMP<STDT
"RTN","RORUTL15",258,0)
 . . S TMP=+$P($G(^TMP("PS",$J,IRX,0)),U,10)
"RTN","RORUTL15",259,0)
 . ;--- Select the order
"RTN","RORUTL15",260,0)
 . S RXCNT=RXCNT+1,@ROR8LST@(RXCNT)=TYPE
"RTN","RORUTL15",261,0)
 . S @ROR8LST@(RXCNT,0)=^TMP("PS",$J,IRX,0)
"RTN","RORUTL15",262,0)
 ;
"RTN","RORUTL15",263,0)
 ;--- Cleanup
"RTN","RORUTL15",264,0)
 K ^TMP("PS",$J)
"RTN","RORUTL15",265,0)
 Q RXCNT
"RTN","RORX003")
0^5^B37325159^B37325159
"RTN","RORX003",1,0)
RORX003 ;HOIFO/SG,VAC - GENERAL UTILIZATION AND DEMOGRAPHICS ;4/7/09 2:06pm
"RTN","RORX003",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,8,13**;Feb 17, 2006;Build 27
"RTN","RORX003",3,0)
 ;
"RTN","RORX003",4,0)
 ; This routine uses the following IAs:
"RTN","RORX003",5,0)
 ;
"RTN","RORX003",6,0)
 ; #10103  FMADD^XLFDT, FMDIFF^XLFDT, FMTE^XLFDT (supported)
"RTN","RORX003",7,0)
 ;
"RTN","RORX003",8,0)
 ;******************************************************************************
"RTN","RORX003",9,0)
 ;******************************************************************************
"RTN","RORX003",10,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX003",11,0)
 ;        
"RTN","RORX003",12,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX003",13,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX003",14,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX003",15,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX003",16,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX003",17,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX003",18,0)
 ;******************************************************************************
"RTN","RORX003",19,0)
 ;******************************************************************************
"RTN","RORX003",20,0)
 Q
"RTN","RORX003",21,0)
 ;
"RTN","RORX003",22,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX003",23,0)
 ;
"RTN","RORX003",24,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX003",25,0)
 ;
"RTN","RORX003",26,0)
 ; Return Values:
"RTN","RORX003",27,0)
 ;       <0  Error code
"RTN","RORX003",28,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX003",29,0)
 ;
"RTN","RORX003",30,0)
HEADER(PARTAG) ;
"RTN","RORX003",31,0)
 N COLUMNS,HEADER,NAME,NOTES,TMP
"RTN","RORX003",32,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX003",33,0)
 Q:HEADER<0 HEADER
"RTN","RORX003",34,0)
 S NOTES=$$ADDVAL^RORTSK11(RORTSK,"NOTES",,HEADER)
"RTN","RORX003",35,0)
 D ADDVAL^RORTSK11(RORTSK,"AGE_BASE_DATE",RORAGEDT,NOTES)
"RTN","RORX003",36,0)
 ;---
"RTN","RORX003",37,0)
 S COLUMNS=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORX003",38,0)
 Q:COLUMNS<0 COLUMNS
"RTN","RORX003",39,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"HEADER","1")
"RTN","RORX003",40,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"FOOTER","1")
"RTN","RORX003",41,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"NAME","PATIENTS")
"RTN","RORX003",42,0)
 S RORFL798=".01",RORFLICR=""
"RTN","RORX003",43,0)
 ;--- Required columns
"RTN","RORX003",44,0)
 F NAME="#","NAME"  D
"RTN","RORX003",45,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX003",46,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",NAME)
"RTN","RORX003",47,0)
 ;--- SSN or LAST4
"RTN","RORX003",48,0)
 S NAME=$S($$OPTCOL^RORXU006("SSN"):"SSN",1:"LAST4")
"RTN","RORX003",49,0)
 S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)  Q:TMP<0 TMP
"RTN","RORX003",50,0)
 D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",NAME)
"RTN","RORX003",51,0)
 ;--- Optional columns
"RTN","RORX003",52,0)
 F NAME="DOB","AGE","SEX","RACE","ETHN","RISK","SELDT","CONFDT","UTIL","DOD"  D
"RTN","RORX003",53,0)
 . Q:'$$OPTCOL^RORXU006(NAME)
"RTN","RORX003",54,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX003",55,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",NAME)
"RTN","RORX003",56,0)
 ;---
"RTN","RORX003",57,0)
 S:$$OPTCOL^RORXU006("CONFDT") RORFL798=RORFL798_";2"
"RTN","RORX003",58,0)
 S:$$OPTCOL^RORXU006("SELDT") RORFL798=RORFL798_";3.2"
"RTN","RORX003",59,0)
 Q HEADER
"RTN","RORX003",60,0)
 ;
"RTN","RORX003",61,0)
 ;***** COMPILES THE "GENERAL UTLIZATION AND DEMOGRAPHICS" REPORT
"RTN","RORX003",62,0)
 ; REPORT CODE: 003
"RTN","RORX003",63,0)
 ;
"RTN","RORX003",64,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX003",65,0)
 ;
"RTN","RORX003",66,0)
 ; Return Values:
"RTN","RORX003",67,0)
 ;       <0  Error code
"RTN","RORX003",68,0)
 ;        0  Ok
"RTN","RORX003",69,0)
 ;
"RTN","RORX003",70,0)
UTLDMG(RORTSK) ;
"RTN","RORX003",71,0)
 N RORAGEDT      ; Base date for age calculations
"RTN","RORX003",72,0)
 N RORDTE0       ; Beginning of the Date Entered "sliding window"
"RTN","RORX003",73,0)
 N ROREDT        ; End date
"RTN","RORX003",74,0)
 N RORFL798      ; Fields to load from the file #798
"RTN","RORX003",75,0)
 N RORFLICR      ; Fields to load from the file #799.4
"RTN","RORX003",76,0)
 N RORREG        ; Registry IEN
"RTN","RORX003",77,0)
 N RORRISK       ; Risk factor counters
"RTN","RORX003",78,0)
 N RORSDT        ; Start date
"RTN","RORX003",79,0)
 N RORSUM        ; Summary data
"RTN","RORX003",80,0)
 N RORUTIL       ; Requested utilization types
"RTN","RORX003",81,0)
 N RORUCNT       ; Utilization counters
"RTN","RORX003",82,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX003",83,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX003",84,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX003",85,0)
 ;
"RTN","RORX003",86,0)
 N CNT,ECNT,IEN,IENS,PARAMS,PATIENTS,RC,REPORT,RORPTN,SFLAGS,TMP,XREFNODE
"RTN","RORX003",87,0)
 N RCC,FLAG,DFN
"RTN","RORX003",88,0)
 ;--- Root node of the report
"RTN","RORX003",89,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX003",90,0)
 Q:REPORT<0 REPORT
"RTN","RORX003",91,0)
 ;
"RTN","RORX003",92,0)
 ;=== Get and prepare the report parameters
"RTN","RORX003",93,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")
"RTN","RORX003",94,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS)
"RTN","RORX003",95,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX003",96,0)
 ;--- Default set of columns for the summary-only report
"RTN","RORX003",97,0)
 S XREFNODE=$NA(RORTSK("PARAMS","OPTIONAL_COLUMNS","C"))
"RTN","RORX003",98,0)
 I $$PARAM^RORTSK01("OPTIONS","SUMMARY")  D
"RTN","RORX003",99,0)
 . F TMP="RACE","RISK","AGE","SEX","UTIL"  D
"RTN","RORX003",100,0)
 . . S @XREFNODE@(TMP)=""
"RTN","RORX003",101,0)
 S:$$OPTCOL^RORXU006("RACE") @XREFNODE@("ETHN")=""
"RTN","RORX003",102,0)
 ;--- Construct the description of utilization types
"RTN","RORX003",103,0)
 I '$$PARAM^RORTSK01("UTIL_TYPES","ALL")  D
"RTN","RORX003",104,0)
 . M RORUTIL=RORTSK("PARAMS","UTIL_TYPES","C")
"RTN","RORX003",105,0)
 E  S RORUTIL("ALL")=1
"RTN","RORX003",106,0)
 S TMP=$$OPTXT^RORXU002(.RORUTIL,7980000.019)
"RTN","RORX003",107,0)
 D ADDVAL^RORTSK11(RORTSK,"UTIL_TYPES",TMP,PARAMS)
"RTN","RORX003",108,0)
 ;
"RTN","RORX003",109,0)
 ;=== Initialize constants and variables
"RTN","RORX003",110,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX003",111,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",RORREG)),ECNT=0
"RTN","RORX003",112,0)
 S TMP=$$FMDIFF^XLFDT(ROREDT,RORSDT)
"RTN","RORX003",113,0)
 S RORAGEDT=$$FMADD^XLFDT(RORSDT,TMP\2)
"RTN","RORX003",114,0)
 S RORDTE0=$P($$FMTE^XLFDT(DT,7),"/")-10  ; 10 year "sliding window"
"RTN","RORX003",115,0)
 ;
"RTN","RORX003",116,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX003",117,0)
 ;
"RTN","RORX003",118,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX003",119,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT)
"RTN","RORX003",120,0)
 ;
"RTN","RORX003",121,0)
 D
"RTN","RORX003",122,0)
 . ;=== Report header
"RTN","RORX003",123,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX003",124,0)
 . ;---
"RTN","RORX003",125,0)
 . S PATIENTS=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX003",126,0)
 . I PATIENTS<0  S RC=+PATIENTS  Q
"RTN","RORX003",127,0)
 . D ADDATTR^RORTSK11(RORTSK,PATIENTS,"TABLE","PATIENTS")
"RTN","RORX003",128,0)
 . ;=== Browse through the registry records
"RTN","RORX003",129,0)
 . D TPPSETUP^RORTSK01(95)
"RTN","RORX003",130,0)
 . S (CNT,IEN,RC)=0
"RTN","RORX003",131,0)
 . F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX003",132,0)
 . . ;--- Calculate 'progress' for the GUI display
"RTN","RORX003",133,0)
 . . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX003",134,0)
 . . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX003",135,0)
 . . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX003",136,0)
 . . ;-- Get patient DFN
"RTN","RORX003",137,0)
 . . S DFN=$$PTIEN^RORUTL01(IEN) Q:DFN'>0
"RTN","RORX003",138,0)
 . . ;--- Check for patient list and quit if not in list
"RTN","RORX003",139,0)
 . . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",DFN)) Q
"RTN","RORX003",140,0)
 . . ;--- Check if the patient should be skipped
"RTN","RORX003",141,0)
 . . Q:$$SKIP^RORXU005(IEN,SFLAGS,RORSDT,ROREDT)
"RTN","RORX003",142,0)
 . . ;--- Check if the ICD9 Filter includes or excludes the patient
"RTN","RORX003",143,0)
 . . S RCC=0
"RTN","RORX003",144,0)
 . . I FLAG'="ALL" D
"RTN","RORX003",145,0)
 . . . S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX003",146,0)
 . . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX003",147,0)
 . . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX003",148,0)
 . . ;--- End of ICD9 check.
"RTN","RORX003",149,0)
 . . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX003",150,0)
 . . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,DFN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX003",151,0)
 . . ;--- Process the registry record
"RTN","RORX003",152,0)
 . . S TMP=$$PATIENT^RORX003A(IENS,PATIENTS)
"RTN","RORX003",153,0)
 . . I TMP<0  S ECNT=ECNT+1  Q
"RTN","RORX003",154,0)
 . Q:RC<0
"RTN","RORX003",155,0)
 . ;
"RTN","RORX003",156,0)
 . ;=== Report summary
"RTN","RORX003",157,0)
 . D TPPSETUP^RORTSK01(5)
"RTN","RORX003",158,0)
 . S RC=$$SUMMARY^RORX003A(REPORT,PATIENTS)  Q:RC<0
"RTN","RORX003",159,0)
 . ;
"RTN","RORX003",160,0)
 . ;=== Summary only
"RTN","RORX003",161,0)
 . S TMP=$$PARAM^RORTSK01("OPTIONS","COMPLETE")
"RTN","RORX003",162,0)
 . D:'TMP UPDVAL^RORTSK11(RORTSK,PATIENTS,,,1)
"RTN","RORX003",163,0)
 ;
"RTN","RORX003",164,0)
 ;=== Cleanup
"RTN","RORX003",165,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX004")
0^6^B25410396^B25410396
"RTN","RORX004",1,0)
RORX004 ;HOIFO/BH,SG,VAC - CLINIC FOLLOW UP ;4/7/09 2:06pm
"RTN","RORX004",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,13**;Feb 17, 2006;Build 27
"RTN","RORX004",3,0)
 ;
"RTN","RORX004",4,0)
 ; This routine uses the following IAs:
"RTN","RORX004",5,0)
 ;
"RTN","RORX004",6,0)
 ; #10061        2^VADPT (supported)
"RTN","RORX004",7,0)
 ;
"RTN","RORX004",8,0)
 ;******************************************************************************
"RTN","RORX004",9,0)
 ;******************************************************************************
"RTN","RORX004",10,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX004",11,0)
 ;        
"RTN","RORX004",12,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX004",13,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX004",14,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to add panel 180 to GUI.  The
"RTN","RORX004",15,0)
 ;                                      function is to permit a filter on ICD9 
"RTN","RORX004",16,0)
 ;                                      codes to Include or Exclude specific 
"RTN","RORX004",17,0)
 ;                                      ICD9 codes.  An extrinsic is called 
"RTN","RORX004",18,0)
 ;                                      RORXU010 and it is evaluated on return 
"RTN","RORX004",19,0)
 ;                                      as to whether or not to report the 
"RTN","RORX004",20,0)
 ;                                      patient.
"RTN","RORX004",21,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can now select specific patients or
"RTN","RORX004",22,0)
 ;                                      divisions for the report.
"RTN","RORX004",23,0)
 ;******************************************************************************
"RTN","RORX004",24,0)
 ;******************************************************************************
"RTN","RORX004",25,0)
 Q
"RTN","RORX004",26,0)
 ;
"RTN","RORX004",27,0)
 ;***** COMPILES THE "CLINIC FOLLOW UP" REPORT
"RTN","RORX004",28,0)
 ; REPORT CODE: 004
"RTN","RORX004",29,0)
 ;
"RTN","RORX004",30,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX004",31,0)
 ;
"RTN","RORX004",32,0)
 ; Return Values:
"RTN","RORX004",33,0)
 ;       <0  Error code
"RTN","RORX004",34,0)
 ;        0  Ok
"RTN","RORX004",35,0)
 ;
"RTN","RORX004",36,0)
CLNFLWUP(RORTSK) ;
"RTN","RORX004",37,0)
 N ROREDT        ; End date
"RTN","RORX004",38,0)
 N RORREG        ; Registry IEN
"RTN","RORX004",39,0)
 N RORSDT        ; Start date
"RTN","RORX004",40,0)
 N RORDLIST      ; Flag to indicate if a division list exists
"RTN","RORX004",41,0)
 N RORDSTDT      ; Start date for division utilization search
"RTN","RORX004",42,0)
 N RORDENDT      ; End date for division utilization search
"RTN","RORX004",43,0)
 ;
"RTN","RORX004",44,0)
 N CNT,ECNT,IEN,IENS,PATIENTS,RC,REPORT,RORPTN,SFLAGS,TMP,XREFNODE,DFN
"RTN","RORX004",45,0)
 ;--- Root node of the report
"RTN","RORX004",46,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX004",47,0)
 Q:REPORT<0 REPORT
"RTN","RORX004",48,0)
 ;
"RTN","RORX004",49,0)
 ;--- Get and prepare the report parameters
"RTN","RORX004",50,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")
"RTN","RORX004",51,0)
 S RC=$$PARAMS(REPORT,.RORSDT,.ROREDT,.SFLAGS)
"RTN","RORX004",52,0)
 Q:RC<0 RC
"RTN","RORX004",53,0)
 ;
"RTN","RORX004",54,0)
 ;--- Initialize constants and variables
"RTN","RORX004",55,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX004",56,0)
 S ECNT=0,XREFNODE=$NA(^RORDATA(798,"AC",RORREG))
"RTN","RORX004",57,0)
 ;
"RTN","RORX004",58,0)
 ;=== Set up Division list parameters
"RTN","RORX004",59,0)
 I $D(RORTSK("PARAMS","DIVISIONS","C")) S RORDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORDSTDT,.RORDENDT)
"RTN","RORX004",60,0)
 ;
"RTN","RORX004",61,0)
 D
"RTN","RORX004",62,0)
 . ;--- Report header
"RTN","RORX004",63,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX004",64,0)
 . S PATIENTS=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX004",65,0)
 . I PATIENTS<0  S RC=+PATIENTS  Q
"RTN","RORX004",66,0)
 . D ADDATTR^RORTSK11(RORTSK,PATIENTS,"TABLE","PATIENTS")
"RTN","RORX004",67,0)
 . ;
"RTN","RORX004",68,0)
 . ;--- Browse through the registry records
"RTN","RORX004",69,0)
 . D TPPSETUP^RORTSK01(100)
"RTN","RORX004",70,0)
 . S (CNT,IEN,RC)=0
"RTN","RORX004",71,0)
 . F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX004",72,0)
 . . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX004",73,0)
 . . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX004",74,0)
 . . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX004",75,0)
 . . ;--- Get patient DFN
"RTN","RORX004",76,0)
 . . S DFN=$$PTIEN^RORUTL01(IEN) Q:DFN'>0
"RTN","RORX004",77,0)
 . . ;--- Check for patient list and quit if not in list
"RTN","RORX004",78,0)
 . . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",DFN)) Q
"RTN","RORX004",79,0)
 . . ;--- Check if the patient should be skipped
"RTN","RORX004",80,0)
 . . Q:$$SKIP^RORXU005(IEN,SFLAGS,RORSDT,ROREDT)
"RTN","RORX004",81,0)
 . . ;--- Check for Division list and quit if not in list
"RTN","RORX004",82,0)
 . . I $D(RORTSK("PARAMS","DIVISIONS","C")),'$$CDUTIL^RORXU001(.RORTSK,DFN,RORDSTDT,RORDENDT) Q
"RTN","RORX004",83,0)
 . . ;--- Process the registry record
"RTN","RORX004",84,0)
 . . S TMP=$$PATIENT(IENS,PATIENTS)
"RTN","RORX004",85,0)
 . . I TMP<0  S ECNT=ECNT+1  Q
"RTN","RORX004",86,0)
 . Q:RC<0
"RTN","RORX004",87,0)
 ;
"RTN","RORX004",88,0)
 ;--- Cleanup
"RTN","RORX004",89,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX004",90,0)
 ;
"RTN","RORX004",91,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX004",92,0)
 ;
"RTN","RORX004",93,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX004",94,0)
 ;
"RTN","RORX004",95,0)
 ; Return Values:
"RTN","RORX004",96,0)
 ;       <0  Error code
"RTN","RORX004",97,0)
 ;        0  Ok
"RTN","RORX004",98,0)
 ;
"RTN","RORX004",99,0)
HEADER(PARTAG) ;
"RTN","RORX004",100,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,SEEN,LSNDT)
"RTN","RORX004",101,0)
 ;
"RTN","RORX004",102,0)
 N HEADER,RC
"RTN","RORX004",103,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX004",104,0)
 Q:HEADER<0 HEADER
"RTN","RORX004",105,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX004",HEADER)
"RTN","RORX004",106,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX004",107,0)
 ;
"RTN","RORX004",108,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX004",109,0)
 ;
"RTN","RORX004",110,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX004",111,0)
 ;
"RTN","RORX004",112,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX004",113,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX004",114,0)
 ;
"RTN","RORX004",115,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are
"RTN","RORX004",116,0)
 ;               returned via this parameter
"RTN","RORX004",117,0)
 ;
"RTN","RORX004",118,0)
 ; Return Values:
"RTN","RORX004",119,0)
 ;       <0  Error code
"RTN","RORX004",120,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX004",121,0)
 ;
"RTN","RORX004",122,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX004",123,0)
 N PARAMS,TMP
"RTN","RORX004",124,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,.STDT,.ENDT,.FLAGS)
"RTN","RORX004",125,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX004",126,0)
 ;--- Process the list of clinics
"RTN","RORX004",127,0)
 ;patch 13: code from CLINLST has been incorporated into PARAMS^RORXU002
"RTN","RORX004",128,0)
 ;S TMP=$$CLINLST^RORXU006(.RORTSK,PARAMS) ;removed in patch 13
"RTN","RORX004",129,0)
 ;Q:TMP<0 TMP ;removed in patch 13
"RTN","RORX004",130,0)
 ;---
"RTN","RORX004",131,0)
 Q PARAMS
"RTN","RORX004",132,0)
 ;
"RTN","RORX004",133,0)
 ;***** ADDS THE PATIENT DATA TO THE REPORT
"RTN","RORX004",134,0)
 ;
"RTN","RORX004",135,0)
 ; IENS          IENS of the patient's record in the registry
"RTN","RORX004",136,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX004",137,0)
 ;
"RTN","RORX004",138,0)
 ; Return Values:
"RTN","RORX004",139,0)
 ;       <0  Error code
"RTN","RORX004",140,0)
 ;        0  Ok
"RTN","RORX004",141,0)
 ;       >0  Skip the patient
"RTN","RORX004",142,0)
 ;
"RTN","RORX004",143,0)
PATIENT(IENS,PARTAG) ;
"RTN","RORX004",144,0)
 N CHK,CLINAIDS,DFN,IEN,RC,RCC,RORBUF,RORMSG,SEEN,TMP,VA,VADM,VAHOW,VAROOT,FLAG,PTAG
"RTN","RORX004",145,0)
 S RC=0
"RTN","RORX004",146,0)
 S DFN=$$PTIEN^RORUTL01(+IENS)
"RTN","RORX004",147,0)
 ;
"RTN","RORX004",148,0)
 ;--- Evaluates patient if IDC9 filter is Include or Exclude
"RTN","RORX004",149,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER")),RCC=0
"RTN","RORX004",150,0)
 I FLAG'="ALL" D
"RTN","RORX004",151,0)
 .S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX004",152,0)
 I (FLAG="INCLUDE")&(RCC=0) Q 1
"RTN","RORX004",153,0)
 I (FLAG="EXCLUDE")&(RCC=1) Q 1
"RTN","RORX004",154,0)
 ;
"RTN","RORX004",155,0)
 ;--- Only include patients that received utilization if care is true
"RTN","RORX004",156,0)
 I $$PARAM^RORTSK01("PATIENTS","CAREONLY")  D  Q:'TMP 1
"RTN","RORX004",157,0)
 . S CHK("ALL")=""
"RTN","RORX004",158,0)
 . S TMP=$$UTIL^RORXU003(RORSDT,ROREDT,DFN,.CHK)
"RTN","RORX004",159,0)
 ;
"RTN","RORX004",160,0)
 ;--- Select Seen/NotSeen patients
"RTN","RORX004",161,0)
 S SEEN=$$SEEN^RORXU001(RORSDT,ROREDT,DFN)
"RTN","RORX004",162,0)
 Q:'$$PARAM^RORTSK01("PATIENTS",$S(SEEN:"SEEN",1:"NOTSEEN")) 1
"RTN","RORX004",163,0)
 ;
"RTN","RORX004",164,0)
 ;--- Load the demographic data
"RTN","RORX004",165,0)
 D 2^VADPT
"RTN","RORX004",166,0)
 ;
"RTN","RORX004",167,0)
 ;--- The <PATIENT> tag
"RTN","RORX004",168,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PARTAG,,DFN)
"RTN","RORX004",169,0)
 Q:PTAG<0 PTAG
"RTN","RORX004",170,0)
 ;
"RTN","RORX004",171,0)
 ;--- Patient Name
"RTN","RORX004",172,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX004",173,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX004",174,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX004",175,0)
 ;--- Date of Death
"RTN","RORX004",176,0)
 S TMP=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX004",177,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",TMP,PTAG,1)
"RTN","RORX004",178,0)
 ;--- Seen/Not Seen
"RTN","RORX004",179,0)
 D ADDVAL^RORTSK11(RORTSK,"SEEN",SEEN,PTAG,1)
"RTN","RORX004",180,0)
 ;--- The latest date the patient was seen at any one of
"RTN","RORX004",181,0)
 ;--- the given clinics
"RTN","RORX004",182,0)
 S TMP=$$LASTVSIT^RORXU001(DFN)\1
"RTN","RORX004",183,0)
 D ADDVAL^RORTSK11(RORTSK,"LSNDT",$$DATE^RORXU002(TMP),PTAG,1)
"RTN","RORX004",184,0)
 Q 0
"RTN","RORX005A")
0^11^B38542920^B38542920
"RTN","RORX005A",1,0)
RORX005A ;HOIFO/BH,SG - INPATIENT UTILIZATION (QUERY) ;4/21/09 2:20pm
"RTN","RORX005A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,8,10,13**;Feb 17, 2006;Build 27
"RTN","RORX005A",3,0)
 ;
"RTN","RORX005A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX005A",5,0)
 ;
"RTN","RORX005A",6,0)
 ; #92           ^DGPT(  #45.7 (controlled)
"RTN","RORX005A",7,0)
 ; #417          .01 field and "C" x-ref of file #40.8 (controlled)
"RTN","RORX005A",8,0)
 ; #2056         $$GET1^DIQ (supported)
"RTN","RORX005A",9,0)
 ; #3545         ^DGPT("AAD" (private)
"RTN","RORX005A",10,0)
 ; #10061        IN5^VADPT (supported) 
"RTN","RORX005A",11,0)
 ; #10103        FMADD^XLFDT, FMDIFF^XLFDT (supported)
"RTN","RORX005A",12,0)
 ;
"RTN","RORX005A",13,0)
 ;******************************************************************************
"RTN","RORX005A",14,0)
 ;******************************************************************************
"RTN","RORX005A",15,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX005A",16,0)
 ;        
"RTN","RORX005A",17,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX005A",18,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX005A",19,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX005A",20,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX005A",21,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients.
"RTN","RORX005A",22,0)
 ;                                      
"RTN","RORX005A",23,0)
 ;******************************************************************************
"RTN","RORX005A",24,0)
 ;******************************************************************************
"RTN","RORX005A",25,0)
 Q
"RTN","RORX005A",26,0)
 ;
"RTN","RORX005A",27,0)
 ;***** ADDS THE INPATIENT STAY
"RTN","RORX005A",28,0)
 ;
"RTN","RORX005A",29,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORX005A",30,0)
 ; PTFIEN        IEN of the PTF record
"RTN","RORX005A",31,0)
 ; LOS           Length of stay
"RTN","RORX005A",32,0)
 ; BSID          Bed section ID
"RTN","RORX005A",33,0)
 ; DATE          Movement date/time (FileMan)
"RTN","RORX005A",34,0)
 ;
"RTN","RORX005A",35,0)
ADDSTAY(DFN,PTFIEN,LOS,BSID,DATE) ;
"RTN","RORX005A",36,0)
 N DST,I,TMP
"RTN","RORX005A",37,0)
 S:$G(BSID)="" BSID=0
"RTN","RORX005A",38,0)
 ;--- Number of patients for the bedsection
"RTN","RORX005A",39,0)
 I 'BSID  S DST=$NA(@RORDST@("IP",DFN))
"RTN","RORX005A",40,0)
 E  S DST=$NA(@RORDST@("IPB",BSID))  D:'$D(@DST@("P",DFN))
"RTN","RORX005A",41,0)
 . S @DST@("P")=$G(@DST@("P"))+1,@DST@("P",DFN)=""
"RTN","RORX005A",42,0)
 ;--- No bed section ID
"RTN","RORX005A",43,0)
 S:BSID<0 @RORDST@("IPNOBS",RORPNAME,DATE,PTFIEN,DFN)=""
"RTN","RORX005A",44,0)
 ;--- Short stays (visits)
"RTN","RORX005A",45,0)
 I LOS'>0  S @DST@("V")=$G(@DST@("V"))+1  Q
"RTN","RORX005A",46,0)
 ;--- Days and stays
"RTN","RORX005A",47,0)
 S @DST@("D")=$G(@DST@("D"))+LOS
"RTN","RORX005A",48,0)
 S @DST@("S")=$G(@DST@("S"))+1
"RTN","RORX005A",49,0)
 ;--- Lengths of stay for median value calculations
"RTN","RORX005A",50,0)
 S I=$O(@RORDST@("IPMLOS",BSID,LOS,""),-1)+1
"RTN","RORX005A",51,0)
 S @RORDST@("IPMLOS",BSID,LOS,I)=""
"RTN","RORX005A",52,0)
 Q
"RTN","RORX005A",53,0)
 ;
"RTN","RORX005A",54,0)
 ;***** LOADS AND PROCESSES THE INPATIENT DATA
"RTN","RORX005A",55,0)
 ;
"RTN","RORX005A",56,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORX005A",57,0)
 ;
"RTN","RORX005A",58,0)
 ; Return Values:
"RTN","RORX005A",59,0)
 ;       <0  Error code
"RTN","RORX005A",60,0)
 ;        0  Ok
"RTN","RORX005A",61,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX005A",62,0)
 ;
"RTN","RORX005A",63,0)
IPDATA(DFN) ;
"RTN","RORX005A",64,0)
 N RORDST        ; Closed reference to the category node in ^TMP
"RTN","RORX005A",65,0)
 ;
"RTN","RORX005A",66,0)
 N BSID,DATE,DISDT,ENDT,FACILITY,LOS,PTFIEN,RC,RORMSG,STDT,SUFFIX,TMP,VAHOW,VAIP,VAROOT,XDATE
"RTN","RORX005A",67,0)
 S RORDST=$NA(^TMP("RORX005",$J))
"RTN","RORX005A",68,0)
 ;---
"RTN","RORX005A",69,0)
 S XDATE=RORSDT
"RTN","RORX005A",70,0)
 F  S RC=0  D  Q:RC<2  S XDATE=$O(^DGPT("AAD",DFN,XDATE))  Q:XDATE'>0
"RTN","RORX005A",71,0)
 . I XDATE'<ROREDT1  S RC=1  Q
"RTN","RORX005A",72,0)
 . K DATE,LOS,VAIP  S VAIP(16,1)=XDATE
"RTN","RORX005A",73,0)
 . F  D  Q:RC
"RTN","RORX005A",74,0)
 . . S VAIP("D")=+$G(VAIP(16,1))
"RTN","RORX005A",75,0)
 . . I VAIP("D")'>0  S RC=2  Q
"RTN","RORX005A",76,0)
 . . D IN5^VADPT
"RTN","RORX005A",77,0)
 . . I $G(VAIP(1))'>0  S RC=2  Q
"RTN","RORX005A",78,0)
 . . S DATE=+VAIP(3)
"RTN","RORX005A",79,0)
 . . Q:+$G(VAIP(4))=3
"RTN","RORX005A",80,0)
 . . ;--- Check the movement date
"RTN","RORX005A",81,0)
 . . I DATE'<ROREDT1  S RC=1  Q
"RTN","RORX005A",82,0)
 . . S:DATE<RORSDT DATE=RORSDT
"RTN","RORX005A",83,0)
 . . ;--- Check the PTF record - Task removed April 2009
"RTN","RORX005A",84,0)
 . . S PTFIEN=+$G(VAIP(12))  Q:PTFIEN'>0
"RTN","RORX005A",85,0)
 . . I '$D(PTFIEN(PTFIEN))  D  Q:RC
"RTN","RORX005A",86,0)
 . . . S PTFIEN(PTFIEN)=0
"RTN","RORX005A",87,0)
 . . . Q:$$PTF^RORXU001(PTFIEN,"FP",,,.SUFFIX,,.FACILITY)
"RTN","RORX005A",88,0)
 . . . ;--- Check the suffix
"RTN","RORX005A",89,0)
 . . . ;I SUFFIX'=""  Q:$$VSUFFIX(SUFFIX)  ; ROR 1.5
"RTN","RORX005A",90,0)
 . . . ;--- Check the division
"RTN","RORX005A",91,0)
 . . . S TMP=$$PARAM^RORTSK01("DIVISIONS","ALL")
"RTN","RORX005A",92,0)
 . . . I 'TMP  D  Q:'$D(RORTSK("PARAMS","DIVISIONS","C",DIVIEN))
"RTN","RORX005A",93,0)
 . . . . S TMP=FACILITY_SUFFIX
"RTN","RORX005A",94,0)
 . . . . S DIVIEN=$S(TMP'="":+$O(^DG(40.8,"C",TMP,"")),1:0)
"RTN","RORX005A",95,0)
 . . . K DIVIEN ;kill statement added
"RTN","RORX005A",96,0)
 . . . S PTFIEN(PTFIEN)=1
"RTN","RORX005A",97,0)
 . . ;--- Skip the PTF record if necessary
"RTN","RORX005A",98,0)
 . . Q:'PTFIEN(PTFIEN)
"RTN","RORX005A",99,0)
 . . ;--- Process the admission (only once)
"RTN","RORX005A",100,0)
 . . I '$D(LOS)  D  Q:RC
"RTN","RORX005A",101,0)
 . . . S LOS=$$LOS(+$G(VAIP(13,1)),+$G(VAIP(17,1)))
"RTN","RORX005A",102,0)
 . . . D ADDSTAY(DFN,PTFIEN,LOS)
"RTN","RORX005A",103,0)
 . . ;--- Process the movement
"RTN","RORX005A",104,0)
 . . S ENDT=$G(VAIP(16,1))\1
"RTN","RORX005A",105,0)
 . . S:(ENDT'>0)!(ENDT'<ROREDT1) ENDT=ROREDT,RC=2
"RTN","RORX005A",106,0)
 . . Q:ENDT<RORSDT
"RTN","RORX005A",107,0)
 . . S LOS=$$FMDIFF^XLFDT(ENDT,DATE\1,1)  S:LOS'>0 LOS=0
"RTN","RORX005A",108,0)
 . . ;--- Use the IEN in the SPECIALTY file (#42.4) as the Bedsection 
"RTN","RORX005A",109,0)
 . . ;    ID if it is available (it should be). Otherwise, use the
"RTN","RORX005A",110,0)
 . . ;--- IEN in the FACILITY TREATING SPECIALTY file (#45.7).
"RTN","RORX005A",111,0)
 . . I $G(VAIP(8))>0  D
"RTN","RORX005A",112,0)
 . . . K RORMSG S TMP=$$GET1^DIQ(45.7,+VAIP(8),1,"I",,"RORMSG")
"RTN","RORX005A",113,0)
 . . . ;D:$G(DIERR) DBS^RORERR("RORMSG",-9,,DFN,45.7,+VAIP(8))
"RTN","RORX005A",114,0)
 . . . D:$G(RORMSG("DIERR")) DBS^RORERR("RORMSG",-9,,DFN,45.7,+VAIP(8))
"RTN","RORX005A",115,0)
 . . . S BSID=$S(TMP>0:TMP_";42.4",1:+VAIP(8)_";45.7")
"RTN","RORX005A",116,0)
 . . E  S BSID=-1
"RTN","RORX005A",117,0)
 . . D ADDSTAY(DFN,PTFIEN,LOS,BSID,+VAIP(3))
"RTN","RORX005A",118,0)
 . S:$G(DATE)>XDATE XDATE=DATE
"RTN","RORX005A",119,0)
 ;---
"RTN","RORX005A",120,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX005A",121,0)
 ;
"RTN","RORX005A",122,0)
 ;***** CALCULATES THE LENGTH OF STAY
"RTN","RORX005A",123,0)
LOS(STDT,ENDT) ;
"RTN","RORX005A",124,0)
 N DAYS
"RTN","RORX005A",125,0)
 S:STDT<RORSDT STDT=RORSDT
"RTN","RORX005A",126,0)
 S:(ENDT'>0)!(ENDT>ROREDT) ENDT=ROREDT
"RTN","RORX005A",127,0)
 S DAYS=$$FMDIFF^XLFDT(ENDT\1,STDT\1,1)
"RTN","RORX005A",128,0)
 Q $S(DAYS'<0:DAYS,1:0)
"RTN","RORX005A",129,0)
 ;
"RTN","RORX005A",130,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX005A",131,0)
 ;
"RTN","RORX005A",132,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX005A",133,0)
 ;
"RTN","RORX005A",134,0)
 ; Return Values:
"RTN","RORX005A",135,0)
 ;       <0  Error code
"RTN","RORX005A",136,0)
 ;        0  Ok
"RTN","RORX005A",137,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX005A",138,0)
 ;
"RTN","RORX005A",139,0)
QUERY(FLAGS) ;
"RTN","RORX005A",140,0)
 N ROREDT1       ; Day after the end date
"RTN","RORX005A",141,0)
 N RORLAST4      ; Last 4 digits of the current patient's SSN
"RTN","RORX005A",142,0)
 N RORPNAME      ; Name of the current patient
"RTN","RORX005A",143,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX005A",144,0)
 ;
"RTN","RORX005A",145,0)
 N CNT,ECNT,IEN,IENS,PATIEN,RC,TMP,VA,VADM,XREFNODE
"RTN","RORX005A",146,0)
 N RCC,FLAG
"RTN","RORX005A",147,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX005A",148,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX005A",149,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT,1)
"RTN","RORX005A",150,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX005A",151,0)
 ;--- Browse through the registry records
"RTN","RORX005A",152,0)
 S IEN=0
"RTN","RORX005A",153,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX005A",154,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX005A",155,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX005A",156,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX005A",157,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX005A",158,0)
 . ;--- Get the patient DFN
"RTN","RORX005A",159,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX005A",160,0)
 . ;check for patient list and quit if not on list
"RTN","RORX005A",161,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PATIEN)) Q
"RTN","RORX005A",162,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX005A",163,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX005A",164,0)
 . ;--- Filter patient on ICD9 codes
"RTN","RORX005A",165,0)
 . S RCC=0
"RTN","RORX005A",166,0)
 . I FLAG'="ALL" D
"RTN","RORX005A",167,0)
 . . S RCC=$$ICD^RORXU010(PATIEN,RORREG)
"RTN","RORX005A",168,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX005A",169,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX005A",170,0)
 . ;--- End of filter
"RTN","RORX005A",171,0)
 . ;
"RTN","RORX005A",172,0)
 . ;--- Get the patient's data
"RTN","RORX005A",173,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX005A",174,0)
 . S RORPNAME=VADM(1),RORLAST4=VA("BID")
"RTN","RORX005A",175,0)
 . ;
"RTN","RORX005A",176,0)
 . ;--- Get the inpatient data
"RTN","RORX005A",177,0)
 . S RC=$$IPDATA(PATIEN)
"RTN","RORX005A",178,0)
 . I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX005A",179,0)
 . ;
"RTN","RORX005A",180,0)
 . ;--- Calculate intermediate totals
"RTN","RORX005A",181,0)
 . S RC=$$TOTALS^RORX005B(PATIEN)
"RTN","RORX005A",182,0)
 . I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX005A",183,0)
 ;---
"RTN","RORX005A",184,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX005A",185,0)
 ;
"RTN","RORX005A",186,0)
 ;***** CHECKS THE SUFFIX FOR VALIDITY
"RTN","RORX005A",187,0)
 ;
"RTN","RORX005A",188,0)
 ; SUFFIX        Suffix
"RTN","RORX005A",189,0)
 ;
"RTN","RORX005A",190,0)
 ; Return Values:
"RTN","RORX005A",191,0)
 ;        0  Ok
"RTN","RORX005A",192,0)
 ;        1  Invalid suffix
"RTN","RORX005A",193,0)
VSUFFIX(SUFFIX) ;
"RTN","RORX005A",194,0)
 Q '("9AA,9AB,9AC,9AD,9AE,9BB,A0,A4,A5,BU,BV,PA"[SUFFIX)
"RTN","RORX006A")
0^12^B33446739^B33446739
"RTN","RORX006A",1,0)
RORX006A ;HOIFO/BH,SG,VAC - LAB UTILIZATION (QUERY & SORT) ;4/7/09 2:07pm
"RTN","RORX006A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,13**;Feb 17, 2006;Build 27
"RTN","RORX006A",3,0)
 ;
"RTN","RORX006A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX006A",5,0)
 ;
"RTN","RORX006A",6,0)
 ; #2056         GET1^DIQ (supported)
"RTN","RORX006A",7,0)
 ; 
"RTN","RORX006A",8,0)
 ;******************************************************************************
"RTN","RORX006A",9,0)
 ;******************************************************************************
"RTN","RORX006A",10,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX006A",11,0)
 ;        
"RTN","RORX006A",12,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX006A",13,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX006A",14,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX006A",15,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX006A",16,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX006A",17,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX006A",18,0)
 ;                                      
"RTN","RORX006A",19,0)
 ;******************************************************************************
"RTN","RORX006A",20,0)
 ;******************************************************************************
"RTN","RORX006A",21,0)
 Q
"RTN","RORX006A",22,0)
 ;
"RTN","RORX006A",23,0)
 ;***** LOADS AND PROCESSES THE LAB DATA
"RTN","RORX006A",24,0)
 ;
"RTN","RORX006A",25,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORX006A",26,0)
 ;
"RTN","RORX006A",27,0)
 ; Return Values:
"RTN","RORX006A",28,0)
 ;       <0  Error code
"RTN","RORX006A",29,0)
 ;        0  Ok
"RTN","RORX006A",30,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX006A",31,0)
 ;
"RTN","RORX006A",32,0)
LABDATA(DFN) ;
"RTN","RORX006A",33,0)
 N DST,ENDT,NR,PTNO,PTNR,PRNT,RC,TSTIEN
"RTN","RORX006A",34,0)
 S DST=$NA(^TMP("RORX006",$J))
"RTN","RORX006A",35,0)
 ;
"RTN","RORX006A",36,0)
 ;--- Get the data
"RTN","RORX006A",37,0)
 S DST("RORCB")="$$LTSCB^RORX006A",DST("RORIDT")=""
"RTN","RORX006A",38,0)
 S RC=$$LTSEARCH^RORUTL10(DFN,RORLTST,.DST,,RORSDT,ROREDT1)
"RTN","RORX006A",39,0)
 Q:RC<0 RC  Q:$D(@DST@("PAT",DFN))<10 0
"RTN","RORX006A",40,0)
 ;
"RTN","RORX006A",41,0)
 ;--- Calculate intermediate totals of the tests
"RTN","RORX006A",42,0)
 N PTNT ;added 'new' statement
"RTN","RORX006A",43,0)
 S TSTIEN=0,(PTNR,PTNT)=0
"RTN","RORX006A",44,0)
 F  S TSTIEN=$O(@DST@("PAT",DFN,"R",TSTIEN))  Q:TSTIEN'>0  D
"RTN","RORX006A",45,0)
 . S NR=+$G(@DST@("PAT",DFN,"R",TSTIEN))
"RTN","RORX006A",46,0)
 . S PTNR=PTNR+NR  ; Number of patient's results
"RTN","RORX006A",47,0)
 . S PTNT=PTNT+1   ; Number of different tests
"RTN","RORX006A",48,0)
 . ;---
"RTN","RORX006A",49,0)
 . S @DST@("RES",TSTIEN,"P")=$G(@DST@("RES",TSTIEN,"P"))+1
"RTN","RORX006A",50,0)
 . S @DST@("RES",TSTIEN,"R")=$G(@DST@("RES",TSTIEN,"R"))+NR
"RTN","RORX006A",51,0)
 . ;---
"RTN","RORX006A",52,0)
 . S TMP=$G(@DST@("RES",TSTIEN,"M"))
"RTN","RORX006A",53,0)
 . D:NR'<TMP
"RTN","RORX006A",54,0)
 . . I NR>TMP  S @DST@("RES",TSTIEN,"M")=NR_U_1  Q
"RTN","RORX006A",55,0)
 . . S $P(@DST@("RES",TSTIEN,"M"),U,2)=$P(TMP,U,2)+1
"RTN","RORX006A",56,0)
 ;
"RTN","RORX006A",57,0)
 ;--- Orders
"RTN","RORX006A",58,0)
 S @DST@("ORD")=$G(@DST@("ORD"))+$G(@DST@("PAT",DFN,"O"))
"RTN","RORX006A",59,0)
 ;
"RTN","RORX006A",60,0)
 ;--- Results
"RTN","RORX006A",61,0)
 S @DST@("RES1",PTNR)=$G(@DST@("RES1",PTNR))+1
"RTN","RORX006A",62,0)
 S @DST@("RES1",PTNR,RORPNAME,DFN)=""
"RTN","RORX006A",63,0)
 ;
"RTN","RORX006A",64,0)
 ;--- Other totals
"RTN","RORX006A",65,0)
 S @DST@("PAT",DFN)=RORLAST4_U_RORDOD
"RTN","RORX006A",66,0)
 S @DST@("PAT",DFN,"R")=PTNR_U_PTNT
"RTN","RORX006A",67,0)
 S @DST@("PAT")=$G(@DST@("PAT"))+1
"RTN","RORX006A",68,0)
 S @DST@("RES")=$G(@DST@("RES"))+PTNR
"RTN","RORX006A",69,0)
 Q 0
"RTN","RORX006A",70,0)
 ;
"RTN","RORX006A",71,0)
 ;***** LAB SEARCH CALLBACK
"RTN","RORX006A",72,0)
 ;
"RTN","RORX006A",73,0)
 ; .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX006A",74,0)
 ;
"RTN","RORX006A",75,0)
 ; INVDT         IEN of the Lab test (inverted date)
"RTN","RORX006A",76,0)
 ;
"RTN","RORX006A",77,0)
 ; .RESULT       Reference to a local variable, which contains
"RTN","RORX006A",78,0)
 ;               the result (see the $$LTSEARCH^RORUTL10).
"RTN","RORX006A",79,0)
 ;
"RTN","RORX006A",80,0)
 ; Return Values:
"RTN","RORX006A",81,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX006A",82,0)
 ;        0  Ok
"RTN","RORX006A",83,0)
 ;        1  Skip this result
"RTN","RORX006A",84,0)
 ;        2  Skip this and all remaining results
"RTN","RORX006A",85,0)
 ;
"RTN","RORX006A",86,0)
LTSCB(ROR8DST,INVDT,RESULT) ;
"RTN","RORX006A",87,0)
 N DFN,TMP,TSTIEN
"RTN","RORX006A",88,0)
 S DFN=+ROR8DST("RORDFN"),TSTIEN=+RESULT(2)
"RTN","RORX006A",89,0)
 ;--- Number of orders
"RTN","RORX006A",90,0)
 I INVDT'=ROR8DST("RORIDT")  D  S ROR8DST("RORIDT")=INVDT
"RTN","RORX006A",91,0)
 . S @ROR8DST@("PAT",DFN,"O")=$G(@ROR8DST@("PAT",DFN,"O"))+1
"RTN","RORX006A",92,0)
 ;--- Number of results
"RTN","RORX006A",93,0)
 S TMP=$G(@ROR8DST@("PAT",DFN,"R",TSTIEN))
"RTN","RORX006A",94,0)
 S @ROR8DST@("PAT",DFN,"R",TSTIEN)=TMP+1
"RTN","RORX006A",95,0)
 Q 0
"RTN","RORX006A",96,0)
 ;
"RTN","RORX006A",97,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX006A",98,0)
 ;
"RTN","RORX006A",99,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX006A",100,0)
 ;
"RTN","RORX006A",101,0)
 ; Return Values:
"RTN","RORX006A",102,0)
 ;       <0  Error code
"RTN","RORX006A",103,0)
 ;        0  Ok
"RTN","RORX006A",104,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX006A",105,0)
 ;
"RTN","RORX006A",106,0)
QUERY(FLAGS) ;
"RTN","RORX006A",107,0)
 N RORDOD        ; Date of death of the current patient
"RTN","RORX006A",108,0)
 N RORLAST4      ; Last 4 digits of the current patient's SSN
"RTN","RORX006A",109,0)
 N RORPNAME      ; Name of the current patient
"RTN","RORX006A",110,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX006A",111,0)
 ;
"RTN","RORX006A",112,0)
 N CNT,ECNT,IEN,IENS,PATIEN,RC,TMP,VA,VADM,XREFNODE
"RTN","RORX006A",113,0)
 N RCC,FLAG
"RTN","RORX006A",114,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX006A",115,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX006A",116,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX006A",117,0)
 ;
"RTN","RORX006A",118,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX006A",119,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX006A",120,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX006A",121,0)
 ;
"RTN","RORX006A",122,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX006A",123,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT)
"RTN","RORX006A",124,0)
 ;
"RTN","RORX006A",125,0)
 ;--- Browse through the registry records
"RTN","RORX006A",126,0)
 S IEN=0
"RTN","RORX006A",127,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX006A",128,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX006A",129,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX006A",130,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX006A",131,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX006A",132,0)
 . ;--- Get the patient DFN
"RTN","RORX006A",133,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX006A",134,0)
 . ;--- Check for patient list and quit if not on list
"RTN","RORX006A",135,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PATIEN)) Q
"RTN","RORX006A",136,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX006A",137,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX006A",138,0)
 . ;--- Check if ICD9 Filter Includes or Excludes Patient
"RTN","RORX006A",139,0)
 . S RCC=0
"RTN","RORX006A",140,0)
 . I FLAG'="ALL" D
"RTN","RORX006A",141,0)
 . . S RCC=$$ICD^RORXU010(PATIEN,RORREG)
"RTN","RORX006A",142,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX006A",143,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX006A",144,0)
 . ;--- End of ICD9 Filter check
"RTN","RORX006A",145,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX006A",146,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX006A",147,0)
 . ;--- Get the patient's data
"RTN","RORX006A",148,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX006A",149,0)
 . S RORPNAME=VADM(1),RORLAST4=VA("BID")
"RTN","RORX006A",150,0)
 . S RORDOD=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX006A",151,0)
 . ;
"RTN","RORX006A",152,0)
 . ;--- Get the Lab data
"RTN","RORX006A",153,0)
 . S RC=$$LABDATA(PATIEN)
"RTN","RORX006A",154,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX006A",155,0)
 ;---
"RTN","RORX006A",156,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX006A",157,0)
 ;
"RTN","RORX006A",158,0)
 ;***** SORTS THE RESULTS AND COMPILES THE TOTALS
"RTN","RORX006A",159,0)
 ;
"RTN","RORX006A",160,0)
 ; Return Values:
"RTN","RORX006A",161,0)
 ;       <0  Error code
"RTN","RORX006A",162,0)
 ;        0  Ok
"RTN","RORX006A",163,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX006A",164,0)
 ;
"RTN","RORX006A",165,0)
SORT() ;
"RTN","RORX006A",166,0)
 N ECNT,IEN,NAME,NDLT,NODE,RC,RORMSG,TMP
"RTN","RORX006A",167,0)
 S NODE=$NA(^TMP("RORX006",$J)),(ECNT,RC)=0
"RTN","RORX006A",168,0)
 ;---
"RTN","RORX006A",169,0)
 S RC=$$LOOP^RORTSK01(0)  Q:RC<0 RC
"RTN","RORX006A",170,0)
 Q:$D(@NODE)<10 0
"RTN","RORX006A",171,0)
 ;---
"RTN","RORX006A",172,0)
 S IEN=0,NDLT=0
"RTN","RORX006A",173,0)
 F  S IEN=$O(@NODE@("RES",IEN))  Q:IEN'>0  D
"RTN","RORX006A",174,0)
 . S NDLT=NDLT+1
"RTN","RORX006A",175,0)
 . K RORMSG S NAME=$$GET1^DIQ(60,IEN,.01,,,"RORMSG")
"RTN","RORX006A",176,0)
 . ;D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,60,IEN)
"RTN","RORX006A",177,0)
 . D:$G(RORMSG("DIERR")) DBS^RORERR("RORMSG",-9,,,60,IEN)
"RTN","RORX006A",178,0)
 . S:NAME?." " NAME="Unknown ("_IEN_")"
"RTN","RORX006A",179,0)
 . S TMP=+$G(@NODE@("RES",IEN,"R"))
"RTN","RORX006A",180,0)
 . S @NODE@("RES","B",TMP,NAME,IEN)=""
"RTN","RORX006A",181,0)
 ;--- Total numbers of Lab tests
"RTN","RORX006A",182,0)
 S $P(@NODE@("RES"),U,2)=NDLT
"RTN","RORX006A",183,0)
 ;---
"RTN","RORX006A",184,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX007A")
0^13^B25232646^B25232646
"RTN","RORX007A",1,0)
RORX007A ;HOIFO/BH,SG,VAC - RADIOLOGY UTILIZATION (OVERFLOW) ;4/7/09 2:07pm
"RTN","RORX007A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,8,13**;Feb 17, 2006;Build 27
"RTN","RORX007A",3,0)
 ;
"RTN","RORX007A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX007A",5,0)
 ;
"RTN","RORX007A",6,0)
 ; #2043         EN1^RAO7PC1 (supported)
"RTN","RORX007A",7,0)
 ;
"RTN","RORX007A",8,0)
 ;******************************************************************************
"RTN","RORX007A",9,0)
 ;******************************************************************************
"RTN","RORX007A",10,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX007A",11,0)
 ;        
"RTN","RORX007A",12,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX007A",13,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX007A",14,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX007A",15,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX007A",16,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX007A",17,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX007A",18,0)
 ;                                      
"RTN","RORX007A",19,0)
 ;******************************************************************************
"RTN","RORX007A",20,0)
 ;******************************************************************************
"RTN","RORX007A",21,0)
 Q
"RTN","RORX007A",22,0)
 ;
"RTN","RORX007A",23,0)
 ;***** APPENDS MODIFIERS TO THE CPT CODE
"RTN","RORX007A",24,0)
 ;
"RTN","RORX007A",25,0)
 ; CPT           CPT code
"RTN","RORX007A",26,0)
 ;
"RTN","RORX007A",27,0)
 ; NODE          Closed root of the exam data node returned
"RTN","RORX007A",28,0)
 ;               by the EN1^RAO7PC1
"RTN","RORX007A",29,0)
 ;
"RTN","RORX007A",30,0)
CPTMOD(CPT,NODE) ;
"RTN","RORX007A",31,0)
 N CPM,RORIM
"RTN","RORX007A",32,0)
 S RORIM=""
"RTN","RORX007A",33,0)
 F  S RORIM=$O(@NODE@("CMOD",RORIM))  Q:RORIM=""  D
"RTN","RORX007A",34,0)
 . S CPM=$P($G(@NODE@("CMOD",RORIM)),U)
"RTN","RORX007A",35,0)
 . S:CPM'="" CPT=CPT_"-"_CPM
"RTN","RORX007A",36,0)
 Q CPT
"RTN","RORX007A",37,0)
 ;
"RTN","RORX007A",38,0)
 ;***** LOADS AND PROCESSES THE RADIOLOGY DATA
"RTN","RORX007A",39,0)
 ;
"RTN","RORX007A",40,0)
 ; DFN           Patient IEN (in file #2)
"RTN","RORX007A",41,0)
 ;
"RTN","RORX007A",42,0)
 ; Return Values:
"RTN","RORX007A",43,0)
 ;       <0  Error code
"RTN","RORX007A",44,0)
 ;        0  Ok
"RTN","RORX007A",45,0)
 ;
"RTN","RORX007A",46,0)
GETDATA(DFN) ;
"RTN","RORX007A",47,0)
 N CPT,EXAMID,NODE,PRNAME,RORBUF
"RTN","RORX007A",48,0)
 ;--- Get the data
"RTN","RORX007A",49,0)
 D EN1^RAO7PC1(DFN,RORSDT,ROREDT,999999)
"RTN","RORX007A",50,0)
 ;data returned from radiology/nuclear medicine API in ^TMP($J,"RAE1"
"RTN","RORX007A",51,0)
 Q:'$D(^TMP($J,"RAE1",PATIEN)) 0
"RTN","RORX007A",52,0)
 ;
"RTN","RORX007A",53,0)
 ;--- Process the data
"RTN","RORX007A",54,0)
 S EXAMID=""
"RTN","RORX007A",55,0)
 F  S EXAMID=$O(^TMP($J,"RAE1",DFN,EXAMID))  Q:EXAMID=""  D
"RTN","RORX007A",56,0)
 . S NODE=$NA(^TMP($J,"RAE1",DFN,EXAMID))
"RTN","RORX007A",57,0)
 . S RORBUF=$G(@NODE),CPT=$$CPTMOD($P(RORBUF,U,10),NODE)
"RTN","RORX007A",58,0)
 . ;--- Get Procedure Name
"RTN","RORX007A",59,0)
 . S PRNAME=$E($P(RORBUF,U),1,30)  Q:PRNAME=""
"RTN","RORX007A",60,0)
 . S PRNAME=PRNAME_U_$S(CPT'="":CPT,1:" ")
"RTN","RORX007A",61,0)
 . ;--- Increment the counters
"RTN","RORX007A",62,0)
 . S ^(DFN)=$G(^TMP("RORX007",$J,"PROC",PRNAME,DFN))+1 ;naked reference: ^TMP("RORX007",$J,"PROC",PRNAME,DFN)
"RTN","RORX007A",63,0)
 . S ^(PRNAME)=$G(^TMP("RORX007",$J,"PAT",DFN,PRNAME))+1 ;naked reference: ^TMP("RORX007",$J,"PROC",PRNAME,DFN,PRNAME)
"RTN","RORX007A",64,0)
 ;
"RTN","RORX007A",65,0)
 ;--- Cleanup
"RTN","RORX007A",66,0)
 K ^TMP($J,"RAE1")
"RTN","RORX007A",67,0)
 Q 0
"RTN","RORX007A",68,0)
 ;
"RTN","RORX007A",69,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX007A",70,0)
 ;
"RTN","RORX007A",71,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX007A",72,0)
 ;
"RTN","RORX007A",73,0)
 ; Return Values:
"RTN","RORX007A",74,0)
 ;       <0  Error code
"RTN","RORX007A",75,0)
 ;        0  Ok
"RTN","RORX007A",76,0)
 ;
"RTN","RORX007A",77,0)
HEADER(PARTAG) ;
"RTN","RORX007A",78,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,TOTAL,UNIQUE)
"RTN","RORX007A",79,0)
 ;;PROCEDURES(#,NAME,CPT,PATIENTS,TOTAL)
"RTN","RORX007A",80,0)
 ;
"RTN","RORX007A",81,0)
 N HEADER,RC
"RTN","RORX007A",82,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX007A",83,0)
 Q:HEADER<0 HEADER
"RTN","RORX007A",84,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX007A",HEADER)
"RTN","RORX007A",85,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX007A",86,0)
 ;
"RTN","RORX007A",87,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX007A",88,0)
 ;
"RTN","RORX007A",89,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX007A",90,0)
 ;
"RTN","RORX007A",91,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX007A",92,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX007A",93,0)
 ;
"RTN","RORX007A",94,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are
"RTN","RORX007A",95,0)
 ;               returned via this parameter
"RTN","RORX007A",96,0)
 ;
"RTN","RORX007A",97,0)
 ; Return Values:
"RTN","RORX007A",98,0)
 ;       <0  Error code
"RTN","RORX007A",99,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX007A",100,0)
 ;
"RTN","RORX007A",101,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX007A",102,0)
 N NAME,PARAMS,TMP
"RTN","RORX007A",103,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,.STDT,.ENDT,.FLAGS)
"RTN","RORX007A",104,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX007A",105,0)
 ;--- Additional parameters
"RTN","RORX007A",106,0)
 F NAME="MAXUTNUM","MINRPNUM"  D
"RTN","RORX007A",107,0)
 . S TMP=$$PARAM^RORTSK01(NAME)
"RTN","RORX007A",108,0)
 . D:TMP'="" ADDVAL^RORTSK11(RORTSK,NAME,TMP,PARAMS)
"RTN","RORX007A",109,0)
 ;---
"RTN","RORX007A",110,0)
 Q PARAMS
"RTN","RORX007A",111,0)
 ;
"RTN","RORX007A",112,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX007A",113,0)
 ;
"RTN","RORX007A",114,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX007A",115,0)
 ;
"RTN","RORX007A",116,0)
 ; Return Values:
"RTN","RORX007A",117,0)
 ;       <0  Error code
"RTN","RORX007A",118,0)
 ;        0  Ok
"RTN","RORX007A",119,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX007A",120,0)
 ;
"RTN","RORX007A",121,0)
QUERY(FLAGS) ;
"RTN","RORX007A",122,0)
 N CNT,ECNT,IEN,IENS,PATIEN,RC,RORMSG,TMP,XREFNODE
"RTN","RORX007A",123,0)
 N RCC,FLAG
"RTN","RORX007A",124,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX007A",125,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX007A",126,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX007A",127,0)
 ;
"RTN","RORX007A",128,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX007A",129,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX007A",130,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX007A",131,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT)
"RTN","RORX007A",132,0)
 ;
"RTN","RORX007A",133,0)
 ;--- Browse through the registry records
"RTN","RORX007A",134,0)
 S IEN=0
"RTN","RORX007A",135,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX007A",136,0)
 F  S IEN=$O(@XREFNODE@(IEN)) Q:IEN'>0  D  Q:RC<0
"RTN","RORX007A",137,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX007A",138,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX007A",139,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX007A",140,0)
 . ;--- Get the patient DFN
"RTN","RORX007A",141,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN) Q:PATIEN'>0
"RTN","RORX007A",142,0)
 . ;--- Check for patient list and quit if not on list
"RTN","RORX007A",143,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PATIEN)) Q
"RTN","RORX007A",144,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX007A",145,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX007A",146,0)
 . ;--- Check the patient against the ICD9 Filter
"RTN","RORX007A",147,0)
 . S RCC=0
"RTN","RORX007A",148,0)
 . I FLAG'="ALL" D
"RTN","RORX007A",149,0)
 . . S RCC=$$ICD^RORXU010(PATIEN,RORREG)
"RTN","RORX007A",150,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX007A",151,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX007A",152,0)
 . ;--- End of ICD9 check
"RTN","RORX007A",153,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX007A",154,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX007A",155,0)
 . ;--- Get the radiology data
"RTN","RORX007A",156,0)
 . S RC=$$GETDATA(PATIEN)
"RTN","RORX007A",157,0)
 . I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX007A",158,0)
 ;---
"RTN","RORX007A",159,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX007A",160,0)
 ;
"RTN","RORX007A",161,0)
 ;***** PLURAL/SINGULAR
"RTN","RORX007A",162,0)
SRPL(QNTY,WORD,SQ) ;
"RTN","RORX007A",163,0)
 Q $S('$G(SQ):QNTY_" ",1:"")_$P(WORD,U,$S(QNTY=1:1,1:2))
"RTN","RORX008A")
0^14^B41054061^B41054061
"RTN","RORX008A",1,0)
RORX008A ;HOIFO/BH,SG,VAC - VERA REIMBURSEMENT REPORT ;4/7/09 2:08pm
"RTN","RORX008A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,13**;Feb 17, 2006;Build 27
"RTN","RORX008A",3,0)
 ;
"RTN","RORX008A",4,0)
 ;******************************************************************************
"RTN","RORX008A",5,0)
 ;******************************************************************************
"RTN","RORX008A",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX008A",7,0)
 ;        
"RTN","RORX008A",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX008A",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX008A",10,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX008A",11,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX008A",12,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX008A",13,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX008A",14,0)
 ;                                      
"RTN","RORX008A",15,0)
 ;******************************************************************************
"RTN","RORX008A",16,0)
 ;******************************************************************************
"RTN","RORX008A",17,0)
 Q
"RTN","RORX008A",18,0)
 ;
"RTN","RORX008A",19,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX008A",20,0)
 ;
"RTN","RORX008A",21,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX008A",22,0)
 ;
"RTN","RORX008A",23,0)
 ; Return Values:
"RTN","RORX008A",24,0)
 ;       <0  Error code
"RTN","RORX008A",25,0)
 ;        0  Ok
"RTN","RORX008A",26,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX008A",27,0)
 ;
"RTN","RORX008A",28,0)
QUERY(FLAGS) ;
"RTN","RORX008A",29,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX008A",30,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX008A",31,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX008A",32,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX008A",33,0)
 ;
"RTN","RORX008A",34,0)
 N CLINAIDS,CMPXCARE,CNT,CNTARV,CNTBASIC,CNTCMPX,ECNT,IEN,NAME,PATIEN,RC,RORIEN,RORXDST,TMP,UTLCHK,VA,VADM,VAERR,XREFNODE
"RTN","RORX008A",35,0)
 ;
"RTN","RORX008A",36,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX008A",37,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX008A",38,0)
 S (CNT,CNTARV,CNTBASIC,CNTCMPX,ECNT,RC)=0
"RTN","RORX008A",39,0)
 S UTLCHK("ALL")=""
"RTN","RORX008A",40,0)
 ;
"RTN","RORX008A",41,0)
 ;--- Prepare parameters for the pharmacy search API
"RTN","RORX008A",42,0)
 S RORXDST("RORCB")="$$RXSCB^RORX008A"
"RTN","RORX008A",43,0)
 S TMP=$$PARAM^RORTSK01("OPTIONS","REGMEDSMRY")
"RTN","RORX008A",44,0)
 S RORXDST("SINGLE")='TMP!'$$PARAM^RORTSK01("PATIENTS","COMPLEX")
"RTN","RORX008A",45,0)
 ;
"RTN","RORX008A",46,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX008A",47,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT)
"RTN","RORX008A",48,0)
 ;
"RTN","RORX008A",49,0)
 ;--- Browse through the registry records
"RTN","RORX008A",50,0)
 S RORIEN=0
"RTN","RORX008A",51,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX008A",52,0)
 F  S RORIEN=$O(@XREFNODE@(RORIEN))  Q:RORIEN'>0  D  Q:RC<0
"RTN","RORX008A",53,0)
 . ;--- Start progress counter
"RTN","RORX008A",54,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX008A",55,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX008A",56,0)
 . S CNT=CNT+1
"RTN","RORX008A",57,0)
 . ;--- Get patient DFN
"RTN","RORX008A",58,0)
 . S PATIEN=$$PTIEN^RORUTL01(RORIEN) Q:PATIEN'>0
"RTN","RORX008A",59,0)
 . ;check for patient list and quit if not on list
"RTN","RORX008A",60,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PATIEN)) Q
"RTN","RORX008A",61,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX008A",62,0)
 . Q:$$SKIP^RORXU005(RORIEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX008A",63,0)
 . ;--- Check patient against ICD9 list
"RTN","RORX008A",64,0)
 . S RCC=0
"RTN","RORX008A",65,0)
 . I FLAG'="ALL" D
"RTN","RORX008A",66,0)
 . . S RCC=$$ICD^RORXU010(PATIEN,RORREG)
"RTN","RORX008A",67,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX008A",68,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX008A",69,0)
 . ; End of check of ICD9 list
"RTN","RORX008A",70,0)
 . ;
"RTN","RORX008A",71,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX008A",72,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX008A",73,0)
 . ;
"RTN","RORX008A",74,0)
 . ;--- Skip Clinical AIDS if Complex Care was not requested
"RTN","RORX008A",75,0)
 . S CMPXCARE=0
"RTN","RORX008A",76,0)
 . S CLINAIDS=$S($$CLINAIDS^RORHIVUT(RORIEN,ROREDT):1,1:0)
"RTN","RORX008A",77,0)
 . I CLINAIDS  Q:'$$PARAM^RORTSK01("PATIENTS","COMPLEX")  S CMPXCARE=1
"RTN","RORX008A",78,0)
 . ;
"RTN","RORX008A",79,0)
 . ;--- Skip a patient without utlilization
"RTN","RORX008A",80,0)
 . Q:'$$UTIL^RORXU003(RORSDT,ROREDT,PATIEN,.UTLCHK)
"RTN","RORX008A",81,0)
 . ;
"RTN","RORX008A",82,0)
 . ;--- Search for pharmacy data
"RTN","RORX008A",83,0)
 . K RORXDST("ARV")
"RTN","RORX008A",84,0)
 . S TMP=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,"EIOV",RORSDT,ROREDT1)
"RTN","RORX008A",85,0)
 . I TMP<0  S ECNT=ECNT+1  Q
"RTN","RORX008A",86,0)
 . I $D(RORXDST("ARV"))  Q:'$$PARAM^RORTSK01("PATIENTS","COMPLEX")  D
"RTN","RORX008A",87,0)
 . . S IEN=0
"RTN","RORX008A",88,0)
 . . F  S IEN=$O(RORXDST("ARV",IEN))  Q:IEN'>0  D
"RTN","RORX008A",89,0)
 . . . D:'$D(^TMP("RORX008",$J,"DRG",IEN))
"RTN","RORX008A",90,0)
 . . . . S ^TMP("RORX008",$J,"DRG",IEN)=RORXDST("ARV",IEN)
"RTN","RORX008A",91,0)
 . . . S ^(CLINAIDS)=$G(^TMP("RORX008",$J,"DRG",IEN,CLINAIDS))+1 ;naked reference: ^TMP("RORX008",$J,"DRG",IEN,CLINAIDS)
"RTN","RORX008A",92,0)
 . . S CMPXCARE=1,CNTARV=CNTARV+1
"RTN","RORX008A",93,0)
 . ;
"RTN","RORX008A",94,0)
 . ;--- Skip Basic Care if it was not requested
"RTN","RORX008A",95,0)
 . I CMPXCARE  S CNTCMPX=CNTCMPX+1
"RTN","RORX008A",96,0)
 . E  Q:'$$PARAM^RORTSK01("PATIENTS","BASIC")  S CNTBASIC=CNTBASIC+1
"RTN","RORX008A",97,0)
 . ;
"RTN","RORX008A",98,0)
 . D:$$PARAM^RORTSK01("OPTIONS","PTLIST")
"RTN","RORX008A",99,0)
 . . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX008A",100,0)
 . . S TMP=$$DATE^RORXU002(VADM(6)\1)
"RTN","RORX008A",101,0)
 . . S TMP=TMP_U_($D(RORXDST("ARV"))>0)_U_CMPXCARE_U_CLINAIDS
"RTN","RORX008A",102,0)
 . . S ^TMP("RORX008",$J,"PAT",PATIEN)=VA("BID")_U_VADM(1)_U_TMP
"RTN","RORX008A",103,0)
 ;
"RTN","RORX008A",104,0)
 ;--- Totals
"RTN","RORX008A",105,0)
 S ^TMP("RORX008",$J,"PAT")=CNTBASIC_U_CNTCMPX_U_CNTARV
"RTN","RORX008A",106,0)
 ;---
"RTN","RORX008A",107,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX008A",108,0)
 ;
"RTN","RORX008A",109,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX008A",110,0)
RXSCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX008A",111,0)
 N CA,IEN,NAME
"RTN","RORX008A",112,0)
 S IEN=+ROR8DST("RORXGEN"),NAME=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX008A",113,0)
 Q:(IEN'>0)!(NAME="") 1
"RTN","RORX008A",114,0)
 ;---
"RTN","RORX008A",115,0)
 S ROR8DST("ARV")=""  Q:ROR8DST("SINGLE") 2
"RTN","RORX008A",116,0)
 ;---
"RTN","RORX008A",117,0)
 S ROR8DST("ARV",IEN)=NAME
"RTN","RORX008A",118,0)
 Q 0
"RTN","RORX008A",119,0)
 ;
"RTN","RORX008A",120,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX008A",121,0)
 ;
"RTN","RORX008A",122,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX008A",123,0)
 ;
"RTN","RORX008A",124,0)
 ; Return Values:
"RTN","RORX008A",125,0)
 ;       <0  Error code
"RTN","RORX008A",126,0)
 ;        0  Ok
"RTN","RORX008A",127,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX008A",128,0)
 ;
"RTN","RORX008A",129,0)
STORE(REPORT) ;
"RTN","RORX008A",130,0)
 N BUF,CNT,ITEM,IEN,NODE,NPAIDS,NPHIV,RC,TABLE,TMP
"RTN","RORX008A",131,0)
 S NODE=$NA(^TMP("RORX008",$J)),RC=0
"RTN","RORX008A",132,0)
 ;
"RTN","RORX008A",133,0)
 ;--- List of ARV drugs
"RTN","RORX008A",134,0)
 S TMP=$$PARAM^RORTSK01("OPTIONS","REGMEDSMRY")
"RTN","RORX008A",135,0)
 I TMP,$$PARAM^RORTSK01("PATIENTS","COMPLEX")  D  Q:RC<0 RC
"RTN","RORX008A",136,0)
 . S TABLE=$$ADDVAL^RORTSK11(RORTSK,"DRUGS",,REPORT)
"RTN","RORX008A",137,0)
 . I TABLE<0  S RC=TABLE  Q
"RTN","RORX008A",138,0)
 . D ADDATTR^RORTSK11(RORTSK,TABLE,"TABLE","DRUGS")
"RTN","RORX008A",139,0)
 . S IEN=0
"RTN","RORX008A",140,0)
 . F  S IEN=$O(@NODE@("DRG",IEN))  Q:IEN'>0  D
"RTN","RORX008A",141,0)
 . . S BUF=@NODE@("DRG",IEN)
"RTN","RORX008A",142,0)
 . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"DRUG",,TABLE)
"RTN","RORX008A",143,0)
 . . D ADDVAL^RORTSK11(RORTSK,"NAME",$P(@NODE@("DRG",IEN),U),ITEM,1)
"RTN","RORX008A",144,0)
 . . S NPHIV=+$G(@NODE@("DRG",IEN,0))
"RTN","RORX008A",145,0)
 . . S NPAIDS=+$G(@NODE@("DRG",IEN,1))
"RTN","RORX008A",146,0)
 . . D ADDVAL^RORTSK11(RORTSK,"NP",NPHIV+NPAIDS,ITEM,3)
"RTN","RORX008A",147,0)
 . . D ADDVAL^RORTSK11(RORTSK,"NPHIV",NPHIV,ITEM,3)
"RTN","RORX008A",148,0)
 . . D ADDVAL^RORTSK11(RORTSK,"NPAIDS",NPAIDS,ITEM,3)
"RTN","RORX008A",149,0)
 ;
"RTN","RORX008A",150,0)
 ;--- List of patients
"RTN","RORX008A",151,0)
 I $$PARAM^RORTSK01("OPTIONS","PTLIST")  D  Q:RC<0 RC
"RTN","RORX008A",152,0)
 . S TABLE=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX008A",153,0)
 . I TABLE<0  S RC=TABLE  Q
"RTN","RORX008A",154,0)
 . D ADDATTR^RORTSK11(RORTSK,TABLE,"TABLE","PATIENTS")
"RTN","RORX008A",155,0)
 . S IEN=0
"RTN","RORX008A",156,0)
 . F  S IEN=$O(@NODE@("PAT",IEN))  Q:IEN'>0  D
"RTN","RORX008A",157,0)
 . . S BUF=@NODE@("PAT",IEN)
"RTN","RORX008A",158,0)
 . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,TABLE,,IEN)
"RTN","RORX008A",159,0)
 . . D ADDVAL^RORTSK11(RORTSK,"NAME",$P(BUF,U,2),ITEM,1)
"RTN","RORX008A",160,0)
 . . D ADDVAL^RORTSK11(RORTSK,"LAST4",$P(BUF,U),ITEM,2)
"RTN","RORX008A",161,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DOD",$P(BUF,U,3),ITEM,1)
"RTN","RORX008A",162,0)
 . . D ADDVAL^RORTSK11(RORTSK,"AIDSTAT",+$P(BUF,U,6),ITEM,1)
"RTN","RORX008A",163,0)
 . . D ADDVAL^RORTSK11(RORTSK,"ARV",+$P(BUF,U,4),ITEM,1)
"RTN","RORX008A",164,0)
 . . D ADDVAL^RORTSK11(RORTSK,"COMPLEX",+$P(BUF,U,5),ITEM,1)
"RTN","RORX008A",165,0)
 ;
"RTN","RORX008A",166,0)
 ;--- Summary
"RTN","RORX008A",167,0)
 S BUF=@NODE@("PAT")
"RTN","RORX008A",168,0)
 S ITEM=$$ADDVAL^RORTSK11(RORTSK,"SUMMARY",,REPORT)
"RTN","RORX008A",169,0)
 D ADDVAL^RORTSK11(RORTSK,"NP",$P(BUF,U)+$P(BUF,U,2),ITEM)
"RTN","RORX008A",170,0)
 D ADDVAL^RORTSK11(RORTSK,"NPBASIC",+$P(BUF,U,1),ITEM)
"RTN","RORX008A",171,0)
 D ADDVAL^RORTSK11(RORTSK,"NPCOMPLEX",+$P(BUF,U,2),ITEM)
"RTN","RORX008A",172,0)
 D ADDVAL^RORTSK11(RORTSK,"NPARV",+$P(BUF,U,3),ITEM)
"RTN","RORX008A",173,0)
 Q 0
"RTN","RORX009A")
0^15^B78980793^B78980793
"RTN","RORX009A",1,0)
RORX009A ;HOIFO/SG,VAC - PRESCRIPTION UTILIZ. (QUERY & SORT) ;4/7/09 2:08pm
"RTN","RORX009A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,13**;Feb 17, 2006;Build 27
"RTN","RORX009A",3,0)
 ;
"RTN","RORX009A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX009A",5,0)
 ;
"RTN","RORX009A",6,0)
 ; #10103         FMADD^XLFDT (supported)
"RTN","RORX009A",7,0)
 ;   
"RTN","RORX009A",8,0)
 ;******************************************************************************
"RTN","RORX009A",9,0)
 ;******************************************************************************
"RTN","RORX009A",10,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX009A",11,0)
 ;        
"RTN","RORX009A",12,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX009A",13,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX009A",14,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX009A",15,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX009A",16,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX009A",17,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX009A",18,0)
 ;                                      
"RTN","RORX009A",19,0)
 ;******************************************************************************
"RTN","RORX009A",20,0)
 ;******************************************************************************
"RTN","RORX009A",21,0)
 Q
"RTN","RORX009A",22,0)
 ;
"RTN","RORX009A",23,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX009A",24,0)
 ;
"RTN","RORX009A",25,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX009A",26,0)
 ;
"RTN","RORX009A",27,0)
 ; Return Values:
"RTN","RORX009A",28,0)
 ;       <0  Error code
"RTN","RORX009A",29,0)
 ;        0  Ok
"RTN","RORX009A",30,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX009A",31,0)
 ;
"RTN","RORX009A",32,0)
QUERY(FLAGS) ;
"RTN","RORX009A",33,0)
 N ROREDT1       ; Day after the end date
"RTN","RORX009A",34,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX009A",35,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX009A",36,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX009A",37,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX009A",38,0)
 ;
"RTN","RORX009A",39,0)
 N CNT,ECNT,IEN,IENS,PATIEN,RC,RORXDST,RXFLAGS,TMP,XREFNODE
"RTN","RORX009A",40,0)
 N RCC,FLAG
"RTN","RORX009A",41,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX009A",42,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX009A",43,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT,1)
"RTN","RORX009A",44,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX009A",45,0)
 ;
"RTN","RORX009A",46,0)
 ;--- Prepare parameters for the pharmacy search API
"RTN","RORX009A",47,0)
 S RORXDST=$NA(^TMP("RORX009",$J))
"RTN","RORX009A",48,0)
 S RORXDST("RORCB")="$$RXSCB^RORX009A"
"RTN","RORX009A",49,0)
 S RORXDST("GENERIC")=$$PARAM^RORTSK01("DRUGS","AGGR_GENERIC")
"RTN","RORX009A",50,0)
 S RXFLAGS="E"
"RTN","RORX009A",51,0)
 S:$$PARAM^RORTSK01("PATIENTS","INPATIENT") RXFLAGS=RXFLAGS_"IV"
"RTN","RORX009A",52,0)
 S:$$PARAM^RORTSK01("PATIENTS","OUTPATIENT") RXFLAGS=RXFLAGS_"O"
"RTN","RORX009A",53,0)
 Q:RXFLAGS="E" 0
"RTN","RORX009A",54,0)
 ;
"RTN","RORX009A",55,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX009A",56,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT)
"RTN","RORX009A",57,0)
 ;
"RTN","RORX009A",58,0)
 ;--- Browse through the registry records
"RTN","RORX009A",59,0)
 S IEN=0
"RTN","RORX009A",60,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX009A",61,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX009A",62,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX009A",63,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX009A",64,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX009A",65,0)
 . ;--- Get patient DFN
"RTN","RORX009A",66,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX009A",67,0)
 . ;check for patient list and quit if not on list
"RTN","RORX009A",68,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PATIEN)) Q
"RTN","RORX009A",69,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX009A",70,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX009A",71,0)
 . ;--- Check if patient filtered for ICD9 Codes
"RTN","RORX009A",72,0)
 . S RCC=0
"RTN","RORX009A",73,0)
 . I FLAG'="ALL" D
"RTN","RORX009A",74,0)
 . . S RCC=$$ICD^RORXU010(PATIEN,RORREG)
"RTN","RORX009A",75,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX009A",76,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX009A",77,0)
 . ;--- End of ICD9 Filter check.
"RTN","RORX009A",78,0)
 . ;
"RTN","RORX009A",79,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX009A",80,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX009A",81,0)
 . ;
"RTN","RORX009A",82,0)
 . ;--- Search the pharmacy data
"RTN","RORX009A",83,0)
 . M RORXDST("RORXGRP")=RORXGRP("C")
"RTN","RORX009A",84,0)
 . S TMP=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,RXFLAGS,RORSDT,ROREDT1)
"RTN","RORX009A",85,0)
 . I TMP<0  S ECNT=ECNT+1  Q
"RTN","RORX009A",86,0)
 . ;--- No medications from some groups
"RTN","RORX009A",87,0)
 . Q:$D(RORXDST("RORXGRP"))>1
"RTN","RORX009A",88,0)
 . ;--- Skip the patient if no data has been found
"RTN","RORX009A",89,0)
 . I '$D(@RORXDST@("IP",PATIEN)),'$D(@RORXDST@("OP",PATIEN))  Q
"RTN","RORX009A",90,0)
 . ;
"RTN","RORX009A",91,0)
 . ;--- Calculate intermediate totals
"RTN","RORX009A",92,0)
 . S RC=$$TOTALS(PATIEN)
"RTN","RORX009A",93,0)
 . I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX009A",94,0)
 ;---
"RTN","RORX009A",95,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX009A",96,0)
 ;
"RTN","RORX009A",97,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX009A",98,0)
RXSCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX009A",99,0)
 N DRUGIEN,DRUGNAME,IRP,RPS,RXCNT,SUBS,TMP
"RTN","RORX009A",100,0)
 I ROR8DST("GENERIC")  D
"RTN","RORX009A",101,0)
 . S DRUGIEN=+ROR8DST("RORXGEN"),DRUGNAME=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX009A",102,0)
 E  S DRUGIEN=+DRUG,DRUGNAME=$P(DRUG,U,2)
"RTN","RORX009A",103,0)
 Q:(DRUGIEN'>0)!(DRUGNAME="") 1
"RTN","RORX009A",104,0)
 ;=== Check the drug groups
"RTN","RORX009A",105,0)
 S TMP=$$RXGRPCHK^RORXU007(.ROR8DST,+DRUG,RORXL)
"RTN","RORX009A",106,0)
 Q:TMP TMP
"RTN","RORX009A",107,0)
 ;=== Process the order
"RTN","RORX009A",108,0)
 S SUBS=$S(ORDFLG["I":"IP",ORDFLG["O":"OP",1:"")  Q:SUBS="" 1
"RTN","RORX009A",109,0)
 S RXCNT=0
"RTN","RORX009A",110,0)
 ;--- Count the original order, refills and partials
"RTN","RORX009A",111,0)
 I ORDFLG["I"  S RXCNT=RXCNT+1  ; Inpatient
"RTN","RORX009A",112,0)
 E  D                           ; Outpatient
"RTN","RORX009A",113,0)
 . S TMP=+$P($G(^TMP("PS",$J,"RXN",0)),U,6)  ; Original Fill Date
"RTN","RORX009A",114,0)
 . S:(TMP'<ROR8DST("RORSDT"))&(TMP<ROR8DST("ROREDT")) RXCNT=RXCNT+1
"RTN","RORX009A",115,0)
 F RPS="PAR","REF"  S IRP=0  D
"RTN","RORX009A",116,0)
 . F  S IRP=$O(^TMP("PS",$J,RPS,IRP))  Q:IRP'>0  S RXCNT=RXCNT+1
"RTN","RORX009A",117,0)
 ;--- Update the counters
"RTN","RORX009A",118,0)
 D:RXCNT>0
"RTN","RORX009A",119,0)
 . S TMP=$G(@ROR8DST@(SUBS,+ROR8DST("RORDFN"),"D",DRUGIEN))
"RTN","RORX009A",120,0)
 . S @ROR8DST@(SUBS,+ROR8DST("RORDFN"),"D",DRUGIEN)=TMP+RXCNT
"RTN","RORX009A",121,0)
 . S TMP=SUBS_"D"
"RTN","RORX009A",122,0)
 . S:'$D(@ROR8DST@(TMP,DRUGIEN)) @ROR8DST@(TMP,DRUGIEN)=DRUGNAME
"RTN","RORX009A",123,0)
 Q 0
"RTN","RORX009A",124,0)
 ;
"RTN","RORX009A",125,0)
 ;***** SORTS THE RESULTS AND COMPILES THE TOTALS
"RTN","RORX009A",126,0)
 ;
"RTN","RORX009A",127,0)
 ; Return Values:
"RTN","RORX009A",128,0)
 ;       <0  Error code
"RTN","RORX009A",129,0)
 ;        0  Ok
"RTN","RORX009A",130,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX009A",131,0)
 ;
"RTN","RORX009A",132,0)
SORT() ;
"RTN","RORX009A",133,0)
 N ECNT,NODE,RC
"RTN","RORX009A",134,0)
 S (ECNT,RC)=0
"RTN","RORX009A",135,0)
 S NODE=$NA(^TMP("RORX009",$J))
"RTN","RORX009A",136,0)
 Q:$D(@NODE)<10 0
"RTN","RORX009A",137,0)
 ;---
"RTN","RORX009A",138,0)
 S RC=$$LOOP^RORTSK01(0)    Q:RC<0 RC
"RTN","RORX009A",139,0)
 D SORTRX(NODE,"IPD")
"RTN","RORX009A",140,0)
 ;---
"RTN","RORX009A",141,0)
 S RC=$$LOOP^RORTSK01(.33)  Q:RC<0 RC
"RTN","RORX009A",142,0)
 D SORTRX(NODE,"OPD")
"RTN","RORX009A",143,0)
 ;---
"RTN","RORX009A",144,0)
 S RC=$$LOOP^RORTSK01(.66)  Q:RC<0 RC
"RTN","RORX009A",145,0)
 S RC=$$SUMRX(NODE)
"RTN","RORX009A",146,0)
 ;---
"RTN","RORX009A",147,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX009A",148,0)
 ;
"RTN","RORX009A",149,0)
 ;***** SORTS THE DRUG LIST
"RTN","RORX009A",150,0)
 ;
"RTN","RORX009A",151,0)
 ; NODE          Closed root of the category section
"RTN","RORX009A",152,0)
 ;               in the temporary global
"RTN","RORX009A",153,0)
 ;
"RTN","RORX009A",154,0)
 ; SUBS          Drug list subscript ("IPD" or "OPD")
"RTN","RORX009A",155,0)
 ;
"RTN","RORX009A",156,0)
SORTRX(NODE,SUBS) ;
"RTN","RORX009A",157,0)
 N IEN,NAME,NDRUGS,SUM,TMP
"RTN","RORX009A",158,0)
 S IEN=0,NDRUGS=0
"RTN","RORX009A",159,0)
 F  S IEN=$O(@NODE@(SUBS,IEN))  Q:IEN'>0  D
"RTN","RORX009A",160,0)
 . S NAME=@NODE@(SUBS,IEN),NDRUGS=NDRUGS+1
"RTN","RORX009A",161,0)
 . S TMP=+$G(@NODE@(SUBS,IEN,"D"))
"RTN","RORX009A",162,0)
 . S @NODE@(SUBS,"B",TMP,NAME,IEN)=""
"RTN","RORX009A",163,0)
 ;--- Numbers of different drugs
"RTN","RORX009A",164,0)
 S @NODE@(SUBS)=NDRUGS
"RTN","RORX009A",165,0)
 Q
"RTN","RORX009A",166,0)
 ;
"RTN","RORX009A",167,0)
 ;***** COMBINES THE INPATIENT AND OUTPATIENT DATA
"RTN","RORX009A",168,0)
 ;
"RTN","RORX009A",169,0)
 ; NODE          Closed root of the category section
"RTN","RORX009A",170,0)
 ;               in the temporary global
"RTN","RORX009A",171,0)
 ;
"RTN","RORX009A",172,0)
SUMRX(NODE) ;
"RTN","RORX009A",173,0)
 N COUNT,I,MAXUTNUM,NDRX,NRX,RC,RXIEN,SUMNRX,TMP
"RTN","RORX009A",174,0)
 Q:($D(@NODE@("IPRX"))<10)!($D(@NODE@("OPRX"))<10) 0
"RTN","RORX009A",175,0)
 S MAXUTNUM=$$PARAM^RORTSK01("MAXUTNUM")
"RTN","RORX009A",176,0)
 Q:MAXUTNUM'>0 0
"RTN","RORX009A",177,0)
 ;
"RTN","RORX009A",178,0)
 ;=== Outpatient data
"RTN","RORX009A",179,0)
 S NRX="",(COUNT,RC)=0
"RTN","RORX009A",180,0)
 F  S NRX=$O(@NODE@("OPRX",NRX),-1)  Q:NRX=""  D  Q:RC
"RTN","RORX009A",181,0)
 . S RC=$$LOOP^RORTSK01()  Q:RC<0
"RTN","RORX009A",182,0)
 . S @NODE@("SUMRX",NRX)=$G(@NODE@("OPRX",NRX))
"RTN","RORX009A",183,0)
 . S NAME=""
"RTN","RORX009A",184,0)
 . F  S NAME=$O(@NODE@("OPRX",NRX,NAME))  Q:NAME=""  D  Q:RC
"RTN","RORX009A",185,0)
 . . S DFN=""
"RTN","RORX009A",186,0)
 . . F  S DFN=$O(@NODE@("OPRX",NRX,NAME,DFN))  Q:DFN=""  D  Q:RC
"RTN","RORX009A",187,0)
 . . . ;--- Include only the patients with highest utilization
"RTN","RORX009A",188,0)
 . . . S COUNT=COUNT+1  I COUNT>MAXUTNUM  S RC=1  Q
"RTN","RORX009A",189,0)
 . . . ;--- Calculate the totals
"RTN","RORX009A",190,0)
 . . . S (NDRX,SUMNRX)=0
"RTN","RORX009A",191,0)
 . . . F I="IP","OP"  S TMP=$G(@NODE@(I,DFN))  D
"RTN","RORX009A",192,0)
 . . . . S NDRX=NDRX+$P(TMP,U,5),SUMNRX=SUMNRX+$P(TMP,U,4)
"RTN","RORX009A",193,0)
 . . . S @NODE@("SUMRX",SUMNRX,NAME,DFN,"OP")=""
"RTN","RORX009A",194,0)
 . . . S @NODE@("SUMRX",SUMNRX)=$G(@NODE@("SUMRX",SUMNRX))+1
"RTN","RORX009A",195,0)
 . . . ;--- Adjust the total number of different drugs
"RTN","RORX009A",196,0)
 . . . ;--- (some drugs could be both inpatient and outpatient)
"RTN","RORX009A",197,0)
 . . . S RXIEN=0
"RTN","RORX009A",198,0)
 . . . F  S RXIEN=$O(@NODE@("OP",DFN,"D",RXIEN))  Q:RXIEN'>0  D
"RTN","RORX009A",199,0)
 . . . . S:$D(@NODE@("IP",DFN,"D",RXIEN)) NDRX=NDRX-1
"RTN","RORX009A",200,0)
 . . . ;--- Store the number of different drugs
"RTN","RORX009A",201,0)
 . . . S @NODE@("SUMRX",SUMNRX,NAME,DFN)=NDRX
"RTN","RORX009A",202,0)
 ;
"RTN","RORX009A",203,0)
 ;=== Inpatient data
"RTN","RORX009A",204,0)
 S NRX="",(COUNT,RC)=0
"RTN","RORX009A",205,0)
 F  S NRX=$O(@NODE@("IPRX",NRX),-1)  Q:NRX=""  D  Q:RC
"RTN","RORX009A",206,0)
 . S RC=$$LOOP^RORTSK01()  Q:RC<0
"RTN","RORX009A",207,0)
 . S NAME=""
"RTN","RORX009A",208,0)
 . F  S NAME=$O(@NODE@("IPRX",NRX,NAME))  Q:NAME=""  D  Q:RC
"RTN","RORX009A",209,0)
 . . S DFN=""
"RTN","RORX009A",210,0)
 . . F  S DFN=$O(@NODE@("IPRX",NRX,NAME,DFN))  Q:DFN=""  D  Q:RC
"RTN","RORX009A",211,0)
 . . . ;--- Include only the patients with highest utilization
"RTN","RORX009A",212,0)
 . . . S COUNT=COUNT+1  I COUNT>MAXUTNUM  S RC=1  Q
"RTN","RORX009A",213,0)
 . . . ;--- Calculate the totals
"RTN","RORX009A",214,0)
 . . . S (NDRX,SUMNRX)=0
"RTN","RORX009A",215,0)
 . . . F I="IP","OP"  S TMP=$G(@NODE@(I,DFN))  D
"RTN","RORX009A",216,0)
 . . . . S NDRX=NDRX+$P(TMP,U,5),SUMNRX=SUMNRX+$P(TMP,U,4)
"RTN","RORX009A",217,0)
 . . . S @NODE@("SUMRX",SUMNRX,NAME,DFN,"IP")=""
"RTN","RORX009A",218,0)
 . . . ;--- Quit if the patient has been processed already
"RTN","RORX009A",219,0)
 . . . Q:$D(@NODE@("SUMRX",SUMNRX,NAME,DFN,"OP"))
"RTN","RORX009A",220,0)
 . . . S @NODE@("SUMRX",SUMNRX)=$G(@NODE@("SUMRX",SUMNRX))+1
"RTN","RORX009A",221,0)
 . . . ;--- Adjust the total number of different drugs
"RTN","RORX009A",222,0)
 . . . ;--- (some drugs could be both inpatient and outpatient)
"RTN","RORX009A",223,0)
 . . . S RXIEN=0
"RTN","RORX009A",224,0)
 . . . F  S RXIEN=$O(@NODE@("IP",DFN,"D",RXIEN))  Q:RXIEN'>0  D
"RTN","RORX009A",225,0)
 . . . . S:$D(@NODE@("OP",DFN,"D",RXIEN)) NDRX=NDRX-1
"RTN","RORX009A",226,0)
 . . . ;--- Store the number of different drugs
"RTN","RORX009A",227,0)
 . . . S @NODE@("SUMRX",SUMNRX,NAME,DFN)=NDRX
"RTN","RORX009A",228,0)
 ;===
"RTN","RORX009A",229,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX009A",230,0)
 ;
"RTN","RORX009A",231,0)
 ;***** CALCULATES THE INTERMEDIATE TOTALS
"RTN","RORX009A",232,0)
 ;
"RTN","RORX009A",233,0)
 ; PATIEN        Patient IEN (DFN)
"RTN","RORX009A",234,0)
 ;
"RTN","RORX009A",235,0)
 ; Return Values:
"RTN","RORX009A",236,0)
 ;       <0  Error code
"RTN","RORX009A",237,0)
 ;        0  Ok
"RTN","RORX009A",238,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX009A",239,0)
 ;
"RTN","RORX009A",240,0)
TOTALS(PATIEN) ;
"RTN","RORX009A",241,0)
 N DOD,IEN,LAST4,NDRUGS,NODE,NRX,PTNAME,PTNRX,RXS,SUBS,TMP,VA,VADM,VAERR
"RTN","RORX009A",242,0)
 S NODE=$NA(^TMP("RORX009",$J))
"RTN","RORX009A",243,0)
 ;--- Get the patient's data
"RTN","RORX009A",244,0)
 D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX009A",245,0)
 S PTNAME=VADM(1),LAST4=VA("BID"),DOD=$$DATE^RORXU002(VADM(6)\1)
"RTN","RORX009A",246,0)
 ;---
"RTN","RORX009A",247,0)
 F SUBS="IP","OP"  D:$D(@NODE@(SUBS,PATIEN))>1
"RTN","RORX009A",248,0)
 . S RXS=SUBS_"D"
"RTN","RORX009A",249,0)
 . S IEN=0,(NDRUGS,PTNRX)=0
"RTN","RORX009A",250,0)
 . F  S IEN=$O(@NODE@(SUBS,PATIEN,"D",IEN))  Q:IEN'>0  D
"RTN","RORX009A",251,0)
 . . S NRX=@NODE@(SUBS,PATIEN,"D",IEN)
"RTN","RORX009A",252,0)
 . . S NDRUGS=NDRUGS+1,PTNRX=PTNRX+NRX
"RTN","RORX009A",253,0)
 . . ;---
"RTN","RORX009A",254,0)
 . . S @NODE@(RXS,IEN,"D")=$G(@NODE@(RXS,IEN,"D"))+NRX
"RTN","RORX009A",255,0)
 . . S @NODE@(RXS,IEN,"P")=$G(@NODE@(RXS,IEN,"P"))+1
"RTN","RORX009A",256,0)
 . . ;---
"RTN","RORX009A",257,0)
 . . S TMP=$G(@NODE@(RXS,IEN,"M"))
"RTN","RORX009A",258,0)
 . . D:NRX'<TMP
"RTN","RORX009A",259,0)
 . . . I NRX>TMP  S @NODE@(RXS,IEN,"M")=NRX_U_1  Q
"RTN","RORX009A",260,0)
 . . . S $P(@NODE@(RXS,IEN,"M"),U,2)=$P(TMP,U,2)+1
"RTN","RORX009A",261,0)
 . ;---
"RTN","RORX009A",262,0)
 . S @NODE@(SUBS)=$G(@NODE@(SUBS))+1
"RTN","RORX009A",263,0)
 . S @NODE@(SUBS,PATIEN)=LAST4_U_PTNAME_U_DOD_U_PTNRX_U_NDRUGS
"RTN","RORX009A",264,0)
 . ;---
"RTN","RORX009A",265,0)
 . S RXS=SUBS_"RX"
"RTN","RORX009A",266,0)
 . S @NODE@(RXS)=$G(@NODE@(RXS))+PTNRX
"RTN","RORX009A",267,0)
 . S @NODE@(RXS,PTNRX)=$G(@NODE@(RXS,PTNRX))+1
"RTN","RORX009A",268,0)
 . S @NODE@(RXS,PTNRX,PTNAME,PATIEN)=""
"RTN","RORX009A",269,0)
 ;---
"RTN","RORX009A",270,0)
 Q 0
"RTN","RORX010")
0^16^B59198848^B59198848
"RTN","RORX010",1,0)
RORX010 ;HOIFO/SG,VAC - LAB TESTS BY RANGE REPORT ;4/7/09 2:08pm
"RTN","RORX010",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,13**;Feb 17, 2006;Build 27
"RTN","RORX010",3,0)
 ;
"RTN","RORX010",4,0)
 ; This routine uses the following IAs:
"RTN","RORX010",5,0)
 ;
"RTN","RORX010",6,0)
 ; #2056  GETS^DIQ (supported)
"RTN","RORX010",7,0)
 ; #10103 FMADD^XLFDT (supported)
"RTN","RORX010",8,0)
 ;
"RTN","RORX010",9,0)
 ;******************************************************************************
"RTN","RORX010",10,0)
 ;******************************************************************************
"RTN","RORX010",11,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX010",12,0)
 ;        
"RTN","RORX010",13,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX010",14,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX010",15,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX010",16,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX010",17,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX010",18,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX010",19,0)
 ;                                      
"RTN","RORX010",20,0)
 ;******************************************************************************
"RTN","RORX010",21,0)
 ;******************************************************************************
"RTN","RORX010",22,0)
 Q
"RTN","RORX010",23,0)
 ;
"RTN","RORX010",24,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX010",25,0)
 ;
"RTN","RORX010",26,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX010",27,0)
 ;
"RTN","RORX010",28,0)
 ; Return Values:
"RTN","RORX010",29,0)
 ;       <0  Error code
"RTN","RORX010",30,0)
 ;        0  Ok
"RTN","RORX010",31,0)
 ;
"RTN","RORX010",32,0)
HEADER(PARTAG) ;
"RTN","RORX010",33,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,PTLRL(GROUP,DATE,NAME,RESULT))
"RTN","RORX010",34,0)
 N COLUMNS,HEADER,LT,NAME,TMP
"RTN","RORX010",35,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX010",36,0)
 Q:HEADER<0 HEADER
"RTN","RORX010",37,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX010",HEADER)
"RTN","RORX010",38,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX010",39,0)
 ;
"RTN","RORX010",40,0)
 ;***** COMPILES THE LAB TESTS BY RANGE REPORT
"RTN","RORX010",41,0)
 ; REPORT CODE: 010
"RTN","RORX010",42,0)
 ;
"RTN","RORX010",43,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX010",44,0)
 ;
"RTN","RORX010",45,0)
 ; The ^TMP("RORX010",$J) global node is used by this function.
"RTN","RORX010",46,0)
 ;
"RTN","RORX010",47,0)
 ; Return Values:
"RTN","RORX010",48,0)
 ;       <0  Error code
"RTN","RORX010",49,0)
 ;        0  Ok
"RTN","RORX010",50,0)
 ;
"RTN","RORX010",51,0)
LRGRANGE(RORTSK) ;
"RTN","RORX010",52,0)
 N RORDST        ; Callback descriptor
"RTN","RORX010",53,0)
 N ROREDT        ; End date
"RTN","RORX010",54,0)
 N ROREDT1       ; End date + 1 day
"RTN","RORX010",55,0)
 N RORLTL        ; Closed root of the list of lab tests to search for
"RTN","RORX010",56,0)
 N RORREG        ; Registry IEN
"RTN","RORX010",57,0)
 N RORSDT        ; Start date
"RTN","RORX010",58,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX010",59,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX010",60,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX010",61,0)
 ;
"RTN","RORX010",62,0)
 N BODY,CNT,ECNT,IEN,IENS,LRGLST,RC,REPORT,RORPTN,SFLAGS,TMP
"RTN","RORX010",63,0)
 N DFN,RCC,FLAG
"RTN","RORX010",64,0)
 ;--- Root node of the report
"RTN","RORX010",65,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX010",66,0)
 Q:REPORT<0 REPORT
"RTN","RORX010",67,0)
 ;
"RTN","RORX010",68,0)
 ;--- Get and prepare the report parameters
"RTN","RORX010",69,0)
 S RORREG=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORX010",70,0)
 S RC=$$PARAMS(REPORT,.SFLAGS,.LRGLST)  Q:RC<0 RC
"RTN","RORX010",71,0)
 ;
"RTN","RORX010",72,0)
 ;--- Initialize constants and variables
"RTN","RORX010",73,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX010",74,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT\1,1),ECNT=0
"RTN","RORX010",75,0)
 K ^TMP("RORX010",$J)
"RTN","RORX010",76,0)
 S RORLTL=$$ALLOC^RORTMP()
"RTN","RORX010",77,0)
 ;
"RTN","RORX010",78,0)
 ;--- Prepare the search parameters
"RTN","RORX010",79,0)
 S RORDST=$NA(^TMP("RORX010",$J))
"RTN","RORX010",80,0)
 S RORDST("RORCB")="$$LTCB^RORX010"
"RTN","RORX010",81,0)
 S RC=$$LOADTSTS^RORUTL10(RORLTL,+RORREG,LRGLST)
"RTN","RORX010",82,0)
 ;
"RTN","RORX010",83,0)
 ;--- Report header and list of patients
"RTN","RORX010",84,0)
 S RC=$$HEADER(REPORT)  G:RC<0 ERROR
"RTN","RORX010",85,0)
 S BODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX010",86,0)
 I BODY<0  S RC=+BODY  G ERROR
"RTN","RORX010",87,0)
 D ADDATTR^RORTSK11(RORTSK,BODY,"TABLE","PATIENTS")
"RTN","RORX010",88,0)
 ;
"RTN","RORX010",89,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX010",90,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT)
"RTN","RORX010",91,0)
 ;
"RTN","RORX010",92,0)
 ;--- Browse through the registry records
"RTN","RORX010",93,0)
 S (CNT,IEN,RC)=0
"RTN","RORX010",94,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX010",95,0)
 F  S IEN=$O(^RORDATA(798,"AC",RORREG,IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX010",96,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX010",97,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX010",98,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX010",99,0)
 . ;--- Get patient DFN
"RTN","RORX010",100,0)
 . S DFN=$$PTIEN^RORUTL01(IEN) Q:DFN'>0
"RTN","RORX010",101,0)
 . ;--- Check for patient list and quit if not on list
"RTN","RORX010",102,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",DFN)) Q
"RTN","RORX010",103,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX010",104,0)
 . Q:$$SKIP^RORXU005(IEN,SFLAGS,RORSDT,ROREDT)
"RTN","RORX010",105,0)
 . ;--- Check pateint against ICD9 Filter
"RTN","RORX010",106,0)
 . S RCC=0
"RTN","RORX010",107,0)
 . I FLAG'="ALL" D
"RTN","RORX010",108,0)
 . . S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX010",109,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX010",110,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX010",111,0)
 . ;--- End of ICD9 Check
"RTN","RORX010",112,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX010",113,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,DFN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX010",114,0)
 . ;--- Process the registry record
"RTN","RORX010",115,0)
 . I $$PATIENT(IENS,BODY)<0  S ECNT=ECNT+1  Q
"RTN","RORX010",116,0)
 ;
"RTN","RORX010",117,0)
ERROR ;--- Cleanup
"RTN","RORX010",118,0)
 D FREE^RORTMP(RORLTL)
"RTN","RORX010",119,0)
 K ^TMP("RORX010",$J)
"RTN","RORX010",120,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX010",121,0)
 ;
"RTN","RORX010",122,0)
 ;***** CALLBACK FUNCTION FOR LAB DATA SEARCH
"RTN","RORX010",123,0)
LTCB(RORDST,INVDT,RESULT) ;
"RTN","RORX010",124,0)
 N GRP,NODE,RC,VAL
"RTN","RORX010",125,0)
 S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX010",126,0)
 S GRP=+$P($G(RESULT(2)),U,3)
"RTN","RORX010",127,0)
 ;--- Check the result range if necessary
"RTN","RORX010",128,0)
 I $D(@NODE@(GRP))>1  S RC=1  D  Q:RC RC
"RTN","RORX010",129,0)
 . S VAL=$$CLRNMVAL^RORUTL18($P($G(RESULT(1)),U,3))
"RTN","RORX010",130,0)
 . ;--- Skip a non-numeric result
"RTN","RORX010",131,0)
 . Q:'$$NUMERIC^RORUTL05(VAL)
"RTN","RORX010",132,0)
 . ;--- Check the range
"RTN","RORX010",133,0)
 . I $G(@NODE@(GRP,"L"))'=""  Q:VAL<@NODE@(GRP,"L")
"RTN","RORX010",134,0)
 . I $G(@NODE@(GRP,"H"))'=""  Q:VAL>@NODE@(GRP,"H")
"RTN","RORX010",135,0)
 . S RC=0
"RTN","RORX010",136,0)
 ;--- Store the result
"RTN","RORX010",137,0)
 K RORDST("GRP",GRP)
"RTN","RORX010",138,0)
 S RORDST("RORPTR")=$G(RORDST("RORPTR"))+1
"RTN","RORX010",139,0)
 M @RORDST@(RORDST("RORPTR"))=RESULT
"RTN","RORX010",140,0)
 Q 0
"RTN","RORX010",141,0)
 ;
"RTN","RORX010",142,0)
 ;***** OUTPUTS THE REPORT PARAMETERS
"RTN","RORX010",143,0)
 ;
"RTN","RORX010",144,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX010",145,0)
 ;
"RTN","RORX010",146,0)
 ; .FLAGS        Flags for the $$SKIP^RORXU005 are
"RTN","RORX010",147,0)
 ;               returned via this parameter
"RTN","RORX010",148,0)
 ;
"RTN","RORX010",149,0)
 ; .LRGLST       List of lab group codes for the $$LOADTSTS^RORUTL10
"RTN","RORX010",150,0)
 ;
"RTN","RORX010",151,0)
 ; Return Values:
"RTN","RORX010",152,0)
 ;       <0  Error code
"RTN","RORX010",153,0)
 ;        0  Ok
"RTN","RORX010",154,0)
 ;
"RTN","RORX010",155,0)
PARAMS(PARTAG,FLAGS,LRGLST) ;
"RTN","RORX010",156,0)
 N PARAMS,TMP
"RTN","RORX010",157,0)
 S (FLAGS,LRGLST)=""
"RTN","RORX010",158,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,.RORSDT,.ROREDT,.FLAGS)
"RTN","RORX010",159,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX010",160,0)
 ;--- Lab test ranges
"RTN","RORX010",161,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORX010",162,0)
 . N GRC,ELEMENT,NODE,LRGELMTS,RANGE
"RTN","RORX010",163,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX010",164,0)
 . S LRGELMTS=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGES",,PARAMS)
"RTN","RORX010",165,0)
 . S (GRC,RC)=0
"RTN","RORX010",166,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORX010",167,0)
 . . S RANGE=0,TMP=$$RANGE(GRC)
"RTN","RORX010",168,0)
 . . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGE",TMP,LRGELMTS)
"RTN","RORX010",169,0)
 . . I ELEMENT<0  S RC=ELEMENT  Q
"RTN","RORX010",170,0)
 . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"ID",GRC)
"RTN","RORX010",171,0)
 . . S LRGLST=LRGLST_$S(LRGLST'="":","_GRC,1:GRC)
"RTN","RORX010",172,0)
 . . ;--- Process the range values
"RTN","RORX010",173,0)
 . . S TMP=$G(@NODE@(GRC,"L"))
"RTN","RORX010",174,0)
 . . I TMP'=""  D  S RANGE=1
"RTN","RORX010",175,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"LOW",TMP)
"RTN","RORX010",176,0)
 . . S TMP=$G(@NODE@(GRC,"H"))
"RTN","RORX010",177,0)
 . . I TMP'=""  D  S RANGE=1
"RTN","RORX010",178,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"HIGH",TMP)
"RTN","RORX010",179,0)
 . . D:RANGE ADDATTR^RORTSK11(RORTSK,ELEMENT,"RANGE",1)
"RTN","RORX010",180,0)
 ;--- Success
"RTN","RORX010",181,0)
 Q PARAMS
"RTN","RORX010",182,0)
 ;
"RTN","RORX010",183,0)
 ;***** ADDS THE PATIENT DATA TO THE REPORT
"RTN","RORX010",184,0)
 ;
"RTN","RORX010",185,0)
 ; IENS          IENS of the patient's record in the registry
"RTN","RORX010",186,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX010",187,0)
 ;
"RTN","RORX010",188,0)
 ; Return Values:
"RTN","RORX010",189,0)
 ;       <0  Error code
"RTN","RORX010",190,0)
 ;        0  Ok
"RTN","RORX010",191,0)
 ;
"RTN","RORX010",192,0)
PATIENT(IENS,PARTAG) ;
"RTN","RORX010",193,0)
 N DFN,I,LABTESTS,LT,NAME,RC,RORBUF,RORMSG,TMP,VA,VADM
"RTN","RORX010",194,0)
 ;--- Get the data from the ROR REGISTRY RECORD file
"RTN","RORX010",195,0)
 K RORMSG D GETS^DIQ(798,IENS,".01","I","RORBUF","RORMSG")
"RTN","RORX010",196,0)
 ;Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORX010",197,0)
 Q:$G(RORMSG("DIERR")) $$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORX010",198,0)
 S DFN=$G(RORBUF(798,IENS,.01,"I"))
"RTN","RORX010",199,0)
 ;--- Search for the lab results
"RTN","RORX010",200,0)
 K @RORDST,RORDST("RORPTR")
"RTN","RORX010",201,0)
 M RORDST("GRP")=RORTSK("PARAMS","LRGRANGES","C")
"RTN","RORX010",202,0)
 S RC=$$LTSEARCH^RORUTL10(DFN,RORLTL,.RORDST,,RORSDT,ROREDT1)
"RTN","RORX010",203,0)
 Q:RC'>0 RC
"RTN","RORX010",204,0)
 ;--- Results from all groups should be present
"RTN","RORX010",205,0)
 Q:$D(RORDST("GRP"))>1 0
"RTN","RORX010",206,0)
 ;--- Load the demographic data
"RTN","RORX010",207,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX010",208,0)
 ;--- The <PATIENT> tag
"RTN","RORX010",209,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PARTAG,,DFN)
"RTN","RORX010",210,0)
 Q:PTAG<0 PTAG
"RTN","RORX010",211,0)
 ;--- Patient Name
"RTN","RORX010",212,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX010",213,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX010",214,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX010",215,0)
 ;--- Date of death
"RTN","RORX010",216,0)
 S TMP=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX010",217,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",TMP,PTAG,1)
"RTN","RORX010",218,0)
 ;--- Lab results
"RTN","RORX010",219,0)
 S LABTESTS=$$ADDVAL^RORTSK11(RORTSK,"PTLRL",,PTAG)
"RTN","RORX010",220,0)
 S I=""
"RTN","RORX010",221,0)
 F  S I=$O(@RORDST@(I))  Q:I=""  D
"RTN","RORX010",222,0)
 . S LT=$$ADDVAL^RORTSK11(RORTSK,"LT",,LABTESTS)
"RTN","RORX010",223,0)
 . D ADDVAL^RORTSK11(RORTSK,"GROUP",$P(@RORDST@(I,2),U,4),LT,1)
"RTN","RORX010",224,0)
 . D ADDVAL^RORTSK11(RORTSK,"DATE",$P(@RORDST@(I,1),U,2),LT,1)
"RTN","RORX010",225,0)
 . D ADDVAL^RORTSK11(RORTSK,"NAME",$P(@RORDST@(I,2),U,2),LT,1)
"RTN","RORX010",226,0)
 . D ADDVAL^RORTSK11(RORTSK,"RESULT",$P(@RORDST@(I,1),U,3),LT,3)
"RTN","RORX010",227,0)
 ;---
"RTN","RORX010",228,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX010",229,0)
 ;
"RTN","RORX010",230,0)
 ;***** PROCESSES THE RESULT RANGE OPTIONS
"RTN","RORX010",231,0)
 ;
"RTN","RORX010",232,0)
 ; GRC           Code of a Lab Group
"RTN","RORX010",233,0)
 ;
"RTN","RORX010",234,0)
 ; Return Values:
"RTN","RORX010",235,0)
 ;       Description of the Lab results to be included in the report.
"RTN","RORX010",236,0)
 ;
"RTN","RORX010",237,0)
RANGE(GRC) ;
"RTN","RORX010",238,0)
 N RANGE,TMP
"RTN","RORX010",239,0)
 S RANGE=""
"RTN","RORX010",240,0)
 ;--- Range
"RTN","RORX010",241,0)
 D:$D(RORTSK("PARAMS","LRGRANGES","C",GRC))>1
"RTN","RORX010",242,0)
 . ;--- Low
"RTN","RORX010",243,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"L"))
"RTN","RORX010",244,0)
 . S:TMP'="" RANGE=RANGE_" not less than "_TMP
"RTN","RORX010",245,0)
 . ;--- High
"RTN","RORX010",246,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"H"))
"RTN","RORX010",247,0)
 . I TMP'=""  D:RANGE'=""  S RANGE=RANGE_" not greater than "_TMP
"RTN","RORX010",248,0)
 . . S RANGE=RANGE_" and"
"RTN","RORX010",249,0)
 ;--- Description
"RTN","RORX010",250,0)
 S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC))
"RTN","RORX010",251,0)
 S:TMP="" TMP="Unknown ("_GRC_")"
"RTN","RORX010",252,0)
 Q TMP_" - "_$S(RANGE'="":"numeric results"_RANGE,1:"all results")
"RTN","RORX011")
0^17^B97364438^B95907620
"RTN","RORX011",1,0)
RORX011 ;HOIFO/SG,VAC - PATIENT MEDICATION HISTORY ;4/17/09 10:45am
"RTN","RORX011",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,8,13**;Feb 17, 2006;Build 27
"RTN","RORX011",3,0)
 ;
"RTN","RORX011",4,0)
 ; This routine uses the following IAs:
"RTN","RORX011",5,0)
 ;
"RTN","RORX011",6,0)
 ; #10103 DT^XLFDT, FMADD^XLFDT (supported)
"RTN","RORX011",7,0)
 ;    
"RTN","RORX011",8,0)
 ;******************************************************************************
"RTN","RORX011",9,0)
 ;******************************************************************************
"RTN","RORX011",10,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX011",11,0)
 ;        
"RTN","RORX011",12,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX011",13,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX011",14,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX011",15,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX011",16,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added #refills remaining and logic
"RTN","RORX011",17,0)
 ;                                      to include only most recent fills
"RTN","RORX011",18,0)
 ;                                      NOTE: Patch 11 became patch 13.
"RTN","RORX011",19,0)
 ;                                      Any references to patch 11 in the code
"RTN","RORX011",20,0)
 ;                                      below is referring to path 13.
"RTN","RORX011",21,0)
 ;
"RTN","RORX011",22,0)
 ;******************************************************************************
"RTN","RORX011",23,0)
 ;******************************************************************************
"RTN","RORX011",24,0)
 Q
"RTN","RORX011",25,0)
 ;
"RTN","RORX011",26,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX011",27,0)
 ;
"RTN","RORX011",28,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX011",29,0)
 ;
"RTN","RORX011",30,0)
 ; Return Values:
"RTN","RORX011",31,0)
 ;       <0  Error code
"RTN","RORX011",32,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX011",33,0)
 ;
"RTN","RORX011",34,0)
HEADER(PARTAG) ;
"RTN","RORX011",35,0)
 ;;PATIENTS(#,NAME,LAST4,DOB,AGE,DOD)
"RTN","RORX011",36,0)
 ;;PTRXL(DATE,ORDER,TYPE,NAME,GENERIC,DAYSPLY,FILLTYPE,REFILLS)
"RTN","RORX011",37,0)
 ;REFILLS added to column headers (above) - Patch 11
"RTN","RORX011",38,0)
 N HEADER,NOTES,RC
"RTN","RORX011",39,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX011",40,0)
 Q:HEADER<0 HEADER
"RTN","RORX011",41,0)
 S NOTES=$$ADDVAL^RORTSK11(RORTSK,"NOTES",,HEADER)
"RTN","RORX011",42,0)
 D ADDVAL^RORTSK11(RORTSK,"AGE",$$DT^XLFDT,NOTES)
"RTN","RORX011",43,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX011",HEADER)
"RTN","RORX011",44,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX011",45,0)
 ;
"RTN","RORX011",46,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX011",47,0)
 ;
"RTN","RORX011",48,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX011",49,0)
 ;
"RTN","RORX011",50,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX011",51,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX011",52,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are returned via this parameter
"RTN","RORX011",53,0)
 ;
"RTN","RORX011",54,0)
 ; Return Values:
"RTN","RORX011",55,0)
 ;       <0  Error code
"RTN","RORX011",56,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX011",57,0)
 ;
"RTN","RORX011",58,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX011",59,0)
 N PARAMS,TMP
"RTN","RORX011",60,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,.STDT,.ENDT,.FLAGS)
"RTN","RORX011",61,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX011",62,0)
 ;--- Process the drug list and options
"RTN","RORX011",63,0)
 S TMP=$$DRUGLST^RORXU007(.RORTSK,PARAMS,.RORXL,.RORXGRP)
"RTN","RORX011",64,0)
 Q:TMP<0 TMP
"RTN","RORX011",65,0)
 ;
"RTN","RORX011",66,0)
 Q PARAMS
"RTN","RORX011",67,0)
 ;
"RTN","RORX011",68,0)
 ;***** PROCESS THE PATIENT'S DATA
"RTN","RORX011",69,0)
 ;
"RTN","RORX011",70,0)
 ; PTLIST        Reference (IEN) to the parent tag
"RTN","RORX011",71,0)
 ; PATIEN        Patient IEN in the file #2 (DFN)
"RTN","RORX011",72,0)
 ; RORXDST       Patient's Medication History data
"RTN","RORX011",73,0)
 ;
"RTN","RORX011",74,0)
 ; Return Values:
"RTN","RORX011",75,0)
 ;       <0  Error code
"RTN","RORX011",76,0)
 ;        0  Ok
"RTN","RORX011",77,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX011",78,0)
 ;
"RTN","RORX011",79,0)
PATIENT(PTLIST,PATIEN,RORXDST) ;
"RTN","RORX011",80,0)
 N BUF,FLT,FLTL,FQL,ITEM,NODE,PTAG,QSB,RC,TABLE,VA,VADM,VAERR
"RTN","RORX011",81,0)
 S (ECNT,RC)=0
"RTN","RORX011",82,0)
 ;--- Patient data
"RTN","RORX011",83,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTLIST,,PATIEN)
"RTN","RORX011",84,0)
 Q:PTAG<0 PTAG
"RTN","RORX011",85,0)
 D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX011",86,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX011",87,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX011",88,0)
 D ADDVAL^RORTSK11(RORTSK,"DOB",$$DATE^RORXU002(VADM(3)\1),PTAG,1)
"RTN","RORX011",89,0)
 D ADDVAL^RORTSK11(RORTSK,"AGE",VADM(4),PTAG,3)
"RTN","RORX011",90,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$$DATE^RORXU002(VADM(6)\1),PTAG,1)
"RTN","RORX011",91,0)
 ;--- List of drugs
"RTN","RORX011",92,0)
 S TABLE=$$ADDVAL^RORTSK11(RORTSK,"PTRXL",,PTAG)
"RTN","RORX011",93,0)
 Q:TABLE<0 TABLE
"RTN","RORX011",94,0)
 D ADDATTR^RORTSK11(RORTSK,TABLE,"TABLE","PTRXL")
"RTN","RORX011",95,0)
 ;---
"RTN","RORX011",96,0)
 S NODE=RORXDST,FLTL=$L(NODE)-1,FLT=$E(NODE,1,FLTL)
"RTN","RORX011",97,0)
 S QSB=$QL(NODE),FQL=QSB+5
"RTN","RORX011",98,0)
 F  S NODE=$Q(@NODE)  Q:$E(NODE,1,FLTL)'=FLT  D:$QL(NODE)=FQL
"RTN","RORX011",99,0)
 . ; NODE: @RORXDST@(DATE,DRUGNAME,DRUGIEN,RXNUM,RXCNT)
"RTN","RORX011",100,0)
 . S BUF=@NODE
"RTN","RORX011",101,0)
 . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"DRUG",,TABLE)
"RTN","RORX011",102,0)
 . D ADDVAL^RORTSK11(RORTSK,"DATE",$QS(NODE,QSB+1)\1,ITEM,1)
"RTN","RORX011",103,0)
 . D ADDVAL^RORTSK11(RORTSK,"ORDER",$QS(NODE,QSB+4),ITEM,1)
"RTN","RORX011",104,0)
 . S TMP=$P(BUF,U)
"RTN","RORX011",105,0)
 . S TMP=$S(TMP="O":"ORIGINAL",TMP="P":"PARTIAL",TMP="R":"REFILL",1:"")
"RTN","RORX011",106,0)
 . D ADDVAL^RORTSK11(RORTSK,"TYPE",TMP,ITEM,1)
"RTN","RORX011",107,0)
 . D ADDVAL^RORTSK11(RORTSK,"NAME",$QS(NODE,QSB+2),ITEM,1)
"RTN","RORX011",108,0)
 . D ADDVAL^RORTSK11(RORTSK,"GENERIC",$P(BUF,U,4),ITEM,1)
"RTN","RORX011",109,0)
 . D ADDVAL^RORTSK11(RORTSK,"DAYSPLY",$P(BUF,U,5),ITEM,1)
"RTN","RORX011",110,0)
 . S TMP=$P(BUF,U,2)
"RTN","RORX011",111,0)
 . S TMP=$S(TMP="I":"INPATIENT",TMP="M":"MAIL",TMP="W":"WINDOW",1:"")
"RTN","RORX011",112,0)
 . D ADDVAL^RORTSK11(RORTSK,"FILLTYPE",TMP,ITEM,1)
"RTN","RORX011",113,0)
 . D ADDVAL^RORTSK11(RORTSK,"REFILLS",$P(BUF,U,6),ITEM,1) ;number of refills remaining - Patch 11
"RTN","RORX011",114,0)
 ;---
"RTN","RORX011",115,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX011",116,0)
 ;
"RTN","RORX011",117,0)
 ;***** PROCESSES THE LIST OF PATIENTS
"RTN","RORX011",118,0)
 ;
"RTN","RORX011",119,0)
 ; REPORT        Reference (IEN) to the parent tag
"RTN","RORX011",120,0)
 ;
"RTN","RORX011",121,0)
 ; Return Values:
"RTN","RORX011",122,0)
 ;       <0  Error code
"RTN","RORX011",123,0)
 ;        0  Ok
"RTN","RORX011",124,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX011",125,0)
 ;
"RTN","RORX011",126,0)
PROCESS(REPORT,FLAGS) ;
"RTN","RORX011",127,0)
 N CNT,ECNT,IEN798,PTIEN,PTLIST,PTNODE,RC,RORPTN,RORXDST,RXFLAGS,TMP,DFN
"RTN","RORX011",128,0)
 N RORX011 S RORX011=1 ;Patch 11: needed for 'callback' function setup in PROCESS^RORUTL15
"RTN","RORX011",129,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX011",130,0)
 N RCC,FLAG
"RTN","RORX011",131,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX011",132,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX011",133,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX011",134,0)
 ;
"RTN","RORX011",135,0)
 ;--- Count patients in the list.  Define which patient 'list' to use: the one 
"RTN","RORX011",136,0)
 ;selected by the user, or all patients in 798
"RTN","RORX011",137,0)
 I RORALL  D  S:RORPTN<0 RORPTN=0
"RTN","RORX011",138,0)
 . S PTNODE=$NA(^RORDATA(798,"ARP",RORREG_"#"))
"RTN","RORX011",139,0)
 . S RORPTN=$$REGSIZE^RORUTL02(+RORREG)
"RTN","RORX011",140,0)
 E  S (PTIEN,RORPTN)=0  D  Q:RORPTN'>0 0
"RTN","RORX011",141,0)
 . S PTNODE=$NA(RORTSK("PARAMS","PATIENTS","C"))
"RTN","RORX011",142,0)
 . F  S PTIEN=$O(@PTNODE@(PTIEN))  Q:PTIEN'>0  S RORPTN=RORPTN+1
"RTN","RORX011",143,0)
 ;---
"RTN","RORX011",144,0)
 S PTLIST=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX011",145,0)
 Q:PTLIST<0 PTLIST
"RTN","RORX011",146,0)
 ;
"RTN","RORX011",147,0)
 ;--- Prepare parameters for the pharmacy search API
"RTN","RORX011",148,0)
 S RORXDST=$NA(^TMP("RORX011",$J))
"RTN","RORX011",149,0)
 S RORXDST("RORCB")="$$RXSCB^RORX011"
"RTN","RORX011",150,0)
 S RXFLAGS="E"
"RTN","RORX011",151,0)
 S:$$PARAM^RORTSK01("PATIENTS","INPATIENT") RXFLAGS=RXFLAGS_"IV"
"RTN","RORX011",152,0)
 S:$$PARAM^RORTSK01("PATIENTS","OUTPATIENT") RXFLAGS=RXFLAGS_"O"
"RTN","RORX011",153,0)
 ;
"RTN","RORX011",154,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX011",155,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT)
"RTN","RORX011",156,0)
 ;
"RTN","RORX011",157,0)
 ;--- Browse through the list of selected patients
"RTN","RORX011",158,0)
 S (CNT,PTIEN)=0
"RTN","RORX011",159,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX011",160,0)
 ;
"RTN","RORX011",161,0)
 F  S PTIEN=$O(@PTNODE@(PTIEN))  Q:PTIEN'>0  D  Q:RC<0
"RTN","RORX011",162,0)
 . S RC=$$LOOP^RORTSK01(CNT/RORPTN)  Q:RC<0
"RTN","RORX011",163,0)
 . S CNT=CNT+1,IEN798=$$PRRIEN^RORUTL01(PTIEN,RORREG)  Q:IEN798'>0
"RTN","RORX011",164,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX011",165,0)
 . I RORALL  Q:$$SKIP^RORXU005(IEN798,FLAGS,RORSDT,ROREDT)
"RTN","RORX011",166,0)
 . ;--- Check the patient against the ICD9 Filter
"RTN","RORX011",167,0)
 . S RCC=0
"RTN","RORX011",168,0)
 . I FLAG'="ALL" D
"RTN","RORX011",169,0)
 . . S RCC=$$ICD^RORXU010(PTIEN,RORREG)
"RTN","RORX011",170,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX011",171,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX011",172,0)
 . ;--- End of check for ICD9 Filter
"RTN","RORX011",173,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX011",174,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PTIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX011",175,0)
 . ;--- Search the pharmacy data
"RTN","RORX011",176,0)
 . K @RORXDST
"RTN","RORX011",177,0)
 . S TMP=$$RXSEARCH^RORUTL14(PTIEN,RORXL,.RORXDST,RXFLAGS,RORSDT,ROREDT1)
"RTN","RORX011",178,0)
 . I TMP<0  S ECNT=ECNT+1  Q
"RTN","RORX011",179,0)
 . I RORALL  Q:TMP'>0
"RTN","RORX011",180,0)
 . ;--- If user selected most recent drug fills, remove older duplicates
"RTN","RORX011",181,0)
 . I $$PARAM^RORTSK01("OPTIONS","RECENT_FILLS") D RECENT(RORXDST)
"RTN","RORX011",182,0)
 . ;--- Append the patient's data to the report
"RTN","RORX011",183,0)
 . S TMP=$$PATIENT(PTLIST,PTIEN,RORXDST)
"RTN","RORX011",184,0)
 . I TMP  S ECNT=ECNT+$S(TMP>0:TMP,1:1)  Q
"RTN","RORX011",185,0)
 ;
"RTN","RORX011",186,0)
 ;--- Cleanup
"RTN","RORX011",187,0)
 K @RORXDST
"RTN","RORX011",188,0)
 K ^TMP("RORX011-RESORTED",$J) ;Patch 11
"RTN","RORX011",189,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX011",190,0)
 ;
"RTN","RORX011",191,0)
 ;***** COMPILES THE "PATIENT DRUG HISTORY" REPORT
"RTN","RORX011",192,0)
 ; REPORT CODE: 011
"RTN","RORX011",193,0)
 ;
"RTN","RORX011",194,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX011",195,0)
 ;
"RTN","RORX011",196,0)
 ; The ^TMP("RORX011",$J) global node is used by this function.
"RTN","RORX011",197,0)
 ;
"RTN","RORX011",198,0)
 ; Return Values:
"RTN","RORX011",199,0)
 ;       <0  Error code
"RTN","RORX011",200,0)
 ;        0  Ok
"RTN","RORX011",201,0)
 ;
"RTN","RORX011",202,0)
RXHIST(RORTSK) ;
"RTN","RORX011",203,0)
 N RORALL        ; Consider all registry patients
"RTN","RORX011",204,0)
 N ROREDT        ; End date
"RTN","RORX011",205,0)
 N ROREDT1       ; End date + 1
"RTN","RORX011",206,0)
 N RORREG        ; Registry IEN
"RTN","RORX011",207,0)
 N RORSDT        ; Start date
"RTN","RORX011",208,0)
 N RORXGRP       ; List of drug groups
"RTN","RORX011",209,0)
 N RORXL         ; Closed root of the medication list
"RTN","RORX011",210,0)
 ;
"RTN","RORX011",211,0)
 N ECNT,FLAGS,RC,REPORT,TMP
"RTN","RORX011",212,0)
 S RORXL="",(ECNT,RC)=0
"RTN","RORX011",213,0)
 K ^TMP("RORX011",$J)
"RTN","RORX011",214,0)
 ;
"RTN","RORX011",215,0)
 ;--- Root node of the report
"RTN","RORX011",216,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX011",217,0)
 Q:REPORT<0 REPORT
"RTN","RORX011",218,0)
 ;
"RTN","RORX011",219,0)
 D
"RTN","RORX011",220,0)
 . ;--- Get and prepare the report parameters
"RTN","RORX011",221,0)
 . S RORREG=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORX011",222,0)
 . S RORALL=$$PARAM^RORTSK01("PATIENTS","ALL")
"RTN","RORX011",223,0)
 . S RC=$$PARAMS(REPORT,.RORSDT,.ROREDT,.FLAGS)  Q:RC<0
"RTN","RORX011",224,0)
 . S ROREDT1=$$FMADD^XLFDT(ROREDT\1,1)
"RTN","RORX011",225,0)
 . ;
"RTN","RORX011",226,0)
 . ;--- Report header
"RTN","RORX011",227,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX011",228,0)
 . ;
"RTN","RORX011",229,0)
 . ;--- Process the data and generate the report
"RTN","RORX011",230,0)
 . S RC=$$PROCESS(REPORT,FLAGS)  S:RC>0 ECNT=ECNT+RC
"RTN","RORX011",231,0)
 ;
"RTN","RORX011",232,0)
 ;--- Cleanup
"RTN","RORX011",233,0)
 K ^TMP("RORX011-RESORTED",$J)
"RTN","RORX011",234,0)
 D FREE^RORTMP(RORXL)
"RTN","RORX011",235,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX011",236,0)
 ;
"RTN","RORX011",237,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX011",238,0)
RXSCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE,NUMREF) ;
"RTN","RORX011",239,0)
 N DRUGIEN,DRUGNAME,FILLTYPE,IEN,IRP,OFD,RPSUB,RXBUF,RXCNT,RXNUM,TMP
"RTN","RORX011",240,0)
 S DRUGIEN=+DRUG,DRUGNAME=$P(DRUG,U,2)
"RTN","RORX011",241,0)
 Q:(DRUGIEN'>0)!(DRUGNAME="") 1
"RTN","RORX011",242,0)
 ;--- Check the drug groups
"RTN","RORX011",243,0)
 S TMP=$$RXGRPCHK^RORXU007(.ROR8DST,+DRUG,RORXL)
"RTN","RORX011",244,0)
 Q:TMP TMP
"RTN","RORX011",245,0)
 ;--- Process the order
"RTN","RORX011",246,0)
 S:ROR8DST("RORXGEN")>0 $P(RXBUF,U,4)=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX011",247,0)
 S $P(RXBUF,U,5)=$P($G(^TMP("PS",$J,0)),U,7)  ; Days Supply
"RTN","RORX011",248,0)
 S $P(RXBUF,U,6)=+$G(NUMREF)  ; # Refills remaining - Patch 11
"RTN","RORX011",249,0)
 S TMP=$G(^TMP("PS",$J,"RXN",0))
"RTN","RORX011",250,0)
 S FILLTYPE=$S(ORDFLG["I":"I",1:$P(TMP,U,3))
"RTN","RORX011",251,0)
 S RXNUM=$P(TMP,U)  S:RXNUM="" RXNUM=" "
"RTN","RORX011",252,0)
 S RXCNT=0
"RTN","RORX011",253,0)
 ;--- Original prescription
"RTN","RORX011",254,0)
 I ORDFLG["I"  D  ;--- Inpatient
"RTN","RORX011",255,0)
 . S OFD=$P($G(^TMP("PS",$J,0)),U,5)         ; Start Date
"RTN","RORX011",256,0)
 . S $P(RXBUF,U,1,2)="I"_U_FILLTYPE,RXCNT=RXCNT+1
"RTN","RORX011",257,0)
 . S @ROR8DST@(OFD,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX011",258,0)
 E  D             ;--- Outpatient
"RTN","RORX011",259,0)
 . S OFD=+$P($G(^TMP("PS",$J,"RXN",0)),U,6)  ; Original Fill Date
"RTN","RORX011",260,0)
 . Q:(OFD<ROR8DST("RORSDT"))!(OFD'<ROR8DST("ROREDT"))
"RTN","RORX011",261,0)
 . S $P(RXBUF,U,1,2)="O"_U_FILLTYPE,RXCNT=RXCNT+1
"RTN","RORX011",262,0)
 . S @ROR8DST@(OFD,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX011",263,0)
 ;--- Refills and partials
"RTN","RORX011",264,0)
 F RPSUB="REF","PAR"  D
"RTN","RORX011",265,0)
 . S $P(RXBUF,U)=$E(RPSUB,1)
"RTN","RORX011",266,0)
 . S IRP=0
"RTN","RORX011",267,0)
 . F  S IRP=$O(^TMP("PS",$J,RPSUB,IRP))  Q:IRP'>0  D
"RTN","RORX011",268,0)
 . . S TMP=$G(^TMP("PS",$J,RPSUB,IRP,0))
"RTN","RORX011",269,0)
 . . S $P(RXBUF,U,2)=$S(ORDFLG["I":"I",1:$P(TMP,U,5))
"RTN","RORX011",270,0)
 . . S $P(RXBUF,U,5)=$P(TMP,U,2)  ; Days Supply
"RTN","RORX011",271,0)
 . . I TMP>0  S RXCNT=RXCNT+1  D
"RTN","RORX011",272,0)
 . . . S @ROR8DST@(+TMP,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX011",273,0)
 Q 0
"RTN","RORX011",274,0)
 ;
"RTN","RORX011",275,0)
 ;***** KEEP ONLY MOST RECENT FILLS FOR EACH DRUG
"RTN","RORX011",276,0)
 ;Input:
"RTN","RORX011",277,0)
 ;   RORXDST - arry containing all drug fills for patient
"RTN","RORX011",278,0)
 ;
"RTN","RORX011",279,0)
 ;Output:
"RTN","RORX011",280,0)
 ;   RORXDST - array containing only most recent drug fills for patient
"RTN","RORX011",281,0)
 ;       
"RTN","RORX011",282,0)
 ;The ^TMP("RORX011-RESORTED",$J) global node is used by this function.
"RTN","RORX011",283,0)
 ;Indirection: RORXDST = $NA(^TMP("RORX011",$J))
"RTN","RORX011",284,0)
 ;                           ^TMP("RORX011",$J,DATE,DRUG_NAME,IEN,...)
"RTN","RORX011",285,0)
 ;
"RTN","RORX011",286,0)
RECENT(RORXDST) ;
"RTN","RORX011",287,0)
 N DATE,DRUG
"RTN","RORX011",288,0)
 K ^TMP("RORX011-RESORTED",$J) ;empty the temporary global
"RTN","RORX011",289,0)
 ;Patient's Rx data was stored by date, then drug name.  Spin through
"RTN","RORX011",290,0)
 ;Rx data and re-order it by drug name first, then date.  The reordered
"RTN","RORX011",291,0)
 ;data is put into temp global ^TMP("RORX011-RESORTED",$J,DRUG,DATE)
"RTN","RORX011",292,0)
 S DATE=0 F  S DATE=$O(@RORXDST@(DATE)) Q:'DATE  D
"RTN","RORX011",293,0)
 . S DRUG=0 F  S DRUG=$O(@RORXDST@(DATE,DRUG)) Q:'$L(DRUG)  D
"RTN","RORX011",294,0)
 . . S ^TMP("RORX011-RESORTED",$J,DRUG,DATE)=1
"RTN","RORX011",295,0)
 ;
"RTN","RORX011",296,0)
 ;spin through re-sorted drug file
"RTN","RORX011",297,0)
 S DRUG=0 F  S DRUG=$O(^TMP("RORX011-RESORTED",$J,DRUG)) Q:'$L(DRUG)  D
"RTN","RORX011",298,0)
 . ;get entry for drug with most recent (latest) date
"RTN","RORX011",299,0)
 . S DATE=$O(^TMP("RORX011-RESORTED",$J,DRUG,9999999),-1)
"RTN","RORX011",300,0)
 . ;has any drug been re-filled?
"RTN","RORX011",301,0)
 . F  S DATE=$O(^TMP("RORX011-RESORTED",$J,DRUG,DATE),-1) Q:'DATE  D
"RTN","RORX011",302,0)
 . . ;yes, previous/older fill found - delete from the original file
"RTN","RORX011",303,0)
 . . K @RORXDST@(DATE,DRUG)
"RTN","RORX011",304,0)
 Q
"RTN","RORX012A")
0^18^B86805561^B86805561
"RTN","RORX012A",1,0)
RORX012A ;HOIFO/SG,VAC - COMBINED MEDS AND LABS (QUERY & STORE) ;4/7/09 2:09pm
"RTN","RORX012A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,13**;Feb 17, 2006;Build 27
"RTN","RORX012A",3,0)
 ;
"RTN","RORX012A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX012A",5,0)
 ;
"RTN","RORX012A",6,0)
 ; #10103 FMADD^XLFDT (supported)
"RTN","RORX012A",7,0)
 ;   
"RTN","RORX012A",8,0)
 ;******************************************************************************
"RTN","RORX012A",9,0)
 ;******************************************************************************
"RTN","RORX012A",10,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX012A",11,0)
 ;        
"RTN","RORX012A",12,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX012A",13,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX012A",14,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX012A",15,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX012A",16,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX012A",17,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX012A",18,0)
 ;                                      
"RTN","RORX012A",19,0)
 ;******************************************************************************
"RTN","RORX012A",20,0)
 ;******************************************************************************
"RTN","RORX012A",21,0)
 Q
"RTN","RORX012A",22,0)
 ;
"RTN","RORX012A",23,0)
 ;***** LAB SEARCH CALLBACK
"RTN","RORX012A",24,0)
 ;
"RTN","RORX012A",25,0)
 ; .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX012A",26,0)
 ;
"RTN","RORX012A",27,0)
 ; INVDT         IEN of the Lab test (inverted date)
"RTN","RORX012A",28,0)
 ;
"RTN","RORX012A",29,0)
 ; .RESULT       Reference to a local variable, which contains
"RTN","RORX012A",30,0)
 ;               the result (see the $$LTSEARCH^RORUTL10).
"RTN","RORX012A",31,0)
 ;
"RTN","RORX012A",32,0)
 ; Return Values:
"RTN","RORX012A",33,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX012A",34,0)
 ;        0  Ok
"RTN","RORX012A",35,0)
 ;        1  Skip this result
"RTN","RORX012A",36,0)
 ;        2  Skip this and all remaining results
"RTN","RORX012A",37,0)
 ;
"RTN","RORX012A",38,0)
LTSCB(ROR8DST,INVDT,RESULT) ;
"RTN","RORX012A",39,0)
 N DATE,IEN,NAME,RC,TMP,VAL
"RTN","RORX012A",40,0)
 S IEN=+RESULT(2)           Q:IEN'>0 1   ; IEN of the Lab test
"RTN","RORX012A",41,0)
 S NAME=$P(RESULT(2),U,2)   Q:NAME="" 1  ; Name of the test
"RTN","RORX012A",42,0)
 S DATE=+$P(RESULT(1),U,2)  Q:DATE'>0 1  ; Date of the test
"RTN","RORX012A",43,0)
 S ROR8DST("RORUTIL")=1
"RTN","RORX012A",44,0)
 ;--- Check the result range if necessary
"RTN","RORX012A",45,0)
 I $D(RORLTRV(IEN))>1  S RC=1  D  Q:RC RC
"RTN","RORX012A",46,0)
 . S VAL=$$CLRNMVAL^RORUTL18($P(RESULT(1),U,3))
"RTN","RORX012A",47,0)
 . ;--- Skip a non-numeric result
"RTN","RORX012A",48,0)
 . Q:'$$NUMERIC^RORUTL05(VAL)
"RTN","RORX012A",49,0)
 . ;--- Check the range
"RTN","RORX012A",50,0)
 . I $G(RORLTRV(IEN,"L"))'=""  Q:VAL<RORLTRV(IEN,"L")
"RTN","RORX012A",51,0)
 . I $G(RORLTRV(IEN,"H"))'=""  Q:VAL>RORLTRV(IEN,"H")
"RTN","RORX012A",52,0)
 . S RC=0
"RTN","RORX012A",53,0)
 ;--- Store the result
"RTN","RORX012A",54,0)
 S @ROR8DST@(DATE,NAME,IEN)=$P(RESULT(1),U,3)
"RTN","RORX012A",55,0)
 Q 0
"RTN","RORX012A",56,0)
 ;
"RTN","RORX012A",57,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX012A",58,0)
 ;
"RTN","RORX012A",59,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX012A",60,0)
 ; .NSPT         Number of selected patients is returned here
"RTN","RORX012A",61,0)
 ;
"RTN","RORX012A",62,0)
 ; Return Values:
"RTN","RORX012A",63,0)
 ;       <0  Error code
"RTN","RORX012A",64,0)
 ;        0  Ok
"RTN","RORX012A",65,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX012A",66,0)
 ;
"RTN","RORX012A",67,0)
QUERY(FLAGS,NSPT) ;
"RTN","RORX012A",68,0)
 N RORLDST       ; Descriptor for Lab search API
"RTN","RORX012A",69,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX012A",70,0)
 N RORXDST       ; Descriptor for pharmacy search API
"RTN","RORX012A",71,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX012A",72,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX012A",73,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX012A",74,0)
 ;
"RTN","RORX012A",75,0)
 N CNT,ECNT,IEN,IENS,LTEDT,LTSDT,PATIEN,RC,RXEDT,SKIP,SKIPEDT,SKIPSDT,TMP,UTEDT,UTIL,UTSDT,VA,VADM,XREFNODE
"RTN","RORX012A",76,0)
 N RCC,FLAG
"RTN","RORX012A",77,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX012A",78,0)
 S (CNT,ECNT,NSPT,RC)=0,(SKIPEDT,SKIPSDT)=0
"RTN","RORX012A",79,0)
 ;--- Utilization date range
"RTN","RORX012A",80,0)
 D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX012A",81,0)
 . S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX012A",82,0)
 . S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX012A",83,0)
 . ;--- Combined date range
"RTN","RORX012A",84,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,UTSDT)
"RTN","RORX012A",85,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,UTEDT)
"RTN","RORX012A",86,0)
 ;--- Number of patients in the registry
"RTN","RORX012A",87,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX012A",88,0)
 ;
"RTN","RORX012A",89,0)
 ;--- Setup the descriptors for callback API's
"RTN","RORX012A",90,0)
 I RORLAB  D
"RTN","RORX012A",91,0)
 . I RORLTST'="*",$D(@RORLTST)<10  S RORLAB=0  Q
"RTN","RORX012A",92,0)
 . S RORLDST("RORCB")="$$LTSCB^RORX012A"
"RTN","RORX012A",93,0)
 . ;--- Labs date range
"RTN","RORX012A",94,0)
 . S LTSDT=$$PARAM^RORTSK01("DATE_RANGE_2","START")\1
"RTN","RORX012A",95,0)
 . S LTEDT=$$PARAM^RORTSK01("DATE_RANGE_2","END")\1
"RTN","RORX012A",96,0)
 . ;--- Combined date range
"RTN","RORX012A",97,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,LTSDT)
"RTN","RORX012A",98,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,LTEDT)
"RTN","RORX012A",99,0)
 . ;--- Shift the Labs end date
"RTN","RORX012A",100,0)
 . S LTEDT=$$FMADD^XLFDT(LTEDT,1)
"RTN","RORX012A",101,0)
 I RORPHARM  D
"RTN","RORX012A",102,0)
 . I RORXL'="*",$D(@RORXL)<10  S RORPHARM=0  Q
"RTN","RORX012A",103,0)
 . S RORXDST("RORCB")="$$RXSCB^RORX012A"
"RTN","RORX012A",104,0)
 . S RORXDST("GENERIC")=$$PARAM^RORTSK01("DRUGS","AGGR_GENERIC")
"RTN","RORX012A",105,0)
 . ;--- Combined date range
"RTN","RORX012A",106,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,RORXSDT)
"RTN","RORX012A",107,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,RORXEDT)
"RTN","RORX012A",108,0)
 . ;--- Shift the Meds end date
"RTN","RORX012A",109,0)
 . S RXEDT=$$FMADD^XLFDT(RORXEDT\1,1)
"RTN","RORX012A",110,0)
 Q:'(RORLAB!RORPHARM) 0
"RTN","RORX012A",111,0)
 ;
"RTN","RORX012A",112,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX012A",113,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX012A",114,0)
 ;
"RTN","RORX012A",115,0)
 ;--- Browse through the registry records
"RTN","RORX012A",116,0)
 S IEN=0
"RTN","RORX012A",117,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX012A",118,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX012A",119,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX012A",120,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX012A",121,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX012A",122,0)
 . ;--- Get patient DFN
"RTN","RORX012A",123,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX012A",124,0)
 . ;check for patient list and quit if not on list
"RTN","RORX012A",125,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PATIEN)) Q
"RTN","RORX012A",126,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX012A",127,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX012A",128,0)
 . S SKIP=1,UTIL=0
"RTN","RORX012A",129,0)
 . ;--- Check if patient should be filtered because of ICD9 codes
"RTN","RORX012A",130,0)
 . S RCC=0
"RTN","RORX012A",131,0)
 . I FLAG'="ALL" D
"RTN","RORX012A",132,0)
 . . S RCC=$$ICD^RORXU010(PATIEN,RORREG)
"RTN","RORX012A",133,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX012A",134,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX012A",135,0)
 . ;
"RTN","RORX012A",136,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX012A",137,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX012A",138,0)
 . ;
"RTN","RORX012A",139,0)
 . D  I RC<0  S ECNT=ECNT+1,RC=0  Q
"RTN","RORX012A",140,0)
 . . ;--- Search for pharmacy data
"RTN","RORX012A",141,0)
 . . I RORPHARM  D  Q:RC'>0
"RTN","RORX012A",142,0)
 . . . M RORXDST("RORXGRP")=RORXGRP("C")
"RTN","RORX012A",143,0)
 . . . S RORXDST=$NA(^TMP("RORX012",$J,"PAT",PATIEN,"RX"))
"RTN","RORX012A",144,0)
 . . . K RORXDST("RORUTIL")
"RTN","RORX012A",145,0)
 . . . S RC=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,"EIOV",RORXSDT,RXEDT)
"RTN","RORX012A",146,0)
 . . . Q:RC<0
"RTN","RORX012A",147,0)
 . . . ;S:$G(RORXDST("RORUTIL")) UTIL=1
"RTN","RORX012A",148,0)
 . . . I RC>0  S:$D(RORXDST("RORXGRP"))>1 RC=0
"RTN","RORX012A",149,0)
 . . . ;--- Invert the result if the "Did Not" logic was selected
"RTN","RORX012A",150,0)
 . . . I RORPHARM<0  S RC='RC  K @RORXDST
"RTN","RORX012A",151,0)
 . . ;--- Search for Lab data
"RTN","RORX012A",152,0)
 . . I RORLAB  D  Q:RC'>0
"RTN","RORX012A",153,0)
 . . . S RORLDST=$NA(^TMP("RORX012",$J,"PAT",PATIEN,"LR"))
"RTN","RORX012A",154,0)
 . . . K RORLDST("RORUTIL")
"RTN","RORX012A",155,0)
 . . . S RC=$$LTSEARCH^RORUTL10(PATIEN,RORLTST,.RORLDST,,LTSDT,LTEDT)
"RTN","RORX012A",156,0)
 . . . Q:RC<0
"RTN","RORX012A",157,0)
 . . . ;S:$G(RORLDST("RORUTIL")) UTIL=1
"RTN","RORX012A",158,0)
 . . . ;--- Invert the result if the "Did Not" logic was selected
"RTN","RORX012A",159,0)
 . . . S:RORLAB<0 RC='RC
"RTN","RORX012A",160,0)
 . . ;---
"RTN","RORX012A",161,0)
 . . S SKIP=0
"RTN","RORX012A",162,0)
 . ;
"RTN","RORX012A",163,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX012A",164,0)
 . I 'SKIP  D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX012A",165,0)
 . . K TMP  S TMP("ALL")=1
"RTN","RORX012A",166,0)
 . . S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,PATIEN,.TMP)
"RTN","RORX012A",167,0)
 . . S:'UTIL SKIP=1
"RTN","RORX012A",168,0)
 . ;
"RTN","RORX012A",169,0)
 . ;--- Skip the patient if not all search criteria have been met
"RTN","RORX012A",170,0)
 . I SKIP  K ^TMP("RORX012",$J,"PAT",PATIEN)  Q
"RTN","RORX012A",171,0)
 . ;
"RTN","RORX012A",172,0)
 . ;--- Get and store the patient's data
"RTN","RORX012A",173,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX012A",174,0)
 . S TMP=$$DATE^RORXU002(VADM(6)\1)
"RTN","RORX012A",175,0)
 . S ^TMP("RORX012",$J,"PAT",PATIEN)=VA("BID")_U_VADM(1)_U_TMP
"RTN","RORX012A",176,0)
 . S NSPT=NSPT+1
"RTN","RORX012A",177,0)
 ;
"RTN","RORX012A",178,0)
 ;---
"RTN","RORX012A",179,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX012A",180,0)
 ;
"RTN","RORX012A",181,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX012A",182,0)
RXSCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX012A",183,0)
 N GRP,IEN,NAME,TMP
"RTN","RORX012A",184,0)
 S ROR8DST("RORUTIL")=1
"RTN","RORX012A",185,0)
 ;=== Check the drug groups
"RTN","RORX012A",186,0)
 S TMP=$$RXGRPCHK^RORXU007(.ROR8DST,+DRUG,RORXL)
"RTN","RORX012A",187,0)
 Q:TMP TMP
"RTN","RORX012A",188,0)
 ;--- Get the drug data
"RTN","RORX012A",189,0)
 I ROR8DST("GENERIC")  D
"RTN","RORX012A",190,0)
 . S IEN=+ROR8DST("RORXGEN"),NAME=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX012A",191,0)
 E  S IEN=+DRUG,NAME=$P(DRUG,U,2)
"RTN","RORX012A",192,0)
 Q:(IEN'>0)!(NAME="") 1
"RTN","RORX012A",193,0)
 ;--- Output the data
"RTN","RORX012A",194,0)
 S @ROR8DST@(NAME,IEN)=""
"RTN","RORX012A",195,0)
 Q 0
"RTN","RORX012A",196,0)
 ;
"RTN","RORX012A",197,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX012A",198,0)
 ;
"RTN","RORX012A",199,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX012A",200,0)
 ; NSPT          Number of selected patients
"RTN","RORX012A",201,0)
 ;
"RTN","RORX012A",202,0)
 ; Return Values:
"RTN","RORX012A",203,0)
 ;       <0  Error code
"RTN","RORX012A",204,0)
 ;        0  Ok
"RTN","RORX012A",205,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX012A",206,0)
 ;
"RTN","RORX012A",207,0)
STORE(REPORT,NSPT) ;
"RTN","RORX012A",208,0)
 N CNT,DATE,DFN,DOD,ECNT,IEN,ITEM,LAST4,LTLST,NAME,NODE,PTCNT,PTLST,PTNAME,RC,RXLST,TMP,VAL
"RTN","RORX012A",209,0)
 S (ECNT,RC)=0,(LTLST,PTLST,RXLST)=-1
"RTN","RORX012A",210,0)
 ;--- Force the "patient data" note in the output
"RTN","RORX012A",211,0)
 D ADDVAL^RORTSK11(RORTSK,"PATIENT",,REPORT)
"RTN","RORX012A",212,0)
 ;--- Create lab test list
"RTN","RORX012A",213,0)
 I RORLAB  D  Q:LTLST<0 LTLST
"RTN","RORX012A",214,0)
 . S LTLST=$$ADDVAL^RORTSK11(RORTSK,"LABTESTS",,REPORT)
"RTN","RORX012A",215,0)
 . D ADDATTR^RORTSK11(RORTSK,LTLST,"TABLE","LABTESTS")
"RTN","RORX012A",216,0)
 ;--- Create pharmacy list
"RTN","RORX012A",217,0)
 I RORPHARM>0  D  Q:RXLST<0 RXLST
"RTN","RORX012A",218,0)
 . S RXLST=$$ADDVAL^RORTSK11(RORTSK,"DRUGS",,REPORT)
"RTN","RORX012A",219,0)
 . D ADDATTR^RORTSK11(RORTSK,RXLST,"TABLE","DRUGS")
"RTN","RORX012A",220,0)
 ;--- Create patient list
"RTN","RORX012A",221,0)
 I (RORLAB<0)!(RORPHARM<0)  D  Q:PTLST<0 PTLST
"RTN","RORX012A",222,0)
 . S PTLST=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX012A",223,0)
 . D ADDATTR^RORTSK11(RORTSK,PTLST,"TABLE","PATIENTS")
"RTN","RORX012A",224,0)
 ;---
"RTN","RORX012A",225,0)
 S (CNT,DFN,PTCNT)=0
"RTN","RORX012A",226,0)
 F  S DFN=$O(^TMP("RORX012",$J,"PAT",DFN))  Q:DFN'>0  D  Q:RC<0
"RTN","RORX012A",227,0)
 . S TMP=$S(NSPT>0:CNT/NSPT,1:"")
"RTN","RORX012A",228,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX012A",229,0)
 . S CNT=CNT+1,NODE=$NA(^TMP("RORX012",$J,"PAT",DFN))
"RTN","RORX012A",230,0)
 . ;--- Patient's data
"RTN","RORX012A",231,0)
 . S TMP=$G(@NODE)
"RTN","RORX012A",232,0)
 . S LAST4=$P(TMP,U),PTNAME=$P(TMP,U,2),DOD=$P(TMP,U,3)
"RTN","RORX012A",233,0)
 . ;--- Patient list
"RTN","RORX012A",234,0)
 . S TMP=$S(LTLST<0:1,1:$D(@NODE@("LR"))<10)
"RTN","RORX012A",235,0)
 . I TMP,$S(RXLST<0:1,1:$D(@NODE@("RX"))<10)  D  Q
"RTN","RORX012A",236,0)
 . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTLST,,DFN)
"RTN","RORX012A",237,0)
 . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX012A",238,0)
 . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX012A",239,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DOD",DOD,ITEM,1)
"RTN","RORX012A",240,0)
 . . S PTCNT=PTCNT+1
"RTN","RORX012A",241,0)
 . ;--- List of Lab tests
"RTN","RORX012A",242,0)
 . S DATE=""
"RTN","RORX012A",243,0)
 . F  S DATE=$O(@NODE@("LR",DATE))  Q:DATE=""  D
"RTN","RORX012A",244,0)
 . . S NAME=""
"RTN","RORX012A",245,0)
 . . F  S NAME=$O(@NODE@("LR",DATE,NAME))  Q:NAME=""  D
"RTN","RORX012A",246,0)
 . . . S IEN=""
"RTN","RORX012A",247,0)
 . . . F  S IEN=$O(@NODE@("LR",DATE,NAME,IEN))  Q:IEN=""  D
"RTN","RORX012A",248,0)
 . . . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"LT",,LTLST,,DFN)
"RTN","RORX012A",249,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX012A",250,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX012A",251,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"DOD",DOD,ITEM,1)
"RTN","RORX012A",252,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"DATE",DATE\1,ITEM,1)
"RTN","RORX012A",253,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"LTNAME",NAME,ITEM,1)
"RTN","RORX012A",254,0)
 . . . . S VAL=$G(@NODE@("LR",DATE,NAME,IEN))
"RTN","RORX012A",255,0)
 . . . . S TMP=$S($$NUMERIC^RORUTL05(VAL):3,1:1)
"RTN","RORX012A",256,0)
 . . . . D ADDVAL^RORTSK11(RORTSK,"RESULT",VAL,ITEM,TMP)
"RTN","RORX012A",257,0)
 . ;--- List of drugs
"RTN","RORX012A",258,0)
 . S NAME=""
"RTN","RORX012A",259,0)
 . F  S NAME=$O(@NODE@("RX",NAME))  Q:NAME=""  D
"RTN","RORX012A",260,0)
 . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"DRUG",,RXLST,,DFN)
"RTN","RORX012A",261,0)
 . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX012A",262,0)
 . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX012A",263,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DOD",DOD,ITEM,1)
"RTN","RORX012A",264,0)
 . . D ADDVAL^RORTSK11(RORTSK,"RXNAME",NAME,ITEM,1)
"RTN","RORX012A",265,0)
 ;--- Inactivate the patient list tag if the list is empty
"RTN","RORX012A",266,0)
 D:PTCNT'>0 UPDVAL^RORTSK11(RORTSK,PTLST,,,1)
"RTN","RORX012A",267,0)
 ;---
"RTN","RORX012A",268,0)
 Q ECNT
"RTN","RORX013A")
0^19^B66335578^B66335578
"RTN","RORX013A",1,0)
RORX013A ;HCIOFO/SG - DIAGNOSIS CODES (QUERY & SORT) ;6/21/06 2:24pm
"RTN","RORX013A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,13**;Feb 17, 2006;Build 27
"RTN","RORX013A",3,0)
 ;
"RTN","RORX013A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX013A",5,0)
 ;
"RTN","RORX013A",6,0)
 ; #928          ACTIVE^GMPLUTL (controlled)
"RTN","RORX013A",7,0)
 ; #1554         POV^PXAPIIB (controlled)
"RTN","RORX013A",8,0)
 ; #1905         SELECTED^VSIT (controlled)
"RTN","RORX013A",9,0)
 ; #2977         GETFLDS^GMPLEDT3 (controlled)
"RTN","RORX013A",10,0)
 ; #3157         RPC^DGPTFAPI (supported)
"RTN","RORX013A",11,0)
 ; #3545         Access to the "AAD" cross-reference and the field 80 (private)
"RTN","RORX013A",12,0)
 ; #92           ^DGPT(IEN,0)  (controlled)
"RTN","RORX013A",13,0)
 ; #3990         $$CODEN^ICDCODE and $$ICDDX^ICDCODE (supported)
"RTN","RORX013A",14,0)
 ;
"RTN","RORX013A",15,0)
 ;******************************************************************************
"RTN","RORX013A",16,0)
 ;******************************************************************************
"RTN","RORX013A",17,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX013A",18,0)
 ;        
"RTN","RORX013A",19,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX013A",20,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX013A",21,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX013A",22,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX013A",23,0)
 ;                                      
"RTN","RORX013A",24,0)
 ;******************************************************************************
"RTN","RORX013A",25,0)
 ;******************************************************************************
"RTN","RORX013A",26,0)
 Q
"RTN","RORX013A",27,0)
 ;
"RTN","RORX013A",28,0)
 ;**** STORES THE ICD-9 CODE
"RTN","RORX013A",29,0)
 ;
"RTN","RORX013A",30,0)
 ; PATIEN        Patient IEN (DFN)
"RTN","RORX013A",31,0)
 ; SOURCE        ICD-9 source code ("I", "O", "PB")
"RTN","RORX013A",32,0)
 ; [ICD9IEN]     IEN of the ICD-9 descriptor in file #80
"RTN","RORX013A",33,0)
 ; DATE          Date when the code was entered
"RTN","RORX013A",34,0)
 ; [ICD9]        ICD-9 code
"RTN","RORX013A",35,0)
 ;
"RTN","RORX013A",36,0)
 ; Either the ICD9IEN or the ICD9 parameter must be provided.
"RTN","RORX013A",37,0)
 ;
"RTN","RORX013A",38,0)
ICD9SET(PATIEN,SOURCE,ICD9IEN,DATE,ICD9) ;
"RTN","RORX013A",39,0)
 Q:DATE'>0
"RTN","RORX013A",40,0)
 N TMP
"RTN","RORX013A",41,0)
 S ICD9IEN=+$G(ICD9IEN)
"RTN","RORX013A",42,0)
 I ICD9IEN'>0  Q:$G(ICD9)=""  D  Q:ICD9IEN'>0
"RTN","RORX013A",43,0)
 . S ICD9IEN=+$$CODEN^ICDCODE(ICD9,80)
"RTN","RORX013A",44,0)
 ;---
"RTN","RORX013A",45,0)
 Q:$$ICDGRCHK^RORXU008(.RORPTGRP,ICD9IEN,RORICDL)
"RTN","RORX013A",46,0)
 ;---
"RTN","RORX013A",47,0)
 S TMP=+$G(@RORTMP@("PAT",PATIEN,ICD9IEN))
"RTN","RORX013A",48,0)
 S:'TMP!(DATE<TMP) @RORTMP@("PAT",PATIEN,ICD9IEN)=DATE_U_SOURCE
"RTN","RORX013A",49,0)
 S ^(SOURCE)=$G(@RORTMP@("PAT",PATIEN,ICD9IEN,SOURCE))+1 ;naked reference: ^TMP($J,"RORTMP-n") from RORX013
"RTN","RORX013A",50,0)
 Q
"RTN","RORX013A",51,0)
 ;
"RTN","RORX013A",52,0)
 ;***** SEARCHES FOR INPATIENT DIAGNOSES
"RTN","RORX013A",53,0)
 ;
"RTN","RORX013A",54,0)
 ; PATIEN        Patient IEN (DFN)
"RTN","RORX013A",55,0)
 ;
"RTN","RORX013A",56,0)
 ; Return Values:
"RTN","RORX013A",57,0)
 ;       <0  Error code
"RTN","RORX013A",58,0)
 ;        0  Ok
"RTN","RORX013A",59,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX013A",60,0)
 ;
"RTN","RORX013A",61,0)
INPAT(PATIEN) ;
"RTN","RORX013A",62,0)
 N ADMDT,DISDT,I,IEN,NODE,RC,RORBUF,RORMSG,TMP
"RTN","RORX013A",63,0)
 S NODE=$NA(^DGPT("AAD",+PATIEN))
"RTN","RORX013A",64,0)
 S RC=0
"RTN","RORX013A",65,0)
 ;--- Browse through the admissions
"RTN","RORX013A",66,0)
 S ADMDT=ROREDT1
"RTN","RORX013A",67,0)
 F  S ADMDT=$O(@NODE@(ADMDT),-1)  Q:ADMDT'>0  D  Q:RC
"RTN","RORX013A",68,0)
 . S IEN=""
"RTN","RORX013A",69,0)
 . F  S IEN=$O(@NODE@(ADMDT,IEN),-1)  Q:IEN'>0  D  Q:RC
"RTN","RORX013A",70,0)
 . . Q:+$G(^DGPT(IEN,0))'=PATIEN
"RTN","RORX013A",71,0)
 . . Q:$$PTF^RORXU001(IEN,"FP",,.DISDT)
"RTN","RORX013A",72,0)
 . . ;--- Skip invalid and/or incomplete admissions
"RTN","RORX013A",73,0)
 . . I DISDT'>0  D  Q:TMP!(DISDT'>0)
"RTN","RORX013A",74,0)
 . . . S TMP=$$CHKADM^RORXU001(PATIEN,ADMDT,.DISDT)
"RTN","RORX013A",75,0)
 . . ;--- Check if any appropriate admissions are left
"RTN","RORX013A",76,0)
 . . I DISDT<RORSDT  S RC=1  Q
"RTN","RORX013A",77,0)
 . . Q:DISDT'<ROREDT1
"RTN","RORX013A",78,0)
 . . ;--- Load and process the admission data
"RTN","RORX013A",79,0)
 . . K RORBUF  D RPC^DGPTFAPI(.RORBUF,IEN)
"RTN","RORX013A",80,0)
 . . I $G(RORBUF(0))<0  D  Q
"RTN","RORX013A",81,0)
 . . . D ERROR^RORERR(-57,,,,RORBUF(0),"RPC^DGPTFAPI")
"RTN","RORX013A",82,0)
 . . S TMP=$P($G(RORBUF(1)),U,3)
"RTN","RORX013A",83,0)
 . . D:TMP'="" ICD9SET(PATIEN,"I",,DISDT,TMP)  ; ICD1
"RTN","RORX013A",84,0)
 . . D:$G(RORBUF(2))'=""                       ; ICD2 - ICD10
"RTN","RORX013A",85,0)
 . . . F I=1:1:9  S TMP=$P(RORBUF(2),U,I)  D:TMP'=""
"RTN","RORX013A",86,0)
 . . . . D ICD9SET(PATIEN,"I",,DISDT,TMP)
"RTN","RORX013A",87,0)
 . . S TMP=+$$GET1^DIQ(45,IEN,80,"I",,"RORMSG")
"RTN","RORX013A",88,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,45,IEN)
"RTN","RORX013A",89,0)
 . . D:TMP>0 ICD9SET(PATIEN,"I",TMP,DISDT)     ; PRINCIPAL DIAGNOSIS
"RTN","RORX013A",90,0)
 ;---
"RTN","RORX013A",91,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX013A",92,0)
 ;
"RTN","RORX013A",93,0)
 ;***** SEARCHES FOR OUTPATIENT DIAGNOSES
"RTN","RORX013A",94,0)
 ;
"RTN","RORX013A",95,0)
 ; PATIEN        Patient IEN (DFN)
"RTN","RORX013A",96,0)
 ;
"RTN","RORX013A",97,0)
 ; Return Values:
"RTN","RORX013A",98,0)
 ;       <0  Error code
"RTN","RORX013A",99,0)
 ;        0  Ok
"RTN","RORX013A",100,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX013A",101,0)
 ;
"RTN","RORX013A",102,0)
OUTPAT(PATIEN) ;
"RTN","RORX013A",103,0)
 N DATE,ICDIEN,RC,RORMSG,RORVPLST,TMP,VPIEN,VSIEN,VSIT
"RTN","RORX013A",104,0)
 D SELECTED^VSIT(PATIEN,RORSDT,ROREDT)
"RTN","RORX013A",105,0)
 ;--- Browse through the visits
"RTN","RORX013A",106,0)
 S (VSIEN,RC)=0
"RTN","RORX013A",107,0)
 F  S VSIEN=$O(^TMP("VSIT",$J,VSIEN))  Q:VSIEN=""  D  Q:RC<0
"RTN","RORX013A",108,0)
 . S TMP=+$O(^TMP("VSIT",$J,VSIEN,""))  Q:TMP'>0
"RTN","RORX013A",109,0)
 . S DATE=$P($G(^TMP("VSIT",$J,VSIEN,TMP)),U)  Q:DATE'>0
"RTN","RORX013A",110,0)
 . ;--- Get a list of V POV records
"RTN","RORX013A",111,0)
 . D POV^PXAPIIB(VSIEN,.RORVPLST)
"RTN","RORX013A",112,0)
 . ;--- Process the records
"RTN","RORX013A",113,0)
 . S (VPIEN,RC)=0
"RTN","RORX013A",114,0)
 . F  S VPIEN=$O(RORVPLST(VPIEN))  Q:VPIEN'>0  D  Q:RC
"RTN","RORX013A",115,0)
 . . S ICDIEN=+$P(RORVPLST(VPIEN),U)
"RTN","RORX013A",116,0)
 . . D:ICDIEN>0 ICD9SET(PATIEN,"O",ICDIEN,DATE)
"RTN","RORX013A",117,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORX013A",118,0)
 ;
"RTN","RORX013A",119,0)
 ;***** SEARCHES FOR PROBLEMS
"RTN","RORX013A",120,0)
 ;
"RTN","RORX013A",121,0)
 ; PATIEN        Patient IEN (DFN)
"RTN","RORX013A",122,0)
 ;
"RTN","RORX013A",123,0)
 ; Return Values:
"RTN","RORX013A",124,0)
 ;       <0  Error code
"RTN","RORX013A",125,0)
 ;        0  Ok
"RTN","RORX013A",126,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX013A",127,0)
 ;
"RTN","RORX013A",128,0)
PROBLEM(PATIEN) ;
"RTN","RORX013A",129,0)
 N DATE,GMPFLD,GMPORIG,GMPROV,GMVAMC,ICDIEN,IEN,RC,RORPLST,TMP
"RTN","RORX013A",130,0)
 ;--- Load a list of active problems
"RTN","RORX013A",131,0)
 D ACTIVE^GMPLUTL(PATIEN,.RORPLST)
"RTN","RORX013A",132,0)
 ;--- Browse through the problems
"RTN","RORX013A",133,0)
 S (GMPVAMC,GMPROV)=0
"RTN","RORX013A",134,0)
 S (IS,RC)=0
"RTN","RORX013A",135,0)
 F  S IS=$O(RORPLST(IS))  Q:IS=""  D  Q:RC
"RTN","RORX013A",136,0)
 . S IEN=+$G(RORPLST(IS,0))  Q:IEN'>0
"RTN","RORX013A",137,0)
 . K GMPFLD,GMPORIG  D GETFLDS^GMPLEDT3(IEN)
"RTN","RORX013A",138,0)
 . S ICDIEN=+$G(GMPFLD(.01))  Q:ICDIEN'>0
"RTN","RORX013A",139,0)
 . S DATE=$P($G(GMPFLD(.08)),U)
"RTN","RORX013A",140,0)
 . D:(DATE'<RORSDT)&(DATE<ROREDT1) ICD9SET(PATIEN,"PB",ICDIEN,DATE)
"RTN","RORX013A",141,0)
 Q 0
"RTN","RORX013A",142,0)
 ;
"RTN","RORX013A",143,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX013A",144,0)
 ;
"RTN","RORX013A",145,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX013A",146,0)
 ;
"RTN","RORX013A",147,0)
 ; Return Values:
"RTN","RORX013A",148,0)
 ;       <0  Error code
"RTN","RORX013A",149,0)
 ;        0  Ok
"RTN","RORX013A",150,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX013A",151,0)
 ;
"RTN","RORX013A",152,0)
QUERY(FLAGS) ;
"RTN","RORX013A",153,0)
 N RORDOD        ; Date of death
"RTN","RORX013A",154,0)
 N ROREDT1       ; Day after the end date
"RTN","RORX013A",155,0)
 N RORLAST4      ; Last 4 digits of the current patient's SSN
"RTN","RORX013A",156,0)
 N RORPNAME      ; Name of the current patient
"RTN","RORX013A",157,0)
 N RORPTGRP      ; Temporary list of ICD-9 groups
"RTN","RORX013A",158,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX013A",159,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX013A",160,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX013A",161,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX013A",162,0)
 ;
"RTN","RORX013A",163,0)
 N CNT,ECNT,IEN,IENS,PATIEN,RC,TMP,VA,VADM,XREFNODE
"RTN","RORX013A",164,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX013A",165,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX013A",166,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT\1,1)
"RTN","RORX013A",167,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX013A",168,0)
 ;
"RTN","RORX013A",169,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX013A",170,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT)
"RTN","RORX013A",171,0)
 ;
"RTN","RORX013A",172,0)
 ;--- Browse through the registry records
"RTN","RORX013A",173,0)
 S IEN=0
"RTN","RORX013A",174,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX013A",175,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX013A",176,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX013A",177,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX013A",178,0)
 . ;--- Get patient DFN
"RTN","RORX013A",179,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX013A",180,0)
 . ;check for patient list and quit if not on list
"RTN","RORX013A",181,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PATIEN)) Q
"RTN","RORX013A",182,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX013A",183,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX013A",184,0)
 . ;
"RTN","RORX013A",185,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX013A",186,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX013A",187,0)
 . ;
"RTN","RORX013A",188,0)
 . M RORPTGRP=RORIGRP("C")
"RTN","RORX013A",189,0)
 . ;
"RTN","RORX013A",190,0)
 . ;--- Inpatient codes
"RTN","RORX013A",191,0)
 . S RC=$$INPAT(PATIEN)
"RTN","RORX013A",192,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX013A",193,0)
 . ;
"RTN","RORX013A",194,0)
 . ;--- Outpatient codes
"RTN","RORX013A",195,0)
 . S RC=$$OUTPAT(PATIEN)
"RTN","RORX013A",196,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX013A",197,0)
 . ;
"RTN","RORX013A",198,0)
 . ;--- Problem list
"RTN","RORX013A",199,0)
 . S RC=$$PROBLEM(PATIEN)
"RTN","RORX013A",200,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX013A",201,0)
 . ;
"RTN","RORX013A",202,0)
 . ;--- Skip the patient if no data has been found
"RTN","RORX013A",203,0)
 . Q:$D(@RORTMP@("PAT",PATIEN))<10
"RTN","RORX013A",204,0)
 . ;--- No ICD-9 from some groups
"RTN","RORX013A",205,0)
 . I $D(RORPTGRP)>1  K @RORTMP@("PAT",PATIEN)  Q
"RTN","RORX013A",206,0)
 . ;
"RTN","RORX013A",207,0)
 . ;--- Get the patient's data
"RTN","RORX013A",208,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX013A",209,0)
 . S RORPNAME=VADM(1),RORDOD=$P(VADM(6),U),RORLAST4=VA("BID")
"RTN","RORX013A",210,0)
 . ;
"RTN","RORX013A",211,0)
 . ;--- Calculate the patient's totals
"RTN","RORX013A",212,0)
 . S RC=$$TOTALS(PATIEN)
"RTN","RORX013A",213,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX013A",214,0)
 ;---
"RTN","RORX013A",215,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX013A",216,0)
 ;
"RTN","RORX013A",217,0)
 ;***** SORTS THE RESULTS AND COMPILES THE TOTALS
"RTN","RORX013A",218,0)
 ;
"RTN","RORX013A",219,0)
 ; Return Values:
"RTN","RORX013A",220,0)
 ;       <0  Error code
"RTN","RORX013A",221,0)
 ;        0  Ok
"RTN","RORX013A",222,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX013A",223,0)
 ;
"RTN","RORX013A",224,0)
SORT() ;
"RTN","RORX013A",225,0)
 N ICDIEN,TMP,TNC,TNDC
"RTN","RORX013A",226,0)
 ;---
"RTN","RORX013A",227,0)
 S ICDIEN=0,(TNC,TNDC)=0
"RTN","RORX013A",228,0)
 F  S ICDIEN=$O(@RORTMP@("ICD",ICDIEN))  Q:ICDIEN'>0  D
"RTN","RORX013A",229,0)
 . S TNC=TNC+$G(@RORTMP@("ICD",ICDIEN,"C"))
"RTN","RORX013A",230,0)
 . S TNDC=TNDC+1
"RTN","RORX013A",231,0)
 S @RORTMP@("ICD")=TNC_U_TNDC
"RTN","RORX013A",232,0)
 ;---
"RTN","RORX013A",233,0)
 Q 0
"RTN","RORX013A",234,0)
 ;
"RTN","RORX013A",235,0)
 ;***** CALCULATES INTERMEDIATE TOTALS
"RTN","RORX013A",236,0)
 ;
"RTN","RORX013A",237,0)
 ; PATIEN        Patient IEN (DFN)
"RTN","RORX013A",238,0)
 ;
"RTN","RORX013A",239,0)
 ; Return Values:
"RTN","RORX013A",240,0)
 ;       <0  Error code
"RTN","RORX013A",241,0)
 ;        0  Ok
"RTN","RORX013A",242,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX013A",243,0)
 ;
"RTN","RORX013A",244,0)
TOTALS(PATIEN) ;
"RTN","RORX013A",245,0)
 N CNT,ICD9,ICDIEN,PNODE,RC,TMP
"RTN","RORX013A",246,0)
 S PNODE=$NA(@RORTMP@("PAT",PATIEN))
"RTN","RORX013A",247,0)
 S @PNODE=RORLAST4_U_RORPNAME_U_RORDOD
"RTN","RORX013A",248,0)
 S ^("PAT")=$G(@RORTMP@("PAT"))+1 ;naked reference: ^TMP($J,"RORTMP-n") from RORX013
"RTN","RORX013A",249,0)
 ;
"RTN","RORX013A",250,0)
 S ICDIEN=0
"RTN","RORX013A",251,0)
 F  S ICDIEN=$O(@PNODE@(ICDIEN))  Q:ICDIEN'>0  D
"RTN","RORX013A",252,0)
 . S ICD9=$P($G(@RORTMP@("ICD",ICDIEN)),U)
"RTN","RORX013A",253,0)
 . I ICD9=""  D
"RTN","RORX013A",254,0)
 . . S TMP=$$ICDDX^ICDCODE(ICDIEN)
"RTN","RORX013A",255,0)
 . . I TMP'<0  S ICD9=$P(TMP,U,2),TMP=$P(TMP,U,4)
"RTN","RORX013A",256,0)
 . . E  S TMP=""
"RTN","RORX013A",257,0)
 . . S:ICD9="" ICD9="UNKN"
"RTN","RORX013A",258,0)
 . . S:TMP="" TMP="Unknown ("_ICDIEN_")"
"RTN","RORX013A",259,0)
 . . S @RORTMP@("ICD",ICDIEN)=ICD9_U_TMP
"RTN","RORX013A",260,0)
 . ;---
"RTN","RORX013A",261,0)
 . S CNT=0
"RTN","RORX013A",262,0)
 . F TMP="I","O","PB"  S CNT=CNT+$G(@PNODE@(ICDIEN,TMP))
"RTN","RORX013A",263,0)
 . S @PNODE@(ICDIEN,"C")=CNT
"RTN","RORX013A",264,0)
 . S ^("C")=$G(@RORTMP@("ICD",ICDIEN,"C"))+CNT ;naked reference: ^TMP($J,"RORTMP-n") from RORX013
"RTN","RORX013A",265,0)
 . S ^("P")=$G(@RORTMP@("ICD",ICDIEN,"P"))+1 ;naked reference: ^TMP($J,"RORTMP-n") from RORX013
"RTN","RORX013A",266,0)
 Q 0
"RTN","RORX014A")
0^20^B41146323^B41146323
"RTN","RORX014A",1,0)
RORX014A ;HOIFO/BH,SG,VAC - REGISTRY MEDS REPORT (QUERY & SORT) ;4/7/09 2:09pm
"RTN","RORX014A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,13**;Feb 17, 2006;Build 27
"RTN","RORX014A",3,0)
 ;
"RTN","RORX014A",4,0)
 ;******************************************************************************
"RTN","RORX014A",5,0)
 ;******************************************************************************
"RTN","RORX014A",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX014A",7,0)
 ;        
"RTN","RORX014A",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX014A",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX014A",10,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX014A",11,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX014A",12,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX014A",13,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX014A",14,0)
 ;                                      
"RTN","RORX014A",15,0)
 ;******************************************************************************
"RTN","RORX014A",16,0)
 ;******************************************************************************
"RTN","RORX014A",17,0)
 Q
"RTN","RORX014A",18,0)
 ;
"RTN","RORX014A",19,0)
 ;***** ADDS THE DRUG COMBINATION TO THE REPORT
"RTN","RORX014A",20,0)
 ;
"RTN","RORX014A",21,0)
 ; RXLST         List of drug IEN's separated by commas
"RTN","RORX014A",22,0)
 ; PATIEN        Patient IEN in file #2 (DFN)
"RTN","RORX014A",23,0)
 ;
"RTN","RORX014A",24,0)
ADD(RXLST,PATIEN) ;
"RTN","RORX014A",25,0)
 N RXCIEN,RXCNDX,TMP,VA,VADM,VAERR
"RTN","RORX014A",26,0)
 S RXCNDX=$E(RXLST,1,100)
"RTN","RORX014A",27,0)
 ;--- Search for the combination
"RTN","RORX014A",28,0)
 S RXCIEN=""
"RTN","RORX014A",29,0)
 F  D  Q:RXCIEN=""  Q:^TMP("RORX014",$J,"RXC",RXCIEN,1)=RXLST
"RTN","RORX014A",30,0)
 . S RXCIEN=$O(^TMP("RORX014",$J,"RXC","B",RXCNDX,RXCIEN))
"RTN","RORX014A",31,0)
 ;--- Add new combination
"RTN","RORX014A",32,0)
 D:RXCIEN'>0
"RTN","RORX014A",33,0)
 . S RXCIEN=$O(^TMP("RORX014",$J,"RXC"," "),-1)+1
"RTN","RORX014A",34,0)
 . S ^TMP("RORX014",$J,"RXC",RXCIEN,1)=RXLST
"RTN","RORX014A",35,0)
 . S ^TMP("RORX014",$J,"RXC","B",RXCNDX,RXCIEN)=""
"RTN","RORX014A",36,0)
 ;--- Add new patient
"RTN","RORX014A",37,0)
 S ^("P")=$G(^TMP("RORX014",$J,"RXC",RXCIEN,"P"))+1 ;naked reference: ^TMP("RORX014",$J,"RXC",RXCIEN,"P")
"RTN","RORX014A",38,0)
 D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX014A",39,0)
 S TMP=VA("BID")_U_VADM(1)_U_$$DATE^RORXU002(VADM(6)\1)
"RTN","RORX014A",40,0)
 S ^TMP("RORX014",$J,"RXC",RXCIEN,"P",PATIEN)=TMP
"RTN","RORX014A",41,0)
 Q
"RTN","RORX014A",42,0)
 ;
"RTN","RORX014A",43,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX014A",44,0)
 ;
"RTN","RORX014A",45,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX014A",46,0)
 ;
"RTN","RORX014A",47,0)
 ; Return Values:
"RTN","RORX014A",48,0)
 ;       <0  Error code
"RTN","RORX014A",49,0)
 ;        0  Ok
"RTN","RORX014A",50,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX014A",51,0)
 ;
"RTN","RORX014A",52,0)
QUERY(FLAGS) ;
"RTN","RORX014A",53,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX014A",54,0)
 N RORXDST       ; Descriptor for pharmacy search API
"RTN","RORX014A",55,0)
 ;
"RTN","RORX014A",56,0)
 N CNT,DRGIEN,ECNT,NAME,PATIEN,RC,RORIEN,RXFLAGS,STR,TMP,XREFNODE
"RTN","RORX014A",57,0)
 N RCC,FLAG
"RTN","RORX014A",58,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX014A",59,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX014A",60,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX014A",61,0)
 ;
"RTN","RORX014A",62,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX014A",63,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX014A",64,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX014A",65,0)
 ;
"RTN","RORX014A",66,0)
 ;--- Prepare parameters for the pharmacy search API
"RTN","RORX014A",67,0)
 S RORXDST=$NA(RORXDST("RORX014"))
"RTN","RORX014A",68,0)
 S RORXDST("RORCB")="$$RXSCB^RORX014A"
"RTN","RORX014A",69,0)
 S RORXDST("GENERIC")=$$PARAM^RORTSK01("DRUGS","AGGR_GENERIC")
"RTN","RORX014A",70,0)
 S RXFLAGS="E"
"RTN","RORX014A",71,0)
 S:$$PARAM^RORTSK01("PATIENTS","INPATIENT") RXFLAGS=RXFLAGS_"IV"
"RTN","RORX014A",72,0)
 S:$$PARAM^RORTSK01("PATIENTS","OUTPATIENT") RXFLAGS=RXFLAGS_"O"
"RTN","RORX014A",73,0)
 Q:RXFLAGS="E" 0
"RTN","RORX014A",74,0)
 ;
"RTN","RORX014A",75,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX014A",76,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT)
"RTN","RORX014A",77,0)
 ;
"RTN","RORX014A",78,0)
 ;--- Browse through the registry records
"RTN","RORX014A",79,0)
 S RORIEN=0
"RTN","RORX014A",80,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX014A",81,0)
 F  S RORIEN=$O(@XREFNODE@(RORIEN))  Q:RORIEN'>0  D  Q:RC<0
"RTN","RORX014A",82,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX014A",83,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX014A",84,0)
 . S CNT=CNT+1
"RTN","RORX014A",85,0)
 . ;--- Get patient DFN
"RTN","RORX014A",86,0)
 . S PATIEN=$$PTIEN^RORUTL01(RORIEN)  Q:PATIEN'>0
"RTN","RORX014A",87,0)
 . ;check for patient list and quit if not on list
"RTN","RORX014A",88,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PATIEN)) Q
"RTN","RORX014A",89,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX014A",90,0)
 . Q:$$SKIP^RORXU005(RORIEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX014A",91,0)
 . ;--- Check the patient against the ICD9 Filter
"RTN","RORX014A",92,0)
 . S RCC=0
"RTN","RORX014A",93,0)
 . I FLAG'="ALL" D
"RTN","RORX014A",94,0)
 . . S RCC=$$ICD^RORXU010(PATIEN,RORREG)
"RTN","RORX014A",95,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX014A",96,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX014A",97,0)
 . ;--- End of ICD9 check
"RTN","RORX014A",98,0)
 . ;
"RTN","RORX014A",99,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX014A",100,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX014A",101,0)
 . ;
"RTN","RORX014A",102,0)
 . ;--- Search for pharmacy data
"RTN","RORX014A",103,0)
 . S TMP=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,RXFLAGS,RORSDT,ROREDT1)
"RTN","RORX014A",104,0)
 . I TMP'>0  S:TMP<0 ECNT=ECNT+1  Q:$D(@RORXDST)<10
"RTN","RORX014A",105,0)
 . ;
"RTN","RORX014A",106,0)
 . S (NAME,STR)=""
"RTN","RORX014A",107,0)
 . F  S NAME=$O(@RORXDST@(NAME))  Q:NAME=""  D
"RTN","RORX014A",108,0)
 . . S DRGIEN=0
"RTN","RORX014A",109,0)
 . . F  S DRGIEN=$O(@RORXDST@(NAME,DRGIEN))  Q:DRGIEN'>0  D
"RTN","RORX014A",110,0)
 . . . S ^TMP("RORX014",$J,"DRG",DRGIEN)=NAME
"RTN","RORX014A",111,0)
 . . . S STR=STR_","_DRGIEN
"RTN","RORX014A",112,0)
 . K @RORXDST
"RTN","RORX014A",113,0)
 . ;
"RTN","RORX014A",114,0)
 . D ADD($P(STR,",",2,999),PATIEN)
"RTN","RORX014A",115,0)
 ;
"RTN","RORX014A",116,0)
 ;---
"RTN","RORX014A",117,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX014A",118,0)
 ;
"RTN","RORX014A",119,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX014A",120,0)
RXSCB(RORDST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX014A",121,0)
 N IEN,NAME
"RTN","RORX014A",122,0)
 I ROR8DST("GENERIC")  D
"RTN","RORX014A",123,0)
 . S IEN=+ROR8DST("RORXGEN"),NAME=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX014A",124,0)
 E  S IEN=+DRUG,NAME=$P(DRUG,U,2)
"RTN","RORX014A",125,0)
 Q:(IEN'>0)!(NAME="") 1
"RTN","RORX014A",126,0)
 S @RORDST@(NAME,IEN)=""
"RTN","RORX014A",127,0)
 Q 0
"RTN","RORX014A",128,0)
 ;
"RTN","RORX014A",129,0)
 ;***** SORTS THE RESULTS AND COMPILES THE TOTALS
"RTN","RORX014A",130,0)
 ;
"RTN","RORX014A",131,0)
 ; NRXC          Number of drug combinations
"RTN","RORX014A",132,0)
 ;
"RTN","RORX014A",133,0)
 ; Return Values:
"RTN","RORX014A",134,0)
 ;       <0  Error code
"RTN","RORX014A",135,0)
 ;        0  Ok
"RTN","RORX014A",136,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX014A",137,0)
 ;
"RTN","RORX014A",138,0)
SORT(NRXC) ;
"RTN","RORX014A",139,0)
 N IEN,TMP
"RTN","RORX014A",140,0)
 S (IEN,NRXC)=0
"RTN","RORX014A",141,0)
 F  S IEN=$O(^TMP("RORX014",$J,"RXC",IEN))  Q:IEN'>0  D
"RTN","RORX014A",142,0)
 . S TMP=^TMP("RORX014",$J,"RXC",IEN,"P")
"RTN","RORX014A",143,0)
 . S ^TMP("RORX014",$J,"RXC","P",TMP,IEN)="",NRXC=NRXC+1
"RTN","RORX014A",144,0)
 Q 0
"RTN","RORX014A",145,0)
 ;
"RTN","RORX014A",146,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX014A",147,0)
 ;
"RTN","RORX014A",148,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX014A",149,0)
 ; NRXC          Number of drug combinations
"RTN","RORX014A",150,0)
 ;
"RTN","RORX014A",151,0)
 ; Return Values:
"RTN","RORX014A",152,0)
 ;       <0  Error code
"RTN","RORX014A",153,0)
 ;        0  Ok
"RTN","RORX014A",154,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX014A",155,0)
 ;
"RTN","RORX014A",156,0)
STORE(REPORT,NRXC) ;
"RTN","RORX014A",157,0)
 N BUF,CNT,DRG,ITEM,NODE,PATIEN,RORI,RXCIEN,RXCNT,RXCOMB,SECTION,TABLE,VA,VADM,VAERR
"RTN","RORX014A",158,0)
 S NODE=$NA(^TMP("RORX014",$J))
"RTN","RORX014A",159,0)
 S SECTION=$$ADDVAL^RORTSK11(RORTSK,"RXCOMBLST",,REPORT)
"RTN","RORX014A",160,0)
 Q:SECTION<0 SECTION
"RTN","RORX014A",161,0)
 D ADDATTR^RORTSK11(RORTSK,SECTION,"TABLE","RXCOMBLST")
"RTN","RORX014A",162,0)
 ;---
"RTN","RORX014A",163,0)
 Q:NRXC'>0 0
"RTN","RORX014A",164,0)
 ;---
"RTN","RORX014A",165,0)
 S RXCNT="",CNT=0
"RTN","RORX014A",166,0)
 F  S RXCNT=$O(@NODE@("RXC","P",RXCNT),-1)  Q:RXCNT=""  D
"RTN","RORX014A",167,0)
 . S RC=$$LOOP^RORTSK01(CNT/NRXC),CNT=CNT+1  Q:RC<0
"RTN","RORX014A",168,0)
 . S RXCIEN=""
"RTN","RORX014A",169,0)
 . F  S RXCIEN=$O(@NODE@("RXC","P",RXCNT,RXCIEN),-1)  Q:RXCIEN=""  D
"RTN","RORX014A",170,0)
 . . S RXCOMB=$$ADDVAL^RORTSK11(RORTSK,"RXCOMB",,SECTION)
"RTN","RORX014A",171,0)
 . . ;--- List of drugs
"RTN","RORX014A",172,0)
 . . S TABLE=$$ADDVAL^RORTSK11(RORTSK,"DRUGS",,RXCOMB)
"RTN","RORX014A",173,0)
 . . S BUF=@NODE@("RXC",RXCIEN,1)
"RTN","RORX014A",174,0)
 . . F RORI=1:1  S DRG=$P(BUF,",",RORI)  Q:DRG=""  D
"RTN","RORX014A",175,0)
 . . . S DRG=$P(^TMP("RORX014",$J,"DRG",DRG),U)
"RTN","RORX014A",176,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"NAME",DRG,TABLE,1)
"RTN","RORX014A",177,0)
 . . ;--- Number of unique patients
"RTN","RORX014A",178,0)
 . . D ADDVAL^RORTSK11(RORTSK,"NP",RXCNT,RXCOMB,3)
"RTN","RORX014A",179,0)
 . . ;--- List of patients
"RTN","RORX014A",180,0)
 . . Q:'$$PARAM^RORTSK01("OPTIONS","COMPLETE")
"RTN","RORX014A",181,0)
 . . S TABLE=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,RXCOMB)
"RTN","RORX014A",182,0)
 . . D ADDATTR^RORTSK11(RORTSK,TABLE,"TABLE","PATIENTS")
"RTN","RORX014A",183,0)
 . . S PATIEN=""
"RTN","RORX014A",184,0)
 . . F  S PATIEN=$O(@NODE@("RXC",RXCIEN,"P",PATIEN))  Q:PATIEN=""  D
"RTN","RORX014A",185,0)
 . . . S BUF=@NODE@("RXC",RXCIEN,"P",PATIEN)
"RTN","RORX014A",186,0)
 . . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,TABLE,,PATIEN)
"RTN","RORX014A",187,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"NAME",$P(BUF,U,2),ITEM,1)
"RTN","RORX014A",188,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"LAST4",$P(BUF,U),ITEM,2)
"RTN","RORX014A",189,0)
 . . . D ADDVAL^RORTSK11(RORTSK,"DOD",$P(BUF,U,3),ITEM,1)
"RTN","RORX014A",190,0)
 Q 0
"RTN","RORX015A")
0^21^B92384089^B92384089
"RTN","RORX015A",1,0)
RORX015A ;HOIFO/SG,VAC - OUTPATIENT PROCEDURES (QUERY & SORT) ;4/7/09 2:10pm
"RTN","RORX015A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,8,13**;Feb 17, 2006;Build 27
"RTN","RORX015A",3,0)
 ;
"RTN","RORX015A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX015A",5,0)
 ;
"RTN","RORX015A",6,0)
 ; #1995         $$CODEN^ICPTCOD and $$CPT^ICPTCOD (supported)
"RTN","RORX015A",7,0)
 ; #2055         ROOT^DILFD
"RTN","RORX015A",8,0)
 ; #2056         GETS^DIQ
"RTN","RORX015A",9,0)
 ; #2546         GETCPT^SDOE
"RTN","RORX015A",10,0)
 ; #2548         Multiple APIs in SDQ routine (supported)
"RTN","RORX015A",11,0)
 ; #3990         $$CODEN^ICDCODE and $$ICDOP^ICDCODE (supported)
"RTN","RORX015A",12,0)
 ; #10103        FMADD^XLFDT (supported)
"RTN","RORX015A",13,0)
 ;
"RTN","RORX015A",14,0)
 ;******************************************************************************
"RTN","RORX015A",15,0)
 ;******************************************************************************
"RTN","RORX015A",16,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX015A",17,0)
 ;        
"RTN","RORX015A",18,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX015A",19,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX015A",20,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX015A",21,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX015A",22,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX015A",23,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX015A",24,0)
 ;                                      
"RTN","RORX015A",25,0)
 ;******************************************************************************
"RTN","RORX015A",26,0)
 ;******************************************************************************
"RTN","RORX015A",27,0)
 Q
"RTN","RORX015A",28,0)
 ;
"RTN","RORX015A",29,0)
 ;***** SEARCHES FOR INPATIENT PROCEDURES
"RTN","RORX015A",30,0)
 ;
"RTN","RORX015A",31,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORX015A",32,0)
 ;
"RTN","RORX015A",33,0)
 ; Return Values:
"RTN","RORX015A",34,0)
 ;       <0  Error code
"RTN","RORX015A",35,0)
 ;        0  Ok
"RTN","RORX015A",36,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX015A",37,0)
 ;
"RTN","RORX015A",38,0)
INPAT(PTIEN) ;
"RTN","RORX015A",39,0)
 N DATE,ERRCNT,FLDLST,IEN,IEN45,IENS,NODE,RC,RORBUF,RORMSG,XREF
"RTN","RORX015A",40,0)
 S (ERRCNT,RC)=0
"RTN","RORX015A",41,0)
 S XREF=$$ROOT^DILFD(45,,1),XREF=$NA(@XREF@("B",PTIEN))
"RTN","RORX015A",42,0)
 S IEN45=0
"RTN","RORX015A",43,0)
 F  S IEN45=$O(@XREF@(IEN45))  Q:IEN45'>0  D
"RTN","RORX015A",44,0)
 . ;Q:$$GET1^DIQ(45,IEN45_",",6,"I",,"RORMSG")<1  ; Skip open records
"RTN","RORX015A",45,0)
 . ;S IENS=IEN45_","
"RTN","RORX015A",46,0)
 . ;S FLDLST="45.01;45.02;45.03;45.04;45.05"
"RTN","RORX015A",47,0)
 . ;D GETS^DIQ(45,IENS,FLDLST,"I","RORBUF","RORMSG")
"RTN","RORX015A",48,0)
 . ;I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORX015A",49,0)
 . ;. D DBS^RORERR("RORMSG",-99,,PTIEN,45,IENS)
"RTN","RORX015A",50,0)
 . ;D INP(PTIEN,$NA(RORBUF(IENS)),FLDLST,???)
"RTN","RORX015A",51,0)
 . ;--- Surgical procedures
"RTN","RORX015A",52,0)
 . S NODE=$$ROOT^DILFD(45.01,","_IEN45_",",1)
"RTN","RORX015A",53,0)
 . S IEN=0
"RTN","RORX015A",54,0)
 . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D
"RTN","RORX015A",55,0)
 . . S IENS=IEN_","_IEN45_","  K RORBUF
"RTN","RORX015A",56,0)
 . . S FLDLST="8;9;10;11;12"
"RTN","RORX015A",57,0)
 . . ;--- Load the data
"RTN","RORX015A",58,0)
 . . K RORMSG D GETS^DIQ(45.01,IENS,".01;"_FLDLST,"I","RORBUF","RORMSG")
"RTN","RORX015A",59,0)
 . . ;I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORX015A",60,0)
 . . I $G(RORMSG("DIERR"))  D  S ERRCNT=ERRCNT+1
"RTN","RORX015A",61,0)
 . . . D DBS^RORERR("RORMSG",-99,,PTIEN,45.01,IENS)
"RTN","RORX015A",62,0)
 . . S DATE=$G(RORBUF(45.01,IENS,.01,"I"))
"RTN","RORX015A",63,0)
 . . Q:(DATE<RORSDT)!(DATE'<ROREDT1)
"RTN","RORX015A",64,0)
 . . ;--- Generate the output
"RTN","RORX015A",65,0)
 . . D INP(PTIEN,$NA(RORBUF(45.01,IENS)),FLDLST,DATE)
"RTN","RORX015A",66,0)
 . ;--- Other procedures
"RTN","RORX015A",67,0)
 . S NODE=$$ROOT^DILFD(45.05,","_IEN45_",",1)
"RTN","RORX015A",68,0)
 . S IEN=0
"RTN","RORX015A",69,0)
 . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D
"RTN","RORX015A",70,0)
 . . S IENS=IEN_","_IEN45_","  K RORBUF
"RTN","RORX015A",71,0)
 . . S FLDLST="4;5;6;7;8"
"RTN","RORX015A",72,0)
 . . ;--- Load the data
"RTN","RORX015A",73,0)
 . . K RORMSG D GETS^DIQ(45.05,IENS,".01;"_FLDLST,"I","RORBUF","RORMSG")
"RTN","RORX015A",74,0)
 . . ;I $G(DIERR)  D  S ERRCNT=ERRCNT+1
"RTN","RORX015A",75,0)
 . . I $G(RORMSG("DIERR"))  D  S ERRCNT=ERRCNT+1
"RTN","RORX015A",76,0)
 . . . D DBS^RORERR("RORMSG",-99,,PTIEN,45.05,IENS)
"RTN","RORX015A",77,0)
 . . S DATE=$G(RORBUF(45.05,IENS,.01,"I"))
"RTN","RORX015A",78,0)
 . . Q:(DATE<RORSDT)!(DATE'<ROREDT1)
"RTN","RORX015A",79,0)
 . . ;--- Generate the output
"RTN","RORX015A",80,0)
 . . D INP(PTIEN,$NA(RORBUF(45.05,IENS)),FLDLST,DATE)
"RTN","RORX015A",81,0)
 ;---
"RTN","RORX015A",82,0)
 Q $S(RC<0:RC,1:ERRCNT)
"RTN","RORX015A",83,0)
 ;
"RTN","RORX015A",84,0)
 ;****
"RTN","RORX015A",85,0)
INP(PTIEN,ROR8BUF,FLDLST,DATE) ;
"RTN","RORX015A",86,0)
 N I,ICD9IEN,FLD
"RTN","RORX015A",87,0)
 F I=1:1  S FLD=$P(FLDLST,";",I)  Q:FLD=""  D
"RTN","RORX015A",88,0)
 . S ICD9IEN=+$G(@ROR8BUF@(FLD,"I"))
"RTN","RORX015A",89,0)
 . D:ICD9IEN>0 PROCSET(PTIEN,"I",ICD9IEN,DATE)
"RTN","RORX015A",90,0)
 Q
"RTN","RORX015A",91,0)
 ;
"RTN","RORX015A",92,0)
 ;***** CALL-BACK PROCEDURE FOR THE OUTPATIENT SEARCH
"RTN","RORX015A",93,0)
 ;
"RTN","RORX015A",94,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORX015A",95,0)
 ;
"RTN","RORX015A",96,0)
OPSCAN(PTIEN) ;
"RTN","RORX015A",97,0)
 N CPTIEN,DATE,IEN,RORCPT,VDATE
"RTN","RORX015A",98,0)
 D GETCPT^SDOE(Y,"RORCPT")
"RTN","RORX015A",99,0)
 Q:$G(RORCPT)'>0
"RTN","RORX015A",100,0)
 S VDATE=+$P(Y0,U)
"RTN","RORX015A",101,0)
 ;---
"RTN","RORX015A",102,0)
 S IEN=0
"RTN","RORX015A",103,0)
 F  S IEN=$O(RORCPT(IEN))  Q:IEN'>0  D
"RTN","RORX015A",104,0)
 . S CPTIEN=+$P(RORCPT(IEN),U),DATE=+$P($G(RORCPT(IEN,12)),U)
"RTN","RORX015A",105,0)
 . D:CPTIEN>0 PROCSET(PTIEN,"O",CPTIEN,$S(DATE>0:DATE,1:VDATE))
"RTN","RORX015A",106,0)
 Q
"RTN","RORX015A",107,0)
 ;
"RTN","RORX015A",108,0)
 ;***** SEARCHES FOR OUTPATIENT PROCEDURES
"RTN","RORX015A",109,0)
 ;
"RTN","RORX015A",110,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORX015A",111,0)
 ;
"RTN","RORX015A",112,0)
 ; Return Values:
"RTN","RORX015A",113,0)
 ;       <0  Error code
"RTN","RORX015A",114,0)
 ;        0  Ok
"RTN","RORX015A",115,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX015A",116,0)
 ;
"RTN","RORX015A",117,0)
OUTPAT(PTIEN) ;
"RTN","RORX015A",118,0)
 N QUERY
"RTN","RORX015A",119,0)
 D OPEN^SDQ(.QUERY)
"RTN","RORX015A",120,0)
 D INDEX^SDQ(.QUERY,"PATIENT/DATE","SET")
"RTN","RORX015A",121,0)
 D PAT^SDQ(.QUERY,PTIEN,"SET")
"RTN","RORX015A",122,0)
 D DATE^SDQ(.QUERY,RORSDT,ROREDT1,"SET")
"RTN","RORX015A",123,0)
 D SCANCB^SDQ(.QUERY,"D OPSCAN^RORX015A("_PTIEN_")","SET")
"RTN","RORX015A",124,0)
 D ACTIVE^SDQ(.QUERY,"TRUE","SET")
"RTN","RORX015A",125,0)
 D SCAN^SDQ(.QUERY,"FORWARD")
"RTN","RORX015A",126,0)
 D CLOSE^SDQ(.QUERY)
"RTN","RORX015A",127,0)
 Q 0
"RTN","RORX015A",128,0)
 ;
"RTN","RORX015A",129,0)
 ;**** STORES THE PROCEDURE CODE
"RTN","RORX015A",130,0)
 ;
"RTN","RORX015A",131,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORX015A",132,0)
 ; SOURCE        CPT source code ("O" or "I")
"RTN","RORX015A",133,0)
 ; [IEN]         IEN of the procedure descriptor (file #81 or #80.1)
"RTN","RORX015A",134,0)
 ; DATE          Date when the code was entered
"RTN","RORX015A",135,0)
 ; [CODE]        Procedure code (CPT or ICD-9)
"RTN","RORX015A",136,0)
 ;
"RTN","RORX015A",137,0)
 ; Either the IEN or the CODE parameter must be provided.
"RTN","RORX015A",138,0)
 ;
"RTN","RORX015A",139,0)
PROCSET(PTIEN,SOURCE,IEN,DATE,CODE) ;
"RTN","RORX015A",140,0)
 Q:DATE'>0
"RTN","RORX015A",141,0)
 N TMP
"RTN","RORX015A",142,0)
 S IEN=+$G(IEN)
"RTN","RORX015A",143,0)
 ;---
"RTN","RORX015A",144,0)
 I IEN'>0  Q:$G(CODE)=""  D  Q:IEN'>0
"RTN","RORX015A",145,0)
 . I SOURCE="O"  S IEN=+$$CODEN^ICPTCOD(CODE)       Q
"RTN","RORX015A",146,0)
 . I SOURCE="I"  S IEN=+$$CODEN^ICDCODE(CODE,80.1)  Q
"RTN","RORX015A",147,0)
 ;---
"RTN","RORX015A",148,0)
 I SOURCE="O",'$$PARAM^RORTSK01("CPTLST","ALL")  D  Q:'TMP
"RTN","RORX015A",149,0)
 . S TMP=$D(RORTSK("PARAMS","CPTLST","C",IEN))
"RTN","RORX015A",150,0)
 I SOURCE="I"  Q:$$ICDGRCHK^RORXU008(.RORPTGRP,IEN,RORICDL)
"RTN","RORX015A",151,0)
 ;---
"RTN","RORX015A",152,0)
 S TMP=+$G(@RORTMP@("PAT",PTIEN,SOURCE,IEN))
"RTN","RORX015A",153,0)
 S:'TMP!(DATE<TMP) @RORTMP@("PAT",PTIEN,SOURCE,IEN)=DATE
"RTN","RORX015A",154,0)
 S ^("C")=$G(@RORTMP@("PAT",PTIEN,SOURCE,IEN,"C"))+1 ;naked reference: ^TMP($J,"RORTMP-n") from RORX015
"RTN","RORX015A",155,0)
 Q
"RTN","RORX015A",156,0)
 ;
"RTN","RORX015A",157,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX015A",158,0)
 ;
"RTN","RORX015A",159,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX015A",160,0)
 ;
"RTN","RORX015A",161,0)
 ; Return Values:
"RTN","RORX015A",162,0)
 ;       <0  Error code
"RTN","RORX015A",163,0)
 ;        0  Ok
"RTN","RORX015A",164,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX015A",165,0)
 ;
"RTN","RORX015A",166,0)
QUERY(FLAGS) ;
"RTN","RORX015A",167,0)
 N ROREDT1       ; Day after the end date
"RTN","RORX015A",168,0)
 N RORPTGRP      ; Temporary list of ICD-9 groups
"RTN","RORX015A",169,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX015A",170,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX015A",171,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX015A",172,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX015A",173,0)
 ;
"RTN","RORX015A",174,0)
 N CNT,ECNT,IEN,IENS,MODE,PTIEN,RC,SKIP,SKIPEDT,SKIPSDT,TMP,UTEDT,UTSDT,XREFNODE
"RTN","RORX015A",175,0)
 N RCC,FLAG
"RTN","RORX015A",176,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX015A",177,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT\1,1)
"RTN","RORX015A",178,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX015A",179,0)
 S:$$PARAM^RORTSK01("PATIENTS","INPATIENT") MODE("I")=1
"RTN","RORX015A",180,0)
 S:$$PARAM^RORTSK01("PATIENTS","OUTPATIENT") MODE("O")=1
"RTN","RORX015A",181,0)
 ;--- Utilization date range
"RTN","RORX015A",182,0)
 D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX015A",183,0)
 . S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX015A",184,0)
 . S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX015A",185,0)
 . ;--- Combined date range
"RTN","RORX015A",186,0)
 . S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,UTSDT)
"RTN","RORX015A",187,0)
 . S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,UTEDT)
"RTN","RORX015A",188,0)
 ;--- Number of patients in the registry
"RTN","RORX015A",189,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX015A",190,0)
 ;
"RTN","RORX015A",191,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX015A",192,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX015A",193,0)
 ;
"RTN","RORX015A",194,0)
 ;=== Browse through the registry records
"RTN","RORX015A",195,0)
 S IEN=0
"RTN","RORX015A",196,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX015A",197,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX015A",198,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX015A",199,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX015A",200,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX015A",201,0)
 . ;--- Get patient DFN
"RTN","RORX015A",202,0)
 . S PTIEN=$$PTIEN^RORUTL01(IEN)  Q:PTIEN'>0
"RTN","RORX015A",203,0)
 . ;--- Check for patient list and quit if not on list
"RTN","RORX015A",204,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PTIEN)) Q
"RTN","RORX015A",205,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX015A",206,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX015A",207,0)
 . ;--- Check if patient has passed the ICD9 Filter
"RTN","RORX015A",208,0)
 . S RCC=0
"RTN","RORX015A",209,0)
 . I FLAG'="ALL" D
"RTN","RORX015A",210,0)
 . . S RCC=$$ICD^RORXU010(PTIEN,RORREG)
"RTN","RORX015A",211,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX015A",212,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX015A",213,0)
 . ;--- End of ICD9 check
"RTN","RORX015A",214,0)
 . M RORPTGRP=RORIGRP("C")
"RTN","RORX015A",215,0)
 . ;
"RTN","RORX015A",216,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX015A",217,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PTIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX015A",218,0)
 . ;
"RTN","RORX015A",219,0)
 . ;--- Inpatient codes (ICD-9)
"RTN","RORX015A",220,0)
 . I $G(MODE("I"))   D  I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX015A",221,0)
 . . S RC=$$INPAT(PTIEN)
"RTN","RORX015A",222,0)
 . ;--- Outpatient codes (CPT)
"RTN","RORX015A",223,0)
 . I $G(MODE("O"))  D  I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX015A",224,0)
 . . S RC=$$OUTPAT(PTIEN)
"RTN","RORX015A",225,0)
 . ;
"RTN","RORX015A",226,0)
 . ;--- If ICD-9 codes from some groups have not been found,
"RTN","RORX015A",227,0)
 . ;--- then do not consider inpatient procedures at all
"RTN","RORX015A",228,0)
 . K:$D(RORPTGRP)>1 @RORTMP@("PAT",PTIEN,"I")
"RTN","RORX015A",229,0)
 . ;---
"RTN","RORX015A",230,0)
 . S SKIP=($D(@RORTMP@("PAT",PTIEN))<10)
"RTN","RORX015A",231,0)
 . S:RORPROC<0 SKIP='SKIP
"RTN","RORX015A",232,0)
 . ;
"RTN","RORX015A",233,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX015A",234,0)
 . I 'SKIP  D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX015A",235,0)
 . . K TMP  S TMP("ALL")=1
"RTN","RORX015A",236,0)
 . . S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,PTIEN,.TMP)
"RTN","RORX015A",237,0)
 . . S:'UTIL SKIP=1
"RTN","RORX015A",238,0)
 . ;
"RTN","RORX015A",239,0)
 . ;--- Skip the patient if not all search criteria have been met
"RTN","RORX015A",240,0)
 . I SKIP  K @RORTMP@("PAT",PTIEN)  Q
"RTN","RORX015A",241,0)
 . ;
"RTN","RORX015A",242,0)
 . ;--- Calculate the patient's totals
"RTN","RORX015A",243,0)
 . S RC=$$TOTALS(PTIEN)
"RTN","RORX015A",244,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX015A",245,0)
 ;---
"RTN","RORX015A",246,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX015A",247,0)
 ;
"RTN","RORX015A",248,0)
 ;***** SORTS THE RESULTS AND COMPILES THE TOTALS
"RTN","RORX015A",249,0)
 ;
"RTN","RORX015A",250,0)
 ; Return Values:
"RTN","RORX015A",251,0)
 ;       <0  Error code
"RTN","RORX015A",252,0)
 ;        0  Ok
"RTN","RORX015A",253,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX015A",254,0)
 ;
"RTN","RORX015A",255,0)
SORT() ;
"RTN","RORX015A",256,0)
 N IEN,SRC,TMP,TNC,TNDC
"RTN","RORX015A",257,0)
 ;---
"RTN","RORX015A",258,0)
 S (TNC,TNDC)=0
"RTN","RORX015A",259,0)
 F SRC="I","O"  D
"RTN","RORX015A",260,0)
 . S IEN=0
"RTN","RORX015A",261,0)
 . F  S IEN=$O(@RORTMP@("PROC",SRC,IEN))  Q:IEN'>0  D
"RTN","RORX015A",262,0)
 . . S TMP=$P($G(@RORTMP@("PROC",SRC,IEN)),U,2)
"RTN","RORX015A",263,0)
 . . S:TMP'="" @RORTMP@("PROC","B",TMP,SRC,IEN)=""
"RTN","RORX015A",264,0)
 . . S TNC=TNC+$G(@RORTMP@("PROC",SRC,IEN,"C"))
"RTN","RORX015A",265,0)
 . . S TNDC=TNDC+1
"RTN","RORX015A",266,0)
 S @RORTMP@("PROC")=TNC_U_TNDC
"RTN","RORX015A",267,0)
 ;---
"RTN","RORX015A",268,0)
 Q 0
"RTN","RORX015A",269,0)
 ;
"RTN","RORX015A",270,0)
 ;***** CALCULATES INTERMEDIATE TOTALS
"RTN","RORX015A",271,0)
 ;
"RTN","RORX015A",272,0)
 ; PTIEN         Patient IEN (DFN)
"RTN","RORX015A",273,0)
 ;
"RTN","RORX015A",274,0)
 ; Return Values:
"RTN","RORX015A",275,0)
 ;       <0  Error code
"RTN","RORX015A",276,0)
 ;        0  Ok
"RTN","RORX015A",277,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX015A",278,0)
 ;
"RTN","RORX015A",279,0)
TOTALS(PTIEN) ;
"RTN","RORX015A",280,0)
 N CNT,CODE,IEN,NAME,PNODE,RC,SRC,TMP,VA,VADM
"RTN","RORX015A",281,0)
 S PNODE=$NA(@RORTMP@("PAT",PTIEN))
"RTN","RORX015A",282,0)
 ;--- Get and store the patient's data
"RTN","RORX015A",283,0)
 D VADEM^RORUTL05(PTIEN,1)
"RTN","RORX015A",284,0)
 S @PNODE=VA("BID")_U_VADM(1)_U_$$DATE^RORXU002(VADM(6)\1)
"RTN","RORX015A",285,0)
 S ^("PAT")=$G(@RORTMP@("PAT"))+1 ;naked reference: ^TMP($J,"RORTMP-n") from RORX015
"RTN","RORX015A",286,0)
 ;
"RTN","RORX015A",287,0)
 F SRC="I","O"  D
"RTN","RORX015A",288,0)
 . S IEN=0
"RTN","RORX015A",289,0)
 . F  S IEN=$O(@PNODE@(SRC,IEN))  Q:IEN'>0  D
"RTN","RORX015A",290,0)
 . . S CODE=$P($G(@RORTMP@("PROC",SRC,IEN)),U),NAME=""
"RTN","RORX015A",291,0)
 . . D:CODE=""
"RTN","RORX015A",292,0)
 . . . I SRC="O"  D
"RTN","RORX015A",293,0)
 . . . . S TMP=$$CPT^ICPTCOD(IEN)
"RTN","RORX015A",294,0)
 . . . . S:TMP'<0 CODE=$P(TMP,U,2),NAME=$P(TMP,U,3)
"RTN","RORX015A",295,0)
 . . . E  D
"RTN","RORX015A",296,0)
 . . . . S TMP=$$ICDOP^ICDCODE(IEN)
"RTN","RORX015A",297,0)
 . . . . S:TMP'<0 CODE=$P(TMP,U,2),NAME=$P(TMP,U,5)
"RTN","RORX015A",298,0)
 . . . S:CODE="" CODE="UNKN"
"RTN","RORX015A",299,0)
 . . . S:NAME="" NAME="Unknown ("_IEN_")"
"RTN","RORX015A",300,0)
 . . . S @RORTMP@("PROC",SRC,IEN)=CODE_U_NAME
"RTN","RORX015A",301,0)
 . . ;---
"RTN","RORX015A",302,0)
 . . S CNT=+$G(@PNODE@(SRC,IEN,"C"))
"RTN","RORX015A",303,0)
 . . S ^("C")=$G(@RORTMP@("PROC",SRC,IEN,"C"))+CNT ;naked reference: ^TMP($J,"RORTMP-n") from RORX015
"RTN","RORX015A",304,0)
 . . S ^("P")=$G(@RORTMP@("PROC",SRC,IEN,"P"))+1 ;naked reference: ^TMP($J,"RORTMP-n") from RORX015
"RTN","RORX015A",305,0)
 Q 0
"RTN","RORX016A")
0^9^B14087578^B14087578
"RTN","RORX016A",1,0)
RORX016A ;HOIFO/BH,SG,VAC - OUTPATIENT UTILIZATION (QUERY) ;4/7/09 2:10pm
"RTN","RORX016A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,13**;Feb 17, 2006;Build 27
"RTN","RORX016A",3,0)
 ;
"RTN","RORX016A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX016A",5,0)
 ;
"RTN","RORX016A",6,0)
 ; #557          Read access to the file #40.7 (controlled)
"RTN","RORX016A",7,0)
 ; #2548         APIs in routine SDQ: ACRP Interface Toolkit (supported)
"RTN","RORX016A",8,0)
 ; #10103        FMADD^XLFDT (supported)
"RTN","RORX016A",9,0)
 ;
"RTN","RORX016A",10,0)
 ;******************************************************************************
"RTN","RORX016A",11,0)
 ;******************************************************************************
"RTN","RORX016A",12,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX016A",13,0)
 ;        
"RTN","RORX016A",14,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX016A",15,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX016A",16,0)
 ;ROR*1.5*8    MAR  2010   V CARR       Modified to handle ICD9 filter for
"RTN","RORX016A",17,0)
 ;                                      'include' or 'exclude'.
"RTN","RORX016A",18,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients
"RTN","RORX016A",19,0)
 ;
"RTN","RORX016A",20,0)
 ;******************************************************************************
"RTN","RORX016A",21,0)
 ;******************************************************************************
"RTN","RORX016A",22,0)
 Q
"RTN","RORX016A",23,0)
 ;
"RTN","RORX016A",24,0)
 ;***** LOADS AND PROCESSES THE OUTPATIENT DATA
"RTN","RORX016A",25,0)
 ;
"RTN","RORX016A",26,0)
 ; RORDFN        Patient IEN (in file #2)
"RTN","RORX016A",27,0)
 ;
"RTN","RORX016A",28,0)
 ; Return Values:
"RTN","RORX016A",29,0)
 ;       <0  Error code
"RTN","RORX016A",30,0)
 ;        0  Ok
"RTN","RORX016A",31,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX016A",32,0)
 ;
"RTN","RORX016A",33,0)
OPDATA(RORDFN) ;
"RTN","RORX016A",34,0)
 N QUERY,RORDST,RORECNT
"RTN","RORX016A",35,0)
 S RORDST=$NA(^TMP("RORX016",$J))
"RTN","RORX016A",36,0)
 D OPEN^SDQ(.QUERY)
"RTN","RORX016A",37,0)
 D INDEX^SDQ(.QUERY,"PATIENT/DATE","SET")
"RTN","RORX016A",38,0)
 D PAT^SDQ(.QUERY,RORDFN,"SET")
"RTN","RORX016A",39,0)
 D DATE^SDQ(.QUERY,RORSDT,ROREDT1,"SET")
"RTN","RORX016A",40,0)
 D SCANCB^SDQ(.QUERY,"D SCAN^RORX016A(Y,Y0)","SET")
"RTN","RORX016A",41,0)
 D ACTIVE^SDQ(.QUERY,"TRUE","SET")
"RTN","RORX016A",42,0)
 D SCAN^SDQ(.QUERY,"FORWARD")
"RTN","RORX016A",43,0)
 D CLOSE^SDQ(.QUERY)
"RTN","RORX016A",44,0)
 Q +$G(RORECNT)
"RTN","RORX016A",45,0)
 ;
"RTN","RORX016A",46,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX016A",47,0)
 ;
"RTN","RORX016A",48,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX016A",49,0)
 ;
"RTN","RORX016A",50,0)
 ; Return Values:
"RTN","RORX016A",51,0)
 ;       <0  Error code
"RTN","RORX016A",52,0)
 ;        0  Ok
"RTN","RORX016A",53,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX016A",54,0)
 ;
"RTN","RORX016A",55,0)
QUERY(FLAGS) ;
"RTN","RORX016A",56,0)
 N ROREDT1       ; Day after the end date
"RTN","RORX016A",57,0)
 N RORLAST4      ; Last 4 digits of the current patient's SSN
"RTN","RORX016A",58,0)
 N RORPNAME      ; Name of the current patient
"RTN","RORX016A",59,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX016A",60,0)
 ;
"RTN","RORX016A",61,0)
 N CNT,ECNT,IEN,IENS,PATIEN,RC,TMP,VA,VADM,XREFNODE
"RTN","RORX016A",62,0)
 N RCC,FLAG
"RTN","RORX016A",63,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX016A",64,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX016A",65,0)
 S ROREDT1=$$FMADD^XLFDT(ROREDT,1)
"RTN","RORX016A",66,0)
 S (CNT,ECNT,RC)=0
"RTN","RORX016A",67,0)
 ;--- Browse through the registry records
"RTN","RORX016A",68,0)
 S IEN=0
"RTN","RORX016A",69,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX016A",70,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX016A",71,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX016A",72,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX016A",73,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX016A",74,0)
 . ;--- Get the patient DFN
"RTN","RORX016A",75,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX016A",76,0)
 . ;--- Check for patient list and quit if not in list
"RTN","RORX016A",77,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",PATIEN)) Q
"RTN","RORX016A",78,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX016A",79,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,RORSDT,ROREDT)
"RTN","RORX016A",80,0)
 . ;--- Check the patient against the ICD9 Filter
"RTN","RORX016A",81,0)
 . S RCC=0
"RTN","RORX016A",82,0)
 . I FLAG'="ALL" D
"RTN","RORX016A",83,0)
 . . S RCC=$$ICD^RORXU010(PATIEN,RORREG)
"RTN","RORX016A",84,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX016A",85,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX016A",86,0)
 . ;--- End of ICD9 Filter check
"RTN","RORX016A",87,0)
 . ;
"RTN","RORX016A",88,0)
 . ;--- Get the patient's data
"RTN","RORX016A",89,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX016A",90,0)
 . S RORPNAME=VADM(1),RORLAST4=VA("BID")
"RTN","RORX016A",91,0)
 . ;
"RTN","RORX016A",92,0)
 . ;--- Get the outpatient data
"RTN","RORX016A",93,0)
 . S RC=$$OPDATA(PATIEN)
"RTN","RORX016A",94,0)
 . I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX016A",95,0)
 . ;
"RTN","RORX016A",96,0)
 . ;--- Calculate intermediate totals
"RTN","RORX016A",97,0)
 . S RC=$$TOTALS^RORX016B(PATIEN)
"RTN","RORX016A",98,0)
 . I RC  S ECNT=ECNT+1  Q:RC<0
"RTN","RORX016A",99,0)
 ;---
"RTN","RORX016A",100,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX016A",101,0)
 ;
"RTN","RORX016A",102,0)
 ;***** CALLBACK ENTRY POINT FOR ACRP API
"RTN","RORX016A",103,0)
SCAN(Y,Y0) ;
"RTN","RORX016A",104,0)
 N DTX,STOP,TMP
"RTN","RORX016A",105,0)
 ;--- Check the division list
"RTN","RORX016A",106,0)
 S TMP=$$PARAM^RORTSK01("DIVISIONS","ALL")
"RTN","RORX016A",107,0)
 I 'TMP  Q:'$D(RORTSK("PARAMS","DIVISIONS","C",+$P(Y0,U,11)))
"RTN","RORX016A",108,0)
 ;--- Data comes from the OUTPATIENT ENCOUNTER file (409.68)
"RTN","RORX016A",109,0)
 S STOP=$P($G(^DIC(40.7,+$P(Y0,U,3),0)),U,2),DTX=Y0\1
"RTN","RORX016A",110,0)
 S:STOP="" STOP="NSC"
"RTN","RORX016A",111,0)
 S @RORDST@("OP",RORDFN,DTX)=$G(@RORDST@("OP",RORDFN,DTX))+1
"RTN","RORX016A",112,0)
 S @RORDST@("OP",RORDFN,DTX,STOP)=$G(@RORDST@("OP",RORDFN,DTX,STOP))+1
"RTN","RORX016A",113,0)
 Q
"RTN","RORX018")
0^22^B163618513^B163618513
"RTN","RORX018",1,0)
RORX018 ;BPOIFO/ACS - BMI BY RANGE REPORT ;11/1/09
"RTN","RORX018",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,13**;Feb 17, 2006;Build 27
"RTN","RORX018",3,0)
 ;
"RTN","RORX018",4,0)
 ;
"RTN","RORX018",5,0)
 ; This routine uses the following IAs:
"RTN","RORX018",6,0)
 ;
"RTN","RORX018",7,0)
 ; #4290  ^PXRMINDX(120.5 (controlled)
"RTN","RORX018",8,0)
 ; #3647   $$EN^GMVPXRM (controlled)
"RTN","RORX018",9,0)
 ; #5047   $$GETIEN^GMVGETVT (supported)
"RTN","RORX018",10,0)
 ;
"RTN","RORX018",11,0)
 ;******************************************************************************
"RTN","RORX018",12,0)
 ;******************************************************************************
"RTN","RORX018",13,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX018",14,0)
 ;        
"RTN","RORX018",15,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX018",16,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX018",17,0)
 ;ROR*1.5*10   MAR  2010   A SAUNDERS   Routine created
"RTN","RORX018",18,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX018",19,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX018",20,0)
 ;                                      Modified XML tags for sort.
"RTN","RORX018",21,0)
 ;                                      
"RTN","RORX018",22,0)
 ;******************************************************************************
"RTN","RORX018",23,0)
 ;******************************************************************************
"RTN","RORX018",24,0)
 Q
"RTN","RORX018",25,0)
 ;*****************************************************************************
"RTN","RORX018",26,0)
 ;COMPILE THE "BMI BY RANGE" REPORT
"RTN","RORX018",27,0)
 ;REPORT CODE: 018
"RTN","RORX018",28,0)
 ;
"RTN","RORX018",29,0)
 ;Called by entry "BMI by Range" in ROR REPORT PARAMETERS (#799.34)
"RTN","RORX018",30,0)
 ;
"RTN","RORX018",31,0)
 ;INPUT
"RTN","RORX018",32,0)
 ;  RORTSK     Task number and task parameters
"RTN","RORX018",33,0)
 ;
"RTN","RORX018",34,0)
 ;  Below is a sample RORTSK input array for utilization in 2003, most recent
"RTN","RORX018",35,0)
 ;  scores, BMI range from 30 to 45:
"RTN","RORX018",36,0)
 ;
"RTN","RORX018",37,0)
 ;  RORTSK=nnn   (task number)
"RTN","RORX018",38,0)
 ;  RORTSK("EP")="$$BMIRANGE^RORX018"
"RTN","RORX018",39,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","END")=3031231
"RTN","RORX018",40,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","START")=3030101
"RTN","RORX018",41,0)
 ;  RORTSK("PARAMS","ICD9FILT","A","FILTER")="ALL"
"RTN","RORX018",42,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1)=""
"RTN","RORX018",43,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"H")=45
"RTN","RORX018",44,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"L")=30
"RTN","RORX018",45,0)
 ;  RORTSK("PARAMS","OPTIONS","A","COMPLETE")=1
"RTN","RORX018",46,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX018",47,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_AFTER")=1
"RTN","RORX018",48,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_BEFORE")=1
"RTN","RORX018",49,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_DURING")=1
"RTN","RORX018",50,0)
 ;  RORTSK("PARAMS","REGIEN")=1
"RTN","RORX018",51,0)
 ;
"RTN","RORX018",52,0)
 ;  If the user selected an 'as of' date = 12/31/2005:
"RTN","RORX018",53,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX018",54,0)
 ;  is replaced with:  
"RTN","RORX018",55,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MAX_DATE")=3051231
"RTN","RORX018",56,0)
 ;
"RTN","RORX018",57,0)
 ;OUTPUT
"RTN","RORX018",58,0)
 ;  <0  Error code
"RTN","RORX018",59,0)
 ;   0  Ok
"RTN","RORX018",60,0)
 ;*****************************************************************************
"RTN","RORX018",61,0)
BMIRANGE(RORTSK) ;
"RTN","RORX018",62,0)
 N RORDATA       ; array to hold ROR data and summary totals
"RTN","RORX018",63,0)
 N RORREG        ; Registry IEN
"RTN","RORX018",64,0)
 N RORSDT        ; report start date
"RTN","RORX018",65,0)
 N ROREDT        ; report end date
"RTN","RORX018",66,0)
 N RORPTIEN      ; IEN of patient in the ROR registry
"RTN","RORX018",67,0)
 N DFN           ; DFN of patient in the PATIENT file (#2)
"RTN","RORX018",68,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX018",69,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX018",70,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX018",71,0)
 ;
"RTN","RORX018",72,0)
 N REPORT,PARAMS,SFLAGS,RC,CNT,ECNT,UTSDT,UTEDT,SKIPSDT,SKIPEDT,RORBODY,RORPTN
"RTN","RORX018",73,0)
 N RCC,FLAG,TMP,DFN,SKIP
"RTN","RORX018",74,0)
 ;--- Establish the root XML Node of the report and put into output
"RTN","RORX018",75,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX018",76,0)
 Q:REPORT<0 REPORT
"RTN","RORX018",77,0)
 ;
"RTN","RORX018",78,0)
 ;--- Get registry IEN
"RTN","RORX018",79,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX018",80,0)
 ;
"RTN","RORX018",81,0)
 ;--- Set standard report parameters data into output:
"RTN","RORX018",82,0)
 ;registry, comment, patients (before, during, after), options (summary vs.
"RTN","RORX018",83,0)
 ;complete), other registries, and other diagnoses
"RTN","RORX018",84,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS) Q:PARAMS<0 PARAMS
"RTN","RORX018",85,0)
 ;
"RTN","RORX018",86,0)
 ;--- Add range parameters to output
"RTN","RORX018",87,0)
 S RC=$$PARAMS(PARAMS,.RORDATA) Q:RC<0 RC
"RTN","RORX018",88,0)
 ;
"RTN","RORX018",89,0)
 ;--- Put report header data into output:
"RTN","RORX018",90,0)
 ;report creation date, task number, last registry update date, and
"RTN","RORX018",91,0)
 ;last data extraction date
"RTN","RORX018",92,0)
 S RC=$$HEADER(REPORT) Q:RC<0 RC
"RTN","RORX018",93,0)
 ;
"RTN","RORX018",94,0)
 ;--- Set the number of BMI ranges and initialize their values to 0
"RTN","RORX018",95,0)
 S RORDATA("RCNT")=6 D INIT(.RORDATA)
"RTN","RORX018",96,0)
 ;
"RTN","RORX018",97,0)
 ;--- Get GMRV VITAL TYPE pointer for HEIGHT and WEIGHT
"RTN","RORX018",98,0)
 S RORDATA("HGTP")=$$GETIEN^GMVGETVT("HEIGHT",1)
"RTN","RORX018",99,0)
 S RORDATA("WGTP")=$$GETIEN^GMVGETVT("WEIGHT",1)
"RTN","RORX018",100,0)
 I '$G(RORDATA("HGTP")) Q -1
"RTN","RORX018",101,0)
 I '$G(RORDATA("WGTP")) Q -1
"RTN","RORX018",102,0)
 ;
"RTN","RORX018",103,0)
 ;--- 'Most recent' vs. max date requested
"RTN","RORX018",104,0)
 S RORDATA("DATE")=0
"RTN","RORX018",105,0)
 I $$PARAM^RORTSK01("OPTIONS","MOST_RECENT") S RORDATA("DATE")=DT_.9
"RTN","RORX018",106,0)
 I '$G(RORDATA("DATE")) S RORDATA("DATE")=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")_.9
"RTN","RORX018",107,0)
 ;
"RTN","RORX018",108,0)
 ;--- Summary vs. complete report requested
"RTN","RORX018",109,0)
 S RORDATA("SUMMARY")=0
"RTN","RORX018",110,0)
 I $$PARAM^RORTSK01("OPTIONS","SUMMARY") S RORDATA("SUMMARY")=1
"RTN","RORX018",111,0)
 ;
"RTN","RORX018",112,0)
 ;--- Get BMI range requested (there is currently only 1 BMI test)
"RTN","RORX018",113,0)
 S I=0 F  S I=$O(RORTSK("PARAMS","LRGRANGES","C",I)) Q:I=""  D
"RTN","RORX018",114,0)
 . S RORDATA("L",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"L")) ;low BMI range
"RTN","RORX018",115,0)
 . S RORDATA("H",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"H")) ;high BMI range
"RTN","RORX018",116,0)
 ;
"RTN","RORX018",117,0)
 ;--- Create 'patients' table
"RTN","RORX018",118,0)
 S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX018",119,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX018",120,0)
 ;
"RTN","RORX018",121,0)
 ;--- Get utilization date range (always sent in)
"RTN","RORX018",122,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX018",123,0)
 S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX018",124,0)
 S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX018",125,0)
 ; Combined date range
"RTN","RORX018",126,0)
 S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,$G(UTSDT))
"RTN","RORX018",127,0)
 S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,$G(UTEDT))
"RTN","RORX018",128,0)
 ;
"RTN","RORX018",129,0)
 ;--- Number of patients in the registry - used for calculating the
"RTN","RORX018",130,0)
 ;task progress percentage - shown on the GUI screen
"RTN","RORX018",131,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG) S:RORPTN<0 RORPTN=0
"RTN","RORX018",132,0)
 ;
"RTN","RORX018",133,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX018",134,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX018",135,0)
 ;
"RTN","RORX018",136,0)
 ;--- Get registry records
"RTN","RORX018",137,0)
 S (CNT,RORPTIEN,RC)=0
"RTN","RORX018",138,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX018",139,0)
 F  S RORPTIEN=$O(^RORDATA(798,"AC",RORREG,RORPTIEN))  Q:RORPTIEN'>0  D  Q:RC<0
"RTN","RORX018",140,0)
 . ;--- Calculate 'progress' for the GUI display
"RTN","RORX018",141,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX018",142,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX018",143,0)
 . S CNT=CNT+1
"RTN","RORX018",144,0)
 . ;--- Get patient DFN
"RTN","RORX018",145,0)
 . S DFN=$$PTIEN^RORUTL01(RORPTIEN) Q:DFN'>0
"RTN","RORX018",146,0)
 . ;check for patient list and quit if not on list
"RTN","RORX018",147,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",DFN)) Q
"RTN","RORX018",148,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX018",149,0)
 . Q:$$SKIP^RORXU005(RORPTIEN,SFLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX018",150,0)
 . ;--- Check if patient has passed the ICD9 filter
"RTN","RORX018",151,0)
 . S RCC=0
"RTN","RORX018",152,0)
 . I FLAG'="ALL" D
"RTN","RORX018",153,0)
 . . S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX018",154,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX018",155,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX018",156,0)
 . ;
"RTN","RORX018",157,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX018",158,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,DFN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX018",159,0)
 . ;
"RTN","RORX018",160,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX018",161,0)
 . S SKIP=0 I $G(UTSDT)>0 D
"RTN","RORX018",162,0)
 .. N UTIL K TMP S TMP("ALL")=1
"RTN","RORX018",163,0)
 .. S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,DFN,.TMP)
"RTN","RORX018",164,0)
 .. S:'UTIL SKIP=1
"RTN","RORX018",165,0)
 . ;--- Skip the patient if they have no utilization in the range
"RTN","RORX018",166,0)
 . Q:$G(SKIP)
"RTN","RORX018",167,0)
 . ;
"RTN","RORX018",168,0)
 . ;--- For each patient, process the registry record
"RTN","RORX018",169,0)
 . I $$PATIENT(DFN,RORBODY,.RORDATA)<0 S ECNT=ECNT+1 ;error count
"RTN","RORX018",170,0)
 ;
"RTN","RORX018",171,0)
 ;--- Always create BMI summary report
"RTN","RORX018",172,0)
 S RC=$$SUMMARY(RORTSK,REPORT,.RORDATA) Q:RC<0 RC
"RTN","RORX018",173,0)
 K ^TMP("RORX018",$J)
"RTN","RORX018",174,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX018",175,0)
 ;
"RTN","RORX018",176,0)
 ;*****************************************************************************
"RTN","RORX018",177,0)
 ;ADD THE PATIENT DATA TO THE REPORT
"RTN","RORX018",178,0)
 ;
"RTN","RORX018",179,0)
 ;INPUT
"RTN","RORX018",180,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX018",181,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX018",182,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX018",183,0)
 ;
"RTN","RORX018",184,0)
 ;OUTPUT
"RTN","RORX018",185,0)
 ;  1        ok
"RTN","RORX018",186,0)
 ; <0        error
"RTN","RORX018",187,0)
 ;*****************************************************************************
"RTN","RORX018",188,0)
PATIENT(DFN,PTAG,RORDATA) ;
"RTN","RORX018",189,0)
 I $$CALCBMI(DFN,PTAG,.RORDATA)<0 Q 0  ;calculate the BMI
"RTN","RORX018",190,0)
 I '$$INRANGE(.RORDATA) Q 0 ;if range sent, BMI must be in the requested range
"RTN","RORX018",191,0)
 D BMICAT(.RORDATA) ;add 1 to appropriate category count
"RTN","RORX018",192,0)
 Q:RORDATA("SUMMARY") 1  ;stop if only the 'summary' report was requested
"RTN","RORX018",193,0)
 ;
"RTN","RORX018",194,0)
 ;--- Get patient data and put into the report
"RTN","RORX018",195,0)
 N VADM,VA,RORDOD,BTAG,HTAG,WTAG
"RTN","RORX018",196,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX018",197,0)
 ;--- The <PATIENT> tag
"RTN","RORX018",198,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTAG,,DFN)
"RTN","RORX018",199,0)
 I PTAG<0 Q PTAG
"RTN","RORX018",200,0)
 ;--- Patient Name
"RTN","RORX018",201,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX018",202,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX018",203,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX018",204,0)
 ;--- Date of death
"RTN","RORX018",205,0)
 S RORDOD=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX018",206,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$G(RORDOD),PTAG,1)
"RTN","RORX018",207,0)
 ;--- 'BMIDATA' tag
"RTN","RORX018",208,0)
 S BTAG=$$ADDVAL^RORTSK11(RORTSK,"BMIDATA",,PTAG)
"RTN","RORX018",209,0)
 Q:BTAG<0 BTAG
"RTN","RORX018",210,0)
 ;--- Height tag
"RTN","RORX018",211,0)
 S HTAG=$$ADDVAL^RORTSK11(RORTSK,"HEIGHT",,BTAG)
"RTN","RORX018",212,0)
 Q:HTAG<0 HTAG
"RTN","RORX018",213,0)
 ;---  Date Height Taken
"RTN","RORX018",214,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("HDATE")),HTAG)
"RTN","RORX018",215,0)
 ;---  Height value
"RTN","RORX018",216,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("HGT")),HTAG)
"RTN","RORX018",217,0)
 ;---  Weight tag
"RTN","RORX018",218,0)
 S WTAG=$$ADDVAL^RORTSK11(RORTSK,"WEIGHT",,BTAG)
"RTN","RORX018",219,0)
 Q:WTAG<0 WTAG
"RTN","RORX018",220,0)
 ;---  Date Weight Taken
"RTN","RORX018",221,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("WDATE")),WTAG)
"RTN","RORX018",222,0)
 ;---  Weight value
"RTN","RORX018",223,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("WGT")),WTAG)
"RTN","RORX018",224,0)
 ;---  Calculated BMI value goes on PATIENT tag
"RTN","RORX018",225,0)
 D ADDVAL^RORTSK11(RORTSK,"BMI",$G(RORDATA("SCORE",1)),PTAG,3)
"RTN","RORX018",226,0)
 Q 1
"RTN","RORX018",227,0)
 ;
"RTN","RORX018",228,0)
 ;*****************************************************************************
"RTN","RORX018",229,0)
 ;CALCULATE THE BMI FOR CURRENT PATIENT
"RTN","RORX018",230,0)
 ;
"RTN","RORX018",231,0)
 ;INPUT
"RTN","RORX018",232,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX018",233,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX018",234,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX018",235,0)
 ;  
"RTN","RORX018",236,0)
 ;OUTPUT
"RTN","RORX018",237,0)
 ;  1        BMI calculated successfully
"RTN","RORX018",238,0)
 ; -1        Patient does not have vital measurements or BMI is out of range
"RTN","RORX018",239,0)
 ;  RORDATA  Array with ROR data:
"RTN","RORX018",240,0)
 ;           RORDATA("WGT")   - weight measurement
"RTN","RORX018",241,0)
 ;           RORDATA("WDATE") - date of weight measurement
"RTN","RORX018",242,0)
 ;           RORDATA("HGT")   - height measurement
"RTN","RORX018",243,0)
 ;           RORDATA("HDATE") - date of height measurement
"RTN","RORX018",244,0)
 ;           RORDATA("SCORE",N) - calculated BMI value for test N
"RTN","RORX018",245,0)
 ;*****************************************************************************
"RTN","RORX018",246,0)
CALCBMI(DFN,PTAG,RORDATA) ;
"RTN","RORX018",247,0)
 ;-- get vital measurements for BMI calculation
"RTN","RORX018",248,0)
 S RORDATA("CALC")=1 ;default - the score for this patient should be calculated
"RTN","RORX018",249,0)
 N RORDATE,I,RORVMDT,RORVMIEN,RORARY,TMP1,TMP2,TMP3
"RTN","RORX018",250,0)
 K RORDATA("HGT"),RORDATA("WGT"),RORDATA("SCORE",1)
"RTN","RORX018",251,0)
 S RORDATE=RORDATA("DATE")
"RTN","RORX018",252,0)
 F I="HGTP","WGTP" D  ;height and weight pointers
"RTN","RORX018",253,0)
 . ;get vital measurement date and IEN
"RTN","RORX018",254,0)
 . S RORVMDT=$O(^PXRMINDX(120.5,"PI",DFN,RORDATA(I),RORDATE),-1) ;vm date
"RTN","RORX018",255,0)
 . Q:$G(RORVMDT)=""
"RTN","RORX018",256,0)
 . S RORVMIEN=$O(^PXRMINDX(120.5,"PI",DFN,RORDATA(I),RORVMDT,0)) ;vm IEN
"RTN","RORX018",257,0)
 . Q:$G(RORVMIEN)=""
"RTN","RORX018",258,0)
 . ;call API to get patient's vital measurement value
"RTN","RORX018",259,0)
 . K RORARY D EN^GMVPXRM(.RORARY,RORVMIEN,"I")
"RTN","RORX018",260,0)
 . ; set values into RORDATA("WGT"), ("HGT"), ("WDATE"), & ("HDATE")
"RTN","RORX018",261,0)
 . S RORDATA($E(I,1,3))=$G(RORARY(7)),RORDATA($E(I,1)_"DATE")=$P(RORVMDT,".",1)
"RTN","RORX018",262,0)
 ;quit if height or weight is not > 0
"RTN","RORX018",263,0)
 I (($G(RORDATA("HGT"))'>0)!($G(RORDATA("WGT"))'>0)) Q -1
"RTN","RORX018",264,0)
 ;strip out characters "IN", ",E"
"RTN","RORX018",265,0)
 I ((RORDATA("HGT")["IN")!(RORDATA("HGT")[",E")) S RORDATA("HGT")=+RORDATA("HGT")
"RTN","RORX018",266,0)
 ;mark as 'invalid' if height not between 36 and 96 inches
"RTN","RORX018",267,0)
 I ((RORDATA("HGT")<36)!(RORDATA("HGT")>96)) D  Q 1
"RTN","RORX018",268,0)
 . S RORDATA("CALC")=0 ;no score calculations can be done on 'invalid' data
"RTN","RORX018",269,0)
 . S RORDATA("HGT")=RORDATA("HGT")_"*"
"RTN","RORX018",270,0)
 ;mark as 'invalid' if height contains "CM", or "'" or double quote
"RTN","RORX018",271,0)
 I ((RORDATA("HGT")["CM")!(RORDATA("HGT")["'")!(RORDATA("HGT")["""")) D  Q 1
"RTN","RORX018",272,0)
 . S RORDATA("CALC")=0 ;no score calculations can be done on 'invalid' data
"RTN","RORX018",273,0)
 . S RORDATA("HGT")=RORDATA("HGT")_"*"
"RTN","RORX018",274,0)
 ;
"RTN","RORX018",275,0)
 ;BMI calculation: (weight * 703) / (height*height)
"RTN","RORX018",276,0)
 S TMP1=703*($G(RORDATA("WGT")))
"RTN","RORX018",277,0)
 S TMP2=$G(RORDATA("HGT"))*($G(RORDATA("HGT")))
"RTN","RORX018",278,0)
 S TMP3=TMP1/TMP2
"RTN","RORX018",279,0)
 S RORDATA("SCORE",1)=$J(TMP3,0,1) ;round to 1 decimal point
"RTN","RORX018",280,0)
 Q 1
"RTN","RORX018",281,0)
 ;
"RTN","RORX018",282,0)
 ;************************************************************************
"RTN","RORX018",283,0)
 ;DETERMINE IF THE SCORE IS WITHIN THE REQUESTED RANGE
"RTN","RORX018",284,0)
 ;
"RTN","RORX018",285,0)
 ;INPUT:
"RTN","RORX018",286,0)
 ;  RORDATA  RORDATA("SCORE",I) contains computed test score for test ID 'I'
"RTN","RORX018",287,0)
 ;
"RTN","RORX018",288,0)
 ;OUTPUT:
"RTN","RORX018",289,0)
 ;  1  computed test score in range
"RTN","RORX018",290,0)
 ;  0  computed test score not in range
"RTN","RORX018",291,0)
 ;************************************************************************
"RTN","RORX018",292,0)
INRANGE(RORDATA) ;
"RTN","RORX018",293,0)
 ;if range exists for the test, and any result is considered 'invalid',
"RTN","RORX018",294,0)
 ;then skip the range check and exclude data from report
"RTN","RORX018",295,0)
 I $G(RORDATA("RANGE")),'$G(RORDATA("CALC")) Q 0
"RTN","RORX018",296,0)
 ;if range does not exist for test, and any result is considered 'invalid',
"RTN","RORX018",297,0)
 ;then skip the range check and include data in the report
"RTN","RORX018",298,0)
 I '$G(RORDATA("RANGE")),'$G(RORDATA("CALC")) Q 1
"RTN","RORX018",299,0)
 ;
"RTN","RORX018",300,0)
 N I,RETURN S RETURN=1 ;default is set to 'within range'
"RTN","RORX018",301,0)
 S I=0
"RTN","RORX018",302,0)
 F  S I=$O(RORDATA("SCORE",I)) Q:I=""  D
"RTN","RORX018",303,0)
 . I $G(RORDATA("L",I))'="" D
"RTN","RORX018",304,0)
 .. I $G(RORDATA("SCORE",I))<RORDATA("L",I) S RETURN=0
"RTN","RORX018",305,0)
 . I $G(RORDATA("H",I))'="" D
"RTN","RORX018",306,0)
 .. I $G(RORDATA("SCORE",I))>RORDATA("H",I) S RETURN=0
"RTN","RORX018",307,0)
 Q RETURN
"RTN","RORX018",308,0)
 ;
"RTN","RORX018",309,0)
 ;*****************************************************************************
"RTN","RORX018",310,0)
 ;ADD 1 TO APPROPRIATE BMI CATEGORY
"RTN","RORX018",311,0)
 ;
"RTN","RORX018",312,0)
 ;INPUT
"RTN","RORX018",313,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX018",314,0)
 ;           RORDATA("SCORE",N) - calculated BMI value for test N
"RTN","RORX018",315,0)
 ;OUTPUT
"RTN","RORX018",316,0)
 ;  RORDATA("NP",N) - incremented by 1 if BMI in Nth range
"RTN","RORX018",317,0)
 ;           
"RTN","RORX018",318,0)
 ;*****************************************************************************
"RTN","RORX018",319,0)
BMICAT(RORDATA) ;
"RTN","RORX018",320,0)
 I '$G(RORDATA("SCORE",1)) Q
"RTN","RORX018",321,0)
 I $G(RORDATA("SCORE",1))<18.5 S RORDATA("NP",1)=$G(RORDATA("NP",1))+1 Q
"RTN","RORX018",322,0)
 I $G(RORDATA("SCORE",1))<25 S RORDATA("NP",2)=$G(RORDATA("NP",2))+1 Q
"RTN","RORX018",323,0)
 I $G(RORDATA("SCORE",1))<30 S RORDATA("NP",3)=$G(RORDATA("NP",3))+1 Q
"RTN","RORX018",324,0)
 I $G(RORDATA("SCORE",1))<35 S RORDATA("NP",4)=$G(RORDATA("NP",4))+1 Q
"RTN","RORX018",325,0)
 I $G(RORDATA("SCORE",1))<40 S RORDATA("NP",5)=$G(RORDATA("NP",5))+1 Q
"RTN","RORX018",326,0)
 I $G(RORDATA("SCORE",1))>39 S RORDATA("NP",6)=$G(RORDATA("NP",6))+1 Q
"RTN","RORX018",327,0)
 Q
"RTN","RORX018",328,0)
 ;
"RTN","RORX018",329,0)
 ;*****************************************************************************
"RTN","RORX018",330,0)
 ;ADD THE SUMMARY DATA TO THE REPORT
"RTN","RORX018",331,0)
 ;
"RTN","RORX018",332,0)
 ;INPUT
"RTN","RORX018",333,0)
 ;  RORTSK   Task number and task parameters
"RTN","RORX018",334,0)
 ;  REPORT   'Report' XML tag number
"RTN","RORX018",335,0)
 ;  RORDATA  Array with summary data:
"RTN","RORX018",336,0)
 ;           RORDATA("NP",N) - total count of patients in Nth range
"RTN","RORX018",337,0)
 ;
"RTN","RORX018",338,0)
 ;OUTPUT
"RTN","RORX018",339,0)
 ;  DATA     'Data' XML tag number or error code
"RTN","RORX018",340,0)
 ;*****************************************************************************
"RTN","RORX018",341,0)
SUMMARY(RORTSK,REPORT,RORDATA) ; Add the summary values to the report
"RTN","RORX018",342,0)
 N SUMMARY,I,STAG,RORCATNUM,RORNAME,RORRANGE
"RTN","RORX018",343,0)
 S SUMMARY=$$ADDVAL^RORTSK11(RORTSK,"SUMMARY",,REPORT)
"RTN","RORX018",344,0)
 Q:SUMMARY<0 SUMMARY
"RTN","RORX018",345,0)
 ;add data for the summary entries
"RTN","RORX018",346,0)
 F I=1:1:RORDATA("RCNT")  D  Q:STAG<0
"RTN","RORX018",347,0)
 . S STAG=$$ADDVAL^RORTSK11(RORTSK,"DATA",,SUMMARY)
"RTN","RORX018",348,0)
 . Q:STAG<0
"RTN","RORX018",349,0)
 . ;get each value
"RTN","RORX018",350,0)
 . S RORCATNUM="S"_I S RORNAME=$P($T(@RORCATNUM),";;",2)
"RTN","RORX018",351,0)
 . S RORRANGE=$P($T(@RORCATNUM),";;",3)
"RTN","RORX018",352,0)
 . D ADDVAL^RORTSK11(RORTSK,"DESC",$G(RORNAME),STAG) ;severity
"RTN","RORX018",353,0)
 . D ADDVAL^RORTSK11(RORTSK,"VALUES",$G(RORRANGE),STAG) ;range
"RTN","RORX018",354,0)
 . D ADDVAL^RORTSK11(RORTSK,"NP",$G(RORDATA("NP",I)),STAG) ;count
"RTN","RORX018",355,0)
 Q STAG
"RTN","RORX018",356,0)
 ;
"RTN","RORX018",357,0)
 ;*****************************************************************************
"RTN","RORX018",358,0)
 ;OUTPUT THE REPORT 'RANGE' PARAMETERS
"RTN","RORX018",359,0)
 ;
"RTN","RORX018",360,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX018",361,0)
 ;
"RTN","RORX018",362,0)
 ; Return Values:
"RTN","RORX018",363,0)
 ;       <0  Error code
"RTN","RORX018",364,0)
 ;        0  Ok
"RTN","RORX018",365,0)
 ;*****************************************************************************
"RTN","RORX018",366,0)
PARAMS(PARTAG,RORDATA) ;
"RTN","RORX018",367,0)
 N PARAMS,TMP,RC S RC=0
"RTN","RORX018",368,0)
 S RORDATA("RANGE")=0 ;initialize to 'no range passed in'
"RTN","RORX018",369,0)
 ;--- Lab test ranges
"RTN","RORX018",370,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORX018",371,0)
 . N GRC,ELEMENT,NODE,RTAG,RANGE
"RTN","RORX018",372,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX018",373,0)
 . S RTAG=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGES",,PARTAG)
"RTN","RORX018",374,0)
 . S (GRC,RC)=0
"RTN","RORX018",375,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORX018",376,0)
 . . S RANGE=0,TMP=$$RTEXT(GRC)
"RTN","RORX018",377,0)
 . . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGE",TMP,RTAG)
"RTN","RORX018",378,0)
 . . I ELEMENT<0  S RC=ELEMENT  Q
"RTN","RORX018",379,0)
 . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"ID",GRC)
"RTN","RORX018",380,0)
 . . ;--- Process the range values
"RTN","RORX018",381,0)
 . . S TMP=$G(@NODE@(GRC,"L"))
"RTN","RORX018",382,0)
 . . I TMP'=""  D  S RANGE=1
"RTN","RORX018",383,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"LOW",TMP)
"RTN","RORX018",384,0)
 . . S TMP=$G(@NODE@(GRC,"H"))
"RTN","RORX018",385,0)
 . . I TMP'=""  D  S RANGE=1
"RTN","RORX018",386,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"HIGH",TMP)
"RTN","RORX018",387,0)
 . . I RANGE D
"RTN","RORX018",388,0)
 . . . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"RANGE",1)
"RTN","RORX018",389,0)
 . . . S RORDATA("RANGE")=1 ;range exists
"RTN","RORX018",390,0)
 ;--- Success
"RTN","RORX018",391,0)
 Q RC
"RTN","RORX018",392,0)
 ;
"RTN","RORX018",393,0)
 ;*****************************************************************************
"RTN","RORX018",394,0)
 ;RETURN RANGE TEXT
"RTN","RORX018",395,0)
 ;
"RTN","RORX018",396,0)
 ; GRC   Test ID
"RTN","RORX018",397,0)
 ;
"RTN","RORX018",398,0)
 ; Return Values:
"RTN","RORX018",399,0)
 ;       Description - <range>
"RTN","RORX018",400,0)
 ;*****************************************************************************
"RTN","RORX018",401,0)
RTEXT(GRC) ;
"RTN","RORX018",402,0)
 N RANGE,TMP
"RTN","RORX018",403,0)
 S RANGE=""
"RTN","RORX018",404,0)
 ;--- Range
"RTN","RORX018",405,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C",GRC))>1 D
"RTN","RORX018",406,0)
 . ;--- Low
"RTN","RORX018",407,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"L"))
"RTN","RORX018",408,0)
 . S:TMP'="" RANGE=RANGE_" not less than "_TMP
"RTN","RORX018",409,0)
 . ;--- High
"RTN","RORX018",410,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"H"))
"RTN","RORX018",411,0)
 . I TMP'=""  D:RANGE'=""  S RANGE=RANGE_" not greater than "_TMP
"RTN","RORX018",412,0)
 . . S RANGE=RANGE_" and"
"RTN","RORX018",413,0)
 ;--- Description
"RTN","RORX018",414,0)
 S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC))
"RTN","RORX018",415,0)
 S:TMP="" TMP="Unknown ("_GRC_")"
"RTN","RORX018",416,0)
 Q TMP_" - "_$S(RANGE'="":"numeric results"_RANGE,1:"all results")
"RTN","RORX018",417,0)
 ;
"RTN","RORX018",418,0)
 ;*****************************************************************************
"RTN","RORX018",419,0)
 ;ADD THE HEADERS TO THE REPORT
"RTN","RORX018",420,0)
 ;
"RTN","RORX018",421,0)
 ;INPUT
"RTN","RORX018",422,0)
 ;  PARTAG  Reference IEN to the 'report' parent XML tag
"RTN","RORX018",423,0)
 ;
"RTN","RORX018",424,0)
 ;OUTPUT
"RTN","RORX018",425,0)
 ;  <0      error
"RTN","RORX018",426,0)
 ;  >0      'Header' XML tag number or error code
"RTN","RORX018",427,0)
 ;*****************************************************************************
"RTN","RORX018",428,0)
HEADER(PARTAG) ;
"RTN","RORX018",429,0)
 ;;PATIENTS(#,NAME,LAST4,DOD,VITAL,DATE,RESULT,BMI)
"RTN","RORX018",430,0)
 ;
"RTN","RORX018",431,0)
 N HEADER,RC
"RTN","RORX018",432,0)
 ;call to $$HEADER^RORXU002 will populate the report created date, task number,
"RTN","RORX018",433,0)
 ;last registry update, and last data extraction.
"RTN","RORX018",434,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX018",435,0)
 Q:HEADER<0 HEADER
"RTN","RORX018",436,0)
 ;automatically build the table defintion(s) listed under the header tag above
"RTN","RORX018",437,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX018",HEADER)
"RTN","RORX018",438,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX018",439,0)
 ;
"RTN","RORX018",440,0)
 ;*****************************************************************************
"RTN","RORX018",441,0)
 ;INITIALIZE THE NUMBER OF PATIENTS IN EACH CATEGORY TO 0
"RTN","RORX018",442,0)
 ;
"RTN","RORX018",443,0)
 ;INPUT
"RTN","RORX018",444,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX018",445,0)
 ;           RORDATA("RCNT") Number of categories to initialize
"RTN","RORX018",446,0)
 ;*****************************************************************************
"RTN","RORX018",447,0)
INIT(RORDATA) ;
"RTN","RORX018",448,0)
 I $G(RORDATA("RCNT"))="" Q
"RTN","RORX018",449,0)
 F I=1:1:RORDATA("RCNT") D
"RTN","RORX018",450,0)
 . S RORDATA("NP",I)=0
"RTN","RORX018",451,0)
 Q
"RTN","RORX018",452,0)
 ;
"RTN","RORX018",453,0)
 ;*****************************************************************************
"RTN","RORX018",454,0)
 ;BMI Categories and Values for the summary table.
"RTN","RORX018",455,0)
 ;NOTE: the number of entries below must match the value of RORDATA("RCNT")
"RTN","RORX018",456,0)
 ;*****************************************************************************
"RTN","RORX018",457,0)
S1 ;;Underweight;;<18.5
"RTN","RORX018",458,0)
S2 ;;Normal weight;;18.5-24.9
"RTN","RORX018",459,0)
S3 ;;Overweight;;25.0-29.99
"RTN","RORX018",460,0)
S4 ;;Class I Obesity;;30.0-34.9
"RTN","RORX018",461,0)
S5 ;;Class II Obesity;;35-39.9
"RTN","RORX018",462,0)
S6 ;;Class III Obesity;;>=40
"RTN","RORX019")
0^23^B84618518^B84618518
"RTN","RORX019",1,0)
RORX019 ;BPOIFO/ACS - MELD SCORE BY RANGE ;11/1/09
"RTN","RORX019",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,13**;Feb 17, 2006;Build 27
"RTN","RORX019",3,0)
 ;
"RTN","RORX019",4,0)
 ;******************************************************************************
"RTN","RORX019",5,0)
 ;******************************************************************************
"RTN","RORX019",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX019",7,0)
 ;        
"RTN","RORX019",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX019",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX019",10,0)
 ;ROR*1.5*10   MAR  2010   A SAUNDERS   Routine created
"RTN","RORX019",11,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX019",12,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX019",13,0)
 ;                                      Modified XML tags for sort.
"RTN","RORX019",14,0)
 ;                                      
"RTN","RORX019",15,0)
 ;******************************************************************************
"RTN","RORX019",16,0)
 ;******************************************************************************
"RTN","RORX019",17,0)
 Q
"RTN","RORX019",18,0)
 ;
"RTN","RORX019",19,0)
 ;************************************************************************
"RTN","RORX019",20,0)
 ;COMPILE THE "MELD SCORE BY RANGE" REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",21,0)
 ;REPORT CODE: 019
"RTN","RORX019",22,0)
 ;
"RTN","RORX019",23,0)
 ;Called by entry "MELD Score by Range" in ROR REPORT PARAMETERS (#799.34)
"RTN","RORX019",24,0)
 ;
"RTN","RORX019",25,0)
 ;INPUT
"RTN","RORX019",26,0)
 ;  RORTSK     Task number and task parameters
"RTN","RORX019",27,0)
 ;
"RTN","RORX019",28,0)
 ;
"RTN","RORX019",29,0)
 ;  Below is a sample RORTSK input array for utilization in 2003, most recent
"RTN","RORX019",30,0)
 ;  scores, MELD range from 10 to 30, MELD Na range from 20 to 50:
"RTN","RORX019",31,0)
 ;  
"RTN","RORX019",32,0)
 ;  RORTSK=nnn   (the task number)
"RTN","RORX019",33,0)
 ;  RORTSK("EP")="$$MLDRANGE^RORX019"
"RTN","RORX019",34,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","END")=3031231
"RTN","RORX019",35,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","START")=3030101
"RTN","RORX019",36,0)
 ;  RORTSK("PARAMS","ICD9FILT","A","FILTER")="ALL"
"RTN","RORX019",37,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1)=""
"RTN","RORX019",38,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"H")=30
"RTN","RORX019",39,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"L")=10
"RTN","RORX019",40,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2)=""
"RTN","RORX019",41,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"H")=50
"RTN","RORX019",42,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"L")=20
"RTN","RORX019",43,0)
 ;  RORTSK("PARAMS","OPTIONS","A","COMPLETE")=1
"RTN","RORX019",44,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX019",45,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_AFTER")=1
"RTN","RORX019",46,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_BEFORE")=1
"RTN","RORX019",47,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_DURING")=1
"RTN","RORX019",48,0)
 ;  RORTSK("PARAMS","REGIEN")=1
"RTN","RORX019",49,0)
 ;  
"RTN","RORX019",50,0)
 ;  If the user selected an 'as of' date = 12/31/2005:
"RTN","RORX019",51,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX019",52,0)
 ;     is replaced with:  
"RTN","RORX019",53,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MAX_DATE")=3051231
"RTN","RORX019",54,0)
 ;
"RTN","RORX019",55,0)
 ;
"RTN","RORX019",56,0)
 ;OUTPUT
"RTN","RORX019",57,0)
 ;  <0  Error code
"RTN","RORX019",58,0)
 ;   0  Ok
"RTN","RORX019",59,0)
 ;************************************************************************
"RTN","RORX019",60,0)
MLDRANGE(RORTSK) ;
"RTN","RORX019",61,0)
 N RORREG        ; Registry IEN
"RTN","RORX019",62,0)
 N RORSDT        ; report start date
"RTN","RORX019",63,0)
 N ROREDT        ; report end date
"RTN","RORX019",64,0)
 N RORDATA       ; array to hold ROR data and summary totals
"RTN","RORX019",65,0)
 N RORPTIEN      ; IEN of patient in the ROR registry
"RTN","RORX019",66,0)
 N DFN           ; DFN of patient in the PATIENT file (#2)
"RTN","RORX019",67,0)
 N RORLC         ; sub-file and array of LOINC codes to search Lab data
"RTN","RORX019",68,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX019",69,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX019",70,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX019",71,0)
 ;
"RTN","RORX019",72,0)
 N REPORT,RC,I,TMP,SFLAGS,PARAMS
"RTN","RORX019",73,0)
 ;--- Establish the root XML Node of the report and put into output
"RTN","RORX019",74,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX019",75,0)
 Q:REPORT<0 REPORT
"RTN","RORX019",76,0)
 ;
"RTN","RORX019",77,0)
 ;--- Get registry IEN
"RTN","RORX019",78,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX019",79,0)
 ;
"RTN","RORX019",80,0)
 ;--- Set standard report parameters data into output:
"RTN","RORX019",81,0)
 ;registry, comment, patients (before, during, after), options (summary vs.
"RTN","RORX019",82,0)
 ;complete), other registries, and other diagnoses
"RTN","RORX019",83,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS) Q:PARAMS<0 PARAMS
"RTN","RORX019",84,0)
 ;
"RTN","RORX019",85,0)
 ;--- Add range parameters to output
"RTN","RORX019",86,0)
 S RC=$$PARAMS^RORX019A(PARAMS,.RORDATA,.RORTSK) Q:RC<0 RC
"RTN","RORX019",87,0)
 ;
"RTN","RORX019",88,0)
 ;--- Put report header data into output:
"RTN","RORX019",89,0)
 ;report creation date, task number, last registry update date, and
"RTN","RORX019",90,0)
 ;last data extraction date
"RTN","RORX019",91,0)
 S RC=$$HEADER(REPORT) Q:RC<0 RC
"RTN","RORX019",92,0)
 ;
"RTN","RORX019",93,0)
 ;--- Get MELD ranges requested
"RTN","RORX019",94,0)
 ;I=1 ==> report = MELD      I=2 ==> report = MELD Na
"RTN","RORX019",95,0)
 S I=0 F  S I=$O(RORTSK("PARAMS","LRGRANGES","C",I)) Q:I=""  D
"RTN","RORX019",96,0)
 . S RORDATA("L",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"L")) ;low range
"RTN","RORX019",97,0)
 . S RORDATA("H",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"H")) ;high range
"RTN","RORX019",98,0)
 ;
"RTN","RORX019",99,0)
 ;--- Get Max Date for test results  OUTPUT: RORDATA("DATE")
"RTN","RORX019",100,0)
 S RORDATA("DATE")=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORX019",101,0)
 I $G(RORDATA("DATE"))="" S RORDATA("DATE")=DT
"RTN","RORX019",102,0)
 ;
"RTN","RORX019",103,0)
 ;--- Create 'patients' table
"RTN","RORX019",104,0)
 N RORBODY S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX019",105,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX019",106,0)
 ;
"RTN","RORX019",107,0)
 ;--- Check utilization
"RTN","RORX019",108,0)
 N CNT,ECNT,UTSDT,UTEDT,SKIPSDT,SKIPEDT
"RTN","RORX019",109,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX019",110,0)
 ; Utilization date range is always sent
"RTN","RORX019",111,0)
 S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX019",112,0)
 S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX019",113,0)
 ; Combined date range
"RTN","RORX019",114,0)
 S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,$G(UTSDT))
"RTN","RORX019",115,0)
 S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,$G(UTEDT))
"RTN","RORX019",116,0)
 ;
"RTN","RORX019",117,0)
 ;--- Number of patients in the registry - used for calculating the
"RTN","RORX019",118,0)
 ;task progress percentage (shown on the GUI screen)
"RTN","RORX019",119,0)
 N RORPTCNT S RORPTCNT=$$REGSIZE^RORUTL02(+RORREG) S:RORPTCNT<0 RORPTCNT=0
"RTN","RORX019",120,0)
 ;
"RTN","RORX019",121,0)
 ;--- LOINC codes
"RTN","RORX019",122,0)
 ;create list for future comparison
"RTN","RORX019",123,0)
 S RORDATA("CR_LOINC")=";15045-8;21232-4;2160-0;" ;Creatinine
"RTN","RORX019",124,0)
 S RORDATA("BIL_LOINC")=";14631-6;1975-2;" ;Bilirubin
"RTN","RORX019",125,0)
 S RORDATA("SOD_LOINC")=";2947-0;2951-2;32717-1;" ;Sodium
"RTN","RORX019",126,0)
 S RORDATA("INR_LOINC")=";34714-6;6301-6;" ;INR 
"RTN","RORX019",127,0)
 ;set up array for future call to Lab API
"RTN","RORX019",128,0)
 S RORLC="CH" ;chemistry sub-file to search in #63
"RTN","RORX019",129,0)
 S RORLC(1)="15045-8^LN" ;Creatinine LOINC
"RTN","RORX019",130,0)
 S RORLC(2)="21232-4^LN" ;Creatinine LOINC
"RTN","RORX019",131,0)
 S RORLC(3)="2160-0^LN"  ;Creatinine LOINC
"RTN","RORX019",132,0)
 S RORLC(4)="14631-6^LN" ;Bilirubin LOINC
"RTN","RORX019",133,0)
 S RORLC(5)="1975-2^LN"  ;Bilirubin LOINC
"RTN","RORX019",134,0)
 S RORLC(6)="2947-0^LN"  ;Sodium LOINC
"RTN","RORX019",135,0)
 S RORLC(7)="2951-2^LN"  ;Sodium LOINC
"RTN","RORX019",136,0)
 S RORLC(8)="32717-1^LN" ;Sodium LOINC
"RTN","RORX019",137,0)
 S RORLC(9)="34714-6^LN" ;INR LOINC
"RTN","RORX019",138,0)
 S RORLC(10)="6301-6^LN" ;INR LOINC
"RTN","RORX019",139,0)
 ;
"RTN","RORX019",140,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX019",141,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX019",142,0)
 ;
"RTN","RORX019",143,0)
 ;--- Get registry records
"RTN","RORX019",144,0)
 N RCC,FLAG,TMP,DFN,SKIP
"RTN","RORX019",145,0)
 S (CNT,RORPTIEN,RC)=0
"RTN","RORX019",146,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX019",147,0)
 F  S RORPTIEN=$O(^RORDATA(798,"AC",RORREG,RORPTIEN))  Q:RORPTIEN'>0  D  Q:RC<0
"RTN","RORX019",148,0)
 . ;--- Calculate 'progress' for the GUI display
"RTN","RORX019",149,0)
 . S TMP=$S(RORPTCNT>0:CNT/RORPTCNT,1:"")
"RTN","RORX019",150,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX019",151,0)
 . S CNT=CNT+1
"RTN","RORX019",152,0)
 . ;--- Get patient DFN
"RTN","RORX019",153,0)
 . S DFN=$$PTIEN^RORUTL01(RORPTIEN) Q:DFN'>0
"RTN","RORX019",154,0)
 . ;check for patient list and quit if not on list
"RTN","RORX019",155,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",DFN)) Q
"RTN","RORX019",156,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX019",157,0)
 . Q:$$SKIP^RORXU005(RORPTIEN,SFLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX019",158,0)
 . ;--- Check if patient has passed the ICD9 filter
"RTN","RORX019",159,0)
 . S RCC=0
"RTN","RORX019",160,0)
 . I FLAG'="ALL" D
"RTN","RORX019",161,0)
 . . S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX019",162,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX019",163,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX019",164,0)
 . ;
"RTN","RORX019",165,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX019",166,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,DFN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX019",167,0)
 . ;
"RTN","RORX019",168,0)
 . ;--- Check for any utilization in the corresponding date range
"RTN","RORX019",169,0)
 . S SKIP=0 I $G(UTSDT)>0 D
"RTN","RORX019",170,0)
 .. N UTIL K TMP S TMP("ALL")=1
"RTN","RORX019",171,0)
 .. S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,DFN,.TMP)
"RTN","RORX019",172,0)
 .. S:'UTIL SKIP=1
"RTN","RORX019",173,0)
 . ;--- Skip the patient if they have no utilization in the range
"RTN","RORX019",174,0)
 . I $G(SKIP) Q
"RTN","RORX019",175,0)
 . ;
"RTN","RORX019",176,0)
 . ;--- For each patient, process the registry record and create report
"RTN","RORX019",177,0)
 . I $$PATIENT(DFN,RORBODY,.RORDATA,RORPTIEN,.RORLC)<0 S ECNT=ECNT+1 ;error count
"RTN","RORX019",178,0)
 ;
"RTN","RORX019",179,0)
 K ^TMP("RORX019",$J)
"RTN","RORX019",180,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX019",181,0)
 ;
"RTN","RORX019",182,0)
 ;************************************************************************
"RTN","RORX019",183,0)
 ;ADD PATIENT DATA TO THE REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",184,0)
 ;
"RTN","RORX019",185,0)
 ;INPUT
"RTN","RORX019",186,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX019",187,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX019",188,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019",189,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX019",190,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX019",191,0)
 ;
"RTN","RORX019",192,0)
 ;OUTPUT
"RTN","RORX019",193,0)
 ;  1        ok
"RTN","RORX019",194,0)
 ; <0        error
"RTN","RORX019",195,0)
 ;************************************************************************
"RTN","RORX019",196,0)
PATIENT(DFN,PTAG,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX019",197,0)
 ;quit if no MELD score can be calculated
"RTN","RORX019",198,0)
 I $$CALCMLD^RORX019A(DFN,PTAG,.RORDATA,RORPTIEN,.RORLC)<0 Q 1
"RTN","RORX019",199,0)
 I '$$INRANGE(.RORDATA) Q 1  ;exclude patient if score is out of range
"RTN","RORX019",200,0)
 ;--- Get patient data and put into the report
"RTN","RORX019",201,0)
 N VADM,VA,RORDOD,MTAG,TTAG
"RTN","RORX019",202,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX019",203,0)
 ;--- The <PATIENT> tag
"RTN","RORX019",204,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTAG,,DFN)
"RTN","RORX019",205,0)
 I PTAG<0 Q PTAG
"RTN","RORX019",206,0)
 ;--- Patient Name
"RTN","RORX019",207,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX019",208,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX019",209,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX019",210,0)
 ;--- Date of death
"RTN","RORX019",211,0)
 S RORDOD=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX019",212,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$G(RORDOD),PTAG,1)
"RTN","RORX019",213,0)
 ;--- MELDDATA tag
"RTN","RORX019",214,0)
 S MTAG=$$ADDVAL^RORTSK11(RORTSK,"MELDDATA",,PTAG)
"RTN","RORX019",215,0)
 I MTAG<0 Q MTAG
"RTN","RORX019",216,0)
 ;--- Test Result Values
"RTN","RORX019",217,0)
 N TNAME,TNAMEMIX F TNAME="BILI","CR","INR","NA" D
"RTN","RORX019",218,0)
 . ;--- TEST tag
"RTN","RORX019",219,0)
 . S TTAG=$$ADDVAL^RORTSK11(RORTSK,"TEST",,MTAG)
"RTN","RORX019",220,0)
 . I TTAG<0 Q
"RTN","RORX019",221,0)
 . ;--- Mixed case test name for GUI application
"RTN","RORX019",222,0)
 . I TNAME="BILI" S TNAMEMIX="Bili"
"RTN","RORX019",223,0)
 . I TNAME="CR" S TNAMEMIX="Cr"
"RTN","RORX019",224,0)
 . I TNAME="INR" S TNAMEMIX="INR"
"RTN","RORX019",225,0)
 . I TNAME="NA" S TNAMEMIX="Na"
"RTN","RORX019",226,0)
 . ;---  Test Name
"RTN","RORX019",227,0)
 . D ADDVAL^RORTSK11(RORTSK,"TNAME",TNAMEMIX,TTAG)
"RTN","RORX019",228,0)
 . ;---  Test Date
"RTN","RORX019",229,0)
 . D ADDVAL^RORTSK11(RORTSK,"DATE",$P($G(RORDATA(TNAME)),U,2),TTAG)
"RTN","RORX019",230,0)
 . ;---  Test Result Value
"RTN","RORX019",231,0)
 . D ADDVAL^RORTSK11(RORTSK,"RESULT",$P($G(RORDATA(TNAME)),U,1),TTAG)
"RTN","RORX019",232,0)
 ;---  MELD score
"RTN","RORX019",233,0)
 I RORDATA("IDLST")[1 D ADDVAL^RORTSK11(RORTSK,"MELD",$G(RORDATA("SCORE",1)),PTAG,3)
"RTN","RORX019",234,0)
 ;---  MELD-Na Score
"RTN","RORX019",235,0)
 I RORDATA("IDLST")[2 D ADDVAL^RORTSK11(RORTSK,"MELDNA",$G(RORDATA("SCORE",2)),PTAG,3)
"RTN","RORX019",236,0)
 Q ($S($G(TTAG)<0:TTAG,1:1))
"RTN","RORX019",237,0)
 ;
"RTN","RORX019",238,0)
 ;************************************************************************
"RTN","RORX019",239,0)
 ;DETERMINE IF THE SCORES ARE WITHIN THE REQUESTED RANGES
"RTN","RORX019",240,0)
 ;-- If both tests contain ranges: scores for BOTH tests must fall in the
"RTN","RORX019",241,0)
 ;ranges...treated like an 'AND'
"RTN","RORX019",242,0)
 ;-- If 1 test contains a range: only patients with scores in the requested range
"RTN","RORX019",243,0)
 ;will be displayed, and the test without the range will also be displayed
"RTN","RORX019",244,0)
 ;with the calculated score (if applicable)
"RTN","RORX019",245,0)
 ;-- If neither test contains a range: all patients and their test results
"RTN","RORX019",246,0)
 ;and scores (null if they can't be calculated) are returned
"RTN","RORX019",247,0)
 ;
"RTN","RORX019",248,0)
 ;INPUT
"RTN","RORX019",249,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019",250,0)
 ;OUTPUT
"RTN","RORX019",251,0)
 ;  1        include on report
"RTN","RORX019",252,0)
 ;  0        exclude from report
"RTN","RORX019",253,0)
 ;************************************************************************
"RTN","RORX019",254,0)
INRANGE(RORDATA) ;
"RTN","RORX019",255,0)
 ;include all data and quit if no range was sent in
"RTN","RORX019",256,0)
 I ('$G(RORDATA("RANGE",1))&('$G(RORDATA("RANGE",2)))) Q 1
"RTN","RORX019",257,0)
 ;
"RTN","RORX019",258,0)
 N I,RETURN,SCORE S RETURN=1 ;default is set to 'within range'
"RTN","RORX019",259,0)
 S I=0 F  S I=$O(RORDATA("RANGE",I)) Q:I=""  D
"RTN","RORX019",260,0)
 . I $G(RORDATA("L",I))'="" D
"RTN","RORX019",261,0)
 .. S SCORE=$G(RORDATA("SCORE",I))
"RTN","RORX019",262,0)
 .. I $G(SCORE)="" S RETURN=0 Q
"RTN","RORX019",263,0)
 .. I SCORE<RORDATA("L",I) S RETURN=0
"RTN","RORX019",264,0)
 . I $G(RORDATA("H",I))'="" D
"RTN","RORX019",265,0)
 .. S SCORE=$G(RORDATA("SCORE",I))
"RTN","RORX019",266,0)
 .. I $G(SCORE)="" S RETURN=0 Q
"RTN","RORX019",267,0)
 .. I SCORE>$G(RORDATA("H",I)) S RETURN=0
"RTN","RORX019",268,0)
 ;
"RTN","RORX019",269,0)
 Q RETURN
"RTN","RORX019",270,0)
 ;
"RTN","RORX019",271,0)
 ;************************************************************************
"RTN","RORX019",272,0)
 ;ADD THE HEADERS TO THE REPORT (EXTRINISIC FUNCTION)
"RTN","RORX019",273,0)
 ;
"RTN","RORX019",274,0)
 ;INPUT
"RTN","RORX019",275,0)
 ;  PARTAG  Reference IEN to the 'report' parent XML tag
"RTN","RORX019",276,0)
 ;
"RTN","RORX019",277,0)
 ;OUTPUT
"RTN","RORX019",278,0)
 ;  <0      error
"RTN","RORX019",279,0)
 ;  >0      'Header' XML tag number or error code
"RTN","RORX019",280,0)
 ;************************************************************************
"RTN","RORX019",281,0)
HEADER(PARTAG) ;
"RTN","RORX019",282,0)
 N HEADER,RC,COL,COLUMNS,TMP S RC=0
"RTN","RORX019",283,0)
 ;call to $$HEADER^RORXU002 will populate the report created date, task number,
"RTN","RORX019",284,0)
 ;last registry update, and last data extraction.
"RTN","RORX019",285,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX019",286,0)
 Q:HEADER<0 HEADER
"RTN","RORX019",287,0)
 ;manually build the table defintion(s) listed below
"RTN","RORX019",288,0)
 ;PATIENTS(#,NAME,LAST4,DOD,TEST,DATE,RESULT,MELD,MELDNA)
"RTN","RORX019",289,0)
 S COLUMNS=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORX019",290,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"NAME","PATIENTS")
"RTN","RORX019",291,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"HEADER","1")
"RTN","RORX019",292,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"FOOTER","1")
"RTN","RORX019",293,0)
 ;--- Required columns
"RTN","RORX019",294,0)
 F COL="#","NAME","LAST4","DOD","TEST","DATE","RESULT"  D
"RTN","RORX019",295,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",296,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX019",297,0)
 ;--- Additional columns
"RTN","RORX019",298,0)
 I RORDATA("IDLST")[1 D
"RTN","RORX019",299,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",300,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","MELD")
"RTN","RORX019",301,0)
 I RORDATA("IDLST")[2 D
"RTN","RORX019",302,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX019",303,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME","MELDNA")
"RTN","RORX019",304,0)
 ;---
"RTN","RORX019",305,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX019",306,0)
 ;
"RTN","RORX019A")
0^28^B87729688^B87729688
"RTN","RORX019A",1,0)
RORX019A ;BPOIFO/ACS - MELD SCORE BY RANGE (CONT.) ;11/1/09
"RTN","RORX019A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,13**;Feb 17, 2006;Build 27
"RTN","RORX019A",3,0)
 ;
"RTN","RORX019A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX019A",5,0)
 ;
"RTN","RORX019A",6,0)
 ; #10105 $$LN^XLFMTH (supported)
"RTN","RORX019A",7,0)
 ; #3556  GCPR^LA7QRY (supported)
"RTN","RORX019A",8,0)
 ;
"RTN","RORX019A",9,0)
 ;******************************************************************************
"RTN","RORX019A",10,0)
 ;******************************************************************************
"RTN","RORX019A",11,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX019A",12,0)
 ;        
"RTN","RORX019A",13,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX019A",14,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX019A",15,0)
 ;ROR*1.5*10   MAR  2010   A SAUNDERS   Routine created
"RTN","RORX019A",16,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Moved tag CALCMLD to this routine
"RTN","RORX019A",17,0)
 ;                                      
"RTN","RORX019A",18,0)
 ;******************************************************************************
"RTN","RORX019A",19,0)
 ;******************************************************************************
"RTN","RORX019A",20,0)
 Q
"RTN","RORX019A",21,0)
 ;
"RTN","RORX019A",22,0)
 ;*****************************************************************************
"RTN","RORX019A",23,0)
 ;OUTPUT REPORT 'RANGE' PARAMETERS, SET UP REPORT ID LIST (EXTRINISIC FUNCTION)
"RTN","RORX019A",24,0)
 ;
"RTN","RORX019A",25,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX019A",26,0)
 ;
"RTN","RORX019A",27,0)
 ; Return Values:
"RTN","RORX019A",28,0)
 ;        RORDATA("IDLST") - list of IDs for tests requested
"RTN","RORX019A",29,0)
 ;       <0  Error code
"RTN","RORX019A",30,0)
 ;        0  Ok
"RTN","RORX019A",31,0)
 ;*****************************************************************************
"RTN","RORX019A",32,0)
PARAMS(PARTAG,RORDATA,RORTSK) ;
"RTN","RORX019A",33,0)
 N PARAMS,DESC,TMP,RC S RC=0
"RTN","RORX019A",34,0)
 ;--- Lab test ranges
"RTN","RORX019A",35,0)
 S RORDATA("RANGE",1)=0 ;initialize MELD to 'no range passed in'
"RTN","RORX019A",36,0)
 S RORDATA("RANGE",2)=0 ;initialize MELD Na to 'no range passed in'
"RTN","RORX019A",37,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORX019A",38,0)
 . N GRC,ELEMENT,NODE,RTAG,RANGE
"RTN","RORX019A",39,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORX019A",40,0)
 . S RTAG=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGES",,PARTAG)
"RTN","RORX019A",41,0)
 . S (GRC,RC)=0
"RTN","RORX019A",42,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORX019A",43,0)
 .. S RANGE=0,DESC=$$RTEXT(GRC,.RORDATA,.RORTSK) ;get range description
"RTN","RORX019A",44,0)
 .. S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"LRGRANGE",DESC,RTAG) ;add desc to output
"RTN","RORX019A",45,0)
 .. I ELEMENT<0 S RC=ELEMENT Q
"RTN","RORX019A",46,0)
 .. D ADDATTR^RORTSK11(RORTSK,ELEMENT,"ID",GRC)
"RTN","RORX019A",47,0)
 .. ;add test ID to the test ID 'list'
"RTN","RORX019A",48,0)
 .. S RORDATA("IDLST")=$G(RORDATA("IDLST"))_$S($G(RORDATA("IDLST"))'="":","_GRC,1:GRC)
"RTN","RORX019A",49,0)
 .. ;--- Process the range values
"RTN","RORX019A",50,0)
 .. S TMP=$G(@NODE@(GRC,"L"))
"RTN","RORX019A",51,0)
 .. I TMP'="" D  S RANGE=1
"RTN","RORX019A",52,0)
 ... D ADDATTR^RORTSK11(RORTSK,ELEMENT,"LOW",TMP) S RORDATA("RANGE",GRC)=1
"RTN","RORX019A",53,0)
 .. S TMP=$G(@NODE@(GRC,"H"))
"RTN","RORX019A",54,0)
 .. I TMP'="" D  S RANGE=1
"RTN","RORX019A",55,0)
 ... D ADDATTR^RORTSK11(RORTSK,ELEMENT,"HIGH",TMP) S RORDATA("RANGE",GRC)=1
"RTN","RORX019A",56,0)
 .. I RANGE D ADDATTR^RORTSK11(RORTSK,ELEMENT,"RANGE",1)
"RTN","RORX019A",57,0)
 ;if user didn't select any tests, default to both tests
"RTN","RORX019A",58,0)
 I $G(RORDATA("IDLST"))="" S RORDATA("IDLST")="1,2"
"RTN","RORX019A",59,0)
 ;--- Success
"RTN","RORX019A",60,0)
 Q RC
"RTN","RORX019A",61,0)
 ;
"RTN","RORX019A",62,0)
 ;*****************************************************************************
"RTN","RORX019A",63,0)
 ;RETURN RANGE TEXT, ADD RANGE VALUES TO RORDATA (EXTRINISIC FUNCTION)
"RTN","RORX019A",64,0)
 ;ID=1: MELD
"RTN","RORX019A",65,0)
 ;ID=2: MELD-Na
"RTN","RORX019A",66,0)
 ;
"RTN","RORX019A",67,0)
 ;INPUT:
"RTN","RORX019A",68,0)
 ;  GRC   Test ID number
"RTN","RORX019A",69,0)
 ;  RORDATA - Array with ROR data
"RTN","RORX019A",70,0)
 ;
"RTN","RORX019A",71,0)
 ;OUTPUT:
"RTN","RORX019A",72,0)
 ;  RORDATA(ID,"L") - test ID low range
"RTN","RORX019A",73,0)
 ;  RORDATA(ID,"H") - test ID high range
"RTN","RORX019A",74,0)
 ;  Description - <range>
"RTN","RORX019A",75,0)
 ;*****************************************************************************
"RTN","RORX019A",76,0)
RTEXT(GRC,RORDATA,RORTSK) ;
"RTN","RORX019A",77,0)
 N RANGE,TMP
"RTN","RORX019A",78,0)
 S RANGE=""
"RTN","RORX019A",79,0)
 ;--- Range
"RTN","RORX019A",80,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C",GRC))>1 D
"RTN","RORX019A",81,0)
 . ;--- Low
"RTN","RORX019A",82,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"L"))
"RTN","RORX019A",83,0)
 . S RORDATA(GRC,"L")=$G(TMP)
"RTN","RORX019A",84,0)
 . S:TMP'="" RANGE=RANGE_" not less than "_TMP
"RTN","RORX019A",85,0)
 . ;--- High
"RTN","RORX019A",86,0)
 . S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC,"H"))
"RTN","RORX019A",87,0)
 . S RORDATA(GRC,"H")=$G(TMP)
"RTN","RORX019A",88,0)
 . I TMP'=""  D:RANGE'=""  S RANGE=RANGE_" not greater than "_TMP
"RTN","RORX019A",89,0)
 . . S RANGE=RANGE_" and"
"RTN","RORX019A",90,0)
 ;--- Description
"RTN","RORX019A",91,0)
 S TMP=$G(RORTSK("PARAMS","LRGRANGES","C",GRC))
"RTN","RORX019A",92,0)
 S:TMP="" TMP="Unknown ("_GRC_")"
"RTN","RORX019A",93,0)
 Q TMP_" - "_$S(RANGE'="":"numeric results"_RANGE,1:"all results")
"RTN","RORX019A",94,0)
 ;
"RTN","RORX019A",95,0)
 ;************************************************************************
"RTN","RORX019A",96,0)
 ;CALCULATE THE MELD SCORE(S)
"RTN","RORX019A",97,0)
 ;
"RTN","RORX019A",98,0)
 ;INPUT
"RTN","RORX019A",99,0)
 ;  DFN      Patient DFN in LAB DATA file (#63)
"RTN","RORX019A",100,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX019A",101,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019A",102,0)
 ;           RORDATA("FIELDS") - Field list for retrieving the test results
"RTN","RORX019A",103,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX019A",104,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX019A",105,0)
 ;           
"RTN","RORX019A",106,0)
 ;OUTPUT
"RTN","RORX019A",107,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX019A",108,0)
 ;           RORDATA("BVAL",DATE)=VALUE    - Bilirubin results
"RTN","RORX019A",109,0)
 ;           RORDATA("CVAL",DATE)=VALUE    - Creatinine results
"RTN","RORX019A",110,0)
 ;           RORDATA("IVAL",DATE)=VALUE    - INR results
"RTN","RORX019A",111,0)
 ;           RORDATA("SVAL",DATE)=VALUE    - Sodium results
"RTN","RORX019A",112,0)
 ;           RORDATA("CINV",DATE)=VALUE      - 'invalid' Creatinine result
"RTN","RORX019A",113,0)
 ;           RORDATA("SINV",DATE)=VALUE      - 'invalid' Sodium result
"RTN","RORX019A",114,0)
 ;           RORDATA("SCORE",1) - MELD score
"RTN","RORX019A",115,0)
 ;           RORDATA("SCORE",2) - MELD-Na score
"RTN","RORX019A",116,0)
 ;    1      Patient should appear on report
"RTN","RORX019A",117,0)
 ;   -1      Patient should NOT appear on report
"RTN","RORX019A",118,0)
 ;   
"RTN","RORX019A",119,0)
 ;   NOTE: the 'invalid' results will be stored as 'backup' results, in
"RTN","RORX019A",120,0)
 ;   case no valid result is found for Creatinine or Sodium.  An invalid
"RTN","RORX019A",121,0)
 ;   creatinine result is >12.  An invalid Sodium result is <100 or >180.
"RTN","RORX019A",122,0)
 ;   These results will be displayed on the report if no MELD range was 
"RTN","RORX019A",123,0)
 ;   specifically requested by the user, but the score will not be calculated.
"RTN","RORX019A",124,0)
 ;   They will not be displayed on the report if the user requested a MELD
"RTN","RORX019A",125,0)
 ;   range.
"RTN","RORX019A",126,0)
 ;************************************************************************
"RTN","RORX019A",127,0)
CALCMLD(DFN,PTAG,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX019A",128,0)
 N RORID,RORST,ROREND,RORLAB,RORMSG,RC
"RTN","RORX019A",129,0)
 S RORDATA("CALC")=0,RORDATA("CALCNA")=0 ;default: don't calculate scores
"RTN","RORX019A",130,0)
 K RORDATA("SCORE",1),RORDATA("SCORE",2) ;test scores
"RTN","RORX019A",131,0)
 K RORDATA("BVAL"),RORDATA("CVAL"),RORDATA("IVAL"),RORDATA("SVAL") ;test results
"RTN","RORX019A",132,0)
 K RORDATA("CINV"),RORDATA("SINV") ;test results
"RTN","RORX019A",133,0)
 ;get patient ICN or SSN
"RTN","RORX019A",134,0)
 S RORID=$$PTID^RORUTL02(DFN)
"RTN","RORX019A",135,0)
 Q:'$G(RORID) -1
"RTN","RORX019A",136,0)
 ;---SET UP LAB API INPUT/OUTPUT PARMS---
"RTN","RORX019A",137,0)
 S RORST="2000101^CD" ;start date 1/1/1900
"RTN","RORX019A",138,0)
 S ROREND=$G(RORDATA("DATE"))\1 ;end date
"RTN","RORX019A",139,0)
 ;add 1 to the end date so the Lab API INCLUDES the end date correctly
"RTN","RORX019A",140,0)
 N X1,X2,X3 S X1=ROREND,X2=1 D C^%DTC S ROREND=X K X,X1,X2
"RTN","RORX019A",141,0)
 S ROREND=ROREND_"^CD"
"RTN","RORX019A",142,0)
 S RORLAB=$NA(^TMP("ROROUT",$J)) ;lab API output global
"RTN","RORX019A",143,0)
 K RORMSG,@RORLAB ;initialize prior to call
"RTN","RORX019A",144,0)
 ;---CALL LAB API---
"RTN","RORX019A",145,0)
 S RC=$$GCPR^LA7QRY(RORID,RORST,ROREND,.RORLC,"*",.RORMSG,RORLAB)
"RTN","RORX019A",146,0)
 I RC="",$D(RORMSG)>1  D  ;quit if error returned
"RTN","RORX019A",147,0)
 . N ERR,I,LST,TMP
"RTN","RORX019A",148,0)
 . S (ERR,LST)=""
"RTN","RORX019A",149,0)
 . F I=1:1  S ERR=$O(RORMSG(ERR))  Q:ERR=""  D
"RTN","RORX019A",150,0)
 . . S LST=LST_","_ERR,TMP=RORMSG(ERR)
"RTN","RORX019A",151,0)
 . . K RORMSG(ERR)  S RORMSG(I)=TMP
"RTN","RORX019A",152,0)
 . S LST=$P(LST,",",2,999)  Q:(LST=3)!(LST=99)
"RTN","RORX019A",153,0)
 . S RC=$$ERROR^RORERR(-27,,.RORMSG,RORPTIEN)
"RTN","RORX019A",154,0)
 I RC<0 Q -1
"RTN","RORX019A",155,0)
 ;Note: the Lab API returns data in the form of HL7 segments
"RTN","RORX019A",156,0)
 N TMP,RORSPEC,RORVAL,RORNODE,RORSEG,SEGTYPE,RORLOINC,RORDONE,RORDATE,RORTEST
"RTN","RORX019A",157,0)
 N RORCR,RORBIL,RORSOD,RORINR,FS
"RTN","RORX019A",158,0)
 S FS="|" ;HL7 field separator for lab data
"RTN","RORX019A",159,0)
 S (RORCR,RORBIL,RORSOD,RORINR,RORDONE,RORNODE)=0
"RTN","RORX019A",160,0)
 F  S RORNODE=$O(^TMP("ROROUT",$J,RORNODE)) Q:((RORNODE="")!(RORDONE))  D
"RTN","RORX019A",161,0)
 . S RORSEG=$G(^TMP("ROROUT",$J,RORNODE)) ;get entire HL7 segment
"RTN","RORX019A",162,0)
 . S SEGTYPE=$P(RORSEG,FS,1) ;get segment type (PID,OBR,OBX,etc.)
"RTN","RORX019A",163,0)
 . Q:SEGTYPE'="OBX"  ;we want OBX segments only
"RTN","RORX019A",164,0)
 . S RORSPEC=$P($P(RORSEG,FS,4),U,2) ;specimen type string (urine, serum, etc.)
"RTN","RORX019A",165,0)
 . S RORSPEC=":"_RORSPEC_":" ;append ":" as prefix and suffix
"RTN","RORX019A",166,0)
 . I ((RORSPEC[":UA:")!(RORSPEC[":UR:")) Q  ;quit if specimen type is urine
"RTN","RORX019A",167,0)
 . S RORLOINC=$P($P(RORSEG,FS,4),U,1) ;get LOINC code for test
"RTN","RORX019A",168,0)
 . S RORVAL=$P(RORSEG,FS,6) ;test result value
"RTN","RORX019A",169,0)
 . S RORVAL=$TR(RORVAL,"""","") ;get rid of double quotes around values
"RTN","RORX019A",170,0)
 . Q:($G(RORVAL)'>0)  ;quit if no value
"RTN","RORX019A",171,0)
 . S RORDATE=$$HL7TFM^XLFDT($P(RORSEG,FS,15)) ;get date collected
"RTN","RORX019A",172,0)
 . S RORDATE=RORDATE\1
"RTN","RORX019A",173,0)
 . ;---check for Creatinine match on LOINC---
"RTN","RORX019A",174,0)
 . I 'RORCR,RORDATA("CR_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019A",175,0)
 .. ;store 'valid' value (12 or less) if no 'valid' value has been stored yet
"RTN","RORX019A",176,0)
 .. I RORVAL'>12,$O(RORDATA("CVAL",0))="" S RORDATA("CVAL",RORDATE)=RORVAL,RORCR=1 Q
"RTN","RORX019A",177,0)
 .. ;store 'invalid' value (>12) if no other value has been stored
"RTN","RORX019A",178,0)
 .. I RORVAL>12,$O(RORDATA("CVAL",0))="",$O(RORDATA("CINV",0))="" D
"RTN","RORX019A",179,0)
 ... S RORDATA("CINV",RORDATE)=$G(RORVAL)_"*" ;mark as 'invalid' value
"RTN","RORX019A",180,0)
 . ;---check for Sodium match on LOINC---
"RTN","RORX019A",181,0)
 . I 'RORSOD,RORDATA("SOD_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019A",182,0)
 .. ;store 'valid' value (100 to 180) if no other 'valid' value has been stored
"RTN","RORX019A",183,0)
 .. I RORVAL'<100,RORVAL'>180,$O(RORDATA("SVAL",0))="" D  Q
"RTN","RORX019A",184,0)
 ... S RORDATA("SVAL",RORDATE)=$G(RORVAL),RORSOD=1
"RTN","RORX019A",185,0)
 .. ;store 'invalid' value (<100 or >180) if no other value has been stored yet
"RTN","RORX019A",186,0)
 .. I ((RORVAL<100)!(RORVAL>180)),$O(RORDATA("SVAL",0))="",$O(RORDATA("SINV",0))="" D  Q
"RTN","RORX019A",187,0)
 ... S RORDATA("SINV",RORDATE)=RORVAL_"*" Q   ;mark as 'invalid' value
"RTN","RORX019A",188,0)
 . ;---check for Bilirubin match on LOINC---
"RTN","RORX019A",189,0)
 . I 'RORBIL,RORDATA("BIL_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019A",190,0)
 .. ;store first Bilirubin value
"RTN","RORX019A",191,0)
 .. I $O(RORDATA("BVAL",0))="" S RORDATA("BVAL",RORDATE)=RORVAL,RORBIL=1
"RTN","RORX019A",192,0)
 . ;---check for INR match on LOINC---
"RTN","RORX019A",193,0)
 . I 'RORINR,RORDATA("INR_LOINC")[(";"_RORLOINC_";") D  Q
"RTN","RORX019A",194,0)
 .. ;store first INR value
"RTN","RORX019A",195,0)
 .. I $O(RORDATA("IVAL",0))="" S RORDATA("IVAL",RORDATE)=RORVAL,RORINR=1
"RTN","RORX019A",196,0)
 . I RORCR,RORBIL,RORINR S RORDATA("CALC")=1 D
"RTN","RORX019A",197,0)
 .. I RORSOD D
"RTN","RORX019A",198,0)
 ... S RORDATA("CALCNA")=1,RORDONE=1
"RTN","RORX019A",199,0)
 .. E  S RORDATA("CALCNA")=0
"RTN","RORX019A",200,0)
 ;
"RTN","RORX019A",201,0)
 ;--- put test date and result into array: RORDATA(<test>)=value^date
"RTN","RORX019A",202,0)
 N DATE
"RTN","RORX019A",203,0)
 ;Bilirubin:
"RTN","RORX019A",204,0)
 S DATE=$O(RORDATA("BVAL",0))
"RTN","RORX019A",205,0)
 S RORDATA("BILI")=$S($G(DATE)="":U,1:$G(RORDATA("BVAL",DATE))_U_$G(DATE))
"RTN","RORX019A",206,0)
 ;Creatinine:
"RTN","RORX019A",207,0)
 S DATE=$O(RORDATA("CVAL",0))
"RTN","RORX019A",208,0)
 I $G(DATE)="" D  ;if regular Creatinine value is null, take invalid value
"RTN","RORX019A",209,0)
 . S DATE=$O(RORDATA("CINV",0)) I $G(DATE)>0 S RORDATA("CVAL",DATE)=$G(RORDATA("CINV",DATE))
"RTN","RORX019A",210,0)
 S RORDATA("CR")=$S($G(DATE)="":U,1:$G(RORDATA("CVAL",DATE))_U_$G(DATE))
"RTN","RORX019A",211,0)
 ;INR:
"RTN","RORX019A",212,0)
 S DATE=$O(RORDATA("IVAL",0))
"RTN","RORX019A",213,0)
 S RORDATA("INR")=$S($G(DATE)="":U,1:$G(RORDATA("IVAL",DATE))_U_$G(DATE))
"RTN","RORX019A",214,0)
 ;Sodium:
"RTN","RORX019A",215,0)
 S DATE=$O(RORDATA("SVAL",0))
"RTN","RORX019A",216,0)
 I $G(DATE)="" D  ;if regular Sodium value is null, take invalid value
"RTN","RORX019A",217,0)
 . S DATE=$O(RORDATA("SINV",0)) I $G(DATE)>0 S RORDATA("SVAL",DATE)=$G(RORDATA("SINV",DATE))
"RTN","RORX019A",218,0)
 S RORDATA("NA")=$S($G(DATE)="":U,1:$G(RORDATA("SVAL",DATE))_U_$G(DATE))
"RTN","RORX019A",219,0)
 ;
"RTN","RORX019A",220,0)
 N TEST,BILI,CR,INR,NA
"RTN","RORX019A",221,0)
 ;set lower limits for Bili, Cr, and INR to 1 if there's a value in there
"RTN","RORX019A",222,0)
 F TEST="BILI","CR","INR" D
"RTN","RORX019A",223,0)
 . S @TEST=$P($G(RORDATA(TEST)),U,1) Q:$G(@TEST)["*"  I $G(@TEST),@TEST<1 S @TEST=1
"RTN","RORX019A",224,0)
 ;for valid creatinine, use max=4 for calculations
"RTN","RORX019A",225,0)
 I $G(CR)'["*" D
"RTN","RORX019A",226,0)
 . I $G(CR)>4 S CR=4
"RTN","RORX019A",227,0)
 S NA=$P($G(RORDATA("NA")),U,1)
"RTN","RORX019A",228,0)
 ;for valid sodium, use min=120, max=135 for calculations
"RTN","RORX019A",229,0)
 I $G(NA)'["*" D
"RTN","RORX019A",230,0)
 . I $G(NA)>135 S NA=135 Q
"RTN","RORX019A",231,0)
 . I $G(NA)'="" I NA<120 S NA=120
"RTN","RORX019A",232,0)
 ;
"RTN","RORX019A",233,0)
 N TMP1,TMP2
"RTN","RORX019A",234,0)
 ;RORDATA("SCORE",1) will hold the calculated MELD score
"RTN","RORX019A",235,0)
 ;RORDATA("SCORE",2) will hold the calculated MELD Na score
"RTN","RORX019A",236,0)
 S (RORDATA("SCORE",1),RORDATA("SCORE",2))="" ;init calculated scores to null
"RTN","RORX019A",237,0)
 D
"RTN","RORX019A",238,0)
 . Q:($G(CR)["*")  ;quit if no calculation should occur
"RTN","RORX019A",239,0)
 . I $G(BILI),$G(CR),$G(INR) D
"RTN","RORX019A",240,0)
 .. ;MELD forumula: (.957*lne(Cr) + .378*lne(Bili) + 1.120*lne(Inr) + .643) * 10
"RTN","RORX019A",241,0)
 .. S TMP1=(.957*($$LN^XLFMTH(CR))+(.378*($$LN^XLFMTH(BILI)))+(1.120*($$LN^XLFMTH(INR)))+.643)*10
"RTN","RORX019A",242,0)
 .. S RORDATA("SCORE",1)=$J($G(TMP1),0,0) ;round MELD to whole number
"RTN","RORX019A",243,0)
 .. Q:($G(NA)["*")  ;quit if no calculation should occur
"RTN","RORX019A",244,0)
 .. ;if meld NA requested, sodium test must have a valid value
"RTN","RORX019A",245,0)
 .. I $G(NA),RORDATA("SCORE",1),RORDATA("IDLST")[2 D
"RTN","RORX019A",246,0)
 ... ;MELD-Na forumula: MELD + (1.59 *(135-Na))
"RTN","RORX019A",247,0)
 ... S TMP2=$G(RORDATA("SCORE",1))+(1.59*(135-NA))
"RTN","RORX019A",248,0)
 ... S RORDATA("SCORE",2)=$J($G(TMP2),0,0)
"RTN","RORX019A",249,0)
 Q 1
"RTN","RORX020")
0^24^B219381178^B219381178
"RTN","RORX020",1,0)
RORX020 ;BPOIFO/ACS - RENAL FUNCTION BY RANGE ;11/1/09
"RTN","RORX020",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**10,13**;Feb 17, 2006;Build 27
"RTN","RORX020",3,0)
 ;
"RTN","RORX020",4,0)
 ; This routine uses the following IAs:
"RTN","RORX020",5,0)
 ;
"RTN","RORX020",6,0)
 ; #4290         ^PXRMINDX(120.5 (controlled)
"RTN","RORX020",7,0)
 ; #3647         $$EN^GMVPXRM (controlled)
"RTN","RORX020",8,0)
 ; #10061        DEM^VADPT (supported)
"RTN","RORX020",9,0)
 ; #10105        PWR^XLFMTH (supported)
"RTN","RORX020",10,0)
 ; #5047         $$GETIEN^GMVGETVT (supported)
"RTN","RORX020",11,0)
 ; #3556         GCPR^LA7QRY (supported)
"RTN","RORX020",12,0)
 ;
"RTN","RORX020",13,0)
 ;******************************************************************************
"RTN","RORX020",14,0)
 ;******************************************************************************
"RTN","RORX020",15,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORX020",16,0)
 ;        
"RTN","RORX020",17,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX020",18,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX020",19,0)
 ;ROR*1.5*10   MAR  2010   A SAUNDERS   Routine created
"RTN","RORX020",20,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   User can select specific patients,
"RTN","RORX020",21,0)
 ;                                      clinics, or divisions for the report.
"RTN","RORX020",22,0)
 ;                                      Modified XML tags for sort.
"RTN","RORX020",23,0)
 ;                                      
"RTN","RORX020",24,0)
 ;******************************************************************************
"RTN","RORX020",25,0)
 ;******************************************************************************
"RTN","RORX020",26,0)
 Q
"RTN","RORX020",27,0)
 ;
"RTN","RORX020",28,0)
 ;************************************************************************
"RTN","RORX020",29,0)
 ;COMPILE THE "RENAL FUNCTION BY RANGE" REPORT
"RTN","RORX020",30,0)
 ;REPORT CODE: 020
"RTN","RORX020",31,0)
 ;
"RTN","RORX020",32,0)
 ;Called by entry "Renal Function by Range" in ROR REPORT PARAMETERS (#799.34)
"RTN","RORX020",33,0)
 ;
"RTN","RORX020",34,0)
 ;INPUT
"RTN","RORX020",35,0)
 ;  RORTSK     Task number and task parameters
"RTN","RORX020",36,0)
 ;  
"RTN","RORX020",37,0)
 ;  Below is a sample RORTSK input array for utilization in 2003, most recent
"RTN","RORX020",38,0)
 ;  scores, CrCL range from 20 to 50, eGFR range from 30 to 60:
"RTN","RORX020",39,0)
 ;  
"RTN","RORX020",40,0)
 ;  RORTSK=nnn   (the task number)
"RTN","RORX020",41,0)
 ;  RORTSK("EP")="$$RFRANGE^RORX020"
"RTN","RORX020",42,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","END")=3031231
"RTN","RORX020",43,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","START")=3030101
"RTN","RORX020",44,0)
 ;  RORTSK("PARAMS","ICD9FILT","A","FILTER")="ALL"
"RTN","RORX020",45,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1)=""
"RTN","RORX020",46,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"H")=50
"RTN","RORX020",47,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"L")=20
"RTN","RORX020",48,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2)=""
"RTN","RORX020",49,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"H")=60
"RTN","RORX020",50,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",2,"L")=30
"RTN","RORX020",51,0)
 ;  RORTSK("PARAMS","OPTIONS","A","COMPLETE")=1
"RTN","RORX020",52,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX020",53,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_AFTER")=1
"RTN","RORX020",54,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_BEFORE")=1
"RTN","RORX020",55,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_DURING")=1
"RTN","RORX020",56,0)
 ;  RORTSK("PARAMS","REGIEN")=1
"RTN","RORX020",57,0)
 ;  
"RTN","RORX020",58,0)
 ;  If the user selected an 'as of' date = 12/31/2005:
"RTN","RORX020",59,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX020",60,0)
 ;  is replaced with:  
"RTN","RORX020",61,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MAX_DATE")=3051231
"RTN","RORX020",62,0)
 ;
"RTN","RORX020",63,0)
 ;OUTPUT
"RTN","RORX020",64,0)
 ;  <0  Error code
"RTN","RORX020",65,0)
 ;   0  Ok
"RTN","RORX020",66,0)
 ;************************************************************************
"RTN","RORX020",67,0)
RFRANGE(RORTSK) ;
"RTN","RORX020",68,0)
 N RORDATA       ; array to hold ROR data and summary totals
"RTN","RORX020",69,0)
 N RORREG        ; Registry IEN
"RTN","RORX020",70,0)
 N RORSDT        ; report start date
"RTN","RORX020",71,0)
 N ROREDT        ; report end date
"RTN","RORX020",72,0)
 N RORPTIEN      ; IEN of patient in the ROR registry
"RTN","RORX020",73,0)
 N DFN           ; DFN of patient in the PATIENT file (#2)
"RTN","RORX020",74,0)
 N RORLC         ; sub-file and array of LOINC codes to search Lab data
"RTN","RORX020",75,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX020",76,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX020",77,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX020",78,0)
 ;
"RTN","RORX020",79,0)
 N REPORT,RC,I,SFLAGS,PARAMS
"RTN","RORX020",80,0)
 ;--- Establish the root XML Node of the report and put into output
"RTN","RORX020",81,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX020",82,0)
 Q:REPORT<0 REPORT
"RTN","RORX020",83,0)
 ;
"RTN","RORX020",84,0)
 ;--- Get registry IEN
"RTN","RORX020",85,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX020",86,0)
 ;
"RTN","RORX020",87,0)
 ;--- Set standard report parameters data into output:
"RTN","RORX020",88,0)
 ;registry, comment, patients (before, during, after), options (summary vs.
"RTN","RORX020",89,0)
 ;complete), other registries, and other diagnoses
"RTN","RORX020",90,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORSDT,.ROREDT,.SFLAGS) Q:PARAMS<0 PARAMS
"RTN","RORX020",91,0)
 ;
"RTN","RORX020",92,0)
 ;--- Add range parameters to output
"RTN","RORX020",93,0)
 S RC=$$PARAMS^RORX020A(PARAMS,.RORDATA) Q:RC<0 RC
"RTN","RORX020",94,0)
 ;
"RTN","RORX020",95,0)
 ;--- Put report header data into output:
"RTN","RORX020",96,0)
 ;report creation date, task number, last registry update date, and
"RTN","RORX020",97,0)
 ;last data extraction date
"RTN","RORX020",98,0)
 S RC=$$HEADER^RORX020A(REPORT,.RORTSK) Q:RC<0 RC
"RTN","RORX020",99,0)
 ;
"RTN","RORX020",100,0)
 ;--- Get Renal ranges requested
"RTN","RORX020",101,0)
 ;I=1 ==> report = CrCL      I=2 ==> report = eGFR by MDRD
"RTN","RORX020",102,0)
 S I=0 F  S I=$O(RORTSK("PARAMS","LRGRANGES","C",I)) Q:I=""  D
"RTN","RORX020",103,0)
 . S RORDATA("L",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"L")) ;low range
"RTN","RORX020",104,0)
 . S RORDATA("H",I)=$G(RORTSK("PARAMS","LRGRANGES","C",I,"H")) ;high range
"RTN","RORX020",105,0)
 ;
"RTN","RORX020",106,0)
 ;--- Get GMRV VITAL TYPE pointer for HEIGHT
"RTN","RORX020",107,0)
 S RORDATA("HGTP")=$$GETIEN^GMVGETVT("HEIGHT",1)
"RTN","RORX020",108,0)
 I '$G(RORDATA("HGTP")) Q -1
"RTN","RORX020",109,0)
 ;
"RTN","RORX020",110,0)
 ;--- Get Max Date  OUTPUT: RORDATA("DATE")  - Max Date for test scores
"RTN","RORX020",111,0)
 S RORDATA("DATE")=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORX020",112,0)
 I $G(RORDATA("DATE"))="" S RORDATA("DATE")=DT
"RTN","RORX020",113,0)
 ;
"RTN","RORX020",114,0)
 ;--- Summary vs. complete report requested
"RTN","RORX020",115,0)
 S RORDATA("COMPLETE")=0 ;default to 'summary' only
"RTN","RORX020",116,0)
 I $$PARAM^RORTSK01("OPTIONS","COMPLETE") S RORDATA("COMPLETE")=1
"RTN","RORX020",117,0)
 ;
"RTN","RORX020",118,0)
 ;--- Set the number of Renal ranges and initialize their values to 0
"RTN","RORX020",119,0)
 S RORDATA("RCNT")=5 D INIT^RORX020A(.RORDATA)
"RTN","RORX020",120,0)
 ;
"RTN","RORX020",121,0)
 ;--- Create 'patients' table
"RTN","RORX020",122,0)
 N RORBODY S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX020",123,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX020",124,0)
 ;
"RTN","RORX020",125,0)
 ;--- Check utilization
"RTN","RORX020",126,0)
 N CNT,ECNT,UTSDT,UTEDT,SKIPSDT,SKIPEDT
"RTN","RORX020",127,0)
 S (CNT,ECNT,RC)=0,SKIPEDT=ROREDT,SKIPSDT=RORSDT
"RTN","RORX020",128,0)
 ; Utilization date range is always sent
"RTN","RORX020",129,0)
 S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX020",130,0)
 S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX020",131,0)
 ; Combined date range
"RTN","RORX020",132,0)
 S SKIPSDT=$$DTMIN^RORUTL18(SKIPSDT,$G(UTSDT))
"RTN","RORX020",133,0)
 S SKIPEDT=$$DTMAX^RORUTL18(SKIPEDT,$G(UTEDT))
"RTN","RORX020",134,0)
 ;
"RTN","RORX020",135,0)
 ;--- Number of patients in the registry - used for calculating the
"RTN","RORX020",136,0)
 ;task progress percentage (shown on the GUI screen)
"RTN","RORX020",137,0)
 N RORPTCNT S RORPTCNT=$$REGSIZE^RORUTL02(+RORREG) S:RORPTCNT<0 RORPTCNT=0
"RTN","RORX020",138,0)
 ;
"RTN","RORX020",139,0)
 ;--- LOINC codes for Creatinine
"RTN","RORX020",140,0)
 ;create list for future comparison
"RTN","RORX020",141,0)
 S RORDATA("LOINC")=";15045-8;21232-4;2160-0;"
"RTN","RORX020",142,0)
 ;set up array for future call to Lab API
"RTN","RORX020",143,0)
 S RORLC="CH" ;chemistry sub-file to search in #63
"RTN","RORX020",144,0)
 S RORLC(1)="15045-8^LN" ;Creatinine LOINC
"RTN","RORX020",145,0)
 S RORLC(2)="21232-4^LN" ;Creatinine LOINC
"RTN","RORX020",146,0)
 S RORLC(3)="2160-0^LN"  ;Creatinine LOINC
"RTN","RORX020",147,0)
 ;
"RTN","RORX020",148,0)
 ;--- RACE code 2054-5 = 'black or african american' in RACE file (IEN=9)
"RTN","RORX020",149,0)
 S RORDATA("BAM")=";9;"
"RTN","RORX020",150,0)
 ;
"RTN","RORX020",151,0)
 ;=== Set up Clinic/Division list parameters
"RTN","RORX020",152,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX020",153,0)
 ;
"RTN","RORX020",154,0)
 ;--- Get registry records
"RTN","RORX020",155,0)
 N RCC,FLAG,SKIP,TMP
"RTN","RORX020",156,0)
 S (CNT,RORPTIEN,RC)=0
"RTN","RORX020",157,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX020",158,0)
 F  S RORPTIEN=$O(^RORDATA(798,"AC",RORREG,RORPTIEN))  Q:RORPTIEN'>0  D  Q:RC<0
"RTN","RORX020",159,0)
 . ;--- Calculate 'progress' for the GUI display
"RTN","RORX020",160,0)
 . S TMP=$S(RORPTCNT>0:CNT/RORPTCNT,1:"")
"RTN","RORX020",161,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX020",162,0)
 . S CNT=CNT+1
"RTN","RORX020",163,0)
 . ;--- Get the patient DFN
"RTN","RORX020",164,0)
 . S DFN=$$PTIEN^RORUTL01(RORPTIEN)  Q:DFN'>0
"RTN","RORX020",165,0)
 . ;--- Check for patient list and quit if not on list
"RTN","RORX020",166,0)
 . I $D(RORTSK("PARAMS","PATIENTS","C")),'$D(RORTSK("PARAMS","PATIENTS","C",DFN)) Q
"RTN","RORX020",167,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX020",168,0)
 . Q:$$SKIP^RORXU005(RORPTIEN,SFLAGS,SKIPSDT,SKIPEDT)
"RTN","RORX020",169,0)
 . ;--- Check if patient has passed the ICD9 filter
"RTN","RORX020",170,0)
 . S RCC=0
"RTN","RORX020",171,0)
 . I FLAG'="ALL" D
"RTN","RORX020",172,0)
 . . S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX020",173,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX020",174,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX020",175,0)
 . ;
"RTN","RORX020",176,0)
 . ;--- Check for Clinic or Division list and quit if not in list
"RTN","RORX020",177,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,DFN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX020",178,0)
 . ;
"RTN","RORX020",179,0)
 . ;--- Check for utilization in the corresponding 'utilization' date range
"RTN","RORX020",180,0)
 . S SKIP=0 I $G(UTSDT)>0 D
"RTN","RORX020",181,0)
 .. N UTIL K TMP S TMP("ALL")=1
"RTN","RORX020",182,0)
 .. S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,DFN,.TMP)
"RTN","RORX020",183,0)
 .. I 'UTIL S SKIP=1
"RTN","RORX020",184,0)
 . ;--- Skip the patient if they have no utilization in the range
"RTN","RORX020",185,0)
 . I $G(SKIP) Q
"RTN","RORX020",186,0)
 . ;
"RTN","RORX020",187,0)
 . ;--- For each patient, process the registry record and create report
"RTN","RORX020",188,0)
 . I $$PATIENT(DFN,RORBODY,.RORDATA,RORPTIEN,.RORLC)<0 S ECNT=ECNT+1 ;error count
"RTN","RORX020",189,0)
 ;
"RTN","RORX020",190,0)
 ;--- If user selected eGFR by MDRD (ID=2), create summary report
"RTN","RORX020",191,0)
 I RORDATA("IDLST")[2 S RC=$$SUMMARY^RORX020A(RORTSK,REPORT,.RORDATA)
"RTN","RORX020",192,0)
 Q:RC<0 RC
"RTN","RORX020",193,0)
 K ^TMP("RORX020",$J),^TMP("ROROUT",$J)
"RTN","RORX020",194,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX020",195,0)
 ;
"RTN","RORX020",196,0)
 ;************************************************************************
"RTN","RORX020",197,0)
 ;ADD THE PATIENT DATA TO THE REPORT
"RTN","RORX020",198,0)
 ;
"RTN","RORX020",199,0)
 ;INPUT
"RTN","RORX020",200,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX020",201,0)
 ;  PTAG     Reference IEN to the 'body' parent XML tag
"RTN","RORX020",202,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020",203,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX020",204,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX020",205,0)
 ;
"RTN","RORX020",206,0)
 ;OUTPUT
"RTN","RORX020",207,0)
 ;  1        ok
"RTN","RORX020",208,0)
 ; <0        error
"RTN","RORX020",209,0)
 ;************************************************************************
"RTN","RORX020",210,0)
PATIENT(DFN,PTAG,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX020",211,0)
 ;calculate Renal Function scores
"RTN","RORX020",212,0)
 I $$CALCRF(DFN,.RORDATA,RORPTIEN,.RORLC)<0 Q 1  ;quit if patient data not available
"RTN","RORX020",213,0)
 I '$$INRANGE^RORX020A(.RORDATA) Q 1  ;quit if score(s) out of requested range
"RTN","RORX020",214,0)
 ;if eGFR by MDRD requested, add 1 to appropriate category count
"RTN","RORX020",215,0)
 I RORDATA("IDLST")[2 D EGFRCAT^RORX020A(.RORDATA)
"RTN","RORX020",216,0)
 Q:'RORDATA("COMPLETE") 1  ;continue only if 'complete' report is requested
"RTN","RORX020",217,0)
 ;--- Get patient data and put into the report
"RTN","RORX020",218,0)
 N VADM,VA,RORDOD,TTAG,RTAG
"RTN","RORX020",219,0)
 D VADEM^RORUTL05(DFN,1)
"RTN","RORX020",220,0)
 ;--- The <PATIENT> tag
"RTN","RORX020",221,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PTAG,,DFN)
"RTN","RORX020",222,0)
 I PTAG<0 Q PTAG
"RTN","RORX020",223,0)
 ;--- Patient Name
"RTN","RORX020",224,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX020",225,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX020",226,0)
 D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX020",227,0)
 ;--- Date of death
"RTN","RORX020",228,0)
 S RORDOD=$$DATE^RORXU002($P(VADM(6),U)\1)
"RTN","RORX020",229,0)
 D ADDVAL^RORTSK11(RORTSK,"DOD",$G(RORDOD),PTAG,1)
"RTN","RORX020",230,0)
 ;--- RENAL DATA tag
"RTN","RORX020",231,0)
 S RTAG=$$ADDVAL^RORTSK11(RORTSK,"RNLDATA",,PTAG)
"RTN","RORX020",232,0)
 Q:RTAG<0 RTAG
"RTN","RORX020",233,0)
 ;---  CR Test Tag
"RTN","RORX020",234,0)
 S TTAG=$$ADDVAL^RORTSK11(RORTSK,"TEST",,RTAG)
"RTN","RORX020",235,0)
 Q:TTAG<0 TTAG
"RTN","RORX020",236,0)
 ;---  Date Cr Test Taken
"RTN","RORX020",237,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("CRDATE")),TTAG)
"RTN","RORX020",238,0)
 ;---  Cr Test Value
"RTN","RORX020",239,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("CR")),TTAG)
"RTN","RORX020",240,0)
 ;--- Height tag
"RTN","RORX020",241,0)
 S TTAG=$$ADDVAL^RORTSK11(RORTSK,"HEIGHT",,RTAG)
"RTN","RORX020",242,0)
 Q:TTAG<0 TTAG
"RTN","RORX020",243,0)
 ;---  Date Height Taken
"RTN","RORX020",244,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$G(RORDATA("HDATE")),TTAG)
"RTN","RORX020",245,0)
 ;---  Height value
"RTN","RORX020",246,0)
 D ADDVAL^RORTSK11(RORTSK,"RESULT",$G(RORDATA("HGT")),TTAG)
"RTN","RORX020",247,0)
 ;---  Calculated CRCL
"RTN","RORX020",248,0)
 I RORDATA("IDLST")[1 D ADDVAL^RORTSK11(RORTSK,"CRCL",$G(RORDATA("SCORE",1)),PTAG,3)
"RTN","RORX020",249,0)
 ;---  Calculated eGFR
"RTN","RORX020",250,0)
 I RORDATA("IDLST")[2 D ADDVAL^RORTSK11(RORTSK,"EGFR",$G(RORDATA("SCORE",2)),PTAG,3)
"RTN","RORX020",251,0)
 ;
"RTN","RORX020",252,0)
 Q ($S(TTAG<0:TTAG,1:1))
"RTN","RORX020",253,0)
 ;
"RTN","RORX020",254,0)
 ;************************************************************************
"RTN","RORX020",255,0)
 ;CALCULATE THE RENAL FUNCTION VALUE(S)
"RTN","RORX020",256,0)
 ;Note1: If no range has been passed in and a patient has a Creatinine 
"RTN","RORX020",257,0)
 ;       result > 12, the patient will be listed on the report with an 
"RTN","RORX020",258,0)
 ;       asterisk (*) next to the test result value, but no scores will be 
"RTN","RORX020",259,0)
 ;       calculated.
"RTN","RORX020",260,0)
 ;Note2: If no range has been passed in and a patient has an invalid Height
"RTN","RORX020",261,0)
 ;       result, the patient will be listed on the report with an asterisk (*)
"RTN","RORX020",262,0)
 ;       next to the test result value, but no CrCl score will be calculated. 
"RTN","RORX020",263,0)
 ;Note3: If a range has been passed in and the patient has a Creatinine result 
"RTN","RORX020",264,0)
 ;       >12, the patient will NOT be listed on the report.
"RTN","RORX020",265,0)
 ;
"RTN","RORX020",266,0)
 ;INPUT
"RTN","RORX020",267,0)
 ;  DFN      Patient DFN in PATIENT file (#2)
"RTN","RORX020",268,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020",269,0)
 ;           RORDATA("BAM") - 'black' or 'african american' race pointers
"RTN","RORX020",270,0)
 ;  RORPTIEN Patient IEN in the ROR registry
"RTN","RORX020",271,0)
 ;  RORLC    sub-file and LOINC codes to search for
"RTN","RORX020",272,0)
 ;  
"RTN","RORX020",273,0)
 ;OUTPUT
"RTN","RORX020",274,0)
 ;  RORDATA  Array with ROR data
"RTN","RORX020",275,0)
 ;  1        Patient will be listed on report
"RTN","RORX020",276,0)
 ; -1        Patient will not be listed on report
"RTN","RORX020",277,0)
 ;************************************************************************
"RTN","RORX020",278,0)
CALCRF(DFN,RORDATA,RORPTIEN,RORLC) ;
"RTN","RORX020",279,0)
 N RORID,RORST,ROREND,RORLAB,RORMSG,RC
"RTN","RORX020",280,0)
 S RORDATA("CALC")=1 ;default - the score for this patient should be calculated
"RTN","RORX020",281,0)
 K RORDATA("SCORE",1),RORDATA("SCORE",2) ;test scores
"RTN","RORX020",282,0)
 K RORDATA("CVAL"),RORDATA("CINV"),RORDATA("CR"),RORDATA("CRDATE") ;Cr data
"RTN","RORX020",283,0)
 K RORDATA("HGT"),RORDATA("HDATE") ;height data
"RTN","RORX020",284,0)
 ;get patient ICN or SSN
"RTN","RORX020",285,0)
 S RORID=$$PTID^RORUTL02(DFN)
"RTN","RORX020",286,0)
 Q:'$G(RORID) -1
"RTN","RORX020",287,0)
 ;---SET UP LAB API INPUT/OUTPUT PARMS---
"RTN","RORX020",288,0)
 S RORST="2000101^CD" ;start date 1/1/1900
"RTN","RORX020",289,0)
 S ROREND=$G(RORDATA("DATE"))\1 ;end date
"RTN","RORX020",290,0)
 ;add 1 to the end date so the Lab API INCLUDES tests on that date
"RTN","RORX020",291,0)
 N X1,X2,X3 S X1=ROREND,X2=1 D C^%DTC S ROREND=X K X,X1,X2
"RTN","RORX020",292,0)
 S ROREND=ROREND_"^CD"
"RTN","RORX020",293,0)
 S RORLAB=$NA(^TMP("ROROUT",$J)) ;lab API output global
"RTN","RORX020",294,0)
 K RORMSG,@RORLAB ;initialize prior to call
"RTN","RORX020",295,0)
 ;---CALL LAB API USING COLLECTION DATE AND LOINC CODE LIST---
"RTN","RORX020",296,0)
 S RC=$$GCPR^LA7QRY(RORID,RORST,ROREND,.RORLC,"*",.RORMSG,RORLAB)
"RTN","RORX020",297,0)
 I $G(RC)="",$D(RORMSG)>1  D  ;quit if error returned
"RTN","RORX020",298,0)
 . N ERR,I,LST,TMP
"RTN","RORX020",299,0)
 . S (ERR,LST)=""
"RTN","RORX020",300,0)
 . F I=1:1  S ERR=$O(RORMSG(ERR))  Q:ERR=""  D
"RTN","RORX020",301,0)
 . . S LST=LST_","_ERR,TMP=RORMSG(ERR)
"RTN","RORX020",302,0)
 . . K RORMSG(ERR)  S RORMSG(I)=TMP
"RTN","RORX020",303,0)
 . S LST=$P(LST,",",2,999)  Q:(LST=3)!(LST=99)
"RTN","RORX020",304,0)
 . S RC=$$ERROR^RORERR(-27,,.RORMSG,RORPTIEN)
"RTN","RORX020",305,0)
 I RC<0 Q -1
"RTN","RORX020",306,0)
 ;Note: the Lab API returns data in the form of HL7 segments
"RTN","RORX020",307,0)
 N TMP,RORSPEC,RORVAL,RORNODE,RORSEG,SEGTYPE,RORLOINC,RORDONE,RORDATE,FS
"RTN","RORX020",308,0)
 S FS="|" ;default HL7 field separator for lab data
"RTN","RORX020",309,0)
 S RORDONE=0 ;flag to indicate if 'valid' data has been found
"RTN","RORX020",310,0)
 S RORNODE=0 F  S RORNODE=$O(^TMP("ROROUT",$J,RORNODE)) Q:((RORNODE="")!(RORDONE))  D
"RTN","RORX020",311,0)
 . S RORSEG=$G(^TMP("ROROUT",$J,RORNODE)) ;get entire HL7 segment
"RTN","RORX020",312,0)
 . S SEGTYPE=$P(RORSEG,FS,1) ;get segment type (PID,OBR,OBX,etc.)
"RTN","RORX020",313,0)
 . Q:SEGTYPE'="OBX"  ;we want OBX segments only
"RTN","RORX020",314,0)
 . S RORSPEC=$P($P(RORSEG,FS,4),U,2) ;specimen type string (urine, serum, etc.)
"RTN","RORX020",315,0)
 . S RORSPEC=":"_RORSPEC_":" ;append ":" as prefix and suffix
"RTN","RORX020",316,0)
 . I ((RORSPEC[":UA:")!(RORSPEC[":UR:")) Q  ;quit if specimen type is urine
"RTN","RORX020",317,0)
 . S RORLOINC=$P($P(RORSEG,FS,4),"^",1) ;get LOINC code
"RTN","RORX020",318,0)
 . Q:(RORDATA("LOINC")'[(";"_RORLOINC_";"))  ;LOINC must match Creatinine
"RTN","RORX020",319,0)
 . ;test result found
"RTN","RORX020",320,0)
 . S RORVAL=$P(RORSEG,FS,6) ;Creatinine test result value
"RTN","RORX020",321,0)
 . Q:($G(RORVAL)'>0)  ;quit if no value
"RTN","RORX020",322,0)
 . S RORDATE=$$HL7TFM^XLFDT($P(RORSEG,FS,15)) ;get date collected
"RTN","RORX020",323,0)
 . S RORDATE=RORDATE\1
"RTN","RORX020",324,0)
 . ;store 'valid' (12 or less) value if no 'valid' value has been stored yet
"RTN","RORX020",325,0)
 . I RORVAL'>12,$O(RORDATA("CVAL",0))="" S RORDATA("CVAL",RORDATE)=RORVAL,RORDONE=1 Q
"RTN","RORX020",326,0)
 . ;store 'invalid' (>12) value if no other value has been stored
"RTN","RORX020",327,0)
 . I RORVAL>12,$O(RORDATA("CVAL",0))="",$O(RORDATA("CINV",0))="" D
"RTN","RORX020",328,0)
 .. S RORDATA("CINV",RORDATE)=$G(RORVAL)_"*" ;mark as 'invalid' value
"RTN","RORX020",329,0)
 ;
"RTN","RORX020",330,0)
 ;quit if patient had no Creatinine results (valid or invalid)
"RTN","RORX020",331,0)
 Q:(($D(RORDATA("CVAL"))'>1)&($D(RORDATA("CINV"))'>1)) -1
"RTN","RORX020",332,0)
 ;
"RTN","RORX020",333,0)
 ;--- set Creatinine result and date into data array
"RTN","RORX020",334,0)
 N DATE
"RTN","RORX020",335,0)
 S DATE=$O(RORDATA("CVAL",0)) ;'valid' Cr date
"RTN","RORX020",336,0)
 I $G(DATE)="" D  ;if no 'valid' Cr value, get 'invalid' value
"RTN","RORX020",337,0)
 . S DATE=$O(RORDATA("CINV",0))
"RTN","RORX020",338,0)
 . S RORDATA("CVAL",DATE)=$G(RORDATA("CINV",DATE))
"RTN","RORX020",339,0)
 . S RORDATA("CALC")=0 ;no score calculations can be done on 'invalid' data
"RTN","RORX020",340,0)
 S RORDATA("CR")=$G(RORDATA("CVAL",DATE))
"RTN","RORX020",341,0)
 ;S RORDATA("CRDATE")=$P((9999999-$G(DATE)),".",1)
"RTN","RORX020",342,0)
 S RORDATA("CRDATE")=DATE\1
"RTN","RORX020",343,0)
 ;
"RTN","RORX020",344,0)
 ;--- get height date and height IEN
"RTN","RORX020",345,0)
 N RORHTDT,RORHTIEN,RORARY
"RTN","RORX020",346,0)
 S RORDATE=RORDATA("DATE")
"RTN","RORX020",347,0)
 S RORHTDT=$O(^PXRMINDX(120.5,"PI",DFN,RORDATA("HGTP"),RORDATE),-1) ;height date
"RTN","RORX020",348,0)
 Q:$G(RORHTDT)="" -1
"RTN","RORX020",349,0)
 S RORHTIEN=$O(^PXRMINDX(120.5,"PI",DFN,RORDATA("HGTP"),RORHTDT,0)) ;height IEN
"RTN","RORX020",350,0)
 Q:$G(RORHTIEN)="" -1
"RTN","RORX020",351,0)
 ;--- call API to get get height measurement
"RTN","RORX020",352,0)
 K RORARY D EN^GMVPXRM(.RORARY,RORHTIEN,"I")
"RTN","RORX020",353,0)
 S RORDATA("HGT")=$G(RORARY(7)),RORDATA("HDATE")=$P(RORHTDT,".",1)
"RTN","RORX020",354,0)
 I ($G(RORDATA("HGT"))'>0) Q -1  ;quit if height not > 0
"RTN","RORX020",355,0)
 ;strip out characters "IN", ",E"
"RTN","RORX020",356,0)
 I ((RORDATA("HGT")["IN")!(RORDATA("HGT")[",E")) S RORDATA("HGT")=+RORDATA("HGT")
"RTN","RORX020",357,0)
 ;mark as 'invalid' if height contains "CM", or "'" or double quote
"RTN","RORX020",358,0)
 I ((RORDATA("HGT")["CM")!(RORDATA("HGT")["'")!(RORDATA("HGT")["""")) D
"RTN","RORX020",359,0)
 . I RORDATA("IDLST")[1 S RORDATA("CALC")=0 ;no CrCl calculations can be done on 'invalid' data
"RTN","RORX020",360,0)
 . S RORDATA("HGT")=RORDATA("HGT")_"*" ;mark as 'invalid' value
"RTN","RORX020",361,0)
 ;set CALC flag to 0 and add "*" if invalid height: not between 36 and 96 inches
"RTN","RORX020",362,0)
 I ((RORDATA("HGT")'["*")&((RORDATA("HGT")<36)!(RORDATA("HGT")>96))) D
"RTN","RORX020",363,0)
 . I RORDATA("IDLST")[1 S RORDATA("CALC")=0 ;no CrCl calculations can be done on 'invalid' data
"RTN","RORX020",364,0)
 . S RORDATA("HGT")=RORDATA("HGT")_"*" ;mark as 'invalid' value
"RTN","RORX020",365,0)
 ;
"RTN","RORX020",366,0)
 ;include patient on reports but don't calculate score if no high/low
"RTN","RORX020",367,0)
 ;range passed in and invalid CR data exists
"RTN","RORX020",368,0)
 I RORDATA("CR")["*",RORDATA("RANGE")=0 Q 1
"RTN","RORX020",369,0)
 ;don't include patient on report if range IS passed in and invalid Cr data
"RTN","RORX020",370,0)
 ;exists since neither score can't be calculated
"RTN","RORX020",371,0)
 I RORDATA("CR")["*",RORDATA("RANGE")=1 Q -1
"RTN","RORX020",372,0)
 ;
"RTN","RORX020",373,0)
 ;---CALCULATE RENAL TEST SCORES USING VALID CR VALUE
"RTN","RORX020",374,0)
 ;
"RTN","RORX020",375,0)
 ;--- get patient race, gender, age, and dob using DEM^VADPT
"RTN","RORX020",376,0)
 N RORDEM,RORGENDER,RORRACE,RORM,RORF,RORDOB,RORAGE,VAROOT
"RTN","RORX020",377,0)
 S (RORF,RORM)=0
"RTN","RORX020",378,0)
 S VAROOT="RORDEM" D DEM^VADPT
"RTN","RORX020",379,0)
 S RORGENDER=$P($G(RORDEM(5)),U,1) ;M or F
"RTN","RORX020",380,0)
 Q:$G(RORGENDER)="" -1
"RTN","RORX020",381,0)
 S:RORGENDER="F" RORF=1 S:RORGENDER="M" RORM=1
"RTN","RORX020",382,0)
 ;--- get age
"RTN","RORX020",383,0)
 ;if 'most recent' date, use age returned from DEM^VADPT
"RTN","RORX020",384,0)
 ;if not 'most recent', get dob and calculate age
"RTN","RORX020",385,0)
 I $$PARAM^RORTSK01("OPTIONS","MOST_RECENT") S RORAGE=RORDEM(4)
"RTN","RORX020",386,0)
 E  D
"RTN","RORX020",387,0)
 . S RORDOB=$P($G(RORDEM(3)),U,1) ;date of birth
"RTN","RORX020",388,0)
 . S RORAGE=RORDATE-RORDOB ;age using 'as of' date
"RTN","RORX020",389,0)
 . S RORAGE=$S($L(RORAGE)=6:$E(RORAGE,1,2),1:$E(RORAGE,1,3))
"RTN","RORX020",390,0)
 ;
"RTN","RORX020",391,0)
 ;--- Cockcroft-Gault CrCl ---
"RTN","RORX020",392,0)
 ;Calculation: (140-age) x ideal weight in kg (*.85 if female)/(creatinine*72)
"RTN","RORX020",393,0)
 ;Ideal weight in kg:
"RTN","RORX020",394,0)
 ;  males   = 51.65+(1.85*(height-60))
"RTN","RORX020",395,0)
 ;  females = 48.67+(1.65*(height-60))
"RTN","RORX020",396,0)
 ;  
"RTN","RORX020",397,0)
 N RORMIW,RORFIW,MULT2,TMP
"RTN","RORX020",398,0)
 D
"RTN","RORX020",399,0)
 . ;if male, use this calculation
"RTN","RORX020",400,0)
 . I RORM=1 D  ;get male ideal weight in kg 
"RTN","RORX020",401,0)
 .. S MULT2=1 ;no additional multiplier if male
"RTN","RORX020",402,0)
 .. Q:RORDATA("HGT")["*"  ;quit if invalid height value
"RTN","RORX020",403,0)
 .. S RORMIW=51.65+(1.85*(RORDATA("HGT")-60)) ;male ideal weight
"RTN","RORX020",404,0)
 .. S TMP=(140-RORAGE)*RORMIW/(RORDATA("CR")*72) ;CrCl score
"RTN","RORX020",405,0)
 . ;if female, use this calculation
"RTN","RORX020",406,0)
 . I RORF=1 D
"RTN","RORX020",407,0)
 .. S MULT2=.742 ;set multiplier for eGFR calculation if female
"RTN","RORX020",408,0)
 .. Q:RORDATA("HGT")["*"  ;quit if invalid height value
"RTN","RORX020",409,0)
 .. S RORFIW=48.67+(1.65*(RORDATA("HGT")-60)) ;female ideal weight
"RTN","RORX020",410,0)
 .. S TMP=(140-RORAGE)*RORFIW*.85/(RORDATA("CR")*72) ;CrCl score
"RTN","RORX020",411,0)
 . ;
"RTN","RORX020",412,0)
 . I RORDATA("IDLST")[1 S RORDATA("SCORE",1)=$S($G(TMP)>0:$J($G(TMP),0,0),1:"") ;round CrCl score to whole number
"RTN","RORX020",413,0)
 ;
"RTN","RORX020",414,0)
 ;--- eGFR by MDRD ---
"RTN","RORX020",415,0)
 ;default race multiplier set to 1 (i.e. no multiplier)
"RTN","RORX020",416,0)
 N RORCNT,MULT1,I S MULT1=1
"RTN","RORX020",417,0)
 D
"RTN","RORX020",418,0)
 . ;get count of race values (could be more than 1 entry)
"RTN","RORX020",419,0)
 . S RORCNT=$G(RORDEM(12)) I RORCNT>0 D
"RTN","RORX020",420,0)
 .. ;check each race value for match on 'black or 'african american'
"RTN","RORX020",421,0)
 .. F I=1:1:RORCNT D  Q:MULT1=1.212
"RTN","RORX020",422,0)
 ... S RORRACE=$P($G(RORDEM(12,I)),U,1) ;race pointer value
"RTN","RORX020",423,0)
 ... ;if any of the race values are black or african american, set multiplier
"RTN","RORX020",424,0)
 ... I $G(RORDATA("BAM"))[(";"_$G(RORRACE)_";") S MULT1=1.212
"RTN","RORX020",425,0)
 . ;--- calculate eGFR by MDRD score  Calculation:
"RTN","RORX020",426,0)
 . ;(175 * (creatinine ^ -1.154) * (age ^ -.203) *1.212 (if black) * .742 (if female)
"RTN","RORX020",427,0)
 . S TMP=175*($$PWR^XLFMTH(RORDATA("CR"),-1.154))*($$PWR^XLFMTH(RORAGE,-0.203))*MULT1*MULT2 ;eGFR
"RTN","RORX020",428,0)
 . ;
"RTN","RORX020",429,0)
 . I RORDATA("IDLST")[2 S RORDATA("SCORE",2)=$J($G(TMP),0,0) ;round eGFR score to whole number
"RTN","RORX020",430,0)
 ;
"RTN","RORX020",431,0)
 Q 1
"RTN","RORXU001")
0^2^B64898182^B64898182
"RTN","RORXU001",1,0)
RORXU001 ;HOIFO/BH,SG,VAC - REPORT UTILITIES ;4/23/09 1:21pm
"RTN","RORXU001",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,13**;Feb 17, 2006;Build 27
"RTN","RORXU001",3,0)
 ;
"RTN","RORXU001",4,0)
 ; This routine uses the following IAs:
"RTN","RORXU001",5,0)
 ;
"RTN","RORXU001",6,0)
 ; #325          ADM^VADPT2 (controlled)
"RTN","RORXU001",7,0)
 ; #2056         GET1^DIQ, GETS^DIQ (supported)
"RTN","RORXU001",8,0)
 ; #10103        DT^XLFDT, FMADD^XLFDT
"RTN","RORXU001",9,0)
 ; #2548         APIs in routine SDQ: ACRP Interface Toolkit (supported)
"RTN","RORXU001",10,0)
 ; #417          .01 field and "C" x-ref of file #40.8 (controlled)
"RTN","RORXU001",11,0)
 ; #3545         ^DGPT("AAD" (private)
"RTN","RORXU001",12,0)
 ; #10061        IN5^VADPT (supported) 
"RTN","RORXU001",13,0)
 ;
"RTN","RORXU001",14,0)
 ;******************************************************************************
"RTN","RORXU001",15,0)
 ;******************************************************************************
"RTN","RORXU001",16,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORXU001",17,0)
 ;        
"RTN","RORXU001",18,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORXU001",19,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORXU001",20,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added tags CDUTIL and CDSCAN to check
"RTN","RORXU001",21,0)
 ;                                      for encounters in selected Divisions or
"RTN","RORXU001",22,0)
 ;                                      Clinics.  Added tag CDPARMS to set
"RTN","RORXU001",23,0)
 ;                                      Clnic and Division list parameters.
"RTN","RORXU001",24,0)
 ;
"RTN","RORXU001",25,0)
 ;******************************************************************************
"RTN","RORXU001",26,0)
 ;******************************************************************************
"RTN","RORXU001",27,0)
 Q
"RTN","RORXU001",28,0)
 ;
"RTN","RORXU001",29,0)
 ;***** DOUBLE CHECKS THE ADMISSION
"RTN","RORXU001",30,0)
 ;
"RTN","RORXU001",31,0)
 ; DFN           Patient IEN
"RTN","RORXU001",32,0)
 ; VAINDT        Admission date
"RTN","RORXU001",33,0)
 ; .DISDT        Discharge date
"RTN","RORXU001",34,0)
 ;
"RTN","RORXU001",35,0)
 ; Return Values:
"RTN","RORXU001",36,0)
 ;        0  Ok
"RTN","RORXU001",37,0)
 ;        1  Invalid admission date
"RTN","RORXU001",38,0)
 ;
"RTN","RORXU001",39,0)
CHKADM(DFN,VAINDT,DISDT) ;
"RTN","RORXU001",40,0)
 N IEN,RORMSG,VADMVT,VAHOW,VAROOT
"RTN","RORXU001",41,0)
 D ADM^VADPT2  Q:'VADMVT 1
"RTN","RORXU001",42,0)
 S IEN=+$$GET1^DIQ(405,VADMVT,.17,"I",,"RORMSG")
"RTN","RORXU001",43,0)
 S:IEN>0 DISDT=$$GET1^DIQ(405,IEN_",",.01,"I",,"RORMSG")
"RTN","RORXU001",44,0)
 Q 0
"RTN","RORXU001",45,0)
 ;
"RTN","RORXU001",46,0)
 ;***** DATE OF THE MOST RECENT VISIT TO ANY OF THE SELECTED CLINICS
"RTN","RORXU001",47,0)
 ;
"RTN","RORXU001",48,0)
 ; PATIEN        Patient IEN (file #2)
"RTN","RORXU001",49,0)
 ;
"RTN","RORXU001",50,0)
 ; .RORCLIN      Reference to a local array of Clinics, the subscripts
"RTN","RORXU001",51,0)
 ;               are IEN's from file #44 or will be a single element
"RTN","RORXU001",52,0)
 ;               array with a subscript of "ALL", which will denote
"RTN","RORXU001",53,0)
 ;               all clinics (i.e. CLIN("ALL")="").
"RTN","RORXU001",54,0)
 ;
"RTN","RORXU001",55,0)
 ; Return Values:
"RTN","RORXU001",56,0)
 ;        0  The patient has never been seen at any of the given
"RTN","RORXU001",57,0)
 ;           clinics
"RTN","RORXU001",58,0)
 ;       >0  Date of the most recent visit to one of the selected
"RTN","RORXU001",59,0)
 ;           clinics
"RTN","RORXU001",60,0)
 ;
"RTN","RORXU001",61,0)
LASTVSIT(PATIEN,RORCLIN) ;
"RTN","RORXU001",62,0)
 N QUERY,RORDT,RORLAST
"RTN","RORXU001",63,0)
 S RORDT=$$FMADD^XLFDT($$DT^XLFDT,1),RORLAST=0
"RTN","RORXU001",64,0)
 ;---
"RTN","RORXU001",65,0)
 D OPEN^SDQ(.QUERY)
"RTN","RORXU001",66,0)
 D INDEX^SDQ(.QUERY,"PATIENT","SET")
"RTN","RORXU001",67,0)
 D PAT^SDQ(.QUERY,PATIEN,"SET")
"RTN","RORXU001",68,0)
 D SCANCB^SDQ(.QUERY,"D SDQSCAN2^RORXU001(Y,Y0)","SET")
"RTN","RORXU001",69,0)
 D ACTIVE^SDQ(.QUERY,"TRUE","SET")
"RTN","RORXU001",70,0)
 D SCAN^SDQ(.QUERY,"FORWARD")
"RTN","RORXU001",71,0)
 D CLOSE^SDQ(.QUERY)
"RTN","RORXU001",72,0)
 ;---
"RTN","RORXU001",73,0)
 Q RORLAST
"RTN","RORXU001",74,0)
 ;
"RTN","RORXU001",75,0)
 ;***** LOADS PTF DATA AND CHECKS IF THE RECORD SHOULD BE SKIPPED
"RTN","RORXU001",76,0)
 ;
"RTN","RORXU001",77,0)
 ; PTFIEN        IEN of the PTF record
"RTN","RORXU001",78,0)
 ;
"RTN","RORXU001",79,0)
 ; [FLAGS]       Flags to control processing
"RTN","RORXU001",80,0)
 ;                 F  Skip fee-basis records - This flag commented
"RTN","RORXU001",81,0)
 ;                         out April 2009
"RTN","RORXU001",82,0)
 ;                 P  Skip non-PTF records
"RTN","RORXU001",83,0)
 ;
"RTN","RORXU001",84,0)
 ; [.ADMDT]      Admission date is returned via this parameter
"RTN","RORXU001",85,0)
 ; [.DISDT]      Discharge date is returned via this parameter
"RTN","RORXU001",86,0)
 ; [.SUFFIX]     Suffix is returned via this parameter
"RTN","RORXU001",87,0)
 ; [.STATUS]     Status is returned via this parameter
"RTN","RORXU001",88,0)
 ; [.FACILITY]   Facility number is returned via this parameter
"RTN","RORXU001",89,0)
 ;
"RTN","RORXU001",90,0)
 ; Return Values:
"RTN","RORXU001",91,0)
 ;       <0  Error code
"RTN","RORXU001",92,0)
 ;        0  Ok
"RTN","RORXU001",93,0)
 ;        1  Skip this record
"RTN","RORXU001",94,0)
 ;
"RTN","RORXU001",95,0)
PTF(PTFIEN,FLAGS,ADMDT,DISDT,SUFFIX,STATUS,FACILITY) ;
"RTN","RORXU001",96,0)
 N FLDLST,IENS,RORBUF,RORMSG
"RTN","RORXU001",97,0)
 S FLAGS=$G(FLAGS),IENS=(+PTFIEN)_","
"RTN","RORXU001",98,0)
 S FLDLST="2;3;5;6;70"
"RTN","RORXU001",99,0)
 ;S:FLAGS["F" FLDLST=FLDLST_";4"        ; FEE BASIS- commented out
"RTN","RORXU001",100,0)
 S:FLAGS["P" FLDLST=FLDLST_";11"       ; TYPE OF RECORD
"RTN","RORXU001",101,0)
 ;--- Load the data
"RTN","RORXU001",102,0)
 K RORMSG D GETS^DIQ(45,IENS,FLDLST,"I","RORBUF","RORMSG")
"RTN","RORXU001",103,0)
 ;Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,45,IENS)
"RTN","RORXU001",104,0)
 Q:$G(RORMSG("DIERR")) $$DBS^RORERR("RORMSG",-9,,,45,IENS)
"RTN","RORXU001",105,0)
 ;---
"RTN","RORXU001",106,0)
 S ADMDT=$G(RORBUF(45,IENS,2,"I"))     ; ADMISSION DATE
"RTN","RORXU001",107,0)
 S FACILITY=$G(RORBUF(45,IENS,3,"I"))  ; FACILITY
"RTN","RORXU001",108,0)
 S SUFFIX=$G(RORBUF(45,IENS,5,"I"))    ; SUFFIX
"RTN","RORXU001",109,0)
 S STATUS=$G(RORBUF(45,IENS,6,"I"))    ; STATUS
"RTN","RORXU001",110,0)
 S DISDT=$G(RORBUF(45,IENS,70,"I"))    ; DISCHARGE DATE
"RTN","RORXU001",111,0)
 Q:ADMDT'>0 1
"RTN","RORXU001",112,0)
 ;--- Skip a non-PTF record
"RTN","RORXU001",113,0)
 I FLAGS["P"  Q:$G(RORBUF(45,IENS,11,"I"))'=1 1
"RTN","RORXU001",114,0)
 ;--- Skip a fee basis record
"RTN","RORXU001",115,0)
 I FLAGS["F"  Q:$G(RORBUF(45,IENS,4,"I")) 1
"RTN","RORXU001",116,0)
 ;--- Success
"RTN","RORXU001",117,0)
 Q 0
"RTN","RORXU001",118,0)
 ;
"RTN","RORXU001",119,0)
 ;**** CALL-BACK ENTRY POINTS FOR THE SDQ API
"RTN","RORXU001",120,0)
SDQSCAN1(Y,Y0) ;
"RTN","RORXU001",121,0)
 N TMP
"RTN","RORXU001",122,0)
 ;--- Check the clinic
"RTN","RORXU001",123,0)
 I '$$PARAM^RORTSK01("CLINICS","ALL")  D  Q:'TMP
"RTN","RORXU001",124,0)
 . S TMP=$D(RORTSK("PARAMS","CLINICS","C",+$P(Y0,U,4)))
"RTN","RORXU001",125,0)
 ;--- Count the encounters
"RTN","RORXU001",126,0)
 S RORENCNT=RORENCNT+1
"RTN","RORXU001",127,0)
 Q
"RTN","RORXU001",128,0)
 ;
"RTN","RORXU001",129,0)
SDQSCAN2(Y,Y0) ;
"RTN","RORXU001",130,0)
 N DTX,TMP
"RTN","RORXU001",131,0)
 ;--- Check the clinic
"RTN","RORXU001",132,0)
 I '$$PARAM^RORTSK01("CLINICS","ALL")  D  Q:'TMP
"RTN","RORXU001",133,0)
 . S TMP=$D(RORTSK("PARAMS","CLINICS","C",+$P(Y0,U,4)))
"RTN","RORXU001",134,0)
 ;--- Date of the visit
"RTN","RORXU001",135,0)
 S DTX=+$P(Y0,U)  S:(DTX>RORLAST)&(DTX<RORDT) RORLAST=DTX
"RTN","RORXU001",136,0)
 Q
"RTN","RORXU001",137,0)
 ;
"RTN","RORXU001",138,0)
 ;***** CHECKS IF THE PATIENT WAS SEEN AT SELECTED CLINICS
"RTN","RORXU001",139,0)
 ;
"RTN","RORXU001",140,0)
 ; RORSDT        Start Date for search (FileMan).
"RTN","RORXU001",141,0)
 ;               Time is ignored and the beginning of the day is
"RTN","RORXU001",142,0)
 ;               considered as the boundary (ST\1).
"RTN","RORXU001",143,0)
 ;
"RTN","RORXU001",144,0)
 ; ROREDT        End Date for search (FileMan).
"RTN","RORXU001",145,0)
 ;               Time is ignored and the end of the day is
"RTN","RORXU001",146,0)
 ;               considered as the boundary (ED\1+1).
"RTN","RORXU001",147,0)
 ;
"RTN","RORXU001",148,0)
 ; PATIEN        Patient IEN (file #2)
"RTN","RORXU001",149,0)
 ;
"RTN","RORXU001",150,0)
 ; Return Values:
"RTN","RORXU001",151,0)
 ;        0  The patient was not seen at any of the given clinics
"RTN","RORXU001",152,0)
 ;           during the provided time frame
"RTN","RORXU001",153,0)
 ;        1  The patient was seen
"RTN","RORXU001",154,0)
 ; 
"RTN","RORXU001",155,0)
SEEN(RORSDT,ROREDT,PATIEN) ;
"RTN","RORXU001",156,0)
 N QUERY,RORENCNT
"RTN","RORXU001",157,0)
 S RORENCNT=0
"RTN","RORXU001",158,0)
 ;---
"RTN","RORXU001",159,0)
 D OPEN^SDQ(.QUERY)
"RTN","RORXU001",160,0)
 D INDEX^SDQ(.QUERY,"PATIENT/DATE","SET")
"RTN","RORXU001",161,0)
 D PAT^SDQ(.QUERY,PATIEN,"SET")
"RTN","RORXU001",162,0)
 D DATE^SDQ(.QUERY,RORSDT\1,$$FMADD^XLFDT(ROREDT\1,1),"SET")
"RTN","RORXU001",163,0)
 D SCANCB^SDQ(.QUERY,"D SDQSCAN1^RORXU001(Y,Y0)","SET")
"RTN","RORXU001",164,0)
 D ACTIVE^SDQ(.QUERY,"TRUE","SET")
"RTN","RORXU001",165,0)
 D SCAN^SDQ(.QUERY,"FORWARD")
"RTN","RORXU001",166,0)
 D CLOSE^SDQ(.QUERY)
"RTN","RORXU001",167,0)
 ;---
"RTN","RORXU001",168,0)
 Q (RORENCNT>0)
"RTN","RORXU001",169,0)
 ;
"RTN","RORXU001",170,0)
 ;***** SET UP CLINIC/DIVISION LIST PARAMETERS
"RTN","RORXU001",171,0)
 ;
"RTN","RORXU001",172,0)
 ;Input
"RTN","RORXU001",173,0)
 ; RORTSK    Report parameters
"RTN","RORXU001",174,0)
 ; OVERRIDE  Optional. If '1', send back dates in DATE_RANGE_3 instead of
"RTN","RORXU001",175,0)
 ;           dates in DATE_RANGE.
"RTN","RORXU001",176,0)
 ;
"RTN","RORXU001",177,0)
 ;Output
"RTN","RORXU001",178,0)
 ; 1 if clinic or division list exists, else 0
"RTN","RORXU001",179,0)
 ; START - Date in RORTSK("PARAMS","DATE_RANGE","A","START")
"RTN","RORXU001",180,0)
 ; END   - Date in RORTSK("PARAMS","DATE_RANGE","A","END")
"RTN","RORXU001",181,0)
 ;
"RTN","RORXU001",182,0)
CDPARMS(RORTSK,START,END,OVERRIDE) ;
"RTN","RORXU001",183,0)
 N FLAG S FLAG=0
"RTN","RORXU001",184,0)
 I $D(RORTSK("PARAMS","CLINICS","C")) S FLAG=1
"RTN","RORXU001",185,0)
 I $D(RORTSK("PARAMS","DIVISIONS","C")) S FLAG=1
"RTN","RORXU001",186,0)
 I FLAG D
"RTN","RORXU001",187,0)
 . I $G(OVERRIDE)=1 D
"RTN","RORXU001",188,0)
 .. S START=$G(RORTSK("PARAMS","DATE_RANGE_3","A","START"))
"RTN","RORXU001",189,0)
 .. S END=$G(RORTSK("PARAMS","DATE_RANGE_3","A","END"))
"RTN","RORXU001",190,0)
 . E  D
"RTN","RORXU001",191,0)
 .. S START=$G(RORTSK("PARAMS","DATE_RANGE","A","START"))
"RTN","RORXU001",192,0)
 .. S END=$G(RORTSK("PARAMS","DATE_RANGE","A","END"))
"RTN","RORXU001",193,0)
 Q FLAG
"RTN","RORXU001",194,0)
 ;
"RTN","RORXU001",195,0)
 ;***** EVALUATE CLINIC OR DIVISION UTILIZATION
"RTN","RORXU001",196,0)
 ;Will determine if the patient had any utilization in any of the
"RTN","RORXU001",197,0)
 ;clinics or division in the list.
"RTN","RORXU001",198,0)
 ;
"RTN","RORXU001",199,0)
 ;Input
"RTN","RORXU001",200,0)
 ; RORTSK   Report parameters with clinic or division list
"RTN","RORXU001",201,0)
 ; DFN      Patient DFN from file #2
"RTN","RORXU001",202,0)
 ; RORSDT   Start date for search
"RTN","RORXU001",203,0)
 ; ROREDT   End date for search
"RTN","RORXU001",204,0)
 ;
"RTN","RORXU001",205,0)
 ;Return Values:
"RTN","RORXU001",206,0)
 ; MATCH  Flag to indicate whether the patient should be on the report:
"RTN","RORXU001",207,0)
 ; 
"RTN","RORXU001",208,0)
 ;        1  The patient should appear on the report because at least 1 of
"RTN","RORXU001",209,0)
 ;           the following is true:
"RTN","RORXU001",210,0)
 ;           -- all clinics or divisions are selected
"RTN","RORXU001",211,0)
 ;           -- the patient has an outpatient encounter in at least 1 of the
"RTN","RORXU001",212,0)
 ;              clinics on the clinic list
"RTN","RORXU001",213,0)
 ;           -- the patient has an outpatient encounter in at least 1 of the
"RTN","RORXU001",214,0)
 ;              divisions on the division list
"RTN","RORXU001",215,0)
 ;           -- the patient has an inpatient 'movement' in at least 1 of the
"RTN","RORXU001",216,0)
 ;              divisions on the division list
"RTN","RORXU001",217,0)
 ;           
"RTN","RORXU001",218,0)
 ;        0  Parameter error or the patient should not appear on the report
"RTN","RORXU001",219,0)
 ; 
"RTN","RORXU001",220,0)
CDUTIL(RORTSK,DFN,RORSDT,ROREDT) ;
"RTN","RORXU001",221,0)
 Q:'DFN 0
"RTN","RORXU001",222,0)
 Q:'RORSDT 0
"RTN","RORXU001",223,0)
 Q:'ROREDT 0
"RTN","RORXU001",224,0)
 N TYPE  ;type of list = CLINICS or DIVISIONS
"RTN","RORXU001",225,0)
 N MATCH ;flag to indicate whether to keep or skip the patient
"RTN","RORXU001",226,0)
 N PIECE ;clinic or division piece number on the encounter node
"RTN","RORXU001",227,0)
 S (TYPE,MATCH,PIECE)=0
"RTN","RORXU001",228,0)
 ;
"RTN","RORXU001",229,0)
 ;---Set Clinic and Division variables
"RTN","RORXU001",230,0)
 I $D(RORTSK("PARAMS","CLINICS","C")) S TYPE="CLINICS",PIECE=4 ;clinic
"RTN","RORXU001",231,0)
 I $D(RORTSK("PARAMS","DIVISIONS","C")) S TYPE="DIVISIONS",PIECE=11 ;division
"RTN","RORXU001",232,0)
 ;
"RTN","RORXU001",233,0)
 Q:(TYPE=0) 1  ;quit if ALL divisions and clinics are requested
"RTN","RORXU001",234,0)
 ;
"RTN","RORXU001",235,0)
 ;if division list, check for inpatient utilization
"RTN","RORXU001",236,0)
 I TYPE="DIVISIONS" D INPAT(DFN,RORSDT,ROREDT,.MATCH)
"RTN","RORXU001",237,0)
 ;
"RTN","RORXU001",238,0)
 ;if no utilization found yet, check outpatient encounters
"RTN","RORXU001",239,0)
 I 'MATCH D OUTPAT(DFN,RORSDT,ROREDT,TYPE,PIECE,.MATCH)
"RTN","RORXU001",240,0)
 ;
"RTN","RORXU001",241,0)
 Q MATCH
"RTN","RORXU001",242,0)
 ;
"RTN","RORXU001",243,0)
 ;***** CHECK FOR INPATIENT UTILIZATION IN DIVISION(S).
"RTN","RORXU001",244,0)
 ;
"RTN","RORXU001",245,0)
 ;Input
"RTN","RORXU001",246,0)
 ; DFN      Patient DFN from file #2
"RTN","RORXU001",247,0)
 ; RORSDT   Start date for search
"RTN","RORXU001",248,0)
 ; ROREDT   End date for search
"RTN","RORXU001",249,0)
 ; MATCH    Flag for output
"RTN","RORXU001",250,0)
 ;
"RTN","RORXU001",251,0)
 ;Output
"RTN","RORXU001",252,0)
 ; MATCH=1  Inpatient utilization found in selected division(s)
"RTN","RORXU001",253,0)
 ; MATCH=0  No inpatient utilization found in selected division(s)
"RTN","RORXU001",254,0)
 ;
"RTN","RORXU001",255,0)
INPAT(DFN,RORSDT,ROREDT,MATCH) ; get inpatient data
"RTN","RORXU001",256,0)
 N ADMDATE,STOP,MVDATE,RC,PTFIEN,TMP,DIVIEN,RC
"RTN","RORXU001",257,0)
 S STOP=0,RC=0
"RTN","RORXU001",258,0)
 S ADMDATE=RORSDT
"RTN","RORXU001",259,0)
 S ROREDT=ROREDT_".235959"
"RTN","RORXU001",260,0)
 ;beginning with the 'start' date, first see if the patient was already an
"RTN","RORXU001",261,0)
 ;inpatient at that time.  Then loop through admission dates in ^DGPT.
"RTN","RORXU001",262,0)
 F  Q:STOP  D  S ADMDATE=$O(^DGPT("AAD",DFN,ADMDATE)) Q:ADMDATE'>0
"RTN","RORXU001",263,0)
 . I ADMDATE>ROREDT S STOP=1 Q
"RTN","RORXU001",264,0)
 . K MVDATE,VAIP  S VAIP(16,1)=ADMDATE
"RTN","RORXU001",265,0)
 . F  Q:STOP  D  Q:RC
"RTN","RORXU001",266,0)
 .. S VAIP("D")=+$G(VAIP(16,1))
"RTN","RORXU001",267,0)
 .. I VAIP("D")'>0 S RC=1 Q
"RTN","RORXU001",268,0)
 .. D IN5^VADPT
"RTN","RORXU001",269,0)
 .. S MVDATE=+$G(VAIP(3)) ;movement date (internal format)
"RTN","RORXU001",270,0)
 .. Q:+$G(VAIP(4))=3  ;quit if type of movement is OPT-SC
"RTN","RORXU001",271,0)
 .. ;--- Check if movement date is after end date
"RTN","RORXU001",272,0)
 .. I $G(MVDATE)>ROREDT Q
"RTN","RORXU001",273,0)
 .. ;--- Check the PTF record
"RTN","RORXU001",274,0)
 .. S PTFIEN=+$G(VAIP(12))  Q:PTFIEN'>0
"RTN","RORXU001",275,0)
 .. ;skip non-ptf records and fee-basis records
"RTN","RORXU001",276,0)
 .. N SUFFIX,FACILITY
"RTN","RORXU001",277,0)
 .. Q:$$PTF^RORXU001(PTFIEN,"FP",,,.SUFFIX,,.FACILITY)
"RTN","RORXU001",278,0)
 .. ;--- Check the division
"RTN","RORXU001",279,0)
 .. S TMP=$$PARAM^RORTSK01("DIVISIONS","ALL")
"RTN","RORXU001",280,0)
 .. I 'TMP  D
"RTN","RORXU001",281,0)
 ... S TMP=FACILITY_SUFFIX
"RTN","RORXU001",282,0)
 ... S DIVIEN=$S(TMP'="":+$O(^DG(40.8,"C",TMP,"")),1:0)
"RTN","RORXU001",283,0)
 ... I $D(RORTSK("PARAMS","DIVISIONS","C",DIVIEN)) S MATCH=1,STOP=1
"RTN","RORXU001",284,0)
 Q
"RTN","RORXU001",285,0)
 ;
"RTN","RORXU001",286,0)
 ;***** CHECK FOR OUTPATIENT UTILIZATION IN CLINIC/DIVISION(S).
"RTN","RORXU001",287,0)
 ;
"RTN","RORXU001",288,0)
 ;Input
"RTN","RORXU001",289,0)
 ; DFN      Patient DFN from file #2
"RTN","RORXU001",290,0)
 ; RORSDT   Start date for search
"RTN","RORXU001",291,0)
 ; ROREDT   End date for search
"RTN","RORXU001",292,0)
 ; MATCH    Flag for output
"RTN","RORXU001",293,0)
 ;
"RTN","RORXU001",294,0)
 ;Output
"RTN","RORXU001",295,0)
 ; MATCH=1  Outpatient utilization found
"RTN","RORXU001",296,0)
 ; MATCH=0  No outpatient utilization found
"RTN","RORXU001",297,0)
 ;
"RTN","RORXU001",298,0)
OUTPAT(DFN,RORSDT,ROREDT,TYPE,PIECE,MATCH) ; get outpatient encounter data
"RTN","RORXU001",299,0)
 K SDQDATA,SDQUERY N QUERY
"RTN","RORXU001",300,0)
 D OPEN^SDQ(.QUERY)
"RTN","RORXU001",301,0)
 I '$$ERRCHK^SDQUT() D INDEX^SDQ(.QUERY,"PATIENT/DATE","SET")
"RTN","RORXU001",302,0)
 I '$$ERRCHK^SDQUT() D PAT^SDQ(.QUERY,DFN,"SET")
"RTN","RORXU001",303,0)
 I '$$ERRCHK^SDQUT() D DATE^SDQ(.QUERY,RORSDT,$$FMADD^XLFDT(ROREDT,1),"SET")
"RTN","RORXU001",304,0)
 I '$$ERRCHK^SDQUT() D SCANCB^SDQ(.QUERY,"I 'MATCH D CDSCAN^RORXU001(Y0,.MATCH,.TYPE,.PIECE,.RORTSK)","SET")
"RTN","RORXU001",305,0)
 I '$$ERRCHK^SDQUT() D ACTIVE^SDQ(.QUERY,"TRUE","SET")
"RTN","RORXU001",306,0)
 I '$$ERRCHK^SDQUT() D SCAN^SDQ(.QUERY,"FORWARD")
"RTN","RORXU001",307,0)
 D CLOSE^SDQ(.QUERY)
"RTN","RORXU001",308,0)
 ;---
"RTN","RORXU001",309,0)
 K SDQDATA,SDQUERY,SDCNT
"RTN","RORXU001",310,0)
 Q
"RTN","RORXU001",311,0)
 ;
"RTN","RORXU001",312,0)
 ;***** SDQ CALLBACK - EXECUTED FOR EACH ENCOUNTER RETURNED IN CDLIST.
"RTN","RORXU001",313,0)
 ;                     LOOKING FOR MATCH ON CLINIC OR DIVISION.
"RTN","RORXU001",314,0)
 ;Input
"RTN","RORXU001",315,0)
 ; Y0       Encounter information returned from SCAN^SDQ
"RTN","RORXU001",316,0)
 ;                     4th piece = clinic IEN
"RTN","RORXU001",317,0)
 ;                    11th piece = division IEN
"RTN","RORXU001",318,0)
 ;
"RTN","RORXU001",319,0)
 ; MATCH    Comes in set to 0
"RTN","RORXU001",320,0)
 ; TYPE     CLINICS or DIVISIONS
"RTN","RORXU001",321,0)
 ; PIECE    Piece# of encounter data of interest (clinic or division)
"RTN","RORXU001",322,0)
 ; RORTSK   Report parameters
"RTN","RORXU001",323,0)
 ;
"RTN","RORXU001",324,0)
 ;Output
"RTN","RORXU001",325,0)
 ; MATCH=1  Encounter meets utilization requirement
"RTN","RORXU001",326,0)
 ; MATCH=0  Encounter does not meet utilization requirement
"RTN","RORXU001",327,0)
 ;        
"RTN","RORXU001",328,0)
CDSCAN(Y0,MATCH,TYPE,PIECE,RORTSK) ; get clinic/division from encounter
"RTN","RORXU001",329,0)
 ;--- Check the list
"RTN","RORXU001",330,0)
 I $D(RORTSK("PARAMS",TYPE,"C",+$P(Y0,U,PIECE))) S MATCH=1
"RTN","RORXU001",331,0)
 Q
"RTN","RORXU002")
0^3^B111065586^B111065586
"RTN","RORXU002",1,0)
RORXU002 ;HCIOFO/SG - REPORT BUILDER UTILITIES ;5/18/06 11:13am
"RTN","RORXU002",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,10,13**;Feb 17, 2006;Build 27
"RTN","RORXU002",3,0)
 ;
"RTN","RORXU002",4,0)
 ; This routine uses the following IAs:
"RTN","RORXU002",5,0)
 ;
"RTN","RORXU002",6,0)
 ; #3990   $$ICDD^ICDCODE (supported)
"RTN","RORXU002",7,0)
 ; #2050   BLD^DIALOG (supported)
"RTN","RORXU002",8,0)
 ; #2056   GETS^DIQ (supported)
"RTN","RORXU002",9,0)
 ; #2056   $$GET1^DIQ (supported)
"RTN","RORXU002",10,0)
 ; #10103  $$NOW^XLFDT  (supported)
"RTN","RORXU002",11,0)
 ; #10104  $$TRIM^XLFSTR (supported)
"RTN","RORXU002",12,0)
 ; #417    Read access to .01 field of file #40.8 (controlled)
"RTN","RORXU002",13,0)
 ; #10040  Read access to file #44 (supported)
"RTN","RORXU002",14,0)
 ;
"RTN","RORXU002",15,0)
 ;******************************************************************************
"RTN","RORXU002",16,0)
 ;******************************************************************************
"RTN","RORXU002",17,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORXU002",18,0)
 ;        
"RTN","RORXU002",19,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORXU002",20,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORXU002",21,0)
 ;ROR*1.5*10   APR  2010   A SAUNDERS   Modified Lab Tests Ranges section in
"RTN","RORXU002",22,0)
 ;                                      PARAMS tag to include the 3 new reports.
"RTN","RORXU002",23,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added Division and Clinic sections in
"RTN","RORXU002",24,0)
 ;                                      PARAMS tag (pulled from RORXU006).
"RTN","RORXU002",25,0)
 ;
"RTN","RORXU002",26,0)
 ;******************************************************************************
"RTN","RORXU002",27,0)
 ;******************************************************************************
"RTN","RORXU002",28,0)
 Q
"RTN","RORXU002",29,0)
 ;
"RTN","RORXU002",30,0)
 ;***** SCANS THE TABLE DEFINITION (RORSRC) FOR COLUMN NAMES
"RTN","RORXU002",31,0)
 ;
"RTN","RORXU002",32,0)
 ; .TERM         Reference to a local variable where
"RTN","RORXU002",33,0)
 ;               is terminator is returned
"RTN","RORXU002",34,0)
 ;
"RTN","RORXU002",35,0)
 ; Return Values:
"RTN","RORXU002",36,0)
 ;       ""  End of definition
"RTN","RORXU002",37,0)
 ;      ...  Name of the column
"RTN","RORXU002",38,0)
 ;
"RTN","RORXU002",39,0)
COLSCAN(TERM) ;
"RTN","RORXU002",40,0)
 N CH,I,TOKEN
"RTN","RORXU002",41,0)
 F I=1:1  S TERM=$E(RORSRC,I)  Q:"(,)"[TERM
"RTN","RORXU002",42,0)
 S TOKEN=$E(RORSRC,1,I-1)
"RTN","RORXU002",43,0)
 F I=I+1:1  S CH=$E(RORSRC,I)  Q:(CH="")!("(,)"'[CH)
"RTN","RORXU002",44,0)
 S $E(RORSRC,1,I-1)=""
"RTN","RORXU002",45,0)
 Q TOKEN
"RTN","RORXU002",46,0)
 ;
"RTN","RORXU002",47,0)
 ;***** CHECKS THE FILEMAN DATE/TIME VALUE
"RTN","RORXU002",48,0)
DATE(DT) ;
"RTN","RORXU002",49,0)
 Q $S(DT>0:+DT,1:"")
"RTN","RORXU002",50,0)
 ;
"RTN","RORXU002",51,0)
 ;***** OUTPUTS THE BASIC HEADER TO THE REPORT
"RTN","RORXU002",52,0)
 ;
"RTN","RORXU002",53,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",54,0)
 ;
"RTN","RORXU002",55,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",56,0)
 ;
"RTN","RORXU002",57,0)
 ; Return Values:
"RTN","RORXU002",58,0)
 ;       <0  Error code
"RTN","RORXU002",59,0)
 ;       >0  IEN of the HEADER element
"RTN","RORXU002",60,0)
 ;
"RTN","RORXU002",61,0)
HEADER(RORTSK,PARTAG) ;
"RTN","RORXU002",62,0)
 N HEADER,IENS,REGIEN,RORBUF,RORMSG,TMP
"RTN","RORXU002",63,0)
 S HEADER=$$ADDVAL^RORTSK11(RORTSK,"HEADER",,PARTAG)
"RTN","RORXU002",64,0)
 Q:HEADER<0 HEADER
"RTN","RORXU002",65,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$$DATE($$NOW^XLFDT),HEADER)
"RTN","RORXU002",66,0)
 D ADDVAL^RORTSK11(RORTSK,"TASK_NUMBER",RORTSK,HEADER)
"RTN","RORXU002",67,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",68,0)
 ;---
"RTN","RORXU002",69,0)
 S IENS=REGIEN_","
"RTN","RORXU002",70,0)
 D GETS^DIQ(798.1,IENS,"1;2","I","RORBUF","RORMSG")
"RTN","RORXU002",71,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1,IENS)
"RTN","RORXU002",72,0)
 S TMP=$G(RORBUF(798.1,IENS,1,"I"))
"RTN","RORXU002",73,0)
 D ADDVAL^RORTSK11(RORTSK,"UPDATED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",74,0)
 S TMP=$G(RORBUF(798.1,IENS,2,"I"))
"RTN","RORXU002",75,0)
 D ADDVAL^RORTSK11(RORTSK,"EXTRACTED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",76,0)
 Q HEADER
"RTN","RORXU002",77,0)
 ;
"RTN","RORXU002",78,0)
 ;***** PARSES THE COMMA-SEPARATED LIST
"RTN","RORXU002",79,0)
 ;
"RTN","RORXU002",80,0)
 ; .LIST         Reference to a local variable that contains a list.
"RTN","RORXU002",81,0)
 ;               Items of the list are returned as the subscripts of
"RTN","RORXU002",82,0)
 ;               this variable.
"RTN","RORXU002",83,0)
 ;
"RTN","RORXU002",84,0)
LIST(LIST) ;
"RTN","RORXU002",85,0)
 N I,TMP,VAL
"RTN","RORXU002",86,0)
 F I=1:1  S VAL=$P(LIST,",",I)  Q:VAL=""  D
"RTN","RORXU002",87,0)
 . S TMP=$$TRIM^XLFSTR(VAL)
"RTN","RORXU002",88,0)
 . S:TMP'="" LIST(TMP)=""
"RTN","RORXU002",89,0)
 Q
"RTN","RORXU002",90,0)
 ;
"RTN","RORXU002",91,0)
 ;***** COMPILES A TEXT DESCRIPTION FOR THE REPORT OPTIONS
"RTN","RORXU002",92,0)
 ;
"RTN","RORXU002",93,0)
 ; .OPTIONS      Reference to a local variable containing
"RTN","RORXU002",94,0)
 ;               the options as subscripts
"RTN","RORXU002",95,0)
 ;
"RTN","RORXU002",96,0)
 ; [DLGNUM]      Number of the dialog that contains the template
"RTN","RORXU002",97,0)
 ;               (7980000.018, by default).
"RTN","RORXU002",98,0)
 ;
"RTN","RORXU002",99,0)
 ; Return Values:
"RTN","RORXU002",100,0)
 ;      ...  Text description of the options
"RTN","RORXU002",101,0)
 ;
"RTN","RORXU002",102,0)
OPTXT(OPTIONS,DLGNUM) ;
"RTN","RORXU002",103,0)
 N I,J,NS,RORBUF,TEXT,TMP
"RTN","RORXU002",104,0)
 S:$G(DLGNUM)'>0 DLGNUM=7980000.018
"RTN","RORXU002",105,0)
 D BLD^DIALOG(DLGNUM,,,"RORBUF")
"RTN","RORXU002",106,0)
 S TEXT="",I=0
"RTN","RORXU002",107,0)
 F  S I=$O(RORBUF(I))  Q:I=""  D:$E(RORBUF(I),1)'=" "
"RTN","RORXU002",108,0)
 . S NS=0
"RTN","RORXU002",109,0)
 . F J=1:1  S TMP=$TR($P(RORBUF(I),",",J)," ")  Q:TMP=""  D
"RTN","RORXU002",110,0)
 . . S:$D(OPTIONS(TMP)) NS=2**(J-1)+NS
"RTN","RORXU002",111,0)
 . Q:'NS
"RTN","RORXU002",112,0)
 . S TMP=$$TRIM^XLFSTR($G(RORBUF(I+NS)))
"RTN","RORXU002",113,0)
 . S:TMP'="" TEXT=TEXT_", "_TMP
"RTN","RORXU002",114,0)
 Q $P(TEXT,", ",2,999)
"RTN","RORXU002",115,0)
 ;
"RTN","RORXU002",116,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORXU002",117,0)
 ;
"RTN","RORXU002",118,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",119,0)
 ;
"RTN","RORXU002",120,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",121,0)
 ;
"RTN","RORXU002",122,0)
 ; .STDT         Start and end dates of the report
"RTN","RORXU002",123,0)
 ; .ENDT         are returned via these parameters
"RTN","RORXU002",124,0)
 ;
"RTN","RORXU002",125,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are returned via this
"RTN","RORXU002",126,0)
 ;               parameter. The "D" (skip deceased patients) and "G"
"RTN","RORXU002",127,0)
 ;               (skip pending patients) flags are always added.
"RTN","RORXU002",128,0)
 ;
"RTN","RORXU002",129,0)
 ; Return Values:
"RTN","RORXU002",130,0)
 ;       <0  Error code
"RTN","RORXU002",131,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORXU002",132,0)
 ;
"RTN","RORXU002",133,0)
PARAMS(RORTSK,PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORXU002",134,0)
 N BUF,ELEMENT,I,LTAG,MODE,NAME,PARAMS,RC,REGIEN,RORMSG,TMP,IEN
"RTN","RORXU002",135,0)
 S PARAMS=$$ADDVAL^RORTSK11(RORTSK,"PARAMETERS",,PARTAG)
"RTN","RORXU002",136,0)
 S RC=0,(ENDT,STDT)="",FLAGS=""
"RTN","RORXU002",137,0)
 ;
"RTN","RORXU002",138,0)
 ;=== Registry name
"RTN","RORXU002",139,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",140,0)
 I REGIEN>0  D  Q:RC<0 RC
"RTN","RORXU002",141,0)
 . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U)
"RTN","RORXU002",142,0)
 . I TMP=""  S RC=-1  Q
"RTN","RORXU002",143,0)
 . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,PARAMS)
"RTN","RORXU002",144,0)
 ;
"RTN","RORXU002",145,0)
 ;=== Alternate date ranges
"RTN","RORXU002",146,0)
 F I=2:1:3  D  Q:RC<0
"RTN","RORXU002",147,0)
 . S STDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"START")\1  Q:STDT'>0
"RTN","RORXU002",148,0)
 . S ENDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"END")\1    Q:ENDT'>0
"RTN","RORXU002",149,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE_"_I,,PARAMS)
"RTN","RORXU002",150,0)
 . I ELEMENT<0  S RC=+ELEMENT  Q
"RTN","RORXU002",151,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT)  Q:RC<0
"RTN","RORXU002",152,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",153,0)
 Q:RC<0 RC
"RTN","RORXU002",154,0)
 ;
"RTN","RORXU002",155,0)
 ;=== Main date range
"RTN","RORXU002",156,0)
 S STDT=$$PARAM^RORTSK01("DATE_RANGE","START")\1
"RTN","RORXU002",157,0)
 S ENDT=$$PARAM^RORTSK01("DATE_RANGE","END")\1
"RTN","RORXU002",158,0)
 I STDT>0,ENDT>0  D  Q:RC<0 RC
"RTN","RORXU002",159,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE",,PARAMS)
"RTN","RORXU002",160,0)
 . I ELEMENT<0  S RC=+ELEMENT  Q
"RTN","RORXU002",161,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT)  Q:RC<0
"RTN","RORXU002",162,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",163,0)
 E  S (ENDT,STDT)=""
"RTN","RORXU002",164,0)
 ;
"RTN","RORXU002",165,0)
 ;=== Task comment
"RTN","RORXU002",166,0)
 S TMP=$$PARAM^RORTSK01("TASK_COMMENT")
"RTN","RORXU002",167,0)
 D:TMP'="" ADDVAL^RORTSK11(RORTSK,"TASK_COMMENT",TMP,PARAMS)
"RTN","RORXU002",168,0)
 ;
"RTN","RORXU002",169,0)
 ;=== Clinic Selection - patch 13
"RTN","RORXU002",170,0)
 D:$D(RORTSK("PARAMS","CLINICS","C"))
"RTN","RORXU002",171,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS",,PARAMS)  Q:LTAG'>0
"RTN","RORXU002",172,0)
 . S IEN=0
"RTN","RORXU002",173,0)
 . F  S IEN=$O(RORTSK("PARAMS","CLINICS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU002",174,0)
 . . S TMP=$$GET1^DIQ(44,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",175,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,44,IEN_",")
"RTN","RORXU002",176,0)
 . . Q:TMP=""
"RTN","RORXU002",177,0)
 . . D ADDVAL^RORTSK11(RORTSK,"CLINIC",TMP,LTAG,,IEN)
"RTN","RORXU002",178,0)
 D:$$PARAM^RORTSK01("CLINICS","ALL")
"RTN","RORXU002",179,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS","ALL",PARAMS)
"RTN","RORXU002",180,0)
 ;
"RTN","RORXU002",181,0)
 ;=== Division Selection - patch 13
"RTN","RORXU002",182,0)
 D:$D(RORTSK("PARAMS","DIVISIONS","C"))
"RTN","RORXU002",183,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS",,PARAMS)  Q:LTAG'>0
"RTN","RORXU002",184,0)
 . S IEN=0
"RTN","RORXU002",185,0)
 . F  S IEN=$O(RORTSK("PARAMS","DIVISIONS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU002",186,0)
 . . S TMP=$$GET1^DIQ(40.8,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",187,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,40.8,IEN_",")
"RTN","RORXU002",188,0)
 . . Q:TMP=""
"RTN","RORXU002",189,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DIVISION",TMP,LTAG,,IEN)
"RTN","RORXU002",190,0)
 D:$$PARAM^RORTSK01("DIVISIONS","ALL")
"RTN","RORXU002",191,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS","ALL",PARAMS)
"RTN","RORXU002",192,0)
 ;
"RTN","RORXU002",193,0)
 ;
"RTN","RORXU002",194,0)
 ;=== Patient selection and Options
"RTN","RORXU002",195,0)
 F NAME="PATIENTS","OPTIONS"  D  Q:RC<0
"RTN","RORXU002",196,0)
 . K BUF  M BUF=RORTSK("PARAMS",NAME,"A")  Q:$D(BUF)<10
"RTN","RORXU002",197,0)
 . ;--- Generate the XML tags
"RTN","RORXU002",198,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,NAME,$$OPTXT(.BUF),PARAMS)
"RTN","RORXU002",199,0)
 . I ELEMENT'>0  S RC=ELEMENT  Q
"RTN","RORXU002",200,0)
 . S TMP=""
"RTN","RORXU002",201,0)
 . F  S TMP=$O(BUF(TMP))  Q:TMP=""  D  Q:RC<0
"RTN","RORXU002",202,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,TMP,"1")
"RTN","RORXU002",203,0)
 . ;--- Compile the flags
"RTN","RORXU002",204,0)
 . D:NAME="PATIENTS"
"RTN","RORXU002",205,0)
 . . S:'$D(BUF("DE_BEFORE")) FLAGS=FLAGS_"P"
"RTN","RORXU002",206,0)
 . . S:'$D(BUF("DE_DURING")) FLAGS=FLAGS_"N"
"RTN","RORXU002",207,0)
 . . S:'$D(BUF("DE_AFTER")) FLAGS=FLAGS_"F"
"RTN","RORXU002",208,0)
 Q:RC<0 RC
"RTN","RORXU002",209,0)
 ;
"RTN","RORXU002",210,0)
 ;=== Other Registries
"RTN","RORXU002",211,0)
 I $D(RORTSK("PARAMS","OTHER_REGISTRIES","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",212,0)
 . N NODE,REGIEN
"RTN","RORXU002",213,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"OTHER_REGISTRIES",,PARAMS)
"RTN","RORXU002",214,0)
 . I LTAG<0  S RC=+LTAG  Q
"RTN","RORXU002",215,0)
 . S NODE=$NA(RORTSK("PARAMS","OTHER_REGISTRIES","C"))
"RTN","RORXU002",216,0)
 . S REGIEN=0
"RTN","RORXU002",217,0)
 . F  S REGIEN=$O(@NODE@(REGIEN))  Q:REGIEN'>0  D  Q:RC<0
"RTN","RORXU002",218,0)
 . . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U,2)
"RTN","RORXU002",219,0)
 . . S MODE=+$G(@NODE@(REGIEN))
"RTN","RORXU002",220,0)
 . . I 'MODE!(TMP="")  K @NODE@(REGIEN)  Q
"RTN","RORXU002",221,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",222,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,LTAG)
"RTN","RORXU002",223,0)
 . S FLAGS=FLAGS_"R"
"RTN","RORXU002",224,0)
 ;
"RTN","RORXU002",225,0)
 ;=== Local Fields
"RTN","RORXU002",226,0)
 I $D(RORTSK("PARAMS","LOCAL_FIELDS","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",227,0)
 . N NODE,IEN,IENS
"RTN","RORXU002",228,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOCAL_FIELDS",,PARAMS)
"RTN","RORXU002",229,0)
 . I LTAG<0  S RC=+LTAG  Q
"RTN","RORXU002",230,0)
 . S NODE=$NA(RORTSK("PARAMS","LOCAL_FIELDS","C"))
"RTN","RORXU002",231,0)
 . S IEN=0
"RTN","RORXU002",232,0)
 . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORXU002",233,0)
 . . S TMP=$$GET1^DIQ(799.53,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",234,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,799.53,IEN_",")
"RTN","RORXU002",235,0)
 . . S MODE=+$G(@NODE@(IEN))
"RTN","RORXU002",236,0)
 . . I 'MODE!(TMP="")  K @NODE@(IEN)  Q
"RTN","RORXU002",237,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",238,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"FIELD",TMP,LTAG)
"RTN","RORXU002",239,0)
 . S FLAGS=FLAGS_"O"
"RTN","RORXU002",240,0)
 ;
"RTN","RORXU002",241,0)
 ;=== Lab test ranges
"RTN","RORXU002",242,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",243,0)
 . N TYPE S TYPE=3 ;default = 3 for 'lab by range' report
"RTN","RORXU002",244,0)
 . I $G(RORTSK("EP"))["BMIRANGE" S TYPE=5 ;change to 5 if BMI
"RTN","RORXU002",245,0)
 . I $G(RORTSK("EP"))["MLDRANGE" S TYPE=6 ;change to 6 if MELD
"RTN","RORXU002",246,0)
 . I $G(RORTSK("EP"))["RFRANGE" S TYPE=7 ;change to 7 if Renal
"RTN","RORXU002",247,0)
 . N GRC,NODE
"RTN","RORXU002",248,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORXU002",249,0)
 . S GRC=0
"RTN","RORXU002",250,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORXU002",251,0)
 . . S RC=$$ITEMIEN^RORUTL09(TYPE,REGIEN,GRC,.TMP)
"RTN","RORXU002",252,0)
 . . S:RC'<0 @NODE@(GRC)=TMP
"RTN","RORXU002",253,0)
 ;
"RTN","RORXU002",254,0)
 ;=== ICD-9 filter/group/codes
"RTN","RORXU002",255,0)
 N LEV1FILT,LEV2GRP,LEV3ICD9,ICD9IEN,ICD9CODE,GRPNAME,FILTER,ICD9DESC
"RTN","RORXU002",256,0)
 S FILTER=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORXU002",257,0)
 I $L(FILTER)>0 D  ;quit if no ICD9 filter exists
"RTN","RORXU002",258,0)
 . S LEV1FILT=$$ADDVAL^RORTSK11(RORTSK,"ICD9FILT",,PARAMS)
"RTN","RORXU002",259,0)
 . I LEV1FILT<0 S RC=LEV1FILT Q
"RTN","RORXU002",260,0)
 . ;add filter value to the output
"RTN","RORXU002",261,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,LEV1FILT,"FILTER",FILTER)
"RTN","RORXU002",262,0)
 . ;if there's an ICD9 group, process it
"RTN","RORXU002",263,0)
 . I $D(RORTSK("PARAMS","ICD9FILT","G"))>1 D  Q:RC<0
"RTN","RORXU002",264,0)
 .. S NODE=$NA(RORTSK("PARAMS","ICD9FILT","G"))
"RTN","RORXU002",265,0)
 .. S GRPNAME=0,RC=0
"RTN","RORXU002",266,0)
 .. F  S GRPNAME=$O(@NODE@(GRPNAME)) Q:GRPNAME=""  D  Q:RC<0
"RTN","RORXU002",267,0)
 ... S LEV2GRP=$$ADDVAL^RORTSK11(RORTSK,"GROUP",,LEV1FILT)
"RTN","RORXU002",268,0)
 ... I LEV2GRP'>0  S RC=LEV2GRP Q 
"RTN","RORXU002",269,0)
 ... ;add group name to the output
"RTN","RORXU002",270,0)
 ... D ADDATTR^RORTSK11(RORTSK,LEV2GRP,"ID",GRPNAME)
"RTN","RORXU002",271,0)
 ... S ICD9IEN=0
"RTN","RORXU002",272,0)
 ... F  S ICD9IEN=$O(@NODE@(GRPNAME,"C",ICD9IEN)) Q:ICD9IEN'>0  D
"RTN","RORXU002",273,0)
 .... S ICD9CODE=+$G(@NODE@(GRPNAME,"C",ICD9IEN)) Q:ICD9CODE'>0
"RTN","RORXU002",274,0)
 .... ;get diagnosis description
"RTN","RORXU002",275,0)
 .... N RORDESC K RORDESC S TMP=$$ICDD^ICDCODE(ICD9CODE,"RORDESC")
"RTN","RORXU002",276,0)
 .... S ICD9DESC=$G(RORDESC(1))
"RTN","RORXU002",277,0)
 .... S LEV3ICD9=$$ADDVAL^RORTSK11(RORTSK,"ICD9",$G(ICD9DESC),LEV2GRP)
"RTN","RORXU002",278,0)
 .... D ADDATTR^RORTSK11(RORTSK,LEV3ICD9,"ID",$G(ICD9CODE))
"RTN","RORXU002",279,0)
 .... K RORDESC
"RTN","RORXU002",280,0)
 ;
"RTN","RORXU002",281,0)
 ;=== get Max Date
"RTN","RORXU002",282,0)
 N MAXDT S MAXDT=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORXU002",283,0)
 I $G(MAXDT)>0 D ADDVAL^RORTSK11(RORTSK,"MAX_DATE",MAXDT,PARAMS)
"RTN","RORXU002",284,0)
 ;
"RTN","RORXU002",285,0)
 ;=== Defaults
"RTN","RORXU002",286,0)
 S TMP=$TR(FLAGS,"FNP")  S:$L(FLAGS)-$L(TMP)=3 FLAGS=TMP
"RTN","RORXU002",287,0)
 S FLAGS=FLAGS_"DG"
"RTN","RORXU002",288,0)
 ;
"RTN","RORXU002",289,0)
 ;=== Success
"RTN","RORXU002",290,0)
 Q PARAMS
"RTN","RORXU002",291,0)
 ;
"RTN","RORXU002",292,0)
 ;***** GENERATES TABLE DEFINITION
"RTN","RORXU002",293,0)
 ;
"RTN","RORXU002",294,0)
 ; TBLREF        Reference to the definition table in the source
"RTN","RORXU002",295,0)
 ;               code (TAG^ROUTINE). See the HEADER^RORX013 for
"RTN","RORXU002",296,0)
 ;               examples of table definitions.
"RTN","RORXU002",297,0)
 ;
"RTN","RORXU002",298,0)
 ; HEADER        IEN of the HEADER element
"RTN","RORXU002",299,0)
 ;
"RTN","RORXU002",300,0)
 ; Return Values:
"RTN","RORXU002",301,0)
 ;       <0  Error code
"RTN","RORXU002",302,0)
 ;        0  Ok
"RTN","RORXU002",303,0)
 ;
"RTN","RORXU002",304,0)
TBLDEF(TBLREF,HEADER) ;
"RTN","RORXU002",305,0)
 N COND,IT,NAME,RC,RORSRC,TBLDEF,TERM,TGET
"RTN","RORXU002",306,0)
 S TGET="S RORSRC=$T("_$P(TBLREF,"^")_"+IT^"_$P(TBLREF,"^",2)_")"
"RTN","RORXU002",307,0)
 S RC=0
"RTN","RORXU002",308,0)
 F IT=1:1  X TGET  S RORSRC=$P(RORSRC,";;",2)  Q:RORSRC=""  D  Q:RC<0
"RTN","RORXU002",309,0)
 . S COND=$$TRIM^XLFSTR($P(RORSRC,U,2,999))
"RTN","RORXU002",310,0)
 . I COND'=""  X COND  E  Q
"RTN","RORXU002",311,0)
 . S RORSRC=$$TRIM^XLFSTR($P(RORSRC,U))
"RTN","RORXU002",312,0)
 . S NAME=$$COLSCAN(.TERM)  Q:(NAME="")!(TERM'="(")
"RTN","RORXU002",313,0)
 . S TBLDEF=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORXU002",314,0)
 . I TBLDEF<0  S RC=TBLDEF  Q
"RTN","RORXU002",315,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"NAME",NAME)
"RTN","RORXU002",316,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"HEADER","1")
"RTN","RORXU002",317,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"FOOTER","1")
"RTN","RORXU002",318,0)
 . D TBLDEF1(TBLDEF)
"RTN","RORXU002",319,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORXU002",320,0)
 ;
"RTN","RORXU002",321,0)
 ;***** GENERATES <COLUMN> ELEMENTS FROM TABLE DEFINITION (RORSRC)
"RTN","RORXU002",322,0)
 ;
"RTN","RORXU002",323,0)
 ; PTAG          IEN of the parent element
"RTN","RORXU002",324,0)
 ;
"RTN","RORXU002",325,0)
TBLDEF1(PTAG) ;
"RTN","RORXU002",326,0)
 N COLUMN,NAME,TERM
"RTN","RORXU002",327,0)
 F  S NAME=$$COLSCAN(.TERM)  Q:NAME=""  D  Q:")"[TERM
"RTN","RORXU002",328,0)
 . S COLUMN=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,PTAG)
"RTN","RORXU002",329,0)
 . D ADDATTR^RORTSK11(RORTSK,COLUMN,"NAME",NAME)
"RTN","RORXU002",330,0)
 . D:TERM="(" TBLDEF1(COLUMN)
"RTN","RORXU002",331,0)
 Q
"RTN","RORXU006")
0^10^B37916255^B37221086
"RTN","RORXU006",1,0)
RORXU006 ;HCIOFO/SG - REPORT PARAMETERS ;6/21/06 1:41pm
"RTN","RORXU006",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,13**;Feb 17, 2006;Build 27
"RTN","RORXU006",3,0)
 ;
"RTN","RORXU006",4,0)
 ; This routine uses the following IAs:
"RTN","RORXU006",5,0)
 ;
"RTN","RORXU006",6,0)
 ; #91           Read access to the file #60 (controlled)
"RTN","RORXU006",7,0)
 ; #417          The .01 field of file #40.8 (controlled)
"RTN","RORXU006",8,0)
 ; #2947         ATESTS^ORWLRR (controlled)
"RTN","RORXU006",9,0)
 ; #10035        Direct read of DOD field of file #2 (supported)
"RTN","RORXU006",10,0)
 ; #10040        Read access to HOSPITAL LOCATION file (supported)
"RTN","RORXU006",11,0)
 ;
"RTN","RORXU006",12,0)
 ;******************************************************************************
"RTN","RORXU006",13,0)
 ;******************************************************************************
"RTN","RORXU006",14,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORXU006",15,0)
 ;        
"RTN","RORXU006",16,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORXU006",17,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORXU006",18,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Moved code in tags CLINLST and DIVLST to
"RTN","RORXU006",19,0)
 ;                                      PARMS^RORXU002 so the clinic or
"RTN","RORXU006",20,0)
 ;                                      division XML will be returned for all
"RTN","RORXU006",21,0)
 ;                                      reports. 
"RTN","RORXU006",22,0)
 ;                                      NOTE: Patch 11 became patch 13.
"RTN","RORXU006",23,0)
 ;                                      Any references to patch 11 in the code
"RTN","RORXU006",24,0)
 ;                                      below is referring to path 13.
"RTN","RORXU006",25,0)
 ;
"RTN","RORXU006",26,0)
 ;******************************************************************************
"RTN","RORXU006",27,0)
 ;******************************************************************************
"RTN","RORXU006",28,0)
 Q
"RTN","RORXU006",29,0)
 ;
"RTN","RORXU006",30,0)
 ;***** PROCESSES THE LIST OF CLINICS
"RTN","RORXU006",31,0)
 ;
"RTN","RORXU006",32,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU006",33,0)
 ;
"RTN","RORXU006",34,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU006",35,0)
 ;
"RTN","RORXU006",36,0)
 ; Return Values:
"RTN","RORXU006",37,0)
 ;       <0  Error code
"RTN","RORXU006",38,0)
 ;       >0  IEN of the CLINICS element
"RTN","RORXU006",39,0)
 ;
"RTN","RORXU006",40,0)
CLINLST(RORTSK,PARTAG) ;
"RTN","RORXU006",41,0)
 Q 0  ;code removed for patch 11
"RTN","RORXU006",42,0)
 N IEN,LTAG,RORMSG,TMP
"RTN","RORXU006",43,0)
 I $D(RORTSK("PARAMS","CLINICS","C"))>1  D
"RTN","RORXU006",44,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS",,PARTAG)  Q:LTAG'>0
"RTN","RORXU006",45,0)
 . S IEN=0
"RTN","RORXU006",46,0)
 . F  S IEN=$O(RORTSK("PARAMS","CLINICS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU006",47,0)
 . . S TMP=$$GET1^DIQ(44,IEN_",",.01,,,"RORMSG")
"RTN","RORXU006",48,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,44,IEN_",")
"RTN","RORXU006",49,0)
 . . Q:TMP=""
"RTN","RORXU006",50,0)
 . . D ADDVAL^RORTSK11(RORTSK,"CLINIC",TMP,LTAG,,IEN)
"RTN","RORXU006",51,0)
 E  D:$$PARAM^RORTSK01("CLINICS","ALL")
"RTN","RORXU006",52,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS","ALL",PARTAG)
"RTN","RORXU006",53,0)
 Q +$G(LTAG)
"RTN","RORXU006",54,0)
 ;
"RTN","RORXU006",55,0)
 ;***** PROCESSES THE LIST OF CPT CODES
"RTN","RORXU006",56,0)
 ;
"RTN","RORXU006",57,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU006",58,0)
 ;
"RTN","RORXU006",59,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU006",60,0)
 ;
"RTN","RORXU006",61,0)
 ; Return Values:
"RTN","RORXU006",62,0)
 ;       <0  Error code
"RTN","RORXU006",63,0)
 ;       >0  IEN of the CPTLST element
"RTN","RORXU006",64,0)
 ;
"RTN","RORXU006",65,0)
CPTLST(RORTSK,PARTAG) ;
"RTN","RORXU006",66,0)
 N CPT,IEN,LTAG,TMP
"RTN","RORXU006",67,0)
 I $D(RORTSK("PARAMS","CPTLST","C"))>1  D
"RTN","RORXU006",68,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CPTLST",,PARTAG)  Q:LTAG'>0
"RTN","RORXU006",69,0)
 . S IEN=0
"RTN","RORXU006",70,0)
 . F  S IEN=$O(RORTSK("PARAMS","CPTLST","C",IEN))  Q:IEN'>0  D
"RTN","RORXU006",71,0)
 . . S CPT=$P(RORTSK("PARAMS","CPTLST","C",IEN),U)  Q:CPT=""
"RTN","RORXU006",72,0)
 . . D ADDVAL^RORTSK11(RORTSK,"CPT",CPT,LTAG,,IEN)
"RTN","RORXU006",73,0)
 E  D:$$PARAM^RORTSK01("CPTLST","ALL")
"RTN","RORXU006",74,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CPTLST","ALL",PARTAG)
"RTN","RORXU006",75,0)
 Q +$G(LTAG)
"RTN","RORXU006",76,0)
 ;
"RTN","RORXU006",77,0)
 ;***** PROCESSES THE LIST OF DIVISIONS
"RTN","RORXU006",78,0)
 ;
"RTN","RORXU006",79,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU006",80,0)
 ;
"RTN","RORXU006",81,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU006",82,0)
 ;
"RTN","RORXU006",83,0)
 ; Return Values:
"RTN","RORXU006",84,0)
 ;       <0  Error code
"RTN","RORXU006",85,0)
 ;       >0  IEN of the DIVISIONS element
"RTN","RORXU006",86,0)
 ;
"RTN","RORXU006",87,0)
DIVLST(RORTSK,PARTAG) ;
"RTN","RORXU006",88,0)
 Q 0  ;code removed for patch 11
"RTN","RORXU006",89,0)
 N IEN,LTAG,RORMSG,TMP
"RTN","RORXU006",90,0)
 I $D(RORTSK("PARAMS","DIVISIONS","C"))>1  D
"RTN","RORXU006",91,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS",,PARTAG)  Q:LTAG'>0
"RTN","RORXU006",92,0)
 . S IEN=0
"RTN","RORXU006",93,0)
 . F  S IEN=$O(RORTSK("PARAMS","DIVISIONS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU006",94,0)
 . . S TMP=$$GET1^DIQ(40.8,IEN_",",.01,,,"RORMSG")
"RTN","RORXU006",95,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,40.8,IEN_",")
"RTN","RORXU006",96,0)
 . . Q:TMP=""
"RTN","RORXU006",97,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DIVISION",TMP,LTAG,,IEN)
"RTN","RORXU006",98,0)
 E  D:$$PARAM^RORTSK01("DIVISIONS","ALL")
"RTN","RORXU006",99,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS","ALL",PARTAG)
"RTN","RORXU006",100,0)
 Q +$G(LTAG)
"RTN","RORXU006",101,0)
 ;
"RTN","RORXU006",102,0)
 ;***** PROCESSES THE LIST OF LAB TESTS
"RTN","RORXU006",103,0)
 ;
"RTN","RORXU006",104,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU006",105,0)
 ;
"RTN","RORXU006",106,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU006",107,0)
 ;
"RTN","RORXU006",108,0)
 ;
"RTN","RORXU006",109,0)
 ; .ROR8LST      Reference to a local variable, which contains a
"RTN","RORXU006",110,0)
 ;               closed root of an array. Descriptors of selected
"RTN","RORXU006",111,0)
 ;               lab tests will be returned into this array.
"RTN","RORXU006",112,0)
 ;
"RTN","RORXU006",113,0)
 ;                 @ROR8LTST@(ResultNode,TestIEN)
"RTN","RORXU006",114,0)
 ;                   ^01: Test IEN (in file #60)
"RTN","RORXU006",115,0)
 ;                   ^02: Test name
"RTN","RORXU006",116,0)
 ;                   ^03: 99
"RTN","RORXU006",117,0)
 ;                   ^04: "Other"
"RTN","RORXU006",118,0)
 ;                   ^05: Location subscript
"RTN","RORXU006",119,0)
 ;                   ^06: Result node
"RTN","RORXU006",120,0)
 ;
"RTN","RORXU006",121,0)
 ;               If this parameter is undefined or empty, then a
"RTN","RORXU006",122,0)
 ;               temporary buffer is allocated by the $$ALLOC^RORTMP
"RTN","RORXU006",123,0)
 ;               function and its root is returned via this parameter.
"RTN","RORXU006",124,0)
 ;
"RTN","RORXU006",125,0)
 ;               If all drugs are requested (the "ALL" attribute of
"RTN","RORXU006",126,0)
 ;               the "DRUGS" tag), then "*" is returned.
"RTN","RORXU006",127,0)
 ;
"RTN","RORXU006",128,0)
 ; [ROR8LRG]     Closed root of a node where the lab tests with
"RTN","RORXU006",129,0)
 ;               defined range values will be returned. By default
"RTN","RORXU006",130,0)
 ;               ($G(ROR8LRG)=""), this list is not compiled.
"RTN","RORXU006",131,0)
 ;
"RTN","RORXU006",132,0)
 ;                  @ROR8LRG@(TestIEN,
"RTN","RORXU006",133,0)
 ;                    "H") = Low
"RTN","RORXU006",134,0)
 ;                    "L") = High
"RTN","RORXU006",135,0)
 ;
"RTN","RORXU006",136,0)
 ;               "H", "L", or both will be defined.
"RTN","RORXU006",137,0)
 ;
"RTN","RORXU006",138,0)
 ; If the source list contains lab test panels, all corresponding
"RTN","RORXU006",139,0)
 ; lab tests are added to the @ROR8LST array but only a single tag
"RTN","RORXU006",140,0)
 ; is added to the XML list.
"RTN","RORXU006",141,0)
 ;
"RTN","RORXU006",142,0)
 ; Return Values:
"RTN","RORXU006",143,0)
 ;       <0  Error code
"RTN","RORXU006",144,0)
 ;       >0  IEN of the LABTESTS element
"RTN","RORXU006",145,0)
 ;
"RTN","RORXU006",146,0)
LTLST(RORTSK,PARTAG,ROR8LST,ROR8LRG) ;
"RTN","RORXU006",147,0)
 N ALL,BUF,I,LTAG,LTIEN,LTOPTS,TMP
"RTN","RORXU006",148,0)
 S ALL=+$$PARAM^RORTSK01("LABTESTS","ALL")
"RTN","RORXU006",149,0)
 S (LTAG,RC)=0
"RTN","RORXU006",150,0)
 ;
"RTN","RORXU006",151,0)
 ;=== Validate parameters
"RTN","RORXU006",152,0)
 I 'ALL  D  K @ROR8LST
"RTN","RORXU006",153,0)
 . S:$G(ROR8LST)="" ROR8LST=$$ALLOC^RORTMP()
"RTN","RORXU006",154,0)
 E  S ROR8LST="*"
"RTN","RORXU006",155,0)
 ;
"RTN","RORXU006",156,0)
 ;=== Process the drug options (if present)
"RTN","RORXU006",157,0)
 M LTOPTS=RORTSK("PARAMS","LABTESTS","A")
"RTN","RORXU006",158,0)
 I $D(LTOPTS)>1  D  Q:LTAG'>0 LTAG
"RTN","RORXU006",159,0)
 . N ATTR,REGIEN
"RTN","RORXU006",160,0)
 . S ATTR=$S(ALL:"ALL",1:"")
"RTN","RORXU006",161,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LABTESTS",ATTR,PARTAG)
"RTN","RORXU006",162,0)
 . Q:LTAG'>0
"RTN","RORXU006",163,0)
 . ;--- Output option attributes
"RTN","RORXU006",164,0)
 . S ATTR="",RC=0
"RTN","RORXU006",165,0)
 . F  S ATTR=$O(LTOPTS(ATTR))  Q:ATTR=""  D  Q:RC<0
"RTN","RORXU006",166,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,LTAG,ATTR,"1")
"RTN","RORXU006",167,0)
 . I RC<0  S LTAG=RC  Q
"RTN","RORXU006",168,0)
 . S ATTR=$$OPTXT^RORXU002(.LTOPTS)
"RTN","RORXU006",169,0)
 . D:ATTR'="" ADDATTR^RORTSK11(RORTSK,LTAG,"DESCR",ATTR)
"RTN","RORXU006",170,0)
 ;
"RTN","RORXU006",171,0)
 ;=== Process the list of tests (if present)
"RTN","RORXU006",172,0)
 I 'ALL,$D(RORTSK("PARAMS","LABTESTS","C"))>1  D
"RTN","RORXU006",173,0)
 . I LTAG'>0  D  Q:LTAG'>0
"RTN","RORXU006",174,0)
 . . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LABTESTS",,PARTAG)
"RTN","RORXU006",175,0)
 . S LTIEN=0
"RTN","RORXU006",176,0)
 . F  S LTIEN=$O(RORTSK("PARAMS","LABTESTS","C",LTIEN))  Q:LTIEN'>0  D
"RTN","RORXU006",177,0)
 . . D LTLSTI(LTIEN,LTAG)
"RTN","RORXU006",178,0)
 ;
"RTN","RORXU006",179,0)
 Q $S(RC<0:RC,1:LTAG)
"RTN","RORXU006",180,0)
 ;
"RTN","RORXU006",181,0)
 ;***** CREATES THE LAB TEST ITEM(S)
"RTN","RORXU006",182,0)
 ;
"RTN","RORXU006",183,0)
 ; LTIEN         IEN of the lab test in the file #60
"RTN","RORXU006",184,0)
 ; [LTAG]        IEN of the parent tag
"RTN","RORXU006",185,0)
 ;
"RTN","RORXU006",186,0)
 ; This is an internal entry point. Do NOT call it directly.
"RTN","RORXU006",187,0)
 ;
"RTN","RORXU006",188,0)
LTLSTI(LTIEN,LTAG) ;
"RTN","RORXU006",189,0)
 N BUF,I,IENS,ITEM,LTNAME,LTNODE,PLTCNT,RORBUF,RORMSG,TMP
"RTN","RORXU006",190,0)
 ;--- Load the lab test parameters
"RTN","RORXU006",191,0)
 S IENS=LTIEN_","
"RTN","RORXU006",192,0)
 D GETS^DIQ(60,IENS,".01;5","EI","RORBUF","RORMSG")
"RTN","RORXU006",193,0)
 D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,60,IENS)
"RTN","RORXU006",194,0)
 S LTNAME=$G(RORBUF(60,IENS,.01,"E"))  Q:LTNAME=""
"RTN","RORXU006",195,0)
 ;--- Output the tag and update the list of ranges
"RTN","RORXU006",196,0)
 D:$G(LTAG)>0
"RTN","RORXU006",197,0)
 . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"LT",LTNAME,LTAG,,LTIEN)
"RTN","RORXU006",198,0)
 . S TMP=$$UP^XLFSTR($G(RORTSK("PARAMS","LABTESTS","C",LTIEN,"L")))
"RTN","RORXU006",199,0)
 . D:TMP'=""
"RTN","RORXU006",200,0)
 . . D ADDATTR^RORTSK11(RORTSK,ITEM,"LOW",TMP)
"RTN","RORXU006",201,0)
 . . S:$G(ROR8LRG)'="" @ROR8LRG@(LTIEN,"L")=TMP
"RTN","RORXU006",202,0)
 . S TMP=$$UP^XLFSTR($G(RORTSK("PARAMS","LABTESTS","C",LTIEN,"H")))
"RTN","RORXU006",203,0)
 . D:TMP'=""
"RTN","RORXU006",204,0)
 . . D ADDATTR^RORTSK11(RORTSK,ITEM,"HIGH",TMP)
"RTN","RORXU006",205,0)
 . . S:$G(ROR8LRG)'="" @ROR8LRG@(LTIEN,"H")=TMP
"RTN","RORXU006",206,0)
 ;--- Process the panel
"RTN","RORXU006",207,0)
 D ATESTS^ORWLRR(.BUF,LTIEN)
"RTN","RORXU006",208,0)
 I $D(BUF)>1  S I="",PLTCNT=0  D  Q:PLTCNT>1
"RTN","RORXU006",209,0)
 . F  S I=$O(BUF(I))  Q:I=""  D
"RTN","RORXU006",210,0)
 . . S TMP=+$P(BUF(I),U),PLTCNT=PLTCNT+1
"RTN","RORXU006",211,0)
 . . D:TMP'=LTIEN LTLSTI(TMP)
"RTN","RORXU006",212,0)
 ;--- Create the reference
"RTN","RORXU006",213,0)
 S LTNODE=$P($G(RORBUF(60,IENS,5,"I")),";",2)  Q:LTNODE=""
"RTN","RORXU006",214,0)
 S BUF=LTIEN_U_LTNAME_U_"99^Other"
"RTN","RORXU006",215,0)
 S $P(BUF,U,5)=$P(RORBUF(60,IENS,5,"I"),";")  ; Subscript
"RTN","RORXU006",216,0)
 S $P(BUF,U,6)=LTNODE                         ; Result node
"RTN","RORXU006",217,0)
 S @ROR8LST@(LTNODE,LTIEN)=BUF
"RTN","RORXU006",218,0)
 Q
"RTN","RORXU006",219,0)
 ;
"RTN","RORXU006",220,0)
 ;***** CHECKS IF THE OPTIONAL COLUMN IS SELECTED
"RTN","RORXU006",221,0)
 ;
"RTN","RORXU006",222,0)
 ; NAME          Column name
"RTN","RORXU006",223,0)
 ;
"RTN","RORXU006",224,0)
 ; Return Values:
"RTN","RORXU006",225,0)
 ;        0  Skip the field
"RTN","RORXU006",226,0)
 ;       >0  Include in report
"RTN","RORXU006",227,0)
 ;
"RTN","RORXU006",228,0)
OPTCOL(NAME) ;
"RTN","RORXU006",229,0)
 Q $S($G(NAME)'="":$D(RORTSK("PARAMS","OPTIONAL_COLUMNS","C",NAME)),1:0)
"RTN","RORXU006",230,0)
 ;
"RTN","RORXU006",231,0)
 ;***** CHECK IF ONLY THE SUMMARY SHOULD BE GENERATED
"RTN","RORXU006",232,0)
SMRYONLY() ;
"RTN","RORXU006",233,0)
 Q:$$PARAM^RORTSK01("MAXUTNUM")'="" 0
"RTN","RORXU006",234,0)
 Q:$$PARAM^RORTSK01("MINRPNUM")'="" 0
"RTN","RORXU006",235,0)
 Q 1
"VER")
8.0^22.0
"^DD",799.33,799.33,0)
FIELD^^.01^2
"^DD",799.33,799.33,0,"DDA")
N
"^DD",799.33,799.33,0,"DT")
3030606
"^DD",799.33,799.33,0,"IX","B",799.33,.01)

"^DD",799.33,799.33,0,"NM","ROR DATA AREA")

"^DD",799.33,799.33,0,"PT",798.32,1)

"^DD",799.33,799.33,0,"PT",799.61,.01)

"^DD",799.33,799.33,0,"VRPK")
ROR
"^DD",799.33,799.33,.001,0)
NUMBER^NJ2,0^^ ^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",799.33,799.33,.001,3)
Type a Number between 1 and 99, 0 Decimal Digits.
"^DD",799.33,799.33,.001,8.5)
@
"^DD",799.33,799.33,.001,9)
@
"^DD",799.33,799.33,.001,"DT")
3030606
"^DD",799.33,799.33,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.33,,-1)  K:$L(X)>30!($L(X)<2)!'(X'?1P.E) X
"^DD",799.33,799.33,.01,1,0)
^.1
"^DD",799.33,799.33,.01,1,1,0)
799.33^B
"^DD",799.33,799.33,.01,1,1,1)
S ^ROR(799.33,"B",$E(X,1,30),DA)=""
"^DD",799.33,799.33,.01,1,1,2)
K ^ROR(799.33,"B",$E(X,1,30),DA)
"^DD",799.33,799.33,.01,1,1,3)
Do not delete!
"^DD",799.33,799.33,.01,3)
Enter name of the data area (2-30 characters).
"^DD",799.33,799.33,.01,8.5)
@
"^DD",799.33,799.33,.01,9)
@
"^DD",799.33,799.33,.01,21,0)
^^4^4^3050427^
"^DD",799.33,799.33,.01,21,1,0)
This field stores the name of the data area 
"^DD",799.33,799.33,.01,21,2,0)
referenced by the DATA AREA fields of the HL7
"^DD",799.33,799.33,.01,21,3,0)
SEGMENT (the ROR REGISTRY PARAMETERS file) and
"^DD",799.33,799.33,.01,21,4,0)
EVENT (the ROR PATIENT EVENTS file) multiples.
"^DD",799.33,799.33,.01,"DEL",1,0)
I $$VADEL^RORDD(799.33,,-1)
"^DD",799.33,799.33,.01,"DT")
3030606
"^DD",799.6,799.6,0)
FIELD^^5^14
"^DD",799.6,799.6,0,"DDA")
N
"^DD",799.6,799.6,0,"DT")
3051101
"^DD",799.6,799.6,0,"NM","ROR HISTORICAL DATA EXTRACTION")

"^DD",799.6,799.6,0,"PT",798.1,21.01)

"^DD",799.6,799.6,0,"VRPK")
ROR
"^DD",799.6,799.6,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.6,$G(DA))  K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",799.6,799.6,.01,1,0)
^.1^^-1
"^DD",799.6,799.6,.01,1,2,0)
^^TRIGGER^799.6^.07
"^DD",799.6,799.6,.01,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^RORDATA(799.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,7)'>0 I X S X=DIV S Y(1)=$S($D(^RORDATA(799.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X=DIV S X=DT X ^DD(799.6,.01,1,2,1.4)
"^DD",799.6,799.6,.01,1,2,1.4)
S DIH=$G(^RORDATA(799.6,DIV(0),0)),DIV=X S $P(^(0),U,7)=DIV,DIH=799.6,DIG=.07 D ^DICR
"^DD",799.6,799.6,.01,1,2,2)
Q
"^DD",799.6,799.6,.01,1,2,3)
Do not delete!
"^DD",799.6,799.6,.01,1,2,"%D",0)
^^7^7^3051101^
"^DD",799.6,799.6,.01,1,2,"%D",1,0)
If the ACTIVATION DATE field (.07) is empty, then
"^DD",799.6,799.6,.01,1,2,"%D",2,0)
this trigger populates it with the current date 
"^DD",799.6,799.6,.01,1,2,"%D",3,0)
when the package is installed.
"^DD",799.6,799.6,.01,1,2,"%D",4,0)
 
"^DD",799.6,799.6,.01,1,2,"%D",5,0)
Thus the historical data extraction parameters
"^DD",799.6,799.6,.01,1,2,"%D",6,0)
become active and will be processed by the next 
"^DD",799.6,799.6,.01,1,2,"%D",7,0)
run of the nightly task.
"^DD",799.6,799.6,.01,1,2,"CREATE CONDITION")
ACTIVATION DATE'>0
"^DD",799.6,799.6,.01,1,2,"CREATE VALUE")
TODAY
"^DD",799.6,799.6,.01,1,2,"DELETE VALUE")
NO EFFECT
"^DD",799.6,799.6,.01,1,2,"DT")
3051031
"^DD",799.6,799.6,.01,1,2,"FIELD")
ACTIVATION DATE
"^DD",799.6,799.6,.01,3)
Enter the unique data extraction name (3-30 characters).
"^DD",799.6,799.6,.01,8.5)
@
"^DD",799.6,799.6,.01,9)
@
"^DD",799.6,799.6,.01,20,0)
^.3LA^1^1
"^DD",799.6,799.6,.01,20,1,0)
DEFINITION
"^DD",799.6,799.6,.01,21,0)
^^7^7^3060203^
"^DD",799.6,799.6,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.6,799.6,.01,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,.01,21,3,0)
 
"^DD",799.6,799.6,.01,21,4,0)
This field stores the unique name of the
"^DD",799.6,799.6,.01,21,5,0)
historical data extraction. If an extraction is
"^DD",799.6,799.6,.01,21,6,0)
initiated by a patch, it is a good idea to include
"^DD",799.6,799.6,.01,21,7,0)
the patch number.
"^DD",799.6,799.6,.01,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.01,"DT")
3051101
"^DD",799.6,799.6,.02,0)
TYPE^RSX^1:Auto (HL7 messages);2:Manual (host files);^0;2^Q:$$VAEDT^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.02,8.5)
@
"^DD",799.6,799.6,.02,9)
@
"^DD",799.6,799.6,.02,20,0)
^.3LA^1^1
"^DD",799.6,799.6,.02,20,1,0)
DEFINITION
"^DD",799.6,799.6,.02,21,0)
^^15^15^3060203^
"^DD",799.6,799.6,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.6,.02,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,.02,21,3,0)
 
"^DD",799.6,799.6,.02,21,4,0)
This field defines the type of data extraction.
"^DD",799.6,799.6,.02,21,5,0)
 
"^DD",799.6,799.6,.02,21,6,0)
Automatic data extractions are initiated by the 
"^DD",799.6,799.6,.02,21,7,0)
CCR patches. Data is extracted by the nightly task
"^DD",799.6,799.6,.02,21,8,0)
and sent via regular batch HL7 messages.
"^DD",799.6,799.6,.02,21,9,0)
 
"^DD",799.6,799.6,.02,21,10,0)
Manual data extractions are initiated by the users
"^DD",799.6,799.6,.02,21,11,0)
using the options from the maintenance menu. They 
"^DD",799.6,799.6,.02,21,12,0)
schedule the data extraction tasks and verify 
"^DD",799.6,799.6,.02,21,13,0)
their completion. Data is written to host files, 
"^DD",799.6,799.6,.02,21,14,0)
which are transferred to the AAC via FTP or any
"^DD",799.6,799.6,.02,21,15,0)
other means.
"^DD",799.6,799.6,.02,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.02,"DT")
3051031
"^DD",799.6,799.6,.03,0)
START DATE^RDX^^0;3^Q:$$VAEDT^RORDD(799.6,$G(DA))  S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",799.6,799.6,.03,1,0)
^.1
"^DD",799.6,799.6,.03,1,1,0)
^^TRIGGER^799.6^.04
"^DD",799.6,799.6,.03,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$S($D(^RORDATA(799.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,4)'>0 I X S X=DIV S Y(1)=$S($D(^RORDATA(799.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X=DT X ^DD(799.6,.03,1,1,1.4)
"^DD",799.6,799.6,.03,1,1,1.4)
S DIH=$G(^RORDATA(799.6,DIV(0),0)),DIV=X S $P(^(0),U,4)=DIV,DIH=799.6,DIG=.04 D ^DICR
"^DD",799.6,799.6,.03,1,1,2)
Q
"^DD",799.6,799.6,.03,1,1,3)
Do not delete!
"^DD",799.6,799.6,.03,1,1,"%D",0)
^^3^3^3051101^
"^DD",799.6,799.6,.03,1,1,"%D",1,0)
If the END DATE field (.04) is empty, then this
"^DD",799.6,799.6,.03,1,1,"%D",2,0)
trigger populates it with the current date when
"^DD",799.6,799.6,.03,1,1,"%D",3,0)
the package is installed.
"^DD",799.6,799.6,.03,1,1,"CREATE CONDITION")
END DATE'>0
"^DD",799.6,799.6,.03,1,1,"CREATE VALUE")
TODAY
"^DD",799.6,799.6,.03,1,1,"DELETE VALUE")
NO EFFECT
"^DD",799.6,799.6,.03,1,1,"DT")
3051101
"^DD",799.6,799.6,.03,1,1,"FIELD")
END DATE
"^DD",799.6,799.6,.03,8.5)
@
"^DD",799.6,799.6,.03,9)
@
"^DD",799.6,799.6,.03,20,0)
^.3LA^1^1
"^DD",799.6,799.6,.03,20,1,0)
DEFINITION
"^DD",799.6,799.6,.03,21,0)
^.001^5^5^3051101^^
"^DD",799.6,799.6,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.6,.03,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,.03,21,3,0)
 
"^DD",799.6,799.6,.03,21,4,0)
This field indicates the start date for the 
"^DD",799.6,799.6,.03,21,5,0)
historical data extraction.
"^DD",799.6,799.6,.03,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.03,"DT")
3051101
"^DD",799.6,799.6,.04,0)
END DATE^DX^^0;4^Q:$$VAEDT^RORDD(799.6,$G(DA))  S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",799.6,799.6,.04,5,1,0)
799.6^.03^1
"^DD",799.6,799.6,.04,8.5)
@
"^DD",799.6,799.6,.04,9)
@
"^DD",799.6,799.6,.04,20,0)
^.3LA^1^1
"^DD",799.6,799.6,.04,20,1,0)
DEFINITION
"^DD",799.6,799.6,.04,21,0)
^^5^5^3051101^
"^DD",799.6,799.6,.04,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.6,.04,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,.04,21,3,0)
 
"^DD",799.6,799.6,.04,21,4,0)
This field indicates the end date for the 
"^DD",799.6,799.6,.04,21,5,0)
historical data extraction.
"^DD",799.6,799.6,.04,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.04,"DT")
3051101
"^DD",799.6,799.6,.05,0)
PATIENTS PER BATCH^NJ9,0X^^0;5^Q:$$VAEDT^RORDD(799.6,$G(DA))  K:+X'=X!(X>999999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",799.6,799.6,.05,3)
Type a Number between 1 and 999999999, 0 Decimal Digits.
"^DD",799.6,799.6,.05,8.5)
@
"^DD",799.6,799.6,.05,9)
@
"^DD",799.6,799.6,.05,20,0)
^.3LA^2^2
"^DD",799.6,799.6,.05,20,1,0)
DEFINITION
"^DD",799.6,799.6,.05,20,2,0)
MANUAL
"^DD",799.6,799.6,.05,21,0)
^^6^6^3051219^
"^DD",799.6,799.6,.05,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.6,.05,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,.05,21,3,0)
 
"^DD",799.6,799.6,.05,21,4,0)
The PATIENTS PER BATCH field holds the maximum
"^DD",799.6,799.6,.05,21,5,0)
number of patients whose data is written into a
"^DD",799.6,799.6,.05,21,6,0)
single historical data extraction output file.
"^DD",799.6,799.6,.05,23,0)
^.001^2^2^3060203^^^^
"^DD",799.6,799.6,.05,23,1,0)
This field is used only during manual historical data
"^DD",799.6,799.6,.05,23,2,0)
extractions.
"^DD",799.6,799.6,.05,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.05,"DT")
3050725
"^DD",799.6,799.6,.06,0)
MAXIMUM MESSAGE SIZE^NJ4,1X^^0;6^Q:$$VAEDT^RORDD(799.6,$G(DA))  K:+X'=X!(X>99)!(X<0)!(X?.E1"."2N.N) X
"^DD",799.6,799.6,.06,3)
Type a Number between 0 and 99, 1 Decimal Digit.
"^DD",799.6,799.6,.06,8.5)
@
"^DD",799.6,799.6,.06,9)
@
"^DD",799.6,799.6,.06,20,0)
^.3LA^2^2
"^DD",799.6,799.6,.06,20,1,0)
DEFINITION
"^DD",799.6,799.6,.06,20,2,0)
AUTO
"^DD",799.6,799.6,.06,21,0)
^.001^7^7^3051219^^
"^DD",799.6,799.6,.06,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.6,.06,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,.06,21,3,0)
 
"^DD",799.6,799.6,.06,21,4,0)
This field stores the maximum size (in megabytes)
"^DD",799.6,799.6,.06,21,5,0)
of a batch HL7 message that can be sent to Austin
"^DD",799.6,799.6,.06,21,6,0)
Automation Center (AAC). If this field is empty or
"^DD",799.6,799.6,.06,21,7,0)
contains 0, the size is not limited.
"^DD",799.6,799.6,.06,23,0)
^.001^11^11^3060203^^
"^DD",799.6,799.6,.06,23,1,0)
Actual size of an HL7 batch can be greater than the
"^DD",799.6,799.6,.06,23,2,0)
value of this field because the software does not break
"^DD",799.6,799.6,.06,23,3,0)
in the middle of an individual HL7 message.
"^DD",799.6,799.6,.06,23,4,0)
 
"^DD",799.6,799.6,.06,23,5,0)
For example, if the maximum size is 10Mb, the current
"^DD",799.6,799.6,.06,23,6,0)
size is 9Mb and 3Mb should be sent for the patient
"^DD",799.6,799.6,.06,23,7,0)
being processed then the actual size of the batch will
"^DD",799.6,799.6,.06,23,8,0)
be 12Mb.
"^DD",799.6,799.6,.06,23,9,0)
 
"^DD",799.6,799.6,.06,23,10,0)
This field is used only during automatic historical 
"^DD",799.6,799.6,.06,23,11,0)
data extractions.
"^DD",799.6,799.6,.06,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.06,"DT")
3051101
"^DD",799.6,799.6,.07,0)
ACTIVATION DATE^D^^0;7^S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",799.6,799.6,.07,5,1,0)
799.6^.01^2
"^DD",799.6,799.6,.07,8.5)
@
"^DD",799.6,799.6,.07,9)
@
"^DD",799.6,799.6,.07,20,0)
^.3LA^2^2
"^DD",799.6,799.6,.07,20,1,0)
STATE
"^DD",799.6,799.6,.07,20,2,0)
AUTO
"^DD",799.6,799.6,.07,21,0)
^^5^5^3051219^
"^DD",799.6,799.6,.07,21,1,0)
This field is used only for automatic data 
"^DD",799.6,799.6,.07,21,2,0)
extractions. If it is empty, then the nightly task
"^DD",799.6,799.6,.07,21,3,0)
ignores this record completely. Otherwise, the
"^DD",799.6,799.6,.07,21,4,0)
data extraction will not start before the date and
"^DD",799.6,799.6,.07,21,5,0)
time stored in this field.
"^DD",799.6,799.6,.07,"DT")
3051031
"^DD",799.6,799.6,.08,0)
BASE FILE NAME^FX^^0;8^K:$L(X)>15!($L(X)<1) X
"^DD",799.6,799.6,.08,3)
Answer must be 1-15 characters in length.
"^DD",799.6,799.6,.08,8.5)
@
"^DD",799.6,799.6,.08,9)
@
"^DD",799.6,799.6,.08,20,0)
^.3LA^2^2
"^DD",799.6,799.6,.08,20,1,0)
DEFINITION
"^DD",799.6,799.6,.08,20,2,0)
MANUAL
"^DD",799.6,799.6,.08,21,0)
^^19^19^3051219^
"^DD",799.6,799.6,.08,21,1,0)
The base part for the output file names is stored
"^DD",799.6,799.6,.08,21,2,0)
in this field. It is populated either by a patch 
"^DD",799.6,799.6,.08,21,3,0)
or by the user (if they are instructed to do so).
"^DD",799.6,799.6,.08,21,4,0)
 
"^DD",799.6,799.6,.08,21,5,0)
The output file names will have the following
"^DD",799.6,799.6,.08,21,6,0)
structure:
"^DD",799.6,799.6,.08,21,7,0)
 
"^DD",799.6,799.6,.08,21,8,0)
  BASE-SSS-TT.HDT
"^DD",799.6,799.6,.08,21,9,0)
 
"^DD",799.6,799.6,.08,21,10,0)
where 'BASE' is the value of this field, 'SSS' is
"^DD",799.6,799.6,.08,21,11,0)
the site number (3 digits), and 'TT' is the
"^DD",799.6,799.6,.08,21,12,0)
sequential number of the task (2 digits).
"^DD",799.6,799.6,.08,21,13,0)
                                                     
"^DD",799.6,799.6,.08,21,14,0)
If the task is restarted, the optional numeric
"^DD",799.6,799.6,.08,21,15,0)
modifier '##' (2 digits) will be added to the name
"^DD",799.6,799.6,.08,21,16,0)
so that the already extracted data will not be
"^DD",799.6,799.6,.08,21,17,0)
overwritten:
"^DD",799.6,799.6,.08,21,18,0)
                                                     
"^DD",799.6,799.6,.08,21,19,0)
  BASE-SSS-TT-##.HDT 
"^DD",799.6,799.6,.08,23,0)
^^2^2^3060203^
"^DD",799.6,799.6,.08,23,1,0)
This field is used only during manual historical data
"^DD",799.6,799.6,.08,23,2,0)
extractions.
"^DD",799.6,799.6,.08,"DT")
3051219
"^DD",799.6,799.6,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;9^Q:$$VAEDT^RORDD(799.6,,-1)
"^DD",799.6,799.6,.09,8.5)
@
"^DD",799.6,799.6,.09,9)
@
"^DD",799.6,799.6,.09,20,0)
^.3LA^1^1
"^DD",799.6,799.6,.09,20,1,0)
DEFINITION
"^DD",799.6,799.6,.09,21,0)
^^6^6^3060203^
"^DD",799.6,799.6,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",799.6,799.6,.09,21,2,0)
EDIT THIS FIELD!
"^DD",799.6,799.6,.09,21,3,0)
 
"^DD",799.6,799.6,.09,21,4,0)
National historical data extractions (backpulls)
"^DD",799.6,799.6,.09,21,5,0)
must have this field set to "YES". This prevents
"^DD",799.6,799.6,.09,21,6,0)
local editing of other fields of the definitions.
"^DD",799.6,799.6,.09,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA))
"^DD",799.6,799.6,.09,"DT")
3050725
"^DD",799.6,799.6,1,0)
DATA AREA^799.61P^^1;0
"^DD",799.6,799.6,1,9)
@
"^DD",799.6,799.6,1,20,0)
^.3LA^1^1
"^DD",799.6,799.6,1,20,1,0)
DEFINITION
"^DD",799.6,799.6,1,21,0)
^.001^7^7^3051219^^
"^DD",799.6,799.6,1,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.6,1,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.6,1,21,3,0)
 
"^DD",799.6,799.6,1,21,4,0)
This multiple lists all data areas in which the 
"^DD",799.6,799.6,1,21,5,0)
data extraction will be performed. It can also
"^DD",799.6,799.6,1,21,6,0)
contain additional time frames for these data
"^DD",799.6,799.6,1,21,7,0)
areas.
"^DD",799.6,799.6,2,0)
OUTPUT DIRECTORY^F^^2;E1,240^K:$L(X)>240!($L(X)<1) X
"^DD",799.6,799.6,2,3)
Enter a valid name of the output directory (1-240 characters).
"^DD",799.6,799.6,2,20,0)
^.3LA^2^2
"^DD",799.6,799.6,2,20,1,0)
PARAMETERS
"^DD",799.6,799.6,2,20,2,0)
MANUAL
"^DD",799.6,799.6,2,21,0)
^^19^19^3060203^
"^DD",799.6,799.6,2,21,1,0)
A directory must be created within the file system
"^DD",799.6,799.6,2,21,2,0)
of the host operating system (VMS, Windows,
"^DD",799.6,799.6,2,21,3,0)
etc.). Text files containing historical data in
"^DD",799.6,799.6,2,21,4,0)
the HL7 format will be created in this directory
"^DD",799.6,799.6,2,21,5,0)
by the data extraction tasks.
"^DD",799.6,799.6,2,21,6,0)
 
"^DD",799.6,799.6,2,21,7,0)
The full name of the directory must be entered as
"^DD",799.6,799.6,2,21,8,0)
a value of this field. For example, the value can
"^DD",799.6,799.6,2,21,9,0)
look something like this:
"^DD",799.6,799.6,2,21,10,0)
 
"^DD",799.6,799.6,2,21,11,0)
   VA2$:[OUTPUT] - VAX VMS 
"^DD",799.6,799.6,2,21,12,0)
   D:\Output\    - Windows, MS-DOS
"^DD",799.6,799.6,2,21,13,0)
 
"^DD",799.6,799.6,2,21,14,0)
Because a file name will be concatenated to the
"^DD",799.6,799.6,2,21,15,0)
directory name, the trailing slash in the Windows
"^DD",799.6,799.6,2,21,16,0)
directory name is required.
"^DD",799.6,799.6,2,21,17,0)
 
"^DD",799.6,799.6,2,21,18,0)
Do not forget to enable read/write access to this
"^DD",799.6,799.6,2,21,19,0)
directory for M processes!
"^DD",799.6,799.6,2,"DT")
3050722
"^DD",799.6,799.6,3,0)
REGISTRY NAME^799.63^^3;0
"^DD",799.6,799.6,3,9)
@
"^DD",799.6,799.6,3,21,0)
^^3^3^3051219^
"^DD",799.6,799.6,3,21,1,0)
This multiple references the registries that the
"^DD",799.6,799.6,3,21,2,0)
data extraction will be performed for and
"^DD",799.6,799.6,3,21,3,0)
indicates the extraction status.
"^DD",799.6,799.6,3,"DT")
3051031
"^DD",799.6,799.6,4,0)
TASK^799.64^^4;0
"^DD",799.6,799.6,4,9)
@
"^DD",799.6,799.6,4,20,0)
^.3LA^2^2
"^DD",799.6,799.6,4,20,1,0)
STATE
"^DD",799.6,799.6,4,20,2,0)
MANUAL
"^DD",799.6,799.6,5,0)
STATUS^CJ2,0^^ ; ^S X=$$HDESTAT^RORDD01(+$G(D0))
"^DD",799.6,799.6,5,9)
^
"^DD",799.6,799.6,5,9.01)

"^DD",799.6,799.6,5,9.1)
S X=$$HDESTAT^RORDD01(+$G(D0))
"^DD",799.6,799.6,5,20,0)
^.3LA^1^1
"^DD",799.6,799.6,5,20,1,0)
STATE
"^DD",799.6,799.6,5,21,0)
^^7^7^3060106^
"^DD",799.6,799.6,5,21,1,0)
This field indicates a generic status of the 
"^DD",799.6,799.6,5,21,2,0)
historical data extraction:
"^DD",799.6,799.6,5,21,3,0)
 
"^DD",799.6,799.6,5,21,4,0)
  ""  Unknown/Undefined
"^DD",799.6,799.6,5,21,5,0)
   0  Inactive
"^DD",799.6,799.6,5,21,6,0)
   1  Pending/Active
"^DD",799.6,799.6,5,21,7,0)
   2  Completed
"^DD",799.6,799.6,5,"DT")
3051114
"^DD",799.6,799.61,0)
DATA AREA SUB-FIELD^^.03^3
"^DD",799.6,799.61,0,"DT")
3050722
"^DD",799.6,799.61,0,"NM","DATA AREA")

"^DD",799.6,799.61,0,"UP")
799.6
"^DD",799.6,799.61,.01,0)
DATA AREA^MP799.33'X^ROR(799.33,^0;1^Q:$$VAEDT^RORDD(799.6,$G(DA(1)))
"^DD",799.6,799.61,.01,1,0)
^.1^^0
"^DD",799.6,799.61,.01,3)

"^DD",799.6,799.61,.01,8.5)
@
"^DD",799.6,799.61,.01,9)
@
"^DD",799.6,799.61,.01,20,0)
^.3LA^^0
"^DD",799.6,799.61,.01,21,0)
^^6^6^3051219^
"^DD",799.6,799.61,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.61,.01,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.61,.01,21,3,0)
 
"^DD",799.6,799.61,.01,21,4,0)
Select the data area where the data extraction 
"^DD",799.6,799.61,.01,21,5,0)
will be performed. Data will be extracted only 
"^DD",799.6,799.61,.01,21,6,0)
from the data areas referenced by this field.
"^DD",799.6,799.61,.01,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA(1)))
"^DD",799.6,799.61,.01,"DT")
3050725
"^DD",799.6,799.61,.02,0)
START DATE^DX^^0;2^Q:$$VAEDT^RORDD(799.6,$G(DA(1)))  S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",799.6,799.61,.02,1,0)
^.1
"^DD",799.6,799.61,.02,1,1,0)
^^TRIGGER^799.61^.03
"^DD",799.6,799.61,.02,1,1,1)
X ^DD(799.61,.02,1,1,1.3) I X S X=DIV S Y(1)=$S($D(^RORDATA(799.6,D0,1,D1,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=DT X ^DD(799.61,.02,1,1,1.4)
"^DD",799.6,799.61,.02,1,1,1.3)
K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X S Y(1)=$S($D(^RORDATA(799.6,D0,1,D1,0)):^(0),1:"") S X=$P(Y(1),U,3)'>0
"^DD",799.6,799.61,.02,1,1,1.4)
S DIH=$G(^RORDATA(799.6,DIV(0),1,DIV(1),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=799.61,DIG=.03 D ^DICR
"^DD",799.6,799.61,.02,1,1,2)
Q
"^DD",799.6,799.61,.02,1,1,3)
Do not delete!
"^DD",799.6,799.61,.02,1,1,"%D",0)
^^3^3^3060106^
"^DD",799.6,799.61,.02,1,1,"%D",1,0)
If the END DATE field (.03) is empty, then this 
"^DD",799.6,799.61,.02,1,1,"%D",2,0)
trigger populates it with the current date when
"^DD",799.6,799.61,.02,1,1,"%D",3,0)
the package is installed.
"^DD",799.6,799.61,.02,1,1,"CREATE CONDITION")
END DATE'>0
"^DD",799.6,799.61,.02,1,1,"CREATE VALUE")
TODAY
"^DD",799.6,799.61,.02,1,1,"DELETE VALUE")
NO EFFECT
"^DD",799.6,799.61,.02,1,1,"FIELD")
END DATE
"^DD",799.6,799.61,.02,8.5)
@
"^DD",799.6,799.61,.02,9)
@
"^DD",799.6,799.61,.02,20,0)
^.3LA^^0
"^DD",799.6,799.61,.02,21,0)
^^10^10^3051219^
"^DD",799.6,799.61,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.61,.02,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.61,.02,21,3,0)
 
"^DD",799.6,799.61,.02,21,4,0)
This field stores the start date of an additional 
"^DD",799.6,799.61,.02,21,5,0)
data extraction time frame for this data area.
"^DD",799.6,799.61,.02,21,6,0)
 
"^DD",799.6,799.61,.02,21,7,0)
If this field is empty, then the data is extracted
"^DD",799.6,799.61,.02,21,8,0)
only in the main time frame defined by the
"^DD",799.6,799.61,.02,21,9,0)
top-level fields START DATE (.03) and END DATE
"^DD",799.6,799.61,.02,21,10,0)
(.04).
"^DD",799.6,799.61,.02,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA(1)))
"^DD",799.6,799.61,.02,"DT")
3051101
"^DD",799.6,799.61,.03,0)
END DATE^DX^^0;3^Q:$$VAEDT^RORDD(799.6,$G(DA(1)))  S %DT="EX" D ^%DT S X=Y K:Y<1 X
"^DD",799.6,799.61,.03,5,1,0)
799.61^.02^1
"^DD",799.6,799.61,.03,8.5)
@
"^DD",799.6,799.61,.03,9)
@
"^DD",799.6,799.61,.03,20,0)
^.3LA^^0
"^DD",799.6,799.61,.03,21,0)
^^10^10^3051219^
"^DD",799.6,799.61,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.61,.03,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.61,.03,21,3,0)
 
"^DD",799.6,799.61,.03,21,4,0)
This field stores the end date of an additional 
"^DD",799.6,799.61,.03,21,5,0)
data extraction time frame for this data area.
"^DD",799.6,799.61,.03,21,6,0)
 
"^DD",799.6,799.61,.03,21,7,0)
If this field is empty, then the data is extracted
"^DD",799.6,799.61,.03,21,8,0)
only in the main time frame defined by the
"^DD",799.6,799.61,.03,21,9,0)
top-level fields START DATE (.03) and END DATE
"^DD",799.6,799.61,.03,21,10,0)
(.04).
"^DD",799.6,799.61,.03,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA(1)))
"^DD",799.6,799.61,.03,"DT")
3051101
"^DD",799.6,799.63,0)
REGISTRY NAME SUB-FIELD^^.02^2
"^DD",799.6,799.63,0,"DT")
3051031
"^DD",799.6,799.63,0,"NM","REGISTRY NAME")

"^DD",799.6,799.63,0,"UP")
799.6
"^DD",799.6,799.63,.01,0)
REGISTRY NAME^MRFX^^0;1^Q:$$VAEDT^RORDD(799.6,$G(DA(1)))  K:$L(X)>30!($L(X)<3) X I $D(X) K:'$D(^ROR(798.1,"B",$E(X,1,30))) X
"^DD",799.6,799.63,.01,1,0)
^.1^^0
"^DD",799.6,799.63,.01,3)
Enter the registry name (3-30 characters).
"^DD",799.6,799.63,.01,4)
I $G(X)="??" N D,DIC,DZ S DIC="^ROR(798.1,",DIC(0)="",D="B",DZ="??" D DQ^DICQ,EN^DDIOL("",,"!")
"^DD",799.6,799.63,.01,8.5)
@
"^DD",799.6,799.63,.01,9)
@
"^DD",799.6,799.63,.01,20,0)
^.3LA^1^1
"^DD",799.6,799.63,.01,20,1,0)
DEFINITION
"^DD",799.6,799.63,.01,21,0)
^^5^5^3051101^
"^DD",799.6,799.63,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A 
"^DD",799.6,799.63,.01,21,2,0)
NATIONAL HISTORICAL DATA EXTRACTION DEFINITION!
"^DD",799.6,799.63,.01,21,3,0)
 
"^DD",799.6,799.63,.01,21,4,0)
Enter a name of the registry exactly as it appears
"^DD",799.6,799.63,.01,21,5,0)
in the ROR REGISTRY PARAMETERS file (#798.1).
"^DD",799.6,799.63,.01,23,0)
^.001^3^3^3051101^^^^
"^DD",799.6,799.63,.01,23,1,0)
Names of the registries are used here instead of 
"^DD",799.6,799.63,.01,23,2,0)
pointers because the KIDS pointer resolving feature 
"^DD",799.6,799.63,.01,23,3,0)
does not work for .01 fields.
"^DD",799.6,799.63,.01,"DEL",1,0)
I $$VADEL^RORDD(799.6,$G(DA(1)))
"^DD",799.6,799.63,.01,"DT")
3051031
"^DD",799.6,799.63,.02,0)
COMPLETION DATE/TIME^D^^0;2^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",799.6,799.63,.02,8.5)
@
"^DD",799.6,799.63,.02,9)
@
"^DD",799.6,799.63,.02,20,0)
^.3LA^1^1
"^DD",799.6,799.63,.02,20,1,0)
STATE
"^DD",799.6,799.63,.02,21,0)
^^7^7^3060203^
"^DD",799.6,799.63,.02,21,1,0)
A valid date in this field indicates that the data
"^DD",799.6,799.63,.02,21,2,0)
extraction has been successfully completed for
"^DD",799.6,799.63,.02,21,3,0)
this registry. 
"^DD",799.6,799.63,.02,21,4,0)
 
"^DD",799.6,799.63,.02,21,5,0)
If the data must be re-extracted, clear this field
"^DD",799.6,799.63,.02,21,6,0)
and the nightly task will repeat the historical
"^DD",799.6,799.63,.02,21,7,0)
data extraction for this registry.
"^DD",799.6,799.63,.02,23,0)
^^4^4^3060203^
"^DD",799.6,799.63,.02,23,1,0)
This field is populated by the $$CHECKMSG^ROR10 
"^DD",799.6,799.63,.02,23,2,0)
function after it confirms successful transmission of 
"^DD",799.6,799.63,.02,23,3,0)
the HL7 messages before the next nightly data
"^DD",799.6,799.63,.02,23,4,0)
extraction.
"^DD",799.6,799.63,.02,"DT")
3051031
"^DD",799.6,799.64,0)
TASK SUB-FIELD^^1^6
"^DD",799.6,799.64,0,"DT")
3050725
"^DD",799.6,799.64,0,"IX","T",799.64,.02)

"^DD",799.6,799.64,0,"NM","TASK")

"^DD",799.6,799.64,0,"UP")
799.6
"^DD",799.6,799.64,.01,0)
START RECORD IEN^MNJ22,9^^0;1^K:+X'=X!(X>999999999999)!(X<1)!(X?.E1"."10N.N) X
"^DD",799.6,799.64,.01,1,0)
^.1^^0
"^DD",799.6,799.64,.01,3)
Enter a patient's IEN (DFN).
"^DD",799.6,799.64,.01,8.5)
@
"^DD",799.6,799.64,.01,9)
@
"^DD",799.6,799.64,.01,21,0)
^^16^16^3060203^
"^DD",799.6,799.64,.01,21,1,0)
All patients of the registries are distributed 
"^DD",799.6,799.64,.01,21,2,0)
between the data extraction tasks. Each task
"^DD",799.6,799.64,.01,21,3,0)
extracts the data of the patients whose DFNs are
"^DD",799.6,799.64,.01,21,4,0)
not less than the value of this field in the task
"^DD",799.6,799.64,.01,21,5,0)
record and are less than the value of the field in
"^DD",799.6,799.64,.01,21,6,0)
the next task record.
"^DD",799.6,799.64,.01,21,7,0)
                                                     
"^DD",799.6,799.64,.01,21,8,0)
The first task always has 1 as a value in this
"^DD",799.6,799.64,.01,21,9,0)
field (just in case).
"^DD",799.6,799.64,.01,21,10,0)
                                                     
"^DD",799.6,799.64,.01,21,11,0)
The last task extracts the data of all patients
"^DD",799.6,799.64,.01,21,12,0)
whose registry records have IENs not less than the
"^DD",799.6,799.64,.01,21,13,0)
value of this field.  
"^DD",799.6,799.64,.01,21,14,0)
                                                     
"^DD",799.6,799.64,.01,21,15,0)
Usually, this field should not be edited. It is
"^DD",799.6,799.64,.01,21,16,0)
populated automatically when the task is created.
"^DD",799.6,799.64,.01,23,0)
^^7^7^3060203^
"^DD",799.6,799.64,.01,23,1,0)
The value of this field is not a real pointer to the 
"^DD",799.6,799.64,.01,23,2,0)
ROR REGISTRY RECORD file. There can be no record in the
"^DD",799.6,799.64,.01,23,3,0)
local registry with an IEN stored in this field.
"^DD",799.6,799.64,.01,23,4,0)
 
"^DD",799.6,799.64,.01,23,5,0)
The historical data extraction task will start 
"^DD",799.6,799.64,.01,23,6,0)
processing from the registry record with an IEN that 
"^DD",799.6,799.64,.01,23,7,0)
is not less than the value of this field.
"^DD",799.6,799.64,.01,"DT")
3051114
"^DD",799.6,799.64,.02,0)
TASK NUMBER^NJ10,0I^^0;2^K:+X'=X!(X>9899999999)!(X<1)!(X?.E1"."1N.N) X
"^DD",799.6,799.64,.02,1,0)
^.1
"^DD",799.6,799.64,.02,1,1,0)
799.64^T
"^DD",799.6,799.64,.02,1,1,1)
S ^RORDATA(799.6,DA(1),4,"T",$E(X,1,30),DA)=""
"^DD",799.6,799.64,.02,1,1,2)
K ^RORDATA(799.6,DA(1),4,"T",$E(X,1,30),DA)
"^DD",799.6,799.64,.02,1,1,3)
Do not delete!
"^DD",799.6,799.64,.02,1,1,"DT")
3050725
"^DD",799.6,799.64,.02,3)
Type a Number between 1 and 9899999999, 0 Decimal Digits.
"^DD",799.6,799.64,.02,8.5)
@
"^DD",799.6,799.64,.02,9)
@
"^DD",799.6,799.64,.02,21,0)
^^6^6^3050725^
"^DD",799.6,799.64,.02,21,1,0)
This field contains the number of the Taskman 
"^DD",799.6,799.64,.02,21,2,0)
task (scheduled or running) that does the data
"^DD",799.6,799.64,.02,21,3,0)
extraction.
"^DD",799.6,799.64,.02,21,4,0)
 
"^DD",799.6,799.64,.02,21,5,0)
This field cannot be edited. It is updated
"^DD",799.6,799.64,.02,21,6,0)
automatically by the data extraction task.
"^DD",799.6,799.64,.02,"DT")
3050725
"^DD",799.6,799.64,.03,0)
STATUS^S^0:Unknown;1:Active> Pending;2:Active> Running;3:Inactive> Finished;4:Inactive> Available;5:Inactive> Interrupted;100:Inactive> Crashed;101:Inactive> Errors;102:Active> Suspended;103:Active> Stopping;^0;3^Q
"^DD",799.6,799.64,.03,3)

"^DD",799.6,799.64,.03,8.5)
@
"^DD",799.6,799.64,.03,9)
@
"^DD",799.6,799.64,.03,21,0)
^^2^2^3050725^
"^DD",799.6,799.64,.03,21,1,0)
The STATUS field stores the last known task
"^DD",799.6,799.64,.03,21,2,0)
status.
"^DD",799.6,799.64,.03,23,0)
^^8^8^3060203^
"^DD",799.6,799.64,.03,23,1,0)
This field is populated with the value returned by the
"^DD",799.6,799.64,.03,23,2,0)
$$STATUS^RORTSK02 function. It will reflect the last 
"^DD",799.6,799.64,.03,23,3,0)
known status of the task even after the task is deleted
"^DD",799.6,799.64,.03,23,4,0)
by the Taskman and its record is deleted from the ROR
"^DD",799.6,799.64,.03,23,5,0)
TASK file (#798.8).
"^DD",799.6,799.64,.03,23,6,0)
 
"^DD",799.6,799.64,.03,23,7,0)
Please do not get value of this field directly; use the
"^DD",799.6,799.64,.03,23,8,0)
$$STATUS^RORHDTUT function instead.
"^DD",799.6,799.64,.03,"DT")
3051114
"^DD",799.6,799.64,.04,0)
NEXT PATIENT IEN^NJ22,9^^0;4^K:+X'=X!(X>999999999999)!(X<1)!(X?.E1"."10N.N) X
"^DD",799.6,799.64,.04,3)
Enter the next patient IEN (1-999999999999, 9 Decimal Digits).
"^DD",799.6,799.64,.04,8.5)
@
"^DD",799.6,799.64,.04,9)
@
"^DD",799.6,799.64,.04,21,0)
^.001^10^10^3060122^^
"^DD",799.6,799.64,.04,21,1,0)
If the data extraction task is stopped, it 
"^DD",799.6,799.64,.04,21,2,0)
finishes processing the current patient and stores
"^DD",799.6,799.64,.04,21,3,0)
the IEN of the patient that should be processed
"^DD",799.6,799.64,.04,21,4,0)
next as the value of this field.
"^DD",799.6,799.64,.04,21,5,0)
 
"^DD",799.6,799.64,.04,21,6,0)
When the task is restarted, it starts from the
"^DD",799.6,799.64,.04,21,7,0)
patient IEN stored in this field.
"^DD",799.6,799.64,.04,21,8,0)
 
"^DD",799.6,799.64,.04,21,9,0)
Usually, this field should not be edited. It is
"^DD",799.6,799.64,.04,21,10,0)
updated automatically by the data extraction task.
"^DD",799.6,799.64,.04,23,0)
^^7^7^3060203^
"^DD",799.6,799.64,.04,23,1,0)
The value of this field is not a real pointer to the 
"^DD",799.6,799.64,.04,23,2,0)
ROR PATIENT file. There can be no record in the file
"^DD",799.6,799.64,.04,23,3,0)
with IEN stored in this field.
"^DD",799.6,799.64,.04,23,4,0)
 
"^DD",799.6,799.64,.04,23,5,0)
The restarted historical data extraction task will 
"^DD",799.6,799.64,.04,23,6,0)
continue processing from the patient with an IEN that
"^DD",799.6,799.64,.04,23,7,0)
is not less than the value of this field.
"^DD",799.6,799.64,.04,"DT")
3060122
"^DD",799.6,799.64,.05,0)
FILE NAME^F^^0;5^K:$L(X)>50!($L(X)<1) X
"^DD",799.6,799.64,.05,3)
Answer must be 1-50 characters in length.
"^DD",799.6,799.64,.05,8.5)
@
"^DD",799.6,799.64,.05,9)
@
"^DD",799.6,799.64,.05,21,0)
^.001^22^22^3051101^^
"^DD",799.6,799.64,.05,21,1,0)
The output file name is stored in this field. This
"^DD",799.6,799.64,.05,21,2,0)
name is generated automatically when the task is
"^DD",799.6,799.64,.05,21,3,0)
created. The name has the following structure:
"^DD",799.6,799.64,.05,21,4,0)
 
"^DD",799.6,799.64,.05,21,5,0)
   BASE-SSS-TT.HDT
"^DD",799.6,799.64,.05,21,6,0)
 
"^DD",799.6,799.64,.05,21,7,0)
where 'BASE' is the base part of the file name
"^DD",799.6,799.64,.05,21,8,0)
provided by the user during creation of the task
"^DD",799.6,799.64,.05,21,9,0)
table 'SSS' is the site number (3 digits), and
"^DD",799.6,799.64,.05,21,10,0)
'TT' is the sequential number of the task (2
"^DD",799.6,799.64,.05,21,11,0)
digits).
"^DD",799.6,799.64,.05,21,12,0)
 
"^DD",799.6,799.64,.05,21,13,0)
If the task is restarted, the optional numeric
"^DD",799.6,799.64,.05,21,14,0)
modifier '##' (2 digits) can be added to the name
"^DD",799.6,799.64,.05,21,15,0)
so that the already extracted data will not be
"^DD",799.6,799.64,.05,21,16,0)
overwritten:
"^DD",799.6,799.64,.05,21,17,0)
 
"^DD",799.6,799.64,.05,21,18,0)
   BASE-SSS-TT-##.HDT
"^DD",799.6,799.64,.05,21,19,0)
 
"^DD",799.6,799.64,.05,21,20,0)
Usually, this field should not be edited. It is
"^DD",799.6,799.64,.05,21,21,0)
populated automatically when the task is created
"^DD",799.6,799.64,.05,21,22,0)
or restarted.
"^DD",799.6,799.64,.05,"DT")
3050722
"^DD",799.6,799.64,1,0)
ERROR^799.641P^^1;0
"^DD",799.6,799.64,1,9)
@
"^DD",799.6,799.64,1,21,0)
^^11^11^3060106^
"^DD",799.6,799.64,1,21,1,0)
This multiple contains a list of registry records 
"^DD",799.6,799.64,1,21,2,0)
that were processed with errors.
"^DD",799.6,799.64,1,21,3,0)
                                 
"^DD",799.6,799.64,1,21,4,0)
When the data extraction task is restarted, it
"^DD",799.6,799.64,1,21,5,0)
tries to re-extract the data for these patients.
"^DD",799.6,799.64,1,21,6,0)
If it succeeds, it deletes the corresponding
"^DD",799.6,799.64,1,21,7,0)
records from the list.
"^DD",799.6,799.64,1,21,8,0)
                                 
"^DD",799.6,799.64,1,21,9,0)
The records of the multiple have the same IENs as
"^DD",799.6,799.64,1,21,10,0)
the corresponding registry records in the ROR
"^DD",799.6,799.64,1,21,11,0)
REGISTRY RECORD file (#798).
"^DD",799.6,799.641,0)
ERROR SUB-FIELD^^.01^1
"^DD",799.6,799.641,0,"DT")
3050722
"^DD",799.6,799.641,0,"IX","B",799.641,.01)

"^DD",799.6,799.641,0,"NM","ERROR")

"^DD",799.6,799.641,0,"UP")
799.64
"^DD",799.6,799.641,.01,0)
ERROR^MP798.4'X^RORDATA(798.4,^0;1^S:$D(X) DINUM=X
"^DD",799.6,799.641,.01,1,0)
^.1
"^DD",799.6,799.641,.01,1,1,0)
799.641^B
"^DD",799.6,799.641,.01,1,1,1)
S ^RORDATA(799.6,DA(2),4,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",799.6,799.641,.01,1,1,2)
K ^RORDATA(799.6,DA(2),4,DA(1),1,"B",$E(X,1,30),DA)
"^DD",799.6,799.641,.01,8.5)
@
"^DD",799.6,799.641,.01,9)
@
"^DD",799.6,799.641,.01,"DT")
3060122
"^DD",8994,8994,0)
FIELD^^3^14
"^DD",8994,8994,0,"DDA")
N
"^DD",8994,8994,0,"DT")
2970807
"^DD",8994,8994,0,"IX","B",8994,.01)

"^DD",8994,8994,0,"NM","REMOTE PROCEDURE")

"^DD",8994,8994,0,"PT",19.05,.01)

"^DD",8994,8994,0,"PT",101.24,.13)

"^DD",8994,8994,0,"VRPK")
RPC BROKER
"^DD",8994,8994,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",8994,8994,.01,1,0)
^.1
"^DD",8994,8994,.01,1,1,0)
8994^B
"^DD",8994,8994,.01,1,1,1)
S ^XWB(8994,"B",$E(X,1,30),DA)=""
"^DD",8994,8994,.01,1,1,2)
K ^XWB(8994,"B",$E(X,1,30),DA)
"^DD",8994,8994,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",8994,8994,.02,0)
TAG^F^^0;2^K:$L(X)>8!($L(X)<1) X
"^DD",8994,8994,.02,3)
Enter the TAG to be used as the entry point for the routine.  Leave this field empty if a TAG is not required.
"^DD",8994,8994,.02,"DT")
2941213
"^DD",8994,8994,.03,0)
ROUTINE^RF^^0;3^K:$L(X)>8!($L(X)<3)!'(X?1U1.7UN) X
"^DD",8994,8994,.03,3)
This is the name of the routine used by this API
"^DD",8994,8994,.03,"DT")
2941213
"^DD",8994,8994,.04,0)
RETURN VALUE TYPE^RS^1:SINGLE VALUE;2:ARRAY;3:WORD PROCESSING;4:GLOBAL ARRAY;5:GLOBAL INSTANCE;^0;4^Q
"^DD",8994,8994,.04,3)
Select the appropriate value to indicate what type of value will be returned by the API.
"^DD",8994,8994,.04,21,0)
^^49^49^2970904^^^^
"^DD",8994,8994,.04,21,1,0)
This field tells RPC Broker how to process the resulting data from the call.
"^DD",8994,8994,.04,21,2,0)

"^DD",8994,8994,.04,21,3,0)
SINGLE VALUE: Broker will return the value of the return parameter (first
"^DD",8994,8994,.04,21,4,0)
   parameter in the formal list).  For example,
"^DD",8994,8994,.04,21,5,0)
       TAG(RESULT)     ;
"^DD",8994,8994,.04,21,6,0)
               S RESULT="DOE, JOHN"
"^DD",8994,8994,.04,21,7,0)
               Q
"^DD",8994,8994,.04,21,8,0)

"^DD",8994,8994,.04,21,9,0)
ARRAY: Using $ORDER Broker will traverse the return parameter (first
"^DD",8994,8994,.04,21,10,0)
   parameter in the formal list), returning all elements of the array.
"^DD",8994,8994,.04,21,11,0)
   For example,
"^DD",8994,8994,.04,21,12,0)
       TAG(RESULT)     ;
"^DD",8994,8994,.04,21,13,0)
               S RESULT(1)="ONE"
"^DD",8994,8994,.04,21,14,0)
               S RESULT(2)="TWO"
"^DD",8994,8994,.04,21,15,0)
               Q
"^DD",8994,8994,.04,21,16,0)

"^DD",8994,8994,.04,21,17,0)
WORD PROCESSING: This type is treated exactly the same way as the ARRAY,
"^DD",8994,8994,.04,21,18,0)
   with one exception that the WORD WRAP ON field is used to
"^DD",8994,8994,.04,21,19,0)
   control whether each line returned is terminated with CR + LF characters.
"^DD",8994,8994,.04,21,20,0)
   See WORD WRAP ON field description for more information.
"^DD",8994,8994,.04,21,21,0)

"^DD",8994,8994,.04,21,22,0)
GLOBAL ARRAY: Return value parameter should be set to a closed global
"^DD",8994,8994,.04,21,23,0)
   reference in ^TMP. The global's data nodes will be traversed using
"^DD",8994,8994,.04,21,24,0)
   $QUERY, and all data values on global nodes descendant from the global
"^DD",8994,8994,.04,21,25,0)
   reference are returned.  This type is especially useful for returning data
"^DD",8994,8994,.04,21,26,0)
   from VA FileMan word processing fields, where each line is on a
"^DD",8994,8994,.04,21,27,0)
   0-subscripted node.
"^DD",8994,8994,.04,21,28,0)

"^DD",8994,8994,.04,21,29,0)
   Important: The global reference you pass is killed by the Broker at the
"^DD",8994,8994,.04,21,30,0)
              end of RPC Execution as part of RPC cleanup. Do not pass a
"^DD",8994,8994,.04,21,31,0)
              global reference that is not in ^TMP or that should not be
"^DD",8994,8994,.04,21,32,0)
              killed.
"^DD",8994,8994,.04,21,33,0)

"^DD",8994,8994,.04,21,34,0)
   This type is useful for returning large amounts of data to the client,
"^DD",8994,8994,.04,21,35,0)
   where using the ARRAY type can exceed the symbol table limit and crash
"^DD",8994,8994,.04,21,36,0)
   your RPC.
"^DD",8994,8994,.04,21,37,0)

"^DD",8994,8994,.04,21,38,0)
   For example, to return sign-on introductory text you could do this,
"^DD",8994,8994,.04,21,39,0)
       TAG(RESULT)     ;
"^DD",8994,8994,.04,21,40,0)
               M RESULT=^XTV(8989.3,1,"INTRO")
"^DD",8994,8994,.04,21,41,0)
               K RESULT(0)  ;this node is not needed
"^DD",8994,8994,.04,21,42,0)
               Q
"^DD",8994,8994,.04,21,43,0)

"^DD",8994,8994,.04,21,44,0)
GLOBAL INSTANCE: Using this type Broker will return the value of a global
"^DD",8994,8994,.04,21,45,0)
   node.  For example the following code will return the whole 0th node
"^DD",8994,8994,.04,21,46,0)
   from the NEW PERSON file for the current user.
"^DD",8994,8994,.04,21,47,0)
       TAG(RESULT)     ;
"^DD",8994,8994,.04,21,48,0)
               S RESULT=$NA(^VA(200,DUZ,0))
"^DD",8994,8994,.04,21,49,0)
               Q
"^DD",8994,8994,.04,"DT")
2950712
"^DD",8994,8994,.05,0)
AVAILABILITY^S^P:PUBLIC;S:SUBSCRIPTION;A:AGREEMENT;R:RESTRICTED;^0;5^Q
"^DD",8994,8994,.05,3)
Select the appropriate indicator of the availability of this API as PUBLIC (general), SUBSCRIPTION (need to subscribe), AGREEMENT required, or RESTRICTED to the developing package.
"^DD",8994,8994,.05,21,0)
^^19^19^2941213^
"^DD",8994,8994,.05,21,1,0)
This field is used to indicate the availability of the API to various
"^DD",8994,8994,.05,21,2,0)
users.
"^DD",8994,8994,.05,21,3,0)

"^DD",8994,8994,.05,21,4,0)
PUBLIC indicates that the API is available for general use by any package,
"^DD",8994,8994,.05,21,5,0)
and it is not necessary to either indicate that the API is being used or
"^DD",8994,8994,.05,21,6,0)
to request permission to use it.
"^DD",8994,8994,.05,21,7,0)

"^DD",8994,8994,.05,21,8,0)
SUBSCRIPTION indicates that the API is available to those packages that
"^DD",8994,8994,.05,21,9,0)
wish to use it, BUT the package needs to indicate that it is using the API
"^DD",8994,8994,.05,21,10,0)
or subscribing to it.
"^DD",8994,8994,.05,21,11,0)

"^DD",8994,8994,.05,21,12,0)
AGREEMENT indicates that the API is available to packages, other than the
"^DD",8994,8994,.05,21,13,0)
developing package, only by means of an integration agreement on its
"^DD",8994,8994,.05,21,14,0)
usage.
"^DD",8994,8994,.05,21,15,0)

"^DD",8994,8994,.05,21,16,0)
RESTRICTED indicates that the API is not available for reference by any
"^DD",8994,8994,.05,21,17,0)
package other than the package which developed it.  Entry of the input and
"^DD",8994,8994,.05,21,18,0)
return parameter information is at the option of the developing package in
"^DD",8994,8994,.05,21,19,0)
this case.
"^DD",8994,8994,.05,"DT")
2941213
"^DD",8994,8994,.06,0)
INACTIVE^S^0:ACTIVE;1:INACTIVE;2:LOCAL INACTIVE (ACTIVE REMOTELY);3:REMOTE INACTIVE (ACTIVE LOCALLY);^0;6^Q
"^DD",8994,8994,.06,3)
Marks RPC as not useable completely, locally, or remotely. 
"^DD",8994,8994,.06,21,0)
^^6^6^2991008^^^
"^DD",8994,8994,.06,21,1,0)
This field is used to indicate that the RPC is not available for use for
"^DD",8994,8994,.06,21,2,0)
some reason.  An RPC can be marked as completely unusable (1), unusable
"^DD",8994,8994,.06,21,3,0)
locally (2), or unusable remotely (3).  Local use means in the account the
"^DD",8994,8994,.06,21,4,0)
user is logged into; remote use means in an account other than the one the
"^DD",8994,8994,.06,21,5,0)
user is directly logged into (i.e., a 'Remote RPC').  The Broker will not
"^DD",8994,8994,.06,21,6,0)
run an RPC that is marked as unusable in the applicable context.
"^DD",8994,8994,.06,23,0)
^^2^2^2991008^^
"^DD",8994,8994,.06,23,1,0)
Before patch XWB*1.1*10, this field was for documentation only.  Also, the
"^DD",8994,8994,.06,23,2,0)
set of codes was only 1 = INACTIVE.
"^DD",8994,8994,.06,"DT")
2991007
"^DD",8994,8994,.07,0)
CLIENT MANAGER^S^1:YES;^0;7^Q
"^DD",8994,8994,.07,3)
Enter 1 or YES if this API requires other configuration information related to transmission to the client.
"^DD",8994,8994,.07,21,0)
^^4^4^2970905^^^
"^DD",8994,8994,.07,21,1,0)
This field is used to identify those APIs which may be initiated to
"^DD",8994,8994,.07,21,2,0)
control the client or to send data to the client unrelated to requests
"^DD",8994,8994,.07,21,3,0)
from the client.  These actions usually require additional information on
"^DD",8994,8994,.07,21,4,0)
the configuration which is present.
"^DD",8994,8994,.07,"DT")
2941215
"^DD",8994,8994,.08,0)
WORD WRAP ON^S^0:FALSE;1:TRUE;^0;8^Q
"^DD",8994,8994,.08,21,0)
^^9^9^2970904^^^^
"^DD",8994,8994,.08,21,1,0)
Affects GLOBAL ARRAY and WORD PROCESSING return value types only. If set to
"^DD",8994,8994,.08,21,2,0)
FALSE, all data values are returned in a single concatenated string in
"^DD",8994,8994,.08,21,3,0)
Results[0]. If set to TRUE, each array node on the M side is returned as a
"^DD",8994,8994,.08,21,4,0)
distinct array item in the Results property of the TRPCBroker.
"^DD",8994,8994,.08,21,5,0)

"^DD",8994,8994,.08,21,6,0)
If you're returning some text to the client and you'd rather let the
"^DD",8994,8994,.08,21,7,0)
memo box of the client control the wrapping of lines, set WORD WRAP ON
"^DD",8994,8994,.08,21,8,0)
to FALSE.  On the other hand, if you want to preserve line breaks as they
"^DD",8994,8994,.08,21,9,0)
exist on the server, set WORD WRAP ON to TRUE.
"^DD",8994,8994,.08,"DT")
2950804
"^DD",8994,8994,.09,0)
VERSION^NJ10,5^^0;9^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."6N.N) X
"^DD",8994,8994,.09,3)
Type a Number between 0 and 9999, 5 Decimal Digits
"^DD",8994,8994,.09,21,0)
^^6^6^2991013^
"^DD",8994,8994,.09,21,1,0)
A number to identify the version of the Remote Procedure.  Currently this
"^DD",8994,8994,.09,21,2,0)
number is only checked if the Remote Procedure is being run on a foreign
"^DD",8994,8994,.09,21,3,0)
server.  If a version number is passed to the Broker by the application
"^DD",8994,8994,.09,21,4,0)
requesting that the Remote Procedure be run on the foreign server, the
"^DD",8994,8994,.09,21,5,0)
Remote Procedure will only be run if the value of this field is equal to
"^DD",8994,8994,.09,21,6,0)
or greater than the passed version number.
"^DD",8994,8994,.09,23,0)
^^1^1^2991013^^
"^DD",8994,8994,.09,23,1,0)
Introduced in patch XWB*1.1*10.
"^DD",8994,8994,.09,"DT")
2991007
"^DD",8994,8994,.1,0)
SUPPRESS RDV USER SETUP^S^0:No;1:Yes;^0;10^Q
"^DD",8994,8994,.1,.1)
Suppress RDV user setup
"^DD",8994,8994,.1,3)
Must not be set to YES for RPC's that collect Patient data.
"^DD",8994,8994,.1,9)
^
"^DD",8994,8994,.1,21,0)
^^10^10^3010820^
"^DD",8994,8994,.1,21,1,0)
This field controls how Remote Data View handles the setup of a user to
"^DD",8994,8994,.1,21,2,0)
run the RPC. If the field is set to No or is blank than the remote users
"^DD",8994,8994,.1,21,3,0)
data will be set up in the New Person file and DUZ for the process will be
"^DD",8994,8994,.1,21,4,0)
set to the user. If the field is set to Yes at the remote site the remote
"^DD",8994,8994,.1,21,5,0)
user data will NOT be entered into the New Person file and DUZ will be set
"^DD",8994,8994,.1,21,6,0)
to the Postmaster.
"^DD",8994,8994,.1,21,7,0)
 
"^DD",8994,8994,.1,21,8,0)
This field should not be set to Yes for RPC's that collect patient data.
"^DD",8994,8994,.1,21,9,0)
If there is any question about why a RPC has this set to yes contact the
"^DD",8994,8994,.1,21,10,0)
DBA for the VA.
"^DD",8994,8994,.1,"DT")
3010820
"^DD",8994,8994,.11,0)
APP PROXY ALLOWED^S^0:No;1:Yes;^0;11^Q
"^DD",8994,8994,.11,21,0)
^.001^3^3^3050301^^
"^DD",8994,8994,.11,21,1,0)
This field must be set to Allowed if this RPC is to be run by an 
"^DD",8994,8994,.11,21,2,0)
APPLICATION PROXY user.
"^DD",8994,8994,.11,21,3,0)
The default is to NOT allow access.
"^DD",8994,8994,.11,"DT")
3050301
"^DD",8994,8994,1,0)
DESCRIPTION^8994.01^^1;0
"^DD",8994,8994,2,0)
INPUT PARAMETER^8994.02A^^2;0
"^DD",8994,8994,2,21,0)
^^4^4^2970807^^^^
"^DD",8994,8994,2,21,1,0)
Input parameter is what RPC Broker passes into your remote procedure.  The
"^DD",8994,8994,2,21,2,0)
name that you may call the input parameter has no special meaning to the
"^DD",8994,8994,2,21,3,0)
Broker.  However, you should choose a name that best describes the data
"^DD",8994,8994,2,21,4,0)
that the parameter is used for.
"^DD",8994,8994,3,0)
RETURN PARAMETER DESCRIPTION^8994.03^^3;0
"^DD",8994,8994.01,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",8994,8994.01,0,"DT")
2941213
"^DD",8994,8994.01,0,"NM","DESCRIPTION")

"^DD",8994,8994.01,0,"UP")
8994
"^DD",8994,8994.01,.01,0)
DESCRIPTION^WL^^0;1^Q
"^DD",8994,8994.01,.01,3)
Please enter a brief description of the purpose of this API
"^DD",8994,8994.01,.01,21,0)
^^2^2^2941213^
"^DD",8994,8994.01,.01,21,1,0)
This field is a word processing field for describing the purpose of the
"^DD",8994,8994.01,.01,21,2,0)
API.
"^DD",8994,8994.01,.01,"DT")
2941213
"^DD",8994,8994.02,0)
INPUT PARAMETER SUB-FIELD^^1^6
"^DD",8994,8994.02,0,"DT")
2970807
"^DD",8994,8994.02,0,"IX","B",8994.02,.01)

"^DD",8994,8994.02,0,"IX","PARAMSEQ",8994.02,.05)

"^DD",8994,8994.02,0,"NM","INPUT PARAMETER")

"^DD",8994,8994.02,0,"UP")
8994
"^DD",8994,8994.02,.01,0)
INPUT PARAMETER^MF^^0;1^K:$L(X)>30!($L(X)<3) X
"^DD",8994,8994.02,.01,1,0)
^.1
"^DD",8994,8994.02,.01,1,1,0)
8994.02^B
"^DD",8994,8994.02,.01,1,1,1)
S ^XWB(8994,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",8994,8994.02,.01,1,1,2)
K ^XWB(8994,DA(1),2,"B",$E(X,1,30),DA)
"^DD",8994,8994.02,.01,3)
Answer must be 3-30 characters in length.
"^DD",8994,8994.02,.01,21,0)
^^1^1^2941213^
"^DD",8994,8994.02,.01,21,1,0)
This field is used to identify an input parameter for the API.
"^DD",8994,8994.02,.01,"DT")
2941213
"^DD",8994,8994.02,.02,0)
PARAMETER TYPE^S^1:LITERAL;2:LIST;3:WORD PROCESSING;4:REFERENCE;^0;2^Q
"^DD",8994,8994.02,.02,3)
Select the appropriate value indicating whether the parameter is a literal, a list, a reference or a word processing string.
"^DD",8994,8994.02,.02,21,0)
^^4^4^2970807^
"^DD",8994,8994.02,.02,21,1,0)
This field is used to indicate the type (Literal, List, Reference, or Word
"^DD",8994,8994.02,.02,21,2,0)
Processing entry) of value passed by this parameter.  The Literal, List,
"^DD",8994,8994.02,.02,21,3,0)
and Reference types correspond to the TParamType of the same name.  A Word
"^DD",8994,8994.02,.02,21,4,0)
Processing type would also be a List TParamType.
"^DD",8994,8994.02,.02,23,0)
^^5^5^2970807^^^^
"^DD",8994,8994.02,.02,23,1,0)
Currently, this field is used only for documenting the RPC's input
"^DD",8994,8994.02,.02,23,2,0)
parameters.
"^DD",8994,8994.02,.02,23,3,0)

"^DD",8994,8994.02,.02,23,4,0)
In version 1.0 of the RPC Broker the Literal type was called Single Value
"^DD",8994,8994.02,.02,23,5,0)
and the List type was called Array.
"^DD",8994,8994.02,.02,"DT")
2970807
"^DD",8994,8994.02,.03,0)
MAXIMUM DATA LENGTH^NJ5,0^^0;3^K:+X'=X!(X>32000)!(X<1)!(X?.E1"."1N.N) X
"^DD",8994,8994.02,.03,3)
Indicate the maximum length of the parameter, type a Number between 1 and 32000, 0 Decimal Digits
"^DD",8994,8994.02,.03,21,0)
^^2^2^2941213^
"^DD",8994,8994.02,.03,21,1,0)
This field indicates the maximum length that would be expected for the
"^DD",8994,8994.02,.03,21,2,0)
parameter value.
"^DD",8994,8994.02,.03,"DT")
2941213
"^DD",8994,8994.02,.04,0)
REQUIRED^S^1:YES;0:NO;^0;4^Q
"^DD",8994,8994.02,.04,3)
This field is used to indicate when an input parameter is required in the API call.
"^DD",8994,8994.02,.04,21,0)
^^2^2^2941215^
"^DD",8994,8994.02,.04,21,1,0)
This field is used to indicate that the input parameter is a required
"^DD",8994,8994.02,.04,21,2,0)
argument in the API call.
"^DD",8994,8994.02,.04,"DT")
2941215
"^DD",8994,8994.02,.05,0)
SEQUENCE NUMBER^NJ2,0^^0;5^K:+X'=X!(X>30)!(X<1)!(X?.E1"."1N.N) X
"^DD",8994,8994.02,.05,1,0)
^.1
"^DD",8994,8994.02,.05,1,1,0)
8994.02^PARAMSEQ
"^DD",8994,8994.02,.05,1,1,1)
S ^XWB(8994,DA(1),2,"PARAMSEQ",$E(X,1,30),DA)=""
"^DD",8994,8994.02,.05,1,1,2)
K ^XWB(8994,DA(1),2,"PARAMSEQ",$E(X,1,30),DA)
"^DD",8994,8994.02,.05,1,1,"DT")
2970328
"^DD",8994,8994.02,.05,3)
Type a Number between 1 and 30, 0 Decimal Digits
"^DD",8994,8994.02,.05,21,0)
^^14^14^2970327^
"^DD",8994,8994.02,.05,21,1,0)
This number should correspond to the position of this parameter in the
"^DD",8994,8994.02,.05,21,2,0)
formal list of the function.  Consider that the return parameter that
"^DD",8994,8994.02,.05,21,3,0)
Broker passes in, by reference, is the very first parameter with the
"^DD",8994,8994.02,.05,21,4,0)
sequence number of 0.  The next parameter is the first application-supplied
"^DD",8994,8994.02,.05,21,5,0)
parameter with the sequence of 1.
"^DD",8994,8994.02,.05,21,6,0)

"^DD",8994,8994.02,.05,21,7,0)
Example:
"^DD",8994,8994.02,.05,21,8,0)

"^DD",8994,8994.02,.05,21,9,0)
  Your entry point may look like:
"^DD",8994,8994.02,.05,21,10,0)

"^DD",8994,8994.02,.05,21,11,0)
    EN(RESULT,USER,DATE)       ;this will do something
"^DD",8994,8994.02,.05,21,12,0)

"^DD",8994,8994.02,.05,21,13,0)
      In this case the parameter corresponding to USER should have sequence
"^DD",8994,8994.02,.05,21,14,0)
      number 1 and the DATE parameter should be 2.
"^DD",8994,8994.02,.05,"DT")
2970328
"^DD",8994,8994.02,1,0)
DESCRIPTION^8994.021^^1;0
"^DD",8994,8994.021,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",8994,8994.021,0,"DT")
2941213
"^DD",8994,8994.021,0,"NM","DESCRIPTION")

"^DD",8994,8994.021,0,"UP")
8994.02
"^DD",8994,8994.021,.01,0)
DESCRIPTION^WL^^0;1^Q
"^DD",8994,8994.021,.01,3)
Please enter a brief description of this input parameter.
"^DD",8994,8994.021,.01,21,0)
^^2^2^2941213^
"^DD",8994,8994.021,.01,21,1,0)
This field is used for a description of the meaning or function of the
"^DD",8994,8994.021,.01,21,2,0)
input parameter.
"^DD",8994,8994.021,.01,"DT")
2941213
"^DD",8994,8994.03,0)
RETURN PARAMETER DESCRIPTION SUB-FIELD^^.01^1
"^DD",8994,8994.03,0,"DT")
2941213
"^DD",8994,8994.03,0,"NM","RETURN PARAMETER DESCRIPTION")

"^DD",8994,8994.03,0,"UP")
8994
"^DD",8994,8994.03,.01,0)
RETURN PARAMETER DESCRIPTION^WL^^0;1^Q
"^DD",8994,8994.03,.01,3)
Enter a brief description of the return value from this API
"^DD",8994,8994.03,.01,21,0)
^^2^2^2941213^
"^DD",8994,8994.03,.01,21,1,0)
This field is used to obtain a brief description of the return parameter
"^DD",8994,8994.03,.01,21,2,0)
and what it represents.
"^DD",8994,8994.03,.01,"DT")
2941213
"^DIC",799.33,799.33,0)
ROR DATA AREA^799.33
"^DIC",799.33,799.33,0,"GL")
^ROR(799.33,
"^DIC",799.33,799.33,"%",0)
^1.005^^0
"^DIC",799.33,799.33,"%D",0)
^^11^11^3060131^
"^DIC",799.33,799.33,"%D",1,0)
THIS FILE MUST NOT BE MODIFIED LOCALLY! ONLY 
"^DIC",799.33,799.33,"%D",2,0)
AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN EDIT
"^DIC",799.33,799.33,"%D",3,0)
THIS FILE!
"^DIC",799.33,799.33,"%D",4,0)
 
"^DIC",799.33,799.33,"%D",5,0)
The ROR DATA AREA file stores codes and names of
"^DIC",799.33,799.33,"%D",6,0)
the data areas referenced by the DATA AREA (the
"^DIC",799.33,799.33,"%D",7,0)
ROR HISTORICAL DATA EXTRACTION file) and the EVENT
"^DIC",799.33,799.33,"%D",8,0)
(the ROR PATIENT EVENTS file) multiples.
"^DIC",799.33,799.33,"%D",9,0)
 
"^DIC",799.33,799.33,"%D",10,0)
DO NOT EDIT OR DELETE RECORDS FROM THIS FILE IF
"^DIC",799.33,799.33,"%D",11,0)
THEY HAVE BEEN DISTRIBUTED TO THE SITES ALREADY!
"^DIC",799.33,"B","ROR DATA AREA",799.33)

"^DIC",799.6,799.6,0)
ROR HISTORICAL DATA EXTRACTION^799.6
"^DIC",799.6,799.6,0,"GL")
^RORDATA(799.6,
"^DIC",799.6,799.6,"%",0)
^1.005^^0
"^DIC",799.6,799.6,"%D",0)
^^9^9^3051031^
"^DIC",799.6,799.6,"%D",1,0)
Records of this file store parameters of the 
"^DIC",799.6,799.6,"%D",2,0)
historical data extractions (backpulls) performed
"^DIC",799.6,799.6,"%D",3,0)
on the registries and reflect status of these data
"^DIC",799.6,799.6,"%D",4,0)
extractions.
"^DIC",799.6,799.6,"%D",5,0)
 
"^DIC",799.6,799.6,"%D",6,0)
Records of the file are uniquely identified by the
"^DIC",799.6,799.6,"%D",7,0)
historical data extraction name (the "A" primary
"^DIC",799.6,799.6,"%D",8,0)
key and the uniqueness index "B" are used for that
"^DIC",799.6,799.6,"%D",9,0)
purpose).
"^DIC",799.6,"B","ROR HISTORICAL DATA EXTRACTION",799.6)

"^DIC",8994,8994,0)
REMOTE PROCEDURE^8994
"^DIC",8994,8994,0,"GL")
^XWB(8994,
"^DIC",8994,8994,"%D",0)
^^20^20^2970411^^^^
"^DIC",8994,8994,"%D",1,0)
This file is used as a repository of server-based procedures in the context
"^DIC",8994,8994,"%D",2,0)
of the Client/Server architecture.  By using the Remote Procedure Call (RPC)
"^DIC",8994,8994,"%D",3,0)
Broker, applications running on client workstations can invoke (call) the
"^DIC",8994,8994,"%D",4,0)
procedures in this file to be executed by the server and the results will be
"^DIC",8994,8994,"%D",5,0)
returned to the client application.
"^DIC",8994,8994,"%D",6,0)

"^DIC",8994,8994,"%D",7,0)
Each remote procedure entry is associated with an entry point (ROUTINE with
"^DIC",8994,8994,"%D",8,0)
optional TAG).  Calls to these procedures can include parameters of different
"^DIC",8994,8994,"%D",9,0)
value types.  The resulting value of the call can be either a string, a list
"^DIC",8994,8994,"%D",10,0)
of strings or a word processing string as indicated by the RETURN VALUE TYPE
"^DIC",8994,8994,"%D",11,0)
field (.04).
"^DIC",8994,8994,"%D",12,0)

"^DIC",8994,8994,"%D",13,0)
The remote procedure may be available for use by anyone or its use may be
"^DIC",8994,8994,"%D",14,0)
restricted to one or more application.  The range of availability is indicated
"^DIC",8994,8994,"%D",15,0)
by the AVAILABILITY field.  IF THERE IS NO ENTRY IN THE AVAILABILITY FIELD,
"^DIC",8994,8994,"%D",16,0)
then the procedure is assumed to be PUBLIC.
"^DIC",8994,8994,"%D",17,0)

"^DIC",8994,8994,"%D",18,0)
A remote procedure may be removed from service for a period of time by setting
"^DIC",8994,8994,"%D",19,0)
the INACTIVE field.  A request for use of a procedure which is marked inactive
"^DIC",8994,8994,"%D",20,0)
will result in an error being returned to the originating application.
"^DIC",8994,"B","REMOTE PROCEDURE",8994)

"BLD",8121,6)
^12
**END**
**END**
