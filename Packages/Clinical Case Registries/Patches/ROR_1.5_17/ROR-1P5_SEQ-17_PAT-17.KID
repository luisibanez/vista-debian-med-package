Released ROR*1.5*17 SEQ #17
Extracted from mail message
**KIDS**:ROR*1.5*17^

**INSTALL NAME**
ROR*1.5*17
"BLD",8727,0)
ROR*1.5*17^CLINICAL CASE REGISTRIES^0^3120516^y
"BLD",8727,4,0)
^9.64PA^799.34^3
"BLD",8727,4,799.31,0)
799.31
"BLD",8727,4,799.31,222)
n^y^f^^n^ZROR17^y^o^n
"BLD",8727,4,799.34,0)
799.34
"BLD",8727,4,799.34,222)
n^y^f^^n^^y^o^n
"BLD",8727,4,799.34,224)
I $P(^(0),U,4)=21!($P(^(0),U,4)=22)!($P(^(0),U,4)=9)
"BLD",8727,4,799.51,0)
799.51
"BLD",8727,4,799.51,222)
n^n^f^^y^^y^o^n
"BLD",8727,4,799.51,224)
I $P(^(0),U)="EMTRICI./RILPIVIRINE/TENOFOVIR"
"BLD",8727,4,"B",799.31,799.31)

"BLD",8727,4,"B",799.34,799.34)

"BLD",8727,4,"B",799.51,799.51)

"BLD",8727,6)
1^
"BLD",8727,6.3)
33
"BLD",8727,"ABPKG")
n
"BLD",8727,"INI")

"BLD",8727,"INID")
^n^n
"BLD",8727,"INIT")
POST^RORP017
"BLD",8727,"KRN",0)
^9.67PA^779.2^20
"BLD",8727,"KRN",.4,0)
.4
"BLD",8727,"KRN",.401,0)
.401
"BLD",8727,"KRN",.402,0)
.402
"BLD",8727,"KRN",.403,0)
.403
"BLD",8727,"KRN",.5,0)
.5
"BLD",8727,"KRN",.84,0)
.84
"BLD",8727,"KRN",.84,"NM",0)
^9.68A^12^10
"BLD",8727,"KRN",.84,"NM",1,0)
7980000.018^^0
"BLD",8727,"KRN",.84,"NM",2,0)
7981998.001^^0
"BLD",8727,"KRN",.84,"NM",3,0)
7981999.001^^0
"BLD",8727,"KRN",.84,"NM",4,0)
7981021.001^^0
"BLD",8727,"KRN",.84,"NM",5,0)
7981021.002^^0
"BLD",8727,"KRN",.84,"NM",7,0)
7981022.001^^0
"BLD",8727,"KRN",.84,"NM",9,0)
7981995.001^^0
"BLD",8727,"KRN",.84,"NM",10,0)
7981020.001^^0
"BLD",8727,"KRN",.84,"NM",11,0)
7981019.001^^0
"BLD",8727,"KRN",.84,"NM",12,0)
7981022.002^^0
"BLD",8727,"KRN",.84,"NM","B",7980000.018,1)

"BLD",8727,"KRN",.84,"NM","B",7981019.001,11)

"BLD",8727,"KRN",.84,"NM","B",7981020.001,10)

"BLD",8727,"KRN",.84,"NM","B",7981021.001,4)

"BLD",8727,"KRN",.84,"NM","B",7981021.002,5)

"BLD",8727,"KRN",.84,"NM","B",7981022.001,7)

"BLD",8727,"KRN",.84,"NM","B",7981022.002,12)

"BLD",8727,"KRN",.84,"NM","B",7981995.001,9)

"BLD",8727,"KRN",.84,"NM","B",7981998.001,2)

"BLD",8727,"KRN",.84,"NM","B",7981999.001,3)

"BLD",8727,"KRN",3.6,0)
3.6
"BLD",8727,"KRN",3.6,"NM",0)
^9.68A^^
"BLD",8727,"KRN",3.8,0)
3.8
"BLD",8727,"KRN",9.2,0)
9.2
"BLD",8727,"KRN",9.8,0)
9.8
"BLD",8727,"KRN",9.8,"NM",0)
^9.68A^8^8
"BLD",8727,"KRN",9.8,"NM",1,0)
RORX021^^0^B9370835
"BLD",8727,"KRN",9.8,"NM",2,0)
RORX021A^^0^B128932587
"BLD",8727,"KRN",9.8,"NM",3,0)
RORX022^^0^B14560975
"BLD",8727,"KRN",9.8,"NM",4,0)
RORX022A^^0^B125489130
"BLD",8727,"KRN",9.8,"NM",5,0)
RORXU002^^0^B118388269
"BLD",8727,"KRN",9.8,"NM",6,0)
RORX001^^0^B45889554
"BLD",8727,"KRN",9.8,"NM",7,0)
RORUTL11^^0^B3560733
"BLD",8727,"KRN",9.8,"NM",8,0)
RORRP018^^0^B9023679
"BLD",8727,"KRN",9.8,"NM","B","RORRP018",8)

"BLD",8727,"KRN",9.8,"NM","B","RORUTL11",7)

"BLD",8727,"KRN",9.8,"NM","B","RORX001",6)

"BLD",8727,"KRN",9.8,"NM","B","RORX021",1)

"BLD",8727,"KRN",9.8,"NM","B","RORX021A",2)

"BLD",8727,"KRN",9.8,"NM","B","RORX022",3)

"BLD",8727,"KRN",9.8,"NM","B","RORX022A",4)

"BLD",8727,"KRN",9.8,"NM","B","RORXU002",5)

"BLD",8727,"KRN",19,0)
19
"BLD",8727,"KRN",19,"NM",0)
^9.68A^^0
"BLD",8727,"KRN",19.1,0)
19.1
"BLD",8727,"KRN",101,0)
101
"BLD",8727,"KRN",409.61,0)
409.61
"BLD",8727,"KRN",771,0)
771
"BLD",8727,"KRN",779.2,0)
779.2
"BLD",8727,"KRN",870,0)
870
"BLD",8727,"KRN",8989.51,0)
8989.51
"BLD",8727,"KRN",8989.52,0)
8989.52
"BLD",8727,"KRN",8994,0)
8994
"BLD",8727,"KRN","B",.4,.4)

"BLD",8727,"KRN","B",.401,.401)

"BLD",8727,"KRN","B",.402,.402)

"BLD",8727,"KRN","B",.403,.403)

"BLD",8727,"KRN","B",.5,.5)

"BLD",8727,"KRN","B",.84,.84)

"BLD",8727,"KRN","B",3.6,3.6)

"BLD",8727,"KRN","B",3.8,3.8)

"BLD",8727,"KRN","B",9.2,9.2)

"BLD",8727,"KRN","B",9.8,9.8)

"BLD",8727,"KRN","B",19,19)

"BLD",8727,"KRN","B",19.1,19.1)

"BLD",8727,"KRN","B",101,101)

"BLD",8727,"KRN","B",409.61,409.61)

"BLD",8727,"KRN","B",771,771)

"BLD",8727,"KRN","B",779.2,779.2)

"BLD",8727,"KRN","B",870,870)

"BLD",8727,"KRN","B",8989.51,8989.51)

"BLD",8727,"KRN","B",8989.52,8989.52)

"BLD",8727,"KRN","B",8994,8994)

"BLD",8727,"QUES",0)
^9.62^^
"BLD",8727,"REQB",0)
^9.611^2^2
"BLD",8727,"REQB",1,0)
ROR*1.5*15^1
"BLD",8727,"REQB",2,0)
PSN*4.0*293^1
"BLD",8727,"REQB","B","PSN*4.0*293",2)

"BLD",8727,"REQB","B","ROR*1.5*15",1)

"DATA",799.31,274,0)
HCV
"DATA",799.31,275,0)
HCV_DATE
"DATA",799.31,276,0)
STATUS
"DATA",799.31,277,0)
GT
"DATA",799.31,278,0)
FILL_MED
"DATA",799.31,279,0)
NAIVE
"DATA",799.31,280,0)
EXP
"DATA",799.31,281,0)
EXP_DAYS
"DATA",799.31,282,0)
TREATMENT_HISTORY
"DATA",799.31,283,0)
FILL_DATE
"DATA",799.31,284,0)
DATE_RANGE_4
"DATA",799.31,285,0)
WEEKS_AFTER
"DATA",799.31,286,0)
DAA_FILL
"DATA",799.31,287,0)
WKS_LAB
"DATA",799.31,288,0)
CONFDT_AFTER
"DATA",799.31,289,0)
CONFIRM_AFTER
"DATA",799.34,9,0)
Pharmacy Prescription Utilization^1^1^9^^^^^1
"DATA",799.34,9,1)
10,14,22,170,26,110,46,54,44,34,50,140,180,70,100
"DATA",799.34,9,10.01)
$$RXUTIL^RORX009
"DATA",799.34,9,11,0)
^799.3411^4^4^3090310^^
"DATA",799.34,9,11,1,0)
<DATE_RANGE TYPE="YEAR"/>
"DATA",799.34,9,11,2,0)
<DRUGS AGGR_GENERIC="1" ALL="1"/>
"DATA",799.34,9,11,3,0)
<MAXUTNUM>10</MAXUTNUM>
"DATA",799.34,9,11,4,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1" INPATIENT="1" OUTPATIENT="1"/>
"DATA",799.34,9,12,0)
^799.3412^3^3^3090310^^
"DATA",799.34,9,12,1,0)
<SM TABLE="DRUGS" FIELD="NAME"/>
"DATA",799.34,9,12,2,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,9,12,3,0)
<SM TABLE="HU_NRX" FIELD="NAME"/>
"DATA",799.34,21,0)
Potential DAA Candidates^1^^21^^^^^1
"DATA",799.34,21,1)
14,22,90,12,34,50,180,70,100
"DATA",799.34,21,10.01)
$$HCVDAA^RORX021
"DATA",799.34,21,11,0)
^799.3411^2^2^3111107^^
"DATA",799.34,21,11,1,0)
 <DATE_RANGE_3 TYPE="YEAR"/>
"DATA",799.34,21,11,2,0)
 <PATIENTS CAREONLY="1" DE_BEFORE="1" DE_DURING="1" DE_AFTER="1"/>
"DATA",799.34,21,12,0)
^799.3412^1^1^3111107^^^
"DATA",799.34,21,12,1,0)
 <SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,22,0)
DAA Lab Monitoring^1^1^22^^^^^1
"DATA",799.34,22,1)
14,22,13,91,53,34,50,180,70,100
"DATA",799.34,22,10.01)
$$DAAMON^RORX022
"DATA",799.34,22,11,0)
^799.3411^3^3^3120516^^^^
"DATA",799.34,22,11,1,0)
<DATE_RANGE_4 TYPE="YEAR"/>
"DATA",799.34,22,11,2,0)
<DRUGS AGGR_GENERIC="1" ALL="1"/>
"DATA",799.34,22,11,3,0)
<PATIENTS DE_BEFORE="1" DE_DURING="1" DE_AFTER="1"/>
"DATA",799.34,22,12,0)
^799.3412^2^2^3120516^^
"DATA",799.34,22,12,1,0)
<SM TABLE="PATIENTS" FIELD="NAME"/>
"DATA",799.34,22,12,2,0)
<SM TABLE="LABTESTS" FIELD="NAME"/>
"DATA",799.51,41,0)
EMTRICI./RILPIVIRINE/TENOFOVIR^2^20^4667^^^^^1
"FIA",799.31)
ROR XML ITEM
"FIA",799.31,0)
^ROR(799.31,
"FIA",799.31,0,0)
799.31
"FIA",799.31,0,1)
n^y^f^^n^ZROR17^y^o^n
"FIA",799.31,0,10)

"FIA",799.31,0,11)

"FIA",799.31,0,"RLRO")
^DIBT(449999,1)
"FIA",799.31,0,"VR")
1.5^ROR
"FIA",799.31,799.31)
0
"FIA",799.34)
ROR REPORT PARAMETERS
"FIA",799.34,0)
^ROR(799.34,
"FIA",799.34,0,0)
799.34I
"FIA",799.34,0,1)
n^y^f^^n^^y^o^n
"FIA",799.34,0,10)

"FIA",799.34,0,11)
I $P(^(0),U,4)=21!($P(^(0),U,4)=22)!($P(^(0),U,4)=9)
"FIA",799.34,0,"RLRO")

"FIA",799.34,0,"VR")
1.5^ROR
"FIA",799.34,799.34)
0
"FIA",799.34,799.3411)
0
"FIA",799.34,799.3412)
0
"FIA",799.51)
ROR GENERIC DRUG
"FIA",799.51,0)
^ROR(799.51,
"FIA",799.51,0,0)
799.51
"FIA",799.51,0,1)
n^n^f^^y^^y^o^n
"FIA",799.51,0,10)

"FIA",799.51,0,11)
I $P(^(0),U)="EMTRICI./RILPIVIRINE/TENOFOVIR"
"FIA",799.51,0,"RLRO")

"FIA",799.51,0,"VR")
1.5^ROR
"FIA",799.51,799.51)
0
"FRV1",799.51,"41,0",2)
VA HIV
"FRV1",799.51,"41,0",2,"F")
;ROR(798.1,
"FRV1",799.51,"41,0",3)
Default (HIV)
"FRV1",799.51,"41,0",3,"F")
;ROR(799.1,
"FRV1",799.51,"41,0",4)
EMTRICITABINE/RILPIVIRINE/TENOFOVIR
"FRV1",799.51,"41,0",4,"F")
;PSNDF(50.6,
"FRV1K",799.51,"41,0",3)
KEY
"FRV1K",799.51,"41,0",3,1)
Drug Group
"FRV1K",799.51,"41,0",3,2)
VA HIV
"FRV1K",799.51,"41,0",3,3)
99
"INIT")
POST^RORP017
"IX",799.31,799.31,"B",0)
799.31^B^Uniqueness Index for Key 'A' of File #799.31^R^^F^IR^I^799.31^^^^^LS
"IX",799.31,799.31,"B",1)
S ^ROR(799.31,"B",X,DA)=""
"IX",799.31,799.31,"B",2)
K ^ROR(799.31,"B",X,DA)
"IX",799.31,799.31,"B",2.5)
K ^ROR(799.31,"B")
"IX",799.31,799.31,"B",11.1,0)
^.114IA^1^1
"IX",799.31,799.31,"B",11.1,1,0)
1^F^799.31^.01^^1
"IX",799.34,799.34,"KEY",0)
799.34^KEY^Uniqueness Index for Key 'A' of File #799.34^R^^F^IR^I^799.34^^^^^LS
"IX",799.34,799.34,"KEY",1)
S ^ROR(799.34,"KEY",X,DA)=""
"IX",799.34,799.34,"KEY",2)
K ^ROR(799.34,"KEY",X,DA)
"IX",799.34,799.34,"KEY",2.5)
K ^ROR(799.34,"KEY")
"IX",799.34,799.34,"KEY",11.1,0)
^.114IA^1^1
"IX",799.34,799.34,"KEY",11.1,1,0)
1^F^799.34^.04^^1
"IX",799.51,799.51,"ARDG",0)
799.51^ARDG^Registry & Drug Group^R^^R^IR^I^799.51^^^^^S
"IX",799.51,799.51,"ARDG",1)
S ^ROR(799.51,"ARDG",X(2),X(3),DA)=""
"IX",799.51,799.51,"ARDG",2)
K ^ROR(799.51,"ARDG",X(2),X(3),DA)
"IX",799.51,799.51,"ARDG",2.5)
K ^ROR(799.51,"ARDG")
"IX",799.51,799.51,"ARDG",11.1,0)
^.114IA^3^3
"IX",799.51,799.51,"ARDG",11.1,1,0)
1^F^799.51^.02^^^F
"IX",799.51,799.51,"ARDG",11.1,2,0)
3^F^799.51^.04^^2^F
"IX",799.51,799.51,"ARDG",11.1,3,0)
2^C^^^^1
"IX",799.51,799.51,"ARDG",11.1,3,1.5)
S X=$S(X(1)'="":X(1)_"#",1:"")
"IX",799.51,799.51,"KEY",0)
799.51^KEY^Registry, Drug Group, Generic Drug^R^^R^IR^I^799.51^^^^^LS
"IX",799.51,799.51,"KEY",1)
S ^ROR(799.51,"KEY",X(1),X(2),X(3),DA)=""
"IX",799.51,799.51,"KEY",2)
K ^ROR(799.51,"KEY",X(1),X(2),X(3),DA)
"IX",799.51,799.51,"KEY",2.5)
K ^ROR(799.51,"KEY")
"IX",799.51,799.51,"KEY",11.1,0)
^.114IA^3^3
"IX",799.51,799.51,"KEY",11.1,1,0)
1^F^799.51^.02^^1
"IX",799.51,799.51,"KEY",11.1,2,0)
2^F^799.51^.03^^2
"IX",799.51,799.51,"KEY",11.1,3,0)
3^F^799.51^.04^^3
"KEY",799.31,799.31,"A",0)
799.31^A^S^198
"KEY",799.31,799.31,"A",2,0)
^.312IA^1^1
"KEY",799.31,799.31,"A",2,1,0)
.01^799.31^1
"KEY",799.34,799.34,"A",0)
799.34^A^P^385
"KEY",799.34,799.34,"A",2,0)
^.312IA^1^1
"KEY",799.34,799.34,"A",2,1,0)
.04^799.34^1
"KEY",799.51,799.51,"A",0)
799.51^A^S^694
"KEY",799.51,799.51,"A",2,0)
^.312IA^3^3
"KEY",799.51,799.51,"A",2,1,0)
.02^799.51^1
"KEY",799.51,799.51,"A",2,2,0)
.03^799.51^2
"KEY",799.51,799.51,"A",2,3,0)
.04^799.51^3
"KEYPTR",799.31,799.31,"A")
799.31^B
"KEYPTR",799.34,799.34,"A")
799.34^KEY
"KEYPTR",799.51,799.51,"A")
799.51^KEY
"KRN",.84,7980000.018,-1)
0^1
"KRN",.84,7980000.018,0)
7980000.018^2^^CLINICAL CASE REGISTRIES^Report options
"KRN",.84,7980000.018,2,0)
^^85^85^3111101^
"KRN",.84,7980000.018,2,1,0)
AGGR_GENERIC
"KRN",.84,7980000.018,2,2,0)
        Aggregate by Generic Names
"KRN",.84,7980000.018,2,3,0)
 
"KRN",.84,7980000.018,2,4,0)
AGGR_FORMUL,AGGR_FORCED
"KRN",.84,7980000.018,2,5,0)
        Aggregate by Individual Formulations
"KRN",.84,7980000.018,2,6,0)
 
"KRN",.84,7980000.018,2,7,0)
        Aggregate by Individual Formulations (enforced because of investigational medications)
"KRN",.84,7980000.018,2,8,0)
 
"KRN",.84,7980000.018,2,9,0)
BASIC,COMPLEX
"KRN",.84,7980000.018,2,10,0)
        Basic Care
"KRN",.84,7980000.018,2,11,0)
        Complex Care
"KRN",.84,7980000.018,2,12,0)
        Both Basic and Complex Care
"KRN",.84,7980000.018,2,13,0)
 
"KRN",.84,7980000.018,2,14,0)
CAREONLY
"KRN",.84,7980000.018,2,15,0)
        Treated only
"KRN",.84,7980000.018,2,16,0)
 
"KRN",.84,7980000.018,2,17,0)
COMPLETE
"KRN",.84,7980000.018,2,18,0)
        Complete Report
"KRN",.84,7980000.018,2,19,0)
 
"KRN",.84,7980000.018,2,20,0)
CONFIRMED,PENDING,CONFIRM_AFTER
"KRN",.84,7980000.018,2,21,0)
        Confirmed
"KRN",.84,7980000.018,2,22,0)
        Pending
"KRN",.84,7980000.018,2,23,0)
        Both Confirmed and Pending
"KRN",.84,7980000.018,2,24,0)
        Only confirmed after
"KRN",.84,7980000.018,2,25,0)
 
"KRN",.84,7980000.018,2,26,0)
NAIVE,EXP
"KRN",.84,7980000.018,2,27,0)
        Naive
"KRN",.84,7980000.018,2,28,0)
        Experienced
"KRN",.84,7980000.018,2,29,0)
        Both Naive and Experienced
"KRN",.84,7980000.018,2,30,0)
 
"KRN",.84,7980000.018,2,31,0)
DE_BEFORE,DE_DURING,DE_AFTER
"KRN",.84,7980000.018,2,32,0)
        Added before the date range
"KRN",.84,7980000.018,2,33,0)
        Added during the date range
"KRN",.84,7980000.018,2,34,0)
        Added before and during the date range
"KRN",.84,7980000.018,2,35,0)
        Added after the date range
"KRN",.84,7980000.018,2,36,0)
        Added before and after the date range 
"KRN",.84,7980000.018,2,37,0)
        Added during and after the date range
"KRN",.84,7980000.018,2,38,0)
        Added on any date
"KRN",.84,7980000.018,2,39,0)
 
"KRN",.84,7980000.018,2,40,0)
GENERIC,FORMULATIONS
"KRN",.84,7980000.018,2,41,0)
        Generic Medications
"KRN",.84,7980000.018,2,42,0)
        Individual Formulations
"KRN",.84,7980000.018,2,43,0)
        Generic Medications and Individual Formulations
"KRN",.84,7980000.018,2,44,0)
 
"KRN",.84,7980000.018,2,45,0)
INPATIENT,OUTPATIENT
"KRN",.84,7980000.018,2,46,0)
        Inpatient
"KRN",.84,7980000.018,2,47,0)
        Outpatient
"KRN",.84,7980000.018,2,48,0)
        Both Inpatients and Outpatients
"KRN",.84,7980000.018,2,49,0)
 
"KRN",.84,7980000.018,2,50,0)
LAB
"KRN",.84,7980000.018,2,51,0)
        Selected lab tests were preformed
"KRN",.84,7980000.018,2,52,0)
 
"KRN",.84,7980000.018,2,53,0)
NOLAB
"KRN",.84,7980000.018,2,54,0)
        No selected lab tests were performed
"KRN",.84,7980000.018,2,55,0)
 
"KRN",.84,7980000.018,2,56,0)
NOPHARM
"KRN",.84,7980000.018,2,57,0)
        Did not receive selected medication(s)
"KRN",.84,7980000.018,2,58,0)
 
"KRN",.84,7980000.018,2,59,0)
NOTSEEN,SEEN
"KRN",.84,7980000.018,2,60,0)
        Not Seen
"KRN",.84,7980000.018,2,61,0)
        Seen
"KRN",.84,7980000.018,2,62,0)
        Both Seen and Not Seen
"KRN",.84,7980000.018,2,63,0)
 
"KRN",.84,7980000.018,2,64,0)
PHARM
"KRN",.84,7980000.018,2,65,0)
        Received selected medication(s)
"KRN",.84,7980000.018,2,66,0)
 
"KRN",.84,7980000.018,2,67,0)
PROC
"KRN",.84,7980000.018,2,68,0)
        Selected procedures were performed
"KRN",.84,7980000.018,2,69,0)
 
"KRN",.84,7980000.018,2,70,0)
NOPROC
"KRN",.84,7980000.018,2,71,0)
        No selected procedures were performed
"KRN",.84,7980000.018,2,72,0)
 
"KRN",.84,7980000.018,2,73,0)
PTLIST
"KRN",.84,7980000.018,2,74,0)
        List of Patients
"KRN",.84,7980000.018,2,75,0)
 
"KRN",.84,7980000.018,2,76,0)
REGMEDS,INVESTIG
"KRN",.84,7980000.018,2,77,0)
        Registry Medications
"KRN",.84,7980000.018,2,78,0)
        Investigational Medications
"KRN",.84,7980000.018,2,79,0)
        Registry and Investigational Medications
"KRN",.84,7980000.018,2,80,0)
 
"KRN",.84,7980000.018,2,81,0)
REGMEDSMRY
"KRN",.84,7980000.018,2,82,0)
        Summary Registry Meds Usage Table
"KRN",.84,7980000.018,2,83,0)
 
"KRN",.84,7980000.018,2,84,0)
SUMMARY
"KRN",.84,7980000.018,2,85,0)
        Summary
"KRN",.84,7980000.018,5,0)
^.841^1^1
"KRN",.84,7980000.018,5,1,0)
RORXU002^OPTXT
"KRN",.84,7980000.018,5,"B","RORXU002",1)

"KRN",.84,7981019.001,-1)
0^11
"KRN",.84,7981019.001,0)
7981019.001^2^^CLINICAL CASE REGISTRIES^Liver Report by Range (HTML)
"KRN",.84,7981019.001,2,0)
^^230^230^3111215^
"KRN",.84,7981019.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981019.001,2,2,0)
 <xsl:stylesheet version="1.0"
"KRN",.84,7981019.001,2,3,0)
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981019.001,2,4,0)
 >
"KRN",.84,7981019.001,2,5,0)
 
"KRN",.84,7981019.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981019.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981019.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981019.001,2,9,0)
<xsl:include href="template://report/995/1"/>  <!-- Lab Data -->
"KRN",.84,7981019.001,2,10,0)
 
"KRN",.84,7981019.001,2,11,0)
<xsl:variable name="meldcnt" 
"KRN",.84,7981019.001,2,12,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MELD']
"KRN",.84,7981019.001,2,13,0)
)"/>
"KRN",.84,7981019.001,2,14,0)
<xsl:variable name="nacnt" 
"KRN",.84,7981019.001,2,15,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NA'])"
"KRN",.84,7981019.001,2,16,0)
/>
"KRN",.84,7981019.001,2,17,0)
<xsl:variable name="apricnt" 
"KRN",.84,7981019.001,2,18,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='APRI']
"KRN",.84,7981019.001,2,19,0)
)"/>
"KRN",.84,7981019.001,2,20,0)
<xsl:variable name="fib4cnt" 
"KRN",.84,7981019.001,2,21,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='FIB4']
"KRN",.84,7981019.001,2,22,0)
)"/>
"KRN",.84,7981019.001,2,23,0)
 
"KRN",.84,7981019.001,2,24,0)
 
"KRN",.84,7981019.001,2,25,0)
<xsl:template match="/">
"KRN",.84,7981019.001,2,26,0)
 <html>
"KRN",.84,7981019.001,2,27,0)
  <head>
"KRN",.84,7981019.001,2,28,0)
   <title>Liver Score by Range</title>
"KRN",.84,7981019.001,2,29,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981019.001,2,30,0)
  </head>
"KRN",.84,7981019.001,2,31,0)
  <body>
"KRN",.84,7981019.001,2,32,0)
   <h1>Liver Score by Range</h1>
"KRN",.84,7981019.001,2,33,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981019.001,2,34,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981019.001,2,35,0)
     <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981019.001,2,36,0)
       Lab tests used to calculate scores are identified by LOINC code. 
"KRN",.84,7981019.001,2,37,0)
       If the values shown for test results appear unusual, 
"KRN",.84,7981019.001,2,38,0)
contact your local Lab ADPAC to verify that LOINC codes are set up 
"KRN",.84,7981019.001,2,39,0)
correctly. The LOINC codes that are used are:<br />
"KRN",.84,7981019.001,2,40,0)
       <br/>
"KRN",.84,7981019.001,2,41,0)
       <xsl:call-template name="ShowLOINCCodes"/>
"KRN",.84,7981019.001,2,42,0)
     </div>
"KRN",.84,7981019.001,2,43,0)
     <xsl:if test="$apricnt &gt; 0">
"KRN",.84,7981019.001,2,44,0)
       <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981019.001,2,45,0)
         *For this report, the ULN AST entered by the user and used for 
"KRN",.84,7981019.001,2,46,0)
the APRI calculation is
"KRN",.84,7981019.001,2,47,0)
         <xsl:value-of select="/REPORT/PARAMETERS/ULNAST/@VALUES"/>
"KRN",.84,7981019.001,2,48,0)
       </div>
"KRN",.84,7981019.001,2,49,0)
     </xsl:if>
"KRN",.84,7981019.001,2,50,0)
     <xsl:if test="$meldcnt &gt; 0 or $nacnt &gt; 0">
"KRN",.84,7981019.001,2,51,0)
       <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981019.001,2,52,0)
         *For this report, creatinine values &gt;12 mg/dL are assumed to 
"KRN",.84,7981019.001,2,53,0)
be 
"KRN",.84,7981019.001,2,54,0)
         erroneous and are ignored.  Sodium values &lt;100 or &gt;180 
"KRN",.84,7981019.001,2,55,0)
meq/L are also assumed to be erroneous and are ignored.
"KRN",.84,7981019.001,2,56,0)
       </div>
"KRN",.84,7981019.001,2,57,0)
     </xsl:if>
"KRN",.84,7981019.001,2,58,0)
     <br />
"KRN",.84,7981019.001,2,59,0)
     <!-- The following line changed to fix page break issue in IE 7 -->
"KRN",.84,7981019.001,2,60,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981019.001,2,61,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981019.001,2,62,0)
     <div>
"KRN",.84,7981019.001,2,63,0)
       <xsl:call-template name="MakeScrollable">
"KRN",.84,7981019.001,2,64,0)
         <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981019.001,2,65,0)
       </xsl:call-template>
"KRN",.84,7981019.001,2,66,0)
       <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981019.001,2,67,0)
     </div>
"KRN",.84,7981019.001,2,68,0)
     <xsl:call-template name="ExplainFormula"/>
"KRN",.84,7981019.001,2,69,0)
   </xsl:if>
"KRN",.84,7981019.001,2,70,0)
  </body>
"KRN",.84,7981019.001,2,71,0)
 </html>
"KRN",.84,7981019.001,2,72,0)
</xsl:template>
"KRN",.84,7981019.001,2,73,0)
 
"KRN",.84,7981019.001,2,74,0)
<xsl:template name="ShowLOINCCodes">
"KRN",.84,7981019.001,2,75,0)
 <xsl:param name="summary" select="/REPORT/LOINC_CODES"/>
"KRN",.84,7981019.001,2,76,0)
 <table cellpadding="5" cellspacing="0">
"KRN",.84,7981019.001,2,77,0)
  <thead>
"KRN",.84,7981019.001,2,78,0)
   <tr>
"KRN",.84,7981019.001,2,79,0)
    <th>LOINC Codes</th>
"KRN",.84,7981019.001,2,80,0)
   </tr>
"KRN",.84,7981019.001,2,81,0)
  </thead>
"KRN",.84,7981019.001,2,82,0)
  <tbody>
"KRN",.84,7981019.001,2,83,0)
    <xsl:for-each select="/REPORT/LOINC_CODES/CODE">
"KRN",.84,7981019.001,2,84,0)
    <tr>
"KRN",.84,7981019.001,2,85,0)
      <td class="aLeft"><xsl:value-of select="@CODE"/></td>
"KRN",.84,7981019.001,2,86,0)
    </tr>
"KRN",.84,7981019.001,2,87,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,88,0)
  </tbody>
"KRN",.84,7981019.001,2,89,0)
 </table>
"KRN",.84,7981019.001,2,90,0)
</xsl:template>
"KRN",.84,7981019.001,2,91,0)
 
"KRN",.84,7981019.001,2,92,0)
<xsl:template name="ExplainFormula">
"KRN",.84,7981019.001,2,93,0)
 <br/>
"KRN",.84,7981019.001,2,94,0)
 <div class="reportSummary">
"KRN",.84,7981019.001,2,95,0)
  <div style="float:left">
"KRN",.84,7981019.001,2,96,0)
   <table cellpadding="3" cellspacing="0">
"KRN",.84,7981019.001,2,97,0)
    <caption>Calculation Formulas</caption>
"KRN",.84,7981019.001,2,98,0)
    <thead>
"KRN",.84,7981019.001,2,99,0)
     <tr>
"KRN",.84,7981019.001,2,100,0)
      <th width="30">Description</th>
"KRN",.84,7981019.001,2,101,0)
      <th>Formula</th>
"KRN",.84,7981019.001,2,102,0)
     </tr>
"KRN",.84,7981019.001,2,103,0)
    </thead>
"KRN",.84,7981019.001,2,104,0)
    <tbody>
"KRN",.84,7981019.001,2,105,0)
     <xsl:if test="$apricnt &gt; 0">
"KRN",.84,7981019.001,2,106,0)
      <tr>
"KRN",.84,7981019.001,2,107,0)
       <td align="center">APRI (AST-to-Platelet ratio Index)</td>
"KRN",.84,7981019.001,2,108,0)
       <td class="aLeft"> ((AST/ULN AST)/Platelet) * 100
"KRN",.84,7981019.001,2,109,0)
       </td>
"KRN",.84,7981019.001,2,110,0)
      </tr>
"KRN",.84,7981019.001,2,111,0)
     </xsl:if>
"KRN",.84,7981019.001,2,112,0)
     <xsl:if test="$fib4cnt &gt; 0">
"KRN",.84,7981019.001,2,113,0)
      <tr>
"KRN",.84,7981019.001,2,114,0)
       <td align="center">FIB-4</td>
"KRN",.84,7981019.001,2,115,0)
       <td class="aLeft"> Age(in years) * AST/(Platelets * 
"KRN",.84,7981019.001,2,116,0)
ALT<sup>1/2</sup>)
"KRN",.84,7981019.001,2,117,0)
       </td>
"KRN",.84,7981019.001,2,118,0)
      </tr>
"KRN",.84,7981019.001,2,119,0)
     </xsl:if>
"KRN",.84,7981019.001,2,120,0)
     <xsl:if test="$nacnt &gt; 0 or $meldcnt &gt; 0">
"KRN",.84,7981019.001,2,121,0)
      <tr>
"KRN",.84,7981019.001,2,122,0)
       <td align="center">MELD</td>
"KRN",.84,7981019.001,2,123,0)
       <td class="aLeft"> (0.957*Ln(Serum Cr) + 0.378*Ln(Serum Bilirubin) 
"KRN",.84,7981019.001,2,124,0)
+ 1.120*Ln(INR) + 0.643) * 10<br/><br/>
"KRN",.84,7981019.001,2,125,0)
        <b>NOTES:</b>  Ln is 'natural log'<br/>
"KRN",.84,7981019.001,2,126,0)
      Lower limit of 1 for all variables with creatinine capped at 4
"KRN",.84,7981019.001,2,127,0)
       </td>
"KRN",.84,7981019.001,2,128,0)
      </tr>
"KRN",.84,7981019.001,2,129,0)
     </xsl:if>
"KRN",.84,7981019.001,2,130,0)
     <xsl:if test="$nacnt &gt; 0">
"KRN",.84,7981019.001,2,131,0)
    <tr>
"KRN",.84,7981019.001,2,132,0)
      <td align="center">MELD-Na</td>
"KRN",.84,7981019.001,2,133,0)
      <td class="aLeft">MELD calculation + 1.59 *(135 - Serum 
"KRN",.84,7981019.001,2,134,0)
Na)<br/><br/>
"KRN",.84,7981019.001,2,135,0)
       <b>NOTE:</b>  Mininum value for Serum Na is 120 mmol/L and the 
"KRN",.84,7981019.001,2,136,0)
maximum is 135 mmol/L      
"KRN",.84,7981019.001,2,137,0)
      </td>
"KRN",.84,7981019.001,2,138,0)
     </tr>
"KRN",.84,7981019.001,2,139,0)
     </xsl:if>
"KRN",.84,7981019.001,2,140,0)
    </tbody>
"KRN",.84,7981019.001,2,141,0)
   </table>
"KRN",.84,7981019.001,2,142,0)
  </div>
"KRN",.84,7981019.001,2,143,0)
 </div>
"KRN",.84,7981019.001,2,144,0)
</xsl:template>
"KRN",.84,7981019.001,2,145,0)
 
"KRN",.84,7981019.001,2,146,0)
 
"KRN",.84,7981019.001,2,147,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981019.001,2,148,0)
 
"KRN",.84,7981019.001,2,149,0)
<xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981019.001,2,150,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,151,0)
  <xsl:with-param name="title" select="'Test'"/>
"KRN",.84,7981019.001,2,152,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981019.001,2,153,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,154,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,155,0)
</xsl:template>
"KRN",.84,7981019.001,2,156,0)
 
"KRN",.84,7981019.001,2,157,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981019.001,2,158,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,159,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981019.001,2,160,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981019.001,2,161,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981019.001,2,162,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,163,0)
</xsl:template>
"KRN",.84,7981019.001,2,164,0)
 
"KRN",.84,7981019.001,2,165,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981019.001,2,166,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,167,0)
  <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981019.001,2,168,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981019.001,2,169,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981019.001,2,170,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,171,0)
</xsl:template>
"KRN",.84,7981019.001,2,172,0)
 
"KRN",.84,7981019.001,2,173,0)
<xsl:template match="COLUMN[@NAME='MELD']">
"KRN",.84,7981019.001,2,174,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,175,0)
  <xsl:with-param name="sort" select="'PATIENTS=MELD'"/> 
"KRN",.84,7981019.001,2,176,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,177,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,178,0)
</xsl:template>
"KRN",.84,7981019.001,2,179,0)
 
"KRN",.84,7981019.001,2,180,0)
<xsl:template match="COLUMN[@NAME='NA']">
"KRN",.84,7981019.001,2,181,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981019.001,2,182,0)
  <xsl:with-param name="title" select="'MELD-Na'"/>
"KRN",.84,7981019.001,2,183,0)
  <xsl:with-param name="sort" select="'PATIENTS=MELDNA'"/>
"KRN",.84,7981019.001,2,184,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981019.001,2,185,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,186,0)
</xsl:template>
"KRN",.84,7981019.001,2,187,0)
 
"KRN",.84,7981019.001,2,188,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981019.001,2,189,0)
 
"KRN",.84,7981019.001,2,190,0)
<xsl:template match="PATIENT/MELD">
"KRN",.84,7981019.001,2,191,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981019.001,2,192,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.001,2,193,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981019.001,2,194,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,195,0)
</xsl:template>
"KRN",.84,7981019.001,2,196,0)
 
"KRN",.84,7981019.001,2,197,0)
<xsl:template match="PATIENT/MELDNA">
"KRN",.84,7981019.001,2,198,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981019.001,2,199,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981019.001,2,200,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981019.001,2,201,0)
 </xsl:call-template>
"KRN",.84,7981019.001,2,202,0)
</xsl:template>
"KRN",.84,7981019.001,2,203,0)
 
"KRN",.84,7981019.001,2,204,0)
<xsl:template match="PATIENT/MELDDATA">
"KRN",.84,7981019.001,2,205,0)
 <td class="aLeft">
"KRN",.84,7981019.001,2,206,0)
   <xsl:for-each select="TEST/TNAME">
"KRN",.84,7981019.001,2,207,0)
    <xsl:value-of select="."/><br/>
"KRN",.84,7981019.001,2,208,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,209,0)
 </td>
"KRN",.84,7981019.001,2,210,0)
 <td>
"KRN",.84,7981019.001,2,211,0)
   <xsl:for-each select="TEST/DATE">
"KRN",.84,7981019.001,2,212,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981019.001,2,213,0)
       <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981019.001,2,214,0)
       <xsl:with-param name="value" select="."/>
"KRN",.84,7981019.001,2,215,0)
       <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,216,0)
     </xsl:call-template><br/>
"KRN",.84,7981019.001,2,217,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,218,0)
 </td>
"KRN",.84,7981019.001,2,219,0)
 <td class="aRight">
"KRN",.84,7981019.001,2,220,0)
   <xsl:for-each select="TEST/RESULT">
"KRN",.84,7981019.001,2,221,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981019.001,2,222,0)
       <xsl:with-param name="value" select="."/>
"KRN",.84,7981019.001,2,223,0)
       <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981019.001,2,224,0)
     </xsl:call-template><br/>
"KRN",.84,7981019.001,2,225,0)
   </xsl:for-each>
"KRN",.84,7981019.001,2,226,0)
 </td>
"KRN",.84,7981019.001,2,227,0)
 
"KRN",.84,7981019.001,2,228,0)
</xsl:template> 
"KRN",.84,7981019.001,2,229,0)
 
"KRN",.84,7981019.001,2,230,0)
</xsl:stylesheet>
"KRN",.84,7981020.001,-1)
0^10
"KRN",.84,7981020.001,0)
7981020.001^2^^CLINICAL CASE REGISTRIES^Renal Function by Range (HTML)
"KRN",.84,7981020.001,2,0)
^.844^262^262^3111215^^
"KRN",.84,7981020.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981020.001,2,2,0)
 
"KRN",.84,7981020.001,2,3,0)
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
"KRN",.84,7981020.001,2,4,0)
version="1.0">
"KRN",.84,7981020.001,2,5,0)
 
"KRN",.84,7981020.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981020.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981020.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981020.001,2,9,0)
 
"KRN",.84,7981020.001,2,10,0)
<xsl:variable name="ckdcnt" 
"KRN",.84,7981020.001,2,11,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CKD'])
"KRN",.84,7981020.001,2,12,0)
"/> 
"KRN",.84,7981020.001,2,13,0)
<xsl:variable name="mdrdcnt" 
"KRN",.84,7981020.001,2,14,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='MDRD']
"KRN",.84,7981020.001,2,15,0)
)"/> 
"KRN",.84,7981020.001,2,16,0)
 
"KRN",.84,7981020.001,2,17,0)
<xsl:template match="/">
"KRN",.84,7981020.001,2,18,0)
 <html>
"KRN",.84,7981020.001,2,19,0)
  <head>
"KRN",.84,7981020.001,2,20,0)
   <title>Renal Function by Range</title>
"KRN",.84,7981020.001,2,21,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981020.001,2,22,0)
  </head>
"KRN",.84,7981020.001,2,23,0)
  <body>
"KRN",.84,7981020.001,2,24,0)
   <h1>Renal Function by Range</h1>
"KRN",.84,7981020.001,2,25,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981020.001,2,26,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981020.001,2,27,0)
    <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981020.001,2,28,0)
       Lab tests used in calculations are identified by LOINC code. 
"KRN",.84,7981020.001,2,29,0)
       If the values shown for test results appear unusual, 
"KRN",.84,7981020.001,2,30,0)
contact your local Lab ADPAC to verify that LOINC codes are set up correctly.  
"KRN",.84,7981020.001,2,31,0)
The LOINC codes that are used are:<br/>
"KRN",.84,7981020.001,2,32,0)
       <br/>
"KRN",.84,7981020.001,2,33,0)
       <xsl:call-template name="ShowLOINCCodes"/>
"KRN",.84,7981020.001,2,34,0)
    </div>
"KRN",.84,7981020.001,2,35,0)
    <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981020.001,2,36,0)
       *For this report, creatinine values &gt;12 mg/dL are assumed to be 
"KRN",.84,7981020.001,2,37,0)
erroneous and are ignored.  Height values on the CrCL report that are
"KRN",.84,7981020.001,2,38,0)
&lt;36 inches or &gt;96 inches are also assumed to be erroneous and are
"KRN",.84,7981020.001,2,39,0)
ignored.
"KRN",.84,7981020.001,2,40,0)
    </div>
"KRN",.84,7981020.001,2,41,0)
   </xsl:if>
"KRN",.84,7981020.001,2,42,0)
    <xsl:if test="$ckdcnt &gt; 0 or $mdrdcnt &gt; 0">
"KRN",.84,7981020.001,2,43,0)
     <xsl:call-template name="RenalReportSummary"/>
"KRN",.84,7981020.001,2,44,0)
    </xsl:if>
"KRN",.84,7981020.001,2,45,0)
   <xsl:if test="count(/REPORT/PATIENTS/*) > 0">
"KRN",.84,7981020.001,2,46,0)
     <br />
"KRN",.84,7981020.001,2,47,0)
     <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981020.001,2,48,0)
     <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981020.001,2,49,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981020.001,2,50,0)
     <div>
"KRN",.84,7981020.001,2,51,0)
       <xsl:call-template name="MakeScrollable">
"KRN",.84,7981020.001,2,52,0)
         <xsl:with-param name="condition" select="*[31]"/>
"KRN",.84,7981020.001,2,53,0)
       </xsl:call-template>
"KRN",.84,7981020.001,2,54,0)
       <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981020.001,2,55,0)
     </div>
"KRN",.84,7981020.001,2,56,0)
     <xsl:call-template name="ExplainFormula"/>
"KRN",.84,7981020.001,2,57,0)
   </xsl:if>
"KRN",.84,7981020.001,2,58,0)
  </body>
"KRN",.84,7981020.001,2,59,0)
 </html>
"KRN",.84,7981020.001,2,60,0)
</xsl:template>
"KRN",.84,7981020.001,2,61,0)
 
"KRN",.84,7981020.001,2,62,0)
<xsl:template name="ShowLOINCCodes">
"KRN",.84,7981020.001,2,63,0)
 <xsl:param name="summary" select="/REPORT/LOINC_CODES"/>
"KRN",.84,7981020.001,2,64,0)
 <table cellpadding="5" cellspacing="0">
"KRN",.84,7981020.001,2,65,0)
  <thead>
"KRN",.84,7981020.001,2,66,0)
   <tr>
"KRN",.84,7981020.001,2,67,0)
    <th>LOINC Codes</th>
"KRN",.84,7981020.001,2,68,0)
   </tr>
"KRN",.84,7981020.001,2,69,0)
  </thead>
"KRN",.84,7981020.001,2,70,0)
  <tbody>
"KRN",.84,7981020.001,2,71,0)
    <xsl:for-each select="/REPORT/LOINC_CODES/CODE">
"KRN",.84,7981020.001,2,72,0)
    <tr>
"KRN",.84,7981020.001,2,73,0)
      <td class="aLeft"><xsl:value-of select="@CODE"/></td>
"KRN",.84,7981020.001,2,74,0)
    </tr>
"KRN",.84,7981020.001,2,75,0)
   </xsl:for-each>
"KRN",.84,7981020.001,2,76,0)
  </tbody>
"KRN",.84,7981020.001,2,77,0)
 </table>
"KRN",.84,7981020.001,2,78,0)
</xsl:template>
"KRN",.84,7981020.001,2,79,0)
 
"KRN",.84,7981020.001,2,80,0)
<xsl:template name="RenalReportSummary">
"KRN",.84,7981020.001,2,81,0)
 <xsl:param name="summary" select="/REPORT/SUMMARY"/>
"KRN",.84,7981020.001,2,82,0)
 <table cellpadding="5" cellspacing="0">
"KRN",.84,7981020.001,2,83,0)
  <thead>
"KRN",.84,7981020.001,2,84,0)
   <tr>
"KRN",.84,7981020.001,2,85,0)
    <th>Chronic Kidney Disease Stages</th>
"KRN",.84,7981020.001,2,86,0)
    <th>GFR</th>
"KRN",.84,7981020.001,2,87,0)
    <xsl:if test="$mdrdcnt &gt; 0">
"KRN",.84,7981020.001,2,88,0)
      <th>Number of Patients<br/>by MDRD</th>
"KRN",.84,7981020.001,2,89,0)
    </xsl:if>
"KRN",.84,7981020.001,2,90,0)
    <xsl:if test="$ckdcnt &gt; 0">
"KRN",.84,7981020.001,2,91,0)
      <th>Number of Patients<br/>by CKD-EPI</th>
"KRN",.84,7981020.001,2,92,0)
    </xsl:if>
"KRN",.84,7981020.001,2,93,0)
   </tr>
"KRN",.84,7981020.001,2,94,0)
  </thead>
"KRN",.84,7981020.001,2,95,0)
  <tbody>
"KRN",.84,7981020.001,2,96,0)
    <xsl:for-each select="/REPORT/SUMMARY/DATA">
"KRN",.84,7981020.001,2,97,0)
    <tr>
"KRN",.84,7981020.001,2,98,0)
      <td class="aLeft"><xsl:value-of select="./DESC"/></td>
"KRN",.84,7981020.001,2,99,0)
      <td><xsl:value-of select="./VALUES"/><sup>2</sup></td>
"KRN",.84,7981020.001,2,100,0)
      <xsl:if test="$mdrdcnt &gt; 0">
"KRN",.84,7981020.001,2,101,0)
        <td><xsl:value-of select="./NPMDRD"/></td>
"KRN",.84,7981020.001,2,102,0)
      </xsl:if>
"KRN",.84,7981020.001,2,103,0)
      <xsl:if test="$ckdcnt &gt; 0">
"KRN",.84,7981020.001,2,104,0)
        <td><xsl:value-of select="./NPCKD"/></td>
"KRN",.84,7981020.001,2,105,0)
      </xsl:if>
"KRN",.84,7981020.001,2,106,0)
    </tr>
"KRN",.84,7981020.001,2,107,0)
   </xsl:for-each>
"KRN",.84,7981020.001,2,108,0)
  </tbody>
"KRN",.84,7981020.001,2,109,0)
 </table>
"KRN",.84,7981020.001,2,110,0)
</xsl:template>
"KRN",.84,7981020.001,2,111,0)
 
"KRN",.84,7981020.001,2,112,0)
<xsl:template name="ExplainFormula">
"KRN",.84,7981020.001,2,113,0)
 <br/>
"KRN",.84,7981020.001,2,114,0)
 <div class="reportSummary">
"KRN",.84,7981020.001,2,115,0)
  <div style="float:left; width:80%">
"KRN",.84,7981020.001,2,116,0)
   <table cellpadding="3" cellspacing="0">
"KRN",.84,7981020.001,2,117,0)
    <caption>Calculation Formulas</caption>
"KRN",.84,7981020.001,2,118,0)
    <thead>
"KRN",.84,7981020.001,2,119,0)
     <tr>
"KRN",.84,7981020.001,2,120,0)
      <th width="60">Description</th>
"KRN",.84,7981020.001,2,121,0)
      <th>Formula</th>
"KRN",.84,7981020.001,2,122,0)
     </tr>
"KRN",.84,7981020.001,2,123,0)
    </thead>
"KRN",.84,7981020.001,2,124,0)
    <tbody>
"KRN",.84,7981020.001,2,125,0)
     <xsl:if 
"KRN",.84,7981020.001,2,126,0)
test="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CRCL']) 
"KRN",.84,7981020.001,2,127,0)
> 0">
"KRN",.84,7981020.001,2,128,0)
     <tr>
"KRN",.84,7981020.001,2,129,0)
      <td align="center">Cockcroft-Gault</td>
"KRN",.84,7981020.001,2,130,0)
      <td class="aLeft"> (140-age) * ideal weight in kg (*.85 if 
"KRN",.84,7981020.001,2,131,0)
female)/(Cr*72)<br/><br/>
"KRN",.84,7981020.001,2,132,0)
       Ideal weight in kg calculated as:<br />
"KRN",.84,7981020.001,2,133,0)
       male = 51.65+(1.85*(height-60))<br/>
"KRN",.84,7981020.001,2,134,0)
       female = 48.67+(1.65*(height-60))
"KRN",.84,7981020.001,2,135,0)
      </td>
"KRN",.84,7981020.001,2,136,0)
     </tr>
"KRN",.84,7981020.001,2,137,0)
     </xsl:if>
"KRN",.84,7981020.001,2,138,0)
     <xsl:if test="$mdrdcnt &gt; 0">
"KRN",.84,7981020.001,2,139,0)
      <tr>
"KRN",.84,7981020.001,2,140,0)
       <td align="center">eGFR by MDRD</td>
"KRN",.84,7981020.001,2,141,0)
       <td class="aLeft"> 175 * (Cr<sup>-1.154</sup>) * 
"KRN",.84,7981020.001,2,142,0)
(age<sup>-.203</sup>) *1.212 (if Black) * .742 (if female)</td>
"KRN",.84,7981020.001,2,143,0)
      </tr>
"KRN",.84,7981020.001,2,144,0)
     </xsl:if>
"KRN",.84,7981020.001,2,145,0)
     <xsl:if test="$ckdcnt &gt; 0">
"KRN",.84,7981020.001,2,146,0)
      <tr>
"KRN",.84,7981020.001,2,147,0)
       <td align="center">eGFR by CKD-EPI</td>
"KRN",.84,7981020.001,2,148,0)
       <td class="aLeft"> 141 * min(Scr/k, 1)<sup>a</sup> * max(Scr/k, 
"KRN",.84,7981020.001,2,149,0)
1)<sup>-1.209</sup> * 0.993<sup>Age</sup> * 1.159 (if black) * 1.018 (if 
"KRN",.84,7981020.001,2,150,0)
female)</td>
"KRN",.84,7981020.001,2,151,0)
      </tr>
"KRN",.84,7981020.001,2,152,0)
     </xsl:if>
"KRN",.84,7981020.001,2,153,0)
    </tbody>
"KRN",.84,7981020.001,2,154,0)
   </table>
"KRN",.84,7981020.001,2,155,0)
  </div>
"KRN",.84,7981020.001,2,156,0)
 </div>
"KRN",.84,7981020.001,2,157,0)
</xsl:template>
"KRN",.84,7981020.001,2,158,0)
 
"KRN",.84,7981020.001,2,159,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981020.001,2,160,0)
 
"KRN",.84,7981020.001,2,161,0)
<xsl:template match="COLUMN[@NAME='TEST']">
"KRN",.84,7981020.001,2,162,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,163,0)
  <xsl:with-param name="title" select="'Test'"/>
"KRN",.84,7981020.001,2,164,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,165,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981020.001,2,166,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,167,0)
</xsl:template>
"KRN",.84,7981020.001,2,168,0)
 
"KRN",.84,7981020.001,2,169,0)
<xsl:template match="COLUMN[@NAME='DATE']">
"KRN",.84,7981020.001,2,170,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,171,0)
  <xsl:with-param name="title" select="'Date'"/>
"KRN",.84,7981020.001,2,172,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,173,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981020.001,2,174,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,175,0)
</xsl:template>
"KRN",.84,7981020.001,2,176,0)
 
"KRN",.84,7981020.001,2,177,0)
<xsl:template match="COLUMN[@NAME='RESULT']">
"KRN",.84,7981020.001,2,178,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,179,0)
  <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981020.001,2,180,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981020.001,2,181,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981020.001,2,182,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,183,0)
</xsl:template>
"KRN",.84,7981020.001,2,184,0)
 
"KRN",.84,7981020.001,2,185,0)
<xsl:template match="COLUMN[@NAME='CRCL']">
"KRN",.84,7981020.001,2,186,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,187,0)
  <xsl:with-param name="title" select="'CrCL'"/>
"KRN",.84,7981020.001,2,188,0)
  <xsl:with-param name="sort" select="'PATIENTS=CRCL'"/>
"KRN",.84,7981020.001,2,189,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981020.001,2,190,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,191,0)
</xsl:template>
"KRN",.84,7981020.001,2,192,0)
 
"KRN",.84,7981020.001,2,193,0)
<xsl:template match="COLUMN[@NAME='MDRD']">
"KRN",.84,7981020.001,2,194,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,195,0)
  <xsl:with-param name="title" select="'MDRD'"/>
"KRN",.84,7981020.001,2,196,0)
  <xsl:with-param name="sort" select="'PATIENTS=MDRD'"/>
"KRN",.84,7981020.001,2,197,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981020.001,2,198,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,199,0)
</xsl:template>
"KRN",.84,7981020.001,2,200,0)
 
"KRN",.84,7981020.001,2,201,0)
<xsl:template match="COLUMN[@NAME='CKD']">
"KRN",.84,7981020.001,2,202,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981020.001,2,203,0)
  <xsl:with-param name="title" select="'CKD-EPI'"/>
"KRN",.84,7981020.001,2,204,0)
  <xsl:with-param name="sort" select="'PATIENTS=CKD'"/>
"KRN",.84,7981020.001,2,205,0)
  <xsl:with-param name="width" select="'6%'"/>
"KRN",.84,7981020.001,2,206,0)
 </xsl:call-template>
"KRN",.84,7981020.001,2,207,0)
</xsl:template>
"KRN",.84,7981020.001,2,208,0)
 
"KRN",.84,7981020.001,2,209,0)
 <!--[ TABLE CELLS ]-->
"KRN",.84,7981020.001,2,210,0)
 
"KRN",.84,7981020.001,2,211,0)
<xsl:template match="PATIENT/CRCL">
"KRN",.84,7981020.001,2,212,0)
  <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981020.001,2,213,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.001,2,214,0)
    <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981020.001,2,215,0)
  </xsl:call-template>
"KRN",.84,7981020.001,2,216,0)
</xsl:template>
"KRN",.84,7981020.001,2,217,0)
 
"KRN",.84,7981020.001,2,218,0)
<xsl:template match="PATIENT/EGFR">
"KRN",.84,7981020.001,2,219,0)
  <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981020.001,2,220,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981020.001,2,221,0)
    <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981020.001,2,222,0)
  </xsl:call-template>
"KRN",.84,7981020.001,2,223,0)
</xsl:template>
"KRN",.84,7981020.001,2,224,0)
 
"KRN",.84,7981020.001,2,225,0)
<xsl:template match="PATIENT/RNLDATA">
"KRN",.84,7981020.001,2,226,0)
 <xsl:variable name="CRCL" 
"KRN",.84,7981020.001,2,227,0)
select="count(/REPORT/HEADER/TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='CRCL']
"KRN",.84,7981020.001,2,228,0)
)"/>
"KRN",.84,7981020.001,2,229,0)
 <td class="aLeft">
"KRN",.84,7981020.001,2,230,0)
   <xsl:text>Cr</xsl:text>
"KRN",.84,7981020.001,2,231,0)
   <xsl:if test="$CRCL>0">
"KRN",.84,7981020.001,2,232,0)
    <br/><xsl:text>Height</xsl:text>
"KRN",.84,7981020.001,2,233,0)
   </xsl:if>
"KRN",.84,7981020.001,2,234,0)
 </td>
"KRN",.84,7981020.001,2,235,0)
 <td>
"KRN",.84,7981020.001,2,236,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,237,0)
     <xsl:with-param name="value" select="TEST/DATE"/>
"KRN",.84,7981020.001,2,238,0)
     <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.001,2,239,0)
   </xsl:call-template>
"KRN",.84,7981020.001,2,240,0)
   <xsl:if test="$CRCL>0">
"KRN",.84,7981020.001,2,241,0)
     <br/>
"KRN",.84,7981020.001,2,242,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,243,0)
       <xsl:with-param name="value" select="HEIGHT/DATE"/>
"KRN",.84,7981020.001,2,244,0)
       <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981020.001,2,245,0)
     </xsl:call-template>
"KRN",.84,7981020.001,2,246,0)
   </xsl:if>
"KRN",.84,7981020.001,2,247,0)
 </td>
"KRN",.84,7981020.001,2,248,0)
 <td class="aRight">
"KRN",.84,7981020.001,2,249,0)
   <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,250,0)
     <xsl:with-param name="value" select="TEST/RESULT"/>
"KRN",.84,7981020.001,2,251,0)
   </xsl:call-template>
"KRN",.84,7981020.001,2,252,0)
   <xsl:if test="$CRCL>0">
"KRN",.84,7981020.001,2,253,0)
     <br/>
"KRN",.84,7981020.001,2,254,0)
     <xsl:call-template name="CellValue">
"KRN",.84,7981020.001,2,255,0)
       <xsl:with-param name="value" select="HEIGHT/RESULT"/>
"KRN",.84,7981020.001,2,256,0)
     </xsl:call-template>
"KRN",.84,7981020.001,2,257,0)
   </xsl:if>
"KRN",.84,7981020.001,2,258,0)
 </td>
"KRN",.84,7981020.001,2,259,0)
 
"KRN",.84,7981020.001,2,260,0)
</xsl:template>
"KRN",.84,7981020.001,2,261,0)
 
"KRN",.84,7981020.001,2,262,0)
</xsl:stylesheet>
"KRN",.84,7981020.001,3,0)
^.845
"KRN",.84,7981021.001,-1)
0^4
"KRN",.84,7981021.001,0)
7981021.001^2^^CLINICAL CASE REGISTRIES^Potential DAA Candidates (HTML)
"KRN",.84,7981021.001,2,0)
^^101^101^3120105^
"KRN",.84,7981021.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981021.001,2,2,0)
 
"KRN",.84,7981021.001,2,3,0)
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
"KRN",.84,7981021.001,2,4,0)
version="1.0">
"KRN",.84,7981021.001,2,5,0)
 
"KRN",.84,7981021.001,2,6,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981021.001,2,7,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981021.001,2,8,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981021.001,2,9,0)
 
"KRN",.84,7981021.001,2,10,0)
<xsl:template match="/">
"KRN",.84,7981021.001,2,11,0)
 <html>
"KRN",.84,7981021.001,2,12,0)
  <head>
"KRN",.84,7981021.001,2,13,0)
   <title>Potential DAA Candidates</title>
"KRN",.84,7981021.001,2,14,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981021.001,2,15,0)
  </head>
"KRN",.84,7981021.001,2,16,0)
  <body>
"KRN",.84,7981021.001,2,17,0)
   <h1>Potential DAA Candidates</h1>
"KRN",.84,7981021.001,2,18,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981021.001,2,19,0)
   <xsl:if test="/REPORT/PARAMETERS/TREATMENT_HISTORY/@EXP_DAYS != ''">
"KRN",.84,7981021.001,2,20,0)
      <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981021.001,2,21,0)
       *For this report, patients with HCV antiviral treatment within the 
"KRN",.84,7981021.001,2,22,0)
last 
"KRN",.84,7981021.001,2,23,0)
<xsl:value-of select="/REPORT/PARAMETERS/TREATMENT_HISTORY/@EXP_DAYS"/> 
"KRN",.84,7981021.001,2,24,0)
days have been excluded.
"KRN",.84,7981021.001,2,25,0)
      </div>
"KRN",.84,7981021.001,2,26,0)
   </xsl:if>
"KRN",.84,7981021.001,2,27,0)
   <br />
"KRN",.84,7981021.001,2,28,0)
   <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981021.001,2,29,0)
   <div style="page-break-after:always; font-size:1; margin:0; 
"KRN",.84,7981021.001,2,30,0)
border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981021.001,2,31,0)
   <div>
"KRN",.84,7981021.001,2,32,0)
      <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981021.001,2,33,0)
   </div>
"KRN",.84,7981021.001,2,34,0)
  </body>
"KRN",.84,7981021.001,2,35,0)
 </html>
"KRN",.84,7981021.001,2,36,0)
</xsl:template>
"KRN",.84,7981021.001,2,37,0)
 
"KRN",.84,7981021.001,2,38,0)
<!--[ TABLE HEADERS ]-->
"KRN",.84,7981021.001,2,39,0)
 
"KRN",.84,7981021.001,2,40,0)
<xsl:template match="COLUMN[@NAME='STATUS']">
"KRN",.84,7981021.001,2,41,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981021.001,2,42,0)
  <xsl:with-param name="title" select="'Treatment Status'"/>
"KRN",.84,7981021.001,2,43,0)
  <xsl:with-param name="width" select="'8%'"/>
"KRN",.84,7981021.001,2,44,0)
 </xsl:call-template>
"KRN",.84,7981021.001,2,45,0)
</xsl:template>
"KRN",.84,7981021.001,2,46,0)
 
"KRN",.84,7981021.001,2,47,0)
<xsl:template match="COLUMN[@NAME='HCV_DATE']">
"KRN",.84,7981021.001,2,48,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981021.001,2,49,0)
  <xsl:with-param name="title" select="'Most Recent HCV RNA Date'"/>
"KRN",.84,7981021.001,2,50,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981021.001,2,51,0)
 </xsl:call-template>
"KRN",.84,7981021.001,2,52,0)
</xsl:template>
"KRN",.84,7981021.001,2,53,0)
 
"KRN",.84,7981021.001,2,54,0)
<xsl:template match="COLUMN[@NAME='HCV']">
"KRN",.84,7981021.001,2,55,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981021.001,2,56,0)
  <xsl:with-param name="title" select="'Most Recent HCV RNA'"/>
"KRN",.84,7981021.001,2,57,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981021.001,2,58,0)
 </xsl:call-template>
"KRN",.84,7981021.001,2,59,0)
</xsl:template>
"KRN",.84,7981021.001,2,60,0)
 
"KRN",.84,7981021.001,2,61,0)
<xsl:template match="COLUMN[@NAME='GT']">
"KRN",.84,7981021.001,2,62,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981021.001,2,63,0)
  <xsl:with-param name="title" select="'Most Recent GT'"/>
"KRN",.84,7981021.001,2,64,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981021.001,2,65,0)
 </xsl:call-template>
"KRN",.84,7981021.001,2,66,0)
</xsl:template>
"KRN",.84,7981021.001,2,67,0)
 
"KRN",.84,7981021.001,2,68,0)
<xsl:template match="COLUMN[@NAME='FILL_DATE']">
"KRN",.84,7981021.001,2,69,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981021.001,2,70,0)
  <xsl:with-param name="title" select="'Most Recent Fill Date'"/>
"KRN",.84,7981021.001,2,71,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981021.001,2,72,0)
</xsl:call-template>
"KRN",.84,7981021.001,2,73,0)
</xsl:template>
"KRN",.84,7981021.001,2,74,0)
 
"KRN",.84,7981021.001,2,75,0)
<xsl:template match="COLUMN[@NAME='FILL_MED']">
"KRN",.84,7981021.001,2,76,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981021.001,2,77,0)
  <xsl:with-param name="title" select="'Most Recent HCV Medication 
"KRN",.84,7981021.001,2,78,0)
Fill'"/>
"KRN",.84,7981021.001,2,79,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981021.001,2,80,0)
 </xsl:call-template>
"KRN",.84,7981021.001,2,81,0)
</xsl:template>
"KRN",.84,7981021.001,2,82,0)
 
"KRN",.84,7981021.001,2,83,0)
<!--[ TABLE CELLS ]-->
"KRN",.84,7981021.001,2,84,0)
 
"KRN",.84,7981021.001,2,85,0)
<xsl:template match="PATIENT/HCV_DATE">
"KRN",.84,7981021.001,2,86,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981021.001,2,87,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981021.001,2,88,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981021.001,2,89,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981021.001,2,90,0)
 </xsl:call-template>
"KRN",.84,7981021.001,2,91,0)
</xsl:template>
"KRN",.84,7981021.001,2,92,0)
 
"KRN",.84,7981021.001,2,93,0)
<xsl:template match="PATIENT/FILL_DATE">
"KRN",.84,7981021.001,2,94,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981021.001,2,95,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981021.001,2,96,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981021.001,2,97,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981021.001,2,98,0)
 </xsl:call-template>
"KRN",.84,7981021.001,2,99,0)
</xsl:template>
"KRN",.84,7981021.001,2,100,0)
 
"KRN",.84,7981021.001,2,101,0)
</xsl:stylesheet>
"KRN",.84,7981021.002,-1)
0^5
"KRN",.84,7981021.002,0)
7981021.002^2^^CLINICAL CASE REGISTRIES^Potential DAA Candidates (CSV)
"KRN",.84,7981021.002,2,0)
^.844^73^73^3120105^^^
"KRN",.84,7981021.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981021.002,2,2,0)
<xsl:stylesheet version="1.0"  
"KRN",.84,7981021.002,2,3,0)
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981021.002,2,4,0)
 
"KRN",.84,7981021.002,2,5,0)
<xsl:import  href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981021.002,2,6,0)
 
"KRN",.84,7981021.002,2,7,0)
<xsl:template match="/">
"KRN",.84,7981021.002,2,8,0)
  <xsl:text>Potential DAA Candidates</xsl:text>
"KRN",.84,7981021.002,2,9,0)
  <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981021.002,2,10,0)
</xsl:template>
"KRN",.84,7981021.002,2,11,0)
 
"KRN",.84,7981021.002,2,12,0)
 <xsl:template match="COLUMN[@NAME='STATUS']">
"KRN",.84,7981021.002,2,13,0)
  <xsl:value-of select="'Treatment Status'"/>
"KRN",.84,7981021.002,2,14,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,15,0)
 </xsl:template>
"KRN",.84,7981021.002,2,16,0)
 
"KRN",.84,7981021.002,2,17,0)
 <xsl:template match="COLUMN[@NAME='HCV_DATE']">
"KRN",.84,7981021.002,2,18,0)
  <xsl:value-of select="'Most Recent HCV RNA Date'"/>
"KRN",.84,7981021.002,2,19,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,20,0)
 </xsl:template>
"KRN",.84,7981021.002,2,21,0)
 
"KRN",.84,7981021.002,2,22,0)
 <xsl:template match="COLUMN[@NAME='HCV']">
"KRN",.84,7981021.002,2,23,0)
  <xsl:value-of select="'Most Recent HCV RNA'"/>
"KRN",.84,7981021.002,2,24,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,25,0)
 </xsl:template>
"KRN",.84,7981021.002,2,26,0)
 
"KRN",.84,7981021.002,2,27,0)
 <xsl:template match="COLUMN[@NAME='GT']">
"KRN",.84,7981021.002,2,28,0)
  <xsl:value-of select="'Most Recent GT'"/>
"KRN",.84,7981021.002,2,29,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,30,0)
 </xsl:template>
"KRN",.84,7981021.002,2,31,0)
 
"KRN",.84,7981021.002,2,32,0)
 <xsl:template match="COLUMN[@NAME='FILL_DATE']">
"KRN",.84,7981021.002,2,33,0)
  <xsl:value-of select="'Most Recent Fill Date'"/>
"KRN",.84,7981021.002,2,34,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,35,0)
 </xsl:template>
"KRN",.84,7981021.002,2,36,0)
 
"KRN",.84,7981021.002,2,37,0)
 <xsl:template match="COLUMN[@NAME='FILL_MED']">
"KRN",.84,7981021.002,2,38,0)
  <xsl:value-of select="'Most Recent HCV Medication Fill'"/>
"KRN",.84,7981021.002,2,39,0)
  <xsl:value-of select="$DELIMITER"/>
"KRN",.84,7981021.002,2,40,0)
 </xsl:template>
"KRN",.84,7981021.002,2,41,0)
 
"KRN",.84,7981021.002,2,42,0)
 <xsl:template match="PATIENTS/PATIENT">
"KRN",.84,7981021.002,2,43,0)
  <xsl:variable name="ptname" select="NAME"/>
"KRN",.84,7981021.002,2,44,0)
  <xsl:variable name="ssn" select="LAST4"/>
"KRN",.84,7981021.002,2,45,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,46,0)
   <xsl:with-param name="value" select="$ptname"/>
"KRN",.84,7981021.002,2,47,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,48,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,49,0)
   <xsl:with-param name="value" select="$ssn"/>
"KRN",.84,7981021.002,2,50,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,51,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,52,0)
   <xsl:with-param name="value" select="STATUS"/>
"KRN",.84,7981021.002,2,53,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,54,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,55,0)
   <xsl:with-param name="value" select="HCV_DATE"/>
"KRN",.84,7981021.002,2,56,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981021.002,2,57,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,58,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,59,0)
   <xsl:with-param name="value" select="HCV"/>
"KRN",.84,7981021.002,2,60,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,61,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,62,0)
   <xsl:with-param name="value" select="GT"/>
"KRN",.84,7981021.002,2,63,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,64,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,65,0)
   <xsl:with-param name="value" select="FILL_DATE"/>
"KRN",.84,7981021.002,2,66,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981021.002,2,67,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,68,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981021.002,2,69,0)
   <xsl:with-param name="value" select="FILL_MED"/>
"KRN",.84,7981021.002,2,70,0)
  </xsl:call-template>
"KRN",.84,7981021.002,2,71,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981021.002,2,72,0)
 </xsl:template>  
"KRN",.84,7981021.002,2,73,0)
</xsl:stylesheet>
"KRN",.84,7981022.001,-1)
0^7
"KRN",.84,7981022.001,0)
7981022.001^2^^CLINICAL CASE REGISTRIES^DAA Lab Monitoring (HTML)
"KRN",.84,7981022.001,2,0)
^^470^470^3120516^
"KRN",.84,7981022.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981022.001,2,2,0)
 
"KRN",.84,7981022.001,2,3,0)
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
"KRN",.84,7981022.001,2,4,0)
 
"KRN",.84,7981022.001,2,5,0)
<xsl:import  href="template://report/998/1"/>  <!-- Styles   -->
"KRN",.84,7981022.001,2,6,0)
<xsl:import  href="template://report/999/1"/>  <!-- Common   -->
"KRN",.84,7981022.001,2,7,0)
<xsl:include href="template://report/997/1"/>  <!-- Patients -->
"KRN",.84,7981022.001,2,8,0)
<xsl:include href="template://report/996/1"/>  <!-- Pharmacy -->
"KRN",.84,7981022.001,2,9,0)
<xsl:include href="template://report/995/1"/>  <!-- Lab Data -->
"KRN",.84,7981022.001,2,10,0)
 
"KRN",.84,7981022.001,2,11,0)
<xsl:key name="patient-drug" match="/REPORT/DRUGS/DRUG"  use="@ID"/>
"KRN",.84,7981022.001,2,12,0)
<xsl:key name="patient-lt"   match="/REPORT/LABTESTS/LT" use="@ID"/>
"KRN",.84,7981022.001,2,13,0)
<xsl:key name="patient-both" match="/REPORT/DRUGS/DRUG|/REPORT/LABTESTS/LT" use="@ID"/>
"KRN",.84,7981022.001,2,14,0)
 
"KRN",.84,7981022.001,2,15,0)
<!-- Determine if the Meds and/or Labs table is not empty. -->
"KRN",.84,7981022.001,2,16,0)
<xsl:variable name="D1" select="/REPORT/DRUGS/DRUG[1]"/>
"KRN",.84,7981022.001,2,17,0)
<xsl:variable name="L1" select="/REPORT/LABTESTS/LT[1]"/>
"KRN",.84,7981022.001,2,18,0)
 
"KRN",.84,7981022.001,2,19,0)
<!-- Determine if the Meds and/or Labs table is sorted by a patient data field.-->
"KRN",.84,7981022.001,2,20,0)
<xsl:variable name="PTCOLS"   select="',LAST4,NAME,'"/>
"KRN",.84,7981022.001,2,21,0)
<xsl:variable name="PTSDRUGS" select="contains($PTCOLS,concat(',',/REPORT/DRUGS/@SORT,','))"/>
"KRN",.84,7981022.001,2,22,0)
<xsl:variable name="PTSLABS"  select="contains($PTCOLS,concat(',',/REPORT/LABTESTS/@SORT,','))"/>
"KRN",.84,7981022.001,2,23,0)
 
"KRN",.84,7981022.001,2,24,0)
<xsl:template match="/">
"KRN",.84,7981022.001,2,25,0)
 <html>
"KRN",.84,7981022.001,2,26,0)
  <head>
"KRN",.84,7981022.001,2,27,0)
   <title>DAA Lab Monitoring Report</title>
"KRN",.84,7981022.001,2,28,0)
   <xsl:call-template name="StyleSheet"/>
"KRN",.84,7981022.001,2,29,0)
  </head>
"KRN",.84,7981022.001,2,30,0)
  <body>
"KRN",.84,7981022.001,2,31,0)
   <h1>DAA Lab Monitoring Report</h1>
"KRN",.84,7981022.001,2,32,0)
   <xsl:call-template name="ReportHeader"/>
"KRN",.84,7981022.001,2,33,0)
   <xsl:choose>
"KRN",.84,7981022.001,2,34,0)
    <!-- 
"KRN",.84,7981022.001,2,35,0)
     If both Meds and Labs tables are not empty and at least one of them
"KRN",.84,7981022.001,2,36,0)
     is sorted by patient data field, then group the data by patients.
"KRN",.84,7981022.001,2,37,0)
    -->
"KRN",.84,7981022.001,2,38,0)
    <xsl:when test="$D1 and $L1 and ($PTSDRUGS or $PTSLABS)">
"KRN",.84,7981022.001,2,39,0)
     <xsl:call-template name="DAAMonitor"/>
"KRN",.84,7981022.001,2,40,0)
    </xsl:when>
"KRN",.84,7981022.001,2,41,0)
    <!-- 
"KRN",.84,7981022.001,2,42,0)
     Otherwise, format available data using separate tables.
"KRN",.84,7981022.001,2,43,0)
    -->
"KRN",.84,7981022.001,2,44,0)
    <xsl:when test="$D1 or $L1 or /REPORT/PATIENTS/PATIENT[1]">
"KRN",.84,7981022.001,2,45,0)
     <xsl:apply-templates select="/REPORT/DRUGS"/>
"KRN",.84,7981022.001,2,46,0)
     <xsl:apply-templates select="/REPORT/LABTESTS"/>
"KRN",.84,7981022.001,2,47,0)
     <xsl:apply-templates select="/REPORT/PATIENTS"/>
"KRN",.84,7981022.001,2,48,0)
    </xsl:when>
"KRN",.84,7981022.001,2,49,0)
    <xsl:otherwise>
"KRN",.84,7981022.001,2,50,0)
     <xsl:call-template name="TableNoData"/>
"KRN",.84,7981022.001,2,51,0)
    </xsl:otherwise>
"KRN",.84,7981022.001,2,52,0)
   </xsl:choose>
"KRN",.84,7981022.001,2,53,0)
  </body>
"KRN",.84,7981022.001,2,54,0)
 </html>
"KRN",.84,7981022.001,2,55,0)
</xsl:template>
"KRN",.84,7981022.001,2,56,0)
 
"KRN",.84,7981022.001,2,57,0)
<xsl:template name="DAAMonitor">
"KRN",.84,7981022.001,2,58,0)
 <xsl:variable name="SORT">
"KRN",.84,7981022.001,2,59,0)
  <xsl:choose>
"KRN",.84,7981022.001,2,60,0)
   <xsl:when test="$PTSDRUGS"><xsl:value-of select="/REPORT/DRUGS/@SORT"/></xsl:when>
"KRN",.84,7981022.001,2,61,0)
   <xsl:when test="$PTSLABS"><xsl:value-of select="/REPORT/LABTESTS/@SORT"/></xsl:when>
"KRN",.84,7981022.001,2,62,0)
   <xsl:otherwise>NAME</xsl:otherwise>
"KRN",.84,7981022.001,2,63,0)
  </xsl:choose>
"KRN",.84,7981022.001,2,64,0)
 </xsl:variable>
"KRN",.84,7981022.001,2,65,0)
 <xsl:variable name="SORTORD">
"KRN",.84,7981022.001,2,66,0)
  <xsl:choose>
"KRN",.84,7981022.001,2,67,0)
   <xsl:when test="($PTSDRUGS and boolean(/REPORT/DRUGS/@SORTDESC)) or 
"KRN",.84,7981022.001,2,68,0)
    ($PTSLABS and boolean(/REPORT/LABTESTS/@SORTDESC))">descending</xsl:when>
"KRN",.84,7981022.001,2,69,0)
   <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981022.001,2,70,0)
  </xsl:choose>
"KRN",.84,7981022.001,2,71,0)
 </xsl:variable>
"KRN",.84,7981022.001,2,72,0)
 <xsl:for-each select="/REPORT//*[generate-id(.)=generate-id(key('patient-both',@ID))]">
"KRN",.84,7981022.001,2,73,0)
  <xsl:sort select="concat(*[name()=$SORT],'&#10;',NAME)" order="{$SORTORD}"/>
"KRN",.84,7981022.001,2,74,0)
  <!-- The following line added to fix page break issue in IE 7 -->
"KRN",.84,7981022.001,2,75,0)
  <div style="page-break-after:always; font-size:1; margin:0;border:0"><span style="visibility: hidden">-</span></div>
"KRN",.84,7981022.001,2,76,0)
  <div>
"KRN",.84,7981022.001,2,77,0)
   <table style="width:100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981022.001,2,78,0)
    <thead>
"KRN",.84,7981022.001,2,79,0)
     <tr>
"KRN",.84,7981022.001,2,80,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,81,0)
       <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981022.001,2,82,0)
       <xsl:with-param name="title" select="'#'"/>
"KRN",.84,7981022.001,2,83,0)
       <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981022.001,2,84,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,85,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,86,0)
       <xsl:with-param name="sort" select="'DRUGS=NAME&amp;LABTESTS=NAME'"/>
"KRN",.84,7981022.001,2,87,0)
       <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981022.001,2,88,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,89,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,90,0)
       <xsl:with-param name="sort" select="'DRUGS=LAST4&amp;LABTESTS=LAST4'"/>
"KRN",.84,7981022.001,2,91,0)
       <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981022.001,2,92,0)
       <xsl:with-param name="width" select="'20%'"/>
"KRN",.84,7981022.001,2,93,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,94,0)
     </tr>
"KRN",.84,7981022.001,2,95,0)
    </thead>
"KRN",.84,7981022.001,2,96,0)
    <tr>
"KRN",.84,7981022.001,2,97,0)
     <xsl:call-template name="BasicDAAPatientData">
"KRN",.84,7981022.001,2,98,0)
      <xsl:with-param name="seqnum" select="1"/>
"KRN",.84,7981022.001,2,99,0)
     </xsl:call-template>
"KRN",.84,7981022.001,2,100,0)
    </tr>
"KRN",.84,7981022.001,2,101,0)
   </table>
"KRN",.84,7981022.001,2,102,0)
   <br/>
"KRN",.84,7981022.001,2,103,0)
   <table cellpadding="5" cellspacing="0" style="leftpadding:25px; width:80%;">
"KRN",.84,7981022.001,2,104,0)
    <thead>
"KRN",.84,7981022.001,2,105,0)
     <tr>
"KRN",.84,7981022.001,2,106,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,107,0)
       <xsl:with-param name="colname" select="'DAA_FILL'"/>
"KRN",.84,7981022.001,2,108,0)
       <xsl:with-param name="sort" select="'DRUGS=DAA_FILL:ASC&amp;LABTESTS=LTNAME:ASC'"/>
"KRN",.84,7981022.001,2,109,0)
       <xsl:with-param name="title" select="'DAA Start Date'"/>
"KRN",.84,7981022.001,2,110,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,111,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,112,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,113,0)
       <xsl:with-param name="colname" select="'RXNAME'"/>
"KRN",.84,7981022.001,2,114,0)
       <xsl:with-param name="sort" select="'DRUGS=RXNAME:ASC&amp;LABTESTS=LTNAME:ASC'"/>
"KRN",.84,7981022.001,2,115,0)
       <xsl:with-param name="title" select="'Medication Name'"/>
"KRN",.84,7981022.001,2,116,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,117,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,118,0)
       <xsl:with-param name="colname" select="'FILL_DATE'"/>
"KRN",.84,7981022.001,2,119,0)
       <xsl:with-param name="sort" select="'DRUGS=FILL_DATE:ASC&amp;LABTESTS=LTNAME:ASC'"/>
"KRN",.84,7981022.001,2,120,0)
       <xsl:with-param name="title" select="'Fill Date'"/>
"KRN",.84,7981022.001,2,121,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,122,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,123,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,124,0)
       <xsl:with-param name="colname" select="'DAYSPLY'"/>
"KRN",.84,7981022.001,2,125,0)
       <xsl:with-param name="sort" select="'DRUGS=DAYSPLY:ASC&amp;LABTESTS=LTNAME:ASC'"/>
"KRN",.84,7981022.001,2,126,0)
       <xsl:with-param name="title" select="'Days Supply'"/>
"KRN",.84,7981022.001,2,127,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,128,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,129,0)
     </tr>
"KRN",.84,7981022.001,2,130,0)
    </thead>
"KRN",.84,7981022.001,2,131,0)
    <xsl:call-template name="DataGridFooter">
"KRN",.84,7981022.001,2,132,0)
     <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981022.001,2,133,0)
    </xsl:call-template>
"KRN",.84,7981022.001,2,134,0)
    <tbody>
"KRN",.84,7981022.001,2,135,0)
     <xsl:for-each select="key('patient-drug',@ID)">
"KRN",.84,7981022.001,2,136,0)
      <xsl:sort select="concat(RXNAME,'',FILL_DATE)"/>
"KRN",.84,7981022.001,2,137,0)
      <tr><xsl:call-template name="DAADrugData"/></tr>
"KRN",.84,7981022.001,2,138,0)
     </xsl:for-each>
"KRN",.84,7981022.001,2,139,0)
    </tbody>
"KRN",.84,7981022.001,2,140,0)
   </table>
"KRN",.84,7981022.001,2,141,0)
   <br />
"KRN",.84,7981022.001,2,142,0)
   <table cellpadding="5" cellspacing="0" style="leftpadding:25px; width:80%;">
"KRN",.84,7981022.001,2,143,0)
    <thead>
"KRN",.84,7981022.001,2,144,0)
     <tr>
"KRN",.84,7981022.001,2,145,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,146,0)
       <xsl:with-param name="sort" select="'LABTESTS=DATE:DESC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981022.001,2,147,0)
       <xsl:with-param name="title" select="'Date'"/>    
"KRN",.84,7981022.001,2,148,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,149,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,150,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,151,0)
       <xsl:with-param name="sort" select="'LABTESTS=LTNAME:ASC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981022.001,2,152,0)
       <xsl:with-param name="title" select="'Test Name'"/>    
"KRN",.84,7981022.001,2,153,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,154,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,155,0)
       <xsl:with-param name="sort" select="'LABTESTS=RESULT:ASC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981022.001,2,156,0)
       <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981022.001,2,157,0)
       <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,158,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,159,0)
      <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,160,0)
       <xsl:with-param name="sort" select="'LABTESTS=WKS_LAB:ASC&amp;DRUGS=RXNAME:ASC'"/>
"KRN",.84,7981022.001,2,161,0)
       <xsl:with-param name="title" select="'Weeks Since DAA Start'"/>
"KRN",.84,7981022.001,2,162,0)
       <xsl:with-param name="width" select="'25%'"/>
"KRN",.84,7981022.001,2,163,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,164,0)
     </tr>
"KRN",.84,7981022.001,2,165,0)
    </thead>
"KRN",.84,7981022.001,2,166,0)
    <xsl:call-template name="DataGridFooter">
"KRN",.84,7981022.001,2,167,0)
     <xsl:with-param name="colspan" select="4"/>
"KRN",.84,7981022.001,2,168,0)
    </xsl:call-template>
"KRN",.84,7981022.001,2,169,0)
    <tbody>
"KRN",.84,7981022.001,2,170,0)
     <xsl:for-each select="key('patient-lt',@ID)">
"KRN",.84,7981022.001,2,171,0)
      <xsl:sort select="concat(LTNAME,'&#10;',DATE)"/>
"KRN",.84,7981022.001,2,172,0)
      <tr>
"KRN",.84,7981022.001,2,173,0)
       <xsl:call-template name="BasicLRData">
"KRN",.84,7981022.001,2,174,0)
        <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981022.001,2,175,0)
       </xsl:call-template>
"KRN",.84,7981022.001,2,176,0)
      </tr>
"KRN",.84,7981022.001,2,177,0)
     </xsl:for-each>
"KRN",.84,7981022.001,2,178,0)
    </tbody>
"KRN",.84,7981022.001,2,179,0)
   </table>
"KRN",.84,7981022.001,2,180,0)
   <br clear="all"/><br/>
"KRN",.84,7981022.001,2,181,0)
  </div>
"KRN",.84,7981022.001,2,182,0)
 </xsl:for-each>
"KRN",.84,7981022.001,2,183,0)
</xsl:template>
"KRN",.84,7981022.001,2,184,0)
 
"KRN",.84,7981022.001,2,185,0)
<!--[ TABLES ]-->
"KRN",.84,7981022.001,2,186,0)
 
"KRN",.84,7981022.001,2,187,0)
<xsl:template match="REPORT/DRUGS">
"KRN",.84,7981022.001,2,188,0)
 <div style="page-break-before:always">
"KRN",.84,7981022.001,2,189,0)
  <h2>Medications</h2>
"KRN",.84,7981022.001,2,190,0)
  <xsl:choose>
"KRN",.84,7981022.001,2,191,0)
   <xsl:when test="$D1">
"KRN",.84,7981022.001,2,192,0)
    <xsl:variable name="SORT" select="/REPORT/DRUGS/@SORT"/>
"KRN",.84,7981022.001,2,193,0)
    <xsl:variable name="SORTORD">
"KRN",.84,7981022.001,2,194,0)
     <xsl:choose>
"KRN",.84,7981022.001,2,195,0)
      <xsl:when test="/REPORT/DRUGS/@SORTDESC">descending</xsl:when>
"KRN",.84,7981022.001,2,196,0)
      <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981022.001,2,197,0)
     </xsl:choose>
"KRN",.84,7981022.001,2,198,0)
    </xsl:variable>
"KRN",.84,7981022.001,2,199,0)
    <div>
"KRN",.84,7981022.001,2,200,0)
     <xsl:call-template name="MakeScrollable">
"KRN",.84,7981022.001,2,201,0)
      <xsl:with-param name="condition" select="DRUG[31]"/>
"KRN",.84,7981022.001,2,202,0)
     </xsl:call-template>
"KRN",.84,7981022.001,2,203,0)
     <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981022.001,2,204,0)
      <thead>
"KRN",.84,7981022.001,2,205,0)
       <tr>
"KRN",.84,7981022.001,2,206,0)
        <xsl:call-template name="BasicDAAPatientHeader">
"KRN",.84,7981022.001,2,207,0)
         <xsl:with-param name="tblname" select="'DRUGS'"/>
"KRN",.84,7981022.001,2,208,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,209,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,210,0)
         <xsl:with-param name="colname" select="'DAA_FILL'"/>
"KRN",.84,7981022.001,2,211,0)
         <xsl:with-param name="sort" select="'DRUGS=DAA_FILL'"/>
"KRN",.84,7981022.001,2,212,0)
         <xsl:with-param name="title" select="'DAA Start Date'"/>
"KRN",.84,7981022.001,2,213,0)
         <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,214,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,215,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,216,0)
         <xsl:with-param name="colname" select="'RXNAME'"/>
"KRN",.84,7981022.001,2,217,0)
         <xsl:with-param name="sort" select="'DRUGS=RXNAME'"/>
"KRN",.84,7981022.001,2,218,0)
         <xsl:with-param name="title" select="'Medication Name'"/>
"KRN",.84,7981022.001,2,219,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,220,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,221,0)
         <xsl:with-param name="colname" select="'FILL_DATE'"/>
"KRN",.84,7981022.001,2,222,0)
         <xsl:with-param name="sort" select="'DRUGS=FILL_DATE'"/>
"KRN",.84,7981022.001,2,223,0)
         <xsl:with-param name="title" select="'Fill Date'"/>
"KRN",.84,7981022.001,2,224,0)
         <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981022.001,2,225,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,226,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,227,0)
         <xsl:with-param name="colname" select="'DAYSPLY'"/>
"KRN",.84,7981022.001,2,228,0)
         <xsl:with-param name="sort" select="'DRUGS=DAYSPLY'"/>
"KRN",.84,7981022.001,2,229,0)
         <xsl:with-param name="title" select="'Days Supply'"/>
"KRN",.84,7981022.001,2,230,0)
         <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981022.001,2,231,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,232,0)
       </tr>
"KRN",.84,7981022.001,2,233,0)
      </thead>
"KRN",.84,7981022.001,2,234,0)
      <xsl:call-template name="DataGridFooter">
"KRN",.84,7981022.001,2,235,0)
       <xsl:with-param name="colspan" select="7"/>
"KRN",.84,7981022.001,2,236,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,237,0)
      <tbody>
"KRN",.84,7981022.001,2,238,0)
       <xsl:choose>
"KRN",.84,7981022.001,2,239,0)
        <xsl:when test="$PTSDRUGS">
"KRN",.84,7981022.001,2,240,0)
         <xsl:for-each select="DRUG[generate-id(.)=generate-id(key('patient-drug',@ID))]">
"KRN",.84,7981022.001,2,241,0)
          <xsl:call-template name="DAAPatientDrugData">
"KRN",.84,7981022.001,2,242,0)
           <xsl:with-param name="group" select="key('patient-drug',@ID)"/>
"KRN",.84,7981022.001,2,243,0)
          </xsl:call-template>
"KRN",.84,7981022.001,2,244,0)
         </xsl:for-each>
"KRN",.84,7981022.001,2,245,0)
        </xsl:when>
"KRN",.84,7981022.001,2,246,0)
        <xsl:otherwise> 
"KRN",.84,7981022.001,2,247,0)
         <xsl:for-each select="DRUG">
"KRN",.84,7981022.001,2,248,0)
          <!--xsl:sort select="concat(*[name()=$SORT],'&#10;',NAME)" order="{$SORTORD}"/-->
"KRN",.84,7981022.001,2,249,0)
          <xsl:sort select="concat(NAME,'',RXNAME,'',FILL_DATE)"/>
"KRN",.84,7981022.001,2,250,0)
          <tr>
"KRN",.84,7981022.001,2,251,0)
           <xsl:call-template name="BasicDAAPatientData"/>
"KRN",.84,7981022.001,2,252,0)
           <xsl:call-template name="DAADrugData"/>
"KRN",.84,7981022.001,2,253,0)
          </tr>
"KRN",.84,7981022.001,2,254,0)
         </xsl:for-each>
"KRN",.84,7981022.001,2,255,0)
        </xsl:otherwise>
"KRN",.84,7981022.001,2,256,0)
       </xsl:choose>
"KRN",.84,7981022.001,2,257,0)
      </tbody>
"KRN",.84,7981022.001,2,258,0)
     </table>
"KRN",.84,7981022.001,2,259,0)
    </div>
"KRN",.84,7981022.001,2,260,0)
   </xsl:when>
"KRN",.84,7981022.001,2,261,0)
   <xsl:otherwise>
"KRN",.84,7981022.001,2,262,0)
    <xsl:call-template name="TableNoData"/>
"KRN",.84,7981022.001,2,263,0)
   </xsl:otherwise>
"KRN",.84,7981022.001,2,264,0)
  </xsl:choose>
"KRN",.84,7981022.001,2,265,0)
 </div>
"KRN",.84,7981022.001,2,266,0)
</xsl:template>
"KRN",.84,7981022.001,2,267,0)
 
"KRN",.84,7981022.001,2,268,0)
<xsl:template match="REPORT/LABTESTS">
"KRN",.84,7981022.001,2,269,0)
 <div style="page-break-before:always">
"KRN",.84,7981022.001,2,270,0)
  <h2>Lab Results</h2>
"KRN",.84,7981022.001,2,271,0)
  <xsl:choose>
"KRN",.84,7981022.001,2,272,0)
   <xsl:when test="$L1">
"KRN",.84,7981022.001,2,273,0)
    <xsl:variable name="SORT" select="/REPORT/LABTESTS/@SORT"/>
"KRN",.84,7981022.001,2,274,0)
    <xsl:variable name="SORTORD">
"KRN",.84,7981022.001,2,275,0)
     <xsl:choose>
"KRN",.84,7981022.001,2,276,0)
      <xsl:when test="/REPORT/LABTESTS/@SORTDESC">descending</xsl:when>
"KRN",.84,7981022.001,2,277,0)
      <xsl:otherwise>ascending</xsl:otherwise>
"KRN",.84,7981022.001,2,278,0)
     </xsl:choose>
"KRN",.84,7981022.001,2,279,0)
    </xsl:variable>
"KRN",.84,7981022.001,2,280,0)
    <div>
"KRN",.84,7981022.001,2,281,0)
    <xsl:call-template name="MakeScrollable">
"KRN",.84,7981022.001,2,282,0)
     <xsl:with-param name="condition" select="LT[31]"/>
"KRN",.84,7981022.001,2,283,0)
    </xsl:call-template>
"KRN",.84,7981022.001,2,284,0)
     <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981022.001,2,285,0)
      <thead>
"KRN",.84,7981022.001,2,286,0)
       <tr>
"KRN",.84,7981022.001,2,287,0)
        <xsl:call-template name="BasicDAAPatientHeader">
"KRN",.84,7981022.001,2,288,0)
         <xsl:with-param name="tblname" select="'LABTESTS'"/>
"KRN",.84,7981022.001,2,289,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,290,0)
        <xsl:call-template name="BasicLRHeader">
"KRN",.84,7981022.001,2,291,0)
         <xsl:with-param name="colname" select="'LTNAME'"/>
"KRN",.84,7981022.001,2,292,0)
         <xsl:with-param name="tblname" select="'LABTESTS'"/>
"KRN",.84,7981022.001,2,293,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,294,0)
        <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,295,0)
         <xsl:with-param name="colname" select="'WKS_LAB'"/>
"KRN",.84,7981022.001,2,296,0)
         <xsl:with-param name="sort" select="'LABTESTS=WKS_LAB'"/>
"KRN",.84,7981022.001,2,297,0)
         <xsl:with-param name="title" select="'Weeks Since DAA Start'"/>
"KRN",.84,7981022.001,2,298,0)
         <xsl:with-param name="width" select="'14%'"/>
"KRN",.84,7981022.001,2,299,0)
        </xsl:call-template>
"KRN",.84,7981022.001,2,300,0)
       </tr>
"KRN",.84,7981022.001,2,301,0)
      </thead>
"KRN",.84,7981022.001,2,302,0)
      <xsl:call-template name="DataGridFooter">
"KRN",.84,7981022.001,2,303,0)
       <xsl:with-param name="colspan" select="7"/>
"KRN",.84,7981022.001,2,304,0)
      </xsl:call-template>
"KRN",.84,7981022.001,2,305,0)
      <tbody>
"KRN",.84,7981022.001,2,306,0)
       <xsl:choose>
"KRN",.84,7981022.001,2,307,0)
        <xsl:when test="$PTSLABS">
"KRN",.84,7981022.001,2,308,0)
         <xsl:for-each select="LT[generate-id(.)=generate-id(key('patient-lt',@ID))]">
"KRN",.84,7981022.001,2,309,0)
          <xsl:call-template name="DAAPatientLabData">
"KRN",.84,7981022.001,2,310,0)
           <xsl:with-param name="group" select="key('patient-lt',@ID)"/>
"KRN",.84,7981022.001,2,311,0)
          </xsl:call-template>
"KRN",.84,7981022.001,2,312,0)
         </xsl:for-each>
"KRN",.84,7981022.001,2,313,0)
        </xsl:when>
"KRN",.84,7981022.001,2,314,0)
        <xsl:otherwise>
"KRN",.84,7981022.001,2,315,0)
         <xsl:for-each select="LT">
"KRN",.84,7981022.001,2,316,0)
          <xsl:sort select="concat(./*[name()=$SORT],'&#10;',NAME)" order="{$SORTORD}"/>
"KRN",.84,7981022.001,2,317,0)
          <tr>
"KRN",.84,7981022.001,2,318,0)
           <xsl:call-template name="BasicDAAPatientData"/>
"KRN",.84,7981022.001,2,319,0)
           <xsl:call-template name="BasicLRData">
"KRN",.84,7981022.001,2,320,0)
            <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981022.001,2,321,0)
           </xsl:call-template>
"KRN",.84,7981022.001,2,322,0)
          </tr>
"KRN",.84,7981022.001,2,323,0)
         </xsl:for-each>
"KRN",.84,7981022.001,2,324,0)
        </xsl:otherwise>
"KRN",.84,7981022.001,2,325,0)
       </xsl:choose>
"KRN",.84,7981022.001,2,326,0)
      </tbody>
"KRN",.84,7981022.001,2,327,0)
     </table>
"KRN",.84,7981022.001,2,328,0)
    </div>
"KRN",.84,7981022.001,2,329,0)
   </xsl:when>
"KRN",.84,7981022.001,2,330,0)
   <xsl:otherwise>
"KRN",.84,7981022.001,2,331,0)
    <xsl:call-template name="TableNoData"/>
"KRN",.84,7981022.001,2,332,0)
   </xsl:otherwise>
"KRN",.84,7981022.001,2,333,0)
  </xsl:choose>
"KRN",.84,7981022.001,2,334,0)
 </div>
"KRN",.84,7981022.001,2,335,0)
</xsl:template>
"KRN",.84,7981022.001,2,336,0)
 
"KRN",.84,7981022.001,2,337,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981022.001,2,338,0)
 <div style="page-break-before:always">
"KRN",.84,7981022.001,2,339,0)
  <h2>Patients</h2>
"KRN",.84,7981022.001,2,340,0)
  <xsl:call-template name="DataGrid"/>
"KRN",.84,7981022.001,2,341,0)
 </div>
"KRN",.84,7981022.001,2,342,0)
</xsl:template>
"KRN",.84,7981022.001,2,343,0)
 
"KRN",.84,7981022.001,2,344,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981022.001,2,345,0)
 
"KRN",.84,7981022.001,2,346,0)
<xsl:template name="DAADrugData">
"KRN",.84,7981022.001,2,347,0)
 <xsl:param name="rowspan" select="'1'"/>
"KRN",.84,7981022.001,2,348,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,349,0)
  <xsl:with-param name="value" select="DAA_FILL"/>
"KRN",.84,7981022.001,2,350,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981022.001,2,351,0)
 </xsl:call-template>
"KRN",.84,7981022.001,2,352,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,353,0)
  <xsl:with-param name="value" select="RXNAME"/>
"KRN",.84,7981022.001,2,354,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981022.001,2,355,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,356,0)
 </xsl:call-template>
"KRN",.84,7981022.001,2,357,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,358,0)
  <xsl:with-param name="value" select="FILL_DATE"/>
"KRN",.84,7981022.001,2,359,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981022.001,2,360,0)
 </xsl:call-template>
"KRN",.84,7981022.001,2,361,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,362,0)
  <xsl:with-param name="value" select="DAYSPLY"/>
"KRN",.84,7981022.001,2,363,0)
 </xsl:call-template>
"KRN",.84,7981022.001,2,364,0)
</xsl:template>
"KRN",.84,7981022.001,2,365,0)
 
"KRN",.84,7981022.001,2,366,0)
<xsl:template name="DAAPatientDrugData">
"KRN",.84,7981022.001,2,367,0)
 <xsl:param name="group"/>
"KRN",.84,7981022.001,2,368,0)
 <xsl:param name="number" select="position()"/>
"KRN",.84,7981022.001,2,369,0)
 <xsl:variable name="rowspan" select="count($group)"/>
"KRN",.84,7981022.001,2,370,0)
 <xsl:for-each select="$group">
"KRN",.84,7981022.001,2,371,0)
  <tr>
"KRN",.84,7981022.001,2,372,0)
   <xsl:if test="position()=1">
"KRN",.84,7981022.001,2,373,0)
    <xsl:call-template name="BasicDAAPatientData">
"KRN",.84,7981022.001,2,374,0)
     <xsl:with-param name="number" select="$number"/>
"KRN",.84,7981022.001,2,375,0)
     <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,376,0)
    </xsl:call-template>
"KRN",.84,7981022.001,2,377,0)
   </xsl:if>
"KRN",.84,7981022.001,2,378,0)
   <xsl:call-template name="DAADrugData"/>
"KRN",.84,7981022.001,2,379,0)
  </tr>
"KRN",.84,7981022.001,2,380,0)
 </xsl:for-each>
"KRN",.84,7981022.001,2,381,0)
</xsl:template>
"KRN",.84,7981022.001,2,382,0)
 
"KRN",.84,7981022.001,2,383,0)
<xsl:template name="DAAPatientLabData">
"KRN",.84,7981022.001,2,384,0)
 <xsl:param name="group"/>
"KRN",.84,7981022.001,2,385,0)
 <xsl:param name="number" select="position()"/>
"KRN",.84,7981022.001,2,386,0)
 <xsl:variable name="rowspan" select="count($group)"/>
"KRN",.84,7981022.001,2,387,0)
 <xsl:for-each select="$group">
"KRN",.84,7981022.001,2,388,0)
  <tr>
"KRN",.84,7981022.001,2,389,0)
   <xsl:if test="position()=1">
"KRN",.84,7981022.001,2,390,0)
    <xsl:call-template name="BasicDAAPatientData">
"KRN",.84,7981022.001,2,391,0)
     <xsl:with-param name="number" select="$number"/>
"KRN",.84,7981022.001,2,392,0)
     <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,393,0)
    </xsl:call-template>
"KRN",.84,7981022.001,2,394,0)
   </xsl:if>
"KRN",.84,7981022.001,2,395,0)
   <xsl:call-template name="BasicLRData">
"KRN",.84,7981022.001,2,396,0)
    <xsl:with-param name="name" select="LTNAME"/>
"KRN",.84,7981022.001,2,397,0)
   </xsl:call-template>
"KRN",.84,7981022.001,2,398,0)
  </tr>
"KRN",.84,7981022.001,2,399,0)
 </xsl:for-each>
"KRN",.84,7981022.001,2,400,0)
</xsl:template>
"KRN",.84,7981022.001,2,401,0)
 
"KRN",.84,7981022.001,2,402,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981022.001,2,403,0)
 
"KRN",.84,7981022.001,2,404,0)
<xsl:template match="PARAMETERS/DATE_RANGE_4">
"KRN",.84,7981022.001,2,405,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981022.001,2,406,0)
  <xsl:with-param name="title" select="'DAA Start'"/>
"KRN",.84,7981022.001,2,407,0)
 </xsl:call-template>
"KRN",.84,7981022.001,2,408,0)
 <xsl:if test="../WEEKS_AFTER">
"KRN",.84,7981022.001,2,409,0)
  <tr>
"KRN",.84,7981022.001,2,410,0)
   <th scope="row">DAA Lab Options:&#160;</th>
"KRN",.84,7981022.001,2,411,0)
   <td>
"KRN",.84,7981022.001,2,412,0)
     <xsl:text>Include labs done </xsl:text>
"KRN",.84,7981022.001,2,413,0)
     <xsl:value-of select="../WEEKS_AFTER"/>
"KRN",.84,7981022.001,2,414,0)
     <xsl:text> weeks after the DAA start</xsl:text>
"KRN",.84,7981022.001,2,415,0)
     <xsl:if test="(../WEEKS_AFTER[1]/@MOST_RECENT='1')">
"KRN",.84,7981022.001,2,416,0)
       <br />
"KRN",.84,7981022.001,2,417,0)
       <xsl:text>Include two most recent prior to DAA start date</xsl:text>
"KRN",.84,7981022.001,2,418,0)
     </xsl:if>
"KRN",.84,7981022.001,2,419,0)
   </td>
"KRN",.84,7981022.001,2,420,0)
  </tr>
"KRN",.84,7981022.001,2,421,0)
 </xsl:if>
"KRN",.84,7981022.001,2,422,0)
</xsl:template>
"KRN",.84,7981022.001,2,423,0)
 
"KRN",.84,7981022.001,2,424,0)
<xsl:template name="BasicDAAPatientHeader">
"KRN",.84,7981022.001,2,425,0)
 <xsl:param name="rowspan" select="1"/>
"KRN",.84,7981022.001,2,426,0)
 <xsl:param name="seqnum" select="1"/>
"KRN",.84,7981022.001,2,427,0)
 <xsl:param name="tblname" select="'PATIENTS'"/>
"KRN",.84,7981022.001,2,428,0)
 <xsl:if test="$seqnum">
"KRN",.84,7981022.001,2,429,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,430,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,431,0)
   <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981022.001,2,432,0)
   <xsl:with-param name="title" select="'#'"/>
"KRN",.84,7981022.001,2,433,0)
   <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981022.001,2,434,0)
  </xsl:call-template>
"KRN",.84,7981022.001,2,435,0)
 </xsl:if>
"KRN",.84,7981022.001,2,436,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,437,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,438,0)
  <xsl:with-param name="sort" select="concat($tblname,'=NAME')"/>
"KRN",.84,7981022.001,2,439,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981022.001,2,440,0)
 </xsl:call-template>
"KRN",.84,7981022.001,2,441,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981022.001,2,442,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,443,0)
  <xsl:with-param name="sort" select="concat($tblname,'=LAST4')"/>
"KRN",.84,7981022.001,2,444,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981022.001,2,445,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981022.001,2,446,0)
 </xsl:call-template>
"KRN",.84,7981022.001,2,447,0)
</xsl:template>
"KRN",.84,7981022.001,2,448,0)
 
"KRN",.84,7981022.001,2,449,0)
<xsl:template name="BasicDAAPatientData">
"KRN",.84,7981022.001,2,450,0)
 <xsl:param name="rowspan" select="1"/>
"KRN",.84,7981022.001,2,451,0)
 <xsl:param name="seqnum" select="1"/>
"KRN",.84,7981022.001,2,452,0)
 <xsl:param name="number" select="position()"/>
"KRN",.84,7981022.001,2,453,0)
 <xsl:if test="$seqnum">
"KRN",.84,7981022.001,2,454,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,455,0)
   <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,456,0)
   <xsl:with-param name="value" select="$number"/>
"KRN",.84,7981022.001,2,457,0)
  </xsl:call-template>
"KRN",.84,7981022.001,2,458,0)
 </xsl:if>
"KRN",.84,7981022.001,2,459,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,460,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,461,0)
  <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981022.001,2,462,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981022.001,2,463,0)
 </xsl:call-template>
"KRN",.84,7981022.001,2,464,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981022.001,2,465,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981022.001,2,466,0)
  <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981022.001,2,467,0)
 </xsl:call-template>
"KRN",.84,7981022.001,2,468,0)
</xsl:template>
"KRN",.84,7981022.001,2,469,0)
 
"KRN",.84,7981022.001,2,470,0)
</xsl:stylesheet>
"KRN",.84,7981022.002,-1)
0^12
"KRN",.84,7981022.002,0)
7981022.002^2^^CLINICAL CASE REGISTRIES^DAA Lab Monitoring (CSV)
"KRN",.84,7981022.002,2,0)
^^92^92^3120515^
"KRN",.84,7981022.002,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981022.002,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981022.002,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981022.002,2,4,0)
 
"KRN",.84,7981022.002,2,5,0)
<xsl:import  href="template://report/999/2"/>  <!-- Common   -->
"KRN",.84,7981022.002,2,6,0)
<xsl:include href="template://report/997/2"/>  <!-- Patients -->
"KRN",.84,7981022.002,2,7,0)
 
"KRN",.84,7981022.002,2,8,0)
<xsl:template match="/">
"KRN",.84,7981022.002,2,9,0)
 <xsl:apply-templates select="REPORT/DRUGS"/>
"KRN",.84,7981022.002,2,10,0)
 <xsl:apply-templates select="REPORT/LABTESTS"/>
"KRN",.84,7981022.002,2,11,0)
 <xsl:apply-templates select="REPORT/PATIENTS"/>
"KRN",.84,7981022.002,2,12,0)
</xsl:template>
"KRN",.84,7981022.002,2,13,0)
 
"KRN",.84,7981022.002,2,14,0)
<xsl:template match="REPORT/DRUGS">
"KRN",.84,7981022.002,2,15,0)
 <xsl:text>DAA Lab Monitoring Report (Medications)</xsl:text>
"KRN",.84,7981022.002,2,16,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,17,0)
 <xsl:text>Patient Name,SSN,DAA Start Date,Medication Name,Fill Date,Days Supply</xsl:text>
"KRN",.84,7981022.002,2,18,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,19,0)
 <xsl:for-each select="DRUG">
"KRN",.84,7981022.002,2,20,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,21,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981022.002,2,22,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,23,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,24,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981022.002,2,25,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,26,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,27,0)
   <xsl:with-param name="value" select="DAA_FILL"/>
"KRN",.84,7981022.002,2,28,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981022.002,2,29,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,30,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,31,0)
   <xsl:with-param name="value" select="RXNAME"/>
"KRN",.84,7981022.002,2,32,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,33,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,34,0)
   <xsl:with-param name="value" select="FILL_DATE"/>
"KRN",.84,7981022.002,2,35,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981022.002,2,36,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,37,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,38,0)
   <xsl:with-param name="value" select="DAYSPLY"/>
"KRN",.84,7981022.002,2,39,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,40,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,41,0)
 </xsl:for-each>
"KRN",.84,7981022.002,2,42,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981022.002,2,43,0)
</xsl:template>
"KRN",.84,7981022.002,2,44,0)
 
"KRN",.84,7981022.002,2,45,0)
<xsl:template match="REPORT/LABTESTS">
"KRN",.84,7981022.002,2,46,0)
 <xsl:text>DAA Lab Monitoring Report (Lab Results)</xsl:text>
"KRN",.84,7981022.002,2,47,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,48,0)
 <xsl:text>Patient Name,SSN,Date,Test Name,Result,Weeks Since DAA Start</xsl:text>
"KRN",.84,7981022.002,2,49,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,50,0)
 <xsl:for-each select="LT">
"KRN",.84,7981022.002,2,51,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,52,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981022.002,2,53,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,54,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,55,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981022.002,2,56,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,57,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,58,0)
   <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981022.002,2,59,0)
   <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981022.002,2,60,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,61,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,62,0)
   <xsl:with-param name="value" select="LTNAME"/>
"KRN",.84,7981022.002,2,63,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,64,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,65,0)
   <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981022.002,2,66,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,67,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,68,0)
   <xsl:with-param name="value" select="WKS_LAB"/>
"KRN",.84,7981022.002,2,69,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,70,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,71,0)
 </xsl:for-each>
"KRN",.84,7981022.002,2,72,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981022.002,2,73,0)
</xsl:template>
"KRN",.84,7981022.002,2,74,0)
 
"KRN",.84,7981022.002,2,75,0)
<xsl:template match="REPORT/PATIENTS">
"KRN",.84,7981022.002,2,76,0)
 <xsl:text>DAA Lab Monitoring Report (Patients)</xsl:text>
"KRN",.84,7981022.002,2,77,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,78,0)
 <xsl:text>Patient Name,SSN</xsl:text>
"KRN",.84,7981022.002,2,79,0)
 <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,80,0)
 <xsl:for-each select="PATIENT">
"KRN",.84,7981022.002,2,81,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,82,0)
   <xsl:with-param name="value" select="NAME"/>
"KRN",.84,7981022.002,2,83,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,84,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981022.002,2,85,0)
   <xsl:with-param name="value" select="LAST4"/>
"KRN",.84,7981022.002,2,86,0)
  </xsl:call-template>
"KRN",.84,7981022.002,2,87,0)
  <xsl:value-of select="$CRLF"/>
"KRN",.84,7981022.002,2,88,0)
 </xsl:for-each>
"KRN",.84,7981022.002,2,89,0)
 <xsl:value-of select="$FILESWITCH"/>
"KRN",.84,7981022.002,2,90,0)
</xsl:template>
"KRN",.84,7981022.002,2,91,0)
 
"KRN",.84,7981022.002,2,92,0)
</xsl:stylesheet>
"KRN",.84,7981995.001,-1)
0^9
"KRN",.84,7981995.001,0)
7981995.001^2^^CLINICAL CASE REGISTRIES^Lab data templates (HTML)
"KRN",.84,7981995.001,2,0)
^.844^101^101^3111117^^
"KRN",.84,7981995.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981995.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981995.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981995.001,2,4,0)
>
"KRN",.84,7981995.001,2,5,0)
 
"KRN",.84,7981995.001,2,6,0)
<!--[ UTILITIES ]-->
"KRN",.84,7981995.001,2,7,0)
 
"KRN",.84,7981995.001,2,8,0)
<xsl:template name="BasicLRHeader">
"KRN",.84,7981995.001,2,9,0)
 <xsl:param name="colname" select="'NAME'"/>
"KRN",.84,7981995.001,2,10,0)
 <xsl:param name="group" select="0"/>
"KRN",.84,7981995.001,2,11,0)
 <xsl:param name="tblname" select="'PTLRL'"/>
"KRN",.84,7981995.001,2,12,0)
 <xsl:if test="$group">
"KRN",.84,7981995.001,2,13,0)
  <xsl:call-template name="ColumnHeader">
"KRN",.84,7981995.001,2,14,0)
   <xsl:with-param name="sort" select="concat($tblname,'=GROUP')"/>
"KRN",.84,7981995.001,2,15,0)
   <xsl:with-param name="title" select="'Group'"/>
"KRN",.84,7981995.001,2,16,0)
   <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981995.001,2,17,0)
  </xsl:call-template>
"KRN",.84,7981995.001,2,18,0)
 </xsl:if>
"KRN",.84,7981995.001,2,19,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981995.001,2,20,0)
  <xsl:with-param name="sort" select="concat($tblname,'=DATE')"/>
"KRN",.84,7981995.001,2,21,0)
  <xsl:with-param name="title" select="'Date'"/>    
"KRN",.84,7981995.001,2,22,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981995.001,2,23,0)
 </xsl:call-template>
"KRN",.84,7981995.001,2,24,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981995.001,2,25,0)
  <xsl:with-param name="sort" select="concat($tblname,'=',$colname)"/>
"KRN",.84,7981995.001,2,26,0)
  <xsl:with-param name="title" select="'Test Name'"/>    
"KRN",.84,7981995.001,2,27,0)
 </xsl:call-template>
"KRN",.84,7981995.001,2,28,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981995.001,2,29,0)
  <xsl:with-param name="sort" select="concat($tblname,'=RESULT')"/>
"KRN",.84,7981995.001,2,30,0)
  <xsl:with-param name="title" select="'Result'"/>
"KRN",.84,7981995.001,2,31,0)
  <xsl:with-param name="width" select="'10%'"/>
"KRN",.84,7981995.001,2,32,0)
 </xsl:call-template>
"KRN",.84,7981995.001,2,33,0)
</xsl:template>
"KRN",.84,7981995.001,2,34,0)
 
"KRN",.84,7981995.001,2,35,0)
<xsl:template name="BasicLRData">
"KRN",.84,7981995.001,2,36,0)
 <xsl:param name="group" select="0"/>
"KRN",.84,7981995.001,2,37,0)
 <xsl:param name="name" select="NAME"/>
"KRN",.84,7981995.001,2,38,0)
 <xsl:if test="$group">
"KRN",.84,7981995.001,2,39,0)
  <xsl:call-template name="TableCell">
"KRN",.84,7981995.001,2,40,0)
   <xsl:with-param name="value" select="GROUP"/>
"KRN",.84,7981995.001,2,41,0)
  </xsl:call-template>
"KRN",.84,7981995.001,2,42,0)
 </xsl:if>
"KRN",.84,7981995.001,2,43,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981995.001,2,44,0)
  <xsl:with-param name="value" select="DATE"/>
"KRN",.84,7981995.001,2,45,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981995.001,2,46,0)
 </xsl:call-template>
"KRN",.84,7981995.001,2,47,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981995.001,2,48,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981995.001,2,49,0)
  <xsl:with-param name="value" select="$name"/>
"KRN",.84,7981995.001,2,50,0)
 </xsl:call-template>
"KRN",.84,7981995.001,2,51,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981995.001,2,52,0)
  <xsl:with-param name="value" select="RESULT"/>
"KRN",.84,7981995.001,2,53,0)
 </xsl:call-template>
"KRN",.84,7981995.001,2,54,0)
 <xsl:if test="count(./WKS_LAB)>0">
"KRN",.84,7981995.001,2,55,0)
   <xsl:call-template name="TableCell">
"KRN",.84,7981995.001,2,56,0)
    <xsl:with-param name="value" select="WKS_LAB"/>
"KRN",.84,7981995.001,2,57,0)
   </xsl:call-template>
"KRN",.84,7981995.001,2,58,0)
 </xsl:if>
"KRN",.84,7981995.001,2,59,0)
</xsl:template>
"KRN",.84,7981995.001,2,60,0)
 
"KRN",.84,7981995.001,2,61,0)
<!--[ REPORT PARAMETERS ]-->
"KRN",.84,7981995.001,2,62,0)
 
"KRN",.84,7981995.001,2,63,0)
<xsl:template match="PARAMETERS/LABTESTS">
"KRN",.84,7981995.001,2,64,0)
 <tr>
"KRN",.84,7981995.001,2,65,0)
  <th scope="row">Lab Tests:&#160;</th>
"KRN",.84,7981995.001,2,66,0)
  <td>
"KRN",.84,7981995.001,2,67,0)
   <xsl:if test="@DESCR">
"KRN",.84,7981995.001,2,68,0)
    <xsl:value-of select="@DESCR"/><br/>
"KRN",.84,7981995.001,2,69,0)
   </xsl:if>
"KRN",.84,7981995.001,2,70,0)
   <xsl:if test=".='ALL'">ALL</xsl:if>
"KRN",.84,7981995.001,2,71,0)
   <xsl:apply-templates select="LT[@LOW|@HIGH]">
"KRN",.84,7981995.001,2,72,0)
    <xsl:sort select="."/>
"KRN",.84,7981995.001,2,73,0)
   </xsl:apply-templates>
"KRN",.84,7981995.001,2,74,0)
   <xsl:apply-templates select="LT[not(@LOW|@HIGH)]">
"KRN",.84,7981995.001,2,75,0)
    <xsl:sort select="."/>
"KRN",.84,7981995.001,2,76,0)
   </xsl:apply-templates>
"KRN",.84,7981995.001,2,77,0)
  </td>
"KRN",.84,7981995.001,2,78,0)
 </tr>
"KRN",.84,7981995.001,2,79,0)
</xsl:template>
"KRN",.84,7981995.001,2,80,0)
 
"KRN",.84,7981995.001,2,81,0)
<xsl:template match="PARAMETERS/LABTESTS/LT[@LOW|@HIGH]">
"KRN",.84,7981995.001,2,82,0)
 <xsl:variable name="low" select="@LOW"/>
"KRN",.84,7981995.001,2,83,0)
 <xsl:variable name="high" select="@HIGH"/>
"KRN",.84,7981995.001,2,84,0)
 <xsl:value-of select="."/>
"KRN",.84,7981995.001,2,85,0)
 <xsl:text> - results</xsl:text>
"KRN",.84,7981995.001,2,86,0)
 <xsl:if test="$low">
"KRN",.84,7981995.001,2,87,0)
  <xsl:value-of select="concat(' not less than ',$low)"/>
"KRN",.84,7981995.001,2,88,0)
 </xsl:if>
"KRN",.84,7981995.001,2,89,0)
 <xsl:if test="$high">
"KRN",.84,7981995.001,2,90,0)
  <xsl:if test="$low"> and</xsl:if>
"KRN",.84,7981995.001,2,91,0)
  <xsl:value-of select="concat(' not greater than ',$high)"/>
"KRN",.84,7981995.001,2,92,0)
 </xsl:if>
"KRN",.84,7981995.001,2,93,0)
 <br/>
"KRN",.84,7981995.001,2,94,0)
</xsl:template>
"KRN",.84,7981995.001,2,95,0)
 
"KRN",.84,7981995.001,2,96,0)
<xsl:template match="PARAMETERS/LABTESTS/LT[not(@LOW|@HIGH)]">
"KRN",.84,7981995.001,2,97,0)
 <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981995.001,2,98,0)
 <xsl:value-of select="."/>
"KRN",.84,7981995.001,2,99,0)
</xsl:template>
"KRN",.84,7981995.001,2,100,0)
 
"KRN",.84,7981995.001,2,101,0)
</xsl:stylesheet>
"KRN",.84,7981998.001,-1)
0^2
"KRN",.84,7981998.001,0)
7981998.001^2^^CLINICAL CASE REGISTRIES^CSS and Scripts
"KRN",.84,7981998.001,2,0)
^^150^150^3111101^
"KRN",.84,7981998.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981998.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981998.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
"KRN",.84,7981998.001,2,4,0)
>
"KRN",.84,7981998.001,2,5,0)
<!-- Styles (998.1) -->
"KRN",.84,7981998.001,2,6,0)
 
"KRN",.84,7981998.001,2,7,0)
<xsl:template name="StyleSheet">
"KRN",.84,7981998.001,2,8,0)
 
"KRN",.84,7981998.001,2,9,0)
 <script type="text/javascript">
"KRN",.84,7981998.001,2,10,0)
  function windowHeight()
"KRN",.84,7981998.001,2,11,0)
  {
"KRN",.84,7981998.001,2,12,0)
   var wh = 600;
"KRN",.84,7981998.001,2,13,0)
   if (parseInt(navigator.appVersion)>3) {
"KRN",.84,7981998.001,2,14,0)
    if (navigator.appName=="Netscape") {
"KRN",.84,7981998.001,2,15,0)
     wh = window.innerHeight; 
"KRN",.84,7981998.001,2,16,0)
    } 
"KRN",.84,7981998.001,2,17,0)
    if (navigator.appName.indexOf("Microsoft")!=-1) {
"KRN",.84,7981998.001,2,18,0)
     wh = document.body.offsetHeight;
"KRN",.84,7981998.001,2,19,0)
    }
"KRN",.84,7981998.001,2,20,0)
   }
"KRN",.84,7981998.001,2,21,0)
   return wh;
"KRN",.84,7981998.001,2,22,0)
  }
"KRN",.84,7981998.001,2,23,0)
 </script>
"KRN",.84,7981998.001,2,24,0)
 
"KRN",.84,7981998.001,2,25,0)
 <style type="text/css">  /* Default Style Sheet */
"KRN",.84,7981998.001,2,26,0)
 
"KRN",.84,7981998.001,2,27,0)
  body  { text-align: center }
"KRN",.84,7981998.001,2,28,0)
  table { border: 1px solid gray }
"KRN",.84,7981998.001,2,29,0)
  th    { border: 1px solid gray }
"KRN",.84,7981998.001,2,30,0)
  thead { background-color: #E0E0E0 }
"KRN",.84,7981998.001,2,31,0)
  tfoot { background-color: #E0E0E0; font-size: 0px; }
"KRN",.84,7981998.001,2,32,0)
 
"KRN",.84,7981998.001,2,33,0)
  td {
"KRN",.84,7981998.001,2,34,0)
   border: 1px solid gray;
"KRN",.84,7981998.001,2,35,0)
   text-align: center;
"KRN",.84,7981998.001,2,36,0)
   vertical-align: middle;
"KRN",.84,7981998.001,2,37,0)
  }
"KRN",.84,7981998.001,2,38,0)
 
"KRN",.84,7981998.001,2,39,0)
  table caption     { text-align: left; font-weight: bold; } 
"KRN",.84,7981998.001,2,40,0)
  table td.aBottom  { vertical-align: text-bottom }
"KRN",.84,7981998.001,2,41,0)
  table td.aLeft    { text-align: left }
"KRN",.84,7981998.001,2,42,0)
  table td.aRight   { text-align: right } 
"KRN",.84,7981998.001,2,43,0)
  table td.aTopLeft { vertical-align: top; text-align: left }
"KRN",.84,7981998.001,2,44,0)
  table td.aTop     { vertical-align: top }
"KRN",.84,7981998.001,2,45,0)
  table td.selectionRules { text-align: left; white-space: nowrap }
"KRN",.84,7981998.001,2,46,0)
 
"KRN",.84,7981998.001,2,47,0)
  div.reportHeader {
"KRN",.84,7981998.001,2,48,0)
   clear: both;
"KRN",.84,7981998.001,2,49,0)
   width: 100%;
"KRN",.84,7981998.001,2,50,0)
   margin-bottom: 1%;
"KRN",.84,7981998.001,2,51,0)
  }
"KRN",.84,7981998.001,2,52,0)
 
"KRN",.84,7981998.001,2,53,0)
  div.reportHeader table { border: 0 }
"KRN",.84,7981998.001,2,54,0)
  div.reportHeader th { width: 11em }
"KRN",.84,7981998.001,2,55,0)
 
"KRN",.84,7981998.001,2,56,0)
  div.reportHeader td, div.reportHeader th {
"KRN",.84,7981998.001,2,57,0)
   border: 0;
"KRN",.84,7981998.001,2,58,0)
   text-align: left;
"KRN",.84,7981998.001,2,59,0)
   vertical-align:text-top;
"KRN",.84,7981998.001,2,60,0)
  }
"KRN",.84,7981998.001,2,61,0)
 
"KRN",.84,7981998.001,2,62,0)
  div.simpleContainer {
"KRN",.84,7981998.001,2,63,0)
   width:  100%;
"KRN",.84,7981998.001,2,64,0)
   border-top:    1px solid gray;
"KRN",.84,7981998.001,2,65,0)
   border-bottom: 1px solid gray;
"KRN",.84,7981998.001,2,66,0)
   clear: both;
"KRN",.84,7981998.001,2,67,0)
   overflow: visible;
"KRN",.84,7981998.001,2,68,0)
  }
"KRN",.84,7981998.001,2,69,0)
 
"KRN",.84,7981998.001,2,70,0)
  div.scrollableContainer {
"KRN",.84,7981998.001,2,71,0)
   width:  100%;
"KRN",.84,7981998.001,2,72,0)
   height: expression(windowHeight()-200);
"KRN",.84,7981998.001,2,73,0)
   border-top:    1px solid gray;
"KRN",.84,7981998.001,2,74,0)
   border-bottom: 1px solid gray;
"KRN",.84,7981998.001,2,75,0)
   clear: both;
"KRN",.84,7981998.001,2,76,0)
   overflow: auto;
"KRN",.84,7981998.001,2,77,0)
 
"KRN",.84,7981998.001,2,78,0)
   /* Non-standard (IE 5.5+ only) */
"KRN",.84,7981998.001,2,79,0)
   scrollbar-3dlight-color:    #606060;
"KRN",.84,7981998.001,2,80,0)
   scrollbar-arrow-color:      #000000;
"KRN",.84,7981998.001,2,81,0)
   scrollbar-base-color:       #C0C0C0;
"KRN",.84,7981998.001,2,82,0)
   scrollbar-darkshadow-color: #C0C0C0;
"KRN",.84,7981998.001,2,83,0)
   scrollbar-face-color:       #C0C0C0;
"KRN",.84,7981998.001,2,84,0)
   scrollbar-highlight-color:  #C0C0C0;
"KRN",.84,7981998.001,2,85,0)
   scrollbar-shadow-color:     #606060;
"KRN",.84,7981998.001,2,86,0)
  }
"KRN",.84,7981998.001,2,87,0)
 
"KRN",.84,7981998.001,2,88,0)
  table.dataGrid {
"KRN",.84,7981998.001,2,89,0)
   width: 100%;
"KRN",.84,7981998.001,2,90,0)
   border-top:    0px;
"KRN",.84,7981998.001,2,91,0)
   border-bottom: 0px;
"KRN",.84,7981998.001,2,92,0)
  }
"KRN",.84,7981998.001,2,93,0)
 
"KRN",.84,7981998.001,2,94,0)
  /* Fixes the table header in place */
"KRN",.84,7981998.001,2,95,0)
  table.dataGrid thead th, table.dataGrid thead td {
"KRN",.84,7981998.001,2,96,0)
   position: relative;
"KRN",.84,7981998.001,2,97,0)
   top: expression(parentNode.parentNode.parentNode.parentNode.scrollTop);
"KRN",.84,7981998.001,2,98,0)
  }
"KRN",.84,7981998.001,2,99,0)
 
"KRN",.84,7981998.001,2,100,0)
  table.dataGrid td { vertical-align: top }
"KRN",.84,7981998.001,2,101,0)
  table.dataGrid tfoot td { border-top: 0 }
"KRN",.84,7981998.001,2,102,0)
 
"KRN",.84,7981998.001,2,103,0)
  div.reportSummary {
"KRN",.84,7981998.001,2,104,0)
   clear: both;
"KRN",.84,7981998.001,2,105,0)
   width: 100%;
"KRN",.84,7981998.001,2,106,0)
   page-break-before: always;
"KRN",.84,7981998.001,2,107,0)
  }
"KRN",.84,7981998.001,2,108,0)
 
"KRN",.84,7981998.001,2,109,0)
  div.reportSummary table {
"KRN",.84,7981998.001,2,110,0)
   margin-top: 1ex;
"KRN",.84,7981998.001,2,111,0)
   width: 100%;
"KRN",.84,7981998.001,2,112,0)
  }
"KRN",.84,7981998.001,2,113,0)
 
"KRN",.84,7981998.001,2,114,0)
  /*--- Mozilla (Netscape) specific ---*/
"KRN",.84,7981998.001,2,115,0)
 
"KRN",.84,7981998.001,2,116,0)
  /* Any tbody which is a child of table element */
"KRN",.84,7981998.001,2,117,0)
  table.dataGrid > tbody {
"KRN",.84,7981998.001,2,118,0)
   overflow: auto;
"KRN",.84,7981998.001,2,119,0)
   height: 70%;
"KRN",.84,7981998.001,2,120,0)
  }
"KRN",.84,7981998.001,2,121,0)
 
"KRN",.84,7981998.001,2,122,0)
  /* Prevent scrollbar from hiding cell content */
"KRN",.84,7981998.001,2,123,0)
  td:last-child { padding-right: 18px; }
"KRN",.84,7981998.001,2,124,0)
 
"KRN",.84,7981998.001,2,125,0)
 </style>
"KRN",.84,7981998.001,2,126,0)
 
"KRN",.84,7981998.001,2,127,0)
 <style type="text/css" media="print">  /* Print Style Sheet */
"KRN",.84,7981998.001,2,128,0)
 
"KRN",.84,7981998.001,2,129,0)
  div.scrollableContainer {
"KRN",.84,7981998.001,2,130,0)
   overflow: visible;
"KRN",.84,7981998.001,2,131,0)
   border: 0px;
"KRN",.84,7981998.001,2,132,0)
  }
"KRN",.84,7981998.001,2,133,0)
 
"KRN",.84,7981998.001,2,134,0)
  a { text-decoration: none; color: black }
"KRN",.84,7981998.001,2,135,0)
  table.dataGrid { border: solid gray 1px }
"KRN",.84,7981998.001,2,136,0)
  tfoot { display: table-footer-group }
"KRN",.84,7981998.001,2,137,0)
  thead { display: table-header-group }
"KRN",.84,7981998.001,2,138,0)
 
"KRN",.84,7981998.001,2,139,0)
  table.dataGrid thead th, table.dataGrid thead td {
"KRN",.84,7981998.001,2,140,0)
   position: static;
"KRN",.84,7981998.001,2,141,0)
  }
"KRN",.84,7981998.001,2,142,0)
 
"KRN",.84,7981998.001,2,143,0)
  /*--- Mozilla (Netscape) specific ---*/
"KRN",.84,7981998.001,2,144,0)
  table.dataGrid > tbody { overflow: visible }
"KRN",.84,7981998.001,2,145,0)
 
"KRN",.84,7981998.001,2,146,0)
 </style>
"KRN",.84,7981998.001,2,147,0)
 
"KRN",.84,7981998.001,2,148,0)
</xsl:template>
"KRN",.84,7981998.001,2,149,0)
 
"KRN",.84,7981998.001,2,150,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,-1)
0^3
"KRN",.84,7981999.001,0)
7981999.001^2^^CLINICAL CASE REGISTRIES^Common XSL templates (HTML)
"KRN",.84,7981999.001,2,0)
^^835^835^3120105^
"KRN",.84,7981999.001,2,1,0)
<?xml version="1.0"?>
"KRN",.84,7981999.001,2,2,0)
<xsl:stylesheet version="1.0"
"KRN",.84,7981999.001,2,3,0)
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
"KRN",.84,7981999.001,2,4,0)
 
"KRN",.84,7981999.001,2,5,0)
<!-- Common (999.1) -->
"KRN",.84,7981999.001,2,6,0)
 
"KRN",.84,7981999.001,2,7,0)
<xsl:param name="REMOVE_URLS"/>
"KRN",.84,7981999.001,2,8,0)
 
"KRN",.84,7981999.001,2,9,0)
<xsl:output method="html" indent="yes" encoding="iso-8859-1"/>
"KRN",.84,7981999.001,2,10,0)
<xsl:strip-space elements="*"/>
"KRN",.84,7981999.001,2,11,0)
 
"KRN",.84,7981999.001,2,12,0)
<xsl:template match="REPORT/HEADER//*"></xsl:template>
"KRN",.84,7981999.001,2,13,0)
<xsl:template match="REPORT/PARAMETERS//*"></xsl:template>
"KRN",.84,7981999.001,2,14,0)
 
"KRN",.84,7981999.001,2,15,0)
<xsl:key name="TableDefs" match="/REPORT/HEADER/TBLDEF" use="@NAME"/>
"KRN",.84,7981999.001,2,16,0)
 
"KRN",.84,7981999.001,2,17,0)
<!--
"KRN",.84,7981999.001,2,18,0)
=========================================================================
"KRN",.84,7981999.001,2,19,0)
                                UTILITIES
"KRN",.84,7981999.001,2,20,0)
=========================================================================
"KRN",.84,7981999.001,2,21,0)
-->
"KRN",.84,7981999.001,2,22,0)
 
"KRN",.84,7981999.001,2,23,0)
<!-- Formats the value of table cell -->
"KRN",.84,7981999.001,2,24,0)
 
"KRN",.84,7981999.001,2,25,0)
<xsl:template name="CellValue">
"KRN",.84,7981999.001,2,26,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,27,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,28,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,29,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,30,0)
  <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,31,0)
  <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,32,0)
   <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,33,0)
    <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,34,0)
   </xsl:call-template>
"KRN",.84,7981999.001,2,35,0)
  </xsl:when>
"KRN",.84,7981999.001,2,36,0)
  <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,37,0)
   <xsl:choose>
"KRN",.84,7981999.001,2,38,0)
    <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,39,0)
    <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,40,0)
   </xsl:choose>
"KRN",.84,7981999.001,2,41,0)
  </xsl:when>
"KRN",.84,7981999.001,2,42,0)
  <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,43,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,44,0)
</xsl:template>
"KRN",.84,7981999.001,2,45,0)
 
"KRN",.84,7981999.001,2,46,0)
<!-- Converts the FileMan date/time in printable format -->
"KRN",.84,7981999.001,2,47,0)
 
"KRN",.84,7981999.001,2,48,0)
<xsl:template name="DateTime">
"KRN",.84,7981999.001,2,49,0)
 <xsl:param name="dt" select="."/>
"KRN",.84,7981999.001,2,50,0)
 <!--
"KRN",.84,7981999.001,2,51,0)
     Date (YYYMMDD)
"KRN",.84,7981999.001,2,52,0)
 -->
"KRN",.84,7981999.001,2,53,0)
 <xsl:variable name="date"
"KRN",.84,7981999.001,2,54,0)
               select="substring-before(concat($dt,'.'),'.')"/>
"KRN",.84,7981999.001,2,55,0)
 <xsl:if test="$date!=''">
"KRN",.84,7981999.001,2,56,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,57,0)
   <xsl:when test="string-length($date)=7">
"KRN",.84,7981999.001,2,58,0)
    <xsl:variable name="year"
"KRN",.84,7981999.001,2,59,0)
                  select="string(number(substring($date,1,3))+1700)"/>
"KRN",.84,7981999.001,2,60,0)
    <xsl:variable name="month" select="substring($date,4,2)"/>
"KRN",.84,7981999.001,2,61,0)
    <xsl:variable name="day" select="substring($date,6,2)"/>
"KRN",.84,7981999.001,2,62,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,63,0)
     <xsl:when test="$day!='00'">
"KRN",.84,7981999.001,2,64,0)
      <xsl:value-of select="concat($month,'/',$day,'/',$year)"/>
"KRN",.84,7981999.001,2,65,0)
     </xsl:when>
"KRN",.84,7981999.001,2,66,0)
     <xsl:when test="$month!='00'">
"KRN",.84,7981999.001,2,67,0)
      <xsl:value-of select="concat($month,'/',$year)"/>
"KRN",.84,7981999.001,2,68,0)
     </xsl:when>
"KRN",.84,7981999.001,2,69,0)
     <xsl:otherwise><xsl:value-of select="$year"/></xsl:otherwise>
"KRN",.84,7981999.001,2,70,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,71,0)
   </xsl:when>
"KRN",.84,7981999.001,2,72,0)
   <xsl:otherwise>{error}</xsl:otherwise>
"KRN",.84,7981999.001,2,73,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,74,0)
  <!--
"KRN",.84,7981999.001,2,75,0)
      Time (HHMMSS)
"KRN",.84,7981999.001,2,76,0)
  -->
"KRN",.84,7981999.001,2,77,0)
  <xsl:variable name="time"
"KRN",.84,7981999.001,2,78,0)
                select="concat(substring-after($dt,'.'),'000000')"/>
"KRN",.84,7981999.001,2,79,0)
  <xsl:if test="number($time)>0">
"KRN",.84,7981999.001,2,80,0)
   <xsl:text>@</xsl:text>
"KRN",.84,7981999.001,2,81,0)
   <xsl:value-of select="substring($time,1,2)"/>
"KRN",.84,7981999.001,2,82,0)
   <xsl:text>:</xsl:text>
"KRN",.84,7981999.001,2,83,0)
   <xsl:value-of select="substring($time,3,2)"/>
"KRN",.84,7981999.001,2,84,0)
  </xsl:if>
"KRN",.84,7981999.001,2,85,0)
 </xsl:if>
"KRN",.84,7981999.001,2,86,0)
</xsl:template>
"KRN",.84,7981999.001,2,87,0)
 
"KRN",.84,7981999.001,2,88,0)
<xsl:template name="HUPatientsHeader">
"KRN",.84,7981999.001,2,89,0)
 <xsl:value-of select="/REPORT/PARAMETERS/MAXUTNUM"/>
"KRN",.84,7981999.001,2,90,0)
 <xsl:text> patient(s) with highest utilization</xsl:text>
"KRN",.84,7981999.001,2,91,0)
</xsl:template>
"KRN",.84,7981999.001,2,92,0)
 
"KRN",.84,7981999.001,2,93,0)
<!-- Conditional hyperlink -->
"KRN",.84,7981999.001,2,94,0)
 
"KRN",.84,7981999.001,2,95,0)
<xsl:template name="HyperLink">
"KRN",.84,7981999.001,2,96,0)
 <xsl:param name="href" select="''"/>
"KRN",.84,7981999.001,2,97,0)
 <xsl:param name="keep" select="0"/>
"KRN",.84,7981999.001,2,98,0)
 <xsl:param name="name" select="''"/>
"KRN",.84,7981999.001,2,99,0)
 <xsl:param name="text" select="."/>
"KRN",.84,7981999.001,2,100,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,101,0)
  <xsl:when test="$text=''"><xsl:text>&#160;</xsl:text></xsl:when>
"KRN",.84,7981999.001,2,102,0)
  <xsl:when test="boolean($keep) or not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,103,0)
   <a>
"KRN",.84,7981999.001,2,104,0)
    <xsl:if test="$name!=''">
"KRN",.84,7981999.001,2,105,0)
     <xsl:attribute name="name">
"KRN",.84,7981999.001,2,106,0)
      <xsl:value-of select="$name"/>
"KRN",.84,7981999.001,2,107,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,108,0)
    </xsl:if>
"KRN",.84,7981999.001,2,109,0)
    <xsl:if test="$href!=''">
"KRN",.84,7981999.001,2,110,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,111,0)
      <xsl:value-of select="$href"/>
"KRN",.84,7981999.001,2,112,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,113,0)
    </xsl:if>
"KRN",.84,7981999.001,2,114,0)
    <xsl:value-of select="$text"/>
"KRN",.84,7981999.001,2,115,0)
   </a>
"KRN",.84,7981999.001,2,116,0)
  </xsl:when>
"KRN",.84,7981999.001,2,117,0)
  <xsl:otherwise><xsl:value-of select="$text"/></xsl:otherwise>
"KRN",.84,7981999.001,2,118,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,119,0)
</xsl:template>
"KRN",.84,7981999.001,2,120,0)
 
"KRN",.84,7981999.001,2,121,0)
<!-- Makes the parent container scrollable -->
"KRN",.84,7981999.001,2,122,0)
 
"KRN",.84,7981999.001,2,123,0)
<xsl:template name="MakeScrollable">
"KRN",.84,7981999.001,2,124,0)
 <xsl:param name="condition" select="0"/>
"KRN",.84,7981999.001,2,125,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,126,0)
  <xsl:when test="$condition">
"KRN",.84,7981999.001,2,127,0)
   <xsl:attribute name="class">scrollableContainer</xsl:attribute>
"KRN",.84,7981999.001,2,128,0)
  </xsl:when>
"KRN",.84,7981999.001,2,129,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,130,0)
   <xsl:attribute name="class">simpleContainer</xsl:attribute>
"KRN",.84,7981999.001,2,131,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,132,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,133,0)
</xsl:template>
"KRN",.84,7981999.001,2,134,0)
 
"KRN",.84,7981999.001,2,135,0)
<!-- Outputs content of the multivalued report parameter -->
"KRN",.84,7981999.001,2,136,0)
 
"KRN",.84,7981999.001,2,137,0)
<xsl:template name="ParamsList">
"KRN",.84,7981999.001,2,138,0)
 <xsl:param name="heading"/>
"KRN",.84,7981999.001,2,139,0)
 <xsl:param name="list" select="."/>
"KRN",.84,7981999.001,2,140,0)
 <tr>
"KRN",.84,7981999.001,2,141,0)
  <th scope="row">
"KRN",.84,7981999.001,2,142,0)
   <xsl:value-of select="concat($heading,':&#160;')"/>
"KRN",.84,7981999.001,2,143,0)
  </th>
"KRN",.84,7981999.001,2,144,0)
  <td>
"KRN",.84,7981999.001,2,145,0)
   <xsl:if test="$list/@DESCR">
"KRN",.84,7981999.001,2,146,0)
    <xsl:value-of select="$list/@DESCR"/><br/>
"KRN",.84,7981999.001,2,147,0)
   </xsl:if>
"KRN",.84,7981999.001,2,148,0)
   <xsl:if test="$list='ALL'">ALL</xsl:if>
"KRN",.84,7981999.001,2,149,0)
   <xsl:for-each select="$list/*">
"KRN",.84,7981999.001,2,150,0)
    <xsl:sort select="."/>
"KRN",.84,7981999.001,2,151,0)
    <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,152,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,153,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,154,0)
  </td>
"KRN",.84,7981999.001,2,155,0)
 </tr>
"KRN",.84,7981999.001,2,156,0)
</xsl:template>
"KRN",.84,7981999.001,2,157,0)
 
"KRN",.84,7981999.001,2,158,0)
<!--
"KRN",.84,7981999.001,2,159,0)
Special processing for multivalued local fields to handle 
"KRN",.84,7981999.001,2,160,0)
pseudo local field  in the HIV_DX tag.
"KRN",.84,7981999.001,2,161,0)
-->
"KRN",.84,7981999.001,2,162,0)
 
"KRN",.84,7981999.001,2,163,0)
<xsl:template name="LocalList">
"KRN",.84,7981999.001,2,164,0)
 <xsl:param name="firstitem"/>
"KRN",.84,7981999.001,2,165,0)
 <xsl:param name="list" select="."/>
"KRN",.84,7981999.001,2,166,0)
 <tr>
"KRN",.84,7981999.001,2,167,0)
  <th scope="row">
"KRN",.84,7981999.001,2,168,0)
   <xsl:text>Local Fields:&#160;</xsl:text>
"KRN",.84,7981999.001,2,169,0)
  </th>
"KRN",.84,7981999.001,2,170,0)
  <td>
"KRN",.84,7981999.001,2,171,0)
   <xsl:if test="$firstitem!=''">
"KRN",.84,7981999.001,2,172,0)
    <xsl:text>Diagnosed at this VA (</xsl:text>
"KRN",.84,7981999.001,2,173,0)
    <xsl:value-of select="$firstitem"/>
"KRN",.84,7981999.001,2,174,0)
    <xsl:text>); </xsl:text>
"KRN",.84,7981999.001,2,175,0)
   </xsl:if>
"KRN",.84,7981999.001,2,176,0)
   <xsl:for-each select="$list/*">
"KRN",.84,7981999.001,2,177,0)
    <xsl:sort select="."/>
"KRN",.84,7981999.001,2,178,0)
    <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,179,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,180,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,181,0)
  </td>
"KRN",.84,7981999.001,2,182,0)
 </tr>
"KRN",.84,7981999.001,2,183,0)
</xsl:template>
"KRN",.84,7981999.001,2,184,0)
 
"KRN",.84,7981999.001,2,185,0)
 
"KRN",.84,7981999.001,2,186,0)
<!-- Outputs singular or plural form of the word -->
"KRN",.84,7981999.001,2,187,0)
 
"KRN",.84,7981999.001,2,188,0)
<xsl:template name="Plural">
"KRN",.84,7981999.001,2,189,0)
 <xsl:param name="qnty" select="0"/>
"KRN",.84,7981999.001,2,190,0)
 <xsl:param name="sq" select="0"/>
"KRN",.84,7981999.001,2,191,0)
 <xsl:param name="word" select="."/>
"KRN",.84,7981999.001,2,192,0)
 <xsl:if test="$sq=0">
"KRN",.84,7981999.001,2,193,0)
  <xsl:value-of select="$qnty"/><xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,194,0)
 </xsl:if>
"KRN",.84,7981999.001,2,195,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,196,0)
  <xsl:when test="$qnty=1">
"KRN",.84,7981999.001,2,197,0)
   <xsl:value-of select="substring-before($word,'^')"/>
"KRN",.84,7981999.001,2,198,0)
  </xsl:when>
"KRN",.84,7981999.001,2,199,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,200,0)
   <xsl:value-of select="substring-after($word,'^')"/>
"KRN",.84,7981999.001,2,201,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,202,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,203,0)
</xsl:template>
"KRN",.84,7981999.001,2,204,0)
 
"KRN",.84,7981999.001,2,205,0)
<!-- Formats basic information about the report -->
"KRN",.84,7981999.001,2,206,0)
 
"KRN",.84,7981999.001,2,207,0)
<xsl:template name="ReportInfo">
"KRN",.84,7981999.001,2,208,0)
 <xsl:variable name="HDR" select="/REPORT/HEADER"/>
"KRN",.84,7981999.001,2,209,0)
 <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,210,0)
  <tr>
"KRN",.84,7981999.001,2,211,0)
   <th scope="row">Report&#160;Created:&#160;</th>
"KRN",.84,7981999.001,2,212,0)
   <td>
"KRN",.84,7981999.001,2,213,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,214,0)
     <xsl:with-param name="dt" select="$HDR/DATE"/>
"KRN",.84,7981999.001,2,215,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,216,0)
   </td>
"KRN",.84,7981999.001,2,217,0)
  </tr>
"KRN",.84,7981999.001,2,218,0)
  <tr>
"KRN",.84,7981999.001,2,219,0)
   <th scope="row">Task&#160;Number:&#160;</th>
"KRN",.84,7981999.001,2,220,0)
   <td>
"KRN",.84,7981999.001,2,221,0)
    <xsl:call-template name="CellValue">
"KRN",.84,7981999.001,2,222,0)
     <xsl:with-param name="value" select="$HDR/TASK_NUMBER"/>
"KRN",.84,7981999.001,2,223,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,224,0)
   </td>
"KRN",.84,7981999.001,2,225,0)
  </tr>
"KRN",.84,7981999.001,2,226,0)
  <tr>
"KRN",.84,7981999.001,2,227,0)
   <th scope="row">Last&#160;Registry&#160;Update:&#160;</th>
"KRN",.84,7981999.001,2,228,0)
   <td>
"KRN",.84,7981999.001,2,229,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,230,0)
     <xsl:with-param name="dt" select="$HDR/UPDATED_UNTIL"/>
"KRN",.84,7981999.001,2,231,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,232,0)
   </td>
"KRN",.84,7981999.001,2,233,0)
  </tr>
"KRN",.84,7981999.001,2,234,0)
  <tr>
"KRN",.84,7981999.001,2,235,0)
   <th scope="row">Last&#160;Data&#160;Extraction:&#160;</th>
"KRN",.84,7981999.001,2,236,0)
   <td>
"KRN",.84,7981999.001,2,237,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,238,0)
     <xsl:with-param name="dt" select="$HDR/EXTRACTED_UNTIL"/>
"KRN",.84,7981999.001,2,239,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,240,0)
   </td>
"KRN",.84,7981999.001,2,241,0)
  </tr>
"KRN",.84,7981999.001,2,242,0)
 </table>
"KRN",.84,7981999.001,2,243,0)
</xsl:template>
"KRN",.84,7981999.001,2,244,0)
 
"KRN",.84,7981999.001,2,245,0)
<!-- Default report summary -->
"KRN",.84,7981999.001,2,246,0)
 
"KRN",.84,7981999.001,2,247,0)
<xsl:template name="ReportSummary">
"KRN",.84,7981999.001,2,248,0)
 <xsl:variable name="SUMMARY" select="/REPORT/SUMMARY"/>
"KRN",.84,7981999.001,2,249,0)
 <xsl:if test="$SUMMARY/*[1]">
"KRN",.84,7981999.001,2,250,0)
  <div class="reportSummary">
"KRN",.84,7981999.001,2,251,0)
   <xsl:apply-templates select="$SUMMARY"/>
"KRN",.84,7981999.001,2,252,0)
  </div>
"KRN",.84,7981999.001,2,253,0)
 </xsl:if>
"KRN",.84,7981999.001,2,254,0)
</xsl:template>
"KRN",.84,7981999.001,2,255,0)
 
"KRN",.84,7981999.001,2,256,0)
<!-- Indicator of an empty table -->
"KRN",.84,7981999.001,2,257,0)
 
"KRN",.84,7981999.001,2,258,0)
<xsl:template name="TableNoData">
"KRN",.84,7981999.001,2,259,0)
 <table width="100%" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,260,0)
   <tr><td>No data has been found.</td></tr>
"KRN",.84,7981999.001,2,261,0)
 </table>
"KRN",.84,7981999.001,2,262,0)
</xsl:template>
"KRN",.84,7981999.001,2,263,0)
 
"KRN",.84,7981999.001,2,264,0)
<!--
"KRN",.84,7981999.001,2,265,0)
=========================================================================
"KRN",.84,7981999.001,2,266,0)
                              REPORT HEADER
"KRN",.84,7981999.001,2,267,0)
=========================================================================
"KRN",.84,7981999.001,2,268,0)
-->
"KRN",.84,7981999.001,2,269,0)
 
"KRN",.84,7981999.001,2,270,0)
<xsl:template name="ReportHeader">
"KRN",.84,7981999.001,2,271,0)
 <xsl:variable name="mvplist" select="/REPORT/PARAMETERS/*[*[1]]"/>
"KRN",.84,7981999.001,2,272,0)
 <xsl:variable name="notecnt" select="count(/REPORT/HEADER/NOTES/*)"/>
"KRN",.84,7981999.001,2,273,0)
 <div class="reportHeader">
"KRN",.84,7981999.001,2,274,0)
  <table width="100%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,275,0)
   <tr>
"KRN",.84,7981999.001,2,276,0)
    <td style="text-align:left">
"KRN",.84,7981999.001,2,277,0)
     <table cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,278,0)
      <xsl:apply-templates select="/REPORT/PARAMETERS/*[not(*[1])]"/>
"KRN",.84,7981999.001,2,279,0)
     </table>
"KRN",.84,7981999.001,2,280,0)
    </td>
"KRN",.84,7981999.001,2,281,0)
    <td style="text-align:right; padding-left:3%; width:10%">
"KRN",.84,7981999.001,2,282,0)
     <xsl:call-template name="ReportInfo"/>
"KRN",.84,7981999.001,2,283,0)
    </td>
"KRN",.84,7981999.001,2,284,0)
   </tr>
"KRN",.84,7981999.001,2,285,0)
  </table>
"KRN",.84,7981999.001,2,286,0)
  <xsl:if test="$mvplist[1]">
"KRN",.84,7981999.001,2,287,0)
   <table style="width:100%; margin-top:1%" cellpadding="0" cellspacing="0">
"KRN",.84,7981999.001,2,288,0)
    <xsl:apply-templates select="$mvplist"/>
"KRN",.84,7981999.001,2,289,0)
   </table>
"KRN",.84,7981999.001,2,290,0)
  </xsl:if>
"KRN",.84,7981999.001,2,291,0)
  <xsl:if test="/REPORT//PATIENT[1]">
"KRN",.84,7981999.001,2,292,0)
   <div style="margin:10; color: red; font-weight: bold">
"KRN",.84,7981999.001,2,293,0)
    This report contains confidential patient information and must be
"KRN",.84,7981999.001,2,294,0)
    handled in accordance with established policies.
"KRN",.84,7981999.001,2,295,0)
   </div>
"KRN",.84,7981999.001,2,296,0)
  </xsl:if>
"KRN",.84,7981999.001,2,297,0)
  <xsl:if test="$notecnt>0">
"KRN",.84,7981999.001,2,298,0)
   <dl style="text-align:left">
"KRN",.84,7981999.001,2,299,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,300,0)
     <xsl:when test="$notecnt>1">
"KRN",.84,7981999.001,2,301,0)
      <xsl:for-each select="/REPORT/HEADER/NOTES/*">
"KRN",.84,7981999.001,2,302,0)
       <dt>Note #<xsl:value-of select="position()"/>:</dt>
"KRN",.84,7981999.001,2,303,0)
       <dd><xsl:apply-templates select="."/></dd>
"KRN",.84,7981999.001,2,304,0)
      </xsl:for-each>
"KRN",.84,7981999.001,2,305,0)
     </xsl:when>
"KRN",.84,7981999.001,2,306,0)
     <xsl:otherwise>
"KRN",.84,7981999.001,2,307,0)
      <dt>Note:</dt>
"KRN",.84,7981999.001,2,308,0)
      <dd><xsl:apply-templates select="/REPORT/HEADER/NOTES/*"/></dd>
"KRN",.84,7981999.001,2,309,0)
     </xsl:otherwise>
"KRN",.84,7981999.001,2,310,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,311,0)
   </dl>
"KRN",.84,7981999.001,2,312,0)
  </xsl:if>
"KRN",.84,7981999.001,2,313,0)
 </div>
"KRN",.84,7981999.001,2,314,0)
</xsl:template>
"KRN",.84,7981999.001,2,315,0)
 
"KRN",.84,7981999.001,2,316,0)
<xsl:template match="HEADER/NOTES/AGE">
"KRN",.84,7981999.001,2,317,0)
 Age of patients is calculated as of the date when the report is run
"KRN",.84,7981999.001,2,318,0)
 (<xsl:call-template name="DateTime"/>). If a patient died then the
"KRN",.84,7981999.001,2,319,0)
 age is calculated as of date of death.
"KRN",.84,7981999.001,2,320,0)
</xsl:template>
"KRN",.84,7981999.001,2,321,0)
 
"KRN",.84,7981999.001,2,322,0)
<xsl:template match="HEADER/NOTES/AGE_BASE_DATE">
"KRN",.84,7981999.001,2,323,0)
 Age of patients is calculated as of <xsl:call-template name="DateTime"/>,
"KRN",.84,7981999.001,2,324,0)
 which is the middle of the report date range. If a patient was born after
"KRN",.84,7981999.001,2,325,0)
 this date then the field will be empty. If a patient died before this
"KRN",.84,7981999.001,2,326,0)
 date then the age is calculated as of date of death.
"KRN",.84,7981999.001,2,327,0)
</xsl:template>
"KRN",.84,7981999.001,2,328,0)
 
"KRN",.84,7981999.001,2,329,0)
<xsl:template match="PARAMETERS/CLINICS">
"KRN",.84,7981999.001,2,330,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,331,0)
  <xsl:with-param name="heading" select="'Clinics'"/>
"KRN",.84,7981999.001,2,332,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,333,0)
</xsl:template>
"KRN",.84,7981999.001,2,334,0)
 
"KRN",.84,7981999.001,2,335,0)
<xsl:template match="PARAMETERS/CPTLST">
"KRN",.84,7981999.001,2,336,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,337,0)
  <xsl:with-param name="heading" select="'CPT'"/>
"KRN",.84,7981999.001,2,338,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,339,0)
</xsl:template>
"KRN",.84,7981999.001,2,340,0)
 
"KRN",.84,7981999.001,2,341,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,342,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,343,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,344,0)
 <xsl:if test="($dtr/@START!='') and ($dtr/@END!='')">
"KRN",.84,7981999.001,2,345,0)
  <tr>
"KRN",.84,7981999.001,2,346,0)
   <th scope="row">
"KRN",.84,7981999.001,2,347,0)
    <xsl:if test="$title!=''">
"KRN",.84,7981999.001,2,348,0)
     <xsl:value-of select="concat($title,'&#160;')"/>
"KRN",.84,7981999.001,2,349,0)
    </xsl:if>
"KRN",.84,7981999.001,2,350,0)
    <xsl:text>Date&#160;Range:&#160;</xsl:text>
"KRN",.84,7981999.001,2,351,0)
   </th>
"KRN",.84,7981999.001,2,352,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,353,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,354,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,355,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,356,0)
    <xsl:text>&#160;-&#160;</xsl:text>
"KRN",.84,7981999.001,2,357,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,358,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>  
"KRN",.84,7981999.001,2,359,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,360,0)
   </td>
"KRN",.84,7981999.001,2,361,0)
  </tr>
"KRN",.84,7981999.001,2,362,0)
 </xsl:if>
"KRN",.84,7981999.001,2,363,0)
</xsl:template>
"KRN",.84,7981999.001,2,364,0)
 
"KRN",.84,7981999.001,2,365,0)
<!-- 
"KRN",.84,7981999.001,2,366,0)
<xsl:template name="DateRange" match="PARAMETERS/DATE_RANGE">
"KRN",.84,7981999.001,2,367,0)
 <xsl:param name="dtr" select="."/>
"KRN",.84,7981999.001,2,368,0)
 <xsl:param name="title" select="''"/>
"KRN",.84,7981999.001,2,369,0)
 <xsl:if test="$dtr/@START!=''">
"KRN",.84,7981999.001,2,370,0)
  <tr>
"KRN",.84,7981999.001,2,371,0)
   <th scope="row"><xsl:value-of select="$title"/> Start&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,372,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,373,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,374,0)
     <xsl:with-param name="dt" select="$dtr/@START"/>
"KRN",.84,7981999.001,2,375,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,376,0)
   </td>
"KRN",.84,7981999.001,2,377,0)
  </tr>
"KRN",.84,7981999.001,2,378,0)
 </xsl:if>
"KRN",.84,7981999.001,2,379,0)
 <xsl:if test="$dtr/@END!=''">
"KRN",.84,7981999.001,2,380,0)
  <tr>
"KRN",.84,7981999.001,2,381,0)
   <th scope="row"><xsl:value-of select="$title"/> End&#160;Date:&#160;</th>
"KRN",.84,7981999.001,2,382,0)
   <td style="vertical-align:text-bottom">
"KRN",.84,7981999.001,2,383,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,384,0)
     <xsl:with-param name="dt" select="$dtr/@END"/>
"KRN",.84,7981999.001,2,385,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,386,0)
   </td>
"KRN",.84,7981999.001,2,387,0)
  </tr>
"KRN",.84,7981999.001,2,388,0)
 </xsl:if>
"KRN",.84,7981999.001,2,389,0)
</xsl:template>
"KRN",.84,7981999.001,2,390,0)
-->
"KRN",.84,7981999.001,2,391,0)
 
"KRN",.84,7981999.001,2,392,0)
<xsl:template match="PARAMETERS/DIVISIONS">
"KRN",.84,7981999.001,2,393,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,394,0)
  <xsl:with-param name="heading" select="'Divisions'"/>
"KRN",.84,7981999.001,2,395,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,396,0)
</xsl:template>
"KRN",.84,7981999.001,2,397,0)
 
"KRN",.84,7981999.001,2,398,0)
<xsl:template match="PARAMETERS/ICD9LST">
"KRN",.84,7981999.001,2,399,0)
 <tr>
"KRN",.84,7981999.001,2,400,0)
  <th scope="row">ICD-9:&#160;</th>
"KRN",.84,7981999.001,2,401,0)
  <td>
"KRN",.84,7981999.001,2,402,0)
   <dl>
"KRN",.84,7981999.001,2,403,0)
    <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,404,0)
     <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,405,0)
    </xsl:if>
"KRN",.84,7981999.001,2,406,0)
    <xsl:if test=".='ALL'"><dt>ALL</dt></xsl:if>
"KRN",.84,7981999.001,2,407,0)
    <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,408,0)
   </dl>
"KRN",.84,7981999.001,2,409,0)
  </td>
"KRN",.84,7981999.001,2,410,0)
 </tr>
"KRN",.84,7981999.001,2,411,0)
</xsl:template>
"KRN",.84,7981999.001,2,412,0)
 
"KRN",.84,7981999.001,2,413,0)
<xsl:template match="PARAMETERS/ICD9LST/GROUP">
"KRN",.84,7981999.001,2,414,0)
 <dt><b><xsl:value-of select="@NAME"/></b></dt>
"KRN",.84,7981999.001,2,415,0)
 <dd><dl>
"KRN",.84,7981999.001,2,416,0)
  <xsl:if test="@DESCR!=''">
"KRN",.84,7981999.001,2,417,0)
   <dt><xsl:value-of select="@DESCR"/></dt>
"KRN",.84,7981999.001,2,418,0)
  </xsl:if>
"KRN",.84,7981999.001,2,419,0)
  <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,420,0)
   <xsl:sort select="."/>
"KRN",.84,7981999.001,2,421,0)
   <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,422,0)
   <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,423,0)
  </xsl:for-each>
"KRN",.84,7981999.001,2,424,0)
 </dl></dd>
"KRN",.84,7981999.001,2,425,0)
</xsl:template>
"KRN",.84,7981999.001,2,426,0)
 
"KRN",.84,7981999.001,2,427,0)
<xsl:template match="PARAMETERS/ICD9FILT">
"KRN",.84,7981999.001,2,428,0)
 <tr>
"KRN",.84,7981999.001,2,429,0)
  <th scope="row">Other Diagnoses:&#160;</th>
"KRN",.84,7981999.001,2,430,0)
  <td>
"KRN",.84,7981999.001,2,431,0)
   <dl>
"KRN",.84,7981999.001,2,432,0)
    <xsl:if test="@FILTER!=''">
"KRN",.84,7981999.001,2,433,0)
      <xsl:choose>
"KRN",.84,7981999.001,2,434,0)
        <xsl:when test="@FILTER='EXCLUDE'">
"KRN",.84,7981999.001,2,435,0)
          <dt><xsl:text>Exclude</xsl:text></dt>
"KRN",.84,7981999.001,2,436,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,437,0)
        </xsl:when>
"KRN",.84,7981999.001,2,438,0)
        <xsl:when test="@FILTER='INCLUDE'">
"KRN",.84,7981999.001,2,439,0)
          <dt><xsl:text>Include</xsl:text></dt>
"KRN",.84,7981999.001,2,440,0)
          <xsl:apply-templates select="GROUP"/>
"KRN",.84,7981999.001,2,441,0)
        </xsl:when>
"KRN",.84,7981999.001,2,442,0)
        <xsl:otherwise>
"KRN",.84,7981999.001,2,443,0)
          <dt><xsl:text>All</xsl:text></dt>
"KRN",.84,7981999.001,2,444,0)
        </xsl:otherwise>
"KRN",.84,7981999.001,2,445,0)
      </xsl:choose>
"KRN",.84,7981999.001,2,446,0)
    </xsl:if>
"KRN",.84,7981999.001,2,447,0)
   </dl>
"KRN",.84,7981999.001,2,448,0)
  </td>
"KRN",.84,7981999.001,2,449,0)
 </tr>
"KRN",.84,7981999.001,2,450,0)
</xsl:template>
"KRN",.84,7981999.001,2,451,0)
 
"KRN",.84,7981999.001,2,452,0)
<xsl:template match="PARAMETERS/ICD9FILT/GROUP">
"KRN",.84,7981999.001,2,453,0)
 <dt><b><xsl:value-of select="@ID"/></b></dt>
"KRN",.84,7981999.001,2,454,0)
 <dd><dl>
"KRN",.84,7981999.001,2,455,0)
  <xsl:for-each select="ICD9">
"KRN",.84,7981999.001,2,456,0)
   <xsl:sort select="@ID"/>
"KRN",.84,7981999.001,2,457,0)
   <xsl:if test="position()>1"><xsl:text>; </xsl:text></xsl:if>
"KRN",.84,7981999.001,2,458,0)
   <xsl:value-of select="@ID"/>
"KRN",.84,7981999.001,2,459,0)
  </xsl:for-each>
"KRN",.84,7981999.001,2,460,0)
 </dl></dd>
"KRN",.84,7981999.001,2,461,0)
</xsl:template> 
"KRN",.84,7981999.001,2,462,0)
 
"KRN",.84,7981999.001,2,463,0)
<xsl:template match="PARAMETERS/LOCAL_FIELDS">
"KRN",.84,7981999.001,2,464,0)
 <xsl:variable name="pseudo" select="/REPORT/PARAMETERS/HIV_DX" />
"KRN",.84,7981999.001,2,465,0)
 <xsl:call-template name="LocalList">
"KRN",.84,7981999.001,2,466,0)
  <xsl:with-param name="firstitem" select="$pseudo"/>
"KRN",.84,7981999.001,2,467,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,468,0)
</xsl:template>
"KRN",.84,7981999.001,2,469,0)
 
"KRN",.84,7981999.001,2,470,0)
<!-- Process the pseudo local field -->
"KRN",.84,7981999.001,2,471,0)
<xsl:template match="PARAMETERS/HIV_DX">
"KRN",.84,7981999.001,2,472,0)
 <xsl:if test="count(/REPORT/PARAMETERS/LOCAL_FIELDS/*) &lt; 1">
"KRN",.84,7981999.001,2,473,0)
  <tr>
"KRN",.84,7981999.001,2,474,0)
   <th scope="row">
"KRN",.84,7981999.001,2,475,0)
    <xsl:text>Local Fields:&#160;</xsl:text>
"KRN",.84,7981999.001,2,476,0)
   </th>
"KRN",.84,7981999.001,2,477,0)
   <td>
"KRN",.84,7981999.001,2,478,0)
    <xsl:text>Diagnosed at this VA (</xsl:text>
"KRN",.84,7981999.001,2,479,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,480,0)
    <xsl:text>)</xsl:text>
"KRN",.84,7981999.001,2,481,0)
   </td>
"KRN",.84,7981999.001,2,482,0)
  </tr>
"KRN",.84,7981999.001,2,483,0)
 </xsl:if>
"KRN",.84,7981999.001,2,484,0)
</xsl:template> 
"KRN",.84,7981999.001,2,485,0)
 
"KRN",.84,7981999.001,2,486,0)
<xsl:template match="PARAMETERS/OPTIONS">
"KRN",.84,7981999.001,2,487,0)
 <tr>
"KRN",.84,7981999.001,2,488,0)
  <th scope="row">Options:&#160;</th>
"KRN",.84,7981999.001,2,489,0)
  <td>
"KRN",.84,7981999.001,2,490,0)
    <xsl:if test="@ALL_FILLS='1'"><xsl:text>All fills</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,491,0)
    <xsl:if test="@RECENT_FILLS='1'"><xsl:text>Most recent fill in time 
"KRN",.84,7981999.001,2,492,0)
period</xsl:text></xsl:if>
"KRN",.84,7981999.001,2,493,0)
    <xsl:if test="@RECENT_FILLS!='1' and @ALL_FILLS!='1'"><xsl:value-of 
"KRN",.84,7981999.001,2,494,0)
select="."/></xsl:if>
"KRN",.84,7981999.001,2,495,0)
  </td>
"KRN",.84,7981999.001,2,496,0)
 </tr>
"KRN",.84,7981999.001,2,497,0)
 <xsl:if test="@MOST_RECENT='1'">
"KRN",.84,7981999.001,2,498,0)
  <tr>
"KRN",.84,7981999.001,2,499,0)
   <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,500,0)
   <td><xsl:text>Most Recent</xsl:text></td>
"KRN",.84,7981999.001,2,501,0)
  </tr>
"KRN",.84,7981999.001,2,502,0)
 </xsl:if>
"KRN",.84,7981999.001,2,503,0)
 <xsl:if test="@MAX_DATE='1'">
"KRN",.84,7981999.001,2,504,0)
  <tr>
"KRN",.84,7981999.001,2,505,0)
   <th scope="row">Lab Test Date:&#160;</th>
"KRN",.84,7981999.001,2,506,0)
   <td>
"KRN",.84,7981999.001,2,507,0)
    <xsl:text>As of </xsl:text>
"KRN",.84,7981999.001,2,508,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,509,0)
     <xsl:with-param name="dt" select="../MAX_DATE"/>
"KRN",.84,7981999.001,2,510,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,511,0)
   </td>
"KRN",.84,7981999.001,2,512,0)
  </tr>
"KRN",.84,7981999.001,2,513,0)
 </xsl:if>
"KRN",.84,7981999.001,2,514,0)
</xsl:template>
"KRN",.84,7981999.001,2,515,0)
 
"KRN",.84,7981999.001,2,516,0)
<xsl:template match="PARAMETERS/OTHER_REGISTRIES">
"KRN",.84,7981999.001,2,517,0)
 <xsl:call-template name="ParamsList">
"KRN",.84,7981999.001,2,518,0)
  <xsl:with-param name="heading" select="'Other Registries'"/>
"KRN",.84,7981999.001,2,519,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,520,0)
</xsl:template>
"KRN",.84,7981999.001,2,521,0)
 
"KRN",.84,7981999.001,2,522,0)
<xsl:template match="PARAMETERS/PATIENTS">
"KRN",.84,7981999.001,2,523,0)
 <tr>
"KRN",.84,7981999.001,2,524,0)
  <th scope="row">Patients:&#160;</th>
"KRN",.84,7981999.001,2,525,0)
  <td>
"KRN",.84,7981999.001,2,526,0)
    <xsl:value-of select="."/>
"KRN",.84,7981999.001,2,527,0)
    <xsl:if test="@CONFDT_AFTER!=''">
"KRN",.84,7981999.001,2,528,0)
      <xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,529,0)
      <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,530,0)
       <xsl:with-param name="dt" select="@CONFDT_AFTER"/>
"KRN",.84,7981999.001,2,531,0)
      </xsl:call-template>
"KRN",.84,7981999.001,2,532,0)
    </xsl:if>
"KRN",.84,7981999.001,2,533,0)
  </td>
"KRN",.84,7981999.001,2,534,0)
 </tr>
"KRN",.84,7981999.001,2,535,0)
</xsl:template>
"KRN",.84,7981999.001,2,536,0)
 
"KRN",.84,7981999.001,2,537,0)
<xsl:template match="PARAMETERS/REGNAME">
"KRN",.84,7981999.001,2,538,0)
 <tr>
"KRN",.84,7981999.001,2,539,0)
  <th scope="row">Registry:&#160;</th>
"KRN",.84,7981999.001,2,540,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,541,0)
 </tr>
"KRN",.84,7981999.001,2,542,0)
</xsl:template>
"KRN",.84,7981999.001,2,543,0)
 
"KRN",.84,7981999.001,2,544,0)
<xsl:template match="PARAMETERS/TASK_COMMENT">
"KRN",.84,7981999.001,2,545,0)
 <tr>
"KRN",.84,7981999.001,2,546,0)
  <th scope="row">Comment:&#160;</th>
"KRN",.84,7981999.001,2,547,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,548,0)
 </tr>
"KRN",.84,7981999.001,2,549,0)
</xsl:template>
"KRN",.84,7981999.001,2,550,0)
 
"KRN",.84,7981999.001,2,551,0)
<xsl:template match="PARAMETERS/UTIL_TYPES">
"KRN",.84,7981999.001,2,552,0)
 <tr>
"KRN",.84,7981999.001,2,553,0)
  <th scope="row">Utilization:&#160;</th>
"KRN",.84,7981999.001,2,554,0)
  <td><xsl:value-of select="."/></td>
"KRN",.84,7981999.001,2,555,0)
 </tr>
"KRN",.84,7981999.001,2,556,0)
</xsl:template>
"KRN",.84,7981999.001,2,557,0)
 
"KRN",.84,7981999.001,2,558,0)
<xsl:template match="PARAMETERS/LRGRANGES">
"KRN",.84,7981999.001,2,559,0)
 <tr>
"KRN",.84,7981999.001,2,560,0)
  <th scope="row">Results:&#160;</th>
"KRN",.84,7981999.001,2,561,0)
  <td>
"KRN",.84,7981999.001,2,562,0)
   <xsl:for-each select="LRGRANGE">
"KRN",.84,7981999.001,2,563,0)
    <xsl:value-of select="."/><br/>
"KRN",.84,7981999.001,2,564,0)
   </xsl:for-each>
"KRN",.84,7981999.001,2,565,0)
  </td>
"KRN",.84,7981999.001,2,566,0)
 </tr>
"KRN",.84,7981999.001,2,567,0)
</xsl:template>
"KRN",.84,7981999.001,2,568,0)
 
"KRN",.84,7981999.001,2,569,0)
<xsl:template match="PARAMETERS/DATE_RANGE_3">
"KRN",.84,7981999.001,2,570,0)
 <xsl:call-template name="DateRange">
"KRN",.84,7981999.001,2,571,0)
  <xsl:with-param name="title" select="'Utilization'"/>
"KRN",.84,7981999.001,2,572,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,573,0)
<xsl:if test="../TREATMENT_HISTORY">
"KRN",.84,7981999.001,2,574,0)
  <tr>
"KRN",.84,7981999.001,2,575,0)
   <th scope="row">Treatment History:&#160;</th>
"KRN",.84,7981999.001,2,576,0)
   <td>
"KRN",.84,7981999.001,2,577,0)
     <xsl:value-of select="../TREATMENT_HISTORY"/>
"KRN",.84,7981999.001,2,578,0)
   </td>
"KRN",.84,7981999.001,2,579,0)
  </tr>
"KRN",.84,7981999.001,2,580,0)
 </xsl:if>
"KRN",.84,7981999.001,2,581,0)
</xsl:template>
"KRN",.84,7981999.001,2,582,0)
 
"KRN",.84,7981999.001,2,583,0)
 
"KRN",.84,7981999.001,2,584,0)
<!--
"KRN",.84,7981999.001,2,585,0)
=========================================================================
"KRN",.84,7981999.001,2,586,0)
                       DEFAULT DATA GRID TEMPLATES
"KRN",.84,7981999.001,2,587,0)
=========================================================================
"KRN",.84,7981999.001,2,588,0)
-->
"KRN",.84,7981999.001,2,589,0)
 
"KRN",.84,7981999.001,2,590,0)
<xsl:template name="DataGrid" match="*[@TABLE!='']">
"KRN",.84,7981999.001,2,591,0)
 <xsl:param name="divstyle" select="''"/>
"KRN",.84,7981999.001,2,592,0)
 <xsl:param name="scroll" select="*[31]"/>
"KRN",.84,7981999.001,2,593,0)
 <xsl:variable name="tbldef" select="key('TableDefs',@TABLE)"/>
"KRN",.84,7981999.001,2,594,0)
 <xsl:choose>
"KRN",.84,7981999.001,2,595,0)
  <xsl:when test="*[1]">
"KRN",.84,7981999.001,2,596,0)
   <div>
"KRN",.84,7981999.001,2,597,0)
    <xsl:if test="$divstyle!=''">
"KRN",.84,7981999.001,2,598,0)
     <xsl:attribute name="style">
"KRN",.84,7981999.001,2,599,0)
      <xsl:value-of select="$divstyle"/>
"KRN",.84,7981999.001,2,600,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,601,0)
    </xsl:if>
"KRN",.84,7981999.001,2,602,0)
    <xsl:call-template name="MakeScrollable">
"KRN",.84,7981999.001,2,603,0)
     <xsl:with-param name="condition" select="$scroll"/>
"KRN",.84,7981999.001,2,604,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,605,0)
    <table class="dataGrid" cellpadding="5" cellspacing="0">
"KRN",.84,7981999.001,2,606,0)
     <xsl:apply-templates select="$tbldef/@HEADER"/>
"KRN",.84,7981999.001,2,607,0)
     <xsl:apply-templates select="$tbldef/@FOOTER"/>
"KRN",.84,7981999.001,2,608,0)
     <tbody>
"KRN",.84,7981999.001,2,609,0)
      <xsl:apply-templates select="*">
"KRN",.84,7981999.001,2,610,0)
       <xsl:with-param name="seqnum"
"KRN",.84,7981999.001,2,611,0)
            select="count($tbldef/COLUMN[@NAME='#'])"/>
"KRN",.84,7981999.001,2,612,0)
      </xsl:apply-templates>
"KRN",.84,7981999.001,2,613,0)
     </tbody>
"KRN",.84,7981999.001,2,614,0)
    </table>
"KRN",.84,7981999.001,2,615,0)
   </div>
"KRN",.84,7981999.001,2,616,0)
  </xsl:when>
"KRN",.84,7981999.001,2,617,0)
  <xsl:otherwise>
"KRN",.84,7981999.001,2,618,0)
   <xsl:call-template name="TableNoData"/>
"KRN",.84,7981999.001,2,619,0)
  </xsl:otherwise>
"KRN",.84,7981999.001,2,620,0)
 </xsl:choose>
"KRN",.84,7981999.001,2,621,0)
</xsl:template>
"KRN",.84,7981999.001,2,622,0)
 
"KRN",.84,7981999.001,2,623,0)
<!-- Default data grid header -->
"KRN",.84,7981999.001,2,624,0)
 
"KRN",.84,7981999.001,2,625,0)
<xsl:template match="HEADER/TBLDEF/@HEADER">
"KRN",.84,7981999.001,2,626,0)
 <thead>
"KRN",.84,7981999.001,2,627,0)
  <tr><xsl:apply-templates select="../COLUMN"/></tr>
"KRN",.84,7981999.001,2,628,0)
 </thead>
"KRN",.84,7981999.001,2,629,0)
</xsl:template>
"KRN",.84,7981999.001,2,630,0)
 
"KRN",.84,7981999.001,2,631,0)
<!-- Default column heading cell -->
"KRN",.84,7981999.001,2,632,0)
 
"KRN",.84,7981999.001,2,633,0)
<xsl:template name="ColumnHeader" match="HEADER/TBLDEF/COLUMN">
"KRN",.84,7981999.001,2,634,0)
 <xsl:param name="column" select="."/>
"KRN",.84,7981999.001,2,635,0)
 <xsl:param name="colname" select="$column/@NAME"/>
"KRN",.84,7981999.001,2,636,0)
 <xsl:param name="sortmode"/>
"KRN",.84,7981999.001,2,637,0)
 <xsl:param name="sort" 
"KRN",.84,7981999.001,2,638,0)
      select="concat($column/../@NAME,'=',$colname,$sortmode)"/>
"KRN",.84,7981999.001,2,639,0)
 <xsl:param name="title" select="$colname"/>
"KRN",.84,7981999.001,2,640,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,641,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,642,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,643,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,644,0)
 <th scope="col">
"KRN",.84,7981999.001,2,645,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,646,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,647,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,648,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,649,0)
  </xsl:if>
"KRN",.84,7981999.001,2,650,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,651,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,652,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,653,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,654,0)
  </xsl:if>
"KRN",.84,7981999.001,2,655,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,656,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,657,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,658,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,659,0)
  </xsl:if>
"KRN",.84,7981999.001,2,660,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,661,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,662,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,663,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,664,0)
  </xsl:if>
"KRN",.84,7981999.001,2,665,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,666,0)
   <xsl:when test="$title=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,667,0)
   <xsl:when test="($sort!='') and not($REMOVE_URLS)">
"KRN",.84,7981999.001,2,668,0)
    <xsl:element name="a">
"KRN",.84,7981999.001,2,669,0)
     <xsl:attribute name="href">
"KRN",.84,7981999.001,2,670,0)
      <xsl:text>http://vista/report/sort?</xsl:text>
"KRN",.84,7981999.001,2,671,0)
      <xsl:value-of select="$sort"/>
"KRN",.84,7981999.001,2,672,0)
     </xsl:attribute>
"KRN",.84,7981999.001,2,673,0)
     <xsl:value-of select="$title"/>
"KRN",.84,7981999.001,2,674,0)
    </xsl:element>
"KRN",.84,7981999.001,2,675,0)
   </xsl:when>
"KRN",.84,7981999.001,2,676,0)
   <xsl:otherwise><xsl:value-of select="$title"/></xsl:otherwise>
"KRN",.84,7981999.001,2,677,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,678,0)
 </th>
"KRN",.84,7981999.001,2,679,0)
</xsl:template>
"KRN",.84,7981999.001,2,680,0)
 
"KRN",.84,7981999.001,2,681,0)
<!-- Default Footer -->
"KRN",.84,7981999.001,2,682,0)
 
"KRN",.84,7981999.001,2,683,0)
<xsl:template name="DataGridFooter" match="TBLDEF/@FOOTER">
"KRN",.84,7981999.001,2,684,0)
 <xsl:param name="colspan"
"KRN",.84,7981999.001,2,685,0)
      select="count(..//COLUMN[not(child::COLUMN[1])])"/>
"KRN",.84,7981999.001,2,686,0)
 <tfoot><tr><td>
"KRN",.84,7981999.001,2,687,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,688,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,689,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,690,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,691,0)
  </xsl:if>
"KRN",.84,7981999.001,2,692,0)
  <xsl:text>&#160;</xsl:text>
"KRN",.84,7981999.001,2,693,0)
 </td></tr></tfoot>
"KRN",.84,7981999.001,2,694,0)
</xsl:template>
"KRN",.84,7981999.001,2,695,0)
 
"KRN",.84,7981999.001,2,696,0)
<!-- Default data grid row -->
"KRN",.84,7981999.001,2,697,0)
 
"KRN",.84,7981999.001,2,698,0)
<xsl:template match="*[@TABLE!='']/*">
"KRN",.84,7981999.001,2,699,0)
 <xsl:param name="seqnum" select="0"/>
"KRN",.84,7981999.001,2,700,0)
 <tr>
"KRN",.84,7981999.001,2,701,0)
  <xsl:if test="$seqnum">
"KRN",.84,7981999.001,2,702,0)
   <td><xsl:value-of select="position()"/></td>
"KRN",.84,7981999.001,2,703,0)
  </xsl:if>
"KRN",.84,7981999.001,2,704,0)
  <xsl:apply-templates select="child::*"/>
"KRN",.84,7981999.001,2,705,0)
 </tr>
"KRN",.84,7981999.001,2,706,0)
</xsl:template>
"KRN",.84,7981999.001,2,707,0)
 
"KRN",.84,7981999.001,2,708,0)
<!-- Data grid cell -->
"KRN",.84,7981999.001,2,709,0)
 
"KRN",.84,7981999.001,2,710,0)
<xsl:template name="TableCell" match="*[@TABLE!='']/*/*">
"KRN",.84,7981999.001,2,711,0)
 <xsl:param name="class"/>
"KRN",.84,7981999.001,2,712,0)
 <xsl:param name="colspan" select="0"/>
"KRN",.84,7981999.001,2,713,0)
 <xsl:param name="fmdt" select="0"/>
"KRN",.84,7981999.001,2,714,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,715,0)
 <xsl:param name="style"/>
"KRN",.84,7981999.001,2,716,0)
 <xsl:param name="value" select="."/>
"KRN",.84,7981999.001,2,717,0)
 <xsl:param name="width"/>
"KRN",.84,7981999.001,2,718,0)
 <xsl:param name="yesno" select="0"/>
"KRN",.84,7981999.001,2,719,0)
 <td>
"KRN",.84,7981999.001,2,720,0)
  <xsl:if test="string($class)!=''">
"KRN",.84,7981999.001,2,721,0)
   <xsl:attribute name="class">
"KRN",.84,7981999.001,2,722,0)
    <xsl:value-of select="$class"/>
"KRN",.84,7981999.001,2,723,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,724,0)
  </xsl:if>
"KRN",.84,7981999.001,2,725,0)
  <xsl:if test="$colspan>1">
"KRN",.84,7981999.001,2,726,0)
   <xsl:attribute name="colspan">
"KRN",.84,7981999.001,2,727,0)
    <xsl:value-of select="$colspan"/>
"KRN",.84,7981999.001,2,728,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,729,0)
  </xsl:if>
"KRN",.84,7981999.001,2,730,0)
  <xsl:if test="$rowspan>1">
"KRN",.84,7981999.001,2,731,0)
   <xsl:attribute name="rowspan">
"KRN",.84,7981999.001,2,732,0)
    <xsl:value-of select="$rowspan"/>
"KRN",.84,7981999.001,2,733,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,734,0)
  </xsl:if>
"KRN",.84,7981999.001,2,735,0)
  <xsl:if test="string($style)!=''">
"KRN",.84,7981999.001,2,736,0)
   <xsl:attribute name="style">
"KRN",.84,7981999.001,2,737,0)
    <xsl:value-of select="$style"/>
"KRN",.84,7981999.001,2,738,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,739,0)
  </xsl:if>
"KRN",.84,7981999.001,2,740,0)
  <xsl:if test="string($width)!=''">
"KRN",.84,7981999.001,2,741,0)
   <xsl:attribute name="width">
"KRN",.84,7981999.001,2,742,0)
    <xsl:value-of select="$width"/>
"KRN",.84,7981999.001,2,743,0)
   </xsl:attribute>
"KRN",.84,7981999.001,2,744,0)
  </xsl:if>
"KRN",.84,7981999.001,2,745,0)
  <xsl:choose>
"KRN",.84,7981999.001,2,746,0)
   <xsl:when test="string($value)=''">&#160;</xsl:when>
"KRN",.84,7981999.001,2,747,0)
   <xsl:when test="boolean($fmdt)">
"KRN",.84,7981999.001,2,748,0)
    <xsl:call-template name="DateTime">
"KRN",.84,7981999.001,2,749,0)
     <xsl:with-param name="dt" select="$value"/>
"KRN",.84,7981999.001,2,750,0)
    </xsl:call-template>
"KRN",.84,7981999.001,2,751,0)
   </xsl:when>
"KRN",.84,7981999.001,2,752,0)
   <xsl:when test="boolean($yesno)">
"KRN",.84,7981999.001,2,753,0)
    <xsl:choose>
"KRN",.84,7981999.001,2,754,0)
     <xsl:when test="$value!=0">Yes</xsl:when>
"KRN",.84,7981999.001,2,755,0)
     <xsl:otherwise>No</xsl:otherwise>
"KRN",.84,7981999.001,2,756,0)
    </xsl:choose>
"KRN",.84,7981999.001,2,757,0)
   </xsl:when>
"KRN",.84,7981999.001,2,758,0)
   <xsl:otherwise><xsl:value-of select="$value"/></xsl:otherwise>
"KRN",.84,7981999.001,2,759,0)
  </xsl:choose>
"KRN",.84,7981999.001,2,760,0)
 </td>
"KRN",.84,7981999.001,2,761,0)
</xsl:template>
"KRN",.84,7981999.001,2,762,0)
 
"KRN",.84,7981999.001,2,763,0)
<!-- Default column headings -->
"KRN",.84,7981999.001,2,764,0)
 
"KRN",.84,7981999.001,2,765,0)
<xsl:template match="TBLDEF/COLUMN[@NAME='#']">
"KRN",.84,7981999.001,2,766,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,767,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,768,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,769,0)
  <xsl:with-param name="sort" select="''"/>
"KRN",.84,7981999.001,2,770,0)
  <xsl:with-param name="width" select="'4%'"/>
"KRN",.84,7981999.001,2,771,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,772,0)
</xsl:template>
"KRN",.84,7981999.001,2,773,0)
 
"KRN",.84,7981999.001,2,774,0)
<xsl:template match="COLUMN[@NAME='DATE']">                                    
"KRN",.84,7981999.001,2,775,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,776,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,777,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,778,0)
  <xsl:with-param name="title" select="'Date'"/>                               
"KRN",.84,7981999.001,2,779,0)
  <xsl:with-param name="width" select="'15%'"/>
"KRN",.84,7981999.001,2,780,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,781,0)
</xsl:template>
"KRN",.84,7981999.001,2,782,0)
 
"KRN",.84,7981999.001,2,783,0)
<xsl:template match="COLUMN[@NAME='DOD']">
"KRN",.84,7981999.001,2,784,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,785,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,786,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,787,0)
  <xsl:with-param name="title" select="'Date of Death'"/>
"KRN",.84,7981999.001,2,788,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,789,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,790,0)
</xsl:template>
"KRN",.84,7981999.001,2,791,0)
 
"KRN",.84,7981999.001,2,792,0)
<xsl:template match="COLUMN[@NAME='LAST4']">
"KRN",.84,7981999.001,2,793,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,794,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,795,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,796,0)
  <xsl:with-param name="title" select="'SSN'"/>
"KRN",.84,7981999.001,2,797,0)
  <xsl:with-param name="width" select="'7%'"/>
"KRN",.84,7981999.001,2,798,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,799,0)
</xsl:template>
"KRN",.84,7981999.001,2,800,0)
 
"KRN",.84,7981999.001,2,801,0)
<xsl:template match="COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,802,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,803,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,804,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,805,0)
  <xsl:with-param name="title" select="'Name'"/>
"KRN",.84,7981999.001,2,806,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,807,0)
</xsl:template>
"KRN",.84,7981999.001,2,808,0)
 
"KRN",.84,7981999.001,2,809,0)
<xsl:template match="TBLDEF[@NAME='PATIENTS']/COLUMN[@NAME='NAME']">
"KRN",.84,7981999.001,2,810,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,811,0)
 <xsl:call-template name="ColumnHeader">
"KRN",.84,7981999.001,2,812,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,813,0)
  <xsl:with-param name="title" select="'Patient Name'"/>
"KRN",.84,7981999.001,2,814,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,815,0)
</xsl:template>
"KRN",.84,7981999.001,2,816,0)
 
"KRN",.84,7981999.001,2,817,0)
<!-- Default cells -->
"KRN",.84,7981999.001,2,818,0)
 
"KRN",.84,7981999.001,2,819,0)
<xsl:template match="PATIENT/DOD">
"KRN",.84,7981999.001,2,820,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,821,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,822,0)
  <xsl:with-param name="fmdt" select="1"/>
"KRN",.84,7981999.001,2,823,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,824,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,825,0)
</xsl:template>
"KRN",.84,7981999.001,2,826,0)
 
"KRN",.84,7981999.001,2,827,0)
<xsl:template match="*[@TABLE!='']/*/NAME">
"KRN",.84,7981999.001,2,828,0)
 <xsl:param name="rowspan" select="0"/>
"KRN",.84,7981999.001,2,829,0)
 <xsl:call-template name="TableCell">
"KRN",.84,7981999.001,2,830,0)
  <xsl:with-param name="class" select="'aLeft'"/>
"KRN",.84,7981999.001,2,831,0)
  <xsl:with-param name="rowspan" select="$rowspan"/>
"KRN",.84,7981999.001,2,832,0)
 </xsl:call-template>
"KRN",.84,7981999.001,2,833,0)
</xsl:template>
"KRN",.84,7981999.001,2,834,0)
 
"KRN",.84,7981999.001,2,835,0)
</xsl:stylesheet>
"KRN",.84,7981999.001,3,0)
^.845
"MBREQ")
0
"ORD",9,.84)
.84;9;;;EDEOUT^DIFROMSO(.84,DA,"",XPDA);FPRE^DIFROMSI(.84,"",XPDA);EPRE^DIFROMSI(.84,DA,"",XPDA,"",OLDA);;EPOST^DIFROMSI(.84,DA,"",XPDA);DEL^DIFROMSK(.84,"",%)
"ORD",9,.84,0)
DIALOG
"PGL",799.51,0,2,.02)
REGISTRY^RP798.1'X^ROR(798.1,^0;2^Q:$$VAEDT^RORDD(799.51,$G(DA))
"PGL",799.51,0,3,.03)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;3^Q:$$VAEDT^RORDD(799.51,$G(DA))  S Y=$P($G(^ROR(799.51,DA,0)),U,2),DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"") D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"PGL",799.51,0,4,.04)
VA GENERIC^RP50.6'X^PSNDF(50.6,^0;4^Q:$$VAEDT^RORDD(799.51,$G(DA))
"PKG",618,-1)
1^1
"PKG",618,0)
CLINICAL CASE REGISTRIES^ROR^CLINICAL REGISTRIES
"PKG",618,20,0)
^9.402P^^
"PKG",618,22,0)
^9.49I^1^1
"PKG",618,22,1,0)
1.5^3060208^3060419^568
"PKG",618,22,1,"PAH",1,0)
17^3120516^520736422
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
9
"RTN","RORP017")
0^^B8290353^n/a
"RTN","RORP017",1,0)
RORP017 ;BPOIFO/CLR  POST INSTALL PATCH 17 ; 8/29/11 1:26pm
"RTN","RORP017",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**17**;Feb 17, 2006;Build 33
"RTN","RORP017",3,0)
 ;******************************************************************************
"RTN","RORP017",4,0)
 ; This routine uses the following IAs:
"RTN","RORP017",5,0)
 ;
"RTN","RORP017",6,0)
 ; #10006  ^DIC (supported)
"RTN","RORP017",7,0)
 ; #2053   FILE^DIE (supported)
"RTN","RORP017",8,0)
 ; #10013  ^DIK (supported)
"RTN","RORP017",9,0)
 ; #2054   CLEAN^DILF (supported)
"RTN","RORP017",10,0)
 ; #2056   GETS^DIQ (supported)
"RTN","RORP017",11,0)
 ; #2263   ADD^XPAR (supported)
"RTN","RORP017",12,0)
 ; #2263   DEL^XPAR (supported)
"RTN","RORP017",13,0)
 ; #10141  BMES^XPDUTL (supported)
"RTN","RORP017",14,0)
 ;         
"RTN","RORP017",15,0)
 ;******************************************************************************
"RTN","RORP017",16,0)
POST ;
"RTN","RORP017",17,0)
 D BMES^XPDUTL("Adding PTSD common template...")
"RTN","RORP017",18,0)
 D PTSD
"RTN","RORP017",19,0)
 D BMES^XPDUTL("Adding new reports to HepC registry...")
"RTN","RORP017",20,0)
 D RPT
"RTN","RORP017",21,0)
 D BMES^XPDUTL("Checking VA GENERIC drug file...")
"RTN","RORP017",22,0)
 D GENDRG
"RTN","RORP017",23,0)
 Q
"RTN","RORP017",24,0)
 ;******************************************************************************
"RTN","RORP017",25,0)
 ;Add new ICD9 entry/group "PTSD" to the PARAMETERS file #8989.5
"RTN","RORP017",26,0)
 ;ADD^XPAR(entity,parameter[,instance],value[,.error])
"RTN","RORP017",27,0)
 ;DBIA 2263
"RTN","RORP017",28,0)
 ;******************************************************************************
"RTN","RORP017",29,0)
PTSD ;
"RTN","RORP017",30,0)
 N RORVALUE,RORERR,RORENTITY,RORPARAMETER,RORINSTANCE
"RTN","RORP017",31,0)
 S RORENTITY="PKG.CLINICAL CASE REGISTRIES"
"RTN","RORP017",32,0)
 S RORPARAMETER="ROR REPORT PARAMS TEMPLATE"
"RTN","RORP017",33,0)
 S RORINSTANCE="13::PTSD"
"RTN","RORP017",34,0)
 ;delete it first (in case it already exists)
"RTN","RORP017",35,0)
 D DEL^XPAR(RORENTITY,RORPARAMETER,RORINSTANCE,.RORERR)
"RTN","RORP017",36,0)
 S RORVALUE="CCR Predefined Report Template"
"RTN","RORP017",37,0)
 S RORVALUE(1,0)="<?xml version="_"""1.0"""_" encoding="_"""UTF-8"""_"?>"
"RTN","RORP017",38,0)
 S RORVALUE(2,0)="<PARAMS>"
"RTN","RORP017",39,0)
 S RORVALUE(3,0)="<ICD9LST>"
"RTN","RORP017",40,0)
 S RORVALUE(4,0)="<GROUP ID="_"""PTSD"""_">"
"RTN","RORP017",41,0)
 S RORVALUE(5,0)="<ICD9 ID="_"""309.81"""_">POSTTRAUMATIC STRESS DIS</ICD9>"
"RTN","RORP017",42,0)
 S RORVALUE(6,0)="</GROUP>"
"RTN","RORP017",43,0)
 S RORVALUE(7,0)="</ICD9LST>"
"RTN","RORP017",44,0)
 S RORVALUE(8,0)="<PANELS>"
"RTN","RORP017",45,0)
 S RORVALUE(9,0)="<PANEL ID="_"""160"""_"/>"
"RTN","RORP017",46,0)
 S RORVALUE(10,0)="</PANELS>"
"RTN","RORP017",47,0)
 S RORVALUE(11,0)="</PARAMS>"
"RTN","RORP017",48,0)
 ;add it
"RTN","RORP017",49,0)
 D ADD^XPAR(RORENTITY,RORPARAMETER,RORINSTANCE,.RORVALUE,.RORERR)
"RTN","RORP017",50,0)
 Q
"RTN","RORP017",51,0)
 ;
"RTN","RORP017",52,0)
 ;
"RTN","RORP017",53,0)
 ;******************************************************************************
"RTN","RORP017",54,0)
 ;Add reports 21-22 to the list of available reports for the VA HEPC entry in the
"RTN","RORP017",55,0)
 ; ROR REGISTRY PARAMETERS file.  Field #27: AVAILABLE REPORTS
"RTN","RORP017",56,0)
 ;******************************************************************************
"RTN","RORP017",57,0)
RPT ;
"RTN","RORP017",58,0)
 N REGNAME,REGIEN,RORERR,RORDATA,OLDLIST,NEWLIST S REGNAME="VA HEPC"
"RTN","RORP017",59,0)
 S REGIEN=$O(^ROR(798.1,"B",REGNAME,0))
"RTN","RORP017",60,0)
 Q:$G(REGIEN)=""
"RTN","RORP017",61,0)
 K RORDATA,RORERR D GETS^DIQ(798.1,REGIEN_",",27,"I","RORDATA","RORERR")
"RTN","RORP017",62,0)
 Q:$D(RORERR("DIERR"))
"RTN","RORP017",63,0)
 S OLDLIST=$G(RORDATA(798.1,REGIEN_",",27,"I"))
"RTN","RORP017",64,0)
 Q:$G(OLDLIST)=""
"RTN","RORP017",65,0)
 I OLDLIST[",18,19,20,21,22" Q
"RTN","RORP017",66,0)
 ;update AVAILABLE REPORTS with the 3 additional reports
"RTN","RORP017",67,0)
 S NEWLIST=OLDLIST_",18,19,20,21,22"
"RTN","RORP017",68,0)
 N FLAG,FDA,IENS,FIELD S IENS=REGIEN_",",FIELD=27,FLAG="E"
"RTN","RORP017",69,0)
 S FDA(798.1,IENS,FIELD)=NEWLIST
"RTN","RORP017",70,0)
 K RORERR D FILE^DIE(FLAG,"FDA","RORERR")
"RTN","RORP017",71,0)
 D CLEAN^DILF
"RTN","RORP017",72,0)
 Q
"RTN","RORP017",73,0)
 ;
"RTN","RORP017",74,0)
 ;*******************************************************************
"RTN","RORP017",75,0)
 ;
"RTN","RORP017",76,0)
 ;Delete entry in ROR GENERIC DRUG with unresolved pointers
"RTN","RORP017",77,0)
 ;
"RTN","RORP017",78,0)
 ;********************************************************************
"RTN","RORP017",79,0)
 ;clean up 799.51 if pointers are bad
"RTN","RORP017",80,0)
GENDRG ;
"RTN","RORP017",81,0)
 N DIC,X,DIK,DA,RORNAME,Y
"RTN","RORP017",82,0)
 S DIC=799.51,DIC(0)="MNZ"
"RTN","RORP017",83,0)
 F RORNAME="EMTRICI./RILPIVIRINE/TENOFOVIR" D
"RTN","RORP017",84,0)
 .S X=RORNAME D ^DIC Q:+Y<0
"RTN","RORP017",85,0)
 .Q:+$P(Y(0),U,4)>0
"RTN","RORP017",86,0)
 .S DA=+Y,DIK="^ROR(799.51," D ^DIK
"RTN","RORP017",87,0)
 .D BMES^XPDUTL("WARNING*** Missing entry in VA GENERIC file.")
"RTN","RORP017",88,0)
 Q
"RTN","RORRP018")
0^8^B9023679^B7897873
"RTN","RORRP018",1,0)
RORRP018 ;HCIOFO/SG - RPC: LIST OF LAB TESTS ; 10/19/05 8:23am
"RTN","RORRP018",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**17**;Feb 17, 2006;Build 33
"RTN","RORRP018",3,0)
 ;
"RTN","RORRP018",4,0)
 ; This routine uses the following IAs:
"RTN","RORRP018",5,0)
 ;
"RTN","RORRP018",6,0)
 ; #91           Access to the LABORATORY TEST file
"RTN","RORRP018",7,0)
 ; #2051         FIND^DIC (supported)
"RTN","RORRP018",8,0)
 ; #2056         $$GET1^DIQ(supported)
"RTN","RORRP018",9,0)
 ; #10104        $$UP^XLFSTR (supported)
"RTN","RORRP018",10,0)
 ;******************************************************************************
"RTN","RORRP018",11,0)
 ;******************************************************************************
"RTN","RORRP018",12,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORRP018",13,0)
 ;        
"RTN","RORRP018",14,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORRP018",15,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORRP018",16,0)
 ;ROR*1.5*17   DEC  2011   C RAY        Replaced call to LIST^DIC with FIND^DIC
"RTN","RORRP018",17,0)
 ;                                      Param FROM is not supported by FIND^DIC
"RTN","RORRP018",18,0)
 ;                                      Flag "B" is not supported by FIND^DIC
"RTN","RORRP018",19,0)
 ;******************************************************************************
"RTN","RORRP018",20,0)
 ;******************************************************************************
"RTN","RORRP018",21,0)
 Q
"RTN","RORRP018",22,0)
 ;
"RTN","RORRP018",23,0)
 ;***** RETURNS THE LIST OF LAB TESTS
"RTN","RORRP018",24,0)
 ; RPC: [ROR LIST LABORATORY TESTS]
"RTN","RORRP018",25,0)
 ;
"RTN","RORRP018",26,0)
 ; .RESULTS      Reference to a local variable where the results
"RTN","RORRP018",27,0)
 ;               are returned to.
"RTN","RORRP018",28,0)
 ;
"RTN","RORRP018",29,0)
 ; [SUBSCR]      List of the test subscripts (separated by commas)
"RTN","RORRP018",30,0)
 ;               to include. By default ($G(SUBSCR)=""), all tests
"RTN","RORRP018",31,0)
 ;               are retrieved.
"RTN","RORRP018",32,0)
 ;
"RTN","RORRP018",33,0)
 ; [PART]        The partial match restriction.
"RTN","RORRP018",34,0)
 ;
"RTN","RORRP018",35,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORRP018",36,0)
 ;                 B  Backwards. Traverses the index in the opposite
"RTN","RORRP018",37,0)
 ;                    direction of normal traversal
"RTN","RORRP018",38,0)
 ;                 P  Include panels (by default, the panels are
"RTN","RORRP018",39,0)
 ;                    excluded from the list)
"RTN","RORRP018",40,0)
 ;
"RTN","RORRP018",41,0)
 ; [NUMBER]      Maximum number of entries to return. A value of "*"
"RTN","RORRP018",42,0)
 ;               or no value in this parameter designates all entries.
"RTN","RORRP018",43,0)
 ;
"RTN","RORRP018",44,0)
 ; [FROM]        The index entry(s) from which to begin the list
"RTN","RORRP018",45,0)
 ;                 ^01: FromName
"RTN","RORRP018",46,0)
 ;                 ^02: FromIEN
"RTN","RORRP018",47,0)
 ;
"RTN","RORRP018",48,0)
 ;               For example, a FROM value of "AD" would list entries
"RTN","RORRP018",49,0)
 ;               following AD. You can use the 2-nd and 3-rd "^"-
"RTN","RORRP018",50,0)
 ;               pieces of the @RESULTS@(0) node to continue the
"RTN","RORRP018",51,0)
 ;               listing in the subsequent procedure calls.
"RTN","RORRP018",52,0)
 ;
"RTN","RORRP018",53,0)
 ;               NOTE: The FROM value itself is not included in
"RTN","RORRP018",54,0)
 ;                     the resulting list.
"RTN","RORRP018",55,0)
 ;
"RTN","RORRP018",56,0)
 ; See description of the LIST^DIC for more details about the
"RTN","RORRP018",57,0)
 ; PART, NUMBER and FROM parameters.
"RTN","RORRP018",58,0)
 ;
"RTN","RORRP018",59,0)
 ; Return Values:
"RTN","RORRP018",60,0)
 ;
"RTN","RORRP018",61,0)
 ; A negative value of the first "^"-piece of the RESULTS(0)
"RTN","RORRP018",62,0)
 ; indicates an error (see the RPCSTK^RORERR procedure for more
"RTN","RORRP018",63,0)
 ; details).
"RTN","RORRP018",64,0)
 ;
"RTN","RORRP018",65,0)
 ; Otherwise, number of lab tests and the value of the FROM
"RTN","RORRP018",66,0)
 ; parameter for the next procedure call are returned in the
"RTN","RORRP018",67,0)
 ; @RESULTS@(0) and the subsequent nodes of the global array
"RTN","RORRP018",68,0)
 ; contain the tests.
"RTN","RORRP018",69,0)
 ; 
"RTN","RORRP018",70,0)
 ; @RESULTS@(0)          Result Descriptor
"RTN","RORRP018",71,0)
 ;                         ^01: Number of tests
"RTN","RORRP018",72,0)
 ;                         ^02: FromName
"RTN","RORRP018",73,0)
 ;                         ^03: FromIEN
"RTN","RORRP018",74,0)
 ;
"RTN","RORRP018",75,0)
 ; @RESULTS@(i)          Lab Test
"RTN","RORRP018",76,0)
 ;                         ^01: IEN
"RTN","RORRP018",77,0)
 ;                         ^02: Test Name
"RTN","RORRP018",78,0)
 ;                         ^03: Subscript (internal)
"RTN","RORRP018",79,0)
 ;                         ^04: Panel {""|1}
"RTN","RORRP018",80,0)
 ;
"RTN","RORRP018",81,0)
 ;
"RTN","RORRP018",82,0)
LABTLIST(RESULTS,SUBSCR,PART,FLAGS,NUMBER,FROM) ;
"RTN","RORRP018",83,0)
 N BUF,I,RC,RORERRDL,RORMSG,RORSUBS,SCR,TMP
"RTN","RORRP018",84,0)
 D CLEAR^RORERR("LABTLIST^RORRP018",1)
"RTN","RORRP018",85,0)
 K RESULTS  S RESULTS=$$ALLOC^RORTMP()
"RTN","RORRP018",86,0)
 ;--- Check the parameters
"RTN","RORRP018",87,0)
 S SUBSCR=$$UP^XLFSTR($TR($G(SUBSCR)," "))
"RTN","RORRP018",88,0)
 F I=1:1  S TMP=$P(SUBSCR,",",I)  Q:TMP=""  S RORSUBS(TMP)=""
"RTN","RORRP018",89,0)
 S PART=$G(PART),FLAGS=$G(FLAGS)
"RTN","RORRP018",90,0)
 S NUMBER=$S($G(NUMBER)>0:+NUMBER,1:"*")
"RTN","RORRP018",91,0)
 ;--- Setup the start point  FROM is passed in and formatted but not used
"RTN","RORRP018",92,0)
 I $G(FROM)'=""  D  S FROM=$P(FROM,U)
"RTN","RORRP018",93,0)
 . S:$P(FROM,U,2)>0 FROM("IEN")=+$P(FROM,U,2)
"RTN","RORRP018",94,0)
 ;--- Compile the screen logic (be careful with naked references)
"RTN","RORRP018",95,0)
 S SCR=""
"RTN","RORRP018",96,0)
 D:$D(RORSUBS)>0
"RTN","RORRP018",97,0)
 . S SCR=SCR_"S D=$P($G(^(0)),U,4) I D'="""",$D(RORSUBS(D)) "
"RTN","RORRP018",98,0)
 S:FLAGS'["P" SCR=SCR_"I $O(^(2,0))'>0 "  ; Exclude panels
"RTN","RORRP018",99,0)
 ;--- Get the list of tests
"RTN","RORRP018",100,0)
 S BUF="@;.01;IX",TMP="PM"     ;"B" flag not supported
"RTN","RORRP018",101,0)
 D FIND^DIC(60,,BUF,TMP,PART,NUMBER,"B^D",SCR,,RESULTS,"RORMSG")
"RTN","RORRP018",102,0)
 I $G(DIERR)  D  D RPCSTK^RORERR(.RESULTS,RC)  Q
"RTN","RORRP018",103,0)
 . S RC=$$DBS^RORERR("RORMSG",-9,,,60)
"RTN","RORRP018",104,0)
 . D FREE^RORTMP(RESULTS)
"RTN","RORRP018",105,0)
 S RESULTS=$NA(@RESULTS@("DILIST"))
"RTN","RORRP018",106,0)
 ;--- Post processing
"RTN","RORRP018",107,0)
 D:FLAGS["P"
"RTN","RORRP018",108,0)
 . ;--- Mark the Lab panels
"RTN","RORRP018",109,0)
 . S I=0
"RTN","RORRP018",110,0)
 . F  S I=$O(@RESULTS@(I))  Q:I'>0  D
"RTN","RORRP018",111,0)
 . . S IEN=+$P(@RESULTS@(I,0),U)
"RTN","RORRP018",112,0)
 . . S TMP=$$GET1^DIQ(60,IEN_",","COUNT(#200)",,,"RORMSG")
"RTN","RORRP018",113,0)
 . . S:TMP>0 $P(@RESULTS@(I,0),U,4)=1
"RTN","RORRP018",114,0)
 ;--- Success
"RTN","RORRP018",115,0)
 S TMP=$G(@RESULTS@(0)),BUF=+$P(TMP,U)
"RTN","RORRP018",116,0)
 K @RESULTS@(0)
"RTN","RORRP018",117,0)
 S:$P(TMP,U,3) $P(BUF,U,2,3)=$G(FROM)_U_$G(FROM("IEN"))
"RTN","RORRP018",118,0)
 S @RESULTS@(0)=BUF
"RTN","RORRP018",119,0)
 Q
"RTN","RORUTL11")
0^7^B3560733^B3286551
"RTN","RORUTL11",1,0)
RORUTL11 ;HCIOFO/SG - ACCESS AND SECURITY UTILITIES ; 6/2/11 4:12pm
"RTN","RORUTL11",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**13,14,15,17**;Feb 17, 2006;Build 33
"RTN","RORUTL11",3,0)
 ;
"RTN","RORUTL11",4,0)
 ;******************************************************************************
"RTN","RORUTL11",5,0)
 ;******************************************************************************
"RTN","RORUTL11",6,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORUTL11",7,0)
 ;        
"RTN","RORUTL11",8,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORUTL11",9,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORUTL11",10,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added tag VERSRV to return an associated
"RTN","RORUTL11",11,0)
 ;                                      version to the GUI during RPC call ROR
"RTN","RORUTL11",12,0)
 ;                                      GET M VERSION
"RTN","RORUTL11",13,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   Updated version in tag VERSRV
"RTN","RORUTL11",14,0)
 ;
"RTN","RORUTL11",15,0)
 ;ROR*1.5*15   JUN 2011    C RAY        Updated version
"RTN","RORUTL11",16,0)
 ;
"RTN","RORUTL11",17,0)
 ;ROR*1.5*17   DEC 2011    C RAY        Updated version                                      
"RTN","RORUTL11",18,0)
 ;******************************************************************************
"RTN","RORUTL11",19,0)
 ; This routine uses the following IAs:
"RTN","RORUTL11",20,0)
 ;
"RTN","RORUTL11",21,0)
 ; #2055   $$ROOT^DILFD (supported)
"RTN","RORUTL11",22,0)
 ; #10013  ENALL^DIK (supported)
"RTN","RORUTL11",23,0)
 ;         
"RTN","RORUTL11",24,0)
 ;******************************************************************************
"RTN","RORUTL11",25,0)
 Q
"RTN","RORUTL11",26,0)
 ;
"RTN","RORUTL11",27,0)
 ;***** REBUILDS THE "ACL" CROSS-REFERENCE (USER ACCESS)
"RTN","RORUTL11",28,0)
 ;
"RTN","RORUTL11",29,0)
 ; Return Values:
"RTN","RORUTL11",30,0)
 ;       <0  Error code
"RTN","RORUTL11",31,0)
 ;        0  Ok
"RTN","RORUTL11",32,0)
 ;
"RTN","RORUTL11",33,0)
RNDXACL() ;
"RTN","RORUTL11",34,0)
 N DA,DIK,REGIEN,ROOT
"RTN","RORUTL11",35,0)
 S ROOT=$$ROOT^DILFD(798.1,,1)  K @ROOT@("ACL")
"RTN","RORUTL11",36,0)
 S REGIEN=0
"RTN","RORUTL11",37,0)
 F  S REGIEN=$O(@ROOT@(REGIEN))  Q:'REGIEN  D
"RTN","RORUTL11",38,0)
 . S DIK=$$ROOT^DILFD(798.118,","_REGIEN_","),DIK(1)=".01^ACL"
"RTN","RORUTL11",39,0)
 . S DA(1)=REGIEN  D ENALL^DIK
"RTN","RORUTL11",40,0)
 Q 0
"RTN","RORUTL11",41,0)
 ;
"RTN","RORUTL11",42,0)
 ;***** CHECKS IF THE RPC CAN BE CALLED BY THE CURRENT USER
"RTN","RORUTL11",43,0)
 ;
"RTN","RORUTL11",44,0)
 ; RPCNAME       Name of the RPC
"RTN","RORUTL11",45,0)
 ;
"RTN","RORUTL11",46,0)
 ; [REGIEN]      Registry IEN
"RTN","RORUTL11",47,0)
 ;
"RTN","RORUTL11",48,0)
 ; [FLAGS]       Flags that control the execution (can be combined):
"RTN","RORUTL11",49,0)
 ;                 A  Administrator Only
"RTN","RORUTL11",50,0)
 ;                 I  IRM Only
"RTN","RORUTL11",51,0)
 ;
"RTN","RORUTL11",52,0)
 ; Return Values:
"RTN","RORUTL11",53,0)
 ;       <0  Error code
"RTN","RORUTL11",54,0)
 ;        0  Ok
"RTN","RORUTL11",55,0)
 ;       >0  Access denied
"RTN","RORUTL11",56,0)
 ;
"RTN","RORUTL11",57,0)
RPCHECK(RPCNAME,REGIEN,FLAGS) ;
"RTN","RORUTL11",58,0)
 N ACCESS,KEY,RC
"RTN","RORUTL11",59,0)
 Q:$G(DUZ)'>0 $$ERROR^RORERR(-40,,,,"DUZ")
"RTN","RORUTL11",60,0)
 S FLAGS=$G(FLAGS),REGIEN=+$G(REGIEN)
"RTN","RORUTL11",61,0)
 ;---
"RTN","RORUTL11",62,0)
 S (ACCESS,RC)=0
"RTN","RORUTL11",63,0)
 D  Q:ACCESS 0
"RTN","RORUTL11",64,0)
 . I REGIEN  Q:$D(^ROR(798.1,"ACL",DUZ,REGIEN))<10
"RTN","RORUTL11",65,0)
 . E  Q:$D(^ROR(798.1,"ACL",DUZ))<10
"RTN","RORUTL11",66,0)
 . I FLAGS["I"  Q:'$D(^XUSEC("ROR VA IRM",DUZ))
"RTN","RORUTL11",67,0)
 . I FLAGS["A"  S RC=1,KEY=""  D  Q:RC
"RTN","RORUTL11",68,0)
 . . F  S KEY=$O(^ROR(798.1,"ACL",DUZ,REGIEN,KEY))  Q:KEY=""  D  Q:'RC
"RTN","RORUTL11",69,0)
 . . . I KEY?1"ROR"1.E  S:KEY["ADMIN" RC=0
"RTN","RORUTL11",70,0)
 . S ACCESS=1
"RTN","RORUTL11",71,0)
 ;---
"RTN","RORUTL11",72,0)
 D ACVIOLTN^RORLOG(X,$G(REGIEN),RPCNAME)
"RTN","RORUTL11",73,0)
 Q 1
"RTN","RORUTL11",74,0)
 ;
"RTN","RORUTL11",75,0)
 ;***** RETURNS SERVER VERSION
"RTN","RORUTL11",76,0)
 ;REMOTE PROCEDURE: ROR GET M VERSION
"RTN","RORUTL11",77,0)
 ;
"RTN","RORUTL11",78,0)
 ;The purpose of this RPC is to catch when the GUI executable has been
"RTN","RORUTL11",79,0)
 ;upgraded AND REQUIRES an associated M patch, but the M patch has not
"RTN","RORUTL11",80,0)
 ;been installed yet.
"RTN","RORUTL11",81,0)
 ;
"RTN","RORUTL11",82,0)
 ; VAL n.n.n represents the CCR package version and the m patch number that
"RTN","RORUTL11",83,0)
 ; contains the associated M changes that the GUI is expecting.
"RTN","RORUTL11",84,0)
 ;
"RTN","RORUTL11",85,0)
 ;NOTE TO CCR MAINTENANCE TEAM: For M changes made by the maintenance team,
"RTN","RORUTL11",86,0)
 ;the server version below should not be modified.  The only time the server
"RTN","RORUTL11",87,0)
 ;version should be modified is if the GUI was changed AND there were
"RTN","RORUTL11",88,0)
 ;associated M changes needed for it.
"RTN","RORUTL11",89,0)
 ;
"RTN","RORUTL11",90,0)
VERSRV(VAL) ;
"RTN","RORUTL11",91,0)
 S VAL="1.5.17"
"RTN","RORUTL11",92,0)
 Q
"RTN","RORX001")
0^6^B45889554^B43373564
"RTN","RORX001",1,0)
RORX001 ;HOIFO/SG,VAC - LIST OF REGISTRY PATIENTS ;4/16/09 11:53am
"RTN","RORX001",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,10,14,17**;Feb 17, 2006;Build 33
"RTN","RORX001",3,0)
 ;
"RTN","RORX001",4,0)
 ; This routine uses the following IAs:
"RTN","RORX001",5,0)
 ;
"RTN","RORX001",6,0)
 ; #2051         LIST^DIC (supported)
"RTN","RORX001",7,0)
 ; #2056         GET1^DIQ, GETS^DIQ (supported)
"RTN","RORX001",8,0)
 ; #10061        DEM^VADPT (supported)
"RTN","RORX001",9,0)
 ; #10103        FMADD^XLFDT (supported)
"RTN","RORX001",10,0)
 ;
"RTN","RORX001",11,0)
 ; This routine modified March 2009 to handle ICD9 Filter for Include
"RTN","RORX001",12,0)
 ;    or Exclude
"RTN","RORX001",13,0)
 Q
"RTN","RORX001",14,0)
 ;******************************************************************************
"RTN","RORX001",15,0)
 ;******************************************************************************
"RTN","RORX001",16,0)
 ;                       --- ROUTINE MODIFICATION LOG ---
"RTN","RORX001",17,0)
 ;        
"RTN","RORX001",18,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORX001",19,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORX001",20,0)
 ;ROR*1.5*14   APR  2011   A SAUNDERS   Added column and data for 'FIRSTDIAG'.
"RTN","RORX001",21,0)
 ;ROR*1.5*17   AUG  2011   C RAY        Added params 'CONFIRM_AFTER', 'CONFDT_AFTER' 
"RTN","RORX001",22,0)
 ;******************************************************************************
"RTN","RORX001",23,0)
 ;******************************************************************************
"RTN","RORX001",24,0)
 ;
"RTN","RORX001",25,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX001",26,0)
 ;
"RTN","RORX001",27,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX001",28,0)
 ;
"RTN","RORX001",29,0)
 ; Return Values:
"RTN","RORX001",30,0)
 ;       <0  Error code
"RTN","RORX001",31,0)
 ;        0  Ok
"RTN","RORX001",32,0)
 ;
"RTN","RORX001",33,0)
HEADER(PARTAG) ;
"RTN","RORX001",34,0)
 N COL,COLUMNS,HEADER,TMP
"RTN","RORX001",35,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX001",36,0)
 S COLUMNS=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORX001",37,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"NAME","PATIENTS")
"RTN","RORX001",38,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"HEADER","1")
"RTN","RORX001",39,0)
 D ADDATTR^RORTSK11(RORTSK,COLUMNS,"FOOTER","1")
"RTN","RORX001",40,0)
 S RORFLDS=".01"
"RTN","RORX001",41,0)
 ;--- Required columns
"RTN","RORX001",42,0)
 F COL="#","NAME"  D
"RTN","RORX001",43,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX001",44,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX001",45,0)
 ;--- Additional columns
"RTN","RORX001",46,0)
 F COL="DOD","CSSN","LAST4","SELRULES","SELDT","CONFDT","PENDCOMM","FIRSTDIAG"  D
"RTN","RORX001",47,0)
 . Q:'$$OPTCOL^RORXU006(COL)
"RTN","RORX001",48,0)
 . S TMP=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,COLUMNS)
"RTN","RORX001",49,0)
 . D ADDATTR^RORTSK11(RORTSK,TMP,"NAME",COL)
"RTN","RORX001",50,0)
 ;---
"RTN","RORX001",51,0)
 S:$$OPTCOL^RORXU006("CONFDT") RORFLDS=RORFLDS_";2"
"RTN","RORX001",52,0)
 S:$$OPTCOL^RORXU006("SELDT") RORFLDS=RORFLDS_";3.2"
"RTN","RORX001",53,0)
 S:$$OPTCOL^RORXU006("PENDCOMM") RORFLDS=RORFLDS_";12"
"RTN","RORX001",54,0)
 Q 0
"RTN","RORX001",55,0)
 ;
"RTN","RORX001",56,0)
 ;***** ADDS THE PATIENT DATA TO THE REPORT
"RTN","RORX001",57,0)
 ;
"RTN","RORX001",58,0)
 ; IENS          IENS of the patient's record in the registry
"RTN","RORX001",59,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX001",60,0)
 ;
"RTN","RORX001",61,0)
 ; Return Values:
"RTN","RORX001",62,0)
 ;       <0  Error code
"RTN","RORX001",63,0)
 ;        0  Ok
"RTN","RORX001",64,0)
 ;
"RTN","RORX001",65,0)
PATIENT(IENS,PARTAG) ;
"RTN","RORX001",66,0)
 N DFN,IATIME,NAME,RC,RORBUF,RORMSG,TMP,VA,VADM,VAHOW,VAROOT,PTAG
"RTN","RORX001",67,0)
 K RORMSG D GETS^DIQ(798,IENS,RORFLDS,"I","RORBUF","RORMSG")
"RTN","RORX001",68,0)
 Q:$G(RORMSG("DIERR")) $$DBS^RORERR("RORMSG",-9,,,798,IENS)
"RTN","RORX001",69,0)
 S DFN=$G(RORBUF(798,IENS,.01,"I"))
"RTN","RORX001",70,0)
 ;--- Load the demographic data
"RTN","RORX001",71,0)
 D DEM^VADPT
"RTN","RORX001",72,0)
 ;--- The <PATIENT> tag
"RTN","RORX001",73,0)
 S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,PARTAG,,DFN)
"RTN","RORX001",74,0)
 ;--- Patient Name
"RTN","RORX001",75,0)
 D ADDVAL^RORTSK11(RORTSK,"NAME",VADM(1),PTAG,1)
"RTN","RORX001",76,0)
 ;--- Date of Death
"RTN","RORX001",77,0)
 D:$$OPTCOL^RORXU006("DOD")
"RTN","RORX001",78,0)
 . S TMP=$$DATE^RORXU002(VADM(6)\1)
"RTN","RORX001",79,0)
 . D ADDVAL^RORTSK11(RORTSK,"DOD",TMP,PTAG,1)
"RTN","RORX001",80,0)
 ;--- Coded SSN
"RTN","RORX001",81,0)
 D:$$OPTCOL^RORXU006("CSSN")
"RTN","RORX001",82,0)
 . S TMP=$$XOR^RORUTL03($P(VADM(2),U))
"RTN","RORX001",83,0)
 . D ADDVAL^RORTSK11(RORTSK,"CSSN",TMP,PTAG,1)
"RTN","RORX001",84,0)
 ;--- Last 4 digits of the SSN
"RTN","RORX001",85,0)
 D:$$OPTCOL^RORXU006("LAST4")
"RTN","RORX001",86,0)
 . D ADDVAL^RORTSK11(RORTSK,"LAST4",VA("BID"),PTAG,2)
"RTN","RORX001",87,0)
 ;--- Selection Rules
"RTN","RORX001",88,0)
 I $$OPTCOL^RORXU006("SELRULES")  D  Q:RC<0 RC
"RTN","RORX001",89,0)
 . S RC=$$SELRULES(IENS,PTAG)
"RTN","RORX001",90,0)
 ;--- Date Selected for the Registry
"RTN","RORX001",91,0)
 D:$$OPTCOL^RORXU006("SELDT")
"RTN","RORX001",92,0)
 . S TMP=$$DATE^RORXU002($G(RORBUF(798,IENS,3.2,"I"))\1)
"RTN","RORX001",93,0)
 . D ADDVAL^RORTSK11(RORTSK,"SELDT",TMP,PTAG,1)
"RTN","RORX001",94,0)
 ;--- Date Confirmed in the Registry
"RTN","RORX001",95,0)
 D:$$OPTCOL^RORXU006("CONFDT")
"RTN","RORX001",96,0)
 . S TMP=$$DATE^RORXU002($G(RORBUF(798,IENS,2,"I"))\1)
"RTN","RORX001",97,0)
 . D ADDVAL^RORTSK11(RORTSK,"CONFDT",TMP,PTAG,1)
"RTN","RORX001",98,0)
 ;--- Pending Comment
"RTN","RORX001",99,0)
 D:$$OPTCOL^RORXU006("PENDCOMM")
"RTN","RORX001",100,0)
 . S TMP=$G(RORBUF(798,IENS,12,"I"))
"RTN","RORX001",101,0)
 . S TMP=$S($L(TMP)>0:TMP,1:"")
"RTN","RORX001",102,0)
 . D ADDVAL^RORTSK11(RORTSK,"PENDCOMM",TMP,PTAG,1)
"RTN","RORX001",103,0)
 ;--- First Healthcare Setting to Diagnose HIV
"RTN","RORX001",104,0)
 D:$$OPTCOL^RORXU006("FIRSTDIAG")
"RTN","RORX001",105,0)
 . K RORBUF,RORMSG D GETS^DIQ(799.4,IENS,12.08,"I","RORBUF","RORMSG")
"RTN","RORX001",106,0)
 . S TMP=$G(RORBUF(799.4,IENS,12.08,"I"))
"RTN","RORX001",107,0)
 . S TMP=$S($G(TMP)=1:"Yes",$G(TMP)=0:"No",$G(TMP)=9:"Unknown",1:"")
"RTN","RORX001",108,0)
 . D ADDVAL^RORTSK11(RORTSK,"FIRSTDIAG",$G(TMP),PTAG,1)
"RTN","RORX001",109,0)
 ;
"RTN","RORX001",110,0)
 Q 0
"RTN","RORX001",111,0)
 ;
"RTN","RORX001",112,0)
 ;***** COMPILES A LIST OF REGISTRY PATIENTS
"RTN","RORX001",113,0)
 ; REPORT CODE: 001
"RTN","RORX001",114,0)
 ;
"RTN","RORX001",115,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX001",116,0)
 ;
"RTN","RORX001",117,0)
 ; Return Values:
"RTN","RORX001",118,0)
 ;       <0  Error code
"RTN","RORX001",119,0)
 ;        0  Ok
"RTN","RORX001",120,0)
 ;
"RTN","RORX001",121,0)
REGPTLST(RORTSK) ;
"RTN","RORX001",122,0)
 N RORFLDS       ; Fields to load from the file #798
"RTN","RORX001",123,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX001",124,0)
 N RORREG        ; Registry IEN
"RTN","RORX001",125,0)
 ;
"RTN","RORX001",126,0)
 N BODY,CNT,ECNT,IEN,IENS,MODE,PTNAME,RC,REPORT,SFLAGS,TMP,XREFNODE
"RTN","RORX001",127,0)
 N RCC,FLAG,RORCDT,PARAMS
"RTN","RORX001",128,0)
 ;--- Root node of the report
"RTN","RORX001",129,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX001",130,0)
 Q:REPORT<0 REPORT
"RTN","RORX001",131,0)
 ;
"RTN","RORX001",132,0)
 ;--- Get and prepare the report parameters
"RTN","RORX001",133,0)
 S RORREG=$$PARAM^RORTSK01("REGIEN")
"RTN","RORX001",134,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,,,.SFLAGS)  Q:PARAMS<0 PARAMS
"RTN","RORX001",135,0)
 S SFLAGS=$TR(SFLAGS,"DG")
"RTN","RORX001",136,0)
 I '$$PARAM^RORTSK01("PATIENTS","CONFIRMED"),'$$PARAM^RORTSK01("PATIENTS","CONFIRM_AFTER") S SFLAGS=SFLAGS_"C"
"RTN","RORX001",137,0)
 S:'$$PARAM^RORTSK01("PATIENTS","PENDING") SFLAGS=SFLAGS_"G"
"RTN","RORX001",138,0)
 S RORCDT=$$PARAM^RORTSK01("PATIENTS","CONFDT_AFTER")
"RTN","RORX001",139,0)
 D ADDVAL^RORTSK11(RORTSK,"TYPE",SFLAGS,REPORT)
"RTN","RORX001",140,0)
 ;--- After date range
"RTN","RORX001",141,0)
 I RORCDT D
"RTN","RORX001",142,0)
 . S SFLAGS=SFLAGS_"P"
"RTN","RORX001",143,0)
 . S RORCDT=$$FMADD^XLFDT(RORCDT,1)  ;add one day
"RTN","RORX001",144,0)
 ;
"RTN","RORX001",145,0)
 ;--- Initialize constants and variables
"RTN","RORX001",146,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX001",147,0)
 S ECNT=0,XREFNODE=$NA(^RORDATA(798,"ARP",RORREG_"#"))
"RTN","RORX001",148,0)
 ;
"RTN","RORX001",149,0)
 ;--- The report header and list of patients
"RTN","RORX001",150,0)
 S RC=$$HEADER(REPORT)  Q:RC<0 RC
"RTN","RORX001",151,0)
 S BODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX001",152,0)
 D ADDATTR^RORTSK11(RORTSK,BODY,"TABLE","PATIENTS")
"RTN","RORX001",153,0)
 Q:BODY<0 BODY
"RTN","RORX001",154,0)
 ;
"RTN","RORX001",155,0)
 ;--- Browse through the registry records
"RTN","RORX001",156,0)
 S PTNAME="",(CNT,RC)=0
"RTN","RORX001",157,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX001",158,0)
 F  S PTNAME=$O(@XREFNODE@(PTNAME))  Q:PTNAME=""  D  Q:RC<0
"RTN","RORX001",159,0)
 . S IEN=0
"RTN","RORX001",160,0)
 . F  S IEN=$O(@XREFNODE@(PTNAME,IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX001",161,0)
 . . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX001",162,0)
 . . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX001",163,0)
 . . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX001",164,0)
 . . ;--- Check if the patient should be skipped
"RTN","RORX001",165,0)
 . . Q:$$SKIP^RORXU005(IEN,SFLAGS,RORCDT)
"RTN","RORX001",166,0)
 . .;--- Check the patient against the ICD9 Filter
"RTN","RORX001",167,0)
 . . S DFN=$$PTIEN^RORUTL01(+IENS)
"RTN","RORX001",168,0)
 . . S RCC=0
"RTN","RORX001",169,0)
 . . I FLAG'="ALL" D
"RTN","RORX001",170,0)
 . . . S RCC=$$ICD^RORXU010(DFN,RORREG)
"RTN","RORX001",171,0)
 . . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX001",172,0)
 . . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX001",173,0)
 . .;--- End of filter check
"RTN","RORX001",174,0)
 . . ;--- Process the registry record
"RTN","RORX001",175,0)
 . . I $$PATIENT(IENS,BODY)<0  S ECNT=ECNT+1  Q
"RTN","RORX001",176,0)
 ;---
"RTN","RORX001",177,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX001",178,0)
 ;
"RTN","RORX001",179,0)
 ;***** ADDS THE SELECTION RULES TO THE REPORT
"RTN","RORX001",180,0)
 ;
"RTN","RORX001",181,0)
 ; IENS          IENS of the patient's record in the registry
"RTN","RORX001",182,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX001",183,0)
 ;
"RTN","RORX001",184,0)
 ; Return Values:
"RTN","RORX001",185,0)
 ;       <0  Error code
"RTN","RORX001",186,0)
 ;        0  Ok
"RTN","RORX001",187,0)
 ;
"RTN","RORX001",188,0)
SELRULES(IENS,PARTAG) ;
"RTN","RORX001",189,0)
 N CNT,I,RORBUF,RORMSG,RT,SRLTAG,TMP
"RTN","RORX001",190,0)
 ;--- Load the list of selection rules
"RTN","RORX001",191,0)
 K RORMSG D LIST^DIC(798.01,","_IENS,"@;.01I;1I",,,,,"B",,,"RORBUF","RORMSG")
"RTN","RORX001",192,0)
 ;Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.01,IENS)
"RTN","RORX001",193,0)
 Q:$G(RORMSG("DIERR")) $$DBS^RORERR("RORMSG",-9,,,798.01,IENS)
"RTN","RORX001",194,0)
 ;--- The <SELRULES> ... </SELRULES> tags
"RTN","RORX001",195,0)
 S SRLTAG=$$ADDVAL^RORTSK11(RORTSK,"SELRULES",,PARTAG)
"RTN","RORX001",196,0)
 ;--- Add the selection rules to the report
"RTN","RORX001",197,0)
 S I="",CNT=0
"RTN","RORX001",198,0)
 F  S I=$O(RORBUF("DILIST","ID",I))  Q:I=""  D
"RTN","RORX001",199,0)
 . S RT=$$ADDVAL^RORTSK11(RORTSK,"RULE",,SRLTAG),CNT=CNT+1
"RTN","RORX001",200,0)
 . S TMP=$G(RORBUF("DILIST","ID",I,.01))
"RTN","RORX001",201,0)
 . K RORMSG S TMP=$$GET1^DIQ(798.2,TMP_",",4,,,"RORMSG")
"RTN","RORX001",202,0)
 . ;Q:$G(DIERR)!(TMP="")
"RTN","RORX001",203,0)
 . Q:$G(RORMSG("DIERR"))!(TMP="")
"RTN","RORX001",204,0)
 . D ADDATTR^RORTSK11(RORTSK,RT,"DESCR",TMP)
"RTN","RORX001",205,0)
 . S TMP=$$DATE^RORXU002($G(RORBUF("DILIST","ID",I,1))\1)
"RTN","RORX001",206,0)
 . D:TMP'="" ADDATTR^RORTSK11(RORTSK,RT,"DATE",TMP)
"RTN","RORX001",207,0)
 ;--- Add the default item if no selection rules have been found
"RTN","RORX001",208,0)
 D:CNT'>0
"RTN","RORX001",209,0)
 . S RT=$$ADDVAL^RORTSK11(RORTSK,"RULE",,SRLTAG)
"RTN","RORX001",210,0)
 . D ADDATTR^RORTSK11(RORTSK,RT,"DESCR","Manual Entry")
"RTN","RORX001",211,0)
 Q 0
"RTN","RORX021")
0^1^B9370835^n/a
"RTN","RORX021",1,0)
RORX021 ;BPOIFO/CLR - HCV DAA CANDIDATES REPORT ; 7/21/11 1:04pm
"RTN","RORX021",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**17**;;Build 33
"RTN","RORX021",3,0)
 ;
"RTN","RORX021",4,0)
 Q
"RTN","RORX021",5,0)
 ;
"RTN","RORX021",6,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX021",7,0)
 ;
"RTN","RORX021",8,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX021",9,0)
 ;
"RTN","RORX021",10,0)
 ; Return Values:
"RTN","RORX021",11,0)
 ;       <0  Error code
"RTN","RORX021",12,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX021",13,0)
 ;
"RTN","RORX021",14,0)
HEADER(PARTAG) ;
"RTN","RORX021",15,0)
 ;;PATIENTS(#,NAME,LAST4,STATUS,HCV_DATE,HCV,GT,FILL_DATE,FILL_MED)
"RTN","RORX021",16,0)
 ;
"RTN","RORX021",17,0)
 N HEADER,RC
"RTN","RORX021",18,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX021",19,0)
 Q:HEADER<0 HEADER
"RTN","RORX021",20,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX021",HEADER)
"RTN","RORX021",21,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX021",22,0)
 ;
"RTN","RORX021",23,0)
 ;***** COMPILES THE "POTENTIAL DAA CANDIDATES" REPORT
"RTN","RORX021",24,0)
 ; REPORT CODE: 021
"RTN","RORX021",25,0)
 ;
"RTN","RORX021",26,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORX021",27,0)
 ;
"RTN","RORX021",28,0)
 ; The ^TMP("RORX021",$J) global node is used by this function.
"RTN","RORX021",29,0)
 ;
"RTN","RORX021",30,0)
 ; ^TMP("RORX021",$J,
"RTN","RORX021",31,0)
 ;   "PAT",
"RTN","RORX021",32,0)
 ;     DFN,              Patient descriptor
"RTN","RORX021",33,0)
 ;                         ^01: Last 4 digits of SSN
"RTN","RORX021",34,0)
 ;                         ^02: Patient name
"RTN","RORX021",35,0)
 ;                         ^03: Treatment History
"RTN","RORX021",36,0)
 ;       "LR",
"RTN","RORX021",37,0)
 ;         Category,
"RTN","RORX021",38,0)
 ;           Date(inverse) = Result
"RTN","RORX021",39,0)
 ;            
"RTN","RORX021",40,0)
 ;       "RX",
"RTN","RORX021",41,0)
 ;         Date(inverse),
"RTN","RORX021",42,0)
 ;           Generic Drug Name,
"RTN","RORX021",43,0)
 ;             Drug IEN,
"RTN","RORX021",44,0)
 ;                RX #,
"RTN","RORX021",45,0)
 ;                   Count) = ""
"RTN","RORX021",46,0)
 ;
"RTN","RORX021",47,0)
 ; Return Values:
"RTN","RORX021",48,0)
 ;       <0  Error code
"RTN","RORX021",49,0)
 ;        0  Ok
"RTN","RORX021",50,0)
 ;
"RTN","RORX021",51,0)
HCVDAA(RORTSK) ;
"RTN","RORX021",52,0)
 N RORLTST       ; Closed root of the list of lab tests for the
"RTN","RORX021",53,0)
 ;               ; Lab search API
"RTN","RORX021",54,0)
 N RORREG        ; Registry IEN
"RTN","RORX021",55,0)
 N RORSDT       ; Pharmacy start date
"RTN","RORX021",56,0)
 N ROREDT       ; Pharmacy end date
"RTN","RORX021",57,0)
 N RORXGRP       ; List of drug groups
"RTN","RORX021",58,0)
 N RORXL         ; Closed root of the drug list for the pharmacy
"RTN","RORX021",59,0)
 ;               ; search API 
"RTN","RORX021",60,0)
 N ECNT,NSPT,RC,SFLAGS,TMP,BUF
"RTN","RORX021",61,0)
 N REPORT,PARAMS,ELEMENT  ;XML parent variables
"RTN","RORX021",62,0)
 ;
"RTN","RORX021",63,0)
 S (RORXL,RORLTST)="",(ECNT,RC)=0
"RTN","RORX021",64,0)
 K ^TMP("RORX021",$J)
"RTN","RORX021",65,0)
 ;--- Root node of the report
"RTN","RORX021",66,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX021",67,0)
 Q:REPORT<0 REPORT
"RTN","RORX021",68,0)
 ;
"RTN","RORX021",69,0)
 ;--- Get and prepare the report parameters
"RTN","RORX021",70,0)
 D
"RTN","RORX021",71,0)
 . S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX021",72,0)
 . S PARAMS=$$PARAMS^RORXU002(.RORTSK,REPORT,.RORXSDT,.RORXEDT,.SFLAGS)
"RTN","RORX021",73,0)
 . Q:PARAMS<0
"RTN","RORX021",74,0)
 . ;--- Get and store treatment history parameters
"RTN","RORX021",75,0)
 . M BUF=RORTSK("PARAMS","TREATMENT_HISTORY","A")  Q:$D(BUF)<10
"RTN","RORX021",76,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"TREATMENT_HISTORY",$$OPTXT^RORXU002(.BUF),PARAMS)
"RTN","RORX021",77,0)
 . I ELEMENT'>0  S RC=ELEMENT  Q
"RTN","RORX021",78,0)
 . S TMP=""
"RTN","RORX021",79,0)
 . F  S TMP=$O(BUF(TMP))  Q:TMP=""  D  Q:RC<0
"RTN","RORX021",80,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,TMP,BUF(TMP))
"RTN","RORX021",81,0)
 . ;--- Report header
"RTN","RORX021",82,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX021",83,0)
 . ;--- Query the registry
"RTN","RORX021",84,0)
 . D TPPSETUP^RORTSK01(80)
"RTN","RORX021",85,0)
 . S RC=$$QUERY^RORX021A(REPORT,SFLAGS,.NSPT)
"RTN","RORX021",86,0)
 . I RC Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX021",87,0)
 . ;--- Store the results
"RTN","RORX021",88,0)
 . D TPPSETUP^RORTSK01(20)
"RTN","RORX021",89,0)
 . S RC=$$STORE^RORX021A(REPORT,NSPT)
"RTN","RORX021",90,0)
 . I RC Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX021",91,0)
 ;
"RTN","RORX021",92,0)
 ;--- Cleanup
"RTN","RORX021",93,0)
 K ^TMP("RORX021",$J)
"RTN","RORX021",94,0)
 ;
"RTN","RORX021",95,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX021A")
0^2^B128932587^n/a
"RTN","RORX021A",1,0)
RORX021A ;BPOIFO/CLR - HCV DAA CANDIDATES(QUERY & STORE) ; 7/15/11 3:37pm
"RTN","RORX021A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**17**;;Build 33
"RTN","RORX021A",3,0)
 ;
"RTN","RORX021A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX021A",5,0)
 ;
"RTN","RORX021A",6,0)
 ; #10103 FMADD^XLFDT (supported)
"RTN","RORX021A",7,0)
 ; #10035 Direct read of the DOD field of the file #2 (supported)
"RTN","RORX021A",8,0)
 ; #10000 C^%DTC (supported)
"RTN","RORX021A",9,0)
 ; #10103 $$TRIM^XLFSTR (supported)
"RTN","RORX021A",10,0)
 ; #10103 $$UP^XLFSTR (supported)
"RTN","RORX021A",11,0)
 ;   
"RTN","RORX021A",12,0)
 ;******************************************************************************
"RTN","RORX021A",13,0)
 ;******************************************************************************
"RTN","RORX021A",14,0)
 ; 
"RTN","RORX021A",15,0)
 ;                                      
"RTN","RORX021A",16,0)
 ;******************************************************************************
"RTN","RORX021A",17,0)
 ;******************************************************************************
"RTN","RORX021A",18,0)
 Q
"RTN","RORX021A",19,0)
 ;
"RTN","RORX021A",20,0)
 ;***** LAB SEARCH CALLBACK
"RTN","RORX021A",21,0)
 ;
"RTN","RORX021A",22,0)
 ; .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX021A",23,0)
 ;
"RTN","RORX021A",24,0)
 ; INVDT         IEN of the Lab test (inverted date)
"RTN","RORX021A",25,0)
 ;
"RTN","RORX021A",26,0)
 ; .RESULT       Reference to a local variable, which contains
"RTN","RORX021A",27,0)
 ;               the result (see the $$LTSEARCH^RORUTL10).
"RTN","RORX021A",28,0)
 ;
"RTN","RORX021A",29,0)
 ; Return Values:
"RTN","RORX021A",30,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX021A",31,0)
 ;        0  Ok
"RTN","RORX021A",32,0)
 ;        1  Skip this result
"RTN","RORX021A",33,0)
 ;        2  Skip this and all remaining results
"RTN","RORX021A",34,0)
 ;
"RTN","RORX021A",35,0)
LTSCB(ROR8DST,INVDT,RESULT) ;
"RTN","RORX021A",36,0)
 N DATE,IEN,NAME,RC,TMP,VAL,CAT,SUB
"RTN","RORX021A",37,0)
 S IEN=+RESULT(2)           Q:IEN'>0 1   ; IEN of the Lab test
"RTN","RORX021A",38,0)
 S NAME=$P(RESULT(2),U,2)   Q:NAME="" 1  ; Name of the test
"RTN","RORX021A",39,0)
 S DATE=+$P(RESULT(1),U,1)  Q:DATE'>0 1  ; Date of the test
"RTN","RORX021A",40,0)
 S CAT=$P(RESULT(2),U,4)    Q:CAT="" 1   ; Category(lab group) of the test
"RTN","RORX021A",41,0)
 S VAL=$P(RESULT(1),U,3)    Q:VAL="" 1   ; Result of the test
"RTN","RORX021A",42,0)
 ;--- Skip if test is not in lab groups HepC GT, Quant, or Qual
"RTN","RORX021A",43,0)
 I CAT'="HepC GT",(CAT'="HepC Quant"),(CAT'="HepC Qual") Q 1
"RTN","RORX021A",44,0)
 ;=== Mark values as quantitative, qualitative or responded to treatment
"RTN","RORX021A",45,0)
 ;---  HCVQT=quant,HCVQL=qual,HCVOK=cured
"RTN","RORX021A",46,0)
 I CAT="HepC Quant"!(CAT="HepC Qual") D  Q:TMP 1
"RTN","RORX021A",47,0)
 . S TMP=0
"RTN","RORX021A",48,0)
 . S VAL=$$UP^XLFSTR(VAL)  ;convert to upper case
"RTN","RORX021A",49,0)
 . S VAL=$TR(VAL," ")  ;strip out all spaces
"RTN","RORX021A",50,0)
 . I VAL["POS" S SUB="HCVQL" Q
"RTN","RORX021A",51,0)
 . I $E(VAL,1,1)="P" S SUB="HCVQL" Q
"RTN","RORX021A",52,0)
 . I VAL["NEG" S SUB="HCVOK" Q
"RTN","RORX021A",53,0)
 . I VAL["NO" S SUB="HCVOK" Q
"RTN","RORX021A",54,0)
 . I $E(VAL,1,1)="N" S SUB="HCVOK" Q
"RTN","RORX021A",55,0)
 . I VAL["COMMENT"!(VAL["CANC")!(VAL["DNR")!(VAL["TNP") S TMP=1 Q
"RTN","RORX021A",56,0)
 . I +VAL=VAL,VAL<51 S TMP=1 Q  ;skip abnormally low values
"RTN","RORX021A",57,0)
 . I $$NUMERIC^RORUTL05($TR(VAL," >,GT")) S SUB="HCVQT" Q
"RTN","RORX021A",58,0)
 . I $$NUMERIC^RORUTL05($TR(VAL," <,LT")) S SUB="HCVOK" Q
"RTN","RORX021A",59,0)
 . S TMP=1
"RTN","RORX021A",60,0)
 S SUB=$S(CAT="HepC GT":"GT",1:SUB)
"RTN","RORX021A",61,0)
 ;--- Store the result
"RTN","RORX021A",62,0)
 S @ROR8DST@(SUB,DATE)=$P(RESULT(1),U,3)
"RTN","RORX021A",63,0)
 Q 0
"RTN","RORX021A",64,0)
 ;
"RTN","RORX021A",65,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX021A",66,0)
 ; REPORT        Parent IEN of report
"RTN","RORX021A",67,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX021A",68,0)
 ; .NSPT         Number of selected patients is returned here
"RTN","RORX021A",69,0)
 ;
"RTN","RORX021A",70,0)
 ; Return Values:
"RTN","RORX021A",71,0)
 ;       <0  Fatal error
"RTN","RORX021A",72,0)
 ;        0  Ok
"RTN","RORX021A",73,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX021A",74,0)
 ;
"RTN","RORX021A",75,0)
QUERY(REPORT,FLAGS,NSPT) ;
"RTN","RORX021A",76,0)
 N RORLDST       ; Descriptor for Lab search API
"RTN","RORX021A",77,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX021A",78,0)
 N RORXDST       ; Descriptor for pharmacy search API
"RTN","RORX021A",79,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX021A",80,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX021A",81,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX021A",82,0)
 N RORXCDT       ; User selected cut off date for registry meds
"RTN","RORX021A",83,0)
 N RORTS         ; User selected treatment status categories
"RTN","RORX021A",84,0)
 N RORXEDT       ; RX end date
"RTN","RORX021A",85,0)
 N RORXSDT       ; RX start date
"RTN","RORX021A",86,0)
 N RORTH         ; Patient treatment status (EXP=experienced, NAIVE=naive)
"RTN","RORX021A",87,0)
 ;
"RTN","RORX021A",88,0)
 N CNT,ECNT,IEN,IENS,LTEDT,LTSDT,PATIEN,RC,RXEDT,SKIP,TMP,UTEDT,UTIL,UTSDT,VA,VADM,XREFNODE
"RTN","RORX021A",89,0)
 N RCC,FLAG,HCV,GT,ROR1,ROR2,ROR3
"RTN","RORX021A",90,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX021A",91,0)
 S (CNT,ECNT,NSPT,RC)=0,(UTEDT,UTSDT)=0
"RTN","RORX021A",92,0)
 ;=== Set up parameters
"RTN","RORX021A",93,0)
 ;--- Utilization date range
"RTN","RORX021A",94,0)
 D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX021A",95,0)
 . S UTSDT=$$PARAM^RORTSK01("DATE_RANGE_3","START")\1
"RTN","RORX021A",96,0)
 . S UTEDT=$$PARAM^RORTSK01("DATE_RANGE_3","END")\1
"RTN","RORX021A",97,0)
 ;--- Number of patients in the registry
"RTN","RORX021A",98,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX021A",99,0)
 ;--- Set up Treatment status parameters
"RTN","RORX021A",100,0)
 F TMP="NAIVE","EXP","EXP_DAYS" D
"RTN","RORX021A",101,0)
 . S RORTS(TMP)=$$PARAM^RORTSK01("TREATMENT_HISTORY",TMP)
"RTN","RORX021A",102,0)
 ;--- Lab parameters
"RTN","RORX021A",103,0)
 S RORLDST("RORCB")="$$LTSCB^RORX021A"
"RTN","RORX021A",104,0)
 ;--- Labs date range
"RTN","RORX021A",105,0)
 S LTSDT=""
"RTN","RORX021A",106,0)
 S LTEDT=DT
"RTN","RORX021A",107,0)
 ;--- Shift the Labs end date
"RTN","RORX021A",108,0)
 S LTEDT=$$FMADD^XLFDT(LTEDT,1)
"RTN","RORX021A",109,0)
 ;== Pharm parameters
"RTN","RORX021A",110,0)
 S RORXDST("GENERIC")=1  ;only meds with generic name
"RTN","RORX021A",111,0)
 S RORXDST("RORCB")="$$RXOCB^RORX021A"   ;call back routine
"RTN","RORX021A",112,0)
 ;--- RX cut off date (inverse)/shift cut off back one day
"RTN","RORX021A",113,0)
 N X1,X2,X S X2=-(+RORTS("EXP_DAYS")+1),X1=DT D C^%DTC S RORXCDT=99999999-X
"RTN","RORX021A",114,0)
 ;--- RX start and end dates
"RTN","RORX021A",115,0)
 S RORXSDT=2000101  ;start date 1/1/1900
"RTN","RORX021A",116,0)
 S RORXEDT=DT
"RTN","RORX021A",117,0)
 ;--- RX list of HepC registry drugs
"RTN","RORX021A",118,0)
 S RORXL=$$ALLOC^RORTMP()
"RTN","RORX021A",119,0)
 S RC=$$DRUGLIST^RORUTL16(RORXL,+RORREG)
"RTN","RORX021A",120,0)
 ;--- Shift the Labs end date
"RTN","RORX021A",121,0)
 S RORXEDT=$$FMADD^XLFDT(RORXEDT\1,1)
"RTN","RORX021A",122,0)
 ;--- Set up Clinic/Division list parameters date_range_3
"RTN","RORX021A",123,0)
 S RORCDLIST=$$CDPARMS^RORXU001(.RORTSK,.RORCDSTDT,.RORCDENDT,1)
"RTN","RORX021A",124,0)
 ;--- Set up ICD9 parameters
"RTN","RORX021A",125,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX021A",126,0)
 ;=== Browse through the registry records
"RTN","RORX021A",127,0)
 S IEN=0
"RTN","RORX021A",128,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX021A",129,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX021A",130,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX021A",131,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX021A",132,0)
 . ;--- Get patient DFN
"RTN","RORX021A",133,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX021A",134,0)
 . I +$P($G(^DPT(PATIEN,.35)),U)>0 Q  ;patient has died
"RTN","RORX021A",135,0)
 . ;--- Check if the patient should be skipped based on standard filters
"RTN","RORX021A",136,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS,UTSDT,UTEDT)
"RTN","RORX021A",137,0)
 . ;--- Check if patient should be skipped because of ICD9 codes
"RTN","RORX021A",138,0)
 . S RCC=0
"RTN","RORX021A",139,0)
 . I FLAG'="ALL" D
"RTN","RORX021A",140,0)
 . . S RCC=$$ICD^RORXU010(PATIEN,RORREG)
"RTN","RORX021A",141,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX021A",142,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX021A",143,0)
 . ;
"RTN","RORX021A",144,0)
 . ;--- Check if patient should be skipped because of Clinic or Division 
"RTN","RORX021A",145,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,RORCDSTDT,RORCDENDT) Q
"RTN","RORX021A",146,0)
 . ;=== Check labs and meds
"RTN","RORX021A",147,0)
 . S SKIP=1,UTIL=0
"RTN","RORX021A",148,0)
 . D  I RC<0  S ECNT=ECNT+1,RC=0  Q
"RTN","RORX021A",149,0)
 . . S RORLDST=$NA(^TMP("RORX021",$J,"PAT",PATIEN,"LR"))
"RTN","RORX021A",150,0)
 . . S RC=$$LTSEARCH^RORUTL10(PATIEN,+RORREG,.RORLDST,,LTSDT,LTEDT)
"RTN","RORX021A",151,0)
 . . Q:RC'>0
"RTN","RORX021A",152,0)
 . . ;--- Skip if most recent GT result is not Genotype 1
"RTN","RORX021A",153,0)
 . . S TMP=+$O(@RORLDST@("GT","")) I TMP=0 S SKIP=1 Q
"RTN","RORX021A",154,0)
 . . I $G(@RORLDST@("GT",TMP))'[1 S SKIP=1 Q 
"RTN","RORX021A",155,0)
 . . ;=== Skip if patient no longer has HCV
"RTN","RORX021A",156,0)
 . . S ROR1=+$O(@RORLDST@("HCVOK","")),ROR2=+$O(@RORLDST@("HCVQL","")),ROR3=(+$O(@RORLDST@("HCVQT","")))
"RTN","RORX021A",157,0)
 . . I ROR1>0 D  Q:SKIP=1
"RTN","RORX021A",158,0)
 . . . ;--- Skip if date of most recent HCV test is normal
"RTN","RORX021A",159,0)
 . . . I (ROR1<ROR2),(ROR1<ROR3) S SKIP=1 Q
"RTN","RORX021A",160,0)
 . . . I (ROR1<ROR2),(ROR3=0) S SKIP=1 Q
"RTN","RORX021A",161,0)
 . . . I (ROR1<ROR3),(ROR2=0) S SKIP=1 Q
"RTN","RORX021A",162,0)
 . . . ;--- Skip if no qual or quant test
"RTN","RORX021A",163,0)
 . . . I ROR2+ROR3=0 S SKIP=1 Q
"RTN","RORX021A",164,0)
 . . . S SKIP=0
"RTN","RORX021A",165,0)
 . . ;--- Check if patient should be skipped because of user selected Treatment status
"RTN","RORX021A",166,0)
 . . S RORXDST=$NA(^TMP("RORX021",$J,"PAT",PATIEN,"RX"))
"RTN","RORX021A",167,0)
 . . S RC=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,"EIOV",RORXSDT,RORXEDT)
"RTN","RORX021A",168,0)
 . . Q:RC<0  ;error occurred
"RTN","RORX021A",169,0)
 . . I $G(RORXDST("SKIP")) S SKIP=1 K RORXDST("SKIP") Q  ;skip if taking DAA meds
"RTN","RORX021A",170,0)
 . . I RC>0,'+RORTS("EXP") S SKIP=1 Q  ; skip naive patients 
"RTN","RORX021A",171,0)
 . . I RC=0,'+RORTS("NAIVE") S SKIP=1 Q  ;skip experienced patients
"RTN","RORX021A",172,0)
 . . I RC>0,$O(@RORXDST@(RORXCDT),-1) S SKIP=1 Q  ;skip if patient has meds after cutoff
"RTN","RORX021A",173,0)
 . . ;--- Include patient 
"RTN","RORX021A",174,0)
 . . S RORTH=$S(RC>0:"EXP",RC=0:"NAIVE",1:"")
"RTN","RORX021A",175,0)
 . . S SKIP=0
"RTN","RORX021A",176,0)
 . ;--- Check if patient should be skipped because no utilization in the corresponding date range
"RTN","RORX021A",177,0)
 . I 'SKIP D:$$PARAM^RORTSK01("PATIENTS","CAREONLY")
"RTN","RORX021A",178,0)
 . . K TMP  S TMP("ALL")=1
"RTN","RORX021A",179,0)
 . . S UTIL=+$$UTIL^RORXU003(UTSDT,UTEDT,PATIEN,.TMP)
"RTN","RORX021A",180,0)
 . . S:'UTIL SKIP=1
"RTN","RORX021A",181,0)
 . ;
"RTN","RORX021A",182,0)
 . ;--- Skip the patient if not all selection criteria have been met
"RTN","RORX021A",183,0)
 . I SKIP K ^TMP("RORX021",$J,"PAT",PATIEN)  Q
"RTN","RORX021A",184,0)
 . ;
"RTN","RORX021A",185,0)
 . ;--- Get and store the patient's data  last4^name^treatment status
"RTN","RORX021A",186,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX021A",187,0)
 . S ^TMP("RORX021",$J,"PAT",PATIEN)=VA("BID")_U_VADM(1)_U_RORTH
"RTN","RORX021A",188,0)
 . S NSPT=NSPT+1   ;increment count of selected patients
"RTN","RORX021A",189,0)
 ;
"RTN","RORX021A",190,0)
 D FREE^RORTMP(RORXL)  ;clean up drug list
"RTN","RORX021A",191,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX021A",192,0)
 ;
"RTN","RORX021A",193,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX021A",194,0)
 ;
"RTN","RORX021A",195,0)
 ;
"RTN","RORX021A",196,0)
 ;                .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX021A",197,0)
 ;
"RTN","RORX021A",198,0)
 ;
"RTN","RORX021A",199,0)
 ;                 ORDER         Order number (from condensed list)
"RTN","RORX021A",200,0)
 ;
"RTN","RORX021A",201,0)
 ;                 FLAGS         Flags describing the order to be
"RTN","RORX021A",202,0)
 ;                               processed.
"RTN","RORX021A",203,0)
 ;
"RTN","RORX021A",204,0)
 ;                 DRUG          Dispensed drug
"RTN","RORX021A",205,0)
 ;                                 ^01: Drug IEN in file #50
"RTN","RORX021A",206,0)
 ;                                 ^02: Drug name
"RTN","RORX021A",207,0)
 ;
"RTN","RORX021A",208,0)
 ;                 DATE          Order date (issue date for outpatient
"RTN","RORX021A",209,0)
 ;                               drugs or start date for inpatient)
"RTN","RORX021A",210,0)
 ;
"RTN","RORX021A",211,0)
 ;Return Values:
"RTN","RORX021A",212,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX021A",213,0)
 ;        0  Ok
"RTN","RORX021A",214,0)
 ;        1  Skip this result
"RTN","RORX021A",215,0)
 ;        2  Skip this and all remaining results
"RTN","RORX021A",216,0)
 ;
"RTN","RORX021A",217,0)
RXOCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX021A",218,0)
 N DRUGIEN,DRUGNAME,IEN,IRP,OFD,RPSUB,RXBUF,RXCNT,RXNUM,TMP
"RTN","RORX021A",219,0)
 ;--- Skip med if med does not have a generic name
"RTN","RORX021A",220,0)
 I ROR8DST("GENERIC")  D
"RTN","RORX021A",221,0)
 . S DRUGIEN=+ROR8DST("RORXGEN"),DRUGNAME=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX021A",222,0)
 E  Q 1
"RTN","RORX021A",223,0)
 Q:(DRUGIEN'>0)!(DRUGNAME="") 1
"RTN","RORX021A",224,0)
 ;--- Skip patient if med is DAA med
"RTN","RORX021A",225,0)
 I DRUGNAME="BOCEPREVIR"!(DRUGNAME="TELAPREVIR") S ROR8DST("SKIP")=1 Q 2
"RTN","RORX021A",226,0)
 ;--- Process the order
"RTN","RORX021A",227,0)
 S TMP=$G(^TMP("PS",$J,"RXN",0))
"RTN","RORX021A",228,0)
 S RXNUM=$P(TMP,U)  S:RXNUM="" RXNUM=" "
"RTN","RORX021A",229,0)
 S RXCNT=0
"RTN","RORX021A",230,0)
 ;--- Original prescription
"RTN","RORX021A",231,0)
 I ORDFLG["I"  D  ;--- Inpatient
"RTN","RORX021A",232,0)
 . S OFD=$P($G(^TMP("PS",$J,0)),U,5)         ; Start Date
"RTN","RORX021A",233,0)
 . S RXCNT=RXCNT+1
"RTN","RORX021A",234,0)
 . S @ROR8DST@((99999999-OFD),DRUGNAME,DRUGIEN,RXNUM,RXCNT)=""
"RTN","RORX021A",235,0)
 E  D             ;--- Outpatient
"RTN","RORX021A",236,0)
 . S OFD=+$P($G(^TMP("PS",$J,"RXN",0)),U,6)  ; Original Fill Date
"RTN","RORX021A",237,0)
 . Q:(OFD<ROR8DST("RORSDT"))!(OFD'<ROR8DST("ROREDT"))
"RTN","RORX021A",238,0)
 . S RXCNT=RXCNT+1
"RTN","RORX021A",239,0)
 . S @ROR8DST@((99999999-OFD),DRUGNAME,DRUGIEN,RXNUM,RXCNT)=""
"RTN","RORX021A",240,0)
 ;--- Refills and partials
"RTN","RORX021A",241,0)
 F RPSUB="REF","PAR"  D
"RTN","RORX021A",242,0)
 . S $P(RXBUF,U)=$E(RPSUB,1)
"RTN","RORX021A",243,0)
 . S IRP=0
"RTN","RORX021A",244,0)
 . F  S IRP=$O(^TMP("PS",$J,RPSUB,IRP))  Q:IRP'>0  D
"RTN","RORX021A",245,0)
 . . S TMP=$G(^TMP("PS",$J,RPSUB,IRP,0))
"RTN","RORX021A",246,0)
 . . I TMP>0  S RXCNT=RXCNT+1,TMP=99999999-TMP  D
"RTN","RORX021A",247,0)
 . . . S @ROR8DST@(+TMP,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=""
"RTN","RORX021A",248,0)
 Q 0
"RTN","RORX021A",249,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX021A",250,0)
 ;
"RTN","RORX021A",251,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX021A",252,0)
 ; NSPT          Number of selected patients
"RTN","RORX021A",253,0)
 ;
"RTN","RORX021A",254,0)
 ; Return Values:
"RTN","RORX021A",255,0)
 ;       <0  Error code
"RTN","RORX021A",256,0)
 ;        0  Ok
"RTN","RORX021A",257,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX021A",258,0)
 ;
"RTN","RORX021A",259,0)
STORE(REPORT,NSPT) ;
"RTN","RORX021A",260,0)
 N RORFDT        ;med fill date
"RTN","RORX021A",261,0)
 N RORLBG        ;lab test type (GT, HCVQT,HCVQL)
"RTN","RORX021A",262,0)
 N RORLVAL       ;lab value
"RTN","RORX021A",263,0)
 N RORRX         ;med name
"RTN","RORX021A",264,0)
 N RORSTNAM      ;
"RTN","RORX021A",265,0)
 N RORLDST
"RTN","RORX021A",266,0)
 N RORXDST
"RTN","RORX021A",267,0)
 N RORBODY,PTAG  ;parent iens
"RTN","RORX021A",268,0)
 N CNT,DATE,DFN,ECNT,IEN,LAST4,LTLST,NAME,NODE,PTCNT,PTLST,PTNAME,RC,RXLST,TMP,VAL,THIST
"RTN","RORX021A",269,0)
 N GT,HCVQT,HCV,HCVQL
"RTN","RORX021A",270,0)
 S (ECNT,RC)=0,(LTLST,PTLST,RXLST)=-1
"RTN","RORX021A",271,0)
 ;--- Create 'patients' table
"RTN","RORX021A",272,0)
 S RORBODY=$$ADDVAL^RORTSK11(RORTSK,"PATIENTS",,REPORT)
"RTN","RORX021A",273,0)
 D ADDATTR^RORTSK11(RORTSK,RORBODY,"TABLE","PATIENTS")
"RTN","RORX021A",274,0)
 S (CNT,DFN,PTCNT)=0
"RTN","RORX021A",275,0)
 F  S DFN=$O(^TMP("RORX021",$J,"PAT",DFN))  Q:DFN'>0  D  Q:RC<0
"RTN","RORX021A",276,0)
 . S TMP=$S(NSPT>0:CNT/NSPT,1:"")
"RTN","RORX021A",277,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX021A",278,0)
 . S CNT=CNT+1,NODE=$NA(^TMP("RORX021",$J,"PAT",DFN))
"RTN","RORX021A",279,0)
 . ;--- Patient's data
"RTN","RORX021A",280,0)
 . S TMP=$G(@NODE)
"RTN","RORX021A",281,0)
 . S LAST4=$P(TMP,U),PTNAME=$P(TMP,U,2),THIST=$P(TMP,U,3)
"RTN","RORX021A",282,0)
 . ;--- get lab results
"RTN","RORX021A",283,0)
 . S RORLDST=$NA(^TMP("RORX021",$J,"PAT",DFN,"LR"))
"RTN","RORX021A",284,0)
 . S RORXDST=$NA(^TMP("RORX021",$J,"PAT",DFN,"RX"))
"RTN","RORX021A",285,0)
 . ;--- Gets most recent result for HepC Qual, HepC Quant and GT
"RTN","RORX021A",286,0)
 . ;    HCVQT=date of most recent quanitative test^result
"RTN","RORX021A",287,0)
 . ;    HCVQL=date of most recent qualitative test^result
"RTN","RORX021A",288,0)
 . ;    GT=date of most recent GT test^result
"RTN","RORX021A",289,0)
 . K HCVQT,HCVQL,GT
"RTN","RORX021A",290,0)
 . F RORLBG="HCVQT","HCVQL","GT" D
"RTN","RORX021A",291,0)
 . . S NODE=RORLBG,@NODE="^"
"RTN","RORX021A",292,0)
 . . S RORFDT=$O(@RORLDST@(RORLBG,""))
"RTN","RORX021A",293,0)
 . . Q:RORFDT=""
"RTN","RORX021A",294,0)
 . . S RORLVAL=$G(@RORLDST@(RORLBG,RORFDT))
"RTN","RORX021A",295,0)
 . . S RORFDT=9999999-RORFDT
"RTN","RORX021A",296,0)
 . . S RORFDT=RORFDT\1  ;strip time  
"RTN","RORX021A",297,0)
 . . S @NODE=(RORFDT)_U_RORLVAL
"RTN","RORX021A",298,0)
 . ;--- get most recent registry med if experienced
"RTN","RORX021A",299,0)
 . ;--- if more than one med give preference to INTERFERON
"RTN","RORX021A",300,0)
 . S RORFDT=$O(@RORXDST@("")),RORRX=""
"RTN","RORX021A",301,0)
 . I THIST="EXP" D
"RTN","RORX021A",302,0)
 . . S RORSTNAM="",RORRX=""
"RTN","RORX021A",303,0)
 . . F  S RORSTNAM=$O(@RORXDST@(RORFDT,RORSTNAM)) Q:RORSTNAM=""  D
"RTN","RORX021A",304,0)
 . . . S RORRX=$S(RORRX="":RORSTNAM,RORRX["INTERFERON":RORRX,1:RORSTNAM)
"RTN","RORX021A",305,0)
 . . S RORFDT=99999999-RORFDT
"RTN","RORX021A",306,0)
 . . S RORFDT=RORFDT\1
"RTN","RORX021A",307,0)
 . S PTAG=$$ADDVAL^RORTSK11(RORTSK,"PATIENT",,RORBODY,,DFN)
"RTN","RORX021A",308,0)
 . ;--- give preference to quant result over qual result
"RTN","RORX021A",309,0)
 . S HCV=$S(+$G(HCVQL)>+$G(HCVQT):HCVQL,$G(HCVQT):HCVQT,1:"")
"RTN","RORX021A",310,0)
 . ;--- store
"RTN","RORX021A",311,0)
 . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,PTAG,1)
"RTN","RORX021A",312,0)
 . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,PTAG,2)
"RTN","RORX021A",313,0)
 . D ADDVAL^RORTSK11(RORTSK,"STATUS",THIST,PTAG,1)
"RTN","RORX021A",314,0)
 . D ADDVAL^RORTSK11(RORTSK,"HCV_DATE",$P(HCV,U),PTAG,1)
"RTN","RORX021A",315,0)
 . D ADDVAL^RORTSK11(RORTSK,"HCV",$P(HCV,U,2),PTAG,3)
"RTN","RORX021A",316,0)
 . D ADDVAL^RORTSK11(RORTSK,"GT",$P(GT,U,2),PTAG,1)
"RTN","RORX021A",317,0)
 . D ADDVAL^RORTSK11(RORTSK,"FILL_DATE",RORFDT,PTAG,1)
"RTN","RORX021A",318,0)
 . D ADDVAL^RORTSK11(RORTSK,"FILL_MED",RORRX,PTAG,1)
"RTN","RORX021A",319,0)
 . S PTCNT=PTCNT+1
"RTN","RORX021A",320,0)
 ;--- Inactivate the patient list tag if the list is empty
"RTN","RORX021A",321,0)
 D:PTCNT'>0 UPDVAL^RORTSK11(RORTSK,PTLST,,,1)
"RTN","RORX021A",322,0)
 ;---
"RTN","RORX021A",323,0)
 Q ECNT
"RTN","RORX022")
0^3^B14560975^n/a
"RTN","RORX022",1,0)
RORX022 ;BPOIFO/CLR - LAB DAA MONITOR REPORT ;4/9/09 9:40am
"RTN","RORX022",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**17**;;Build 33
"RTN","RORX022",3,0)
 ;
"RTN","RORX022",4,0)
 ;
"RTN","RORX022",5,0)
 Q
"RTN","RORX022",6,0)
 ;
"RTN","RORX022",7,0)
 ;***** OUTPUTS THE REPORT HEADER
"RTN","RORX022",8,0)
 ;
"RTN","RORX022",9,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX022",10,0)
 ;
"RTN","RORX022",11,0)
 ; Return Values:
"RTN","RORX022",12,0)
 ;       <0  Error code
"RTN","RORX022",13,0)
 ;       >0  IEN of the HEADER element
"RTN","RORX022",14,0)
 ;
"RTN","RORX022",15,0)
HEADER(PARTAG) ;
"RTN","RORX022",16,0)
 ;;DRUGS(#,NAME,LAST4,DAA_FILL,FILL_DATE,RXNAME,DAYSPLY)
"RTN","RORX022",17,0)
 ;;LABTESTS(#,NAME,LAST4,DAA_FILL,DATE,LTNAME,RESULT,WKS_LAB)
"RTN","RORX022",18,0)
 ;;PATIENTS(#,NAME,LAST4)
"RTN","RORX022",19,0)
 ;
"RTN","RORX022",20,0)
 N HEADER,RC
"RTN","RORX022",21,0)
 S HEADER=$$HEADER^RORXU002(.RORTSK,PARTAG)
"RTN","RORX022",22,0)
 Q:HEADER<0 HEADER
"RTN","RORX022",23,0)
 S RC=$$TBLDEF^RORXU002("HEADER^RORX022",HEADER)
"RTN","RORX022",24,0)
 Q $S(RC<0:RC,1:HEADER)
"RTN","RORX022",25,0)
 ;
"RTN","RORX022",26,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORX022",27,0)
 ;
"RTN","RORX022",28,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORX022",29,0)
 ;
"RTN","RORX022",30,0)
 ; [.STDT]       Start and end dates of the report
"RTN","RORX022",31,0)
 ; [.ENDT]       are returned via these parameters
"RTN","RORX022",32,0)
 ;
"RTN","RORX022",33,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are
"RTN","RORX022",34,0)
 ;               returned via this parameter
"RTN","RORX022",35,0)
 ;
"RTN","RORX022",36,0)
 ; Return Values:
"RTN","RORX022",37,0)
 ;       <0  Error code
"RTN","RORX022",38,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORX022",39,0)
 ;
"RTN","RORX022",40,0)
PARAMS(PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORX022",41,0)
 N PARAMS,TMP,ELEMENT
"RTN","RORX022",42,0)
 S PARAMS=$$PARAMS^RORXU002(.RORTSK,PARTAG,.STDT,.ENDT,.FLAGS)
"RTN","RORX022",43,0)
 Q:PARAMS<0 PARAMS
"RTN","RORX022",44,0)
 ;report specific parameters
"RTN","RORX022",45,0)
 S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"WEEKS_AFTER",$$PARAM^RORTSK01("WEEKS_AFTER"),PARAMS)
"RTN","RORX022",46,0)
 Q:ELEMENT<0 ELEMENT
"RTN","RORX022",47,0)
 I $$PARAM^RORTSK01("WEEKS_AFTER","MOST_RECENT") D
"RTN","RORX022",48,0)
 . D ADDATTR^RORTSK11(RORTSK,ELEMENT,"MOST_RECENT",$$PARAM^RORTSK01("WEEKS_AFTER","MOST_RECENT"))
"RTN","RORX022",49,0)
 ;--- Process the list of Lab tests
"RTN","RORX022",50,0)
 D  Q:TMP<0 TMP
"RTN","RORX022",51,0)
 . S TMP=$$LTLST^RORXU006(.RORTSK,PARAMS,.RORLTST,"RORLTRV")
"RTN","RORX022",52,0)
 Q PARAMS
"RTN","RORX022",53,0)
 ;
"RTN","RORX022",54,0)
 ;
"RTN","RORX022",55,0)
 ;***** COMPILES THE "DAA LAB MONITOR" REPORT
"RTN","RORX022",56,0)
 ; REPORT CODE: 022
"RTN","RORX022",57,0)
 ;
"RTN","RORX022",58,0)
 ;INPUT
"RTN","RORX022",59,0)
 ;  .RORTSK     Task number and task parameters
"RTN","RORX022",60,0)
 ;
"RTN","RORX022",61,0)
 ;  Below is a sample RORTSK input array for utilization in 2003, most recent
"RTN","RORX022",62,0)
 ;  scores, BMI range from 30 to 45:
"RTN","RORX022",63,0)
 ;
"RTN","RORX022",64,0)
 ;  RORTSK=nnn   (task number)
"RTN","RORX022",65,0)
 ;  RORTSK("EP")="$$DAAMON^RORX022"
"RTN","RORX022",66,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","END")=3031231
"RTN","RORX022",67,0)
 ;  RORTSK("PARAMS","DATE_RANGE_3","A","START")=3030101
"RTN","RORX022",68,0)
 ;  RORTSK("PARAMS","ICD9FILT","A","FILTER")="ALL"
"RTN","RORX022",69,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1)=""
"RTN","RORX022",70,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"H")=45
"RTN","RORX022",71,0)
 ;  RORTSK("PARAMS","LRGRANGES","C",1,"L")=30
"RTN","RORX022",72,0)
 ;  RORTSK("PARAMS","OPTIONS","A","COMPLETE")=1
"RTN","RORX022",73,0)
 ;  RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX022",74,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_AFTER")=1
"RTN","RORX022",75,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_BEFORE")=1
"RTN","RORX022",76,0)
 ;  RORTSK("PARAMS","PATIENTS","A","DE_DURING")=1
"RTN","RORX022",77,0)
 ;  RORTSK("PARAMS","REGIEN")=1
"RTN","RORX022",78,0)
 ;
"RTN","RORX022",79,0)
 ;  If the user selected an 'as of' date = 12/31/2005:
"RTN","RORX022",80,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MOST_RECENT")=1
"RTN","RORX022",81,0)
 ;  is replaced with:  
"RTN","RORX022",82,0)
 ;     RORTSK("PARAMS","OPTIONS","A","MAX_DATE")=3051231
"RTN","RORX022",83,0)
 ;
"RTN","RORX022",84,0)
 ;
"RTN","RORX022",85,0)
 ; The ^TMP("RORX022",$J) global node is used by this function.
"RTN","RORX022",86,0)
 ;
"RTN","RORX022",87,0)
 ; ^TMP("RORX022",$J,
"RTN","RORX022",88,0)
 ;   "PAT",
"RTN","RORX022",89,0)
 ;     DFN,              Patient descriptor
"RTN","RORX022",90,0)
 ;                         ^01: Last 4 digits of SSN
"RTN","RORX022",91,0)
 ;                         ^02: Patient name
"RTN","RORX022",92,0)
 ;                         ^03: Date of 1st DAA fill
"RTN","RORX022",93,0)
 ;       "LR",
"RTN","RORX022",94,0)
 ;         TestName,
"RTN","RORX022",95,0)
 ;          TestIEN
"RTN","RORX022",96,0)
 ;            Inv Date)  Result
"RTN","RORX022",97,0)
 ;                         ^01:  Test result
"RTN","RORX022",98,0)
 ;                         ^02:  # wks since 1st DAA fill
"RTN","RORX022",99,0)
 ;       "RX",
"RTN","RORX022",100,0)
 ;         Inv Date,
"RTN","RORX022",101,0)
 ;           DrugName,
"RTN","RORX022",102,0)
 ;             DrugIEN,
"RTN","RORX022",103,0)
 ;               RX#,
"RTN","RORX022",104,0)
 ;                 Index)Days Supply
"RTN","RORX022",105,0)
 ;                         ^05:Days Supply           
"RTN","RORX022",106,0)
 ;
"RTN","RORX022",107,0)
 ; Return Values:
"RTN","RORX022",108,0)
 ;       <0  Error code
"RTN","RORX022",109,0)
 ;        0  Ok
"RTN","RORX022",110,0)
 ;
"RTN","RORX022",111,0)
DAAMON(RORTSK) ;
"RTN","RORX022",112,0)
 N RORLTST       ; Closed root of the list of lab tests for the
"RTN","RORX022",113,0)
 ;               ; Lab search API
"RTN","RORX022",114,0)
 N RORLTRV       ; Closed root of the list of lab tests with ranges
"RTN","RORX022",115,0)
 N RORREG        ; Registry IEN
"RTN","RORX022",116,0)
 N RORXEDT       ; Pharmacy end date
"RTN","RORX022",117,0)
 N RORXL         ; Closed root of the drug list for the pharmacy
"RTN","RORX022",118,0)
 ;               ; search API or "*" if all drugs were selected
"RTN","RORX022",119,0)
 N RORXSDT       ; Pharmacy start date
"RTN","RORX022",120,0)
 N LTMREC        ; Baseline result request
"RTN","RORX022",121,0)
 ;
"RTN","RORX022",122,0)
 N ECNT,NSPT,RC,REPORT,SFLAGS,TMP
"RTN","RORX022",123,0)
 S (RORXL,RORLTST)="",(ECNT,RC)=0
"RTN","RORX022",124,0)
 K ^TMP("RORX022",$J)
"RTN","RORX022",125,0)
 ;--- Root node of the report
"RTN","RORX022",126,0)
 S REPORT=$$ADDVAL^RORTSK11(RORTSK,"REPORT")
"RTN","RORX022",127,0)
 Q:REPORT<0 REPORT
"RTN","RORX022",128,0)
 ;
"RTN","RORX022",129,0)
 D
"RTN","RORX022",130,0)
 . ;--- Get and prepare the report parameters
"RTN","RORX022",131,0)
 . S RORREG=$$PARAM^RORTSK01("REGIEN")  ; Registry IEN
"RTN","RORX022",132,0)
 . S RC=$$PARAMS(REPORT,.RORXSDT,.RORXEDT,.SFLAGS)  Q:RC<0
"RTN","RORX022",133,0)
 . ;--- Report header
"RTN","RORX022",134,0)
 . S RC=$$HEADER(REPORT)  Q:RC<0
"RTN","RORX022",135,0)
 . ;--- Query the registry
"RTN","RORX022",136,0)
 . D TPPSETUP^RORTSK01(80)
"RTN","RORX022",137,0)
 . S RC=$$QUERY^RORX022A(SFLAGS,.RORTSK,.NSPT)
"RTN","RORX022",138,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX022",139,0)
 . ;--- Store the results
"RTN","RORX022",140,0)
 . D TPPSETUP^RORTSK01(20)
"RTN","RORX022",141,0)
 . S RC=$$STORE^RORX022A(REPORT,.RORTSK,NSPT)
"RTN","RORX022",142,0)
 . I RC  Q:RC<0  S ECNT=ECNT+RC
"RTN","RORX022",143,0)
 ;
"RTN","RORX022",144,0)
 K ^TMP("RORX022",$J)
"RTN","RORX022",145,0)
 D FREE^RORTMP(RORLTST)
"RTN","RORX022",146,0)
 ;
"RTN","RORX022",147,0)
 Q $S(RC<0:RC,ECNT>0:-43,1:0)
"RTN","RORX022A")
0^4^B125489130^n/a
"RTN","RORX022A",1,0)
RORX022A ;BPOIFO/CLR LAB DAA MONITOR (CONT.) ; 8/2/11 3:08pm
"RTN","RORX022A",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**8,13,17**;Feb 17, 2006;Build 33
"RTN","RORX022A",3,0)
 ;
"RTN","RORX022A",4,0)
 ; This routine uses the following IAs:
"RTN","RORX022A",5,0)
 ;
"RTN","RORX022A",6,0)
 ; #10103 FMADD^XLFDT (supported)
"RTN","RORX022A",7,0)
 ; #10103 FMDIFF^XLFDT (supported)
"RTN","RORX022A",8,0)
 ; #10035 Direct read of the DOD field of the file #2
"RTN","RORX022A",9,0)
 ; #10000 C^%DTC (supported)
"RTN","RORX022A",10,0)
 ;   
"RTN","RORX022A",11,0)
 ;******************************************************************************
"RTN","RORX022A",12,0)
 Q
"RTN","RORX022A",13,0)
 ;
"RTN","RORX022A",14,0)
 ;***** LAB SEARCH CALLBACK
"RTN","RORX022A",15,0)
 ;
"RTN","RORX022A",16,0)
 ; .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX022A",17,0)
 ;
"RTN","RORX022A",18,0)
 ; INVDT         IEN of the Lab test (inverted date)
"RTN","RORX022A",19,0)
 ;
"RTN","RORX022A",20,0)
 ; .RESULT       Reference to a local variable, which contains
"RTN","RORX022A",21,0)
 ;               the result (see the $$LTSEARCH^RORUTL10).
"RTN","RORX022A",22,0)
 ;
"RTN","RORX022A",23,0)
 ; Return Values:
"RTN","RORX022A",24,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX022A",25,0)
 ;        0  Ok
"RTN","RORX022A",26,0)
 ;        1  Skip this result
"RTN","RORX022A",27,0)
 ;        2  Skip this and all remaining results
"RTN","RORX022A",28,0)
 ;
"RTN","RORX022A",29,0)
LTSCB(ROR8DST,INVDT,RESULT) ;
"RTN","RORX022A",30,0)
 ;all lab tests
"RTN","RORX022A",31,0)
 N DATE,IEN,NAME,RC,TMP,VAL,WEEKS,DAYS,RAWDAYS
"RTN","RORX022A",32,0)
 S IEN=+RESULT(2)           Q:IEN'>0 1   ; IEN of the Lab test
"RTN","RORX022A",33,0)
 S NAME=$P(RESULT(2),U,2)   Q:NAME="" 1  ; Name of the test
"RTN","RORX022A",34,0)
 S VAL=$P(RESULT(1),U,3)    Q:VAL="" 1   ; Result of the test
"RTN","RORX022A",35,0)
 S DATE=+$P(RESULT(1),U,1)  Q:DATE'>0 1  ; Date of the test
"RTN","RORX022A",36,0)
 S RAWDAYS=$$FMDIFF^XLFDT(((9999999-DATE)\1),ROR8DST("DAA"))
"RTN","RORX022A",37,0)
 S WEEKS=RAWDAYS\7  ;Number of weeks
"RTN","RORX022A",38,0)
 S DAYS=RAWDAYS#7  ;Remainder in days
"RTN","RORX022A",39,0)
 S VAL=$$UP^XLFSTR(VAL)
"RTN","RORX022A",40,0)
 ;--- Skip value if test not performed
"RTN","RORX022A",41,0)
 I VAL["CANC"!(VAL["DNR")!(VAL["TNP") Q 1
"RTN","RORX022A",42,0)
 ;--- Skip value out of the result range
"RTN","RORX022A",43,0)
 I $D(RORLTRV(IEN))>1  S RC=1  D  Q:RC RC
"RTN","RORX022A",44,0)
 . S VAL=$$CLRNMVAL^RORUTL18($P(RESULT(1),U,3))
"RTN","RORX022A",45,0)
 . ;--- Skip a non-numeric result
"RTN","RORX022A",46,0)
 . Q:'$$NUMERIC^RORUTL05(VAL)
"RTN","RORX022A",47,0)
 . ;--- Check the range
"RTN","RORX022A",48,0)
 . I $G(RORLTRV(IEN,"L"))'=""  Q:VAL<RORLTRV(IEN,"L")
"RTN","RORX022A",49,0)
 . I $G(RORLTRV(IEN,"H"))'=""  Q:VAL>RORLTRV(IEN,"H")
"RTN","RORX022A",50,0)
 . S RC=0
"RTN","RORX022A",51,0)
 ;--- Store the result
"RTN","RORX022A",52,0)
 S @ROR8DST@(NAME,IEN,DATE)=($P(RESULT(1),U,3))_U_(+WEEKS_" weeks "_+DAYS_" days")
"RTN","RORX022A",53,0)
 Q 0
"RTN","RORX022A",54,0)
 ;
"RTN","RORX022A",55,0)
 ;***** QUERIES THE REGISTRY
"RTN","RORX022A",56,0)
 ;
"RTN","RORX022A",57,0)
 ; FLAGS         Flags for the $$SKIP^RORXU005
"RTN","RORX022A",58,0)
 ; RORTSK        Parameters passed by client
"RTN","RORX022A",59,0)
 ; .NSPT         Number of selected patients is returned here
"RTN","RORX022A",60,0)
 ;
"RTN","RORX022A",61,0)
 ; Return Values:
"RTN","RORX022A",62,0)
 ;       <0  Error code
"RTN","RORX022A",63,0)
 ;        0  Ok
"RTN","RORX022A",64,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX022A",65,0)
 ;
"RTN","RORX022A",66,0)
QUERY(FLAGS,RORTSK,NSPT) ;
"RTN","RORX022A",67,0)
 N RORLDST       ; Descriptor for Lab search API
"RTN","RORX022A",68,0)
 N RORPTN        ; Number of patients in the registry
"RTN","RORX022A",69,0)
 N RORXDST       ; Descriptor for pharmacy search API
"RTN","RORX022A",70,0)
 N RORCDLIST     ; Flag to indicate whether a clinic or division list exists
"RTN","RORX022A",71,0)
 N RORCDSTDT     ; Start date for clinic/division utilization search
"RTN","RORX022A",72,0)
 N RORCDENDT     ; End date for clinic/division utilization search
"RTN","RORX022A",73,0)
 N RORDAA        ; Date of patient's 1st DAA fill
"RTN","RORX022A",74,0)
 N RORXL         ; Location of drug list
"RTN","RORX022A",75,0)
 N RORXSDT       ; Location of results
"RTN","RORX022A",76,0)
 N RXSDT         ; RX start date
"RTN","RORX022A",77,0)
 N RXEDT         ; RX end date
"RTN","RORX022A",78,0)
 ;
"RTN","RORX022A",79,0)
 N CNT,ECNT,IEN,IENS,PATIEN,RC,SKIP,TMP,VA,VADM,XREFNODE
"RTN","RORX022A",80,0)
 N RCC,FLAG,DAASDT,DAAEDT
"RTN","RORX022A",81,0)
 N LTEDT,LTSDT,LTWKDYS,LTWKS
"RTN","RORX022A",82,0)
 S XREFNODE=$NA(^RORDATA(798,"AC",+RORREG))
"RTN","RORX022A",83,0)
 S (CNT,ECNT,NSPT,RC,RORCDLIST)=0
"RTN","RORX022A",84,0)
 ;--- Number of patients in the registry
"RTN","RORX022A",85,0)
 S RORPTN=$$REGSIZE^RORUTL02(+RORREG)  S:RORPTN<0 RORPTN=0
"RTN","RORX022A",86,0)
 ;--- Date range to search for DAA meds
"RTN","RORX022A",87,0)
 S DAASDT=$$PARAM^RORTSK01("DATE_RANGE_4","START")\1
"RTN","RORX022A",88,0)
 S DAAEDT=$$PARAM^RORTSK01("DATE_RANGE_4","END")\1
"RTN","RORX022A",89,0)
 ;--- set up LAB descriptors
"RTN","RORX022A",90,0)
 S LTWKS=$$PARAM^RORTSK01("WEEKS_AFTER")
"RTN","RORX022A",91,0)
 S LTWKDYS=LTWKS*7
"RTN","RORX022A",92,0)
 S LTMREC=$$PARAM^RORTSK01("WEEKS_AFTER","MOST_RECENT")
"RTN","RORX022A",93,0)
 S RORLDST("RORCB")="$$LTSCB^RORX022A"
"RTN","RORX022A",94,0)
 ;--- set up RX descriptors
"RTN","RORX022A",95,0)
 S RORXDST("RORCB")="$$RXOCB^RORX022A"
"RTN","RORX022A",96,0)
 S RORXDST("GENERIC")=1
"RTN","RORX022A",97,0)
 S RORXL=$$ALLOC^RORTMP()
"RTN","RORX022A",98,0)
 S RC=$$DRUGLIST^RORUTL16(RORXL,+RORREG,"G")
"RTN","RORX022A",99,0)
 S RXSDT=3100101  ;based on compliance date PSN*4*293
"RTN","RORX022A",100,0)
 S RXEDT=$$FMADD^XLFDT(DAAEDT,1)
"RTN","RORX022A",101,0)
 ;--- Set up Clinic/Division list parameters
"RTN","RORX022A",102,0)
 I $D(RORTSK("PARAMS","CLINICS","C")) S RORCDLIST=1
"RTN","RORX022A",103,0)
 I $D(RORTSK("PARAMS","DIVISIONS","C")) S RORCDLIST=1
"RTN","RORX022A",104,0)
 ;--- Set up ICD9 parameters
"RTN","RORX022A",105,0)
 S FLAG=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORX022A",106,0)
 ;
"RTN","RORX022A",107,0)
 ;--- Browse through the registry records
"RTN","RORX022A",108,0)
 S IEN=0
"RTN","RORX022A",109,0)
 F  S IEN=$O(@XREFNODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORX022A",110,0)
 . S TMP=$S(RORPTN>0:CNT/RORPTN,1:"")
"RTN","RORX022A",111,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX022A",112,0)
 . S IENS=IEN_",",CNT=CNT+1
"RTN","RORX022A",113,0)
 . ;--- Get patient DFN
"RTN","RORX022A",114,0)
 . S PATIEN=$$PTIEN^RORUTL01(IEN)  Q:PATIEN'>0
"RTN","RORX022A",115,0)
 . I +$P($G(^DPT(PATIEN,.35)),U)>0 Q  ;patient has died
"RTN","RORX022A",116,0)
 . ;--- Check if the patient should be skipped
"RTN","RORX022A",117,0)
 . Q:$$SKIP^RORXU005(IEN,FLAGS)
"RTN","RORX022A",118,0)
 . ;--- Check if patient should be skipped because of ICD9 codes
"RTN","RORX022A",119,0)
 . S RCC=0
"RTN","RORX022A",120,0)
 . I FLAG'="ALL" D
"RTN","RORX022A",121,0)
 . . S RCC=$$ICD^RORXU010(PATIEN,RORREG)
"RTN","RORX022A",122,0)
 . I (FLAG="INCLUDE")&(RCC=0) Q
"RTN","RORX022A",123,0)
 . I (FLAG="EXCLUDE")&(RCC=1) Q
"RTN","RORX022A",124,0)
 . ;--- Check if patient should be skipped because not on Clinic or Division list
"RTN","RORX022A",125,0)
 . I RORCDLIST,'$$CDUTIL^RORXU001(.RORTSK,PATIEN,DAASDT,DAAEDT) Q
"RTN","RORX022A",126,0)
 . ;--- Report specific filters
"RTN","RORX022A",127,0)
 . S SKIP=1
"RTN","RORX022A",128,0)
 . ;--- Check if patient should be skipped because no DAA fill
"RTN","RORX022A",129,0)
 . D  I RC<0  S ECNT=ECNT+1,RC=0  Q
"RTN","RORX022A",130,0)
 . . ;--- Search for 1st DAA fill date skip patient if not taking DAA
"RTN","RORX022A",131,0)
 . . S RORXDST("1STDAA")=1  ;set DAA flag
"RTN","RORX022A",132,0)
 . . D  I RC'>0 Q
"RTN","RORX022A",133,0)
 . . . S RORXDST=$$ALLOC^RORTMP()
"RTN","RORX022A",134,0)
 . . . S RC=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,"EIOV",RXSDT,RXEDT)
"RTN","RORX022A",135,0)
 . . S SKIP=0
"RTN","RORX022A",136,0)
 . S RORDAA=$O(@RORXDST@(""))
"RTN","RORX022A",137,0)
 . I +RORDAA<DAASDT S SKIP=1  ;1st fill before daa start date
"RTN","RORX022A",138,0)
 . ;--- Skip the patient if not all search criteria have been met
"RTN","RORX022A",139,0)
 . I SKIP D FREE^RORTMP(RORXDST) Q
"RTN","RORX022A",140,0)
 . ;=== Store the patient's data
"RTN","RORX022A",141,0)
 . D VADEM^RORUTL05(PATIEN,1)
"RTN","RORX022A",142,0)
 . D FREE^RORTMP(RORXDST)
"RTN","RORX022A",143,0)
 . S ^TMP("RORX022",$J,"PAT",PATIEN)=VA("BID")_U_VADM(1)_U_RORDAA
"RTN","RORX022A",144,0)
 . ;--- Get lab tests N weeks after 1st DAA fill
"RTN","RORX022A",145,0)
 . N X,X1,X2
"RTN","RORX022A",146,0)
 . S X1=RORDAA,X2=LTWKDYS D C^%DTC S LTEDT=X
"RTN","RORX022A",147,0)
 . S LTEDT=$$FMADD^XLFDT(LTEDT\1,1)
"RTN","RORX022A",148,0)
 . ;--- If baseline requested get all lab results
"RTN","RORX022A",149,0)
 . S LTSDT=$S(LTMREC=1:"",1:RORDAA)
"RTN","RORX022A",150,0)
 . S RORLDST("DAA")=RORDAA
"RTN","RORX022A",151,0)
 . D  Q:RC<0 
"RTN","RORX022A",152,0)
 . . S RORLDST=$NA(^TMP("RORX022",$J,"PAT",PATIEN,"LR"))
"RTN","RORX022A",153,0)
 . . S RC=$$LTSEARCH^RORUTL10(PATIEN,RORLTST,.RORLDST,,LTSDT,LTEDT)
"RTN","RORX022A",154,0)
 . ;--- Get all registry med fills 60 days before 1st DAA fill
"RTN","RORX022A",155,0)
 . K RORXDST("1STDAA")  ;clear DAA flag
"RTN","RORX022A",156,0)
 . D  Q:RC<0
"RTN","RORX022A",157,0)
 . . S RORXDST=$NA(^TMP("RORX022",$J,"PAT",PATIEN,"RX"))
"RTN","RORX022A",158,0)
 . . S X1=RORDAA,X2=-60 D C^%DTC S RORXSDT=X
"RTN","RORX022A",159,0)
 . . S RORXEDT=$$FMADD^XLFDT(DT,1)
"RTN","RORX022A",160,0)
 . . S RC=$$RXSEARCH^RORUTL14(PATIEN,RORXL,.RORXDST,"EIOV",RORXSDT,RORXEDT)
"RTN","RORX022A",161,0)
 . S NSPT=NSPT+1
"RTN","RORX022A",162,0)
 Q $S(RC<0:RC,1:ECNT)
"RTN","RORX022A",163,0)
 ;
"RTN","RORX022A",164,0)
 ;
"RTN","RORX022A",165,0)
 ;***** CALLBACK FUNCTION FOR THE PHARMACY SEARCH API
"RTN","RORX022A",166,0)
 ;
"RTN","RORX022A",167,0)
 ;                .ROR8DST      Reference to the ROR8DST parameter.
"RTN","RORX022A",168,0)
 ;
"RTN","RORX022A",169,0)
 ;
"RTN","RORX022A",170,0)
 ;                 ORDER         Order number (from condensed list)
"RTN","RORX022A",171,0)
 ;
"RTN","RORX022A",172,0)
 ;                 FLAGS         Flags describing the order to be
"RTN","RORX022A",173,0)
 ;                               processed.
"RTN","RORX022A",174,0)
 ;
"RTN","RORX022A",175,0)
 ;                 DRUG          Dispensed drug
"RTN","RORX022A",176,0)
 ;                                 ^01: Drug IEN in file #50
"RTN","RORX022A",177,0)
 ;                                 ^02: Drug name
"RTN","RORX022A",178,0)
 ;
"RTN","RORX022A",179,0)
 ;                 DATE          Order date (issue date for outpatient
"RTN","RORX022A",180,0)
 ;                               drugs or start date for inpatient)
"RTN","RORX022A",181,0)
 ;
"RTN","RORX022A",182,0)
 ;Return Values:
"RTN","RORX022A",183,0)
 ;       <0  Error code (the search will be aborted)
"RTN","RORX022A",184,0)
 ;        0  Ok
"RTN","RORX022A",185,0)
 ;        1  Skip this result
"RTN","RORX022A",186,0)
 ;        2  Skip this and all remaining results
"RTN","RORX022A",187,0)
 ;
"RTN","RORX022A",188,0)
RXOCB(ROR8DST,ORDER,ORDFLG,DRUG,DATE) ;
"RTN","RORX022A",189,0)
 N DRUGIEN,DRUGNAME,IEN,IRP,OFD,RPSUB,RXBUF,RXCNT,RXNUM,TMP
"RTN","RORX022A",190,0)
 I ROR8DST("GENERIC")  D
"RTN","RORX022A",191,0)
 . S DRUGIEN=+ROR8DST("RORXGEN"),DRUGNAME=$P(ROR8DST("RORXGEN"),U,2)
"RTN","RORX022A",192,0)
 E  Q 1
"RTN","RORX022A",193,0)
 Q:(DRUGIEN'>0)!(DRUGNAME="") 1
"RTN","RORX022A",194,0)
 ;--- if DAA flag set, skip med if not a DAA
"RTN","RORX022A",195,0)
 I +$G(ROR8DST("1STDAA")),(DRUGNAME'="BOCEPREVIR"),(DRUGNAME'="TELAPREVIR") Q 1
"RTN","RORX022A",196,0)
 S $P(RXBUF,U,5)=$P($G(^TMP("PS",$J,0)),U,7)  ; Days Supply
"RTN","RORX022A",197,0)
 S TMP=$G(^TMP("PS",$J,"RXN",0))
"RTN","RORX022A",198,0)
 S RXNUM=$P(TMP,U)  S:RXNUM="" RXNUM=" "
"RTN","RORX022A",199,0)
 S RXCNT=0
"RTN","RORX022A",200,0)
 ;--- Original prescription
"RTN","RORX022A",201,0)
 I ORDFLG["I"  D  ;--- Inpatient
"RTN","RORX022A",202,0)
 . S OFD=$P($G(^TMP("PS",$J,0)),U,5)\1         ; Start Date
"RTN","RORX022A",203,0)
 . S RXCNT=RXCNT+1
"RTN","RORX022A",204,0)
 . S @ROR8DST@(OFD,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX022A",205,0)
 E  D             ;--- Outpatient
"RTN","RORX022A",206,0)
 . S OFD=+$P($G(^TMP("PS",$J,"RXN",0)),U,6)  ; Original Fill Date
"RTN","RORX022A",207,0)
 . Q:(OFD<ROR8DST("RORSDT"))!(OFD'<ROR8DST("ROREDT"))
"RTN","RORX022A",208,0)
 . S RXCNT=RXCNT+1
"RTN","RORX022A",209,0)
 . S @ROR8DST@(OFD,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX022A",210,0)
 ;--- Refills and partials
"RTN","RORX022A",211,0)
 F RPSUB="REF","PAR"  D
"RTN","RORX022A",212,0)
 . S IRP=0
"RTN","RORX022A",213,0)
 . F  S IRP=$O(^TMP("PS",$J,RPSUB,IRP))  Q:IRP'>0  D
"RTN","RORX022A",214,0)
 . . S TMP=$G(^TMP("PS",$J,RPSUB,IRP,0))
"RTN","RORX022A",215,0)
 . . S $P(RXBUF,U,5)=$P(TMP,U,2)  ; Days Supply
"RTN","RORX022A",216,0)
 . . I TMP>0  S RXCNT=RXCNT+1  D
"RTN","RORX022A",217,0)
 . . . S @ROR8DST@(+TMP,DRUGNAME,DRUGIEN,RXNUM,RXCNT)=RXBUF
"RTN","RORX022A",218,0)
 Q 0
"RTN","RORX022A",219,0)
 ;
"RTN","RORX022A",220,0)
 ;***** STORES THE REPORT DATA
"RTN","RORX022A",221,0)
 ;
"RTN","RORX022A",222,0)
 ; REPORT        IEN of the REPORT element
"RTN","RORX022A",223,0)
 ; RORTSK        Parameters passed by GUI
"RTN","RORX022A",224,0)
 ; NSPT          Number of selected patients
"RTN","RORX022A",225,0)
 ;
"RTN","RORX022A",226,0)
 ; Return Values:
"RTN","RORX022A",227,0)
 ;       <0  Error code
"RTN","RORX022A",228,0)
 ;        0  Ok
"RTN","RORX022A",229,0)
 ;       >0  Number of non-fatal errors
"RTN","RORX022A",230,0)
 ;
"RTN","RORX022A",231,0)
STORE(REPORT,RORTSK,NSPT) ;
"RTN","RORX022A",232,0)
 N CNT,DATE,DFN,DAA,ECNT,IEN,ITEM,LAST4,LTLST,NAME,NODE,PTCNT,PTLST,PTNAME,RC,RXLST,TMP,VAL
"RTN","RORX022A",233,0)
 N DAAINV,LRMREC
"RTN","RORX022A",234,0)
 S (ECNT,RC)=0,(LTLST,PTLST,RXLST)=-1
"RTN","RORX022A",235,0)
 ;--- Force the "patient data" note in the output
"RTN","RORX022A",236,0)
 D ADDVAL^RORTSK11(RORTSK,"PATIENT",,REPORT)
"RTN","RORX022A",237,0)
 S LRMREC=$$PARAM^RORTSK01("LABTESTS","MOST_RECENT")
"RTN","RORX022A",238,0)
 ;--- Create lab test list
"RTN","RORX022A",239,0)
 D  Q:LTLST<0 LTLST
"RTN","RORX022A",240,0)
 . S LTLST=$$ADDVAL^RORTSK11(RORTSK,"LABTESTS",,REPORT)
"RTN","RORX022A",241,0)
 . D ADDATTR^RORTSK11(RORTSK,LTLST,"TABLE","LABTESTS")
"RTN","RORX022A",242,0)
 ;--- Create pharmacy list
"RTN","RORX022A",243,0)
 D  Q:RXLST<0 RXLST
"RTN","RORX022A",244,0)
 . S RXLST=$$ADDVAL^RORTSK11(RORTSK,"DRUGS",,REPORT)
"RTN","RORX022A",245,0)
 . D ADDATTR^RORTSK11(RORTSK,RXLST,"TABLE","DRUGS")
"RTN","RORX022A",246,0)
 ;--- Loop through selected patients and store as XML
"RTN","RORX022A",247,0)
 S (CNT,DFN,PTCNT)=0
"RTN","RORX022A",248,0)
 F  S DFN=$O(^TMP("RORX022",$J,"PAT",DFN))  Q:DFN'>0  D  Q:RC<0
"RTN","RORX022A",249,0)
 . S TMP=$S(NSPT>0:CNT/NSPT,1:"")
"RTN","RORX022A",250,0)
 . S RC=$$LOOP^RORTSK01(TMP)  Q:RC<0
"RTN","RORX022A",251,0)
 . S CNT=CNT+1,NODE=$NA(^TMP("RORX022",$J,"PAT",DFN))
"RTN","RORX022A",252,0)
 . ;--- Patient's data
"RTN","RORX022A",253,0)
 . S TMP=$G(@NODE)
"RTN","RORX022A",254,0)
 . S LAST4=$P(TMP,U),PTNAME=$P(TMP,U,2),DAA=$P(TMP,U,3)
"RTN","RORX022A",255,0)
 . S PTCNT=PTCNT+1
"RTN","RORX022A",256,0)
 . ;--- List of Lab tests
"RTN","RORX022A",257,0)
 . S NAME="" K LTCNT
"RTN","RORX022A",258,0)
 . F  S NAME=$O(@NODE@("LR",NAME)) Q:NAME=""  D
"RTN","RORX022A",259,0)
 . . S IEN=""
"RTN","RORX022A",260,0)
 . . F  S IEN=$O(@NODE@("LR",NAME,IEN)) Q:IEN=""  D
"RTN","RORX022A",261,0)
 . . . S DATE="",DAAINV=9999999-DAA
"RTN","RORX022A",262,0)
 . . . F  S DATE=$O(@NODE@("LR",NAME,IEN,DATE)) Q:DATE=""!($G(LTCNT(NAME,IEN))=2)!((DATE>DAAINV)&'LTMREC)  D
"RTN","RORX022A",263,0)
 . . . . ;store results after or on DAA fill date
"RTN","RORX022A",264,0)
 . . . . I DATE'>DAAINV D  Q
"RTN","RORX022A",265,0)
 . . . . . I LRMREC,$G(LTCNT(NAME,IEN))=0 Q  ;quit if most recent
"RTN","RORX022A",266,0)
 . . . . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"LT",,LTLST,,DFN)
"RTN","RORX022A",267,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX022A",268,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX022A",269,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"DAA_FILL",DAA,ITEM,1)
"RTN","RORX022A",270,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"DATE",((9999999-DATE)\1),ITEM,1)
"RTN","RORX022A",271,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"LTNAME",NAME,ITEM,1)
"RTN","RORX022A",272,0)
 . . . . . S VAL=$G(@NODE@("LR",NAME,IEN,DATE))
"RTN","RORX022A",273,0)
 . . . . . S TMP=$S($$NUMERIC^RORUTL05($P(VAL,U)):3,1:1)
"RTN","RORX022A",274,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"RESULT",$P(VAL,U),ITEM,TMP)
"RTN","RORX022A",275,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"WKS_LAB",$P(VAL,U,2),ITEM,1)
"RTN","RORX022A",276,0)
 . . . . . S LTCNT(NAME,IEN)=0
"RTN","RORX022A",277,0)
 . . . . ;store 2 baseline results if flag is set
"RTN","RORX022A",278,0)
 . . . . I LTMREC D
"RTN","RORX022A",279,0)
 . . . . . S LTCNT(NAME,IEN)=$S('$D(LTCNT(NAME,IEN)):1,1:LTCNT(NAME,IEN)+1)  ;count for each test
"RTN","RORX022A",280,0)
 . . . . . Q:LTCNT(NAME,IEN)>2  ;stop after 2 baseline results
"RTN","RORX022A",281,0)
 . . . . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"LT",,LTLST,,DFN)
"RTN","RORX022A",282,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX022A",283,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX022A",284,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"DAA_FILL",DAA,ITEM,1)
"RTN","RORX022A",285,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"DATE",((9999999-DATE)\1),ITEM,1)
"RTN","RORX022A",286,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"LTNAME",NAME,ITEM,1)
"RTN","RORX022A",287,0)
 . . . . . S VAL=$G(@NODE@("LR",NAME,IEN,DATE))
"RTN","RORX022A",288,0)
 . . . . . S TMP=$S($$NUMERIC^RORUTL05($P(VAL,U)):3,1:1)
"RTN","RORX022A",289,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"RESULT",$P(VAL,U),ITEM,TMP)
"RTN","RORX022A",290,0)
 . . . . . D ADDVAL^RORTSK11(RORTSK,"WKS_LAB","Baseline",ITEM,1)
"RTN","RORX022A",291,0)
 . ;--- List of drugs
"RTN","RORX022A",292,0)
 . S DATE=""
"RTN","RORX022A",293,0)
 . F  S DATE=$O(@NODE@("RX",DATE))  Q:DATE=""  D
"RTN","RORX022A",294,0)
 . . S NAME=""
"RTN","RORX022A",295,0)
 . . F  S NAME=$O(@NODE@("RX",DATE,NAME))  Q:NAME=""  D
"RTN","RORX022A",296,0)
 . . . S IEN=""
"RTN","RORX022A",297,0)
 . . . F  S IEN=$O(@NODE@("RX",DATE,NAME,IEN))  Q:IEN=""  D
"RTN","RORX022A",298,0)
 . . . . S RXNUM=""
"RTN","RORX022A",299,0)
 . . . . F  S RXNUM=$O(@NODE@("RX",DATE,NAME,IEN,RXNUM)) Q:RXNUM=""  D
"RTN","RORX022A",300,0)
 . . . . . S RXCNT=""
"RTN","RORX022A",301,0)
 . . . . . F  S RXCNT=$O(@NODE@("RX",DATE,NAME,IEN,RXNUM,RXCNT)) Q:RXCNT=""  S RXBUF=@NODE@("RX",DATE,NAME,IEN,RXNUM,RXCNT) D
"RTN","RORX022A",302,0)
 . . . . . . S ITEM=$$ADDVAL^RORTSK11(RORTSK,"DRUG",,RXLST,,DFN)
"RTN","RORX022A",303,0)
 . . . . . . D ADDVAL^RORTSK11(RORTSK,"NAME",PTNAME,ITEM,1)
"RTN","RORX022A",304,0)
 . . . . . . D ADDVAL^RORTSK11(RORTSK,"LAST4",LAST4,ITEM,2)
"RTN","RORX022A",305,0)
 . . . . . . D ADDVAL^RORTSK11(RORTSK,"DAA_FILL",DAA,ITEM,1)
"RTN","RORX022A",306,0)
 . . . . . . D ADDVAL^RORTSK11(RORTSK,"FILL_DATE",DATE\1,ITEM,1)
"RTN","RORX022A",307,0)
 . . . . . . D ADDVAL^RORTSK11(RORTSK,"RXNAME",NAME,ITEM,1)
"RTN","RORX022A",308,0)
 . . . . . . D ADDVAL^RORTSK11(RORTSK,"DAYSPLY",$P(RXBUF,U,5),ITEM,1)
"RTN","RORX022A",309,0)
 ;--- Inactivate the patient list tag if the list is empty
"RTN","RORX022A",310,0)
 D:PTCNT'>0 UPDVAL^RORTSK11(RORTSK,PTLST,,,1)
"RTN","RORX022A",311,0)
 Q ECNT
"RTN","RORXU002")
0^5^B118388269^B116207704
"RTN","RORXU002",1,0)
RORXU002 ;HCIOFO/SG - REPORT BUILDER UTILITIES ; 8/3/11 3:55pm
"RTN","RORXU002",2,0)
 ;;1.5;CLINICAL CASE REGISTRIES;**1,10,13,15,17**;Feb 17, 2006;Build 33
"RTN","RORXU002",3,0)
 ;
"RTN","RORXU002",4,0)
 ; This routine uses the following IAs:
"RTN","RORXU002",5,0)
 ;
"RTN","RORXU002",6,0)
 ; #3990   $$ICDD^ICDCODE (supported)
"RTN","RORXU002",7,0)
 ; #2050   BLD^DIALOG (supported)
"RTN","RORXU002",8,0)
 ; #2056   GETS^DIQ (supported)
"RTN","RORXU002",9,0)
 ; #2056   $$GET1^DIQ (supported)
"RTN","RORXU002",10,0)
 ; #10103  $$NOW^XLFDT  (supported)
"RTN","RORXU002",11,0)
 ; #10104  $$TRIM^XLFSTR (supported)
"RTN","RORXU002",12,0)
 ; #417    Read access to .01 field of file #40.8 (controlled)
"RTN","RORXU002",13,0)
 ; #10040  Read access to file #44 (supported)
"RTN","RORXU002",14,0)
 ;
"RTN","RORXU002",15,0)
 ;******************************************************************************
"RTN","RORXU002",16,0)
 ;******************************************************************************
"RTN","RORXU002",17,0)
 ;                 --- ROUTINE MODIFICATION LOG ---
"RTN","RORXU002",18,0)
 ;        
"RTN","RORXU002",19,0)
 ;PKG/PATCH    DATE        DEVELOPER    MODIFICATION
"RTN","RORXU002",20,0)
 ;-----------  ----------  -----------  ----------------------------------------
"RTN","RORXU002",21,0)
 ;ROR*1.5*10   APR  2010   A SAUNDERS   Modified Lab Tests Ranges section in
"RTN","RORXU002",22,0)
 ;                                      PARAMS tag to include the 3 new reports.
"RTN","RORXU002",23,0)
 ;ROR*1.5*13   DEC  2010   A SAUNDERS   Added Division and Clinic sections in
"RTN","RORXU002",24,0)
 ;                                      PARAMS tag (pulled from RORXU006).
"RTN","RORXU002",25,0)
 ;ROR*1.5*15   JUN  2011   C RAY        Added HIV_DX
"RTN","RORXU002",26,0)
 ; 
"RTN","RORXU002",27,0)
 ;ROR*1.5*17   AUG  2011   C RAY        Modified to allow 
"RTN","RORXU002",28,0)
 ;                                      PATIENTS,OPTIONS params to have other
"RTN","RORXU002",29,0)
 ;                                      values besides boolean
"RTN","RORXU002",30,0)
 ;                                      Modified to add DATE_RANGE_4
"RTN","RORXU002",31,0)
 ;******************************************************************************
"RTN","RORXU002",32,0)
 ;******************************************************************************
"RTN","RORXU002",33,0)
 Q
"RTN","RORXU002",34,0)
 ;
"RTN","RORXU002",35,0)
 ;***** SCANS THE TABLE DEFINITION (RORSRC) FOR COLUMN NAMES
"RTN","RORXU002",36,0)
 ;
"RTN","RORXU002",37,0)
 ; .TERM         Reference to a local variable where
"RTN","RORXU002",38,0)
 ;               is terminator is returned
"RTN","RORXU002",39,0)
 ;
"RTN","RORXU002",40,0)
 ; Return Values:
"RTN","RORXU002",41,0)
 ;       ""  End of definition
"RTN","RORXU002",42,0)
 ;      ...  Name of the column
"RTN","RORXU002",43,0)
 ;
"RTN","RORXU002",44,0)
COLSCAN(TERM) ;
"RTN","RORXU002",45,0)
 N CH,I,TOKEN
"RTN","RORXU002",46,0)
 F I=1:1  S TERM=$E(RORSRC,I)  Q:"(,)"[TERM
"RTN","RORXU002",47,0)
 S TOKEN=$E(RORSRC,1,I-1)
"RTN","RORXU002",48,0)
 F I=I+1:1  S CH=$E(RORSRC,I)  Q:(CH="")!("(,)"'[CH)
"RTN","RORXU002",49,0)
 S $E(RORSRC,1,I-1)=""
"RTN","RORXU002",50,0)
 Q TOKEN
"RTN","RORXU002",51,0)
 ;
"RTN","RORXU002",52,0)
 ;***** CHECKS THE FILEMAN DATE/TIME VALUE
"RTN","RORXU002",53,0)
DATE(DT) ;
"RTN","RORXU002",54,0)
 Q $S(DT>0:+DT,1:"")
"RTN","RORXU002",55,0)
 ;
"RTN","RORXU002",56,0)
 ;***** OUTPUTS THE BASIC HEADER TO THE REPORT
"RTN","RORXU002",57,0)
 ;
"RTN","RORXU002",58,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",59,0)
 ;
"RTN","RORXU002",60,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",61,0)
 ;
"RTN","RORXU002",62,0)
 ; Return Values:
"RTN","RORXU002",63,0)
 ;       <0  Error code
"RTN","RORXU002",64,0)
 ;       >0  IEN of the HEADER element
"RTN","RORXU002",65,0)
 ;
"RTN","RORXU002",66,0)
HEADER(RORTSK,PARTAG) ;
"RTN","RORXU002",67,0)
 N HEADER,IENS,REGIEN,RORBUF,RORMSG,TMP,DIERR
"RTN","RORXU002",68,0)
 S HEADER=$$ADDVAL^RORTSK11(RORTSK,"HEADER",,PARTAG)
"RTN","RORXU002",69,0)
 Q:HEADER<0 HEADER
"RTN","RORXU002",70,0)
 D ADDVAL^RORTSK11(RORTSK,"DATE",$$DATE($$NOW^XLFDT),HEADER)
"RTN","RORXU002",71,0)
 D ADDVAL^RORTSK11(RORTSK,"TASK_NUMBER",RORTSK,HEADER)
"RTN","RORXU002",72,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",73,0)
 ;---
"RTN","RORXU002",74,0)
 S IENS=REGIEN_","
"RTN","RORXU002",75,0)
 D GETS^DIQ(798.1,IENS,"1;2","I","RORBUF","RORMSG")
"RTN","RORXU002",76,0)
 Q:$G(DIERR) $$DBS^RORERR("RORMSG",-9,,,798.1,IENS)
"RTN","RORXU002",77,0)
 S TMP=$G(RORBUF(798.1,IENS,1,"I"))
"RTN","RORXU002",78,0)
 D ADDVAL^RORTSK11(RORTSK,"UPDATED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",79,0)
 S TMP=$G(RORBUF(798.1,IENS,2,"I"))
"RTN","RORXU002",80,0)
 D ADDVAL^RORTSK11(RORTSK,"EXTRACTED_UNTIL",$$DATE(TMP),HEADER)
"RTN","RORXU002",81,0)
 Q HEADER
"RTN","RORXU002",82,0)
 ;
"RTN","RORXU002",83,0)
 ;***** PARSES THE COMMA-SEPARATED LIST
"RTN","RORXU002",84,0)
 ;
"RTN","RORXU002",85,0)
 ; .LIST         Reference to a local variable that contains a list.
"RTN","RORXU002",86,0)
 ;               Items of the list are returned as the subscripts of
"RTN","RORXU002",87,0)
 ;               this variable.
"RTN","RORXU002",88,0)
 ;
"RTN","RORXU002",89,0)
LIST(LIST) ;
"RTN","RORXU002",90,0)
 N I,TMP,VAL
"RTN","RORXU002",91,0)
 F I=1:1  S VAL=$P(LIST,",",I)  Q:VAL=""  D
"RTN","RORXU002",92,0)
 . S TMP=$$TRIM^XLFSTR(VAL)
"RTN","RORXU002",93,0)
 . S:TMP'="" LIST(TMP)=""
"RTN","RORXU002",94,0)
 Q
"RTN","RORXU002",95,0)
 ;
"RTN","RORXU002",96,0)
 ;***** COMPILES A TEXT DESCRIPTION FOR THE REPORT OPTIONS
"RTN","RORXU002",97,0)
 ;
"RTN","RORXU002",98,0)
 ; .OPTIONS      Reference to a local variable containing
"RTN","RORXU002",99,0)
 ;               the options as subscripts
"RTN","RORXU002",100,0)
 ;
"RTN","RORXU002",101,0)
 ; [DLGNUM]      Number of the dialog that contains the template
"RTN","RORXU002",102,0)
 ;               (7980000.018, by default).
"RTN","RORXU002",103,0)
 ;
"RTN","RORXU002",104,0)
 ; Return Values:
"RTN","RORXU002",105,0)
 ;      ...  Text description of the options
"RTN","RORXU002",106,0)
 ;
"RTN","RORXU002",107,0)
OPTXT(OPTIONS,DLGNUM) ;
"RTN","RORXU002",108,0)
 N I,J,NS,RORBUF,TEXT,TMP
"RTN","RORXU002",109,0)
 S:$G(DLGNUM)'>0 DLGNUM=7980000.018
"RTN","RORXU002",110,0)
 D BLD^DIALOG(DLGNUM,,,"RORBUF")
"RTN","RORXU002",111,0)
 S TEXT="",I=0
"RTN","RORXU002",112,0)
 F  S I=$O(RORBUF(I))  Q:I=""  D:$E(RORBUF(I),1)'=" "
"RTN","RORXU002",113,0)
 . S NS=0
"RTN","RORXU002",114,0)
 . F J=1:1  S TMP=$TR($P(RORBUF(I),",",J)," ")  Q:TMP=""  D
"RTN","RORXU002",115,0)
 . . S:$D(OPTIONS(TMP)) NS=2**(J-1)+NS
"RTN","RORXU002",116,0)
 . Q:'NS
"RTN","RORXU002",117,0)
 . S TMP=$$TRIM^XLFSTR($G(RORBUF(I+NS)))
"RTN","RORXU002",118,0)
 . S:TMP'="" TEXT=TEXT_", "_TMP
"RTN","RORXU002",119,0)
 Q $P(TEXT,", ",2,999)
"RTN","RORXU002",120,0)
 ;
"RTN","RORXU002",121,0)
 ;***** OUTPUTS THE PARAMETERS TO THE REPORT
"RTN","RORXU002",122,0)
 ;
"RTN","RORXU002",123,0)
 ; .RORTSK       Task number and task parameters
"RTN","RORXU002",124,0)
 ;
"RTN","RORXU002",125,0)
 ; PARTAG        Reference (IEN) to the parent tag
"RTN","RORXU002",126,0)
 ;
"RTN","RORXU002",127,0)
 ; .STDT         Start and end dates of the report
"RTN","RORXU002",128,0)
 ; .ENDT         are returned via these parameters
"RTN","RORXU002",129,0)
 ;
"RTN","RORXU002",130,0)
 ; [.FLAGS]      Flags for the $$SKIP^RORXU005 are returned via this
"RTN","RORXU002",131,0)
 ;               parameter. The "D" (skip deceased patients) and "G"
"RTN","RORXU002",132,0)
 ;               (skip pending patients) flags are always added.
"RTN","RORXU002",133,0)
 ;
"RTN","RORXU002",134,0)
 ; Return Values:
"RTN","RORXU002",135,0)
 ;       <0  Error code
"RTN","RORXU002",136,0)
 ;       >0  IEN of the PARAMETERS element
"RTN","RORXU002",137,0)
 ;
"RTN","RORXU002",138,0)
PARAMS(RORTSK,PARTAG,STDT,ENDT,FLAGS) ;
"RTN","RORXU002",139,0)
 N BUF,ELEMENT,I,LTAG,MODE,NAME,PARAMS,RC,REGIEN,RORMSG,TMP,IEN,DIERR
"RTN","RORXU002",140,0)
 S PARAMS=$$ADDVAL^RORTSK11(RORTSK,"PARAMETERS",,PARTAG)
"RTN","RORXU002",141,0)
 S RC=0,(ENDT,STDT)="",FLAGS=""
"RTN","RORXU002",142,0)
 ;
"RTN","RORXU002",143,0)
 ;=== Registry name
"RTN","RORXU002",144,0)
 S REGIEN=+$$PARAM^RORTSK01("REGIEN")
"RTN","RORXU002",145,0)
 I REGIEN>0  D  Q:RC<0 RC
"RTN","RORXU002",146,0)
 . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U)
"RTN","RORXU002",147,0)
 . I TMP=""  S RC=-1  Q
"RTN","RORXU002",148,0)
 . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,PARAMS)
"RTN","RORXU002",149,0)
 ;
"RTN","RORXU002",150,0)
 ;=== Alternate date ranges
"RTN","RORXU002",151,0)
 F I=2:1:4  D  Q:RC<0
"RTN","RORXU002",152,0)
 . S STDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"START")\1  Q:STDT'>0
"RTN","RORXU002",153,0)
 . S ENDT=$$PARAM^RORTSK01("DATE_RANGE_"_I,"END")\1    Q:ENDT'>0
"RTN","RORXU002",154,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE_"_I,,PARAMS)
"RTN","RORXU002",155,0)
 . I ELEMENT<0  S RC=+ELEMENT  Q
"RTN","RORXU002",156,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT)  Q:RC<0
"RTN","RORXU002",157,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",158,0)
 Q:RC<0 RC
"RTN","RORXU002",159,0)
 ;
"RTN","RORXU002",160,0)
 ;=== Main date range
"RTN","RORXU002",161,0)
 S STDT=$$PARAM^RORTSK01("DATE_RANGE","START")\1
"RTN","RORXU002",162,0)
 S ENDT=$$PARAM^RORTSK01("DATE_RANGE","END")\1
"RTN","RORXU002",163,0)
 I STDT>0,ENDT>0  D  Q:RC<0 RC
"RTN","RORXU002",164,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,"DATE_RANGE",,PARAMS)
"RTN","RORXU002",165,0)
 . I ELEMENT<0  S RC=+ELEMENT  Q
"RTN","RORXU002",166,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"START",STDT)  Q:RC<0
"RTN","RORXU002",167,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,"END",ENDT)
"RTN","RORXU002",168,0)
 E  S (ENDT,STDT)=""
"RTN","RORXU002",169,0)
 ;
"RTN","RORXU002",170,0)
 ;=== Task comment
"RTN","RORXU002",171,0)
 S TMP=$$PARAM^RORTSK01("TASK_COMMENT")
"RTN","RORXU002",172,0)
 D:TMP'="" ADDVAL^RORTSK11(RORTSK,"TASK_COMMENT",TMP,PARAMS)
"RTN","RORXU002",173,0)
 ;
"RTN","RORXU002",174,0)
 ;=== Clinic Selection - patch 13
"RTN","RORXU002",175,0)
 D:$D(RORTSK("PARAMS","CLINICS","C"))
"RTN","RORXU002",176,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS",,PARAMS)  Q:LTAG'>0
"RTN","RORXU002",177,0)
 . S IEN=0
"RTN","RORXU002",178,0)
 . F  S IEN=$O(RORTSK("PARAMS","CLINICS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU002",179,0)
 . . S TMP=$$GET1^DIQ(44,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",180,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,44,IEN_",")
"RTN","RORXU002",181,0)
 . . Q:TMP=""
"RTN","RORXU002",182,0)
 . . D ADDVAL^RORTSK11(RORTSK,"CLINIC",TMP,LTAG,,IEN)
"RTN","RORXU002",183,0)
 D:$$PARAM^RORTSK01("CLINICS","ALL")
"RTN","RORXU002",184,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"CLINICS","ALL",PARAMS)
"RTN","RORXU002",185,0)
 ;
"RTN","RORXU002",186,0)
 ;=== Division Selection - patch 13
"RTN","RORXU002",187,0)
 D:$D(RORTSK("PARAMS","DIVISIONS","C"))
"RTN","RORXU002",188,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS",,PARAMS)  Q:LTAG'>0
"RTN","RORXU002",189,0)
 . S IEN=0
"RTN","RORXU002",190,0)
 . F  S IEN=$O(RORTSK("PARAMS","DIVISIONS","C",IEN))  Q:IEN'>0  D
"RTN","RORXU002",191,0)
 . . S TMP=$$GET1^DIQ(40.8,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",192,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,40.8,IEN_",")
"RTN","RORXU002",193,0)
 . . Q:TMP=""
"RTN","RORXU002",194,0)
 . . D ADDVAL^RORTSK11(RORTSK,"DIVISION",TMP,LTAG,,IEN)
"RTN","RORXU002",195,0)
 D:$$PARAM^RORTSK01("DIVISIONS","ALL")
"RTN","RORXU002",196,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"DIVISIONS","ALL",PARAMS)
"RTN","RORXU002",197,0)
 ;
"RTN","RORXU002",198,0)
 ;
"RTN","RORXU002",199,0)
 ;=== Patient selection and Options
"RTN","RORXU002",200,0)
 F NAME="PATIENTS","OPTIONS"  D  Q:RC<0
"RTN","RORXU002",201,0)
 . K BUF  M BUF=RORTSK("PARAMS",NAME,"A")  Q:$D(BUF)<10
"RTN","RORXU002",202,0)
 . ;--- Generate the XML tags
"RTN","RORXU002",203,0)
 . S ELEMENT=$$ADDVAL^RORTSK11(RORTSK,NAME,$$OPTXT(.BUF),PARAMS)
"RTN","RORXU002",204,0)
 . I ELEMENT'>0  S RC=ELEMENT  Q
"RTN","RORXU002",205,0)
 . S TMP=""
"RTN","RORXU002",206,0)
 . F  S TMP=$O(BUF(TMP))  Q:TMP=""  D  Q:RC<0
"RTN","RORXU002",207,0)
 . . S RC=$$ADDATTR^RORTSK11(RORTSK,ELEMENT,TMP,$G(BUF(TMP)))
"RTN","RORXU002",208,0)
 . ;--- Compile the flags
"RTN","RORXU002",209,0)
 . D:NAME="PATIENTS"
"RTN","RORXU002",210,0)
 . . S:'$D(BUF("DE_BEFORE")) FLAGS=FLAGS_"P"
"RTN","RORXU002",211,0)
 . . S:'$D(BUF("DE_DURING")) FLAGS=FLAGS_"N"
"RTN","RORXU002",212,0)
 . . S:'$D(BUF("DE_AFTER")) FLAGS=FLAGS_"F"
"RTN","RORXU002",213,0)
 Q:RC<0 RC
"RTN","RORXU002",214,0)
 ;
"RTN","RORXU002",215,0)
 ;=== Other Registries
"RTN","RORXU002",216,0)
 I $D(RORTSK("PARAMS","OTHER_REGISTRIES","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",217,0)
 . N NODE,REGIEN
"RTN","RORXU002",218,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"OTHER_REGISTRIES",,PARAMS)
"RTN","RORXU002",219,0)
 . I LTAG<0  S RC=+LTAG  Q
"RTN","RORXU002",220,0)
 . S NODE=$NA(RORTSK("PARAMS","OTHER_REGISTRIES","C"))
"RTN","RORXU002",221,0)
 . S REGIEN=0
"RTN","RORXU002",222,0)
 . F  S REGIEN=$O(@NODE@(REGIEN))  Q:REGIEN'>0  D  Q:RC<0
"RTN","RORXU002",223,0)
 . . S TMP=$P($$REGNAME^RORUTL01(REGIEN),U,2)
"RTN","RORXU002",224,0)
 . . S MODE=+$G(@NODE@(REGIEN))
"RTN","RORXU002",225,0)
 . . I 'MODE!(TMP="")  K @NODE@(REGIEN)  Q
"RTN","RORXU002",226,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",227,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"REGNAME",TMP,LTAG)
"RTN","RORXU002",228,0)
 . S FLAGS=FLAGS_"R"
"RTN","RORXU002",229,0)
 ;
"RTN","RORXU002",230,0)
 ;=== Local Fields
"RTN","RORXU002",231,0)
 I $D(RORTSK("PARAMS","LOCAL_FIELDS","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",232,0)
 . N NODE,IEN,IENS
"RTN","RORXU002",233,0)
 . S LTAG=$$ADDVAL^RORTSK11(RORTSK,"LOCAL_FIELDS",,PARAMS)
"RTN","RORXU002",234,0)
 . I LTAG<0  S RC=+LTAG  Q
"RTN","RORXU002",235,0)
 . S NODE=$NA(RORTSK("PARAMS","LOCAL_FIELDS","C"))
"RTN","RORXU002",236,0)
 . S IEN=0
"RTN","RORXU002",237,0)
 . F  S IEN=$O(@NODE@(IEN))  Q:IEN'>0  D  Q:RC<0
"RTN","RORXU002",238,0)
 . . S TMP=$$GET1^DIQ(799.53,IEN_",",.01,,,"RORMSG")
"RTN","RORXU002",239,0)
 . . D:$G(DIERR) DBS^RORERR("RORMSG",-9,,,799.53,IEN_",")
"RTN","RORXU002",240,0)
 . . S MODE=+$G(@NODE@(IEN))
"RTN","RORXU002",241,0)
 . . I 'MODE!(TMP="")  K @NODE@(IEN)  Q
"RTN","RORXU002",242,0)
 . . S TMP=TMP_" ("_$S(MODE<0:"Exclude",1:"Include")_")"
"RTN","RORXU002",243,0)
 . . S RC=$$ADDVAL^RORTSK11(RORTSK,"FIELD",TMP,LTAG)
"RTN","RORXU002",244,0)
 . S FLAGS=FLAGS_"O"
"RTN","RORXU002",245,0)
 ;
"RTN","RORXU002",246,0)
 ;=== Lab test ranges
"RTN","RORXU002",247,0)
 I $D(RORTSK("PARAMS","LRGRANGES","C"))>1  D  Q:RC<0 RC
"RTN","RORXU002",248,0)
 . N TYPE S TYPE=3 ;default = 3 for 'lab by range' report
"RTN","RORXU002",249,0)
 . I $G(RORTSK("EP"))["BMIRANGE" S TYPE=5 ;change to 5 if BMI
"RTN","RORXU002",250,0)
 . I $G(RORTSK("EP"))["MLDRANGE" S TYPE=6 ;change to 6 if MELD
"RTN","RORXU002",251,0)
 . I $G(RORTSK("EP"))["RFRANGE" S TYPE=7 ;change to 7 if Renal
"RTN","RORXU002",252,0)
 . N GRC,NODE
"RTN","RORXU002",253,0)
 . S NODE=$NA(RORTSK("PARAMS","LRGRANGES","C"))
"RTN","RORXU002",254,0)
 . S GRC=0
"RTN","RORXU002",255,0)
 . F  S GRC=$O(@NODE@(GRC))  Q:GRC'>0  D  Q:RC<0
"RTN","RORXU002",256,0)
 . . S RC=$$ITEMIEN^RORUTL09(TYPE,REGIEN,GRC,.TMP)
"RTN","RORXU002",257,0)
 . . S:RC'<0 @NODE@(GRC)=TMP
"RTN","RORXU002",258,0)
 ;
"RTN","RORXU002",259,0)
 ;=== ICD-9 filter/group/codes
"RTN","RORXU002",260,0)
 N LEV1FILT,LEV2GRP,LEV3ICD9,ICD9IEN,ICD9CODE,GRPNAME,FILTER,ICD9DESC
"RTN","RORXU002",261,0)
 S FILTER=$G(RORTSK("PARAMS","ICD9FILT","A","FILTER"))
"RTN","RORXU002",262,0)
 I $L(FILTER)>0 D  ;quit if no ICD9 filter exists
"RTN","RORXU002",263,0)
 . S LEV1FILT=$$ADDVAL^RORTSK11(RORTSK,"ICD9FILT",,PARAMS)
"RTN","RORXU002",264,0)
 . I LEV1FILT<0 S RC=LEV1FILT Q
"RTN","RORXU002",265,0)
 . ;add filter value to the output
"RTN","RORXU002",266,0)
 . S RC=$$ADDATTR^RORTSK11(RORTSK,LEV1FILT,"FILTER",FILTER)
"RTN","RORXU002",267,0)
 . ;if there's an ICD9 group, process it
"RTN","RORXU002",268,0)
 . I $D(RORTSK("PARAMS","ICD9FILT","G"))>1 D  Q:RC<0
"RTN","RORXU002",269,0)
 .. S NODE=$NA(RORTSK("PARAMS","ICD9FILT","G"))
"RTN","RORXU002",270,0)
 .. S GRPNAME=0,RC=0
"RTN","RORXU002",271,0)
 .. F  S GRPNAME=$O(@NODE@(GRPNAME)) Q:GRPNAME=""  D  Q:RC<0
"RTN","RORXU002",272,0)
 ... S LEV2GRP=$$ADDVAL^RORTSK11(RORTSK,"GROUP",,LEV1FILT)
"RTN","RORXU002",273,0)
 ... I LEV2GRP'>0  S RC=LEV2GRP Q 
"RTN","RORXU002",274,0)
 ... ;add group name to the output
"RTN","RORXU002",275,0)
 ... D ADDATTR^RORTSK11(RORTSK,LEV2GRP,"ID",GRPNAME)
"RTN","RORXU002",276,0)
 ... S ICD9IEN=0
"RTN","RORXU002",277,0)
 ... F  S ICD9IEN=$O(@NODE@(GRPNAME,"C",ICD9IEN)) Q:ICD9IEN'>0  D
"RTN","RORXU002",278,0)
 .... S ICD9CODE=+$G(@NODE@(GRPNAME,"C",ICD9IEN)) Q:ICD9CODE'>0
"RTN","RORXU002",279,0)
 .... ;get diagnosis description
"RTN","RORXU002",280,0)
 .... N RORDESC K RORDESC S TMP=$$ICDD^ICDCODE(ICD9CODE,"RORDESC")
"RTN","RORXU002",281,0)
 .... S ICD9DESC=$G(RORDESC(1))
"RTN","RORXU002",282,0)
 .... S LEV3ICD9=$$ADDVAL^RORTSK11(RORTSK,"ICD9",$G(ICD9DESC),LEV2GRP)
"RTN","RORXU002",283,0)
 .... D ADDATTR^RORTSK11(RORTSK,LEV3ICD9,"ID",$G(ICD9CODE))
"RTN","RORXU002",284,0)
 .... K RORDESC
"RTN","RORXU002",285,0)
 ;
"RTN","RORXU002",286,0)
 ;=== get Max Date
"RTN","RORXU002",287,0)
 N MAXDT S MAXDT=$$PARAM^RORTSK01("OPTIONS","MAX_DATE")
"RTN","RORXU002",288,0)
 I $G(MAXDT)>0 D ADDVAL^RORTSK11(RORTSK,"MAX_DATE",MAXDT,PARAMS)
"RTN","RORXU002",289,0)
 ;
"RTN","RORXU002",290,0)
 ;=== get HIV_DX
"RTN","RORXU002",291,0)
 N RORMODE S RORMODE=$$PARAM^RORTSK01("HIV_DX")
"RTN","RORXU002",292,0)
 S RORMODE=$S(RORMODE=1:"Include",RORMODE=-1:"Exclude",1:"")
"RTN","RORXU002",293,0)
 I RORMODE'="" D
"RTN","RORXU002",294,0)
 . D ADDVAL^RORTSK11(RORTSK,"HIV_DX",RORMODE,PARAMS)
"RTN","RORXU002",295,0)
 . S FLAGS=FLAGS_"H"
"RTN","RORXU002",296,0)
 ;
"RTN","RORXU002",297,0)
 ;=== Defaults
"RTN","RORXU002",298,0)
 S TMP=$TR(FLAGS,"FNP")  S:$L(FLAGS)-$L(TMP)=3 FLAGS=TMP
"RTN","RORXU002",299,0)
 S FLAGS=FLAGS_"DG"
"RTN","RORXU002",300,0)
 ;
"RTN","RORXU002",301,0)
 ;=== Success
"RTN","RORXU002",302,0)
 Q PARAMS
"RTN","RORXU002",303,0)
 ;
"RTN","RORXU002",304,0)
 ;***** GENERATES TABLE DEFINITION
"RTN","RORXU002",305,0)
 ;
"RTN","RORXU002",306,0)
 ; TBLREF        Reference to the definition table in the source
"RTN","RORXU002",307,0)
 ;               code (TAG^ROUTINE). See the HEADER^RORX013 for
"RTN","RORXU002",308,0)
 ;               examples of table definitions.
"RTN","RORXU002",309,0)
 ;
"RTN","RORXU002",310,0)
 ; HEADER        IEN of the HEADER element
"RTN","RORXU002",311,0)
 ;
"RTN","RORXU002",312,0)
 ; Return Values:
"RTN","RORXU002",313,0)
 ;       <0  Error code
"RTN","RORXU002",314,0)
 ;        0  Ok
"RTN","RORXU002",315,0)
 ;
"RTN","RORXU002",316,0)
TBLDEF(TBLREF,HEADER) ;
"RTN","RORXU002",317,0)
 N COND,IT,NAME,RC,RORSRC,TBLDEF,TERM,TGET
"RTN","RORXU002",318,0)
 S TGET="S RORSRC=$T("_$P(TBLREF,"^")_"+IT^"_$P(TBLREF,"^",2)_")"
"RTN","RORXU002",319,0)
 S RC=0
"RTN","RORXU002",320,0)
 F IT=1:1  X TGET  S RORSRC=$P(RORSRC,";;",2)  Q:RORSRC=""  D  Q:RC<0
"RTN","RORXU002",321,0)
 . S COND=$$TRIM^XLFSTR($P(RORSRC,U,2,999))
"RTN","RORXU002",322,0)
 . I COND'=""  X COND  E  Q
"RTN","RORXU002",323,0)
 . S RORSRC=$$TRIM^XLFSTR($P(RORSRC,U))
"RTN","RORXU002",324,0)
 . S NAME=$$COLSCAN(.TERM)  Q:(NAME="")!(TERM'="(")
"RTN","RORXU002",325,0)
 . S TBLDEF=$$ADDVAL^RORTSK11(RORTSK,"TBLDEF",,HEADER)
"RTN","RORXU002",326,0)
 . I TBLDEF<0  S RC=TBLDEF  Q
"RTN","RORXU002",327,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"NAME",NAME)
"RTN","RORXU002",328,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"HEADER","1")
"RTN","RORXU002",329,0)
 . D ADDATTR^RORTSK11(RORTSK,TBLDEF,"FOOTER","1")
"RTN","RORXU002",330,0)
 . D TBLDEF1(TBLDEF)
"RTN","RORXU002",331,0)
 Q $S(RC<0:RC,1:0)
"RTN","RORXU002",332,0)
 ;
"RTN","RORXU002",333,0)
 ;***** GENERATES <COLUMN> ELEMENTS FROM TABLE DEFINITION (RORSRC)
"RTN","RORXU002",334,0)
 ;
"RTN","RORXU002",335,0)
 ; PTAG          IEN of the parent element
"RTN","RORXU002",336,0)
 ;
"RTN","RORXU002",337,0)
TBLDEF1(PTAG) ;
"RTN","RORXU002",338,0)
 N COLUMN,NAME,TERM
"RTN","RORXU002",339,0)
 F  S NAME=$$COLSCAN(.TERM)  Q:NAME=""  D  Q:")"[TERM
"RTN","RORXU002",340,0)
 . S COLUMN=$$ADDVAL^RORTSK11(RORTSK,"COLUMN",,PTAG)
"RTN","RORXU002",341,0)
 . D ADDATTR^RORTSK11(RORTSK,COLUMN,"NAME",NAME)
"RTN","RORXU002",342,0)
 . D:TERM="(" TBLDEF1(COLUMN)
"RTN","RORXU002",343,0)
 Q
"SEC","^DIC",799.31,799.31,0,"AUDIT")
@
"SEC","^DIC",799.31,799.31,0,"DD")
@
"SEC","^DIC",799.31,799.31,0,"DEL")
@
"SEC","^DIC",799.31,799.31,0,"LAYGO")
@
"SEC","^DIC",799.31,799.31,0,"RD")

"SEC","^DIC",799.31,799.31,0,"WR")
@
"SEC","^DIC",799.34,799.34,0,"AUDIT")
@
"SEC","^DIC",799.34,799.34,0,"DD")
@
"SEC","^DIC",799.34,799.34,0,"DEL")
@
"SEC","^DIC",799.34,799.34,0,"LAYGO")
@
"SEC","^DIC",799.34,799.34,0,"RD")
@
"SEC","^DIC",799.34,799.34,0,"WR")
@
"VER")
8.0^22.0
"^DD",799.31,799.31,0)
FIELD^^.01^1
"^DD",799.31,799.31,0,"DDA")
N
"^DD",799.31,799.31,0,"DT")
3021130
"^DD",799.31,799.31,0,"NM","ROR XML ITEM")

"^DD",799.31,799.31,0,"PT",798.87,.01)

"^DD",799.31,799.31,0,"PT",798.872,.01)

"^DD",799.31,799.31,0,"VRPK")
ROR
"^DD",799.31,799.31,0,"VRRV")
1.5^ROR 1.5
"^DD",799.31,799.31,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.31,,-1)  K:$L(X)>30!($L(X)<2)!'(X'?1P.E) X
"^DD",799.31,799.31,.01,1,0)
^.1^^0
"^DD",799.31,799.31,.01,3)
Enter the tag name (2-30 characters).
"^DD",799.31,799.31,.01,8.5)
@
"^DD",799.31,799.31,.01,9)
@
"^DD",799.31,799.31,.01,21,0)
^.001^4^4^3030506^^
"^DD",799.31,799.31,.01,21,1,0)
This field stores the tag name. The name should 
"^DD",799.31,799.31,.01,21,2,0)
not contain spaces and any punctuation marks 
"^DD",799.31,799.31,.01,21,3,0)
except underscore. See an XML reference guide for
"^DD",799.31,799.31,.01,21,4,0)
more details.
"^DD",799.31,799.31,.01,23,0)
^^4^4^3060203^
"^DD",799.31,799.31,.01,23,1,0)
Please use shorter names for tags that will be used
"^DD",799.31,799.31,.01,23,2,0)
more often and/or will be repeated many times in the
"^DD",799.31,799.31,.01,23,3,0)
report. This will decrease amount of the overhead data
"^DD",799.31,799.31,.01,23,4,0)
transmitted from the server to the GUI.
"^DD",799.31,799.31,.01,"DEL",1,0)
I $$VADEL^RORDD(799.31,,-1)
"^DD",799.31,799.31,.01,"DT")
3050722
"^DD",799.34,799.34,0)
FIELD^^12^10
"^DD",799.34,799.34,0,"DDA")
N
"^DD",799.34,799.34,0,"DT")
3051121
"^DD",799.34,799.34,0,"IX","B",799.34,.01)

"^DD",799.34,799.34,0,"NM","ROR REPORT PARAMETERS")

"^DD",799.34,799.34,0,"PT",798.12,.01)

"^DD",799.34,799.34,0,"PT",798.8,.04)

"^DD",799.34,799.34,0,"VRPK")
ROR
"^DD",799.34,799.34,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.34,$G(DA))  K:$L(X)>60!($L(X)<3)!'(X'?1P.E) X
"^DD",799.34,799.34,.01,1,0)
^.1
"^DD",799.34,799.34,.01,1,1,0)
799.34^B
"^DD",799.34,799.34,.01,1,1,1)
S ^ROR(799.34,"B",$E(X,1,30),DA)=""
"^DD",799.34,799.34,.01,1,1,2)
K ^ROR(799.34,"B",$E(X,1,30),DA)
"^DD",799.34,799.34,.01,1,1,3)
Do not delete!
"^DD",799.34,799.34,.01,3)
Enter the report name (3-60 characters).
"^DD",799.34,799.34,.01,8.5)
@
"^DD",799.34,799.34,.01,9)
@
"^DD",799.34,799.34,.01,21,0)
^^5^5^3030505^
"^DD",799.34,799.34,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,.01,21,3,0)
 
"^DD",799.34,799.34,.01,21,4,0)
The name of the report stored in the NAME field is
"^DD",799.34,799.34,.01,21,5,0)
displayed in the Reports sub-menu of the GUI.
"^DD",799.34,799.34,.01,"DEL",1,0)
I $$VADEL^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.01,"DT")
3021126
"^DD",799.34,799.34,.02,0)
BACKGROUND PROCESSING?^SX^0:NO;1:YES;^0;2^Q:$$VAEDT^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.02,8.5)
@
"^DD",799.34,799.34,.02,9)
@
"^DD",799.34,799.34,.02,21,0)
^^6^6^3030506^
"^DD",799.34,799.34,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,.02,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,.02,21,3,0)
 
"^DD",799.34,799.34,.02,21,4,0)
If the BACKGROUND PROCESSING? field is set to
"^DD",799.34,799.34,.02,21,5,0)
'YES' then the report will be scheduled to run as
"^DD",799.34,799.34,.02,21,6,0)
a background task.
"^DD",799.34,799.34,.02,23,0)
^^1^1^3030506^
"^DD",799.34,799.34,.02,23,1,0)
Only background processing is currently implemented.
"^DD",799.34,799.34,.02,"DEL",1,0)
I $$VADEL^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.02,"DT")
3021127
"^DD",799.34,799.34,.03,0)
SHARED TEMPLATES^SX^0:NO;1:YES;^0;3^Q:$$VAEDT^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.03,8.5)
@
"^DD",799.34,799.34,.03,9)
@
"^DD",799.34,799.34,.03,21,0)
^^7^7^3051121^
"^DD",799.34,799.34,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,.03,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,.03,21,3,0)
 
"^DD",799.34,799.34,.03,21,4,0)
If this field is set to 'YES', then report 
"^DD",799.34,799.34,.03,21,5,0)
parameter templates are shared between all 
"^DD",799.34,799.34,.03,21,6,0)
registries. Otherwise, the templates are 
"^DD",799.34,799.34,.03,21,7,0)
registry-specific.
"^DD",799.34,799.34,.03,"DEL",1,0)
I $$VADEL^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,.03,"DT")
3051121
"^DD",799.34,799.34,.04,0)
CODE^RNJ3,0X^^0;4^Q:$$VAEDT^RORDD(799.34,$G(DA))  K:+X'=X!(X>999)!(X<1)!(X?.E1"."1N.N) X
"^DD",799.34,799.34,.04,3)
Enter the unique report code (between 1 and 999, 0 Decimal Digits).
"^DD",799.34,799.34,.04,8.5)
@
"^DD",799.34,799.34,.04,9)
@
"^DD",799.34,799.34,.04,21,0)
^^5^5^3030505^
"^DD",799.34,799.34,.04,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,.04,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,.04,21,3,0)
 
"^DD",799.34,799.34,.04,21,4,0)
The CODE field stores the unique code of the
"^DD",799.34,799.34,.04,21,5,0)
report.
"^DD",799.34,799.34,.04,23,0)
^^19^19^3030507^
"^DD",799.34,799.34,.04,23,1,0)
The corresponding XSL templates for the report are 
"^DD",799.34,799.34,.04,23,2,0)
stored in the DIALOG file (#.84). The dialog number 
"^DD",799.34,799.34,.04,23,3,0)
of the template has the following structure:
"^DD",799.34,799.34,.04,23,4,0)
 
"^DD",799.34,799.34,.04,23,5,0)
 7981CCC.TTT
"^DD",799.34,799.34,.04,23,6,0)
 
"^DD",799.34,799.34,.04,23,7,0)
 'CCC' is the code of the report.
"^DD",799.34,799.34,.04,23,8,0)
 
"^DD",799.34,799.34,.04,23,9,0)
 'TTT' is the type of the template:
"^DD",799.34,799.34,.04,23,10,0)
        001 - HTML Preview,
"^DD",799.34,799.34,.04,23,11,0)
        002 - Delimited Format (CSV),
"^DD",799.34,799.34,.04,23,12,0)
        003 - Printer Output.
"^DD",799.34,799.34,.04,23,13,0)
 
"^DD",799.34,799.34,.04,23,14,0)
For example, the dialog 7981001.001 contains the HTML
"^DD",799.34,799.34,.04,23,15,0)
preview template for the List of Registry Patients
"^DD",799.34,799.34,.04,23,16,0)
(report code: 1).
"^DD",799.34,799.34,.04,23,17,0)
 
"^DD",799.34,799.34,.04,23,18,0)
If no template is defined for the report then the
"^DD",799.34,799.34,.04,23,19,0)
default template from dialog 7981000 is used.
"^DD",799.34,799.34,.04,"DT")
3030401
"^DD",799.34,799.34,.05,0)
DATE OF INACTIVATION^D^^0;5^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",799.34,799.34,.05,21,0)
^^5^5^3030505^
"^DD",799.34,799.34,.05,21,1,0)
If this field has a value, the report will be
"^DD",799.34,799.34,.05,21,2,0)
considered inactive after this date. Use this
"^DD",799.34,799.34,.05,21,3,0)
field to disable unnecessary reports (and hide
"^DD",799.34,799.34,.05,21,4,0)
them from the Report sub-menu of the GUI) instead
"^DD",799.34,799.34,.05,21,5,0)
of deleting them.
"^DD",799.34,799.34,.05,23,0)
^^3^3^3030505^
"^DD",799.34,799.34,.05,23,1,0)
The ROR REPORTS AVAILABLE remote procedure analyzes
"^DD",799.34,799.34,.05,23,2,0)
this field when it loads the list of available reports
"^DD",799.34,799.34,.05,23,3,0)
and skips the inactive ones.
"^DD",799.34,799.34,.05,"DT")
3021126
"^DD",799.34,799.34,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;9^Q:$$VAEDT^RORDD(799.34,,-1)
"^DD",799.34,799.34,.09,8.5)
@
"^DD",799.34,799.34,.09,9)
@
"^DD",799.34,799.34,.09,21,0)
^^7^7^3030506^
"^DD",799.34,799.34,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",799.34,799.34,.09,21,2,0)
EDIT THIS FIELD!
"^DD",799.34,799.34,.09,21,3,0)
 
"^DD",799.34,799.34,.09,21,4,0)
Reports distributed with the national registries
"^DD",799.34,799.34,.09,21,5,0)
must have this field set to "YES". This prevents
"^DD",799.34,799.34,.09,21,6,0)
local editing of other fields of report
"^DD",799.34,799.34,.09,21,7,0)
definitions.
"^DD",799.34,799.34,.09,"DEL",1,0)
I $$VADEL^RORDD(799.34,,,-1)
"^DD",799.34,799.34,.09,"DT")
3021126
"^DD",799.34,799.34,1,0)
PARAMETER PANELS^FX^^1;E1,250^Q:$$VAEDT^RORDD(799.34,$G(DA))  K:$L(X)>250!($L(X)<1) X
"^DD",799.34,799.34,1,3)
Enter codes of dialog panels separated by commas (1-250 characters).
"^DD",799.34,799.34,1,8.5)
@
"^DD",799.34,799.34,1,9)
@
"^DD",799.34,799.34,1,21,0)
^^7^7^3030507^
"^DD",799.34,799.34,1,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,1,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,1,21,3,0)
 
"^DD",799.34,799.34,1,21,4,0)
The PARAMETER PANELS field stores the list of 
"^DD",799.34,799.34,1,21,5,0)
panel codes separated by commas. The panels are 
"^DD",799.34,799.34,1,21,6,0)
combined by the GUI into the dialog form that is
"^DD",799.34,799.34,1,21,7,0)
used to request values of the report parameters.
"^DD",799.34,799.34,1,"DEL",1,0)
I $$VADEL^RORDD(799.34,$G(DA))
"^DD",799.34,799.34,1,"DT")
3030304
"^DD",799.34,799.34,10.01,0)
REPORT BUILDER^RFX^^10.01;E1,245^Q:$$VAEDT^RORDD(799.34,$G(DA))  Q:$$EP^RORDD(1)
"^DD",799.34,799.34,10.01,3)
Answer must be $$TAG^ROUTINE (5-19 characters in length).
"^DD",799.34,799.34,10.01,8.5)
@
"^DD",799.34,799.34,10.01,9)
@
"^DD",799.34,799.34,10.01,21,0)
^.001^6^6^3060106^^
"^DD",799.34,799.34,10.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS PART OF A
"^DD",799.34,799.34,10.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.34,799.34,10.01,21,3,0)
 
"^DD",799.34,799.34,10.01,21,4,0)
The REPORT BUILDER field stores a reference to the
"^DD",799.34,799.34,10.01,21,5,0)
function that is used to build the report (the
"^DD",799.34,799.34,10.01,21,6,0)
report builder).
"^DD",799.34,799.34,10.01,23,0)
^^24^24^3060106^
"^DD",799.34,799.34,10.01,23,1,0)
The call-back entry point is called with a single
"^DD",799.34,799.34,10.01,23,2,0)
parameter. The parameter is a reference to a local
"^DD",799.34,799.34,10.01,23,3,0)
variable that contains values of the report parameters.
"^DD",799.34,799.34,10.01,23,4,0)
 
"^DD",799.34,799.34,10.01,23,5,0)
 RORTSK(            Task Number
"^DD",799.34,799.34,10.01,23,6,0)
 
"^DD",799.34,799.34,10.01,23,7,0)
   "EP")            Entry Point ($$TAG^ROUTINE)
"^DD",799.34,799.34,10.01,23,8,0)
 
"^DD",799.34,799.34,10.01,23,9,0)
   "PARAMS",...)    See the CCR Programmer's Reference 
"^DD",799.34,799.34,10.01,23,10,0)
                    Manual for details
"^DD",799.34,799.34,10.01,23,11,0)
 
"^DD",799.34,799.34,10.01,23,12,0)
   "REGIEN")        Registry IEN
"^DD",799.34,799.34,10.01,23,13,0)
 
"^DD",799.34,799.34,10.01,23,14,0)
   "TYPE")          Type of the Task
"^DD",799.34,799.34,10.01,23,15,0)
   "REPORT")        Code of the Report
"^DD",799.34,799.34,10.01,23,16,0)
   "SCHCODE")       Rescheduling Code
"^DD",799.34,799.34,10.01,23,17,0)
 
"^DD",799.34,799.34,10.01,23,18,0)
The function must return 0 in the case of successful
"^DD",799.34,799.34,10.01,23,19,0)
completion. Otherwise, a negative error code must be 
"^DD",799.34,799.34,10.01,23,20,0)
returned.
"^DD",799.34,799.34,10.01,23,21,0)
 
"^DD",799.34,799.34,10.01,23,22,0)
See description of the ROR REPORT SCHEDULE remote
"^DD",799.34,799.34,10.01,23,23,0)
procedure and source code of the RORTSK01 routine for
"^DD",799.34,799.34,10.01,23,24,0)
more details.
"^DD",799.34,799.34,10.01,"DT")
3021126
"^DD",799.34,799.34,11,0)
DEFAULT PARAMETERS^799.3411^^11;0
"^DD",799.34,799.34,11,9)
@
"^DD",799.34,799.34,11,21,0)
^.001^2^2^3040124^^
"^DD",799.34,799.34,11,21,1,0)
This field stores the default values for the 
"^DD",799.34,799.34,11,21,2,0)
report parameters (in the NAME=VALUE format).
"^DD",799.34,799.34,12,0)
DEFAULT SORTING^799.3412^^12;0
"^DD",799.34,799.34,12,9)
@
"^DD",799.34,799.34,12,21,0)
^^2^2^3040121^
"^DD",799.34,799.34,12,21,1,0)
This field stores the default sorting modes for
"^DD",799.34,799.34,12,21,2,0)
the report (in the TABLE=FIELD format).
"^DD",799.34,799.3411,0)
DEFAULT PARAMETERS SUB-FIELD^^.01^1
"^DD",799.34,799.3411,0,"DT")
3030918
"^DD",799.34,799.3411,0,"NM","DEFAULT PARAMETERS")

"^DD",799.34,799.3411,0,"UP")
799.34
"^DD",799.34,799.3411,.01,0)
DEFAULT PARAMETERS^WL^^0;1^Q
"^DD",799.34,799.3411,.01,8.5)
@
"^DD",799.34,799.3411,.01,9)
@
"^DD",799.34,799.3411,.01,"DT")
3030918
"^DD",799.34,799.3412,0)
DEFAULT SORTING SUB-FIELD^^.01^1
"^DD",799.34,799.3412,0,"DT")
3031103
"^DD",799.34,799.3412,0,"NM","DEFAULT SORTING")

"^DD",799.34,799.3412,0,"UP")
799.34
"^DD",799.34,799.3412,.01,0)
DEFAULT SORTING^WL^^0;1^Q
"^DD",799.34,799.3412,.01,8.5)
@
"^DD",799.34,799.3412,.01,9)
@
"^DD",799.34,799.3412,.01,"DT")
3031103
"^DD",799.51,799.51,0)
FIELD^^.09^5
"^DD",799.51,799.51,0,"DDA")
N
"^DD",799.51,799.51,0,"DT")
3040114
"^DD",799.51,799.51,0,"IX","AR",799.51,.02)

"^DD",799.51,799.51,0,"IX","B",799.51,.01)

"^DD",799.51,799.51,0,"NM","ROR GENERIC DRUG")

"^DD",799.51,799.51,0,"VRPK")
ROR
"^DD",799.51,799.51,0,"VRRV")
1.1^ROR*1*5
"^DD",799.51,799.51,.01,0)
NAME^RFX^^0;1^Q:$$VAEDT^RORDD(799.51,$G(DA))  K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",799.51,799.51,.01,1,0)
^.1
"^DD",799.51,799.51,.01,1,1,0)
799.51^B
"^DD",799.51,799.51,.01,1,1,1)
S ^ROR(799.51,"B",$E(X,1,30),DA)=""
"^DD",799.51,799.51,.01,1,1,2)
K ^ROR(799.51,"B",$E(X,1,30),DA)
"^DD",799.51,799.51,.01,1,1,3)
Do not delete!
"^DD",799.51,799.51,.01,3)
Name must be 3-30 characters, not numeric or starting with punctuation.
"^DD",799.51,799.51,.01,8.5)
@
"^DD",799.51,799.51,.01,9)
@
"^DD",799.51,799.51,.01,21,0)
^.001^4^4^3040124^^^
"^DD",799.51,799.51,.01,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.01,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.01,21,3,0)
 
"^DD",799.51,799.51,.01,21,4,0)
The NAME field stores a short name of the drug.
"^DD",799.51,799.51,.01,"DEL",1,0)
I $$VADEL^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.02,0)
REGISTRY^RP798.1'X^ROR(798.1,^0;2^Q:$$VAEDT^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.02,1,0)
^.1
"^DD",799.51,799.51,.02,1,1,0)
799.51^AR
"^DD",799.51,799.51,.02,1,1,1)
S ^ROR(799.51,"AR",$E(X,1,30),DA)=""
"^DD",799.51,799.51,.02,1,1,2)
K ^ROR(799.51,"AR",$E(X,1,30),DA)
"^DD",799.51,799.51,.02,1,1,3)
Do not delete!
"^DD",799.51,799.51,.02,1,1,"%D",0)
^^2^2^3040124^
"^DD",799.51,799.51,.02,1,1,"%D",1,0)
This cross-reference groups all drugs associated
"^DD",799.51,799.51,.02,1,1,"%D",2,0)
with a particular registry together.
"^DD",799.51,799.51,.02,1,1,"DT")
3030818
"^DD",799.51,799.51,.02,8.5)
@
"^DD",799.51,799.51,.02,9)
@
"^DD",799.51,799.51,.02,21,0)
^^5^5^3040124^
"^DD",799.51,799.51,.02,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.02,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.02,21,3,0)
 
"^DD",799.51,799.51,.02,21,4,0)
This field identifies the registry that the drug 
"^DD",799.51,799.51,.02,21,5,0)
is associated with.
"^DD",799.51,799.51,.02,"DT")
3040114
"^DD",799.51,799.51,.03,0)
DRUG GROUP^R*P799.1'X^ROR(799.1,^0;3^Q:$$VAEDT^RORDD(799.51,$G(DA))  S Y=$P($G(^ROR(799.51,DA,0)),U,2),DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"") D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
"^DD",799.51,799.51,.03,3)

"^DD",799.51,799.51,.03,8.5)
@
"^DD",799.51,799.51,.03,9)
@
"^DD",799.51,799.51,.03,12)
Only Drug Groups can be selected.
"^DD",799.51,799.51,.03,12.1)
S DIC("S")="S D=$G(^(0)) I $P(D,U,2)=4"_$S(Y>0:",$P(D,U,3)="_Y,1:"")
"^DD",799.51,799.51,.03,21,0)
^^2^2^3040124^
"^DD",799.51,799.51,.03,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.03,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.03,23,0)
^^2^2^3040124^
"^DD",799.51,799.51,.03,23,1,0)
This field is not used currently. It is reserved for 
"^DD",799.51,799.51,.03,23,2,0)
future use.
"^DD",799.51,799.51,.03,"DT")
3040124
"^DD",799.51,799.51,.04,0)
VA GENERIC^RP50.6'X^PSNDF(50.6,^0;4^Q:$$VAEDT^RORDD(799.51,$G(DA))
"^DD",799.51,799.51,.04,8.5)
@
"^DD",799.51,799.51,.04,9)
@
"^DD",799.51,799.51,.04,21,0)
^^2^2^3040124^
"^DD",799.51,799.51,.04,21,1,0)
YOU MUST NOT EDIT THIS FIELD IF IT IS A PART OF 
"^DD",799.51,799.51,.04,21,2,0)
NATIONAL REGISTRY DEFINITION!
"^DD",799.51,799.51,.04,"DT")
3040114
"^DD",799.51,799.51,.09,0)
NATIONAL^SX^0:NO;1:YES;^0;9^Q:$$VAEDT^RORDD(799.51,,-1)
"^DD",799.51,799.51,.09,8.5)
@
"^DD",799.51,799.51,.09,9)
@
"^DD",799.51,799.51,.09,21,0)
^^6^6^3060203^
"^DD",799.51,799.51,.09,21,1,0)
ONLY AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN
"^DD",799.51,799.51,.09,21,2,0)
EDIT THIS FIELD!
"^DD",799.51,799.51,.09,21,3,0)
 
"^DD",799.51,799.51,.09,21,4,0)
Drugs associated with the national registries must
"^DD",799.51,799.51,.09,21,5,0)
have this field set to "YES". This prevents local
"^DD",799.51,799.51,.09,21,6,0)
editing of other fields of the record.
"^DD",799.51,799.51,.09,"DEL",1,0)
I $$VADEL^RORDD(799.51,,-1)
"^DD",799.51,799.51,.09,"DT")
3030818
"^DIC",799.31,799.31,0)
ROR XML ITEM^799.31
"^DIC",799.31,799.31,0,"GL")
^ROR(799.31,
"^DIC",799.31,799.31,"%",0)
^1.005^^0
"^DIC",799.31,799.31,"%D",0)
^^7^7^3040124^
"^DIC",799.31,799.31,"%D",1,0)
THIS FILE MUST NOT BE MODIFIED LOCALLY! ONLY 
"^DIC",799.31,799.31,"%D",2,0)
AUTHORIZED NATIONAL REGISTRY DEVELOPERS CAN EDIT
"^DIC",799.31,799.31,"%D",3,0)
THIS FILE!
"^DIC",799.31,799.31,"%D",4,0)
 
"^DIC",799.31,799.31,"%D",5,0)
The ROR XML ELEMENT file contains a list of XML 
"^DIC",799.31,799.31,"%D",6,0)
tags and attributes that can be used in the 
"^DIC",799.31,799.31,"%D",7,0)
reports.
"^DIC",799.31,"B","ROR XML ITEM",799.31)

"^DIC",799.34,799.34,0)
ROR REPORT PARAMETERS^799.34
"^DIC",799.34,799.34,0,"GL")
^ROR(799.34,
"^DIC",799.34,799.34,"%",0)
^1.005^^0
"^DIC",799.34,799.34,"%D",0)
^^7^7^3030814^^
"^DIC",799.34,799.34,"%D",1,0)
The ROR REPORT PARAMETERS file stores the report
"^DIC",799.34,799.34,"%D",2,0)
definitions that are used by the ROR REPORT 
"^DIC",799.34,799.34,"%D",3,0)
SCHEDULE remote procedure to schedule the reports.
"^DIC",799.34,799.34,"%D",4,0)
 
"^DIC",799.34,799.34,"%D",5,0)
Records of the file are uniquely identified by the
"^DIC",799.34,799.34,"%D",6,0)
report code (the "A" primary key and the
"^DIC",799.34,799.34,"%D",7,0)
uniqueness index "KEY" are used for that purpose).
"^DIC",799.34,"B","ROR REPORT PARAMETERS",799.34)

"^DIC",799.51,799.51,0)
ROR GENERIC DRUG^799.51
"^DIC",799.51,799.51,0,"GL")
^ROR(799.51,
"^DIC",799.51,799.51,"%",0)
^1.005^^0
"^DIC",799.51,799.51,"%D",0)
^^5^5^3060203^
"^DIC",799.51,799.51,"%D",1,0)
This file contains a list of registry specific
"^DIC",799.51,799.51,"%D",2,0)
generic medications. For example, the ARV 
"^DIC",799.51,799.51,"%D",3,0)
(anti-retroviral) medications associated with the
"^DIC",799.51,799.51,"%D",4,0)
Human Immunodeficiency Virus (HIV) registry are
"^DIC",799.51,799.51,"%D",5,0)
stored here.
"^DIC",799.51,"B","ROR GENERIC DRUG",799.51)

"BLD",8727,6)
^17
**END**
**END**
