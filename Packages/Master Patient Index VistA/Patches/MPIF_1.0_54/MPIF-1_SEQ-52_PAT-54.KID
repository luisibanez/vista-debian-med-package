Released MPIF*1*54 SEQ #52
Extracted from mail message
**KIDS**:MPIF*1.0*54^

**INSTALL NAME**
MPIF*1.0*54
"BLD",2890,0)
MPIF*1.0*54^MASTER PATIENT INDEX VISTA^0^3120316^y
"BLD",2890,1,0)
^^4^4^3120109^
"BLD",2890,1,1,0)
MESSAGING ENHANCEMENTS FOR NEW FIELDS
"BLD",2890,1,2,0)
 
"BLD",2890,1,3,0)
Refer to patch MPIF*1*54 in the FORUM Patch Module for a complete
"BLD",2890,1,4,0)
description.
"BLD",2890,4,0)
^9.64PA^^
"BLD",2890,6.3)
2
"BLD",2890,"ABPKG")
n
"BLD",2890,"INID")
^y
"BLD",2890,"INIT")
MPIFP54
"BLD",2890,"KRN",0)
^9.67PA^779.2^20
"BLD",2890,"KRN",.4,0)
.4
"BLD",2890,"KRN",.401,0)
.401
"BLD",2890,"KRN",.402,0)
.402
"BLD",2890,"KRN",.403,0)
.403
"BLD",2890,"KRN",.5,0)
.5
"BLD",2890,"KRN",.84,0)
.84
"BLD",2890,"KRN",3.6,0)
3.6
"BLD",2890,"KRN",3.8,0)
3.8
"BLD",2890,"KRN",9.2,0)
9.2
"BLD",2890,"KRN",9.8,0)
9.8
"BLD",2890,"KRN",9.8,"NM",0)
^9.68A^8^8
"BLD",2890,"KRN",9.8,"NM",1,0)
MPIFVTQ^^0^B43904634
"BLD",2890,"KRN",9.8,"NM",2,0)
MPIFRES^^0^B25967604
"BLD",2890,"KRN",9.8,"NM",3,0)
MPIFA31B^^0^B18454677
"BLD",2890,"KRN",9.8,"NM",4,0)
MPIFFULL^^0^B8003985
"BLD",2890,"KRN",9.8,"NM",5,0)
MPIFQ0^^0^B72427777
"BLD",2890,"KRN",9.8,"NM",6,0)
MPIFA31I^^0^B18209474
"BLD",2890,"KRN",9.8,"NM",7,0)
MPIFA43^^0^B27559789
"BLD",2890,"KRN",9.8,"NM",8,0)
MPIFP54^^0^B92299
"BLD",2890,"KRN",9.8,"NM","B","MPIFA31B",3)

"BLD",2890,"KRN",9.8,"NM","B","MPIFA31I",6)

"BLD",2890,"KRN",9.8,"NM","B","MPIFA43",7)

"BLD",2890,"KRN",9.8,"NM","B","MPIFFULL",4)

"BLD",2890,"KRN",9.8,"NM","B","MPIFP54",8)

"BLD",2890,"KRN",9.8,"NM","B","MPIFQ0",5)

"BLD",2890,"KRN",9.8,"NM","B","MPIFRES",2)

"BLD",2890,"KRN",9.8,"NM","B","MPIFVTQ",1)

"BLD",2890,"KRN",19,0)
19
"BLD",2890,"KRN",19.1,0)
19.1
"BLD",2890,"KRN",101,0)
101
"BLD",2890,"KRN",409.61,0)
409.61
"BLD",2890,"KRN",771,0)
771
"BLD",2890,"KRN",779.2,0)
779.2
"BLD",2890,"KRN",870,0)
870
"BLD",2890,"KRN",8989.51,0)
8989.51
"BLD",2890,"KRN",8989.52,0)
8989.52
"BLD",2890,"KRN",8994,0)
8994
"BLD",2890,"KRN",8994,"NM",0)
^9.68A^2^2
"BLD",2890,"KRN",8994,"NM",1,0)
MPIF REMOTE FULL ICN STATS^^0
"BLD",2890,"KRN",8994,"NM",2,0)
MPIF REMOTE LOCAL ICN ASSIGN^^0
"BLD",2890,"KRN",8994,"NM","B","MPIF REMOTE FULL ICN STATS",1)

"BLD",2890,"KRN",8994,"NM","B","MPIF REMOTE LOCAL ICN ASSIGN",2)

"BLD",2890,"KRN","B",.4,.4)

"BLD",2890,"KRN","B",.401,.401)

"BLD",2890,"KRN","B",.402,.402)

"BLD",2890,"KRN","B",.403,.403)

"BLD",2890,"KRN","B",.5,.5)

"BLD",2890,"KRN","B",.84,.84)

"BLD",2890,"KRN","B",3.6,3.6)

"BLD",2890,"KRN","B",3.8,3.8)

"BLD",2890,"KRN","B",9.2,9.2)

"BLD",2890,"KRN","B",9.8,9.8)

"BLD",2890,"KRN","B",19,19)

"BLD",2890,"KRN","B",19.1,19.1)

"BLD",2890,"KRN","B",101,101)

"BLD",2890,"KRN","B",409.61,409.61)

"BLD",2890,"KRN","B",771,771)

"BLD",2890,"KRN","B",779.2,779.2)

"BLD",2890,"KRN","B",870,870)

"BLD",2890,"KRN","B",8989.51,8989.51)

"BLD",2890,"KRN","B",8989.52,8989.52)

"BLD",2890,"KRN","B",8994,8994)

"BLD",2890,"QUES",0)
^9.62^^
"BLD",2890,"REQB",0)
^9.611^6^5
"BLD",2890,"REQB",1,0)
DG*5.3*837^2
"BLD",2890,"REQB",2,0)
RG*1.0*59^2
"BLD",2890,"REQB",3,0)
MPIF*1.0*21^2
"BLD",2890,"REQB",4,0)
MPIF*1.0*46^2
"BLD",2890,"REQB",6,0)
MPIF*1.0*52^2
"BLD",2890,"REQB","B","DG*5.3*837",1)

"BLD",2890,"REQB","B","MPIF*1.0*21",3)

"BLD",2890,"REQB","B","MPIF*1.0*46",4)

"BLD",2890,"REQB","B","MPIF*1.0*52",6)

"BLD",2890,"REQB","B","RG*1.0*59",2)

"INIT")
MPIFP54
"KRN",8994,250,-1)
0^2
"KRN",8994,250,0)
MPIF REMOTE LOCAL ICN ASSIGN^LOCALIA^MPIFFULL^2^^^^^1
"KRN",8994,250,1,0)
^8994.01^3^3^3070530^^
"KRN",8994,250,1,1,0)
This RPC is to support assignment of local ICNs to the next X number of 
"KRN",8994,250,1,2,0)
patients that don't have an ICN already and aren't a merged record (-9 
"KRN",8994,250,1,3,0)
node).
"KRN",8994,250,2,0)
^8994.02A^1^1
"KRN",8994,250,2,1,0)
HOWM^1^32^1^2
"KRN",8994,250,2,1,1,0)
^8994.021^1^1^3070530^^^^
"KRN",8994,250,2,1,1,1,0)
Number of patients to get a local ICN assigned
"KRN",8994,250,2,"B","HOWM",1)

"KRN",8994,250,2,"PARAMSEQ",2,1)

"KRN",8994,250,3,0)
^8994.03^5^5^3070530^^^^
"KRN",8994,250,3,1,0)
RETURN=0 and RETURN(1)="PROCESS ALREADY RUNNING"
"KRN",8994,250,3,2,0)
RETURN=0 and RETURN(1)="FULL ENUMERATION COMPLETED"
"KRN",8994,250,3,3,0)
RETURN=1 and RETURN(1)=X PROCESSED^FULL ENUMERATION COMPLETED <DATE> if 
"KRN",8994,250,3,4,0)
completed on this run
"KRN",8994,250,3,5,0)
RETURN=1 and RETURN(1)=X PROCESSED - COMPLETED @ <Date>
"KRN",8994,252,-1)
0^1
"KRN",8994,252,0)
MPIF REMOTE FULL ICN STATS^STATS^MPIFFULL^2^^^^^1
"KRN",8994,252,1,0)
^^3^3^3070531^
"KRN",8994,252,1,1,0)
This RPC will return the counts for National ICNs, Local ICNs, Merged 
"KRN",8994,252,1,2,0)
records (-9 nodes), no ICNs, last run for remote ICN assignment and if 
"KRN",8994,252,1,3,0)
full enumeration has completed.
"KRN",8994,252,3,0)
^^6^6^3070531^
"KRN",8994,252,3,1,0)
Returned is:
"KRN",8994,252,3,2,0)
  
"KRN",8994,252,3,3,0)
 RETURN=0 if can't find entry in 984.8
"KRN",8994,252,3,4,0)
 RETURN=1 and RETURN(1)=COMPLETED?^LAST
"KRN",8994,252,3,5,0)
 COMPLETED RUN^TOTAL NATIONAL ICNS^TOTAL LOCAL
"KRN",8994,252,3,6,0)
 ICNS^TOTAL MERGED RECORDS^TOTAL RECORDS WITHOUT ICN
"MBREQ")
0
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"PKG",282,-1)
1^1
"PKG",282,0)
MASTER PATIENT INDEX VISTA^MPIF^Master Patient Index VistA side
"PKG",282,20,0)
^9.402P^^
"PKG",282,22,0)
^9.49I^1^1
"PKG",282,22,1,0)
1.0^2990428
"PKG",282,22,1,"PAH",1,0)
54^3120316
"PKG",282,22,1,"PAH",1,1,0)
^^4^4^3120316
"PKG",282,22,1,"PAH",1,1,1,0)
MESSAGING ENHANCEMENTS FOR NEW FIELDS
"PKG",282,22,1,"PAH",1,1,2,0)
 
"PKG",282,22,1,"PAH",1,1,3,0)
Refer to patch MPIF*1*54 in the FORUM Patch Module for a complete
"PKG",282,22,1,"PAH",1,1,4,0)
description.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
8
"RTN","MPIFA31B")
0^3^B18454677^B15257551
"RTN","MPIFA31B",1,0)
MPIFA31B ;BP/CMC-BUILD A31 MSGS ;23 Dec 2011  2:43 PM
"RTN","MPIFA31B",2,0)
 ;;1.0;MASTER PATIENT INDEX VISTA;**22,24,27,28,31,25,44,46,54**;30 Apr 99;Build 2
"RTN","MPIFA31B",3,0)
 ;
"RTN","MPIFA31B",4,0)
 ; Integration Agreements Utilized:
"RTN","MPIFA31B",5,0)
 ;  START, EXC, STOP^RGHLLOG - #2796
"RTN","MPIFA31B",6,0)
 ;  BLDEVN, BLDPD1, BLDPID^VAFCQRY - #3630
"RTN","MPIFA31B",7,0)
 ;  $$PV1^VAFCSB, $$RADE^VAFCSB, $$LABE^VAFCSB, $$PHARA^VAFCSB, $$PV2^VAFCSB - #4921
"RTN","MPIFA31B",8,0)
TA31 ; Tasked entry point
"RTN","MPIFA31B",9,0)
 N TMP
"RTN","MPIFA31B",10,0)
 S TMP=$$A31(DFN)
"RTN","MPIFA31B",11,0)
 Q
"RTN","MPIFA31B",12,0)
 ;
"RTN","MPIFA31B",13,0)
A31(DFN) ;BUILD AND SEND A31
"RTN","MPIFA31B",14,0)
 I $P($$SITE^VASITE,"^",3)=200 Q 1
"RTN","MPIFA31B",15,0)
 ; ^ PATCH 25 IF this is the FHIE Host system, don't build A31 messages
"RTN","MPIFA31B",16,0)
 N RESLT,CNT,MPI,EVN,TCNT,ERR,PD1,PID,EN,LAB,PV1,PV2,RAD,PRE,OLD,ZPD
"RTN","MPIFA31B",17,0)
 K HLA("HLA"),HLA("HLS")
"RTN","MPIFA31B",18,0)
 Q:$E($$GETICN^MPIF001(DFN),1,3)=$P($$SITE^VASITE(),"^",3) 0
"RTN","MPIFA31B",19,0)
 ; ^ LOCAL ICN DON'T SEND
"RTN","MPIFA31B",20,0)
 Q:+$$GETICN^MPIF001(DFN)=-1 0
"RTN","MPIFA31B",21,0)
 ; ^ NO ICN DON'T SEND
"RTN","MPIFA31B",22,0)
 S CNT=1
"RTN","MPIFA31B",23,0)
 D INIT^HLFNC2("MPIF ADT-A31 SERVER",.HL)
"RTN","MPIFA31B",24,0)
 I $O(HL(""))="" Q "-1^"_$P(HL,"^",2)
"RTN","MPIFA31B",25,0)
 S HLECH=HL("ECH"),HLFS=HL("FS"),COMP=$E(HL("ECH"),1),REP=$E(HL("ECH"),2),SUBCOMP=$E(HL("ECH"),4)
"RTN","MPIFA31B",26,0)
 S ERR="",TCNT=0
"RTN","MPIFA31B",27,0)
 D BLDEVN^VAFCQRY(DFN,"1,2",.EVN,.HL,"A31",.ERR)
"RTN","MPIFA31B",28,0)
 Q:ERR'="" ERR
"RTN","MPIFA31B",29,0)
 D BLDPID^VAFCQRY(DFN,1,"ALL",.PID,.HL,.ERR) ;**25
"RTN","MPIFA31B",30,0)
 Q:ERR'="" ERR
"RTN","MPIFA31B",31,0)
 D BLDPD1^VAFCQRY(DFN,"3",.PD1,.HL,.ERR) ;**44 NEW PD1 SEGMENT VALUES -- SENDING CMOR AGAIN AS WITHOUT 40 ON THE MPI SIDE THIS IS A PROBLEM.
"RTN","MPIFA31B",32,0)
 ;S PD1=$$PD1^VAFCSB ;**44 NEW PD1 SEGMENT VALUES -- IMDQ DECIDED NOT TO SEND PREFERRED FACILITY 9/7/06
"RTN","MPIFA31B",33,0)
 N X S X="VAFCSB" X ^%ZOSF("TEST") I $T D
"RTN","MPIFA31B",34,0)
 .;**44 VAFCSB coming in with DG*5.3*707
"RTN","MPIFA31B",35,0)
 .S PV1=$$PV1^VAFCSB ;**44 PV1 segment
"RTN","MPIFA31B",36,0)
 .S RAD=$$RADE^VAFCSB ;**44 OBX FOR LAST RADIOLOGY EXAM
"RTN","MPIFA31B",37,0)
 .S LAB=$$LABE^VAFCSB ;**44 OBX FOR LAST LAB EXAM
"RTN","MPIFA31B",38,0)
 .S PRE=$$PHARA^VAFCSB ;**44 OBX FOR ACTIVE PRESCRIPTIONS
"RTN","MPIFA31B",39,0)
 .S PV2=$$PV2^VAFCSB ;**44 PV2 segment
"RTN","MPIFA31B",40,0)
 S OLD=$$OLD ;**54,MVI_913: OBX to mark an older record
"RTN","MPIFA31B",41,0)
 S ZPD=$$EN1^VAFHLZPD(DFN,"1,17,21,34") ;25 ;**44 ADDED PSEUDO SSN REASON (34), 1 and 21 TO ZPD SEGMENT
"RTN","MPIFA31B",42,0)
 S EN=1
"RTN","MPIFA31B",43,0)
 S HLA("HLS",EN)=EVN(1),EN=EN+1
"RTN","MPIFA31B",44,0)
 S CNT=0 F  S CNT=$O(PID(CNT)) Q:CNT=""  D
"RTN","MPIFA31B",45,0)
 .I CNT=1 S HLA("HLS",EN)=PID(CNT)
"RTN","MPIFA31B",46,0)
 .I CNT>1 S HLA("HLS",EN,CNT-1)=PID(CNT)
"RTN","MPIFA31B",47,0)
 S EN=EN+1
"RTN","MPIFA31B",48,0)
 I $G(PD1(1))'="" S HLA("HLS",EN)=PD1(1),EN=EN+1 ;**44 only pass PD1 segment if has values -- SENDING CMOR AGAIN AS WITHOUT 40 ON MPI SIDE THIS IS A PROBLEM.
"RTN","MPIFA31B",49,0)
 I $G(PV1)'="" S HLA("HLS",EN)=PV1,EN=EN+1 ;**44 only pass PV1 segment if has values
"RTN","MPIFA31B",50,0)
 I $G(PV2)'="" S HLA("HLS",EN)=PV2,EN=EN+1 ;**44 only pass PV2 segment if has values
"RTN","MPIFA31B",51,0)
 I $G(RAD)'="" S HLA("HLS",EN)=RAD,EN=EN+1 ;**44 only pass RADIOLOGY IN OBX segment if has values
"RTN","MPIFA31B",52,0)
 I $G(LAB)'="" S HLA("HLS",EN)=LAB,EN=EN+1 ;**44 only pass LAB IN OBX segment if has values
"RTN","MPIFA31B",53,0)
 I $G(PRE)'="" S HLA("HLS",EN)=PRE,EN=EN+1 ;**44 only pass PRESCRIPTION IN OBX segment if has values
"RTN","MPIFA31B",54,0)
 I $G(OLD)'="" S HLA("HLS",EN)=OLD,EN=EN+1 ;**54,MVI_913: pass OLDER RECORD in OBX if flagged as such
"RTN","MPIFA31B",55,0)
 S HLA("HLS",EN)=ZPD,EN=EN+1 ;**44 ZPD SEGMENT
"RTN","MPIFA31B",56,0)
 S MPI=$$MPILINK^MPIFAPI()
"RTN","MPIFA31B",57,0)
 Q:$P($G(MPI),"^")=-1 "-1^No logical link defined for the MPI"
"RTN","MPIFA31B",58,0)
 S HLL("LINKS",1)="MPIF ADT-A31 CLIENT^"_MPI
"RTN","MPIFA31B",59,0)
 D GENERATE^HLMA("MPIF ADT-A31 SERVER","LM",1,.MPIFRSLT,"","")
"RTN","MPIFA31B",60,0)
 S RESLT=$S(+MPIFRSLT:MPIFRSLT,1:$P(MPIFRSLT,"^",3))
"RTN","MPIFA31B",61,0)
 S ^XTMP("MPIFA31%"_DFN,0)=$$FMADD^XLFDT(DT,5)_"^"_DT_"^"_"MPIA31 msg to MPI for DFN "_DFN
"RTN","MPIFA31B",62,0)
 I '+RESLT S ^XTMP("MPIFA31%"_DFN,"MPI",0)="A"
"RTN","MPIFA31B",63,0)
 K HLA,HLL("LINKS"),COMP,REP,SUBCOMP,HLA("HLA"),HLA("HLS"),MPIFRSLT
"RTN","MPIFA31B",64,0)
 ;**44 REMOVED HLEID, HLECH AND HLFS from Kill line above
"RTN","MPIFA31B",65,0)
 Q RESLT
"RTN","MPIFA31B",66,0)
 ;
"RTN","MPIFA31B",67,0)
RES ;
"RTN","MPIFA31B",68,0)
 N NXT,DFN,ERROR,CODE S CODE=""
"RTN","MPIFA31B",69,0)
 F NXT=1:1 X HLNEXT Q:HLQUIT'>0  D
"RTN","MPIFA31B",70,0)
 .I $E(HLNODE,1,3)="MSA" S DFN=$P($P(HLNODE,HL("FS"),7),"=",2),ERROR=$P(HLNODE,HL("FS"),4),CODE=$P(HLNODE,HL("FS"),2)
"RTN","MPIFA31B",71,0)
 .I $E(HLNODE,1,3)="MSA"&(CODE="AR") D
"RTN","MPIFA31B",72,0)
 ..; ERROR RETURNED IN MSA - LOG EXCEPTION
"RTN","MPIFA31B",73,0)
 ..D START^RGHLLOG(HLMTIEN,"","")
"RTN","MPIFA31B",74,0)
 ..;**44 check which type of exception to be logged
"RTN","MPIFA31B",75,0)
 ..D EXC^RGHLLOG(234,ERROR,DFN) ;**46
"RTN","MPIFA31B",76,0)
 ..D STOP^RGHLLOG(0)
"RTN","MPIFA31B",77,0)
 K:$G(DFN)>0 ^XTMP("MPIF OLD RECORDS",DFN) ;**54,MVI_913: Delete the old record designation
"RTN","MPIFA31B",78,0)
 K ^XTMP("MPIFA31%"_DFN)
"RTN","MPIFA31B",79,0)
 Q
"RTN","MPIFA31B",80,0)
OLD() ; Return OBX segment to flag a record as "old"
"RTN","MPIFA31B",81,0)
 ;**54,MVI_913: New subroutine
"RTN","MPIFA31B",82,0)
 Q $S($D(^XTMP("MPIF OLD RECORDS",DFN))#2:"OBX"_HL("FS")_HL("FS")_"CE"_HL("FS")_"OLDER RECORD"_HL("FS")_HL("FS")_"Y",1:"")
"RTN","MPIFA31I")
0^6^B18209474^B20970139
"RTN","MPIFA31I",1,0)
MPIFA31I ;ALB/JRP-PROCESS ADT-A31 MESSAGE FROM MPI ; 1/4/12 12:56pm
"RTN","MPIFA31I",2,0)
 ;;1.0;MASTER PATIENT INDEX VISTA;**1,21,54**;30 Apr 99;Build 2
"RTN","MPIFA31I",3,0)
 ;
"RTN","MPIFA31I",4,0)
 ; Integration Agreements Utilized:
"RTN","MPIFA31I",5,0)
 ;  ^DGCN(391.91 - #2751
"RTN","MPIFA31I",6,0)
 ;  ^DPT("AICNL" - #2070
"RTN","MPIFA31I",7,0)
 ;  EXC^RGHLLOG - #2796
"RTN","MPIFA31I",8,0)
 ;
"RTN","MPIFA31I",9,0)
PROCESS(MSGARR) ;Process ADT-A31 message received from MPI when a new
"RTN","MPIFA31I",10,0)
 ; patient is assigned an Integration Control Number
"RTN","MPIFA31I",11,0)
 ;
"RTN","MPIFA31I",12,0)
 ;Input  : MSGARR - Array containing ADT-A31 message (full global ref)
"RTN","MPIFA31I",13,0)
 ;                - MSGARR must be in format compatible with interaction
"RTN","MPIFA31I",14,0)
 ;                  with DHCP HL7 package
"RTN","MPIFA31I",15,0)
 ;                    MSGARR(1) = First segment of message
"RTN","MPIFA31I",16,0)
 ;                    MSGARR(1,n) = Continuation node(s) for segment
"RTN","MPIFA31I",17,0)
 ;                    MSGARR(x) = Xth segment of message
"RTN","MPIFA31I",18,0)
 ;                    MSGARR(x,n) = Continuation node(s) for segment
"RTN","MPIFA31I",19,0)
 ;                - Defaults to ^TMP("MPIFA31",$J,"MPI-ADT-A31")
"RTN","MPIFA31I",20,0)
 ;Output : ICN = Successfully processed
"RTN","MPIFA31I",21,0)
 ;        -1^Reason = Failure
"RTN","MPIFA31I",22,0)
 ;Notes  : The MPI uses an ADT-A31 message to return the ICN of new
"RTN","MPIFA31I",23,0)
 ;         patients.  This value (seq # 2 of PID segment) is the only
"RTN","MPIFA31I",24,0)
 ;         information that will be stored.
"RTN","MPIFA31I",25,0)
 ;
"RTN","MPIFA31I",26,0)
 ;Check input
"RTN","MPIFA31I",27,0)
 S MSGARR=$G(MSGARR)
"RTN","MPIFA31I",28,0)
 S:(MSGARR="") MSGARR="^TMP(""MPIFA31"","_$J_",""MPI-ADT-A31"")"
"RTN","MPIFA31I",29,0)
 Q:(('$D(@MSGARR))!('$O(@MSGARR@(0)))) "-1^Array containing ADT-A31 message not valid"
"RTN","MPIFA31I",30,0)
 ;Declare variables
"RTN","MPIFA31I",31,0)
 N MSH,EVN,PID,SEND,RECEIVE,EVENT,REASON,SEGMENT,SEGNAME
"RTN","MPIFA31I",32,0)
 N ICN,ICNNUM,ICNCHECK,DFNCHECK,CHKSCHM,SSN,LOCAL,TMP,FLDSEP,HLECH
"RTN","MPIFA31I",33,0)
 N CMPSEP,REPSEP,ESC,SUBSEP,TMP1,TMP2
"RTN","MPIFA31I",34,0)
 ;Parse required segments out of message
"RTN","MPIFA31I",35,0)
 S (MSH,EVN,PID)=""
"RTN","MPIFA31I",36,0)
 S TMP=0
"RTN","MPIFA31I",37,0)
 F  S TMP=+$O(@MSGARR@(TMP)) Q:('TMP)  D
"RTN","MPIFA31I",38,0)
 .;Get segment and screen out unused segments
"RTN","MPIFA31I",39,0)
 .S SEGMENT=$G(@MSGARR@(TMP))
"RTN","MPIFA31I",40,0)
 .S SEGNAME=$E(SEGMENT,1,3)
"RTN","MPIFA31I",41,0)
 .S TMP1=","_SEGNAME_","
"RTN","MPIFA31I",42,0)
 .Q:('(",MSH,EVN,PID,"[TMP1))
"RTN","MPIFA31I",43,0)
 .;Use first occurrance of segment
"RTN","MPIFA31I",44,0)
 .Q:(@SEGNAME'="")
"RTN","MPIFA31I",45,0)
 .;Remember field separator if MSH segment
"RTN","MPIFA31I",46,0)
 .S:(SEGNAME="MSH") FLDSEP=$E(SEGMENT,4)
"RTN","MPIFA31I",47,0)
 .;Drop segment name and field separator for storage
"RTN","MPIFA31I",48,0)
 .S @SEGNAME=$E(SEGMENT,5,$L(SEGMENT))
"RTN","MPIFA31I",49,0)
 .;Account for rollover (begin rollover subscripting with 1)
"RTN","MPIFA31I",50,0)
 .S TMP1=0
"RTN","MPIFA31I",51,0)
 .S TMP2=1
"RTN","MPIFA31I",52,0)
 .F  S TMP1=+$O(@MSGARR@(TMP,TMP1)) Q:('TMP1)  D
"RTN","MPIFA31I",53,0)
 ..;Get/save rollover
"RTN","MPIFA31I",54,0)
 ..S @SEGNAME@(TMP2)=$G(@MSGARR@(TMP,TMP1))
"RTN","MPIFA31I",55,0)
 ..S TMP2=TMP2+1
"RTN","MPIFA31I",56,0)
 ;Make sure used segments were all found
"RTN","MPIFA31I",57,0)
 F SEGNAME="MSH","EVN","PID" Q:(@SEGNAME="")
"RTN","MPIFA31I",58,0)
 Q:(@SEGNAME="") "-1^Required segment ("_SEGNAME_") missing"
"RTN","MPIFA31I",59,0)
 ;Safety check on field separator (use DHCP default value)
"RTN","MPIFA31I",60,0)
 S:($G(FLDSEP)="") FLDSEP="^"
"RTN","MPIFA31I",61,0)
 ;Get encoding characters
"RTN","MPIFA31I",62,0)
 S HLECH=$P(MSH,FLDSEP,1)
"RTN","MPIFA31I",63,0)
 ;Component separator
"RTN","MPIFA31I",64,0)
 S CMPSEP=$E(HLECH,1)
"RTN","MPIFA31I",65,0)
 ;Repetion separator
"RTN","MPIFA31I",66,0)
 S REPSEP=$E(HLECH,2)
"RTN","MPIFA31I",67,0)
 ;Escape character
"RTN","MPIFA31I",68,0)
 S ESC=$E(HLECH,3)
"RTN","MPIFA31I",69,0)
 ;Subcomponent separator
"RTN","MPIFA31I",70,0)
 S SUBSEP=$E(HLECH,4)
"RTN","MPIFA31I",71,0)
 ;Process MSH segment
"RTN","MPIFA31I",72,0)
 ; - Get sending facility
"RTN","MPIFA31I",73,0)
 S SEND=$P(MSH,FLDSEP,3)
"RTN","MPIFA31I",74,0)
 ; - Get receiving facility
"RTN","MPIFA31I",75,0)
 S RECEIVE=$P(MSH,FLDSEP,5)
"RTN","MPIFA31I",76,0)
 ; - Get event type
"RTN","MPIFA31I",77,0)
 S EVENT=$P($P(MSH,FLDSEP,8),CMPSEP,2)
"RTN","MPIFA31I",78,0)
 ; - Validate information in MSH segment
"RTN","MPIFA31I",79,0)
 ;   - MPI is sending facility
"RTN","MPIFA31I",80,0)
 ;Q:(SEND'="200M") "-1^Sending facility not valid (must be '200M')"
"RTN","MPIFA31I",81,0)
 ;   - Receiving facility is local facility
"RTN","MPIFA31I",82,0)
 S TMP=+$P($$SITE^VASITE(),"^",3)
"RTN","MPIFA31I",83,0)
 Q:(RECEIVE'=TMP) "-1^Receiving facility not valid (must be "_TMP_")"
"RTN","MPIFA31I",84,0)
 ;   - Event type is A31
"RTN","MPIFA31I",85,0)
 Q:(EVENT'="A31") "-1^Event type not valid (must be 'A31')"
"RTN","MPIFA31I",86,0)
 ;Process EVN segment
"RTN","MPIFA31I",87,0)
 ; - Get event reason
"RTN","MPIFA31I",88,0)
 S REASON=$P(EVN,FLDSEP,4)
"RTN","MPIFA31I",89,0)
 ; - Validate information in EVN segment
"RTN","MPIFA31I",90,0)
 ;   - Event reason is 95
"RTN","MPIFA31I",91,0)
 Q:(REASON'="95") "-1^Event reason code not valid (must be '95')"
"RTN","MPIFA31I",92,0)
 ;Process PID segment
"RTN","MPIFA31I",93,0)
 ; - Get ICN & checksum & checksum scheme
"RTN","MPIFA31I",94,0)
 S TMP=$P(PID,FLDSEP,2)
"RTN","MPIFA31I",95,0)
 S ICN=$P(TMP,CMPSEP,1)
"RTN","MPIFA31I",96,0)
 Q:(ICN'?1.16N1"V"6N) "-1^ICN not in correct format"
"RTN","MPIFA31I",97,0)
 S ICNNUM=$P(ICN,"V",1)
"RTN","MPIFA31I",98,0)
 S ICNCHECK=$P(TMP,"V",2)
"RTN","MPIFA31I",99,0)
 Q:((ICNNUM="")!(ICNCHECK="")) "-1^Could not determine ICN"
"RTN","MPIFA31I",100,0)
 ; - Validate checksum
"RTN","MPIFA31I",101,0)
 Q:(ICNCHECK'=$$CHECKDG^MPIFSPC(ICNNUM)) "-1^ICN/checksum not valid"
"RTN","MPIFA31I",102,0)
 ; - Get DFN & checksum & checksum scheme
"RTN","MPIFA31I",103,0)
 S TMP=$P(PID,FLDSEP,3)
"RTN","MPIFA31I",104,0)
 ; - Get SSN (account for roll over)
"RTN","MPIFA31I",105,0)
 S SSN=""
"RTN","MPIFA31I",106,0)
 S TMP=$L(PID,FLDSEP)
"RTN","MPIFA31I",107,0)
 S TMP1=$P(PID,FLDSEP,TMP)
"RTN","MPIFA31I",108,0)
 S:(TMP=19) SSN=$P(PID,FLDSEP,19)_$P($G(PID(1)),FLDSEP,1)
"RTN","MPIFA31I",109,0)
 S:(TMP>19) SSN=$P(PID,FLDSEP,19)
"RTN","MPIFA31I",110,0)
 S:(TMP<19) SSN=$P($G(PID(1)),FLDSEP,((19-TMP)+1))
"RTN","MPIFA31I",111,0)
 ; - Validate information in PID
"RTN","MPIFA31I",112,0)
 ;   - Make sure DFN exists
"RTN","MPIFA31I",113,0)
 S LOCAL=$G(^DPT(DFN,0))
"RTN","MPIFA31I",114,0)
 Q:($P(LOCAL,"^",1)="") "-1^Could not locate patient (bad DFN)"
"RTN","MPIFA31I",115,0)
 ;   - Make sure SSNs match
"RTN","MPIFA31I",116,0)
 Q:($P(LOCAL,"^",9)'=SSN) "-1^DFN/SSN pairing not valid"
"RTN","MPIFA31I",117,0)
 ;Extra validation checks
"RTN","MPIFA31I",118,0)
 ; - Verify lack of national ICN
"RTN","MPIFA31I",119,0)
 I ($$GETICN^MPIF001(DFN)>0) Q:('$D(^DPT("AICNL",1,DFN))) "-1^National ICN already assigned to patient"
"RTN","MPIFA31I",120,0)
 ;Passed all validation checks - store ICN & checksum
"RTN","MPIFA31I",121,0)
 S TMP=$$SETICN^MPIF001(DFN,ICNNUM,ICNCHECK)
"RTN","MPIFA31I",122,0)
 Q:(TMP<0) "-1^Unable to store ICN and checksum"
"RTN","MPIFA31I",123,0)
 ;Delete local ICN flag
"RTN","MPIFA31I",124,0)
 S TMP=$$SETLOC^MPIF001(DFN,0)
"RTN","MPIFA31I",125,0)
 S TMP=$$CHANGE^MPIF001(DFN,+$$SITE^VASITE)
"RTN","MPIFA31I",126,0)
 N HERE,TFSITE
"RTN","MPIFA31I",127,0)
 S HERE=+$P($$SITE^VASITE,"^",3)
"RTN","MPIFA31I",128,0)
 S TFSITE=$$LKUP^XUAF4(HERE)
"RTN","MPIFA31I",129,0)
 Q:+TFSITE'>0 ICN
"RTN","MPIFA31I",130,0)
 Q:$D(^DGCN(391.91,"APAT",DFN,TFSITE)) ICN
"RTN","MPIFA31I",131,0)
 ;**54 MVI_1009 (ckn) - Commented following un necessary code
"RTN","MPIFA31I",132,0)
 ;K DD,DO N DIC,X,Y
"RTN","MPIFA31I",133,0)
 ;S DIC="^DGCN(391.91,",DIC("DR")=".02///`"_TFSITE,X=DFN,DIC(0)="LQZ"
"RTN","MPIFA31I",134,0)
 ;D FILE^DICN
"RTN","MPIFA31I",135,0)
 ;I +Y=-1 S ^XTMP($J,"MPIF","MSHERR")="Treating Facility Add Failed" D
"RTN","MPIFA31I",136,0)
 ;.D EXC^RGHLLOG(212,"DFN= "_DFN_"  Treating Facility= "_TFSITE,DFN)
"RTN","MPIFA31I",137,0)
 ;K DD,DO,DIC,X,Y
"RTN","MPIFA31I",138,0)
 ;Done
"RTN","MPIFA31I",139,0)
 Q ICN
"RTN","MPIFA43")
0^7^B27559789^B27108950
"RTN","MPIFA43",1,0)
MPIFA43 ;BIR/DLR-Utility for processing an ADT-A43 Un-link ID ; 1/4/12 12:55pm
"RTN","MPIFA43",2,0)
 ;;1.0;MASTER PATIENT INDEX VISTA;**22,41,46,54**;30 Apr 99;Build 2
"RTN","MPIFA43",3,0)
DBIA ; Supported IA's
"RTN","MPIFA43",4,0)
 ;
"RTN","MPIFA43",5,0)
 ;IA: 2796  - EXC, START, and STOP^RGHLLOG
"RTN","MPIFA43",6,0)
 ;IA: 2988  - $$DELALLTF and $$DELETETF^VAFCTFU
"RTN","MPIFA43",7,0)
 ;IA: 3767  - PIDP^RGADTP1
"RTN","MPIFA43",8,0)
 ;
"RTN","MPIFA43",9,0)
IN ;Entry point for processing ADT-A43 - Move patient information
"RTN","MPIFA43",10,0)
 ;Called from the MPIF ADT-A43 CLIENT protocol processing routine
"RTN","MPIFA43",11,0)
 ;There are no inputs or outputs
"RTN","MPIFA43",12,0)
 ;
"RTN","MPIFA43",13,0)
 N MPIF,STATN,MPIFI,MSG,SG,MPIFARR,PDFN,INST,MFUPT,PDLT,TFIEN,ICNAUTH,MPISITE,MRG
"RTN","MPIFA43",14,0)
 N ICN,HLCOMP,CNT,X,MPIFERR,MPIFX,MPIDFN,MPISSN,ERROR,DFN,NODE,CMOR2,PID,ARRAY
"RTN","MPIFA43",15,0)
 S MPISSN="",MPIDFN="",ICN="",ERROR=""
"RTN","MPIFA43",16,0)
INIT ;Process in the ADT-A43 Move Patient Identifier msg
"RTN","MPIFA43",17,0)
  F MPII=1:1 X HLNEXT Q:HLQUIT'>0  S MSG=HLNODE D
"RTN","MPIFA43",18,0)
 .S MPIJ=0 F  S MPIJ=$O(HLNODE(MPIJ)) Q:'MPIJ  S MSG(MPIJ)=HLNODE(MPIJ)
"RTN","MPIFA43",19,0)
 .S SG=$E(HLNODE,1,3),MPIF(MPII)=HLNODE D:SG?2A1(1A,1N) PICK
"RTN","MPIFA43",20,0)
 .;**45 ABOVE TO REPLACE COMMENTED LINE BELOW
"RTN","MPIFA43",21,0)
 ;F MPIFI=1:1 X HLNEXT Q:HLQUIT'>0  S (MSG,MPIF(MPIFI))=HLNODE,SG=$E(HLNODE,1,3) D:SG?2A1(1A,1N) PICK
"RTN","MPIFA43",22,0)
 D MOVE(.ARRAY,.ERROR)
"RTN","MPIFA43",23,0)
 ;create response message
"RTN","MPIFA43",24,0)
 S CNT=1
"RTN","MPIFA43",25,0)
 S HLA("HLA",1)="MSA"_HL("FS")_$S($G(ERROR)=0:"AA",1:"AE")_HL("FS")_HL("MID")_HL("FS")_$S($G(ERROR)=0:"",1:$P(ERROR,"^",2)) S CNT=CNT+1
"RTN","MPIFA43",26,0)
 D ROUTE
"RTN","MPIFA43",27,0)
 ;Send back the appl. ack (ACK) with the ADT-A43 transaction status
"RTN","MPIFA43",28,0)
 D GENACK^HLMA1(HL("EID"),HLMTIENS,HL("EIDS"),"LM",1,.MPIFERR,"",.HLP)
"RTN","MPIFA43",29,0)
 Q
"RTN","MPIFA43",30,0)
PICK ;check routine for segment entry point
"RTN","MPIFA43",31,0)
 I $T(@SG)]"" D @SG
"RTN","MPIFA43",32,0)
 I $T(@SG)="" Q
"RTN","MPIFA43",33,0)
 Q
"RTN","MPIFA43",34,0)
MSH ;;MSH
"RTN","MPIFA43",35,0)
 ;process the MSH segment
"RTN","MPIFA43",36,0)
 S (HLFS,HL("FS"))=$E(MSG,4),(HLECH,HL("ECH"))=$E(MSG,5,8)
"RTN","MPIFA43",37,0)
 S HLCOMP=$E(HL("ECH"),1)
"RTN","MPIFA43",38,0)
 S MPIFARR("SENDING SITE")=$P(MSG,HL("FS"),4)
"RTN","MPIFA43",39,0)
 Q
"RTN","MPIFA43",40,0)
EVN ;;EVN
"RTN","MPIFA43",41,0)
 ;process the EVN segment
"RTN","MPIFA43",42,0)
 S STATN=+$$SITE^VASITE()_"^"_$$FMDATE^HLFNC($P(MSG,HL("FS"),3))
"RTN","MPIFA43",43,0)
 Q
"RTN","MPIFA43",44,0)
PID ;;PID
"RTN","MPIFA43",45,0)
 ;process the PID segment
"RTN","MPIFA43",46,0)
 N COMP,REP,SUBCOMP,AUTH,IDTYP,LOC,AUTHTYP,MPIJ
"RTN","MPIFA43",47,0)
 S COMP=$E(HL("ECH"),1),SUBCOMP=$E(HL("ECH"),4),REP=$E(HL("ECH"),2)
"RTN","MPIFA43",48,0)
 S MPIJ=$P(MSG,HL("FS"),2)
"RTN","MPIFA43",49,0)
 D PIDP^RGADTP1(.MSG,.ARRAY,.HL)
"RTN","MPIFA43",50,0)
 ;ARRAY("ICN") = NEW ICN  and  ARRAY("DFN") = mismatched record to be corrected
"RTN","MPIFA43",51,0)
 Q
"RTN","MPIFA43",52,0)
PD1 ;processing PD1 fields for new CMOR
"RTN","MPIFA43",53,0)
 N COMP
"RTN","MPIFA43",54,0)
 S COMP=$E(HL("ECH"),1)
"RTN","MPIFA43",55,0)
 S ARRAY("CMOR")=$P($P(HLNODE,HL("FS"),4),COMP,3)
"RTN","MPIFA43",56,0)
 Q
"RTN","MPIFA43",57,0)
MRG ;
"RTN","MPIFA43",58,0)
 N COMP,REP,SUBCOMP,AUTH,IDTYP,LOC,AUTHTYP,FID,ID
"RTN","MPIFA43",59,0)
 S COMP=$E(HL("ECH"),1),SUBCOMP=$E(HL("ECH"),4),REP=$E(HL("ECH"),2)
"RTN","MPIFA43",60,0)
 N MPIFX,ID,AUTH
"RTN","MPIFA43",61,0)
 S FID=$P(MSG,HL("FS"),2)
"RTN","MPIFA43",62,0)
 F MPIFX=1:1:$L(FID,REP)+1 S ID=$P(FID,REP,MPIFX),PID=$P(ID,COMP),AUTH=$P($P(ID,COMP,4),SUBCOMP),AUTHTYP=$P($P(ID,COMP,4),SUBCOMP,2),IDTYP=$P(ID,COMP,5),LOC=$P($P(ID,COMP,6),SUBCOMP,2) D
"RTN","MPIFA43",63,0)
 . I AUTH="USSSA" S MPISSN=PID
"RTN","MPIFA43",64,0)
 . ;capture the old or mismatched ICN in ARRAY("ICNMISMATCH")
"RTN","MPIFA43",65,0)
 . I AUTH="USVHA" I IDTYP="NI" S (ARRAY("ICNMISMATCH"),ICN)=PID S ARRAY("ICNMISMATCHLOC")=LOC
"RTN","MPIFA43",66,0)
 . I AUTH="USVHA" I IDTYP="PI" S MPIDFN=PID S ARRAY("DFNLOC")=LOC
"RTN","MPIFA43",67,0)
 Q
"RTN","MPIFA43",68,0)
RSP ;response process logic entry point
"RTN","MPIFA43",69,0)
 Q
"RTN","MPIFA43",70,0)
ROUTE ;routing logic entry point
"RTN","MPIFA43",71,0)
 N MPI S MPI=$$MPILINK^MPIFAPI() D
"RTN","MPIFA43",72,0)
 .I $P($G(MPI),U)'=-1 S HLL("LINKS",1)="MPIF ADT-A43 CLIENT"_"^"_MPI
"RTN","MPIFA43",73,0)
 .I $P($G(MPI),U)=-1 D
"RTN","MPIFA43",74,0)
 ..N RGLOG D START^RGHLLOG(HLMTIEN,"","")
"RTN","MPIFA43",75,0)
 ..D EXC^RGHLLOG(224,"No MPI link identified ",$G(PDFN))
"RTN","MPIFA43",76,0)
 ..D STOP^RGHLLOG(0)
"RTN","MPIFA43",77,0)
 Q
"RTN","MPIFA43",78,0)
MOVE(ARRAY,ERROR) ;
"RTN","MPIFA43",79,0)
 ;replace ARRAY("ICNMISMATCHED") with ARRAY("ICN")
"RTN","MPIFA43",80,0)
 N MPIARR
"RTN","MPIFA43",81,0)
 S ERROR=0
"RTN","MPIFA43",82,0)
 ;I ARRAY("DFNLOC")="" OLD MESSAGING SO USE ARRAY("ICNMISMATCHLOC")
"RTN","MPIFA43",83,0)
 I $G(ARRAY("DFNLOC"))="" S ARRAY("DFNLOC")=ARRAY("ICNMISMATCHLOC")
"RTN","MPIFA43",84,0)
 I $G(ARRAY("CMOR"))="" S ARRAY("CMOR")=ARRAY("DFNLOC")
"RTN","MPIFA43",85,0)
 ;if assigning authority'= site station# then Quit because this is not the mismatched site so MFN-M05 sent as a result of site removal on MPI will remove it from all sites TF list
"RTN","MPIFA43",86,0)
 I ARRAY("DFNLOC")'=$P($$SITE^VASITE,"^",3) D  Q
"RTN","MPIFA43",87,0)
 .;if assigning authority '= site station# then remove assigning authority from TF list for the given ICN
"RTN","MPIFA43",88,0)
 .N MPISITE S MPISITE=$$IEN^XUAF4(ARRAY("DFNLOC"))
"RTN","MPIFA43",89,0)
 . I ARRAY("DFNLOC")'>0 S ERROR="-1^Unable to remove station#"_ARRAY("DFNLOC")_" from TF list" Q
"RTN","MPIFA43",90,0)
 .;**54 - MVI_1009 (ckn) - Do not call DELETETF
"RTN","MPIFA43",91,0)
 .; I +ARRAY("DFNLOC")>0 S ERROR=$$DELETETF^VAFCTFU(+ARRAY("ICNMISMATCH"),MPISITE)
"RTN","MPIFA43",92,0)
 ;delete all TF's for this mismatched record
"RTN","MPIFA43",93,0)
 S ERROR=$$DELALLTF^VAFCTFU(ARRAY("ICNMISMATCH"))
"RTN","MPIFA43",94,0)
 ;if ARRAY("DFN")="" assume this is old message format and use ARRAY("ICNMISMATCHED") to get the DFN that was mismatched
"RTN","MPIFA43",95,0)
 I $G(ARRAY("DFN"))="" D  Q
"RTN","MPIFA43",96,0)
 . S ARRAY("DFN")=$$GETDFN^MPIF001(ARRAY("ICNMISMATCH")) I +ARRAY("DFN")'>0 S ERROR="-1^Unable to break ICN "_ARRAY("ICNMISMATCH")_" because that ICN is unknown"
"RTN","MPIFA43",97,0)
 . Q:+$G(ERROR)=-1
"RTN","MPIFA43",98,0)
 . S MPIARR(991.01)="@",MPIARR(991.02)="@",MPIARR(991.03)="@",MPIARR(991.05)="@",MPIARR(992)=$P(ARRAY("ICNMISMATCH"),"V"),MPIARR(993)=$P($$SITE^VASITE,"^")
"RTN","MPIFA43",99,0)
 . S ERROR=$$UPDATE^MPIFAPI(ARRAY("DFN"),"MPIARR",1)
"RTN","MPIFA43",100,0)
 ;if new messaging
"RTN","MPIFA43",101,0)
 I ARRAY("ICN")'="""" D
"RTN","MPIFA43",102,0)
 . ;delete the entry first to prevent the ICN from going into history
"RTN","MPIFA43",103,0)
 . S MPIARR(991.01)="@",MPIARR(991.02)="@",MPIARR(991.03)="@",MPIARR(991.05)="@",MPIARR(992)=$P(ARRAY("ICNMISMATCH"),"V"),MPIARR(993)=$P($$SITE^VASITE,"^")
"RTN","MPIFA43",104,0)
 . S ERROR=$$UPDATE^MPIFAPI(ARRAY("DFN"),"MPIARR",1)
"RTN","MPIFA43",105,0)
 . ;update the record with the new ICN
"RTN","MPIFA43",106,0)
 . S MPIARR(991.01)=$P(ARRAY("ICN"),"V"),MPIARR(991.02)=$P(ARRAY("ICN"),"V",2),MPIARR(991.03)=$$IEN^XUAF4(ARRAY("CMOR")),MPIARR(991.05)="@",MPIARR(992)=$P(ARRAY("ICNMISMATCH"),"V"),MPIARR(993)=$P($$SITE^VASITE,"^")
"RTN","MPIFA43",107,0)
 ;move the mismatched record from ARRAY("ICNMISMATCH") to ARRAY("ICN")
"RTN","MPIFA43",108,0)
 S ERROR=$$UPDATE^MPIFAPI(ARRAY("DFN"),"MPIARR",1)
"RTN","MPIFA43",109,0)
 ;add LOCAL site to TF, if CMOR is different it will be auto added
"RTN","MPIFA43",110,0)
 D FILE^VAFCTFU(ARRAY("DFN"),+$$SITE^VASITE,1)
"RTN","MPIFA43",111,0)
 Q
"RTN","MPIFFULL")
0^4^B8003985^n/a
"RTN","MPIFFULL",1,0)
MPIFFULL ;BP/CMC-ALLOW ASSIGNMENT OF LOCAL ICNS FOR X PATIENTS ;29 Dec 2011  4:06 PM
"RTN","MPIFFULL",2,0)
 ;;1.0;MASTER PATIENT INDEX VISTA;**54**;30 Apr 99;Build 2
"RTN","MPIFFULL",3,0)
 ;
"RTN","MPIFFULL",4,0)
 ; Integration Agreement Utilized:
"RTN","MPIFFULL",5,0)
 ;   ^DPT( - #2070
"RTN","MPIFFULL",6,0)
 ;
"RTN","MPIFFULL",7,0)
 ; $O through Patient file (#2) finding patients that don't have ICNs
"RTN","MPIFFULL",8,0)
 ; assigning X patients local ICNs
"RTN","MPIFFULL",9,0)
 ;
"RTN","MPIFFULL",10,0)
LOCALIA(RETURN,HOWM) ;
"RTN","MPIFFULL",11,0)
 ;RETURN IS USED TO RETURN COUNTER OF HOW MANY COMPLETED AND IF PROCESS HAS COMPLETED FOR THE SITE
"RTN","MPIFFULL",12,0)
 ;HOWM IS HOW MANY PATIENTS SHOULD BE PROCESSED THIS TIME
"RTN","MPIFFULL",13,0)
 ;
"RTN","MPIFFULL",14,0)
 N IEN,NODE,DFN,CNT,X,Y,%,%H,%I,ICN,LAST
"RTN","MPIFFULL",15,0)
 I $D(^XTMP("MPIF FULL ENUMERATION")) S RETURN=0,RETURN(0)="1^PROCESS ALREADY RUNNING" Q
"RTN","MPIFFULL",16,0)
 D NOW^%DTC
"RTN","MPIFFULL",17,0)
 I '$D(^XTMP("MPIF FULL ENUMERATION")) S ^XTMP("MPIF FULL ENUMERATION",0)=%+10_"^"_%_"^"_"Full Enumeration of Patients to MPI"
"RTN","MPIFFULL",18,0)
 ;
"RTN","MPIFFULL",19,0)
 ;**54,MVI_913: Set 0 node of ^XTMP that will contain list of records that appear to be "old"
"RTN","MPIFFULL",20,0)
 S ^XTMP("MPIF OLD RECORDS",0)=$$FMADD^XLFDT(X,90)_"^"_%_"^List of 'old' records"
"RTN","MPIFFULL",21,0)
 ;
"RTN","MPIFFULL",22,0)
 ;GET LAST DFN COMPLETED
"RTN","MPIFFULL",23,0)
 S IEN=$O(^MPIF(984.8,"B","ONE","")),NODE=$G(^MPIF(984.8,IEN,0))
"RTN","MPIFFULL",24,0)
 I $P(NODE,"^",5)'="" S RETURN(0)="1^FULL ENUMERATION COMPLETED",RETURN=0 K ^XTMP("MPIF FULL ENUMERATION",0) Q
"RTN","MPIFFULL",25,0)
 ; ^ FULL ENUMERATION COMPLETED
"RTN","MPIFFULL",26,0)
 S DFN=0,CNT=0,RETURN=1
"RTN","MPIFFULL",27,0)
 I $P(NODE,"^",4)'="" S DFN=$P(NODE,"^",4)
"RTN","MPIFFULL",28,0)
 D NOW^%DTC
"RTN","MPIFFULL",29,0)
 S $P(NODE,"^",2)=%
"RTN","MPIFFULL",30,0)
 F  S DFN=$O(^DPT(DFN)) Q:DFN=""!(CNT=HOWM)  D
"RTN","MPIFFULL",31,0)
 .I $P($G(^DPT(DFN,"MPI")),"^")="",'$D(^DPT(DFN,-9)) D
"RTN","MPIFFULL",32,0)
 ..;**54,MVI_913: Add DFN to ^XTMP old list
"RTN","MPIFFULL",33,0)
 ..S:$D(^DPT("AMPIMIS",DFN))[0 ^XTMP("MPIF OLD RECORDS",DFN)=""
"RTN","MPIFFULL",34,0)
 ..S ICN=$$ICNLC^MPIF001(DFN),CNT=CNT+1,LAST=DFN
"RTN","MPIFFULL",35,0)
 D NOW^%DTC
"RTN","MPIFFULL",36,0)
 S $P(NODE,"^",3)=%,$P(NODE,"^",4)=LAST
"RTN","MPIFFULL",37,0)
 I DFN="" S RETURN(0)="1^"_CNT_" PROCESSED^FULL ENUMERATION COMPLETED "_%,$P(NODE,"^",5)="FULL ENUMERATION COMPLETED"
"RTN","MPIFFULL",38,0)
 I DFN'="" S RETURN(0)="1^"_CNT_" PROCESSED - COMPLETED @ "_%
"RTN","MPIFFULL",39,0)
 S ^MPIF(984.8,IEN,0)=NODE
"RTN","MPIFFULL",40,0)
 K ^XTMP("MPIF FULL ENUMERATION",0)
"RTN","MPIFFULL",41,0)
 Q
"RTN","MPIFFULL",42,0)
 ;
"RTN","MPIFFULL",43,0)
STATS(RETURN) ;
"RTN","MPIFFULL",44,0)
 ;RETURN IS THE ARRAY TO HOLD THE STAT DATA
"RTN","MPIFFULL",45,0)
 N IEN,CNT,DFN,ICN,SITE
"RTN","MPIFFULL",46,0)
 S SITE=$P($$SITE^VASITE(),"^",3)
"RTN","MPIFFULL",47,0)
 S CNT("NICN")=0,CNT("LOCAL")=0,CNT("MERGED")=0,CNT("NOICN")=0
"RTN","MPIFFULL",48,0)
 S IEN=$O(^MPIF(984.8,"B","ONE","")),RETURN=0
"RTN","MPIFFULL",49,0)
 Q:IEN<1
"RTN","MPIFFULL",50,0)
 S NODE=$G(^MPIF(984.8,IEN,0)),RETURN=1
"RTN","MPIFFULL",51,0)
 S DFN=0
"RTN","MPIFFULL",52,0)
 F  S DFN=$O(^DPT(DFN)) Q:DFN=""  D
"RTN","MPIFFULL",53,0)
 .S ICN=$P($G(^DPT(DFN,"MPI")),"^")
"RTN","MPIFFULL",54,0)
 .I $E(ICN,1,3)=SITE S CNT("LOCAL")=CNT("LOCAL")+1
"RTN","MPIFFULL",55,0)
 .I $E(ICN,1)=1 S CNT("NICN")=CNT("NICN")+1
"RTN","MPIFFULL",56,0)
 .I $D(^DPT(DFN,-9)) S CNT("MERGED")=CNT("MERGED")+1
"RTN","MPIFFULL",57,0)
 .I ICN="",'$D(^DPT(DFN,-9)) S CNT("NOICN")=CNT("NOICN")+1
"RTN","MPIFFULL",58,0)
 S RETURN(1)=$P(NODE,"^",5)_"^"_$P(NODE,"^",3)_"^"_CNT("NICN")_"^"_CNT("LOCAL")_"^"_CNT("MERGED")_"^"_CNT("NOICN")
"RTN","MPIFFULL",59,0)
 ;COMPLETED?^LAST COMPLETED RUN^TOTAL NATIONAL ICNS^TOTAL LOCAL ICNS^TOTAL MERGED RECORDS^TOTAL RECORDS WITHOUT ICN
"RTN","MPIFFULL",60,0)
 Q
"RTN","MPIFP54")
0^8^B92299^n/a
"RTN","MPIFP54",1,0)
MPIFP54 ;BIRM/CMC-POST INIT FOR MPIF*1*54 ;MAY 24, 2007
"RTN","MPIFP54",2,0)
 ;;1.0;MASTER PATIENT INDEX VISTA;**54**;30 Apr 99;Build 2
"RTN","MPIFP54",3,0)
 ;
"RTN","MPIFP54",4,0)
POST ;POST INIT TO INITIALIZE 984.8 FOR THE FULL ENUMERATION START VALUES
"RTN","MPIFP54",5,0)
 ;
"RTN","MPIFP54",6,0)
 N IEN
"RTN","MPIFP54",7,0)
 S IEN=$O(^MPIF(984.8,"B","ONE",""))
"RTN","MPIFP54",8,0)
 S ^MPIF(984.8,IEN,0)="ONE"
"RTN","MPIFP54",9,0)
 Q
"RTN","MPIFP54",10,0)
 ;
"RTN","MPIFQ0")
0^5^B72427777^B71703643
"RTN","MPIFQ0",1,0)
MPIFQ0 ;ALB/RJS-QUERY HANDLER TOP LEVEL ; 5/14/08 6:20pm
"RTN","MPIFQ0",2,0)
 ;;1.0;MASTER PATIENT INDEX VISTA;**1,3,8,14,13,16,17,21,20,24,26,28,31,33,35,38,43,52,54**;30 Apr 99;Build 2
"RTN","MPIFQ0",3,0)
 ;
"RTN","MPIFQ0",4,0)
 ; Integration Agreements utilized:
"RTN","MPIFQ0",5,0)
 ;  EXC, START and STOP^RGHLLOG - #2796
"RTN","MPIFQ0",6,0)
 ;  FILE^VAFCTFU - #2988
"RTN","MPIFQ0",7,0)
 ;  $$EN^HLCSAC - #3471
"RTN","MPIFQ0",8,0)
 ;  NAME^VAFCPID2 - #3492
"RTN","MPIFQ0",9,0)
 ;
"RTN","MPIFQ0",10,0)
INTACTV ;Interactive standalone query
"RTN","MPIFQ0",11,0)
 N DFN,NAME1,MPIFLL
"RTN","MPIFQ0",12,0)
 K DTOUT,DUOUT,X,Y,DIC
"RTN","MPIFQ0",13,0)
 S MPIFRES="",MPIFINT="",DIC="^DPT(",DIC(0)="AEMQ" D ^DIC
"RTN","MPIFQ0",14,0)
 I ($D(DTOUT))!($D(DUOUT))!((+$G(Y))<0) W:'$D(MPIFRPC) !,"TRY AGAIN LATER" G END
"RTN","MPIFQ0",15,0)
 S DFN=+Y,HLP("ACKTIME")=300
"RTN","MPIFQ0",16,0)
 W:'$D(MPIFRPC) !
"RTN","MPIFQ0",17,0)
CIRNEXC ; Exception Entry Point
"RTN","MPIFQ0",18,0)
 I +$$GETICN^MPIF001(DFN)>0,$$IFLOCAL^MPIF001(DFN)'=1 W:'$D(MPIFRPC) !,"Patient already has an ICN" G END
"RTN","MPIFQ0",19,0)
 N LOCDATA ;Data Returned from GETDATA in ICN array
"RTN","MPIFQ0",20,0)
 D GETDATA("^DPT(",DFN,"LOCDATA",".01;.02;.03;.09;.301;391;1901")
"RTN","MPIFQ0",21,0)
 S LOCDATA(2,DFN,991.01)=$P($$MPINODE^MPIFAPI(DFN),"^"),TSSN=LOCDATA(2,DFN,.09)
"RTN","MPIFQ0",22,0)
 I $$IFLOCAL^MPIF001(DFN)=1 S MPIFLL=""
"RTN","MPIFQ0",23,0)
 I $G(LOCDATA(2,DFN,991.01))>0&('$D(MPIFLL)) W:'$D(MPIFRPC) !,"Patient already has an ICN" G END
"RTN","MPIFQ0",24,0)
 S HLP("ACKTIME")=300,MPIQRYNM="EXACT_MATCH_QUERY"
"RTN","MPIFQ0",25,0)
 ;MPIQRYNM="VTQ_PID_ICN_NO_LOAD" **43 CHANGING QUERY NAME
"RTN","MPIFQ0",26,0)
 G JUMP
"RTN","MPIFQ0",27,0)
VTQ G:$G(DFN)']"" END
"RTN","MPIFQ0",28,0)
 N LOCDATA ;Data Returned from GETDATA in ICN array
"RTN","MPIFQ0",29,0)
 D GETDATA("^DPT(",DFN,"LOCDATA",".01;.02;.03;.09;.301;391;1901")
"RTN","MPIFQ0",30,0)
 S LOCDATA(2,DFN,991.01)=$P($$MPINODE^MPIFAPI(DFN),"^"),TSSN=LOCDATA(2,DFN,.09)
"RTN","MPIFQ0",31,0)
 ;S MPIQRYNM="VTQ_PID_ICN_NO_LOAD" **43 CHANGING QUERY NAME
"RTN","MPIFQ0",32,0)
 S MPIQRYNM="EXACT_MATCH_QUERY"
"RTN","MPIFQ0",33,0)
 I $G(LOCDATA(2,DFN,991.01))>0 S MPIFRTN="ALREADY HAS ICN" G END ;If Pt already has ICN don't connect to MPI
"RTN","MPIFQ0",34,0)
JUMP N TIME,% D NOW^%DTC S TIME=%
"RTN","MPIFQ0",35,0)
 N HL,MPIINM,MPIOUT,MPIIN,MPIMCNT,MPICNT,MPICS,HEADER,TEST,SITE,MPIDC,SSN
"RTN","MPIFQ0",36,0)
 I $G(HLP("ACKTIME"))="" S HLP("ACKTIME")=30 ;If the HLP("ACKTIME") is not already set for the D/C
"RTN","MPIFQ0",37,0)
 S HL("ECH")="^~\&",HL("FS")="|"
"RTN","MPIFQ0",38,0)
 I '$D(MPIQRYNM) S MPIQRYNM="VTQ_PID_ICN"
"RTN","MPIFQ0",39,0)
 S MPIIN="",MPIMCNT=DFN,MPICNT=1,MPICS=$E(HL("ECH"),1)
"RTN","MPIFQ0",40,0)
 D VTQ1^MPIFVTQ(DFN,.MPIOUT,.HL,.MPIQRYNM) ; **33 remove field list to get all now
"RTN","MPIFQ0",41,0)
 I +MPIOUT(0)=-1 D  G EXIT
"RTN","MPIFQ0",42,0)
 .S ^TMP($J,"MPIFQ0-ERROR-LOG",DFN,TIME)=$G(MPIOUT(0)),MPIFRTN="CONTINUE"
"RTN","MPIFQ0",43,0)
 ;Create MSH
"RTN","MPIFQ0",44,0)
 S SITE=$$SITE^VASITE,SITE=$P(SITE,"^",3),SITE=SITE\1,HEADER="MSH"_HL("FS")_HL("ECH")_HL("FS")_"MPI_LOAD"_HL("FS")_SITE_HL("FS")
"RTN","MPIFQ0",45,0)
 S HEADER=HEADER_"MPI-ICN"_HL("FS")_HL("FS")_HL("FS")_HL("FS")_"VQQ"_MPICS_"Q02"_HL("FS")_MPIMCNT_"-"_MPICNT_HL("FS") ;**38 changed VTQ to VQQ
"RTN","MPIFQ0",46,0)
 S MPIOUT(1)=HEADER K MPIOUT(0)
"RTN","MPIFQ0",47,0)
 I '$D(MPIFS) W:'$D(MPIFRPC) !!,"Attempting to connect to the Master Patient Index in Austin...",!,"If no SSN or inexact DOB or common name, this request",!,"may take some time, please be patient...",!
"RTN","MPIFQ0",48,0)
 S TEST=$$EN^HLCSAC("MPIVA DIR","MPIOUT","MPIDC")
"RTN","MPIFQ0",49,0)
 K HLP("ACKTIME") ;kill the HLP array set for the ack timeout
"RTN","MPIFQ0",50,0)
 I +TEST=-1 D  G EXIT
"RTN","MPIFQ0",51,0)
 .S ^TMP($J,"MPIFQ0-ERROR-LOG",DFN,TIME)=TEST
"RTN","MPIFQ0",52,0)
 .I '$D(MPIFS) W:'$D(MPIFRPC) !!,"Could not connect to MPI or Timed Out, assigning local ICN (if not already assigned)..."
"RTN","MPIFQ0",53,0)
 .D LOCAL^MPIFQ3(DFN) S MPIFRTN="ASSIGNING LOCAL"
"RTN","MPIFQ0",54,0)
 K ^TMP("MPIFVQQ",$J),^TMP("MPIFQ0",$J) ;array data is parsed into for display in LM
"RTN","MPIFQ0",55,0)
INIPARS ;
"RTN","MPIFQ0",56,0)
 N SEG,INDEX,SKIP,CHECK,AL,TTF2,TFLL,TF,TF2,MPIREP,MPICOMP
"RTN","MPIFQ0",57,0)
 S INDEX=0 K CHECK
"RTN","MPIFQ0",58,0)
LOOP1 ;
"RTN","MPIFQ0",59,0)
 ;process in ADT type messages
"RTN","MPIFQ0",60,0)
 N MPIX S MPIX=0 N REP,SG,MSG,MPIQUIT,MPINODE
"RTN","MPIFQ0",61,0)
 K TWODFN S MPIQUIT=0
"RTN","MPIFQ0",62,0)
 F MPIX=0:1 X "D LOOP2" D  K MPINODE,MSG Q:MPIQUIT'>0
"RTN","MPIFQ0",63,0)
 . I $D(MPINODE(1)) S SG=$E(MPINODE(1),1,3) S MSG(1)=MPINODE(1) D
"RTN","MPIFQ0",64,0)
 .. S MPIJ=1 F  S MPIJ=$O(MPINODE(MPIJ)) Q:'MPIJ  S MSG(MPIJ)=MPINODE(MPIJ)
"RTN","MPIFQ0",65,0)
 .. D:SG?2A1(1A,1N) @SG
"RTN","MPIFQ0",66,0)
DECIDE ;If no data in ^TMP that means the patient was not found in the MPI w/VTQ Query. So we go to A28 to add the patient to the MPI.
"RTN","MPIFQ0",67,0)
 N EXC,TEXT,EXACT,EXACT2
"RTN","MPIFQ0",68,0)
 I '$D(^TMP("MPIFVQQ",$J)) D  G EXIT
"RTN","MPIFQ0",69,0)
 .I '$D(MPIFS) W:'$D(MPIFRPC) !!,"Exact match for Patient was not found in the MPI..."
"RTN","MPIFQ0",70,0)
 .D A28^MPIFQ3(DFN) S MPIFRTN="DID A28"
"RTN","MPIFQ0",71,0)
 .;**43 log potential match exception if exist
"RTN","MPIFQ0",72,0)
 .;**52 removed all references to logging of Potential Matches because that will be done via a remote RPC in the Probabilistic Search flow on the MPI
"RTN","MPIFQ0",73,0)
 ;If INDEX=1 it means we got 1 match check SSN see if definitely same pt
"RTN","MPIFQ0",74,0)
 I (INDEX=1) D  G EXIT
"RTN","MPIFQ0",75,0)
 .;**43 Removed &(TSSN=SSN) from line above as there will only be an exact match returned now
"RTN","MPIFQ0",76,0)
 .N CCMOR,ICN,DATA,TICN,SNM,SNM2,IEN
"RTN","MPIFQ0",77,0)
 .S DATA=^TMP("MPIFVQQ",$J,INDEX,"DATA"),CMOR=$P(DATA,"^",5),ICN=$P(DATA,"^",6),IEN=$$IEN^XUAF4(CMOR)
"RTN","MPIFQ0",78,0)
 .D START^RGHLLOG(0)
"RTN","MPIFQ0",79,0)
 .S TICN=$$GETDFN^MPIF001(+ICN)
"RTN","MPIFQ0",80,0)
 .I TICN>0,DFN'=TICN D
"RTN","MPIFQ0",81,0)
 ..; call the new DUPLICATE RECORD MERGE ADD API (see section 3.2.1.2)
"RTN","MPIFQ0",82,0)
 ..N XDRSLT,XDRLST,XDRFL
"RTN","MPIFQ0",83,0)
 ..S XDRFL=2,XDRLST(1)=TICN_"^"_DFN
"RTN","MPIFQ0",84,0)
 ..D ADD^XDRDADDS(.XDRSLT,XDRFL,.XDRLST) S TWODFN=1
"RTN","MPIFQ0",85,0)
 ..;D TWODFNS^MPIF002(TICN,DFN,ICN) S TWODFN=1
"RTN","MPIFQ0",86,0)
 ..;I '$D(MPIFS) W:'$D(MPIFRPC) !!,"Exception logged, another patient has the ICN returned already, requesting new ICN for this patient..."
"RTN","MPIFQ0",87,0)
 ..D A28^MPIFQ3(DFN),STOP^RGHLLOG(0) S MPIFRTN="Did A28" Q
"RTN","MPIFQ0",88,0)
 .;I TICN>0&(DFN'=TICN)
"RTN","MPIFQ0",89,0)
 .; CHECK IF NAME IS SAME - IF NOT POTENTIAL MATCH EXCEPTION
"RTN","MPIFQ0",90,0)
 .; **43 remove checks here as only exact match will be returned from the MPI
"RTN","MPIFQ0",91,0)
 .;S SNM=LOCDATA(2,DFN,.01) D NAME^VAFCPID2(DFN,.SNM,0) ;reformat name to DG 149 standard
"RTN","MPIFQ0",92,0)
 .;S SNM2=$P(DATA,"^") D NAME^VAFCPID2(0,.SNM2,0) S $P(DATA,"^")=SNM2
"RTN","MPIFQ0",93,0)
 .;I $P(SNM,",")=$P(SNM2,",")&($P($P(SNM2,",",2)," ")=$P($P(SNM,",",2)," ")) D
"RTN","MPIFQ0",94,0)
 .; ^first and last match - check for middle name vs middle initial
"RTN","MPIFQ0",95,0)
 .;N SNMN,SNMN2
"RTN","MPIFQ0",96,0)
 .;S SNMN=$P($P(SNM,",",2)," ",2),SNMN2=$P($P(SNM2,",",2)," ",2)
"RTN","MPIFQ0",97,0)
 .;I $L(SNMN)>1&($L(SNMN2)=1),$E(SNMN,1)=SNMN2 S EXACT=1
"RTN","MPIFQ0",98,0)
 .;I $L(SNMN2)>1&($L(SNMN)=1),$E(SNMN2,1)=SNMN S EXACT=1
"RTN","MPIFQ0",99,0)
 .;I $P($G(^DPT(DFN,0)),"^",2)'=$P(DATA,"^",11) S EXC=209,TEXT="Gender fields don't match between site and MPI for DFN "_DFN S EXACT2=1
"RTN","MPIFQ0",100,0)
 .;I SNM2'=SNM&('$D(EXACT))!($D(EXACT2)) D  Q
"RTN","MPIFQ0",101,0)
 .;I '$D(EXC) S EXC=214,TEXT="Name fields don't match between site and MPI for DFN "_DFN
"RTN","MPIFQ0",102,0)
 .;I $D(MPIFINT) D START^MPIFQ1(INDEX) Q
"RTN","MPIFQ0",103,0)
 .;I '$D(MPIFINT) D LOC2^MPIFQ3(DFN) Q
"RTN","MPIFQ0",104,0)
 .I '$D(MPIFS)&('$D(TWODFN)) W:'$D(MPIFRPC) !!,"Found Patient "_$G(LOCDATA(2,DFN,.01))_" on MPI",!,"  Updating ICN to "_+ICN_"  - just a minute..."
"RTN","MPIFQ0",105,0)
 .D STOP^RGHLLOG(0),UPDATE(DFN,ICN,CMOR) S MPIFRTN="GOT 1 HIT FROM MPI"
"RTN","MPIFQ0",106,0)
 ;I '$D(MPIFINT) D  G EXIT
"RTN","MPIFQ0",107,0)
 ;. came in via PIMS options to d/c with MPI
"RTN","MPIFQ0",108,0)
 ;.I '$D(MPIFS) W:'$D(MPIFRPC) !!,"Potential Matches Found, Assigning Local ICN..."
"RTN","MPIFQ0",109,0)
 ;.I '$D(EXC) S EXC=218,TEXT="Potential matches found for patient DFN= "_DFN_" Use Single Patient Initialization to MPI option to manually process."
"RTN","MPIFQ0",110,0)
 ;.D START^RGHLLOG(0),EXC^RGHLLOG(EXC,TEXT,DFN),STOP^RGHLLOG(0)
"RTN","MPIFQ0",111,0)
 ;.D LOCAL^MPIFQ3(DFN) S MPIFRTN="ASSIGNING LOCAL"
"RTN","MPIFQ0",112,0)
 ;D START^MPIFQ1(INDEX) G END
"RTN","MPIFQ0",113,0)
EXIT I $D(MPIFINT) K MPIFINT,MPIFRES,MPIQRYNM,TSSN,TWODFN
"RTN","MPIFQ0",114,0)
 K VALMCNT,VALMLST,CCMOR,FICN H 3 W:'$D(MPIFRPC) !!
"RTN","MPIFQ0",115,0)
END K ^TMP("MPIFVQQ",$J),^TMP("MPIFQ0",$J) Q
"RTN","MPIFQ0",116,0)
 ;
"RTN","MPIFQ0",117,0)
UPDATE(DFN,ICN,CMOR) ;
"RTN","MPIFQ0",118,0)
 N TICN,CHKSUM,SETICN,SETLOC,CHANGE,RGLOG,LOCAL
"RTN","MPIFQ0",119,0)
 S CHKSUM=$P(ICN,"V",2),ICN=$P(ICN,"V",1),TICN=$$GETDFN^MPIF001(+ICN)
"RTN","MPIFQ0",120,0)
 I TICN>0,TICN'=DFN,'$D(TWODFN) D TWODFNS^MPIF002(TICN,DFN,ICN) Q
"RTN","MPIFQ0",121,0)
 S SETICN=$$SETICN^MPIF001(DFN,ICN,CHKSUM)
"RTN","MPIFQ0",122,0)
 I +SETICN'>0 S ^TMP($J,"MPIFQ0-ERROR-LOG",DFN,TIME)="COULD NOT SET ICN IN MPIFQ0" Q
"RTN","MPIFQ0",123,0)
 S SETLOC=1,LOCAL="N"
"RTN","MPIFQ0",124,0)
 I $E(ICN,1,3)=$P($$SITE^VASITE(),"^",3) S LOCAL="Y"
"RTN","MPIFQ0",125,0)
 I $G(LOCAL)="Y" S SETLOC=$$SETLOC^MPIF001(DFN,1)
"RTN","MPIFQ0",126,0)
 I $G(LOCAL)'="Y" S SETLOC=$$SETLOC^MPIF001(DFN,0)
"RTN","MPIFQ0",127,0)
 I +SETLOC'>0 S ^TMP($J,"MPIFQ0-ERROR-LOG",DFN,TIME)="COULD NOT SETLOC IN MPIFQ0" Q
"RTN","MPIFQ0",128,0)
 N CMOR1 S CMOR1=$$LKUP^XUAF4(CMOR)
"RTN","MPIFQ0",129,0)
 I CMOR1'="" S CHANGE=$$CHANGE^MPIF001(DFN,CMOR1)
"RTN","MPIFQ0",130,0)
 I CMOR1="" S CHANGE=-1
"RTN","MPIFQ0",131,0)
 I $G(LOCAL)="Y" S CHANGE=$$CHANGE^MPIF001(DFN,$P($$SITE^VASITE,"^"))
"RTN","MPIFQ0",132,0)
 I +CHANGE'>0 S ^TMP($J,"MPIFQ0-ERROR-LOG",DFN,TIME)="COULD NOT SET CMOR IN MPIFQ0" Q
"RTN","MPIFQ0",133,0)
 Q:$G(LOCAL)="Y"
"RTN","MPIFQ0",134,0)
 N RESLT S RESLT=$$A24^MPIFA24B(DFN)
"RTN","MPIFQ0",135,0)
 I +RESLT<0 D EXC^RGHLLOG(208,"Problem building A24 (ADD TF) for DFN= "_DFN,DFN)
"RTN","MPIFQ0",136,0)
 ; Added for patch 31, create treating facility list
"RTN","MPIFQ0",137,0)
 I $D(^TMP("MPIFVQQ",$J,INDEX,"TF")) D
"RTN","MPIFQ0",138,0)
 . N MPINTFI,MPINTF,TFSTRG,TFIEN,MPIFMDT
"RTN","MPIFQ0",139,0)
 . S MPINTFI=0
"RTN","MPIFQ0",140,0)
 . F  S MPINTFI=$O(^TMP("MPIFVQQ",$J,INDEX,"TF",MPINTFI)) Q:'MPINTFI  D
"RTN","MPIFQ0",141,0)
 .. S MPINTF=^TMP("MPIFVQQ",$J,INDEX,"TF",MPINTFI)
"RTN","MPIFQ0",142,0)
 .. S TFIEN=$$IEN^XUAF4($P(MPINTF,"^",1))
"RTN","MPIFQ0",143,0)
 .. S MPIFMDT=$$HL7TFM^XLFDT($P(MPINTF,"^",2)) I MPIFMDT<0 S MPIFMDT=""
"RTN","MPIFQ0",144,0)
 .. S TFSTRG=TFIEN_"^"_$G(MPIFMDT)_"^"_$P(MPINTF,"^",3)
"RTN","MPIFQ0",145,0)
 .. D FILE^VAFCTFU(DFN,TFSTRG,1)
"RTN","MPIFQ0",146,0)
 Q
"RTN","MPIFQ0",147,0)
GETDATA(DIC,DA,MPIFAR,DR,EI) ;
"RTN","MPIFQ0",148,0)
 ;This function returns the values stored in the fields via FM call DIQ1
"RTN","MPIFQ0",149,0)
 ;DIC=file reference, DA=IEN in file, ARRAY=array for the values to be stored in, DR=fields requested, EI=external/internal values
"RTN","MPIFQ0",150,0)
 N DIQ S DIQ=MPIFAR
"RTN","MPIFQ0",151,0)
 I $G(EI)]"" S DIQ(0)=EI
"RTN","MPIFQ0",152,0)
 D EN^DIQ1
"RTN","MPIFQ0",153,0)
 Q
"RTN","MPIFQ0",154,0)
LOOP2 ;
"RTN","MPIFQ0",155,0)
 N MPIDONE,MPII,MPIJ
"RTN","MPIFQ0",156,0)
 S MPII=0,MPIDONE=0
"RTN","MPIFQ0",157,0)
 F  S MPIQUIT=$O(MPIDC(MPIQUIT)) Q:'MPIQUIT  D  Q:MPIDONE
"RTN","MPIFQ0",158,0)
 . I MPIDC(MPIQUIT)="" S MPIDONE=1 Q
"RTN","MPIFQ0",159,0)
 . S MPII=MPII+1,MPINODE(MPII)=$G(MPIDC(MPIQUIT)) Q
"RTN","MPIFQ0",160,0)
 Q
"RTN","MPIFQ0",161,0)
MSH ;
"RTN","MPIFQ0",162,0)
 S MPIREP=$E(HL("ECH"),2),MPICOMP=$E(HL("ECH"),1)
"RTN","MPIFQ0",163,0)
 Q
"RTN","MPIFQ0",164,0)
MSA ;
"RTN","MPIFQ0",165,0)
 Q
"RTN","MPIFQ0",166,0)
RDF ;
"RTN","MPIFQ0",167,0)
 Q
"RTN","MPIFQ0",168,0)
QAK ;**43 added check for potential matches
"RTN","MPIFQ0",169,0)
 K MPIPOT S MPIPOT=0
"RTN","MPIFQ0",170,0)
 I MSG(1)["POTENTIAL MATCHES" S MPIPOT=1
"RTN","MPIFQ0",171,0)
 Q
"RTN","MPIFQ0",172,0)
RDT ;
"RTN","MPIFQ0",173,0)
 N NAME,ICN,BIRTHDAY,CMOR,IEN,SEG,HEREICN,STRING,LASTNAME,FRSTNAME,MIDDLE,SUFF,SEX
"RTN","MPIFQ0",174,0)
 S STRING="",INDEX=$G(INDEX)+1
"RTN","MPIFQ0",175,0)
 D RDT^MPIFSA3(.INDEX,.HL,.MSG)
"RTN","MPIFQ0",176,0)
 S SEG=^TMP("MPIFVQQ",$J,INDEX,"DATA")
"RTN","MPIFQ0",177,0)
 S FRSTNAME=$P(SEG,"^",7),LASTNAME=$P(SEG,"^",2),MIDDLE=$P(SEG,"^",10),SUFF=$P(SEG,"^",15)
"RTN","MPIFQ0",178,0)
 S SSN=$P(SEG,"^",3),NAME=LASTNAME_","_FRSTNAME
"RTN","MPIFQ0",179,0)
 I MIDDLE'="" S NAME=NAME_" "_MIDDLE
"RTN","MPIFQ0",180,0)
 I SUFF'="" S NAME=NAME_" "_SUFF
"RTN","MPIFQ0",181,0)
 S SEX=$P(SEG,"^",11)
"RTN","MPIFQ0",182,0)
 S ICN=$P(SEG,"^",6)
"RTN","MPIFQ0",183,0)
 S BIRTHDAY=$P(SEG,"^",4)
"RTN","MPIFQ0",184,0)
 S CMOR=$P(SEG,"^",5),IEN=$$IEN^XUAF4(CMOR)
"RTN","MPIFQ0",185,0)
 I IEN'="" S CMOR=$P($$NS^XUAF4(IEN),"^") ;**54 fix when CMOR not passed
"RTN","MPIFQ0",186,0)
 S HEREICN=$$HEREICN^MPIFQ3($P(ICN,"V",1))
"RTN","MPIFQ0",187,0)
 I HEREICN S STRING=$$SETSTR^VALM1("*",STRING,1,1),^TMP("MPIFVQQ",$J,INDEX,"INDICATOR")="*"_"^"_HEREICN
"RTN","MPIFQ0",188,0)
 S STRING=$$SETSTR^VALM1(INDEX,STRING,2,4),STRING=$$SETSTR^VALM1($E(NAME,1,23),STRING,6,23)
"RTN","MPIFQ0",189,0)
 S STRING=$$SETSTR^VALM1(SSN,STRING,30,9),STRING=$$SETSTR^VALM1(BIRTHDAY,STRING,41,10)
"RTN","MPIFQ0",190,0)
 S STRING=$$SETSTR^VALM1(CMOR,STRING,54,20)
"RTN","MPIFQ0",191,0)
 S ^TMP("MPIFVQQ",$J,INDEX,0)=STRING,^TMP("MPIFVQQ",$J,"IDX",INDEX,INDEX)=""
"RTN","MPIFQ0",192,0)
 Q
"RTN","MPIFQ0",193,0)
 Q
"RTN","MPIFRES")
0^2^B25967604^B25044617
"RTN","MPIFRES",1,0)
MPIFRES ;SF/CMC-LOCAL AND MISSING ICN RESOLUTION ;JUL 13, 1998
"RTN","MPIFRES",2,0)
 ;;1.0;MASTER PATIENT INDEX VISTA;**1,7,10,15,17,21,26,28,33,35,43,39,52,54**;30 Apr 99;Build 2
"RTN","MPIFRES",3,0)
 ;
"RTN","MPIFRES",4,0)
 ; Integration Agreements Utilized:
"RTN","MPIFRES",5,0)
 ;  EXC, START and STOP^RGHLLOG - #2796
"RTN","MPIFRES",6,0)
 ;  ^DPT("AICNL", ^DPT("AMPIMIS" - #2070
"RTN","MPIFRES",7,0)
 ;  ^RGHL7(991.1 - #3259
"RTN","MPIFRES",8,0)
 ;  ^RGSITE - #2746
"RTN","MPIFRES",9,0)
 ;
"RTN","MPIFRES",10,0)
BKG ;
"RTN","MPIFRES",11,0)
 I $D(ZTQUEUED) D GO Q
"RTN","MPIFRES",12,0)
 S ZTRTN="GO^MPIFRES",ZTDESC="USE HL7 MSGS AND MAIL TO BUILD ICN"
"RTN","MPIFRES",13,0)
 S ZTIO="",ZTDTH=$$FMADD^XLFDT($$NOW^XLFDT,0,0,1,0)
"RTN","MPIFRES",14,0)
 I $D(DUZ) S ZTSAVE("DUZ")=DUZ
"RTN","MPIFRES",15,0)
 D ^%ZTLOAD
"RTN","MPIFRES",16,0)
 D HOME^%ZIS K IO("Q")
"RTN","MPIFRES",17,0)
 K ZTDESC,ZTDTH,ZTIO,ZTQUEUED,ZTREQ,ZTRTN,ZTSAVE,ZTSK,%
"RTN","MPIFRES",18,0)
 Q
"RTN","MPIFRES",19,0)
 ;
"RTN","MPIFRES",20,0)
GO ;ENTRY POINT
"RTN","MPIFRES",21,0)
 N MPIMORE,MPITOT
"RTN","MPIFRES",22,0)
 L +^XTMP("MPIF RESOLUTION"):3 E  Q
"RTN","MPIFRES",23,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","MPIFRES",24,0)
 ;
"RTN","MPIFRES",25,0)
 K ^TMP("HLS",$J),STOP
"RTN","MPIFRES",26,0)
 D START^RGHLLOG()
"RTN","MPIFRES",27,0)
 D HLRDF
"RTN","MPIFRES",28,0)
 I $D(STOP) K STOP Q  ;patch 7 added to quit if init returned an error
"RTN","MPIFRES",29,0)
 D LOOP
"RTN","MPIFRES",30,0)
 I $D(^TMP("HLS",$J)) D SEND
"RTN","MPIFRES",31,0)
 D STOP^RGHLLOG(0)
"RTN","MPIFRES",32,0)
 K MPIIT,MPITOT,HLDT,HLDT1,MPICNT,MPIDNUM,MPIEROR,MPIMIDT,MPIMSH
"RTN","MPIFRES",33,0)
 K MPIOUT,MPIQRYNM,MPISEQ,QCNT,MPIMCNT,MPIMTX,ENDT,MPIFRES
"RTN","MPIFRES",34,0)
 L -^XTMP("MPIF RESOLUTION")
"RTN","MPIFRES",35,0)
 ; mark job completion date/time
"RTN","MPIFRES",36,0)
 S $P(^RGSITE(991.8,1,0),"^",4)=$$NOW^XLFDT
"RTN","MPIFRES",37,0)
 Q
"RTN","MPIFRES",38,0)
 ;
"RTN","MPIFRES",39,0)
HLRDF ;
"RTN","MPIFRES",40,0)
 S (MPIOUT,MPIMCNT)=""
"RTN","MPIFRES",41,0)
 S HL("ECH")="^~\&"
"RTN","MPIFRES",42,0)
 S HL("FS")="|"
"RTN","MPIFRES",43,0)
 D INIT^HLFNC2("MPIF ICN-Q02 SERVER",.HL)
"RTN","MPIFRES",44,0)
 I $O(HL("")) D EXC^RGHLLOG(220,"INIT^HLFNC2 call error returned") S STOP="" Q
"RTN","MPIFRES",45,0)
 D CREATE^HLTF(.MPIMCNT,.MPIMTX,.HLDT,.HLDT1)
"RTN","MPIFRES",46,0)
 Q
"RTN","MPIFRES",47,0)
LOOP ;
"RTN","MPIFRES",48,0)
 S (MPICNT,MPIDNUM)=1
"RTN","MPIFRES",49,0)
 D MAKE
"RTN","MPIFRES",50,0)
 Q
"RTN","MPIFRES",51,0)
SEND ;ready to send
"RTN","MPIFRES",52,0)
 D GENERATE^HLMA("MPIF ICN-Q02 SERVER","GB",1,.MPIMTX,.MPIEROR,.MPIMORE)
"RTN","MPIFRES",53,0)
 I +MPIEROR=0 D EXC^RGHLLOG(220,"GENERATE^HLMA call returned error") Q
"RTN","MPIFRES",54,0)
 K %,MPIMTX,MPIEROR,MPIMORE
"RTN","MPIFRES",55,0)
 K ^TMP("HLS",$J)
"RTN","MPIFRES",56,0)
 Q
"RTN","MPIFRES",57,0)
MAKE ;
"RTN","MPIFRES",58,0)
 N LOCAL,MPIIT,TICN,STOP,X,Y,%,%H,%I,TODAY,SITE,XX,SDT,NDT
"RTN","MPIFRES",59,0)
 S LOCAL="",MPIIT=0,MPIFRES="",SITE=$P($$SITE^VASITE(),"^",3)
"RTN","MPIFRES",60,0)
 D NOW^%DTC S TODAY=X
"RTN","MPIFRES",61,0)
 ;local ICNs
"RTN","MPIFRES",62,0)
 F  S MPIIT=$O(^DPT("AICNL",1,MPIIT)) Q:MPIIT=""  D
"RTN","MPIFRES",63,0)
 .; LINE BELOW ADDED FOR PATCH 26 TO CLEANUP AICNL X-REF WHEN LEFT AROUND
"RTN","MPIFRES",64,0)
 .I $E($$GETICN^MPIF001(MPIIT),1,3)'=SITE S XX=$$SETLOC^MPIF001(MPIIT,0) K ^DPT("AICNL",1,MPIIT) Q
"RTN","MPIFRES",65,0)
 .;Q:+$G(^DPT("AICNL",1,MPIIT))=1 **39 changing check
"RTN","MPIFRES",66,0)
 .Q:+$G(^DPT("AICNL",1,MPIIT))=2&($P($G(^DPT("AICNL",1,MPIIT)),"^",2)=TODAY)
"RTN","MPIFRES",67,0)
 .; ^ check if A28 failed to get ICN back and should now be sent up
"RTN","MPIFRES",68,0)
 .; DON'T send if is the 2^today **35
"RTN","MPIFRES",69,0)
 .S SDT=$P($G(^DPT("AICNL",1,MPIIT)),"^",2)
"RTN","MPIFRES",70,0)
 .N X1,X2 K X S X1=SDT,X2=2 D C^%DTC S NDT=X ;**39 FIGURE 2 DAYS FROM NOW
"RTN","MPIFRES",71,0)
 .Q:+$G(^DPT("AICNL",1,MPIIT))=1&(SDT=TODAY)
"RTN","MPIFRES",72,0)
 .; **39 ^ if send up today don't send again
"RTN","MPIFRES",73,0)
 .Q:+$G(^DPT("AICNL",1,MPIIT))=1&(NDT>TODAY)
"RTN","MPIFRES",74,0)
 .;**39 ^ only send patient to MPI for Local ICN resolution 1 time UNLESS its day 3 since it was sent
"RTN","MPIFRES",75,0)
 .;I $D(^RGHL7(991.1,"ADFN",218,MPIIT)) S ^DPT("AICNL",1,MPIIT)="1^"_TODAY Q
"RTN","MPIFRES",76,0)
 .; ^ checking if potential match exception **43 REMOVE CHECK ON POTENTIAL MATCH EXCEPTIONS
"RTN","MPIFRES",77,0)
 .D MAKE3
"RTN","MPIFRES",78,0)
 ;missing ICNs
"RTN","MPIFRES",79,0)
 S MPIIT=0
"RTN","MPIFRES",80,0)
 F  S MPIIT=$O(^DPT("AMPIMIS",MPIIT)) Q:MPIIT=""  D
"RTN","MPIFRES",81,0)
 .K STOP
"RTN","MPIFRES",82,0)
 .I $D(^DPT(MPIIT,-9)) K ^DPT("AMPIMIS",MPIIT) Q  ;**43 CHECK IF MERGED PATIENT AND CLEANUP CROSS REFERENCE
"RTN","MPIFRES",83,0)
 .I '$D(^DPT(MPIIT,0)) K ^DPT("AMPIMIS",MPIIT) Q  ;**54 cleanup for x-ref if 0 node doesn't exist
"RTN","MPIFRES",84,0)
 .S TICN=+$$GETICN^MPIF001(MPIIT)
"RTN","MPIFRES",85,0)
 .I TICN<0 L +^DPT(MPIIT):5 I '$T Q  ;**35
"RTN","MPIFRES",86,0)
 .L -^DPT(MPIIT) ;**35 **52 UNLOCK WHAT IS LOCKED ABOVE
"RTN","MPIFRES",87,0)
 .;**35 If don't have ICN yet, try to lock if can't get lock skip record - still creating patient.
"RTN","MPIFRES",88,0)
 .I TICN<0,'$D(STOP) D MAKE3
"RTN","MPIFRES",89,0)
 .K ^DPT("AMPIMIS",MPIIT) ;**54 include cleanup for x-ref here
"RTN","MPIFRES",90,0)
 Q
"RTN","MPIFRES",91,0)
MAKE3 ;
"RTN","MPIFRES",92,0)
 K MPIOUT
"RTN","MPIFRES",93,0)
 S MPIFRES=""
"RTN","MPIFRES",94,0)
 S:$G(MPIQRYNM)="" MPIQRYNM="EXACT_MATCH_QUERY" ;**43 changed MPIQRYNM from VTQ_PID_ICN_LOAD_1 to stop automatic add pts on the MPI
"RTN","MPIFRES",95,0)
 D VTQ1^MPIFVTQ(MPIIT,.MPIOUT,.HL,.MPIQRYNM)
"RTN","MPIFRES",96,0)
 ;**54 MVI 874 STOP LOGGING EXCEPTION AS WE CORRECTED THE DANGLING X-REF FOR INVALID DFN
"RTN","MPIFRES",97,0)
 I $P(MPIOUT(0),"^")<0,$P(MPIOUT(0),"^",2)="invalid DFN" Q
"RTN","MPIFRES",98,0)
 I $P(MPIOUT(0),"^",2)="no encoding characters" D EXC^RGHLLOG(206,"DFN = "_MPIIT_"  Problem with building VTQ was "_$P(MPIOUT(0),"^",2),MPIIT) Q
"RTN","MPIFRES",99,0)
 ;I $P(MPIOUT(0),"^")<0,$P(MPIOUT(0),"^",2)="Missing Required Field(s)" Q
"RTN","MPIFRES",100,0)
 ;Q:$P(MPIOUT(0),"^")<0
"RTN","MPIFRES",101,0)
 S ^DPT("AICNL",1,MPIIT)="1^"_TODAY
"RTN","MPIFRES",102,0)
 ; ^ mark Local ICN as having been sent to MPI for resolution
"RTN","MPIFRES",103,0)
 ;call for HL7 header
"RTN","MPIFRES",104,0)
 S MPIMIDT=MPIMCNT_"-"_MPIDNUM
"RTN","MPIFRES",105,0)
 D MSH^HLFNC2(.HL,MPIMIDT,.MPIMSH)
"RTN","MPIFRES",106,0)
 S MPIOUT(1)=MPIMSH
"RTN","MPIFRES",107,0)
 S ^TMP("HLS",$J,MPICNT)=MPIOUT(1)
"RTN","MPIFRES",108,0)
 S MPICNT=MPICNT+1
"RTN","MPIFRES",109,0)
 ;MESSAGE BUILT
"RTN","MPIFRES",110,0)
 S MPISEQ=0
"RTN","MPIFRES",111,0)
 ;setup VTQ segment in HL array
"RTN","MPIFRES",112,0)
 S ^TMP("HLS",$J,MPICNT)=MPIOUT(2)
"RTN","MPIFRES",113,0)
 S MPICNT=MPICNT+1
"RTN","MPIFRES",114,0)
 ;setup RDF segment in HL array
"RTN","MPIFRES",115,0)
 S ^TMP("HLS",$J,MPICNT)=MPIOUT(3)
"RTN","MPIFRES",116,0)
 ;loop through and add the additional RDF continuations
"RTN","MPIFRES",117,0)
 N SCNT,Y S Y=3,SCNT=1 F  S Y=$O(MPIOUT(Y)) Q:'Y  D
"RTN","MPIFRES",118,0)
 .S ^TMP("HLS",$J,MPICNT,SCNT)=MPIOUT(Y),SCNT=SCNT+1
"RTN","MPIFRES",119,0)
 S MPICNT=MPICNT+1
"RTN","MPIFRES",120,0)
 S MPIDNUM=MPIDNUM+1
"RTN","MPIFRES",121,0)
 I MPIDNUM>100 D
"RTN","MPIFRES",122,0)
 .D SEND
"RTN","MPIFRES",123,0)
 .S (MPICNT,MPIDNUM)=1
"RTN","MPIFRES",124,0)
 .D HLRDF
"RTN","MPIFRES",125,0)
 Q
"RTN","MPIFVTQ")
0^1^B43904634^B42786955
"RTN","MPIFVTQ",1,0)
MPIFVTQ ;SLC/ARS-BUILD DATA TO QUERY MPI RESPONSE PROCESS (ADDPAT) ; 1/12/10 9:28am
"RTN","MPIFVTQ",2,0)
 ;;1.0;MASTER PATIENT INDEX VISTA;**1,9,17,21,23,28,33,35,52,54**;30 Apr 99;Build 2
"RTN","MPIFVTQ",3,0)
 ;
"RTN","MPIFVTQ",4,0)
 ; Integration Agreements Utilized:
"RTN","MPIFVTQ",5,0)
 ;  ^DPT( -9 node check - #2762
"RTN","MPIFVTQ",6,0)
 ;  ^DPT( "MPI" node - #2070
"RTN","MPIFVTQ",7,0)
 ;  EXC, START, STOP ^RGHLLOG - #2796
"RTN","MPIFVTQ",8,0)
 ;  NAME^VAFCPID2 - #3492
"RTN","MPIFVTQ",9,0)
 ;
"RTN","MPIFVTQ",10,0)
 Q  ;NOT an entry point
"RTN","MPIFVTQ",11,0)
 ;
"RTN","MPIFVTQ",12,0)
VTQ1(MPIIT,MPIOUT,HL,MPIQRYNM,MPISND) ;
"RTN","MPIFVTQ",13,0)
 ;MPIIT=DFN in patient file.
"RTN","MPIFVTQ",14,0)
 ;MPIOUT=Array you want the VTQ/RDF put into.
"RTN","MPIFVTQ",15,0)
 ;HL=Array of encoding characters and Field separator.
"RTN","MPIFVTQ",16,0)
 ;MPIQRYNM=Name of query to put into message.
"RTN","MPIFVTQ",17,0)
 ;MPISND (OPTIONAL) = item #'s separated by ; to be used to query.
"RTN","MPIFVTQ",18,0)
 ;  default is DOB;SSN;LAST NAME;FIRST NAME;SUFFIX OF NAME;SEX;DOD;
"RTN","MPIFVTQ",19,0)
 ;  POB-CITY;POB-STATE;MIDDLE NAME
"RTN","MPIFVTQ",20,0)
 ;
"RTN","MPIFVTQ",21,0)
 ;If invalid DFN, Patient Merged, if ICN already assigned, Test SSN, the VTQ query is not built and -1^'error message' returned in MPIOUT(0).
"RTN","MPIFVTQ",22,0)
 ;
"RTN","MPIFVTQ",23,0)
 ;If DOB does not contain a 7 digit date OR if name is not present, -1^Missing Required fields will be returned in MPIOUT(0).
"RTN","MPIFVTQ",24,0)
 ;
"RTN","MPIFVTQ",25,0)
 ;If patient has a date of death, the VTQ query is built with MPIOUT(0) returned with 0^Patient has date of death.  Programmer to decide if VTQ should be sent.
"RTN","MPIFVTQ",26,0)
 ;
"RTN","MPIFVTQ",27,0)
 N MPITEST,MPISSN,MPIDTH,MPINM,MPIDOB,ERR,MPITST11,MPITST13
"RTN","MPIFVTQ",28,0)
 S MPIOUT(0)=""
"RTN","MPIFVTQ",29,0)
 I '$D(MPISND) S MPISND="00122;00108.1;00108.2;00110;00740;00111;00108.4;00126.1;00126.2;00108.3;00114.1;00114.2;00114.3;00114.4;00114.5;00114.6;00114.8;00114.9;00116;00119;00125;00127;00100"
"RTN","MPIFVTQ",30,0)
 ;validation check
"RTN","MPIFVTQ",31,0)
 I '$D(HL) S MPIOUT(0)="-1^no encoding characters" Q
"RTN","MPIFVTQ",32,0)
 I $G(HL("FS"))=""!($G(HL("ECH"))="") S MPIOUT(0)="-1^no encoding characters" Q
"RTN","MPIFVTQ",33,0)
 I MPIIT="" S MPIOUT(0)="-1^invalid DFN" Q
"RTN","MPIFVTQ",34,0)
 I $G(^DPT(MPIIT,-9))'="" S MPIOUT(0)="-1^Patient merged "_^DPT(MPIIT,-9) Q
"RTN","MPIFVTQ",35,0)
 S MPIMPI=$G(^DPT(MPIIT,"MPI"))
"RTN","MPIFVTQ",36,0)
 S:MPIMPI'="" MPIZICN=$P(^DPT(MPIIT,"MPI"),"^",1)
"RTN","MPIFVTQ",37,0)
 I '$D(MPIFRES),$G(MPIZICN)'="" S MPIOUT(0)="-1^ICN already assigned "_MPIZICN Q
"RTN","MPIFVTQ",38,0)
 S MPITEST=$G(^DPT(MPIIT,0))
"RTN","MPIFVTQ",39,0)
 S MPITST11=$G(^DPT(MPIIT,.11)),MPITST13=$G(^DPT(MPIIT,.13))
"RTN","MPIFVTQ",40,0)
 I MPITEST="" S MPIOUT(0)="-1^invalid DFN" Q
"RTN","MPIFVTQ",41,0)
 I $P(MPITEST,"^")=""&($P(MPITEST,"^",2)="")&($P(MPITEST,"^",3)="")&($P(MPITEST,"^",9)="") D  Q
"RTN","MPIFVTQ",42,0)
 .K MPIARR
"RTN","MPIFVTQ",43,0)
 .S MPIOUT(0)="-1^invalid DFN" ;**54 changed the error message to allow the local/missing job to skip this record"
"RTN","MPIFVTQ",44,0)
 .S MPIARR(991.01)="@",MPIARR(991.02)="@",MPIARR(991.03)="@",MPIARR(991.05)="@"
"RTN","MPIFVTQ",45,0)
 .; **54 MVI 896 REMOVED SETTING OF VARIABLES MPIARR(992) & MPIARR(993)
"RTN","MPIFVTQ",46,0)
 .I $G(MPIZICN)'="" S ERR=$$DELALLTF^VAFCTFU(MPIZICN) ;clean up tf list
"RTN","MPIFVTQ",47,0)
 .S ERR=$$UPDATE^MPIFAPI(MPIIT,"MPIARR",1,1) K MPIARR
"RTN","MPIFVTQ",48,0)
 .;PATCH 33 - stub entry with local, remove local and don't send to MPI
"RTN","MPIFVTQ",49,0)
 S MPISSN=$P(MPITEST,"^",9)
"RTN","MPIFVTQ",50,0)
 S MPIDTH=""
"RTN","MPIFVTQ",51,0)
 S:$G(^DPT(MPIIT,.35))'="" MPIDTH=$P(^DPT(MPIIT,.35),"^",1)
"RTN","MPIFVTQ",52,0)
 I $G(MPIDTH)'="" S MPIOUT(0)="0^Patient has Date of Death "_MPIDTH
"RTN","MPIFVTQ",53,0)
 D VTQC(MPISSN,MPIDTH,MPISND,.HL,MPIQRYNM,.MPIOUT,MPIIT)
"RTN","MPIFVTQ",54,0)
 Q
"RTN","MPIFVTQ",55,0)
EXC(IEN) ;
"RTN","MPIFVTQ",56,0)
 Q:'$D(^DPT(IEN))
"RTN","MPIFVTQ",57,0)
 D LOCAL^MPIFQ3(IEN)
"RTN","MPIFVTQ",58,0)
 D START^RGHLLOG()
"RTN","MPIFVTQ",59,0)
 D EXC^RGHLLOG(209,"DFN= "_IEN_" is Missing Required Field(s)",IEN)
"RTN","MPIFVTQ",60,0)
 D STOP^RGHLLOG()
"RTN","MPIFVTQ",61,0)
 Q
"RTN","MPIFVTQ",62,0)
 ;
"RTN","MPIFVTQ",63,0)
VTQC(MPISSN,MPIDTH,MPISND,HL,MPIQRYNM,MPIOUT,MPIIT) ;
"RTN","MPIFVTQ",64,0)
 N MPIPOB,MPIPOBS,MPINM,MPI2MN,MPI1NM,QUERY,MPIDOB,RDF,MPIMOD
"RTN","MPIFVTQ",65,0)
 N MPIHDTH,MPIZDOB,MPIXDOB,MPIMPI,MPIZICN,QUEDOB,MPI2NM,MPICS,MPIESC,MPIHDOB,MPIMNM,MPIMN
"RTN","MPIFVTQ",66,0)
 N MPINMSFX,MPIRS,MPISCS,MPISEX,MPIZLOC,MPISTR1,MPISTR2,MPISTR3,MPICITY,MPISTPRV,XNOD
"RTN","MPIFVTQ",67,0)
 N MPIZIPPL,MPICNTRY,MPICNTY,MPIRESPH,MPIMRTST,MPIETH,MPIDLT,MPIMBI
"RTN","MPIFVTQ",68,0)
 I $G(MPIQRYNM)="" S MPIQRYNM="VTQ_PID_ICN_LOAD_1"
"RTN","MPIFVTQ",69,0)
 S MPICS=$E(HL("ECH"),1)
"RTN","MPIFVTQ",70,0)
 S MPIRS=$E(HL("ECH"),2)
"RTN","MPIFVTQ",71,0)
 S MPISCS=$E(HL("ECH"),4)
"RTN","MPIFVTQ",72,0)
 S MPIESC=$E(HL("ECH"),3)
"RTN","MPIFVTQ",73,0)
 ;build RDF as the third segment
"RTN","MPIFVTQ",74,0)
 D BLDRDF^MPIFSA2(.MPIOUT,3,MPIRS,MPICS)
"RTN","MPIFVTQ",75,0)
 S QUERY="VTQ"_HL("FS")_MPIIT_HL("FS")_"T"_HL("FS")_MPIQRYNM_HL("FS")_"ICN"_HL("FS")
"RTN","MPIFVTQ",76,0)
 ;
"RTN","MPIFVTQ",77,0)
 I MPISND["00108" S MPINM=$P(MPITEST,"^") D NAME^VAFCPID2(MPIIT,.MPINM) ;agressive name reformatting
"RTN","MPIFVTQ",78,0)
 ; ^ sending all or part of name
"RTN","MPIFVTQ",79,0)
 I MPISND["00108.1" S MPI2NM=$P(MPINM,",",1) I MPI2NM'="" S QUERY=QUERY_"@00108.1"_MPICS_"EQ"_MPICS_MPI2NM
"RTN","MPIFVTQ",80,0)
 ; ^ sending last name
"RTN","MPIFVTQ",81,0)
 ;I MPISND["00122"&(MPISSN'="")&(MPISSN'["P") S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00122"_MPICS_"EQ"_MPICS_MPISSN
"RTN","MPIFVTQ",82,0)
 ; ^ **35 SENDING PSUEDO TO KNOW THAT THE SITE HAS A VALUE FOR SSN
"RTN","MPIFVTQ",83,0)
 I MPISND["00122"&(MPISSN'="") S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00122"_MPICS_"EQ"_MPICS_MPISSN
"RTN","MPIFVTQ",84,0)
 ; ^ sending SSN
"RTN","MPIFVTQ",85,0)
 I MPISND["00108.2" S MPI1NM=$P(MPINM,",",2),MPI1NM=$P(MPI1NM," ",1) I MPI1NM'="" S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00108.2"_MPICS_"EQ"_MPICS_MPI1NM
"RTN","MPIFVTQ",86,0)
 ; ^ sending first name
"RTN","MPIFVTQ",87,0)
 I MPISND["00110" D
"RTN","MPIFVTQ",88,0)
 .S MPIDOB=$P(MPITEST,"^",3)
"RTN","MPIFVTQ",89,0)
 .Q:MPIDOB=""
"RTN","MPIFVTQ",90,0)
 .S MPIHDOB=$$HLDATE^HLFNC(MPIDOB)
"RTN","MPIFVTQ",91,0)
 .; send date of birth (convert to hl7 date format)
"RTN","MPIFVTQ",92,0)
 .S MPIMOD=MPIDOB#100
"RTN","MPIFVTQ",93,0)
 .I MPIQRYNM'="VTQ_PID_ICN_LOAD_1" S MPIZDOB=MPICS_"AND"_MPIRS_"@00110"_MPICS_"GN"_MPICS_MPIHDOB
"RTN","MPIFVTQ",94,0)
 .I MPIQRYNM="VTQ_PID_ICN_LOAD_1" S MPIZDOB=MPICS_"AND"_MPIRS_"@00110"_MPICS_"EQ"_MPICS_MPIHDOB
"RTN","MPIFVTQ",95,0)
 .S MPIXDOB=MPICS_"AND"_MPIRS_"@00110"_MPICS_"EQ"_MPICS_MPIHDOB
"RTN","MPIFVTQ",96,0)
 .S QUEDOB=$S(MPIMOD>0:MPIXDOB,1:MPIZDOB)
"RTN","MPIFVTQ",97,0)
 .S QUERY=QUERY_QUEDOB
"RTN","MPIFVTQ",98,0)
 ; ^ sending date of birth
"RTN","MPIFVTQ",99,0)
 I $D(MPIDTH),(MPISND["00740")&(MPIDTH'="") S MPIHDTH=$$HLDATE^HLFNC(MPIDTH),QUERY=QUERY_MPICS_"AND"_MPIRS_"@00740"_MPICS_"EQ"_MPICS_MPIHDTH
"RTN","MPIFVTQ",100,0)
 ; ^ sending date of death
"RTN","MPIFVTQ",101,0)
 I MPISND["00111" S:$G(^DPT(MPIIT,0))'="" MPISEX=$P(^DPT(MPIIT,0),"^",2) I MPISEX'="" S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00111"_MPICS_"EQ"_MPICS_MPISEX
"RTN","MPIFVTQ",102,0)
 ; ^ sending Sex
"RTN","MPIFVTQ",103,0)
 I MPISND["00108.4" S MPI1NM=$P(MPINM,",",2),MPINMSFX=$P(MPI1NM," ",3) I MPINMSFX'="" S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00108.4"_MPICS_"EQ"_MPICS_MPINMSFX
"RTN","MPIFVTQ",104,0)
 ; ^ sending suffix name
"RTN","MPIFVTQ",105,0)
 I MPISND["00126.1" S MPIPOB=$P(^DPT(MPIIT,0),"^",11) I MPIPOB'="" S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00126.1"_MPICS_"EQ"_MPICS_MPIPOB
"RTN","MPIFVTQ",106,0)
 ; send place of birth - city
"RTN","MPIFVTQ",107,0)
 I MPISND["00126.2" S MPIPOBS=$P(^DPT(MPIIT,0),"^",12) I MPIPOBS'="" S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00126.2"_MPICS_"EQ"_MPICS_$P($G(^DIC(5,+MPIPOBS,0)),"^",2)
"RTN","MPIFVTQ",108,0)
 ; send place of birth - state
"RTN","MPIFVTQ",109,0)
 I MPISND["00108.3" S MPIMN=$P($P(MPINM,",",2)," ",2) I MPIMN'="" S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00108.3"_MPICS_"EQ"_MPICS_MPIMN
"RTN","MPIFVTQ",110,0)
 ; send middle name
"RTN","MPIFVTQ",111,0)
 ; **52 - Initiate project
"RTN","MPIFVTQ",112,0)
 ; get address data
"RTN","MPIFVTQ",113,0)
 D ADDR(MPITST11)
"RTN","MPIFVTQ",114,0)
 I MPISND["00114.1"&(MPISTR1'="") S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00114.1"_MPICS_"EQ"_MPICS_MPISTR1
"RTN","MPIFVTQ",115,0)
 ; ^ send Street address line 1
"RTN","MPIFVTQ",116,0)
 I MPISND["00114.2"&(MPISTR2'="") S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00114.2"_MPICS_"EQ"_MPICS_MPISTR2
"RTN","MPIFVTQ",117,0)
 ; ^ send Street Address Line 2
"RTN","MPIFVTQ",118,0)
 I MPISND["00114.3"&(MPICITY'="") S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00114.3"_MPICS_"EQ"_MPICS_MPICITY
"RTN","MPIFVTQ",119,0)
 ; ^ send City
"RTN","MPIFVTQ",120,0)
 ;I MPISND["00114.4"&(MPISTPRV'="") S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00114.4"_MPICS_"EQ"_MPICS_MPISTPRV
"RTN","MPIFVTQ",121,0)
 ; ^ send State/Province depending on US or Foreign address
"RTN","MPIFVTQ",122,0)
 ;I MPISND["00114.5"&(MPIZIPPL'="") S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00114.5"_MPICS_"EQ"_MPICS_MPIZIPPL
"RTN","MPIFVTQ",123,0)
 ; ^ send Zip code/ Postal code depending on US or Foreign address
"RTN","MPIFVTQ",124,0)
 ;I MPISND["00114.6"&(MPICNTRY'="") S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00114.6"_MPICS_"EQ"_MPICS_MPICNTRY
"RTN","MPIFVTQ",125,0)
 ; ^ send Country
"RTN","MPIFVTQ",126,0)
 I MPISND["00114.8"&(MPISTR3'="") S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00114.8"_MPICS_"EQ"_MPICS_MPISTR3
"RTN","MPIFVTQ",127,0)
 ; ^ send Address Line 3
"RTN","MPIFVTQ",128,0)
 ;I MPISND["00114.9"&(MPICNTY'="") S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00114.9"_MPICS_"EQ"_MPICS_MPICNTY
"RTN","MPIFVTQ",129,0)
 ; ^ send County
"RTN","MPIFVTQ",130,0)
 I MPISND["00116" S MPIRESPH=$P(MPITST13,"^") I MPIRESPH'="" S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00116"_MPICS_"EQ"_MPICS_MPIRESPH
"RTN","MPIFVTQ",131,0)
 ; ^ send Residence Phone
"RTN","MPIFVTQ",132,0)
 ;I MPISND["00119" S MPIMRTST=$P(MPITEST,"^",5) I MPIMRTST'="" S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00119"_MPICS_"EQ"_MPICS_MPIMRTST
"RTN","MPIFVTQ",133,0)
 ; ^ send Marital Status
"RTN","MPIFVTQ",134,0)
 ;I MPISND["00125" S XNOD=$O(^DPT(MPIIT,.06,"")) I XNOD'="" S MPIETH=$P($G(^DPT(MPIIT,.06,XNOD,0)),"^") I MPIETH'="" S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00125"_MPICS_"EQ"_MPICS_MPIETH
"RTN","MPIFVTQ",135,0)
 ; ^ send Ethnicity
"RTN","MPIFVTQ",136,0)
 ;I MPISND["00127" S MPIMBI=$P($G(^DPT(MPIIT,"MPIMB")),"^") I MPIMBI'="" S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00127"_MPICS_"EQ"_MPICS_MPIMBI
"RTN","MPIFVTQ",137,0)
 ; ^ send Multiple Birth Indicator
"RTN","MPIFVTQ",138,0)
 ;S MPIDLT=$$GETDLT(MPIIT)
"RTN","MPIFVTQ",139,0)
 ;I MPISND["00100"&(MPIDLT'="") S QUERY=QUERY_MPICS_"AND"_MPIRS_"@00100"_MPICS_"EQ"_MPICS_MPIDLT
"RTN","MPIFVTQ",140,0)
 ; ^ send Date Last Treated
"RTN","MPIFVTQ",141,0)
 I $G(MPIOUT(0))="" S MPIOUT(0)="1^good data"
"RTN","MPIFVTQ",142,0)
 S MPIOUT(2)=QUERY
"RTN","MPIFVTQ",143,0)
 Q
"RTN","MPIFVTQ",144,0)
GETDLT(MPIIT) ;Get Date Last Treated
"RTN","MPIFVTQ",145,0)
 N TFIEN,TFZN
"RTN","MPIFVTQ",146,0)
 S TFIEN=$O(^DGCN(391.91,"APAT",MPIIT,+$$SITE^VASITE,0))
"RTN","MPIFVTQ",147,0)
 I $G(TFIEN)'="" S TFZN=^DGCN(391.91,TFIEN,0)
"RTN","MPIFVTQ",148,0)
 Q $P($G(TFZN),"^",3)
"RTN","MPIFVTQ",149,0)
 ;
"RTN","MPIFVTQ",150,0)
ADDR(MPITST11) ;Get Address information
"RTN","MPIFVTQ",151,0)
 ;
"RTN","MPIFVTQ",152,0)
 S MPISTR1=$P($G(MPITST11),"^") ;Street address line 1
"RTN","MPIFVTQ",153,0)
 S MPISTR2=$P($G(MPITST11),"^",2) ;Street address line 2
"RTN","MPIFVTQ",154,0)
 S MPISTR3=$P($G(MPITST11),"^",3) ;Street address line 3
"RTN","MPIFVTQ",155,0)
 S MPICITY=$P($G(MPITST11),"^",4) ;City
"RTN","MPIFVTQ",156,0)
 ;S MPICNTRY=$P($G(MPITST11),"^",10) ;Country
"RTN","MPIFVTQ",157,0)
 ;S MPICNTY=$P($G(MPITST11),"^",7) ;County
"RTN","MPIFVTQ",158,0)
 ;I MPICNTRY=""!(MPICNTRY=1) D
"RTN","MPIFVTQ",159,0)
 ;. ;Have USA address
"RTN","MPIFVTQ",160,0)
 ;. S MPISTPRV=$P($G(MPITST11),"^",5) ;State
"RTN","MPIFVTQ",161,0)
 ;. S MPIZIPPL=$P($G(MPITST11),"^",6) ;Zip code
"RTN","MPIFVTQ",162,0)
 ;I MPICNTRY'="",(MPICNTRY'=1) D
"RTN","MPIFVTQ",163,0)
 ;. ;Foreign Country
"RTN","MPIFVTQ",164,0)
 ;. S MPISTPRV=$P($G(MPITST11),"^",8) ;Province
"RTN","MPIFVTQ",165,0)
 ;. S MPIZIPPL=$P($G(MPITST11),"^",9) ;Postal code
"RTN","MPIFVTQ",166,0)
 Q
"VER")
8.0^22.0
"BLD",2890,6)
^52
**END**
**END**
