Released MHV*1*10 SEQ #6
Extracted from mail message
**KIDS**:MHV*1.0*10^

**INSTALL NAME**
MHV*1.0*10
"BLD",8059,0)
MHV*1.0*10^My HealtheVet^0^3130606^y
"BLD",8059,4,0)
^9.64PA^^
"BLD",8059,6.3)
50
"BLD",8059,"ABPKG")
n
"BLD",8059,"INI")
PRE^MHV1P10
"BLD",8059,"INIT")
POST^MHV1P10
"BLD",8059,"KRN",0)
^9.67PA^779.2^20
"BLD",8059,"KRN",.4,0)
.4
"BLD",8059,"KRN",.401,0)
.401
"BLD",8059,"KRN",.402,0)
.402
"BLD",8059,"KRN",.403,0)
.403
"BLD",8059,"KRN",.5,0)
.5
"BLD",8059,"KRN",.84,0)
.84
"BLD",8059,"KRN",3.6,0)
3.6
"BLD",8059,"KRN",3.8,0)
3.8
"BLD",8059,"KRN",9.2,0)
9.2
"BLD",8059,"KRN",9.8,0)
9.8
"BLD",8059,"KRN",9.8,"NM",0)
^9.68A^9^9
"BLD",8059,"KRN",9.8,"NM",1,0)
MHV1P10^^0^B68173465
"BLD",8059,"KRN",9.8,"NM",2,0)
MHV7B1C^^0^B3919656
"BLD",8059,"KRN",9.8,"NM",3,0)
MHV7B9A^^0^B32497735
"BLD",8059,"KRN",9.8,"NM",4,0)
MHV7R5^^0^B42337271
"BLD",8059,"KRN",9.8,"NM",5,0)
MHV7R6^^0^B19547499
"BLD",8059,"KRN",9.8,"NM",6,0)
MHVXPAT^^0^B62150323
"BLD",8059,"KRN",9.8,"NM",7,0)
MHVXTIU^^0^B15132002
"BLD",8059,"KRN",9.8,"NM",8,0)
MHVXDEMS^^0^B5949587
"BLD",8059,"KRN",9.8,"NM",9,0)
MHVXCLN^^0^B10544444
"BLD",8059,"KRN",9.8,"NM","B","MHV1P10",1)

"BLD",8059,"KRN",9.8,"NM","B","MHV7B1C",2)

"BLD",8059,"KRN",9.8,"NM","B","MHV7B9A",3)

"BLD",8059,"KRN",9.8,"NM","B","MHV7R5",4)

"BLD",8059,"KRN",9.8,"NM","B","MHV7R6",5)

"BLD",8059,"KRN",9.8,"NM","B","MHVXCLN",9)

"BLD",8059,"KRN",9.8,"NM","B","MHVXDEMS",8)

"BLD",8059,"KRN",9.8,"NM","B","MHVXPAT",6)

"BLD",8059,"KRN",9.8,"NM","B","MHVXTIU",7)

"BLD",8059,"KRN",19,0)
19
"BLD",8059,"KRN",19.1,0)
19.1
"BLD",8059,"KRN",101,0)
101
"BLD",8059,"KRN",409.61,0)
409.61
"BLD",8059,"KRN",771,0)
771
"BLD",8059,"KRN",779.2,0)
779.2
"BLD",8059,"KRN",870,0)
870
"BLD",8059,"KRN",8989.51,0)
8989.51
"BLD",8059,"KRN",8989.52,0)
8989.52
"BLD",8059,"KRN",8994,0)
8994
"BLD",8059,"KRN","B",.4,.4)

"BLD",8059,"KRN","B",.401,.401)

"BLD",8059,"KRN","B",.402,.402)

"BLD",8059,"KRN","B",.403,.403)

"BLD",8059,"KRN","B",.5,.5)

"BLD",8059,"KRN","B",.84,.84)

"BLD",8059,"KRN","B",3.6,3.6)

"BLD",8059,"KRN","B",3.8,3.8)

"BLD",8059,"KRN","B",9.2,9.2)

"BLD",8059,"KRN","B",9.8,9.8)

"BLD",8059,"KRN","B",19,19)

"BLD",8059,"KRN","B",19.1,19.1)

"BLD",8059,"KRN","B",101,101)

"BLD",8059,"KRN","B",409.61,409.61)

"BLD",8059,"KRN","B",771,771)

"BLD",8059,"KRN","B",779.2,779.2)

"BLD",8059,"KRN","B",870,870)

"BLD",8059,"KRN","B",8989.51,8989.51)

"BLD",8059,"KRN","B",8989.52,8989.52)

"BLD",8059,"KRN","B",8994,8994)

"BLD",8059,"QUES",0)
^9.62^^
"BLD",8059,"REQB",0)
^9.611^^
"INI")
PRE^MHV1P10
"INIT")
POST^MHV1P10
"MBREQ")
0
"PKG",594,-1)
1^1
"PKG",594,0)
My HealtheVet^MHV^Support for My HealtheVet web site.
"PKG",594,20,0)
^9.402P^^
"PKG",594,22,0)
^9.49I^1^1
"PKG",594,22,1,0)
1.0^3050823^3080526^50209
"PKG",594,22,1,"PAH",1,0)
10^3130606
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
9
"RTN","MHV1P10")
0^1^B68173465^n/a
"RTN","MHV1P10",1,0)
MHV1P10 ;KUM - My HealtheVet Install Utility Routine ; [1/15/13 15:01pm]
"RTN","MHV1P10",2,0)
 ;;1.0;My HealtheVet;**10**;Aug 23, 2005;Build 50
"RTN","MHV1P10",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV1P10",4,0)
 ;
"RTN","MHV1P10",5,0)
 ;  Integration Agreements:
"RTN","MHV1P10",6,0)
 ;        10141 : BMES^XPDUTL
"RTN","MHV1P10",7,0)
 ;              : MES^XPDUTL
"RTN","MHV1P10",8,0)
 ;        10018 : UPDATE^DIE
"RTN","MHV1P10",9,0)
 ;        10103 : $$FMTH^XLFDT
"RTN","MHV1P10",10,0)
 ;              : $$HTFM^XLFDT
"RTN","MHV1P10",11,0)
 ;              : $$NOW^XLFDT
"RTN","MHV1P10",12,0)
 ;
"RTN","MHV1P10",13,0)
ENV ;
"RTN","MHV1P10",14,0)
 Q
"RTN","MHV1P10",15,0)
 ;
"RTN","MHV1P10",16,0)
PRE ; Pre-init routine
"RTN","MHV1P10",17,0)
 ; Turn on MHV Application Logging, add a log entry for the start
"RTN","MHV1P10",18,0)
 ; of the patch install.
"RTN","MHV1P10",19,0)
 D LOGON
"RTN","MHV1P10",20,0)
 D LOG^MHVUL2(XPDNM,"PRE-INIT","S","TRACE")
"RTN","MHV1P10",21,0)
 Q
"RTN","MHV1P10",22,0)
 ;
"RTN","MHV1P10",23,0)
POST ; Post-init routine
"RTN","MHV1P10",24,0)
 N ERR
"RTN","MHV1P10",25,0)
 D LOG^MHVUL2(XPDNM,"POST-INIT BEGIN","S","TRACE")
"RTN","MHV1P10",26,0)
 ;
"RTN","MHV1P10",27,0)
 D QRYSMC
"RTN","MHV1P10",28,0)
 D QRYTIU
"RTN","MHV1P10",29,0)
 D RSPTIU
"RTN","MHV1P10",30,0)
 D PRLSMS
"RTN","MHV1P10",31,0)
 D PRLSME
"RTN","MHV1P10",32,0)
 D PRLSMSR
"RTN","MHV1P10",33,0)
 D PRLSMER
"RTN","MHV1P10",34,0)
 ;
"RTN","MHV1P10",35,0)
 D LOG^MHVUL2(XPDNM,"POST-INIT END","S","TRACE")
"RTN","MHV1P10",36,0)
 D LOGOFF
"RTN","MHV1P10",37,0)
 D RESET^MHVUL2
"RTN","MHV1P10",38,0)
 Q
"RTN","MHV1P10",39,0)
 ;
"RTN","MHV1P10",40,0)
LOGON ; Turn on MHV application logging
"RTN","MHV1P10",41,0)
 N UPDATE,SUCCESS
"RTN","MHV1P10",42,0)
 D BMES^XPDUTL("     Turning on MHV Application Logging")
"RTN","MHV1P10",43,0)
 S UPDATE("STATE")=1
"RTN","MHV1P10",44,0)
 S UPDATE("DELETE")=$$HTFM^XLFDT($H+60)
"RTN","MHV1P10",45,0)
 S UPDATE("LEVEL")="DEBUG"
"RTN","MHV1P10",46,0)
 D LOGSET^MHVUL1(.SUCCESS,.UPDATE)
"RTN","MHV1P10",47,0)
 Q
"RTN","MHV1P10",48,0)
 ;
"RTN","MHV1P10",49,0)
LOGOFF ; Turn off MHV application logging
"RTN","MHV1P10",50,0)
 N SUCCESS
"RTN","MHV1P10",51,0)
 D BMES^XPDUTL("     Turning off MHV Application Logging")
"RTN","MHV1P10",52,0)
 D LOGOFF^MHVUL1(.SUCCESS)
"RTN","MHV1P10",53,0)
 Q
"RTN","MHV1P10",54,0)
 ;
"RTN","MHV1P10",55,0)
QRYSMC ; Setup for Clinics By Stop Code query
"RTN","MHV1P10",56,0)
 ; Setup MHV REQUEST TYPE 
"RTN","MHV1P10",57,0)
 ;
"RTN","MHV1P10",58,0)
 D BMES^XPDUTL("    Creating Entry in MHV REQUEST TYPE File - SMCLINICS   ")
"RTN","MHV1P10",59,0)
 N FIELDS,ERR
"RTN","MHV1P10",60,0)
 S ERR=""
"RTN","MHV1P10",61,0)
 S FIELDS("REQUEST TYPE")="SMCLINICS"
"RTN","MHV1P10",62,0)
 S FIELDS("NUMBER")=41
"RTN","MHV1P10",63,0)
 S FIELDS("BLOCK")=0
"RTN","MHV1P10",64,0)
 S FIELDS("REALTIME")=1
"RTN","MHV1P10",65,0)
 S FIELDS("DATATYPE")="SMClinicsByStopCode"
"RTN","MHV1P10",66,0)
 S FIELDS("EXECUTE")="SPCLIN~MHVXCLN"
"RTN","MHV1P10",67,0)
 S FIELDS("BUILDER")="SMORG~MHV7B9A"
"RTN","MHV1P10",68,0)
 S FIELDS("DESCRIPTION",1)="QBP^Q11 query for Clinic information."
"RTN","MHV1P10",69,0)
 S FIELDS("DESCRIPTION",2)="Specify Clinic name or leave blank for all."
"RTN","MHV1P10",70,0)
 S FIELDS("DESCRIPTION",3)="Specify Credit Stop Code, not null, 719 is expected."
"RTN","MHV1P10",71,0)
 S FIELDS("DESCRIPTION",4)="Developed for Secure Messaging."
"RTN","MHV1P10",72,0)
 D LOG^MHVUL2("UPDATE REQUEST TYPE",.FIELDS,"M","DEBUG")
"RTN","MHV1P10",73,0)
 D UPDREQ^MHVU2(.FIELDS,1,.ERR)
"RTN","MHV1P10",74,0)
 I ERR'="" D
"RTN","MHV1P10",75,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P10",76,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P10",77,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P10",78,0)
 . Q
"RTN","MHV1P10",79,0)
 ;
"RTN","MHV1P10",80,0)
QRYTIU ; Setup for TIUTITLES Query
"RTN","MHV1P10",81,0)
 ;
"RTN","MHV1P10",82,0)
  D BMES^XPDUTL("    Creating Entry in MHV REQUEST TYPE File - TIUTITLES    ")
"RTN","MHV1P10",83,0)
 N FIELDS,ERR
"RTN","MHV1P10",84,0)
 S ERR=""
"RTN","MHV1P10",85,0)
 S FIELDS("REQUEST TYPE")="TIUTITLES"
"RTN","MHV1P10",86,0)
 S FIELDS("NUMBER")=42
"RTN","MHV1P10",87,0)
 S FIELDS("BLOCK")=0
"RTN","MHV1P10",88,0)
 S FIELDS("REALTIME")=1
"RTN","MHV1P10",89,0)
 S FIELDS("DATATYPE")="TIUTitlesByDocumentClass"
"RTN","MHV1P10",90,0)
 S FIELDS("EXECUTE")="EXTRACT~MHVXTIU"
"RTN","MHV1P10",91,0)
 S FIELDS("BUILDER")="MHV7B1C"
"RTN","MHV1P10",92,0)
 S FIELDS("DESCRIPTION",1)="QBP^Q13 query for TIU Titles information."
"RTN","MHV1P10",93,0)
 S FIELDS("DESCRIPTION",2)="Specify Document Class Name, SECURE MESSAGING DOCUMENTS is expected."
"RTN","MHV1P10",94,0)
 S FIELDS("DESCRIPTION",3)="Developed for Secure Messaging."
"RTN","MHV1P10",95,0)
 D LOG^MHVUL2("UPDATE REQUEST TYPE",.FIELDS,"M","DEBUG")
"RTN","MHV1P10",96,0)
 D UPDREQ^MHVU2(.FIELDS,1,.ERR)
"RTN","MHV1P10",97,0)
 I ERR'="" D
"RTN","MHV1P10",98,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P10",99,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P10",100,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P10",101,0)
 . Q
"RTN","MHV1P10",102,0)
 ;
"RTN","MHV1P10",103,0)
RSPTIU ; Set up RESPONSE MAP FOR TIUTITLES
"RTN","MHV1P10",104,0)
 D BMES^XPDUTL("    Creating Entry in MHV RESPONSE MAP - MHVSM QBP-Q13 Subscriber    ")
"RTN","MHV1P10",105,0)
 N FLDS,ERR
"RTN","MHV1P10",106,0)
 K FLDS
"RTN","MHV1P10",107,0)
 S ERR=""
"RTN","MHV1P10",108,0)
 S FLDS("SUBSCRIBER")="MHVSM QBP-Q13 Subscriber"
"RTN","MHV1P10",109,0)
 S FLDS("PROTOCOL")="MHVSM RTB-K13 Event Driver"
"RTN","MHV1P10",110,0)
 S FLDS("BUILDER")="RTBK13~MHV7B1"
"RTN","MHV1P10",111,0)
 S FLDS("SEGMENT")="RDT"
"RTN","MHV1P10",112,0)
 D LOG^MHVUL2("UPDATE RESPONSE MAP",.FLDS,"M","DEBUG")
"RTN","MHV1P10",113,0)
 D UPDMAP^MHVU2(.FLDS,1,.ERR)
"RTN","MHV1P10",114,0)
 I ERR'="" D
"RTN","MHV1P10",115,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P10",116,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P10",117,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P10",118,0)
 . Q
"RTN","MHV1P10",119,0)
 Q
"RTN","MHV1P10",120,0)
 ;
"RTN","MHV1P10",121,0)
PRLSMS ; Setup for PROTOCOLs
"RTN","MHV1P10",122,0)
 D BMES^XPDUTL("    Creating Entry in PROTOCOL - MHVSM QBP-Q13 Subscriber    ")
"RTN","MHV1P10",123,0)
 N NAME,IEN,FIELDS,ERR
"RTN","MHV1P10",124,0)
 S ERR=""
"RTN","MHV1P10",125,0)
 S NAME="MHVSM QBP-Q13 Subscriber"
"RTN","MHV1P10",126,0)
 S IEN=$O(^ORD(101,"B",NAME,0))
"RTN","MHV1P10",127,0)
 I IEN Q
"RTN","MHV1P10",128,0)
 I 'IEN S IEN="+1"
"RTN","MHV1P10",129,0)
 S IEN=IEN_","
"RTN","MHV1P10",130,0)
 S FIELDS(101,IEN,.01)="MHVSM QBP-Q13 Subscriber"
"RTN","MHV1P10",131,0)
 S FIELDS(101,IEN,44)="MHVSM QBP-Q13 Subscriber"
"RTN","MHV1P10",132,0)
 S FIELDS(101,IEN,4)="subscriber"
"RTN","MHV1P10",133,0)
 S FIELDS(101,IEN,99)=$$FMTH^XLFDT($$NOW^XLFDT())
"RTN","MHV1P10",134,0)
 S FIELDS(101,IEN,770.4)="K13"
"RTN","MHV1P10",135,0)
 S FIELDS(101,IEN,770.11)="RTB"
"RTN","MHV1P10",136,0)
 S FIELDS(101,IEN,773.1)="YES"
"RTN","MHV1P10",137,0)
 S FIELDS(101,IEN,773.3)="NO"
"RTN","MHV1P10",138,0)
 S FIELDS(101,IEN,770.2)="MHV VISTA"
"RTN","MHV1P10",139,0)
 S FIELDS(101,IEN,771)="D QBPQ13^MHV7R6"
"RTN","MHV1P10",140,0)
 S FIELDS(101,IEN,773.2)="YES"
"RTN","MHV1P10",141,0)
 ;S FIELDS(101,IEN,770.95)="2.4"
"RTN","MHV1P10",142,0)
 D UPDATE^DIE("E","FIELDS","","ERR")
"RTN","MHV1P10",143,0)
 I $D(ERR("DIERR")) D 
"RTN","MHV1P10",144,0)
 . S ERR=$G(ERR("DIERR",1,"TEXT",1))
"RTN","MHV1P10",145,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P10",146,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P10",147,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P10",148,0)
 . Q
"RTN","MHV1P10",149,0)
 Q
"RTN","MHV1P10",150,0)
PRLSME ; Setup for PROTOCOLs
"RTN","MHV1P10",151,0)
 D BMES^XPDUTL("    Creating Entry in PROTOCOL - MHVSM QBP-Q13 Event Driver    ")
"RTN","MHV1P10",152,0)
 N NAME,IEN,FIELDS,ERR
"RTN","MHV1P10",153,0)
 S ERR=""
"RTN","MHV1P10",154,0)
 S NAME="MHVSM QBP-Q13 Event Driver"
"RTN","MHV1P10",155,0)
 S IEN=$O(^ORD(101,"B",NAME,0))
"RTN","MHV1P10",156,0)
 I IEN Q
"RTN","MHV1P10",157,0)
 I 'IEN S IEN="+1"
"RTN","MHV1P10",158,0)
 S IEN=IEN_","
"RTN","MHV1P10",159,0)
 S FIELDS(101,IEN,.01)="MHVSM QBP-Q13 Event Driver"
"RTN","MHV1P10",160,0)
 S FIELDS(101,IEN,44)="MHVSM QBP-Q13 Event Driver"
"RTN","MHV1P10",161,0)
 S FIELDS(101,IEN,4)="event driver"
"RTN","MHV1P10",162,0)
 S FIELDS(101,IEN,99)=$$FMTH^XLFDT($$NOW^XLFDT())
"RTN","MHV1P10",163,0)
 S FIELDS(101,IEN,770.4)="Q13"
"RTN","MHV1P10",164,0)
 S FIELDS(101,IEN,770.1)="MHV SM"
"RTN","MHV1P10",165,0)
 S FIELDS(101,IEN,770.3)="QBP"
"RTN","MHV1P10",166,0)
 S FIELDS(101,IEN,770.5)="QBP_Q13"
"RTN","MHV1P10",167,0)
 S FIELDS(101,IEN,770.95)="2.4"
"RTN","MHV1P10",168,0)
 S FIELDS(101.0775,"+2,"_IEN,.01)="MHVSM QBP-Q13 Subscriber"
"RTN","MHV1P10",169,0)
 D UPDATE^DIE("E","FIELDS","","ERR")
"RTN","MHV1P10",170,0)
 I $D(ERR("DIERR")) D 
"RTN","MHV1P10",171,0)
 . S ERR=$G(ERR("DIERR",1,"TEXT",1))
"RTN","MHV1P10",172,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P10",173,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P10",174,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P10",175,0)
 . Q
"RTN","MHV1P10",176,0)
 Q
"RTN","MHV1P10",177,0)
PRLSMSR ; Setup for PROTOCOLs
"RTN","MHV1P10",178,0)
 D BMES^XPDUTL("    Creating Entry in PROTOCOL - MHVSM RTB-K13 Subscriber    ")
"RTN","MHV1P10",179,0)
 N NAME,IEN,FIELDS,ERR
"RTN","MHV1P10",180,0)
 S ERR=""
"RTN","MHV1P10",181,0)
 S NAME="MHVSM RTB-K13 Subscriber"
"RTN","MHV1P10",182,0)
 S IEN=$O(^ORD(101,"B",NAME,0))
"RTN","MHV1P10",183,0)
 I IEN Q
"RTN","MHV1P10",184,0)
 I 'IEN S IEN="+1"
"RTN","MHV1P10",185,0)
 S IEN=IEN_","
"RTN","MHV1P10",186,0)
 S FIELDS(101,IEN,.01)="MHVSM RTB-K13 Subscriber"
"RTN","MHV1P10",187,0)
 S FIELDS(101,IEN,44)="MHVSM RTB-K13 Subscriber"
"RTN","MHV1P10",188,0)
 S FIELDS(101,IEN,4)="subscriber"
"RTN","MHV1P10",189,0)
 S FIELDS(101,IEN,99)=$$FMTH^XLFDT($$NOW^XLFDT())
"RTN","MHV1P10",190,0)
 S FIELDS(101,IEN,770.4)="K13"
"RTN","MHV1P10",191,0)
 S FIELDS(101,IEN,770.11)="RTB"
"RTN","MHV1P10",192,0)
 S FIELDS(101,IEN,773.1)="YES"
"RTN","MHV1P10",193,0)
 S FIELDS(101,IEN,773.3)="NO"
"RTN","MHV1P10",194,0)
 S FIELDS(101,IEN,770.2)="MHV SM"
"RTN","MHV1P10",195,0)
 S FIELDS(101,IEN,770.7)="MHVVA"
"RTN","MHV1P10",196,0)
 S FIELDS(101,IEN,773.2)="YES"
"RTN","MHV1P10",197,0)
 D UPDATE^DIE("E","FIELDS","","ERR")
"RTN","MHV1P10",198,0)
 I $D(ERR("DIERR")) D 
"RTN","MHV1P10",199,0)
 . S ERR=$G(ERR("DIERR",1,"TEXT",1))
"RTN","MHV1P10",200,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P10",201,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P10",202,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P10",203,0)
 . Q
"RTN","MHV1P10",204,0)
 Q
"RTN","MHV1P10",205,0)
PRLSMER ; Setup for PROTOCOLs
"RTN","MHV1P10",206,0)
 D BMES^XPDUTL("    Creating Entry in PROTOCOL - MHVSM RTB-K13 Event Driver    ")
"RTN","MHV1P10",207,0)
 N NAME,IEN,FIELDS,ERR
"RTN","MHV1P10",208,0)
 S ERR=""
"RTN","MHV1P10",209,0)
 S NAME="MHVSM RTB-K13 Event Driver"
"RTN","MHV1P10",210,0)
 S IEN=$O(^ORD(101,"B",NAME,0))
"RTN","MHV1P10",211,0)
 I IEN Q
"RTN","MHV1P10",212,0)
 I 'IEN S IEN="+1"
"RTN","MHV1P10",213,0)
 S IEN=IEN_","
"RTN","MHV1P10",214,0)
 S FIELDS(101,IEN,.01)="MHVSM RTB-K13 Event Driver"
"RTN","MHV1P10",215,0)
 S FIELDS(101,IEN,44)="MHVSM RTB-K13 Event Driver"
"RTN","MHV1P10",216,0)
 S FIELDS(101,IEN,4)="event driver"
"RTN","MHV1P10",217,0)
 S FIELDS(101,IEN,99)=$$FMTH^XLFDT($$NOW^XLFDT())
"RTN","MHV1P10",218,0)
 S FIELDS(101,IEN,770.4)="K13"
"RTN","MHV1P10",219,0)
 S FIELDS(101,IEN,770.1)="MHV VISTA"
"RTN","MHV1P10",220,0)
 S FIELDS(101,IEN,770.3)="RTB"
"RTN","MHV1P10",221,0)
 S FIELDS(101,IEN,770.5)="RTB_K13"
"RTN","MHV1P10",222,0)
 S FIELDS(101,IEN,770.8)="AL"
"RTN","MHV1P10",223,0)
 S FIELDS(101,IEN,770.9)="NE"
"RTN","MHV1P10",224,0)
 S FIELDS(101,IEN,770.95)="2.4"
"RTN","MHV1P10",225,0)
 S FIELDS(101.0775,"+2,"_IEN,.01)="MHVSM RTB-K13 Subscriber"
"RTN","MHV1P10",226,0)
 D UPDATE^DIE("E","FIELDS","","ERR")
"RTN","MHV1P10",227,0)
 I $D(ERR("DIERR")) D 
"RTN","MHV1P10",228,0)
 . S ERR=$G(ERR("DIERR",1,"TEXT",1))
"RTN","MHV1P10",229,0)
 . D LOG^MHVUL2("UPDATE FAILED",ERR,"S","ERROR")
"RTN","MHV1P10",230,0)
 . D BMES^XPDUTL("     *** An Error occurred during installation.")
"RTN","MHV1P10",231,0)
 . D MES^XPDUTL("     Please log a remedy ticket.")
"RTN","MHV1P10",232,0)
 . Q
"RTN","MHV1P10",233,0)
 Q
"RTN","MHV7B1C")
0^2^B3919656^n/a
"RTN","MHV7B1C",1,0)
MHV7B1C ;KUM - HL7 message builder RTB^K13 Titles ; 1/26/13 3:06pm
"RTN","MHV7B1C",2,0)
 ;;1.0;My HealtheVet;**10**;Aug 23, 2005;Build 50
"RTN","MHV7B1C",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7B1C",4,0)
 ;
"RTN","MHV7B1C",5,0)
 Q
"RTN","MHV7B1C",6,0)
 ;
"RTN","MHV7B1C",7,0)
RDF(MSGROOT,CNT,LEN,HL) ;  Build RDF segment for Titles data
"RTN","MHV7B1C",8,0)
 ;
"RTN","MHV7B1C",9,0)
 ;  Input:
"RTN","MHV7B1C",10,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B1C",11,0)
 ;       CNT - Current message line counter
"RTN","MHV7B1C",12,0)
 ;       LEN - Current message length
"RTN","MHV7B1C",13,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B1C",14,0)
 ;
"RTN","MHV7B1C",15,0)
 ;  Output:
"RTN","MHV7B1C",16,0)
 ;           - Populated message array
"RTN","MHV7B1C",17,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B1C",18,0)
 ;
"RTN","MHV7B1C",19,0)
 N RDF
"RTN","MHV7B1C",20,0)
 S RDF(0)="RDF"
"RTN","MHV7B1C",21,0)
 S RDF(1)=4
"RTN","MHV7B1C",22,0)
 S RDF(2,1,1)="IEN",RDF(2,1,2)="NM",RDF(2,1,3)=30
"RTN","MHV7B1C",23,0)
 S RDF(2,2,1)="SEQNO",RDF(2,2,2)="NM",RDF(2,2,3)=6
"RTN","MHV7B1C",24,0)
 S RDF(2,3,1)="Title Name",RDF(2,3,2)="ST",RDF(2,3,3)=60
"RTN","MHV7B1C",25,0)
 S RDF(2,4,1)="Print Title Name",RDF(2,4,2)="ST",RDF(2,4,3)=60
"RTN","MHV7B1C",26,0)
 ;
"RTN","MHV7B1C",27,0)
 S CNT=CNT+1
"RTN","MHV7B1C",28,0)
 S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.RDF,.HL)
"RTN","MHV7B1C",29,0)
 S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B1C",30,0)
 Q
"RTN","MHV7B1C",31,0)
 ;
"RTN","MHV7B1C",32,0)
RDT(MSGROOT,DATAROOT,CNT,LEN,HL) ;  Build RDT segments for Titles data
"RTN","MHV7B1C",33,0)
 ;
"RTN","MHV7B1C",34,0)
 ; Walks data in DATAROOT to populate MSGROOT with RDT segments
"RTN","MHV7B1C",35,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B1C",36,0)
 ;
"RTN","MHV7B1C",37,0)
 ;  Integration Agreements:
"RTN","MHV7B1C",38,0)
 ;        10103 : FMTHL7^XLFDT
"RTN","MHV7B1C",39,0)
 ;
"RTN","MHV7B1C",40,0)
 ;  Input:
"RTN","MHV7B1C",41,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B1C",42,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B1C",43,0)
 ;       CNT - Current message line counter
"RTN","MHV7B1C",44,0)
 ;       LEN - Current message length
"RTN","MHV7B1C",45,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B1C",46,0)
 ;
"RTN","MHV7B1C",47,0)
 ;  Output:
"RTN","MHV7B1C",48,0)
 ;           - Populated message array
"RTN","MHV7B1C",49,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B1C",50,0)
 ;
"RTN","MHV7B1C",51,0)
 ; POPULATE SEQUENCE NUMBER
"RTN","MHV7B1C",52,0)
 N I,APP,RDT
"RTN","MHV7B1C",53,0)
 D LOG^MHVUL2("MHV7B1C","BEGIN RDT","S","TRACE")
"RTN","MHV7B1C",54,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B1C",55,0)
 . S APP=@DATAROOT@(I)
"RTN","MHV7B1C",56,0)
 . S RDT(0)="RDT"
"RTN","MHV7B1C",57,0)
 . S RDT(1)=$P(APP,"^")                         ;IEN
"RTN","MHV7B1C",58,0)
 . S RDT(2)=$$ESCAPE^MHV7U($P(APP,"^",2),.HL)   ;Title Sequence 
"RTN","MHV7B1C",59,0)
 . S RDT(3)=$$ESCAPE^MHV7U($P(APP,"^",3),.HL)   ;Title Name
"RTN","MHV7B1C",60,0)
 . S RDT(4)=$$ESCAPE^MHV7U($P(APP,"^",4),.HL)   ;Print Title Name
"RTN","MHV7B1C",61,0)
 . S CNT=CNT+1
"RTN","MHV7B1C",62,0)
 . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.RDT,.HL)
"RTN","MHV7B1C",63,0)
 . S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B1C",64,0)
 . Q
"RTN","MHV7B1C",65,0)
 D LOG^MHVUL2("MHV7B1C","END RDT","S","TRACE")
"RTN","MHV7B1C",66,0)
 Q
"RTN","MHV7B1C",67,0)
 ;
"RTN","MHV7B9A")
0^3^B32497735^B23577236
"RTN","MHV7B9A",1,0)
MHV7B9A ;WAS/DLF/KUM - HL7 message builder secure messaging ; 9/25/08 4:08pm
"RTN","MHV7B9A",2,0)
 ;;1.0;My HealtheVet;**6,10**;Aug 23, 2005;Build 50
"RTN","MHV7B9A",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7B9A",4,0)
 ;
"RTN","MHV7B9A",5,0)
 Q
"RTN","MHV7B9A",6,0)
 ;
"RTN","MHV7B9A",7,0)
PTREL(MSGROOT,DATAROOT,CNT,LEN,HL)      ;Build ORG, STF, and AIP segments
"RTN","MHV7B9A",8,0)
 D ORG(MSGROOT,DATAROOT,.CNT,.LEN,.HL)
"RTN","MHV7B9A",9,0)
 S DATAROOT=$P(DATAROOT,",",1,3)
"RTN","MHV7B9A",10,0)
 S DATAROOT=$TR(DATAROOT,")","")_","_"""PROVIDERS"""_")"
"RTN","MHV7B9A",11,0)
 D STF(MSGROOT,DATAROOT,.CNT,.LEN,.HL)
"RTN","MHV7B9A",12,0)
 D AIP(MSGROOT,DATAROOT,.CNT,.LEN,.HL)
"RTN","MHV7B9A",13,0)
 Q
"RTN","MHV7B9A",14,0)
PID(MSGROOT,DATAROOT,CNT,LEN,HL) ;Build PID segments for user data
"RTN","MHV7B9A",15,0)
 ;
"RTN","MHV7B9A",16,0)
 ; Walks data in DATAROOT to populate MSGROOT with PID segments
"RTN","MHV7B9A",17,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B9A",18,0)
 ;
"RTN","MHV7B9A",19,0)
 ;  Integration Agreements:
"RTN","MHV7B9A",20,0)
 ;        10103 : FMTHL7^XLFDT
"RTN","MHV7B9A",21,0)
 ;
"RTN","MHV7B9A",22,0)
 ;  Input:
"RTN","MHV7B9A",23,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B9A",24,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B9A",25,0)
 ;       CNT - Current message line counter
"RTN","MHV7B9A",26,0)
 ;       LEN - Current message length
"RTN","MHV7B9A",27,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B9A",28,0)
 ;
"RTN","MHV7B9A",29,0)
 ;  Output:
"RTN","MHV7B9A",30,0)
 ;           - Populated message array
"RTN","MHV7B9A",31,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B9A",32,0)
 ;
"RTN","MHV7B9A",33,0)
 N I,USR,PID,NMARR,PNAME
"RTN","MHV7B9A",34,0)
 D LOG^MHVUL2("MHV7B9A","BEGIN PID","S","TRACE")
"RTN","MHV7B9A",35,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B9A",36,0)
 . S USR=@DATAROOT@(I)
"RTN","MHV7B9A",37,0)
 . S PID(0)="PID"
"RTN","MHV7B9A",38,0)
 . ; IEN+ICN+SSN
"RTN","MHV7B9A",39,0)
 . S PID(3,1,1)=$P(USR,"^")
"RTN","MHV7B9A",40,0)
 . S PID(3,2,1)=$P(USR,"^",4)
"RTN","MHV7B9A",41,0)
 . S PID(3,3,1)=$P(USR,"^",5)
"RTN","MHV7B9A",42,0)
 . S PNAME=$P(USR,"^",3)
"RTN","MHV7B9A",43,0)
 . D FMTNAME^MHV7BU(PNAME,.NMARR,.HL,"XPN")
"RTN","MHV7B9A",44,0)
 . S PID(5,1,1)=NMARR(1)
"RTN","MHV7B9A",45,0)
 . S PID(5,1,2)=NMARR(2)
"RTN","MHV7B9A",46,0)
 . S PID(5,1,3)=NMARR(3)  ;Name in HL7 Format
"RTN","MHV7B9A",47,0)
 . D LOG^MHVUL2("MHV7B9A",PNAME,"S","TRACE")
"RTN","MHV7B9A",48,0)
 . S CNT=CNT+1
"RTN","MHV7B9A",49,0)
 . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.PID,.HL)
"RTN","MHV7B9A",50,0)
 . S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B9A",51,0)
 . Q
"RTN","MHV7B9A",52,0)
 D LOG^MHVUL2("MHV7B9A","END PID","S","TRACE")
"RTN","MHV7B9A",53,0)
 Q
"RTN","MHV7B9A",54,0)
STF(MSGROOT,DATAROOT,CNT,LEN,HL) ;Build STF segments for provider data
"RTN","MHV7B9A",55,0)
 ;
"RTN","MHV7B9A",56,0)
 ; Walks data in DATAROOT to populate MSGROOT with STF segments
"RTN","MHV7B9A",57,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B9A",58,0)
 ;
"RTN","MHV7B9A",59,0)
 ;  Integration Agreements:
"RTN","MHV7B9A",60,0)
 ;        10103 : FMTHL7^XLFDT
"RTN","MHV7B9A",61,0)
 ;
"RTN","MHV7B9A",62,0)
 ;  Input:
"RTN","MHV7B9A",63,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B9A",64,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B9A",65,0)
 ;       CNT - Current message line counter
"RTN","MHV7B9A",66,0)
 ;       LEN - Current message length
"RTN","MHV7B9A",67,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B9A",68,0)
 ;
"RTN","MHV7B9A",69,0)
 ;  Output:
"RTN","MHV7B9A",70,0)
 ;           - Populated message array
"RTN","MHV7B9A",71,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B9A",72,0)
 ;
"RTN","MHV7B9A",73,0)
 N I,USR,STF,NMARR,PNAME
"RTN","MHV7B9A",74,0)
 D LOG^MHVUL2("MHV7B9A","BEGIN STF","S","TRACE")
"RTN","MHV7B9A",75,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B9A",76,0)
 . S USR=@DATAROOT@(I)
"RTN","MHV7B9A",77,0)
 . S STF(0)="STF"
"RTN","MHV7B9A",78,0)
 . S STF(2)=$P(USR,"^",1)                       ;IEN
"RTN","MHV7B9A",79,0)
 . S PNAME=$P(USR,"^",2)                       ;Provider name
"RTN","MHV7B9A",80,0)
 . D FMTNAME^MHV7BU(PNAME,.NMARR,.HL,"XPN")
"RTN","MHV7B9A",81,0)
 . S STF(3,1,1)=NMARR(1)
"RTN","MHV7B9A",82,0)
 . S STF(3,1,2)=NMARR(2)
"RTN","MHV7B9A",83,0)
 . S STF(3,1,3)=NMARR(3)  ;Name in HL7 Format
"RTN","MHV7B9A",84,0)
 . S STF(18)=$P(USR,"^",3)                      ;Staff type
"RTN","MHV7B9A",85,0)
 . S STF(8)=$P(USR,"^",8)                       ;Section/Department
"RTN","MHV7B9A",86,0)
 . S STF(10)=$P(USR,"^",7)                      ;Office Phone
"RTN","MHV7B9A",87,0)
 . S CNT=CNT+1
"RTN","MHV7B9A",88,0)
 . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.STF,.HL)
"RTN","MHV7B9A",89,0)
 . S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B9A",90,0)
 . Q
"RTN","MHV7B9A",91,0)
 D LOG^MHVUL2("MHV7B9A","END STF","S","TRACE")
"RTN","MHV7B9A",92,0)
 Q
"RTN","MHV7B9A",93,0)
AIP(MSGROOT,DATAROOT,CNT,LEN,HL)  ;Build AIP segments for team
"RTN","MHV7B9A",94,0)
 ;
"RTN","MHV7B9A",95,0)
 ; Walks data in DATAROOT to populate MSGROOT with AIP segments
"RTN","MHV7B9A",96,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B9A",97,0)
 ;
"RTN","MHV7B9A",98,0)
 ;  Integration Agreements:
"RTN","MHV7B9A",99,0)
 ;        10103 : FMTHL7^XLFDT
"RTN","MHV7B9A",100,0)
 ;
"RTN","MHV7B9A",101,0)
 ;  Input:
"RTN","MHV7B9A",102,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B9A",103,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B9A",104,0)
 ;       CNT - Current message line counter
"RTN","MHV7B9A",105,0)
 ;       LEN - Current message length
"RTN","MHV7B9A",106,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B9A",107,0)
 ;
"RTN","MHV7B9A",108,0)
 ;  Output:
"RTN","MHV7B9A",109,0)
 ;           - Populated message array
"RTN","MHV7B9A",110,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B9A",111,0)
 ;
"RTN","MHV7B9A",112,0)
 N I,USR,AIP
"RTN","MHV7B9A",113,0)
 S DATAROOT=$P(DATAROOT,",",1,3)
"RTN","MHV7B9A",114,0)
 S DATAROOT=$TR(DATAROOT,")","")_","_"""TEAMS"""_")"
"RTN","MHV7B9A",115,0)
 D LOG^MHVUL2("MHV7B9A","BEGIN AIP","S","TRACE")
"RTN","MHV7B9A",116,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B9A",117,0)
 . S USR=@DATAROOT@(I)
"RTN","MHV7B9A",118,0)
 . S AIP(0)="AIP"
"RTN","MHV7B9A",119,0)
 . S AIP(3)=$P(USR,"^",1)                                ;IEN
"RTN","MHV7B9A",120,0)
 . S AIP(5)=$$ESCAPE^MHV7U($P(USR,"^",2),.HL)            ;TEAM NAME
"RTN","MHV7B9A",121,0)
 . S CNT=CNT+1
"RTN","MHV7B9A",122,0)
 . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.AIP,.HL)
"RTN","MHV7B9A",123,0)
 . S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B9A",124,0)
 . Q
"RTN","MHV7B9A",125,0)
 D LOG^MHVUL2("MHV7B9A","END AIP","S","TRACE")
"RTN","MHV7B9A",126,0)
 Q
"RTN","MHV7B9A",127,0)
ORG(MSGROOT,DATAROOT,CNT,LEN,HL) ;Build ORG segments for clinics
"RTN","MHV7B9A",128,0)
 ;
"RTN","MHV7B9A",129,0)
 ; Walks data in DATAROOT to populate MSGROOT with ORG segments
"RTN","MHV7B9A",130,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B9A",131,0)
 ;
"RTN","MHV7B9A",132,0)
 ;  Integration Agreements:
"RTN","MHV7B9A",133,0)
 ;        10103 : FMTHL7^XLFDT
"RTN","MHV7B9A",134,0)
 ;
"RTN","MHV7B9A",135,0)
 ;  Input:
"RTN","MHV7B9A",136,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B9A",137,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B9A",138,0)
 ;       CNT - Current message line counter
"RTN","MHV7B9A",139,0)
 ;       LEN - Current message length
"RTN","MHV7B9A",140,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B9A",141,0)
 ;
"RTN","MHV7B9A",142,0)
 ;  Output:
"RTN","MHV7B9A",143,0)
 ;           - Populated message array
"RTN","MHV7B9A",144,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B9A",145,0)
 ;
"RTN","MHV7B9A",146,0)
 N I,USR,ORG
"RTN","MHV7B9A",147,0)
 D LOG^MHVUL2("MHV7B9A","BEGIN ORG","S","TRACE")
"RTN","MHV7B9A",148,0)
 S DATAROOT=$P(DATAROOT,",",1,3)
"RTN","MHV7B9A",149,0)
 S DATAROOT=$TR(DATAROOT,")","")_","_"""CLINICS"""_")"
"RTN","MHV7B9A",150,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B9A",151,0)
 . S USR=@DATAROOT@(I)
"RTN","MHV7B9A",152,0)
 . S ORG(0)="ORG"
"RTN","MHV7B9A",153,0)
 . S ORG(2,1,1)=$P(USR,"^",1)
"RTN","MHV7B9A",154,0)
 . S ORG(2,1,2)=$$ESCAPE^MHV7U($P(USR,"^",2),.HL)
"RTN","MHV7B9A",155,0)
 . S CNT=CNT+1
"RTN","MHV7B9A",156,0)
 . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.ORG,.HL)
"RTN","MHV7B9A",157,0)
 . S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B9A",158,0)
 . Q
"RTN","MHV7B9A",159,0)
 D LOG^MHVUL2("MHV7B9A","END ORG","S","TRACE")
"RTN","MHV7B9A",160,0)
 Q
"RTN","MHV7B9A",161,0)
SMORG(MSGROOT,DATAROOT,CNT,LEN,HL) ;Build ORG segments for clinics
"RTN","MHV7B9A",162,0)
 ;
"RTN","MHV7B9A",163,0)
 ; Walks data in DATAROOT to populate MSGROOT with ORG segments
"RTN","MHV7B9A",164,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B9A",165,0)
 ;
"RTN","MHV7B9A",166,0)
 ;  Input:
"RTN","MHV7B9A",167,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B9A",168,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B9A",169,0)
 ;       CNT - Current message line counter
"RTN","MHV7B9A",170,0)
 ;       LEN - Current message length
"RTN","MHV7B9A",171,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B9A",172,0)
 ;
"RTN","MHV7B9A",173,0)
 ;  Output:
"RTN","MHV7B9A",174,0)
 ;           - Populated message array
"RTN","MHV7B9A",175,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B9A",176,0)
 ;
"RTN","MHV7B9A",177,0)
 N I,USR,ORG
"RTN","MHV7B9A",178,0)
 D LOG^MHVUL2("MHV7B9A","BEGIN ORG","S","TRACE")
"RTN","MHV7B9A",179,0)
 S DATAROOT=$P(DATAROOT,",",1,3)
"RTN","MHV7B9A",180,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B9A",181,0)
 . S USR=@DATAROOT@(I)
"RTN","MHV7B9A",182,0)
 . S ORG(0)="ORG"
"RTN","MHV7B9A",183,0)
 . S ORG(2,1,1)=$P(USR,"^",1)
"RTN","MHV7B9A",184,0)
 . S ORG(2,1,2)=$$ESCAPE^MHV7U($P(USR,"^",2),.HL)
"RTN","MHV7B9A",185,0)
 . I $P($G(USR),"^",3)'="" S ORG(3,1,1)=$$ESCAPE^MHV7U($P(USR,"^",3),.HL)
"RTN","MHV7B9A",186,0)
 . I $P($G(USR),"^",4)'="" S ORG(3,1,2)=$$ESCAPE^MHV7U($P(USR,"^",4),.HL)
"RTN","MHV7B9A",187,0)
 . I $P($G(USR),"^",5)'="" S ORG(3,1,5)=$$ESCAPE^MHV7U($P(USR,"^",5),.HL)
"RTN","MHV7B9A",188,0)
 . S CNT=CNT+1
"RTN","MHV7B9A",189,0)
 . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.ORG,.HL)
"RTN","MHV7B9A",190,0)
 . S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B9A",191,0)
 . Q
"RTN","MHV7B9A",192,0)
 D LOG^MHVUL2("MHV7B9A","END ORG","S","TRACE")
"RTN","MHV7B9A",193,0)
 Q
"RTN","MHV7B9A",194,0)
PRA(MSGROOT,DATAROOT,CNT,LEN,HL)    ;Build PRA segments for providers
"RTN","MHV7B9A",195,0)
 ;
"RTN","MHV7B9A",196,0)
 ; Walks data in DATAROOT to populate MSGROOT with PRA segments
"RTN","MHV7B9A",197,0)
 ; sequentially numbered starting at CNT
"RTN","MHV7B9A",198,0)
 ;
"RTN","MHV7B9A",199,0)
 ;  Integration Agreements:
"RTN","MHV7B9A",200,0)
 ;        10103 : FMTHL7^XLFDT
"RTN","MHV7B9A",201,0)
 ;
"RTN","MHV7B9A",202,0)
 ;  Input:
"RTN","MHV7B9A",203,0)
 ;   MSGROOT - Root of array holding the message
"RTN","MHV7B9A",204,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHV7B9A",205,0)
 ;       CNT - Current message line counter
"RTN","MHV7B9A",206,0)
 ;       LEN - Current message length
"RTN","MHV7B9A",207,0)
 ;        HL - HL7 package array variable
"RTN","MHV7B9A",208,0)
 ;
"RTN","MHV7B9A",209,0)
 ;  Output:
"RTN","MHV7B9A",210,0)
 ;           - Populated message array
"RTN","MHV7B9A",211,0)
 ;           - Updated LEN and CNT
"RTN","MHV7B9A",212,0)
 ;
"RTN","MHV7B9A",213,0)
 N I,USR,PRA
"RTN","MHV7B9A",214,0)
 D LOG^MHVUL2("MHV7B9A","BEGIN PRA","S","TRACE")
"RTN","MHV7B9A",215,0)
 S DATAROOT=$P(DATAROOT,",",1,3)
"RTN","MHV7B9A",216,0)
 S DATAROOT=$TR(DATAROOT,")","")_","_"""PROVIDERS"""_")"
"RTN","MHV7B9A",217,0)
 F I=1:1 Q:'$D(@DATAROOT@(I))  D
"RTN","MHV7B9A",218,0)
 . S USR=@DATAROOT@(I)
"RTN","MHV7B9A",219,0)
 . S PRA(0)="PRA"
"RTN","MHV7B9A",220,0)
 . S PRA(2,1,1)=$P(USR,"^",1)   ;IEN
"RTN","MHV7B9A",221,0)
 . S PRA(2,1,2)=$P(USR,"^",2)   ;NAME
"RTN","MHV7B9A",222,0)
 . S CNT=CNT+1
"RTN","MHV7B9A",223,0)
 . S @MSGROOT@(CNT)=$$BLDSEG^MHV7U(.PRA,.HL)
"RTN","MHV7B9A",224,0)
 . S LEN=LEN+$L(@MSGROOT@(CNT))
"RTN","MHV7B9A",225,0)
 . Q
"RTN","MHV7B9A",226,0)
 D LOG^MHVUL2("MHV7B9A","END PRA","S","TRACE")
"RTN","MHV7B9A",227,0)
 Q
"RTN","MHV7R5")
0^4^B42337271^B32891553
"RTN","MHV7R5",1,0)
MHV7R5 ;WAS/DLF/MJK/KUM - HL7 RECEIVER FOR ADMIN QUERIES ; 6/7/10 10:34am
"RTN","MHV7R5",2,0)
 ;;1.0;My HealtheVet;**6,10**;Aug 23, 2005;Build 50
"RTN","MHV7R5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7R5",4,0)
 ;
"RTN","MHV7R5",5,0)
 ;  Integration Agreements:
"RTN","MHV7R5",6,0)
 ;        10104 : $$UP^XLFSTR
"RTN","MHV7R5",7,0)
 Q
"RTN","MHV7R5",8,0)
 ;
"RTN","MHV7R5",9,0)
QBPQ11 ;Process QBP^Q11 messages from the MHVSM QBP-Q11 Subscriber protocol
"RTN","MHV7R5",10,0)
 ;
"RTN","MHV7R5",11,0)
 ; This routine and subroutines assume that all VistA HL7 environment
"RTN","MHV7R5",12,0)
 ; variables are properly initialized and will produce a fatal error
"RTN","MHV7R5",13,0)
 ; if they are missing.
"RTN","MHV7R5",14,0)
 ;
"RTN","MHV7R5",15,0)
 ;  The message will be checked to see if it is a valid query.
"RTN","MHV7R5",16,0)
 ; If not a negative acknowledgement will be sent.  If the query is an
"RTN","MHV7R5",17,0)
 ; immediate mode or synchronous query, the realtime request manager
"RTN","MHV7R5",18,0)
 ; is called to handle the query.  This means the query will be
"RTN","MHV7R5",19,0)
 ; processed and a response generated immediately.
"RTN","MHV7R5",20,0)
 ; In the future deferred mode queries may be filed in a database for
"RTN","MHV7R5",21,0)
 ; later processing, or transmission.
"RTN","MHV7R5",22,0)
 ;
"RTN","MHV7R5",23,0)
 ;  Input:
"RTN","MHV7R5",24,0)
 ;          HL7 environment variables
"RTN","MHV7R5",25,0)
 ;
"RTN","MHV7R5",26,0)
 ; Output:
"RTN","MHV7R5",27,0)
 ;          Processed query or negative acknowledgement
"RTN","MHV7R5",28,0)
 ;          If handled real-time the query response is generated
"RTN","MHV7R5",29,0)
 ;
"RTN","MHV7R5",30,0)
 ;  Integration Agreements
"RTN","MHV7R5",31,0)
 ;
"RTN","MHV7R5",32,0)
 ;          10104 UP^XLFSTR
"RTN","MHV7R5",33,0)
 ;
"RTN","MHV7R5",34,0)
 N MSGROOT,QRY,XMT,ERR,RNAME
"RTN","MHV7R5",35,0)
 S (QRY,XMT,ERR)=""
"RTN","MHV7R5",36,0)
 ; Inbound query messages are small enough to be held in a local.
"RTN","MHV7R5",37,0)
 ; The following lines commented out support use of global and are
"RTN","MHV7R5",38,0)
 ; left in case use a global becomes necessary.
"RTN","MHV7R5",39,0)
 ;S MSGROOT="^TMP(""MHV7"",$J)"
"RTN","MHV7R5",40,0)
 ;K @MSGROOT
"RTN","MHV7R5",41,0)
 S MSGROOT="MHV7MSG"
"RTN","MHV7R5",42,0)
 N MHV7MSG
"RTN","MHV7R5",43,0)
 D LOADXMT^MHV7U(.XMT)         ;Load inbound message information
"RTN","MHV7R5",44,0)
 ;
"RTN","MHV7R5",45,0)
 S RNAME=XMT("MESSAGE TYPE")_"-"_XMT("EVENT TYPE")_" RECEIVER"
"RTN","MHV7R5",46,0)
 D LOG^MHVUL2(RNAME,"BEGIN","S","TRACE")
"RTN","MHV7R5",47,0)
 ;
"RTN","MHV7R5",48,0)
 D LOADMSG^MHV7U(MSGROOT)
"RTN","MHV7R5",49,0)
 D LOG^MHVUL2("LOAD",MSGROOT,"I","DEBUG")
"RTN","MHV7R5",50,0)
 ;
"RTN","MHV7R5",51,0)
 D PARSEMSG^MHV7U(MSGROOT,.HL)
"RTN","MHV7R5",52,0)
 D LOG^MHVUL2("PARSE",MSGROOT,"I","DEBUG")
"RTN","MHV7R5",53,0)
 ;
"RTN","MHV7R5",54,0)
 I '$$VALIDMSG(MSGROOT,.QRY,.XMT,.ERR) D  Q
"RTN","MHV7R5",55,0)
 . D LOG^MHVUL2("MSG CHECK","INVALID^"_ERR,"S","ERROR")
"RTN","MHV7R5",56,0)
 . D XMIT^MHV7T(.QRY,.XMT,ERR,"",.HL)
"RTN","MHV7R5",57,0)
 D LOG^MHVUL2("MSG CHECK","VALID","S","TRACE")
"RTN","MHV7R5",58,0)
 ;
"RTN","MHV7R5",59,0)
 ; Immediate Mode
"RTN","MHV7R5",60,0)
 ; Deferred mode queries are not supported at this time
"RTN","MHV7R5",61,0)
 D REALTIME^MHVRQI(.QRY,.XMT,.HL)
"RTN","MHV7R5",62,0)
 ;
"RTN","MHV7R5",63,0)
 D LOG^MHVUL2(RNAME,"END","S","TRACE")
"RTN","MHV7R5",64,0)
 D RESET^MHVUL2          ;Clean up TMP used by logging
"RTN","MHV7R5",65,0)
 ;K @MSGROOT
"RTN","MHV7R5",66,0)
 ;
"RTN","MHV7R5",67,0)
 Q
"RTN","MHV7R5",68,0)
 ;
"RTN","MHV7R5",69,0)
VALIDMSG(MSGROOT,QRY,XMT,ERR)   ;Validate message
"RTN","MHV7R5",70,0)
 ;
"RTN","MHV7R5",71,0)
 ;  Messages handled: QBP^Q11
"RTN","MHV7R5",72,0)
 ;
"RTN","MHV7R5",73,0)
 ;  QBP query messages must contain QPD and RCP segments
"RTN","MHV7R5",74,0)
 ;  Any additional segments are ignored
"RTN","MHV7R5",75,0)
 ;
"RTN","MHV7R5",76,0)
 ;  Input:
"RTN","MHV7R5",77,0)
 ;    MSGROOT - Root of array holding message
"RTN","MHV7R5",78,0)
 ;        XMT - Transmission parameters
"RTN","MHV7R5",79,0)
 ;
"RTN","MHV7R5",80,0)
 ; Output:
"RTN","MHV7R5",81,0)
 ;        QRY - Query Array
"RTN","MHV7R5",82,0)
 ;        XMT - Transmission parameters
"RTN","MHV7R5",83,0)
 ;        ERR - segment^sequence^field^code^ACK type^error text
"RTN","MHV7R5",84,0)
 ;
"RTN","MHV7R5",85,0)
 N MSH,PID,STF,QPD,RCP,REQFLDS,REQID,REQTYPE,FROMDT,TODT,PRI,QTAG,QNAME,MHVCSIE
"RTN","MHV7R5",86,0)
 N SEGTYPE,CNT,OCNT,RXNUM,QTY,UNIT,REQFLDS,CHKSEG
"RTN","MHV7R5",87,0)
 K QRY,ERR
"RTN","MHV7R5",88,0)
 S MHVCSIE=""
"RTN","MHV7R5",89,0)
 S ERR=""
"RTN","MHV7R5",90,0)
 ;
"RTN","MHV7R5",91,0)
 ; Set up basics for responding to message.
"RTN","MHV7R5",92,0)
 ;-----------------------------------------
"RTN","MHV7R5",93,0)
 S QRY("MID")=XMT("MID")        ;Message ID
"RTN","MHV7R5",94,0)
 S QRY("QPD")=""
"RTN","MHV7R5",95,0)
 ;
"RTN","MHV7R5",96,0)
 ; Validate message is a well-formed QBP query message.
"RTN","MHV7R5",97,0)
 ;-----------------------------------------------------------
"RTN","MHV7R5",98,0)
 ; Must have MSH first, followed by QPD,RCP in any order
"RTN","MHV7R5",99,0)
 ; PID and STF are optional.  All other segments are ignored.
"RTN","MHV7R5",100,0)
 ;
"RTN","MHV7R5",101,0)
 I $G(@MSGROOT@(1,0))="MSH" M MSH=@MSGROOT@(1)
"RTN","MHV7R5",102,0)
 E  S ERR="MSH^1^^100^AE^Missing MSH segment" Q 0
"RTN","MHV7R5",103,0)
 ;
"RTN","MHV7R5",104,0)
 S CNT=2,OCNT=0
"RTN","MHV7R5",105,0)
 F  Q:'$D(@MSGROOT@(CNT))  D  S CNT=CNT+1
"RTN","MHV7R5",106,0)
 . S SEGTYPE=$G(@MSGROOT@(CNT,0))
"RTN","MHV7R5",107,0)
 . I SEGTYPE="PID" M PID=@MSGROOT@(CNT),QRY("PID")=PID Q
"RTN","MHV7R5",108,0)
 . I SEGTYPE="STF" M STF=@MSGROOT@(CNT),QRY("STF")=STF Q
"RTN","MHV7R5",109,0)
 . I SEGTYPE="QPD" M QPD=@MSGROOT@(CNT),QRY("QPD")=QPD Q
"RTN","MHV7R5",110,0)
 . I SEGTYPE="RCP" M RCP=@MSGROOT@(CNT),QRY("RCP")=RCP Q
"RTN","MHV7R5",111,0)
 . Q
"RTN","MHV7R5",112,0)
 ;
"RTN","MHV7R5",113,0)
 I '$D(QPD) S ERR="QPD^1^^100^AE^Missing QPD segment" Q 0
"RTN","MHV7R5",114,0)
 ;
"RTN","MHV7R5",115,0)
 S QTAG=$G(QPD(1,1,2))               ;Query Tag
"RTN","MHV7R5",116,0)
 S REQID=$G(QPD(2))                  ;Request ID
"RTN","MHV7R5",117,0)
 S REQTYPE=$G(QPD(3,1,1))            ;Request Type
"RTN","MHV7R5",118,0)
 S PRI=$G(RCP(1))                    ;Query Priority
"RTN","MHV7R5",119,0)
 S QTY=$G(RCP(2,1,1))                ;Quantity Limited
"RTN","MHV7R5",120,0)
 S UNIT=$G(RCP(2,1,2))               ;Quantity units
"RTN","MHV7R5",121,0)
 S:REQTYPE="" REQTYPE=$G(QPD(3))     ;Request Type if no other params
"RTN","MHV7R5",122,0)
 ;
"RTN","MHV7R5",123,0)
 ; Validate required fields and query parameters
"RTN","MHV7R5",124,0)
 ;------------------------------------------------------
"RTN","MHV7R5",125,0)
 ;
"RTN","MHV7R5",126,0)
 ; Check for missing/invalid fields
"RTN","MHV7R5",127,0)
 ;
"RTN","MHV7R5",128,0)
 I '$D(QPD(1)) S ERR="QPD^1^1^101^AE^Missing Message Query Name" Q 0
"RTN","MHV7R5",129,0)
 M QNAME=QPD(1)  ;Message Query Name
"RTN","MHV7R5",130,0)
 ;
"RTN","MHV7R5",131,0)
 I QTAG="" S ERR="QPD^1^2^101^AE^Missing Query Tag" Q 0
"RTN","MHV7R5",132,0)
 I REQID="" S ERR="QPD^1^2^101^AE^Missing Request ID" Q 0
"RTN","MHV7R5",133,0)
 S (QRY("IEN"),QRY("LNAME"),QRY("FNAME"),QRY("DFN"))=""
"RTN","MHV7R5",134,0)
 S QRY("REQID")=REQID
"RTN","MHV7R5",135,0)
 ;
"RTN","MHV7R5",136,0)
 I REQTYPE="" S ERR="QPD^1^3^101^AE^Missing Request Type" Q 0
"RTN","MHV7R5",137,0)
 I '$$VALRTYPE^MHV7RU(REQTYPE,.QRY,.ERR) S ERR="QPD^1^3^"_ERR Q 0
"RTN","MHV7R5",138,0)
 ;
"RTN","MHV7R5",139,0)
 ; If we have a PID, validate it and populate query parameters
"RTN","MHV7R5",140,0)
 ; from the PID.
"RTN","MHV7R5",141,0)
 ;
"RTN","MHV7R5",142,0)
 I $D(PID) D VALIDPID
"RTN","MHV7R5",143,0)
 ;
"RTN","MHV7R5",144,0)
 ; If we have a STF, validate it and populate query parameters
"RTN","MHV7R5",145,0)
 ; from the STF.  
"RTN","MHV7R5",146,0)
 ;
"RTN","MHV7R5",147,0)
 I $D(STF) D VALIDSTF
"RTN","MHV7R5",148,0)
 ;
"RTN","MHV7R5",149,0)
 I ERR Q 0
"RTN","MHV7R5",150,0)
 ;
"RTN","MHV7R5",151,0)
 ; If no PID or STF segment sent, Populate parameters 1-3 with the
"RTN","MHV7R5",152,0)
 ; QPD segment data
"RTN","MHV7R5",153,0)
 ;
"RTN","MHV7R5",154,0)
 I '$D(PID),'$D(STF)  D
"RTN","MHV7R5",155,0)
 .S QRY("IEN")=$G(QPD(3,1,2))          ;ien
"RTN","MHV7R5",156,0)
 .S QRY("LNAME")=$$UP^XLFSTR($G(QPD(3,1,3)))        ;Last Name
"RTN","MHV7R5",157,0)
 .S QRY("FNAME")=$$UP^XLFSTR($G(QPD(3,1,4)))        ;First Name
"RTN","MHV7R5",158,0)
 ;Added for MHV*1.0*10 - Validations for SMClinicsByStopCode query Input parameters
"RTN","MHV7R5",159,0)
 I (REQTYPE="SMClinicsByStopCode")&($D(QPD))  D
"RTN","MHV7R5",160,0)
 . I $G(QRY("FNAME"))="" S ERR="QPD^1^6^101^AE^Clinic Secondary(Credit) Stop Code cannot be null" Q
"RTN","MHV7R5",161,0)
 . I ((+$G(QRY("FNAME"))<1)&(+$G(QRY("FNAME"))>999)) S ERR="QPD^1^6^102^AE^Clinic Secondary(Credit) Stop Code "_$G(QRY("FNAME"))_" should be a numeric value in the range 1 to 999." Q
"RTN","MHV7R5",162,0)
 . S MHVCSIE=$$SCIEN^MHVXCLN($G(QRY("FNAME")))
"RTN","MHV7R5",163,0)
 . I $G(MHVCSIE)="" S ERR="QPD^1^6^102^AE^Clinic Secondary(Credit) Stop Code "_$G(QRY("FNAME"))_" Unknown."
"RTN","MHV7R5",164,0)
 I ERR Q 0
"RTN","MHV7R5",165,0)
 ;
"RTN","MHV7R5",166,0)
 S FROMDT=$G(QPD(3,1,5))        ;From Date
"RTN","MHV7R5",167,0)
 S TODT=$G(QPD(3,1,6))          ;To Date
"RTN","MHV7R5",168,0)
 ;
"RTN","MHV7R5",169,0)
 ; Validate from and to date if present
"RTN","MHV7R5",170,0)
 ;
"RTN","MHV7R5",171,0)
 I FROMDT]""  D
"RTN","MHV7R5",172,0)
 .I '$$VALIDDT^MHV7RU(.FROMDT) S ERR="QPD^1^7^102^AE^Invalid From Date"
"RTN","MHV7R5",173,0)
 I TODT]""  D
"RTN","MHV7R5",174,0)
 .I '$$VALIDDT^MHV7RU(.TODT) S ERR="QPD^1^8^102^AE^Invalid To Date"
"RTN","MHV7R5",175,0)
 .I TODT'="",TODT<FROMDT  D
"RTN","MHV7R5",176,0)
 ..S ERR="QPD^1^6^102^AE^To Date precedes From Date"
"RTN","MHV7R5",177,0)
 S QRY("FROMDT")=FROMDT,QRY("TODT")=TODT
"RTN","MHV7R5",178,0)
 I ERR'="" Q 0
"RTN","MHV7R5",179,0)
 ;
"RTN","MHV7R5",180,0)
 I PRI="" S ERR="RCP^1^1^101^AE^Missing Query Priority" Q 0
"RTN","MHV7R5",181,0)
 I ",D,I,"'[(","_PRI_",") S ERR="RCP^1^1^102^AE^Invalid Query Priority" Q 0
"RTN","MHV7R5",182,0)
 S QRY("PRI")=PRI
"RTN","MHV7R5",183,0)
 Q:ERR'="" 0
"RTN","MHV7R5",184,0)
 ;
"RTN","MHV7R5",185,0)
 Q 1
"RTN","MHV7R5",186,0)
 ;
"RTN","MHV7R5",187,0)
VALIDPID ;
"RTN","MHV7R5",188,0)
 ;
"RTN","MHV7R5",189,0)
 ; If the IEN was sent, call the validation utility for
"RTN","MHV7R5",190,0)
 ; PID segments
"RTN","MHV7R5",191,0)
 ;
"RTN","MHV7R5",192,0)
 I $D(PID(3,1,1))  D
"RTN","MHV7R5",193,0)
 .S CHKSEG=$$VALIDPID^MHV7RUS(.PID,.QRY,.ERR)
"RTN","MHV7R5",194,0)
 .S QRY("IEN")=QRY("DFN")
"RTN","MHV7R5",195,0)
 ;
"RTN","MHV7R5",196,0)
 ; If no IEN, populate parameters for name
"RTN","MHV7R5",197,0)
 ;
"RTN","MHV7R5",198,0)
 I QRY("IEN")="",ERR=""  D
"RTN","MHV7R5",199,0)
 .S QRY("LNAME")=$$UP^XLFSTR(PID(5,1,1))
"RTN","MHV7R5",200,0)
 .S:$D(PID(5,1,2)) QRY("FNAME")=$$UP^XLFSTR(PID(5,1,2))
"RTN","MHV7R5",201,0)
 Q
"RTN","MHV7R5",202,0)
VALIDSTF        ;
"RTN","MHV7R5",203,0)
 ;
"RTN","MHV7R5",204,0)
 ; If the IEN was sent, call the validation utility for
"RTN","MHV7R5",205,0)
 ; STF segments
"RTN","MHV7R5",206,0)
 ;
"RTN","MHV7R5",207,0)
 I $D(STF(2))  D  Q
"RTN","MHV7R5",208,0)
 .S QRY("IEN")=$G(STF(2,1,1))
"RTN","MHV7R5",209,0)
 ;
"RTN","MHV7R5",210,0)
 ; If no IEN, populate parameters for name
"RTN","MHV7R5",211,0)
 ;
"RTN","MHV7R5",212,0)
 I $G(STF(3))]"" S QRY("LNAME")=$$UP^XLFSTR($TR(STF(3),"^",""))
"RTN","MHV7R5",213,0)
 I $G(STF(3,1,1))'="" S QRY("LNAME")=$$UP^XLFSTR(STF(3,1,1))
"RTN","MHV7R5",214,0)
 I $G(STF(3,1,2))'="" S QRY("FNAME")=$$UP^XLFSTR(STF(3,1,2))
"RTN","MHV7R5",215,0)
 Q
"RTN","MHV7R6")
0^5^B19547499^n/a
"RTN","MHV7R6",1,0)
MHV7R6 ;KUM - HL7 RECEIVER FOR TIU TITLES QUERY ; 1/5/13 10:34am
"RTN","MHV7R6",2,0)
 ;;1.0;My HealtheVet;**10**;Aug 23, 2005;Build 50
"RTN","MHV7R6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHV7R6",4,0)
 ;
"RTN","MHV7R6",5,0)
 ;  Integration Agreements:
"RTN","MHV7R6",6,0)
 ;        10104 : $$UP^XLFSTR
"RTN","MHV7R6",7,0)
 Q
"RTN","MHV7R6",8,0)
 ;
"RTN","MHV7R6",9,0)
QBPQ13 ;Process QBP^Q13 messages from the MHVSM QBP-Q13 Subscriber protocol
"RTN","MHV7R6",10,0)
 ;
"RTN","MHV7R6",11,0)
 ; This routine and subroutines assume that all VistA HL7 environment
"RTN","MHV7R6",12,0)
 ; variables are properly initialized and will produce a fatal error
"RTN","MHV7R6",13,0)
 ; if they are missing.
"RTN","MHV7R6",14,0)
 ;
"RTN","MHV7R6",15,0)
 ;  The message will be checked to see if it is a valid query.
"RTN","MHV7R6",16,0)
 ; If not a negative acknowledgement will be sent.  If the query is an
"RTN","MHV7R6",17,0)
 ; immediate mode or synchronous query, the realtime request manager
"RTN","MHV7R6",18,0)
 ; is called to handle the query.  This means the query will be
"RTN","MHV7R6",19,0)
 ; processed and a response generated immediately.
"RTN","MHV7R6",20,0)
 ; In the future deferred mode queries may be filed in a database for
"RTN","MHV7R6",21,0)
 ; later processing, or transmission.
"RTN","MHV7R6",22,0)
 ;
"RTN","MHV7R6",23,0)
 ;  Input:
"RTN","MHV7R6",24,0)
 ;          HL7 environment variables
"RTN","MHV7R6",25,0)
 ;
"RTN","MHV7R6",26,0)
 ; Output:
"RTN","MHV7R6",27,0)
 ;          Processed query or negative acknowledgement
"RTN","MHV7R6",28,0)
 ;          If handled real-time the query response is generated
"RTN","MHV7R6",29,0)
 ;
"RTN","MHV7R6",30,0)
 ;  Integration Agreements
"RTN","MHV7R6",31,0)
 ;
"RTN","MHV7R6",32,0)
 ;          10104 UP^XLFSTR
"RTN","MHV7R6",33,0)
 ;
"RTN","MHV7R6",34,0)
 N MSGROOT,QRY,XMT,ERR,RNAME
"RTN","MHV7R6",35,0)
 S (QRY,XMT,ERR)=""
"RTN","MHV7R6",36,0)
 ; Inbound query messages are small enough to be held in a local.
"RTN","MHV7R6",37,0)
 ; The following lines commented out support use of global and are
"RTN","MHV7R6",38,0)
 ; left in case use a global becomes necessary.
"RTN","MHV7R6",39,0)
 ;S MSGROOT="^TMP(""MHV7"",$J)"
"RTN","MHV7R6",40,0)
 ;K @MSGROOT
"RTN","MHV7R6",41,0)
 S MSGROOT="MHV7MSG"
"RTN","MHV7R6",42,0)
 N MHV7MSG
"RTN","MHV7R6",43,0)
 D LOADXMT^MHV7U(.XMT)         ;Load inbound message information
"RTN","MHV7R6",44,0)
 ;
"RTN","MHV7R6",45,0)
 S RNAME=XMT("MESSAGE TYPE")_"-"_XMT("EVENT TYPE")_" RECEIVER"
"RTN","MHV7R6",46,0)
 D LOG^MHVUL2(RNAME,"BEGIN","S","TRACE")
"RTN","MHV7R6",47,0)
 ;
"RTN","MHV7R6",48,0)
 D LOADMSG^MHV7U(MSGROOT)
"RTN","MHV7R6",49,0)
 D LOG^MHVUL2("LOAD",MSGROOT,"I","DEBUG")
"RTN","MHV7R6",50,0)
 ;
"RTN","MHV7R6",51,0)
 D PARSEMSG^MHV7U(MSGROOT,.HL)
"RTN","MHV7R6",52,0)
 D LOG^MHVUL2("PARSE",MSGROOT,"I","DEBUG")
"RTN","MHV7R6",53,0)
 ;
"RTN","MHV7R6",54,0)
 I '$$VALIDMSG(MSGROOT,.QRY,.XMT,.ERR) D  Q
"RTN","MHV7R6",55,0)
 . D LOG^MHVUL2("MSG CHECK","INVALID^"_ERR,"S","ERROR")
"RTN","MHV7R6",56,0)
 . D XMIT^MHV7T(.QRY,.XMT,ERR,"",.HL)
"RTN","MHV7R6",57,0)
 D LOG^MHVUL2("MSG CHECK","VALID","S","TRACE")
"RTN","MHV7R6",58,0)
 ;
"RTN","MHV7R6",59,0)
 ; Immediate Mode
"RTN","MHV7R6",60,0)
 ; Deferred mode queries are not supported at this time
"RTN","MHV7R6",61,0)
 D REALTIME^MHVRQI(.QRY,.XMT,.HL)
"RTN","MHV7R6",62,0)
 ;
"RTN","MHV7R6",63,0)
 D LOG^MHVUL2(RNAME,"END","S","TRACE")
"RTN","MHV7R6",64,0)
 D RESET^MHVUL2          ;Clean up TMP used by logging
"RTN","MHV7R6",65,0)
 ;K @MSGROOT
"RTN","MHV7R6",66,0)
 ;
"RTN","MHV7R6",67,0)
 Q
"RTN","MHV7R6",68,0)
 ;
"RTN","MHV7R6",69,0)
VALIDMSG(MSGROOT,QRY,XMT,ERR)   ;Validate message
"RTN","MHV7R6",70,0)
 ;
"RTN","MHV7R6",71,0)
 ;  Messages handled: QBP^Q13
"RTN","MHV7R6",72,0)
 ;
"RTN","MHV7R6",73,0)
 ;  QBP query messages must contain QPD and RCP segments
"RTN","MHV7R6",74,0)
 ;  Any additional segments are ignored
"RTN","MHV7R6",75,0)
 ;
"RTN","MHV7R6",76,0)
 ;  Input:
"RTN","MHV7R6",77,0)
 ;    MSGROOT - Root of array holding message
"RTN","MHV7R6",78,0)
 ;        XMT - Transmission parameters
"RTN","MHV7R6",79,0)
 ;
"RTN","MHV7R6",80,0)
 ; Output:
"RTN","MHV7R6",81,0)
 ;        QRY - Query Array
"RTN","MHV7R6",82,0)
 ;        XMT - Transmission parameters
"RTN","MHV7R6",83,0)
 ;        ERR - segment^sequence^field^code^ACK type^error text
"RTN","MHV7R6",84,0)
 ;
"RTN","MHV7R6",85,0)
 N MSH,PID,STF,QPD,RCP,REQFLDS,REQID,REQTYPE,FROMDT,TODT,PRI,QTAG,QNAME,MHVDCIEN
"RTN","MHV7R6",86,0)
 N SEGTYPE,CNT,OCNT,RXNUM,QTY,UNIT,REQFLDS,CHKSEG
"RTN","MHV7R6",87,0)
 K QRY,ERR
"RTN","MHV7R6",88,0)
 S MHVDCIEN=0
"RTN","MHV7R6",89,0)
 S ERR=""
"RTN","MHV7R6",90,0)
 ;
"RTN","MHV7R6",91,0)
 ; Set up basics for responding to message.
"RTN","MHV7R6",92,0)
 ;-----------------------------------------
"RTN","MHV7R6",93,0)
 S QRY("MID")=XMT("MID")        ;Message ID
"RTN","MHV7R6",94,0)
 S QRY("QPD")=""
"RTN","MHV7R6",95,0)
 ;
"RTN","MHV7R6",96,0)
 ; Validate message is a well-formed QBP query message.
"RTN","MHV7R6",97,0)
 ;-----------------------------------------------------------
"RTN","MHV7R6",98,0)
 ; Must have MSH first, followed by QPD,RCP in any order
"RTN","MHV7R6",99,0)
 ; PID and STF are optional.  All other segments are ignored.
"RTN","MHV7R6",100,0)
 ;
"RTN","MHV7R6",101,0)
 I $G(@MSGROOT@(1,0))="MSH" M MSH=@MSGROOT@(1)
"RTN","MHV7R6",102,0)
 E  S ERR="MSH^1^^100^AE^Missing MSH segment" Q 0
"RTN","MHV7R6",103,0)
 ;
"RTN","MHV7R6",104,0)
 S CNT=2,OCNT=0
"RTN","MHV7R6",105,0)
 F  Q:'$D(@MSGROOT@(CNT))  D  S CNT=CNT+1
"RTN","MHV7R6",106,0)
 . S SEGTYPE=$G(@MSGROOT@(CNT,0))
"RTN","MHV7R6",107,0)
 . I SEGTYPE="QPD" M QPD=@MSGROOT@(CNT),QRY("QPD")=QPD Q
"RTN","MHV7R6",108,0)
 . I SEGTYPE="RDF" M RDF=@MSGROOT@(CNT) Q
"RTN","MHV7R6",109,0)
 . Q
"RTN","MHV7R6",110,0)
 ;
"RTN","MHV7R6",111,0)
 I '$D(QPD) S ERR="QPD^1^^100^AE^Missing QPD segment" Q 0
"RTN","MHV7R6",112,0)
 ;
"RTN","MHV7R6",113,0)
 S QTAG=$G(QPD(1,1,2))               ;Query Tag
"RTN","MHV7R6",114,0)
 S REQID=$G(QPD(2))                  ;Request ID
"RTN","MHV7R6",115,0)
 S REQTYPE=$G(QPD(3,1,1))            ;Request Type
"RTN","MHV7R6",116,0)
 S:REQTYPE="" REQTYPE=$G(QPD(3))     ;Request Type if no other params
"RTN","MHV7R6",117,0)
 ;
"RTN","MHV7R6",118,0)
 ; Validate required fields and query parameters
"RTN","MHV7R6",119,0)
 ;------------------------------------------------------
"RTN","MHV7R6",120,0)
 ;
"RTN","MHV7R6",121,0)
 ; Check for missing/invalid fields
"RTN","MHV7R6",122,0)
 ;
"RTN","MHV7R6",123,0)
 I '$D(QPD(1)) S ERR="QPD^1^1^101^AE^Missing Message Query Name" Q 0
"RTN","MHV7R6",124,0)
 M QNAME=QPD(1)  ;Message Query Name
"RTN","MHV7R6",125,0)
 ;
"RTN","MHV7R6",126,0)
 I QTAG="" S ERR="QPD^1^2^101^AE^Missing Query Tag" Q 0
"RTN","MHV7R6",127,0)
 I REQID="" S ERR="QPD^1^2^101^AE^Missing Request ID" Q 0
"RTN","MHV7R6",128,0)
 S (QRY("DCLSNM"),QRY("DFN"))=""
"RTN","MHV7R6",129,0)
 S QRY("REQID")=REQID
"RTN","MHV7R6",130,0)
 ;
"RTN","MHV7R6",131,0)
 I REQTYPE="" S ERR="QPD^1^3^101^AE^Missing Request Type" Q 0
"RTN","MHV7R6",132,0)
 I '$$VALRTYPE^MHV7RU(REQTYPE,.QRY,.ERR) S ERR="QPD^1^3^"_ERR Q 0
"RTN","MHV7R6",133,0)
 ;
"RTN","MHV7R6",134,0)
 I ERR Q 0
"RTN","MHV7R6",135,0)
 ;
"RTN","MHV7R6",136,0)
 ; Populate parameters 1-3 with the QPD segment data
"RTN","MHV7R6",137,0)
 ;
"RTN","MHV7R6",138,0)
 S QRY("DCLSNM")=$G(QPD(3,1,3))        ;Document Class Name
"RTN","MHV7R6",139,0)
 I (REQTYPE="TIUTitlesByDocumentClass")&($D(QPD))  D
"RTN","MHV7R6",140,0)
 . I $G(QRY("DCLSNM"))="" S ERR="QPD^1^6^101^AE^Document Class Name cannot be null" Q
"RTN","MHV7R6",141,0)
 . S MHVDCIEN=$$DOCDEF^MHVXTIU($G(QRY("DCLSNM")))
"RTN","MHV7R6",142,0)
 . I $G(MHVDCIEN)=0 S ERR="QPD^1^6^102^AE^Document Class Name "_$G(QRY("DCLSNM"))_" Unknown."
"RTN","MHV7R6",143,0)
 I ERR Q 0
"RTN","MHV7R6",144,0)
 ;
"RTN","MHV7R6",145,0)
 I ERR'="" Q 0
"RTN","MHV7R6",146,0)
 ;
"RTN","MHV7R6",147,0)
 Q 1
"RTN","MHV7R6",148,0)
 ;
"RTN","MHVXCLN")
0^9^B10544444^B3158368
"RTN","MHVXCLN",1,0)
MHVXCLN ;WAS/DLF/KUM - Clinic extract ; 9/25/08 4:10pm
"RTN","MHVXCLN",2,0)
 ;;1.0;My HealtheVet;**6,10**;Aug 23, 2005;Build 50
"RTN","MHVXCLN",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHVXCLN",4,0)
 ;
"RTN","MHVXCLN",5,0)
 Q
"RTN","MHVXCLN",6,0)
 ;
"RTN","MHVXCLN",7,0)
 ;  Integration Agreements:
"RTN","MHVXCLN",8,0)
 ;
"RTN","MHVXCLN",9,0)
 ;               10103 : $$DT^XLFDT
"RTN","MHVXCLN",10,0)
 ;                       $$NOW^XLFDT
"RTN","MHVXCLN",11,0)
 ;               10004 : $$GET1^DIQ
"RTN","MHVXCLN",12,0)
 ;               10040 : ^SC("B"
"RTN","MHVXCLN",13,0)
 ;                4482 : ^SC("ACST"
"RTN","MHVXCLN",14,0)
 ;                  93 : Fields IEN and Stop Code Number in Hospital Location File (#44)
"RTN","MHVXCLN",15,0)
 ;                 557 : ^DIC(40.7       
"RTN","MHVXCLN",16,0)
 ;
"RTN","MHVXCLN",17,0)
CLIN(QRY,ERR,DATAROOT)               ; return all Clinics
"RTN","MHVXCLN",18,0)
 ;
"RTN","MHVXCLN",19,0)
 ; return provider data in DATAROOT
"RTN","MHVXCLN",20,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXCLN",21,0)
 ;
"RTN","MHVXCLN",22,0)
 ;  Input:
"RTN","MHVXCLN",23,0)
 ;       QRY - Query array
"RTN","MHVXCLN",24,0)
 ;
"RTN","MHVXCLN",25,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXCLN",26,0)
 ;
"RTN","MHVXCLN",27,0)
 ;  Output:
"RTN","MHVXCLN",28,0)
 ;  DATAROOT - Populated data array
"RTN","MHVXCLN",29,0)
 ;             includes number of hits and timestamp
"RTN","MHVXCLN",30,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXCLN",31,0)
 ;
"RTN","MHVXCLN",32,0)
 N EXTIME,HIT,KEYNM,LOGND,CLINAR,CLIEN,CLNM,X
"RTN","MHVXCLN",33,0)
 ;
"RTN","MHVXCLN",34,0)
 S LOGND=$T(+0)_"^CLINIC"  ; node for logging
"RTN","MHVXCLN",35,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXCLN",36,0)
 ; needed vars.
"RTN","MHVXCLN",37,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXCLN",38,0)
 ;
"RTN","MHVXCLN",39,0)
 K @DATAROOT  ; clean up residue
"RTN","MHVXCLN",40,0)
 S HIT=0
"RTN","MHVXCLN",41,0)
 S CLNM=$O(^SC("B",QRY("LNAME")),-1)
"RTN","MHVXCLN",42,0)
 I QRY("LNAME")="" S CLNM=99
"RTN","MHVXCLN",43,0)
 S DATAROOT=$E(DATAROOT,1,$L(DATAROOT)-1)_","_"""CLINICS"""_")"
"RTN","MHVXCLN",44,0)
 F  S CLNM=$O(^SC("B",CLNM)) Q:CLNM=""  D
"RTN","MHVXCLN",45,0)
 .S CLIEN=0
"RTN","MHVXCLN",46,0)
 .S CLIEN=$O(^SC("B",CLNM,CLIEN))
"RTN","MHVXCLN",47,0)
 .I $E(CLNM,1,$L(QRY("LNAME")))=QRY("LNAME")  D
"RTN","MHVXCLN",48,0)
 ..S HIT=HIT+1
"RTN","MHVXCLN",49,0)
 ..S @DATAROOT@(HIT)=CLIEN_U_CLNM
"RTN","MHVXCLN",50,0)
 ;
"RTN","MHVXCLN",51,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXCLN",52,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXCLN",53,0)
 ;
"RTN","MHVXCLN",54,0)
 Q
"RTN","MHVXCLN",55,0)
SPCLIN(QRY,ERR,DATAROOT)               ; return all Clinics with Stop Code 719
"RTN","MHVXCLN",56,0)
 ;
"RTN","MHVXCLN",57,0)
 ; return provider data in DATAROOT
"RTN","MHVXCLN",58,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXCLN",59,0)
 ;
"RTN","MHVXCLN",60,0)
 ;  Input:
"RTN","MHVXCLN",61,0)
 ;       QRY - Query array
"RTN","MHVXCLN",62,0)
 ;
"RTN","MHVXCLN",63,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXCLN",64,0)
 ;
"RTN","MHVXCLN",65,0)
 ;  Output:
"RTN","MHVXCLN",66,0)
 ;  DATAROOT - Populated data array
"RTN","MHVXCLN",67,0)
 ;             includes number of hits and timestamp
"RTN","MHVXCLN",68,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXCLN",69,0)
 ;
"RTN","MHVXCLN",70,0)
 N EXTIME,HIT,KEYNM,LOGND,CLINAR,MHVCLIEN,MHVCLNM,MHVCSIEN,MHVCLPSC,MHVPSCIE,MHVPSCNU,X
"RTN","MHVXCLN",71,0)
 ;
"RTN","MHVXCLN",72,0)
 S LOGND=$T(+0)_"^CLINIC"  ; node for logging
"RTN","MHVXCLN",73,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXCLN",74,0)
 ; needed vars.
"RTN","MHVXCLN",75,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXCLN",76,0)
 ;
"RTN","MHVXCLN",77,0)
 K @DATAROOT  ; clean up residue
"RTN","MHVXCLN",78,0)
 S HIT=0
"RTN","MHVXCLN",79,0)
 ;I $G(QRY("FNAME"))=""!$G(QRY("FNAME"))=0 S ERR="1^Stop Code cannot be null." Q
"RTN","MHVXCLN",80,0)
 S MHVCSIEN=$$SCIEN($G(QRY("FNAME")))
"RTN","MHVXCLN",81,0)
 ;I $G(MHVCSIEN)=""!$G(MHVCSIEN)=0 S ERR="2^Unknown Stop Code:"_$G(QRY("FNAME")) Q
"RTN","MHVXCLN",82,0)
 S MHVCLIEN=0
"RTN","MHVXCLN",83,0)
 F  S MHVCLIEN=$O(^SC("ACST",MHVCSIEN,MHVCLIEN)) Q:'MHVCLIEN  D
"RTN","MHVXCLN",84,0)
 .S MHVCLNM=$$GET1^DIQ(44,+MHVCLIEN,.01,"I")
"RTN","MHVXCLN",85,0)
 .I ($G(MHVCLNM)'="")&($$UP^XLFSTR($E(MHVCLNM,1,$L($G(QRY("LNAME")))))=$G(QRY("LNAME"))!($G(QRY("LNAME"))=""))  D
"RTN","MHVXCLN",86,0)
 ..S HIT=HIT+1
"RTN","MHVXCLN",87,0)
 ..S MHVCLPSC=$$GET1^DIQ(44,+MHVCLIEN,8,"E")
"RTN","MHVXCLN",88,0)
 ..S MHVPSCIE=$$GET1^DIQ(44,+MHVCLIEN,8,"I")
"RTN","MHVXCLN",89,0)
 ..S MHVPSCNU=$$GET1^DIQ(40.7,+MHVPSCIE,1,"I")
"RTN","MHVXCLN",90,0)
 ..S @DATAROOT@(HIT)=MHVCLIEN_U_MHVCLNM_U_MHVPSCIE_U_MHVCLPSC_U_MHVPSCNU
"RTN","MHVXCLN",91,0)
 ;
"RTN","MHVXCLN",92,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXCLN",93,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXCLN",94,0)
 ;
"RTN","MHVXCLN",95,0)
 Q
"RTN","MHVXCLN",96,0)
XITLOG(ND,HT)     ; exit log
"RTN","MHVXCLN",97,0)
 D LOG^MHVUL2(ND,HT_" HITS","S","TRACE")
"RTN","MHVXCLN",98,0)
 D LOG^MHVUL2(ND,"END","S","TRACE") Q
"RTN","MHVXCLN",99,0)
 Q
"RTN","MHVXCLN",100,0)
SCIEN(SCN) ;Get stop code IEN
"RTN","MHVXCLN",101,0)
 N SCIEN
"RTN","MHVXCLN",102,0)
 I SCN="" Q ""
"RTN","MHVXCLN",103,0)
 S SCIEN=$O(^DIC(40.7,"C",SCN,0))
"RTN","MHVXCLN",104,0)
 I $G(SCIEN)="" Q ""
"RTN","MHVXCLN",105,0)
 Q SCIEN
"RTN","MHVXCLN",106,0)
 ;
"RTN","MHVXDEMS")
0^8^B5949587^B6047250
"RTN","MHVXDEMS",1,0)
MHVXDEMS ;WAS/GPM/KUM - Secure Messaging Demographics extract ; 12/1/05 6:58pm [3/23/08 8:17pm]
"RTN","MHVXDEMS",2,0)
 ;;1.0;My HealtheVet;**5,9,10**;Aug 23, 2005;Build 50
"RTN","MHVXDEMS",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHVXDEMS",4,0)
 ;
"RTN","MHVXDEMS",5,0)
 Q
"RTN","MHVXDEMS",6,0)
 ;
"RTN","MHVXDEMS",7,0)
EXTRACT(QRY,ERR,DATAROOT) ; Entry point to extract demographics data
"RTN","MHVXDEMS",8,0)
 ; Retrieves requested demographics data and returns it in DATAROOT
"RTN","MHVXDEMS",9,0)
 ;
"RTN","MHVXDEMS",10,0)
 ;  Integration Agreements:
"RTN","MHVXDEMS",11,0)
 ;                       10061 : DEM^VADPT
"RTN","MHVXDEMS",12,0)
 ;                             : ADD^VADPT
"RTN","MHVXDEMS",13,0)
 ;                             : ELIG^VADPT
"RTN","MHVXDEMS",14,0)
 ;                             : OPD^VADPT
"RTN","MHVXDEMS",15,0)
 ;                             : OAD^VADPT
"RTN","MHVXDEMS",16,0)
 ;                             : KVAR^VADPT
"RTN","MHVXDEMS",17,0)
 ;                        1252 : OUTPTPR^SDUTL3
"RTN","MHVXDEMS",18,0)
 ;                        1916 : PRPT^SCAPMC
"RTN","MHVXDEMS",19,0)
 ;                       10035 : 2,.1041
"RTN","MHVXDEMS",20,0)
 ;                        4459 : 2,.133
"RTN","MHVXDEMS",21,0)
 ;
"RTN","MHVXDEMS",22,0)
 ;  Input:
"RTN","MHVXDEMS",23,0)
 ;       QRY - Query array
"RTN","MHVXDEMS",24,0)
 ;          QRY(DFN) - (required) Pointer to PATIENT (#2) file
"RTN","MHVXDEMS",25,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXDEMS",26,0)
 ;
"RTN","MHVXDEMS",27,0)
 ;  Output:
"RTN","MHVXDEMS",28,0)
 ;  DATAROOT - Populated data array
"RTN","MHVXDEMS",29,0)
 ;       ERR - Errors during extraction
"RTN","MHVXDEMS",30,0)
 ;
"RTN","MHVXDEMS",31,0)
 N DFN,X,MHVPCP,MHVERR,EXTIME,VADM,VAPA,VAPD,VAOA
"RTN","MHVXDEMS",32,0)
 D LOG^MHVUL2("MHVXDEMS","BEGIN","S","TRACE")
"RTN","MHVXDEMS",33,0)
 S ERR=0
"RTN","MHVXDEMS",34,0)
 S EXTIME=$$NOW^XLFDT
"RTN","MHVXDEMS",35,0)
 K @DATAROOT
"RTN","MHVXDEMS",36,0)
 S DFN=$G(QRY("DFN"))
"RTN","MHVXDEMS",37,0)
 ;
"RTN","MHVXDEMS",38,0)
 K VADM
"RTN","MHVXDEMS",39,0)
 D DEM^VADPT
"RTN","MHVXDEMS",40,0)
 S @DATAROOT@("DOB")=$P($G(VADM(3)),U)
"RTN","MHVXDEMS",41,0)
 S @DATAROOT@("SEX")=$P($G(VADM(5)),U)
"RTN","MHVXDEMS",42,0)
 S @DATAROOT@("MARITAL-STATUS")=$P($G(VADM(10)),U,2)
"RTN","MHVXDEMS",43,0)
 S @DATAROOT@("RELIGION")=$P($G(VADM(9)),U,2)
"RTN","MHVXDEMS",44,0)
 S @DATAROOT@("DOD")=$P($G(VADM(6)),U)
"RTN","MHVXDEMS",45,0)
 ;
"RTN","MHVXDEMS",46,0)
 K VAPA
"RTN","MHVXDEMS",47,0)
 D ADD^VADPT
"RTN","MHVXDEMS",48,0)
 S @DATAROOT@("ADD1")=$G(VAPA(1))
"RTN","MHVXDEMS",49,0)
 S @DATAROOT@("ADD2")=$G(VAPA(2))
"RTN","MHVXDEMS",50,0)
 S @DATAROOT@("ADD3")=$G(VAPA(3))
"RTN","MHVXDEMS",51,0)
 S @DATAROOT@("CITY")=$G(VAPA(4))
"RTN","MHVXDEMS",52,0)
 S @DATAROOT@("STATE")=$P($G(VAPA(5)),U,2)
"RTN","MHVXDEMS",53,0)
 S @DATAROOT@("ZIP")=$P($G(VAPA(11)),U)
"RTN","MHVXDEMS",54,0)
 S @DATAROOT@("COUNTY")=$P($G(VAPA(7)),U,2)
"RTN","MHVXDEMS",55,0)
 S @DATAROOT@("PHONE")=$G(VAPA(8))
"RTN","MHVXDEMS",56,0)
 ;
"RTN","MHVXDEMS",57,0)
 K VAPD
"RTN","MHVXDEMS",58,0)
 D OPD^VADPT
"RTN","MHVXDEMS",59,0)
 S @DATAROOT@("BIRTH-CITY")=$G(VAPD(1))
"RTN","MHVXDEMS",60,0)
 S @DATAROOT@("BIRTH-STATE")=$P($G(VAPD(2)),U,2)
"RTN","MHVXDEMS",61,0)
 ;
"RTN","MHVXDEMS",62,0)
 K VAOA
"RTN","MHVXDEMS",63,0)
 S VAOA("A")=5
"RTN","MHVXDEMS",64,0)
 D OAD^VADPT
"RTN","MHVXDEMS",65,0)
 S @DATAROOT@("BUS-PHONE")=$G(VAOA(8))
"RTN","MHVXDEMS",66,0)
 ;
"RTN","MHVXDEMS",67,0)
 S @DATAROOT@("E-MAIL")=$$GET1^DIQ(2,DFN_",",.133)
"RTN","MHVXDEMS",68,0)
 S @DATAROOT@("ATTENDING-PHYSICIAN")=$$GET1^DIQ(2,DFN_",",.1041)
"RTN","MHVXDEMS",69,0)
 ;
"RTN","MHVXDEMS",70,0)
 S X=""
"RTN","MHVXDEMS",71,0)
 ;I $$PRPT^SCAPMC(DFN,,,,,,.MHVPCP,.MHVERR) I MHVPCP'="" S X=$P($G(@MHVPCP@(1)),U,2) K @MHVPCP
"RTN","MHVXDEMS",72,0)
 S X=$$OUTPTPR^SDUTL3(DFN) ;MHV*1*9 always return Primary Care Provider
"RTN","MHVXDEMS",73,0)
 ;I $G(MHVERR)'="" K @MHVERR
"RTN","MHVXDEMS",74,0)
 S @DATAROOT@("PRIMARY-CARE-PHYSICIAN")=$P(X,"^",2)
"RTN","MHVXDEMS",75,0)
 ;
"RTN","MHVXDEMS",76,0)
 D KVAR^VADPT
"RTN","MHVXDEMS",77,0)
 S @DATAROOT=1_"^"_EXTIME
"RTN","MHVXDEMS",78,0)
 D LOG^MHVUL2("MHVXDEMS","END","S","TRACE")
"RTN","MHVXDEMS",79,0)
 Q
"RTN","MHVXDEMS",80,0)
 ;
"RTN","MHVXPAT")
0^6^B62150323^B62269575
"RTN","MHVXPAT",1,0)
MHVXPAT ;WAS/DLF - Patient extract ; 9/25/08 4:11pm
"RTN","MHVXPAT",2,0)
 ;;1.0;My HealtheVet;**6,9,10**;Aug 23, 2005;Build 50
"RTN","MHVXPAT",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHVXPAT",4,0)
 ;
"RTN","MHVXPAT",5,0)
 Q
"RTN","MHVXPAT",6,0)
 ;
"RTN","MHVXPAT",7,0)
 ;  Integration Agreements:
"RTN","MHVXPAT",8,0)
 ;
"RTN","MHVXPAT",9,0)
 ;               10060 : New Person file #200
"RTN","MHVXPAT",10,0)
 ;                1252 : OUTPTPR^SDUTL3
"RTN","MHVXPAT",11,0)
 ;                1916 : PTPR^SCAPMC
"RTN","MHVXPAT",12,0)
 ;                       PRPT^SCAPMC
"RTN","MHVXPAT",13,0)
 ;                3859 : GETAPPT^SDAMA201
"RTN","MHVXPAT",14,0)
 ;                5250 : PTCL^SCAPMC
"RTN","MHVXPAT",15,0)
 ;                2692 : TEAMPTS^ORQPTQ1
"RTN","MHVXPAT",16,0)
 ;                       TEAMSPT^ORQPTQ1
"RTN","MHVXPAT",17,0)
 ;               10103 : $$DT^XLFDT
"RTN","MHVXPAT",18,0)
 ;                       $$NOW^XLFDT
"RTN","MHVXPAT",19,0)
 ;                       $$HL7TFM$XLFDT
"RTN","MHVXPAT",20,0)
 ;                       
"RTN","MHVXPAT",21,0)
PATCL(QRY,ERR,DATAROOT)             ;Patients for clinic
"RTN","MHVXPAT",22,0)
 ;
"RTN","MHVXPAT",23,0)
 ; Primary Care Management Module interface
"RTN","MHVXPAT",24,0)
 ; return patient list in dataroot
"RTN","MHVXPAT",25,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXPAT",26,0)
 ;
"RTN","MHVXPAT",27,0)
 ;    Input:
"RTN","MHVXPAT",28,0)
 ;       QRY - Query array
"RTN","MHVXPAT",29,0)
 ;       QRY(CLIN IEN) - ien of Hospital location file (#44)
"RTN","MHVXPAT",30,0)
 ;       DATAROOT - Root of array to hold extract data
"RTN","MHVXPAT",31,0)
 ;
"RTN","MHVXPAT",32,0)
 ;    Output:
"RTN","MHVXPAT",33,0)
 ;       DATAROOT - Populated data array
"RTN","MHVXPAT",34,0)
 ;             includes number of hits and timestamp
"RTN","MHVXPAT",35,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXPAT",36,0)
 ;
"RTN","MHVXPAT",37,0)
 N EXTIME,HIT,LOGND,FROMDT,TODT,RTN,X,ICN,SSN,CLINIEN
"RTN","MHVXPAT",38,0)
 ;
"RTN","MHVXPAT",39,0)
 S RTN=$T(+0),LOGND=RTN_"^PTPCMP"  ; node for logging
"RTN","MHVXPAT",40,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXPAT",41,0)
 ; needed vars.
"RTN","MHVXPAT",42,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXPAT",43,0)
 ;
"RTN","MHVXPAT",44,0)
 K @DATAROOT,^TMP(RTN,$J)  ; clean up residue
"RTN","MHVXPAT",45,0)
 ;
"RTN","MHVXPAT",46,0)
 I '$G(QRY("FROMDT")) S QRY("FROMDT")=2920101
"RTN","MHVXPAT",47,0)
 I '$G(QRY("TODT")) S QRY("TODT")=DT
"RTN","MHVXPAT",48,0)
 S FROMDT=QRY("FROMDT")
"RTN","MHVXPAT",49,0)
 S TODT=QRY("TODT")
"RTN","MHVXPAT",50,0)
 S CLINIEN=$G(QRY("IEN"))
"RTN","MHVXPAT",51,0)
 I '(CLINIEN>0) S ERR="1^Clinic IEN missing" Q
"RTN","MHVXPAT",52,0)
 ;
"RTN","MHVXPAT",53,0)
 ;
"RTN","MHVXPAT",54,0)
 ; get all PCM patients for CLinic
"RTN","MHVXPAT",55,0)
 D:'ERR
"RTN","MHVXPAT",56,0)
 .N MHVDATES,J,RSLT,RSLTLST,SCER,TM,ICN,PTIEN
"RTN","MHVXPAT",57,0)
 .S RSLTLST=$NA(^TMP(RTN,$J,"CLINIC"))
"RTN","MHVXPAT",58,0)
 .S MHVDATES("BEGIN")=$$HL7TFM^XLFDT(FROMDT)
"RTN","MHVXPAT",59,0)
 .S MHVDATES("END")=$$HL7TFM^XLFDT(TODT)
"RTN","MHVXPAT",60,0)
 .S MHVDATES("INCL")=0
"RTN","MHVXPAT",61,0)
 .S RSLT=$$PTCL^SCAPMC(CLINIEN,.MHVDATES,RSLTLST,"SCER")
"RTN","MHVXPAT",62,0)
 .I $G(SCER(0)) D  Q
"RTN","MHVXPAT",63,0)
 ..S ERR="1^errors ("_SCER(0)_") returned by PTCL^SCAPMC"
"RTN","MHVXPAT",64,0)
 .; now save results
"RTN","MHVXPAT",65,0)
 .S J=0
"RTN","MHVXPAT",66,0)
 .F  S J=$O(^TMP(RTN,$J,"CLINIC",J))  Q:'J  S TM=$G(^TMP(RTN,$J,"CLINIC",J))  D
"RTN","MHVXPAT",67,0)
 ..S PTIEN=$P(TM,U,1)
"RTN","MHVXPAT",68,0)
 ..S ICN=$$GET1^DIQ(2,PTIEN_",",991.01)
"RTN","MHVXPAT",69,0)
 ..S SSN=$$GET1^DIQ(2,PTIEN_",",.09)
"RTN","MHVXPAT",70,0)
 ..S HIT=HIT+1,@DATAROOT@(HIT)=PTIEN_U_""_U_$P(TM,U,2)_U_ICN_U_SSN
"RTN","MHVXPAT",71,0)
 ;
"RTN","MHVXPAT",72,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXPAT",73,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXPAT",74,0)
 ;
"RTN","MHVXPAT",75,0)
 Q
"RTN","MHVXPAT",76,0)
PATTM(QRY,ERR,DATAROOT)             ;Patients for team
"RTN","MHVXPAT",77,0)
 ;
"RTN","MHVXPAT",78,0)
 ; Primary Care Management Module interface
"RTN","MHVXPAT",79,0)
 ; return patient list in dataroot
"RTN","MHVXPAT",80,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXPAT",81,0)
 ;
"RTN","MHVXPAT",82,0)
 ;    Input:
"RTN","MHVXPAT",83,0)
 ;       QRY     - Query array
"RTN","MHVXPAT",84,0)
 ;       QRY(P1) - ien of OE/RR list file (#100.21)
"RTN","MHVXPAT",85,0)
 ;       DATAROOT - Root of array to hold extract data
"RTN","MHVXPAT",86,0)
 ;
"RTN","MHVXPAT",87,0)
 ;    Output:
"RTN","MHVXPAT",88,0)
 ;       DATAROOT - Populated data array
"RTN","MHVXPAT",89,0)
 ;             includes number of hits and timestamp
"RTN","MHVXPAT",90,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXPAT",91,0)
 ;
"RTN","MHVXPAT",92,0)
 N EXTIME,HIT,LOGND,TEAMIEN,RTN,X,ICN,SSN
"RTN","MHVXPAT",93,0)
 ;
"RTN","MHVXPAT",94,0)
 S RTN=$T(+0),LOGND=RTN_"^PATTM"  ; node for logging
"RTN","MHVXPAT",95,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXPAT",96,0)
 ; needed vars.
"RTN","MHVXPAT",97,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXPAT",98,0)
 ;
"RTN","MHVXPAT",99,0)
 K @DATAROOT,^TMP(RTN,$J)  ; clean up residue
"RTN","MHVXPAT",100,0)
 ;
"RTN","MHVXPAT",101,0)
 S TEAMIEN=$G(QRY("IEN"))
"RTN","MHVXPAT",102,0)
 I '(TEAMIEN>0) S ERR="1^Team IEN missing" Q
"RTN","MHVXPAT",103,0)
 ; get all patients for Team
"RTN","MHVXPAT",104,0)
 N MHVDATES,J,RSLT,RSLTLST,TM,PTIEN,ICN
"RTN","MHVXPAT",105,0)
 S RSLTLST=$NA(^TMP(RTN,$J,"PTTM"))
"RTN","MHVXPAT",106,0)
 S RSLTLST=$E(RSLTLST,1,$L(RSLTLST)-1)_","
"RTN","MHVXPAT",107,0)
 D TEAMPTS^ORQPTQ1(RSLTLST,TEAMIEN,1)
"RTN","MHVXPAT",108,0)
 Q:^TMP(RTN,$J,"PTTM",1)["No patients"
"RTN","MHVXPAT",109,0)
 ; now save results
"RTN","MHVXPAT",110,0)
 S J=0
"RTN","MHVXPAT",111,0)
 F  S J=$O(^TMP(RTN,$J,"PTTM",J))  Q:'J  S TM=$G(^TMP(RTN,$J,"PTTM",J))  D
"RTN","MHVXPAT",112,0)
 .S PTIEN=$P(TM,U,1)
"RTN","MHVXPAT",113,0)
 .S ICN=$$GET1^DIQ(2,PTIEN_",",991.01)
"RTN","MHVXPAT",114,0)
 .S SSN=$$GET1^DIQ(2,PTIEN_",",.09)
"RTN","MHVXPAT",115,0)
 .S HIT=HIT+1,@DATAROOT@(HIT)=PTIEN_U_""_U_$P(TM,U,2)_U_ICN_U_SSN
"RTN","MHVXPAT",116,0)
 ;
"RTN","MHVXPAT",117,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXPAT",118,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXPAT",119,0)
 ;
"RTN","MHVXPAT",120,0)
 Q
"RTN","MHVXPAT",121,0)
PTPCMP(QRY,ERR,DATAROOT)           ; patients for PCMM provider
"RTN","MHVXPAT",122,0)
 ; Primary Care Management Module interface
"RTN","MHVXPAT",123,0)
 ; return patient data in DATAROOT
"RTN","MHVXPAT",124,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXPAT",125,0)
 ;
"RTN","MHVXPAT",126,0)
 ;  Input:
"RTN","MHVXPAT",127,0)
 ;       QRY - Query array
"RTN","MHVXPAT",128,0)
 ;       QRY("PRVDR IEN") - ien NEW PERSON file (#200)
"RTN","MHVXPAT",129,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXPAT",130,0)
 ;
"RTN","MHVXPAT",131,0)
 ;  Output:
"RTN","MHVXPAT",132,0)
 ;  DATAROOT - Populated data array
"RTN","MHVXPAT",133,0)
 ;             includes number of hits and timestamp
"RTN","MHVXPAT",134,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXPAT",135,0)
 ;
"RTN","MHVXPAT",136,0)
 N EXTIME,HIT,LOGND,PRVIEN,RTN,X,ICN,SSN
"RTN","MHVXPAT",137,0)
 ;
"RTN","MHVXPAT",138,0)
 S RTN=$T(+0),LOGND=RTN_"^PTPCMP"  ; node for logging
"RTN","MHVXPAT",139,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXPAT",140,0)
 ; needed vars.
"RTN","MHVXPAT",141,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXPAT",142,0)
 ;
"RTN","MHVXPAT",143,0)
 K @DATAROOT,^TMP(RTN,$J)  ; clean up residue
"RTN","MHVXPAT",144,0)
 ;
"RTN","MHVXPAT",145,0)
 S PRVIEN=$G(QRY("IEN"))
"RTN","MHVXPAT",146,0)
 I '(PRVIEN>0) S ERR="1^provider IEN missing" Q
"RTN","MHVXPAT",147,0)
 ;
"RTN","MHVXPAT",148,0)
 ;
"RTN","MHVXPAT",149,0)
 ; get all PCM patients for provider
"RTN","MHVXPAT",150,0)
 D:'ERR
"RTN","MHVXPAT",151,0)
 .N MHVDATES,J,RSLT,RSLTLST,SCER,TM,PTIEN,ICN
"RTN","MHVXPAT",152,0)
 .S RSLTLST=$NA(^TMP(RTN,$J,"PRVDR"))
"RTN","MHVXPAT",153,0)
 .S MHVDATES("BEGIN")="",MHVDATES("END")=DT  ; only for today
"RTN","MHVXPAT",154,0)
 .S MHVDATES("INCL")=1  ; include all
"RTN","MHVXPAT",155,0)
 .S RSLT=$$PTPR^SCAPMC(PRVIEN,.MHVDATES,"","",RSLTLST,"SCER","")
"RTN","MHVXPAT",156,0)
 .I $G(SCER(0)) D  Q
"RTN","MHVXPAT",157,0)
 ..S ERR="1^errors ("_SCER(0)_") returned by PTPR^SCAPMC"
"RTN","MHVXPAT",158,0)
 .; now save results
"RTN","MHVXPAT",159,0)
 .S J=0
"RTN","MHVXPAT",160,0)
 .F  S J=$O(^TMP(RTN,$J,"PRVDR",J))  Q:'J  S TM=$G(^TMP(RTN,$J,"PRVDR",J))  D
"RTN","MHVXPAT",161,0)
 ..S PTIEN=$P(TM,U,1)
"RTN","MHVXPAT",162,0)
 ..S ICN=$$GET1^DIQ(2,PTIEN_",",991.01)
"RTN","MHVXPAT",163,0)
 ..S SSN=$$GET1^DIQ(2,PTIEN_",",.09)
"RTN","MHVXPAT",164,0)
 ..S HIT=HIT+1,@DATAROOT@(HIT)=PTIEN_U_""_U_$P(TM,U,2)_U_ICN_U_SSN
"RTN","MHVXPAT",165,0)
 ;
"RTN","MHVXPAT",166,0)
 S @DATAROOT=HIT_U_EXTIME  ; hits ^ time
"RTN","MHVXPAT",167,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXPAT",168,0)
 ;
"RTN","MHVXPAT",169,0)
 Q
"RTN","MHVXPAT",170,0)
PTREL(QRY,ERR,DATAROOT)                       ; patient relationships
"RTN","MHVXPAT",171,0)
 ; Primary Care Management Module interface
"RTN","MHVXPAT",172,0)
 ; return patient data in DATAROOT
"RTN","MHVXPAT",173,0)
 ; QRY, ERR passed by ref.
"RTN","MHVXPAT",174,0)
 ;
"RTN","MHVXPAT",175,0)
 ;  Input:
"RTN","MHVXPAT",176,0)
 ;       QRY - Query array
"RTN","MHVXPAT",177,0)
 ;       QRY("IEN") - Patient
"RTN","MHVXPAT",178,0)
 ;       QRY("FROMDT") - Begin date
"RTN","MHVXPAT",179,0)
 ;       QRY("TODT") - End Date
"RTN","MHVXPAT",180,0)
 ;
"RTN","MHVXPAT",181,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXPAT",182,0)
 ;
"RTN","MHVXPAT",183,0)
 ;  Output:
"RTN","MHVXPAT",184,0)
 ;  DATAROOT - Populated data array
"RTN","MHVXPAT",185,0)
 ;             includes number of hits and timestamp
"RTN","MHVXPAT",186,0)
 ;       ERR - Errors during extraction, zero on success
"RTN","MHVXPAT",187,0)
 ;
"RTN","MHVXPAT",188,0)
 N EXTIME,HIT,THIT,LOGND,PRVIEN,RTN,X,MHVTEAMS,PATIEN,SCTEAMA
"RTN","MHVXPAT",189,0)
 N SCPOSA,SCUSRA,SCROLEA,SCPURPA,SCER,FROMDT,TODT
"RTN","MHVXPAT",190,0)
 N PPHONE,SSECTION,PTYPE,TYPE,REC
"RTN","MHVXPAT",191,0)
 ;
"RTN","MHVXPAT",192,0)
 S RTN=$T(+0),LOGND=RTN_"^PTREL"  ; node for logging
"RTN","MHVXPAT",193,0)
 D LOG^MHVUL2(LOGND,"BEGIN","S","TRACE")
"RTN","MHVXPAT",194,0)
 ; needed vars.
"RTN","MHVXPAT",195,0)
 S ERR=0,EXTIME=$$NOW^XLFDT,HIT=0
"RTN","MHVXPAT",196,0)
 ;
"RTN","MHVXPAT",197,0)
 K @DATAROOT,^TMP(RTN,$J)  ; clean up residue
"RTN","MHVXPAT",198,0)
 ;
"RTN","MHVXPAT",199,0)
 S PATIEN=$G(QRY("IEN"))
"RTN","MHVXPAT",200,0)
 I '(PATIEN>0) S ERR="1^patient IEN missing" Q
"RTN","MHVXPAT",201,0)
 ;
"RTN","MHVXPAT",202,0)
 ;
"RTN","MHVXPAT",203,0)
 ; get all clinics, providers and PCMM TEAMS for the patient
"RTN","MHVXPAT",204,0)
 ; in the date range
"RTN","MHVXPAT",205,0)
 ;
"RTN","MHVXPAT",206,0)
 Q:ERR
"RTN","MHVXPAT",207,0)
 ;
"RTN","MHVXPAT",208,0)
 N MHVDATES,CLID,J,RSLT,RSLTLST,SCER,TM,PATIEN
"RTN","MHVXPAT",209,0)
 S RSLTLST=$NA(^TMP(RTN,$J,"CLINICS"))
"RTN","MHVXPAT",210,0)
 I '$G(QRY("FROMDT")) S QRY("FROMDT")=2920101
"RTN","MHVXPAT",211,0)
 I '$G(QRY("TODT")) S QRY("TODT")=DT
"RTN","MHVXPAT",212,0)
 S MHVDATES("BEGIN")=QRY("FROMDT")
"RTN","MHVXPAT",213,0)
 S MHVDATES("END")=QRY("TODT")
"RTN","MHVXPAT",214,0)
 S PATIEN=QRY("IEN")
"RTN","MHVXPAT",215,0)
 ;
"RTN","MHVXPAT",216,0)
 ;Load Clinics
"RTN","MHVXPAT",217,0)
 ;
"RTN","MHVXPAT",218,0)
 D GETAPPT^SDAMA201(PATIEN,"1;2","R;NT",QRY("FROMDT"),QRY("TODT"),"")
"RTN","MHVXPAT",219,0)
 I $D(^TMP($J,"SDAMA201","GETAPPT","ERROR")) D  Q
"RTN","MHVXPAT",220,0)
 .S ERR="",ERR=$O(^TMP($J,"SDAMA201","GETAPPT","ERROR",ERR))
"RTN","MHVXPAT",221,0)
 .S ERR="1^"_^TMP($J,"SDAMA201","GETAPPT","ERROR",ERR)
"RTN","MHVXPAT",222,0)
 S REC=""
"RTN","MHVXPAT",223,0)
 F  S REC=$O(^TMP($J,"SDAMA201","GETAPPT",REC)) Q:REC=""  D
"RTN","MHVXPAT",224,0)
 .S CLID=$P(^TMP($J,"SDAMA201","GETAPPT",REC,2),"^",1)
"RTN","MHVXPAT",225,0)
 .Q:$D(^TMP($J,"CLFND",CLID))
"RTN","MHVXPAT",226,0)
 .S @RSLTLST@(REC)=$P(^TMP($J,"SDAMA201","GETAPPT",REC,2),"^",1,2)
"RTN","MHVXPAT",227,0)
 .S ^TMP($J,"CLFND",CLID)=""
"RTN","MHVXPAT",228,0)
 S @RSLTLST@(0)=REC
"RTN","MHVXPAT",229,0)
 K ^TMP($J,"SDAMA201"),^TMP($J,"CLFND")
"RTN","MHVXPAT",230,0)
 ;
"RTN","MHVXPAT",231,0)
 ;Load MHVTEAMS
"RTN","MHVXPAT",232,0)
 ;
"RTN","MHVXPAT",233,0)
 D TMSPT^ORQPTQ1(.MHVTEAMS,PATIEN)
"RTN","MHVXPAT",234,0)
 I MHVTEAMS(1)["No teams" K MHVTEAMS(1)
"RTN","MHVXPAT",235,0)
 M ^TMP("MHVXPAT",$J,"TEAMS")=MHVTEAMS
"RTN","MHVXPAT",236,0)
 ;
"RTN","MHVXPAT",237,0)
 ;Load Providers
"RTN","MHVXPAT",238,0)
 S RSLTLST=$NA(^TMP(RTN,$J,"PROVIDERS"))
"RTN","MHVXPAT",239,0)
 ;S (SCPOSA,SCUSRA,SCROLEA,SCPURPA,SCER)=""
"RTN","MHVXPAT",240,0)
 ;S X=$$PRPT^SCAPMC(PATIEN,.MHVDATES,SCPOSA,SCUSRA,SCROLEA,SCPURPA,RSLTLST,SCER)
"RTN","MHVXPAT",241,0)
 ;
"RTN","MHVXPAT",242,0)
 S X=$$OUTPTPR^SDUTL3(PATIEN) ;MHV*1*9 Always return PC
"RTN","MHVXPAT",243,0)
 I +X  D
"RTN","MHVXPAT",244,0)
 .S ^TMP(RTN,$J,"PROVIDERS",0)=""
"RTN","MHVXPAT",245,0)
 .S ^TMP(RTN,$J,"PROVIDERS",1)=X
"RTN","MHVXPAT",246,0)
 .S $P(^TMP(RTN,$J,"PROVIDERS",1),U,8)="PHYSICIAN-PRIMARY CARE"
"RTN","MHVXPAT",247,0)
 ; now save results
"RTN","MHVXPAT",248,0)
 ;
"RTN","MHVXPAT",249,0)
 N MHVHDAT
"RTN","MHVXPAT",250,0)
 S MHVHDAT=DATAROOT
"RTN","MHVXPAT",251,0)
 S THIT=0
"RTN","MHVXPAT",252,0)
 F TYPE="CLINICS","PROVIDERS","TEAMS"  D
"RTN","MHVXPAT",253,0)
 .S J=0
"RTN","MHVXPAT",254,0)
 .S HIT=0
"RTN","MHVXPAT",255,0)
 .F  S J=$O(^TMP(RTN,$J,TYPE,J))  Q:'J  S TM=$G(^TMP(RTN,$J,TYPE,J))  D
"RTN","MHVXPAT",256,0)
 ..S HIT=HIT+1,THIT=THIT+1,@DATAROOT@(TYPE,HIT)=$P(TM,U)_"^"_$P(TM,U,2)
"RTN","MHVXPAT",257,0)
 ..I TYPE="PROVIDERS"  D
"RTN","MHVXPAT",258,0)
 ...S PPHONE=$$GET1^DIQ(200,$P(TM,U)_",",.132)
"RTN","MHVXPAT",259,0)
 ...S SSECTION=$$GET1^DIQ(200,$P(TM,U)_",",29)
"RTN","MHVXPAT",260,0)
 ...S PTYPE=$P(TM,U,8)
"RTN","MHVXPAT",261,0)
 ...S @DATAROOT@(TYPE,HIT)=@DATAROOT@(TYPE,HIT)_"^"_PTYPE
"RTN","MHVXPAT",262,0)
 ...S @DATAROOT@(TYPE,HIT)=@DATAROOT@(TYPE,HIT)_"^^^^"_PPHONE_"^"_SSECTION
"RTN","MHVXPAT",263,0)
 S @DATAROOT=THIT_U_EXTIME  ; hits ^ time
"RTN","MHVXPAT",264,0)
 D XITLOG(LOGND,HIT)
"RTN","MHVXPAT",265,0)
 Q
"RTN","MHVXPAT",266,0)
 ;
"RTN","MHVXPAT",267,0)
XITLOG(ND,HT)     ; exit log
"RTN","MHVXPAT",268,0)
 D LOG^MHVUL2(ND,HT_" HITS","S","TRACE")
"RTN","MHVXPAT",269,0)
 D LOG^MHVUL2(ND,"END","S","TRACE") Q
"RTN","MHVXTIU")
0^7^B15132002^n/a
"RTN","MHVXTIU",1,0)
MHVXTIU ;KUM - ITEMS of Document Class extract ; [01/26/13 11:38am]
"RTN","MHVXTIU",2,0)
 ;;1.0;My HealtheVet;**10**;Jan 26, 2013;Build 50
"RTN","MHVXTIU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MHVXTIU",4,0)
 ;
"RTN","MHVXTIU",5,0)
 ;  Integration Agreements:
"RTN","MHVXTIU",6,0)
 ;
"RTN","MHVXTIU",7,0)
 ;               10004 : $$GET1^DIQ
"RTN","MHVXTIU",8,0)
 ;                4094 : ^TIU(8925.1 
"RTN","MHVXTIU",9,0)
 ;
"RTN","MHVXTIU",10,0)
 Q
"RTN","MHVXTIU",11,0)
 ;
"RTN","MHVXTIU",12,0)
EXTRACT(QRY,ERR,DATAROOT) ; Entry point to extract Titles data
"RTN","MHVXTIU",13,0)
 ; Retrieves requested Titles data and returns it in DATAROOT
"RTN","MHVXTIU",14,0)
 ; Retrieves all Titles of Document class of active statuses
"RTN","MHVXTIU",15,0)
 ;
"RTN","MHVXTIU",16,0)
 ;
"RTN","MHVXTIU",17,0)
 ;  Input:
"RTN","MHVXTIU",18,0)
 ;       QRY - Query array
"RTN","MHVXTIU",19,0)
 ;          QRY(DCLSNM) - (required) Document Class Name
"RTN","MHVXTIU",20,0)
 ;  DATAROOT - Root of array to hold extract data
"RTN","MHVXTIU",21,0)
 ;
"RTN","MHVXTIU",22,0)
 ;  Output:
"RTN","MHVXTIU",23,0)
 ;  DATAROOT - Populated data array, includes # of hits
"RTN","MHVXTIU",24,0)
 ;       ERR - Errors during extraction
"RTN","MHVXTIU",25,0)
 ;
"RTN","MHVXTIU",26,0)
 N HIT,DFN,MHVDCIEN,MHVDCNM,MHVDCITM
"RTN","MHVXTIU",27,0)
 ;
"RTN","MHVXTIU",28,0)
 D LOG^MHVUL2("MHVXRX EXTRACT","BEGIN","S","TRACE")
"RTN","MHVXTIU",29,0)
 S ERR=0,HIT=0
"RTN","MHVXTIU",30,0)
 K @DATAROOT
"RTN","MHVXTIU",31,0)
 S MHVDCNM=$G(QRY("DCLSNM"))
"RTN","MHVXTIU",32,0)
 ;
"RTN","MHVXTIU",33,0)
 ; Extract IEN of Document Class from TIU Document Definition File (#8925.1)
"RTN","MHVXTIU",34,0)
 S MHVDCIEN=$$DOCDEF(MHVDCNM)
"RTN","MHVXTIU",35,0)
 I 'MHVDCIEN S ERR="1^Documnet Class "_MHVDCNM_" of status Active is not found." Q
"RTN","MHVXTIU",36,0)
 ; 
"RTN","MHVXTIU",37,0)
 I MHVDCIEN D ITEMS(MHVDCIEN)
"RTN","MHVXTIU",38,0)
 ;
"RTN","MHVXTIU",39,0)
 S @DATAROOT=HIT
"RTN","MHVXTIU",40,0)
 D LOG^MHVUL2("MHVXPRG EXTRACT",HIT_" HITS","S","TRACE")
"RTN","MHVXTIU",41,0)
 D LOG^MHVUL2("MHVXPRG EXTRACT","END","S","TRACE")
"RTN","MHVXTIU",42,0)
 Q
"RTN","MHVXTIU",43,0)
 ;
"RTN","MHVXTIU",44,0)
DOCDEF(MHVDCNM) ;Look up IEN of DOCUMENT CLASS NAME if it is active
"RTN","MHVXTIU",45,0)
 N MHVDC,MHVPPCW
"RTN","MHVXTIU",46,0)
 S MHVDC=0 F  S MHVDC=$O(^TIU(8925.1,"B",MHVDCNM,MHVDC)) Q:+MHVDC'>0!+$G(MHVPPCW)  D
"RTN","MHVXTIU",47,0)
 . I (($$GET1^DIQ(8925.1,+MHVDC,.04,"I")="DC")&($$GET1^DIQ(8925.1,+MHVDC,.07,"E")="ACTIVE")) S MHVDCIEN=+MHVDC
"RTN","MHVXTIU",48,0)
 S:'$D(MHVDCIEN) MHVDCIEN=0
"RTN","MHVXTIU",49,0)
 Q MHVDCIEN
"RTN","MHVXTIU",50,0)
 ;
"RTN","MHVXTIU",51,0)
ITEMS(MHVDCIEN) ; Sets items of MHVDCIEN into array MHVDCITM in proper order.
"RTN","MHVXTIU",52,0)
 ; MHVDCITM(TIUFI)=Item's 8925.1 IFN^Item's IFN in Item multiple
"RTN","MHVXTIU",53,0)
 ; Requires MHVDCIEN = Entry's 8925.1 IFN
"RTN","MHVXTIU",54,0)
 N TIUFI,SEQ,TENDA,TENODE0,NAME,MHVDCTIM,MHVTIEN,MHVTNAM,MHVTPNAM,MHVTSEQ,MHVTSTS,MHVTTYP
"RTN","MHVXTIU",55,0)
 S HIT=0
"RTN","MHVXTIU",56,0)
 S (TIUFI,SEQ,TENDA)=0
"RTN","MHVXTIU",57,0)
 F  S SEQ=$O(^TIU(8925.1,MHVDCIEN,10,"AC",SEQ)) Q:'SEQ  D
"RTN","MHVXTIU",58,0)
 . ; Set items having sequence into MHVDCITM in sequence order
"RTN","MHVXTIU",59,0)
 . F  S TENDA=$O(^TIU(8925.1,MHVDCIEN,10,"AC",SEQ,TENDA)) Q:'TENDA  D
"RTN","MHVXTIU",60,0)
 . . S TENODE0=^TIU(8925.1,MHVDCIEN,10,TENDA,0) Q:'TENODE0
"RTN","MHVXTIU",61,0)
 . . S TIUFI=TIUFI+1,MHVDCTIM(TIUFI)=+TENODE0_"^"_TENDA
"RTN","MHVXTIU",62,0)
 S NAME=""
"RTN","MHVXTIU",63,0)
 F  S NAME=$O(^TIU(8925.1,MHVDCIEN,10,"C",NAME)) Q:NAME=""  D
"RTN","MHVXTIU",64,0)
 . ; Set items with no sequence into MHVDCITM in alpha order by Display Name.
"RTN","MHVXTIU",65,0)
 . S TENDA=0
"RTN","MHVXTIU",66,0)
 . F  S TENDA=$O(^TIU(8925.1,MHVDCIEN,10,"C",NAME,TENDA)) Q:'TENDA  D
"RTN","MHVXTIU",67,0)
 . . S TENODE0=^TIU(8925.1,MHVDCIEN,10,TENDA,0) Q:'TENODE0
"RTN","MHVXTIU",68,0)
 . . Q:$P(TENODE0,U,3)  ;If has sequence, already in MHVDCITM.
"RTN","MHVXTIU",69,0)
 . . S TIUFI=TIUFI+1,MHVDCTIM(TIUFI)=+TENODE0_"^"_TENDA
"RTN","MHVXTIU",70,0)
 S TENDA=0
"RTN","MHVXTIU",71,0)
 F  S TENDA=$O(^TIU(8925.1,MHVDCIEN,10,TENDA)) Q:'TENDA  D
"RTN","MHVXTIU",72,0)
 . ; Set items with no sequence, no display name into buffer in item order
"RTN","MHVXTIU",73,0)
 . S TENODE0=^TIU(8925.1,MHVDCIEN,10,TENDA,0) Q:'TENODE0
"RTN","MHVXTIU",74,0)
 . Q:$P(TENODE0,U,3)  ;If has sequence, already in MHVDCITM.
"RTN","MHVXTIU",75,0)
 . Q:$P(TENODE0,U,4)'=""  ;If has Display Name, already in MHVDCITM.
"RTN","MHVXTIU",76,0)
 . S TIUFI=TIUFI+1,MHVDCTIM(TIUFI)=+TENODE0_"^"_TENDA
"RTN","MHVXTIU",77,0)
 S TENDA=0
"RTN","MHVXTIU",78,0)
 F  S TENDA=$O(MHVDCTIM(TENDA)) Q:'TENDA  D
"RTN","MHVXTIU",79,0)
 . ; Retrieve other required fields
"RTN","MHVXTIU",80,0)
 . S MHVTIEN=+($P(MHVDCTIM(TENDA),U,1))
"RTN","MHVXTIU",81,0)
 . S MHVTNAM=$$GET1^DIQ(8925.1,+MHVTIEN,.01,"I")
"RTN","MHVXTIU",82,0)
 . S MHVTPNAM=$$GET1^DIQ(8925.1,+MHVTIEN,.03,"I")
"RTN","MHVXTIU",83,0)
 . S MHVTTYP=$$GET1^DIQ(8925.1,+MHVTIEN,.04,"I")
"RTN","MHVXTIU",84,0)
 . S MHVTSTS=$$GET1^DIQ(8925.1,+MHVTIEN,.07,"E")
"RTN","MHVXTIU",85,0)
 . I ((MHVTTYP="DOC")&(MHVTSTS="ACTIVE"))  D
"RTN","MHVXTIU",86,0)
 . . S HIT=HIT+1
"RTN","MHVXTIU",87,0)
 . . S MHVTSEQ=$P(^TIU(8925.1,MHVDCIEN,10,$P(MHVDCTIM(TENDA),"^",2),0),"^",3)
"RTN","MHVXTIU",88,0)
 . . S @DATAROOT@(HIT)=MHVTIEN_U_MHVTSEQ_U_MHVTNAM_U_MHVTPNAM
"RTN","MHVXTIU",89,0)
 Q
"RTN","MHVXTIU",90,0)
 ;
"VER")
8.0^22.0
"BLD",8059,6)
^6
**END**
**END**
