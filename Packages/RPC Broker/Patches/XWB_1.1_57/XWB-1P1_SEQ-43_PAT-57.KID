Released XWB*1.1*57 SEQ #43
Extracted from mail message
**KIDS**:XWB*1.1*57^

**INSTALL NAME**
XWB*1.1*57
"BLD",1369,0)
XWB*1.1*57^RPC BROKER^0^3111115^y
"BLD",1369,1,0)
^^1^1^3110610^
"BLD",1369,1,1,0)
Handles timing for coversheet loads in the foreground.
"BLD",1369,4,0)
^9.64PA^^
"BLD",1369,6.3)
13
"BLD",1369,"KRN",0)
^9.67PA^9002226^21
"BLD",1369,"KRN",.4,0)
.4
"BLD",1369,"KRN",.401,0)
.401
"BLD",1369,"KRN",.402,0)
.402
"BLD",1369,"KRN",.403,0)
.403
"BLD",1369,"KRN",.5,0)
.5
"BLD",1369,"KRN",.84,0)
.84
"BLD",1369,"KRN",3.6,0)
3.6
"BLD",1369,"KRN",3.8,0)
3.8
"BLD",1369,"KRN",9.2,0)
9.2
"BLD",1369,"KRN",9.8,0)
9.8
"BLD",1369,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",1369,"KRN",9.8,"NM",1,0)
XWBPRS^^0^B75006565
"BLD",1369,"KRN",9.8,"NM","B","XWBPRS",1)

"BLD",1369,"KRN",19,0)
19
"BLD",1369,"KRN",19.1,0)
19.1
"BLD",1369,"KRN",101,0)
101
"BLD",1369,"KRN",409.61,0)
409.61
"BLD",1369,"KRN",771,0)
771
"BLD",1369,"KRN",779.2,0)
779.2
"BLD",1369,"KRN",870,0)
870
"BLD",1369,"KRN",8989.51,0)
8989.51
"BLD",1369,"KRN",8989.52,0)
8989.52
"BLD",1369,"KRN",8994,0)
8994
"BLD",1369,"KRN",9002226,0)
9002226
"BLD",1369,"KRN","B",.4,.4)

"BLD",1369,"KRN","B",.401,.401)

"BLD",1369,"KRN","B",.402,.402)

"BLD",1369,"KRN","B",.403,.403)

"BLD",1369,"KRN","B",.5,.5)

"BLD",1369,"KRN","B",.84,.84)

"BLD",1369,"KRN","B",3.6,3.6)

"BLD",1369,"KRN","B",3.8,3.8)

"BLD",1369,"KRN","B",9.2,9.2)

"BLD",1369,"KRN","B",9.8,9.8)

"BLD",1369,"KRN","B",19,19)

"BLD",1369,"KRN","B",19.1,19.1)

"BLD",1369,"KRN","B",101,101)

"BLD",1369,"KRN","B",409.61,409.61)

"BLD",1369,"KRN","B",771,771)

"BLD",1369,"KRN","B",779.2,779.2)

"BLD",1369,"KRN","B",870,870)

"BLD",1369,"KRN","B",8989.51,8989.51)

"BLD",1369,"KRN","B",8989.52,8989.52)

"BLD",1369,"KRN","B",8994,8994)

"BLD",1369,"KRN","B",9002226,9002226)

"BLD",1369,"QUES",0)
^9.62^^
"BLD",1369,"REQB",0)
^9.611^^
"MBREQ")
0
"PKG",8,-1)
1^1
"PKG",8,0)
RPC BROKER^XWB^Remote Procedure Call Broker^
"PKG",8,20,0)
^9.402P^^
"PKG",8,22,0)
^9.49I^1^1
"PKG",8,22,1,0)
1.1^2970918^2971120^7
"PKG",8,22,1,"PAH",1,0)
57^3111115
"PKG",8,22,1,"PAH",1,1,0)
^^1^1^3111115
"PKG",8,22,1,"PAH",1,1,1,0)
Handles timing for coversheet loads in the foreground.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","XWBPRS")
0^1^B75006565^B38623517
"RTN","XWBPRS",1,0)
XWBPRS ;ISF/STAFF - VISTA BROKER MSG PARSER ;11/15/11  12:39
"RTN","XWBPRS",2,0)
 ;;1.1;RPC BROKER;**35,43,46,57**;Mar 28, 1997;Build 13
"RTN","XWBPRS",3,0)
 ;XWB holds info from the message used by the RPC
"RTN","XWBPRS",4,0)
CALLP(XWBP,XWBDEBUG) ;make API call using Protocol string
"RTN","XWBPRS",5,0)
 N ERR,S,XWBARY K XWB
"RTN","XWBPRS",6,0)
 S ERR=0
"RTN","XWBPRS",7,0)
 S ERR=$$PRSP("[XWB]") ;Read the rest of the protocol header
"RTN","XWBPRS",8,0)
 I '+ERR S ERR=$$PRSM ;Read and parse message
"RTN","XWBPRS",9,0)
 I $G(XWB(2,"RPC"))="XUS SET SHARED" S XWBSHARE=1 Q
"RTN","XWBPRS",10,0)
 I '+ERR S ERR=$$RPC ;Check the RPC
"RTN","XWBPRS",11,0)
 I +ERR S XWBSEC=$P(ERR,U,2) ;P10 -- dpc
"RTN","XWBPRS",12,0)
 I '+ERR D CHKPRMIT^XWBSEC($G(XWB(2,"RPC"))) ;checks if RPC allowed to run
"RTN","XWBPRS",13,0)
 S:$L($G(XWBSEC)) ERR="-1^"_XWBSEC
"RTN","XWBPRS",14,0)
 I '+ERR D
"RTN","XWBPRS",15,0)
 . D CAPI(.XWBP,XWB("PARAM"))
"RTN","XWBPRS",16,0)
 E  I ($G(XWBTCMD)'="#BYE#") D LOG^XWBTCPM("Bad Msg"_ERR),CLRBUF
"RTN","XWBPRS",17,0)
 I 'XWBDEBUG K XWB
"RTN","XWBPRS",18,0)
 I $D(XWBARY) K @XWBARY,XWBARY
"RTN","XWBPRS",19,0)
 Q
"RTN","XWBPRS",20,0)
 ;
"RTN","XWBPRS",21,0)
PRSP(P) ;ef, Parse Protocol
"RTN","XWBPRS",22,0)
 ;M Extrinsic Function
"RTN","XWBPRS",23,0)
 ;Outputs
"RTN","XWBPRS",24,0)
 ;ERR      0 for success, "-1^Text" if error
"RTN","XWBPRS",25,0)
 ;
"RTN","XWBPRS",26,0)
 N ERR,C,M,R,X
"RTN","XWBPRS",27,0)
 S R=0,C=";",ERR=0
"RTN","XWBPRS",28,0)
 S P=$$BREAD^XWBRW(4)
"RTN","XWBPRS",29,0)
 IF $L(P)'=4 S ERR="-1^Short Header info"
"RTN","XWBPRS",30,0)
 IF +ERR=0 D
"RTN","XWBPRS",31,0)
 . S XWB(R,"VER")=+$E(P,1)
"RTN","XWBPRS",32,0)
 . S XWB(R,"TYPE")=+$E(P,2)
"RTN","XWBPRS",33,0)
 . S (XWBENVL,XWB(R,"LENV"))=+$E(P,3)
"RTN","XWBPRS",34,0)
 . S (XWBPRT,XWB(R,"RT"))=+$E(P,4)
"RTN","XWBPRS",35,0)
 I XWBENVL<1 S (XWBENVL,XWB(R,"LENV"))=3
"RTN","XWBPRS",36,0)
 Q ERR
"RTN","XWBPRS",37,0)
 ;
"RTN","XWBPRS",38,0)
PRSM() ;ef, Parse message
"RTN","XWBPRS",39,0)
 ;M Extrinsic Function
"RTN","XWBPRS",40,0)
 ;See document on msg format
"RTN","XWBPRS",41,0)
 ;Outputs
"RTN","XWBPRS",42,0)
 ;ERR      0 for success, "-1^Text" if error
"RTN","XWBPRS",43,0)
 N C,EX1,ERR,R,X,CNK
"RTN","XWBPRS",44,0)
 S R=1,C=";",CNK=0,EX1=0 ;Max buffer
"RTN","XWBPRS",45,0)
 S ERR="-1^Invalid Chunk"
"RTN","XWBPRS",46,0)
 F  S CNK=$$BREAD^XWBRW(1) Q:("12345"'[CNK)  D  Q:EX1
"RTN","XWBPRS",47,0)
 . S EX1=(CNK=5),@("ERR=$$PRS"_CNK)
"RTN","XWBPRS",48,0)
 Q ERR
"RTN","XWBPRS",49,0)
 ;
"RTN","XWBPRS",50,0)
PRS1() ;Parse the HEADER chunk
"RTN","XWBPRS",51,0)
 N %,L,R
"RTN","XWBPRS",52,0)
 S R=1
"RTN","XWBPRS",53,0)
 S XWB(R,"VER")=$$SREAD
"RTN","XWBPRS",54,0)
 S XWB(R,"RETURN")=$$SREAD
"RTN","XWBPRS",55,0)
 Q 0
"RTN","XWBPRS",56,0)
 ;
"RTN","XWBPRS",57,0)
PRS2() ;Parse the RPC chunk
"RTN","XWBPRS",58,0)
 N L,R
"RTN","XWBPRS",59,0)
 S R=2
"RTN","XWBPRS",60,0)
 S (XWBAPVER,XWB(R,"VER"))=$$SREAD ;RPC version
"RTN","XWBPRS",61,0)
 S XWB(R,"RPC")=$$SREAD
"RTN","XWBPRS",62,0)
 I $G(XWBDEBUG)>1 D LOG^XWBTCPM("RPC: "_XWB(R,"RPC"))
"RTN","XWBPRS",63,0)
 Q 0
"RTN","XWBPRS",64,0)
PRS3() ;Parse the Security chunk
"RTN","XWBPRS",65,0)
 N L,R
"RTN","XWBPRS",66,0)
 S R=3
"RTN","XWBPRS",67,0)
 Q 0
"RTN","XWBPRS",68,0)
PRS4() ;Parse the Command chunk
"RTN","XWBPRS",69,0)
 N R
"RTN","XWBPRS",70,0)
 S R=4,XWBTCMD=$$SREAD,XWB(R,"CMD")=XWBTCMD
"RTN","XWBPRS",71,0)
 I $G(XWBDEBUG)>1 D LOG^XWBTCPM("CMD: "_XWBTCMD)
"RTN","XWBPRS",72,0)
 Q ("TCPConnect^#BYE#"[XWBTCMD)
"RTN","XWBPRS",73,0)
 ;
"RTN","XWBPRS",74,0)
PRS5() ;Parse Data Parameter chunk
"RTN","XWBPRS",75,0)
 ;M Extrinsic Function
"RTN","XWBPRS",76,0)
 ;Outputs
"RTN","XWBPRS",77,0)
 ;ERR      0 for success, "-1^Text" if error
"RTN","XWBPRS",78,0)
 ;
"RTN","XWBPRS",79,0)
 N CONT,DONE,ERR,F,FL,IX,K,L,P1,P2,P3,P4,P5,MAXP,R,TY,VA
"RTN","XWBPRS",80,0)
 S R=5,ERR=0,F=3,IX=0,DONE=0,CONT="f",XWB("PARAM")=""
"RTN","XWBPRS",81,0)
 F  S:CONT="f" TY=$$BREAD^XWBRW(1) D  Q:DONE  S CONT=$$BREAD^XWBRW(1) S:CONT'="t" IX=IX+1
"RTN","XWBPRS",82,0)
 . K VA,P1
"RTN","XWBPRS",83,0)
 . IF TY=$C(4) S DONE=1 Q  ;EOT
"RTN","XWBPRS",84,0)
 . IF TY=0 D  Q  ;literal
"RTN","XWBPRS",85,0)
 . . D LREAD("VA")
"RTN","XWBPRS",86,0)
 . . S XWB(R,"P",IX)=VA(1) D PARAM($NA(XWB(R,"P",IX)))
"RTN","XWBPRS",87,0)
 . . Q
"RTN","XWBPRS",88,0)
 . IF TY=1 D  Q  ;reference
"RTN","XWBPRS",89,0)
 . . D LREAD("VA")
"RTN","XWBPRS",90,0)
 . . S XWB(R,"P",IX)=$$GETV(VA(1)) D PARAM($NA(XWB(R,"P",IX)))
"RTN","XWBPRS",91,0)
 . . Q
"RTN","XWBPRS",92,0)
 . IF TY=2 D  Q  ;list
"RTN","XWBPRS",93,0)
 . . I CONT'="t" D
"RTN","XWBPRS",94,0)
 . . . S XWBARY=$$OARY,XWB(R,"P",IX)="."_XWBARY
"RTN","XWBPRS",95,0)
 . . . D PARAM(XWB(R,"P",IX))
"RTN","XWBPRS",96,0)
 . . D LREAD("P1") Q:P1(1)=""  D LREAD("VA")
"RTN","XWBPRS",97,0)
 . . D LINST(XWBARY,P1(1),VA(1))
"RTN","XWBPRS",98,0)
 . . Q
"RTN","XWBPRS",99,0)
 . IF TY=3 D  Q  ;global
"RTN","XWBPRS",100,0)
 . . I CONT'="t" D
"RTN","XWBPRS",101,0)
 . . . S XWBARY=$NA(^TMP("XWBA",$J,IX)),XWB(R,"P",IX)=XWBARY
"RTN","XWBPRS",102,0)
 . . . K @XWBARY S @XWBARY=""
"RTN","XWBPRS",103,0)
 . . . D PARAM(XWBARY)
"RTN","XWBPRS",104,0)
 . . D LREAD("P1") Q:P1(1)=""  D LREAD("VA")
"RTN","XWBPRS",105,0)
 . . D GINST(XWBARY,P1(1),VA(1))
"RTN","XWBPRS",106,0)
 . . Q
"RTN","XWBPRS",107,0)
 . IF TY=4 D  Q  ;empty - ,,
"RTN","XWBPRS",108,0)
 . . S XWB(R,"XWB",IX)=""
"RTN","XWBPRS",109,0)
 . . Q
"RTN","XWBPRS",110,0)
 . IF TY=5 D  Q
"RTN","XWBPRS",111,0)
 . . ;stream still to be done
"RTN","XWBPRS",112,0)
 . Q  ;End of loop
"RTN","XWBPRS",113,0)
 Q ERR
"RTN","XWBPRS",114,0)
PARAM(NA) ;Add a new parameter to the list
"RTN","XWBPRS",115,0)
 N A
"RTN","XWBPRS",116,0)
 S A=$G(XWB("PARAM")) S:'$L(NA) NA="""""" ;Empty
"RTN","XWBPRS",117,0)
 S A=A_$S($L(A):",",1:"")_$S(TY=3:"$NA(",1:"")_NA_$S(TY=3:")",1:"")
"RTN","XWBPRS",118,0)
 S XWB("PARAM")=A
"RTN","XWBPRS",119,0)
 Q
"RTN","XWBPRS",120,0)
 ;
"RTN","XWBPRS",121,0)
RPC() ;Check the rpc information.
"RTN","XWBPRS",122,0)
 ;M Extrinsic Function
"RTN","XWBPRS",123,0)
 ;Outputs
"RTN","XWBPRS",124,0)
 ;ERR      0 for success, "-1^Text" if error
"RTN","XWBPRS",125,0)
 ;
"RTN","XWBPRS",126,0)
 N C,DR,ERR,M,R,RPC,T,X
"RTN","XWBPRS",127,0)
 S R=2,C=";",ERR=0,M=512 ;Max buffer
"RTN","XWBPRS",128,0)
 S RPC=$G(XWB(R,"RPC")) I '$L(RPC) Q "-1^No RPC sent"
"RTN","XWBPRS",129,0)
 S T=$O(^XWB(8994,"B",RPC,0))
"RTN","XWBPRS",130,0)
 I '+T Q "-1^Remote Procedure '"_RPC_"' doesn't exist on the server."
"RTN","XWBPRS",131,0)
 S T(0)=$G(^XWB(8994,T,0))
"RTN","XWBPRS",132,0)
 I $P(T(0),U,6)=1!($P(T(0),U,6)=2) Q "-1^Remote Procedure '"_RPC_"' cannot be run at this time."  ;P10. Check INACTIVE field. - dpc.
"RTN","XWBPRS",133,0)
 S XWB(R,"RTAG")=$P(T(0),"^",2)
"RTN","XWBPRS",134,0)
 S XWB(R,"RNAM")=$P(T(0),"^",3)
"RTN","XWBPRS",135,0)
 S XWBPTYPE=$P(T(0),"^",4)
"RTN","XWBPRS",136,0)
 S XWBWRAP=+$P(T(0),"^",8)
"RTN","XWBPRS",137,0)
 Q ERR
"RTN","XWBPRS",138,0)
 ;
"RTN","XWBPRS",139,0)
SREAD() ;Read a S_PACK
"RTN","XWBPRS",140,0)
 N L,V7
"RTN","XWBPRS",141,0)
 S L=$$BREAD^XWBRW(1),L=$A(L)
"RTN","XWBPRS",142,0)
 S V7=$$BREAD^XWBRW(L)
"RTN","XWBPRS",143,0)
 Q V7
"RTN","XWBPRS",144,0)
 ;
"RTN","XWBPRS",145,0)
LREAD(ROOT) ;Read a L_PACK
"RTN","XWBPRS",146,0)
 N L,V7,I ;p45 Remove limit on length of string.
"RTN","XWBPRS",147,0)
 S I=1,@ROOT@(I)=""
"RTN","XWBPRS",148,0)
 S L=$$BREAD^XWBRW(XWBENVL),L=+L
"RTN","XWBPRS",149,0)
 I L>0 S V7=$$BREAD^XWBRW(L),@ROOT@(I)=V7,I=I+1
"RTN","XWBPRS",150,0)
 Q
"RTN","XWBPRS",151,0)
 ;
"RTN","XWBPRS",152,0)
 ;X can be something like '"TEXT",1,0'.
"RTN","XWBPRS",153,0)
LINST(A,X,XWBY) ;instantiate local array
"RTN","XWBPRS",154,0)
 IF XWBY=$C(1) S XWBY=""
"RTN","XWBPRS",155,0)
 S X=A_"("_X_")"
"RTN","XWBPRS",156,0)
 S @X=XWBY
"RTN","XWBPRS",157,0)
 Q
"RTN","XWBPRS",158,0)
 ;
"RTN","XWBPRS",159,0)
 ;S can be something like '"TEXT",1,0'.
"RTN","XWBPRS",160,0)
GINST(R,S,V) ;instantiate global
"RTN","XWBPRS",161,0)
 N N
"RTN","XWBPRS",162,0)
 I V=$C(1) S V=""
"RTN","XWBPRS",163,0)
 S N=$P(R,")")_","_S_")"
"RTN","XWBPRS",164,0)
 S @N=V
"RTN","XWBPRS",165,0)
 Q
"RTN","XWBPRS",166,0)
 ;
"RTN","XWBPRS",167,0)
GETV(V) ;get value of V - reference parameter
"RTN","XWBPRS",168,0)
 N X
"RTN","XWBPRS",169,0)
 S X=V
"RTN","XWBPRS",170,0)
 IF $E(X,1,2)="$$" Q ""
"RTN","XWBPRS",171,0)
 IF $C(34,36)[$E(V) X "S V="_$$VCHK(V)
"RTN","XWBPRS",172,0)
 E  S V=@V
"RTN","XWBPRS",173,0)
 Q V
"RTN","XWBPRS",174,0)
 ;
"RTN","XWBPRS",175,0)
VCHK(S) ;Parse string for first argument
"RTN","XWBPRS",176,0)
 N C,I,P
"RTN","XWBPRS",177,0)
 F I=1:1 S C=$E(S,I) D VCHKP:C="(",VCHKQ:C=$C(34) Q:" ,"[C
"RTN","XWBPRS",178,0)
 Q $E(S,1,I-1)
"RTN","XWBPRS",179,0)
VCHKP S P=1 ;Find closing paren
"RTN","XWBPRS",180,0)
 F I=I+1:1 S C=$E(S,I) Q:P=0!(C="")  I "()"""[C D VCHKQ:C=$C(34) S P=P+$S("("[C:1,")"[C:-1,1:0)
"RTN","XWBPRS",181,0)
 Q
"RTN","XWBPRS",182,0)
VCHKQ ;Find closing quote
"RTN","XWBPRS",183,0)
 F I=I+1:1 S C=$E(S,I) Q:C=""!(C=$C(34))
"RTN","XWBPRS",184,0)
 Q
"RTN","XWBPRS",185,0)
CLRBUF ;Empties Input buffer
"RTN","XWBPRS",186,0)
 N %
"RTN","XWBPRS",187,0)
 F  R *%:2 Q:'$T!(%=4)  ;!(%=-1)
"RTN","XWBPRS",188,0)
 Q
"RTN","XWBPRS",189,0)
ZZZ(X) ;Convert
"RTN","XWBPRS",190,0)
 N I,J
"RTN","XWBPRS",191,0)
 F  S I=$F(X,"$C(") Q:'I  S J=$F(X,")",I),X=$E(X,1,I-4)_$C($E(X,I,J-2))_$E(X,J,999)
"RTN","XWBPRS",192,0)
 Q X
"RTN","XWBPRS",193,0)
 ;
"RTN","XWBPRS",194,0)
CAPI(XWBY,PAR) ;make API call
"RTN","XWBPRS",195,0)
 N XWBCALL,T,DX,DY
"RTN","XWBPRS",196,0)
 ; ZEXCEPT: XWBFGTIM - created here, will be killed in STRTCVR2 or ONECOVER
"RTN","XWBPRS",197,0)
 ; ZEXCEPT: XWBCSRPC - created here, will be killed in ONECOVER
"RTN","XWBPRS",198,0)
 ; JLI 110606 next line checks for start call to Coversheet Timing
"RTN","XWBPRS",199,0)
 I XWB(2,"RTAG")="START",XWB(2,"RNAM")="ORWCV" I +$G(^KMPTMP("KMPD-CPRS")) S XWBFGTIM=$H D STRTCVR1 I 1
"RTN","XWBPRS",200,0)
 E  I $G(XWBCOVER),$D(^TMP("XWBFGP",$J,"TODO",XWB(2,"RPC"))) S XWBFGTIM=$H,XWBCSRPC=XWB(2,"RPC")
"RTN","XWBPRS",201,0)
 S XWBCALL=XWB(2,"RTAG")_"^"_XWB(2,"RNAM")_"(.XWBY"_$S($L(PAR):","_PAR,1:"")_")",XWBCALL2=""
"RTN","XWBPRS",202,0)
 K PAR
"RTN","XWBPRS",203,0)
 O XWBNULL U XWBNULL ;p43 Make sure its open
"RTN","XWBPRS",204,0)
 ;
"RTN","XWBPRS",205,0)
 I $G(XWBDEBUG)>2 D LOG^XWBDLOG("Call: "_$E(XWBCALL,1,247))
"RTN","XWBPRS",206,0)
 ;start RUM for RPC
"RTN","XWBPRS",207,0)
 I $G(XWB(2,"CAPI"))]"" D LOGRSRC^%ZOSV(XWB(2,"CAPI"),2,1)
"RTN","XWBPRS",208,0)
 ;
"RTN","XWBPRS",209,0)
 D @XWBCALL S XWBCALL2=XWBCALL ;Save call for debug
"RTN","XWBPRS",210,0)
 ;
"RTN","XWBPRS",211,0)
 I $G(XWBCOVER),XWB(2,"RTAG")="START",XWB(2,"RNAM")="ORWCV" D STRTCVR2(XWBY) I 1
"RTN","XWBPRS",212,0)
 E  I $D(XWBCOVER),$D(XWBCSRPC) D ONECOVER ; JLI 110606
"RTN","XWBPRS",213,0)
 ;
"RTN","XWBPRS",214,0)
 ;restart RUM for handler
"RTN","XWBPRS",215,0)
 D LOGRSRC^%ZOSV("$BROKER HANDLER$",2,1)
"RTN","XWBPRS",216,0)
 ;
"RTN","XWBPRS",217,0)
 U XWBTDEV
"RTN","XWBPRS",218,0)
 Q
"RTN","XWBPRS",219,0)
 ;
"RTN","XWBPRS",220,0)
OARY() ;create storage array
"RTN","XWBPRS",221,0)
 N A,DONE,I
"RTN","XWBPRS",222,0)
 S I=1+$G(XWB("ARRAY")),XWB("ARRAY")=I
"RTN","XWBPRS",223,0)
 S A="XWBS"_I
"RTN","XWBPRS",224,0)
 K @A ;temp fix for single array
"RTN","XWBPRS",225,0)
 S @A="" ;set naked
"RTN","XWBPRS",226,0)
 Q A
"RTN","XWBPRS",227,0)
 ;
"RTN","XWBPRS",228,0)
CREF(R,P) ;Convert array contained in P to reference A
"RTN","XWBPRS",229,0)
 N I,X,DONE,F1,S
"RTN","XWBPRS",230,0)
 S DONE=0
"RTN","XWBPRS",231,0)
 S S=""
"RTN","XWBPRS",232,0)
 F I=1:1  D  Q:DONE
"RTN","XWBPRS",233,0)
 . IF $P(P,",",I)="" S DONE=1 Q
"RTN","XWBPRS",234,0)
 . S X(I)=$P(P,",",I)
"RTN","XWBPRS",235,0)
 . IF X(I)?1"."1A.E D
"RTN","XWBPRS",236,0)
 . . S F1=$F(X(I),".")
"RTN","XWBPRS",237,0)
 . . S X(I)="."_R
"RTN","XWBPRS",238,0)
 . S S=S_X(I)_","
"RTN","XWBPRS",239,0)
 Q $E(S,1,$L(S)-1)
"RTN","XWBPRS",240,0)
 ;
"RTN","XWBPRS",241,0)
STRTCVR1 ; JLI 110606
"RTN","XWBPRS",242,0)
 ; SET UP DATA FOR OBTAINING FOREGROUND PROCESSING TIMES FOR COVERSHEET LOADS
"RTN","XWBPRS",243,0)
 ; REQUESTED FOR TIMING ON COMMODITY SERVERS, ETC.
"RTN","XWBPRS",244,0)
 N DFN,IP,HWND,NODE
"RTN","XWBPRS",245,0)
 ; ZEXCEPT: XWBCOVER - created here, will be killed when foreground processing is complete
"RTN","XWBPRS",246,0)
 S XWBCOVER=1
"RTN","XWBPRS",247,0)
 K ^TMP("XWBFGP",$J)
"RTN","XWBPRS",248,0)
 S DFN=XWB(5,"P",0),IP=XWB(5,"P",1),HWND=XWB(5,"P",2)
"RTN","XWBPRS",249,0)
 S NODE="ORWCV "_IP_"-"_HWND_"-"_DFN
"RTN","XWBPRS",250,0)
 S ^TMP("XWBFGP",$J,"NODE")=NODE ; SO WE CAN GET IT EASILY EACH PASS
"RTN","XWBPRS",251,0)
 S ^KMPTMP("KMPDT","ORWCV-FT",NODE)=XWBFGTIM_"^^"_$G(DUZ)_"^"_$G(IO("CLNM"))
"RTN","XWBPRS",252,0)
 Q
"RTN","XWBPRS",253,0)
 ;
"RTN","XWBPRS",254,0)
STRTCVR2(RETRNVAL) ; JLI 110606 - setup after coming back from initial start for coversheets
"RTN","XWBPRS",255,0)
 N XWBFGDIF,I
"RTN","XWBPRS",256,0)
 ; the return value contains ids for coversheets to be handled in the foreground separated by commas
"RTN","XWBPRS",257,0)
 F I=1:1 S XWBCSID=$P(RETRNVAL,";",I) Q:XWBCSID=""  D SETCSID(XWBCSID)
"RTN","XWBPRS",258,0)
 K XWBFGTIM
"RTN","XWBPRS",259,0)
 Q
"RTN","XWBPRS",260,0)
 ;
"RTN","XWBPRS",261,0)
SETCSID(XWBCSID) ; Obtain and setup selected coversheet ids for foreground processing
"RTN","XWBPRS",262,0)
 N I,RPC
"RTN","XWBPRS",263,0)
 ; The coversheet ID value (XWBCSID) will be used for a look-up on the "AC" cross-reference of file 101.24.
"RTN","XWBPRS",264,0)
 ; It is possible to have multiple entries with the same ID value, so checking that the 8th piece of the zero node of the value is a "C" will be required.
"RTN","XWBPRS",265,0)
 F I=0:0 S I=$O(^ORD(101.24,"AC",XWBCSID,I)) Q:I'>0  I $P(^ORD(101.24,I,0),U,8)="C" S RPC=$P(^(0),U,13),RPC=$P(^XWB(8994,RPC,0),U),^TMP("XWBFGP",$J,"TODO",RPC)=I Q
"RTN","XWBPRS",266,0)
 I $D(^TMP("XWBFGP",$J,"TODO","ORQQPX REMINDERS LIST")) D
"RTN","XWBPRS",267,0)
 .N XWBCSIEN S XWBCSIEN=^TMP("XWBFGP",$J,"TODO","ORQQPX REMINDERS LIST")
"RTN","XWBPRS",268,0)
 .S ^TMP("XWBFGP",$J,"TODO","ORQQPXRM REMINDERS APPLICABLE")=XWBCSIEN
"RTN","XWBPRS",269,0)
 .S ^TMP("XWBFGP",$J,"TODO","ORQQPXRM REMINDERS UNEVALUATED")=XWBCSIEN
"RTN","XWBPRS",270,0)
 .S ^TMP("XWBFGP",$J,"TODO","ORQQPXRM REMINDER CATEGORIES")=XWBCSIEN
"RTN","XWBPRS",271,0)
 .Q
"RTN","XWBPRS",272,0)
 Q
"RTN","XWBPRS",273,0)
ONECOVER ; called after data is returned to client
"RTN","XWBPRS",274,0)
 I "^ORQQPXRM REMINDERS APPLICABLE^ORQQPXRM REMINDERS UNEVALUATED^ORQQPXRM REMINDER CATEGORIES^"[U_XWBCSRPC_U K ^TMP("XWBFGP",$J,"TODO","ORQQPX REMINDERS LIST")
"RTN","XWBPRS",275,0)
 I XWBCSRPC="ORQQPX REMINDERS LIST" D
"RTN","XWBPRS",276,0)
 .K ^TMP("XWBFGP",$J,"TODO","ORQQPXRM REMINDERS APPLICABLE")
"RTN","XWBPRS",277,0)
 .K ^TMP("XWBFGP",$J,"TODO","ORQQPXRM REMINDERS UNEVALUATED")
"RTN","XWBPRS",278,0)
 .K ^TMP("XWBFGP",$J,"TODO","ORQQPXRM REMINDER CATEGORIES")
"RTN","XWBPRS",279,0)
 .Q
"RTN","XWBPRS",280,0)
 ;
"RTN","XWBPRS",281,0)
 K ^TMP("XWBFGP",$J,"TODO",XWBCSRPC),XWBCSRPC,XWBFGTIM
"RTN","XWBPRS",282,0)
 I '$D(^TMP("XWBFGP",$J,"TODO")) D ENDCOVER
"RTN","XWBPRS",283,0)
 Q
"RTN","XWBPRS",284,0)
 ;
"RTN","XWBPRS",285,0)
ENDCOVER ; no more cover sheets to process, so set final values, clean up
"RTN","XWBPRS",286,0)
 N I,NODE,X
"RTN","XWBPRS",287,0)
 S NODE=^TMP("XWBFGP",$J,"NODE")
"RTN","XWBPRS",288,0)
 S $P(^KMPTMP("KMPDT","ORWCV-FT",NODE),U,2)=$H
"RTN","XWBPRS",289,0)
 K XWBCOVER,^TMP("XWBFGP",$J)
"RTN","XWBPRS",290,0)
 ;
"VER")
8.0^22.0
"BLD",1369,6)
^43
**END**
**END**
