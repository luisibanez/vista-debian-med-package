EMERGENCY Released XWB*1.1*62 SEQ #46
Extracted from mail message
**KIDS**:XWB*1.1*62^

**INSTALL NAME**
XWB*1.1*62
"BLD",1508,0)
XWB*1.1*62^RPC BROKER^0^3130909^y
"BLD",1508,1,0)
^^2^2^3130909^^^^
"BLD",1508,1,1,0)
Please see the patch description on FORUM, in the National Patch Module.
"BLD",1508,1,2,0)

"BLD",1508,4,0)
^9.64PA^^
"BLD",1508,6.3)
11
"BLD",1508,"INID")
n
"BLD",1508,"KRN",0)
^9.67PA^9002226^22
"BLD",1508,"KRN",.4,0)
.4
"BLD",1508,"KRN",.401,0)
.401
"BLD",1508,"KRN",.402,0)
.402
"BLD",1508,"KRN",.403,0)
.403
"BLD",1508,"KRN",.5,0)
.5
"BLD",1508,"KRN",.84,0)
.84
"BLD",1508,"KRN",3.6,0)
3.6
"BLD",1508,"KRN",3.8,0)
3.8
"BLD",1508,"KRN",9.2,0)
9.2
"BLD",1508,"KRN",9.8,0)
9.8
"BLD",1508,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",1508,"KRN",9.8,"NM",1,0)
XWBVLL^^0^B17198371
"BLD",1508,"KRN",9.8,"NM",2,0)
XWBRM^^0^B16862663
"BLD",1508,"KRN",9.8,"NM",3,0)
XWBRMX^^0^B7226104
"BLD",1508,"KRN",9.8,"NM","B","XWBRM",2)

"BLD",1508,"KRN",9.8,"NM","B","XWBRMX",3)

"BLD",1508,"KRN",9.8,"NM","B","XWBVLL",1)

"BLD",1508,"KRN",19,0)
19
"BLD",1508,"KRN",19.1,0)
19.1
"BLD",1508,"KRN",101,0)
101
"BLD",1508,"KRN",409.61,0)
409.61
"BLD",1508,"KRN",771,0)
771
"BLD",1508,"KRN",779.2,0)
779.2
"BLD",1508,"KRN",870,0)
870
"BLD",1508,"KRN",8989.51,0)
8989.51
"BLD",1508,"KRN",8989.51,"NM",0)
^9.68A^1^1
"BLD",1508,"KRN",8989.51,"NM",1,0)
XWB62^^0
"BLD",1508,"KRN",8989.51,"NM","B","XWB62",1)

"BLD",1508,"KRN",8989.52,0)
8989.52
"BLD",1508,"KRN",8993,0)
8993
"BLD",1508,"KRN",8994,0)
8994
"BLD",1508,"KRN",9002226,0)
9002226
"BLD",1508,"KRN","B",.4,.4)

"BLD",1508,"KRN","B",.401,.401)

"BLD",1508,"KRN","B",.402,.402)

"BLD",1508,"KRN","B",.403,.403)

"BLD",1508,"KRN","B",.5,.5)

"BLD",1508,"KRN","B",.84,.84)

"BLD",1508,"KRN","B",3.6,3.6)

"BLD",1508,"KRN","B",3.8,3.8)

"BLD",1508,"KRN","B",9.2,9.2)

"BLD",1508,"KRN","B",9.8,9.8)

"BLD",1508,"KRN","B",19,19)

"BLD",1508,"KRN","B",19.1,19.1)

"BLD",1508,"KRN","B",101,101)

"BLD",1508,"KRN","B",409.61,409.61)

"BLD",1508,"KRN","B",771,771)

"BLD",1508,"KRN","B",779.2,779.2)

"BLD",1508,"KRN","B",870,870)

"BLD",1508,"KRN","B",8989.51,8989.51)

"BLD",1508,"KRN","B",8989.52,8989.52)

"BLD",1508,"KRN","B",8993,8993)

"BLD",1508,"KRN","B",8994,8994)

"BLD",1508,"KRN","B",9002226,9002226)

"BLD",1508,"PRE")
XWBP62
"BLD",1508,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",1508,"QUES",0)
^9.62^^
"BLD",1508,"REQB",0)
^9.611^^
"KRN",8989.51,317,-1)
0^1
"KRN",8989.51,317,0)
XWB62^Patch XWB 62 switch^0^^Remove patch 62 security
"KRN",8989.51,317,1)
Y^^Enter 'Yes' to remove patch 62 security
"KRN",8989.51,317,20,0)
^^4^4^3130820^
"KRN",8989.51,317,20,1,0)
This parameter will skip the authentication security that is in patch 62.
"KRN",8989.51,317,20,2,0)
 If patch 62 prevents an application from connecting to VistA, then this
"KRN",8989.51,317,20,3,0)
 parameter should be set to YES.  The default is NO.
"KRN",8989.51,317,20,4,0)

"KRN",8989.51,317,30,0)
^8989.513I^1^1
"KRN",8989.51,317,30,1,0)
1^4.2
"MBREQ")
0
"ORD",20,8989.51)
8989.51;20;;;PAR1E1^XPDTA2;PAR1F1^XPDIA3;PAR1E1^XPDIA3;PAR1F2^XPDIA3;;PAR1DEL^XPDIA3(%)
"ORD",20,8989.51,0)
PARAMETER DEFINITION
"PKG",8,-1)
1^1
"PKG",8,0)
RPC BROKER^XWB^Remote Procedure Call Broker^
"PKG",8,20,0)
^9.402P^^
"PKG",8,22,0)
^9.49I^1^1
"PKG",8,22,1,0)
1.1^2970918^2971120^7
"PKG",8,22,1,"PAH",1,0)
62^3130909^6
"PKG",8,22,1,"PAH",1,1,0)
^^2^2^3130909
"PKG",8,22,1,"PAH",1,1,1,0)
Please see the patch description on FORUM, in the National Patch Module.
"PKG",8,22,1,"PAH",1,1,2,0)

"PRE")
XWBP62
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
4
"RTN","XWBP62")
0^^B2610201^n/a
"RTN","XWBP62",1,0)
XWBP62 ;OIFO-Oakland/RD - Test routine for patch 62  ;05/17/2002  17:41
"RTN","XWBP62",2,0)
 ;;1.1;RPC BROKER;**62**;Mar 21, 2002;Build 11
"RTN","XWBP62",3,0)
 ;Per VHA Directive 6402, this routine should not be modified
"RTN","XWBP62",4,0)
 Q
"RTN","XWBP62",5,0)
EN ;send XML message to test M2M Broker
"RTN","XWBP62",6,0)
 N ADD,PARMS,PORT,MESS,TST,X
"RTN","XWBP62",7,0)
 ;get address and port of listener
"RTN","XWBP62",8,0)
 W !!,"This routine will attempt to send an XML message to the M2M Broker."
"RTN","XWBP62",9,0)
 W !,"You will need to IP Address and Port number for the M2M Broker."
"RTN","XWBP62",10,0)
 R !,"IP Address: ",ADD:300 Q:ADD="^"!(ADD="")
"RTN","XWBP62",11,0)
 R !,"Port Number: ",PORT:300 Q:PORT="^"!(PORT="")
"RTN","XWBP62",12,0)
 ;Set up arrays for connection and message
"RTN","XWBP62",13,0)
 S PARMS("ADDRESS")=ADD,PARMS("PORT")=PORT,PARMS("RETRIES")=3
"RTN","XWBP62",14,0)
 S PARMS("RESULTS")="MESS",PARMS("REQUEST")="TST"
"RTN","XWBP62",15,0)
 S TST(1)="<?xml version=""1.0"" encoding=""utf-8"" ?>"
"RTN","XWBP62",16,0)
 S TST(2)="<vistalink type=""Gov.VA.Med.RPC.Request"" mode=""RPCBroker"" >"
"RTN","XWBP62",17,0)
 S TST(3)="<rpc uri=""XUS DIVISION GET"" >"
"RTN","XWBP62",18,0)
 S TST(4)="<session>"
"RTN","XWBP62",19,0)
 S TST(5)="<duz value=""1"" />"
"RTN","XWBP62",20,0)
 S TST(6)="<security>"
"RTN","XWBP62",21,0)
 S TST(7)="<token value=""AAA"" />"
"RTN","XWBP62",22,0)
 S TST(8)="</security>"
"RTN","XWBP62",23,0)
 S TST(9)="</session>"
"RTN","XWBP62",24,0)
 S TST(10)="</rpc>"
"RTN","XWBP62",25,0)
 S TST(11)="</vistalink>"
"RTN","XWBP62",26,0)
 ;connect to server
"RTN","XWBP62",27,0)
 I '$$OPEN^XWBRL(.PARMS) U IO W !!,"Couldn't open port",! Q
"RTN","XWBP62",28,0)
 S X=$$EXECUTE^XWBVLC(.PARMS)
"RTN","XWBP62",29,0)
 DO CLOSE^%ZISTCP
"RTN","XWBP62",30,0)
 U IO W !!
"RTN","XWBP62",31,0)
 ZW MESS
"RTN","XWBP62",32,0)
 Q
"RTN","XWBRM")
0^2^B16862663^B13950171
"RTN","XWBRM",1,0)
XWBRM ;OIFO-Oakland/REM - M2M Broker Server Request Mgr  ;4/6/06  10:21
"RTN","XWBRM",2,0)
 ;;1.1;RPC BROKER;**28,45,62**;Mar 28, 1997;Build 11
"RTN","XWBRM",3,0)
 ;Per VHA Directive 6402, this routine should not be modified
"RTN","XWBRM",4,0)
 ;
"RTN","XWBRM",5,0)
 QUIT
"RTN","XWBRM",6,0)
 ;
"RTN","XWBRM",7,0)
 ; ---------------------------------------------------------------------
"RTN","XWBRM",8,0)
 ;                             Server Request Manager (SRM)
"RTN","XWBRM",9,0)
 ; ---------------------------------------------------------------------
"RTN","XWBRM",10,0)
 ;
"RTN","XWBRM",11,0)
EN(XWBROOT) ; -- main entry point for SRM
"RTN","XWBRM",12,0)
 NEW XWBOK,XWBOPT,XWBDATA,XWBMODE
"RTN","XWBRM",13,0)
 N XWBM2M ;Flag for M2M requests **M2M
"RTN","XWBRM",14,0)
 SET XWBOK=0,XWBM2M=0
"RTN","XWBRM",15,0)
 ;
"RTN","XWBRM",16,0)
 ; -- parse the xml
"RTN","XWBRM",17,0)
 SET XWBOPT=""
"RTN","XWBRM",18,0)
 DO EN^XWBRMX(XWBROOT,.XWBOPT,.XWBDATA)
"RTN","XWBRM",19,0)
 S XWBMODE=$G(XWBDATA("MODE"))
"RTN","XWBRM",20,0)
 ;access/verify RPC must be within first 2 calls P62
"RTN","XWBRM",21,0)
 I $G(XWBAVC) D  Q:XWBAVC>1 '(XWBAVC=3)
"RTN","XWBRM",22,0)
 . Q:$G(XWBDATA("URI"))="XUS SIGNON SETUP"
"RTN","XWBRM",23,0)
 . I $G(XWBDATA("URI"))="XUS AV CODE" D EN^XWBRPC(.XWBDATA) S XWBAVC=2 Q
"RTN","XWBRM",24,0)
 . S XWBCODES(2)="",XWBCODES=$G(XWBCODES)+1,XWBAVC=3
"RTN","XWBRM",25,0)
 . D SECERR(.XWBCODES)
"RTN","XWBRM",26,0)
 . Q
"RTN","XWBRM",27,0)
 ;removed in P62
"RTN","XWBRM",28,0)
 ;I $G(XWBDATA("URI"))="XUS GET VISITOR" D EN^XWBRPC(.XWBDATA) S XWBOK=1 S:'$D(DUZ) XWBSTOP=1 Q 1
"RTN","XWBRM",29,0)
 ;Break off to RCPBroker **M2M
"RTN","XWBRM",30,0)
 IF $G(XWBDATA("MODE"))="RPCBroker" D RPC^XWBM2MS(.XWBDATA) SET XWBSTOP=0
"RTN","XWBRM",31,0)
 ; -- single call processing
"RTN","XWBRM",32,0)
 IF $G(XWBDATA("MODE"),"single call")="single call" SET XWBSTOP=1
"RTN","XWBRM",33,0)
 ;
"RTN","XWBRM",34,0)
 ; -- check if app defined
"RTN","XWBRM",35,0)
 IF $G(XWBDATA("APP"))="" DO RMERR(1) SET XWBOK=0 GOTO ENQ
"RTN","XWBRM",36,0)
 ;
"RTN","XWBRM",37,0)
 ; -- process close request
"RTN","XWBRM",38,0)
 IF $G(XWBDATA("APP"))="CLOSE" DO  SET XWBOK=0 GOTO ENQ
"RTN","XWBRM",39,0)
 . D:$G(DUZ) LOGOUT^XUSRB ;**M2M -Logout user and cleanup
"RTN","XWBRM",40,0)
 . DO RESPONSE^XWBVL()
"RTN","XWBRM",41,0)
 . SET XWBSTOP=1
"RTN","XWBRM",42,0)
 ;
"RTN","XWBRM",43,0)
 ; -- do security checks
"RTN","XWBRM",44,0)
 IF $G(XWBDATA("MODE"))'="RPCBroker",'$$SECCHK() SET XWBOK=0 GOTO ENQ
"RTN","XWBRM",45,0)
 ;
"RTN","XWBRM",46,0)
 ; -- call app to write to socket
"RTN","XWBRM",47,0)
 IF $G(XWBDATA("APP"))="RPC" DO EN^XWBRPC(.XWBDATA) SET XWBOK=1
"RTN","XWBRM",48,0)
 ;
"RTN","XWBRM",49,0)
ENQ ;
"RTN","XWBRM",50,0)
 QUIT XWBOK
"RTN","XWBRM",51,0)
 ;
"RTN","XWBRM",52,0)
 ; ---------------------------------------------------------------------
"RTN","XWBRM",53,0)
 ;
"RTN","XWBRM",54,0)
SECCHK() ; -- do security checks  (no real checks at this time)
"RTN","XWBRM",55,0)
 NEW XWBCODES
"RTN","XWBRM",56,0)
 ;
"RTN","XWBRM",57,0)
 ; -- is token valid
"RTN","XWBRM",58,0)
 IF '$$CHKTOKEN($G(XWBDATA("SECTOKEN"))) SET XWBCODES(1)="",XWBCODES=$G(XWBCODES)+1
"RTN","XWBRM",59,0)
 ;
"RTN","XWBRM",60,0)
 ; -- is DUZ valid
"RTN","XWBRM",61,0)
 IF '$$CHKDUZ($G(XWBDATA("DUZ"))) SET XWBCODES(2)="",XWBCODES=$G(XWBCODES)+1
"RTN","XWBRM",62,0)
 ;
"RTN","XWBRM",63,0)
 ; -- if security errors then send error response
"RTN","XWBRM",64,0)
 IF $G(XWBCODES) D SECERR(.XWBCODES)
"RTN","XWBRM",65,0)
 ;
"RTN","XWBRM",66,0)
 QUIT '+$G(XWBCODES)
"RTN","XWBRM",67,0)
 ;
"RTN","XWBRM",68,0)
CHKTOKEN(XWBTOKEN) ; -- do check against token for validity
"RTN","XWBRM",69,0)
 ; -- // TODO: Need to check into how we might use XUS1B and related code in Kernel Sign-On (ESSO)
"RTN","XWBRM",70,0)
 NEW XWBINVAL
"RTN","XWBRM",71,0)
 SET XWBINVAL="#UNKNOWN#"
"RTN","XWBRM",72,0)
 IF $G(XWBTOKEN,XWBINVAL)=XWBINVAL QUIT 0
"RTN","XWBRM",73,0)
 QUIT 1
"RTN","XWBRM",74,0)
 ;
"RTN","XWBRM",75,0)
CHKDUZ(XWBDUZ) ; -- do check against DUZ for validity
"RTN","XWBRM",76,0)
 ; -- // TODO: Need to check into how we might use XUS1B and related code in Kernel Sign-On (ESSO)
"RTN","XWBRM",77,0)
 NEW XWBINVAL
"RTN","XWBRM",78,0)
 SET XWBINVAL="#UNKNOWN#"
"RTN","XWBRM",79,0)
 IF $G(XWBDUZ,XWBINVAL)=XWBINVAL QUIT 0
"RTN","XWBRM",80,0)
 IF '$D(^VA(200,+XWBDUZ,0)) QUIT 0
"RTN","XWBRM",81,0)
 QUIT 1
"RTN","XWBRM",82,0)
 ;
"RTN","XWBRM",83,0)
 ; ---------------------------------------------------------------------
"RTN","XWBRM",84,0)
 ;                 Request Manager and Security Error Handlers
"RTN","XWBRM",85,0)
 ; ---------------------------------------------------------------------
"RTN","XWBRM",86,0)
RMERR(XWBCODE) ; -- send request error message
"RTN","XWBRM",87,0)
 NEW XWBDAT,XWBMSG
"RTN","XWBRM",88,0)
 SET XWBMSG=$P($TEXT(RMERRS+XWBCODE),";;",2)
"RTN","XWBRM",89,0)
 SET XWBDAT("MESSAGE TYPE")="Gov.VA.Med.Foundations.Errors"
"RTN","XWBRM",90,0)
 SET XWBDAT("ERRORS",1,"CODE")=1
"RTN","XWBRM",91,0)
 SET XWBDAT("ERRORS",1,"ERROR TYPE")="request manager"
"RTN","XWBRM",92,0)
 SET XWBDAT("ERRORS",1,"CDATA")=1
"RTN","XWBRM",93,0)
 SET XWBDAT("ERRORS",1,"MESSAGE",1)="An Request Manager error occurred: "_XWBMSG
"RTN","XWBRM",94,0)
 DO ERROR^XWBUTL(.XWBDAT)
"RTN","XWBRM",95,0)
 QUIT
"RTN","XWBRM",96,0)
 ;
"RTN","XWBRM",97,0)
RMERRS ; -- application errors
"RTN","XWBRM",98,0)
 ;;No valid application specified
"RTN","XWBRM",99,0)
 ;;
"RTN","XWBRM",100,0)
 ;
"RTN","XWBRM",101,0)
SECERR(XWBCODES) ; -- send security error message and log
"RTN","XWBRM",102,0)
 NEW XWBDAT,XWBCNT,XWBCODE
"RTN","XWBRM",103,0)
 SET XWBCNT=0
"RTN","XWBRM",104,0)
 SET XWBDAT("MESSAGE TYPE")="Gov.VA.Med.Foundations.Security.Errors"
"RTN","XWBRM",105,0)
 SET XWBCODE=0 FOR  SET XWBCODE=$O(XWBCODES(XWBCODE)) Q:'XWBCODE  DO
"RTN","XWBRM",106,0)
 . SET XWBCNT=XWBCNT+1
"RTN","XWBRM",107,0)
 . SET XWBDAT("ERRORS",XWBCNT,"CODE")=XWBCODE
"RTN","XWBRM",108,0)
 . SET XWBDAT("ERRORS",XWBCNT,"ERROR TYPE")="security"
"RTN","XWBRM",109,0)
 . SET XWBDAT("ERRORS",XWBCNT,"MESSAGE",1)=$P($TEXT(SECERRS+XWBCODE),";;",2)
"RTN","XWBRM",110,0)
 . SET XWBDAT("ERRORS",XWBCNT,"CDATA")=0
"RTN","XWBRM",111,0)
 . D XTMP
"RTN","XWBRM",112,0)
 DO ERROR^XWBUTL(.XWBDAT)
"RTN","XWBRM",113,0)
 QUIT
"RTN","XWBRM",114,0)
 ;
"RTN","XWBRM",115,0)
SECERRS ; -- security errors
"RTN","XWBRM",116,0)
 ;;Security token is either invalid or was not passed.
"RTN","XWBRM",117,0)
 ;;DUZ is either invalid or was not passed.
"RTN","XWBRM",118,0)
 ;;
"RTN","XWBRM",119,0)
 ;
"RTN","XWBRM",120,0)
XTMP ;
"RTN","XWBRM",121,0)
 ;reset expiration date to T+7 on security log
"RTN","XWBRM",122,0)
 S:'$G(^XTMP("XWBSEC"_DT,0)) ^(0)=$$FMADD^XLFDT(DT,7)_U_DT_U_0
"RTN","XWBRM",123,0)
 S X=$P(^XTMP("XWBSEC"_DT,0),U,3)+1,$P(^(0),U,3)=X,^(X)=XWBCODE_U_$J_U_$G(IO("IP"))
"RTN","XWBRM",124,0)
 Q
"RTN","XWBRMX")
0^3^B7226104^B7578330
"RTN","XWBRMX",1,0)
XWBRMX ;OIFO-Oakland/REM - M2M Broker Server Request Mgr  ;05/17/2002  17:41
"RTN","XWBRMX",2,0)
 ;;1.1;RPC BROKER;**28,62**;Mar 21, 2002;Build 11
"RTN","XWBRMX",3,0)
 ;Per VHA Directive 6402, this routine should not be modified
"RTN","XWBRMX",4,0)
 ;
"RTN","XWBRMX",5,0)
 QUIT
"RTN","XWBRMX",6,0)
 ;----------------------------------------------------------------------
"RTN","XWBRMX",7,0)
 ;
"RTN","XWBRMX",8,0)
 ;    Request Manager -Parse XML Requests using SAX interface
"RTN","XWBRMX",9,0)
 ; 
"RTN","XWBRMX",10,0)
 ;----------------------------------------------------------------------
"RTN","XWBRMX",11,0)
 ;
"RTN","XWBRMX",12,0)
EN(DOC,XWBOPT,XWBDATA) ; -- Parse XML uses SAX parser
"RTN","XWBRMX",13,0)
 N XWBCBK,XWBINVAL
"RTN","XWBRMX",14,0)
 SET XWBINVAL="#UNKNOWN#"
"RTN","XWBRMX",15,0)
 ;comment out the next 2 lines, P62
"RTN","XWBRMX",16,0)
 ;SET XWBDATA("DUZ")=XWBINVAL ;**M2M don't need duz
"RTN","XWBRMX",17,0)
 ;SET XWBDATA("SECTOKEN")=XWBINVAL
"RTN","XWBRMX",18,0)
 DO SET(.XWBCBK)
"RTN","XWBRMX",19,0)
 DO EN^MXMLPRSE(DOC,.XWBCBK,.XWBOPT)
"RTN","XWBRMX",20,0)
ENQ Q
"RTN","XWBRMX",21,0)
 ;
"RTN","XWBRMX",22,0)
SET(CBK) ; -- set the event interface entry points
"RTN","XWBRMX",23,0)
 SET XWBCBK("STARTELEMENT")="ELEST^XWBRMX"
"RTN","XWBRMX",24,0)
 SET XWBCBK("ENDELEMENT")="ELEND^XWBRMX"
"RTN","XWBRMX",25,0)
 SET XWBCBK("CHARACTERS")="CHR^XWBRMX"
"RTN","XWBRMX",26,0)
 QUIT
"RTN","XWBRMX",27,0)
 ;
"RTN","XWBRMX",28,0)
ESC(X) ; -- convert special characters to \x format
"RTN","XWBRMX",29,0)
 Q X
"RTN","XWBRMX",30,0)
 ;
"RTN","XWBRMX",31,0)
 N C,Y,Z
"RTN","XWBRMX",32,0)
 F Z=1:1 S C=$E(X,Z) Q:C=""  D
"RTN","XWBRMX",33,0)
 .S Y=$TR(C,$C(9,10,13,92),"tnc")
"RTN","XWBRMX",34,0)
 .S:C'=Y $E(X,Z)="" ;$S(Y="":"\\",1:"\"_Y),Z=Z+1
"RTN","XWBRMX",35,0)
 Q X
"RTN","XWBRMX",36,0)
 ;
"RTN","XWBRMX",37,0)
ELEST(ELE,ATR) ; -- element start
"RTN","XWBRMX",38,0)
 IF ELE="vistalink",$G(ATR("type"))="Gov.VA.Med.RPC.Request" DO
"RTN","XWBRMX",39,0)
 . SET XWBDATA("APP")="RPC"
"RTN","XWBRMX",40,0)
 . ;SET XWBDATA("MODE")=$G(ATR("mode"),"singleton") ;Comment out for M2M
"RTN","XWBRMX",41,0)
 . SET XWBDATA("MODE")=$G(ATR("mode"),"RPCBroker") ;M2M change to RPCBroker
"RTN","XWBRMX",42,0)
 ;
"RTN","XWBRMX",43,0)
 IF ELE="vistalink",$G(ATR("type"))="Gov.VA.Med.Foundations.CloseSocketRequest" DO  QUIT
"RTN","XWBRMX",44,0)
 . SET XWBDATA("APP")="CLOSE"
"RTN","XWBRMX",45,0)
 . SET XWBDATA("MODE")=$G(ATR("mode"),"single call")
"RTN","XWBRMX",46,0)
 ;
"RTN","XWBRMX",47,0)
 IF ELE="session" SET XWBSESS=1 QUIT
"RTN","XWBRMX",48,0)
 ; -- set session vars here so apps can use during xml parsing
"RTN","XWBRMX",49,0)
 ;
"RTN","XWBRMX",50,0)
 ;*M2M - check for RPCBroker
"RTN","XWBRMX",51,0)
 IF $G(XWBSESS) DO  QUIT
"RTN","XWBRMX",52,0)
 . ;IF ELE="duz" SET (DUZ,XWBDATA("DUZ"))=$G(ATR("value")) IF +DUZ=0 SET (DUZ,XWBDATA("DUZ"))=XWBINVAL QUIT ;P62
"RTN","XWBRMX",53,0)
 . IF $G(XWBSEC) DO  QUIT
"RTN","XWBRMX",54,0)
 . . IF ELE="token" SET XWBDATA("SECTOKEN")=$G(ATR("value")) IF XWBDATA("SECTOKEN")="" SET XWBDATA("SECTOKEN")=XWBINVAL QUIT
"RTN","XWBRMX",55,0)
 . IF ELE="security" SET XWBSEC=1 QUIT
"RTN","XWBRMX",56,0)
 ;
"RTN","XWBRMX",57,0)
 ; -- // TODO: make dynamic off RPC app config
"RTN","XWBRMX",58,0)
 IF $GET(XWBDATA("APP"))="RPC" DO ELEST^XWBRPC(.ELE,.ATR)
"RTN","XWBRMX",59,0)
 Q
"RTN","XWBRMX",60,0)
 ;
"RTN","XWBRMX",61,0)
ELEND(ELE) ; -- element end
"RTN","XWBRMX",62,0)
 IF ELE="session" KILL XWBSESS QUIT
"RTN","XWBRMX",63,0)
 IF $G(XWBSESS) DO  QUIT
"RTN","XWBRMX",64,0)
 . IF ELE="security" KILL XWBSEC
"RTN","XWBRMX",65,0)
 ;
"RTN","XWBRMX",66,0)
 ;
"RTN","XWBRMX",67,0)
 ; -- // TODO: make dynamic off RPC app config
"RTN","XWBRMX",68,0)
 IF $G(XWBDATA("APP"))="RPC" DO ELEND^XWBRPC(.ELE)
"RTN","XWBRMX",69,0)
 Q
"RTN","XWBRMX",70,0)
 ;
"RTN","XWBRMX",71,0)
CHR(TXT) ;
"RTN","XWBRMX",72,0)
 ; -- // TODO:  make dynamic off RPC app config
"RTN","XWBRMX",73,0)
 IF $G(XWBDATA("APP"))="RPC" DO CHR^XWBRPC(.TXT)
"RTN","XWBRMX",74,0)
 Q
"RTN","XWBRMX",75,0)
 ;
"RTN","XWBVLL")
0^1^B17198371^B15486790
"RTN","XWBVLL",1,0)
XWBVLL ;OIFO-Oakland/REM - M2M Broker Listener  ;12/29/2010
"RTN","XWBVLL",2,0)
 ;;1.1;RPC BROKER;**28,41,34,62**;Mar 28, 1997;Build 11
"RTN","XWBVLL",3,0)
 ;Per VHA Directive 6402, this routine should not be modified
"RTN","XWBVLL",4,0)
 ;
"RTN","XWBVLL",5,0)
 QUIT
"RTN","XWBVLL",6,0)
 ;
"RTN","XWBVLL",7,0)
 ;p41 - fixed infinite loop bug in SYSERR.
"RTN","XWBVLL",8,0)
 ;    - new Cache/VMS tcpip entry point, called from XWBSERVER_START.COM file.
"RTN","XWBVLL",9,0)
 ;p34 - added "BrokerM2M" in message type - SYSERR.
"RTN","XWBVLL",10,0)
 ;    - removed the quotes (") after 'M:' - SYSERRS.
"RTN","XWBVLL",11,0)
 ;    - new entry point to job off the listener for Cashe- STRT^XWBVLL(PORT).
"RTN","XWBVLL",12,0)
 ;    - clear locks when error occurs - SYSERR.
"RTN","XWBVLL",13,0)
 ;    - halt for read/write errors - SYSERR
"RTN","XWBVLL",14,0)
 ; 
"RTN","XWBVLL",15,0)
START(SOCKET) ;Entry point for Cache/NT
"RTN","XWBVLL",16,0)
 ;May be called directly to start the listener.
"RTN","XWBVLL",17,0)
 ;SOCKET -is the port# to start the listener on.
"RTN","XWBVLL",18,0)
 I ^%ZOSF("OS")'["OpenM" Q  ;Quits if not a Cache OS.
"RTN","XWBVLL",19,0)
 D LISTEN^%ZISTCPS(SOCKET,"SPAWN^XWBVLL")
"RTN","XWBVLL",20,0)
 Q
"RTN","XWBVLL",21,0)
 ;
"RTN","XWBVLL",22,0)
UCX ;Old entry point NOT used anymore.  *p55*
"RTN","XWBVLL",23,0)
 ;DMS/VMS UCX entry point, called from XWBSERVER_START.COM file,
"RTN","XWBVLL",24,0)
 ;listener,  % = <input variable>
"RTN","XWBVLL",25,0)
 ;IF $G(%)="" DO ^%ZTER QUIT
"RTN","XWBVLL",26,0)
 SET (IO,IO(0))="SYS$NET"
"RTN","XWBVLL",27,0)
 ; **VMS specific code, need to share device**
"RTN","XWBVLL",28,0)
 OPEN IO:(TCPDEV):60 ELSE  SET ^TMP("XWB DSM CONNECT FAILURE",$H)="" QUIT
"RTN","XWBVLL",29,0)
 USE IO
"RTN","XWBVLL",30,0)
 DO SPAWN
"RTN","XWBVLL",31,0)
 QUIT
"RTN","XWBVLL",32,0)
 ;
"RTN","XWBVLL",33,0)
STRT(PORT) ;*p34-This entry is called from option "XWB M2M CACHE LISTENER" and jobs off the listener for Cashe/NT.  Will call START.
"RTN","XWBVLL",34,0)
 ;PORT -is the port# to start the listener on.
"RTN","XWBVLL",35,0)
 J START^XWBVLL(PORT)::5 ;Used in place of TaskMan
"RTN","XWBVLL",36,0)
 Q
"RTN","XWBVLL",37,0)
 ;
"RTN","XWBVLL",38,0)
CACHEVMS ;Cache/VMS tcpip entry point, called from XWBSERVER_START.COM fLle *p41*
"RTN","XWBVLL",39,0)
 ;Update the SET (IO)="SYS$NET" *p55*
"RTN","XWBVLL",40,0)
 SET (IO,IO(0))=$S($ZV["VMS":"SYS$NET",1:$P) ;Support for both VMS/TCPIP and Linux/xinetd *p55*
"RTN","XWBVLL",41,0)
 ; **CACHE/VMS specific code**
"RTN","XWBVLL",42,0)
 OPEN IO::60 ELSE  SET ^TMP("XWB DSM CONNECT FAILURE",$H)="" QUIT
"RTN","XWBVLL",43,0)
 X "U IO:(::""-M"")" ;Packet mode like DSM
"RTN","XWBVLL",44,0)
 DO SPAWN
"RTN","XWBVLL",45,0)
 QUIT
"RTN","XWBVLL",46,0)
 ;
"RTN","XWBVLL",47,0)
SPAWN ; -- spawned process
"RTN","XWBVLL",48,0)
 NEW U,DTIME,DT,XWBROOT,XWBAVC,XWBSTOP
"RTN","XWBVLL",49,0)
 SET U="^",DUZ=0,DUZ(0)="",DTIME=900,DT=$$DT^XLFDT(),XWBROOT=$NA(^TMP("XWBVLL",$J)),XWBSTOP=0
"RTN","XWBVLL",50,0)
 ;
"RTN","XWBVLL",51,0)
 ; -- initialize tcp processing variables
"RTN","XWBVLL",52,0)
 DO INIT^XWBRL
"RTN","XWBVLL",53,0)
 ;
"RTN","XWBVLL",54,0)
 ; -- set error trap
"RTN","XWBVLL",55,0)
 NEW $ESTACK,$ETRAP S $ETRAP="D SYSERR^XWBVLL"
"RTN","XWBVLL",56,0)
 ;Get IP from client
"RTN","XWBVLL",57,0)
 S IO("IP")=$$GETPEER^%ZOSV()
"RTN","XWBVLL",58,0)
 ; -- change job name if possible
"RTN","XWBVLL",59,0)
 ;DO SETNM^%ZOSV("XWBSERVER: Server") ;**M2M - comment out for now
"RTN","XWBVLL",60,0)
 DO SAVDEV^%ZISUTL("XWBM2M SERVER") ;**M2M save off server IO
"RTN","XWBVLL",61,0)
 S XWBDEBUG=$$GET^XPAR("SYS","XWBDEBUG",,"Q")
"RTN","XWBVLL",62,0)
 I XWBDEBUG D LOG^XWBRPC("Server Start @ "_$$NOW^XLFDT)
"RTN","XWBVLL",63,0)
 ;check that XUS AV CODE is the 1st or 2nd RPC call P62
"RTN","XWBVLL",64,0)
 I '$$GET^XPAR("SYS","XWB62",1,"Q") F XWBAVC=1:1:2 D NXTCALL Q:DUZ
"RTN","XWBVLL",65,0)
 S XWBAVC=0
"RTN","XWBVLL",66,0)
 ; process rest of messages; loop until told to stop
"RTN","XWBVLL",67,0)
 D
"RTN","XWBVLL",68,0)
 .I '$$GET^XPAR("SYS","XWB62",1,"Q") Q:'DUZ
"RTN","XWBVLL",69,0)
 .F  DO NXTCALL QUIT:XWBSTOP
"RTN","XWBVLL",70,0)
 ;
"RTN","XWBVLL",71,0)
 ; -- final/clean tcp processing variables
"RTN","XWBVLL",72,0)
 D RMDEV^%ZISUTL("XWBM2M SERVER") ;**M2M remove server IO
"RTN","XWBVLL",73,0)
 Q
"RTN","XWBVLL",74,0)
 ;
"RTN","XWBVLL",75,0)
NXTCALL ; -- do next call
"RTN","XWBVLL",76,0)
 NEW X,XWBREAD,XWBTO,XWBFIRST,XWBOK,XWBRL,BUG
"RTN","XWBVLL",77,0)
 ;
"RTN","XWBVLL",78,0)
 ; -- setup environment variables
"RTN","XWBVLL",79,0)
 SET XWBREAD=20,XWBTO=36000,XWBFIRST=1
"RTN","XWBVLL",80,0)
 ;
"RTN","XWBVLL",81,0)
 ; -- clean intake global - root is request data
"RTN","XWBVLL",82,0)
 KILL @XWBROOT
"RTN","XWBVLL",83,0)
 ;
"RTN","XWBVLL",84,0)
 ; -- set parameters for RawLink
"RTN","XWBVLL",85,0)
 SET XWBRL("TIME OUT")=36000
"RTN","XWBVLL",86,0)
 SET XWBRL("READ CHARACTERS")=20
"RTN","XWBVLL",87,0)
 SET XWBRL("FIRST READ")=1
"RTN","XWBVLL",88,0)
 SET XWBRL("STORE")=XWBROOT
"RTN","XWBVLL",89,0)
 SET XWBRL("STOP FLAG")=XWBSTOP
"RTN","XWBVLL",90,0)
 ;
"RTN","XWBVLL",91,0)
 ; -- read from socket
"RTN","XWBVLL",92,0)
 SET XWBOK=$$READ^XWBRL(XWBROOT,.XWBREAD,.XWBTO,.XWBFIRST,.XWBSTOP)
"RTN","XWBVLL",93,0)
 ;
"RTN","XWBVLL",94,0)
 ;**TESTING **REM
"RTN","XWBVLL",95,0)
 ;For debugging - hard set ^TMP(..."DEBUG") and ^TMP(..."CNT") to 1
"RTN","XWBVLL",96,0)
 I $G(^TMP("XWBM2M","DEBUG")) D
"RTN","XWBVLL",97,0)
 . S XWBCNT=(^TMP("XWBM2M","CNT"))+1
"RTN","XWBVLL",98,0)
 . M ^TMP("XWBM2MSV","REQUEST",XWBCNT)=^TMP("XWBVLL",$J)
"RTN","XWBVLL",99,0)
 . S ^TMP("XWBM2M","CNT")=XWBCNT
"RTN","XWBVLL",100,0)
 . Q
"RTN","XWBVLL",101,0)
 ;
"RTN","XWBVLL",102,0)
 ;**TESING **RWF
"RTN","XWBVLL",103,0)
 I $G(XWBDEBUG) D
"RTN","XWBVLL",104,0)
 . N CNT
"RTN","XWBVLL",105,0)
 . S CNT=$G(^TMP("XWBM2ML",$J))+1,^($J)=CNT
"RTN","XWBVLL",106,0)
 . M ^TMP("XWBM2ML",$J,CNT)=^TMP("XWBVLL",$J)
"RTN","XWBVLL",107,0)
 . Q
"RTN","XWBVLL",108,0)
 ;
"RTN","XWBVLL",109,0)
 IF 'XWBOK GOTO NXTCALLQ
"RTN","XWBVLL",110,0)
 ;
"RTN","XWBVLL",111,0)
 ; -- call request manager           
"RTN","XWBVLL",112,0)
 SET XWBOK=$$EN^XWBRM(XWBROOT)
"RTN","XWBVLL",113,0)
 ; 
"RTN","XWBVLL",114,0)
NXTCALLQ ; -- exit
"RTN","XWBVLL",115,0)
 ;
"RTN","XWBVLL",116,0)
 QUIT
"RTN","XWBVLL",117,0)
 ;
"RTN","XWBVLL",118,0)
 ; ---------------------------------------------------------------------
"RTN","XWBVLL",119,0)
 ;                                System Error Handler
"RTN","XWBVLL",120,0)
 ; ---------------------------------------------------------------------
"RTN","XWBVLL",121,0)
SYSERR ; -- send system error message
"RTN","XWBVLL",122,0)
 ;p41-don't new $Etrap, it was causing infinite loop.
"RTN","XWBVLL",123,0)
 ;p34-added "BrokerM2M" in message type in SYSERR.
"RTN","XWBVLL",124,0)
 ;   -halt for read/write errors
"RTN","XWBVLL",125,0)
 NEW XWBDAT,XWBMSG ;,$ETRAP ;*p41
"RTN","XWBVLL",126,0)
 S $ETRAP="D ^%ZTER HALT" ;If we get an error in the error handler just Halt
"RTN","XWBVLL",127,0)
 SET XWBMSG=$$EC^%ZOSV ;Get the error code
"RTN","XWBVLL",128,0)
 D ^%ZTER ;Save off the error
"RTN","XWBVLL",129,0)
 SET XWBDAT("MESSAGE TYPE")="Gov.VA.Med.BrokerM2M.Errors" ;*34
"RTN","XWBVLL",130,0)
 SET XWBDAT("ERRORS",1,"CODE")=1
"RTN","XWBVLL",131,0)
 SET XWBDAT("ERRORS",1,"ERROR TYPE")="system"
"RTN","XWBVLL",132,0)
 SET XWBDAT("ERRORS",1,"CDATA")=1
"RTN","XWBVLL",133,0)
 SET XWBDAT("ERRORS",1,"MESSAGE",1)=$P($TEXT(SYSERRS+1),";;",2)_XWBMSG
"RTN","XWBVLL",134,0)
 ;*p34-will halt for read/write errors
"RTN","XWBVLL",135,0)
 I XWBMSG["<READ>" HALT
"RTN","XWBVLL",136,0)
 DO ERROR^XWBUTL(.XWBDAT)
"RTN","XWBVLL",137,0)
 D UNWIND^%ZTER ;Return to NXTCALL loop
"RTN","XWBVLL",138,0)
 L  ;Clear locks *p34
"RTN","XWBVLL",139,0)
 Q
"RTN","XWBVLL",140,0)
 ;
"RTN","XWBVLL",141,0)
SYSERRS ; -- application errors
"RTN","XWBVLL",142,0)
 ;*p34-removed the quotes (") after 'M:'
"RTN","XWBVLL",143,0)
 ;;A system error occurred in M:
"VER")
8.0^22.0
"BLD",1508,6)
^46
**END**
**END**
