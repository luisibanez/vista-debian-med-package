Released IB*2*438 SEQ #417
Extracted from mail message
**KIDS**:IB*2.0*438^

**INSTALL NAME**
IB*2.0*438
"BLD",8170,0)
IB*2.0*438^INTEGRATED BILLING^0^3110708^y
"BLD",8170,4,0)
^9.64PA^365.1^12
"BLD",8170,4,2,0)
2
"BLD",8170,4,2,2,0)
^9.641^2.32292^4
"BLD",8170,4,2,2,2.312,0)
INSURANCE TYPE  (sub-file)
"BLD",8170,4,2,2,2.312,1,0)
^9.6411^3.14^2
"BLD",8170,4,2,2,2.312,1,3.13,0)
INSURED'S COUNTRY
"BLD",8170,4,2,2,2.312,1,3.14,0)
INSURED'S COUNTRY SUBDIVISION
"BLD",8170,4,2,2,2.322,0)
ELIGIBILITY/BENEFIT  (sub-file)
"BLD",8170,4,2,2,2.322,1,0)
^9.6411^.04^2
"BLD",8170,4,2,2,2.322,1,.04,0)
*SERVICE TYPE
"BLD",8170,4,2,2,2.322,1,4.09,0)
SUBDIVISION CODE
"BLD",8170,4,2,2,2.3229,0)
SUBSCRIBER ADDITIONAL INFO  (sub-file)
"BLD",8170,4,2,2,2.3229,1,0)
^9.6411^.03^1
"BLD",8170,4,2,2,2.3229,1,.03,0)
*DIAGNOSIS
"BLD",8170,4,2,2,2.32292,0)
SERVICE TYPES  (sub-file)
"BLD",8170,4,2,2,2.32292,1,0)
^9.6411^^
"BLD",8170,4,2,222)
y^y^p^^^^n^^n
"BLD",8170,4,2,224)

"BLD",8170,4,350.9,0)
350.9
"BLD",8170,4,350.9,2,0)
^9.641^350.9^1
"BLD",8170,4,350.9,2,350.9,0)
IB SITE PARAMETERS  (File-top level)
"BLD",8170,4,350.9,2,350.9,1,0)
^9.6411^61.09^20
"BLD",8170,4,350.9,2,350.9,1,60.01,0)
DEFAULT SERVICE TYPE CODE 1
"BLD",8170,4,350.9,2,350.9,1,60.02,0)
DEFAULT SERVICE TYPE CODE 2
"BLD",8170,4,350.9,2,350.9,1,60.03,0)
DEFAULT SERVICE TYPE CODE 3
"BLD",8170,4,350.9,2,350.9,1,60.04,0)
DEFAULT SERVICE TYPE CODE 4
"BLD",8170,4,350.9,2,350.9,1,60.05,0)
DEFAULT SERVICE TYPE CODE 5
"BLD",8170,4,350.9,2,350.9,1,60.06,0)
DEFAULT SERVICE TYPE CODE 6
"BLD",8170,4,350.9,2,350.9,1,60.07,0)
DEFAULT SERVICE TYPE CODE 7
"BLD",8170,4,350.9,2,350.9,1,60.08,0)
DEFAULT SERVICE TYPE CODE 8
"BLD",8170,4,350.9,2,350.9,1,60.09,0)
DEFAULT SERVICE TYPE CODE 9
"BLD",8170,4,350.9,2,350.9,1,60.1,0)
DEFAULT SERVICE TYPE CODE 10
"BLD",8170,4,350.9,2,350.9,1,60.11,0)
DEFAULT SERVICE TYPE CODE 11
"BLD",8170,4,350.9,2,350.9,1,61.01,0)
SITE SELECTED SERVICE CODE 1
"BLD",8170,4,350.9,2,350.9,1,61.02,0)
SITE SELECTED SERVICE CODE 2
"BLD",8170,4,350.9,2,350.9,1,61.03,0)
SITE SELECTED SERIVCE CODE 3
"BLD",8170,4,350.9,2,350.9,1,61.04,0)
SITE SELECTED SERVICE CODE 4
"BLD",8170,4,350.9,2,350.9,1,61.05,0)
SITE SELECTED SERVICE CODE 5
"BLD",8170,4,350.9,2,350.9,1,61.06,0)
SITE SELECTED SERVICE CODE 6
"BLD",8170,4,350.9,2,350.9,1,61.07,0)
SITE SELECTED SERVICE CODE 7
"BLD",8170,4,350.9,2,350.9,1,61.08,0)
SITE SELECTED SERVICE CODE 8
"BLD",8170,4,350.9,2,350.9,1,61.09,0)
SITE SELECTED SERVICE CODE 9
"BLD",8170,4,350.9,222)
y^y^p^^^^n^^n
"BLD",8170,4,350.9,224)

"BLD",8170,4,353.1,0)
353.1
"BLD",8170,4,353.1,222)
y^y^f^^n^^y^o^n
"BLD",8170,4,355.33,0)
355.33
"BLD",8170,4,355.33,2,0)
^9.641^355.33^1
"BLD",8170,4,355.33,2,355.33,0)
INSURANCE BUFFER  (File-top level)
"BLD",8170,4,355.33,2,355.33,1,0)
^9.6411^80.2^29
"BLD",8170,4,355.33,2,355.33,1,.16,0)
REAL TIME VERIFICATION
"BLD",8170,4,355.33,2,355.33,1,20.01,0)
INSURANCE COMPANY NAME
"BLD",8170,4,355.33,2,355.33,1,40.02,0)
GROUP NAME
"BLD",8170,4,355.33,2,355.33,1,40.03,0)
GROUP NUMBER
"BLD",8170,4,355.33,2,355.33,1,60.01,0)
PATIENT NAME
"BLD",8170,4,355.33,2,355.33,1,60.04,0)
SUBSCRIBER ID
"BLD",8170,4,355.33,2,355.33,1,60.08,0)
INSURED'S DOB
"BLD",8170,4,355.33,2,355.33,1,62.07,0)
SUBSCRIBER ADDRESS COUNTRY
"BLD",8170,4,355.33,2,355.33,1,62.08,0)
SUBSCRIBER ADDRESS SUBDIVISION
"BLD",8170,4,355.33,2,355.33,1,80.01,0)
INQ SERVICE TYPE CODE 1
"BLD",8170,4,355.33,2,355.33,1,80.02,0)
INQ SERVICE TYPE CODE 2
"BLD",8170,4,355.33,2,355.33,1,80.03,0)
INQ SERVICE TYPE CODE 3
"BLD",8170,4,355.33,2,355.33,1,80.04,0)
INQ SERVICE TYPE CODE 4
"BLD",8170,4,355.33,2,355.33,1,80.05,0)
INQ SERVICE TYPE CODE 5
"BLD",8170,4,355.33,2,355.33,1,80.06,0)
INQ SERVICE TYPE CODE 6
"BLD",8170,4,355.33,2,355.33,1,80.07,0)
INQ SERVICE TYPE CODE 7
"BLD",8170,4,355.33,2,355.33,1,80.08,0)
INQ SERVICE TYPE CODE 8
"BLD",8170,4,355.33,2,355.33,1,80.09,0)
INQ SERVICE TYPE CODE 9
"BLD",8170,4,355.33,2,355.33,1,80.1,0)
INQ SERVICE TYPE CODE 10
"BLD",8170,4,355.33,2,355.33,1,80.11,0)
INQ SERVICE TYPE CODE 11
"BLD",8170,4,355.33,2,355.33,1,80.12,0)
INQ SERVICE TYPE CODE 12
"BLD",8170,4,355.33,2,355.33,1,80.13,0)
INQ SERVICE TYPE CODE 13
"BLD",8170,4,355.33,2,355.33,1,80.14,0)
INQ SERVICE TYPE CODE 14
"BLD",8170,4,355.33,2,355.33,1,80.15,0)
INQ SERVICE TYPE CODE 15
"BLD",8170,4,355.33,2,355.33,1,80.16,0)
INQ SERVICE TYPE CODE 16
"BLD",8170,4,355.33,2,355.33,1,80.17,0)
INQ SERVICE TYPE CODE 17
"BLD",8170,4,355.33,2,355.33,1,80.18,0)
INQ SERVICE TYPE CODE 18
"BLD",8170,4,355.33,2,355.33,1,80.19,0)
INQ SERVICE TYPE CODE 19
"BLD",8170,4,355.33,2,355.33,1,80.2,0)
INQ SERVICE TYPE CODE 20
"BLD",8170,4,355.33,222)
y^y^p^^^^n^^n
"BLD",8170,4,355.33,224)

"BLD",8170,4,365,0)
365
"BLD",8170,4,365,2,0)
^9.641^365.292^6
"BLD",8170,4,365,2,365,0)
IIV RESPONSE  (File-top level)
"BLD",8170,4,365,2,365,1,0)
^9.6411^8.01^3
"BLD",8170,4,365,2,365,1,5.06,0)
SUBSCRIBER ADDRESS COUNTRY
"BLD",8170,4,365,2,365,1,5.07,0)
SUBSCRIBER ADDRESS SUBDIVISION
"BLD",8170,4,365,2,365,1,8.01,0)
PT. RELATIONSHIP - HIPAA
"BLD",8170,4,365,2,365.02,0)
ELIGIBILITY/BENEFIT  (sub-file)
"BLD",8170,4,365,2,365.02,1,0)
^9.6411^.04^2
"BLD",8170,4,365,2,365.02,1,.04,0)
*SERVICE TYPE
"BLD",8170,4,365,2,365.02,1,4.09,0)
SUBDIVISION CODE
"BLD",8170,4,365,2,365.06,0)
REJECT REASONS  (sub-file)
"BLD",8170,4,365,2,365.06,1,0)
^9.6411^^
"BLD",8170,4,365,2,365.07,0)
SUBSCRIBER DATES  (sub-file)
"BLD",8170,4,365,2,365.07,1,0)
^9.6411^^
"BLD",8170,4,365,2,365.29,0)
SUBSCRIBER ADDITIONAL INFO  (sub-file)
"BLD",8170,4,365,2,365.29,1,0)
^9.6411^.03^1
"BLD",8170,4,365,2,365.29,1,.03,0)
*DIAGNOSIS
"BLD",8170,4,365,2,365.292,0)
SERVICE TYPES  (sub-file)
"BLD",8170,4,365,2,365.292,1,0)
^9.6411^^
"BLD",8170,4,365,222)
y^n^p^^^^n^^n
"BLD",8170,4,365,224)

"BLD",8170,4,365.013,0)
365.013
"BLD",8170,4,365.013,222)
y^y^f^^n^^y^o^n
"BLD",8170,4,365.013,224)

"BLD",8170,4,365.016,0)
365.016
"BLD",8170,4,365.016,222)
y^y^f^^n^^y^o^n
"BLD",8170,4,365.021,0)
365.021
"BLD",8170,4,365.021,222)
y^y^f^^n^^y^o^n
"BLD",8170,4,365.026,0)
365.026
"BLD",8170,4,365.026,222)
y^y^f^^n^^y^o^n
"BLD",8170,4,365.027,0)
365.027
"BLD",8170,4,365.027,222)
y^y^f^^n^^y^o^n
"BLD",8170,4,365.027,224)

"BLD",8170,4,365.028,0)
365.028
"BLD",8170,4,365.028,222)
y^n^f^^n^^y^o^n
"BLD",8170,4,365.1,0)
365.1
"BLD",8170,4,365.1,2,0)
^9.641^365.1^1
"BLD",8170,4,365.1,2,365.1,0)
IIV TRANSMISSION QUEUE  (File-top level)
"BLD",8170,4,365.1,2,365.1,1,0)
^9.6411^3.01^1
"BLD",8170,4,365.1,2,365.1,1,3.01,0)
MANUAL REQUEST DATE/TIME
"BLD",8170,4,365.1,222)
y^y^p^^^^n^^n
"BLD",8170,4,365.1,224)

"BLD",8170,4,"APDD",2,2.312)

"BLD",8170,4,"APDD",2,2.312,3.13)

"BLD",8170,4,"APDD",2,2.312,3.14)

"BLD",8170,4,"APDD",2,2.322)

"BLD",8170,4,"APDD",2,2.322,.04)

"BLD",8170,4,"APDD",2,2.322,4.09)

"BLD",8170,4,"APDD",2,2.3229)

"BLD",8170,4,"APDD",2,2.3229,.03)

"BLD",8170,4,"APDD",2,2.32292)

"BLD",8170,4,"APDD",350.9,350.9)

"BLD",8170,4,"APDD",350.9,350.9,60.01)

"BLD",8170,4,"APDD",350.9,350.9,60.02)

"BLD",8170,4,"APDD",350.9,350.9,60.03)

"BLD",8170,4,"APDD",350.9,350.9,60.04)

"BLD",8170,4,"APDD",350.9,350.9,60.05)

"BLD",8170,4,"APDD",350.9,350.9,60.06)

"BLD",8170,4,"APDD",350.9,350.9,60.07)

"BLD",8170,4,"APDD",350.9,350.9,60.08)

"BLD",8170,4,"APDD",350.9,350.9,60.09)

"BLD",8170,4,"APDD",350.9,350.9,60.1)

"BLD",8170,4,"APDD",350.9,350.9,60.11)

"BLD",8170,4,"APDD",350.9,350.9,61.01)

"BLD",8170,4,"APDD",350.9,350.9,61.02)

"BLD",8170,4,"APDD",350.9,350.9,61.03)

"BLD",8170,4,"APDD",350.9,350.9,61.04)

"BLD",8170,4,"APDD",350.9,350.9,61.05)

"BLD",8170,4,"APDD",350.9,350.9,61.06)

"BLD",8170,4,"APDD",350.9,350.9,61.07)

"BLD",8170,4,"APDD",350.9,350.9,61.08)

"BLD",8170,4,"APDD",350.9,350.9,61.09)

"BLD",8170,4,"APDD",355.33,355.33)

"BLD",8170,4,"APDD",355.33,355.33,.16)

"BLD",8170,4,"APDD",355.33,355.33,20.01)

"BLD",8170,4,"APDD",355.33,355.33,40.02)

"BLD",8170,4,"APDD",355.33,355.33,40.03)

"BLD",8170,4,"APDD",355.33,355.33,60.01)

"BLD",8170,4,"APDD",355.33,355.33,60.04)

"BLD",8170,4,"APDD",355.33,355.33,60.08)

"BLD",8170,4,"APDD",355.33,355.33,62.07)

"BLD",8170,4,"APDD",355.33,355.33,62.08)

"BLD",8170,4,"APDD",355.33,355.33,80.01)

"BLD",8170,4,"APDD",355.33,355.33,80.02)

"BLD",8170,4,"APDD",355.33,355.33,80.03)

"BLD",8170,4,"APDD",355.33,355.33,80.04)

"BLD",8170,4,"APDD",355.33,355.33,80.05)

"BLD",8170,4,"APDD",355.33,355.33,80.06)

"BLD",8170,4,"APDD",355.33,355.33,80.07)

"BLD",8170,4,"APDD",355.33,355.33,80.08)

"BLD",8170,4,"APDD",355.33,355.33,80.09)

"BLD",8170,4,"APDD",355.33,355.33,80.1)

"BLD",8170,4,"APDD",355.33,355.33,80.11)

"BLD",8170,4,"APDD",355.33,355.33,80.12)

"BLD",8170,4,"APDD",355.33,355.33,80.13)

"BLD",8170,4,"APDD",355.33,355.33,80.14)

"BLD",8170,4,"APDD",355.33,355.33,80.15)

"BLD",8170,4,"APDD",355.33,355.33,80.16)

"BLD",8170,4,"APDD",355.33,355.33,80.17)

"BLD",8170,4,"APDD",355.33,355.33,80.18)

"BLD",8170,4,"APDD",355.33,355.33,80.19)

"BLD",8170,4,"APDD",355.33,355.33,80.2)

"BLD",8170,4,"APDD",365,365)

"BLD",8170,4,"APDD",365,365,5.06)

"BLD",8170,4,"APDD",365,365,5.07)

"BLD",8170,4,"APDD",365,365,8.01)

"BLD",8170,4,"APDD",365,365.02)

"BLD",8170,4,"APDD",365,365.02,.04)

"BLD",8170,4,"APDD",365,365.02,4.09)

"BLD",8170,4,"APDD",365,365.06)

"BLD",8170,4,"APDD",365,365.07)

"BLD",8170,4,"APDD",365,365.29)

"BLD",8170,4,"APDD",365,365.29,.03)

"BLD",8170,4,"APDD",365,365.292)

"BLD",8170,4,"APDD",365.1,365.1)

"BLD",8170,4,"APDD",365.1,365.1,3.01)

"BLD",8170,4,"B",2,2)

"BLD",8170,4,"B",350.9,350.9)

"BLD",8170,4,"B",353.1,353.1)

"BLD",8170,4,"B",355.33,355.33)

"BLD",8170,4,"B",365,365)

"BLD",8170,4,"B",365.013,365.013)

"BLD",8170,4,"B",365.016,365.016)

"BLD",8170,4,"B",365.021,365.021)

"BLD",8170,4,"B",365.026,365.026)

"BLD",8170,4,"B",365.027,365.027)

"BLD",8170,4,"B",365.028,365.028)

"BLD",8170,4,"B",365.1,365.1)

"BLD",8170,6.3)
52
"BLD",8170,"INID")
^y
"BLD",8170,"INIT")
IBY438PO
"BLD",8170,"KRN",0)
^9.67PA^779.2^20
"BLD",8170,"KRN",.4,0)
.4
"BLD",8170,"KRN",.4,"NM",0)
^9.68A^^
"BLD",8170,"KRN",.401,0)
.401
"BLD",8170,"KRN",.402,0)
.402
"BLD",8170,"KRN",.403,0)
.403
"BLD",8170,"KRN",.5,0)
.5
"BLD",8170,"KRN",.84,0)
.84
"BLD",8170,"KRN",3.6,0)
3.6
"BLD",8170,"KRN",3.8,0)
3.8
"BLD",8170,"KRN",9.2,0)
9.2
"BLD",8170,"KRN",9.8,0)
9.8
"BLD",8170,"KRN",9.8,"NM",0)
^9.68A^36^33
"BLD",8170,"KRN",9.8,"NM",1,0)
IBCNEHL4^^0^B136544352
"BLD",8170,"KRN",9.8,"NM",2,0)
IBCNEHLQ^^0^B43538189
"BLD",8170,"KRN",9.8,"NM",3,0)
IBCNEHL1^^0^B244020766
"BLD",8170,"KRN",9.8,"NM",4,0)
IBCNEHLU^^0^B53561238
"BLD",8170,"KRN",9.8,"NM",5,0)
IBCNEBF^^0^B46987961
"BLD",8170,"KRN",9.8,"NM",6,0)
IBCNBMI^^0^B88135696
"BLD",8170,"KRN",9.8,"NM",7,0)
IBCNEDEP^^0^B86075479
"BLD",8170,"KRN",9.8,"NM",8,0)
IBCNEQU^^0^B109122026
"BLD",8170,"KRN",9.8,"NM",9,0)
IBCNBCD^^0^B85841141
"BLD",8170,"KRN",9.8,"NM",10,0)
IBCNSP0^^0^B33972429
"BLD",8170,"KRN",9.8,"NM",11,0)
IBCNEML^^0^B14674015
"BLD",8170,"KRN",9.8,"NM",12,0)
IBCNEHLT^^0^B77895122
"BLD",8170,"KRN",9.8,"NM",13,0)
IBJPM^^0^B10881232
"BLD",8170,"KRN",9.8,"NM",14,0)
IBJPI^^0^B22090434
"BLD",8170,"KRN",9.8,"NM",15,0)
IBJPI5^^0^B37149088
"BLD",8170,"KRN",9.8,"NM",16,0)
IBCNERTQ^^0^B44031881
"BLD",8170,"KRN",9.8,"NM",17,0)
IBCNEDE7^^0^B24645310
"BLD",8170,"KRN",9.8,"NM",18,0)
IBCNERPE^^0^B42391865
"BLD",8170,"KRN",9.8,"NM",19,0)
IBCNBES^^0^B7989957
"BLD",8170,"KRN",9.8,"NM",20,0)
IBCNBLA1^^0^B83105620
"BLD",8170,"KRN",9.8,"NM",22,0)
IBCNEHL2^^0^B62824990
"BLD",8170,"KRN",9.8,"NM",23,0)
IBCNES1^^0^B120790247
"BLD",8170,"KRN",9.8,"NM",24,0)
IBCNBEE^^0^B46140166
"BLD",8170,"KRN",9.8,"NM",25,0)
IBCNEHLM^^0^B21127231
"BLD",8170,"KRN",9.8,"NM",26,0)
IBCNEDE1^^0^B38997890
"BLD",8170,"KRN",9.8,"NM",28,0)
IBCNEDE3^^0^B56996333
"BLD",8170,"KRN",9.8,"NM",29,0)
IBCNEDE^^0^B19636990
"BLD",8170,"KRN",9.8,"NM",31,0)
IBJPI2^^0^B2442412
"BLD",8170,"KRN",9.8,"NM",32,0)
IBCNES^^0^B25439392
"BLD",8170,"KRN",9.8,"NM",33,0)
IBCNEDEQ^^0^B28120431
"BLD",8170,"KRN",9.8,"NM",34,0)
IBCNEDE2^^0^B60928994
"BLD",8170,"KRN",9.8,"NM",35,0)
IBCNBLL^^0^B91467926
"BLD",8170,"KRN",9.8,"NM",36,0)
IBCNBU1^^0^B33733092
"BLD",8170,"KRN",9.8,"NM","B","IBCNBCD",9)

"BLD",8170,"KRN",9.8,"NM","B","IBCNBEE",24)

"BLD",8170,"KRN",9.8,"NM","B","IBCNBES",19)

"BLD",8170,"KRN",9.8,"NM","B","IBCNBLA1",20)

"BLD",8170,"KRN",9.8,"NM","B","IBCNBLL",35)

"BLD",8170,"KRN",9.8,"NM","B","IBCNBMI",6)

"BLD",8170,"KRN",9.8,"NM","B","IBCNBU1",36)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEBF",5)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEDE",29)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEDE1",26)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEDE2",34)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEDE3",28)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEDE7",17)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEDEP",7)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEDEQ",33)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEHL1",3)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEHL2",22)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEHL4",1)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEHLM",25)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEHLQ",2)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEHLT",12)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEHLU",4)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEML",11)

"BLD",8170,"KRN",9.8,"NM","B","IBCNEQU",8)

"BLD",8170,"KRN",9.8,"NM","B","IBCNERPE",18)

"BLD",8170,"KRN",9.8,"NM","B","IBCNERTQ",16)

"BLD",8170,"KRN",9.8,"NM","B","IBCNES",32)

"BLD",8170,"KRN",9.8,"NM","B","IBCNES1",23)

"BLD",8170,"KRN",9.8,"NM","B","IBCNSP0",10)

"BLD",8170,"KRN",9.8,"NM","B","IBJPI",14)

"BLD",8170,"KRN",9.8,"NM","B","IBJPI2",31)

"BLD",8170,"KRN",9.8,"NM","B","IBJPI5",15)

"BLD",8170,"KRN",9.8,"NM","B","IBJPM",13)

"BLD",8170,"KRN",19,0)
19
"BLD",8170,"KRN",19,"NM",0)
^9.68A^2^2
"BLD",8170,"KRN",19,"NM",1,0)
ZTMQUEUABLE OPTIONS^^2
"BLD",8170,"KRN",19,"NM",2,0)
IBCNE EIV PAYER LINK NOTIFY^^0
"BLD",8170,"KRN",19,"NM","B","IBCNE EIV PAYER LINK NOTIFY",2)

"BLD",8170,"KRN",19,"NM","B","ZTMQUEUABLE OPTIONS",1)

"BLD",8170,"KRN",19.1,0)
19.1
"BLD",8170,"KRN",101,0)
101
"BLD",8170,"KRN",101,"NM",0)
^9.68A^6^5
"BLD",8170,"KRN",101,"NM",2,0)
IBJP INS VER MENU^^0
"BLD",8170,"KRN",101,"NM",3,0)
IBJP IIV BATCH EXTRACT EDIT^^1^
"BLD",8170,"KRN",101,"NM",4,0)
IBJP IIV GENERAL EDIT^^0
"BLD",8170,"KRN",101,"NM",5,0)
IBJ EXIT^^0
"BLD",8170,"KRN",101,"NM",6,0)
IBJP IB SITE SELECTED SERVICE CODES^^0
"BLD",8170,"KRN",101,"NM","B","IBJ EXIT",5)

"BLD",8170,"KRN",101,"NM","B","IBJP IB SITE SELECTED SERVICE CODES",6)

"BLD",8170,"KRN",101,"NM","B","IBJP IIV BATCH EXTRACT EDIT",3)

"BLD",8170,"KRN",101,"NM","B","IBJP IIV GENERAL EDIT",4)

"BLD",8170,"KRN",101,"NM","B","IBJP INS VER MENU",2)

"BLD",8170,"KRN",409.61,0)
409.61
"BLD",8170,"KRN",409.61,"NM",0)
^9.68A^3^2
"BLD",8170,"KRN",409.61,"NM",2,0)
IBJP IIV SITE PARAMETERS^^0
"BLD",8170,"KRN",409.61,"NM",3,0)
IBJP MCCR PARAMETERS^^0
"BLD",8170,"KRN",409.61,"NM","B","IBJP IIV SITE PARAMETERS",2)

"BLD",8170,"KRN",409.61,"NM","B","IBJP MCCR PARAMETERS",3)

"BLD",8170,"KRN",771,0)
771
"BLD",8170,"KRN",779.2,0)
779.2
"BLD",8170,"KRN",870,0)
870
"BLD",8170,"KRN",8989.51,0)
8989.51
"BLD",8170,"KRN",8989.51,"NM",0)
^9.68A^^
"BLD",8170,"KRN",8989.52,0)
8989.52
"BLD",8170,"KRN",8989.52,"NM",0)
^9.68A^^
"BLD",8170,"KRN",8994,0)
8994
"BLD",8170,"KRN","B",.4,.4)

"BLD",8170,"KRN","B",.401,.401)

"BLD",8170,"KRN","B",.402,.402)

"BLD",8170,"KRN","B",.403,.403)

"BLD",8170,"KRN","B",.5,.5)

"BLD",8170,"KRN","B",.84,.84)

"BLD",8170,"KRN","B",3.6,3.6)

"BLD",8170,"KRN","B",3.8,3.8)

"BLD",8170,"KRN","B",9.2,9.2)

"BLD",8170,"KRN","B",9.8,9.8)

"BLD",8170,"KRN","B",19,19)

"BLD",8170,"KRN","B",19.1,19.1)

"BLD",8170,"KRN","B",101,101)

"BLD",8170,"KRN","B",409.61,409.61)

"BLD",8170,"KRN","B",771,771)

"BLD",8170,"KRN","B",779.2,779.2)

"BLD",8170,"KRN","B",870,870)

"BLD",8170,"KRN","B",8989.51,8989.51)

"BLD",8170,"KRN","B",8989.52,8989.52)

"BLD",8170,"KRN","B",8994,8994)

"BLD",8170,"QDEF")
^^^^NO^^^^NO^^YES
"BLD",8170,"QUES",0)
^9.62^^
"BLD",8170,"REQB",0)
^9.611^3^3
"BLD",8170,"REQB",1,0)
IB*2.0*416^2
"BLD",8170,"REQB",2,0)
IB*2.0*399^2
"BLD",8170,"REQB",3,0)
IB*2.0*444^2
"BLD",8170,"REQB","B","IB*2.0*399",2)

"BLD",8170,"REQB","B","IB*2.0*416",1)

"BLD",8170,"REQB","B","IB*2.0*444",3)

"DATA",353.1,1,0)
11^OFFICE^OFFICE
"DATA",353.1,2,0)
12^HOME^HOME
"DATA",353.1,3,0)
21^INPATIENT HOSPITAL^INPATIENT HOSPITAL
"DATA",353.1,4,0)
22^OUTPATIENT HOSPITAL^OUTPATIENT HOSPITAL
"DATA",353.1,5,0)
23^EMERGENCY ROOM - HOSPITAL^HOSP. EMERGENCY RM.
"DATA",353.1,6,0)
24^AMBULATORY SURGICAL CENTER^AMB. SURG. CENTER
"DATA",353.1,7,0)
25^BIRTHING CENTER^BIRTHING CENTER
"DATA",353.1,8,0)
26^MILITARY TREATMENT FACILITY^MILITARY TRTMT FAC.
"DATA",353.1,9,0)
31^SKILLED NURSING FACILITY^SKILLED NURSING FAC.
"DATA",353.1,10,0)
32^NURSING FACILITY^NURSING FACILITY
"DATA",353.1,11,0)
33^CUSTODIAL CARE FACILITY^CUSTODIAL CARE FAC.
"DATA",353.1,12,0)
34^HOSPICE^HOSPICE
"DATA",353.1,13,0)
41^AMBULANCE - LAND^AMBULANCE - LAND
"DATA",353.1,14,0)
42^AMBULANCE - AIR OR WATER^AMBULANCE  AIR/WATER
"DATA",353.1,15,0)
51^INPATIENT PSYCHIATRIC FACILITY^INPT PSYCH. FAC
"DATA",353.1,16,0)
52^PSY. FAC. PARTIAL HOSPITALIZATION^PSY FAC PART HOSP
"DATA",353.1,17,0)
53^COMMUNITY MENTAL HEALTH CENTER^COMM MENTAL HLTH CTR
"DATA",353.1,18,0)
54^INTERMEDIATE CARE FAC/MENTALLY RETARDED^INTER. CARE FAC/MR
"DATA",353.1,19,0)
55^RESIDENTIAL SUBSTANCE ABUSE TREATMENT FACILITY^RES. SUB. ABUSE FAC.
"DATA",353.1,20,0)
56^PSYCHIATRIC RESIDENTIAL TREATMENT CENTER^PSY RESID TRTMT CTR
"DATA",353.1,21,0)
61^COMPREHENSIVE INPATIENT REHABILITATION FACILITY^COMP INPT REHAB FAC
"DATA",353.1,22,0)
62^COMPREHENSIVE OUTPATIENT REHABILITATION FACILITY^COMP OUTPT REHAB FAC
"DATA",353.1,23,0)
65^END STAGE RENAL DISEASE TREATMENT FACILITY^END STAGE RENAL T F
"DATA",353.1,24,0)
71^STATE OR LOCAL PUBLIC HEALTH CLINIC^ST/LOC PUB HLTH CLN
"DATA",353.1,25,0)
72^RURAL HEALTH CLINIC^RURAL HEALTH CLINIC
"DATA",353.1,26,0)
81^INDEPENDENT LABORATORY^INDEPENDENT LAB
"DATA",353.1,27,0)
99^OTHER PLACE OF SERVICE^OTHER PLACE OF SERV
"DATA",353.1,28,0)
50^FEDERALLY QUALIFIED HEALTH CENTER^FED QUAL HLTH CTR
"DATA",353.1,29,0)
60^MASS IMMUNIZATION CENTER^MASS IMMUNIZATON CTR
"DATA",353.1,30,0)
GR^NATURE OF INJURY (NCCI)^NATURE OF INJ.(NCCI)
"DATA",353.1,31,0)
NI^NATURE OF INJURY^NATURE OF INJURY
"DATA",353.1,32,0)
01^PHARMACY^PHARMACY
"DATA",353.1,33,0)
03^SCHOOL^SCHOOL
"DATA",353.1,34,0)
04^HOMELESS SHELTER^HOMELESS SHELTER
"DATA",353.1,35,0)
05^IHS FREE STANDING FACILITY^IHS FREE-STANDING
"DATA",353.1,36,0)
06^IHS PROVIDER BASED FACILITY^IHS PROVIDER-BASED
"DATA",353.1,37,0)
07^TRIBAL 638 FREE STANDING FACILITY^TRIBAL 638 FREE-STDG
"DATA",353.1,38,0)
08^TRIBAL 638 PROVIDER BASED FACILITY^TRIBAL 638 PROV-BSD
"DATA",353.1,39,0)
09^PRISON CORRECTIONAL FACILITY^PRISON/CORRECT FAC
"DATA",353.1,40,0)
13^ASSISTED LIVING FACILITY^ASSTD LIVING FAC
"DATA",353.1,41,0)
14^GROUP HOME^GROUP HOME
"DATA",353.1,42,0)
15^MOBILE UNIT^MOBILE UNIT
"DATA",353.1,43,0)
16^TEMPORARY LODGING^TEMP LODGING
"DATA",353.1,44,0)
17^RETAIL WALK-IN^RETAIL/WALK IN
"DATA",353.1,45,0)
20^URGENT CARE FACILITY^URGENT CARE
"DATA",353.1,46,0)
49^INDEPENDENT CLINIC^INDEPENDENT CLINIC
"DATA",353.1,47,0)
57^NON RESIDENTIAL SUBSTANCE ABUSE TREATMENT FACILITY^NON-RES SUBST ABUSE
"DATA",365.013,1,0)
1^Medical Care
"DATA",365.013,2,0)
2^Surgical
"DATA",365.013,3,0)
3^Consultation
"DATA",365.013,4,0)
4^Diagnostic X-Ray
"DATA",365.013,5,0)
5^Diagnostic Lab
"DATA",365.013,6,0)
6^Radiation Therapy
"DATA",365.013,7,0)
7^Anesthesia
"DATA",365.013,8,0)
8^Surgical Assistance
"DATA",365.013,9,0)
9^Other Medical
"DATA",365.013,10,0)
10^Blood Charges
"DATA",365.013,11,0)
11^Used DME
"DATA",365.013,12,0)
12^DME Purchase
"DATA",365.013,13,0)
13^Ambulatory SC Facility
"DATA",365.013,14,0)
14^Renal Supplies/Home
"DATA",365.013,15,0)
15^Alt. Method Dialysis
"DATA",365.013,16,0)
16^CRD Equipment
"DATA",365.013,17,0)
17^Pre-Admission Testing
"DATA",365.013,18,0)
18^DME Rental
"DATA",365.013,19,0)
19^Pneumonia Vaccine
"DATA",365.013,20,0)
20^2nd Surgical Opinion
"DATA",365.013,21,0)
21^3rd Surgical Opinion
"DATA",365.013,22,0)
22^Social Work
"DATA",365.013,23,0)
23^Diagnostic Dental
"DATA",365.013,24,0)
24^Periodontics
"DATA",365.013,25,0)
25^Restorative
"DATA",365.013,26,0)
26^Endodontics
"DATA",365.013,27,0)
27^Maxillofacial Prosth.
"DATA",365.013,28,0)
28^Adjunctive Dental Serv
"DATA",365.013,29,0)
30^Health Benefit Plan Cov
"DATA",365.013,30,0)
32^Plan Waiting Period
"DATA",365.013,31,0)
33^Chiropractic
"DATA",365.013,32,0)
34^Chiropractic Office Vst
"DATA",365.013,33,0)
35^Dental Care
"DATA",365.013,34,0)
36^Dental Crowns
"DATA",365.013,35,0)
37^Dental Accident
"DATA",365.013,36,0)
38^Orthodontics
"DATA",365.013,37,0)
39^Prosthodontics
"DATA",365.013,38,0)
40^Oral Surgery
"DATA",365.013,39,0)
41^Rout/Preventive Dental
"DATA",365.013,40,0)
42^Home Health Care
"DATA",365.013,41,0)
43^Home Health RX
"DATA",365.013,42,0)
44^Home Health Vst
"DATA",365.013,43,0)
45^Hospice
"DATA",365.013,44,0)
46^Respite Care
"DATA",365.013,45,0)
47^Hospital
"DATA",365.013,46,0)
48^Hosp/Inpatient
"DATA",365.013,47,0)
49^Hosp/R & B
"DATA",365.013,48,0)
50^Hosp/Outpatient
"DATA",365.013,49,0)
51^Hosp/Emergency Accident
"DATA",365.013,50,0)
52^Hosp/Emergency Medical
"DATA",365.013,51,0)
53^Hosp/Ambulatory Surg
"DATA",365.013,52,0)
54^Long Term Care
"DATA",365.013,53,0)
55^Major Medical
"DATA",365.013,54,0)
56^Med Related Transport
"DATA",365.013,55,0)
57^Air Transportation
"DATA",365.013,56,0)
58^Cabulance
"DATA",365.013,57,0)
59^Licensed Ambulance
"DATA",365.013,58,0)
60^General Benefits
"DATA",365.013,59,0)
61^In-vitro Fertilization
"DATA",365.013,60,0)
62^MRI/CAT Scan
"DATA",365.013,61,0)
63^Donor Procedures
"DATA",365.013,62,0)
64^Acupuncture
"DATA",365.013,63,0)
65^Newborn Care
"DATA",365.013,64,0)
66^Pathology
"DATA",365.013,65,0)
67^Smoking Cessation
"DATA",365.013,66,0)
68^Well Baby Care
"DATA",365.013,67,0)
69^Maternity
"DATA",365.013,68,0)
70^Transplants
"DATA",365.013,69,0)
71^Audiology Exams
"DATA",365.013,70,0)
72^Inhalation Therapy
"DATA",365.013,71,0)
73^Diagnostic Medical
"DATA",365.013,72,0)
74^Private Duty Nursing
"DATA",365.013,73,0)
75^Prosthetic Device
"DATA",365.013,74,0)
76^Dialysis
"DATA",365.013,75,0)
77^Otological Exam
"DATA",365.013,76,0)
78^Chemotherapy
"DATA",365.013,77,0)
79^Allergy Testing
"DATA",365.013,78,0)
80^Immunizations
"DATA",365.013,79,0)
81^Routine Physical
"DATA",365.013,80,0)
82^Family Planning
"DATA",365.013,81,0)
83^Infertility
"DATA",365.013,82,0)
84^Abortion
"DATA",365.013,83,0)
85^AIDS
"DATA",365.013,84,0)
86^Emergency Services
"DATA",365.013,85,0)
87^Cancer
"DATA",365.013,86,0)
88^Pharmacy
"DATA",365.013,87,0)
89^Free Standing RX Drug
"DATA",365.013,88,0)
90^Mail Order RX Drug
"DATA",365.013,89,0)
91^Brand Name RX Drug
"DATA",365.013,90,0)
92^Generic RX Drug
"DATA",365.013,91,0)
93^Podiatry
"DATA",365.013,92,0)
94^Podiatry/Office Visits
"DATA",365.013,93,0)
95^Podiatry/Nurs Home Vst
"DATA",365.013,94,0)
96^Professional (Phy)
"DATA",365.013,95,0)
97^Anesthesiologist
"DATA",365.013,96,0)
98^Prof(Phy) Visit/Office
"DATA",365.013,97,0)
99^Prof(Phy) Visit/Inpt
"DATA",365.013,98,0)
A0^Prof(Phy) Visit/Outpt
"DATA",365.013,99,0)
A1^Prof(Phy) Visit/NH
"DATA",365.013,100,0)
A2^Prof(Phy) Vst/Skilled Nrs Fac
"DATA",365.013,101,0)
A3^Prof(Phy) Visit/Home
"DATA",365.013,102,0)
A4^Psychiatric
"DATA",365.013,103,0)
A5^Psychiatric/R & B
"DATA",365.013,104,0)
A6^Psychotherapy
"DATA",365.013,105,0)
A7^Psychiatric/Inpt
"DATA",365.013,106,0)
A8^Psychiatric/Outpt
"DATA",365.013,107,0)
A9^Rehabilitation
"DATA",365.013,108,0)
AA^Rehab/R & B
"DATA",365.013,109,0)
AB^Rehab/Inpt
"DATA",365.013,110,0)
AC^Rehab/Outpt
"DATA",365.013,111,0)
AD^Occupational Therapy
"DATA",365.013,112,0)
AE^Physical Medicine
"DATA",365.013,113,0)
AF^Speech Therapy
"DATA",365.013,114,0)
AG^SNC
"DATA",365.013,115,0)
AH^SNC/R & B
"DATA",365.013,116,0)
AI^Substance Abuse
"DATA",365.013,117,0)
AJ^Alcoholism
"DATA",365.013,118,0)
AK^Drug Addiction
"DATA",365.013,119,0)
AL^Vision (Optometry)
"DATA",365.013,120,0)
AM^Frames
"DATA",365.013,121,0)
AN^Routine Exam
"DATA",365.013,122,0)
AO^Lenses
"DATA",365.013,123,0)
AQ^N/Medically Nec Physical
"DATA",365.013,124,0)
AR^Experimental Drug Therapy
"DATA",365.013,125,0)
BA^Independent Medical Eval
"DATA",365.013,126,0)
BB^Partial Hosp (Psych)
"DATA",365.013,127,0)
BC^Day Care (Psych)
"DATA",365.013,128,0)
BD^Cognitive Therapy
"DATA",365.013,129,0)
BE^Massage Therapy
"DATA",365.013,130,0)
BF^Pulmonary Rehab
"DATA",365.013,131,0)
BG^Cardiac Rehab
"DATA",365.013,132,0)
BH^Pediatric
"DATA",365.013,133,0)
BI^Nursery
"DATA",365.013,134,0)
BJ^Skin
"DATA",365.013,135,0)
BK^Orthopedic
"DATA",365.013,136,0)
BL^Cardiac
"DATA",365.013,137,0)
BM^Lymphatic
"DATA",365.013,138,0)
BN^Gastrointestinal
"DATA",365.013,139,0)
BP^Endocrine
"DATA",365.013,140,0)
BQ^Neurology
"DATA",365.013,141,0)
BR^Eye
"DATA",365.013,142,0)
BS^Invasive Procedures
"DATA",365.013,143,0)
B1^Burn Care
"DATA",365.013,144,0)
B2^Brand Name Rx Drug - Formulary
"DATA",365.013,145,0)
B3^Brand Name Rx Drug - Non-Formulary
"DATA",365.013,146,0)
BT^Gynecological
"DATA",365.013,147,0)
BU^Obstetrical
"DATA",365.013,148,0)
BV^Obstetrical/Gynecological
"DATA",365.013,149,0)
BW^Mail Order Prescription Drug: Brand Name
"DATA",365.013,150,0)
BX^Mail Order Prescription Drug: Generic
"DATA",365.013,151,0)
BY^Physician Visit - Office: Sick
"DATA",365.013,152,0)
BZ^Physician Visit - Office: Well
"DATA",365.013,153,0)
C1^Coronary Care
"DATA",365.013,154,0)
CA^Private Duty Nursing - Inpatient
"DATA",365.013,155,0)
CB^Private Duty Nursing - Home
"DATA",365.013,156,0)
CC^Surgical Benefits - Professional (Physician)
"DATA",365.013,157,0)
CD^Surgical Benefits - Facility
"DATA",365.013,158,0)
CE^Mental Health Provider - Inpatient
"DATA",365.013,159,0)
CF^Mental Health Provider - Outpatient
"DATA",365.013,160,0)
CG^Mental Health Facility - Inpatient
"DATA",365.013,161,0)
CH^Mental Health Facility - Outpatient
"DATA",365.013,162,0)
CI^Substance Abuse Facility - Inpatient
"DATA",365.013,163,0)
CJ^Substance Abuse Facility - Outpatient
"DATA",365.013,164,0)
CK^Screening X-ray
"DATA",365.013,165,0)
CL^Screening Laboratory
"DATA",365.013,166,0)
CM^Mammogram, High Risk Patient
"DATA",365.013,167,0)
CN^Mammogram, Low Risk Patient
"DATA",365.013,168,0)
CO^Flu Vaccination
"DATA",365.013,169,0)
CP^Eyewear and Eyewear Accessories
"DATA",365.013,170,0)
CQ^Case Management
"DATA",365.013,171,0)
DG^Dermatology
"DATA",365.013,172,0)
DM^Durable Medical Equipment
"DATA",365.013,173,0)
DS^Diabetic Supplies
"DATA",365.013,174,0)
GF^Generic Prescription Drug - Formulary
"DATA",365.013,175,0)
GN^Generic Prescription Drug - Non-Formulary
"DATA",365.013,176,0)
GY^Allergy
"DATA",365.013,177,0)
IC^Intensive Care
"DATA",365.013,178,0)
MH^Mental Health
"DATA",365.013,179,0)
NI^Neonatal Intensive Care
"DATA",365.013,180,0)
ON^Oncology
"DATA",365.013,181,0)
PT^Physical Therapy
"DATA",365.013,182,0)
PU^Pulmonary
"DATA",365.013,183,0)
RN^Renal
"DATA",365.013,184,0)
RT^Residential Psychiatric Treatment
"DATA",365.013,185,0)
TC^Transitional Care
"DATA",365.013,186,0)
TN^Transitional Nursery Care
"DATA",365.013,187,0)
UC^Urgent Care
"DATA",365.016,1,0)
99^Quantity Used
"DATA",365.016,2,0)
CA^Covered/Actual
"DATA",365.016,3,0)
CE^Covered/Estimated
"DATA",365.016,4,0)
DB^Deduct. Blood Units
"DATA",365.016,5,0)
DY^Days
"DATA",365.016,6,0)
HS^Hours
"DATA",365.016,7,0)
LA^Lifetime Reserve/Actual
"DATA",365.016,8,0)
LE^Lifetime Reserve/Est
"DATA",365.016,9,0)
MN^Month
"DATA",365.016,10,0)
P6^Number of Serv/Proc
"DATA",365.016,11,0)
QA^Quantity Approved
"DATA",365.016,12,0)
S7^Age/High Value
"DATA",365.016,13,0)
S8^Age/Low Value
"DATA",365.016,14,0)
VS^Visits
"DATA",365.016,15,0)
YY^Years
"DATA",365.016,16,0)
FL^Units
"DATA",365.016,17,0)
D3^Number Of Co-insurance Days
"DATA",365.016,18,0)
8H^Minimum
"DATA",365.021,1,0)
ED
"DATA",365.021,2,0)
EM^Electronic Mail
"DATA",365.021,3,0)
FX^Facsimile
"DATA",365.021,4,0)
TE^Telephone
"DATA",365.021,5,0)
EX^Telephone Extension
"DATA",365.021,6,0)
HP^Home Phone Number
"DATA",365.021,7,0)
WP^Work Phone Number
"DATA",365.021,8,0)
UR^Uniform Resource Locator (URL)
"DATA",365.026,1,0)
193^Period Start
"DATA",365.026,2,0)
194^Period End
"DATA",365.026,3,0)
198^Completion
"DATA",365.026,4,0)
290^COB
"DATA",365.026,5,0)
292^Benefit
"DATA",365.026,6,0)
295^PCP
"DATA",365.026,7,0)
304^Latest Visit/Consultation
"DATA",365.026,8,0)
307^Eligibility
"DATA",365.026,9,0)
318^Added
"DATA",365.026,10,0)
348^Benefit Begin
"DATA",365.026,11,0)
349^Benefit End
"DATA",365.026,12,0)
356^Eligibility Begin
"DATA",365.026,13,0)
357^Eligibility End
"DATA",365.026,14,0)
435^Admission
"DATA",365.026,15,0)
472^Service
"DATA",365.026,16,0)
636^Date Last Update
"DATA",365.026,17,0)
771^Status
"DATA",365.026,18,0)
096^Discharge
"DATA",365.026,19,0)
102^Issue
"DATA",365.026,20,0)
152^Effective Date Of Change
"DATA",365.026,21,0)
291^Plan
"DATA",365.026,22,0)
340^COBRA Begin
"DATA",365.026,23,0)
341^COBRA End
"DATA",365.026,24,0)
342^Premium Paid To Date Begin
"DATA",365.026,25,0)
343^Premium Paid To Date End
"DATA",365.026,26,0)
346^Plan Begin
"DATA",365.026,27,0)
347^Plan End
"DATA",365.026,28,0)
382^Enrollment
"DATA",365.026,29,0)
442^Date Of Death
"DATA",365.026,30,0)
458^Certification
"DATA",365.026,31,0)
539^Policy Effective
"DATA",365.026,32,0)
540^Policy Expiration
"DATA",365.027,1,0)
2000C^Subscriber Level
"DATA",365.027,2,0)
2100C^Subscriber Name
"DATA",365.027,3,0)
2110C^Subscriber E/B Info
"DATA",365.027,4,0)
2115C^Subscriber E/B Adtl Info
"DATA",365.027,5,0)
2120C^Subscriber E/B Entity Name
"DATA",365.027,6,0)
2000D^Dependent Level
"DATA",365.027,7,0)
2100D^Dependent Name
"DATA",365.027,8,0)
2110D^Dependent E/B Info
"DATA",365.027,9,0)
2115D^Dependent E/B Adtl Info
"DATA",365.027,10,0)
2120D^Dependent E/B Entity Name
"DATA",365.027,11,0)
2000A^Information Source Level
"DATA",365.027,12,0)
2100A^Information Source Name
"DATA",365.027,13,0)
2000B^Information Receiver Level
"DATA",365.027,14,0)
2100B^Information Receiver Name
"DATA",365.028,1,0)
18^Plan Number
"DATA",365.028,2,0)
1L^Group or Policy Number
"DATA",365.028,3,0)
1W^Member Identification Number
"DATA",365.028,4,0)
49^Family Unit Number
"DATA",365.028,5,0)
6P^Group Number
"DATA",365.028,6,0)
9F^Referral Number
"DATA",365.028,7,0)
A6^Employee Identification Number
"DATA",365.028,8,0)
F6^Health Insurance Claim (HIC) Number
"DATA",365.028,9,0)
G1^Prior Authorization Number
"DATA",365.028,10,0)
IG^Insurance Policy Number
"DATA",365.028,11,0)
N6^Plan Network Identification Number
"DATA",365.028,12,0)
NQ^Medicaid Recipient Identification Number
"FIA",2)
PATIENT
"FIA",2,0)
^DPT(
"FIA",2,0,0)
2I
"FIA",2,0,1)
y^y^p^^^^n^^n
"FIA",2,0,10)

"FIA",2,0,11)

"FIA",2,0,"RLRO")

"FIA",2,0,"VR")
2.0^IB
"FIA",2,2)
1
"FIA",2,2.312)
1
"FIA",2,2.312,3.13)

"FIA",2,2.312,3.14)

"FIA",2,2.322)
1
"FIA",2,2.322,.04)

"FIA",2,2.322,4.09)

"FIA",2,2.322,11)

"FIA",2,2.3229)
1
"FIA",2,2.3229,.03)

"FIA",2,2.32292)
0
"FIA",350.9)
IB SITE PARAMETERS
"FIA",350.9,0)
^IBE(350.9,
"FIA",350.9,0,0)
350.9I
"FIA",350.9,0,1)
y^y^p^^^^n^^n
"FIA",350.9,0,10)

"FIA",350.9,0,11)

"FIA",350.9,0,"RLRO")

"FIA",350.9,0,"VR")
2.0^IB
"FIA",350.9,350.9)
1
"FIA",350.9,350.9,60.01)

"FIA",350.9,350.9,60.02)

"FIA",350.9,350.9,60.03)

"FIA",350.9,350.9,60.04)

"FIA",350.9,350.9,60.05)

"FIA",350.9,350.9,60.06)

"FIA",350.9,350.9,60.07)

"FIA",350.9,350.9,60.08)

"FIA",350.9,350.9,60.09)

"FIA",350.9,350.9,60.1)

"FIA",350.9,350.9,60.11)

"FIA",350.9,350.9,61.01)

"FIA",350.9,350.9,61.02)

"FIA",350.9,350.9,61.03)

"FIA",350.9,350.9,61.04)

"FIA",350.9,350.9,61.05)

"FIA",350.9,350.9,61.06)

"FIA",350.9,350.9,61.07)

"FIA",350.9,350.9,61.08)

"FIA",350.9,350.9,61.09)

"FIA",353.1)
PLACE OF SERVICE
"FIA",353.1,0)
^IBE(353.1,
"FIA",353.1,0,0)
353.1I
"FIA",353.1,0,1)
y^y^f^^n^^y^o^n
"FIA",353.1,0,10)

"FIA",353.1,0,11)

"FIA",353.1,0,"RLRO")

"FIA",353.1,0,"VR")
2.0^IB
"FIA",353.1,353.1)
0
"FIA",355.33)
INSURANCE BUFFER
"FIA",355.33,0)
^IBA(355.33,
"FIA",355.33,0,0)
355.33D
"FIA",355.33,0,1)
y^y^p^^^^n^^n
"FIA",355.33,0,10)

"FIA",355.33,0,11)

"FIA",355.33,0,"RLRO")

"FIA",355.33,0,"VR")
2.0^IB
"FIA",355.33,355.33)
1
"FIA",355.33,355.33,.16)

"FIA",355.33,355.33,20.01)

"FIA",355.33,355.33,40.02)

"FIA",355.33,355.33,40.03)

"FIA",355.33,355.33,60.01)

"FIA",355.33,355.33,60.04)

"FIA",355.33,355.33,60.08)

"FIA",355.33,355.33,62.07)

"FIA",355.33,355.33,62.08)

"FIA",355.33,355.33,80.01)

"FIA",355.33,355.33,80.02)

"FIA",355.33,355.33,80.03)

"FIA",355.33,355.33,80.04)

"FIA",355.33,355.33,80.05)

"FIA",355.33,355.33,80.06)

"FIA",355.33,355.33,80.07)

"FIA",355.33,355.33,80.08)

"FIA",355.33,355.33,80.09)

"FIA",355.33,355.33,80.1)

"FIA",355.33,355.33,80.11)

"FIA",355.33,355.33,80.12)

"FIA",355.33,355.33,80.13)

"FIA",355.33,355.33,80.14)

"FIA",355.33,355.33,80.15)

"FIA",355.33,355.33,80.16)

"FIA",355.33,355.33,80.17)

"FIA",355.33,355.33,80.18)

"FIA",355.33,355.33,80.19)

"FIA",355.33,355.33,80.2)

"FIA",365)
IIV RESPONSE
"FIA",365,0)
^IBCN(365,
"FIA",365,0,0)
365
"FIA",365,0,1)
y^n^p^^^^n^^n
"FIA",365,0,10)

"FIA",365,0,11)

"FIA",365,0,"RLRO")

"FIA",365,0,"VR")
2.0^IB
"FIA",365,365)
1
"FIA",365,365,5.06)

"FIA",365,365,5.07)

"FIA",365,365,6)

"FIA",365,365,7)

"FIA",365,365,8.01)

"FIA",365,365.02)
1
"FIA",365,365.02,.04)

"FIA",365,365.02,4.09)

"FIA",365,365.02,14)

"FIA",365,365.06)
0
"FIA",365,365.07)
0
"FIA",365,365.29)
1
"FIA",365,365.29,.03)

"FIA",365,365.292)
0
"FIA",365.013)
X12 271 SERVICE TYPE
"FIA",365.013,0)
^IBE(365.013,
"FIA",365.013,0,0)
365.013I
"FIA",365.013,0,1)
y^y^f^^n^^y^o^n
"FIA",365.013,0,10)

"FIA",365.013,0,11)

"FIA",365.013,0,"RLRO")

"FIA",365.013,0,"VR")
2.0^IB
"FIA",365.013,365.013)
0
"FIA",365.016)
X12 271 QUANTITY QUALIFIER
"FIA",365.016,0)
^IBE(365.016,
"FIA",365.016,0,0)
365.016I
"FIA",365.016,0,1)
y^y^f^^n^^y^o^n
"FIA",365.016,0,10)

"FIA",365.016,0,11)

"FIA",365.016,0,"RLRO")

"FIA",365.016,0,"VR")
2.0^IB
"FIA",365.016,365.016)
0
"FIA",365.021)
X12 271 CONTACT QUALIFIER
"FIA",365.021,0)
^IBE(365.021,
"FIA",365.021,0,0)
365.021I
"FIA",365.021,0,1)
y^y^f^^n^^y^o^n
"FIA",365.021,0,10)

"FIA",365.021,0,11)

"FIA",365.021,0,"RLRO")

"FIA",365.021,0,"VR")
2.0^IB
"FIA",365.021,365.021)
0
"FIA",365.026)
X12 271 DATE QUALIFIER
"FIA",365.026,0)
^IBE(365.026,
"FIA",365.026,0,0)
365.026I
"FIA",365.026,0,1)
y^y^f^^n^^y^o^n
"FIA",365.026,0,10)

"FIA",365.026,0,11)

"FIA",365.026,0,"RLRO")

"FIA",365.026,0,"VR")
2.0^IB
"FIA",365.026,365.026)
0
"FIA",365.027)
X12 271 LOOP ID
"FIA",365.027,0)
^IBE(365.027,
"FIA",365.027,0,0)
365.027I
"FIA",365.027,0,1)
y^y^f^^n^^y^o^n
"FIA",365.027,0,10)

"FIA",365.027,0,11)

"FIA",365.027,0,"RLRO")

"FIA",365.027,0,"VR")
2.0^IB
"FIA",365.027,365.027)
0
"FIA",365.028)
X12 271 REFERENCE IDENTIFICATION
"FIA",365.028,0)
^IBE(365.028,
"FIA",365.028,0,0)
365.028I
"FIA",365.028,0,1)
y^n^f^^n^^y^o^n
"FIA",365.028,0,10)

"FIA",365.028,0,11)

"FIA",365.028,0,"RLRO")

"FIA",365.028,0,"VR")
2.0^IB
"FIA",365.028,365.028)
0
"FIA",365.1)
IIV TRANSMISSION QUEUE
"FIA",365.1,0)
^IBCN(365.1,
"FIA",365.1,0,0)
365.1
"FIA",365.1,0,1)
y^y^p^^^^n^^n
"FIA",365.1,0,10)

"FIA",365.1,0,11)

"FIA",365.1,0,"RLRO")

"FIA",365.1,0,"VR")
2.0^IB
"FIA",365.1,365.1)
1
"FIA",365.1,365.1,3.01)

"INIT")
IBY438PO
"KRN",19,114,-1)
2^1
"KRN",19,114,0)
ZTMQUEUABLE OPTIONS^Parent of Queuable Options^^M^1^^^^^^^^^
"KRN",19,114,10,0)
^19.01IP^21^15
"KRN",19,114,10,21,0)
11212
"KRN",19,114,10,21,"^")
IBCNE EIV PAYER LINK NOTIFY
"KRN",19,114,"U")
PARENT OF QUEUABLE OPTIONS
"KRN",19,11212,-1)
0^2
"KRN",19,11212,0)
IBCNE EIV PAYER LINK NOTIFY^Unlinked payers notification^^A^^^^^^^^INTEGRATED BILLING^^1
"KRN",19,11212,1,0)
^19.06^1^1^3100828^^
"KRN",19,11212,1,1,0)
This option sends a Mailman notification to eIV mail group that contains total number of nationally active unlinked payers with potential insurance company matches along with the list of nationally active linked payers that are locally inactive.
"KRN",19,11212,2)
y
"KRN",19,11212,20)
D EN^IBCNEML
"KRN",19,11212,200.9)
y
"KRN",19,11212,"U")
UNLINKED PAYERS NOTIFICATION
"KRN",101,1121,-1)
0^5
"KRN",101,1121,0)
IBJ EXIT^Exit^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,1121,20)
D FASTEXIT^IBJU1
"KRN",101,1121,99)
62031,39649
"KRN",101,3577,-1)
0^4
"KRN",101,3577,0)
IBJP IIV GENERAL EDIT^General Parameters^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,3577,20)
D IIVEDIT^IBJPI2(0)
"KRN",101,3577,99)
62031,39649
"KRN",101,3579,-1)
0^2
"KRN",101,3579,0)
IBJP INS VER MENU^Insurance Verification Menu^^M^^^^^^^^INTEGRATED BILLING
"KRN",101,3579,4)
26^4
"KRN",101,3579,10,0)
^101.01PA^6^4
"KRN",101,3579,10,3,0)
3577^GP^1^
"KRN",101,3579,10,3,"^")
IBJP IIV GENERAL EDIT
"KRN",101,3579,10,5,0)
1121^EX^5^
"KRN",101,3579,10,5,"^")
IBJ EXIT
"KRN",101,3579,10,6,0)
4350^ST^3^
"KRN",101,3579,10,6,"^")
IBJP IB SITE SELECTED SERVICE CODES
"KRN",101,3579,15)
I $G(IBFASTXT) S VALMBCK="Q"
"KRN",101,3579,20)
K IBFASTXT
"KRN",101,3579,24)
I 1 X:$D(^ORD(101,+$P(^ORD(101,DA(1),10,DA,0),"^"),24)) ^(24)
"KRN",101,3579,26)
D SHOW^VALM
"KRN",101,3579,28)
Select Action: 
"KRN",101,3579,99)
62150,46042
"KRN",101,4350,-1)
0^6
"KRN",101,4350,0)
IBJP IB SITE SELECTED SERVICE CODES^Service Type Codes^^A^^^^^^^^INTEGRATED BILLING
"KRN",101,4350,4)
26^4^^SS
"KRN",101,4350,10,0)
^101.01PA
"KRN",101,4350,15)

"KRN",101,4350,20)
D EN^IBJPI5
"KRN",101,4350,28)
Site Selected Codes
"KRN",101,4350,99)
62028,62040
"KRN",101,4426,-1)
1^3
"KRN",101,4426,0)
IBJP IIV BATCH EXTRACT EDIT
"KRN",409.61,83,-1)
0^3
"KRN",409.61,83,0)
IBJP MCCR PARAMETERS^1^^80^5^19^1^1^MCCR Parameter^IBJP MCCR PARAMETERS MENU^MCCR Site Parameters^1^^1
"KRN",409.61,83,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,83,"ARRAY")
 ^TMP("IBJPM",$J)
"KRN",409.61,83,"COL",0)
^409.621^^0
"KRN",409.61,83,"FNL")
D EXIT^IBJPM
"KRN",409.61,83,"HDR")
D HDR^IBJPM
"KRN",409.61,83,"HLP")
D HELP^IBJPM
"KRN",409.61,83,"INIT")
D INIT^IBJPM
"KRN",409.61,629,-1)
0^2
"KRN",409.61,629,0)
IBJP IIV SITE PARAMETERS^1^^80^4^20^1^1^^IBJP INS VER MENU^eIV Site Parameters^1^^1
"KRN",409.61,629,1)
^VALM HIDDEN ACTIONS
"KRN",409.61,629,"ARRAY")
 ^TMP($J,"IBJPI")
"KRN",409.61,629,"FNL")
D EXIT^IBJPI
"KRN",409.61,629,"HDR")
D HDR^IBJPI
"KRN",409.61,629,"HLP")
D HELP^IBJPI
"KRN",409.61,629,"INIT")
D INIT^IBJPI
"MBREQ")
0
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"ORD",17,409.61)
409.61;17;1;;;;LME1^XPDIA1;;;LMDEL^XPDIA1
"ORD",17,409.61,0)
LIST TEMPLATE
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",49,-1)
1^1
"PKG",49,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",49,20,0)
^9.402P^1^1
"PKG",49,20,1,0)
2^^IBAXDR
"PKG",49,20,1,1)

"PKG",49,20,"B",2,1)

"PKG",49,22,0)
^9.49I^1^1
"PKG",49,22,1,0)
2.0^2940321^2960627
"PKG",49,22,1,"PAH",1,0)
438^3110708
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
34
"RTN","IBCNBCD")
0^9^B85841141^B84472806
"RTN","IBCNBCD",1,0)
IBCNBCD ;ALB/ARH-Ins Buffer: display/compare buffer and existing ins ;1 Jun 97
"RTN","IBCNBCD",2,0)
 ;;2.0;INTEGRATED BILLING;**82,251,361,371,416,438**;21-MAR-94;Build 52
"RTN","IBCNBCD",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBCD",4,0)
 ;
"RTN","IBCNBCD",5,0)
INS(IBBUFDA,IBINSDA) ; display a buffer entry's insurance company fields and
"RTN","IBCNBCD",6,0)
 ; an existing insurance company's fields for comparison
"RTN","IBCNBCD",7,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBCD",8,0)
 ;
"RTN","IBCNBCD",9,0)
 S IBEXTDA=$G(IBINSDA)_","
"RTN","IBCNBCD",10,0)
 ;
"RTN","IBCNBCD",11,0)
 I +$P($G(^DIC(36,+IBEXTDA,0)),U,5) W !,?10,"Selected Insurance Company "_$$GET1^DIQ(36,IBEXTDA,.01)_" is Inactive!",!
"RTN","IBCNBCD",12,0)
 ;
"RTN","IBCNBCD",13,0)
 W ! D WRTFLD("  Insurance Data:  Buffer Data                     Selected Insurance Company   ",0,80,"BU")
"RTN","IBCNBCD",14,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",15,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.05),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(36,IBEXTDA,1),1:"") D WRTLN("Reimburse?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",16,0)
 ;
"RTN","IBCNBCD",17,0)
 D DISPLAY(20.02,36,.131,"Phone Number:")
"RTN","IBCNBCD",18,0)
 D DISPLAY(20.03,36,.132,"Billing Phone:")
"RTN","IBCNBCD",19,0)
 D DISPLAY(20.04,36,.133,"Pre-Cert Phone:")
"RTN","IBCNBCD",20,0)
 D DISPLAY(21.01,36,.111,"Street [Line 1]:")
"RTN","IBCNBCD",21,0)
 D DISPLAY(21.02,36,.112,"Street [Line 2]:")
"RTN","IBCNBCD",22,0)
 D DISPLAY(21.03,36,.113,"Street [Line 3]:")
"RTN","IBCNBCD",23,0)
 D DISPLAY(21.04,36,.114,"City:")
"RTN","IBCNBCD",24,0)
 D DISPLAY(21.05,36,.115,"State:")
"RTN","IBCNBCD",25,0)
 D DISPLAY(21.06,36,.116,"Zip Code:")
"RTN","IBCNBCD",26,0)
 ;
"RTN","IBCNBCD",27,0)
 S IBFLD1="(bold=accepted on Merge)",IBFLD2="(bold=replaced on Overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",28,0)
 Q
"RTN","IBCNBCD",29,0)
 ;
"RTN","IBCNBCD",30,0)
GRP(IBBUFDA,IBGRPDA) ; display a buffer entry's group insurance fields and an existing group/plan's fields for comparison
"RTN","IBCNBCD",31,0)
 N IBEXTDA,IBFLD1,IBFLD2,X I '$G(IBBUFDA) Q
"RTN","IBCNBCD",32,0)
 ;
"RTN","IBCNBCD",33,0)
 S IBEXTDA=$G(IBGRPDA)_","
"RTN","IBCNBCD",34,0)
 ;
"RTN","IBCNBCD",35,0)
 I +$P($G(^IBA(355.3,+IBEXTDA,0)),U,11) W !,?23,"Selected Group/Plan is Inactive!",!
"RTN","IBCNBCD",36,0)
 ;
"RTN","IBCNBCD",37,0)
 W ! D WRTFLD(" Group/Plan Data:  Buffer Data                     Selected Group/Plan          ",0,80,"BU")
"RTN","IBCNBCD",38,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",39,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,40.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(355.3,IBEXTDA,.02),1:"") D WRTLN("Is Group Plan?:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",40,0)
 ;
"RTN","IBCNBCD",41,0)
 D DISPLAY(40.02,355.3,.03,"Group Name:")
"RTN","IBCNBCD",42,0)
 D DISPLAY(40.03,355.3,.04,"Group Number:")
"RTN","IBCNBCD",43,0)
 D DISPLAY(40.1,355.3,6.02,"BIN:") ;;Daou/EEN - adding BIN and PCN
"RTN","IBCNBCD",44,0)
 D DISPLAY(40.11,355.3,6.03,"PCN:")
"RTN","IBCNBCD",45,0)
 D DISPLAY(40.04,355.3,.05,"Require UR:")
"RTN","IBCNBCD",46,0)
 D DISPLAY(40.05,355.3,.06,"Require Pre-Cert:")
"RTN","IBCNBCD",47,0)
 D DISPLAY(40.06,355.3,.12,"Require Amb Cert:")
"RTN","IBCNBCD",48,0)
 D DISPLAY(40.07,355.3,.07,"Exclude Pre-Cond:")
"RTN","IBCNBCD",49,0)
 D DISPLAY(40.08,355.3,.08,"Benefits Assign:")
"RTN","IBCNBCD",50,0)
 D DISPLAY(40.09,355.3,.09,"Type of Plan:")
"RTN","IBCNBCD",51,0)
 ;
"RTN","IBCNBCD",52,0)
 S IBFLD1="(bold=accepted on merge)",IBFLD2="(bold=replaced on overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",53,0)
 Q
"RTN","IBCNBCD",54,0)
 ;
"RTN","IBCNBCD",55,0)
POLICY(IBBUFDA,IBPOLDA) ; display a buffer entry's patient policy fields and an existing patient policy's fields for comparison
"RTN","IBCNBCD",56,0)
 N DFN,IBEXTDA,IBFLD1,IBFLD2,X,Y,DIR,DIRUT I '$G(IBBUFDA) Q
"RTN","IBCNBCD",57,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBCD",58,0)
 ;
"RTN","IBCNBCD",59,0)
 S IBEXTDA=$G(IBPOLDA)_","_DFN_","
"RTN","IBCNBCD",60,0)
 ;
"RTN","IBCNBCD",61,0)
 W ! D WRTFLD("     Policy Data:  Buffer Data                     Selected Policy              ",0,80,"BU")
"RTN","IBCNBCD",62,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,20.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,.01),1:"<none selected>") D WRTLN("Company Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",63,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,40.03),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2.312,IBEXTDA,21),1:"") D WRTLN("Group #:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",64,0)
 S IBFLD1=$$GET1^DIQ(355.33,IBBUFDA,60.01),IBFLD2=$S(+IBEXTDA:$$GET1^DIQ(2,DFN,.01),1:"") D WRTLN("Patient Name:",IBFLD1,IBFLD2,"","","")
"RTN","IBCNBCD",65,0)
 S IBFLD1=$P($$GET1^DIQ(355.33,IBBUFDA,.1),"@"),IBFLD2=$S(+IBEXTDA:$P($$GET1^DIQ(2.312,IBEXTDA,1.03),"@"),1:"") D WRTLN("Last Verified:",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",66,0)
 ;
"RTN","IBCNBCD",67,0)
 D DISPLAY(60.02,2.312,8,"Effective Date:")
"RTN","IBCNBCD",68,0)
 D DISPLAY(60.03,2.312,3,"Expiration Date:")
"RTN","IBCNBCD",69,0)
 D DISPLAY(60.04,2.312,1,"Subscriber Id:")
"RTN","IBCNBCD",70,0)
 D DISPLAY(60.05,2.312,6,"Whose Insurance:")
"RTN","IBCNBCD",71,0)
 D DISPLAY(60.06,2.312,16,"Relationship:")
"RTN","IBCNBCD",72,0)
 D DISPLAY(60.07,2.312,17,"Name of Insured:")
"RTN","IBCNBCD",73,0)
 D DISPLAY(60.08,2.312,3.01,"Insured's DOB:")
"RTN","IBCNBCD",74,0)
 D DISPLAY(60.09,2.312,3.05,"Insured's SSN:")
"RTN","IBCNBCD",75,0)
 D DISPLAY(60.13,2.312,3.12,"Insured's SEX:")
"RTN","IBCNBCD",76,0)
 D DISPLAY(60.1,2.312,4.01,"Primary Provider:")
"RTN","IBCNBCD",77,0)
 D DISPLAY(60.11,2.312,4.02,"Provider Phone:")
"RTN","IBCNBCD",78,0)
 D DISPLAY(60.12,2.312,.2,"Coor of Benefits:")
"RTN","IBCNBCD",79,0)
 D DISPLAY(61.01,2.312,2.1,"Emp Sponsored?:")
"RTN","IBCNBCD",80,0)
 D DISPLAY(62.01,2.312,5.01,"Patient Id:")
"RTN","IBCNBCD",81,0)
 D DISPLAY(62.02,2.312,3.06,"Subscr Str Ln 1:")
"RTN","IBCNBCD",82,0)
 D DISPLAY(62.03,2.312,3.07,"Subscr Str Ln 2:")
"RTN","IBCNBCD",83,0)
 D DISPLAY(62.04,2.312,3.08,"Subscr City:")
"RTN","IBCNBCD",84,0)
 D DISPLAY(62.05,2.312,3.09,"Subscr State:")
"RTN","IBCNBCD",85,0)
 D DISPLAY(62.06,2.312,3.1,"Subscr Zip:")
"RTN","IBCNBCD",86,0)
 D DISPLAY(62.07,2.312,3.13,"Subscr Country:")
"RTN","IBCNBCD",87,0)
 D DISPLAY(62.08,2.312,3.14,"Subscr Subdiv:")
"RTN","IBCNBCD",88,0)
 ;
"RTN","IBCNBCD",89,0)
 I +$G(^IBA(355.33,IBBUFDA,61))!($$GET1^DIQ(2.312,IBEXTDA,2.1)="YES") D ESGHP
"RTN","IBCNBCD",90,0)
 ;
"RTN","IBCNBCD",91,0)
 S IBFLD1="(bold=accepted on merge)",IBFLD2="(bold=replaced on overwrite)" D WRTLN("",IBFLD1,IBFLD2,"","","U")
"RTN","IBCNBCD",92,0)
 ;
"RTN","IBCNBCD",93,0)
 Q
"RTN","IBCNBCD",94,0)
 ;
"RTN","IBCNBCD",95,0)
ESGHP ; display employee sponsored group health plan
"RTN","IBCNBCD",96,0)
 W ! S DIR(0)="E",DIR("A")="Enter RETURN to continue" D ^DIR W ! Q:$D(DIRUT)
"RTN","IBCNBCD",97,0)
 ;
"RTN","IBCNBCD",98,0)
 D DISPLAY(61.02,2.312,2.015,"Employer Name:")
"RTN","IBCNBCD",99,0)
 D DISPLAY(61.03,2.312,2.11,"Emp Status:")
"RTN","IBCNBCD",100,0)
 D DISPLAY(61.04,2.312,2.12,"Retirement Date:")
"RTN","IBCNBCD",101,0)
 D DISPLAY(61.05,2.312,2.01,"Send to Employer:")
"RTN","IBCNBCD",102,0)
 D DISPLAY(61.06,2.312,2.02,"Emp Street Ln 1:")
"RTN","IBCNBCD",103,0)
 D DISPLAY(61.07,2.312,2.03,"Emp Street Ln 2:")
"RTN","IBCNBCD",104,0)
 D DISPLAY(61.08,2.312,2.04,"Emp Street Ln 3:")
"RTN","IBCNBCD",105,0)
 D DISPLAY(61.09,2.312,2.05,"Emp City:")
"RTN","IBCNBCD",106,0)
 D DISPLAY(61.1,2.312,2.06,"Emp State:")
"RTN","IBCNBCD",107,0)
 D DISPLAY(61.11,2.312,2.07,"Emp Zip Code:")
"RTN","IBCNBCD",108,0)
 D DISPLAY(61.12,2.312,2.08,"Emp Phone:")
"RTN","IBCNBCD",109,0)
 ;
"RTN","IBCNBCD",110,0)
 Q
"RTN","IBCNBCD",111,0)
 ;
"RTN","IBCNBCD",112,0)
ELIG(IBBUFDA,IBPOLDA) ; display eligibilty/benefit data
"RTN","IBCNBCD",113,0)
 N ATTR,BRESTR,BRELEN,BRPSTR,BRPLEN,CMPSTR,CMPLEN,DFN,EBISTR,EBILEN,EX,HCSSTR,HCSLEN,I,I1,IBVEBCOL,LEN,RESPIEN
"RTN","IBCNBCD",114,0)
 N RDATA,IDATA,NODATA,NOIDATA,ENDSEC,NOHSTR,NOHLEN,NOCSTR,NOCLEN,NOBSTR,NOBLEN
"RTN","IBCNBCD",115,0)
 S EBISTR="Eligibility/Benefit Information",EBILEN=$L(EBISTR)
"RTN","IBCNBCD",116,0)
 S CMPSTR="Composite Medical Procedure Information",CMPLEN=$L(CMPSTR)
"RTN","IBCNBCD",117,0)
 S HCSSTR="Health Care Service Delivery",HCSLEN=$L(HCSSTR)
"RTN","IBCNBCD",118,0)
 S BRESTR="Benefit Related Entity",BRELEN=$L(BRESTR)
"RTN","IBCNBCD",119,0)
 S BRPSTR="Benefit Related Provider Information",BRPLEN=$L(BRPSTR)
"RTN","IBCNBCD",120,0)
 S NOHSTR="   No Health Care Service Delivery data on file for this EB record.",NOHLEN=$L(NOHSTR)
"RTN","IBCNBCD",121,0)
 S NOCSTR="   No Composite Medical Procedure Information data on file for this EB record.",NOCLEN=$L(NOCSTR)
"RTN","IBCNBCD",122,0)
 S NOBSTR="   No Benefit Related Entity data on file for this EB record.",NOBLEN=$L(NOBSTR)
"RTN","IBCNBCD",123,0)
 S NODATA=1,NOIDATA=0,EX=0
"RTN","IBCNBCD",124,0)
 ; get the last reponse and make sure it contains EB data
"RTN","IBCNBCD",125,0)
 I $G(IBBUFDA) S RESPIEN=$O(^IBCN(365,"AF",IBBUFDA,""),-1) I RESPIEN S:$O(^IBCN(365,RESPIEN,2,""))'="" NODATA=0
"RTN","IBCNBCD",126,0)
 W ! D WRTFLD("        *** Non-editable Patient Eligibility/Benefit data from payer ***        ",0,80,"B")
"RTN","IBCNBCD",127,0)
 I NODATA W ! D WRTFLD("          *** No Patient Eligibility/Benefit data from payer found***           ",0,80,"B") G ELIGX
"RTN","IBCNBCD",128,0)
 W ! D WRTFLD("                   Payer Response                  VISTA Pt.Insurance           ",0,80,"BU")
"RTN","IBCNBCD",129,0)
 K ^TMP("RESP. EB DATA",$J),^TMP("INS. EB DATA",$J)
"RTN","IBCNBCD",130,0)
 S DFN=+$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBCD",131,0)
 S IBVEBCOL=1,IDATA=""
"RTN","IBCNBCD",132,0)
 ; fetch data from both eIV response and pat. insurance
"RTN","IBCNBCD",133,0)
 D INIT^IBCNES(365.02,RESPIEN_",","A",1,"RESP. EB DATA")
"RTN","IBCNBCD",134,0)
 D INIT^IBCNES(2.322,IBPOLDA_","_DFN_",","A",1,"INS. EB DATA")
"RTN","IBCNBCD",135,0)
 ; check if there is any existing pat. insurance data
"RTN","IBCNBCD",136,0)
 I $E(^TMP("INS. EB DATA",$J,"DISP",2,0),1,41)="    No eIV Eligibility/Benefit Data Found" S NOIDATA=1
"RTN","IBCNBCD",137,0)
 ; loop through response data and display it
"RTN","IBCNBCD",138,0)
 S (I,I1)="" F  S I=$O(^TMP("RESP. EB DATA",$J,"DISP",I)) Q:I=""!EX  D
"RTN","IBCNBCD",139,0)
 .I $Y+3>IOSL D PAUSE^VALM1 W @IOF I 'Y S EX=1 Q
"RTN","IBCNBCD",140,0)
 .S RDATA=^TMP("RESP. EB DATA",$J,"DISP",I,0)
"RTN","IBCNBCD",141,0)
 .; skip empty lines
"RTN","IBCNBCD",142,0)
 .I $TR(RDATA," ")="" Q
"RTN","IBCNBCD",143,0)
 .; if group title, display it and quit
"RTN","IBCNBCD",144,0)
 .I RDATA["                    eIV Eligibility/Benefit Data Group#" W ! D WRTFLD(RDATA,0,80,"B") S IDATA="" Q
"RTN","IBCNBCD",145,0)
 .; if section title, display it and quit
"RTN","IBCNBCD",146,0)
 .I $E(RDATA,1,EBILEN)=EBISTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,EBISTR,EBILEN),SECEND=0 Q
"RTN","IBCNBCD",147,0)
 .I $E(RDATA,1,CMPLEN)=CMPSTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,CMPSTR,CMPLEN),SECEND=0 Q
"RTN","IBCNBCD",148,0)
 .I $E(RDATA,1,HCSLEN)=HCSSTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,HCSSTR,HCSLEN),SECEND=0 Q
"RTN","IBCNBCD",149,0)
 .I $E(RDATA,1,BRELEN)=BRESTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,BRESTR,BRELEN),SECEND=0 Q
"RTN","IBCNBCD",150,0)
 .I $E(RDATA,1,BRPLEN)=BRPSTR W !! D WRTFLD(RDATA,0,80,"U") S I1=$$FNDNXT(I1,BRPSTR,BRPLEN),SECEND=0 Q
"RTN","IBCNBCD",151,0)
 .I $E(RDATA,1,NOHLEN)=NOHSTR W ! D WRTFLD(RDATA,0,80,"") Q
"RTN","IBCNBCD",152,0)
 .I $E(RDATA,1,NOCLEN)=NOCSTR W ! D WRTFLD(RDATA,0,80,"") Q
"RTN","IBCNBCD",153,0)
 .I $E(RDATA,1,NOBLEN)=NOBSTR W ! D WRTFLD(RDATA,0,80,"") Q
"RTN","IBCNBCD",154,0)
 .; build line with both eIV and pat. insurance values to compare
"RTN","IBCNBCD",155,0)
 .I 'NOIDATA,I1'="",'SECEND S IDATA=$G(^TMP("INS. EB DATA",$J,"DISP",I1,0)) D
"RTN","IBCNBCD",156,0)
 ..; if we run out of data for this section in pat. insurance
"RTN","IBCNBCD",157,0)
 ..I $E(IDATA,1,EBILEN)=EBISTR!($E(IDATA,1,CMPLEN)=CMPSTR)!($E(IDATA,1,HCSLEN)=HCSSTR) S SECEND=1,IDATA="" Q
"RTN","IBCNBCD",158,0)
 ..I $E(IDATA,1,BRELEN)=BRESTR!($E(IDATA,1,BRPLEN)=BRPSTR)!($E(IDATA,1,NOHLEN)=NOHSTR) S SECEND=1,IDATA="" Q
"RTN","IBCNBCD",159,0)
 ..S I1=I1+1 I '$D(^TMP("INS. EB DATA",$J,"DISP",I1)) S NOIDATA=1
"RTN","IBCNBCD",160,0)
 ..Q
"RTN","IBCNBCD",161,0)
 .W ! D WRTFLD(RDATA,0,47,""),WRTFLD(" | ",48,3,""),WRTFLD(IDATA,51,29,"")
"RTN","IBCNBCD",162,0)
 .Q
"RTN","IBCNBCD",163,0)
ELIGX ;
"RTN","IBCNBCD",164,0)
 I 'EX D PAUSE^VALM1
"RTN","IBCNBCD",165,0)
 K ^TMP("RESP. EB DATA",$J),^TMP("INS. EB DATA",$J)
"RTN","IBCNBCD",166,0)
 Q
"RTN","IBCNBCD",167,0)
 ;
"RTN","IBCNBCD",168,0)
FNDNXT(IDX,STR,LEN) ; find next node in INS. EB DATA after one that starts with string STR (section title)
"RTN","IBCNBCD",169,0)
 ; IDX - current index
"RTN","IBCNBCD",170,0)
 ; STR - string to find
"RTN","IBCNBCD",171,0)
 ; LEN - length of STR
"RTN","IBCNBCD",172,0)
 ; returns index of the node found or "" if nothing is found
"RTN","IBCNBCD",173,0)
 ;
"RTN","IBCNBCD",174,0)
 N I
"RTN","IBCNBCD",175,0)
 S I=IDX F  S I=$O(^TMP("INS. EB DATA",$J,"DISP",I)) Q:I=""  Q:($E(^TMP("INS. EB DATA",$J,"DISP",I,0),1,LEN)=STR)
"RTN","IBCNBCD",176,0)
 I +I S I=I+1 ; if found a match for section title, return the next index
"RTN","IBCNBCD",177,0)
 Q I
"RTN","IBCNBCD",178,0)
 ;
"RTN","IBCNBCD",179,0)
DISPLAY(BFLD,IFILE,IFLD,LABEL) ; extract, compare, write the two corresponding fields; one from buffer, one from ins files
"RTN","IBCNBCD",180,0)
 N BUFDATA,EXTDATA,IBOVER,IBMERG S EXTDATA=""
"RTN","IBCNBCD",181,0)
 S BUFDATA=$$GET1^DIQ(355.33,IBBUFDA,BFLD)
"RTN","IBCNBCD",182,0)
 I +IBEXTDA S EXTDATA=$$GET1^DIQ(IFILE,IBEXTDA,IFLD)
"RTN","IBCNBCD",183,0)
 ;
"RTN","IBCNBCD",184,0)
 S IBOVER=$S(BUFDATA'=""&(BUFDATA'=EXTDATA):"B",1:""),IBMERG=$S(EXTDATA="":"B",1:"")
"RTN","IBCNBCD",185,0)
 ;
"RTN","IBCNBCD",186,0)
 D WRTLN(LABEL,BUFDATA,EXTDATA,IBOVER,IBMERG)
"RTN","IBCNBCD",187,0)
 Q
"RTN","IBCNBCD",188,0)
 ;
"RTN","IBCNBCD",189,0)
WRTLN(LABEL,FLD1,FLD2,OVER,MERG,ATTR) ; write a line of formatted data with label and two fields
"RTN","IBCNBCD",190,0)
 S ATTR=$G(ATTR),OVER=ATTR_$G(OVER),MERG=ATTR_$G(MERG)
"RTN","IBCNBCD",191,0)
 S LABEL=$J(LABEL,17)_"  ",FLD1=FLD1_$J("",29-$L(FLD1)),FLD2=FLD2_$J("",29-$L(FLD2))
"RTN","IBCNBCD",192,0)
 W !
"RTN","IBCNBCD",193,0)
 D WRTFLD(LABEL,0,19,ATTR),WRTFLD(FLD1,19,29,MERG)
"RTN","IBCNBCD",194,0)
 D WRTFLD(" | ",48,3,ATTR),WRTFLD(FLD2,51,29,OVER)
"RTN","IBCNBCD",195,0)
 Q
"RTN","IBCNBCD",196,0)
 ;
"RTN","IBCNBCD",197,0)
WRTFLD(STRING,COL,WD,ATTR) ; write an individual field with display attributes
"RTN","IBCNBCD",198,0)
 N ATTRB,ATTRE,DX,DY,X,Y
"RTN","IBCNBCD",199,0)
 S ATTRB="",ATTRB=$S(ATTR["B":$G(IOINHI),1:"")_$S(ATTR["U":$G(IOUON),1:"")
"RTN","IBCNBCD",200,0)
 S ATTRE="",ATTRE=$S(ATTR["B":$G(IOINORM),1:"")_$S(ATTR["U":$G(IOUOFF),1:"")
"RTN","IBCNBCD",201,0)
 ;
"RTN","IBCNBCD",202,0)
 S DX=COL,DY=$Y X IOXY
"RTN","IBCNBCD",203,0)
 W ATTRB,$E(STRING,1,WD),ATTRE
"RTN","IBCNBCD",204,0)
 S DX=(COL+WD),DY=$Y X IOXY
"RTN","IBCNBCD",205,0)
 Q
"RTN","IBCNBEE")
0^24^B46140166^B45989984
"RTN","IBCNBEE",1,0)
IBCNBEE ;ALB/ARH-Ins Buffer: add/edit existing entries in buffer ;1 Jun 97
"RTN","IBCNBEE",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,252,251,356,361,371,377,416,438**;21-MAR-94;Build 52
"RTN","IBCNBEE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBEE",4,0)
 ;
"RTN","IBCNBEE",5,0)
ADD(IBSOURCE) ; add a new buffer file entry (#355.33), sets only status (0) node data
"RTN","IBCNBEE",6,0)
 N IBARR,IBERR,IBIFN,IBX I '$G(IBSOURCE) S IBSOURCE=1
"RTN","IBCNBEE",7,0)
 ;
"RTN","IBCNBEE",8,0)
 S IBARR(355.33,"+1,",.01)="NOW",IBARR(355.33,"+1,",.03)=IBSOURCE
"RTN","IBCNBEE",9,0)
 D UPDATE^DIE("E","IBARR","IBIFN","IBERR")
"RTN","IBCNBEE",10,0)
 S IBX=+$G(IBIFN(1)) I $D(IBERR) S $P(IBX,U,2)=$G(IBERR("DIERR",1,"TEXT",1))
"RTN","IBCNBEE",11,0)
 Q IBX
"RTN","IBCNBEE",12,0)
 ;
"RTN","IBCNBEE",13,0)
STATUS(IBBUFDA,STATUS,NC,NG,NP) ; edit the status node
"RTN","IBCNBEE",14,0)
 ;
"RTN","IBCNBEE",15,0)
 N IBX,IBARR,IBIFN Q:'$G(IBBUFDA)  S IBIFN=IBBUFDA_","
"RTN","IBCNBEE",16,0)
 D CHK^DIE(355.33,.04,"",$G(STATUS),.IBX) Q:IBX="^"
"RTN","IBCNBEE",17,0)
 ;
"RTN","IBCNBEE",18,0)
 S IBARR(355.33,IBIFN,.04)=STATUS I STATUS="R" S (NC,NG,NP)=0
"RTN","IBCNBEE",19,0)
 S IBARR(355.33,IBIFN,.07)=+$G(NC),IBARR(355.33,IBIFN,.08)=+$G(NG),IBARR(355.33,IBIFN,.09)=+$G(NP)
"RTN","IBCNBEE",20,0)
 D FILE^DIE("E","IBARR")
"RTN","IBCNBEE",21,0)
 Q
"RTN","IBCNBEE",22,0)
 ;
"RTN","IBCNBEE",23,0)
INS(IBBUFDA,FLDS) ; edit the insurance company portion of a buffer file entry
"RTN","IBCNBEE",24,0)
 ;
"RTN","IBCNBEE",25,0)
 N DIC,DIE,DA,DR,X,Y,IBCNEXT1
"RTN","IBCNBEE",26,0)
 I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",27,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",28,0)
 ;
"RTN","IBCNBEE",29,0)
 ; ESG - 6/18/02 - SDD 5.1.4 - Usage of Auto Match when editing
"RTN","IBCNBEE",30,0)
 ;     - the insurance company name in the buffer.  Also added an
"RTN","IBCNBEE",31,0)
 ;     - input transform (see below) to clean up the data coming in.
"RTN","IBCNBEE",32,0)
 ;     - fetch the current buffer ins co name
"RTN","IBCNBEE",33,0)
 ;
"RTN","IBCNBEE",34,0)
 I FLDS="MR" S IBCNEXT1=$P($G(^IBA(355.33,IBBUFDA,20)),U,1)
"RTN","IBCNBEE",35,0)
 ;
"RTN","IBCNBEE",36,0)
 S DR=$P($T(@(FLDS_"INS")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",37,0)
 ;
"RTN","IBCNBEE",38,0)
 I FLDS="MR" Q:$$INSNAME(IBBUFDA)<0  S DR=$P($T(@(FLDS_"INS")+1),";;",2,9999),DR=$P(DR,";",2,99999)
"RTN","IBCNBEE",39,0)
 ;
"RTN","IBCNBEE",40,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",41,0)
 Q
"RTN","IBCNBEE",42,0)
 ;
"RTN","IBCNBEE",43,0)
GRP(IBBUFDA,FLDS) ; edit the group/plan portion of the buffer file entry
"RTN","IBCNBEE",44,0)
 ;
"RTN","IBCNBEE",45,0)
 N DIC,DIE,DA,DR,X,Y I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",46,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",47,0)
 ;
"RTN","IBCNBEE",48,0)
 S DR=$P($T(@(FLDS_"GRP")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",49,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",50,0)
 Q
"RTN","IBCNBEE",51,0)
 ;
"RTN","IBCNBEE",52,0)
POLICY(IBBUFDA,FLDS) ; edit the patient policy portion of the buffer file entry
"RTN","IBCNBEE",53,0)
 ;
"RTN","IBCNBEE",54,0)
 N DIC,DIE,DA,DR,X,Y,IBZZ I $P($G(^IBA(355.33,+$G(IBBUFDA),0)),U,4)'="E" Q
"RTN","IBCNBEE",55,0)
 I $G(FLDS)="" S FLDS="MR"
"RTN","IBCNBEE",56,0)
 ;
"RTN","IBCNBEE",57,0)
 S DR=$P($T(@(FLDS_"POL")+1),";;",2,9999) Q:DR=""
"RTN","IBCNBEE",58,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA
"RTN","IBCNBEE",59,0)
 S DIE("NO^")="BACKOUTOK" D ^DIE K DIE,DA,DR Q:$D(Y)
"RTN","IBCNBEE",60,0)
 ;
"RTN","IBCNBEE",61,0)
 I FLDS="MR" D ESGHP(IBBUFDA)
"RTN","IBCNBEE",62,0)
 Q
"RTN","IBCNBEE",63,0)
 ;
"RTN","IBCNBEE",64,0)
ESGHP(IBBUFDA) ; sponsoring employer information
"RTN","IBCNBEE",65,0)
 N DIR,DIRUT,DUOUT,DTOUT,VAOA,VAERR,VA,DFN,IB60,IBE,IBEMPST,IBREL
"RTN","IBCNBEE",66,0)
 ;
"RTN","IBCNBEE",67,0)
 ; if insured is patient or spouse, ask if insured's current employer is the plan's sponsoring employer, if yes auto stuff it
"RTN","IBCNBEE",68,0)
 I +$G(^IBA(355.33,IBBUFDA,61)) W ! S IB60=$G(^IBA(355.33,IBBUFDA,60)) D  Q:$D(DIRUT)
"RTN","IBCNBEE",69,0)
 . ; sponsoring employer is current employer?
"RTN","IBCNBEE",70,0)
 . S DFN=+IB60,IBREL=$P(IB60,U,6),VAOA("A")=$S(IBREL="01":5,IBREL="02":6,1:"") I 'DFN!(VAOA("A")="") Q
"RTN","IBCNBEE",71,0)
 . D OAD^VADPT I $G(VAOA(9))="" Q
"RTN","IBCNBEE",72,0)
 . S DIR("?")="Enter Yes if this plan is sponsored by the "_$S(IBREL="01":"patient's",1:"spouse's")_" current employer."
"RTN","IBCNBEE",73,0)
 . S DIR("?",1)="Entering Yes will result in the "_$S(IBREL="01":"patient's",1:"spouse's")_" current employer data being",DIR("?",2)="added to the policy as the Sponsoring Employer data.",DIR("?",3)=""
"RTN","IBCNBEE",74,0)
 . S DIR("A")="Current Employer "_VAOA(9)_" Sponsors this Plan",DIR("B")="No",DIR(0)="Y" D ^DIR W ! I Y'=1 Q
"RTN","IBCNBEE",75,0)
 . ;
"RTN","IBCNBEE",76,0)
 . D DELEMP(IBBUFDA) ; delete any data already contained in these fields
"RTN","IBCNBEE",77,0)
 . ;
"RTN","IBCNBEE",78,0)
 . ; if the insured's current employer sponsors the plan then stuff that employer's address into the buffer
"RTN","IBCNBEE",79,0)
 . S IBE=$S(IBREL="01":.311,1:.25),IBEMPST=$P($G(^DPT(DFN,IBE)),U,15)
"RTN","IBCNBEE",80,0)
 . S DR="61.02///"_VAOA(9)_";61.03///"_IBEMPST_";61.06///"_$E(VAOA(1),1,30)_";61.07///"_$E(VAOA(2),1,30)
"RTN","IBCNBEE",81,0)
 . S DR=DR_";61.08///"_$E(VAOA(3),1,30)_";61.09///"_$E(VAOA(4),1,20)_";61.1////"_$P(VAOA(5),U,1)
"RTN","IBCNBEE",82,0)
 . S DR=DR_";61.11////"_$P(VAOA(11),U,1)_";61.12///"_$E(VAOA(8),1,15)
"RTN","IBCNBEE",83,0)
 . S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",84,0)
 ;
"RTN","IBCNBEE",85,0)
 ; if employer sponsored plan, edit buffer entry's sponsoring employer info
"RTN","IBCNBEE",86,0)
 I +$G(^IBA(355.33,IBBUFDA,61)) S DR="61.02:61.12",DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",87,0)
 ;
"RTN","IBCNBEE",88,0)
 ; if not employer sponsored plan, delete any existing sponsoring employer data
"RTN","IBCNBEE",89,0)
 I $D(^IBA(355.33,IBBUFDA,61)),'$G(^IBA(355.33,IBBUFDA,61)) D DELEMP(IBBUFDA)
"RTN","IBCNBEE",90,0)
 Q
"RTN","IBCNBEE",91,0)
 ;
"RTN","IBCNBEE",92,0)
DELEMP(IBBUFDA) ; delete sponsoring employer data
"RTN","IBCNBEE",93,0)
 N DIC,DIE,DA,DR,X,Y Q:'$D(^IBA(355.33,+$G(IBBUFDA),61))
"RTN","IBCNBEE",94,0)
 S DR="61.02///@;61.03///@;61.04///@;61.05///@;61.06///@;61.07///@;61.08///@;61.09///@;61.10///@;61.11///@;61.12///@"
"RTN","IBCNBEE",95,0)
 S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR
"RTN","IBCNBEE",96,0)
 Q
"RTN","IBCNBEE",97,0)
 ;
"RTN","IBCNBEE",98,0)
INSHELP ;
"RTN","IBCNBEE",99,0)
 W !!,"------------------------ INSURANCE COMPANY INFORMATION -------------------------",!
"RTN","IBCNBEE",100,0)
 Q
"RTN","IBCNBEE",101,0)
GRPHELP ;
"RTN","IBCNBEE",102,0)
 W !!,"---------------------------- GROUP/PLAN INFORMATION ----------------------------"
"RTN","IBCNBEE",103,0)
 W !," The following data defines a specific Group or Plan provided by an Insurance "
"RTN","IBCNBEE",104,0)
 W !," Company.  This may be either a group plan with many potential members or an "
"RTN","IBCNBEE",105,0)
 W !," individual plan with a single member.",!
"RTN","IBCNBEE",106,0)
 Q
"RTN","IBCNBEE",107,0)
POLHELP ;
"RTN","IBCNBEE",108,0)
 W !!,"---------------------- POLICY AND SUBSCRIBER INFORMATION -----------------------"
"RTN","IBCNBEE",109,0)
 W !," The following data defines the subscriber specific policy information for a "
"RTN","IBCNBEE",110,0)
 W !," particular Insurance Plan.  The subscriber, the insured, and the policy holder "
"RTN","IBCNBEE",111,0)
 W !," all refer to the person who is a member of the plan and therefore holds the "
"RTN","IBCNBEE",112,0)
 W !," policy.  The patient must be covered under the plan but may not be the policy"
"RTN","IBCNBEE",113,0)
 W !," holder.",!
"RTN","IBCNBEE",114,0)
 Q
"RTN","IBCNBEE",115,0)
 ;
"RTN","IBCNBEE",116,0)
INSNAME(IBBUFDA) ;  Reset insurance company name
"RTN","IBCNBEE",117,0)
 N DR,DIE,DA,Y,X,IBX,IBNEW,IBNAME
"RTN","IBCNBEE",118,0)
 S IBX=-1
"RTN","IBCNBEE",119,0)
 S DR=20.01,DIE="^IBA(355.33,",DA=IBBUFDA
"RTN","IBCNBEE",120,0)
 D ^DIE
"RTN","IBCNBEE",121,0)
 I '$D(Y) S IBNEW=$$CHECK(IBBUFDA)
"RTN","IBCNBEE",122,0)
 I +$G(IBNEW)'<0,$G(IBNEW)'=0,$D(IBNEW) S DR=$P(DR,";",1)_"////"_IBNEW S DIE="^IBA(355.33,",DA=IBBUFDA D ^DIE K DIE,DA,DR I '$D(Y) S IBX=0
"RTN","IBCNBEE",123,0)
 ; BHS - 10/15/03 - If user entered a caret during $$CHECK still set
"RTN","IBCNBEE",124,0)
 ;                  return value to 0 so the user can edit the other
"RTN","IBCNBEE",125,0)
 ;                  INS fields
"RTN","IBCNBEE",126,0)
 I $G(IBNEW)=0!($G(IBNEW)=-1) S IBX=0
"RTN","IBCNBEE",127,0)
 Q IBX
"RTN","IBCNBEE",128,0)
 ;
"RTN","IBCNBEE",129,0)
CHECK(IBBUFDA) ; Select Insurance Company Name and Automatch
"RTN","IBCNBEE",130,0)
 ; Buffer file (#355.33), field# 20.01.
"RTN","IBCNBEE",131,0)
 ; ESG - 6/18/02 - SDD 5.1.4 - Usage of Auto Match when editing the
"RTN","IBCNBEE",132,0)
 ;       insurance company name.  Also, display the insurance company
"RTN","IBCNBEE",133,0)
 ;       name lookup/lister and the Auto Match lookup/lister.
"RTN","IBCNBEE",134,0)
 ;
"RTN","IBCNBEE",135,0)
 NEW IBNEW,IBNAME,AMLIST
"RTN","IBCNBEE",136,0)
 ;
"RTN","IBCNBEE",137,0)
 S IBNEW=0,IBNAME=$P($G(^IBA(355.33,$G(IBBUFDA),20)),U,1)
"RTN","IBCNBEE",138,0)
 I IBNAME="" G CHECKQ
"RTN","IBCNBEE",139,0)
 ;
"RTN","IBCNBEE",140,0)
 ; Perform an insurance company lookup/lister
"RTN","IBCNBEE",141,0)
 ; BHS - 10/15/03 - Removed quits when user enters a caret to quit the
"RTN","IBCNBEE",142,0)
 ;                  the ins lister or Auto Match lister
"RTN","IBCNBEE",143,0)
 S IBNEW=$$DICINS^IBCNBU1(IBNAME,1,10)
"RTN","IBCNBEE",144,0)
 I IBNEW=0!(IBNEW<0) D
"RTN","IBCNBEE",145,0)
 . I '$$AMLOOK^IBCNEUT1(IBNAME,1,.AMLIST) Q
"RTN","IBCNBEE",146,0)
 . S IBNEW=$$AMSEL^IBCNEUT1(.AMLIST)
"RTN","IBCNBEE",147,0)
 ;
"RTN","IBCNBEE",148,0)
 ; user chose a valid insurance company - possible Auto Match add
"RTN","IBCNBEE",149,0)
 I IBNEW'<0,IBNEW'=0 D AMADD^IBCNEUT6(X,IBCNEXT1)
"RTN","IBCNBEE",150,0)
 ;
"RTN","IBCNBEE",151,0)
CHECKQ Q IBNEW
"RTN","IBCNBEE",152,0)
 ;
"RTN","IBCNBEE",153,0)
MRINS ; Insurance Company fields asked of MCCR users in the Buffer Process options (all buffer ins fields 20.01-21.06)
"RTN","IBCNBEE",154,0)
 ;;20.01;20.05;20.02:20.04;21.01;I X="" S Y="@111";21.02;I X="" S Y="@111";21.03;@111;21.04:21.06
"RTN","IBCNBEE",155,0)
 ;
"RTN","IBCNBEE",156,0)
MRGRP ; Group/Plan fields asked of MCCR users in the Buffer Process options (all buffer grp fields 40.01-40.09) ;;Daou/EEN adding BIN and PCN (40.1,40.11)
"RTN","IBCNBEE",157,0)
 ;;40.01:40.03;40.1;40.11;40.09;40.04:40.08
"RTN","IBCNBEE",158,0)
 ;
"RTN","IBCNBEE",159,0)
MRPOL ; Patient Policy fields asked of MCCR users in the Buffer Process options (all buffer policy fields except ESGHP,60.05,60.06 60.02-61.01
"RTN","IBCNBEE",160,0)
 ;;60.02;60.03;60.14PT. RELATIONSHIP TO INSURED;S IBZZ=X;I IBZZ'="18" S Y="@111";60.07///1;60.04T;60.08///@;60.09///@;62.01///@;S Y="@112";@111;60.07;60.04T;60.08;60.13;62.01T;@112;60.1:60.12;.03;61.01;62.02;62.03;62.04;62.05;62.06
"RTN","IBCNBEE",161,0)
 ;
"RTN","IBCNBEE",162,0)
OTINS ; Insurance Company fields asked of non-MCCR users entering buffer data from options outside IB (20.01-20.04,21.01-21.06)
"RTN","IBCNBEE",163,0)
 ;;20.01:20.04;21.01;I X="" S Y="@111";21.02;I X="" S Y="@111";21.03;@111;21.04:21.06
"RTN","IBCNBEE",164,0)
 ;
"RTN","IBCNBEE",165,0)
OTGRP ; Group/Plan fields asked of non-MCCR users entering buffer data from options outside IB (40.02,40.03,40.09) ;;Daou/EEN-adding BIN & PCN (40.1,40.11)
"RTN","IBCNBEE",166,0)
 ;;40.02;40.03;40.1;40.11;40.09
"RTN","IBCNBEE",167,0)
 ;
"RTN","IBCNBEE",168,0)
OTPOL ; Patient Policy fields asked of non-MCCR users entering buffer data from options outside IB (60.02-60.08)
"RTN","IBCNBEE",169,0)
 ;;60.02;60.03;60.14PT. RELATIONSHIP TO INSURED;S IBZZ=X;60.04T;I IBZZ'="18" S Y="@111";60.07///1;60.08///@;60.09///@;62.01///@;S Y="@112";@111;60.07;60.08;60.13;62.01T;@112;62.02;62.03;62.04;62.05;62.06
"RTN","IBCNBES")
0^19^B7989957^B5872961
"RTN","IBCNBES",1,0)
IBCNBES ;ALB/ARH-Ins Buffer: stuff new entries/data into buffer ;1 Jun 97
"RTN","IBCNBES",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,345,438**;21-MAR-94;Build 52
"RTN","IBCNBES",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBES",4,0)
 ;
"RTN","IBCNBES",5,0)
 ;
"RTN","IBCNBES",6,0)
ADDSTF(IBSOURCE,DFN,IBDATA) ;  add new entry to Insurance Buffer file (355.33) and stuff the data passed in, no user interaction
"RTN","IBCNBES",7,0)
 ;  IBSOURCE = source of information             (required)
"RTN","IBCNBES",8,0)
 ;             1 = interview           2 = data match
"RTN","IBCNBES",9,0)
 ;             3 = ivm                 4 = pre-registration
"RTN","IBCNBES",10,0)
 ;             5 = eIV
"RTN","IBCNBES",11,0)
 ;  DFN      = patient's ifn in file 2           (required)
"RTN","IBCNBES",12,0)
 ;  IBDATA   = data to file in Buffer in an array subscripted by field number of the data field in 355.33
"RTN","IBCNBES",13,0)
 ;             ex:  IBDATA(20.01)="Insurance Company Name", etc,
"RTN","IBCNBES",14,0)
 ;  returns ien of new entry or 0 followed by error if entry not added
"RTN","IBCNBES",15,0)
 ;
"RTN","IBCNBES",16,0)
 ;  example of call: $$ADDBUF^IBCNBES(2,DFN,.IBDATA)   where IBDATA(field #) = value
"RTN","IBCNBES",17,0)
 ;
"RTN","IBCNBES",18,0)
 N X,Y,IBBUFDA,IBERROR
"RTN","IBCNBES",19,0)
 ;
"RTN","IBCNBES",20,0)
 ;  verify source of information and data exists to store
"RTN","IBCNBES",21,0)
 I $G(IBSOURCE)="" S IBERROR="SOURCE OF INFORMATION INCORRECT" G EXIT
"RTN","IBCNBES",22,0)
 I $G(^DPT(+$G(DFN),0))="" S IBERROR="NO PATIENT DEFINED" G EXIT
"RTN","IBCNBES",23,0)
 I $D(IBDATA)<10 S IBERROR="NO DATA TO STORE" G EXIT
"RTN","IBCNBES",24,0)
 ;
"RTN","IBCNBES",25,0)
 ;  add new entry to Buffer file (355.33)
"RTN","IBCNBES",26,0)
 S IBBUFDA=+$$ADD^IBCNBEE(IBSOURCE) I 'IBBUFDA S IBERROR="COULD NOT CREATE A NEW BUFFER ENTRY" G EXIT
"RTN","IBCNBES",27,0)
 ;
"RTN","IBCNBES",28,0)
 S IBDATA(60.01)=+DFN
"RTN","IBCNBES",29,0)
 ;
"RTN","IBCNBES",30,0)
 ; Set up DUZ (interface user) so 60.01 field check can find 'valid reason' for sensitive
"RTN","IBCNBES",31,0)
 ; patients and not set 60.01 to '0' with an error in tag FLDCHK
"RTN","IBCNBES",32,0)
 I '$G(DUZ) D DUZ^XUP(.5)
"RTN","IBCNBES",33,0)
 ;
"RTN","IBCNBES",34,0)
 D EDITSTF(+IBBUFDA,.IBDATA)
"RTN","IBCNBES",35,0)
 ;
"RTN","IBCNBES",36,0)
 ; delete leftover ESGHP data if ESGHP? is not Yes
"RTN","IBCNBES",37,0)
 I +$G(IBBUFDA),$D(^IBA(355.33,$G(IBBUFDA),61)),'$G(^IBA(355.33,$G(IBBUFDA),61)) D DELEMP^IBCNBEE($G(IBBUFDA))
"RTN","IBCNBES",38,0)
 ;
"RTN","IBCNBES",39,0)
EXIT Q +$G(IBBUFDA)_"^"_$G(IBERROR)
"RTN","IBCNBES",40,0)
 ;
"RTN","IBCNBES",41,0)
EDITSTF(IBBUFDA,IBDATA) ;  loop though data array and stuff each buffer field, no user interaction
"RTN","IBCNBES",42,0)
 ;
"RTN","IBCNBES",43,0)
 N IBFIELD,IBVALUE,IBARR,IBERR Q:'$G(^IBA(355.33,$G(IBBUFDA),0))
"RTN","IBCNBES",44,0)
 ;
"RTN","IBCNBES",45,0)
 S IBFIELD=0 F  S IBFIELD=$O(IBDATA(IBFIELD)) Q:'IBFIELD  D
"RTN","IBCNBES",46,0)
 . ; have to file subscriber id last in order for real-time verification inquiry triggers to work properly
"RTN","IBCNBES",47,0)
 . I IBFIELD=60.04 Q
"RTN","IBCNBES",48,0)
 . S IBVALUE=$$FLDCHK(355.33,IBFIELD,IBDATA(IBFIELD)) Q:'IBVALUE
"RTN","IBCNBES",49,0)
 . S IBARR(355.33,IBBUFDA_",",IBFIELD)=$P(IBVALUE,U,2)
"RTN","IBCNBES",50,0)
 I $D(IBARR)>9 D FILE^DIE("E","IBARR","IBERR")
"RTN","IBCNBES",51,0)
 ; file subscriber id
"RTN","IBCNBES",52,0)
 I $G(IBDATA(60.04))'="" D
"RTN","IBCNBES",53,0)
 .S IBVALUE=$$FLDCHK(355.33,60.04,IBDATA(60.04)) Q:'IBVALUE
"RTN","IBCNBES",54,0)
 .K IBARR S IBARR(355.33,IBBUFDA_",",60.04)=$P(IBVALUE,U,2)
"RTN","IBCNBES",55,0)
 .D FILE^DIE("E","IBARR","IBERR")
"RTN","IBCNBES",56,0)
 .Q
"RTN","IBCNBES",57,0)
 Q
"RTN","IBCNBES",58,0)
 ;
"RTN","IBCNBES",59,0)
FLDCHK(FILE,FIELD,VALUE) ; minor checks on data: truncate if length too long, if pointer add ' so can be processed as external format
"RTN","IBCNBES",60,0)
 N IBATTR,IBERR,IBX S IBX="1^"_VALUE
"RTN","IBCNBES",61,0)
 I VALUE="" S IBX="0^No data value." G FLDCHKQ
"RTN","IBCNBES",62,0)
 D FIELD^DID(FILE,FIELD,"N","FIELD LENGTH;SPECIFIER","IBATTR","IBERR")
"RTN","IBCNBES",63,0)
 I $D(IBERR) S IBX="0^"_$G(IBERR("DIERR",1,"TEXT",1)) G FLDCHKQ
"RTN","IBCNBES",64,0)
 I $G(IBATTR("SPECIFIER"))["P" S IBX="1^`"_VALUE G FLDCHKQ
"RTN","IBCNBES",65,0)
 I $D(IBATTR("FIELD LENGTH")) S IBX="1^"_$E(VALUE,1,+IBATTR("FIELD LENGTH"))
"RTN","IBCNBES",66,0)
FLDCHKQ Q IBX
"RTN","IBCNBLA1")
0^20^B83105620^B77705604
"RTN","IBCNBLA1",1,0)
IBCNBLA1 ;ALB/ARH - Ins Buffer: LM action calls (cont) ;1 Jun 97
"RTN","IBCNBLA1",2,0)
 ;;2.0;INTEGRATED BILLING;**82,133,149,184,252,271,416,438**;21-MAR-94;Build 52
"RTN","IBCNBLA1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLA1",4,0)
 ;
"RTN","IBCNBLA1",5,0)
ADDBUF ; add a new buffer entry protocol
"RTN","IBCNBLA1",6,0)
 N DIC,DIR,DIRUT,DUOUT,X,Y,IBIN,DFN,IBBUFDA,IBDATA,AMLIST,IBHELP
"RTN","IBCNBLA1",7,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",8,0)
 ;
"RTN","IBCNBLA1",9,0)
 ; Patient lookup
"RTN","IBCNBLA1",10,0)
 S DIC(0)="AEQM",DIC="^DPT(" D ^DIC Q:Y'>0  S DFN=+Y W !
"RTN","IBCNBLA1",11,0)
 ;
"RTN","IBCNBLA1",12,0)
INS ; Insurance company lookup
"RTN","IBCNBLA1",13,0)
 S DIR("A")="Insurance Company",DIR(0)="FO^1:30"
"RTN","IBCNBLA1",14,0)
 S DIR("?",1)="Please enter the name of the insurance company that provides coverage for this"
"RTN","IBCNBLA1",15,0)
 S DIR("?",2)="patient.  This response is a free text response, however, a partial insurance"
"RTN","IBCNBLA1",16,0)
 S DIR("?")="company name look-up is available here."
"RTN","IBCNBLA1",17,0)
 ; BHS - 10/15/03 - Removed quit condition when user enters a caret
"RTN","IBCNBLA1",18,0)
 ;                  during the insurance lister and only sets IBIN
"RTN","IBCNBLA1",19,0)
 ;                  when a valid selection is made
"RTN","IBCNBLA1",20,0)
 D ^DIR K DIR Q:$D(DIRUT)  S IBIN=Y,Y=$$DICINS^IBCNBU1(Y,1,10) I Y'<0,Y'=0 S IBIN=Y
"RTN","IBCNBLA1",21,0)
 ;
"RTN","IBCNBLA1",22,0)
 ; ESG - 6/17/02 - Usage of Auto Match file when adding a buffer entry
"RTN","IBCNBLA1",23,0)
 ;     - SDD 5.1.3
"RTN","IBCNBLA1",24,0)
 ;
"RTN","IBCNBLA1",25,0)
 ; BHS - 10/15/03 - Added condition to allow Auto Match lookup when user
"RTN","IBCNBLA1",26,0)
 ;                  entered a caret during the insurance lister
"RTN","IBCNBLA1",27,0)
 I Y=0!(Y<0),$$AMLOOK^IBCNEUT1(IBIN,1,.AMLIST) S Y=$$AMSEL^IBCNEUT1(.AMLIST) I Y'<0,Y'=0 S IBIN=Y
"RTN","IBCNBLA1",28,0)
 I '$$INPTTR(355.33,20.01,$$UP^XLFSTR(IBIN)) D  G INS
"RTN","IBCNBLA1",29,0)
 . D FIELD^DID(355.33,20.01,"","HELP-PROMPT","IBHELP")
"RTN","IBCNBLA1",30,0)
 . W !?5,IBHELP("HELP-PROMPT") Q
"RTN","IBCNBLA1",31,0)
 ;
"RTN","IBCNBLA1",32,0)
 S DIR(0)="Y",DIR("A")="Add a new Insurance Buffer entry for this patient and company",DIR("B")="YES" W ! D ^DIR K DIR Q:Y'=1
"RTN","IBCNBLA1",33,0)
 ;
"RTN","IBCNBLA1",34,0)
 S IBDATA(20.01)=$$UP^XLFSTR(IBIN),IBDATA(60.01)=DFN
"RTN","IBCNBLA1",35,0)
 S IBBUFDA=+$$ADDSTF^IBCNBES(1,DFN,.IBDATA) K IBDATA Q:'IBBUFDA
"RTN","IBCNBLA1",36,0)
 ;
"RTN","IBCNBLA1",37,0)
 I '$$LOCK^IBCNBU1(IBBUFDA,1) Q
"RTN","IBCNBLA1",38,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",39,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",40,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",41,0)
 D BUFF^IBCNEUT2(IBBUFDA,+$$INSERROR^IBCNEUT3("B",IBBUFDA))   ; symbol
"RTN","IBCNBLA1",42,0)
 D UNLOCK^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",43,0)
 ;
"RTN","IBCNBLA1",44,0)
 D INIT^IBCNBLL,HDR^IBCNBLL S VALMBCK="R"
"RTN","IBCNBLA1",45,0)
 Q
"RTN","IBCNBLA1",46,0)
 ;
"RTN","IBCNBLA1",47,0)
INSEDIT(IBBUFDA) ; edit the Insurance data of a buffer entry
"RTN","IBCNBLA1",48,0)
 ;
"RTN","IBCNBLA1",49,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",50,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",51,0)
 ;
"RTN","IBCNBLA1",52,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",53,0)
 Q
"RTN","IBCNBLA1",54,0)
 ;
"RTN","IBCNBLA1",55,0)
GRPEDIT(IBBUFDA) ; edit the Group/Plan data of a buffer entry
"RTN","IBCNBLA1",56,0)
 ;
"RTN","IBCNBLA1",57,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",58,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",59,0)
 ;
"RTN","IBCNBLA1",60,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R"
"RTN","IBCNBLA1",61,0)
 Q
"RTN","IBCNBLA1",62,0)
 ;
"RTN","IBCNBLA1",63,0)
POLEDIT(IBBUFDA) ; edit the Subscriber Policy data of a buffer entry
"RTN","IBCNBLA1",64,0)
 ;
"RTN","IBCNBLA1",65,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",66,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",67,0)
 ;
"RTN","IBCNBLA1",68,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",69,0)
 Q
"RTN","IBCNBLA1",70,0)
 ;
"RTN","IBCNBLA1",71,0)
ALLEDIT(IBBUFDA) ; edit All data of a buffer entry
"RTN","IBCNBLA1",72,0)
 ;
"RTN","IBCNBLA1",73,0)
 Q:'$G(IBBUFDA)  D FULL^VALM1
"RTN","IBCNBLA1",74,0)
 D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",75,0)
 D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",76,0)
 D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA)
"RTN","IBCNBLA1",77,0)
 ;
"RTN","IBCNBLA1",78,0)
 D CLEAN^VALM10,INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",79,0)
 Q
"RTN","IBCNBLA1",80,0)
 ;
"RTN","IBCNBLA1",81,0)
CMPEDIT(IBBUFDA) ; display a buffer entry and an existing ins entry for comparison, allow edit of buffer data
"RTN","IBCNBLA1",82,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",83,0)
 N IBDA,IBPOLDA,IBGRPDA,IBINSDA,DIR,DIRUT,X,Y
"RTN","IBCNBLA1",84,0)
 ;
"RTN","IBCNBLA1",85,0)
 D FULL^VALM1
"RTN","IBCNBLA1",86,0)
 ;
"RTN","IBCNBLA1",87,0)
 S IBDA=$$SEL^IBCNBLA("IBCNBLPX") I 'IBDA G CMPQ
"RTN","IBCNBLA1",88,0)
 I $P(IBDA,U,4)'="",+$G(^IBA(355.33,+IBBUFDA,60))'=$P(IBDA,U,4) W !,"Buffer Patient doesn't match Policy Patient, can't continue." G CMPQ
"RTN","IBCNBLA1",89,0)
 S IBINSDA=+IBDA,IBGRPDA=+$P(IBDA,U,2),IBPOLDA=+$P(IBDA,U,3)
"RTN","IBCNBLA1",90,0)
 ;
"RTN","IBCNBLA1",91,0)
CEINS W @IOF
"RTN","IBCNBLA1",92,0)
 I 'IBINSDA W !,"No Insurance Company Selected for Comparison."
"RTN","IBCNBLA1",93,0)
 W ! D INS^IBCNBCD(IBBUFDA,IBINSDA)
"RTN","IBCNBLA1",94,0)
 S DIR("?")="The Buffer entry's Insurance Company data may be edited or Return advances the display to the Group/Plan data.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,INS^IBCNBCD("_IBBUFDA_","_IBINSDA_")"
"RTN","IBCNBLA1",95,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",96,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",97,0)
 I Y'="","EEee"[Y D INSHELP^IBCNBEE,INS^IBCNBEE(IBBUFDA) G CEINS
"RTN","IBCNBLA1",98,0)
 ;
"RTN","IBCNBLA1",99,0)
CEGRP W @IOF
"RTN","IBCNBLA1",100,0)
 I 'IBGRPDA W !,"No Insurance Group/Plan Selected for Comparison."
"RTN","IBCNBLA1",101,0)
 I +IBGRPDA W !,?14,"Patient is "_$S(+IBPOLDA:"",1:"NOT ")_"a member of this Insurance Group/Plan",!
"RTN","IBCNBLA1",102,0)
 W ! D GRP^IBCNBCD(IBBUFDA,IBGRPDA)
"RTN","IBCNBLA1",103,0)
 S DIR("?")="The Buffer entry's Group/Plan data may be edited or Return advances the display to the Patient Policy data.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,GRP^IBCNBCD("_IBBUFDA_","_IBGRPDA_")"
"RTN","IBCNBLA1",104,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",105,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",106,0)
 I Y'="","EEee"[Y D GRPHELP^IBCNBEE,GRP^IBCNBEE(IBBUFDA) G CEGRP
"RTN","IBCNBLA1",107,0)
 ;
"RTN","IBCNBLA1",108,0)
CEPOL W @IOF
"RTN","IBCNBLA1",109,0)
 I 'IBPOLDA W !,"No Patient Policy Selected for Comparison."
"RTN","IBCNBLA1",110,0)
 W ! D POLICY^IBCNBCD(IBBUFDA,IBPOLDA)
"RTN","IBCNBLA1",111,0)
 S DIR("?")="The Buffer entry's Patient Policy data may be edited or return to the screen display.",DIR("??")="^D HELP^IBCNBUH,WAIT^IBCNBUH,POLICY^IBCNBCD("_IBBUFDA_","_IBPOLDA_")"
"RTN","IBCNBLA1",112,0)
 W ! S DIR(0)="FO",DIR("A")="Enter 'E' to edit buffer data or Return to continue"
"RTN","IBCNBLA1",113,0)
 D ^DIR K DIR I Y'="",$D(DIRUT) G CMPQ
"RTN","IBCNBLA1",114,0)
 I Y'="","EEee"[Y D POLHELP^IBCNBEE,POLICY^IBCNBEE(IBBUFDA) G CEPOL
"RTN","IBCNBLA1",115,0)
 ;
"RTN","IBCNBLA1",116,0)
CELIG W @IOF
"RTN","IBCNBLA1",117,0)
 W ! D ELIG^IBCNBCD(IBBUFDA,IBPOLDA)
"RTN","IBCNBLA1",118,0)
 ;
"RTN","IBCNBLA1",119,0)
CMPQ D CLEAN^VALM10,INIT^IBCNBLP,HDR^IBCNBLP S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLA1",120,0)
 Q
"RTN","IBCNBLA1",121,0)
 ;
"RTN","IBCNBLA1",122,0)
VERIFY(IBBUFDA) ; verify a buffer entry
"RTN","IBCNBLA1",123,0)
 ;
"RTN","IBCNBLA1",124,0)
 N DIR,DIRUT,X,Y,IBX,IBY Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",125,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",126,0)
 W ! D DISPBUF^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",127,0)
 ;
"RTN","IBCNBLA1",128,0)
 S IBX=$G(^IBA(355.33,IBBUFDA,0)),IBY="" I +$P(IBX,U,10) S IBY="Re-" W !!,"This entry already verified by ",$$EXPAND^IBTRE(355.33,.11,$P(IBX,U,11))," on ",$$FMTE^XLFDT($P(IBX,U,10)),"."
"RTN","IBCNBLA1",129,0)
 ;
"RTN","IBCNBLA1",130,0)
 S DIR("?")="Enter Yes if the coverage and information in this Buffer entry has been verified to be accurate." W !!
"RTN","IBCNBLA1",131,0)
 S DIR(0)="YO",DIR("B")="N",DIR("A")=IBY_"Verify the coverage in this buffer entry"
"RTN","IBCNBLA1",132,0)
 D ^DIR
"RTN","IBCNBLA1",133,0)
 I Y=1 D
"RTN","IBCNBLA1",134,0)
 . ; WCW - 04/11/2003 Clear out IIV Status when manually verified
"RTN","IBCNBLA1",135,0)
 . D CLEAR^IBCNEUT4(IBBUFDA,.IIVERR,1) K IIVERR
"RTN","IBCNBLA1",136,0)
 . K IBX S IBX(.1)="NOW",IBX(.11)=DUZ D EDITSTF^IBCNBES(IBBUFDA,.IBX)
"RTN","IBCNBLA1",137,0)
 . D INIT^IBCNBLE,HDR^IBCNBLE S VALMBCK="R" D UPDLN^IBCNBLL(IBBUFDA,"EDITED") W "  Coverage Verified ..." H 2
"RTN","IBCNBLA1",138,0)
 ;
"RTN","IBCNBLA1",139,0)
 Q
"RTN","IBCNBLA1",140,0)
 ;
"RTN","IBCNBLA1",141,0)
REJECT(IBBUFDA,DIRUT) ; process a reject and then delete a buffer entry
"RTN","IBCNBLA1",142,0)
 ; Output parameter DIRUT is optional and passed in by reference.  This
"RTN","IBCNBLA1",143,0)
 ; variable will be defined if the user enters a leading up-arrow,
"RTN","IBCNBLA1",144,0)
 ; times out, or enters a null response.  This is so the calling routine
"RTN","IBCNBLA1",145,0)
 ; can detect if the user did something other than say Yes or No to
"RTN","IBCNBLA1",146,0)
 ; this question.
"RTN","IBCNBLA1",147,0)
 ;
"RTN","IBCNBLA1",148,0)
 N DIR,X,Y,IBX Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",149,0)
 D FULL^VALM1 S VALMBCK="R"
"RTN","IBCNBLA1",150,0)
 W ! D DISPBUF^IBCNBU1(IBBUFDA)
"RTN","IBCNBLA1",151,0)
 W !!,"This action will delete all insurance and patient specific data from a buffer ",!,"entry without first saving that data to the insurance files, leaving a stub ",!,"entry for reporting purposes.",!
"RTN","IBCNBLA1",152,0)
 ;
"RTN","IBCNBLA1",153,0)
 S IBX=$G(^IBA(355.33,IBBUFDA,0)) I +$P(IBX,U,10) W !!,"This entry has been verified by ",$$EXPAND^IBTRE(355.33,.11,$P(IBX,U,11))," on ",$$FMTE^XLFDT($P(IBX,U,10)),".",!!
"RTN","IBCNBLA1",154,0)
 ;
"RTN","IBCNBLA1",155,0)
 S DIR("?")="Enter Yes to delete this buffer entry without saving any of it's data to the Insurance files."
"RTN","IBCNBLA1",156,0)
 S DIR(0)="YO",DIR("B")="N",DIR("A")="Reject this buffer entry (delete without saving to Insurance files)"
"RTN","IBCNBLA1",157,0)
 D ^DIR
"RTN","IBCNBLA1",158,0)
 I $D(DIRUT) G REJX
"RTN","IBCNBLA1",159,0)
 I Y=1 D REJECT^IBCNBAR(IBBUFDA) S VALMBCK="Q" D UPDLN^IBCNBLL(IBBUFDA,"REJECTED")
"RTN","IBCNBLA1",160,0)
REJX ;
"RTN","IBCNBLA1",161,0)
 Q
"RTN","IBCNBLA1",162,0)
 ;
"RTN","IBCNBLA1",163,0)
ACCEPT(IBBUFDA) ; process a buffer entry for acceptance
"RTN","IBCNBLA1",164,0)
 ;
"RTN","IBCNBLA1",165,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBLA1",166,0)
 N IBDA,IBINSDA,IBGRPDA,IBPOLDA,IBACCEPT S IBACCEPT=0
"RTN","IBCNBLA1",167,0)
 ;
"RTN","IBCNBLA1",168,0)
 D FULL^VALM1
"RTN","IBCNBLA1",169,0)
 ;
"RTN","IBCNBLA1",170,0)
 S IBDA=$$SEL^IBCNBLA("IBCNBLPX")
"RTN","IBCNBLA1",171,0)
 I $P(IBDA,U,4)'="",+$G(^IBA(355.33,+IBBUFDA,60))'=$P(IBDA,U,4) W !,"Buffer Patient doesn't match Policy Patient, can't continue." G ACCPTQ
"RTN","IBCNBLA1",172,0)
 I +$P(IBDA,U,3),'$P(IBDA,U,2) W !!,"Error: the selected policy has no associated plan.  Can not continue." D WAIT^IBCNBUH G ACCPTQ
"RTN","IBCNBLA1",173,0)
 ;
"RTN","IBCNBLA1",174,0)
 S IBINSDA=+IBDA,IBGRPDA=+$P(IBDA,U,2),IBPOLDA=+$P(IBDA,U,3)
"RTN","IBCNBLA1",175,0)
 S:'IBINSDA (IBGRPDA,IBPOLDA)=0 S:'IBGRPDA IBPOLDA=0
"RTN","IBCNBLA1",176,0)
 ;
"RTN","IBCNBLA1",177,0)
 I 'IBINSDA,'$D(^XUSEC("IB INSURANCE COMPANY ADD",DUZ)) D  G ACCPTQ
"RTN","IBCNBLA1",178,0)
 . W !!,"Sorry, but you do not have the required privileges to add",!,"new Insurance Companies."
"RTN","IBCNBLA1",179,0)
 . D WAIT^IBCNBUH
"RTN","IBCNBLA1",180,0)
 ;
"RTN","IBCNBLA1",181,0)
 S IBACCEPT=$$ACCEPT^IBCNBAA(IBBUFDA,IBINSDA,IBGRPDA,IBPOLDA)
"RTN","IBCNBLA1",182,0)
 ;
"RTN","IBCNBLA1",183,0)
ACCPTQ S VALMBCK="R" I +IBACCEPT S VALMBCK="Q" D UPDLN^IBCNBLL(IBBUFDA,"ACCEPTED")
"RTN","IBCNBLA1",184,0)
 Q
"RTN","IBCNBLA1",185,0)
 ;
"RTN","IBCNBLA1",186,0)
RESP(BUFF) ; List Response Report for Trace # associated with this entry
"RTN","IBCNBLA1",187,0)
 ; BUFF = buffer IEN
"RTN","IBCNBLA1",188,0)
 N NG,IBRSP,IBSTR,IBTRC,STOP,IBCNERTN,POP,IBCNESPC
"RTN","IBCNBLA1",189,0)
 ; Reset to Full Screen Mode
"RTN","IBCNBLA1",190,0)
 D FULL^VALM1
"RTN","IBCNBLA1",191,0)
 S NG=0
"RTN","IBCNBLA1",192,0)
 I $G(BUFF)="" S NG=1
"RTN","IBCNBLA1",193,0)
 I 'NG S IBRSP=$O(^IBCN(365,"AF",BUFF,"")) I IBRSP="" S NG=1
"RTN","IBCNBLA1",194,0)
 I 'NG S IBSTR=$G(^IBCN(365,IBRSP,0)),IBTRC=$P(IBSTR,U,9) I IBTRC="" S NG=1
"RTN","IBCNBLA1",195,0)
 I NG W !!,"This entry does not have an associated eIV response." D PAUSE^VALM1 G RESPX
"RTN","IBCNBLA1",196,0)
 S STOP=0,IBCNERTN="IBCNERP1",IBCNESPC("TRCN")=IBTRC_U_IBRSP
"RTN","IBCNBLA1",197,0)
 D R100^IBCNERP1
"RTN","IBCNBLA1",198,0)
RESPX S VALMBCK="R"
"RTN","IBCNBLA1",199,0)
 Q
"RTN","IBCNBLA1",200,0)
INPTTR(FILE,FLD,X) ; Does value X pass input transform for file, field?
"RTN","IBCNBLA1",201,0)
 N XCUTE
"RTN","IBCNBLA1",202,0)
 S XCUTE=$$GET1^DID(FILE,FLD,,"INPUT TRANSFORM")
"RTN","IBCNBLA1",203,0)
 X XCUTE
"RTN","IBCNBLA1",204,0)
 Q $D(X)
"RTN","IBCNBLA1",205,0)
 ;
"RTN","IBCNBLA1",206,0)
ICB(IBBUFDA) ;called by ICB to update eIV status flag (symbol) in the insurance buffer entry
"RTN","IBCNBLA1",207,0)
 ;
"RTN","IBCNBLA1",208,0)
 N SYM,ERR
"RTN","IBCNBLA1",209,0)
 S SYM=$$GET1^DIQ(355.33,IBBUFDA,.12,"I") Q:'SYM
"RTN","IBCNBLA1",210,0)
 I $$SYMBOL^IBCNBLL(IBBUFDA)="*" Q  ;don't update if manually verified
"RTN","IBCNBLA1",211,0)
 ; Determine if Expand Entry is allowed to update the eIV Status
"RTN","IBCNBLA1",212,0)
 I '$P($G(^IBE(365.15,SYM,0)),U,3) Q
"RTN","IBCNBLA1",213,0)
 ; If the current IIV Status allows updates by Expand Entry, then
"RTN","IBCNBLA1",214,0)
 ; invoke the function that tries to find a valid payer
"RTN","IBCNBLA1",215,0)
 S ERR=$$INSERROR^IBCNEUT3("B",IBBUFDA,1)
"RTN","IBCNBLA1",216,0)
 ; If no errors, then remove the eIV Status
"RTN","IBCNBLA1",217,0)
 I 'ERR S ERR=$$SIDERR^IBCNBLE1(IBBUFDA,$P(ERR,U,2))
"RTN","IBCNBLA1",218,0)
 I 'ERR D CLEAR^IBCNEUT4(IBBUFDA)
"RTN","IBCNBLA1",219,0)
 ; If errors found, then update with the new IIV Status
"RTN","IBCNBLA1",220,0)
 I ERR D BUFF^IBCNEUT2(IBBUFDA,$P(ERR,U,1))
"RTN","IBCNBLA1",221,0)
 Q
"RTN","IBCNBLL")
0^35^B91467926^B90593913
"RTN","IBCNBLL",1,0)
IBCNBLL ;ALB/ARH - Ins Buffer: LM main screen, list buffer entries ;1 Jun 97
"RTN","IBCNBLL",2,0)
 ;;2.0;INTEGRATED BILLING;**82,149,153,183,184,271,345,416,438**;21-MAR-94;Build 52
"RTN","IBCNBLL",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLL",4,0)
 ;
"RTN","IBCNBLL",5,0)
EN ; - main entry point for screen
"RTN","IBCNBLL",6,0)
 N VIEW,AVIEW,DFLG
"RTN","IBCNBLL",7,0)
 S VIEW=1,AVIEW=0 ; default to positive view
"RTN","IBCNBLL",8,0)
 K ^TMP("IBCNERTQ",$J) ; clear temp. global for eIV real time inquiries
"RTN","IBCNBLL",9,0)
 D EN^VALM("IBCNB INSURANCE BUFFER LIST")
"RTN","IBCNBLL",10,0)
 Q
"RTN","IBCNBLL",11,0)
 ;
"RTN","IBCNBLL",12,0)
EN1(V) ; entry point from view changing actions
"RTN","IBCNBLL",13,0)
 S VIEW=V S AVIEW=$S(VIEW=4:1,1:0)
"RTN","IBCNBLL",14,0)
 D INIT,HDR
"RTN","IBCNBLL",15,0)
 S VALMBCK="R",VALMBG=1
"RTN","IBCNBLL",16,0)
 Q
"RTN","IBCNBLL",17,0)
 ;
"RTN","IBCNBLL",18,0)
HDR ;  header code for list manager display
"RTN","IBCNBLL",19,0)
 S VALMHDR(1)="Sorted by: "_$P(IBCNSORT,U,2)
"RTN","IBCNBLL",20,0)
 I $P(IBCNSORT,U,3)'="" S VALMHDR(1)=VALMHDR(1)_", """_$P(IBCNSORT,U,3)_""" first"
"RTN","IBCNBLL",21,0)
 I VIEW=1 S VALM("TITLE")="Positive Insurance Buffer",VALMSG="*Verified    +Active  ?Await/Reply"
"RTN","IBCNBLL",22,0)
 I VIEW=2 S VALM("TITLE")="Negative Insurance Buffer",VALMSG="*Verified    -N/Active  #Unclear  !Unable/Send"
"RTN","IBCNBLL",23,0)
 I VIEW=3 S VALM("TITLE")="Medicare(WNR) Insurance Buffer",VALMSG="*Verified +Act -N/Act ?Await/R #Unclr !Unable/Send"
"RTN","IBCNBLL",24,0)
 I VIEW=4 S VALM("TITLE")="Future Appointments Buffer",VALMSG="!Unable/Send"
"RTN","IBCNBLL",25,0)
 Q
"RTN","IBCNBLL",26,0)
 ;
"RTN","IBCNBLL",27,0)
INIT ;  initialization for list manager list
"RTN","IBCNBLL",28,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",29,0)
 S:$G(IBCNSORT)="" IBCNSORT=$S(VIEW=1:"10^Positive Response",1:"1^Patient Name")
"RTN","IBCNBLL",30,0)
 D BLD
"RTN","IBCNBLL",31,0)
 Q
"RTN","IBCNBLL",32,0)
 ;
"RTN","IBCNBLL",33,0)
HELP ;  list manager help
"RTN","IBCNBLL",34,0)
 D FULL^VALM1
"RTN","IBCNBLL",35,0)
 S VALMBCK="R"
"RTN","IBCNBLL",36,0)
 W @IOF
"RTN","IBCNBLL",37,0)
 W !,"Flags displayed on screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",38,0)
 W !,"   i - Patient has other currently effective Insurance"
"RTN","IBCNBLL",39,0)
 W !,"   I - Patient is currently admitted as an Inpatient"
"RTN","IBCNBLL",40,0)
 W !,"   E - Patient has Expired"
"RTN","IBCNBLL",41,0)
 W !,"   Y - Means Test Copay Patient"
"RTN","IBCNBLL",42,0)
 W !,"   H - Patient has Bills On Hold"
"RTN","IBCNBLL",43,0)
 W !,"   * - Buffer entry Verified by User"
"RTN","IBCNBLL",44,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",45,0)
 W !,"Sources displayed on the screen if they apply to the Buffer entry:"
"RTN","IBCNBLL",46,0)
 W !,"   I - Interview"
"RTN","IBCNBLL",47,0)
 W !,"   P - Pre-registration"
"RTN","IBCNBLL",48,0)
 W !,"   M - Medicare"
"RTN","IBCNBLL",49,0)
 W !,"   D - Data Match"
"RTN","IBCNBLL",50,0)
 W !,"   E - eIV"
"RTN","IBCNBLL",51,0)
 W !,"   R - ICB"
"RTN","IBCNBLL",52,0)
 W !,"   V - IVM"
"RTN","IBCNBLL",53,0)
 W !,"   H - HMS"
"RTN","IBCNBLL",54,0)
 W !,"   C - Contract Services"
"RTN","IBCNBLL",55,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",56,0)
 W !,"eIV Electronic Insurance Verification Status"
"RTN","IBCNBLL",57,0)
 W !!,"The following eIV Status indicators may appear to the left of the patient name:",!
"RTN","IBCNBLL",58,0)
 I VIEW=1 D
"RTN","IBCNBLL",59,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",60,0)
 .W !,"      ? - Awaiting electronic reply from eIV Payer."
"RTN","IBCNBLL",61,0)
 .W !,"<Blank> - Entry added through manual process."
"RTN","IBCNBLL",62,0)
 .Q
"RTN","IBCNBLL",63,0)
 I VIEW=2 D
"RTN","IBCNBLL",64,0)
 .W !,"- - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",65,0)
 .W !,"# - Can not determine from eIV response if coverage is Active."
"RTN","IBCNBLL",66,0)
 .W !,"    Review Response Report. Manual verification required."
"RTN","IBCNBLL",67,0)
 .W !,"! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",68,0)
 .W !,"    Corrections  required before eIV can send inquiry."
"RTN","IBCNBLL",69,0)
 .Q
"RTN","IBCNBLL",70,0)
 I VIEW=3 D
"RTN","IBCNBLL",71,0)
 .W !,"      + - eIV payer response indicates this is an active policy."
"RTN","IBCNBLL",72,0)
 .W !,"      ? - Awaiting electronic reply from eIV Payer."
"RTN","IBCNBLL",73,0)
 .W !,"      # - Can not determine from eIV response if coverage is Active."
"RTN","IBCNBLL",74,0)
 .W !,"          Review Response Report. Manual verification required."
"RTN","IBCNBLL",75,0)
 .W !,"      ! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",76,0)
 .W !,"          Corrections required or payer not Active."
"RTN","IBCNBLL",77,0)
 .W !,"      - - eIV payer response indicates this is NOT an active policy."
"RTN","IBCNBLL",78,0)
 .W !,"<Blank> - Entry added through manual process."
"RTN","IBCNBLL",79,0)
 .Q
"RTN","IBCNBLL",80,0)
 I VIEW=4 D
"RTN","IBCNBLL",81,0)
 .W !,"! - eIV was unable to send an inquiry for this entry."
"RTN","IBCNBLL",82,0)
 .W !,"    Corrections required or payer not Active."
"RTN","IBCNBLL",83,0)
 .Q
"RTN","IBCNBLL",84,0)
 D PAUSE^VALM1 I 'Y Q
"RTN","IBCNBLL",85,0)
 W !,"When an entry is Processed it is either:"
"RTN","IBCNBLL",86,0)
 W !,"   Accepted - the Buffer entry's data is stored in the main Insurance files."
"RTN","IBCNBLL",87,0)
 W !,"            - the modified Insurance entry is flagged as Verified."
"RTN","IBCNBLL",88,0)
 W !
"RTN","IBCNBLL",89,0)
 W !,"   Rejected - the Buffer entry's data is not stored in the main Insurance files."
"RTN","IBCNBLL",90,0)
 W !!
"RTN","IBCNBLL",91,0)
 W !,"Once an entry is processed (either accepted or rejected) most of the data in"
"RTN","IBCNBLL",92,0)
 W !,"the Buffer File entry is deleted leaving only a stub entry for tracking"
"RTN","IBCNBLL",93,0)
 W !,"and reporting purposes."
"RTN","IBCNBLL",94,0)
 W !!
"RTN","IBCNBLL",95,0)
 W !,"The IB INSURANCE SUPERVISOR key is required to either Accept or Reject an entry."
"RTN","IBCNBLL",96,0)
 D PAUSE^VALM1
"RTN","IBCNBLL",97,0)
 Q
"RTN","IBCNBLL",98,0)
 ;
"RTN","IBCNBLL",99,0)
EXIT ;  exit list manager option and clean up
"RTN","IBCNBLL",100,0)
 K ^TMP("IBCNBLL",$J),^TMP("IBCNBLLX",$J),^TMP("IBCNBLLY",$J),^TMP($J,"IBCNBLLS"),^TMP($J,"SDAMA301"),^TMP($J,"IBCNAPPTS")
"RTN","IBCNBLL",101,0)
 K IBCNSORT,IBCNSCRN,DFN,IBINSDA,IBFASTXT,IBBUFDA
"RTN","IBCNBLL",102,0)
 D CLEAR^VALM1
"RTN","IBCNBLL",103,0)
 Q
"RTN","IBCNBLL",104,0)
 ;
"RTN","IBCNBLL",105,0)
BLD ;  build screen display
"RTN","IBCNBLL",106,0)
 N IBCNT,IBCNS1,IBCNS2,IBBUFDA,IBLINE
"RTN","IBCNBLL",107,0)
 ;
"RTN","IBCNBLL",108,0)
 D SORT S IBCNT=0,VALMCNT=0,IBBUFDA=0
"RTN","IBCNBLL",109,0)
 ;
"RTN","IBCNBLL",110,0)
 S IBCNS1="" F  S IBCNS1=$O(^TMP($J,"IBCNBLLS",IBCNS1)) Q:IBCNS1=""  D
"RTN","IBCNBLL",111,0)
 .S IBCNS2="" F  S IBCNS2=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2)) Q:IBCNS2=""  D
"RTN","IBCNBLL",112,0)
 ..S IBBUFDA=0 F  S IBBUFDA=$O(^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",113,0)
 ...S DFLG=^TMP($J,"IBCNBLLS",IBCNS1,IBCNS2,IBBUFDA)
"RTN","IBCNBLL",114,0)
 ...S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",115,0)
 ...S IBLINE=$$BLDLN(IBBUFDA,IBCNT,DFLG)
"RTN","IBCNBLL",116,0)
 ...D SET(IBLINE,IBCNT)
"RTN","IBCNBLL",117,0)
 ;
"RTN","IBCNBLL",118,0)
 I VALMCNT=0 D SET("",0),SET("There are no Buffer entries that have not been processed.",0)
"RTN","IBCNBLL",119,0)
 Q
"RTN","IBCNBLL",120,0)
 ;
"RTN","IBCNBLL",121,0)
BLDLN(IBBUFDA,IBCNT,DFLG) ; build line to display on List screen for one Buffer entry
"RTN","IBCNBLL",122,0)
 N DFN,IB0,IB20,IB60,IBLINE,IBY,VAIN,VADM,VA,VAERR,X,Y,IBMTS S IBLINE="",IBBUFDA=+$G(IBBUFDA)
"RTN","IBCNBLL",123,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",124,0)
 S DFN=+IB60 I +DFN D DEM^VADPT,INP^VADPT
"RTN","IBCNBLL",125,0)
 ;
"RTN","IBCNBLL",126,0)
 S IBY=$G(IBCNT),IBLINE=$$SETSTR^VALM1(IBY,"",1,4)
"RTN","IBCNBLL",127,0)
 ;
"RTN","IBCNBLL",128,0)
 ; ESG - 6/6/02 - SDD 5.1.8
"RTN","IBCNBLL",129,0)
 ; pull the symbol from the symbol function
"RTN","IBCNBLL",130,0)
 ;
"RTN","IBCNBLL",131,0)
 S IBY=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",132,0)
 S IBY=IBY_$P($G(^DPT(+DFN,0)),U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,5,20)
"RTN","IBCNBLL",133,0)
 S IBLINE=$$SETSTR^VALM1(DFLG,IBLINE,25,1)
"RTN","IBCNBLL",134,0)
 S IBY=$G(VA("BID")),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,27,4)
"RTN","IBCNBLL",135,0)
 S IBY=$P(IB20,U,1),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,32,17)
"RTN","IBCNBLL",136,0)
 S IBY=$P(IB60,U,4),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,50,13)
"RTN","IBCNBLL",137,0)
 S IBY=$$GET1^DIQ(355.12,$P(IB0,U,3),.03),IBLINE=$$SETSTR^VALM1($$SRCCNV(IBY),IBLINE,64,1)
"RTN","IBCNBLL",138,0)
 S IBY=$$DATE(+IB0),IBLINE=$$SETSTR^VALM1(IBY,IBLINE,66,8)
"RTN","IBCNBLL",139,0)
 S IBY="" D  S IBLINE=$$SETSTR^VALM1(IBY,IBLINE,76,5)
"RTN","IBCNBLL",140,0)
 . S IBY=IBY_$S(+$$INSURED^IBCNS1(DFN,DT):"i",1:" ")
"RTN","IBCNBLL",141,0)
 . S IBY=IBY_$S(+$G(VAIN(1)):"I",1:" ")
"RTN","IBCNBLL",142,0)
 . S IBY=IBY_$S(+$G(VADM(6)):"E",1:" ")
"RTN","IBCNBLL",143,0)
 . S IBMTS=$P($$LST^DGMTU(DFN),U,4)
"RTN","IBCNBLL",144,0)
 . S IBY=IBY_$S(IBMTS="C":"Y",IBMTS="G":"Y",1:" ")
"RTN","IBCNBLL",145,0)
 . S IBY=IBY_$S(+$$HOLD(DFN):"H",1:" ")
"RTN","IBCNBLL",146,0)
 Q IBLINE
"RTN","IBCNBLL",147,0)
 ;
"RTN","IBCNBLL",148,0)
SET(LINE,CNT) ;  set up list manager screen display array
"RTN","IBCNBLL",149,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNBLL",150,0)
 S ^TMP("IBCNBLL",$J,VALMCNT,0)=LINE Q:'CNT
"RTN","IBCNBLL",151,0)
 S ^TMP("IBCNBLL",$J,"IDX",VALMCNT,+CNT)=""
"RTN","IBCNBLL",152,0)
 S ^TMP("IBCNBLLX",$J,CNT)=VALMCNT_U_IBBUFDA
"RTN","IBCNBLL",153,0)
 S ^TMP("IBCNBLLY",$J,IBBUFDA)=VALMCNT_U_+CNT
"RTN","IBCNBLL",154,0)
 Q
"RTN","IBCNBLL",155,0)
 ;
"RTN","IBCNBLL",156,0)
SORT ;  set up sort for list screen
"RTN","IBCNBLL",157,0)
 ;  1^Patient Name, 2^Ins Name, 3^Source Of Info, 4^Date Entered, 5^Inpatient (Y/N), 6^Means Test (Y/N), 7^On Hold, 8^Verified, 9^eIV Status, 10^Positive Response
"RTN","IBCNBLL",158,0)
 N APPTNUM,IB0,IB20,IB60,IBCNDT,IBBUFDA,IBCNDFN,IBCNPAT,IBCSORT1,IBCSORT2,IBSDA,DFN,VAIN,VA,VAERR,IBX,IBCNT,INAME,SYM,MWNRFLG,MWNRIEN,X,Y
"RTN","IBCNBLL",159,0)
 S IBCNT=0
"RTN","IBCNBLL",160,0)
 ;
"RTN","IBCNBLL",161,0)
 K ^TMP($J,"IBCNBLLS") I '$G(IBCNSORT) S IBCNSORT="1^Patient Name"
"RTN","IBCNBLL",162,0)
 ; get payer ien for Medicare WNR
"RTN","IBCNBLL",163,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25)
"RTN","IBCNBLL",164,0)
 ;
"RTN","IBCNBLL",165,0)
 S IBCNDT=0 F  S IBCNDT=$O(^IBA(355.33,"AEST","E",IBCNDT)) Q:'IBCNDT  D
"RTN","IBCNBLL",166,0)
 .S IBBUFDA=0 F  S IBBUFDA=$O(^IBA(355.33,"AEST","E",IBCNDT,IBBUFDA)) Q:'IBBUFDA  D
"RTN","IBCNBLL",167,0)
 ..S IBCNT=IBCNT+1 I '$D(ZTQUEUED),'(IBCNT#15) W "."
"RTN","IBCNBLL",168,0)
 ..S IB0=$G(^IBA(355.33,IBBUFDA,0)),IB20=$G(^IBA(355.33,IBBUFDA,20)),IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBLL",169,0)
 ..S IBCNDFN=+IB60,IBCNPAT="" I +IBCNDFN S IBCNPAT=$P($G(^DPT(IBCNDFN,0)),U,1)
"RTN","IBCNBLL",170,0)
 ..S INAME=$P(IB20,U)
"RTN","IBCNBLL",171,0)
 ..;
"RTN","IBCNBLL",172,0)
 ..I +IBCNSORT=1 S IBCSORT1=IBCNPAT
"RTN","IBCNBLL",173,0)
 ..I +IBCNSORT=2 S IBCSORT1=INAME
"RTN","IBCNBLL",174,0)
 ..I +IBCNSORT=3 S IBCSORT1=$P(IB0,U,3)
"RTN","IBCNBLL",175,0)
 ..I +IBCNSORT=4 S IBCSORT1=$P(+IB0,".",1)
"RTN","IBCNBLL",176,0)
 ..I +IBCNSORT=5 I +IBCNDFN S DFN=+IBCNDFN D INP^VADPT S IBCSORT1=$S($G(VAIN(1)):1,1:2)
"RTN","IBCNBLL",177,0)
 ..I +IBCNSORT=6 I +IBCNDFN S IBX=$P($$LST^DGMTU(IBCNDFN),U,4) S IBCSORT1=$S(IBX="C":1,IBX="G":1,1:2)
"RTN","IBCNBLL",178,0)
 ..I +IBCNSORT=7 I +IBCNDFN S IBX=$$HOLD(IBCNDFN) S IBCSORT1=$S(+IBX:1,1:2)
"RTN","IBCNBLL",179,0)
 ..I +IBCNSORT=8 S IBCSORT1=$S(+$P(IB0,U,10):1,1:2)
"RTN","IBCNBLL",180,0)
 ..; Sort by symbol and then within the symbol, sort by date entered
"RTN","IBCNBLL",181,0)
 ..; Build a numerical subscript with format ##.FM date
"RTN","IBCNBLL",182,0)
 ..S SYM=$$SYMBOL(IBBUFDA)
"RTN","IBCNBLL",183,0)
 ..I +IBCNSORT=9 S IBCSORT1=$G(IBCNSORT(1,SYM))_"."_$P(+IB0,".",1),IBCSORT1=+IBCSORT1
"RTN","IBCNBLL",184,0)
 ..;
"RTN","IBCNBLL",185,0)
 ..I +IBCNSORT=10 S IBCSORT1=$S(SYM="+":0,1:1),IBCSORT2=IBCNPAT
"RTN","IBCNBLL",186,0)
 ..;
"RTN","IBCNBLL",187,0)
 ..S IBCSORT1=$S($G(IBCSORT1)="":"~UNKNOWN",1:IBCSORT1),IBCSORT2=$S(IBCNPAT="":"~UNKNOWN",1:IBCNPAT)
"RTN","IBCNBLL",188,0)
 ..; get future appointments
"RTN","IBCNBLL",189,0)
 ..S IBSDA(1)=DT,IBSDA(3)="R;I;NT",IBSDA(4)=IBCNDFN,IBSDA("FLDS")="1;2"
"RTN","IBCNBLL",190,0)
 ..S DFLG="",APPTNUM=$$SDAPI^SDAMA301(.IBSDA) I APPTNUM>0,SYM="!" S DFLG="d" ; duplicate flag
"RTN","IBCNBLL",191,0)
 ..S MWNRFLG=0 I MWNRIEN'="",$P($$INSERROR^IBCNEUT3("B",IBBUFDA),U,2)=MWNRIEN S MWNRFLG=1
"RTN","IBCNBLL",192,0)
 ..I VIEW=1 Q:MWNRFLG=1  Q:SYM'="*"&(SYM'="+")&(SYM'="?")&(SYM'=" ")
"RTN","IBCNBLL",193,0)
 ..I VIEW=2 Q:MWNRFLG=1  Q:SYM'="*"&(SYM'="-")&(SYM'="#")&(SYM'="!")
"RTN","IBCNBLL",194,0)
 ..I VIEW=3 Q:MWNRFLG=0
"RTN","IBCNBLL",195,0)
 ..I VIEW=4 Q:SYM'="!"  Q:APPTNUM<1  M ^TMP($J,"IBCNAPPTS")=^TMP($J,"SDAMA301")
"RTN","IBCNBLL",196,0)
 ..S ^TMP($J,"IBCNBLLS",IBCSORT1,IBCSORT2,IBBUFDA)=DFLG
"RTN","IBCNBLL",197,0)
 ..K VAIN,IBCSORT1,IBCSORT2
"RTN","IBCNBLL",198,0)
 ..Q
"RTN","IBCNBLL",199,0)
 .Q
"RTN","IBCNBLL",200,0)
 I IBCNT,'$D(ZTQUEUED) W "|"
"RTN","IBCNBLL",201,0)
 Q
"RTN","IBCNBLL",202,0)
 ;
"RTN","IBCNBLL",203,0)
DATE(X) ;
"RTN","IBCNBLL",204,0)
 Q $E(X,4,5)_"/"_$E(X,6,7)_"/"_$E(X,2,3)
"RTN","IBCNBLL",205,0)
HOLD(DFN) ; returns true if patient has bills On Hold
"RTN","IBCNBLL",206,0)
 Q $D(^IB("AH",+$G(DFN)))
"RTN","IBCNBLL",207,0)
 ;
"RTN","IBCNBLL",208,0)
SYMBOL(IBBUFDA) ; Returns the symbol for this buffer entry
"RTN","IBCNBLL",209,0)
 NEW IB0,SYM
"RTN","IBCNBLL",210,0)
 S IB0=$G(^IBA(355.33,IBBUFDA,0)),SYM=""
"RTN","IBCNBLL",211,0)
 I +$P(IB0,U,12) S SYM=$C($P($G(^IBE(365.15,+$P(IB0,U,12),0)),U,2))
"RTN","IBCNBLL",212,0)
 ; If the entry has been manually verified, override the symbol displayed
"RTN","IBCNBLL",213,0)
 I $P(IB0,U,10)'="",'+$P(IB0,U,12) S SYM="*"
"RTN","IBCNBLL",214,0)
 I SYM="" S SYM=" "
"RTN","IBCNBLL",215,0)
 Q SYM
"RTN","IBCNBLL",216,0)
 ;
"RTN","IBCNBLL",217,0)
 ;
"RTN","IBCNBLL",218,0)
UPDLN(IBBUFDA,ACTION) ; *** called by any action that modifies a buffer entry, so list screen can be updated if screen not recompiled
"RTN","IBCNBLL",219,0)
 ; modifies a single line in the display array for a buffer entry that has been modified in some way
"RTN","IBCNBLL",220,0)
 ; ACTION = REJECTED, ACCEPTED, EDITED
"RTN","IBCNBLL",221,0)
 N IBARRN,IBOLD,IBNEW,IBO,IBN S IBO="0123456789",IBN="----------"
"RTN","IBCNBLL",222,0)
 ;
"RTN","IBCNBLL",223,0)
 S IBARRN=$G(^TMP("IBCNBLLY",$J,+$G(IBBUFDA))) Q:'IBARRN
"RTN","IBCNBLL",224,0)
 S IBOLD=$G(^TMP("IBCNBLL",$J,+IBARRN,0)) Q:IBOLD=""
"RTN","IBCNBLL",225,0)
 ;
"RTN","IBCNBLL",226,0)
 ; if action is REJECTED or ACCEPTED then the patient name is replaced by the Action in the display array
"RTN","IBCNBLL",227,0)
 ; and the buffer entry is removed from the list of entries that can be selected
"RTN","IBCNBLL",228,0)
 I (ACTION="REJECTED")!(ACTION="ACCEPTED") D
"RTN","IBCNBLL",229,0)
 . S IBNEW=$TR($E(IBOLD,1,5),IBO,IBN)_ACTION_$J("",7)_$E(IBOLD,21,999)
"RTN","IBCNBLL",230,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",231,0)
 ;
"RTN","IBCNBLL",232,0)
 ; if the action is EDITED then the line for the buffer entry is recomplied and the updated line is set into 
"RTN","IBCNBLL",233,0)
 ; the display array
"RTN","IBCNBLL",234,0)
 I ACTION="EDITED" D
"RTN","IBCNBLL",235,0)
 . S IBNEW=$$BLDLN(IBBUFDA,+$P(IBARRN,U,2),$E(IBOLD,25))
"RTN","IBCNBLL",236,0)
 . S ^TMP("IBCNBLL",$J,+IBARRN,0)=IBNEW
"RTN","IBCNBLL",237,0)
 Q
"RTN","IBCNBLL",238,0)
 ;
"RTN","IBCNBLL",239,0)
SRCCNV(SRC) ; convert Source of Info acronym from field 355.12/.03 into 1 char code
"RTN","IBCNBLL",240,0)
 N CODSTR,I,SRCSTR
"RTN","IBCNBLL",241,0)
 S SRCSTR="INTVW^DMTCH^IVM^PreRg^eIV^HMS^MCR^ICB^CS"
"RTN","IBCNBLL",242,0)
 S CODSTR="I^D^V^P^E^H^M^R^C"
"RTN","IBCNBLL",243,0)
 S CODE=""
"RTN","IBCNBLL",244,0)
 I $G(SRC)'="" F I=1:1:9 S:SRC=$P(SRCSTR,U,I) CODE=$P(CODSTR,U,I) Q:CODE'=""
"RTN","IBCNBLL",245,0)
 Q CODE
"RTN","IBCNBMI")
0^6^B88135696^B85358524
"RTN","IBCNBMI",1,0)
IBCNBMI ;ALB/ARH-Ins Buffer: move buffer data to insurance files ;09 Mar 2005  11:42 AM
"RTN","IBCNBMI",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,246,251,299,345,361,371,413,416,438**;21-MAR-94;Build 52
"RTN","IBCNBMI",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBMI",4,0)
 ;
"RTN","IBCNBMI",5,0)
INS(IBBUFDA,IBINSDA,TYPE,RESULT) ;  move buffer insurance company data (file 355.33) to existing Insurance Company (file 36)
"RTN","IBCNBMI",6,0)
 ;
"RTN","IBCNBMI",7,0)
 S IBBUFDA=IBBUFDA_",",IBINSDA=$G(IBINSDA)_","
"RTN","IBCNBMI",8,0)
 D SET("INS",IBBUFDA,IBINSDA,TYPE,.RESULT)
"RTN","IBCNBMI",9,0)
 Q
"RTN","IBCNBMI",10,0)
 ;
"RTN","IBCNBMI",11,0)
GRP(IBBUFDA,IBGRPDA,TYPE,RESULT) ;  move buffer insurance group/plan data (file 355.33) to existing Group/Plan (file 355.33)
"RTN","IBCNBMI",12,0)
 ;
"RTN","IBCNBMI",13,0)
 S IBBUFDA=IBBUFDA_",",IBGRPDA=$G(IBGRPDA)_","
"RTN","IBCNBMI",14,0)
 D SET("GRP",IBBUFDA,IBGRPDA,TYPE,.RESULT)
"RTN","IBCNBMI",15,0)
 D STUFF("GRP",IBGRPDA,.RESULT)
"RTN","IBCNBMI",16,0)
 Q
"RTN","IBCNBMI",17,0)
 ;
"RTN","IBCNBMI",18,0)
POLICY(IBBUFDA,IBPOLDA,TYPE,RESULT) ;  move buffer insurance policy data (file 355.33) to existing Patient Policy (file 2.312)
"RTN","IBCNBMI",19,0)
 ;
"RTN","IBCNBMI",20,0)
 N DFN S DFN=+$G(^IBA(355.33,+$G(IBBUFDA),60)) Q:'DFN
"RTN","IBCNBMI",21,0)
 ;
"RTN","IBCNBMI",22,0)
 S IBBUFDA=IBBUFDA_",",IBPOLDA=$G(IBPOLDA)_","_DFN_","
"RTN","IBCNBMI",23,0)
 D SET("POL",IBBUFDA,IBPOLDA,TYPE,.RESULT)
"RTN","IBCNBMI",24,0)
 D STUFF("POL",IBPOLDA,.RESULT)
"RTN","IBCNBMI",25,0)
 D POLOTH(IBBUFDA,IBPOLDA,.RESULT)
"RTN","IBCNBMI",26,0)
 Q
"RTN","IBCNBMI",27,0)
 ;
"RTN","IBCNBMI",28,0)
SET(SET,IBBUFDA,IBEXTDA,TYPE,RESULT) ; move buffer data to insurance files
"RTN","IBCNBMI",29,0)
 ; Input:  IBBUFDA - ifn of Buffer File entry to move (#355.33)
"RTN","IBCNBMI",30,0)
 ;         IBEXTDA - ifn of insurance entry to update (#36,355.3,2)
"RTN","IBCNBMI",31,0)
 ;         TYPE    - 1 = Merge     (only buffer data moved to blank fields in ins file, no replace)
"RTN","IBCNBMI",32,0)
 ;                   2 = Overwrite (all buffer data moved to ins file, replace existing data)
"RTN","IBCNBMI",33,0)
 ;                   3 = Replace (all buffer data including null move to ins file)
"RTN","IBCNBMI",34,0)
 ;                   4 = Individually Accept (Skip Blanks) (user accepts
"RTN","IBCNBMI",35,0)
 ;  individual diffs b/w buffer data and existing file data (excl blanks)
"RTN","IBCNBMI",36,0)
 ;  to overwrite flds (or addr grp) in existing file)
"RTN","IBCNBMI",37,0)
 ; Output: RESULT - Passed array to return FM errror message if there are
"RTN","IBCNBMI",38,0)
 ;                  errors when filing the buffer data
"RTN","IBCNBMI",39,0)
 ;
"RTN","IBCNBMI",40,0)
 N IBX,IBFLDS,EXTFILE,DRBUF,DREXT,BUFARR,EXTARR,IBBUFFLD,IBEXTFLD,IBBUFVAL,IBEXTVAL,IBCHNG,IBCHNGN,IBERR
"RTN","IBCNBMI",41,0)
 ;
"RTN","IBCNBMI",42,0)
 D FIELDS(SET_"FLD")
"RTN","IBCNBMI",43,0)
 S IBX=$P($T(@(SET_"DR")+1),";;",2),EXTFILE=+$P(IBX,U,1),DRBUF=$P(IBX,U,2),DREXT=$P(IBX,U,3)
"RTN","IBCNBMI",44,0)
 ;
"RTN","IBCNBMI",45,0)
 D GETS^DIQ(355.33,IBBUFDA,DRBUF,"E","BUFARR")
"RTN","IBCNBMI",46,0)
 D GETS^DIQ(EXTFILE,IBEXTDA,DREXT,"E","EXTARR")
"RTN","IBCNBMI",47,0)
 ;
"RTN","IBCNBMI",48,0)
 I +$G(TYPE) S IBBUFFLD=0 F  S IBBUFFLD=$O(BUFARR(355.33,IBBUFDA,IBBUFFLD)) Q:'IBBUFFLD  D
"RTN","IBCNBMI",49,0)
 . ;If not called by ACCEPAPI^IBCNICB API, don't update from these 
"RTN","IBCNBMI",50,0)
 . ;fields:
"RTN","IBCNBMI",51,0)
 . ;   Insurance Company Name - #20.01, Reimburse? - 20.05
"RTN","IBCNBMI",52,0)
 . ;   Is this a Group Policy - #40.01
"RTN","IBCNBMI",53,0)
 . I $G(IBSUPRES)'>0,"^20.01^20.05^40.01^"[("^"_IBBUFFLD_"^") Q
"RTN","IBCNBMI",54,0)
 . ;
"RTN","IBCNBMI",55,0)
 . S IBEXTFLD=$G(IBFLDS(IBBUFFLD)) Q:'IBEXTFLD
"RTN","IBCNBMI",56,0)
 . S IBBUFVAL=BUFARR(355.33,IBBUFDA,IBBUFFLD,"E")
"RTN","IBCNBMI",57,0)
 . S IBEXTVAL=$G(EXTARR(EXTFILE,IBEXTDA,IBEXTFLD,"E"))
"RTN","IBCNBMI",58,0)
 . ;
"RTN","IBCNBMI",59,0)
 . I IBBUFVAL=IBEXTVAL Q
"RTN","IBCNBMI",60,0)
 . I TYPE=1,IBEXTVAL'="" Q
"RTN","IBCNBMI",61,0)
 . I TYPE=2,IBBUFVAL="" Q
"RTN","IBCNBMI",62,0)
 . I TYPE=4,'$D(^TMP($J,"IB BUFFER SELECTED",IBBUFFLD)) Q
"RTN","IBCNBMI",63,0)
 . ;
"RTN","IBCNBMI",64,0)
 . S IBCHNG(EXTFILE,IBEXTDA,IBEXTFLD)=IBBUFVAL
"RTN","IBCNBMI",65,0)
 . ;For ACCEPAPI^IBCNICB do not delete the .01 field. This prevents a
"RTN","IBCNBMI",66,0)
 . ;Data Dictionary Deletion Write message
"RTN","IBCNBMI",67,0)
 . Q:IBEXTFLD=".01"
"RTN","IBCNBMI",68,0)
 . S IBCHNGN(EXTFILE,IBEXTDA,IBEXTFLD)=""
"RTN","IBCNBMI",69,0)
 ;
"RTN","IBCNBMI",70,0)
 I $D(IBCHNGN)>9 D FILE^DIE("E","IBCHNGN","IBERR")
"RTN","IBCNBMI",71,0)
 ;Removed delete errors and move FM errors to RESULT
"RTN","IBCNBMI",72,0)
 D:$D(IBERR)>0 REMOVDEL(.IBERR),EHANDLE(SET,.IBERR,.RESULT)
"RTN","IBCNBMI",73,0)
 K IBERR
"RTN","IBCNBMI",74,0)
 I $D(IBCHNG)>9 D FILE^DIE("E","IBCHNG","IBERR")
"RTN","IBCNBMI",75,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",76,0)
 D:$D(IBERR)>0 EHANDLE(SET,.IBERR,.RESULT)
"RTN","IBCNBMI",77,0)
 Q
"RTN","IBCNBMI",78,0)
 ;
"RTN","IBCNBMI",79,0)
STUFF(SET,IBEXTDA,RESULT) ; update fields in insurance files that 
"RTN","IBCNBMI",80,0)
 ;should be automatically set when an entry is edited
"RTN","IBCNBMI",81,0)
 ; Input:  IBEXTDA - ifn of insurance entry to update (#36,356,2)
"RTN","IBCNBMI",82,0)
 ; Output: RESULT - Passed array to return FM errror message if there are
"RTN","IBCNBMI",83,0)
 ;                  errors when filing the data buffer data
"RTN","IBCNBMI",84,0)
 ;
"RTN","IBCNBMI",85,0)
 N IBX,IBFLDS,EXTFILE,IBEXTFLD,IBEXTVAL,IBCHNG,IBCHNGN,IBERR
"RTN","IBCNBMI",86,0)
 ;
"RTN","IBCNBMI",87,0)
 D FIELDS(SET_"A")
"RTN","IBCNBMI",88,0)
 S IBX=$P($T(@(SET_"DR")+1),";;",2),EXTFILE=+$P(IBX,U,1)
"RTN","IBCNBMI",89,0)
 ;
"RTN","IBCNBMI",90,0)
 S IBEXTFLD=0 F  S IBEXTFLD=$O(IBFLDS(IBEXTFLD)) Q:'IBEXTFLD  D
"RTN","IBCNBMI",91,0)
 . S IBEXTVAL=IBFLDS(IBEXTFLD) I IBEXTVAL="DUZ" S IBEXTVAL="`"_DUZ
"RTN","IBCNBMI",92,0)
 . S IBCHNG(EXTFILE,IBEXTDA,IBEXTFLD)=IBEXTVAL
"RTN","IBCNBMI",93,0)
 . S IBCHNGN(EXTFILE,IBEXTDA,IBEXTFLD)=""
"RTN","IBCNBMI",94,0)
 ;
"RTN","IBCNBMI",95,0)
 D FILE^DIE("E","IBCHNGN","IBERR")
"RTN","IBCNBMI",96,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",97,0)
 D:$D(IBERR)>0 EHANDLE(SET,.IBERR,.RESULT)
"RTN","IBCNBMI",98,0)
 K IBERR
"RTN","IBCNBMI",99,0)
 D FILE^DIE("E","IBCHNG","IBERR")
"RTN","IBCNBMI",100,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",101,0)
 D:$D(IBERR)>0 EHANDLE(SET,.IBERR,.RESULT)
"RTN","IBCNBMI",102,0)
 Q
"RTN","IBCNBMI",103,0)
 ;
"RTN","IBCNBMI",104,0)
FIELDS(SET) ; return array of corresponding fields: IBFLDS(Buffer #)=Ins #
"RTN","IBCNBMI",105,0)
 N IBI,IBLN,IBB,IBE,IBG K IBFLDS,IBADDS,IBLBLS
"RTN","IBCNBMI",106,0)
 F IBI=1:1 S IBLN=$P($T(@(SET)+IBI),";;",2) Q:IBLN=""  I $E(IBLN,1)'=" " D
"RTN","IBCNBMI",107,0)
 . S IBB=$P(IBLN,U,1),IBE=$P(IBLN,U,2),IBG=$P(IBLN,U,4)
"RTN","IBCNBMI",108,0)
 . I IBB'="",IBE'="" D
"RTN","IBCNBMI",109,0)
 .. S IBFLDS(IBB)=IBE
"RTN","IBCNBMI",110,0)
 .. I SET["FLD" S IBLBLS(IBB)=$P(IBLN,U,3) I +IBG S IBADDS(IBB)=IBE
"RTN","IBCNBMI",111,0)
 Q
"RTN","IBCNBMI",112,0)
 ;
"RTN","IBCNBMI",113,0)
INSDR ;
"RTN","IBCNBMI",114,0)
 ;;36^20.01:20.05;21.01:21.06^.01;.131;.132;.133;.111:.116;1
"RTN","IBCNBMI",115,0)
INSFLD ; corresponding fields: Buffer File (355.33) & Insurance Company file (36)
"RTN","IBCNBMI",116,0)
 ;;20.01^.01^Insurance Company Name^  ; Name
"RTN","IBCNBMI",117,0)
 ;;20.02^.131^Phone Number^           ; MM Phone Number
"RTN","IBCNBMI",118,0)
 ;;20.03^.132^Billing Phone^          ; Billing Phone Number
"RTN","IBCNBMI",119,0)
 ;;20.04^.133^Pre-Cert Phone^         ; Pre-Certification Phone Number
"RTN","IBCNBMI",120,0)
 ;;20.05^1^Reimburse?^                ; Will Reimburse?
"RTN","IBCNBMI",121,0)
 ;;21.01^.111^Street [Line 1]^1       ; MM Street Address [Line 1]
"RTN","IBCNBMI",122,0)
 ;;21.02^.112^Street [Line 2]^1       ; MM Street Address [Line 2]
"RTN","IBCNBMI",123,0)
 ;;21.03^.113^Street [Line 3]^1       ; MM Street Address [Line 3]
"RTN","IBCNBMI",124,0)
 ;;21.04^.114^City^1                  ; MM City
"RTN","IBCNBMI",125,0)
 ;;21.05^.115^State^1                 ; MM State
"RTN","IBCNBMI",126,0)
 ;;21.06^.116^Zip^1                   ; MM Zip Code
"RTN","IBCNBMI",127,0)
 ;
"RTN","IBCNBMI",128,0)
GRPDR ;
"RTN","IBCNBMI",129,0)
 ;;355.3^40.01:40.09;40.1;40.11;^.02:.09;6.02;6.03;.12
"RTN","IBCNBMI",130,0)
GRPFLD ;corresponding fields:  Buffer File (355.33) and Insurance Group Plan file (355.3)
"RTN","IBCNBMI",131,0)
 ;;40.01^.02^Is This a Group Policy?^ ; Is this a Group Policy?
"RTN","IBCNBMI",132,0)
 ;;40.02^.03^Group Name^              ; Group Name
"RTN","IBCNBMI",133,0)
 ;;40.03^.04^Group Number^            ; Group Number
"RTN","IBCNBMI",134,0)
 ;;40.1^6.02^BIN^                     ; BIN ;;Daou/EEN
"RTN","IBCNBMI",135,0)
 ;;40.11^6.03^PCN^                    ; PCN ;;Daou/EEN
"RTN","IBCNBMI",136,0)
 ;;40.04^.05^Require UR^              ; Utilization Review Required
"RTN","IBCNBMI",137,0)
 ;;40.05^.06^Require Pre-Cert^        ; Pre-Certification Required
"RTN","IBCNBMI",138,0)
 ;;40.06^.12^Require Amb Cert^        ; Ambulatory Care Certification
"RTN","IBCNBMI",139,0)
 ;;40.07^.07^Exclude Pre-Cond^        ; Exclude Pre-Existing Conditions
"RTN","IBCNBMI",140,0)
 ;;40.08^.08^Benefits Assign^         ; Benefits Assignable
"RTN","IBCNBMI",141,0)
 ;;40.09^.09^Type of Plan^            ; Type of Plan
"RTN","IBCNBMI",142,0)
 ;
"RTN","IBCNBMI",143,0)
GRPA ; auto set fields
"RTN","IBCNBMI",144,0)
 ;;1.05^NOW^                          ; Date Last Edited
"RTN","IBCNBMI",145,0)
 ;;1.06^DUZ^                          ; Last edited By
"RTN","IBCNBMI",146,0)
 ;
"RTN","IBCNBMI",147,0)
POLDR ;
"RTN","IBCNBMI",148,0)
 ;;2.312^60.02:62.08^8;3;1;6;16;17;3.01;3.05:3.1;3.13;3.14;4.01;4.02;.2;3.12;2.1;2.015;2.11;2.12;2.01:2.08;5.01
"RTN","IBCNBMI",149,0)
POLFLD ; corresponding fields:  Buffer File (355.33) and Insurance Patient Policy file (2.312)
"RTN","IBCNBMI",150,0)
 ;;60.02^8^Effective Date^            ; Effective Date
"RTN","IBCNBMI",151,0)
 ;;60.03^3^Expiration Date^           ; Expiration Date
"RTN","IBCNBMI",152,0)
 ;;60.04^1^Subscriber Id^             ; Subscriber Id
"RTN","IBCNBMI",153,0)
 ;;60.05^6^Whose Insurance^           ; Whose Insurance
"RTN","IBCNBMI",154,0)
 ;;60.06^16^Relationship^             ; Pt. Relationship to Insured
"RTN","IBCNBMI",155,0)
 ;;60.07^17^Name of Insured^          ; Name of Insured
"RTN","IBCNBMI",156,0)
 ;;60.08^3.01^Insured's DOB^          ; Insured's DOB
"RTN","IBCNBMI",157,0)
 ;;60.09^3.05^Insured's SSN^          ; Insured's SSN
"RTN","IBCNBMI",158,0)
 ;;60.1^4.01^Primary Provider^        ; Primary Care Provider
"RTN","IBCNBMI",159,0)
 ;;60.11^4.02^Provider Phone^         ; Primary Care Provider Phone
"RTN","IBCNBMI",160,0)
 ;;60.12^.2^Coor of Benefits^         ; Coordination of Benefits
"RTN","IBCNBMI",161,0)
 ;;60.13^3.12^Insured's Sex^          ; Insured's Sex
"RTN","IBCNBMI",162,0)
 ;;  
"RTN","IBCNBMI",163,0)
 ;;61.01^2.1^Emp Sponsored^           ; ESGHP?
"RTN","IBCNBMI",164,0)
 ;;61.02^2.015^Employer Name^         ; Subscriber's Employer Name
"RTN","IBCNBMI",165,0)
 ;;61.03^2.11^Emp Status^             ; Employment Status
"RTN","IBCNBMI",166,0)
 ;;61.04^2.12^Retirement Date^        ; Retirement Date
"RTN","IBCNBMI",167,0)
 ;;61.05^2.01^Send to Employer^       ; Send Bill to Employer?
"RTN","IBCNBMI",168,0)
 ;;61.06^2.02^Emp Street Ln 1^1       ; Employer Claims Street Line 1
"RTN","IBCNBMI",169,0)
 ;;61.07^2.03^Emp Street Ln 2^1       ; Employer Claims Street Line 2
"RTN","IBCNBMI",170,0)
 ;;61.08^2.04^Emp Street Ln 3^1       ; Employer Claims Street Line 3
"RTN","IBCNBMI",171,0)
 ;;61.09^2.05^Emp City^1              ; Employer Claims City
"RTN","IBCNBMI",172,0)
 ;;61.1^2.06^Emp State^1              ; Employer Claims State
"RTN","IBCNBMI",173,0)
 ;;61.11^2.07^Emp Zip Code^1          ; Employer Claims Zip Code
"RTN","IBCNBMI",174,0)
 ;;61.12^2.08^Emp Phone^              ; Employer Claims Phone
"RTN","IBCNBMI",175,0)
 ;;62.01^5.01^Patient Id^             ; Patient Id
"RTN","IBCNBMI",176,0)
 ;;62.02^3.06^Subscr Addr Ln 1^       ; Subscriber Address Line 1
"RTN","IBCNBMI",177,0)
 ;;62.03^3.07^Subscr Addr Ln 2^       ; Subscriber Address Line 2
"RTN","IBCNBMI",178,0)
 ;;62.04^3.08^Subscr City^            ; Subscriber City
"RTN","IBCNBMI",179,0)
 ;;62.05^3.09^Subscr State^           ; Subscriber State
"RTN","IBCNBMI",180,0)
 ;;62.06^3.1^Subscr Zip^              ; Subscriber Zip Code
"RTN","IBCNBMI",181,0)
 ;;62.07^3.13^Subscr Country^         ; Subscriber Country Code
"RTN","IBCNBMI",182,0)
 ;;62.08^3.14^Subscr Cntry Div^       ; Subscriber Country Subdivision Code
"RTN","IBCNBMI",183,0)
 ;
"RTN","IBCNBMI",184,0)
POLA ; auto set fields
"RTN","IBCNBMI",185,0)
 ;;1.03^NOW^                          ; Date Last Verified (default is person that accepts entry)
"RTN","IBCNBMI",186,0)
 ;;1.04^DUZ^                          ; Verified By        (default is person that accepts entry)
"RTN","IBCNBMI",187,0)
 ;;1.05^NOW^                          ; Date Last Edited
"RTN","IBCNBMI",188,0)
 ;;1.06^DUZ^                          ; Last Edited By
"RTN","IBCNBMI",189,0)
 ;
"RTN","IBCNBMI",190,0)
 ;
"RTN","IBCNBMI",191,0)
POLOTH(IBBUFDA,IBPOLDA,RESULT) ; other special cases that can not be transferred using the generic code above, usually because of dependencies
"RTN","IBCNBMI",192,0)
 N IBERR,IB0 S IB0=$G(^IBA(355.33,+IBBUFDA,0))
"RTN","IBCNBMI",193,0)
 ;
"RTN","IBCNBMI",194,0)
 ;  --- if buffer entry was verified before the accept step, then add the correct verifier info to the policy
"RTN","IBCNBMI",195,0)
 I +$P(IB0,U,10) D
"RTN","IBCNBMI",196,0)
 . S IBCHNG(2.312,IBPOLDA,1.03)=$E($P(IB0,U,10),1,12),IBCHNGN(2.312,IBPOLDA,1.03)=""
"RTN","IBCNBMI",197,0)
 . S IBCHNG(2.312,IBPOLDA,1.04)=$P(IB0,U,11),IBCHNGN(2.312,IBPOLDA,1.04)=""
"RTN","IBCNBMI",198,0)
 ;
"RTN","IBCNBMI",199,0)
 I $D(IBCHNGN)>9 D FILE^DIE("I","IBCHNGN","IBERR")
"RTN","IBCNBMI",200,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",201,0)
 D:$D(IBERR)>0 EHANDLE("POL",.IBERR,.RESULT)
"RTN","IBCNBMI",202,0)
 K IBERR
"RTN","IBCNBMI",203,0)
 I $D(IBCHNG)>9 D FILE^DIE("I","IBCHNG","IBERR")
"RTN","IBCNBMI",204,0)
 ;Move FM errors to RESULT
"RTN","IBCNBMI",205,0)
 D:$D(IBERR)>0 EHANDLE("POL",.IBERR,.RESULT)
"RTN","IBCNBMI",206,0)
 Q
"RTN","IBCNBMI",207,0)
 ;
"RTN","IBCNBMI",208,0)
PAT(DFN,IBPOLDA) ; Force DOB, SSN & SEX from Patient file (#2) in to Insurance Patient Policy file (2.312)
"RTN","IBCNBMI",209,0)
 N DA,DR,DIE,DOB,SSN,SEX,IENS,WI
"RTN","IBCNBMI",210,0)
 S IENS=IBPOLDA_","_DFN_","
"RTN","IBCNBMI",211,0)
 S WI=$$GET1^DIQ(2.312,IENS,6,"I")
"RTN","IBCNBMI",212,0)
 I WI'="v" Q  ; Only use when Whose Insurance is 'v'
"RTN","IBCNBMI",213,0)
 S DOB=$$GET1^DIQ(2,DFN,.03,"I")
"RTN","IBCNBMI",214,0)
 S SSN=$$GET1^DIQ(2,DFN,.09,"I")
"RTN","IBCNBMI",215,0)
 S SEX=$$GET1^DIQ(2,DFN,.02,"I")
"RTN","IBCNBMI",216,0)
 S DIE="^DPT("_DFN_",.312,",DA(1)=DFN,DA=IBPOLDA
"RTN","IBCNBMI",217,0)
 S DR="3.01///^S X=DOB;3.05///^S X=SSN;3.12///^S X=SEX"
"RTN","IBCNBMI",218,0)
 D ^DIE
"RTN","IBCNBMI",219,0)
 Q
"RTN","IBCNBMI",220,0)
 ;
"RTN","IBCNBMI",221,0)
EHANDLE(SET,FMERR,RESULT) ;
"RTN","IBCNBMI",222,0)
 ;Fileman Error Processing tracking added for ACCEPAPI^IBCNICB API.
"RTN","IBCNBMI",223,0)
 ; INPUT: 
"RTN","IBCNBMI",224,0)
 ;   SET    - File where fileman error occurred
"RTN","IBCNBMI",225,0)
 ;       Value = "INS" --> File 36    --> RESULT(1)
"RTN","IBCNBMI",226,0)
 ;       Value = "GRP" --> File 355.3 --> RESULT(2)
"RTN","IBCNBMI",227,0)
 ;       Value = "POL" --> File 2.312 --> RESULT(3)
"RTN","IBCNBMI",228,0)
 ;   FMERR  - Array that is returned by FM with error messages
"RTN","IBCNBMI",229,0)
 ; OUTPUT:
"RTN","IBCNBMI",230,0)
 ;   RESULT - Passed array to return FM errror message if there are
"RTN","IBCNBMI",231,0)
 ;            errors when filing the data buffer data
"RTN","IBCNBMI",232,0)
 ;
"RTN","IBCNBMI",233,0)
 Q:$G(SET)']""!($D(FMERR)'>0)
"RTN","IBCNBMI",234,0)
 N SUB1,RNUM,ERRNUM,LINENUM
"RTN","IBCNBMI",235,0)
 ;Numeric 1st subscript of RESULT array based on file being updated
"RTN","IBCNBMI",236,0)
 ;File 36 = 1, 355.3 = 2, 2.312 = 3 
"RTN","IBCNBMI",237,0)
 S SUB1=$S(SET="INS":1,SET="GRP":2,SET="POL":3,1:"")
"RTN","IBCNBMI",238,0)
 ;Quit if SUB1 doesn't have a value.
"RTN","IBCNBMI",239,0)
 Q:SUB1']""
"RTN","IBCNBMI",240,0)
 S RNUM=$O(RESULT(SUB1,"ERR",9999999999),-1),ERRNUM=0
"RTN","IBCNBMI",241,0)
 F  S ERRNUM=$O(FMERR("DIERR",ERRNUM)) Q:+ERRNUM'>0  D
"RTN","IBCNBMI",242,0)
 . S LINENUM=0
"RTN","IBCNBMI",243,0)
 . F  S LINENUM=$O(FMERR("DIERR",ERRNUM,"TEXT",LINENUM)) Q:+LINENUM'>0  D
"RTN","IBCNBMI",244,0)
 . . S RNUM=RNUM+1
"RTN","IBCNBMI",245,0)
 . . S RESULT(SUB1,"ERR",RNUM)=FMERR("DIERR",ERRNUM,"TEXT",LINENUM)
"RTN","IBCNBMI",246,0)
 Q
"RTN","IBCNBMI",247,0)
 ;
"RTN","IBCNBMI",248,0)
REMOVDEL(FMERR) ;
"RTN","IBCNBMI",249,0)
 ;Removed field delete errors. SET and STUFF API delete data first and
"RTN","IBCNBMI",250,0)
 ;then update with new data from Insurance Buffer file. Error Code 712
"RTN","IBCNBMI",251,0)
 ;"Deletion was attempted but not allowed" errors will be removed from
"RTN","IBCNBMI",252,0)
 ;the returned FM error array 
"RTN","IBCNBMI",253,0)
 ; INPUT/OUTPUT:
"RTN","IBCNBMI",254,0)
 ;   FMERR  - Array that is returned by FM with error messages
"RTN","IBCNBMI",255,0)
 ;
"RTN","IBCNBMI",256,0)
 Q:$D(FMERR)'>0
"RTN","IBCNBMI",257,0)
 N ERRNUM
"RTN","IBCNBMI",258,0)
 S ERRNUM=0
"RTN","IBCNBMI",259,0)
 F  S ERRNUM=$O(FMERR("DIERR",ERRNUM)) Q:+ERRNUM'>0  D
"RTN","IBCNBMI",260,0)
 . I FMERR("DIERR",ERRNUM)=712 K FMERR("DIERR",ERRNUM)
"RTN","IBCNBMI",261,0)
 Q
"RTN","IBCNBU1")
0^36^B33733092^B27592089
"RTN","IBCNBU1",1,0)
IBCNBU1 ;ALB/ARH-Ins Buffer: Utilities ;1 Jun 97
"RTN","IBCNBU1",2,0)
 ;;2.0;INTEGRATED BILLING;**82,184,263,438**;21-MAR-94;Build 52
"RTN","IBCNBU1",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCNBU1",4,0)
 ;
"RTN","IBCNBU1",5,0)
BUFFER(DFN) ; returns IFN of first buffer entry found for the patient, 0 otherwise
"RTN","IBCNBU1",6,0)
 Q +$O(^IBA(355.33,"C",+$G(DFN),0))
"RTN","IBCNBU1",7,0)
 ;
"RTN","IBCNBU1",8,0)
SELINS() ; user select an insurance company
"RTN","IBCNBU1",9,0)
 N IBX,DIE,DTOUT,DUOUT,DIC,X,Y S IBX=0
"RTN","IBCNBU1",10,0)
 S DIC="^DIC(36,",DIC(0)="AEQ",DIC("A")="Select INSURANCE COMPANY: ",DIC("S")="I '$P(^(0),U,5)" D ^DIC
"RTN","IBCNBU1",11,0)
 I +Y>0 S IBX=Y
"RTN","IBCNBU1",12,0)
 Q IBX
"RTN","IBCNBU1",13,0)
 ;
"RTN","IBCNBU1",14,0)
SELGRP(IBINSDA) ; given a specific insurance company, allow user to choose a group/plan
"RTN","IBCNBU1",15,0)
 N IBX,DIE,DTOUT,DUOUT,DIC,X,Y,IBINSNM S IBX=0
"RTN","IBCNBU1",16,0)
 S IBINSNM=$P($G(^DIC(36,+IBINSDA,0)),U,1)
"RTN","IBCNBU1",17,0)
 W !,IBINSNM
"RTN","IBCNBU1",18,0)
 S X=IBINSNM,DIC="^IBA(355.3,",DIC(0)="EQ",DIC("S")="I +^(0)="_+IBINSDA_"&('$P(^(0),U,11))" D ^DIC
"RTN","IBCNBU1",19,0)
 I +Y>0 S IBX=Y
"RTN","IBCNBU1",20,0)
 Q IBX
"RTN","IBCNBU1",21,0)
 ;
"RTN","IBCNBU1",22,0)
SELEXT(DFN) ; user select existing ins co, group, and if the patient is a member of the group also return the policy
"RTN","IBCNBU1",23,0)
 N IBX,IBINSDA,IBGRPDA,IBPOLDA S (IBINSDA,IBGRPDA,IBPOLDA)=""
"RTN","IBCNBU1",24,0)
 S IBINSDA=$$SELINS() S IBX=+IBINSDA
"RTN","IBCNBU1",25,0)
 I +IBINSDA S IBGRPDA=$$SELGRP(+IBINSDA) I +IBGRPDA S IBX=IBX_U_+IBGRPDA
"RTN","IBCNBU1",26,0)
 I +IBGRPDA,+$G(DFN) S IBPOLDA=$$PTGRP(DFN,IBINSDA,IBGRPDA) I +IBPOLDA S IBX=IBX_U_+IBPOLDA
"RTN","IBCNBU1",27,0)
 Q IBX
"RTN","IBCNBU1",28,0)
 ;
"RTN","IBCNBU1",29,0)
PTGRP(DFN,IBINSDA,IBGRPDA) ; return policy ifn if patient is a member of this group plan
"RTN","IBCNBU1",30,0)
 N IBX,IBY S IBX=0,DFN=+$G(DFN),IBINSDA=+$G(IBINSDA),IBGRPDA=+$G(IBGRPDA)
"RTN","IBCNBU1",31,0)
 S IBY=0 F  S IBY=$O(^DPT(DFN,.312,"B",IBINSDA,IBY)) Q:'IBY  I +$P($G(^DPT(DFN,.312,IBY,0)),U,18)=IBGRPDA S IBX=IBY
"RTN","IBCNBU1",32,0)
 Q IBX
"RTN","IBCNBU1",33,0)
 ;
"RTN","IBCNBU1",34,0)
DISPBUF(IBBUFDA) ; display summary info on a buffer entry
"RTN","IBCNBU1",35,0)
 ;
"RTN","IBCNBU1",36,0)
 Q:'$G(IBBUFDA)
"RTN","IBCNBU1",37,0)
 N IB0,IB60 S IB0=$G(^IBA(355.33,IBBUFDA,0)) Q:IB0=""  S IB60=$G(^IBA(355.33,IBBUFDA,60))
"RTN","IBCNBU1",38,0)
 ;
"RTN","IBCNBU1",39,0)
 W !,"--------------------------------------------------------------------------------"
"RTN","IBCNBU1",40,0)
 W !,?2,"Entered: ",?15,$$FMTE^XLFDT(+IB0,2),?50,"Source: ",?60,$$EXPAND^IBTRE(355.33,.03,$P(IB0,U,3))
"RTN","IBCNBU1",41,0)
 W !,?2,"Entered By: ",?15,$$EXPAND^IBTRE(355.33,.02,+$P(IB0,U,2)),?50,"Verified: ",?60,$$FMTE^XLFDT($P(IB0,U,10),2)
"RTN","IBCNBU1",42,0)
 I +$P(IB0,U,10) W !,?50,"Verif By: ",?60,$E($$EXPAND^IBTRE(355.33,.11,$P(IB0,U,11)),1,20)
"RTN","IBCNBU1",43,0)
 W !!,?2,"Patient: ",?15,$$EXPAND^IBTRE(355.33,60.01,$P(IB60,U,1)),?50,"Sub Id: ",?60,$P(IB60,U,4)
"RTN","IBCNBU1",44,0)
 W !,?2,"Insurance: ",?15,$P($G(^IBA(355.33,+IBBUFDA,20)),U,1),?50,"Group #: ",?60,$P($G(^IBA(355.33,+IBBUFDA,40)),U,3)
"RTN","IBCNBU1",45,0)
 W !,?15,$P($G(^IBA(355.33,+IBBUFDA,21)),U,1)
"RTN","IBCNBU1",46,0)
 W !,"--------------------------------------------------------------------------------"
"RTN","IBCNBU1",47,0)
 Q
"RTN","IBCNBU1",48,0)
 ;
"RTN","IBCNBU1",49,0)
LOCK(IBBUFDA,DISP,TO) ; return true if able to lock the buffer entry, if not an DISP is true then will display a message
"RTN","IBCNBU1",50,0)
 ; TO - lock attempt time out & hang time in seconds, default to 4
"RTN","IBCNBU1",51,0)
 N IBX S IBX=0
"RTN","IBCNBU1",52,0)
 S TO=$G(TO,4)
"RTN","IBCNBU1",53,0)
 I +$G(IBBUFDA) L +^IBA(355.33,+IBBUFDA):TO I +$T S IBX=1
"RTN","IBCNBU1",54,0)
 I 'IBX,+$G(DISP) W !!,"Another user is currently editing/processing this entry, please try again later.",! H TO
"RTN","IBCNBU1",55,0)
 I IBX D
"RTN","IBCNBU1",56,0)
 .; eIV real time inquiries temp. global
"RTN","IBCNBU1",57,0)
 .K ^TMP("IBCNERTQ",$J,+IBBUFDA)
"RTN","IBCNBU1",58,0)
 .S ^TMP("IBCNERTQ",$J,+IBBUFDA,"LOCK")=1
"RTN","IBCNBU1",59,0)
 .Q
"RTN","IBCNBU1",60,0)
 Q IBX
"RTN","IBCNBU1",61,0)
 ;
"RTN","IBCNBU1",62,0)
UNLOCK(IBBUFDA) ; unlock a Buffer entry
"RTN","IBCNBU1",63,0)
 K ^TMP("IBCNERTQ",$J,+IBBUFDA,"LOCK")
"RTN","IBCNBU1",64,0)
 I $G(^TMP("IBCNERTQ",$J,+IBBUFDA,"TRIGGER"))=1 D
"RTN","IBCNBU1",65,0)
 .; eIV real time inquiry
"RTN","IBCNBU1",66,0)
 .N TQIEN,RESPONSE,DIE,DA,DR,X,Y
"RTN","IBCNBU1",67,0)
 .S RESPONSE=0
"RTN","IBCNBU1",68,0)
 .; create an entry in eIV transmision queue
"RTN","IBCNBU1",69,0)
 .S TQIEN=$$IBE^IBCNERTQ(+IBBUFDA)
"RTN","IBCNBU1",70,0)
 .; Load and Send HL7 Message
"RTN","IBCNBU1",71,0)
 .I TQIEN S RESPONSE=$$PROCSEND^IBCNERTQ(TQIEN)
"RTN","IBCNBU1",72,0)
 .; set field 355.33/.16 (real time verification)
"RTN","IBCNBU1",73,0)
 .S DIE="^IBA(355.33,",DA=+IBBUFDA,DR=".16////^S X=RESPONSE" D ^DIE
"RTN","IBCNBU1",74,0)
 .K ^TMP("IBCNERTQ",$J,+IBBUFDA,"TRIGGER")
"RTN","IBCNBU1",75,0)
 .Q
"RTN","IBCNBU1",76,0)
 L -^IBA(355.33,+IBBUFDA)
"RTN","IBCNBU1",77,0)
 Q
"RTN","IBCNBU1",78,0)
 ;
"RTN","IBCNBU1",79,0)
DICINS(INSNAME,IBSCACT,IBLISTN) ; user search/selection of existing Insurance Company Names, does not list duplicates, based on names and synonyms
"RTN","IBCNBU1",80,0)
 ;
"RTN","IBCNBU1",81,0)
 ; Input parameters
"RTN","IBCNBU1",82,0)
 ;    INSNAME - user input; partial name match of insurance company
"RTN","IBCNBU1",83,0)
 ;    IBSCACT - 0/1 flag indicating if inactive insurance companies
"RTN","IBCNBU1",84,0)
 ;              should get screened out during the list building
"RTN","IBCNBU1",85,0)
 ;              Default is 0 (no screen)
"RTN","IBCNBU1",86,0)
 ;    IBLISTN - number of entries to display in the lister before
"RTN","IBCNBU1",87,0)
 ;              giving the user a chance to select. Default is 4.
"RTN","IBCNBU1",88,0)
 ; Output
"RTN","IBCNBU1",89,0)
 ;    returns Ins name, or -1 if ^, or 0 if none selected
"RTN","IBCNBU1",90,0)
 ;
"RTN","IBCNBU1",91,0)
 S IBSCACT=$G(IBSCACT,0)  ; flag to screen out inactive ins
"RTN","IBCNBU1",92,0)
 S IBLISTN=$G(IBLISTN,4)  ; number of list entries before user selection
"RTN","IBCNBU1",93,0)
 ;
"RTN","IBCNBU1",94,0)
 N IBX,IBINB,IBCX,IBSEL,IBXRF,IBNAME,IBSYNM,IBCNT,IBC1,IBINSIEN,IBLINE
"RTN","IBCNBU1",95,0)
 S IBSEL=0 K ^TMP($J,"IBINSS"),^TMP($J,"IBINSSB") I INSNAME="" G DINSQ
"RTN","IBCNBU1",96,0)
 ;
"RTN","IBCNBU1",97,0)
 S INSNAME=$$UP^XLFSTR(INSNAME),IBX=$L(INSNAME),IBINB=$E(INSNAME,1,(IBX-1))_$C($A($E(INSNAME,IBX))-1)_"~"
"RTN","IBCNBU1",98,0)
 ;
"RTN","IBCNBU1",99,0)
 F IBCX="C","B" S IBXRF=IBINB D
"RTN","IBCNBU1",100,0)
 . F  S IBXRF=$O(^DIC(36,IBCX,IBXRF)) Q:IBXRF=""!($E(IBXRF,1,IBX)'=INSNAME)  D
"RTN","IBCNBU1",101,0)
 .. S IBINSIEN=0
"RTN","IBCNBU1",102,0)
 .. F  S IBINSIEN=+$O(^DIC(36,IBCX,IBXRF,IBINSIEN)) Q:'IBINSIEN  D
"RTN","IBCNBU1",103,0)
 ... I '$D(^DIC(36,IBINSIEN,0)) Q  ; bad xref entry?
"RTN","IBCNBU1",104,0)
 ... I IBSCACT,$P($G(^DIC(36,IBINSIEN,0)),U,5) Q   ; inactive
"RTN","IBCNBU1",105,0)
 ... I IBSCACT,$P($G(^DIC(36,IBINSIEN,5)),U,1) Q   ; scheduled for deletion
"RTN","IBCNBU1",106,0)
 ... S IBNAME=$P($G(^DIC(36,IBINSIEN,0)),U,1)
"RTN","IBCNBU1",107,0)
 ... I IBNAME="" Q
"RTN","IBCNBU1",108,0)
 ... I $D(^TMP($J,"IBINSSB",IBNAME)) Q
"RTN","IBCNBU1",109,0)
 ... S ^TMP($J,"IBINSSB",IBNAME)=$S(IBNAME=IBXRF:"",1:IBXRF)
"RTN","IBCNBU1",110,0)
 ... Q
"RTN","IBCNBU1",111,0)
 ;
"RTN","IBCNBU1",112,0)
 S IBCNT=0,IBX="" F  S IBX=$O(^TMP($J,"IBINSSB",IBX)) Q:IBX=""  S IBCNT=IBCNT+1,^TMP($J,"IBINSS",IBCNT)=IBX
"RTN","IBCNBU1",113,0)
 ;
"RTN","IBCNBU1",114,0)
 S (IBCNT,IBC1)=0 F  S IBCNT=$O(^TMP($J,"IBINSS",IBCNT)) Q:'IBCNT  D  I +IBSEL Q
"RTN","IBCNBU1",115,0)
 . S IBNAME=^TMP($J,"IBINSS",IBCNT) Q:IBNAME=""  S IBSYNM=$G(^TMP($J,"IBINSSB",IBNAME))
"RTN","IBCNBU1",116,0)
 . S IBLINE=$J(IBCNT,7)_"   "_$$FO^IBCNEUT1(IBNAME,40)_IBSYNM
"RTN","IBCNBU1",117,0)
 . DO EN^DDIOL(IBLINE)
"RTN","IBCNBU1",118,0)
 . S IBC1=IBC1+1 I '(IBCNT#IBLISTN) S IBSEL=$$DIR(IBC1)
"RTN","IBCNBU1",119,0)
 . Q
"RTN","IBCNBU1",120,0)
 ;
"RTN","IBCNBU1",121,0)
 I 'IBSEL,+(IBC1#IBLISTN) S IBSEL=$$DIR(IBC1)
"RTN","IBCNBU1",122,0)
 ;
"RTN","IBCNBU1",123,0)
 I IBSEL>0 S IBSEL=$G(^TMP($J,"IBINSS",IBSEL))
"RTN","IBCNBU1",124,0)
 ;
"RTN","IBCNBU1",125,0)
DINSQ K ^TMP($J,"IBINSS"),^TMP($J,"IBCNSSB")
"RTN","IBCNBU1",126,0)
 Q IBSEL
"RTN","IBCNBU1",127,0)
 ;
"RTN","IBCNBU1",128,0)
DIR(MAX) ; DIR call for DICINS search for insurance company name
"RTN","IBCNBU1",129,0)
 N DIR,DIRUT,DTOUT,DUOUT,IBX,X,Y S IBX=0,DIR(0)="LOA^1:"_MAX_"^K:X'>0!(X>"_MAX_") X",DIR("A")="CHOOSE 1-"_MAX_": "
"RTN","IBCNBU1",130,0)
 I $G(MAX)>0 D ^DIR K DIR S IBX=$S($D(DTOUT)!$D(DUOUT):-1,+Y:+Y,1:0)
"RTN","IBCNBU1",131,0)
 Q IBX
"RTN","IBCNBU1",132,0)
 ;
"RTN","IBCNBU1",133,0)
DICBUF(INSNAME,DFN,IBDUZ) ; display list of editable buffer entries based on insurance name, may specify patient and/or enterer
"RTN","IBCNBU1",134,0)
 ; (non-MCCR people: only the person that created an entry should be able to edit it, everyone else should create new ones)
"RTN","IBCNBU1",135,0)
 N X,Y,IBX,DIC,DA,DR,DIR,DIRUT,DTOUT,DUOUT,D S IBX=0
"RTN","IBCNBU1",136,0)
 ;
"RTN","IBCNBU1",137,0)
 S DIC("W")="W ""   "",$P($G(^(20)),U,1),""   "",$P($G(^(21)),U,1)"
"RTN","IBCNBU1",138,0)
 S DIC("S")="I $P(^(0),U,4)=""E""&('$P(^(0),U,10))" S:+$G(IBDUZ) DIC("S")=DIC("S")_"&(+$P(^(0),U,2)="_IBDUZ_")" S:+$G(DFN) DIC("S")=DIC("S")_"&(+$G(^(60))="_DFN_")"
"RTN","IBCNBU1",139,0)
 S DIC="^IBA(355.33,",DIC(0)="EM",X=$$UP^XLFSTR($G(INSNAME)),D="D" D IX^DIC I '$D(DTOUT),'$D(DUOUT),+Y>0 S IBX=+Y
"RTN","IBCNBU1",140,0)
 Q IBX
"RTN","IBCNEBF")
0^5^B46987961^B36248866
"RTN","IBCNEBF",1,0)
IBCNEBF ;DAOU/ALA - Create an Entry in the Buffer File ;20-JUN-2002
"RTN","IBCNEBF",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,361,371,416,438**;21-MAR-94;Build 52
"RTN","IBCNEBF",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEBF",4,0)
 ;
"RTN","IBCNEBF",5,0)
 ;**Program Description**
"RTN","IBCNEBF",6,0)
 ;  This program will create a Buffer entry based upon input values
"RTN","IBCNEBF",7,0)
 ;
"RTN","IBCNEBF",8,0)
 Q
"RTN","IBCNEBF",9,0)
 ;
"RTN","IBCNEBF",10,0)
PT(DFN,IRIEN,SYMBOL,OVRRIDE,ADD,IBERROR) ;  Get data
"RTN","IBCNEBF",11,0)
 ;   from a specific patient and insurance record entry
"RTN","IBCNEBF",12,0)
 ;
"RTN","IBCNEBF",13,0)
 ;  Input Parameters
"RTN","IBCNEBF",14,0)
 ;    DFN = Patient IEN
"RTN","IBCNEBF",15,0)
 ;    IRIEN = Patient Insurance Record IEN
"RTN","IBCNEBF",16,0)
 ;    SYMBOL = eIV Symbol IEN
"RTN","IBCNEBF",17,0)
 ;    OVRRIDE = Override flag for ins. buffer record  (0 or 1)
"RTN","IBCNEBF",18,0)
 ;    ADD = If defined, then it will add a new Buffer entry
"RTN","IBCNEBF",19,0)
 ;    IBERROR = If defined, then it will be updated with error info.
"RTN","IBCNEBF",20,0)
 ;              OPTIONALLY PASSED BY REFERENCE
"RTN","IBCNEBF",21,0)
 ;
"RTN","IBCNEBF",22,0)
 I DFN=""!(IRIEN="") Q   ; * do not require SYMBOL or OVRRIDE
"RTN","IBCNEBF",23,0)
 ;
"RTN","IBCNEBF",24,0)
 ;
"RTN","IBCNEBF",25,0)
 N VBUF,IDATA0,IDATA3,IEN,INAME,PNAME,IIEN,GNUMB,GNAME,SUBID,PPHONE,PATID
"RTN","IBCNEBF",26,0)
 N BPHONE,EFFDT,EXPDT,WHO,REL,IDOB,ISSN,COB,TQIEN,RDATA,ISEX,NAME
"RTN","IBCNEBF",27,0)
 N MSG,XMSUB,MSGP,INSDATA,PCE,BFD,BFN,INSPCE,ESGHPARR
"RTN","IBCNEBF",28,0)
 N SUBADDR1,SUBADDR2,SUBCITY,SUBSTATE,SUBZIP,SUBCNTRY,SUBCNDIV
"RTN","IBCNEBF",29,0)
 ;
"RTN","IBCNEBF",30,0)
 S IDATA0=$G(^DPT(DFN,.312,IRIEN,0)),IDATA3=$G(^DPT(DFN,.312,IRIEN,3))
"RTN","IBCNEBF",31,0)
 S IIEN=$P(IDATA0,U,1),INAME=$$GET1^DIQ(36,IIEN,.01,"E")
"RTN","IBCNEBF",32,0)
 S PPHONE=$P($G(^DIC(36,IIEN,.13)),U,3),BPHONE=$P($G(^DIC(36,IIEN,.13)),U,2)
"RTN","IBCNEBF",33,0)
 S NAME=$P(IDATA0,U,17),SUBID=$P(IDATA0,U,2)
"RTN","IBCNEBF",34,0)
 S PATID=$P($G(^DPT(DFN,.312,IRIEN,5)),U,1)
"RTN","IBCNEBF",35,0)
 S WHO=$P(IDATA0,U,6),COB=$P(IDATA0,U,20)
"RTN","IBCNEBF",36,0)
 S IDOB=$P(IDATA3,U,1),ISSN=$P(IDATA3,U,5),ISEX=$P(IDATA3,U,12)
"RTN","IBCNEBF",37,0)
 S EFFDT=$P(IDATA0,U,8),EXPDT=$P(IDATA0,U,4)
"RTN","IBCNEBF",38,0)
 S REL=$P($G(^DPT(DFN,.312,IRIEN,4)),U,3)
"RTN","IBCNEBF",39,0)
 S SUBADDR1=$P(IDATA3,U,6),SUBADDR2=$P(IDATA3,U,7)
"RTN","IBCNEBF",40,0)
 S SUBCITY=$P(IDATA3,U,8),SUBSTATE=$P(IDATA3,U,9),SUBZIP=$P(IDATA3,U,10)
"RTN","IBCNEBF",41,0)
 S SUBCNTRY=$P(IDATA3,U,13),SUBCNDIV=$P(IDATA3,U,14)
"RTN","IBCNEBF",42,0)
 ;
"RTN","IBCNEBF",43,0)
 S IENS=IRIEN_","_DFN_","
"RTN","IBCNEBF",44,0)
 S GNUMB=$$GET1^DIQ(2.312,IENS,21,"E")
"RTN","IBCNEBF",45,0)
 S GNAME=$$GET1^DIQ(2.312,IENS,20,"E")
"RTN","IBCNEBF",46,0)
 ;
"RTN","IBCNEBF",47,0)
 ; Capture the employer sponsored insurance fields into array
"RTN","IBCNEBF",48,0)
 ;   ESGHPARR(buffer field number) = data
"RTN","IBCNEBF",49,0)
 ;
"RTN","IBCNEBF",50,0)
 S INSDATA=$G(^DPT(DFN,.312,IRIEN,2)),PCE=0
"RTN","IBCNEBF",51,0)
 F BFD=5:1:12,2,1,3,4 S PCE=PCE+1,BFN=BFD/100+61,INSPCE=$P(INSDATA,U,PCE) I INSPCE'="" S ESGHPARR(BFN)=INSPCE
"RTN","IBCNEBF",52,0)
 ;
"RTN","IBCNEBF",53,0)
 D FIL
"RTN","IBCNEBF",54,0)
 K ADD
"RTN","IBCNEBF",55,0)
 Q
"RTN","IBCNEBF",56,0)
 ;
"RTN","IBCNEBF",57,0)
RP(IEN,ADD,BUFF) ;  Get data from a specific response record
"RTN","IBCNEBF",58,0)
 ;
"RTN","IBCNEBF",59,0)
 ;  Input Parameter
"RTN","IBCNEBF",60,0)
 ;    IEN  = Internal entry number of the Response
"RTN","IBCNEBF",61,0)
 ;    ADD  = If defined, then it will add a new Buffer entry
"RTN","IBCNEBF",62,0)
 ;    BUFF = IEN of the Buffer Entry to be updated (optional)
"RTN","IBCNEBF",63,0)
 ;
"RTN","IBCNEBF",64,0)
 S BUFF=$G(BUFF) ; Initialize optional parameter
"RTN","IBCNEBF",65,0)
 ;
"RTN","IBCNEBF",66,0)
 N BPHONE,COB,DFN,EFFDT,EXPDT,GNAME,GNUMB,IDOB,IIEN,INAME,IRIEN,ISEX,ISSN,K,NAME
"RTN","IBCNEBF",67,0)
 N PATID,PIEN,PNAME,PPHONE,RDATA,RDATA5,REL,RSTYPE,SUBID,TQIEN,WHO
"RTN","IBCNEBF",68,0)
 N SUBADDR1,SUBADDR2,SUBCITY,SUBSTATE,SUBZIP,SUBCNTRY,SUBCNDIV
"RTN","IBCNEBF",69,0)
 ;
"RTN","IBCNEBF",70,0)
 S DFN=$P(^IBCN(365,IEN,0),U,2),TQIEN=$P(^IBCN(365,IEN,0),U,5)
"RTN","IBCNEBF",71,0)
 S PIEN=$P(^IBCN(365,IEN,0),U,3),RSTYPE=$P(^(0),U,10)
"RTN","IBCNEBF",72,0)
 I PIEN'="" S PNAME=$P(^IBE(365.12,PIEN,0),U,1)
"RTN","IBCNEBF",73,0)
 I TQIEN'="" S IRIEN=$P($G(^IBCN(365.1,TQIEN,0)),U,13)
"RTN","IBCNEBF",74,0)
 I $G(IRIEN)'="" S INAME="" D
"RTN","IBCNEBF",75,0)
 . S IIEN=$P($G(^DPT(DFN,.312,IRIEN,0)),U,1)
"RTN","IBCNEBF",76,0)
 . I IIEN="" Q
"RTN","IBCNEBF",77,0)
 . S INAME=$P(^DIC(36,IIEN,0),U,1)
"RTN","IBCNEBF",78,0)
 S RDATA=$G(^IBCN(365,IEN,1)),RDATA5=$G(^IBCN(365,IEN,5))
"RTN","IBCNEBF",79,0)
 S NAME=$P(RDATA,U,1)
"RTN","IBCNEBF",80,0)
 S INAME=$S($G(INAME)'=""&(RSTYPE="O"):INAME,1:$G(PNAME))
"RTN","IBCNEBF",81,0)
 S IDOB=$P(RDATA,U,2)
"RTN","IBCNEBF",82,0)
 S ISSN=$P(RDATA,U,3)
"RTN","IBCNEBF",83,0)
 S ISEX=$P(RDATA,U,4)
"RTN","IBCNEBF",84,0)
 S COB=$P(RDATA,U,13)
"RTN","IBCNEBF",85,0)
 S SUBID=$P(RDATA,U,5)
"RTN","IBCNEBF",86,0)
 S PATID=$P(RDATA,U,18)
"RTN","IBCNEBF",87,0)
 S GNAME=$P(RDATA,U,6)
"RTN","IBCNEBF",88,0)
 S GNUMB=$P(RDATA,U,7)
"RTN","IBCNEBF",89,0)
 S WHO=$P(RDATA,U,8)
"RTN","IBCNEBF",90,0)
 S REL=$P($G(^IBCN(365,IEN,8)),U)
"RTN","IBCNEBF",91,0)
 S EFFDT=$P(RDATA,U,11)
"RTN","IBCNEBF",92,0)
 S EXPDT=$P(RDATA,U,12)
"RTN","IBCNEBF",93,0)
 S SUBADDR1=$P(RDATA5,U),SUBADDR2=$P(RDATA5,U,2),SUBCITY=$P(RDATA5,U,3)
"RTN","IBCNEBF",94,0)
 S SUBSTATE=$P(RDATA5,U,4),SUBZIP=$P(RDATA5,U,5),SUBCNTRY=$P(RDATA5,U,6)
"RTN","IBCNEBF",95,0)
 S SUBCNDIV=$P(RDATA5,U,7)
"RTN","IBCNEBF",96,0)
 S PPHONE="",BPHONE=""
"RTN","IBCNEBF",97,0)
 ;
"RTN","IBCNEBF",98,0)
 D FIL
"RTN","IBCNEBF",99,0)
 K DFN,VBUF,IEN,IRIEN,INAME,PNAME,IIEN,K,GNUMB,GNAME,SUBID,PPHONE,PATID
"RTN","IBCNEBF",100,0)
 K BPHONE,EFFDT,EXPDT,WHO,REL,IDOB,ISSN,COB,TQIEN,RDATA,ISEX,NAME
"RTN","IBCNEBF",101,0)
 K ADD,%DT,D0,DG,DIC,DISYS,DIW,IENS,IBEISTC
"RTN","IBCNEBF",102,0)
 Q
"RTN","IBCNEBF",103,0)
 ;
"RTN","IBCNEBF",104,0)
FIL ;  File Buffer Data
"RTN","IBCNEBF",105,0)
 ;
"RTN","IBCNEBF",106,0)
 S MSGP=$$MGRP^IBCNEUT5()
"RTN","IBCNEBF",107,0)
 ;
"RTN","IBCNEBF",108,0)
 ; Variable IDUZ is optionally set by the calling routine.  If it is
"RTN","IBCNEBF",109,0)
 ; not defined, it will be set to the specific, non-human user.
"RTN","IBCNEBF",110,0)
 ;
"RTN","IBCNEBF",111,0)
 I $G(IDUZ)="" S IDUZ=$$FIND1^DIC(200,"","X","INTERFACE,IB EIV")
"RTN","IBCNEBF",112,0)
 ;
"RTN","IBCNEBF",113,0)
 I $G(ADD) S VBUF(.02)=IDUZ  ; Entered By
"RTN","IBCNEBF",114,0)
 S VBUF(.12)=$G(SYMBOL)   ; Buffer Symbol
"RTN","IBCNEBF",115,0)
 S VBUF(.13)=$G(OVRRIDE) ; Override freshness flag
"RTN","IBCNEBF",116,0)
 I '$G(ERACT) D  ; Only file if not an error
"RTN","IBCNEBF",117,0)
 . S VBUF(20.01)=INAME  ; Insurance Company/Payer Name
"RTN","IBCNEBF",118,0)
 . S VBUF(60.01)=DFN  ; Patient IEN
"RTN","IBCNEBF",119,0)
 . S VBUF(40.03)=GNUMB  ; Group Number
"RTN","IBCNEBF",120,0)
 . S VBUF(40.02)=GNAME  ; Group Name
"RTN","IBCNEBF",121,0)
 . S VBUF(60.07)=NAME  ; Name of Insured
"RTN","IBCNEBF",122,0)
 . S VBUF(60.04)=SUBID  ; Subscriber ID
"RTN","IBCNEBF",123,0)
 . S VBUF(62.01)=PATID  ; Patient/Member ID
"RTN","IBCNEBF",124,0)
 . S VBUF(20.04)=PPHONE  ; Precertification Phone
"RTN","IBCNEBF",125,0)
 . S VBUF(20.03)=BPHONE  ; Billing Phone
"RTN","IBCNEBF",126,0)
 . S VBUF(60.02)=EFFDT  ; Effective Date
"RTN","IBCNEBF",127,0)
 . S VBUF(60.03)=EXPDT  ; Expiration Date
"RTN","IBCNEBF",128,0)
 . S VBUF(60.05)=WHO  ; Whose Insurance
"RTN","IBCNEBF",129,0)
 . S VBUF(60.14)=REL  ;  Patient Relationship
"RTN","IBCNEBF",130,0)
 . S VBUF(60.08)=IDOB  ;  Insured's DOB
"RTN","IBCNEBF",131,0)
 . S VBUF(60.09)=ISSN  ;  Insured's SSN
"RTN","IBCNEBF",132,0)
 . S VBUF(60.12)=COB  ;  Coordination of Benefits
"RTN","IBCNEBF",133,0)
 . S VBUF(60.13)=ISEX  ;  Insured's Sex
"RTN","IBCNEBF",134,0)
 . S VBUF(62.02)=SUBADDR1 ; Subscriber address line 1
"RTN","IBCNEBF",135,0)
 . S VBUF(62.03)=SUBADDR2 ; Subscriber address line 2
"RTN","IBCNEBF",136,0)
 . S VBUF(62.04)=SUBCITY ; Subscriber address city
"RTN","IBCNEBF",137,0)
 . S VBUF(62.05)=SUBSTATE ; Subscriber address state
"RTN","IBCNEBF",138,0)
 . S VBUF(62.06)=SUBZIP ; Subscriber address zip code
"RTN","IBCNEBF",139,0)
 . S VBUF(62.07)=SUBCNTRY ; Subscriber address country code
"RTN","IBCNEBF",140,0)
 . S VBUF(62.08)=SUBCNDIV ; Subscriber address country subdivision code
"RTN","IBCNEBF",141,0)
 . ;
"RTN","IBCNEBF",142,0)
 . ; Define Service Type Codes (STC) to be sent with Insurance Inquiry
"RTN","IBCNEBF",143,0)
 . ; IBEISTC contains the STC defined by User using option EI, otherwise defaults sent
"RTN","IBCNEBF",144,0)
 . I $G(IBEISTC)'="",$G(IBEISTC)'="*" S VBUF(80.01)=IBEISTC F K=80.02:.01:80.2 S VBUF(K)=""
"RTN","IBCNEBF",145,0)
 . ; IBEISTC is '*' thus user selected DEFAULT and SITE SELECTED STCs to be sent
"RTN","IBCNEBF",146,0)
 . I $G(IBEISTC)="*" D
"RTN","IBCNEBF",147,0)
 .. ; Store 11 DEFAULT STCs
"RTN","IBCNEBF",148,0)
 .. F K=80.01:.01:80.11 S VBUF(K)=$P($G(^IBE(350.9,1,60)),U,K-80*100)
"RTN","IBCNEBF",149,0)
 .. ; Store up to 9 SITE SELECTED STCs, otherwise NULLs
"RTN","IBCNEBF",150,0)
 .. F K=80.12:.01:80.2 S VBUF(K)=$P($G(^IBE(350.9,1,61)),U,K-80*100-11)
"RTN","IBCNEBF",151,0)
 . K IBEISTC
"RTN","IBCNEBF",152,0)
 . ;
"RTN","IBCNEBF",153,0)
 . ; If the employer sponsored insurance array exists, then merge it in
"RTN","IBCNEBF",154,0)
 . I $D(ESGHPARR) M VBUF=ESGHPARR
"RTN","IBCNEBF",155,0)
 ;
"RTN","IBCNEBF",156,0)
 ; Do not overwrite the existing insurance co. name if it already exists
"RTN","IBCNEBF",157,0)
 I $G(ADD)="",$G(BUFF)'="" K VBUF(20.01)
"RTN","IBCNEBF",158,0)
 ;
"RTN","IBCNEBF",159,0)
 ; ** initialize IBERROR
"RTN","IBCNEBF",160,0)
 S IBERROR=""
"RTN","IBCNEBF",161,0)
 ;
"RTN","IBCNEBF",162,0)
 ;  If need to add a new Buffer entry ...
"RTN","IBCNEBF",163,0)
 ;
"RTN","IBCNEBF",164,0)
 ;  Variable IBFDA is returned to the calling routine as the IEN of
"RTN","IBCNEBF",165,0)
 ;  the buffer entry that was just added.
"RTN","IBCNEBF",166,0)
 ;
"RTN","IBCNEBF",167,0)
 I $G(ADD) D
"RTN","IBCNEBF",168,0)
 . S IBFDA=$$ADDSTF^IBCNBES(5,DFN,.VBUF)
"RTN","IBCNEBF",169,0)
 . ; Error Message is 2nd piece of result
"RTN","IBCNEBF",170,0)
 . S IBERROR=$P(IBFDA,U,2)
"RTN","IBCNEBF",171,0)
 . S IBFDA=$P(IBFDA,U,1)
"RTN","IBCNEBF",172,0)
 ;
"RTN","IBCNEBF",173,0)
 ;  If an error, send an email message
"RTN","IBCNEBF",174,0)
 I IBERROR'="" D  Q
"RTN","IBCNEBF",175,0)
 . S MSG(1)="Error returned by $$ADDSTF^IBCNBES:"
"RTN","IBCNEBF",176,0)
 . S MSG(2)=IBERROR
"RTN","IBCNEBF",177,0)
 . S MSG(3)="Values:"
"RTN","IBCNEBF",178,0)
 . S MSG(4)=" Patient DFN = "_$G(DFN)
"RTN","IBCNEBF",179,0)
 . S MSG(5)=" Pt Ins Record IEN = "_$G(IRIEN)
"RTN","IBCNEBF",180,0)
 . S MSG(6)="Please log a Remedy Ticket for this problem."
"RTN","IBCNEBF",181,0)
 . S XMSUB="Error creating Buffer Entry."
"RTN","IBCNEBF",182,0)
 . D MSG^IBCNEUT5(MSGP,XMSUB,"MSG(")
"RTN","IBCNEBF",183,0)
 . K MSGP,MSG,XMSUB,IBERR
"RTN","IBCNEBF",184,0)
 ;
"RTN","IBCNEBF",185,0)
 ;  If need to update a new Buffer Entry ...
"RTN","IBCNEBF",186,0)
 ;
"RTN","IBCNEBF",187,0)
 ;  Variable BUFF is passed into this routine whenever the buffer
"RTN","IBCNEBF",188,0)
 ;  entry is known and the ADD flag is off.  The existing buffer entry
"RTN","IBCNEBF",189,0)
 ;  is edited in this case.
"RTN","IBCNEBF",190,0)
 ;
"RTN","IBCNEBF",191,0)
 I $G(ADD)="" D EDITSTF^IBCNBES(BUFF,.VBUF)
"RTN","IBCNEBF",192,0)
 ;
"RTN","IBCNEBF",193,0)
 ;  If an error occurred in EDITSTF, the error array is not returned
"RTN","IBCNEBF",194,0)
 ;
"RTN","IBCNEBF",195,0)
 Q
"RTN","IBCNEDE")
0^29^B19636990^B20320433
"RTN","IBCNEDE",1,0)
IBCNEDE ;DAOU/DAC - eIV DATA EXTRACTS ;04-JUN-2002
"RTN","IBCNEDE",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416,438**;21-MAR-94;Build 52
"RTN","IBCNEDE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE",4,0)
 ;
"RTN","IBCNEDE",5,0)
 ;**Program Description**
"RTN","IBCNEDE",6,0)
 ;  This program is the main driver for all data extracts associated
"RTN","IBCNEDE",7,0)
 ;  with the electronic Insurance Verification interface.
"RTN","IBCNEDE",8,0)
 ;  This program will run each extract in the specified order, which 
"RTN","IBCNEDE",9,0)
 ;  populates the eIV Transmission File (sometimes it creates/updates 
"RTN","IBCNEDE",10,0)
 ;  an entry in the insurance buffer as well).  It then begins to 
"RTN","IBCNEDE",11,0)
 ;  process the inquiries in the eIV Transmission File.
"RTN","IBCNEDE",12,0)
 ;  08-08-2002
"RTN","IBCNEDE",13,0)
 ;  As this program will run in the background the variable ZTSTOP
"RTN","IBCNEDE",14,0)
 ;  can be returned from any of the extracts should a TaskMan stop
"RTN","IBCNEDE",15,0)
 ;  request occur.  Also, clear out the task record before exiting.
"RTN","IBCNEDE",16,0)
 ; 08-09-2002
"RTN","IBCNEDE",17,0)
 ;  Added check for "~NO PAYER", if it does not exist, build it
"RTN","IBCNEDE",18,0)
 ;
"RTN","IBCNEDE",19,0)
 Q
"RTN","IBCNEDE",20,0)
 ;
"RTN","IBCNEDE",21,0)
EN ; Entry Point
"RTN","IBCNEDE",22,0)
 ; Prevent simultaneous runs
"RTN","IBCNEDE",23,0)
 ; Set error trap to ensure that lock is released
"RTN","IBCNEDE",24,0)
 N $ES,$ET
"RTN","IBCNEDE",25,0)
 S $ET="D ER^IBCNEDE"
"RTN","IBCNEDE",26,0)
 ; Check lock
"RTN","IBCNEDE",27,0)
 L +^TMP("IBCNEDE"):1 I '$T D  G ENX
"RTN","IBCNEDE",28,0)
 . I '$D(ZTSK) W !!,"The eIV Nightly Task is already running, please retry later." D PAUSE^VALM1
"RTN","IBCNEDE",29,0)
 ; Reset reg ack flag
"RTN","IBCNEDE",30,0)
 S $P(^IBE(350.9,1,51),U,22)=""
"RTN","IBCNEDE",31,0)
 ; If "~NO PAYER" is not a valid Payer File entry, rebuild it from
"RTN","IBCNEDE",32,0)
 ;  the existing utility
"RTN","IBCNEDE",33,0)
 I '$$FIND1^DIC(365.12,,"X","~NO PAYER") D PAYR^IBCNEUT2
"RTN","IBCNEDE",34,0)
 ;
"RTN","IBCNEDE",35,0)
 ; Confirm that all necessary tables have been loaded
"RTN","IBCNEDE",36,0)
 ; before the extract is run
"RTN","IBCNEDE",37,0)
 I '$$TBLCHK() G EN1
"RTN","IBCNEDE",38,0)
 ;
"RTN","IBCNEDE",39,0)
 D AMCHECK^IBCNEUT6     ; ensure Auto Match entries are valid
"RTN","IBCNEDE",40,0)
 ;
"RTN","IBCNEDE",41,0)
 ; Run All 3 extracts and launch IBCNEDEP(Inquiries)
"RTN","IBCNEDE",42,0)
 D EN^IBCNEDE1 ; Insurance Buffer Extract
"RTN","IBCNEDE",43,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",44,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",45,0)
 D EN^IBCNEDE2 ; Pre Reg Extract
"RTN","IBCNEDE",46,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",47,0)
EN1 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",48,0)
 ; Send enrollment message
"RTN","IBCNEDE",49,0)
 D ^IBCNEHLM
"RTN","IBCNEDE",50,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",51,0)
 I '$G(QFL) D
"RTN","IBCNEDE",52,0)
 . ; Wait for 'AA' acknowledgement
"RTN","IBCNEDE",53,0)
 . D WAIT  Q:'+QFL
"RTN","IBCNEDE",54,0)
 . KILL QFL
"RTN","IBCNEDE",55,0)
 . ;
"RTN","IBCNEDE",56,0)
 . D ^IBCNEDEP  ; Inquiries Processing
"RTN","IBCNEDE",57,0)
 ;
"RTN","IBCNEDE",58,0)
 ; Check to see if background process has been stopped, if so quit.
"RTN","IBCNEDE",59,0)
 I $G(ZTSTOP) G ENX
"RTN","IBCNEDE",60,0)
 D MMQ         ; Queue the Daily MailMan message
"RTN","IBCNEDE",61,0)
 ; Send MailMan message if first of month to report on records 
"RTN","IBCNEDE",62,0)
 ;  eligible to be purged
"RTN","IBCNEDE",63,0)
 I +$E($P($$NOW^XLFDT(),"."),6,7)=1 D MMPURGE^IBCNEKI2
"RTN","IBCNEDE",64,0)
 ;
"RTN","IBCNEDE",65,0)
ENX ; Purge task record - if queued
"RTN","IBCNEDE",66,0)
 I $D(ZTQUEUED) S ZTREQ="@"
"RTN","IBCNEDE",67,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",68,0)
 Q
"RTN","IBCNEDE",69,0)
 ;
"RTN","IBCNEDE",70,0)
TBLCHK() ;
"RTN","IBCNEDE",71,0)
 ; Confirm that at least one eIV payer and that all X12 tables
"RTN","IBCNEDE",72,0)
 ; have been loaded
"RTN","IBCNEDE",73,0)
 N PAY,PAYIEN,PAYOK,TBLOK,II
"RTN","IBCNEDE",74,0)
 S (PAY,PAYIEN,PAYOK)="",TBLOK=1
"RTN","IBCNEDE",75,0)
 F  S PAY=$O(^IBE(365.12,"B",PAY)) Q:PAY=""!PAYOK  I PAY'="~NO PAYER" D
"RTN","IBCNEDE",76,0)
 .  F  S PAYIEN=$O(^IBE(365.12,"B",PAY,PAYIEN)) Q:PAYIEN=""!PAYOK  D
"RTN","IBCNEDE",77,0)
 ..    I $$PYRAPP^IBCNEUT5("IIV",PAYIEN) S PAYOK=1 Q
"RTN","IBCNEDE",78,0)
 I PAYOK D
"RTN","IBCNEDE",79,0)
 . F II=11:1:18,21 I $O(^IBE(II*.001+365,"B",""))="" S TBLOK="" Q
"RTN","IBCNEDE",80,0)
 Q PAYOK&TBLOK
"RTN","IBCNEDE",81,0)
 ;
"RTN","IBCNEDE",82,0)
WAIT ;  Wait for acknowledgement comes back from EC
"RTN","IBCNEDE",83,0)
 ;  Hang for 60 seconds and check status again
"RTN","IBCNEDE",84,0)
 ;  Try 360 times for a total of 21600 seconds (6 hours)
"RTN","IBCNEDE",85,0)
 S QFL=0,CT=0
"RTN","IBCNEDE",86,0)
 F  D  Q:QFL'=""!(CT>360)
"RTN","IBCNEDE",87,0)
 . S QFL=$$GET1^DIQ(350.9,"1,",51.22,"I")
"RTN","IBCNEDE",88,0)
 . Q:QFL'=""
"RTN","IBCNEDE",89,0)
 . HANG 60 S CT=CT+1
"RTN","IBCNEDE",90,0)
 KILL CT
"RTN","IBCNEDE",91,0)
 Q
"RTN","IBCNEDE",92,0)
 ;
"RTN","IBCNEDE",93,0)
FRESHDT(EXT,STALEDYS) ;  Calculate Freshness
"RTN","IBCNEDE",94,0)
 ;  Ext - ien of extract for future purposes
"RTN","IBCNEDE",95,0)
 ;  Staledys - # of days in the past in which an insurance verification
"RTN","IBCNEDE",96,0)
 ;  is considered still valid/current
"RTN","IBCNEDE",97,0)
 N STALEDT
"RTN","IBCNEDE",98,0)
 S STALEDT=$$FMADD^XLFDT(DT,-STALEDYS)
"RTN","IBCNEDE",99,0)
 Q STALEDT
"RTN","IBCNEDE",100,0)
 ;
"RTN","IBCNEDE",101,0)
 ; ---------------------------------------------------
"RTN","IBCNEDE",102,0)
MMQ ; This procedure is responsible for scheduling the creation and 
"RTN","IBCNEDE",103,0)
 ; sending of the daily MailMan statistical message if the site has
"RTN","IBCNEDE",104,0)
 ; defined this appropriately in the eIV site parameters.
"RTN","IBCNEDE",105,0)
 ;
"RTN","IBCNEDE",106,0)
 NEW IIV,CURRTIME,MTIME,MSG,Y,MGRP
"RTN","IBCNEDE",107,0)
 NEW ZTRTN,ZTDESC,ZTDTH,ZTIO,ZTUCI,ZTCPU,ZTPRI,ZTSAVE,ZTKIL,ZTSYNC,ZTSK
"RTN","IBCNEDE",108,0)
 ;
"RTN","IBCNEDE",109,0)
 S IIV=$G(^IBE(350.9,1,51))
"RTN","IBCNEDE",110,0)
 I '$P(IIV,U,2) G MMQX          ; site does not want daily messages
"RTN","IBCNEDE",111,0)
 I '$P(IIV,U,3) G MMQX          ; MM message time is not defined
"RTN","IBCNEDE",112,0)
 I '$P(IIV,U,4) G MMQX          ; Mail Group is not defined
"RTN","IBCNEDE",113,0)
 ;
"RTN","IBCNEDE",114,0)
 S CURRTIME=$P($H,",",2)        ; current $H time
"RTN","IBCNEDE",115,0)
 S MTIME=DT_"."_$P(IIV,U,3)     ; build a FileMan date/time
"RTN","IBCNEDE",116,0)
 S MTIME=$$FMTH^XLFDT(MTIME)    ; convert to $H format
"RTN","IBCNEDE",117,0)
 S MTIME=$P(MTIME,",",2)        ; $H time of MM message
"RTN","IBCNEDE",118,0)
 ;
"RTN","IBCNEDE",119,0)
 ; If the current time is after the MailMan message time, then 
"RTN","IBCNEDE",120,0)
 ; schedule the MM message for tomorrow at that time.
"RTN","IBCNEDE",121,0)
 I CURRTIME>MTIME S ZTDTH=($H+1)_","_MTIME
"RTN","IBCNEDE",122,0)
 ;
"RTN","IBCNEDE",123,0)
 ; Otherwise, schedule it for later today
"RTN","IBCNEDE",124,0)
 E  S ZTDTH=+$H_","_MTIME
"RTN","IBCNEDE",125,0)
 ;
"RTN","IBCNEDE",126,0)
 ; Set up the other TaskManager variables
"RTN","IBCNEDE",127,0)
 S ZTRTN="MAILMSG^IBCNERP7"
"RTN","IBCNEDE",128,0)
 S ZTDESC="eIV Daily Statistics E-Mail"
"RTN","IBCNEDE",129,0)
 S ZTIO=""
"RTN","IBCNEDE",130,0)
 D ^%ZTLOAD            ; Call TaskManager
"RTN","IBCNEDE",131,0)
 I $G(ZTSK) G MMQX     ; Task# is OK so get out
"RTN","IBCNEDE",132,0)
 ;
"RTN","IBCNEDE",133,0)
 ; Send a MailMan message if this Task could not get scheduled
"RTN","IBCNEDE",134,0)
 S MSG(1)="TaskManager could not schedule the daily eIV MailMan message"
"RTN","IBCNEDE",135,0)
 S MSG(2)="at the specified time of "_$E($P(IIV,U,3),1,2)_":"_$E($P(IIV,U,3),3,4)_"."
"RTN","IBCNEDE",136,0)
 S MSG(3)="This is defined in the eIV Site Parameters option."
"RTN","IBCNEDE",137,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE",138,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE",139,0)
 D MSG^IBCNEUT5(MGRP,"eIV Statistical Message Not Sent","MSG(")
"RTN","IBCNEDE",140,0)
 ;
"RTN","IBCNEDE",141,0)
MMQX ;
"RTN","IBCNEDE",142,0)
 Q
"RTN","IBCNEDE",143,0)
 ;
"RTN","IBCNEDE",144,0)
ER ; Unlock the eIV Nightly Task and return to log error
"RTN","IBCNEDE",145,0)
 L -^TMP("IBCNEDE")
"RTN","IBCNEDE",146,0)
 D ^%ZTER
"RTN","IBCNEDE",147,0)
 D UNWIND^%ZTER
"RTN","IBCNEDE",148,0)
 Q
"RTN","IBCNEDE",149,0)
 ;
"RTN","IBCNEDE1")
0^26^B38997890^B37016330
"RTN","IBCNEDE1",1,0)
IBCNEDE1 ;DAOU/DAC - eIV INSURANCE BUFFER EXTRACT ;04-JUN-2002
"RTN","IBCNEDE1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,438**;21-MAR-94;Build 52
"RTN","IBCNEDE1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE1",4,0)
 ;
"RTN","IBCNEDE1",5,0)
 ;**Program Description**
"RTN","IBCNEDE1",6,0)
 ; This routine loops through the insurance buffer and 
"RTN","IBCNEDE1",7,0)
 ; creates eIV transaction queue entries when approriate.
"RTN","IBCNEDE1",8,0)
 ; Periodically check for stop request for background task
"RTN","IBCNEDE1",9,0)
 ;
"RTN","IBCNEDE1",10,0)
 Q   ; no direct calls allowed
"RTN","IBCNEDE1",11,0)
 ;
"RTN","IBCNEDE1",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE1",13,0)
 ; Insurance Buffer Extract
"RTN","IBCNEDE1",14,0)
 ;
"RTN","IBCNEDE1",15,0)
 N TODAYSDT,FRESHDAY,LOOPDT,IEN,OVRFRESH,FRESHDT
"RTN","IBCNEDE1",16,0)
 N DFN,PDOD,SRVICEDT,VERIFDDT,PAYERSTR,PAYERID,SYMBOL,PAYRNAME
"RTN","IBCNEDE1",17,0)
 N PIEN,PNIEN,TQIEN,TRIEN,TRSRVCDT,TQCRTDT,TRANSNO,DISYS
"RTN","IBCNEDE1",18,0)
 N ORIGINSR,ORGRPSTR,ORGRPNUM,ORGRPNAM,ORGSUBCR
"RTN","IBCNEDE1",19,0)
 N MAXCNT,CNT,ISYMBOLM,DATA1,DATA2,ORIG,SETSTR,ISYMBOL,IBCNETOT
"RTN","IBCNEDE1",20,0)
 N SIDDATA,SID,SIDACT,BSID,FDA,PASSBUF,SIDCNT,SIDARRAY
"RTN","IBCNEDE1",21,0)
 N TQDT,TQIENS,TQOK,STATIEN,PATID,MCAREFLG,INSNAME
"RTN","IBCNEDE1",22,0)
 ;
"RTN","IBCNEDE1",23,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(1) ; Returns buffer extract settings
"RTN","IBCNEDE1",24,0)
 I 'SETSTR Q                    ; Quit if extract is not active
"RTN","IBCNEDE1",25,0)
 S MAXCNT=$P(SETSTR,U,4)        ; Max # TQ entries that may be created
"RTN","IBCNEDE1",26,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE1",27,0)
 ;
"RTN","IBCNEDE1",28,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1) ; System freshness days
"RTN","IBCNEDE1",29,0)
 ;
"RTN","IBCNEDE1",30,0)
 S CNT=0       ; Initialize count of TQ entries created
"RTN","IBCNEDE1",31,0)
 S IBCNETOT=0  ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE1",32,0)
 ;
"RTN","IBCNEDE1",33,0)
 S LOOPDT="" ; Date used to loop throught the IB global
"RTN","IBCNEDE1",34,0)
 F  S LOOPDT=$O(^IBA(355.33,"AEST","E",LOOPDT)) Q:LOOPDT=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",35,0)
 . S IEN=""
"RTN","IBCNEDE1",36,0)
 . F  S IEN=$O(^IBA(355.33,"AEST","E",LOOPDT,IEN)) Q:IEN=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",37,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE1",38,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE1",39,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE1",40,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE1",41,0)
 .. ;
"RTN","IBCNEDE1",42,0)
 .. ; Get symbol, if symbol'=" " OR "!" then quit
"RTN","IBCNEDE1",43,0)
 .. S ISYMBOL=$$SYMBOL^IBCNBLL(IEN) ; Insurance buffer symbol
"RTN","IBCNEDE1",44,0)
 .. I (ISYMBOL'=" ")&(ISYMBOL'="!") Q
"RTN","IBCNEDE1",45,0)
 .. ;
"RTN","IBCNEDE1",46,0)
 .. ; Get the eIV STATUS IEN and quit for response related errors
"RTN","IBCNEDE1",47,0)
 .. S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNEDE1",48,0)
 .. I ",11,12,15,"[(","_STATIEN_",") Q  ; Prevent update for response errors
"RTN","IBCNEDE1",49,0)
 .. ;
"RTN","IBCNEDE1",50,0)
 .. S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13) ; Freshness OvrRd flag
"RTN","IBCNEDE1",51,0)
 .. S DFN=$P($G(^IBA(355.33,IEN,60)),U,1) ; Patient DFN
"RTN","IBCNEDE1",52,0)
 .. Q:DFN=""
"RTN","IBCNEDE1",53,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q           ; Exclude if test patient
"RTN","IBCNEDE1",54,0)
 .. ;
"RTN","IBCNEDE1",55,0)
 .. S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1     ; Patient's date of death
"RTN","IBCNEDE1",56,0)
 .. S SRVICEDT=DT I PDOD S SRVICEDT=PDOD             ; Service Date
"RTN","IBCNEDE1",57,0)
 .. S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE1",58,0)
 .. S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ; Payer String
"RTN","IBCNEDE1",59,0)
 .. S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ; Payer ID
"RTN","IBCNEDE1",60,0)
 .. S SYMBOL=+PAYERSTR                               ; Payer Symbol
"RTN","IBCNEDE1",61,0)
 .. I '$$PYRACTV^IBCNEDE7(PIEN) Q          ; Payer is not nationally active
"RTN","IBCNEDE1",62,0)
 .. ;
"RTN","IBCNEDE1",63,0)
 .. ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNEDE1",64,0)
 .. I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q
"RTN","IBCNEDE1",65,0)
 .. ;
"RTN","IBCNEDE1",66,0)
 .. D CLEAR^IBCNEUT4(IEN)                ; remove any existing symbol
"RTN","IBCNEDE1",67,0)
 .. ;
"RTN","IBCNEDE1",68,0)
 .. ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNEDE1",69,0)
 .. I (PAYERID="")!('PIEN) Q
"RTN","IBCNEDE1",70,0)
 .. ;
"RTN","IBCNEDE1",71,0)
 .. ; Update service date and freshness date based on payer's allowed
"RTN","IBCNEDE1",72,0)
 .. ;  date range
"RTN","IBCNEDE1",73,0)
 .. D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE1",74,0)
 .. ;
"RTN","IBCNEDE1",75,0)
 .. ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE1",76,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE1",77,0)
 .. ;
"RTN","IBCNEDE1",78,0)
 .. ; allow only one MEDICARE transmission per patient
"RTN","IBCNEDE1",79,0)
 .. S INSNAME=$P($G(^IBA(355.33,IEN,20)),U)
"RTN","IBCNEDE1",80,0)
 .. I INSNAME["MEDICARE",$G(MCAREFLG(DFN)) Q
"RTN","IBCNEDE1",81,0)
 .. ;
"RTN","IBCNEDE1",82,0)
 .. ; make sure that entries have pat. relationship set to "self"
"RTN","IBCNEDE1",83,0)
 .. D SETREL(IEN)
"RTN","IBCNEDE1",84,0)
 .. ; make sure that service type codes are set
"RTN","IBCNEDE1",85,0)
 .. I '+$G(^IBA(355.33,IEN,80)) D SETSTC^IBCNERTQ(IEN)
"RTN","IBCNEDE1",86,0)
 .. ;
"RTN","IBCNEDE1",87,0)
 .. ; If freshness override flag is set, file to TQ and quit
"RTN","IBCNEDE1",88,0)
 .. I OVRFRESH=1 D  Q
"RTN","IBCNEDE1",89,0)
 ... NEW DIE,X,Y,DISYS
"RTN","IBCNEDE1",90,0)
 ... S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNEDE1",91,0)
 ... S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ
"RTN","IBCNEDE1",92,0)
 .. ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNEDE1",93,0)
 .. ; not included
"RTN","IBCNEDE1",94,0)
 .. S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNEDE1",95,0)
 .. F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNEDE1",96,0)
 ... F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNEDE1",97,0)
 ....    I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNEDE1",98,0)
 .. I TQOK S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ
"RTN","IBCNEDE1",99,0)
 Q
"RTN","IBCNEDE1",100,0)
TQ ; Determine how many entries to create in the TQ file and set entries
"RTN","IBCNEDE1",101,0)
 ;
"RTN","IBCNEDE1",102,0)
 S BSID=$P($G(^IBA(355.33,IEN,60)),U,4)     ; Subscriber ID from buffer
"RTN","IBCNEDE1",103,0)
 S PATID=$P($G(^IBA(355.33,IEN,62)),U,1)    ; Patient ID from buffer  IB*2*416
"RTN","IBCNEDE1",104,0)
 K SIDARRAY
"RTN","IBCNEDE1",105,0)
 S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,BSID,.SIDARRAY,FRESHDT) ;determine rules to follow
"RTN","IBCNEDE1",106,0)
 S SIDACT=$P(SIDDATA,U,1)
"RTN","IBCNEDE1",107,0)
 S SIDCNT=$P(SIDDATA,U,2)                   ;Pull cnt of SIDs - shd be 1
"RTN","IBCNEDE1",108,0)
 ;
"RTN","IBCNEDE1",109,0)
 I SIDACT=3 D BUFF^IBCNEUT2(IEN,18) Q    ; update buffer w/ bang & quit
"RTN","IBCNEDE1",110,0)
 I CNT+SIDCNT>MAXCNT Q
"RTN","IBCNEDE1",111,0)
 S SID=""
"RTN","IBCNEDE1",112,0)
 F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET(IEN,OVRFRESH,1,$P(SID,"_"))    ; set TQ w/ 'Pass Buffer' flag
"RTN","IBCNEDE1",113,0)
 I SIDACT=4 D SET(IEN,OVRFRESH,1,"")       ; set TQ w/ 'Pass Buffer' flag w/ blank subscriber ID
"RTN","IBCNEDE1",114,0)
 Q
"RTN","IBCNEDE1",115,0)
 ;
"RTN","IBCNEDE1",116,0)
RET ; Record Retrieval - Insurance Buffer
"RTN","IBCNEDE1",117,0)
 ;
"RTN","IBCNEDE1",118,0)
 S ORIGINSR=$P($G(^IBA(355.33,IEN,20)),U,1) ;Original ins. co.
"RTN","IBCNEDE1",119,0)
 S ORGRPSTR=$G(^IBA(355.33,IEN,40)) ; Original group string
"RTN","IBCNEDE1",120,0)
 S ORGRPNUM=$P(ORGRPSTR,U,3) ;Original group number
"RTN","IBCNEDE1",121,0)
 S ORGRPNAM=$P(ORGRPSTR,U,2) ;Original group name
"RTN","IBCNEDE1",122,0)
 S ORGSUBCR=$P($G(^IBA(355.33,IEN,60)),U,4) ; Original subscriber
"RTN","IBCNEDE1",123,0)
 ;
"RTN","IBCNEDE1",124,0)
 Q
"RTN","IBCNEDE1",125,0)
 ;
"RTN","IBCNEDE1",126,0)
SET(BUFFIEN,OVRFRESH,PASSBUF,SID1) ; Set data and check if set already
"RTN","IBCNEDE1",127,0)
 D RET
"RTN","IBCNEDE1",128,0)
 ;
"RTN","IBCNEDE1",129,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE1",130,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE1",131,0)
 S DATA1=DFN_U_PIEN_U_1_U_$G(BUFFIEN)_U_SID1_U_FRESHDT_U_PASSBUF ; SETTQ parameter 1
"RTN","IBCNEDE1",132,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE1",133,0)
 ;
"RTN","IBCNEDE1",134,0)
 ;The hardcoded '1' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE1",135,0)
 ; the file 365.1 that it is the buffer extract.
"RTN","IBCNEDE1",136,0)
 S DATA2=1_U_"V"_U_SRVICEDT_U_"" ; SETTQ parameter 2
"RTN","IBCNEDE1",137,0)
 ;
"RTN","IBCNEDE1",138,0)
 S ORIG=ORIGINSR_U_ORGRPNUM_U_ORGRPNAM_U_ORGSUBCR ; SETTQ parameter 3
"RTN","IBCNEDE1",139,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,ORIG,$G(OVRFRESH)) ; File TQ entry
"RTN","IBCNEDE1",140,0)
 I TQIEN'="" S CNT=CNT+1 ; If filed increment count
"RTN","IBCNEDE1",141,0)
 ;
"RTN","IBCNEDE1",142,0)
 Q
"RTN","IBCNEDE1",143,0)
 ;
"RTN","IBCNEDE1",144,0)
SETREL(IEN) ; set pat. relationship to "self"
"RTN","IBCNEDE1",145,0)
 N DA,DIE,DR,X,Y
"RTN","IBCNEDE1",146,0)
 I $P($G(^IBA(355.33,IEN,60)),U,14)="" S DIE="^IBA(355.33,",DA=IEN,DR="60.14///SELF" D ^DIE
"RTN","IBCNEDE1",147,0)
 Q
"RTN","IBCNEDE2")
0^34^B60928994^B58601408
"RTN","IBCNEDE2",1,0)
IBCNEDE2 ;DAOU/DAC - eIV PRE REG EXTRACT (APPTS) ;18-JUN-2002
"RTN","IBCNEDE2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,249,345,416,438**;21-MAR-94;Build 52
"RTN","IBCNEDE2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE2",4,0)
 ;
"RTN","IBCNEDE2",5,0)
 ;**Program Description**
"RTN","IBCNEDE2",6,0)
 ;  This program finds veterans who are scheduled to be seen within a
"RTN","IBCNEDE2",7,0)
 ;  specified date range.
"RTN","IBCNEDE2",8,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE2",9,0)
 ;
"RTN","IBCNEDE2",10,0)
 Q   ; can't be called directly
"RTN","IBCNEDE2",11,0)
 ;
"RTN","IBCNEDE2",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE2",13,0)
 ; Pre reg extract (Appointment extract)
"RTN","IBCNEDE2",14,0)
 ;
"RTN","IBCNEDE2",15,0)
 N TODAYSDT,FRESHDAY,SLCCRIT1,MAXCNT,CNT,ENDDT,CLNC,FRESHDT,GIEN
"RTN","IBCNEDE2",16,0)
 N APTDT,INREC,INSIEN,PAYER,PIEN,PAYERSTR,SYMBOL,SUPPBUFF,PATID
"RTN","IBCNEDE2",17,0)
 N DFN,OK,VAIN,INS,DATA1,DATA2,ELG,PAYERID,SETSTR,SRVICEDT,ACTINS
"RTN","IBCNEDE2",18,0)
 N TQIEN,IBINDT,IBOUTP,QURYFLAG,INSNAME,FOUND1,FOUND2,IBCNETOT,VDATE
"RTN","IBCNEDE2",19,0)
 N SID,SIDACT,SIDDATA,SIDARRAY,SIDCNT,IBDDI,IBINS,DISYS,NUM,MCAREFLG
"RTN","IBCNEDE2",20,0)
 ;
"RTN","IBCNEDE2",21,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(2)     ;  Get setting for pre reg. extract 
"RTN","IBCNEDE2",22,0)
 I 'SETSTR Q                         ; Quit if extract is not active
"RTN","IBCNEDE2",23,0)
 S SLCCRIT1=$P(SETSTR,U,2)           ; Selection Criteria #1
"RTN","IBCNEDE2",24,0)
 S MAXCNT=$P(SETSTR,U,4)             ; Max # of TQ entries to create
"RTN","IBCNEDE2",25,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE2",26,0)
 S SUPPBUFF=$P(SETSTR,U,5)                   ; Suppress Buffer Flag
"RTN","IBCNEDE2",27,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)     ; Freshness days span
"RTN","IBCNEDE2",28,0)
 S CNT=0                                     ; Init. TQ entry counter
"RTN","IBCNEDE2",29,0)
 S ENDDT=$$FMADD^XLFDT(DT,SLCCRIT1)   ; End of appt. date selection range
"RTN","IBCNEDE2",30,0)
 S IBCNETOT=0               ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE2",31,0)
 K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)   ; Clean TMP globals
"RTN","IBCNEDE2",32,0)
 ;
"RTN","IBCNEDE2",33,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",34,0)
 ; Loop through clinics 
"RTN","IBCNEDE2",35,0)
 F  S CLNC=$O(^SC(CLNC)) Q:'CLNC!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",36,0)
 . ;
"RTN","IBCNEDE2",37,0)
 . D CLINICEX Q:'OK     ; Check for clinic exclusion
"RTN","IBCNEDE2",38,0)
 . ;
"RTN","IBCNEDE2",39,0)
 . S ^TMP("IBCNEDE2",$J,CLNC)=""
"RTN","IBCNEDE2",40,0)
 ;
"RTN","IBCNEDE2",41,0)
 ; Set up variables for scheduling call and call
"RTN","IBCNEDE2",42,0)
 S IBSDA("FLDS")=8
"RTN","IBCNEDE2",43,0)
 S IBSDA(1)=DT_";"_ENDDT
"RTN","IBCNEDE2",44,0)
 S IBSDA(2)="^TMP(""IBCNEDE2"",$J,"
"RTN","IBCNEDE2",45,0)
 S IBSDA(3)="R"
"RTN","IBCNEDE2",46,0)
 S NUM=$$SDAPI^SDAMA301(.IBSDA) I NUM<1 D:NUM<0 ERRMSG G ENQ
"RTN","IBCNEDE2",47,0)
 ;
"RTN","IBCNEDE2",48,0)
 ;
"RTN","IBCNEDE2",49,0)
 S CLNC=0 ; Init. clinic
"RTN","IBCNEDE2",50,0)
 ; Loop through clinics returned
"RTN","IBCNEDE2",51,0)
 F  S CLNC=$O(^TMP($J,"SDAMA301",CLNC)) Q:'CLNC  D  Q:$G(ZTSTOP)!(CNT'<MAXCNT)
"RTN","IBCNEDE2",52,0)
 . ;
"RTN","IBCNEDE2",53,0)
 . ; Loop through patients returned
"RTN","IBCNEDE2",54,0)
 . S DFN=0 F  S DFN=$O(^TMP($J,"SDAMA301",CLNC,DFN)) Q:'DFN!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",55,0)
 .. ;
"RTN","IBCNEDE2",56,0)
 .. S APTDT=DT           ; Check for appointment date
"RTN","IBCNEDE2",57,0)
 .. S MCAREFLG=0
"RTN","IBCNEDE2",58,0)
 .. ;
"RTN","IBCNEDE2",59,0)
 .. ; Loop through dates in range at clinic
"RTN","IBCNEDE2",60,0)
 .. F  S APTDT=$O(^TMP($J,"SDAMA301",CLNC,DFN,APTDT)) Q:('APTDT)!((APTDT\1)>ENDDT)!(CNT'<MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE2",61,0)
 ... ;
"RTN","IBCNEDE2",62,0)
 ... S SRVICEDT=APTDT\1 ;Set service date equal to appointment date
"RTN","IBCNEDE2",63,0)
 ... S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE2",64,0)
 ... ;
"RTN","IBCNEDE2",65,0)
 ... ; Update count for periodic check
"RTN","IBCNEDE2",66,0)
 ... S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE2",67,0)
 ... ; Check for request to stop background job, periodically
"RTN","IBCNEDE2",68,0)
 ... I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE2",69,0)
 ... ;
"RTN","IBCNEDE2",70,0)
 ... S IBSDATA=$G(^TMP($J,"SDAMA301",CLNC,DFN,APTDT))
"RTN","IBCNEDE2",71,0)
 ... S ELG=$P(IBSDATA,U,8)
"RTN","IBCNEDE2",72,0)
 ... S ELG=$S(ELG'="":ELG,1:$P($G(^DPT(DFN,.36)),U,1))
"RTN","IBCNEDE2",73,0)
 ... I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE2",74,0)
 ... I $P($G(^DPT(DFN,.35)),"^",1)'="" Q  ; Exclude if patient is deceased
"RTN","IBCNEDE2",75,0)
 ... ;
"RTN","IBCNEDE2",76,0)
 ... D ELG Q:'OK     ; Check for eligibility exclusion
"RTN","IBCNEDE2",77,0)
 ... ;
"RTN","IBCNEDE2",78,0)
 ... K ACTINS
"RTN","IBCNEDE2",79,0)
 ... D ALL^IBCNS1(DFN,"ACTINS",2)
"RTN","IBCNEDE2",80,0)
 ... ;
"RTN","IBCNEDE2",81,0)
 ... I '$D(ACTINS(0)) Q  ; Patient has no active ins
"RTN","IBCNEDE2",82,0)
 ... ;
"RTN","IBCNEDE2",83,0)
 ... S INREC=0 ; Record ien
"RTN","IBCNEDE2",84,0)
 ... F  S INREC=$O(ACTINS(INREC)) Q:('INREC)!(CNT'<MAXCNT)  D
"RTN","IBCNEDE2",85,0)
 ... . S INSIEN=$P($G(ACTINS(INREC,0)),U,1) ; Insurance ien
"RTN","IBCNEDE2",86,0)
 ... . S INSNAME=$P($G(^DIC(36,INSIEN,0)),U)
"RTN","IBCNEDE2",87,0)
 ... . ; exclude policies that have been verified within "freshness days"
"RTN","IBCNEDE2",88,0)
 ... . S VDATE=$P($G(ACTINS(INREC,1)),U,3)
"RTN","IBCNEDE2",89,0)
 ... . I VDATE'="",SRVICEDT'>$$FMADD^XLFDT(VDATE,FRESHDAY) Q
"RTN","IBCNEDE2",90,0)
 ... . ; allow only one MEDICARE transmission per patient
"RTN","IBCNEDE2",91,0)
 ... . I INSNAME["MEDICARE",MCAREFLG Q
"RTN","IBCNEDE2",92,0)
 ... . ; exclude pharmacy policies
"RTN","IBCNEDE2",93,0)
 ... . I $$GET1^DIQ(36,INSIEN_",",.13)="PRESCRIPTION ONLY" Q
"RTN","IBCNEDE2",94,0)
 ... . S GIEN=+$P($G(ACTINS(INREC,0)),U,18)
"RTN","IBCNEDE2",95,0)
 ... . I GIEN,$$GET1^DIQ(355.3,GIEN_",",.09)="PRESCRIPTION" Q
"RTN","IBCNEDE2",96,0)
 ... . ; check for ins. to exclude (i.e. Medicaid)
"RTN","IBCNEDE2",97,0)
 ... . I $$EXCLUDE^IBCNEUT4(INSNAME) Q
"RTN","IBCNEDE2",98,0)
 ... . ; check insurance policy expiration date
"RTN","IBCNEDE2",99,0)
 ... . I $$EXPIRED($P($G(ACTINS(INREC,0)),U,4)) Q
"RTN","IBCNEDE2",100,0)
 ... . ;
"RTN","IBCNEDE2",101,0)
 ... . ; set patient id field   IB*2*416
"RTN","IBCNEDE2",102,0)
 ... . S PATID=$P($G(ACTINS(INREC,5)),U,1)    ; 5.01 field
"RTN","IBCNEDE2",103,0)
 ... . ;
"RTN","IBCNEDE2",104,0)
 ... . S PAYERSTR=$$INSERROR^IBCNEUT3("I",INSIEN) ; Get payer info
"RTN","IBCNEDE2",105,0)
 ... . ;
"RTN","IBCNEDE2",106,0)
 ... . S SYMBOL=+PAYERSTR ; error symbol
"RTN","IBCNEDE2",107,0)
 ... . S PAYERID=$P(PAYERSTR,U,3)               ; (National ID) payer id
"RTN","IBCNEDE2",108,0)
 ... . S PIEN=$P(PAYERSTR,U,2)                  ; Payer ien
"RTN","IBCNEDE2",109,0)
 ... . I '$$PYRACTV^IBCNEDE7(PIEN) Q            ; Payer is not nationally active
"RTN","IBCNEDE2",110,0)
 ... . ;
"RTN","IBCNEDE2",111,0)
 ... . ; If error symbol exists, set record in insurance buffer & quit
"RTN","IBCNEDE2",112,0)
 ... . I SYMBOL D  Q
"RTN","IBCNEDE2",113,0)
 ... . . I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,SYMBOL,"",1)
"RTN","IBCNEDE2",114,0)
 ... . ;
"RTN","IBCNEDE2",115,0)
 ... . ; Update service date and freshness date based on payers allowed
"RTN","IBCNEDE2",116,0)
 ... . ;  date range
"RTN","IBCNEDE2",117,0)
 ... . D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE2",118,0)
 ... . ;
"RTN","IBCNEDE2",119,0)
 ... . ; Update service dates for inquiry to be transmitted
"RTN","IBCNEDE2",120,0)
 ... . D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE2",121,0)
 ... . ;
"RTN","IBCNEDE2",122,0)
 ... . ; Quit before filing if outstanding entries in TQ
"RTN","IBCNEDE2",123,0)
 ... . I '$$ADDTQ^IBCNEUT5(DFN,PIEN,SRVICEDT,FRESHDAY) Q
"RTN","IBCNEDE2",124,0)
 ... . ;
"RTN","IBCNEDE2",125,0)
 ... . S QURYFLAG="V"
"RTN","IBCNEDE2",126,0)
 ... . K SIDARRAY
"RTN","IBCNEDE2",127,0)
 ... . S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE2",128,0)
 ... . S SIDACT=$P(SIDDATA,U),SIDCNT=$P(SIDDATA,U,2)
"RTN","IBCNEDE2",129,0)
 ... . I SIDACT=3,'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,INREC,18,"",1) Q
"RTN","IBCNEDE2",130,0)
 ... . I CNT+SIDCNT>MAXCNT S CNT=MAXCNT Q  ;exceeds MAXCNT
"RTN","IBCNEDE2",131,0)
 ... . ;
"RTN","IBCNEDE2",132,0)
 ... . S SID=""
"RTN","IBCNEDE2",133,0)
 ... . F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET($P(SID,"_"),$P(SID,"_",2),PATID) S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE2",134,0)
 ... . I SIDACT=4 D SET("","",PATID) S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE2",135,0)
 ... . Q
"RTN","IBCNEDE2",136,0)
 ... Q
"RTN","IBCNEDE2",137,0)
ENQ K ^TMP($J,"SDAMA301"),^TMP("IBCNEDE2",$J)
"RTN","IBCNEDE2",138,0)
 Q
"RTN","IBCNEDE2",139,0)
 ;
"RTN","IBCNEDE2",140,0)
CLINICEX ; Clinic exclusion
"RTN","IBCNEDE2",141,0)
 S OK=1
"RTN","IBCNEDE2",142,0)
 I $D(^DG(43,1,"DGPREC","B",CLNC)) S OK=0
"RTN","IBCNEDE2",143,0)
 Q
"RTN","IBCNEDE2",144,0)
 ;
"RTN","IBCNEDE2",145,0)
ELG ;  Eligibility exclusion
"RTN","IBCNEDE2",146,0)
 I ELG="" S OK=0 Q
"RTN","IBCNEDE2",147,0)
 I $D(^DG(43,1,"DGPREE","B",ELG)) S OK=0 Q
"RTN","IBCNEDE2",148,0)
 S OK=1
"RTN","IBCNEDE2",149,0)
 Q
"RTN","IBCNEDE2",150,0)
 ;
"RTN","IBCNEDE2",151,0)
INP ;  Inpatient status
"RTN","IBCNEDE2",152,0)
 D INP^VADPT
"RTN","IBCNEDE2",153,0)
 I $G(VAIN(1))'="" K VAIN S OK=0 Q
"RTN","IBCNEDE2",154,0)
 K VAIN
"RTN","IBCNEDE2",155,0)
 S OK=1
"RTN","IBCNEDE2",156,0)
 Q
"RTN","IBCNEDE2",157,0)
 ;
"RTN","IBCNEDE2",158,0)
SET(SID,INR,PATID) ; Set data in TQ
"RTN","IBCNEDE2",159,0)
 ;
"RTN","IBCNEDE2",160,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE2",161,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE2",162,0)
 S DATA1=DFN_U_PIEN_U_1_U_""_U_SID_U_FRESHDT ; SETTQ 1st parameter
"RTN","IBCNEDE2",163,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE2",164,0)
 ;
"RTN","IBCNEDE2",165,0)
 ; The hardcoded '2' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE2",166,0)
 ; the file 365.1 that it is the appointment extract.
"RTN","IBCNEDE2",167,0)
 S DATA2=2_U_QURYFLAG_U_SRVICEDT_U_INR    ; SETTQ 2nd parameter
"RTN","IBCNEDE2",168,0)
 ;
"RTN","IBCNEDE2",169,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)       ; Sets in TQ
"RTN","IBCNEDE2",170,0)
 I TQIEN'="" S CNT=CNT+1                    ; If filed increment count
"RTN","IBCNEDE2",171,0)
 ;
"RTN","IBCNEDE2",172,0)
 Q
"RTN","IBCNEDE2",173,0)
 ;
"RTN","IBCNEDE2",174,0)
ERRMSG ; Send a message indicating an extract error has occured
"RTN","IBCNEDE2",175,0)
 N MGRP,XMSUB,MSG,IBX,IBM
"RTN","IBCNEDE2",176,0)
 ;
"RTN","IBCNEDE2",177,0)
 ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE2",178,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE2",179,0)
 ;
"RTN","IBCNEDE2",180,0)
 S XMSUB="eIV Problem: Appointment Extract"
"RTN","IBCNEDE2",181,0)
 S MSG(1)="On "_$$FMTE^XLFDT(DT)_" the Appointment Extract for eIV encountered one or more"
"RTN","IBCNEDE2",182,0)
 S MSG(2)="errors while attempting to get Appointment data from the scheduling"
"RTN","IBCNEDE2",183,0)
 S MSG(3)="package."
"RTN","IBCNEDE2",184,0)
 S MSG(4)=""
"RTN","IBCNEDE2",185,0)
 S MSG(5)="Error(s) encountered: "
"RTN","IBCNEDE2",186,0)
 S MSG(6)=""
"RTN","IBCNEDE2",187,0)
 S MSG(7)="  Error Code   Error Message"
"RTN","IBCNEDE2",188,0)
 S MSG(8)="  ----------   -------------"
"RTN","IBCNEDE2",189,0)
 S IBM=8,IBX=0 F  S IBX=$O(^TMP($J,"SDAMA301",IBX)) Q:IBX=""  S IBM=IBM+1,MSG(IBM)="  "_$$LJ^XLFSTR(IBX,13)_$G(^TMP($J,"SDAMA301",IBX))
"RTN","IBCNEDE2",190,0)
 S IBM=IBM+1,MSG(IBM)=""
"RTN","IBCNEDE2",191,0)
 S IBM=IBM+1,MSG(IBM)="As a result of this error the extract was not done.  The extract"
"RTN","IBCNEDE2",192,0)
 S IBM=IBM+1,MSG(IBM)="will be attempted again the next night automatically.  If you"
"RTN","IBCNEDE2",193,0)
 S IBM=IBM+1,MSG(IBM)="continue to receive error messages you should contact your IRM"
"RTN","IBCNEDE2",194,0)
 S IBM=IBM+1,MSG(IBM)="and possibly call the Help Desk for assistance."
"RTN","IBCNEDE2",195,0)
 ;
"RTN","IBCNEDE2",196,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDE2",197,0)
 ;
"RTN","IBCNEDE2",198,0)
 Q
"RTN","IBCNEDE2",199,0)
 ;
"RTN","IBCNEDE2",200,0)
EXPIRED(EXPDT) ; check if insurance policy has already expired
"RTN","IBCNEDE2",201,0)
 ; EXPDT - expiration date (2.312/3)
"RTN","IBCNEDE2",202,0)
 ; returns 1 if expiration date is in the past, 0 otherwise
"RTN","IBCNEDE2",203,0)
 N X1,X2
"RTN","IBCNEDE2",204,0)
 S X1=+$G(DT),X2=+$G(EXPDT)
"RTN","IBCNEDE2",205,0)
 I X1,X2 Q $S($$FMDIFF^XLFDT(DT,EXPDT,1)>0:1,1:0)
"RTN","IBCNEDE2",206,0)
 Q 0
"RTN","IBCNEDE3")
0^28^B56996333^B57677467
"RTN","IBCNEDE3",1,0)
IBCNEDE3 ;DAOU/DJW - NONVERINS DATA EXTRACT ;18-JUN-2002
"RTN","IBCNEDE3",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,438**;21-MAR-94;Build 52
"RTN","IBCNEDE3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE3",4,0)
 ;
"RTN","IBCNEDE3",5,0)
 ; IB*2*438 removed the ability to perform non-verified extract.
"RTN","IBCNEDE3",6,0)
 ; However, this code is being left as is for future changes.
"RTN","IBCNEDE3",7,0)
 ;
"RTN","IBCNEDE3",8,0)
 ;**Program Description**
"RTN","IBCNEDE3",9,0)
 ;  This program finds veterans who have been seen within a
"RTN","IBCNEDE3",10,0)
 ;  specified date range that have active insurance records which has
"RTN","IBCNEDE3",11,0)
 ;  not been verified recently.
"RTN","IBCNEDE3",12,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDE3",13,0)
 ;
"RTN","IBCNEDE3",14,0)
 Q   ; program can not be called directly
"RTN","IBCNEDE3",15,0)
 ;
"RTN","IBCNEDE3",16,0)
EN ; Loop through designated cross-references for updates 
"RTN","IBCNEDE3",17,0)
 ; (Non verified insurance)
"RTN","IBCNEDE3",18,0)
 ;
"RTN","IBCNEDE3",19,0)
 ; Initialize 
"RTN","IBCNEDE3",20,0)
 NEW DIC,DA,X,Y,DLAYGO,DINUM,DTOUT,DFN,FRESHDT,IBD,IBPM,IBPMD
"RTN","IBCNEDE3",21,0)
 NEW IEN,MAXCNT,IBCNECNT,EACTIVE,XDAYS,YDAYS,TDT,VI,IBBDT,IBEDT
"RTN","IBCNEDE3",22,0)
 NEW VINCON,VNOK,SRVICEDT,RESULT,PAYER,PAYERID,ARRAY,ERROR,SUPPBUFF
"RTN","IBCNEDE3",23,0)
 NEW TRANSNO,IBQUERY,PTN,INSNAME,IBCNETOT,SID,SIDACT,SIDDATA
"RTN","IBCNEDE3",24,0)
 NEW SIDARRAY,SIDCNT,DISYS,DGPMDT,AUPNDT,II,PATID
"RTN","IBCNEDE3",25,0)
 ;
"RTN","IBCNEDE3",26,0)
 S IEN="",IBCNECNT=0
"RTN","IBCNEDE3",27,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE3",28,0)
 S IBCNETOT=0
"RTN","IBCNEDE3",29,0)
 ;
"RTN","IBCNEDE3",30,0)
 ; Get site parameter settings for non-verified ins. extract
"RTN","IBCNEDE3",31,0)
 S EACTIVE=$$SETTINGS^IBCNEDE7(3)
"RTN","IBCNEDE3",32,0)
 I 'EACTIVE G EXIT                   ; Quit if extract not active
"RTN","IBCNEDE3",33,0)
 S XDAYS=$P(EACTIVE,U,2)
"RTN","IBCNEDE3",34,0)
 S YDAYS=$P(EACTIVE,U,3)
"RTN","IBCNEDE3",35,0)
 S MAXCNT=$P(EACTIVE,U,4)
"RTN","IBCNEDE3",36,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE3",37,0)
 S SUPPBUFF=$P(EACTIVE,U,5)
"RTN","IBCNEDE3",38,0)
 ;
"RTN","IBCNEDE3",39,0)
 ;  Check for Date Last Treated and get DFN's
"RTN","IBCNEDE3",40,0)
 S IBBDT=$$FMADD^XLFDT(DT,-XDAYS),IBEDT=DT
"RTN","IBCNEDE3",41,0)
 ;
"RTN","IBCNEDE3",42,0)
 ;  * main control
"RTN","IBCNEDE3",43,0)
 ;
"RTN","IBCNEDE3",44,0)
 S IBD=IBBDT-.0001
"RTN","IBCNEDE3",45,0)
 K ^TMP("IBCNEDE3",$J,"PTS")
"RTN","IBCNEDE3",46,0)
 F II=1:1 D  Q:(IBD="")!(IBD\1>IBEDT)!(IBCNECNT'<MAXCNT)!($G(ZTSTOP))
"RTN","IBCNEDE3",47,0)
 . S DGPMDT=$O(^DGPM("ATT3",IBD)),AUPNDT=$O(^AUPNVSIT("B",IBD))
"RTN","IBCNEDE3",48,0)
 . I (AUPNDT="")!((DGPMDT\1)<(AUPNDT\1)) S IBD=DGPMDT
"RTN","IBCNEDE3",49,0)
 . I (DGPMDT="")!((DGPMDT\1)>(AUPNDT\1)) S IBD=AUPNDT
"RTN","IBCNEDE3",50,0)
 . I (IBD\1>IBEDT)!(IBD="") Q
"RTN","IBCNEDE3",51,0)
 . ;
"RTN","IBCNEDE3",52,0)
 . K ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",53,0)
 . D INP(IBD)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",54,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE3",55,0)
 . D OUTP(IBD)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",56,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE3",57,0)
 . ;D REST(IBBDT-.0001,IBEDT)    ; sets up ^TMP("IBJDI51",$J)
"RTN","IBCNEDE3",58,0)
 . D PROCESS
"RTN","IBCNEDE3",59,0)
 . I $G(ZTSTOP) Q
"RTN","IBCNEDE3",60,0)
 . S IBD=($$FMADD^XLFDT(IBD,+1))-.0001
"RTN","IBCNEDE3",61,0)
 ;
"RTN","IBCNEDE3",62,0)
EXIT ;
"RTN","IBCNEDE3",63,0)
 K VINS,^TMP("IBJDI51",$J),^TMP("IBCNEDE3",$J,"PTS")   ; clean up
"RTN","IBCNEDE3",64,0)
 ;
"RTN","IBCNEDE3",65,0)
 Q
"RTN","IBCNEDE3",66,0)
 ; * end of routine processing
"RTN","IBCNEDE3",67,0)
 ;===========================================
"RTN","IBCNEDE3",68,0)
INP(DATE) ;  Find inpatients for that date (we want most recent encounter)
"RTN","IBCNEDE3",69,0)
 NEW IBD,IBPM,IBPMD,DFN
"RTN","IBCNEDE3",70,0)
 S IBD=DATE-.0001
"RTN","IBCNEDE3",71,0)
 F  S IBD=$O(^DGPM("ATT3",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",72,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("ATT3",IBD,IBPM)) Q:IBPM=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",73,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE3",74,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE3",75,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE3",76,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE3",77,0)
 .. ;
"RTN","IBCNEDE3",78,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE3",79,0)
 .. S DFN=+$P(IBPMD,U,3) Q:'DFN
"RTN","IBCNEDE3",80,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE3",81,0)
 .. Q:$D(^TMP("IBCNEDE3",$J,"PTS",DFN,"INP"))      ; already processed 
"RTN","IBCNEDE3",82,0)
 .. S ^TMP("IBCNEDE3",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE3",83,0)
 .. D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE3",84,0)
 Q
"RTN","IBCNEDE3",85,0)
 ;
"RTN","IBCNEDE3",86,0)
OUTP(DATE) ; Find outpatients treated for this date (most recent encounter)
"RTN","IBCNEDE3",87,0)
 NEW IBD,IEN,DFN
"RTN","IBCNEDE3",88,0)
 S IBD=DATE-.0001
"RTN","IBCNEDE3",89,0)
 F  S IBD=$O(^AUPNVSIT("B",IBD)) Q:(IBD="")!(IBD\1>DATE)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",90,0)
 . S IEN=""
"RTN","IBCNEDE3",91,0)
 . F  S IEN=$O(^AUPNVSIT("B",IBD,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE3",92,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE3",93,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE3",94,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE3",95,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE3",96,0)
 .. ;
"RTN","IBCNEDE3",97,0)
 .. S DFN=$P($G(^AUPNVSIT(IEN,0)),U,5)
"RTN","IBCNEDE3",98,0)
 .. Q:DFN=""
"RTN","IBCNEDE3",99,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q         ; Exclude if test patient
"RTN","IBCNEDE3",100,0)
 .. Q:$D(^TMP("IBCNEDE3",$J,"PTS",DFN,"OUTP"))    ; already processed
"RTN","IBCNEDE3",101,0)
 .. S ^TMP("IBCNEDE3",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE3",102,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE3",103,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE3",104,0)
 Q
"RTN","IBCNEDE3",105,0)
 ;
"RTN","IBCNEDE3",106,0)
REST(STARTDT,ENDDT) ; Check to see if there was a more recent inpatient
"RTN","IBCNEDE3",107,0)
 ; or outpatient encounter for this patient.
"RTN","IBCNEDE3",108,0)
 ;
"RTN","IBCNEDE3",109,0)
 NEW IBPM,IBPMD,IBD,DFN
"RTN","IBCNEDE3",110,0)
 S DFN=0
"RTN","IBCNEDE3",111,0)
 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:DFN=""  D
"RTN","IBCNEDE3",112,0)
 . ;
"RTN","IBCNEDE3",113,0)
 . ; inpatients
"RTN","IBCNEDE3",114,0)
 . S IBPM=0 F  S IBPM=$O(^DGPM("C",DFN,IBPM)) Q:IBPM=""  D
"RTN","IBCNEDE3",115,0)
 .. S IBPMD=$G(^DGPM(IBPM,0)) Q:'IBPMD
"RTN","IBCNEDE3",116,0)
 .. S IBD=$P(IBPMD,U,1) I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE3",117,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD))  ;already checked
"RTN","IBCNEDE3",118,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"INP",IBD)=""
"RTN","IBCNEDE3",119,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE3",120,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"*",IBD)
"RTN","IBCNEDE3",121,0)
 . ;
"RTN","IBCNEDE3",122,0)
 . ; outpatients
"RTN","IBCNEDE3",123,0)
 . S IBD="" F  S IBD=$O(^AUPNVSIT("AA",DFN,IBD)) Q:IBD=""  D
"RTN","IBCNEDE3",124,0)
 .. I ((IBD\1)<STARTDT)!((IBD\1)>ENDDT) Q
"RTN","IBCNEDE3",125,0)
 .. Q:$D(^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD))  ;already checked
"RTN","IBCNEDE3",126,0)
 .. S ^TMP("IBJDI51",$J,"PTS",DFN,"OUTP",IBD)=""
"RTN","IBCNEDE3",127,0)
 .. ; Capture the most recent (last) encounter date
"RTN","IBCNEDE3",128,0)
 .. I $G(^TMP("IBJDI51",$J,DFN))<(IBD\1) D PROC^IBJDI5(DFN,"",IBD)
"RTN","IBCNEDE3",129,0)
 ;
"RTN","IBCNEDE3",130,0)
 K ^TMP("IBCNEDE3",$J,"PTS")  ; clean up - no longer needed
"RTN","IBCNEDE3",131,0)
 Q
"RTN","IBCNEDE3",132,0)
 ;
"RTN","IBCNEDE3",133,0)
PROCESS ;  Get insurance for each patient
"RTN","IBCNEDE3",134,0)
 N MCAREFLG
"RTN","IBCNEDE3",135,0)
 S DFN=0 F  S DFN=$O(^TMP("IBJDI51",$J,DFN)) Q:'DFN  D  Q:IBCNECNT'<MAXCNT!$G(ZTSTOP)
"RTN","IBCNEDE3",136,0)
 . S MCAREFLG=0
"RTN","IBCNEDE3",137,0)
 . ; Update count for periodic check
"RTN","IBCNEDE3",138,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE3",139,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDE3",140,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE3",141,0)
 . ;
"RTN","IBCNEDE3",142,0)
 . S SRVICEDT=$P(^TMP("IBJDI51",$J,DFN),U)
"RTN","IBCNEDE3",143,0)
 . S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-YDAYS)
"RTN","IBCNEDE3",144,0)
 . K VINS
"RTN","IBCNEDE3",145,0)
 . D ALL^IBCNS1(DFN,"VINS",3)
"RTN","IBCNEDE3",146,0)
 . ;
"RTN","IBCNEDE3",147,0)
 . I $G(VINS(0))="" Q  ; no active insurance
"RTN","IBCNEDE3",148,0)
 . ;
"RTN","IBCNEDE3",149,0)
 . S VI=0 F  S VI=$O(VINS(VI)) Q:VI=""!(IBCNECNT'<MAXCNT)  D
"RTN","IBCNEDE3",150,0)
 .. S VINCON=$P(VINS(VI,0),U)
"RTN","IBCNEDE3",151,0)
 .. ;
"RTN","IBCNEDE3",152,0)
 .. S INSNAME=$P($G(^DIC(36,VINCON,0)),U)
"RTN","IBCNEDE3",153,0)
 .. ; allow only one MEDICARE transmission per patient
"RTN","IBCNEDE3",154,0)
 .. I INSNAME["MEDICARE",MCAREFLG Q
"RTN","IBCNEDE3",155,0)
 .. ;Check for ins. companies to exclude (i.e. Medicaid)
"RTN","IBCNEDE3",156,0)
 .. I $$EXCLUDE^IBCNEUT4(INSNAME) Q
"RTN","IBCNEDE3",157,0)
 .. ;
"RTN","IBCNEDE3",158,0)
 .. ;Check for Ins. Company/Payer problems
"RTN","IBCNEDE3",159,0)
 .. S RESULT=$$INSERROR^IBCNEUT3("I",VINCON)
"RTN","IBCNEDE3",160,0)
 .. ;
"RTN","IBCNEDE3",161,0)
 .. I $P(RESULT,U)'="" D BUFF Q    ; error encountered
"RTN","IBCNEDE3",162,0)
 .. ;
"RTN","IBCNEDE3",163,0)
 .. S PAYER=$P(RESULT,U,2),PAYERID=$P(RESULT,U,3) ; Payer IEN & Payer ID
"RTN","IBCNEDE3",164,0)
 .. I 'PAYER!(PAYERID="") Q
"RTN","IBCNEDE3",165,0)
 .. I '$$PYRACTV^IBCNEDE7(PAYER) Q        ; Payer is not nationally active
"RTN","IBCNEDE3",166,0)
 .. ;
"RTN","IBCNEDE3",167,0)
 .. ; set patient id field   IB*2*416
"RTN","IBCNEDE3",168,0)
 .. S PATID=$P($G(VINS(VI,5)),U,1)    ; 5.01 field in pt. ins.
"RTN","IBCNEDE3",169,0)
 .. ;
"RTN","IBCNEDE3",170,0)
 .. ; Update service date and freshness date based on payer allowed
"RTN","IBCNEDE3",171,0)
 .. ;  date range
"RTN","IBCNEDE3",172,0)
 .. D UPDDTS^IBCNEDE6(PAYER,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE3",173,0)
 .. ;
"RTN","IBCNEDE3",174,0)
 .. ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE3",175,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PAYER,SRVICEDT)
"RTN","IBCNEDE3",176,0)
 .. K SIDARRAY
"RTN","IBCNEDE3",177,0)
 .. S SIDDATA=$$SIDCHK^IBCNEDE5(PAYER,DFN,,.SIDARRAY,FRESHDT)
"RTN","IBCNEDE3",178,0)
 .. S SIDACT=$P(SIDDATA,U),SIDCNT=$P(SIDDATA,U,2)
"RTN","IBCNEDE3",179,0)
 .. ;
"RTN","IBCNEDE3",180,0)
 .. I SIDACT=3 D  Q
"RTN","IBCNEDE3",181,0)
 ... I 'SUPPBUFF,'$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,VI,18,"",1)
"RTN","IBCNEDE3",182,0)
 .. ;
"RTN","IBCNEDE3",183,0)
 .. I IBCNECNT+SIDCNT>MAXCNT S IBCNECNT=MAXCNT Q  ;quit if TQ entries>MAXCNT
"RTN","IBCNEDE3",184,0)
 .. S SID=""
"RTN","IBCNEDE3",185,0)
 .. F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET($P(SID,"_"),$P(SID,"_",2),PATID) S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE3",186,0)
 .. I SIDACT=4 D SET("","",PATID) S:INSNAME["MEDICARE" MCAREFLG=1
"RTN","IBCNEDE3",187,0)
 Q
"RTN","IBCNEDE3",188,0)
 ;
"RTN","IBCNEDE3",189,0)
SET(SID,INR,PATID) ; Call function to set IIV TRANSMISSION QUEUE file #365.1
"RTN","IBCNEDE3",190,0)
 NEW DATA1,DATA2,TQIEN
"RTN","IBCNEDE3",191,0)
 ;
"RTN","IBCNEDE3",192,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE3",193,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE3",194,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_SID_U_FRESHDT
"RTN","IBCNEDE3",195,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE3",196,0)
 ;
"RTN","IBCNEDE3",197,0)
 ; The hardcoded '3' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE3",198,0)
 ; the file 365.1 that it is the non-verified extract.
"RTN","IBCNEDE3",199,0)
 S DATA2=3_U_"V"_U_SRVICEDT_U_INR
"RTN","IBCNEDE3",200,0)
 ;
"RTN","IBCNEDE3",201,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2)
"RTN","IBCNEDE3",202,0)
 I TQIEN'="" S IBCNECNT=IBCNECNT+1
"RTN","IBCNEDE3",203,0)
 ;
"RTN","IBCNEDE3",204,0)
 Q
"RTN","IBCNEDE3",205,0)
BUFF ; Create new buffer entry, if one doesn't already exist, with a 
"RTN","IBCNEDE3",206,0)
 ; bang symbol
"RTN","IBCNEDE3",207,0)
 I SUPPBUFF Q   ; determine if we suppress buffer entries
"RTN","IBCNEDE3",208,0)
 I '$$BFEXIST^IBCNEUT5(DFN,INSNAME) D PT^IBCNEBF(DFN,VI,$P(RESULT,U),"",1)
"RTN","IBCNEDE3",209,0)
 Q
"RTN","IBCNEDE3",210,0)
 ;
"RTN","IBCNEDE7")
0^17^B24645310^B24335491
"RTN","IBCNEDE7",1,0)
IBCNEDE7 ;DAOU/DAC - eIV DATA EXTRACTS ;04-JUN-2002
"RTN","IBCNEDE7",2,0)
 ;;2.0;INTEGRATED BILLING;**271,416,438**;21-MAR-94;Build 52
"RTN","IBCNEDE7",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE7",4,0)
 ;
"RTN","IBCNEDE7",5,0)
 Q    ; no direct calls allowed
"RTN","IBCNEDE7",6,0)
 ; 
"RTN","IBCNEDE7",7,0)
SETTINGS(EXTNUM) ; Check site parameter settings for the extracts
"RTN","IBCNEDE7",8,0)
 ; Input Parameter:
"RTN","IBCNEDE7",9,0)
 ;
"RTN","IBCNEDE7",10,0)
 ; EXTNUM is either 1, 2, 3 to represent the different extracts
"RTN","IBCNEDE7",11,0)
 ; 1 - Insurance Buffer extract
"RTN","IBCNEDE7",12,0)
 ; 2 - Pre-Reg (appointments)
"RTN","IBCNEDE7",13,0)
 ; 3 - Non Verified
"RTN","IBCNEDE7",14,0)
 ;        IB*2*416 removed extract#4 for No Insurance
"RTN","IBCNEDE7",15,0)
 ;
"RTN","IBCNEDE7",16,0)
 ; Output:
"RTN","IBCNEDE7",17,0)
 ; Returns a "^" delimited string passing back:
"RTN","IBCNEDE7",18,0)
 ;    A flag of whether to consider the extract active
"RTN","IBCNEDE7",19,0)
 ;    Number of days to look back in the past when extracting data
"RTN","IBCNEDE7",20,0)
 ;    STALEDYS - "stale days": number of days from today to determine the
"RTN","IBCNEDE7",21,0)
 ;          freshness this is only used for the non-verified and no 
"RTN","IBCNEDE7",22,0)
 ;          insurance extract.  The other two extracts pull their days
"RTN","IBCNEDE7",23,0)
 ;          from the IB SITE PARAMETER file within their specific 
"RTN","IBCNEDE7",24,0)
 ;          extract routine.
"RTN","IBCNEDE7",25,0)
 ;    Max Number of entries you are allowed to set into the eIV 
"RTN","IBCNEDE7",26,0)
 ;          Transmission Queue file.  If null, # of entries allowed is
"RTN","IBCNEDE7",27,0)
 ;          unlimited.
"RTN","IBCNEDE7",28,0)
 ;    Suppress Buffer Flag - Either '0' (No) or '1' (Yes)
"RTN","IBCNEDE7",29,0)
 ;          1 will suppress the creation of buffer entries
"RTN","IBCNEDE7",30,0)
 ;          0 will not
"RTN","IBCNEDE7",31,0)
 ;          Applies to extracts 2 (Pre Reg) and 3 (Non verified)
"RTN","IBCNEDE7",32,0)
 ;
"RTN","IBCNEDE7",33,0)
 N DIC,DISYS,DA,X,Y,EACTIVE,XDAYS,STALEDYS,MAXCNT,OK,SUPPBUFF
"RTN","IBCNEDE7",34,0)
 S EACTIVE=0,(XDAYS,STALEDYS,MAXCNT)=""
"RTN","IBCNEDE7",35,0)
 S OK=$S(EXTNUM=1:1,EXTNUM=2:1,EXTNUM=3:1,1:0)
"RTN","IBCNEDE7",36,0)
 I 'OK G EXIT
"RTN","IBCNEDE7",37,0)
 S DA=1,DIC="^IBE(350.9,"_DA_",51.17,",DIC(0)="X",X=EXTNUM D ^DIC
"RTN","IBCNEDE7",38,0)
 ;
"RTN","IBCNEDE7",39,0)
 I Y<1 G EXIT  ; extract not defined in the IB Site Parameter
"RTN","IBCNEDE7",40,0)
 ;
"RTN","IBCNEDE7",41,0)
 S EACTIVE=$G(^IBE(350.9,1,51.17,+Y,0))
"RTN","IBCNEDE7",42,0)
 S XDAYS=$P(EACTIVE,U,3)
"RTN","IBCNEDE7",43,0)
 S STALEDYS=$P(EACTIVE,U,4)
"RTN","IBCNEDE7",44,0)
 S MAXCNT=$P(EACTIVE,U,5)
"RTN","IBCNEDE7",45,0)
 S SUPPBUFF=$P(EACTIVE,U,6)
"RTN","IBCNEDE7",46,0)
 I SUPPBUFF="" S SUPPBUFF=0
"RTN","IBCNEDE7",47,0)
 S EACTIVE=$P(EACTIVE,U,2)
"RTN","IBCNEDE7",48,0)
EXIT ;
"RTN","IBCNEDE7",49,0)
 I EXTNUM=2,(XDAYS="") S EACTIVE=0  ; missing required data
"RTN","IBCNEDE7",50,0)
 I EXTNUM=3 D
"RTN","IBCNEDE7",51,0)
 . I XDAYS=""!(STALEDYS="") S EACTIVE=0   ; missing required data
"RTN","IBCNEDE7",52,0)
 Q EACTIVE_U_XDAYS_U_STALEDYS_U_MAXCNT_U_SUPPBUFF
"RTN","IBCNEDE7",53,0)
 ;
"RTN","IBCNEDE7",54,0)
SETTQ(DATA1,DATA2,ORIG,OVERRIDE) ;Set extract data in TQ file 365.1
"RTN","IBCNEDE7",55,0)
 ;
"RTN","IBCNEDE7",56,0)
 ; DATA1, DATA2, & ORIG are "^" delimited variables containing the data
"RTN","IBCNEDE7",57,0)
 ; listed below
"RTN","IBCNEDE7",58,0)
 ;
"RTN","IBCNEDE7",59,0)
 ; OVERRIDE - flag indicates that this entry is a result of the 
"RTN","IBCNEDE7",60,0)
 ;         'Request Re-Verification' menu option.
"RTN","IBCNEDE7",61,0)
 ;
"RTN","IBCNEDE7",62,0)
 N FDA,IENARRAY,ERROR,TRANSNO,DFN
"RTN","IBCNEDE7",63,0)
 ; do not allow "NO PAYER" entries
"RTN","IBCNEDE7",64,0)
 I $P(DATA1,U,2)=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDE7",65,0)
 ;
"RTN","IBCNEDE7",66,0)
 S TRANSNO=$P($G(^IBCN(365.1,0)),U,3)+1
"RTN","IBCNEDE7",67,0)
 S FDA(365.1,"+1,",.01)=TRANSNO             ; Transaction #
"RTN","IBCNEDE7",68,0)
 ;
"RTN","IBCNEDE7",69,0)
 S DFN=$P(DATA1,U)
"RTN","IBCNEDE7",70,0)
 S FDA(365.1,"+1,",.02)=DFN                 ; patient DFN
"RTN","IBCNEDE7",71,0)
 S FDA(365.1,"+1,",.03)=$P(DATA1,U,2)       ; ien of payer
"RTN","IBCNEDE7",72,0)
 S FDA(365.1,"+1,",.04)=$P(DATA1,U,3)       ; ien of transmission status
"RTN","IBCNEDE7",73,0)
 S FDA(365.1,"+1,",.15)=DT                  ; trans status date
"RTN","IBCNEDE7",74,0)
 S FDA(365.1,"+1,",.05)=$P(DATA1,U,4)       ; ien of buffer
"RTN","IBCNEDE7",75,0)
 ;
"RTN","IBCNEDE7",76,0)
 S FDA(365.1,"+1,",.06)=$$NOW^XLFDT         ; creation date/time
"RTN","IBCNEDE7",77,0)
 S FDA(365.1,"+1,",.07)=0                   ; transmission retries
"RTN","IBCNEDE7",78,0)
 S FDA(365.1,"+1,",.08)=0                   ; number of retries
"RTN","IBCNEDE7",79,0)
 I $D(OVERRIDE) S FDA(365.1,"+1,",.14)=OVERRIDE  ; override flag
"RTN","IBCNEDE7",80,0)
 S FDA(365.1,"+1,",.16)=$P(DATA1,U,5)        ; Sub. ID
"RTN","IBCNEDE7",81,0)
 S FDA(365.1,"+1,",.17)=$P(DATA1,U,6)        ; Freshness Date
"RTN","IBCNEDE7",82,0)
 S FDA(365.1,"+1,",.18)=$P(DATA1,U,7)        ; Pass Buffer ien?
"RTN","IBCNEDE7",83,0)
 S FDA(365.1,"+1,",.19)=$P(DATA1,U,8)        ; Patient ID
"RTN","IBCNEDE7",84,0)
 ;
"RTN","IBCNEDE7",85,0)
 I $D(DATA2) D
"RTN","IBCNEDE7",86,0)
 . S FDA(365.1,"+1,",.1)=$P(DATA2,U)          ; which extract (ien)
"RTN","IBCNEDE7",87,0)
 . S FDA(365.1,"+1,",.11)=$P(DATA2,U,2)       ; query flag
"RTN","IBCNEDE7",88,0)
 . S FDA(365.1,"+1,",.12)=$P(DATA2,U,3)       ; service date
"RTN","IBCNEDE7",89,0)
 . S FDA(365.1,"+1,",.13)=$P(DATA2,U,4)       ; patient insur. ien
"RTN","IBCNEDE7",90,0)
 ;
"RTN","IBCNEDE7",91,0)
 I $D(ORIG) D
"RTN","IBCNEDE7",92,0)
 . S FDA(365.1,"+1,",1.02)=$P(ORIG,U)   ; original ins co (in buffer)
"RTN","IBCNEDE7",93,0)
 . S FDA(365.1,"+1,",1.03)=$P(ORIG,U,2)   ; original grp # (in buffer)
"RTN","IBCNEDE7",94,0)
 . S FDA(365.1,"+1,",1.04)=$P(ORIG,U,3)   ; original grp name (in buffer)
"RTN","IBCNEDE7",95,0)
 . S FDA(365.1,"+1,",1.05)=$P(ORIG,U,4)   ; original subscriber ID
"RTN","IBCNEDE7",96,0)
 ;
"RTN","IBCNEDE7",97,0)
 D UPDATE^DIE("","FDA","IENARRAY","ERROR")
"RTN","IBCNEDE7",98,0)
 ;
"RTN","IBCNEDE7",99,0)
 I $G(ERROR("DIERR",1,"TEXT",1))'="" D  ; MailMan msg
"RTN","IBCNEDE7",100,0)
 . N MGRP,XMSUB,MSG
"RTN","IBCNEDE7",101,0)
 . ;
"RTN","IBCNEDE7",102,0)
 . ; Set to IB site parameter MAILGROUP
"RTN","IBCNEDE7",103,0)
 . S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDE7",104,0)
 . ;
"RTN","IBCNEDE7",105,0)
 . S XMSUB="eIV Problem: Trouble setting entry in File 365.1"
"RTN","IBCNEDE7",106,0)
 . S MSG(1)="Tried to create an entry in the eIV Transmission Queue File #365.1 without"
"RTN","IBCNEDE7",107,0)
 . S MSG(2)="success."
"RTN","IBCNEDE7",108,0)
 . S MSG(3)=""
"RTN","IBCNEDE7",109,0)
 . S MSG(4)="Error encountered: "_$G(ERROR("DIERR",1,"TEXT",1))
"RTN","IBCNEDE7",110,0)
 . S MSG(5)=""
"RTN","IBCNEDE7",111,0)
 . S MSG(6)="The data that was to be stored is as follows:"
"RTN","IBCNEDE7",112,0)
 . S MSG(7)=""
"RTN","IBCNEDE7",113,0)
 . S MSG(8)="Transaction #: "_TRANSNO
"RTN","IBCNEDE7",114,0)
 . S MSG(9)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN^IBCNEDEQ(DFN)
"RTN","IBCNEDE7",115,0)
 . S MSG(10)="Extract: "_$P($G(DATA2),U,1)
"RTN","IBCNEDE7",116,0)
 . S MSG(11)="Payer: "
"RTN","IBCNEDE7",117,0)
 . S:$P(DATA1,U,2)'="" MSG(11)=MSG(11)_$P($G(^IBE(365.12,$P(DATA1,U,2),0)),U,1)
"RTN","IBCNEDE7",118,0)
 . S MSG(12)="Please call the Help Desk about this problem."
"RTN","IBCNEDE7",119,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDE7",120,0)
 ;
"RTN","IBCNEDE7",121,0)
 Q $G(IENARRAY(1))
"RTN","IBCNEDE7",122,0)
 ;
"RTN","IBCNEDE7",123,0)
PYRACTV(PIEN) ; check if given payer is nationally active for eIV
"RTN","IBCNEDE7",124,0)
 ; returns 1 if payer is nationally active, 0 otherwise
"RTN","IBCNEDE7",125,0)
 N APPIEN,RES
"RTN","IBCNEDE7",126,0)
 S RES=0
"RTN","IBCNEDE7",127,0)
 I +$G(PIEN)'>0 G PYRACTVX
"RTN","IBCNEDE7",128,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEDE7",129,0)
 I +$G(APPIEN)'>0 G PYRACTVX
"RTN","IBCNEDE7",130,0)
 I $P($G(^IBE(365.12,PIEN,1,APPIEN,0)),U,2)=1 S RES=1
"RTN","IBCNEDE7",131,0)
PYRACTVX ;
"RTN","IBCNEDE7",132,0)
 Q RES
"RTN","IBCNEDEP")
0^7^B86075479^B83667847
"RTN","IBCNEDEP",1,0)
IBCNEDEP ;DAOU/ALA - Process Transaction Records ;17-JUN-2002
"RTN","IBCNEDEP",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416,438**;21-MAR-94;Build 52
"RTN","IBCNEDEP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDEP",4,0)
 ;
"RTN","IBCNEDEP",5,0)
 ;  This program finds records needing HL7 msg creation
"RTN","IBCNEDEP",6,0)
 ;  Periodically check for stop request for background task
"RTN","IBCNEDEP",7,0)
 ;
"RTN","IBCNEDEP",8,0)
 ;  Variables
"RTN","IBCNEDEP",9,0)
 ;    RETR = # retries allowed
"RTN","IBCNEDEP",10,0)
 ;    MGRP = Msg Mailgroup
"RTN","IBCNEDEP",11,0)
 ;    FAIL = # of days before failure
"RTN","IBCNEDEP",12,0)
 ;    FMSG = Failure Mailman flag
"RTN","IBCNEDEP",13,0)
 ;    TMSG = Timeout Mailman flag
"RTN","IBCNEDEP",14,0)
 ;    FLDT = Failure date
"RTN","IBCNEDEP",15,0)
 ;    FUTDT = Future transmission date
"RTN","IBCNEDEP",16,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEP",17,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEP",18,0)
 ;    DTCRT = Date Created
"RTN","IBCNEDEP",19,0)
 ;    BUFF = Buffer File IEN
"RTN","IBCNEDEP",20,0)
 ;    NRETR = # of retries accomplished
"RTN","IBCNEDEP",21,0)
 ;    IHCNT = Count of successful HL7 msgs
"RTN","IBCNEDEP",22,0)
 ;    QUERY = Type of msg
"RTN","IBCNEDEP",23,0)
 ;    EXT =  Which extract produced record
"RTN","IBCNEDEP",24,0)
 ;    SRVDT = Service Date
"RTN","IBCNEDEP",25,0)
 ;    IRIEN = Insurance Record IEN
"RTN","IBCNEDEP",26,0)
 ;    NTRAN = # of transmissions accomplished
"RTN","IBCNEDEP",27,0)
 ;    OVRIDE = Override Flag
"RTN","IBCNEDEP",28,0)
 ;    BNDL = Bundle Verification Flag
"RTN","IBCNEDEP",29,0)
 ;
"RTN","IBCNEDEP",30,0)
EN ;  Entry point
"RTN","IBCNEDEP",31,0)
 ;
"RTN","IBCNEDEP",32,0)
 ;  Start processing of data
"RTN","IBCNEDEP",33,0)
 K ^TMP("HLS",$J),^TMP("IBQUERY",$J)
"RTN","IBCNEDEP",34,0)
 ; Initialize count for periodic TaskMan check
"RTN","IBCNEDEP",35,0)
 S IBCNETOT=0
"RTN","IBCNEDEP",36,0)
 ;
"RTN","IBCNEDEP",37,0)
 ;  Get IB Site Parameters
"RTN","IBCNEDEP",38,0)
 S IBCNEP=$G(^IBE(350.9,1,51))
"RTN","IBCNEDEP",39,0)
 S RETR=+$P(IBCNEP,U,6),BNDL=$P(IBCNEP,U,23)
"RTN","IBCNEDEP",40,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEDEP",41,0)
 S FAIL=$P(IBCNEP,U,5),TMSG=$P(IBCNEP,U,7),FMSG=$P(IBCNEP,U,20)
"RTN","IBCNEDEP",42,0)
 S FLDT=$$FMADD^XLFDT(DT,-FAIL)
"RTN","IBCNEDEP",43,0)
 ; Statuses
"RTN","IBCNEDEP",44,0)
 ;   1 = Ready To Transmit
"RTN","IBCNEDEP",45,0)
 ;   2 = Transmitted
"RTN","IBCNEDEP",46,0)
 ;   4 = Hold
"RTN","IBCNEDEP",47,0)
 ;   6 = Retry
"RTN","IBCNEDEP",48,0)
 ;
"RTN","IBCNEDEP",49,0)
HLD ;  Go through the 'Hold' statuses, see if ready to be 'retried'
"RTN","IBCNEDEP",50,0)
 S IEN=""
"RTN","IBCNEDEP",51,0)
 F  S IEN=$O(^IBCN(365.1,"AC",4,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",52,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",53,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",54,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",55,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",56,0)
 . ;
"RTN","IBCNEDEP",57,0)
 . S FUTDT=$P($G(^IBCN(365.1,IEN,0)),U,9)
"RTN","IBCNEDEP",58,0)
 . ;
"RTN","IBCNEDEP",59,0)
 . ;  If the future date is today, set status to 'Retry',
"RTN","IBCNEDEP",60,0)
 . ;  DON'T clear future transmission date. (Need date to see if this is the first
"RTN","IBCNEDEP",61,0)
 . ;  time that the payer asked us to resubmit this inquiry.)
"RTN","IBCNEDEP",62,0)
 . I FUTDT'>DT D SST^IBCNEUT2(IEN,6) ;D
"RTN","IBCNEDEP",63,0)
 . ;. NEW DA,DIE,DR
"RTN","IBCNEDEP",64,0)
 . ;. S DA=IEN,DIE="^IBCN(365.1,",DR=".09///@" D ^DIE
"RTN","IBCNEDEP",65,0)
 ;
"RTN","IBCNEDEP",66,0)
 ; Exit based on stop request
"RTN","IBCNEDEP",67,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",68,0)
 ;
"RTN","IBCNEDEP",69,0)
TMT ;  If the status is 'Transmitted' - is this a 'Retry' or
"RTN","IBCNEDEP",70,0)
 ;  'Comm Failure'
"RTN","IBCNEDEP",71,0)
 S IEN=""
"RTN","IBCNEDEP",72,0)
 F  S IEN=$O(^IBCN(365.1,"AC",2,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",73,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",74,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",75,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",76,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",77,0)
 . ;
"RTN","IBCNEDEP",78,0)
 . NEW TDATA,DTCRT,BUFF,DFN,PAYR,XMSUB,VERID
"RTN","IBCNEDEP",79,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",80,0)
 . S DFN=$P(TDATA,U,2),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",81,0)
 . S DTCRT=$P(TDATA,U,6)\1,BUFF=$P(TDATA,U,5)
"RTN","IBCNEDEP",82,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",83,0)
 . ;
"RTN","IBCNEDEP",84,0)
 . ;  Check against the Failure Date
"RTN","IBCNEDEP",85,0)
 . I DTCRT>FLDT Q
"RTN","IBCNEDEP",86,0)
 . ;
"RTN","IBCNEDEP",87,0)
 . ;  If retries are defined
"RTN","IBCNEDEP",88,0)
 . I RETR>0 D  Q
"RTN","IBCNEDEP",89,0)
 .. ;
"RTN","IBCNEDEP",90,0)
 .. ;  Send timeout mail msg
"RTN","IBCNEDEP",91,0)
 .. I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D TMRR^IBCNEDEQ
"RTN","IBCNEDEP",92,0)
 .. D SST^IBCNEUT2(IEN,6)
"RTN","IBCNEDEP",93,0)
 . ;
"RTN","IBCNEDEP",94,0)
 . ; If no retries defined, set to fail
"RTN","IBCNEDEP",95,0)
 . D SST^IBCNEUT2(IEN,5)
"RTN","IBCNEDEP",96,0)
 . ;
"RTN","IBCNEDEP",97,0)
 . ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",98,0)
 . ; 'Comm Failure'
"RTN","IBCNEDEP",99,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",100,0)
 . ;
"RTN","IBCNEDEP",101,0)
 . ;  Set Buffer symbol to 'B12' (Comm Failure)
"RTN","IBCNEDEP",102,0)
 . I BUFF'="" D BUFF^IBCNEUT2(BUFF,15)
"RTN","IBCNEDEP",103,0)
 . ;
"RTN","IBCNEDEP",104,0)
 . I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",105,0)
 . ;
"RTN","IBCNEDEP",106,0)
 . ; Issue comm fail MailMan msg only for ver'ns
"RTN","IBCNEDEP",107,0)
 . I VERID="V" D CERR^IBCNEDEQ
"RTN","IBCNEDEP",108,0)
 ;
"RTN","IBCNEDEP",109,0)
 ; Exit for stop request
"RTN","IBCNEDEP",110,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",111,0)
 ;
"RTN","IBCNEDEP",112,0)
RET ;  If status is 'Retry'
"RTN","IBCNEDEP",113,0)
 S IEN=""
"RTN","IBCNEDEP",114,0)
 F  S IEN=$O(^IBCN(365.1,"AC",6,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",115,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",116,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",117,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",118,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",119,0)
 . ;
"RTN","IBCNEDEP",120,0)
 . NEW TDATA,NRETR,PAYR,BUFF,DFN,MSG,RIEN,HIEN,XMSUB,VERID
"RTN","IBCNEDEP",121,0)
 . S TDATA=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",122,0)
 . S NRETR=$P(TDATA,U,8),PAYR=$P(TDATA,U,3)
"RTN","IBCNEDEP",123,0)
 . S BUFF=$P(TDATA,U,5),DFN=$P(TDATA,U,2)
"RTN","IBCNEDEP",124,0)
 . S VERID=$P(TDATA,U,11)
"RTN","IBCNEDEP",125,0)
 . S NRETR=NRETR+1
"RTN","IBCNEDEP",126,0)
 . ;
"RTN","IBCNEDEP",127,0)
 . ;  If retries are finished, set to fail
"RTN","IBCNEDEP",128,0)
 . I NRETR>RETR D  Q
"RTN","IBCNEDEP",129,0)
 .. D SST^IBCNEUT2(IEN,5)
"RTN","IBCNEDEP",130,0)
 .. ;
"RTN","IBCNEDEP",131,0)
 .. ;  Set Buffer symbol to 'B12' (Comm Failure)
"RTN","IBCNEDEP",132,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,15)
"RTN","IBCNEDEP",133,0)
 .. ;
"RTN","IBCNEDEP",134,0)
 .. ;  For msg in the Response file set the status to
"RTN","IBCNEDEP",135,0)
 .. ; 'Comm Failure'
"RTN","IBCNEDEP",136,0)
 .. D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",137,0)
 .. I PAYR=$$FIND1^DIC(365.12,"","X","~NO PAYER") Q
"RTN","IBCNEDEP",138,0)
 .. ;
"RTN","IBCNEDEP",139,0)
 .. I VERID="V" D CERE^IBCNEDEQ
"RTN","IBCNEDEP",140,0)
 . ; If generating retry, set eIV status to comm failure (5) for
"RTN","IBCNEDEP",141,0)
 . ; remaining related responses
"RTN","IBCNEDEP",142,0)
 . D RSTA^IBCNEUT7(IEN)
"RTN","IBCNEDEP",143,0)
 ;
"RTN","IBCNEDEP",144,0)
 ; Exit for stop request
"RTN","IBCNEDEP",145,0)
 I $G(ZTSTOP) G EXIT
"RTN","IBCNEDEP",146,0)
 ;
"RTN","IBCNEDEP",147,0)
FIN ; Prioritize requests for statuses 'Retry' and 'Ready to Transmit'
"RTN","IBCNEDEP",148,0)
 ;
"RTN","IBCNEDEP",149,0)
 ;  Separate inquiries into verifications, identifications,
"RTN","IBCNEDEP",150,0)
 ;  and "fishes" - VNUM = Priority of output
"RTN","IBCNEDEP",151,0)
 F STA=1,6 S IEN="" D
"RTN","IBCNEDEP",152,0)
 . F  S IEN=$O(^IBCN(365.1,"AC",STA,IEN)) Q:IEN=""  D
"RTN","IBCNEDEP",153,0)
 .. S IBDATA=$G(^IBCN(365.1,IEN,0)) Q:IBDATA=""
"RTN","IBCNEDEP",154,0)
 .. S QUERY=$P(IBDATA,U,11),DFN=$P(IBDATA,U,2),OVRIDE=$P(IBDATA,U,14)
"RTN","IBCNEDEP",155,0)
 .. S PAYR=$P(IBDATA,U,3)
"RTN","IBCNEDEP",156,0)
 .. I QUERY="V" S VNUM=3
"RTN","IBCNEDEP",157,0)
 .. I QUERY'="V" D
"RTN","IBCNEDEP",158,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=5 Q
"RTN","IBCNEDEP",159,0)
 ... S VNUM=4
"RTN","IBCNEDEP",160,0)
 .. I OVRIDE'="" D
"RTN","IBCNEDEP",161,0)
 ... I PAYR=$$FIND1^DIC(365.12,,"X","~NO PAYER") S VNUM=2 Q
"RTN","IBCNEDEP",162,0)
 ... S VNUM=1
"RTN","IBCNEDEP",163,0)
 .. S ^TMP("IBQUERY",$J,VNUM,DFN,IEN)=""
"RTN","IBCNEDEP",164,0)
 ;
"RTN","IBCNEDEP",165,0)
LP ;  Loop through priorities, process as either verifications
"RTN","IBCNEDEP",166,0)
 ;  or identifications
"RTN","IBCNEDEP",167,0)
 N IHCNT
"RTN","IBCNEDEP",168,0)
 S VNUM="",IHCNT=0
"RTN","IBCNEDEP",169,0)
 F  S VNUM=$O(^TMP("IBQUERY",$J,VNUM)) Q:VNUM=""  D  Q:$G(ZTSTOP)!$G(QFL)=1
"RTN","IBCNEDEP",170,0)
 . I VNUM=1!(VNUM=3) D VER Q
"RTN","IBCNEDEP",171,0)
 . ;D ID
"RTN","IBCNEDEP",172,0)
 ;
"RTN","IBCNEDEP",173,0)
EXIT ;  Finish
"RTN","IBCNEDEP",174,0)
 K BUFF,CNT,D,D0,DA,DFN,DI,DIC,DIE,DISYS,DQ,DR,DTCRT,EXT,FAIL,FLDT,FUTDT
"RTN","IBCNEDEP",175,0)
 K FRDT,FMSG,GT1,HCT,HIEN,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH,%I,%H
"RTN","IBCNEDEP",176,0)
 K HLEID,HLFS,HLHDR,HLINST,HLIP,HLN,HLPARAM,HLPROD,HLQ,HLRESLT,XMSUB
"RTN","IBCNEDEP",177,0)
 K HLSAN,HLTYPE,HLX,IBCNEP,IBCNHLP,IEN,IHCNT,IN1,IRIEN,MDTM,MGRP,MSGID,TOT
"RTN","IBCNEDEP",178,0)
 K NRETR,NTRAN,OVRIDE,PAYR,PID,QFL,QUERY,RETR,RSIEN,SRVDT,STA,TRANSR,X
"RTN","IBCNEDEP",179,0)
 K ZMID,^TMP("IBQUERY",$J),Y,DOD,DGREL,TMSG,RSTYPE,OMSGID,QFL
"RTN","IBCNEDEP",180,0)
 K IBCNETOT,HLP,SUBID,VNUM,BNDL,IBDATA,PATID
"RTN","IBCNEDEP",181,0)
 Q
"RTN","IBCNEDEP",182,0)
 ;
"RTN","IBCNEDEP",183,0)
VER ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNEDEP",184,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNEDEP",185,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",186,0)
 ;
"RTN","IBCNEDEP",187,0)
 S DFN=""
"RTN","IBCNEDEP",188,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",189,0)
 . ;
"RTN","IBCNEDEP",190,0)
 . ;  If the INQUIRE SECONDARY INSURANCES flag is 'yes',
"RTN","IBCNEDEP",191,0)
 . ;  bundle verifications together, send a continuation pointer
"RTN","IBCNEDEP",192,0)
 . I VNUM=3,BNDL D  Q:QFL
"RTN","IBCNEDEP",193,0)
 .. S TOT=0,IEN="",QFL=0
"RTN","IBCNEDEP",194,0)
 .. F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",195,0)
 . ;
"RTN","IBCNEDEP",196,0)
 . S IEN="",OMSGID="",QFL=0,CNT=0
"RTN","IBCNEDEP",197,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D  Q:$G(ZTSTOP)
"RTN","IBCNEDEP",198,0)
 .. ; Update count for periodic check
"RTN","IBCNEDEP",199,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",200,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",201,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",202,0)
 .. ;
"RTN","IBCNEDEP",203,0)
 .. D PROC I PID="" Q
"RTN","IBCNEDEP",204,0)
 .. ;
"RTN","IBCNEDEP",205,0)
 .. I BNDL S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",206,0)
 .. ; D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",207,0)
 .. D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",208,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",209,0)
 .. ;
"RTN","IBCNEDEP",210,0)
 .. ;  If not successful
"RTN","IBCNEDEP",211,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",212,0)
 .. ;  If successful
"RTN","IBCNEDEP",213,0)
 .. D SCC^IBCNEDEQ
"RTN","IBCNEDEP",214,0)
 .. I BNDL D
"RTN","IBCNEDEP",215,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",216,0)
 ;
"RTN","IBCNEDEP",217,0)
 K HL,IN1,GT1,PID,DFN,^TMP($J,"HLS")
"RTN","IBCNEDEP",218,0)
 Q
"RTN","IBCNEDEP",219,0)
 ;
"RTN","IBCNEDEP",220,0)
ID ;  Send Identification Msgs
"RTN","IBCNEDEP",221,0)
 ;
"RTN","IBCNEDEP",222,0)
 ;  Initialize the HL7 variables based on the HL7 protocol
"RTN","IBCNEDEP",223,0)
 S IBCNHLP="IBCNE IIV RQI OUT"
"RTN","IBCNEDEP",224,0)
 D INIT^IBCNEHLO
"RTN","IBCNEDEP",225,0)
 ;
"RTN","IBCNEDEP",226,0)
 S DFN=""
"RTN","IBCNEDEP",227,0)
 F  S DFN=$O(^TMP("IBQUERY",$J,VNUM,DFN)) Q:DFN=""  D  Q:$G(ZTSTOP)!QFL
"RTN","IBCNEDEP",228,0)
 . ; Update count for periodic check
"RTN","IBCNEDEP",229,0)
 . S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDEP",230,0)
 . ; Check for request to stop background job, periodically
"RTN","IBCNEDEP",231,0)
 . I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDEP",232,0)
 . ;
"RTN","IBCNEDEP",233,0)
 . S TOT=0,IEN="",CNT=0,OMSGID="",QFL=0
"RTN","IBCNEDEP",234,0)
 . ;
"RTN","IBCNEDEP",235,0)
 . ;  Get the total # of identification msgs for a patient
"RTN","IBCNEDEP",236,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  S TOT=TOT+1
"RTN","IBCNEDEP",237,0)
 . ;
"RTN","IBCNEDEP",238,0)
 . ;  For each identification transaction generate an HL7 msg
"RTN","IBCNEDEP",239,0)
 . F  S IEN=$O(^TMP("IBQUERY",$J,VNUM,DFN,IEN)) Q:IEN=""  D
"RTN","IBCNEDEP",240,0)
 .. D PROC
"RTN","IBCNEDEP",241,0)
 .. ;
"RTN","IBCNEDEP",242,0)
 .. I VNUM=4 S HLP("CONTPTR")=$G(OMSGID)
"RTN","IBCNEDEP",243,0)
 .. ; D GENERATE^HLMA(HLEID,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",244,0)
 .. D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNEDEP",245,0)
 .. K ^TMP("HLS",$J),HLP
"RTN","IBCNEDEP",246,0)
 .. ;
"RTN","IBCNEDEP",247,0)
 .. ;  If not successful
"RTN","IBCNEDEP",248,0)
 .. I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q
"RTN","IBCNEDEP",249,0)
 .. ;
"RTN","IBCNEDEP",250,0)
 .. ;  If successful
"RTN","IBCNEDEP",251,0)
 .. D SCC^IBCNEDEQ
"RTN","IBCNEDEP",252,0)
 .. I VNUM=4 D
"RTN","IBCNEDEP",253,0)
 ... I CNT=1 S OMSGID=MSGID
"RTN","IBCNEDEP",254,0)
 ;
"RTN","IBCNEDEP",255,0)
 Q
"RTN","IBCNEDEP",256,0)
 ;
"RTN","IBCNEDEP",257,0)
PROC ;  Process TQ record
"RTN","IBCNEDEP",258,0)
 S TRANSR=$G(^IBCN(365.1,IEN,0))
"RTN","IBCNEDEP",259,0)
 S DFN=$P(TRANSR,U,2),PAYR=$P(TRANSR,U,3),BUFF=$P(TRANSR,U,5)
"RTN","IBCNEDEP",260,0)
 S QUERY=$P(TRANSR,U,11),EXT=$P(TRANSR,U,10),SRVDT=$P(TRANSR,U,12)
"RTN","IBCNEDEP",261,0)
 S IRIEN=$P(TRANSR,U,13),HCT=0,NTRAN=$P(TRANSR,U,7),NRETR=$P(TRANSR,U,8)
"RTN","IBCNEDEP",262,0)
 S SUBID=$P(TRANSR,U,16),OVRIDE=$P(TRANSR,U,14),STA=$P(TRANSR,U,4)
"RTN","IBCNEDEP",263,0)
 S FRDT=$P(TRANSR,U,17),PATID=$P(TRANSR,U,19)
"RTN","IBCNEDEP",264,0)
 ;
"RTN","IBCNEDEP",265,0)
 ;  Build the HL7 msg
"RTN","IBCNEDEP",266,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)="PRD|NA"
"RTN","IBCNEDEP",267,0)
 D PID^IBCNEHLQ I PID=""!(PID?."*") Q
"RTN","IBCNEDEP",268,0)
 S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(PID,"*","")
"RTN","IBCNEDEP",269,0)
 D GT1^IBCNEHLQ I GT1'="",GT1'?."*" S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(GT1,"*","")
"RTN","IBCNEDEP",270,0)
 D IN1^IBCNEHLQ I IN1'="",IN1'?."*" D
"RTN","IBCNEDEP",271,0)
 . S HCT=HCT+1
"RTN","IBCNEDEP",272,0)
 . I VNUM=1 S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","") Q
"RTN","IBCNEDEP",273,0)
 . I VNUM=2,'BNDL S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","") Q
"RTN","IBCNEDEP",274,0)
 . S CNT=CNT+1 I TOT=0 S TOT=1
"RTN","IBCNEDEP",275,0)
 . S $P(IN1,HLFS,22)=TOT,$P(IN1,HLFS,21)=CNT
"RTN","IBCNEDEP",276,0)
 . S ^TMP("HLS",$J,HCT)=$TR(IN1,"*","")
"RTN","IBCNEDEP",277,0)
 ;
"RTN","IBCNEDEP",278,0)
 ;  Build multi-field NTE segment
"RTN","IBCNEDEP",279,0)
 D NTE^IBCNEHLQ
"RTN","IBCNEDEP",280,0)
 ;  If build successful
"RTN","IBCNEDEP",281,0)
 I NTE'="",$E(NTE,1)'="*" S HCT=HCT+1,^TMP("HLS",$J,HCT)=$TR(NTE,"*","")
"RTN","IBCNEDEP",282,0)
 K NTE
"RTN","IBCNEDEP",283,0)
 Q
"RTN","IBCNEDEQ")
0^33^B28120431^B27902088
"RTN","IBCNEDEQ",1,0)
IBCNEDEQ ;DAOU/ALA - Process eIV Transactions continued ;21-AUG-2002
"RTN","IBCNEDEQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,416,438**;21-MAR-94;Build 52
"RTN","IBCNEDEQ",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDEQ",4,0)
 ;
"RTN","IBCNEDEQ",5,0)
 ;**Program Description**
"RTN","IBCNEDEQ",6,0)
 ;  This program contains some subroutines for processing a transmission
"RTN","IBCNEDEQ",7,0)
 ;
"RTN","IBCNEDEQ",8,0)
HLER ;  HL7 Creation error message
"RTN","IBCNEDEQ",9,0)
 ;
"RTN","IBCNEDEQ",10,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",11,0)
 ;
"RTN","IBCNEDEQ",12,0)
 ;  Parameters
"RTN","IBCNEDEQ",13,0)
 ;    HLRESLT = Error from GENERATE^HLMA call
"RTN","IBCNEDEQ",14,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",15,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",16,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",17,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",18,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",19,0)
 ;
"RTN","IBCNEDEQ",20,0)
 S HLRESLT="Error - "_$P(HLRESLT,U,2,99)
"RTN","IBCNEDEQ",21,0)
 S MSG(1)=HLRESLT
"RTN","IBCNEDEQ",22,0)
 S MSG(2)="occurred when trying to create the outgoing HL7 message for"
"RTN","IBCNEDEQ",23,0)
 S MSG(3)="Patient: "_$P($G(^DPT(DFN,0)),U,1)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)_"."
"RTN","IBCNEDEQ",24,0)
 S MSG(4)="Please contact the Help Desk and report this problem."
"RTN","IBCNEDEQ",25,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",26,0)
 S XMSUB="eIV HL7 Creation Error"
"RTN","IBCNEDEQ",27,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",28,0)
 K XMSUB,MSG,HLRESLT
"RTN","IBCNEDEQ",29,0)
 Q
"RTN","IBCNEDEQ",30,0)
 ;
"RTN","IBCNEDEQ",31,0)
CERR ;  Communication Error Mail Message - No Retries defined
"RTN","IBCNEDEQ",32,0)
 ;
"RTN","IBCNEDEQ",33,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",34,0)
 ;
"RTN","IBCNEDEQ",35,0)
 ;  Parameters
"RTN","IBCNEDEQ",36,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",37,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",38,0)
 ;    FMSG = Failure message flag
"RTN","IBCNEDEQ",39,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",40,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",41,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",42,0)
 ;
"RTN","IBCNEDEQ",43,0)
 I 'FMSG G CERRQ
"RTN","IBCNEDEQ",44,0)
 S XMSUB="eIV Communication Error"
"RTN","IBCNEDEQ",45,0)
 S MSG(1)="VistA was unable to electronically confirm insurance for"
"RTN","IBCNEDEQ",46,0)
 S MSG(2)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U)_"."
"RTN","IBCNEDEQ",47,0)
 S MSG(3)="A single attempt was made to electronically confirm the insurance"
"RTN","IBCNEDEQ",48,0)
 S MSG(4)="with this payer."
"RTN","IBCNEDEQ",49,0)
 ;
"RTN","IBCNEDEQ",50,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",51,0)
 ;
"RTN","IBCNEDEQ",52,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",53,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",54,0)
CERRQ Q
"RTN","IBCNEDEQ",55,0)
 ;
"RTN","IBCNEDEQ",56,0)
CERE ;  Communication Error Mail Message - Exceeds Retries
"RTN","IBCNEDEQ",57,0)
 ;
"RTN","IBCNEDEQ",58,0)
 ;  Called from IBCNEDEP
"RTN","IBCNEDEQ",59,0)
 ;
"RTN","IBCNEDEQ",60,0)
 ;  Parameters
"RTN","IBCNEDEQ",61,0)
 ;    DFN = Patient IEN
"RTN","IBCNEDEQ",62,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEDEQ",63,0)
 ;    FMSG = Failure message flag
"RTN","IBCNEDEQ",64,0)
 ;    MGRP = Mail group
"RTN","IBCNEDEQ",65,0)
 ;    XMSUB = Subject line
"RTN","IBCNEDEQ",66,0)
 ;    MSG = Message array
"RTN","IBCNEDEQ",67,0)
 ;
"RTN","IBCNEDEQ",68,0)
 I 'FMSG G CEREQ
"RTN","IBCNEDEQ",69,0)
 S XMSUB="eIV Communication Error"
"RTN","IBCNEDEQ",70,0)
 S MSG(1)="VistA was unable to electronically confirm insurance for"
"RTN","IBCNEDEQ",71,0)
 S MSG(2)="Patient: "_$P($G(^DPT(DFN,0)),U)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U)_"."
"RTN","IBCNEDEQ",72,0)
 ;
"RTN","IBCNEDEQ",73,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",74,0)
 ;
"RTN","IBCNEDEQ",75,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",76,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",77,0)
CEREQ Q
"RTN","IBCNEDEQ",78,0)
 ;
"RTN","IBCNEDEQ",79,0)
SUB ;  Create HL7 subrecord in TQ file
"RTN","IBCNEDEQ",80,0)
 ;
"RTN","IBCNEDEQ",81,0)
 ;  Called from tag SCC within this routine
"RTN","IBCNEDEQ",82,0)
 ;
"RTN","IBCNEDEQ",83,0)
 ;  Input Parameters
"RTN","IBCNEDEQ",84,0)
 ;    IEN = the transmission IEN
"RTN","IBCNEDEQ",85,0)
 ;    RSIEN = the response IEN
"RTN","IBCNEDEQ",86,0)
 ;    MDTM = the date/time message was created
"RTN","IBCNEDEQ",87,0)
 ;    MSGID = the HL7 message ID
"RTN","IBCNEDEQ",88,0)
 ;
"RTN","IBCNEDEQ",89,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y
"RTN","IBCNEDEQ",90,0)
 S DIC="^IBCN(365.1,"_IEN_",2,",DIE=DIC,X=MDTM,DA(1)=IEN
"RTN","IBCNEDEQ",91,0)
 S DLAYGO=365.16,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEDEQ",92,0)
 I '$D(^IBCN(365.1,IEN,2,0)) S ^IBCN(365.1,IEN,2,0)="^365.16D^^"
"RTN","IBCNEDEQ",93,0)
 K DD,DO
"RTN","IBCNEDEQ",94,0)
 D FILE^DICN
"RTN","IBCNEDEQ",95,0)
 K DO
"RTN","IBCNEDEQ",96,0)
 S HIEN=+Y
"RTN","IBCNEDEQ",97,0)
 S DR=".02////^S X=MSGID;.03////^S X=RSIEN" D ^DIE
"RTN","IBCNEDEQ",98,0)
 S DA=HIEN D ^DIE
"RTN","IBCNEDEQ",99,0)
 ;
"RTN","IBCNEDEQ",100,0)
 K HIEN,RSIEN,DR,MDTM
"RTN","IBCNEDEQ",101,0)
 Q
"RTN","IBCNEDEQ",102,0)
 ;
"RTN","IBCNEDEQ",103,0)
RESP ;  Create Response Record
"RTN","IBCNEDEQ",104,0)
 ;
"RTN","IBCNEDEQ",105,0)
 ;  Called from IBCNEHL3 tag SCC within this routine
"RTN","IBCNEDEQ",106,0)
 ;
"RTN","IBCNEDEQ",107,0)
 ;  Input Parameters
"RTN","IBCNEDEQ",108,0)
 ;    MSGID = Message Control ID (required)
"RTN","IBCNEDEQ",109,0)
 ;    MDTM = Message date/time created (optional)
"RTN","IBCNEDEQ",110,0)
 ;    DFN = Patient IEN (optional)
"RTN","IBCNEDEQ",111,0)
 ;    PAYR = Payer IEN (optional)
"RTN","IBCNEDEQ",112,0)
 ;    BUFF = Buffer IEN (optional)
"RTN","IBCNEDEQ",113,0)
 ;    IEN = Transmission IEN (optional)
"RTN","IBCNEDEQ",114,0)
 ;    RSTYPE = Response Type (O=Original, U=Unsolicited)
"RTN","IBCNEDEQ",115,0)
 ;
"RTN","IBCNEDEQ",116,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,RARRAY,ERR
"RTN","IBCNEDEQ",117,0)
 S DIC="^IBCN(365,",X=MSGID,DLAYGO=365,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEDEQ",118,0)
 K DD,DO
"RTN","IBCNEDEQ",119,0)
 D FILE^DICN
"RTN","IBCNEDEQ",120,0)
 K DO
"RTN","IBCNEDEQ",121,0)
 S RSIEN=+Y
"RTN","IBCNEDEQ",122,0)
 S RARRAY(365,RSIEN_",",.02)=$G(DFN),RARRAY(365,RSIEN_",",.03)=$G(PAYR)
"RTN","IBCNEDEQ",123,0)
 I $G(IEN)'="" D
"RTN","IBCNEDEQ",124,0)
 . I $P(^IBCN(365.1,IEN,0),U,18)=1 S RARRAY(365,RSIEN_",",.04)=$G(BUFF)
"RTN","IBCNEDEQ",125,0)
 S RARRAY(365,RSIEN_",",.05)=$G(IEN)
"RTN","IBCNEDEQ",126,0)
 S RARRAY(365,RSIEN_",",.06)=2,RARRAY(365,RSIEN_",",.08)=$G(MDTM)
"RTN","IBCNEDEQ",127,0)
 ;
"RTN","IBCNEDEQ",128,0)
 I $G(RSTYPE)="" S RSTYPE="U"
"RTN","IBCNEDEQ",129,0)
 S RARRAY(365,RSIEN_",",.1)=RSTYPE
"RTN","IBCNEDEQ",130,0)
 ;
"RTN","IBCNEDEQ",131,0)
 D FILE^DIE("I","RARRAY","ERR")
"RTN","IBCNEDEQ",132,0)
 I $D(ERR("DIERR",1,"TEXT",1)) D
"RTN","IBCNEDEQ",133,0)
 . S ERFLG=1,MCT=0,VEN=0
"RTN","IBCNEDEQ",134,0)
 . F  S VEN=$O(ERR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEDEQ",135,0)
 .. S MCT=MCT+1,MSG(MCT)=$G(ERR("DIERR",VEN,"TEXT",1))
"RTN","IBCNEDEQ",136,0)
 . ;
"RTN","IBCNEDEQ",137,0)
 . S MCT=MCT+1,MSG(MCT)="Please contact the Help Desk and report this problem."
"RTN","IBCNEDEQ",138,0)
 . S XMSUB="Error creating Response"
"RTN","IBCNEDEQ",139,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",140,0)
 . K ERR,VEN,MCT
"RTN","IBCNEDEQ",141,0)
 Q
"RTN","IBCNEDEQ",142,0)
 ;
"RTN","IBCNEDEQ",143,0)
TMRR ;  Communication Timeout message
"RTN","IBCNEDEQ",144,0)
 I 'TMSG Q
"RTN","IBCNEDEQ",145,0)
 S XMSUB="eIV Communication Timeout"
"RTN","IBCNEDEQ",146,0)
 S MSG(1)="No Response has been received within the defined failure days of "_FAIL_" for "
"RTN","IBCNEDEQ",147,0)
 S MSG(3)="Patient: "_$P($G(^DPT(DFN,0)),U,1)_$$SSN(DFN)_" and Payer: "_$P($G(^IBE(365.12,PAYR,0)),U,1)
"RTN","IBCNEDEQ",148,0)
 ;
"RTN","IBCNEDEQ",149,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEDEQ",150,0)
 ;
"RTN","IBCNEDEQ",151,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEDEQ",152,0)
 K MSG,XMSUB
"RTN","IBCNEDEQ",153,0)
 Q
"RTN","IBCNEDEQ",154,0)
 ;
"RTN","IBCNEDEQ",155,0)
SSN(DFN) ; Retrieve patient's ssn and return last 4 digits
"RTN","IBCNEDEQ",156,0)
 ; Subsequently added Date of Birth to display as well
"RTN","IBCNEDEQ",157,0)
 Q:'$G(DFN) ""
"RTN","IBCNEDEQ",158,0)
 N SSN,DOB
"RTN","IBCNEDEQ",159,0)
 S SSN=$$GETSSN^IBCNEDE5(DFN)
"RTN","IBCNEDEQ",160,0)
 S DOB=$$GETDOB(DFN)
"RTN","IBCNEDEQ",161,0)
 I SSN="",DOB="" Q ""
"RTN","IBCNEDEQ",162,0)
 I SSN="" Q " (DOB: "_DOB_")"
"RTN","IBCNEDEQ",163,0)
 S SSN=" (SSN: xxx-xx-"_$E(SSN,6,9)
"RTN","IBCNEDEQ",164,0)
 I DOB'="" S DOB="  DOB: "_DOB
"RTN","IBCNEDEQ",165,0)
 Q SSN_DOB_")"
"RTN","IBCNEDEQ",166,0)
 ;
"RTN","IBCNEDEQ",167,0)
GETDOB(DFN) ;
"RTN","IBCNEDEQ",168,0)
 Q:'$G(DFN) "Unknown"
"RTN","IBCNEDEQ",169,0)
 N DOB
"RTN","IBCNEDEQ",170,0)
 S DOB=$P($G(^DPT(DFN,0)),U,3)
"RTN","IBCNEDEQ",171,0)
 S DOB=$S('DOB:"Unknown",1:$$FMTE^XLFDT(DOB,"5Z"))
"RTN","IBCNEDEQ",172,0)
 Q DOB
"RTN","IBCNEDEQ",173,0)
 ;
"RTN","IBCNEDEQ",174,0)
SCC ;  If successfully creates an HL7 msg
"RTN","IBCNEDEQ",175,0)
 S MSGID=$P(HLRESLT,U,1),NTRAN=NTRAN+1,MDTM=$$NOW^XLFDT(),IHCNT=IHCNT+1
"RTN","IBCNEDEQ",176,0)
 I NTRAN>1 S NRETR=NRETR+1
"RTN","IBCNEDEQ",177,0)
 D SST^IBCNEUT2(IEN,2)
"RTN","IBCNEDEQ",178,0)
 S DA=IEN,DIE="^IBCN(365.1,",DR=".07////^S X=NTRAN;.08////^S X=NRETR"
"RTN","IBCNEDEQ",179,0)
 D ^DIE
"RTN","IBCNEDEQ",180,0)
 ;
"RTN","IBCNEDEQ",181,0)
 ;  Create Response Record
"RTN","IBCNEDEQ",182,0)
 S RSTYPE="O" D RESP
"RTN","IBCNEDEQ",183,0)
 ;
"RTN","IBCNEDEQ",184,0)
 ;  Create HL7 subrecord
"RTN","IBCNEDEQ",185,0)
 D SUB
"RTN","IBCNEDEQ",186,0)
 ;
"RTN","IBCNEDEQ",187,0)
 ; If a buffer entry exists, set the buffer symbol to a '?'
"RTN","IBCNEDEQ",188,0)
 I BUFF'="" D BUFF^IBCNEUT2(BUFF,10)
"RTN","IBCNEDEQ",189,0)
 Q
"RTN","IBCNEHL1")
0^3^B244020766^B227587441
"RTN","IBCNEHL1",1,0)
IBCNEHL1 ;DAOU/ALA - HL7 Process Incoming RPI Messages ;26-JUN-2002
"RTN","IBCNEHL1",2,0)
 ;;2.0;INTEGRATED BILLING;**300,345,416,444,438**;21-MAR-94;Build 52
"RTN","IBCNEHL1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL1",4,0)
 ;
"RTN","IBCNEHL1",5,0)
 ;**Program Description**
"RTN","IBCNEHL1",6,0)
 ;  This program will process incoming IIV response messages.
"RTN","IBCNEHL1",7,0)
 ;  This includes updating the record in the IIV Response File,
"RTN","IBCNEHL1",8,0)
 ;  updating the Buffer record (if there is one and creating a new
"RTN","IBCNEHL1",9,0)
 ;  one if there isn't) with the appropriate Buffer Symbol and data
"RTN","IBCNEHL1",10,0)
 ;
"RTN","IBCNEHL1",11,0)
 ;  Variables
"RTN","IBCNEHL1",12,0)
 ;    SEG = HL7 Segment Name
"RTN","IBCNEHL1",13,0)
 ;    MSGID = Original Message Control ID
"RTN","IBCNEHL1",14,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL1",15,0)
 ;    ERTXT = Error Message Text
"RTN","IBCNEHL1",16,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL1",17,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL1",18,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL1",19,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL1",20,0)
 ;    IIVSTAT = EC generated flag interpreting status of response
"RTN","IBCNEHL1",21,0)
 ;              1 = +
"RTN","IBCNEHL1",22,0)
 ;              6 = -
"RTN","IBCNEHL1",23,0)
 ;              V = #
"RTN","IBCNEHL1",24,0)
 ;    MAP = Array that maps EC's IIV status flag to IIV STATUS TABLE (#365.15)   IEN
"RTN","IBCNEHL1",25,0)
 ;
"RTN","IBCNEHL1",26,0)
EN ; Entry Point
"RTN","IBCNEHL1",27,0)
 N AUTO,EBDA,ERFLG,ERROR,G2OFLG,HCT,HLCMP,HLREP,HLSCMP,IIVSTAT,IRIEN,MAP,MGRP,RIEN,RSUPDT,SEG,SUBID,TRACE,UP,ACK
"RTN","IBCNEHL1",28,0)
 S (ERFLG,G2OFLG)=0,MGRP=$$MGRP^IBCNEUT5(),HCT=1,SUBID="",IIVSTAT=""
"RTN","IBCNEHL1",29,0)
 ;
"RTN","IBCNEHL1",30,0)
 S HLCMP=$E(HL("ECH")) ; HL7 component separator
"RTN","IBCNEHL1",31,0)
 S HLSCMP=$E(HL("ECH"),4) ; HL7 subcomponent separator
"RTN","IBCNEHL1",32,0)
 S HLREP=$E(HL("ECH"),2) ; HL7 repetition separator
"RTN","IBCNEHL1",33,0)
 ; Create map from EC to VistA
"RTN","IBCNEHL1",34,0)
 S MAP(1)=8,MAP(6)=9,MAP("V")=21
"RTN","IBCNEHL1",35,0)
 ;
"RTN","IBCNEHL1",36,0)
 ;  Loop through the message and find each segment for processing
"RTN","IBCNEHL1",37,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHL1",38,0)
 . D SPAR^IBCNEHLU
"RTN","IBCNEHL1",39,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHL1",40,0)
 . ; check if we are inside G2O group of segments
"RTN","IBCNEHL1",41,0)
 . I SEG="ZTY" S G2OFLG=1
"RTN","IBCNEHL1",42,0)
 . I G2OFLG,SEG'="ZTY",SEG'="CTD" S G2OFLG=0
"RTN","IBCNEHL1",43,0)
 . ; If we are outside of Z_Benefit_group, kill EB multiple ien
"RTN","IBCNEHL1",44,0)
 . I +$G(EBDA),".MSH.MSA.PRD.PID.GT1.IN1.IN3."[("."_SEG_".")!('G2OFLG&(SEG="CTD")) K EBDA
"RTN","IBCNEHL1",45,0)
 . ;
"RTN","IBCNEHL1",46,0)
 . I SEG="MSA" D MSA^IBCNEHL2(.ERACT,.ERCON,.ERROR,.ERTXT,.IBSEG,MGRP,.RIEN,.TRACE) Q:ERFLG
"RTN","IBCNEHL1",47,0)
 . ;
"RTN","IBCNEHL1",48,0)
 . ;  Contact Segment
"RTN","IBCNEHL1",49,0)
 . I SEG="CTD",'G2OFLG D CTD^IBCNEHL2(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",50,0)
 . ;
"RTN","IBCNEHL1",51,0)
 . ;  Patient Segment
"RTN","IBCNEHL1",52,0)
 . I SEG="PID" D PID^IBCNEHL2(.ERFLG,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",53,0)
 . ;
"RTN","IBCNEHL1",54,0)
 . ;  Guarantor Segment
"RTN","IBCNEHL1",55,0)
 . I SEG="GT1" D GT1^IBCNEHL2(.ERROR,.IBSEG,RIEN,.SUBID)
"RTN","IBCNEHL1",56,0)
 . ;
"RTN","IBCNEHL1",57,0)
 . ;  Insurance Segment
"RTN","IBCNEHL1",58,0)
 . I SEG="IN1" D IN1^IBCNEHL2(.ERROR,.IBSEG,RIEN,SUBID)
"RTN","IBCNEHL1",59,0)
 . ;
"RTN","IBCNEHL1",60,0)
 . ;  Addt'l Insurance Segment
"RTN","IBCNEHL1",61,0)
 . ;I SEG="IN2" ; for future expansion, add IN2 tag to IBCNEHL2
"RTN","IBCNEHL1",62,0)
 . ;
"RTN","IBCNEHL1",63,0)
 . ;  Addt'l Insurance - Cert Segment
"RTN","IBCNEHL1",64,0)
 . I SEG="IN3" D IN3^IBCNEHL2(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",65,0)
 . ;
"RTN","IBCNEHL1",66,0)
 . ;  Eligibility/Benefit Segment
"RTN","IBCNEHL1",67,0)
 . I SEG="ZEB" D ZEB^IBCNEHL2(.EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",68,0)
 . ;
"RTN","IBCNEHL1",69,0)
 . ; Healthcare Delivery Segment
"RTN","IBCNEHL1",70,0)
 . I SEG="ZHS" D ZHS^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",71,0)
 . ;
"RTN","IBCNEHL1",72,0)
 . ; Reference ID Segment
"RTN","IBCNEHL1",73,0)
 . I SEG="ZRF" D ZRF^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",74,0)
 . ;
"RTN","IBCNEHL1",75,0)
 . ; Subscriber Date Segment
"RTN","IBCNEHL1",76,0)
 . I SEG="ZSD" D ZSD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",77,0)
 . ;
"RTN","IBCNEHL1",78,0)
 . ; Subscriber Additional Info Segment
"RTN","IBCNEHL1",79,0)
 . I SEG="ZII" D ZII^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",80,0)
 . ;
"RTN","IBCNEHL1",81,0)
 . ; Benefit Related Entity Segment
"RTN","IBCNEHL1",82,0)
 . I SEG="ZTY" D ZTY^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",83,0)
 . ;
"RTN","IBCNEHL1",84,0)
 . ; Benefit Related Entity Contact Segment
"RTN","IBCNEHL1",85,0)
 . I SEG="CTD",G2OFLG D G2OCTD^IBCNEHL4(EBDA,.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",86,0)
 . ;
"RTN","IBCNEHL1",87,0)
 . ;  Notes Segment
"RTN","IBCNEHL1",88,0)
 . I SEG="NTE" D NTE^IBCNEHL2(EBDA,.IBSEG,RIEN)
"RTN","IBCNEHL1",89,0)
 . ;
"RTN","IBCNEHL1",90,0)
 . ; Reject Reasons Segment
"RTN","IBCNEHL1",91,0)
 . I SEG="ERR" D ERR^IBCNEHL4(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",92,0)
 . ;
"RTN","IBCNEHL1",93,0)
 . ; Subscriber date segment (subscriber level)
"RTN","IBCNEHL1",94,0)
 . I SEG="ZTP" D ZTP^IBCNEHL4(.ERROR,.IBSEG,RIEN)
"RTN","IBCNEHL1",95,0)
 ;
"RTN","IBCNEHL1",96,0)
 S AUTO=$$AUTOUPD(RIEN)
"RTN","IBCNEHL1",97,0)
 I $G(ACK)'="AE",$G(ERACT)="",$G(ERTXT)="",'$D(ERROR),+AUTO D  Q
"RTN","IBCNEHL1",98,0)
 .D:$P(AUTO,U,3)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,3),$P(AUTO,U,6))
"RTN","IBCNEHL1",99,0)
 .D:$P(AUTO,U,4)'="" AUTOFIL($P(AUTO,U,2),$P(AUTO,U,4),$P(AUTO,U,6))
"RTN","IBCNEHL1",100,0)
 .Q
"RTN","IBCNEHL1",101,0)
 D FIL
"RTN","IBCNEHL1",102,0)
 Q
"RTN","IBCNEHL1",103,0)
 ;
"RTN","IBCNEHL1",104,0)
 ; =================================================================
"RTN","IBCNEHL1",105,0)
AUTOFIL(DFN,IEN312,ISSUB) ; Finish processing the response message - file directly into patient insurance
"RTN","IBCNEHL1",106,0)
 ;
"RTN","IBCNEHL1",107,0)
 N BUFF,DATA,ERROR,IENS,PREL,RDATA0,RDATA1,RDATA5,RSTYPE,TQN,TSTAMP
"RTN","IBCNEHL1",108,0)
 ;
"RTN","IBCNEHL1",109,0)
 Q:$G(RIEN)=""
"RTN","IBCNEHL1",110,0)
 S TSTAMP=$$NOW^XLFDT(),IENS=IEN312_","_DFN_","
"RTN","IBCNEHL1",111,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1)),RDATA5=$G(^IBCN(365,RIEN,5))
"RTN","IBCNEHL1",112,0)
 S TQN=$P(RDATA0,U,5),RSTYPE=$P(RDATA0,U,10)
"RTN","IBCNEHL1",113,0)
 I ISSUB S DATA(2.312,IENS,17)=$P(RDATA1,U) ; name
"RTN","IBCNEHL1",114,0)
 S DATA(2.312,IENS,3.01)=$P(RDATA1,U,2) ; dob
"RTN","IBCNEHL1",115,0)
 S DATA(2.312,IENS,3.05)=$P(RDATA1,U,3) ; ssn
"RTN","IBCNEHL1",116,0)
 I ISSUB,$P(RDATA1,U,8)'="" S DATA(2.312,IENS,6)=$P(RDATA1,U,8) ; whose insurance
"RTN","IBCNEHL1",117,0)
 S PREL=$P($G(^IBCN(365,RIEN,8)),U) I ISSUB,PREL'="" S DATA(2.312,IENS,4.03)=PREL ; pt. relationship
"RTN","IBCNEHL1",118,0)
 ;
"RTN","IBCNEHL1",119,0)
 S DATA(2.312,IENS,1.03)=TSTAMP ; date last verified
"RTN","IBCNEHL1",120,0)
 S DATA(2.312,IENS,1.04)="" ; last verified by
"RTN","IBCNEHL1",121,0)
 S DATA(2.312,IENS,1.05)=TSTAMP ; date last edited
"RTN","IBCNEHL1",122,0)
 S DATA(2.312,IENS,1.06)="" ; last edited by
"RTN","IBCNEHL1",123,0)
 S DATA(2.312,IENS,1.09)=5 ; source of info = eIV
"RTN","IBCNEHL1",124,0)
 ;subscriber address
"RTN","IBCNEHL1",125,0)
 S DATA(2.312,IENS,3.06)=$P(RDATA5,U) ; street line 1
"RTN","IBCNEHL1",126,0)
 S DATA(2.312,IENS,3.07)=$P(RDATA5,U,2) ; street line 2
"RTN","IBCNEHL1",127,0)
 S DATA(2.312,IENS,3.08)=$P(RDATA5,U,3) ; city
"RTN","IBCNEHL1",128,0)
 S DATA(2.312,IENS,3.09)=$P(RDATA5,U,4) ; state
"RTN","IBCNEHL1",129,0)
 S DATA(2.312,IENS,3.1)=$P(RDATA5,U,5) ; zip
"RTN","IBCNEHL1",130,0)
 S DATA(2.312,IENS,3.13)=$P(RDATA5,U,6) ; country
"RTN","IBCNEHL1",131,0)
 S DATA(2.312,IENS,3.14)=$P(RDATA5,U,7) ; country subdivision
"RTN","IBCNEHL1",132,0)
 ;
"RTN","IBCNEHL1",133,0)
 L +^DPT(DFN,.312,IEN312):15 I '$T D LCKERR D FIL Q
"RTN","IBCNEHL1",134,0)
 D FILE^DIE("ET","DATA","ERROR") I $D(ERROR) D WARN K ERROR D FIL G AUTOFILX
"RTN","IBCNEHL1",135,0)
 ; set eIV auto-update field separately because of the trigger on field 1.05
"RTN","IBCNEHL1",136,0)
 K DATA S DATA(2.312,IENS,4.04)="YES" D FILE^DIE("ET","DATA","ERROR") I $D(ERROR) D WARN G AUTOFILX
"RTN","IBCNEHL1",137,0)
 ; file new EB data
"RTN","IBCNEHL1",138,0)
 S ERFLG=$$EBFILE(DFN,IEN312,RIEN,1)
"RTN","IBCNEHL1",139,0)
 ; bail out if something went wrong during filing of EB data
"RTN","IBCNEHL1",140,0)
 I $G(ERFLG) G AUTOFILX
"RTN","IBCNEHL1",141,0)
 ; update insurance record ien in transmission queue
"RTN","IBCNEHL1",142,0)
 D UPDIREC(RIEN,IEN312)
"RTN","IBCNEHL1",143,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",144,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",145,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",146,0)
 ; update buffer file entry so only stub remains and status is changed
"RTN","IBCNEHL1",147,0)
 S BUFF=+$P($G(^IBCN(365,RIEN,0)),U,4)
"RTN","IBCNEHL1",148,0)
 I BUFF D
"RTN","IBCNEHL1",149,0)
 .D STATUS^IBCNBEE(BUFF,"A",0,0,0) ; update buffer entry's status to accepted
"RTN","IBCNEHL1",150,0)
 .D DELDATA^IBCNBED(BUFF) ; delete buffer's insurance/patient data
"RTN","IBCNEHL1",151,0)
 .Q
"RTN","IBCNEHL1",152,0)
AUTOFILX ;
"RTN","IBCNEHL1",153,0)
 L -^DPT(DFN,.312,IEN312)
"RTN","IBCNEHL1",154,0)
 Q
"RTN","IBCNEHL1",155,0)
 ;
"RTN","IBCNEHL1",156,0)
FIL ; Finish processing the response message - file into insurance buffer
"RTN","IBCNEHL1",157,0)
 ;
"RTN","IBCNEHL1",158,0)
 ; Input Variables
"RTN","IBCNEHL1",159,0)
 ; ERACT, ERFLG, ERROR, IIVSTAT, MAP, RIEN, TRACE
"RTN","IBCNEHL1",160,0)
 ;
"RTN","IBCNEHL1",161,0)
 ; If no record IEN, quit
"RTN","IBCNEHL1",162,0)
 I $G(RIEN)="" Q
"RTN","IBCNEHL1",163,0)
 ;
"RTN","IBCNEHL1",164,0)
 N BUFF,DFN,FILEIT,IBFDA,IBIEN,IBQFL,RDAT0,RSRVDT,RSTYPE,SYMBOL,TQDATA,TQN,TQSRVDT
"RTN","IBCNEHL1",165,0)
 ; Initialize variables from the Response File
"RTN","IBCNEHL1",166,0)
 S RDAT0=$G(^IBCN(365,RIEN,0)),TQN=$P(RDAT0,U,5)
"RTN","IBCNEHL1",167,0)
 S TQDATA=$G(^IBCN(365.1,TQN,0))
"RTN","IBCNEHL1",168,0)
 S IBQFL=$P(TQDATA,U,11)
"RTN","IBCNEHL1",169,0)
 S DFN=$P(RDAT0,U,2),BUFF=$P(RDAT0,U,4)
"RTN","IBCNEHL1",170,0)
 S IBIEN=$P(TQDATA,U,5),RSTYPE=$P(RDAT0,U,10)
"RTN","IBCNEHL1",171,0)
 S RSRVDT=$P($G(^IBCN(365,RIEN,1)),U,10)
"RTN","IBCNEHL1",172,0)
 ;
"RTN","IBCNEHL1",173,0)
 ; If an unknown error action or an error filing the response message,
"RTN","IBCNEHL1",174,0)
 ; send a warning email message
"RTN","IBCNEHL1",175,0)
 ; Note - A call to UEACT will always set ERFLAG=1
"RTN","IBCNEHL1",176,0)
 I ",W,X,R,P,C,N,Y,S,"'[(","_$G(ERACT)_",")&($G(ERACT)'="")!$D(ERROR) D UEACT
"RTN","IBCNEHL1",177,0)
 ;
"RTN","IBCNEHL1",178,0)
 ; If an error occurred, processing complete
"RTN","IBCNEHL1",179,0)
 I $G(ERFLG)=1 Q
"RTN","IBCNEHL1",180,0)
 ;
"RTN","IBCNEHL1",181,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",182,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",183,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",184,0)
 ;
"RTN","IBCNEHL1",185,0)
 ; Update the TQ service date to the date in the response file
"RTN","IBCNEHL1",186,0)
 ; if they are different AND the Error Action <>
"RTN","IBCNEHL1",187,0)
 ; 'P' for 'Please submit original transaction'
"RTN","IBCNEHL1",188,0)
 ;
"RTN","IBCNEHL1",189,0)
 ; *** Temporary change to suppress update of service & freshness dates.
"RTN","IBCNEHL1",190,0)
 ; *** To reinstate, remove comment (;) from next line.
"RTN","IBCNEHL1",191,0)
 ;I TQN'="",$G(RSTYPE)="O" D
"RTN","IBCNEHL1",192,0)
 ;. S TQSRVDT=$P($G(^IBCN(365.1,TQN,0)),U,12)
"RTN","IBCNEHL1",193,0)
 ;. I RSRVDT'="",TQSRVDT'=RSRVDT,$G(ERACT)'="P" D SAVETQ^IBCNEUT2(TQN,RSRVDT)
"RTN","IBCNEHL1",194,0)
 ;. ; update freshness date by same delta
"RTN","IBCNEHL1",195,0)
 ;. D SAVFRSH^IBCNEUT5(TQN,+$$FMDIFF^XLFDT(RSRVDT,TQSRVDT,1))
"RTN","IBCNEHL1",196,0)
 ;
"RTN","IBCNEHL1",197,0)
 ;  Check for error action
"RTN","IBCNEHL1",198,0)
 I $G(ERACT)'=""!($G(ERTXT)'="") S ERACT=$$ERRACT^IBCNEHLU(RIEN),ERCON=$P(ERACT,U,2),ERACT=$P(ERACT,U) D ERROR^IBCNEHL3(TQN,ERACT,ERCON,TRACE) G FILX
"RTN","IBCNEHL1",199,0)
 ;
"RTN","IBCNEHL1",200,0)
 ; Stop processing if identification response and not an active policy
"RTN","IBCNEHL1",201,0)
 S FILEIT=1
"RTN","IBCNEHL1",202,0)
 I $G(IIVSTAT)=6,TQN]"" D
"RTN","IBCNEHL1",203,0)
 . I TQDATA="" Q
"RTN","IBCNEHL1",204,0)
 . I IBQFL'="I" Q
"RTN","IBCNEHL1",205,0)
 . S FILEIT=0
"RTN","IBCNEHL1",206,0)
 I 'FILEIT G FILX
"RTN","IBCNEHL1",207,0)
 ;
"RTN","IBCNEHL1",208,0)
 ;  If there is an associated buffer entry & one or both of the following
"RTN","IBCNEHL1",209,0)
 ;  is true, stop filing (don't update buffer entry)
"RTN","IBCNEHL1",210,0)
 ;  1) buffer status is not 'Entered'
"RTN","IBCNEHL1",211,0)
 ;  2) the buffer entry is verified (* symbol)
"RTN","IBCNEHL1",212,0)
 I BUFF'="",($P($G(^IBA(355.33,BUFF,0)),U,4)'="E")!($$SYMBOL^IBCNBLL(BUFF)="*") G FILX
"RTN","IBCNEHL1",213,0)
 ;
"RTN","IBCNEHL1",214,0)
 ;  Set buffer symbol based on value returned from EC
"RTN","IBCNEHL1",215,0)
 S SYMBOL=MAP(IIVSTAT)
"RTN","IBCNEHL1",216,0)
 ;
"RTN","IBCNEHL1",217,0)
 ;  If there is an associated buffer entry, update the buffer entry w/
"RTN","IBCNEHL1",218,0)
 ;  response data
"RTN","IBCNEHL1",219,0)
 I BUFF'="" D RP^IBCNEBF(RIEN,"",BUFF)
"RTN","IBCNEHL1",220,0)
 ;
"RTN","IBCNEHL1",221,0)
 ;  If no associated buffer entry, create one & populate w/ response
"RTN","IBCNEHL1",222,0)
 ;  data (routine call sets IBFDA)
"RTN","IBCNEHL1",223,0)
 I BUFF="" D RP^IBCNEBF(RIEN,1) S BUFF=+IBFDA,UP(365,RIEN_",",.04)=BUFF
"RTN","IBCNEHL1",224,0)
 ;
"RTN","IBCNEHL1",225,0)
 ;  Set eIV Processed Date to now
"RTN","IBCNEHL1",226,0)
 S UP(355.33,BUFF_",",.15)=$$NOW^XLFDT()
"RTN","IBCNEHL1",227,0)
 D FILE^DIE("I","UP","ERROR")
"RTN","IBCNEHL1",228,0)
FILX ;
"RTN","IBCNEHL1",229,0)
 Q
"RTN","IBCNEHL1",230,0)
 ;
"RTN","IBCNEHL1",231,0)
 ; =================================================================
"RTN","IBCNEHL1",232,0)
WARN ;  Create and send a response processing error warning message
"RTN","IBCNEHL1",233,0)
 ;
"RTN","IBCNEHL1",234,0)
 ; Input Variables
"RTN","IBCNEHL1",235,0)
 ; ERROR, TRACE
"RTN","IBCNEHL1",236,0)
 ;
"RTN","IBCNEHL1",237,0)
 ; Output Variables
"RTN","IBCNEHL1",238,0)
 ; ERFLG=1
"RTN","IBCNEHL1",239,0)
 ;
"RTN","IBCNEHL1",240,0)
 N MCT,MSG,SUBCNT,VEN,XMY
"RTN","IBCNEHL1",241,0)
 S VEN=0,MCT=9,ERFLG=1,SUBCNT=""
"RTN","IBCNEHL1",242,0)
 S MSG(1)="IMPORTANT: Error While Processing Response Message from the EC"
"RTN","IBCNEHL1",243,0)
 S MSG(2)="-------------------------------------------------------------"
"RTN","IBCNEHL1",244,0)
 S MSG(3)="*** IRM *** Please contact Help Desk because the"
"RTN","IBCNEHL1",245,0)
 S MSG(4)="response message received from the Eligibility Communicator"
"RTN","IBCNEHL1",246,0)
 S MSG(5)="could not be processed.  Programming changes may be necessary"
"RTN","IBCNEHL1",247,0)
 S MSG(6)="to properly handle the response."
"RTN","IBCNEHL1",248,0)
 S MSG(7)="The associated Trace # is "_$S($G(TRACE)="":"Unknown",1:TRACE)_". If applicable,"
"RTN","IBCNEHL1",249,0)
 S MSG(8)="please review the response with the eIV Response Report by Trace#."
"RTN","IBCNEHL1",250,0)
 S MSG(9)=" "
"RTN","IBCNEHL1",251,0)
 F  S VEN=$O(ERROR("DIERR",VEN)) Q:'VEN  D
"RTN","IBCNEHL1",252,0)
 .S MCT=MCT+1,MSG(MCT)="Error:"
"RTN","IBCNEHL1",253,0)
 .F  S SUBCNT=$O(ERROR("DIERR",VEN,"TEXT",SUBCNT)) Q:'SUBCNT  S MCT=MCT+1,MSG(MCT)=ERROR("DIERR",VEN,"TEXT",SUBCNT)
"RTN","IBCNEHL1",254,0)
 .S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHL1",255,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","FILE"))'="" S MCT=MCT+1,MSG(MCT)="File: "_ERROR("DIERR",VEN,"PARAM","FILE")
"RTN","IBCNEHL1",256,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","IENS"))'="" S MCT=MCT+1,MSG(MCT)="IENS: "_ERROR("DIERR",VEN,"PARAM","IENS")
"RTN","IBCNEHL1",257,0)
 .I $G(ERROR("DIERR",VEN,"PARAM","FIELD"))'="" S MCT=MCT+1,MSG(MCT)="Field: "_ERROR("DIERR",VEN,"PARAM","FIELD")
"RTN","IBCNEHL1",258,0)
 .S MCT=MCT+1,MSG(MCT)=" "
"RTN","IBCNEHL1",259,0)
 .Q
"RTN","IBCNEHL1",260,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHL1",261,0)
 Q
"RTN","IBCNEHL1",262,0)
 ;
"RTN","IBCNEHL1",263,0)
 ; =================================================================
"RTN","IBCNEHL1",264,0)
UEACT ; Send warning msg if Unknown Error Action Code was received or
"RTN","IBCNEHL1",265,0)
 ; encountered problem filing date
"RTN","IBCNEHL1",266,0)
 ;
"RTN","IBCNEHL1",267,0)
 ; Input Variables
"RTN","IBCNEHL1",268,0)
 ; ERROR, IBIEN, IBQFL, RIEN, RSTYPE, TQDATA, TRACE
"RTN","IBCNEHL1",269,0)
 ;
"RTN","IBCNEHL1",270,0)
 ; Output Variables
"RTN","IBCNEHL1",271,0)
 ; ERFLG=1 (SET IN WARN TAG)
"RTN","IBCNEHL1",272,0)
 ;
"RTN","IBCNEHL1",273,0)
 N DFN,SYMBOL
"RTN","IBCNEHL1",274,0)
 D WARN  ; send warning msg
"RTN","IBCNEHL1",275,0)
 ;
"RTN","IBCNEHL1",276,0)
 ; If the response could not be created or there is no associated TQ entry, stop processing
"RTN","IBCNEHL1",277,0)
 I '$G(RIEN)!(TQDATA="") Q
"RTN","IBCNEHL1",278,0)
 ;
"RTN","IBCNEHL1",279,0)
 ;  For an original response, set the Transmission Queue Status to 'Response Received' &
"RTN","IBCNEHL1",280,0)
 ;  update remaining retries to comm failure (5)
"RTN","IBCNEHL1",281,0)
 I $G(RSTYPE)="O" D SST^IBCNEUT2(TQN,3),RSTA^IBCNEUT7(TQN)
"RTN","IBCNEHL1",282,0)
 ;
"RTN","IBCNEHL1",283,0)
 ; If it is an identification and policy is not active don't
"RTN","IBCNEHL1",284,0)
 ; create buffer entry
"RTN","IBCNEHL1",285,0)
 I IBQFL="I",IIVSTAT'=1 Q
"RTN","IBCNEHL1",286,0)
 ;
"RTN","IBCNEHL1",287,0)
 ; If unsolicited message or no buffer in TQ, create new buffer entry
"RTN","IBCNEHL1",288,0)
 I RSTYPE="U" S IBIEN=""
"RTN","IBCNEHL1",289,0)
 I IBIEN="" D  Q
"RTN","IBCNEHL1",290,0)
 .  S DFN=$P(TQDATA,U,2)        ; Determine Patient DFN
"RTN","IBCNEHL1",291,0)
 .  S SYMBOL=22 D BUF^IBCNEHL3  ; Create a new buffer entry
"RTN","IBCNEHL1",292,0)
 ;
"RTN","IBCNEHL1",293,0)
 ;Update buffer symbol
"RTN","IBCNEHL1",294,0)
 D BUFF^IBCNEUT2(IBIEN,22)
"RTN","IBCNEHL1",295,0)
 ;
"RTN","IBCNEHL1",296,0)
 Q
"RTN","IBCNEHL1",297,0)
AUTOUPD(RIEN) ;
"RTN","IBCNEHL1",298,0)
 ; Returns "1^file 2 ien^file 2.312 ien^2nd file 2.312 ien^Medicare flag^subsriber flag", if entry
"RTN","IBCNEHL1",299,0)
 ; in file 365 is eligible for auto-update, returns 0 otherwise.
"RTN","IBCNEHL1",300,0)
 ;
"RTN","IBCNEHL1",301,0)
 ; Medicare flag: 1 for Medicare, 0 otherwise
"RTN","IBCNEHL1",302,0)
 ; Subscriber flag: 1 if patient is the subscriber, 0 otherwise
"RTN","IBCNEHL1",303,0)
 ;
"RTN","IBCNEHL1",304,0)
 ; For non-Medicare response: 1st file 2.312 ien is set, 2nd file 2.312 ien is empty, pieces 5-7 are empty
"RTN","IBCNEHL1",305,0)
 ; For Medicare response: 1st file 2.312 ien contains ien for Medicare Part A, 2nd file 2.312 ien contains ien for Medicare Part B,
"RTN","IBCNEHL1",306,0)
 ;                        either one may be empty, but at least one of them is set if entry is eligible.
"RTN","IBCNEHL1",307,0)
 ;
"RTN","IBCNEHL1",308,0)
 ; RIEN - ien in file 365
"RTN","IBCNEHL1",309,0)
 ;
"RTN","IBCNEHL1",310,0)
 N APPIEN,GDATA,GIEN,GNAME,GNUM,GNUM1,GOK,IEN2,IEN312,IEN36,IDATA0,IDATA3,ISSUB,MWNRA,MWNRB,MWNRIEN,MWNRTYP
"RTN","IBCNEHL1",311,0)
 N ONEPOL,PIEN,RDATA0,RDATA1,RES,TQIEN
"RTN","IBCNEHL1",312,0)
 S RES=0
"RTN","IBCNEHL1",313,0)
 I +$G(RIEN)'>0 Q RES  ; invalid ien for file 365
"RTN","IBCNEHL1",314,0)
 I $G(IIVSTAT)'=1 Q RES ; only auto-update 'active policy' responses
"RTN","IBCNEHL1",315,0)
 S RDATA0=$G(^IBCN(365,RIEN,0)),RDATA1=$G(^IBCN(365,RIEN,1))
"RTN","IBCNEHL1",316,0)
 S PIEN=$P(RDATA0,U,3) I +PIEN>0 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNEHL1",317,0)
 I +$G(APPIEN)'>0 Q RES  ; couldn't find eIV application entry
"RTN","IBCNEHL1",318,0)
 ; Check dictionary 365.1 MANUAL REQUEST DATE/TIME Flag, Quit if Set.
"RTN","IBCNEHL1",319,0)
 I $P(RDATA0,U,5)'="",$P($G(^IBCN(365.1,$P(RDATA0,U,5),3)),U,1)'="" Q RES
"RTN","IBCNEHL1",320,0)
 I $P(^IBE(365.12,PIEN,1,APPIEN,0),U,7)=0 Q RES  ; auto-accept is OFF
"RTN","IBCNEHL1",321,0)
 S IEN2=$P(RDATA0,U,2) I +IEN2'>0 Q RES  ; couldn't find patient
"RTN","IBCNEHL1",322,0)
 S MWNRIEN=$P($G(^IBE(350.9,1,51)),U,25),MWNRTYP=0,(MWNRA,MWNRB)=""
"RTN","IBCNEHL1",323,0)
 I PIEN=MWNRIEN S MWNRTYP=$$ISMCR^IBCNEHLU(RIEN)
"RTN","IBCNEHL1",324,0)
 S ONEPOL=$$ONEPOL^IBCNEHLU(PIEN,IEN2)
"RTN","IBCNEHL1",325,0)
 ; try to find a matching pat. insurance
"RTN","IBCNEHL1",326,0)
 S IEN36="" F  S IEN36=$O(^DIC(36,"AC",PIEN,IEN36)) Q:IEN36=""!(RES>0)  D
"RTN","IBCNEHL1",327,0)
 .S IEN312="" F  S IEN312=$O(^DPT(IEN2,.312,"B",IEN36,IEN312)) Q:IEN312=""!(RES>0&('+MWNRTYP))  D
"RTN","IBCNEHL1",328,0)
 ..S IDATA0=$G(^DPT(IEN2,.312,IEN312,0)),IDATA3=$G(^DPT(IEN2,.312,IEN312,3))
"RTN","IBCNEHL1",329,0)
 ..I $$EXPIRED^IBCNEDE2($P(IDATA0,U,4)) Q  ; Insurance policy has expired
"RTN","IBCNEHL1",330,0)
 ..S ISSUB=$$PATISSUB^IBCNEHLU(IDATA0)
"RTN","IBCNEHL1",331,0)
 ..; Patient is the subscriber
"RTN","IBCNEHL1",332,0)
 ..I ISSUB,'$$CHK1 Q
"RTN","IBCNEHL1",333,0)
 ..; Patient is the dependent
"RTN","IBCNEHL1",334,0)
 ..I 'ISSUB,'$$CHK2(MWNRTYP) Q
"RTN","IBCNEHL1",335,0)
 ..; check group number
"RTN","IBCNEHL1",336,0)
 ..S GNUM=$P(RDATA1,U,7),GIEN=+$P(IDATA0,U,18),GOK=1
"RTN","IBCNEHL1",337,0)
 ..; check non-Medicare group number
"RTN","IBCNEHL1",338,0)
 ..I '+MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",339,0)
 ...I 'ONEPOL D
"RTN","IBCNEHL1",340,0)
 ....I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",341,0)
 ....S GNUM1=$P($G(^IBA(355.3,GIEN,0)),U,4)
"RTN","IBCNEHL1",342,0)
 ....I GNUM=""!(GNUM1="")!(GNUM'=GNUM1) S GOK=0
"RTN","IBCNEHL1",343,0)
 ....Q
"RTN","IBCNEHL1",344,0)
 ...I ONEPOL D
"RTN","IBCNEHL1",345,0)
 ....I GNUM'="",GIEN'="" S GNUM1=$P($G(^IBA(355.3,GIEN,0)),U,4) I GNUM1'="",GNUM'=GNUM1 S GOK=0
"RTN","IBCNEHL1",346,0)
 ....Q
"RTN","IBCNEHL1",347,0)
 ...Q
"RTN","IBCNEHL1",348,0)
 ..; check for Medicare part A/B
"RTN","IBCNEHL1",349,0)
 ..I +MWNRTYP D  Q:'GOK  ; Group number doesn't match
"RTN","IBCNEHL1",350,0)
 ...I GIEN'>0 S GOK=0 Q
"RTN","IBCNEHL1",351,0)
 ...S GDATA=$G(^IBA(355.3,GIEN,0))
"RTN","IBCNEHL1",352,0)
 ...I $P(GDATA,U,14)="A" D
"RTN","IBCNEHL1",353,0)
 ....I $P(MWNRTYP,U,2)="MA"!($P(MWNRTYP,U,2)="B") S MWNRA=IEN312 Q
"RTN","IBCNEHL1",354,0)
 ....S GOK=0
"RTN","IBCNEHL1",355,0)
 ....Q
"RTN","IBCNEHL1",356,0)
 ...I $P(GDATA,U,14)="B" D
"RTN","IBCNEHL1",357,0)
 ....I $P(MWNRTYP,U,2)="MB"!($P(MWNRTYP,U,2)="B") S MWNRB=IEN312 Q
"RTN","IBCNEHL1",358,0)
 ....S GOK=0
"RTN","IBCNEHL1",359,0)
 ....Q
"RTN","IBCNEHL1",360,0)
 ...Q
"RTN","IBCNEHL1",361,0)
 ..S RES=1_U_IEN2_U_$S(+MWNRTYP:MWNRA_U_MWNRB_U_1,1:IEN312_U_U_0)
"RTN","IBCNEHL1",362,0)
 ..S $P(RES,U,6)=ISSUB
"RTN","IBCNEHL1",363,0)
 ..Q
"RTN","IBCNEHL1",364,0)
 .Q
"RTN","IBCNEHL1",365,0)
 Q RES
"RTN","IBCNEHL1",366,0)
 ;
"RTN","IBCNEHL1",367,0)
CHK1() ; check auto-update criteria for patient who is the subscriber
"RTN","IBCNEHL1",368,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNEHL1",369,0)
 ;
"RTN","IBCNEHL1",370,0)
 ; returns 1 if givent policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNEHL1",371,0)
 N RES
"RTN","IBCNEHL1",372,0)
 S RES=0
"RTN","IBCNEHL1",373,0)
 I $P(RDATA1,U,5)'=$P(IDATA0,U,2) G CHK1X  ; Subscriber ID doesn't match
"RTN","IBCNEHL1",374,0)
 I $P(RDATA1,U,2)'=$P(IDATA3,U) G CHK1X  ; DOB doesn't match
"RTN","IBCNEHL1",375,0)
 I '$$NAMECMP^IBCNEHLU($P(RDATA1,U),$P(IDATA0,U,17)) G CHK1X  ; Insured's name doesn't match
"RTN","IBCNEHL1",376,0)
 S RES=1
"RTN","IBCNEHL1",377,0)
CHK1X ;
"RTN","IBCNEHL1",378,0)
 Q RES
"RTN","IBCNEHL1",379,0)
 ;
"RTN","IBCNEHL1",380,0)
CHK2(MWNRTYP) ; check auto-update criteria for patient who is not the subscriber
"RTN","IBCNEHL1",381,0)
 ; called from tag AUTOUPD, uses variables defined there
"RTN","IBCNEHL1",382,0)
 ;
"RTN","IBCNEHL1",383,0)
 ; returns 1 if policy satisfies auto-update criteria, returns 0 otherwise
"RTN","IBCNEHL1",384,0)
 N DOB,ID,IDATA5,IENS,NAME,PDOB,PNAME,RES
"RTN","IBCNEHL1",385,0)
 S RES=0
"RTN","IBCNEHL1",386,0)
 S IDATA5=$G(^DPT(IEN2,.312,IEN312,5))
"RTN","IBCNEHL1",387,0)
 S IENS=IEN2_","
"RTN","IBCNEHL1",388,0)
 S ID=$P(RDATA1,U,5)
"RTN","IBCNEHL1",389,0)
 I ID'=$P(IDATA0,U,2),ID'=$P(IDATA5,U) G CHK2X  ; both Subscriber ID and Patient ID don't match
"RTN","IBCNEHL1",390,0)
 S DOB=$P(RDATA1,U,2),PDOB=$$GET1^DIQ(2,IENS,.03,"I")
"RTN","IBCNEHL1",391,0)
 I DOB'=$P(IDATA3,U),DOB'=PDOB G CHK2X  ; both Subscriber and Patient DOB don't match
"RTN","IBCNEHL1",392,0)
 S NAME=$P(RDATA1,U),PNAME=$$GET1^DIQ(2,IENS,.01)
"RTN","IBCNEHL1",393,0)
 I '+MWNRTYP,'$$NAMECMP^IBCNEHLU(NAME,$P(IDATA0,U,17)),'$$NAMECMP^IBCNEHLU(NAME,PNAME) G CHK2X  ; non-Medicare, both Subscriber and Patient name don't match
"RTN","IBCNEHL1",394,0)
 I +MWNRTYP,'$$NAMECMP^IBCNEHLU(NAME,PNAME) G CHK2X  ; Medicare, Patient name doesn't match
"RTN","IBCNEHL1",395,0)
 S RES=1
"RTN","IBCNEHL1",396,0)
CHK2X ;
"RTN","IBCNEHL1",397,0)
 Q RES
"RTN","IBCNEHL1",398,0)
 ;
"RTN","IBCNEHL1",399,0)
UPDIREC(RIEN,IEN312) ; update insurance record field in transmission queue (365.1/.13)
"RTN","IBCNEHL1",400,0)
 ; RIEN - ien in eIV Response file (365)
"RTN","IBCNEHL1",401,0)
 ; IEN312 - ien in pat. insurance multiple (2.312)
"RTN","IBCNEHL1",402,0)
 ;
"RTN","IBCNEHL1",403,0)
 N DATA,ERROR,IENS
"RTN","IBCNEHL1",404,0)
 I RIEN'>0!(IEN312'>0) Q
"RTN","IBCNEHL1",405,0)
 S IENS=$P($G(^IBCN(365,RIEN,0)),U,5)_"," I IENS="," Q
"RTN","IBCNEHL1",406,0)
 S DATA(365.1,IENS,.13)=IEN312
"RTN","IBCNEHL1",407,0)
 D FILE^DIE("ET","DATA","ERROR")
"RTN","IBCNEHL1",408,0)
 Q
"RTN","IBCNEHL1",409,0)
 ;
"RTN","IBCNEHL1",410,0)
EBFILE(DFN,IEN312,RIEN,AFLG) ; file eligibility/benefit data from file 365 into file 2.312
"RTN","IBCNEHL1",411,0)
 ; DFN - file 2 ien
"RTN","IBCNEHL1",412,0)
 ; IEN312 - file 2.312 ien
"RTN","IBCNEHL1",413,0)
 ; RIEN - file 365 ien
"RTN","IBCNEHL1",414,0)
 ; AFLG - 1 if called from autoupdate, 0 if called from ins. buffer process entry
"RTN","IBCNEHL1",415,0)
 ; Returns "" on success, ERFLG on failure. Also called from ACCEPT^IBCNBAR for manual processing of ins. buffer entry.
"RTN","IBCNEHL1",416,0)
 ;
"RTN","IBCNEHL1",417,0)
 ;
"RTN","IBCNEHL1",418,0)
 N DA,DIK,DATA,DATA1,EBIENS,ERFLG,ERROR,GIEN,GSKIP,IENROOT,IENS,IENSTR,TYPE,TYPE1,Z,Z1,Z2
"RTN","IBCNEHL1",419,0)
 ; delete existing EB data
"RTN","IBCNEHL1",420,0)
 S DIK="^DPT("_DFN_",.312,"_IEN312_",6,",DA(2)=DFN,DA(1)=IEN312
"RTN","IBCNEHL1",421,0)
 ;S Z="" F  S Z=$O(^DPT(DFN,.312,IEN312,6,"B",Z)) Q:Z=""  S DA=$O(^DPT(DFN,.312,IEN312,6,"B",Z,"")) D ^DIK
"RTN","IBCNEHL1",422,0)
 S DA=0 F  S DA=$O(^DPT(DFN,.312,IEN312,6,DA)) Q:DA=""!(DA?1.A)  D ^DIK
"RTN","IBCNEHL1",423,0)
 ; file new EB data
"RTN","IBCNEHL1",424,0)
 S IENSTR=IEN312_","_DFN_","
"RTN","IBCNEHL1",425,0)
 S GIEN=+$P($G(^DPT(DFN,.312,IEN312,0)),U,18)
"RTN","IBCNEHL1",426,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,2,"B",Z)) Q:Z=""!$G(ERFLG)  D
"RTN","IBCNEHL1",427,0)
 .S EBIENS=$O(^IBCN(365,RIEN,2,"B",Z,""))_","_RIEN_","
"RTN","IBCNEHL1",428,0)
 .; if filing Medicare Part A/B data, make sure we only file the correct EB group
"RTN","IBCNEHL1",429,0)
 .S GSKIP=0 I GIEN>0 D
"RTN","IBCNEHL1",430,0)
 ..S TYPE=$$GET1^DIQ(365.02,EBIENS,.05)
"RTN","IBCNEHL1",431,0)
 ..S TYPE1=$P($G(^IBA(355.3,GIEN,0)),U,14)
"RTN","IBCNEHL1",432,0)
 ..I TYPE="MA",TYPE1="B" S GSKIP=1
"RTN","IBCNEHL1",433,0)
 ..I TYPE="MB",TYPE1="A" S GSKIP=1
"RTN","IBCNEHL1",434,0)
 ..Q
"RTN","IBCNEHL1",435,0)
 .I GSKIP Q  ; wrong Medicare Part A/B EB group - skip it
"RTN","IBCNEHL1",436,0)
 .D GETS^DIQ(365.02,EBIENS,"**",,"DATA","ERROR") I $D(ERROR) D:AFLG WARN Q
"RTN","IBCNEHL1",437,0)
 .; make sure we have data to file
"RTN","IBCNEHL1",438,0)
 .I '$D(DATA(365.02)) Q
"RTN","IBCNEHL1",439,0)
 .S IENS="+1,"_IENSTR,Z1=$O(DATA(365.02,"")) M DATA1(2.322,IENS)=DATA(365.02,Z1)
"RTN","IBCNEHL1",440,0)
 .D UPDATE^DIE("E","DATA1","IENROOT","ERROR") I $D(ERROR) D:AFLG WARN Q
"RTN","IBCNEHL1",441,0)
 .S IENS="+1,"_IENROOT(1)_","_IENSTR K DATA1,IENROOT
"RTN","IBCNEHL1",442,0)
 .S Z2="" F  S Z2=$O(DATA(365.26,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",443,0)
 ..M DATA1(2.3226,IENS)=DATA(365.26,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN
"RTN","IBCNEHL1",444,0)
 ..Q
"RTN","IBCNEHL1",445,0)
 .S Z2="" F  S Z2=$O(DATA(365.27,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",446,0)
 ..M DATA1(2.3227,IENS)=DATA(365.27,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN
"RTN","IBCNEHL1",447,0)
 ..Q
"RTN","IBCNEHL1",448,0)
 .S Z2="" F  S Z2=$O(DATA(365.28,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",449,0)
 ..M DATA1(2.3228,IENS)=DATA(365.28,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN
"RTN","IBCNEHL1",450,0)
 ..Q
"RTN","IBCNEHL1",451,0)
 .S Z2="" F  S Z2=$O(DATA(365.29,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",452,0)
 ..M DATA1(2.3229,IENS)=DATA(365.29,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN
"RTN","IBCNEHL1",453,0)
 ..Q
"RTN","IBCNEHL1",454,0)
 .S Z2="" F  S Z2=$O(DATA(365.291,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",455,0)
 ..M DATA1(2.32291,IENS)=DATA(365.291,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN
"RTN","IBCNEHL1",456,0)
 ..Q
"RTN","IBCNEHL1",457,0)
 .S Z2="" F  S Z2=$O(DATA(365.292,Z2)) Q:Z2=""!$G(ERFLG)  D
"RTN","IBCNEHL1",458,0)
 ..M DATA1(2.32292,IENS)=DATA(365.292,Z2) D UPDATE^DIE("E","DATA1",,"ERROR") K DATA1 I $D(ERROR) D:AFLG WARN
"RTN","IBCNEHL1",459,0)
 ..Q
"RTN","IBCNEHL1",460,0)
 .K DATA
"RTN","IBCNEHL1",461,0)
 .Q
"RTN","IBCNEHL1",462,0)
 Q $G(ERFLG)
"RTN","IBCNEHL1",463,0)
 ;
"RTN","IBCNEHL1",464,0)
LCKERR ; send locking error message
"RTN","IBCNEHL1",465,0)
 N MSG,XMY
"RTN","IBCNEHL1",466,0)
 S MSG(1)="WARNING: Unable to Auto-file Response Message from the EC"
"RTN","IBCNEHL1",467,0)
 S MSG(2)="---------------------------------------------------------"
"RTN","IBCNEHL1",468,0)
 S MSG(3)="Failed to lock patient insurance entry:"
"RTN","IBCNEHL1",469,0)
 S MSG(4)="  Patient name - "_$$GET1^DIQ(2,DFN_",",.01)
"RTN","IBCNEHL1",470,0)
 S MSG(5)="  Insurance - "_$$GET1^DIQ(2.312,IENS,.01)
"RTN","IBCNEHL1",471,0)
 S MSG(6)="  IENS - "_$S($G(IENS)="":"Unknown",1:IENS)
"RTN","IBCNEHL1",472,0)
 S MSG(7)=" "
"RTN","IBCNEHL1",473,0)
 S MSG(8)="The response will be filed into Insurance Buffer instead."
"RTN","IBCNEHL1",474,0)
 S MSG(9)=" "
"RTN","IBCNEHL1",475,0)
 D MSG^IBCNEUT5(MGRP,MSG(1),"MSG(",,.XMY)
"RTN","IBCNEHL1",476,0)
 Q
"RTN","IBCNEHL2")
0^22^B62824990^B53025337
"RTN","IBCNEHL2",1,0)
IBCNEHL2 ;DAOU/ALA - HL7 Process Incoming RPI Msgs (cont.) ;26-JUN-2002  ; Compiled December 16, 2004 15:29:37
"RTN","IBCNEHL2",2,0)
 ;;2.0;INTEGRATED BILLING;**300,345,416,438**;21-MAR-94;Build 52
"RTN","IBCNEHL2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL2",4,0)
 ;
"RTN","IBCNEHL2",5,0)
 ;**Program Description**
"RTN","IBCNEHL2",6,0)
 ;  This pgm will process the indiv segments of the
"RTN","IBCNEHL2",7,0)
 ;  incoming eIV response msgs.
"RTN","IBCNEHL2",8,0)
 ;
"RTN","IBCNEHL2",9,0)
 ; * Each of these tags are called by IBCNEHL1.
"RTN","IBCNEHL2",10,0)
 ; 
"RTN","IBCNEHL2",11,0)
 ;  This routine is based on IBCNEHLP which was introduced with patch 184, and subsequently
"RTN","IBCNEHL2",12,0)
 ;  patched with patches 252 and 271.  IBCNEHLP is obsolete and deleted with patch 300.
"RTN","IBCNEHL2",13,0)
 ;
"RTN","IBCNEHL2",14,0)
 ;  Variables
"RTN","IBCNEHL2",15,0)
 ;    SEG = HL7 Seg Name
"RTN","IBCNEHL2",16,0)
 ;    MSGID = Original Msg Control ID
"RTN","IBCNEHL2",17,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL2",18,0)
 ;    ERTXT = Error Msg Text
"RTN","IBCNEHL2",19,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL2",20,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL2",21,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL2",22,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL2",23,0)
 ;    IBSEG = Array of the segment
"RTN","IBCNEHL2",24,0)
 ;
"RTN","IBCNEHL2",25,0)
 Q  ; No direct calls
"RTN","IBCNEHL2",26,0)
 ;
"RTN","IBCNEHL2",27,0)
MSA(ERACT,ERCON,ERROR,ERTXT,IBSEG,MGRP,RIEN,TRACE) ;  Process the MSA seg
"RTN","IBCNEHL2",28,0)
 ;
"RTN","IBCNEHL2",29,0)
 ;  Input:
"RTN","IBCNEHL2",30,0)
 ;  IBSEG,MGRP
"RTN","IBCNEHL2",31,0)
 ;
"RTN","IBCNEHL2",32,0)
 ;  Output:
"RTN","IBCNEHL2",33,0)
 ;  ERACT,ERCON,ERROR,ERTXT,RIEN,TRACE,ACK
"RTN","IBCNEHL2",34,0)
 ;
"RTN","IBCNEHL2",35,0)
 D MSA^IBCNEHL4
"RTN","IBCNEHL2",36,0)
 Q
"RTN","IBCNEHL2",37,0)
 ;
"RTN","IBCNEHL2",38,0)
CTD(ERROR,IBSEG,RIEN) ; Process the CTD seg
"RTN","IBCNEHL2",39,0)
 ;
"RTN","IBCNEHL2",40,0)
 ; Input:
"RTN","IBCNEHL2",41,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",42,0)
 ;
"RTN","IBCNEHL2",43,0)
 ; Output:
"RTN","IBCNEHL2",44,0)
 ; ERROR
"RTN","IBCNEHL2",45,0)
 ;
"RTN","IBCNEHL2",46,0)
 N CTNAME,CTQUAL,CTNUM,CTQIEN,D1,DA,DATA,DIC,DILN,DISYS,DLAYGO,FFL,FLD,IENS,II,RSUPDT,X,Y
"RTN","IBCNEHL2",47,0)
 ;
"RTN","IBCNEHL2",48,0)
 ;  Parse out data from seg
"RTN","IBCNEHL2",49,0)
 S CTNAME=$G(IBSEG(3)),CTQUAL=$P($G(IBSEG(6)),$E(HLECH),9),CTNUM=$P($G(IBSEG(6)),$E(HLECH))
"RTN","IBCNEHL2",50,0)
 I $TR(CTNAME," ")="" S CTNAME="NOT SPECIFIED"
"RTN","IBCNEHL2",51,0)
 S CTQIEN=$$FIND1^DIC(365.021,"","X",CTQUAL)
"RTN","IBCNEHL2",52,0)
 I CTNAME[$E(HLECH) S CTNAME=$$DECHL7($$FMNAME^HLFNC(CTNAME,HLECH))
"RTN","IBCNEHL2",53,0)
 S CTNAME=$E(CTNAME,1,32)
"RTN","IBCNEHL2",54,0)
 ;
"RTN","IBCNEHL2",55,0)
 ;  Look up contact person
"RTN","IBCNEHL2",56,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",3,",DIC(0)="LZ",DLAYGO=365.03
"RTN","IBCNEHL2",57,0)
 I '$D(^IBCN(365,DA(1),3,0)) S ^IBCN(365,DA(1),3,0)="^365.03^^"
"RTN","IBCNEHL2",58,0)
 S X=CTNAME D ^DIC
"RTN","IBCNEHL2",59,0)
 S DA=+Y,DATA=^IBCN(365,DA(1),3,DA,0),FLD=2,FFL=0
"RTN","IBCNEHL2",60,0)
 ;
"RTN","IBCNEHL2",61,0)
 ;  Check if contact already has this communication qualifier on file
"RTN","IBCNEHL2",62,0)
 F II=2,4,6 I $P(DATA,U,II)=CTQIEN S FLD=II,FFL=1 Q
"RTN","IBCNEHL2",63,0)
 I 'FFL F II=2,4,6 I $P(DATA,U,II)="" S FLD=II Q
"RTN","IBCNEHL2",64,0)
 ;
"RTN","IBCNEHL2",65,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",66,0)
 S RSUPDT(365.03,IENS,".0"_(FLD+1))=CTNUM
"RTN","IBCNEHL2",67,0)
 S RSUPDT(365.03,IENS,".0"_FLD)=CTQIEN
"RTN","IBCNEHL2",68,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",69,0)
CTDX ;
"RTN","IBCNEHL2",70,0)
 Q
"RTN","IBCNEHL2",71,0)
 ;
"RTN","IBCNEHL2",72,0)
PID(ERFLG,ERROR,IBSEG,RIEN) ;  Process the PID seg
"RTN","IBCNEHL2",73,0)
 ;
"RTN","IBCNEHL2",74,0)
 ; Input:
"RTN","IBCNEHL2",75,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",76,0)
 ;
"RTN","IBCNEHL2",77,0)
 ; Output:
"RTN","IBCNEHL2",78,0)
 ; ERFLG,ERROR
"RTN","IBCNEHL2",79,0)
 ;
"RTN","IBCNEHL2",80,0)
 D PID^IBCNEHL4
"RTN","IBCNEHL2",81,0)
 Q
"RTN","IBCNEHL2",82,0)
 ;
"RTN","IBCNEHL2",83,0)
GT1(ERROR,IBSEG,RIEN,SUBID) ;  Process the GT1 Guarantor seg
"RTN","IBCNEHL2",84,0)
 ;
"RTN","IBCNEHL2",85,0)
 ; Input:
"RTN","IBCNEHL2",86,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",87,0)
 ;
"RTN","IBCNEHL2",88,0)
 ; Output:
"RTN","IBCNEHL2",89,0)
 ; ERROR,SUBID
"RTN","IBCNEHL2",90,0)
 ;
"RTN","IBCNEHL2",91,0)
 D GT1^IBCNEHL4
"RTN","IBCNEHL2",92,0)
 Q
"RTN","IBCNEHL2",93,0)
 ;
"RTN","IBCNEHL2",94,0)
IN1(ERROR,IBSEG,RIEN,SUBID) ;  Process the IN1 Insurance seg
"RTN","IBCNEHL2",95,0)
 ;
"RTN","IBCNEHL2",96,0)
 ; Input:
"RTN","IBCNEHL2",97,0)
 ; IBSEG,RIEN,SUBID,ACK
"RTN","IBCNEHL2",98,0)
 ;
"RTN","IBCNEHL2",99,0)
 ; Output:
"RTN","IBCNEHL2",100,0)
 ; ERROR
"RTN","IBCNEHL2",101,0)
 ;
"RTN","IBCNEHL2",102,0)
 N COB,EFFDT,EXPDT,GNAME,GNUMB,MBRID,PAYRID,PYRNM,RSUPDT,SRVDT
"RTN","IBCNEHL2",103,0)
 N PYLEDT,CERDT,RELTN
"RTN","IBCNEHL2",104,0)
 ;
"RTN","IBCNEHL2",105,0)
 ; Austin sending responses with an error indicator will populate IBSEG(3) w/ 
"RTN","IBCNEHL2",106,0)
 ;9 zeros in order to send the HL7 required field when the payer does not 
"RTN","IBCNEHL2",107,0)
 ;send a value for this field
"RTN","IBCNEHL2",108,0)
 S MBRID=$$DECHL7($G(IBSEG(3))) I ACK="AE",($TR(MBRID,0)="") S MBRID=""
"RTN","IBCNEHL2",109,0)
 S PAYRID=$G(IBSEG(4)),PYRNM=$G(IBSEG(5))
"RTN","IBCNEHL2",110,0)
 S GNAME=$$DECHL7($G(IBSEG(10))),GNUMB=$$DECHL7($G(IBSEG(9)))
"RTN","IBCNEHL2",111,0)
 ; make sure group number is not longer than 17 chars, send mailman notification
"RTN","IBCNEHL2",112,0)
 ; if trucncation is necessary
"RTN","IBCNEHL2",113,0)
 I $L(GNUMB)>17 D TRNCWARN^IBCNEHLU(GNUMB,$G(TRACE)) S GNUMB=$E(GNUMB,1,17)
"RTN","IBCNEHL2",114,0)
 S EFFDT=$G(IBSEG(13)),EXPDT=$G(IBSEG(14))
"RTN","IBCNEHL2",115,0)
 S COB=$G(IBSEG(23)),SRVDT=$G(IBSEG(27))
"RTN","IBCNEHL2",116,0)
 S PYLEDT=$G(IBSEG(30)),RELTN=$G(IBSEG(18))
"RTN","IBCNEHL2",117,0)
 ;
"RTN","IBCNEHL2",118,0)
 ; Relationship codes sent through the HL7 msg are X12 codes
"RTN","IBCNEHL2",119,0)
 ; X12 codes from the interface that are special cases: "21"=unknown, "40"=cadaver donor
"RTN","IBCNEHL2",120,0)
 S RELTN=$S(RELTN="21":"",RELTN="40":"G8",1:RELTN)
"RTN","IBCNEHL2",121,0)
 S EFFDT=$$FMDATE^HLFNC(EFFDT),EXPDT=$$FMDATE^HLFNC(EXPDT)
"RTN","IBCNEHL2",122,0)
 S SRVDT=$$FMDATE^HLFNC(SRVDT),PYLEDT=$$FMDATE^HLFNC(PYLEDT)
"RTN","IBCNEHL2",123,0)
 ;
"RTN","IBCNEHL2",124,0)
 S RSUPDT(365,RIEN_",",1.05)=$S($G(SUBID)'="":SUBID,1:MBRID)
"RTN","IBCNEHL2",125,0)
 S RSUPDT(365,RIEN_",",1.07)=GNUMB
"RTN","IBCNEHL2",126,0)
 S RSUPDT(365,RIEN_",",1.06)=GNAME,RSUPDT(365,RIEN_",",1.11)=EFFDT
"RTN","IBCNEHL2",127,0)
 S RSUPDT(365,RIEN_",",1.12)=EXPDT,RSUPDT(365,RIEN_",",1.1)=SRVDT
"RTN","IBCNEHL2",128,0)
 S RSUPDT(365,RIEN_",",1.19)=PYLEDT
"RTN","IBCNEHL2",129,0)
 S RSUPDT(365,RIEN_",",1.13)=COB,RSUPDT(365,RIEN_",",1.18)=MBRID
"RTN","IBCNEHL2",130,0)
 S RSUPDT(365,RIEN_",",8.01)=RELTN
"RTN","IBCNEHL2",131,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",132,0)
IN1X ;
"RTN","IBCNEHL2",133,0)
 Q
"RTN","IBCNEHL2",134,0)
 ;
"RTN","IBCNEHL2",135,0)
IN3(ERROR,IBSEG,RIEN) ;  Process IN3 Addt'l Insurance - Cert Seg
"RTN","IBCNEHL2",136,0)
 ;
"RTN","IBCNEHL2",137,0)
 ; Input:
"RTN","IBCNEHL2",138,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL2",139,0)
 ;
"RTN","IBCNEHL2",140,0)
 ; Output:
"RTN","IBCNEHL2",141,0)
 ; ERROR
"RTN","IBCNEHL2",142,0)
 ;
"RTN","IBCNEHL2",143,0)
 N CRDT,RSUPDT
"RTN","IBCNEHL2",144,0)
 ;
"RTN","IBCNEHL2",145,0)
 S CRDT=$G(IBSEG(7))
"RTN","IBCNEHL2",146,0)
 S CRDT=$$FMDATE^HLFNC(CRDT)
"RTN","IBCNEHL2",147,0)
 S RSUPDT(365,RIEN_",",1.17)=CRDT
"RTN","IBCNEHL2",148,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL2",149,0)
IN3X ;
"RTN","IBCNEHL2",150,0)
 Q
"RTN","IBCNEHL2",151,0)
 ;
"RTN","IBCNEHL2",152,0)
ZEB(EBDA,ERROR,IBSEG,RIEN) ;  Process the ZEB Elig/Benefit seg
"RTN","IBCNEHL2",153,0)
 ;
"RTN","IBCNEHL2",154,0)
 ; Input:
"RTN","IBCNEHL2",155,0)
 ; IBSEG,IIVSTAT,RIEN
"RTN","IBCNEHL2",156,0)
 ;
"RTN","IBCNEHL2",157,0)
 ; Output:
"RTN","IBCNEHL2",158,0)
 ; EBDA,ERROR
"RTN","IBCNEHL2",159,0)
 ;
"RTN","IBCNEHL2",160,0)
 N D1,DA,DIC,DILN,DISYS,DLAYGO,EBN,IENS,II,MSG,PRMODS,RSUPDT,STC,STCSTR,SUBJECT,X,XMY,Y,MA
"RTN","IBCNEHL2",161,0)
 ;
"RTN","IBCNEHL2",162,0)
 ; Set a default eIV Status value of # ("V")
"RTN","IBCNEHL2",163,0)
 I IIVSTAT="" D
"RTN","IBCNEHL2",164,0)
 .   I IBSEG(7)'="eIV Eligibility Determination" S IIVSTAT="V" Q
"RTN","IBCNEHL2",165,0)
 .   I $F("_1_6_V_","_"_IBSEG(3)_"_") S IIVSTAT=IBSEG(3) Q
"RTN","IBCNEHL2",166,0)
 .   ; Unknown code received from the EC
"RTN","IBCNEHL2",167,0)
 .   S SUBJECT="eIV: Invalid Eligibility Status flag"
"RTN","IBCNEHL2",168,0)
 .   S MSG(1)="An invalid Eligibility Status flag '"_$G(IBSEG(3))_"' was received for site "_$P($$SITE^VASITE,"^",3)_","
"RTN","IBCNEHL2",169,0)
 .   S MSG(2)="trace number "_$G(TRACE,"unknown")_" and message control id "_$G(MSGID,"unknown")_"."
"RTN","IBCNEHL2",170,0)
 .   S MSG(3)="It has been interpreted as an ambiguous response in VistA."
"RTN","IBCNEHL2",171,0)
 .   S XMY("FSCECADMIN@mail.va.gov")=""
"RTN","IBCNEHL2",172,0)
 .   D MSG^IBCNEUT5("",SUBJECT,"MSG(",,.XMY)
"RTN","IBCNEHL2",173,0)
 .   S IIVSTAT="V"
"RTN","IBCNEHL2",174,0)
 ;
"RTN","IBCNEHL2",175,0)
 ; Process the ZEB
"RTN","IBCNEHL2",176,0)
 S EBN=$G(IBSEG(2))
"RTN","IBCNEHL2",177,0)
 S DA(1)=RIEN,DIC="^IBCN(365,"_DA(1)_",2,",DIC(0)="L",DLAYGO=365.02
"RTN","IBCNEHL2",178,0)
 I '$D(^IBCN(365,DA(1),2,0)) S ^IBCN(365,DA(1),2,0)="^365.02^^"
"RTN","IBCNEHL2",179,0)
 S X=EBN D ^DIC
"RTN","IBCNEHL2",180,0)
 S DA=+Y,EBDA=DA
"RTN","IBCNEHL2",181,0)
 ;
"RTN","IBCNEHL2",182,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",183,0)
 ;
"RTN","IBCNEHL2",184,0)
 ; decode plan description ZEB segment
"RTN","IBCNEHL2",185,0)
 S IBSEG(7)=$$DECHL7($G(IBSEG(7)))
"RTN","IBCNEHL2",186,0)
 S RSUPDT(365.02,IENS,".02")=$P($G(IBSEG(3)),HLCMP) ; elig/benefit info
"RTN","IBCNEHL2",187,0)
 S RSUPDT(365.02,IENS,".03")=$P($G(IBSEG(4)),HLCMP) ; coverage level
"RTN","IBCNEHL2",188,0)
 S RSUPDT(365.02,IENS,".05")=$P($G(IBSEG(6)),HLCMP) ; insurance type
"RTN","IBCNEHL2",189,0)
 S RSUPDT(365.02,IENS,".06")=$G(IBSEG(7))           ; plan coverage
"RTN","IBCNEHL2",190,0)
 S RSUPDT(365.02,IENS,".07")=$P($G(IBSEG(8)),HLCMP) ; time period qualifier
"RTN","IBCNEHL2",191,0)
 S MA=$G(IBSEG(9)) I $TR(MA," ","")'="" S MA=$J(MA,0,2)
"RTN","IBCNEHL2",192,0)
 S RSUPDT(365.02,IENS,".08")=$$NUMCHK(MA)            ; Monetary amt
"RTN","IBCNEHL2",193,0)
 S RSUPDT(365.02,IENS,".09")=$$NUMCHK($G(IBSEG(10))) ; Percent
"RTN","IBCNEHL2",194,0)
 S RSUPDT(365.02,IENS,".1")=$G(IBSEG(11))            ; Quantity Qual.
"RTN","IBCNEHL2",195,0)
 F II=11:1:13 S RSUPDT(365.02,IENS,"."_II)=$G(IBSEG(II+1))
"RTN","IBCNEHL2",196,0)
 S RSUPDT(365.02,IENS,"1.01")=$P($G(IBSEG(15)),HLCMP) ; Procedure coding method
"RTN","IBCNEHL2",197,0)
 S RSUPDT(365.02,IENS,"1.02")=$G(IBSEG(16)) ; Procedure code
"RTN","IBCNEHL2",198,0)
 ; Procedure modifiers
"RTN","IBCNEHL2",199,0)
 S PRMODS=$G(IBSEG(17)) F II=1:1:4 S RSUPDT(365.02,IENS,"1.0"_(II+2))=$TR($P(PRMODS,HLREP,II),HL("ECH"))
"RTN","IBCNEHL2",200,0)
 D FILE^DIE("ET","RSUPDT","ERROR") I $D(ERROR) Q
"RTN","IBCNEHL2",201,0)
 ; service type codes
"RTN","IBCNEHL2",202,0)
 K RSUPDT S STCSTR=$P($G(IBSEG(5)),HLCMP)
"RTN","IBCNEHL2",203,0)
 F II=1:1 S STC=$P(STCSTR,HLREP,II) Q:STC=""  S RSUPDT(365.292,"+"_II_","_IENS,".01")=STC
"RTN","IBCNEHL2",204,0)
 I $D(RSUPDT) D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL2",205,0)
ZEBX ;
"RTN","IBCNEHL2",206,0)
 Q
"RTN","IBCNEHL2",207,0)
 ;
"RTN","IBCNEHL2",208,0)
NTE(EBDA,IBSEG,RIEN) ; Process NTE Notes seg
"RTN","IBCNEHL2",209,0)
 ;
"RTN","IBCNEHL2",210,0)
 ; Input:
"RTN","IBCNEHL2",211,0)
 ; EBDA,IBSEG,RIEN
"RTN","IBCNEHL2",212,0)
 ;
"RTN","IBCNEHL2",213,0)
 ; Output:
"RTN","IBCNEHL2",214,0)
 ; ERROR
"RTN","IBCNEHL2",215,0)
 ;
"RTN","IBCNEHL2",216,0)
 N DA,IENS,NOTES
"RTN","IBCNEHL2",217,0)
 I $G(EBDA)="" Q
"RTN","IBCNEHL2",218,0)
 S NOTES(1)=$$DECHL7($G(IBSEG(4)))
"RTN","IBCNEHL2",219,0)
 S DA(1)=RIEN,DA=EBDA
"RTN","IBCNEHL2",220,0)
 S IENS=$$IENS^DILF(.DA)
"RTN","IBCNEHL2",221,0)
 D WP^DIE(365.02,IENS,2,"A","NOTES","ERROR")
"RTN","IBCNEHL2",222,0)
NTEX ;
"RTN","IBCNEHL2",223,0)
 Q
"RTN","IBCNEHL2",224,0)
 ;
"RTN","IBCNEHL2",225,0)
DECHL7(STR,HLSEP,ECHARS) ; Decode HL7 escape seqs in data fields
"RTN","IBCNEHL2",226,0)
 ;
"RTN","IBCNEHL2",227,0)
 ; Input:
"RTN","IBCNEHL2",228,0)
 ; STR = Field data possible containing HL7 escape seqs for encoding chars
"RTN","IBCNEHL2",229,0)
 ; HLSEP (opt) = HL7 Field sep. char - assumes HLFS if not passed
"RTN","IBCNEHL2",230,0)
 ; ECHARS (opt) = HL7 encoding chars being used, assumes HL("ECH") if not passed
"RTN","IBCNEHL2",231,0)
 ;
"RTN","IBCNEHL2",232,0)
 ; Output Values
"RTN","IBCNEHL2",233,0)
 ; Fn returns string w/converted escape seqs
"RTN","IBCNEHL2",234,0)
 ;
"RTN","IBCNEHL2",235,0)
 N ESC,PAT,REPL,ECODE,PCE
"RTN","IBCNEHL2",236,0)
 ; Initialize opt. params.
"RTN","IBCNEHL2",237,0)
 I $G(HLSEP)="" S HLSEP=HLFS
"RTN","IBCNEHL2",238,0)
 I $G(ECHARS)="" S ECHARS=HL("ECH")
"RTN","IBCNEHL2",239,0)
 ;
"RTN","IBCNEHL2",240,0)
 S ESC=$E(ECHARS,3) ; Escape char.
"RTN","IBCNEHL2",241,0)
 ; Check for escape seqs, quit if not
"RTN","IBCNEHL2",242,0)
 I STR'[ESC G DECHL7X
"RTN","IBCNEHL2",243,0)
 ; Replace ^ w/{sp} (if any) to prevent filing problems
"RTN","IBCNEHL2",244,0)
 S ECHARS=$TR(ECHARS,"^"," ")
"RTN","IBCNEHL2",245,0)
 ;
"RTN","IBCNEHL2",246,0)
 ; Array of rep. chars
"RTN","IBCNEHL2",247,0)
 S REPL("F")=$TR(HLSEP,"^"," ") ;Field Sep
"RTN","IBCNEHL2",248,0)
 S REPL("S")=$E(ECHARS)     ;Comp Sep
"RTN","IBCNEHL2",249,0)
 S REPL("R")=$E(ECHARS,2)   ;Rep. sep
"RTN","IBCNEHL2",250,0)
 ; Temp. replace w/ASC 26, until after other ESC are stripped
"RTN","IBCNEHL2",251,0)
 S REPL("E")=$C(26)  ;Esc. sep
"RTN","IBCNEHL2",252,0)
 S REPL("T")=$E(ECHARS,4)   ;Subcomp. sep
"RTN","IBCNEHL2",253,0)
 ;
"RTN","IBCNEHL2",254,0)
 ; Translate out escape seqs left->right
"RTN","IBCNEHL2",255,0)
 F PCE=1:1:($L(STR,ESC)-1)\2 D
"RTN","IBCNEHL2",256,0)
 . ; Ignore empty esc. or unrec. esc. seq.
"RTN","IBCNEHL2",257,0)
 . S ECODE=$P(STR,ESC,2) I ECODE="" S ECODE="XXXX"
"RTN","IBCNEHL2",258,0)
 . I $D(REPL(ECODE))'>0 S STR=$P(STR,ESC)_$C(26)_$P(STR,ESC,2)_$C(26)_$P(STR,ESC,3,99999) Q
"RTN","IBCNEHL2",259,0)
 . ; Else, replace esc. seq. w/ char.
"RTN","IBCNEHL2",260,0)
 . S STR=$P(STR,ESC)_$G(REPL(ECODE))_$P(STR,ESC,3,99999)
"RTN","IBCNEHL2",261,0)
 ;
"RTN","IBCNEHL2",262,0)
 ;Replace the decoded ESC chars that were actually sent
"RTN","IBCNEHL2",263,0)
 S STR=$TR(STR,$C(26),ESC)
"RTN","IBCNEHL2",264,0)
 ;
"RTN","IBCNEHL2",265,0)
DECHL7X ; Exit w/return values
"RTN","IBCNEHL2",266,0)
 Q STR
"RTN","IBCNEHL2",267,0)
 ;
"RTN","IBCNEHL2",268,0)
NUMCHK(N) ; make sure that numeric value N is not greater than 99999
"RTN","IBCNEHL2",269,0)
 Q $S(+N>99999:99999,1:N)
"RTN","IBCNEHL4")
0^1^B136544352^B96805218
"RTN","IBCNEHL4",1,0)
IBCNEHL4 ;DAOU/ALA - HL7 Process Incoming RPI Msgs (cont.) ;26-JUN-2002  ; Compiled December 16, 2004 15:35:46
"RTN","IBCNEHL4",2,0)
 ;;2.0;INTEGRATED BILLING;**300,416,438**;21-MAR-94;Build 52
"RTN","IBCNEHL4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHL4",4,0)
 ;
"RTN","IBCNEHL4",5,0)
 ;**Program Description**
"RTN","IBCNEHL4",6,0)
 ;  This pgm will process the non-repeating segments of the
"RTN","IBCNEHL4",7,0)
 ;  incoming eIV response msgs.
"RTN","IBCNEHL4",8,0)
 ;  It was separated out from IBCNEHL2 to conserve space.
"RTN","IBCNEHL4",9,0)
 ;  
"RTN","IBCNEHL4",10,0)
 ;  This routine is based on IBCNEHLP which was introduced with patch 184, and subsequently
"RTN","IBCNEHL4",11,0)
 ;  patched with patches 252 and 271.  IBCNEHLP is obsolete and deleted with patch 300.
"RTN","IBCNEHL4",12,0)
 ;
"RTN","IBCNEHL4",13,0)
 ; * Each of these tags are called by IBCNEHL2.
"RTN","IBCNEHL4",14,0)
 ;
"RTN","IBCNEHL4",15,0)
 ;  Variables
"RTN","IBCNEHL4",16,0)
 ;    SEG = HL7 Seg Name
"RTN","IBCNEHL4",17,0)
 ;    MSGID = Original Msg Control ID
"RTN","IBCNEHL4",18,0)
 ;    ACK =  Acknowledgment (AA=Accepted, AE=Error)
"RTN","IBCNEHL4",19,0)
 ;    ERTXT = Error Msg Text
"RTN","IBCNEHL4",20,0)
 ;    ERFLG = Error quit flag
"RTN","IBCNEHL4",21,0)
 ;    ERACT = Error Action
"RTN","IBCNEHL4",22,0)
 ;    ERCON = Error Condition
"RTN","IBCNEHL4",23,0)
 ;    RIEN = Response Record IEN
"RTN","IBCNEHL4",24,0)
 ;    IBSEG = Array of the segment
"RTN","IBCNEHL4",25,0)
 ;
"RTN","IBCNEHL4",26,0)
 Q  ; No direct calls
"RTN","IBCNEHL4",27,0)
 ;
"RTN","IBCNEHL4",28,0)
MSA ;  Process the MSA seg
"RTN","IBCNEHL4",29,0)
 ;
"RTN","IBCNEHL4",30,0)
 ;  Input:
"RTN","IBCNEHL4",31,0)
 ;  IBSEG,MGRP
"RTN","IBCNEHL4",32,0)
 ;
"RTN","IBCNEHL4",33,0)
 ;  Output:
"RTN","IBCNEHL4",34,0)
 ;  ERACT,ERCON,ERROR,ERTXT,RIEN,TRACE,ACK
"RTN","IBCNEHL4",35,0)
 ;
"RTN","IBCNEHL4",36,0)
 N MSGID,RSUPDT,VRFDT
"RTN","IBCNEHL4",37,0)
 S ACK=$G(IBSEG(2)),MSGID=$G(IBSEG(3)),TRACE=$G(IBSEG(4))
"RTN","IBCNEHL4",38,0)
 S ERTXT=$$DECHL7^IBCNEHL2($P($G(IBSEG(7)),$E(HLECH),2)),ERACT=$G(IBSEG(6)),ERCON=$P($G(IBSEG(7)),$E(HLECH),1)
"RTN","IBCNEHL4",39,0)
 ;
"RTN","IBCNEHL4",40,0)
 ; If no Control Id, send Mailman error msg
"RTN","IBCNEHL4",41,0)
 I MSGID="" D ERRMSA(TRACE,MGRP) S ERFLG=1 G MSAX
"RTN","IBCNEHL4",42,0)
 ;
"RTN","IBCNEHL4",43,0)
 ; Check for msg id/payer combination and get response IEN
"RTN","IBCNEHL4",44,0)
 D PCK^IBCNEHL3
"RTN","IBCNEHL4",45,0)
 ;
"RTN","IBCNEHL4",46,0)
 ; If no record IEN, quit
"RTN","IBCNEHL4",47,0)
 I $G(RIEN)="" G MSAX
"RTN","IBCNEHL4",48,0)
 ;
"RTN","IBCNEHL4",49,0)
 ; Update record w/info
"RTN","IBCNEHL4",50,0)
 S RSUPDT(365,RIEN_",",.09)=TRACE,RSUPDT(365,RIEN_",",.06)=3
"RTN","IBCNEHL4",51,0)
 S RSUPDT(365,RIEN_",",4.01)=ERTXT
"RTN","IBCNEHL4",52,0)
 S VRFDT=$$NOW^XLFDT(),RSUPDT(365,RIEN_",",.07)=VRFDT
"RTN","IBCNEHL4",53,0)
 ;
"RTN","IBCNEHL4",54,0)
 ; Update w/internal values
"RTN","IBCNEHL4",55,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL4",56,0)
 ;
"RTN","IBCNEHL4",57,0)
 S RSUPDT(365,RIEN_",",1.14)=ERCON,RSUPDT(365,RIEN_",",1.15)=ERACT
"RTN","IBCNEHL4",58,0)
 ;
"RTN","IBCNEHL4",59,0)
 ; Update w/external values
"RTN","IBCNEHL4",60,0)
 D FILE^DIE("ET","RSUPDT","ERROR")
"RTN","IBCNEHL4",61,0)
MSAX ;
"RTN","IBCNEHL4",62,0)
 Q
"RTN","IBCNEHL4",63,0)
 ;
"RTN","IBCNEHL4",64,0)
ERRMSA(TRACE,MGRP) ; Msg Control Id is blank -  Send Mailman error msg
"RTN","IBCNEHL4",65,0)
 ;
"RTN","IBCNEHL4",66,0)
 N HCT,ICN,MSG,MSGCT,NAME,XMSUB
"RTN","IBCNEHL4",67,0)
 ;
"RTN","IBCNEHL4",68,0)
 ;1st find the PID seg to extract ICN and patient name
"RTN","IBCNEHL4",69,0)
 D GTICNM^IBCNEHLU(.ICN,.NAME)
"RTN","IBCNEHL4",70,0)
 ;
"RTN","IBCNEHL4",71,0)
 ;Send the Mailman error msg
"RTN","IBCNEHL4",72,0)
 S XMSUB="Message Control Id Field is Blank",MSGCT=$S(TRACE="":4,1:3)
"RTN","IBCNEHL4",73,0)
 S MSG(1)="A response was received w/a blank Message Control Id"
"RTN","IBCNEHL4",74,0)
 I TRACE="" S MSG(1)=MSG(1)_" and Trace #"
"RTN","IBCNEHL4",75,0)
 S MSG(2)="for "_$S(TRACE'="":"Trace #: "_TRACE_", ",1:"")_"ICN #: "_ICN_", Patient: "_NAME_"."
"RTN","IBCNEHL4",76,0)
 I TRACE="" D
"RTN","IBCNEHL4",77,0)
 . S MSG(3)="It is likely that there are communication issues with the EC."
"RTN","IBCNEHL4",78,0)
 S MSG(MSGCT)="This response cannot be processed.  Please contact the Help Desk."
"RTN","IBCNEHL4",79,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHL4",80,0)
 Q
"RTN","IBCNEHL4",81,0)
 ;
"RTN","IBCNEHL4",82,0)
PID ;  Process the PID seg
"RTN","IBCNEHL4",83,0)
 N DFN,DOB,DOD,FLD,ICN,IENSTR,LFAC,LUPDT,NAME,RSUPDT,SEX,SSN,STATE,XDFN,IDLIST
"RTN","IBCNEHL4",84,0)
 N SUBCNT,SUBC,SUBCID,SUBCDATA,IERN
"RTN","IBCNEHL4",85,0)
 ;
"RTN","IBCNEHL4",86,0)
 S ERFLG=0
"RTN","IBCNEHL4",87,0)
 S DOB=$G(IBSEG(8)),SEX=$G(IBSEG(9))
"RTN","IBCNEHL4",88,0)
 S NAME=$G(IBSEG(6))
"RTN","IBCNEHL4",89,0)
 S DOD=$G(IBSEG(30)),LUPDT=$G(IBSEG(34)),LFAC=$G(IBSEG(35))
"RTN","IBCNEHL4",90,0)
 ;
"RTN","IBCNEHL4",91,0)
 ; Parse Repeating ID field to fill in other identifiers
"RTN","IBCNEHL4",92,0)
 S (ICN,SSN,DFN)=""
"RTN","IBCNEHL4",93,0)
 S IDLIST=$G(IBSEG(4))
"RTN","IBCNEHL4",94,0)
 F SUBCNT=1:1:$L(IDLIST,$E(HLECH,2,2)) D
"RTN","IBCNEHL4",95,0)
 . S SUBC=$P(IDLIST,$E(HLECH,2,2),SUBCNT)
"RTN","IBCNEHL4",96,0)
 . S SUBCID=$P(SUBC,$E(HLECH),5)    ; Identifier Type Code
"RTN","IBCNEHL4",97,0)
 . S SUBCDATA=$P(SUBC,$E(HLECH),1) ; Data Value
"RTN","IBCNEHL4",98,0)
 . I SUBCID="PI" S DFN=SUBCDATA
"RTN","IBCNEHL4",99,0)
 . I SUBCID="SS" S SSN=SUBCDATA
"RTN","IBCNEHL4",100,0)
 . I SUBCID="NI" S ICN=SUBCDATA
"RTN","IBCNEHL4",101,0)
 ;
"RTN","IBCNEHL4",102,0)
 ;  Convert data from HL7 format to VistA format
"RTN","IBCNEHL4",103,0)
 S NAME=$$DECHL7^IBCNEHL2($$FMNAME^HLFNC(NAME,HLECH))
"RTN","IBCNEHL4",104,0)
 S DOD=$$FMDATE^HLFNC(DOD),DOB=$$FMDATE^HLFNC(DOB),LUPDT=$$FMDATE^HLFNC(LUPDT)
"RTN","IBCNEHL4",105,0)
 ;
"RTN","IBCNEHL4",106,0)
 ; Use ICN to find the patients DFN at this site
"RTN","IBCNEHL4",107,0)
 I ICN'="" D
"RTN","IBCNEHL4",108,0)
 .S XDFN=$$GETDFN^MPIF001(ICN)
"RTN","IBCNEHL4",109,0)
 .; if unsuccessful, wait 5 sec and try one more time
"RTN","IBCNEHL4",110,0)
 .I +$G(XDFN)'>0 H 5 S XDFN=$$GETDFN^MPIF001(ICN)
"RTN","IBCNEHL4",111,0)
 .Q
"RTN","IBCNEHL4",112,0)
 I +$G(XDFN)'>0,+$G(ICN)>0 D  Q
"RTN","IBCNEHL4",113,0)
 . S ERFLG=1,IERN=$$ERRN^IBCNEUT7("ERROR(""DIERR"")")
"RTN","IBCNEHL4",114,0)
 . S ERROR("DIERR",IERN,"TEXT",1)="Unable to determine the patient's DFN value for this site."
"RTN","IBCNEHL4",115,0)
 . S ERROR("DIERR",IERN,"TEXT",2)=" The ICN for the patient in this response is ICN: "_ICN
"RTN","IBCNEHL4",116,0)
 . S ERROR("DIERR",IERN,"TEXT",3)=" eIV was unable to file the response information."
"RTN","IBCNEHL4",117,0)
 ;
"RTN","IBCNEHL4",118,0)
 I +ICN>0 S DFN=XDFN
"RTN","IBCNEHL4",119,0)
 ;
"RTN","IBCNEHL4",120,0)
 ;  Perform date of death check
"RTN","IBCNEHL4",121,0)
 I DOD'="" D DODCK^IBCNEHLU(DFN,DOD,MGRP,NAME,RIEN,SSN)
"RTN","IBCNEHL4",122,0)
 ;
"RTN","IBCNEHL4",123,0)
 S IENSTR=RIEN_","
"RTN","IBCNEHL4",124,0)
 I $P(^IBCN(365,RIEN,0),U,2)="" S RSUPDT(365,IENSTR,.02)=DFN
"RTN","IBCNEHL4",125,0)
 S RSUPDT(365,IENSTR,1.02)=DOB,RSUPDT(365,IENSTR,1.04)=SEX
"RTN","IBCNEHL4",126,0)
 S RSUPDT(365,IENSTR,1.03)=SSN,RSUPDT(365,IENSTR,1.16)=DOD
"RTN","IBCNEHL4",127,0)
 S RSUPDT(365,IENSTR,1.01)=NAME,RSUPDT(365,IENSTR,1.08)="v"
"RTN","IBCNEHL4",128,0)
 S RSUPDT(365,IENSTR,1.09)="01"
"RTN","IBCNEHL4",129,0)
 ; Subscriber address
"RTN","IBCNEHL4",130,0)
 S FLD=$G(IBSEG(12))
"RTN","IBCNEHL4",131,0)
 S RSUPDT(365,IENSTR,5.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",132,0)
 S RSUPDT(365,IENSTR,5.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",133,0)
 S RSUPDT(365,IENSTR,5.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",134,0)
 S STATE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I STATE>0 S RSUPDT(365,IENSTR,5.04)=STATE ; state
"RTN","IBCNEHL4",135,0)
 S RSUPDT(365,IENSTR,5.05)=$P(FLD,HLCMP,5) ; zip
"RTN","IBCNEHL4",136,0)
 S RSUPDT(365,IENSTR,5.06)=$P(FLD,HLCMP,6) ; country
"RTN","IBCNEHL4",137,0)
 S RSUPDT(365,IENSTR,5.07)=$P(FLD,HLCMP,8) ; country subdivision
"RTN","IBCNEHL4",138,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL4",139,0)
PIDX ;
"RTN","IBCNEHL4",140,0)
 Q
"RTN","IBCNEHL4",141,0)
 ;
"RTN","IBCNEHL4",142,0)
GT1 ;  Process the GT1 Guarantor seg
"RTN","IBCNEHL4",143,0)
 ;
"RTN","IBCNEHL4",144,0)
 ; Input:
"RTN","IBCNEHL4",145,0)
 ; IBSEG,RIEN
"RTN","IBCNEHL4",146,0)
 ;
"RTN","IBCNEHL4",147,0)
 ; Output:
"RTN","IBCNEHL4",148,0)
 ; ERROR,SUBID
"RTN","IBCNEHL4",149,0)
 ;
"RTN","IBCNEHL4",150,0)
 N DOB,IENSTR,NAME,RSUPDT,SEX,SSN,SUBIDC
"RTN","IBCNEHL4",151,0)
 S NAME=$G(IBSEG(4)),DOB=$G(IBSEG(9)),SEX=$G(IBSEG(10))
"RTN","IBCNEHL4",152,0)
 S SSN=$G(IBSEG(13))
"RTN","IBCNEHL4",153,0)
 ; 
"RTN","IBCNEHL4",154,0)
 S SUBIDC=$G(IBSEG(3))  ; Raw field with sub-comp.
"RTN","IBCNEHL4",155,0)
 S SUBID=$P(SUBIDC,$E(HLECH),1)
"RTN","IBCNEHL4",156,0)
 S SUBID=$$DECHL7^IBCNEHL2(SUBID)
"RTN","IBCNEHL4",157,0)
 ;
"RTN","IBCNEHL4",158,0)
 S DOB=$$FMDATE^HLFNC(DOB),NAME=$$DECHL7^IBCNEHL2($$FMNAME^HLFNC(NAME,HLECH))
"RTN","IBCNEHL4",159,0)
 ;
"RTN","IBCNEHL4",160,0)
 S IENSTR=RIEN_","
"RTN","IBCNEHL4",161,0)
 S RSUPDT(365,IENSTR,1.01)=NAME,RSUPDT(365,RIEN_",",1.08)=""
"RTN","IBCNEHL4",162,0)
 S:DOB'="" RSUPDT(365,IENSTR,1.02)=DOB
"RTN","IBCNEHL4",163,0)
 S RSUPDT(365,RIEN_",",1.04)=SEX
"RTN","IBCNEHL4",164,0)
 S RSUPDT(365,IENSTR,1.03)=SSN
"RTN","IBCNEHL4",165,0)
 S RSUPDT(365,IENSTR,1.18)=SUBID
"RTN","IBCNEHL4",166,0)
 ; Subscriber address
"RTN","IBCNEHL4",167,0)
 S FLD=$G(IBSEG(6))
"RTN","IBCNEHL4",168,0)
 S RSUPDT(365,IENSTR,5.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",169,0)
 S RSUPDT(365,IENSTR,5.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",170,0)
 S RSUPDT(365,IENSTR,5.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",171,0)
 S STATE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I STATE>0 S RSUPDT(365,IENSTR,5.04)=STATE ; state
"RTN","IBCNEHL4",172,0)
 S RSUPDT(365,IENSTR,5.05)=$P(FLD,HLCMP,5) ; zip
"RTN","IBCNEHL4",173,0)
 S RSUPDT(365,IENSTR,5.06)=$P(FLD,HLCMP,6) ; country
"RTN","IBCNEHL4",174,0)
 S RSUPDT(365,IENSTR,5.07)=$P(FLD,HLCMP,8) ; country subdivision
"RTN","IBCNEHL4",175,0)
 D FILE^DIE("I","RSUPDT","ERROR")
"RTN","IBCNEHL4",176,0)
GT1X ;
"RTN","IBCNEHL4",177,0)
 Q
"RTN","IBCNEHL4",178,0)
 ;
"RTN","IBCNEHL4",179,0)
ZHS(EBDA,ERROR,IBSEG,RIEN) ; Process ZHS Healthcare services delivery segment
"RTN","IBCNEHL4",180,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",181,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",182,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",183,0)
 S RSUPDT(365.27,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,7,"B",""),-1)+1 ; ZHS sequence
"RTN","IBCNEHL4",184,0)
 ; Benefit quantity & qualifier
"RTN","IBCNEHL4",185,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$G(IBSEG(4))
"RTN","IBCNEHL4",186,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.02)=$$NUMCHK^IBCNEHL2(VALUE),RSUPDT(365.27,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",187,0)
 ; Sampling frequency & qualifier
"RTN","IBCNEHL4",188,0)
 S QUAL=$P($G(IBSEG(5)),HLCMP),VALUE=$G(IBSEG(6))
"RTN","IBCNEHL4",189,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.04)=VALUE,RSUPDT(365.27,IENSTR,.05)=QUAL
"RTN","IBCNEHL4",190,0)
 ; Time period & qualifier
"RTN","IBCNEHL4",191,0)
 S QUAL=$P($G(IBSEG(7)),HLCMP),VALUE=$G(IBSEG(8))
"RTN","IBCNEHL4",192,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.27,IENSTR,.06)=$$NUMCHK^IBCNEHL2(VALUE),RSUPDT(365.27,IENSTR,.07)=QUAL
"RTN","IBCNEHL4",193,0)
 S RSUPDT(365.27,IENSTR,.08)=$P($G(IBSEG(9)),HLCMP) ; Delivery frequency
"RTN","IBCNEHL4",194,0)
 S RSUPDT(365.27,IENSTR,.09)=$P($G(IBSEG(10)),HLCMP) ; Delivery pattern
"RTN","IBCNEHL4",195,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",196,0)
 Q
"RTN","IBCNEHL4",197,0)
 ;
"RTN","IBCNEHL4",198,0)
ZRF(EBDA,ERROR,IBSEG,RIEN) ; Process ZRF Reference identification segment
"RTN","IBCNEHL4",199,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",200,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",201,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",202,0)
 S RSUPDT(365.291,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,10,"B",""),-1)+1 ; ZRF sequence
"RTN","IBCNEHL4",203,0)
 ; Reference id & qualifier
"RTN","IBCNEHL4",204,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$G(IBSEG(4))
"RTN","IBCNEHL4",205,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.291,IENSTR,.02)=VALUE,RSUPDT(365.291,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",206,0)
 S RSUPDT(365.291,IENSTR,.04)=$G(IBSEG(5)) ; Description
"RTN","IBCNEHL4",207,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",208,0)
 Q
"RTN","IBCNEHL4",209,0)
 ;
"RTN","IBCNEHL4",210,0)
ZSD(EBDA,ERROR,IBSEG,RIEN) ; Process ZSD Subscriber date segment
"RTN","IBCNEHL4",211,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",212,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",213,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",214,0)
 S RSUPDT(365.28,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,8,"B",""),-1)+1 ; ZSD sequence
"RTN","IBCNEHL4",215,0)
 ; Date & qualifier
"RTN","IBCNEHL4",216,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$P($G(IBSEG(5)),HLCMP)
"RTN","IBCNEHL4",217,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.28,IENSTR,.02)=VALUE,RSUPDT(365.28,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",218,0)
 S RSUPDT(365.28,IENSTR,.04)=$P($G(IBSEG(4)),HLCMP) ; Date format
"RTN","IBCNEHL4",219,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",220,0)
 Q
"RTN","IBCNEHL4",221,0)
 ;
"RTN","IBCNEHL4",222,0)
ZII(EBDA,ERROR,IBSEG,RIEN) ; Process ZII Subscriber additional info segment
"RTN","IBCNEHL4",223,0)
 N IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",224,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",225,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",226,0)
 S RSUPDT(365.29,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,9,"B",""),-1)+1 ; ZII sequence
"RTN","IBCNEHL4",227,0)
 ; place of service or diagnosis (if qualifier is "BF" or "BK") & qualifier
"RTN","IBCNEHL4",228,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP) Q:QUAL=""
"RTN","IBCNEHL4",229,0)
 ; we can't file "nature of injury" and "occupational injury" values at the moment (as of patch IB*2.0*438),
"RTN","IBCNEHL4",230,0)
 ; so we have to skip qualifiers "GR" and "NI" 
"RTN","IBCNEHL4",231,0)
 I ".GR.NI."[("."_QUAL_".") Q
"RTN","IBCNEHL4",232,0)
 ;
"RTN","IBCNEHL4",233,0)
 S RSUPDT(365.29,IENSTR,$S(".BF.BK."[("."_QUAL_"."):.03,1:.02))=$P($G(IBSEG(4)),HLCMP)
"RTN","IBCNEHL4",234,0)
 S RSUPDT(365.29,IENSTR,.04)=QUAL
"RTN","IBCNEHL4",235,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",236,0)
 Q
"RTN","IBCNEHL4",237,0)
 ;
"RTN","IBCNEHL4",238,0)
ZTY(EBDA,ERROR,IBSEG,RIEN) ; Process ZTY Benefit related entity segment
"RTN","IBCNEHL4",239,0)
 N FLD,IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",240,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",241,0)
 S IENSTR=EBDA_","_RIEN_","
"RTN","IBCNEHL4",242,0)
 ; Entity id code & qualifier
"RTN","IBCNEHL4",243,0)
 S QUAL=$P($G(IBSEG(4)),HLCMP),VALUE=$P($G(IBSEG(3)),HLCMP)
"RTN","IBCNEHL4",244,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,3.01)=VALUE,RSUPDT(365.02,IENSTR,3.02)=QUAL
"RTN","IBCNEHL4",245,0)
 ; Entity name
"RTN","IBCNEHL4",246,0)
 S FLD=$G(IBSEG(5))
"RTN","IBCNEHL4",247,0)
 S RSUPDT(365.02,IENSTR,3.03)=$P($P(FLD,HLCMP),HLSCMP)_","_$P(FLD,HLCMP,2)_" "_$P(FLD,HLCMP,3)_" "_$P(FLD,HLCMP,4)
"RTN","IBCNEHL4",248,0)
 ; make sure that name is not empty
"RTN","IBCNEHL4",249,0)
 I $TR(RSUPDT(365.02,IENSTR,3.03),", ")="" K RSUPDT(365.02,IENSTR,3.03)
"RTN","IBCNEHL4",250,0)
 ; Entity id & qualifier
"RTN","IBCNEHL4",251,0)
 S QUAL=$P($G(IBSEG(6)),HLCMP),VALUE=$G(IBSEG(7))
"RTN","IBCNEHL4",252,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,3.04)=VALUE,RSUPDT(365.02,IENSTR,3.05)=QUAL
"RTN","IBCNEHL4",253,0)
 ; Entity address
"RTN","IBCNEHL4",254,0)
 S FLD=$G(IBSEG(8))
"RTN","IBCNEHL4",255,0)
 S RSUPDT(365.02,IENSTR,4.01)=$P($P(FLD,HLCMP),HLSCMP) ; line 1
"RTN","IBCNEHL4",256,0)
 S RSUPDT(365.02,IENSTR,4.02)=$P(FLD,HLCMP,2) ; line 2
"RTN","IBCNEHL4",257,0)
 S RSUPDT(365.02,IENSTR,4.03)=$P(FLD,HLCMP,3) ; city
"RTN","IBCNEHL4",258,0)
 S VALUE=+$$FIND1^DIC(5,,"X",$P(FLD,HLCMP,4),"C") I VALUE>0 S RSUPDT(365.02,IENSTR,4.04)=VALUE ; state
"RTN","IBCNEHL4",259,0)
 S RSUPDT(365.02,IENSTR,4.05)=$P(FLD,HLCMP,5) ; zip / postal code
"RTN","IBCNEHL4",260,0)
 S RSUPDT(365.02,IENSTR,4.06)=$P(FLD,HLCMP,6) ; country code
"RTN","IBCNEHL4",261,0)
 S RSUPDT(365.02,IENSTR,4.09)=$P(FLD,HLCMP,8) ; country subdivision code
"RTN","IBCNEHL4",262,0)
 ; Entity location & qualifier
"RTN","IBCNEHL4",263,0)
 S QUAL=$G(IBSEG(9)),VALUE=$G(IBSEG(10))
"RTN","IBCNEHL4",264,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,4.07)=VALUE,RSUPDT(365.02,IENSTR,4.08)=QUAL
"RTN","IBCNEHL4",265,0)
 ; Provider code
"RTN","IBCNEHL4",266,0)
 S RSUPDT(365.02,IENSTR,5.01)=$P($G(IBSEG(11)),HLCMP)
"RTN","IBCNEHL4",267,0)
 ; Reference id & qualifier
"RTN","IBCNEHL4",268,0)
 S QUAL=$P($G(IBSEG(12)),HLCMP),VALUE=$G(IBSEG(13))
"RTN","IBCNEHL4",269,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.02,IENSTR,5.02)=VALUE,RSUPDT(365.02,IENSTR,5.03)=QUAL
"RTN","IBCNEHL4",270,0)
 D FILE^DIE("ET","RSUPDT","ERROR")
"RTN","IBCNEHL4",271,0)
 Q
"RTN","IBCNEHL4",272,0)
 ;
"RTN","IBCNEHL4",273,0)
G2OCTD(EBDA,ERROR,IBSEG,RIEN) ; Process G2O.CTD Benefit related entity contact data segment
"RTN","IBCNEHL4",274,0)
 N FLD,IENSTR,RSUPDT,QUAL,VALUE
"RTN","IBCNEHL4",275,0)
 Q:$G(EBDA)=""  ; Quit if EB multiple ien is missing
"RTN","IBCNEHL4",276,0)
 S IENSTR="+1,"_EBDA_","_RIEN_","
"RTN","IBCNEHL4",277,0)
 S RSUPDT(365.26,IENSTR,.01)=+$O(^IBCN(365,RIEN,2,EBDA,6,"B",""),-1)+1 ; G2O.CTD sequence
"RTN","IBCNEHL4",278,0)
 ; Contact name
"RTN","IBCNEHL4",279,0)
 S FLD=$G(IBSEG(3))
"RTN","IBCNEHL4",280,0)
 S RSUPDT(365.26,IENSTR,.02)=$P(FLD,HLCMP,5)_" "_$P($P(FLD,HLCMP),HLSCMP)_","_$P(FLD,HLCMP,2)_" "_$P(FLD,HLCMP,3)_" "_$P(FLD,HLCMP,4)_" "_$P(FLD,HLCMP,6)
"RTN","IBCNEHL4",281,0)
 ; make sure that name is not empty
"RTN","IBCNEHL4",282,0)
 I $TR(RSUPDT(365.26,IENSTR,.02),", ")="" K RSUPDT(365.26,IENSTR,.02)
"RTN","IBCNEHL4",283,0)
 ; Contact number & qualifier
"RTN","IBCNEHL4",284,0)
 S FLD=$G(IBSEG(6)),QUAL=$P(FLD,HLCMP,9),VALUE=$P(FLD,HLCMP)
"RTN","IBCNEHL4",285,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.26,IENSTR,.03)=VALUE,RSUPDT(365.26,IENSTR,.04)=QUAL
"RTN","IBCNEHL4",286,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",287,0)
 Q
"RTN","IBCNEHL4",288,0)
ERR(ERROR,IBSEG,RIEN) ; Process ERR Reject reasons segment
"RTN","IBCNEHL4",289,0)
 N I,IENSTR,FLD,LOC,RSUPDT,VAL
"RTN","IBCNEHL4",290,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL4",291,0)
 S RSUPDT(365.06,IENSTR,.01)=+$O(^IBCN(365,RIEN,6,"B",""),-1)+1 ; ERR sequence
"RTN","IBCNEHL4",292,0)
 S FLD=$G(IBSEG(3)),LOC=$P(FLD,HLCMP)
"RTN","IBCNEHL4",293,0)
 F I=2:1:6 S VAL=$P(FLD,HLCMP,2) I VAL'="" S LOC=LOC_$S(I=2!(I=4):"("_VAL_")",1:"."_VAL_".")
"RTN","IBCNEHL4",294,0)
 S RSUPDT(365.06,IENSTR,.02)=LOC ; Error location (HL7)
"RTN","IBCNEHL4",295,0)
 S RSUPDT(365.06,IENSTR,.03)=$P($G(IBSEG(6)),HLCMP) ; Reject reason
"RTN","IBCNEHL4",296,0)
 S RSUPDT(365.06,IENSTR,.04)=$G(IBSEG(9)) ; Action code
"RTN","IBCNEHL4",297,0)
 S RSUPDT(365.06,IENSTR,.05)=$G(IBSEG(8)) ; Loop id
"RTN","IBCNEHL4",298,0)
 S RSUPDT(365.06,IENSTR,.06)=$P($G(IBSEG(6)),HLCMP,3) ; Source
"RTN","IBCNEHL4",299,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",300,0)
 Q
"RTN","IBCNEHL4",301,0)
 ;
"RTN","IBCNEHL4",302,0)
ZTP(ERROR,IBSEG,RIEN) ; Process ZTP Subscriber date (subscriber level) segment
"RTN","IBCNEHL4",303,0)
 N IENSTR,QUAL,RSUPDT,VALUE,Z
"RTN","IBCNEHL4",304,0)
 S IENSTR="+1,"_RIEN_","
"RTN","IBCNEHL4",305,0)
 S RSUPDT(365.07,IENSTR,.01)=+$O(^IBCN(365,RIEN,7,"B",""),-1)+1 ; ZTP sequence
"RTN","IBCNEHL4",306,0)
 ; Date & qualifier
"RTN","IBCNEHL4",307,0)
 S QUAL=$P($G(IBSEG(3)),HLCMP),VALUE=$P($P($G(IBSEG(4)),HLCMP),HLSCMP)
"RTN","IBCNEHL4",308,0)
 S Z=$P($P($G(IBSEG(4)),HLCMP,2),HLSCMP) I Z'="" S VALUE=VALUE_" - "_Z
"RTN","IBCNEHL4",309,0)
 I VALUE'="",QUAL'="" S RSUPDT(365.07,IENSTR,.02)=VALUE,RSUPDT(365.07,IENSTR,.03)=QUAL
"RTN","IBCNEHL4",310,0)
 S RSUPDT(365.07,IENSTR,.04)=$G(IBSEG(5)) ; Loop id
"RTN","IBCNEHL4",311,0)
 D UPDATE^DIE("E","RSUPDT",,"ERROR")
"RTN","IBCNEHL4",312,0)
 Q
"RTN","IBCNEHLM")
0^25^B21127231^B21127175
"RTN","IBCNEHLM",1,0)
IBCNEHLM ;DAOU/ALA - HL7 Registration MFN Message ;10-JUN-2002
"RTN","IBCNEHLM",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,300,416,438**;21-MAR-94;Build 52
"RTN","IBCNEHLM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLM",4,0)
 ;
"RTN","IBCNEHLM",5,0)
 ;**Program Description**
"RTN","IBCNEHLM",6,0)
 ;  This program will process the outgoing registration MFN message
"RTN","IBCNEHLM",7,0)
 ;
"RTN","IBCNEHLM",8,0)
 ;  Variables
"RTN","IBCNEHLM",9,0)
 ;    MCT = Lines of MailMan message counter
"RTN","IBCNEHLM",10,0)
 ;    QFL = Quit flag
"RTN","IBCNEHLM",11,0)
 ;    HL* = HL7 package specific variables
"RTN","IBCNEHLM",12,0)
 ;    TAXID = Tax ID
"RTN","IBCNEHLM",13,0)
 ;    CNTCPH = Contact Phone
"RTN","IBCNEHLM",14,0)
 ;    CNTCEM = Contact Email
"RTN","IBCNEHLM",15,0)
 ;    FRSH = Freshness Days
"RTN","IBCNEHLM",16,0)
 ;    MGRP = Mailgroup to email messages to
"RTN","IBCNEHLM",17,0)
 ;    INACT = Inactive Insurance Flag
"RTN","IBCNEHLM",18,0)
 ;    CNTC = Contact IEN
"RTN","IBCNEHLM",19,0)
 ;    APP = Application
"RTN","IBCNEHLM",20,0)
 ;    EVENT = HL7 Event
"RTN","IBCNEHLM",21,0)
 ;    CODE = Values sent in the MFN message
"RTN","IBCNEHLM",22,0)
 ;    IPP = IP Port
"RTN","IBCNEHLM",23,0)
 ;    IPA = IP Address
"RTN","IBCNEHLM",24,0)
 ;    RESP = Response Code
"RTN","IBCNEHLM",25,0)
 ;    IHLP = Interface HL7 Processing Type
"RTN","IBCNEHLM",26,0)
 ;    IHLT = Interface HL7 Batch Start Time
"RTN","IBCNEHLM",27,0)
 ;    IHLS = Interface HL7 Batch Stop Time
"RTN","IBCNEHLM",28,0)
 ;    IVER = Interface Version
"RTN","IBCNEHLM",29,0)
 ;
"RTN","IBCNEHLM",30,0)
REG ;  Registration message for when a site installs
"RTN","IBCNEHLM",31,0)
 NEW TAXID,CNTCPH,CNTCEM,CNTCNM,IBCNE,FRSH,MGRP,INACT,IHLP,MFE,HLSAN
"RTN","IBCNEHLM",32,0)
 NEW IHLT,CNTC,APP,EVENT,CODE,EDT,MFN,HL,HLFS,HLECH,MCT,HLPROD,HLX,ID
"RTN","IBCNEHLM",33,0)
 NEW HLEID,IPP,IPA,IBCNEDAT,HLCS,HLINST,HLN,RESP,HLHDR
"RTN","IBCNEHLM",34,0)
 NEW HLTYPE,HLQ,HLRESLT,IHLS,HLCDOM,HLCINS,HLCSTCP,HLIP,%I,ZMID
"RTN","IBCNEHLM",35,0)
 NEW VMFE,IVER
"RTN","IBCNEHLM",36,0)
 K ^TMP("HLS",$J) S MCT=0,QFL=0
"RTN","IBCNEHLM",37,0)
 ;
"RTN","IBCNEHLM",38,0)
 ;  Get data from IB Parameters File
"RTN","IBCNEHLM",39,0)
 S TAXID=$TR($P($G(^IBE(350.9,1,1)),U,5),"-",""),CNTCPH="",CNTCEM="",CNTCNM=""
"RTN","IBCNEHLM",40,0)
 S IBCNE=$G(^IBE(350.9,1,51))
"RTN","IBCNEHLM",41,0)
 S FRSH=$P(IBCNE,U,1)
"RTN","IBCNEHLM",42,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNEHLM",43,0)
 S INACT=$E($$GET1^DIQ(350.9,"1,",51.08,"E"))
"RTN","IBCNEHLM",44,0)
 S IHLP=$P(IBCNE,U,13),IHLT=$P(IBCNE,U,14),CNTC=$P(IBCNE,U,16)
"RTN","IBCNEHLM",45,0)
 S IHLS=$P(IBCNE,U,19)
"RTN","IBCNEHLM",46,0)
 S IVER="5"
"RTN","IBCNEHLM",47,0)
 ;
"RTN","IBCNEHLM",48,0)
 I IHLP="I" S (IHLT,IHLS)=""
"RTN","IBCNEHLM",49,0)
 ;
"RTN","IBCNEHLM",50,0)
 ;  Get contact specific information
"RTN","IBCNEHLM",51,0)
 I CNTC'="" D
"RTN","IBCNEHLM",52,0)
 . S CNTCNM=$P($G(^VA(200,CNTC,0)),U,1)
"RTN","IBCNEHLM",53,0)
 . S CNTCPH=$P($G(^VA(200,CNTC,.13)),U,2)
"RTN","IBCNEHLM",54,0)
 . S CNTCEM=$P($G(^VA(200,CNTC,.15)),U,1)
"RTN","IBCNEHLM",55,0)
 ;
"RTN","IBCNEHLM",56,0)
 ;  Email if any missing data
"RTN","IBCNEHLM",57,0)
 I CNTC="" S MCT=MCT+1,MSG(MCT)="The Contact Person is not defined in the eIV Site Parameters.  ",QFL=1
"RTN","IBCNEHLM",58,0)
 I CNTC'="",CNTCPH="" S MCT=MCT+1,MSG(MCT)="The office phone number of the eIV Contact Person is not defined  (File 200, Field .132).  ",QFL=1
"RTN","IBCNEHLM",59,0)
 I CNTC'="",CNTCEM="" S MCT=MCT+1,MSG(MCT)="The email address of the eIV Contact Person is not defined  (File 200, Field .151).  ",QFL=1
"RTN","IBCNEHLM",60,0)
 ;
"RTN","IBCNEHLM",61,0)
 I IHLP="B",IHLT=""!(IHLS="") D  S QFL=1
"RTN","IBCNEHLM",62,0)
 . S MCT=MCT+1,MSG(MCT)="The ""HL7 Response Processing Method"" selected is Batch but the HL7 Batch "
"RTN","IBCNEHLM",63,0)
 . I IHLT="",IHLS="" S MSG(MCT)=MSG(MCT)_"Start and End Times are blank.  " Q
"RTN","IBCNEHLM",64,0)
 . S MSG(MCT)=MSG(MCT)_$S(IHLT="":"Start",1:"End")_" Time is blank.  "
"RTN","IBCNEHLM",65,0)
 ;
"RTN","IBCNEHLM",66,0)
 I FRSH=""!(INACT="")!(IHLP="") D
"RTN","IBCNEHLM",67,0)
 . S MCT=MCT+1,MSG(MCT)="The following eIV Site Parameters are not defined:  "
"RTN","IBCNEHLM",68,0)
 . I FRSH="" S MCT=MCT+1,MSG(MCT)="""Days between electronic reverification checks"" is blank.  "
"RTN","IBCNEHLM",69,0)
 . I INACT="" S MCT=MCT+1,MSG(MCT)="""Look at a patient's inactive insurance?"" is blank.  "
"RTN","IBCNEHLM",70,0)
 . I IHLP="" S MCT=MCT+1,MSG(MCT)="""HL7 Response Processing Method"" is blank.  "
"RTN","IBCNEHLM",71,0)
 . Q
"RTN","IBCNEHLM",72,0)
 ;
"RTN","IBCNEHLM",73,0)
 I $O(MSG(""))'="" D MLMN
"RTN","IBCNEHLM",74,0)
 I QFL=1 Q
"RTN","IBCNEHLM",75,0)
 ;
"RTN","IBCNEHLM",76,0)
HL ;  When a site installs, the enrollment should be an
"RTN","IBCNEHLM",77,0)
 ;  "MUP" (update) record.
"RTN","IBCNEHLM",78,0)
 N VZRR
"RTN","IBCNEHLM",79,0)
 S MFE(1)="MUP"
"RTN","IBCNEHLM",80,0)
 ;
"RTN","IBCNEHLM",81,0)
 ;  Initialize the HL7
"RTN","IBCNEHLM",82,0)
 D INIT^HLFNC2("IBCNE IIV REGISTER",.HL)
"RTN","IBCNEHLM",83,0)
 S HLFS=HL("FS"),HLECH=HL("ECH"),HL("SAF")=$P($$SITE^VASITE,U,2,3)
"RTN","IBCNEHLM",84,0)
 ; S HLEID=$$HLP^IBCNEHLU("IBCNE IIV REGISTER")
"RTN","IBCNEHLM",85,0)
 ;
"RTN","IBCNEHLM",86,0)
 ;   Set the MFI segment
"RTN","IBCNEHLM",87,0)
 S ID="Facility Table",APP="",EVENT="UPD",RESP="NE"
"RTN","IBCNEHLM",88,0)
 S ^TMP("HLS",$J,1)=$$MFI^VAFHLMFI(ID,APP,EVENT,,,RESP)
"RTN","IBCNEHLM",89,0)
 ;
"RTN","IBCNEHLM",90,0)
 ;  Set the MFE segment
"RTN","IBCNEHLM",91,0)
 S EVENT=MFE(1),MFN="",EDT=$$DT^XLFDT()
"RTN","IBCNEHLM",92,0)
 S CODE=$P($$SITE^VASITE,U,3)_$E(HLECH)
"RTN","IBCNEHLM",93,0)
 S VMFE=$$MFE^VAFHLMFE(EVENT,MFN,EDT,CODE)
"RTN","IBCNEHLM",94,0)
 S $P(VMFE,U,11)=$S($P(VMFE,U,11)="YES":"Y",1:"N")
"RTN","IBCNEHLM",95,0)
 S ^TMP("HLS",$J,2)=VMFE_HLFS_"CE"
"RTN","IBCNEHLM",96,0)
 ;
"RTN","IBCNEHLM",97,0)
 ;  Set the ZRR segment
"RTN","IBCNEHLM",98,0)
 S VZRR="ZRR"_HLFS_"1"_HLFS_TAXID_HLFS_HLFS_$$HLNAME^HLFNC(CNTCNM,$E(HLECH))_"^C"_HLFS
"RTN","IBCNEHLM",99,0)
 S VZRR=VZRR_CNTCPH_$E(HLECH)_$E(HLECH)_$E(HLECH)_CNTCEM_HLFS_FRSH_HLFS_IHLP_HLFS_IHLT_$E(HLECH)_IHLS_HLFS_INACT_HLFS_IVER
"RTN","IBCNEHLM",100,0)
 S ^TMP("HLS",$J,3)=VZRR
"RTN","IBCNEHLM",101,0)
 ;
"RTN","IBCNEHLM",102,0)
 D GENERATE^HLMA("IBCNE IIV REGISTER","GM",1,.HLRESLT,"")
"RTN","IBCNEHLM",103,0)
 I $P(HLRESLT,U,2)]"" S HLRESLT="Error - "_$P(HLRESLT,U,2,99) D  Q
"RTN","IBCNEHLM",104,0)
 . S MSG(1)="HL7 eIV Registration Message not created."
"RTN","IBCNEHLM",105,0)
 . S MSG(2)=HLRESLT
"RTN","IBCNEHLM",106,0)
 . D MLMN
"RTN","IBCNEHLM",107,0)
 K ^TMP("HLS",$J)
"RTN","IBCNEHLM",108,0)
 Q
"RTN","IBCNEHLM",109,0)
 ;
"RTN","IBCNEHLM",110,0)
MLMN ;  MailMan Message
"RTN","IBCNEHLM",111,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLM",112,0)
 S XMSUB="eIV Registration Failure"
"RTN","IBCNEHLM",113,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLM",114,0)
 K XMSUB,XMY,MSG,XMZ,XMDUZ
"RTN","IBCNEHLM",115,0)
 Q
"RTN","IBCNEHLQ")
0^2^B43538189^B38577924
"RTN","IBCNEHLQ",1,0)
IBCNEHLQ ;DAOU/ALA - HL7 RQI Message ;17-JUN-2002
"RTN","IBCNEHLQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,361,416,438**;21-MAR-94;Build 52
"RTN","IBCNEHLQ",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLQ",4,0)
 ;
"RTN","IBCNEHLQ",5,0)
 ;**Program Description**
"RTN","IBCNEHLQ",6,0)
 ;  This routine builds an eIV Verification (RQI^I01) or
"RTN","IBCNEHLQ",7,0)
 ;  Identification (RQI^I03) request
"RTN","IBCNEHLQ",8,0)
 ;
"RTN","IBCNEHLQ",9,0)
 ;**Modified by  Date        Reason
"RTN","IBCNEHLQ",10,0)
 ;  DAOU/BHS     10/04/2002  Implementing Transmit SSN logic
"RTN","IBCNEHLQ",11,0)
 ;  DAOU/DB      03/19/2004  Stripped dashes from SSN (PID, GT1)
"RTN","IBCNEHLQ",12,0)
 ;
"RTN","IBCNEHLQ",13,0)
EN ;  Entry Point
"RTN","IBCNEHLQ",14,0)
 ;  Variables
"RTN","IBCNEHLQ",15,0)
 ;    HLFS = Field Separator
"RTN","IBCNEHLQ",16,0)
 ;    DFN = Patient IEN
"RTN","IBCNEHLQ",17,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEHLQ",18,0)
 ;    BUFF = Buffer IEN
"RTN","IBCNEHLQ",19,0)
 ;    FRDT = Freshness Date
"RTN","IBCNEHLQ",20,0)
 ;
"RTN","IBCNEHLQ",21,0)
PID ; Patient Identification Segment
"RTN","IBCNEHLQ",22,0)
 N VAFSTR,ICN,NM,I,PID11,EDQ
"RTN","IBCNEHLQ",23,0)
 S VAFSTR=",1,7,8,11,",DFN=+$G(DFN)
"RTN","IBCNEHLQ",24,0)
 S PID=$$EN^VAFHLPID(DFN,VAFSTR,1)
"RTN","IBCNEHLQ",25,0)
 S PID11=$P(PID,HLFS,12)
"RTN","IBCNEHLQ",26,0)
 I $P(PID11,HLECH,2)="""""" D
"RTN","IBCNEHLQ",27,0)
 . S $P(PID11,HLECH,2)=""
"RTN","IBCNEHLQ",28,0)
 . S $P(PID,HLFS,12)=PID11
"RTN","IBCNEHLQ",29,0)
 ; Encode special characters into Name and address pieces
"RTN","IBCNEHLQ",30,0)
 ; **NOTE: If $$EN^VAFHLPID should, in the future, return more than 11 pieces than the lines below may
"RTN","IBCNEHLQ",31,0)
 ;         need to be modified as they currently expect 11 pieces to be returned.
"RTN","IBCNEHLQ",32,0)
 I DFN D
"RTN","IBCNEHLQ",33,0)
 . S NM("FILE")=2,NM("IENS")=DFN,NM("FIELD")=.01
"RTN","IBCNEHLQ",34,0)
 . S NM=$$HLNAME^XLFNAME(.NM,"",$E(HLECH)),NM=$S(NM]"":NM,1:HLQ)
"RTN","IBCNEHLQ",35,0)
 . S I=$L(NM,HLFS),NM=$$ENCHL7(NM),$P(PID,HLFS,6,5+I)=NM
"RTN","IBCNEHLQ",36,0)
 . S $P(PID,HLFS,12,99)=$$ENCHL7($P(PID,HLFS,12,99))
"RTN","IBCNEHLQ",37,0)
 . S ICN=$P($G(^DPT(DFN,"MPI")),U,1)
"RTN","IBCNEHLQ",38,0)
 . S $P(PID,HLFS,4)=ICN_HLECH_HLECH_HLECH_"USVHA"_HLECH_"NI"_HLECH_"~"_DFN_HLECH_HLECH_HLECH_"USVHA"_HLECH_"PI"_HLECH_$P($$SITE^VASITE,U,3)_HLECH
"RTN","IBCNEHLQ",39,0)
 . Q
"RTN","IBCNEHLQ",40,0)
 S FRDT=$$HLDATE^HLFNC($G(FRDT))
"RTN","IBCNEHLQ",41,0)
 S $P(PID,HLFS,34)=FRDT
"RTN","IBCNEHLQ",42,0)
 Q
"RTN","IBCNEHLQ",43,0)
 ;
"RTN","IBCNEHLQ",44,0)
GT1 ;  Guarantor Segment
"RTN","IBCNEHLQ",45,0)
 N WHO,NM,IDOB,ISEX,SEX,RLIEN,PER,PLIEN,RDATA,IBSDATA,IBADDR
"RTN","IBCNEHLQ",46,0)
 ;
"RTN","IBCNEHLQ",47,0)
 S GT1=""
"RTN","IBCNEHLQ",48,0)
 I $G(QUERY)="I" Q
"RTN","IBCNEHLQ",49,0)
 ;
"RTN","IBCNEHLQ",50,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",51,0)
 I EXT=1 D
"RTN","IBCNEHLQ",52,0)
 . S WHO=$P($G(^IBA(355.33,BUFF,60)),U,5)
"RTN","IBCNEHLQ",53,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",54,0)
 . S NM=$P($G(^IBA(355.33,BUFF,60)),U,7),NM=$$NAME^IBCNEHLU(NM)
"RTN","IBCNEHLQ",55,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",56,0)
 . S NM=$$ENCHL7(NM)
"RTN","IBCNEHLQ",57,0)
 . S $P(GT1,HLFS,3)=NM_HLECH_HLECH_HLECH
"RTN","IBCNEHLQ",58,0)
 . S IDOB=$P($G(^IBA(355.33,BUFF,60)),U,8),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",59,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",60,0)
 . S $P(GT1,HLFS,2)=$$SCRUB($G(SUBID))_HLECH_HLECH_HLECH_HLECH_"HC"
"RTN","IBCNEHLQ",61,0)
 . Q
"RTN","IBCNEHLQ",62,0)
 ;
"RTN","IBCNEHLQ",63,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",64,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",65,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",66,0)
 . S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6)
"RTN","IBCNEHLQ",67,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",68,0)
 . S NM=$P($G(^DPT(DFN,.312,IRIEN,0)),U,17)
"RTN","IBCNEHLQ",69,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",70,0)
 . S NM=$$ENCHL7(NM)
"RTN","IBCNEHLQ",71,0)
 . S $P(GT1,HLFS,3)=NM_HLECH_HLECH_HLECH
"RTN","IBCNEHLQ",72,0)
 . S IDOB=$P($G(^DPT(DFN,.312,IRIEN,3)),U,1),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",73,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",74,0)
 . S $P(GT1,HLFS,2)=$$SCRUB($G(SUBID))_HLECH_HLECH_HLECH_HLECH_"HC"
"RTN","IBCNEHLQ",75,0)
 . ;
"RTN","IBCNEHLQ",76,0)
 . S IBSDATA=$G(^DPT(DFN,.312,IRIEN,3))
"RTN","IBCNEHLQ",77,0)
 . S IBADDR=$$HLADDR^HLFNC($P(IBSDATA,U,6,7),$P(IBSDATA,U,8,10))
"RTN","IBCNEHLQ",78,0)
 . S $P(GT1,HLFS,5)=$$ENCHL7(IBADDR)
"RTN","IBCNEHLQ",79,0)
 . ;
"RTN","IBCNEHLQ",80,0)
 . D CHK
"RTN","IBCNEHLQ",81,0)
 . I $P(GT1,HLFS,8)=""&(IDOB'="") S $P(GT1,HLFS,8)=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",82,0)
 . I $P(GT1,HLFS,9)=""&(ISEX'="") S $P(GT1,HLFS,9)=ISEX
"RTN","IBCNEHLQ",83,0)
 . I $P(GT1,HLFS,9)="",WHO="s" D
"RTN","IBCNEHLQ",84,0)
 .. S SEX=$P($G(^DPT(DFN,.312,IRIEN,3)),U,12) ; get policy holder sex
"RTN","IBCNEHLQ",85,0)
 .. I SEX="" S SEX=$P(^DPT(DFN,0),U,2),SEX=$S(SEX="M":"F",1:"M") ; if null, use alternative method
"RTN","IBCNEHLQ",86,0)
 .. S $P(GT1,HLFS,9)=SEX
"RTN","IBCNEHLQ",87,0)
 ;
"RTN","IBCNEHLQ",88,0)
 I GT1="" Q
"RTN","IBCNEHLQ",89,0)
 S $P(GT1,HLFS,1)=1
"RTN","IBCNEHLQ",90,0)
 S GT1="GT1"_HLFS_GT1
"RTN","IBCNEHLQ",91,0)
 Q
"RTN","IBCNEHLQ",92,0)
 ;
"RTN","IBCNEHLQ",93,0)
IN1 ;  Insurance Segment
"RTN","IBCNEHLQ",94,0)
 N EFFDT,EXPDT,PREL,ADMN,ADMDT,IENS
"RTN","IBCNEHLQ",95,0)
 S IN1=""
"RTN","IBCNEHLQ",96,0)
 ;
"RTN","IBCNEHLQ",97,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",98,0)
 I EXT=1 D
"RTN","IBCNEHLQ",99,0)
 . S PREL=$P($G(^IBA(355.33,BUFF,60)),U,14)
"RTN","IBCNEHLQ",100,0)
 . S $P(IN1,HLFS,2)=$S(PREL=18:$$SCRUB($G(SUBID)),1:$$SCRUB($G(PATID)))
"RTN","IBCNEHLQ",101,0)
 . I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",102,0)
 .. S $P(IN1,HLFS,3)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,2))_HLECH_HLECH_HLECH_"USVHA"_HLECH_"VP"_HLECH
"RTN","IBCNEHLQ",103,0)
 .. S $P(IN1,HLFS,4)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,1))
"RTN","IBCNEHLQ",104,0)
 . S $P(IN1,HLFS,8)=$$ENCHL7($P($G(^IBA(355.33,BUFF,40)),U,3))
"RTN","IBCNEHLQ",105,0)
 . S $P(IN1,HLFS,9)=$$ENCHL7($P($G(^IBA(355.33,BUFF,40)),U,2))
"RTN","IBCNEHLQ",106,0)
 . S EFFDT=$P($G(^IBA(355.33,BUFF,60)),U,2),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",107,0)
 . S EXPDT=$P($G(^IBA(355.33,BUFF,60)),U,3),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",108,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",109,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",110,0)
 . S $P(IN1,HLFS,17)=$$PATREL(PREL)
"RTN","IBCNEHLQ",111,0)
 ;
"RTN","IBCNEHLQ",112,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",113,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",114,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",115,0)
 . I $$SCRUB($G(SUBID))'=$$SCRUB($P($G(^DPT(DFN,.312,IRIEN,0)),U,2)) Q
"RTN","IBCNEHLQ",116,0)
 . S EFFDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,8),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",117,0)
 . S EXPDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,4),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",118,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",119,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",120,0)
 . S PREL=$P($G(^DPT(DFN,.312,IRIEN,4)),U,3)
"RTN","IBCNEHLQ",121,0)
 . S $P(IN1,HLFS,2)=$S(PREL=18:$$SCRUB($G(SUBID)),1:$$SCRUB($G(PATID)))
"RTN","IBCNEHLQ",122,0)
 . I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",123,0)
 .. S $P(IN1,HLFS,3)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,2))_HLECH_HLECH_HLECH_"USVHA"_HLECH_"VP"_HLECH
"RTN","IBCNEHLQ",124,0)
 .. S $P(IN1,HLFS,4)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,1))
"RTN","IBCNEHLQ",125,0)
 . S $P(IN1,HLFS,17)=$$PATREL(PREL)
"RTN","IBCNEHLQ",126,0)
 . S IENS=IRIEN_","_DFN_","
"RTN","IBCNEHLQ",127,0)
 . S $P(IN1,HLFS,8)=$$ENCHL7($$GET1^DIQ(2.312,IENS,21,"E"))
"RTN","IBCNEHLQ",128,0)
 . S $P(IN1,HLFS,9)=$$ENCHL7($$GET1^DIQ(2.312,IENS,20,"E"))
"RTN","IBCNEHLQ",129,0)
 ;
"RTN","IBCNEHLQ",130,0)
 I IN1="" Q
"RTN","IBCNEHLQ",131,0)
 ;
"RTN","IBCNEHLQ",132,0)
 I $G(QUERY)="I",$P(IN1,HLFS,17)'=18 S $P(IN1,HLFS,17)=18
"RTN","IBCNEHLQ",133,0)
 I $P(IN1,HLFS,17)="" S $P(IN1,HLFS,17)=18
"RTN","IBCNEHLQ",134,0)
 S $P(IN1,HLFS,1)=1
"RTN","IBCNEHLQ",135,0)
 S IN1="IN1"_HLFS_IN1
"RTN","IBCNEHLQ",136,0)
 Q
"RTN","IBCNEHLQ",137,0)
 ;
"RTN","IBCNEHLQ",138,0)
NTE ;  NTE Segment
"RTN","IBCNEHLQ",139,0)
 ; New Variables
"RTN","IBCNEHLQ",140,0)
 N IBRES,K
"RTN","IBCNEHLQ",141,0)
 ; Initialize NTE segment string
"RTN","IBCNEHLQ",142,0)
 S NTE="*"
"RTN","IBCNEHLQ",143,0)
 ; Repeating Element Separator is tilde (~)
"RTN","IBCNEHLQ",144,0)
 S IBRES=$E(HL("ECH"),2)
"RTN","IBCNEHLQ",145,0)
 ; If data extracted from Buffer 
"RTN","IBCNEHLQ",146,0)
 I EXT=1 F K=1:1:20 D STC(K,$G(^IBA(355.33,BUFF,80)),IBRES,.NTE)
"RTN","IBCNEHLQ",147,0)
 ; If data not extracted from Buffer
"RTN","IBCNEHLQ",148,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",149,0)
 .F K=1:1:11 D STC(K,$G(^IBE(350.9,1,60)),IBRES,.NTE)
"RTN","IBCNEHLQ",150,0)
 .F K=12:1:20 D STC(K,$G(^IBE(350.9,1,61)),IBRES,.NTE)
"RTN","IBCNEHLQ",151,0)
 .Q
"RTN","IBCNEHLQ",152,0)
 S NTE="NTE"_HLFS_HLFS_HLFS_NTE
"RTN","IBCNEHLQ",153,0)
 Q
"RTN","IBCNEHLQ",154,0)
 ;
"RTN","IBCNEHLQ",155,0)
STC(K,NTEREC,IBRES,NTE) ; add service type code to the string
"RTN","IBCNEHLQ",156,0)
 ; K - STC number
"RTN","IBCNEHLQ",157,0)
 ; NTEREC - string of NTC IENs
"RTN","IBCNEHLQ",158,0)
 ; IBRES - repeat separator (normally "~")
"RTN","IBCNEHLQ",159,0)
 ; NTE - result string, passed by reference
"RTN","IBCNEHLQ",160,0)
 ;
"RTN","IBCNEHLQ",161,0)
 N STCIEN
"RTN","IBCNEHLQ",162,0)
 S STCIEN=$P(NTEREC,U,K) I STCIEN="" Q
"RTN","IBCNEHLQ",163,0)
 S $P(NTE,IBRES,K)=$P($G(^IBE(365.013,STCIEN,0)),U,1)
"RTN","IBCNEHLQ",164,0)
 Q
"RTN","IBCNEHLQ",165,0)
 ;
"RTN","IBCNEHLQ",166,0)
CHK ;  Check for spouse or other information in the Patient Relation File
"RTN","IBCNEHLQ",167,0)
 ;  DGREL = Relationship (1=Self, 2=Spouse, 3-34,99=Other)
"RTN","IBCNEHLQ",168,0)
 NEW IEN,QFL
"RTN","IBCNEHLQ",169,0)
 S IEN="",RLIEN="",ISEX="",QFL=0
"RTN","IBCNEHLQ",170,0)
 F  S IEN=$O(^DGPR(408.12,"B",DFN,IEN)) Q:IEN=""  D  Q:QFL
"RTN","IBCNEHLQ",171,0)
 . S DGREL=$P($G(^DGPR(408.12,IEN,0)),U,2)
"RTN","IBCNEHLQ",172,0)
 . ;
"RTN","IBCNEHLQ",173,0)
 . ;  If person is veteran, quit
"RTN","IBCNEHLQ",174,0)
 . I DGREL=1 Q
"RTN","IBCNEHLQ",175,0)
 . ;
"RTN","IBCNEHLQ",176,0)
 . ;  If person is spouse, pick that record and quit
"RTN","IBCNEHLQ",177,0)
 . I WHO="s",DGREL=2 S RLIEN=IEN,QFL=1 Q
"RTN","IBCNEHLQ",178,0)
 . ;
"RTN","IBCNEHLQ",179,0)
 . ;  Otherwise it should be an 'other' dependent
"RTN","IBCNEHLQ",180,0)
 . S RLIEN=IEN
"RTN","IBCNEHLQ",181,0)
 ;
"RTN","IBCNEHLQ",182,0)
 I RLIEN="" Q
"RTN","IBCNEHLQ",183,0)
 ;
"RTN","IBCNEHLQ",184,0)
 ;  Check for Sex, SSN, DOB in INCOME PERSON File
"RTN","IBCNEHLQ",185,0)
 S PER=$P(^DGPR(408.12,RLIEN,0),U,3)
"RTN","IBCNEHLQ",186,0)
 I PER'["DGPR(408.13" Q
"RTN","IBCNEHLQ",187,0)
 S PLIEN=$P(PER,";",1)
"RTN","IBCNEHLQ",188,0)
 I PLIEN="" Q
"RTN","IBCNEHLQ",189,0)
 S RDATA=$G(^DGPR(408.13,PLIEN,0)),ISEX=$P(RDATA,U,2),IDOB=$P(RDATA,U,3)
"RTN","IBCNEHLQ",190,0)
 I $P(RDATA,U,4)'="" N DFN S DFN=$P(RDATA,U,4),ISEX=$P(^DPT(DFN,0),U,2),IDOB=$P(^DPT(DFN,0),U,3)
"RTN","IBCNEHLQ",191,0)
 Q
"RTN","IBCNEHLQ",192,0)
 ;
"RTN","IBCNEHLQ",193,0)
ENCHL7(STR) ; Encode HL7 escape seqs in data fields
"RTN","IBCNEHLQ",194,0)
 ;
"RTN","IBCNEHLQ",195,0)
 ; Input:
"RTN","IBCNEHLQ",196,0)
 ; STR = Field data possible containing HL7 encoding chars
"RTN","IBCNEHLQ",197,0)
 ;
"RTN","IBCNEHLQ",198,0)
 ; Output Values
"RTN","IBCNEHLQ",199,0)
 ; Fn returns string w/converted escape seqs
"RTN","IBCNEHLQ",200,0)
 ;
"RTN","IBCNEHLQ",201,0)
 N CHR,NEW,RPLC,CNT,LOOP
"RTN","IBCNEHLQ",202,0)
 ;
"RTN","IBCNEHLQ",203,0)
 ; Replace "\" "&" "~" "|" with \F\ \R\ \E\ \T\ respectively
"RTN","IBCNEHLQ",204,0)
 F CHR="\","&","~","|" S CNT=$L(STR,CHR) I CNT>1 D
"RTN","IBCNEHLQ",205,0)
 . S NEW=$P(STR,CHR)
"RTN","IBCNEHLQ",206,0)
 . S RPLC="\"_$TR(CHR,"|~\&","FRET")_"\"
"RTN","IBCNEHLQ",207,0)
 . F LOOP=2:1:CNT S NEW=NEW_RPLC_$P(STR,CHR,LOOP)
"RTN","IBCNEHLQ",208,0)
 . S STR=NEW
"RTN","IBCNEHLQ",209,0)
 ;
"RTN","IBCNEHLQ",210,0)
 Q STR
"RTN","IBCNEHLQ",211,0)
 ;
"RTN","IBCNEHLQ",212,0)
SCRUB(Z) ; remove all punctuation from the string and convert lowercase to uppercase
"RTN","IBCNEHLQ",213,0)
 ; IB*2*416 - used for subscriber and patient ID fields
"RTN","IBCNEHLQ",214,0)
 S Z=$$NOPUNCT^IBCEF(Z,1)
"RTN","IBCNEHLQ",215,0)
 S Z=$$UP^XLFSTR(Z)
"RTN","IBCNEHLQ",216,0)
SCRUBX ;
"RTN","IBCNEHLQ",217,0)
 Q Z
"RTN","IBCNEHLQ",218,0)
 ;
"RTN","IBCNEHLQ",219,0)
PATREL(REL) ; convert pat.relationship to insured from VistA to X12 and return X12 value
"RTN","IBCNEHLQ",220,0)
 ; REL - VistA value
"RTN","IBCNEHLQ",221,0)
 ; 
"RTN","IBCNEHLQ",222,0)
 ; VistA values of Self (18), Spouse (01), and Child (19) remain unchanged,
"RTN","IBCNEHLQ",223,0)
 ; anything else is converted to X12 value of Other Adult (34)
"RTN","IBCNEHLQ",224,0)
 ;
"RTN","IBCNEHLQ",225,0)
 Q $S($G(REL)="":"",".01.18.19."[("."_REL_"."):REL,1:34)
"RTN","IBCNEHLT")
0^12^B77895122^B77352947
"RTN","IBCNEHLT",1,0)
IBCNEHLT ;DAOU/ALA - HL7 Process Incoming MFN Messages ; 09 Dec 2005  3:30 PM
"RTN","IBCNEHLT",2,0)
 ;;2.0;INTEGRATED BILLING;**184,251,271,300,416,438**;21-MAR-94;Build 52
"RTN","IBCNEHLT",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLT",4,0)
 ;
"RTN","IBCNEHLT",5,0)
 ;**Program Description**
"RTN","IBCNEHLT",6,0)
 ;  This program will process incoming MFN messages and
"RTN","IBCNEHLT",7,0)
 ;  update the appropriate tables
"RTN","IBCNEHLT",8,0)
 ;
"RTN","IBCNEHLT",9,0)
EN ;  Entry Point
"RTN","IBCNEHLT",10,0)
 NEW AIEN,APIEN,APP,D0,D,DESC,DQ,DR,FILE,FLN,HEDI,ID,IEN
"RTN","IBCNEHLT",11,0)
 NEW PEDI,SEG,STAT,HCT,NEWID,TSSN,REQSUB,NAFLG,NPFLG,TRUSTED
"RTN","IBCNEHLT",12,0)
 NEW IBCNACT,IBCNADT,FSVDY,PSVDY
"RTN","IBCNEHLT",13,0)
 NEW BPSIEN,CMIEN,DATA,DATAAP,DATABPS,DATACM,DATE,ERROR,FIELDNO,FILENO
"RTN","IBCNEHLT",14,0)
 NEW IBSEG,MSG,BUFF
"RTN","IBCNEHLT",15,0)
 NEW X12TABLE,BADFMT
"RTN","IBCNEHLT",16,0)
 ;
"RTN","IBCNEHLT",17,0)
 ; BADFMT is true if a site with patch 300 receives an eIV message in the previous HL7 interface structure (pre-300)
"RTN","IBCNEHLT",18,0)
 ;
"RTN","IBCNEHLT",19,0)
 ; Build local table of file numbers to determine if response is eIV or ePHARM
"RTN","IBCNEHLT",20,0)
 F D=11:1:18 S X12TABLE("365.0"_D)=""
"RTN","IBCNEHLT",21,0)
 F D=21:1:28 S X12TABLE("365.0"_D)=""
"RTN","IBCNEHLT",22,0)
 ;
"RTN","IBCNEHLT",23,0)
 ; Decide if message belongs to "E-Pharm" or "eIV"
"RTN","IBCNEHLT",24,0)
 S APP=""
"RTN","IBCNEHLT",25,0)
 S HCT=0,ERFLG=0
"RTN","IBCNEHLT",26,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D SPAR^IBCNEHLU I $G(IBSEG(1))="MFI" S FILE=$G(IBSEG(2)),FLN=$P(FILE,$E(HLECH,1),1) Q
"RTN","IBCNEHLT",27,0)
 I ",366.01,366.02,366.03,365.12,355.3,"[(","_FLN_",") S APP="E-PHARM"
"RTN","IBCNEHLT",28,0)
 I FLN=365.12 D
"RTN","IBCNEHLT",29,0)
 . S HCT=0,BADFMT=0
"RTN","IBCNEHLT",30,0)
 . F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:(APP="IIV")!BADFMT
"RTN","IBCNEHLT",31,0)
 .. D SPAR^IBCNEHLU
"RTN","IBCNEHLT",32,0)
 .. I $G(IBSEG(1))="MFE",$P($G(IBSEG(5)),$E(HLECH,1),3)'="" D  Q
"RTN","IBCNEHLT",33,0)
 ... S BADFMT=1,APP=""
"RTN","IBCNEHLT",34,0)
 ... S MSG(1)="Log a Remedy Ticket for this issue."
"RTN","IBCNEHLT",35,0)
 ... S MSG(2)="Please include in the Remedy Ticket that the eIV payer tables may be out"
"RTN","IBCNEHLT",36,0)
 ... S MSG(3)="of sync with the master list and will need a new copy of the payer table"
"RTN","IBCNEHLT",37,0)
 ... S MSG(4)="from Austin."
"RTN","IBCNEHLT",38,0)
 ... D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"eIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",39,0)
 .. I $G(IBSEG(1))="ZPA" S APP="IIV"
"RTN","IBCNEHLT",40,0)
 I $D(X12TABLE(FLN)) S APP="IIV"
"RTN","IBCNEHLT",41,0)
 ; If neither eIV or ePHARM then quit
"RTN","IBCNEHLT",42,0)
 I APP="" Q
"RTN","IBCNEHLT",43,0)
 ;
"RTN","IBCNEHLT",44,0)
 S HCT=1,NAFLG=0,NPFLG=0,D=""
"RTN","IBCNEHLT",45,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLT",46,0)
 . D SPAR^IBCNEHLU
"RTN","IBCNEHLT",47,0)
 . S SEG=$G(IBSEG(1))
"RTN","IBCNEHLT",48,0)
 . ;
"RTN","IBCNEHLT",49,0)
 . I APP="E-PHARM" D
"RTN","IBCNEHLT",50,0)
 .. I SEG="MFI" D
"RTN","IBCNEHLT",51,0)
 ... S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",52,0)
 ... S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",53,0)
 ... ;
"RTN","IBCNEHLT",54,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",55,0)
 ... ; Master File Identifier
"RTN","IBCNEHLT",56,0)
 ... S DATAMFK("MFI-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",57,0)
 ... ;
"RTN","IBCNEHLT",58,0)
 ... ; File-Level Event Code
"RTN","IBCNEHLT",59,0)
 ... S DATAMFK("MFI-3")=$G(IBSEG(4))
"RTN","IBCNEHLT",60,0)
 .. ;
"RTN","IBCNEHLT",61,0)
 .. I SEG="MFE" D
"RTN","IBCNEHLT",62,0)
 ... I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",63,0)
 ... I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",64,0)
 ... ;
"RTN","IBCNEHLT",65,0)
 ... ; Initialize MFK Message (Application Acknowledgement) variables
"RTN","IBCNEHLT",66,0)
 ... ; Record-Level Event Code
"RTN","IBCNEHLT",67,0)
 ... S DATAMFK("MFE-1")=$G(IBSEG(2))
"RTN","IBCNEHLT",68,0)
 ... ;
"RTN","IBCNEHLT",69,0)
 ... ; Primary Key Value
"RTN","IBCNEHLT",70,0)
 ... S DATAMFK("MFE-4")=$G(IBSEG(5))
"RTN","IBCNEHLT",71,0)
 ... ;
"RTN","IBCNEHLT",72,0)
 ... ; Primary Key Value Type
"RTN","IBCNEHLT",73,0)
 ... S DATAMFK("MFE-5")=$G(IBSEG(6))
"RTN","IBCNEHLT",74,0)
 ... ;
"RTN","IBCNEHLT",75,0)
 ... ; Transfer control to e-Pharmacy
"RTN","IBCNEHLT",76,0)
 ... D ^IBCNRHLT Q
"RTN","IBCNEHLT",77,0)
 .. ;
"RTN","IBCNEHLT",78,0)
 .. ; Transfer control on other segments
"RTN","IBCNEHLT",79,0)
 .. I ",ZCM,ZP0,ZPB,ZPL,ZPT,ZRX,"[(","_SEG_",") D ^IBCNRHLT
"RTN","IBCNEHLT",80,0)
 . ;
"RTN","IBCNEHLT",81,0)
 . ;
"RTN","IBCNEHLT",82,0)
 . I APP="IIV" D
"RTN","IBCNEHLT",83,0)
 .. I SEG="MFI" D
"RTN","IBCNEHLT",84,0)
 ... S FILE=$G(IBSEG(2))
"RTN","IBCNEHLT",85,0)
 ... S FLN=$P(FILE,$E(HLECH,1),1)
"RTN","IBCNEHLT",86,0)
 .. ;
"RTN","IBCNEHLT",87,0)
 .. I SEG="MFE" D
"RTN","IBCNEHLT",88,0)
 ... I $G(FLN)="" S ERFLG=1,MSG(1)="File Number not found in MFN message" Q
"RTN","IBCNEHLT",89,0)
 ... I '$$VFILE^DILFD(FLN) S ERFLG=1,MSG(1)="File "_FLN_" not found in the Data Dictionary" Q
"RTN","IBCNEHLT",90,0)
 ... ;
"RTN","IBCNEHLT",91,0)
 ... I FLN'=365.12 D  Q
"RTN","IBCNEHLT",92,0)
 .... S DATA=$G(IBSEG(5))
"RTN","IBCNEHLT",93,0)
 .... S ID=$$DECHL7^IBCNEHL2($P(DATA,$E(HLECH,1),1)),DESC=$$DECHL7^IBCNEHL2($P(DATA,$E(HLECH,1),2))
"RTN","IBCNEHLT",94,0)
 .... D TFIL
"RTN","IBCNEHLT",95,0)
 ... ;
"RTN","IBCNEHLT",96,0)
 ... ; Pull the action code
"RTN","IBCNEHLT",97,0)
 ... S IBCNACT=$G(IBSEG(2))
"RTN","IBCNEHLT",98,0)
 ... ; Effective Date
"RTN","IBCNEHLT",99,0)
 ... S IBCNADT=$G(IBSEG(4))
"RTN","IBCNEHLT",100,0)
 .. ;
"RTN","IBCNEHLT",101,0)
 .. I SEG="ZP0" D
"RTN","IBCNEHLT",102,0)
 ... S ID=$$DECHL7^IBCNEHL2(IBSEG(3)),NEWID=$$DECHL7^IBCNEHL2(IBSEG(4))
"RTN","IBCNEHLT",103,0)
 ... S DESC=$$DECHL7^IBCNEHL2(IBSEG(5)),HEDI=$$DECHL7^IBCNEHL2(IBSEG(6)),PEDI=$$DECHL7^IBCNEHL2(IBSEG(7))
"RTN","IBCNEHLT",104,0)
 .. ;
"RTN","IBCNEHLT",105,0)
 .. I SEG="ZPA" D
"RTN","IBCNEHLT",106,0)
 ... S STAT=$S(IBSEG(4)="Y":1,1:0)
"RTN","IBCNEHLT",107,0)
 ... S TSSN=IBSEG(5),REQSUB=IBSEG(7)
"RTN","IBCNEHLT",108,0)
 ... S FSVDY=IBSEG(8),PSVDY=IBSEG(9)
"RTN","IBCNEHLT",109,0)
 ... S TRUSTED=$S(IBSEG(10)="N":0,1:1)
"RTN","IBCNEHLT",110,0)
 ... D PFIL
"RTN","IBCNEHLT",111,0)
 Q
"RTN","IBCNEHLT",112,0)
 ;
"RTN","IBCNEHLT",113,0)
PFIL ;  Payer Table Filer
"RTN","IBCNEHLT",114,0)
 ;  Set the action:
"RTN","IBCNEHLT",115,0)
 ;     MAD=Add, MUP=Update, MDC=Deactivate, MAC=Reactivate
"RTN","IBCNEHLT",116,0)
 N OLDAF,OLDTF
"RTN","IBCNEHLT",117,0)
 S IBCNADT=$$FMDATE^HLFNC(IBCNADT)
"RTN","IBCNEHLT",118,0)
 I IBCNADT="" S IBCNADT=$$NOW^XLFDT()
"RTN","IBCNEHLT",119,0)
 ;  If the action is MAD - Add the payer as new
"RTN","IBCNEHLT",120,0)
 N IBNOK,IBAPP,IBID,IBDESC,IBSTR
"RTN","IBCNEHLT",121,0)
 S IBNOK=0,IBAPP=($TR(APP," ")="")
"RTN","IBCNEHLT",122,0)
 I IBCNACT="MAD" D  I IBNOK G PFILX
"RTN","IBCNEHLT",123,0)
 . ; Check certain required fields: Application, VA National & Payer Name
"RTN","IBCNEHLT",124,0)
 . ; If not populated, send MailMan message.
"RTN","IBCNEHLT",125,0)
 . S IBID=($TR(ID," ")=""),IBDESC=($TR(DESC," ")="")
"RTN","IBCNEHLT",126,0)
 . S IBNOK=IBAPP!IBID!IBDESC
"RTN","IBCNEHLT",127,0)
 . I 'IBNOK D MAD(DESC) Q
"RTN","IBCNEHLT",128,0)
 . S IBSTR="" I IBAPP S IBSTR="Application"
"RTN","IBCNEHLT",129,0)
 . I IBID S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"VA National"
"RTN","IBCNEHLT",130,0)
 . I IBDESC S:IBSTR]"" IBSTR=IBSTR_", " S IBSTR=IBSTR_"Payer Name"
"RTN","IBCNEHLT",131,0)
 . S MSG(1)="MAD action received.  "_IBSTR_" unknown."
"RTN","IBCNEHLT",132,0)
 I IBCNACT'="MAD" D FND
"RTN","IBCNEHLT",133,0)
 N IBCNTYPE
"RTN","IBCNEHLT",134,0)
 I IEN<1!IBAPP D  G PFILX
"RTN","IBCNEHLT",135,0)
 . S IBCNTYPE=$S(IBCNACT="MAD":"Add",IBCNACT="MUP":"Update",IBCNACT="MDC":"Deactivate",IBCNACT="MAC":"Reactivate",1:"Unknown")
"RTN","IBCNEHLT",136,0)
 . S MSG(1)=IBCNTYPE_" ("_IBCNACT_") action received. Payer and/or Application may be unknown."
"RTN","IBCNEHLT",137,0)
 . S MSG(2)=""
"RTN","IBCNEHLT",138,0)
 . S MSG(3)="VA National : "_ID
"RTN","IBCNEHLT",139,0)
 . S MSG(4)="Payer Name  : "_DESC
"RTN","IBCNEHLT",140,0)
 . S MSG(5)="Application : "_APP
"RTN","IBCNEHLT",141,0)
 . S MSG(6)=""
"RTN","IBCNEHLT",142,0)
 . S MSG(7)="Log a Remedy Ticket for this issue."
"RTN","IBCNEHLT",143,0)
 . S MSG(8)=""
"RTN","IBCNEHLT",144,0)
 . S MSG(9)="Please include in the Remedy Ticket that VISTA did not receive the required"
"RTN","IBCNEHLT",145,0)
 . S MSG(10)="information or the accurate information to add/update this Payer."
"RTN","IBCNEHLT",146,0)
 . D MSG^IBCNEUT5($$MGRP^IBCNEUT5(),"eIV payer tables may be out of synch with master list","MSG(")
"RTN","IBCNEHLT",147,0)
 ;
"RTN","IBCNEHLT",148,0)
 S DESC=$E(DESC,1,80)    ;restriction of the field in the DD
"RTN","IBCNEHLT",149,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",150,0)
 S DR=".01///^S X=DESC;.02////^S X=NEWID;.05////^S X=PEDI;.06////^S X=HEDI"
"RTN","IBCNEHLT",151,0)
 ;
"RTN","IBCNEHLT",152,0)
 ;  If new payer, add the Date/Time created
"RTN","IBCNEHLT",153,0)
 I NPFLG S DR=DR_";.04///^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",154,0)
 S DIE=DIC,DA=IEN D ^DIE
"RTN","IBCNEHLT",155,0)
 ;
"RTN","IBCNEHLT",156,0)
 ;  Check for application
"RTN","IBCNEHLT",157,0)
 S DIC="^IBE(365.13,",DIC(0)="X",X=APP D ^DIC
"RTN","IBCNEHLT",158,0)
 S AIEN=+Y I AIEN<1 D
"RTN","IBCNEHLT",159,0)
 . S DLAYGO=365.13,DIC(0)="L",DIC("P")=DLAYGO
"RTN","IBCNEHLT",160,0)
 . S DIE=DIC,X=APP
"RTN","IBCNEHLT",161,0)
 . K DD,DO
"RTN","IBCNEHLT",162,0)
 . D FILE^DICN
"RTN","IBCNEHLT",163,0)
 . K DO
"RTN","IBCNEHLT",164,0)
 . S AIEN=+Y
"RTN","IBCNEHLT",165,0)
 ;
"RTN","IBCNEHLT",166,0)
 S APIEN=$O(^IBE(365.12,IEN,1,"B",AIEN,""))
"RTN","IBCNEHLT",167,0)
 I APIEN="" D
"RTN","IBCNEHLT",168,0)
 . S DLAYGO=365.121,DIC(0)="L",DIC("P")=DLAYGO,DA(1)=IEN,X=AIEN
"RTN","IBCNEHLT",169,0)
 . S DIC="^IBE(365.12,"_DA(1)_",1,",DIE=DIC
"RTN","IBCNEHLT",170,0)
 . I '$D(^IBE(365.12,IEN,1,0)) S ^IBE(365.12,IEN,1,0)="^365.121P^^"
"RTN","IBCNEHLT",171,0)
 . K DD,DO
"RTN","IBCNEHLT",172,0)
 . D FILE^DICN
"RTN","IBCNEHLT",173,0)
 . K DO
"RTN","IBCNEHLT",174,0)
 . S APIEN=+Y,NAFLG=1
"RTN","IBCNEHLT",175,0)
 ; get current values for Active and Trusted flags
"RTN","IBCNEHLT",176,0)
 S OLDAF=$P(^IBE(365.12,IEN,1,APIEN,0),U,2),OLDTF=$P(^IBE(365.12,IEN,1,APIEN,0),U,7)
"RTN","IBCNEHLT",177,0)
 S DA(1)=IEN,DA=APIEN,DIC="^IBE(365.12,"_DA(1)_",1,",DR=""
"RTN","IBCNEHLT",178,0)
 ;
"RTN","IBCNEHLT",179,0)
 I IBCNACT="MDC" S DR=DR_".11///^S X=1;.12////^S X=IBCNADT;",STAT=0
"RTN","IBCNEHLT",180,0)
 I IBCNACT="MAC" S DR=DR_".11///^S X=0;.12///@;"
"RTN","IBCNEHLT",181,0)
 S DR=DR_".02///^S X=STAT;.06///^S X=$$NOW^XLFDT();.07///^S X=TRUSTED"
"RTN","IBCNEHLT",182,0)
 I IBCNACT'="MDC" S DR=DR_";.08///^S X=REQSUB;.1///^S X=TSSN;.14///^S X=FSVDY;.15///^S X=PSVDY"
"RTN","IBCNEHLT",183,0)
 ;
"RTN","IBCNEHLT",184,0)
 ;  If new application, add the Date/Time created
"RTN","IBCNEHLT",185,0)
 I NAFLG S DR=DR_";.13///^S X=$$NOW^XLFDT()"
"RTN","IBCNEHLT",186,0)
 ;
"RTN","IBCNEHLT",187,0)
 S DIE=DIC D ^DIE
"RTN","IBCNEHLT",188,0)
 ; Update flag logs
"RTN","IBCNEHLT",189,0)
 I STAT'=OLDAF D UPDLOG("A",STAT,IEN,APIEN)
"RTN","IBCNEHLT",190,0)
 I TRUSTED'=OLDTF D UPDLOG("T",TRUSTED,IEN,APIEN)
"RTN","IBCNEHLT",191,0)
 I IBCNACT="MDC" D MDC Q
"RTN","IBCNEHLT",192,0)
PFILX ;
"RTN","IBCNEHLT",193,0)
 Q
"RTN","IBCNEHLT",194,0)
 ;
"RTN","IBCNEHLT",195,0)
TFIL ;  Non Payer Tables Filer
"RTN","IBCNEHLT",196,0)
 NEW DIC,X,DLAYGO,Y,IEN,MAX
"RTN","IBCNEHLT",197,0)
 S DIC(0)="X",X=ID,DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",198,0)
 D ^DIC S IEN=+Y
"RTN","IBCNEHLT",199,0)
 ; don't update existing entries
"RTN","IBCNEHLT",200,0)
 I IEN>0 Q
"RTN","IBCNEHLT",201,0)
 D FIELD^DID(FLN,.02,,"FIELD LENGTH","MAX")
"RTN","IBCNEHLT",202,0)
 I MAX("FIELD LENGTH")>0 S DESC=$E(DESC,1,MAX("FIELD LENGTH")) ; restriction of the field in the DD
"RTN","IBCNEHLT",203,0)
 ; add new entry to the table
"RTN","IBCNEHLT",204,0)
 ;S DLAYGO=FLN,DIC(0)="L",DIC("DR")=".02///"_DESC
"RTN","IBCNEHLT",205,0)
 S DLAYGO=FLN,DIC(0)="L",DIC("DR")=".02///^S X=DESC"
"RTN","IBCNEHLT",206,0)
 K DD,DO D FILE^DICN K DO
"RTN","IBCNEHLT",207,0)
 Q
"RTN","IBCNEHLT",208,0)
 ;
"RTN","IBCNEHLT",209,0)
MAD(X) ;  Add an entry
"RTN","IBCNEHLT",210,0)
 D FND
"RTN","IBCNEHLT",211,0)
 I IEN>0 G MADX
"RTN","IBCNEHLT",212,0)
 NEW DIC,DIE,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",213,0)
 S DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",214,0)
 S DLAYGO=FLN,DIC(0)="L",DIC("P")=DLAYGO,DIE=DIC
"RTN","IBCNEHLT",215,0)
 K DD,DO
"RTN","IBCNEHLT",216,0)
 D FILE^DICN
"RTN","IBCNEHLT",217,0)
 K DO
"RTN","IBCNEHLT",218,0)
 S IEN=+Y,NPFLG=1
"RTN","IBCNEHLT",219,0)
MADX ;
"RTN","IBCNEHLT",220,0)
 Q
"RTN","IBCNEHLT",221,0)
 ;
"RTN","IBCNEHLT",222,0)
FND ;  Find an existing Payer entry
"RTN","IBCNEHLT",223,0)
 NEW DIC,DIE,X,DA,DLAYGO,Y,DR
"RTN","IBCNEHLT",224,0)
 S X=ID,DIC(0)="X",D="C",DIC=$$ROOT^DILFD(FLN)
"RTN","IBCNEHLT",225,0)
 ;
"RTN","IBCNEHLT",226,0)
 ;  Do a lookup with the "C" cross-reference
"RTN","IBCNEHLT",227,0)
 D IX^DIC
"RTN","IBCNEHLT",228,0)
 S IEN=+Y
"RTN","IBCNEHLT",229,0)
 Q
"RTN","IBCNEHLT",230,0)
 ;
"RTN","IBCNEHLT",231,0)
MDC ;  Check for active transmissions and cancel
"RTN","IBCNEHLT",232,0)
 NEW STA,HIEN,RIEN,TQIEN
"RTN","IBCNEHLT",233,0)
 F STA=1,2,4,6 S TQIEN="" D
"RTN","IBCNEHLT",234,0)
 . F  S TQIEN=$O(^IBCN(365.1,"AC",STA,TQIEN)) Q:TQIEN=""  D
"RTN","IBCNEHLT",235,0)
 .. ;
"RTN","IBCNEHLT",236,0)
 .. ;  If the record doesn't match the payer, quit
"RTN","IBCNEHLT",237,0)
 .. I $P(^IBCN(365.1,TQIEN,0),U,3)'=IEN Q
"RTN","IBCNEHLT",238,0)
 .. ;
"RTN","IBCNEHLT",239,0)
 .. ;  Set the status to 'Cancelled'
"RTN","IBCNEHLT",240,0)
 .. D SST^IBCNEUT2(TQIEN,7)
"RTN","IBCNEHLT",241,0)
 .. ;
"RTN","IBCNEHLT",242,0)
 .. ;  If a buffer entry, set to ! (bang)
"RTN","IBCNEHLT",243,0)
 .. S BUFF=$P(^IBCN(365.1,TQIEN,0),U,5)
"RTN","IBCNEHLT",244,0)
 .. I BUFF'="" D BUFF^IBCNEUT2(BUFF,17)
"RTN","IBCNEHLT",245,0)
 .. ;
"RTN","IBCNEHLT",246,0)
 .. ;  Change any responses status also
"RTN","IBCNEHLT",247,0)
 .. S HIEN=0 F  S HIEN=$O(^IBCN(365.1,TQIEN,2,HIEN)) Q:'HIEN  D
"RTN","IBCNEHLT",248,0)
 ... S RIEN=$P(^IBCN(365.1,TQIEN,2,HIEN,0),U,3)
"RTN","IBCNEHLT",249,0)
 ... ;  If the Response status is 'Response Received', don't change it
"RTN","IBCNEHLT",250,0)
 ... I $P(^IBCN(365,RIEN,0),U,6)=3 Q
"RTN","IBCNEHLT",251,0)
 ... D RSP^IBCNEUT2(RIEN,7)
"RTN","IBCNEHLT",252,0)
 Q
"RTN","IBCNEHLT",253,0)
 ;
"RTN","IBCNEHLT",254,0)
UPDLOG(FLAG,VALUE,PIEN,APIEN) ; Update active/trusted flag logs
"RTN","IBCNEHLT",255,0)
 ; FLAG - "A" for Active flag, "T" for Trusted flag
"RTN","IBCNEHLT",256,0)
 ; VALUE - new flag value (0 or 1)
"RTN","IBCNEHLT",257,0)
 ; PIEN - ien in PAYER file (365.12)
"RTN","IBCNEHLT",258,0)
 ; APIEN - ien in APPLICATION sub-file (365.121)
"RTN","IBCNEHLT",259,0)
 ;
"RTN","IBCNEHLT",260,0)
 N FILE,IENSTR,UPDT
"RTN","IBCNEHLT",261,0)
 I $G(FLAG)=""!($G(VALUE)="") Q
"RTN","IBCNEHLT",262,0)
 I +$G(PIEN)=0!(+$G(APIEN)=0) Q
"RTN","IBCNEHLT",263,0)
 S FILE=$S(FLAG="A":"365.1212",FLAG="T":"365.1213",1:"") I FILE="" Q
"RTN","IBCNEHLT",264,0)
 S IENSTR="+1,"_APIEN_","_PIEN_","
"RTN","IBCNEHLT",265,0)
 S UPDT(FILE,IENSTR,.01)=$$NOW^XLFDT()
"RTN","IBCNEHLT",266,0)
 S UPDT(FILE,IENSTR,.02)=VALUE
"RTN","IBCNEHLT",267,0)
 D UPDATE^DIE("E","UPDT")
"RTN","IBCNEHLT",268,0)
 Q
"RTN","IBCNEHLU")
0^4^B53561238^B30725766
"RTN","IBCNEHLU",1,0)
IBCNEHLU ;DAOU/ALA - HL7 Utilities ;10-JUN-2002  ; Compiled December 16, 2004 15:36:12
"RTN","IBCNEHLU",2,0)
 ;;2.0;INTEGRATED BILLING;**184,300,416,438**;21-MAR-94;Build 52
"RTN","IBCNEHLU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLU",4,0)
 ;
"RTN","IBCNEHLU",5,0)
HLP(PROTOCOL) ;  Find the Protocol IEN
"RTN","IBCNEHLU",6,0)
 Q +$O(^ORD(101,"B",PROTOCOL,0))
"RTN","IBCNEHLU",7,0)
 ;
"RTN","IBCNEHLU",8,0)
NAME(NM) ;  Convert a name that isn't in standard VISTA format -
"RTN","IBCNEHLU",9,0)
 NEW LNM,FNM,MI
"RTN","IBCNEHLU",10,0)
 ;
"RTN","IBCNEHLU",11,0)
 I NM?." " Q NM
"RTN","IBCNEHLU",12,0)
 ;  LastName,FirstName MI
"RTN","IBCNEHLU",13,0)
 I NM["," Q NM
"RTN","IBCNEHLU",14,0)
 ;
"RTN","IBCNEHLU",15,0)
 ; Remove double-spaces from name
"RTN","IBCNEHLU",16,0)
 F  Q:$L(NM,"  ")<2  S NM=$P(NM,"  ",1)_" "_$P(NM,"  ",2,9999)
"RTN","IBCNEHLU",17,0)
 ;
"RTN","IBCNEHLU",18,0)
 ; Trim leading/trailing spaces
"RTN","IBCNEHLU",19,0)
 S NM=$$TRIM^XLFSTR(NM)
"RTN","IBCNEHLU",20,0)
 ;
"RTN","IBCNEHLU",21,0)
 ; Find number of spaces in name
"RTN","IBCNEHLU",22,0)
 S II=$L(NM," ")
"RTN","IBCNEHLU",23,0)
 ;
"RTN","IBCNEHLU",24,0)
 I II>3 Q NM
"RTN","IBCNEHLU",25,0)
 I II=3 S FNM=$P(NM," ",1),MI=" "_$P(NM," ",2),LNM=$P(NM," ",3)
"RTN","IBCNEHLU",26,0)
 I II=2 S FNM=$P(NM," ",1),LNM=$P(NM," ",2),MI=""
"RTN","IBCNEHLU",27,0)
 I II<2 Q NM
"RTN","IBCNEHLU",28,0)
 Q LNM_","_FNM_MI
"RTN","IBCNEHLU",29,0)
 ;
"RTN","IBCNEHLU",30,0)
DODCK(DFN,DOD,MGRP,NAME,RIEN,SSN) ;  Date of death check
"RTN","IBCNEHLU",31,0)
 ;
"RTN","IBCNEHLU",32,0)
 ; Input Variables
"RTN","IBCNEHLU",33,0)
 ; DFN, DOD, MGRP, NAME, RIEN, SSN
"RTN","IBCNEHLU",34,0)
 ;
"RTN","IBCNEHLU",35,0)
 N CDOD,CIDDSP,IDDSP,IDSSN,MSG,XMSUB
"RTN","IBCNEHLU",36,0)
 S CDOD=$P($G(^DPT(DFN,.35)),U,1),CIDDSP=$$FMTE^XLFDT(CDOD,"5Z")
"RTN","IBCNEHLU",37,0)
 S IDDSP=$$FMTE^XLFDT(DOD,"5Z")
"RTN","IBCNEHLU",38,0)
 S IDSSN=$E(SSN,$L(SSN)-3,$L(SSN))
"RTN","IBCNEHLU",39,0)
 ;
"RTN","IBCNEHLU",40,0)
 ; If the two dates of death are the same, quit
"RTN","IBCNEHLU",41,0)
 I CDOD=DOD G DODCKX
"RTN","IBCNEHLU",42,0)
 ;
"RTN","IBCNEHLU",43,0)
 ;  If no current date of death but payer sent one
"RTN","IBCNEHLU",44,0)
 I CDOD="" D  G DODCKX
"RTN","IBCNEHLU",45,0)
 . ;  Send an email message
"RTN","IBCNEHLU",46,0)
 . S XMSUB="Date of Death Received"
"RTN","IBCNEHLU",47,0)
 . S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" "_$$GETDOB^IBCNEDEQ(DFN)_" from"
"RTN","IBCNEHLU",48,0)
 . S MSG(2)="payer "_$$GET1^DIQ(365,RIEN,.03,"E")_".  There is no current Date of Death on file for "
"RTN","IBCNEHLU",49,0)
 . S MSG(3)="this patient."
"RTN","IBCNEHLU",50,0)
 . D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLU",51,0)
 . D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLU",52,0)
 ;
"RTN","IBCNEHLU",53,0)
 S XMSUB="Variant Date of Death"
"RTN","IBCNEHLU",54,0)
 S MSG(1)="A Date of Death ("_IDDSP_") was received for patient: "_NAME_"/"_IDSSN_" "_$$GETDOB^IBCNEDEQ(DFN)_" from payer "_$$GET1^DIQ(365,RIEN,.03,"E")_"."
"RTN","IBCNEHLU",55,0)
 S MSG(2)="This Date of Death does not currently match the Date of Death ("_CIDDSP_") on file for this patient. "
"RTN","IBCNEHLU",56,0)
 D TXT^IBCNEUT7("MSG")
"RTN","IBCNEHLU",57,0)
 D MSG^IBCNEUT5(MGRP,XMSUB,"MSG(")
"RTN","IBCNEHLU",58,0)
DODCKX   ;
"RTN","IBCNEHLU",59,0)
 Q
"RTN","IBCNEHLU",60,0)
 ;
"RTN","IBCNEHLU",61,0)
SPAR     ;  Segment Parsing
"RTN","IBCNEHLU",62,0)
 ;
"RTN","IBCNEHLU",63,0)
 ; This tag will parse the current segment referenced by the HCT index
"RTN","IBCNEHLU",64,0)
 ; and place the results in the IBSEG array.
"RTN","IBCNEHLU",65,0)
 ;
"RTN","IBCNEHLU",66,0)
 ; Input Variables
"RTN","IBCNEHLU",67,0)
 ; HCT
"RTN","IBCNEHLU",68,0)
 ;
"RTN","IBCNEHLU",69,0)
 ; Output Variables
"RTN","IBCNEHLU",70,0)
 ; IBSEG (ARRAY of fields in segment)
"RTN","IBCNEHLU",71,0)
 ;
"RTN","IBCNEHLU",72,0)
 N II,IJ,IK,IM,IS,ISBEG,ISCT,ISDATA,ISEND,ISPEC,LSDATA,NPC
"RTN","IBCNEHLU",73,0)
 ;
"RTN","IBCNEHLU",74,0)
 ;Reset IBSEG
"RTN","IBCNEHLU",75,0)
 K IBSEG
"RTN","IBCNEHLU",76,0)
 ;
"RTN","IBCNEHLU",77,0)
 S ISCT="",II=0,IS=0
"RTN","IBCNEHLU",78,0)
 F  S ISCT=$O(^TMP($J,"IBCNEHLI",HCT,ISCT)) Q:ISCT=""  D
"RTN","IBCNEHLU",79,0)
 . S IS=IS+1
"RTN","IBCNEHLU",80,0)
 . S ISDATA(IS)=$G(^TMP($J,"IBCNEHLI",HCT,ISCT))
"RTN","IBCNEHLU",81,0)
 . I $O(^TMP($J,"IBCNEHLI",HCT,ISCT))="" S ISDATA(IS)=ISDATA(IS)_HLFS
"RTN","IBCNEHLU",82,0)
 . S ISPEC(IS)=$L(ISDATA(IS),HLFS)
"RTN","IBCNEHLU",83,0)
 ;
"RTN","IBCNEHLU",84,0)
 S IM=0,LSDATA=""
"RTN","IBCNEHLU",85,0)
LP S IM=IM+1 Q:IM>IS
"RTN","IBCNEHLU",86,0)
 S LSDATA=LSDATA_ISDATA(IM),NPC=ISPEC(IM)
"RTN","IBCNEHLU",87,0)
 F IJ=1:1:NPC-1 D
"RTN","IBCNEHLU",88,0)
 . S II=II+1,IBSEG(II)=$$CLNSTR($P(LSDATA,HLFS,IJ),$E(HL("ECH"),1,2)_$E(HL("ECH"),4),$E(HL("ECH")))
"RTN","IBCNEHLU",89,0)
 S LSDATA=$P(LSDATA,HLFS,NPC)
"RTN","IBCNEHLU",90,0)
 G LP
"RTN","IBCNEHLU",91,0)
CLNSTR(STRING,CHARS,SUBSEP)      ; Remove extra trailing components and subcomponents in the HL7 seg
"RTN","IBCNEHLU",92,0)
 ;
"RTN","IBCNEHLU",93,0)
 N NUMPEC,PEC,RTSTRING
"RTN","IBCNEHLU",94,0)
 ;
"RTN","IBCNEHLU",95,0)
 S RTSTRING=$$RTRIMCH(STRING,CHARS)
"RTN","IBCNEHLU",96,0)
 ; Now we have string w/o trailing chars, remove from subs
"RTN","IBCNEHLU",97,0)
 S NUMPEC=$L(RTSTRING,SUBSEP)
"RTN","IBCNEHLU",98,0)
 F PEC=1:1:NUMPEC S $P(RTSTRING,SUBSEP,PEC)=$$RTRIMCH($P(RTSTRING,SUBSEP,PEC),CHARS)
"RTN","IBCNEHLU",99,0)
 Q RTSTRING
"RTN","IBCNEHLU",100,0)
 ;
"RTN","IBCNEHLU",101,0)
RTRIMCH(STR,CHRS) ; Remove the trailing chars from string
"RTN","IBCNEHLU",102,0)
 ;
"RTN","IBCNEHLU",103,0)
 N R,L
"RTN","IBCNEHLU",104,0)
 ;
"RTN","IBCNEHLU",105,0)
 S L=1,CHRS=$G(CHRS," ")
"RTN","IBCNEHLU",106,0)
 F R=$L(STR):-1:1 Q:CHRS'[$E(STR,R)
"RTN","IBCNEHLU",107,0)
 I L=R,(CHRS[$E(STR)) S STR=""
"RTN","IBCNEHLU",108,0)
 Q $E(STR,L,R)
"RTN","IBCNEHLU",109,0)
 ;
"RTN","IBCNEHLU",110,0)
 ;
"RTN","IBCNEHLU",111,0)
GTICNM(ICN,NAME) ; Retrieve PID segment and set ICN and patient name
"RTN","IBCNEHLU",112,0)
 ;
"RTN","IBCNEHLU",113,0)
 N HCT,ERFLG,SEG,IBSEG
"RTN","IBCNEHLU",114,0)
 S (HCT,ICN,NAME)="",ERFLG=0
"RTN","IBCNEHLU",115,0)
 F  S HCT=$O(^TMP($J,"IBCNEHLI",HCT)) Q:HCT=""  D  Q:ERFLG
"RTN","IBCNEHLU",116,0)
 .  D SPAR
"RTN","IBCNEHLU",117,0)
 .  S SEG=$G(IBSEG(1)) Q:SEG'="PID"
"RTN","IBCNEHLU",118,0)
 .  S ICN=$G(IBSEG(4)),NAME=$G(IBSEG(6)),ERFLG=1
"RTN","IBCNEHLU",119,0)
 Q
"RTN","IBCNEHLU",120,0)
 ;
"RTN","IBCNEHLU",121,0)
PATISSUB(IDATA0) ; check if patient is the subscriber
"RTN","IBCNEHLU",122,0)
 ; IDATA0 - 0 node of file 2.312
"RTN","IBCNEHLU",123,0)
 ;
"RTN","IBCNEHLU",124,0)
 ; returns 1 if patient is the subscriber, 0 otherwise
"RTN","IBCNEHLU",125,0)
 ;
"RTN","IBCNEHLU",126,0)
 N PREL,RES
"RTN","IBCNEHLU",127,0)
 S RES=0
"RTN","IBCNEHLU",128,0)
 ; check field 2.312/16 first
"RTN","IBCNEHLU",129,0)
 S PREL=$P(IDATA0,U,16) I PREL'="" S:PREL="01" RES=1 Q RES
"RTN","IBCNEHLU",130,0)
 ; if 2.312/16 is empty, try field 2.312/6
"RTN","IBCNEHLU",131,0)
 I $P(IDATA0,U,6)="v" S RES=1
"RTN","IBCNEHLU",132,0)
 Q RES
"RTN","IBCNEHLU",133,0)
 ;
"RTN","IBCNEHLU",134,0)
ONEPOL(PIEN,IEN2) ; check if patient has only one policy on file for a given payer
"RTN","IBCNEHLU",135,0)
 ; PIEN - payer ien
"RTN","IBCNEHLU",136,0)
 ; IEN2 - patient ien (file 2)
"RTN","IBCNEHLU",137,0)
 ;
"RTN","IBCNEHLU",138,0)
 ; returns 1 if only one policy is found, 0 otherwise
"RTN","IBCNEHLU",139,0)
 N CNT,IEN36,IEN312,RES
"RTN","IBCNEHLU",140,0)
 S (CNT,RES)=0
"RTN","IBCNEHLU",141,0)
 I +$G(PIEN)'>0!(+$G(IEN2)'>0) Q RES
"RTN","IBCNEHLU",142,0)
 S IEN36="" F  S IEN36=$O(^DIC(36,"AC",PIEN,IEN36)) Q:IEN36=""  D
"RTN","IBCNEHLU",143,0)
 .S IEN312="" F  S IEN312=$O(^DPT(IEN2,.312,"B",IEN36,IEN312)) Q:IEN312=""  S CNT=CNT+1
"RTN","IBCNEHLU",144,0)
 .Q
"RTN","IBCNEHLU",145,0)
 I CNT=1 S RES=1
"RTN","IBCNEHLU",146,0)
 Q RES
"RTN","IBCNEHLU",147,0)
 ;
"RTN","IBCNEHLU",148,0)
MCRDT(RIEN,EBIEN) ; find effective date for Medicare response
"RTN","IBCNEHLU",149,0)
 ; RIEN - file 365 ien
"RTN","IBCNEHLU",150,0)
 ; EBIEN - subfile 365.02 ien
"RTN","IBCNEHLU",151,0)
 ;
"RTN","IBCNEHLU",152,0)
 ; returns date in FM format or "" if effective date was not found
"RTN","IBCNEHLU",153,0)
 ;
"RTN","IBCNEHLU",154,0)
 N DONE,DTIEN,IENS,RES,Z
"RTN","IBCNEHLU",155,0)
 S RES="",DONE=0
"RTN","IBCNEHLU",156,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,2,EBIEN,8,"B",Z)) Q:Z=""!DONE  D
"RTN","IBCNEHLU",157,0)
 .S DTIEN=$O(^IBCN(365,RIEN,2,EBIEN,8,"B",Z,"")) I 'DTIEN Q
"RTN","IBCNEHLU",158,0)
 .S IENS=DTIEN_","_EBIEN_","_RIEN_","
"RTN","IBCNEHLU",159,0)
 .; effective date has "eligibility" qualifier
"RTN","IBCNEHLU",160,0)
 .I $$GET1^DIQ(365.28,IENS,.03)=307 S RES=$$FMDATE^HLFNC($$GET1^DIQ(365.28,IENS,.02)),DONE=1
"RTN","IBCNEHLU",161,0)
 .Q
"RTN","IBCNEHLU",162,0)
 Q RES
"RTN","IBCNEHLU",163,0)
 ;
"RTN","IBCNEHLU",164,0)
ISMCR(RIEN) ; check if response is for Medicare part A/B
"RTN","IBCNEHLU",165,0)
 ; RIEN - file 365 ien
"RTN","IBCNEHLU",166,0)
 ;
"RTN","IBCNEHLU",167,0)
 ; returns a four piece string:
"RTN","IBCNEHLU",168,0)
 ;   piece 1 = 1 if response if for Medicare, 0 otherwise
"RTN","IBCNEHLU",169,0)
 ;   piece 2 = "MA" if response is for Medicare Part A
"RTN","IBCNEHLU",170,0)
 ;           = "MB" if response is for Medicare Part B
"RTN","IBCNEHLU",171,0)
 ;           = "B" if response is for both Part A and Part B
"RTN","IBCNEHLU",172,0)
 ;           = "" if respnse if not for Medicare
"RTN","IBCNEHLU",173,0)
 ;   piece 3 = effective date for Medicare Part A if response if for Part A or both parts, "" otherwise
"RTN","IBCNEHLU",174,0)
 ;   piece 4 = effective date for Medicare Part B if response if for Part B or both parts, "" otherwise
"RTN","IBCNEHLU",175,0)
 ;
"RTN","IBCNEHLU",176,0)
 N DONE,EBIEN,RES,TYPE,Z
"RTN","IBCNEHLU",177,0)
 S RES="0^",DONE=0
"RTN","IBCNEHLU",178,0)
 I +RIEN'>0 Q RES
"RTN","IBCNEHLU",179,0)
 I '$D(^IBCN(365,RIEN)) Q RES
"RTN","IBCNEHLU",180,0)
 S Z="" F  S Z=$O(^IBCN(365,RIEN,2,"B",Z)) Q:Z=""!DONE  D
"RTN","IBCNEHLU",181,0)
 .S EBIEN=$O(^IBCN(365,RIEN,2,"B",Z,"")),TYPE=$$GET1^DIQ(365.02,EBIEN_","_RIEN_",",.05)
"RTN","IBCNEHLU",182,0)
 .I TYPE="MA" S $P(RES,U)=1,$P(RES,U,2)=$S($P(RES,U,2)="":"MA",1:"B"),$P(RES,U,3)=$$MCRDT(RIEN,EBIEN)
"RTN","IBCNEHLU",183,0)
 .I TYPE="MB" S $P(RES,U)=1,$P(RES,U,2)=$S($P(RES,U,2)="":"MB",1:"B"),$P(RES,U,4)=$$MCRDT(RIEN,EBIEN)
"RTN","IBCNEHLU",184,0)
 .I $P(RES,U,2)="B" S DONE=1
"RTN","IBCNEHLU",185,0)
 .Q
"RTN","IBCNEHLU",186,0)
 Q RES
"RTN","IBCNEHLU",187,0)
 ;
"RTN","IBCNEHLU",188,0)
ERRACT(RIEN) ; pick error action code to use for re-transmission
"RTN","IBCNEHLU",189,0)
 ; RIEN - ien in file 365
"RTN","IBCNEHLU",190,0)
 ;
"RTN","IBCNEHLU",191,0)
 ; returns "error action ^ error condition" string
"RTN","IBCNEHLU",192,0)
 ;
"RTN","IBCNEHLU",193,0)
 ; If any of C,N,S,Y action codes are found, the  first one encountered is returned.
"RTN","IBCNEHLU",194,0)
 ; Otherwise, if W action code is found, it is returned.
"RTN","IBCNEHLU",195,0)
 ; Otherwise, if X action code is found, it is returned.
"RTN","IBCNEHLU",196,0)
 ; Otherwise, one of the P,R action codes is returned.
"RTN","IBCNEHLU",197,0)
 ;
"RTN","IBCNEHLU",198,0)
 N ACODE,AIEN,ECCODE,ECIEN,DONE,IEN,RES,Z
"RTN","IBCNEHLU",199,0)
 S RES="" I '+$G(RIEN) G ERRACTX
"RTN","IBCNEHLU",200,0)
 S DONE=0
"RTN","IBCNEHLU",201,0)
 S Z="" F  S IEN=$O(^IBCN(365,RIEN,6,"B",Z)) Q:Z=""!DONE  D
"RTN","IBCNEHLU",202,0)
 .S IEN=+$O(^IBCN(365,RIEN,6,"B",Z,"")) I 'IEN Q
"RTN","IBCNEHLU",203,0)
 .S ECIEN=+$P(^IBCN(365,RIEN,6,IEN,0),U,3) I 'ECIEN Q
"RTN","IBCNEHLU",204,0)
 .S AIEN=+$P(^IBCN(365,RIEN,6,IEN,0),U,4) I 'AIEN Q
"RTN","IBCNEHLU",205,0)
 .S ACODE=$P(^IBE(365.018,AIEN,0),U),ECCODE=$P(^IBE(365.017,ECIEN,0),U)
"RTN","IBCNEHLU",206,0)
 .I ".C.N.S.Y"[("."_ACODE_".") S RES=ACODE_U_ECCODE,DONE=1 Q  ; one of "do not retransmit" codes
"RTN","IBCNEHLU",207,0)
 .I ACODE="W" S RES=ACODE_U_ECCODE Q  ; "retransmit after 30 days" code
"RTN","IBCNEHLU",208,0)
 .I ACODE="X" S:RES'="W" RES=ACODE_U_ECCODE Q  ; "retransmit after 10 days" code
"RTN","IBCNEHLU",209,0)
 .I RES'="W",RES'="X" S RES=ACODE_U_ECCODE  ; "retransmit whenever" codes
"RTN","IBCNEHLU",210,0)
 .Q
"RTN","IBCNEHLU",211,0)
ERRACTX  ;
"RTN","IBCNEHLU",212,0)
 Q RES
"RTN","IBCNEHLU",213,0)
 ;
"RTN","IBCNEHLU",214,0)
NAMECMP(NAME1,NAME2) ; check if 2 names have the same first name and last name components
"RTN","IBCNEHLU",215,0)
 ; NAME1, NAME2 - names to compare, should be in "last,first [middle]" format
"RTN","IBCNEHLU",216,0)
 ;
"RTN","IBCNEHLU",217,0)
 ; returns 1 if both first name and last name are the same between two names, returns 0 otherwise
"RTN","IBCNEHLU",218,0)
 N NM1,NM2,RES
"RTN","IBCNEHLU",219,0)
 S RES=0
"RTN","IBCNEHLU",220,0)
 S NM1=$$HLNAME^HLFNC(NAME1),NM2=$$HLNAME^HLFNC(NAME2)
"RTN","IBCNEHLU",221,0)
 I $P(NM1,U)=$P(NM2,U),$P(NM1,U,2)=$P(NM2,U,2) S RES=1
"RTN","IBCNEHLU",222,0)
 Q RES
"RTN","IBCNEHLU",223,0)
 ;
"RTN","IBCNEHLU",224,0)
TRNCWARN(GNUM,TRACE) ; send group number truncation warning message
"RTN","IBCNEHLU",225,0)
 N MSG
"RTN","IBCNEHLU",226,0)
 S MSG(1)="WARNING: Group number in the Response Message from the EC has been truncated"
"RTN","IBCNEHLU",227,0)
 S MSG(2)="----------------------------------------------------------------------------"
"RTN","IBCNEHLU",228,0)
 S MSG(3)="Original group number (in the eIV response received): "_$G(GNUM)
"RTN","IBCNEHLU",229,0)
 S MSG(4)="Truncated group number (filed into response file): "_$E($G(GNUM),1,17)
"RTN","IBCNEHLU",230,0)
 S MSG(5)=" "
"RTN","IBCNEHLU",231,0)
 S MSG(6)="The associated Trace # is "_$S($G(TRACE)="":"Unknown",1:TRACE)
"RTN","IBCNEHLU",232,0)
 S MSG(7)=" "
"RTN","IBCNEHLU",233,0)
 D MSG^IBCNEUT5($G(MGRP),MSG(1),"MSG(")
"RTN","IBCNEHLU",234,0)
 Q
"RTN","IBCNEML")
0^11^B14674015^n/a
"RTN","IBCNEML",1,0)
IBCNEML ;BP/YMG - MAILMAN NOTIFICATION TO LINK PAYERS ;27-AUG-2010
"RTN","IBCNEML",2,0)
 ;;2.0;INTEGRATED BILLING;**438**;21-MAR-94;Build 52
"RTN","IBCNEML",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEML",4,0)
 ;
"RTN","IBCNEML",5,0)
 Q
"RTN","IBCNEML",6,0)
 ;
"RTN","IBCNEML",7,0)
EN ; entry point
"RTN","IBCNEML",8,0)
 N ACTIVE,APP,DATA,IEN,INS,INSTID,LN,LOACT,MGRP,MSG,MSUBJ,NAACT,PAYER,PROFID,RPTDATA,STR1,STR2,TOTAL
"RTN","IBCNEML",9,0)
 ; build a cross reference with all existing professional and institutional EDI ID numbers in file 36.
"RTN","IBCNEML",10,0)
 S INS=0 F  S INS=$O(^DIC(36,INS)) Q:'INS  D
"RTN","IBCNEML",11,0)
 .I '$$ACTIVE^IBCNEUT4(INS) Q  ; inactive ins co
"RTN","IBCNEML",12,0)
 .S DATA=$G(^DIC(36,INS,3)) I $P(DATA,U,10)'="" Q  ; already linked to a payer
"RTN","IBCNEML",13,0)
 .S PROFID=$P(DATA,U,2),INSTID=$P(DATA,U,4)
"RTN","IBCNEML",14,0)
 .I PROFID'="" S RPTDATA("P",PROFID)=""
"RTN","IBCNEML",15,0)
 .I INSTID'="" S RPTDATA("I",INSTID)=""
"RTN","IBCNEML",16,0)
 .Q
"RTN","IBCNEML",17,0)
 ; loop through payers - if there is an unlinked insurance company with the same prof/inst id, this payer has
"RTN","IBCNEML",18,0)
 ; potential payer-insurance company links that have not yet been made.
"RTN","IBCNEML",19,0)
 S (TOTAL,IEN)=0 F  S IEN=$O(^IBE(365.12,IEN)) Q:'IEN  D
"RTN","IBCNEML",20,0)
 .I '$$ACTAPP^IBCNEUT5(IEN) Q  ; no active payer applications
"RTN","IBCNEML",21,0)
 .; Must have at least 1 nationally active payer application
"RTN","IBCNEML",22,0)
 .S APP=0,ACTIVE=0 F  S APP=$O(^IBE(365.12,IEN,1,APP)) Q:'APP!ACTIVE  D
"RTN","IBCNEML",23,0)
 ..I $P($G(^IBE(365.12,IEN,1,APP,0)),U,2)=1 S ACTIVE=1
"RTN","IBCNEML",24,0)
 ..Q
"RTN","IBCNEML",25,0)
 .Q:'ACTIVE    ; no nationally active payer application found
"RTN","IBCNEML",26,0)
 .S DATA=$G(^IBE(365.12,IEN,0)),PAYER=$P(DATA,U),PROFID=$P(DATA,U,5),INSTID=$P(DATA,U,6)
"RTN","IBCNEML",27,0)
 .I PROFID'="",$D(RPTDATA("P",PROFID)) S:'$D(RPTDATA("PYR",IEN)) RPTDATA("PYR",IEN)="",TOTAL=TOTAL+1
"RTN","IBCNEML",28,0)
 .I INSTID'="",$D(RPTDATA("I",INSTID)) S:'$D(RPTDATA("PYR",IEN)) RPTDATA("PYR",IEN)="",TOTAL=TOTAL+1
"RTN","IBCNEML",29,0)
 .; if payer is nationally active, but locally inactive, add it to the list
"RTN","IBCNEML",30,0)
 .S APP=$$PYRAPP^IBCNEUT5("IIV",IEN),(LOACT,NAACT)=0
"RTN","IBCNEML",31,0)
 .I 'APP Q
"RTN","IBCNEML",32,0)
 .S DATA=$G(^IBE(365.12,IEN,1,APP,0)),NAACT=$P(DATA,U,2),LOACT=$P(DATA,U,3)
"RTN","IBCNEML",33,0)
 .I NAACT,'LOACT,$D(RPTDATA("PYR",IEN)) S RPTDATA("INACTIVE",IEN)=PAYER
"RTN","IBCNEML",34,0)
 .Q
"RTN","IBCNEML",35,0)
 ; create and send Mailman messages
"RTN","IBCNEML",36,0)
 S MGRP=$$MGRP^IBCNEUT5(),STR1="Immediate Attention Required:",STR2="-----------------------------"
"RTN","IBCNEML",37,0)
 I TOTAL D
"RTN","IBCNEML",38,0)
 .S MSUBJ="ACTION REQ: POTENTIAL PAYERS TO BE LINKED",LN=0
"RTN","IBCNEML",39,0)
 .S LN=LN+1,MSG(LN)="TOTAL NUMBER OF PAYERS WITH POTENTIAL INSURANCE COMPANY MATCHES: "_TOTAL
"RTN","IBCNEML",40,0)
 .S LN=LN+1,MSG(LN)=""
"RTN","IBCNEML",41,0)
 .S LN=LN+1,MSG(LN)=STR1
"RTN","IBCNEML",42,0)
 .S LN=LN+1,MSG(LN)=STR2
"RTN","IBCNEML",43,0)
 .S LN=LN+1,MSG(LN)="Please link the associated active insurance companies to these payers at your"
"RTN","IBCNEML",44,0)
 .S LN=LN+1,MSG(LN)="earliest convenience. Please visit the e-Business Projects Webpage on VistA"
"RTN","IBCNEML",45,0)
 .S LN=LN+1,MSG(LN)="University Website to download the Link Payer Instructions."
"RTN","IBCNEML",46,0)
 .D MSG^IBCNEUT5(MGRP,MSUBJ,"MSG(")
"RTN","IBCNEML",47,0)
 .Q
"RTN","IBCNEML",48,0)
 I $D(RPTDATA("INACTIVE")) D
"RTN","IBCNEML",49,0)
 .K MSG
"RTN","IBCNEML",50,0)
 .S MSUBJ="ACTION REQ: PAYERS TO BE LOCALLY ACTIVATED",LN=0
"RTN","IBCNEML",51,0)
 .S LN=LN+1,MSG(LN)="Nationally Active Payers that are Locally Inactive:"
"RTN","IBCNEML",52,0)
 .S LN=LN+1,MSG(LN)="---------------------------------------------------"
"RTN","IBCNEML",53,0)
 .S LN=LN+1,MSG(LN)=""
"RTN","IBCNEML",54,0)
 .S IEN="" F  S IEN=$O(RPTDATA("INACTIVE",IEN)) Q:IEN=""  S LN=LN+1,MSG(LN)=$$FO^IBCNEUT1(RPTDATA("INACTIVE",IEN),79)
"RTN","IBCNEML",55,0)
 .S LN=LN+1,MSG(LN)=""
"RTN","IBCNEML",56,0)
 .S LN=LN+1,MSG(LN)=STR1
"RTN","IBCNEML",57,0)
 .S LN=LN+1,MSG(LN)=STR2
"RTN","IBCNEML",58,0)
 .S LN=LN+1,MSG(LN)="Please locally activate the payers after you link insurance companies to them."
"RTN","IBCNEML",59,0)
 .S LN=LN+1,MSG(LN)="Please visit the e-Business Projects Webpage on VistA University Website to"
"RTN","IBCNEML",60,0)
 .S LN=LN+1,MSG(LN)="download the Payer Activation Instructions."
"RTN","IBCNEML",61,0)
 .D MSG^IBCNEUT5(MGRP,MSUBJ,"MSG(")
"RTN","IBCNEML",62,0)
 .Q
"RTN","IBCNEML",63,0)
 Q
"RTN","IBCNEQU")
0^8^B109122026^B82573317
"RTN","IBCNEQU",1,0)
IBCNEQU ;DAOU/BHS - eIV REQUEST ELECTRONIC INSURANCE INQUIRY ;24-JUN-2002
"RTN","IBCNEQU",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,438**;21-MAR-94;Build 52
"RTN","IBCNEQU",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEQU",4,0)
 ;
"RTN","IBCNEQU",5,0)
 ; eIV - Insurance Verification Interface
"RTN","IBCNEQU",6,0)
 ;
"RTN","IBCNEQU",7,0)
 ; Must call from EN
"RTN","IBCNEQU",8,0)
 Q
"RTN","IBCNEQU",9,0)
 ;
"RTN","IBCNEQU",10,0)
EN ; Entry pt
"RTN","IBCNEQU",11,0)
 ; Init vars
"RTN","IBCNEQU",12,0)
 N DFN,X,POP,IBFASTXT,VALMCNT,VALMBG,VALMHDR,VALMBCK,IDUZ
"RTN","IBCNEQU",13,0)
 ;
"RTN","IBCNEQU",14,0)
EN1 I $G(IBFASTXT) G ENX
"RTN","IBCNEQU",15,0)
 S DFN=$$PAT I 'DFN G ENX
"RTN","IBCNEQU",16,0)
 D EN^VALM("IBCNE REQUEST INS INQUIRY LIST")
"RTN","IBCNEQU",17,0)
 G EN1
"RTN","IBCNEQU",18,0)
 ;
"RTN","IBCNEQU",19,0)
ENX ; EN exit pt
"RTN","IBCNEQU",20,0)
 Q
"RTN","IBCNEQU",21,0)
 ;
"RTN","IBCNEQU",22,0)
INIT ; -- set up initial variables
"RTN","IBCNEQU",23,0)
 S VALMCNT=0,VALMBG=1,IDUZ=DUZ
"RTN","IBCNEQU",24,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J),^TMP("IBCNEQUDTS",$J)
"RTN","IBCNEQU",25,0)
 D HDR
"RTN","IBCNEQU",26,0)
 D BLD(DFN)
"RTN","IBCNEQU",27,0)
 ;
"RTN","IBCNEQU",28,0)
INITX ; INIT exit pt
"RTN","IBCNEQU",29,0)
 Q
"RTN","IBCNEQU",30,0)
 ;
"RTN","IBCNEQU",31,0)
HDR ; -- screen header for initial screen
"RTN","IBCNEQU",32,0)
 N VA,VAERR,%DT,II
"RTN","IBCNEQU",33,0)
 D PID^VADPT
"RTN","IBCNEQU",34,0)
 S VALMHDR(1)="Request Electronic Insurance Inquiry for Patient: "_$E($P($G(^DPT(DFN,0)),U),1,20)_" "_$E($G(^(0)),1)_VA("BID")
"RTN","IBCNEQU",35,0)
 S VALMHDR(2)=" "
"RTN","IBCNEQU",36,0)
 S VALMHDR(3)=" "
"RTN","IBCNEQU",37,0)
 S II=1
"RTN","IBCNEQU",38,0)
 I +$$BUFFER^IBCNBU1(DFN) S II=II+1,VALMHDR(II)="*** Patient has Insurance Buffer Records"
"RTN","IBCNEQU",39,0)
 I $P($G(^DPT(DFN,.35)),U)'="" S II=II+1,VALMHDR(II)="*** Date of Death: "_$$FMTE^XLFDT($P($G(^DPT(DFN,.35)),U)\1,"5Z")
"RTN","IBCNEQU",40,0)
 Q
"RTN","IBCNEQU",41,0)
 ;
"RTN","IBCNEQU",42,0)
HELP ; -- help code
"RTN","IBCNEQU",43,0)
 D FULL^VALM1
"RTN","IBCNEQU",44,0)
 W @IOF
"RTN","IBCNEQU",45,0)
 W !,"This screen lists all eligible (non-Medicaid) Insurance policies"
"RTN","IBCNEQU",46,0)
 W !,"for the patient.  Selecting an entry in this list creates an Insurance Buffer"
"RTN","IBCNEQU",47,0)
 W !,"entry with Source 'eIV' and Override Freshness Flag 'Yes'.  Setting this flag"
"RTN","IBCNEQU",48,0)
 W !,"is designed to force the eIV extract to attempt to create an insurance"
"RTN","IBCNEQU",49,0)
 W !,"inquiry based on this entry."
"RTN","IBCNEQU",50,0)
 W !!,"Entries with an asterisk (*) preceding the Insurance Co name already exist in"
"RTN","IBCNEQU",51,0)
 W !,"the Insurance Buffer with the exact same name, the exact same Group Number,"
"RTN","IBCNEQU",52,0)
 W !,"and the Override Freshness Flag set to 'Yes'.  Selecting an entry with an"
"RTN","IBCNEQU",53,0)
 W !,"asterisk (*) will create a duplicate entry in the Insurance Buffer file for"
"RTN","IBCNEQU",54,0)
 W !,"the patient."
"RTN","IBCNEQU",55,0)
 D PAUSE^VALM1
"RTN","IBCNEQU",56,0)
 S VALMBCK="R"
"RTN","IBCNEQU",57,0)
 Q
"RTN","IBCNEQU",58,0)
 ;
"RTN","IBCNEQU",59,0)
EXIT ; -- exit code
"RTN","IBCNEQU",60,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",61,0)
 Q
"RTN","IBCNEQU",62,0)
 ;
"RTN","IBCNEQU",63,0)
PAT() ; Prompt user to select a patient
"RTN","IBCNEQU",64,0)
 ; Init vars
"RTN","IBCNEQU",65,0)
 N DIC,X,Y,DISYS,%H,%I,DUOUT,DTOUT
"RTN","IBCNEQU",66,0)
 ;
"RTN","IBCNEQU",67,0)
 W !
"RTN","IBCNEQU",68,0)
 ; Exclude non-Veterans
"RTN","IBCNEQU",69,0)
 S DIC(0)="AEQMN"
"RTN","IBCNEQU",70,0)
 S DIC("S")="I $G(^(""VET""))=""Y"",('$P($G(^(0)),U,21))",DIC="^DPT("
"RTN","IBCNEQU",71,0)
 D ^DIC
"RTN","IBCNEQU",72,0)
 I $D(DUOUT)!$D(DTOUT)!(Y<1) Q ""
"RTN","IBCNEQU",73,0)
 ;
"RTN","IBCNEQU",74,0)
 Q +Y
"RTN","IBCNEQU",75,0)
 ;
"RTN","IBCNEQU",76,0)
BLD(DFN) ; Build list of all insurance for patient
"RTN","IBCNEQU",77,0)
 N IBCT,IBINS,IBDATA0,IBDATA1,IBDATA2,II,STR,IBINSIEN,IBINAME,IBHOLD
"RTN","IBCNEQU",78,0)
 N VNODT,X,POP,IBBUF,IBBUFNM,IBIEN,IBBUFDT,TMPNM,GRPNUM,SFANAME
"RTN","IBCNEQU",79,0)
 ;
"RTN","IBCNEQU",80,0)
 K ^TMP("IBCNEQU",$J),^TMP("IBCNEQUX",$J)
"RTN","IBCNEQU",81,0)
 ;
"RTN","IBCNEQU",82,0)
 S (IBCT,VALMCNT)=0
"RTN","IBCNEQU",83,0)
 ;
"RTN","IBCNEQU",84,0)
 ; Determine if buffer entries exist for this DFN and build array by name
"RTN","IBCNEQU",85,0)
 S IBIEN=0
"RTN","IBCNEQU",86,0)
 F  S IBIEN=$O(^IBA(355.33,"C",DFN,IBIEN)) Q:'IBIEN  D
"RTN","IBCNEQU",87,0)
 . S IBBUFDT=$G(^IBA(355.33,IBIEN,0))
"RTN","IBCNEQU",88,0)
 . ; Include E status only
"RTN","IBCNEQU",89,0)
 . I $P(IBBUFDT,U,4)'="E" Q
"RTN","IBCNEQU",90,0)
 . S IBBUFNM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,20)),U))
"RTN","IBCNEQU",91,0)
 . I IBBUFNM="" Q
"RTN","IBCNEQU",92,0)
 . S GRPNUM=$$TRIM^XLFSTR($P($G(^IBA(355.33,IBIEN,40)),U,3))
"RTN","IBCNEQU",93,0)
 . S IBBUF(IBBUFNM," "_GRPNUM)=""
"RTN","IBCNEQU",94,0)
 . Q
"RTN","IBCNEQU",95,0)
 ;
"RTN","IBCNEQU",96,0)
 ; Populate IBINS array with Patient Insurance records
"RTN","IBCNEQU",97,0)
 D ALL^IBCNS1(DFN,"IBINS")
"RTN","IBCNEQU",98,0)
 I $G(IBINS(0)) S II=0 F  S II=$O(IBINS(II)) Q:'II  D
"RTN","IBCNEQU",99,0)
 . S IBDATA0=$G(IBINS(II,0))
"RTN","IBCNEQU",100,0)
 . S IBDATA1=$G(IBINS(II,1))
"RTN","IBCNEQU",101,0)
 . S IBDATA2=$G(^IBA(355.3,+$P(IBDATA0,U,18),0))
"RTN","IBCNEQU",102,0)
 . S GRPNUM=$$TRIM^XLFSTR($P(IBDATA2,U,4))
"RTN","IBCNEQU",103,0)
 . S IBINSIEN=+$P(IBDATA0,U)
"RTN","IBCNEQU",104,0)
 . Q:'IBINSIEN!'$D(^DIC(36,IBINSIEN,0))
"RTN","IBCNEQU",105,0)
 . S IBINAME=$P($G(^DIC(36,IBINSIEN,0)),U)
"RTN","IBCNEQU",106,0)
 . S TMPNM=$$TRIM^XLFSTR(IBINAME)
"RTN","IBCNEQU",107,0)
 . ; Filter Ins Co's by name - currently filter Medicaid
"RTN","IBCNEQU",108,0)
 . I $$EXCLUDE^IBCNEUT4(TMPNM) Q
"RTN","IBCNEQU",109,0)
 . S IBCT=IBCT+1
"RTN","IBCNEQU",110,0)
 . S STR=""
"RTN","IBCNEQU",111,0)
 . S STR=$$SETFLD^VALM1(IBCT,STR,"NUMBER")
"RTN","IBCNEQU",112,0)
 . ; Update IBINAME if found in buffer already
"RTN","IBCNEQU",113,0)
 . S IBINAME=$S($D(IBBUF(TMPNM," "_GRPNUM)):"*",1:"")_IBINAME
"RTN","IBCNEQU",114,0)
 . S STR=$$SETFLD^VALM1(IBINAME,STR,"NAME")
"RTN","IBCNEQU",115,0)
 . S STR=$$SETFLD^VALM1($E($P(IBDATA0,U,2),1,14),STR,"POLICY")
"RTN","IBCNEQU",116,0)
 . S IBHOLD=$P(IBDATA0,U,6),STR=$$SETFLD^VALM1($S(IBHOLD="v":"SELF",IBHOLD="s":"SPOUSE",IBHOLD="o":"OTHER",1:"UNKNOWN"),STR,"HOLDER")
"RTN","IBCNEQU",117,0)
 . S STR=$$SETFLD^VALM1($E($$GRP^IBCNS($P(IBDATA0,U,18)),1,10),STR,"GROUP")
"RTN","IBCNEQU",118,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA0,U,8),"5Z"),STR,"EFFDT")
"RTN","IBCNEQU",119,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA0,U,4),"5Z"),STR,"EXPIRE")
"RTN","IBCNEQU",120,0)
 . S STR=$$SETFLD^VALM1($E($P($G(^IBE(355.1,+$P(IBDATA2,U,9),0)),U),1,8),STR,"TYPE")
"RTN","IBCNEQU",121,0)
 . S STR=$$SETFLD^VALM1($P($G(^IBE(355.1,+$P(IBDATA2,U,9),0)),U),STR,"TYPEPOL")
"RTN","IBCNEQU",122,0)
 . S STR=$$SETFLD^VALM1($E($P($G(^VA(200,+$P(IBDATA1,U,4),0)),U),1,15),STR,"VERIFIED BY")
"RTN","IBCNEQU",123,0)
 . S STR=$$SETFLD^VALM1($$FMTE^XLFDT($P(IBDATA1,U,3),"5Z"),STR,"VERIFIED ON")
"RTN","IBCNEQU",124,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA2,U,6)),STR,"PRECERT")
"RTN","IBCNEQU",125,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA2,U,5)),STR,"UR")
"RTN","IBCNEQU",126,0)
 . S STR=$$SETFLD^VALM1($$YN($P(IBDATA0,U,20)),STR,"COB")
"RTN","IBCNEQU",127,0)
 . D SET(STR)
"RTN","IBCNEQU",128,0)
 . Q
"RTN","IBCNEQU",129,0)
 ;
"RTN","IBCNEQU",130,0)
 I 'IBCT D
"RTN","IBCNEQU",131,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",132,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)=" "
"RTN","IBCNEQU",133,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",134,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)="      No eligible insurance policies found."
"RTN","IBCNEQU",135,0)
 . Q
"RTN","IBCNEQU",136,0)
 ;
"RTN","IBCNEQU",137,0)
 S VNODT=$P($G(^IBA(354,DFN,60)),U,1) I VNODT D
"RTN","IBCNEQU",138,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",139,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)=" "
"RTN","IBCNEQU",140,0)
 . S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",141,0)
 . S ^TMP("IBCNEQU",$J,VALMCNT,0)="      Verification of No Coverage "_$$FMTE^XLFDT(VNODT,"5Z")_"."
"RTN","IBCNEQU",142,0)
 . Q
"RTN","IBCNEQU",143,0)
 ;
"RTN","IBCNEQU",144,0)
BLDX ; BLD exit pt
"RTN","IBCNEQU",145,0)
 Q
"RTN","IBCNEQU",146,0)
 ;
"RTN","IBCNEQU",147,0)
SET(LINE) ; -- set arrays
"RTN","IBCNEQU",148,0)
 ; LINE - line of text to display
"RTN","IBCNEQU",149,0)
 S VALMCNT=VALMCNT+1
"RTN","IBCNEQU",150,0)
 S ^TMP("IBCNEQU",$J,VALMCNT,0)=LINE
"RTN","IBCNEQU",151,0)
 S ^TMP("IBCNEQU",$J,"IDX",VALMCNT,IBCT)=""
"RTN","IBCNEQU",152,0)
 S ^TMP("IBCNEQUX",$J,IBCT)=VALMCNT_U_DFN_U_II_U_IBINAME_U_IBDATA0
"RTN","IBCNEQU",153,0)
 S ^TMP("IBCNEQUX",$J)=$G(^TMP("IBCNEQUX",$J))+1
"RTN","IBCNEQU",154,0)
 Q
"RTN","IBCNEQU",155,0)
 ;
"RTN","IBCNEQU",156,0)
YN(X) ; -- convert 1 or 0 to yes/no/unknown
"RTN","IBCNEQU",157,0)
 Q $S(X=0:"NO",X=1:"YES",1:"UNK")
"RTN","IBCNEQU",158,0)
 ;
"RTN","IBCNEQU",159,0)
SELECT ; User selects insurance from list to be reconfirmed
"RTN","IBCNEQU",160,0)
 N IBDATA,IBDPT,IBDA,DIR,X,Y,D0,DG,DIC,DISYS,DIW,IENS,IBERROR,IBIEN,IBSYM
"RTN","IBCNEQU",161,0)
 ;
"RTN","IBCNEQU",162,0)
 D FULL^VALM1
"RTN","IBCNEQU",163,0)
 S VALMBCK="R"
"RTN","IBCNEQU",164,0)
 ;
"RTN","IBCNEQU",165,0)
 I '$O(^TMP("IBCNEQUX",$J,0)) D  G SELECTX
"RTN","IBCNEQU",166,0)
 . W !!,"No Insurance policies to select."
"RTN","IBCNEQU",167,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",168,0)
 . Q
"RTN","IBCNEQU",169,0)
 ;
"RTN","IBCNEQU",170,0)
 S (IBDPT,IBDA,IBERROR)=""
"RTN","IBCNEQU",171,0)
 S IBDATA=$$SEL()
"RTN","IBCNEQU",172,0)
 S IBDPT=+$P(IBDATA,U)       ; Patient DFN
"RTN","IBCNEQU",173,0)
 S IBDA=+$P(IBDATA,U,2)      ; 2.312 ptr
"RTN","IBCNEQU",174,0)
 I +IBDPT,+IBDA D
"RTN","IBCNEQU",175,0)
 . S IBIEN=+$P(IBDATA,U,4)     ; Ins Co IEN (#36)
"RTN","IBCNEQU",176,0)
 . S IBSYM=$P($$INSERROR^IBCNEUT3("I",IBIEN),"^",1)
"RTN","IBCNEQU",177,0)
 . S ^TMP("IBCNEQUDTS",$J)=1
"RTN","IBCNEQU",178,0)
 . D PT^IBCNEBF(IBDPT,IBDA,IBSYM,1,1,.IBERROR)
"RTN","IBCNEQU",179,0)
 . ; Check for errors
"RTN","IBCNEQU",180,0)
 . I $G(IBERROR)'="" W !!,"Insurance Buffer entry could not be created due to error!  Please try again.",!
"RTN","IBCNEQU",181,0)
 . I $G(IBERROR)="" W !!,"Insurance Buffer entry created!",!
"RTN","IBCNEQU",182,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",183,0)
 . K ^TMP("IBCNEQUDTS",$J)
"RTN","IBCNEQU",184,0)
 ;
"RTN","IBCNEQU",185,0)
 I $P(IBDATA,U,3)="~NO PAYER" D
"RTN","IBCNEQU",186,0)
 . W !!,"Payer missing. Identification inquiries not allowed."    ; IB*2*416
"RTN","IBCNEQU",187,0)
 . S DIR(0)="E" D ^DIR K DIR
"RTN","IBCNEQU",188,0)
 . Q
"RTN","IBCNEQU",189,0)
 ;
"RTN","IBCNEQU",190,0)
SELECTX ;
"RTN","IBCNEQU",191,0)
 S VALMBCK="R"
"RTN","IBCNEQU",192,0)
 Q
"RTN","IBCNEQU",193,0)
 ;
"RTN","IBCNEQU",194,0)
SEL() ; User selects insurance from list
"RTN","IBCNEQU",195,0)
 N IBSELN,DIR,X,Y,DIRUT,DUOUT
"RTN","IBCNEQU",196,0)
 ;
"RTN","IBCNEQU",197,0)
 S IBSELN=""
"RTN","IBCNEQU",198,0)
 ; Select entry to reconfirm
"RTN","IBCNEQU",199,0)
 S DIR(0)="NO^1:"_$G(^TMP("IBCNEQUX",$J))_":0"
"RTN","IBCNEQU",200,0)
 S DIR("A")="Select entry to request electronic inquiry"
"RTN","IBCNEQU",201,0)
 S DIR("?",1)="  Select an entry to initiate an insurance inquiry."
"RTN","IBCNEQU",202,0)
 S DIR("?",2)="  If entry contains an Insurance Co name, an Insurance"
"RTN","IBCNEQU",203,0)
 S DIR("?",3)="  Buffer entry will be created for nightly batch extract."
"RTN","IBCNEQU",204,0)
 S DIR("?")="  "
"RTN","IBCNEQU",205,0)
 D ^DIR K DIR
"RTN","IBCNEQU",206,0)
 I $D(DIRUT)!$D(DUOUT)!(Y<1) G SELX
"RTN","IBCNEQU",207,0)
 S IBSELN=$O(^TMP("IBCNEQU",$J,"IDX",Y,0))
"RTN","IBCNEQU",208,0)
 I IBSELN S IBSELN=$P($G(^TMP("IBCNEQUX",$J,IBSELN)),U,2,99)
"RTN","IBCNEQU",209,0)
 I $E($P(IBSELN,U,3))="*" W ! D  S IBSELN="" G SELX
"RTN","IBCNEQU",210,0)
 .S DIR(0)="EA"
"RTN","IBCNEQU",211,0)
 .S DIR("A",1)=""
"RTN","IBCNEQU",212,0)
 .S DIR("A",2)="Selected policy has an existing buffer entry."
"RTN","IBCNEQU",213,0)
 .S DIR("A",3)="You must first process the existing buffer entry."
"RTN","IBCNEQU",214,0)
 .S DIR("A")="Press RETURN to continue " D ^DIR K DIR W !
"RTN","IBCNEQU",215,0)
 .Q
"RTN","IBCNEQU",216,0)
 ;
"RTN","IBCNEQU",217,0)
 ; Get SERVICE TYPE CODE(s)
"RTN","IBCNEQU",218,0)
 D STC
"RTN","IBCNEQU",219,0)
 I X="^" S IBSELN="" G SELX  ; '^' entered thus backup a level & re-ask Insurance question
"RTN","IBCNEQU",220,0)
 ;
"RTN","IBCNEQU",221,0)
 W !
"RTN","IBCNEQU",222,0)
 S DIR(0)="Y"
"RTN","IBCNEQU",223,0)
 S DIR("A")="Are you sure you want to request an insurance inquiry"
"RTN","IBCNEQU",224,0)
 S DIR("B")="NO"
"RTN","IBCNEQU",225,0)
 S DIR("?",1)="  If yes, a request will be created for the nightly batch."
"RTN","IBCNEQU",226,0)
 D ^DIR K DIR
"RTN","IBCNEQU",227,0)
 I $D(DIRUT)!$D(DUOUT)!('Y) S IBSELN=""
"RTN","IBCNEQU",228,0)
 ;
"RTN","IBCNEQU",229,0)
SELX Q IBSELN
"RTN","IBCNEQU",230,0)
 ;
"RTN","IBCNEQU",231,0)
STC ; Ask for SERVICE TYPE CODE(s) to send
"RTN","IBCNEQU",232,0)
 N DIR,X,Y
"RTN","IBCNEQU",233,0)
 ; IBEISTC used as STC variable
"RTN","IBCNEQU",234,0)
 S IBEISTC=""
"RTN","IBCNEQU",235,0)
 S DIR(0)="PAO^365.013:EMZ",DIR("A")="Enter Service Type Code: "
"RTN","IBCNEQU",236,0)
 S DIR("??")="^D HELPSTC2^IBCNEQU"
"RTN","IBCNEQU",237,0)
STCEN ; Intital and re-enterant tag upon error
"RTN","IBCNEQU",238,0)
 D ^DIR Q:X="^"
"RTN","IBCNEQU",239,0)
 ; Check to verify code is active, if not, display error and ask again
"RTN","IBCNEQU",240,0)
 I $P($G(Y(0)),U,3)'="" W !,"Code selected is not an active code - please select another code.",! G STCEN
"RTN","IBCNEQU",241,0)
 ; Single STC entered, set IBEISTC to be STC IEN
"RTN","IBCNEQU",242,0)
 I Y'=-1 S IBEISTC=$P(Y,U,1)
"RTN","IBCNEQU",243,0)
 ; No code entered, thus asterisk designates sending DEFAULT and SITE SELECTED SERVICE TYPE CODES
"RTN","IBCNEQU",244,0)
 I X="" S IBEISTC="*" W "..Default and Site Selected codes will be sent."
"RTN","IBCNEQU",245,0)
 Q
"RTN","IBCNEQU",246,0)
 ;
"RTN","IBCNEQU",247,0)
FASTEXIT ; Sets flag to indicate a quick exit from the option
"RTN","IBCNEQU",248,0)
 N DIR,DIRUT,X,Y
"RTN","IBCNEQU",249,0)
 S VALMBCK="Q"
"RTN","IBCNEQU",250,0)
 D FULL^VALM1
"RTN","IBCNEQU",251,0)
 S DIR(0)="Y",DIR("A")="Exit option entirely",DIR("B")="NO"
"RTN","IBCNEQU",252,0)
 D ^DIR
"RTN","IBCNEQU",253,0)
 I +Y S IBFASTXT=1
"RTN","IBCNEQU",254,0)
 Q
"RTN","IBCNEQU",255,0)
 ;
"RTN","IBCNEQU",256,0)
ADD() ;
"RTN","IBCNEQU",257,0)
 NEW PAYER,TQIEN,OK,STR,SRVICEDT,FRESHDT,DATA1,DATA2,TQIEN,FRESHDAY
"RTN","IBCNEQU",258,0)
 I '$D(^IBCN(365.1,"E",DFN)) Q 0  ; Does this pt have a TQ entry?
"RTN","IBCNEQU",259,0)
 S (TQIEN,OK)=""
"RTN","IBCNEQU",260,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER") ; Get payer IEN
"RTN","IBCNEQU",261,0)
 F  S TQIEN=$O(^IBCN(365.1,"E",DFN,TQIEN)) Q:'TQIEN!OK  D
"RTN","IBCNEQU",262,0)
 . S STR=$G(^IBCN(365.1,TQIEN,0))
"RTN","IBCNEQU",263,0)
 . ; If "~NO PAYER" & Transmitted
"RTN","IBCNEQU",264,0)
 . I $P(STR,U,3)=PAYER,$P(STR,U,4)=2 S OK=1 Q
"RTN","IBCNEQU",265,0)
 . ; If "~NO PAYER" & Ready to Transmit & override flag
"RTN","IBCNEQU",266,0)
 . I $P(STR,U,3)=PAYER,($P(STR,U,4)=1),($P(STR,U,14)=1) S OK=1 Q
"RTN","IBCNEQU",267,0)
 I 'OK Q 0
"RTN","IBCNEQU",268,0)
 Q 1
"RTN","IBCNEQU",269,0)
 ;
"RTN","IBCNEQU",270,0)
BLKTQ ;  Create a ~NO PAYER request for 'Search for All'
"RTN","IBCNEQU",271,0)
 Q    ; no longer allowed  IB*2*416
"RTN","IBCNEQU",272,0)
 NEW PAYER,SRVICEDT,FRESHDT,DATA1,DATA2,TQIEN,FRESHDAY
"RTN","IBCNEQU",273,0)
 S PAYER=$$FIND1^DIC(365.12,,"X","~NO PAYER")
"RTN","IBCNEQU",274,0)
 D NPINIT ; Update service date and freshness
"RTN","IBCNEQU",275,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNEQU",276,0)
 S DATA1=DFN_U_PAYER_U_1_U_""_U_""_U_FRESHDT
"RTN","IBCNEQU",277,0)
 S DATA2=4_U_"I"_U_SRVICEDT
"RTN","IBCNEQU",278,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,"",1)
"RTN","IBCNEQU",279,0)
 Q
"RTN","IBCNEQU",280,0)
 ;
"RTN","IBCNEQU",281,0)
BLKX Q
"RTN","IBCNEQU",282,0)
 ;
"RTN","IBCNEQU",283,0)
NPINIT ; Initialize variables for ~NO PAYER
"RTN","IBCNEQU",284,0)
 S SRVICEDT=DT
"RTN","IBCNEQU",285,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U)
"RTN","IBCNEQU",286,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEQU",287,0)
 ;
"RTN","IBCNEQU",288,0)
 ; Update service date and freshness date based on payer allowed
"RTN","IBCNEQU",289,0)
 Q
"RTN","IBCNEQU",290,0)
 ;
"RTN","IBCNEQU",291,0)
HELPSTC2 ; Text to display in response to '??' entry
"RTN","IBCNEQU",292,0)
 N DIR
"RTN","IBCNEQU",293,0)
 D FULL^VALM1
"RTN","IBCNEQU",294,0)
 W @IOF
"RTN","IBCNEQU",295,0)
 W !,"Enter the single SERVICE TYPE CODE to be sent with inquiry or press 'ENTER' to"
"RTN","IBCNEQU",296,0)
 W !,"send DEFAULT and SITE SELECTED codes. Utilizing a single SERVICE TYPE CODE will"
"RTN","IBCNEQU",297,0)
 W !,"only provide eligibility benefit data for the selected code. Utilizing the"
"RTN","IBCNEQU",298,0)
 W !,"DEFAULT and SITE SELECTED codes will provide standard eligibility benefit data."
"RTN","IBCNEQU",299,0)
 W !,"No response generated by this option will auto-update the patient file."
"RTN","IBCNEQU",300,0)
 Q
"RTN","IBCNERPE")
0^18^B42391865^B36361133
"RTN","IBCNERPE",1,0)
IBCNERPE ;DAOU/BHS - IBCNE eIV RESPONSE REPORT (cont'd);03-JUN-2002
"RTN","IBCNERPE",2,0)
 ;;2.0;INTEGRATED BILLING;**271,300,416,438**;21-MAR-94;Build 52
"RTN","IBCNERPE",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERPE",4,0)
 ;
"RTN","IBCNERPE",5,0)
 ; Must call at tag
"RTN","IBCNERPE",6,0)
 Q
"RTN","IBCNERPE",7,0)
 ;
"RTN","IBCNERPE",8,0)
 ; This tag is only called from IBCNERP2
"RTN","IBCNERPE",9,0)
 ;
"RTN","IBCNERPE",10,0)
GETDATA(IEN,RPTDATA) ; Retrieve response data
"RTN","IBCNERPE",11,0)
 ; Init
"RTN","IBCNERPE",12,0)
 N %,CNPTR,CT,DIW,DIWI,DIWT,DIWTC,DIWX,DN,EACT,ELOC,ESRC,ETXT,DQUAL,DTYPE,FUTDT,IENS,II,LOOP,NODE0,PC,TQIEN
"RTN","IBCNERPE",13,0)
 ;
"RTN","IBCNERPE",14,0)
 ; Insured Info from eIV Response #365
"RTN","IBCNERPE",15,0)
 S RPTDATA(0)=$G(^IBCN(365,IEN,0)),TQIEN=$P(RPTDATA(0),U,5)
"RTN","IBCNERPE",16,0)
 ; Trans dates to ext format
"RTN","IBCNERPE",17,0)
 S $P(RPTDATA(0),U,7)=$$FMTE^XLFDT($P(RPTDATA(0),U,7)\1,"5Z")
"RTN","IBCNERPE",18,0)
 S RPTDATA(1)=$G(^IBCN(365,IEN,1))
"RTN","IBCNERPE",19,0)
 ; Trans ext values for SET of CODES values
"RTN","IBCNERPE",20,0)
 S IENS=IEN_","
"RTN","IBCNERPE",21,0)
 S $P(RPTDATA(1),U,8)=$$GET1^DIQ(365,IENS,1.08,"E")   ; Whose Ins
"RTN","IBCNERPE",22,0)
 S $P(RPTDATA(1),U,13)=$$GET1^DIQ(365,IENS,1.13,"E")  ; COB
"RTN","IBCNERPE",23,0)
 S RPTDATA(8)=$$GET1^DIQ(365,IENS,8.01,"E")   ; Pt Rel to Sub
"RTN","IBCNERPE",24,0)
 ; if pt. rel is empty, try to get value from the old field 365/1.09
"RTN","IBCNERPE",25,0)
 I RPTDATA(8)="" S RPTDATA(8)=$$GET1^DIQ(365,IENS,1.09,"E")
"RTN","IBCNERPE",26,0)
 ; Trans err actions/codes to ext
"RTN","IBCNERPE",27,0)
 S $P(RPTDATA(1),U,14)=$$X12^IBCNERP2(365.017,$P(RPTDATA(1),U,14))
"RTN","IBCNERPE",28,0)
 S $P(RPTDATA(1),U,15)=$$X12^IBCNERP2(365.018,$P(RPTDATA(1),U,15))
"RTN","IBCNERPE",29,0)
 ; Trans dates to ext format - check format
"RTN","IBCNERPE",30,0)
 F PC=2,9:1:12,16,17,19 S $P(RPTDATA(1),U,PC)=$$FMTE^XLFDT($P(RPTDATA(1),U,PC),"5Z")
"RTN","IBCNERPE",31,0)
 ;
"RTN","IBCNERPE",32,0)
 ; Loop thru mult Contact segs
"RTN","IBCNERPE",33,0)
 S CT=0
"RTN","IBCNERPE",34,0)
 F  S CT=$O(^IBCN(365,IEN,3,CT)) Q:'CT  D
"RTN","IBCNERPE",35,0)
 .S RPTDATA(3,CT)=$G(^IBCN(365,IEN,3,CT,0))
"RTN","IBCNERPE",36,0)
 .; Disp. blank if NOT SPECIFIED
"RTN","IBCNERPE",37,0)
 . I $P(RPTDATA(3,CT),U)="NOT SPECIFIED" S $P(RPTDATA(3,CT),U)=""
"RTN","IBCNERPE",38,0)
 .; Comm Qual #1-3
"RTN","IBCNERPE",39,0)
 .F II=1:1:3 D
"RTN","IBCNERPE",40,0)
 ..S CNPTR=$$X12^IBCNERP2(365.021,$P(RPTDATA(3,CT),U,II*2))
"RTN","IBCNERPE",41,0)
 ..I CNPTR'="" S $P(RPTDATA(3,CT),U,II*2)=CNPTR_": "_$P(RPTDATA(3,CT),U,II*2+1),$P(RPTDATA(3,CT),U,II*2+1)=""
"RTN","IBCNERPE",42,0)
 ;
"RTN","IBCNERPE",43,0)
 ; Subscriber level dates (ZTP segments)
"RTN","IBCNERPE",44,0)
 S CT=0 F  S CT=$O(^IBCN(365,IEN,7,CT)) Q:'CT  D
"RTN","IBCNERPE",45,0)
 .S NODE0=$G(^IBCN(365,IEN,7,CT,0))
"RTN","IBCNERPE",46,0)
 .S DQUAL=$P(NODE0,U,3) I 'DQUAL Q
"RTN","IBCNERPE",47,0)
 .S LOOP=$$GET1^DIQ(365.027,$P(NODE0,U,4)_",",.01)
"RTN","IBCNERPE",48,0)
 .S DTYPE=$S(LOOP["C":"S",LOOP["D":"P",1:"O")
"RTN","IBCNERPE",49,0)
 .S RPTDATA(7,DTYPE,CT)=$$X12^IBCNERP2(365.026,DQUAL)_U_$P(NODE0,U,2)
"RTN","IBCNERPE",50,0)
 .Q
"RTN","IBCNERPE",51,0)
 ;
"RTN","IBCNERPE",52,0)
 ; Reject reasons
"RTN","IBCNERPE",53,0)
 S CT=0 F  S CT=$O(^IBCN(365,IEN,6,CT)) Q:'CT  D
"RTN","IBCNERPE",54,0)
 .S NODE0=$G(^IBCN(365,IEN,6,CT,0)) I '$P(NODE0,U,3) Q
"RTN","IBCNERPE",55,0)
 .S ETXT=$$X12^IBCNERP2(365.017,$P(NODE0,U,3))
"RTN","IBCNERPE",56,0)
 .S ELOC=$P(NODE0,U,2) S:ELOC="" ELOC="N/A"
"RTN","IBCNERPE",57,0)
 .S EACT=$$X12^IBCNERP2(365.018,$P(NODE0,U,4)) S:EACT="" EACT="N/A"
"RTN","IBCNERPE",58,0)
 .S LOOP=$$X12^IBCNERP2(365.027,$P(NODE0,U,5)) S:LOOP="" LOOP="N/A"
"RTN","IBCNERPE",59,0)
 .S ESRC=$P(NODE0,U,6) S:ESRC="" ESRC="N/A"
"RTN","IBCNERPE",60,0)
 .S RPTDATA(6,CT)=ELOC_U_ETXT_U_EACT_U_LOOP_U_ESRC
"RTN","IBCNERPE",61,0)
 .Q
"RTN","IBCNERPE",62,0)
 ;
"RTN","IBCNERPE",63,0)
FUTDT I TQIEN D  ; If there is a future date, display it
"RTN","IBCNERPE",64,0)
 . S FUTDT=$P($G(^IBCN(365.1,TQIEN,0)),U,9) Q:FUTDT=""
"RTN","IBCNERPE",65,0)
 . S II=$O(RPTDATA(5,""),-1)+1
"RTN","IBCNERPE",66,0)
 . S RPTDATA(5,II)=" ",II=II+1
"RTN","IBCNERPE",67,0)
 . S RPTDATA(5,II)="Inquiry will be automatically resubmitted on "_$$FMTE^XLFDT(FUTDT,"5Z")_"."
"RTN","IBCNERPE",68,0)
 ; 
"RTN","IBCNERPE",69,0)
GETDATX ; GETDATA exit point
"RTN","IBCNERPE",70,0)
 Q
"RTN","IBCNERPE",71,0)
 ;
"RTN","IBCNERPE",72,0)
 ; This tag is only called from IBCNERP3
"RTN","IBCNERPE",73,0)
 ;
"RTN","IBCNERPE",74,0)
DATA(DISPDATA)  ;  Build disp lines
"RTN","IBCNERPE",75,0)
 N LCT,CT,SEGCT,ITEM,CT2,NTCT,CNCT,ERCT,RPTDATA,DCT,DTYPE
"RTN","IBCNERPE",76,0)
 ; Merge into local array
"RTN","IBCNERPE",77,0)
 M RPTDATA=^TMP($J,RTN,SORT1,SORT2,CNT)
"RTN","IBCNERPE",78,0)
 ; Build
"RTN","IBCNERPE",79,0)
 S LCT=1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.01),17,"R")_$P(RPTDATA(1),U,1)
"RTN","IBCNERPE",80,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.05),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,5),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.02),22,"R")_$P(RPTDATA(1),U,2)
"RTN","IBCNERPE",81,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.03),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,3),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.04),22,"R")_$P(RPTDATA(1),U,4)
"RTN","IBCNERPE",82,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.06),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,6),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.07),22,"R")_$P(RPTDATA(1),U,7)
"RTN","IBCNERPE",83,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.08),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,8),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,8.01),22,"R")_RPTDATA(8)
"RTN","IBCNERPE",84,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.18),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,18),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.13),22,"R")_$P(RPTDATA(1),U,13)
"RTN","IBCNERPE",85,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.1),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,10),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.16),22,"R")_$P(RPTDATA(1),U,16)
"RTN","IBCNERPE",86,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.11),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,11),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.17),22,"R")_$P(RPTDATA(1),U,17)
"RTN","IBCNERPE",87,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.12),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,12),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.19),22,"R")_$P(RPTDATA(1),U,19)
"RTN","IBCNERPE",88,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.07),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(0),U,7),20)_$$FO^IBCNEUT1($$LBL^IBCNERP2(365,.09),22,"R")_$P(RPTDATA(0),U,9)
"RTN","IBCNERPE",89,0)
 S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($$LBL^IBCNERP2(365,1.2),17,"R")_$$FO^IBCNEUT1($P(RPTDATA(1),U,20),20)
"RTN","IBCNERPE",90,0)
 ;
"RTN","IBCNERPE",91,0)
 ; Dates
"RTN","IBCNERPE",92,0)
 F DTYPE="S","P","O" D
"RTN","IBCNERPE",93,0)
 .I '$D(RPTDATA(7,DTYPE)) Q
"RTN","IBCNERPE",94,0)
 .S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",95,0)
 .S LCT=LCT+1,DISPDATA(LCT)=$S(DTYPE="S":"Subscriber",DTYPE="P":"Patient",1:"Other")_" Dates:"
"RTN","IBCNERPE",96,0)
 .S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",97,0)
 .S DCT="" F  S DCT=$O(RPTDATA(7,DTYPE,DCT)) Q:DCT=""  D
"RTN","IBCNERPE",98,0)
 ..S LCT=LCT+1,DISPDATA(LCT)=$$FO^IBCNEUT1($P(RPTDATA(7,DTYPE,DCT),U)_": ",40)_$P(RPTDATA(7,DTYPE,DCT),U,2)
"RTN","IBCNERPE",99,0)
 ..Q
"RTN","IBCNERPE",100,0)
 .Q
"RTN","IBCNERPE",101,0)
 ;
"RTN","IBCNERPE",102,0)
 ; Contacts
"RTN","IBCNERPE",103,0)
CONT S CNCT=+$O(RPTDATA(3,""),-1) I 'CNCT G ERR
"RTN","IBCNERPE",104,0)
 S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)="Contact Information:",LCT=LCT+1
"RTN","IBCNERPE",105,0)
 ; Build
"RTN","IBCNERPE",106,0)
 F CT=1:1:CNCT D
"RTN","IBCNERPE",107,0)
 . S DISPDATA(LCT)="",LCT=LCT+1,DISPDATA(LCT)=" "
"RTN","IBCNERPE",108,0)
 . S SEGCT=$L(RPTDATA(3,CT),U)
"RTN","IBCNERPE",109,0)
 . F CT2=1:1:SEGCT S ITEM=$P(RPTDATA(3,CT),U,CT2) I $L(ITEM)>0 D
"RTN","IBCNERPE",110,0)
 . . I $L(ITEM)+$L(DISPDATA(LCT))>74 S LCT=LCT+1,DISPDATA(LCT)=" "_ITEM Q
"RTN","IBCNERPE",111,0)
 . . I DISPDATA(LCT)'=" " S DISPDATA(LCT)=DISPDATA(LCT)_",  "_ITEM Q
"RTN","IBCNERPE",112,0)
 . . S DISPDATA(LCT)=" "_ITEM
"RTN","IBCNERPE",113,0)
 . S LCT=LCT+1
"RTN","IBCNERPE",114,0)
 ; Err Info
"RTN","IBCNERPE",115,0)
ERR S ERCT=+$O(RPTDATA(6,""),-1) I 'ERCT G DATAX
"RTN","IBCNERPE",116,0)
 S DISPDATA(LCT)="",LCT=LCT+1
"RTN","IBCNERPE",117,0)
 S DISPDATA(LCT)="Error Information:",LCT=LCT+1
"RTN","IBCNERPE",118,0)
 S DISPDATA(LCT)=""
"RTN","IBCNERPE",119,0)
 F CT=1:1:ERCT D
"RTN","IBCNERPE",120,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Reject Reason: "_$P(RPTDATA(6,CT),U,2)
"RTN","IBCNERPE",121,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Action Code:   "_$P(RPTDATA(6,CT),U,3)
"RTN","IBCNERPE",122,0)
 .S LCT=LCT+1,DISPDATA(LCT)="HIPAA Loop:    "_$P(RPTDATA(6,CT),U,4)
"RTN","IBCNERPE",123,0)
 .S LCT=LCT+1,DISPDATA(LCT)="HL7 Location:  "_$P(RPTDATA(6,CT),U)
"RTN","IBCNERPE",124,0)
 .S LCT=LCT+1,DISPDATA(LCT)="Error Source:  "_$P(RPTDATA(6,CT),U,5)
"RTN","IBCNERPE",125,0)
 .S LCT=LCT+1,DISPDATA(LCT)=""
"RTN","IBCNERPE",126,0)
 .Q
"RTN","IBCNERPE",127,0)
DATAX ;
"RTN","IBCNERPE",128,0)
 ; Disp Future Date and Misc. Comments
"RTN","IBCNERPE",129,0)
 I $O(RPTDATA(5,0))'="" D
"RTN","IBCNERPE",130,0)
 . F CT=1:1:+$O(RPTDATA(5,""),-1) D
"RTN","IBCNERPE",131,0)
 .. S DISPDATA(LCT)=" "_$$FO^IBCNEUT1("",7,"R")_$G(RPTDATA(5,CT)),LCT=LCT+1
"RTN","IBCNERPE",132,0)
 ;
"RTN","IBCNERPE",133,0)
 Q
"RTN","IBCNERTQ")
0^16^B44031881^n/a
"RTN","IBCNERTQ",1,0)
IBCNERTQ ;BI/BI-Real-time Insurance Verification ;27-AUG-2010
"RTN","IBCNERTQ",2,0)
 ;;2.0;INTEGRATED BILLING;**438**;27-AUG-2010;Build 52
"RTN","IBCNERTQ",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERTQ",4,0)
 Q
"RTN","IBCNERTQ",5,0)
 ;
"RTN","IBCNERTQ",6,0)
TRIG(N2) ; Called by triggers in the INSURANCE BUFFER FILE Dictionary (355.33)
"RTN","IBCNERTQ",7,0)
 ; Fields:  20.01 - INSURANCE COMPANY NAME
"RTN","IBCNERTQ",8,0)
 ;          40.02 - GROUP NAME
"RTN","IBCNERTQ",9,0)
 ;          40.03 - GROUP NUMBER
"RTN","IBCNERTQ",10,0)
 ;          60.01 - PATIENT NAME
"RTN","IBCNERTQ",11,0)
 ;          60.04 - SUBSCRIBER ID
"RTN","IBCNERTQ",12,0)
 ;          60.08 - INSURED'S DOB
"RTN","IBCNERTQ",13,0)
 ;
"RTN","IBCNERTQ",14,0)
 ; To make a request for Real Time Verification
"RTN","IBCNERTQ",15,0)
 ; The following fields must contain data.
"RTN","IBCNERTQ",16,0)
 ;          20.01 - INSURANCE COMPANY NAME
"RTN","IBCNERTQ",17,0)
 ;          60.01 - PATIENT NAME
"RTN","IBCNERTQ",18,0)
 ;          60.04 - SUBSCRIBER ID
"RTN","IBCNERTQ",19,0)
 ;          60.08 - INSURED'S DOB (if patient is not the subscriber)
"RTN","IBCNERTQ",20,0)
 ;
"RTN","IBCNERTQ",21,0)
 N TQIEN,TQN0,NODE20,NODE40,NODE60,QF,N4,PTID,SUBID,MGRP,DFN
"RTN","IBCNERTQ",22,0)
 N RESPONSE S RESPONSE=0
"RTN","IBCNERTQ",23,0)
 ; Protect the FileMan variables.
"RTN","IBCNERTQ",24,0)
 N DA,DC,DH,DI,DK,DL,DM,DP,DQ,DR,INI,MR,NX,UP
"RTN","IBCNERTQ",25,0)
 ;
"RTN","IBCNERTQ",26,0)
 I N2="" Q RESPONSE
"RTN","IBCNERTQ",27,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNERTQ",28,0)
 S NODE20=$G(^IBA(355.33,N2,20))
"RTN","IBCNERTQ",29,0)
 S NODE40=$G(^IBA(355.33,N2,40))
"RTN","IBCNERTQ",30,0)
 S NODE60=$G(^IBA(355.33,N2,60))
"RTN","IBCNERTQ",31,0)
 I $P(NODE20,U,1)="" Q RESPONSE                      ;INSURANCE COMPANY NAME
"RTN","IBCNERTQ",32,0)
 I $P(NODE60,U,1)="" Q RESPONSE                      ;PATIENT NAME
"RTN","IBCNERTQ",33,0)
 I $P(NODE60,U,4)="" Q RESPONSE                      ;SUBSCRIBER ID
"RTN","IBCNERTQ",34,0)
 I $P(NODE60,U,14)'=18,$P(NODE60,U,8)="" Q RESPONSE  ;DATE OF BIRTH
"RTN","IBCNERTQ",35,0)
 ;
"RTN","IBCNERTQ",36,0)
 ; exclude ePharmacy buffer entries
"RTN","IBCNERTQ",37,0)
 I $G(IBNCPDPELIG) Q  ; variable set in ^IBNCPDP3
"RTN","IBCNERTQ",38,0)
 I $P($G(^IBA(355.33,N2,0)),U,17)'="" Q RESPONSE
"RTN","IBCNERTQ",39,0)
 ;
"RTN","IBCNERTQ",40,0)
 ; prevent HMS entries from creating inquiries
"RTN","IBCNERTQ",41,0)
 N PTR S PTR=+$P($G(^IBA(355.33,N2,0)),U,3)
"RTN","IBCNERTQ",42,0)
 I PTR,$P($G(^IBE(355.12,PTR,0)),U,2)="HMS",$P($G(^IBA(355.33,N2,60)),U,14)="" Q RESPONSE
"RTN","IBCNERTQ",43,0)
 ;
"RTN","IBCNERTQ",44,0)
 ; Quit if a waiting transaction exists in file #365.1
"RTN","IBCNERTQ",45,0)
 S PTID=$P(NODE60,U,1)
"RTN","IBCNERTQ",46,0)
 S SUBID=$P(NODE60,U,4)
"RTN","IBCNERTQ",47,0)
 S QF=0,N4=""
"RTN","IBCNERTQ",48,0)
 F  S N4=$O(^IBCN(365.1,"E",PTID,N4)) Q:N4=""  Q:QF=1  D
"RTN","IBCNERTQ",49,0)
 .S TQN0=$G(^IBCN(365.1,N4,0))
"RTN","IBCNERTQ",50,0)
 .; don't send again if there's an entry in the queue with the same subsciber id, same buffer entry, and
"RTN","IBCNERTQ",51,0)
 .; transmission status other than "response received" or "cancelled" 
"RTN","IBCNERTQ",52,0)
 .I $P(TQN0,U,5)=N2,".3.7."'[("."_$P(TQN0,U,4)_"."),$P(TQN0,U,16)=SUBID S QF=1 Q
"RTN","IBCNERTQ",53,0)
 .Q
"RTN","IBCNERTQ",54,0)
 I QF=1 Q RESPONSE                                    ; DON'T SEND AGAIN.
"RTN","IBCNERTQ",55,0)
 ;
"RTN","IBCNERTQ",56,0)
 ; Quit if there is a lock on patient and policy in file #355.33
"RTN","IBCNERTQ",57,0)
 L +^IBA(355.33,N2):1 I '$T Q RESPONSE                ; RECORD LOCKED By Another Process
"RTN","IBCNERTQ",58,0)
 ;
"RTN","IBCNERTQ",59,0)
 ;Store Service Type Codes in BUFFER file #355.33 just before sending to EIV TRANSMISSION QUEUE
"RTN","IBCNERTQ",60,0)
 D SETSTC(N2)
"RTN","IBCNERTQ",61,0)
 ;
"RTN","IBCNERTQ",62,0)
 ; Save and clear the dictionary 355.33 temporary error global, ^TMP("DIERR",$J)
"RTN","IBCNERTQ",63,0)
 K ^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",64,0)
 M ^TMP("IBCNERTQ","DIERR",$J)=^TMP("DIERR",$J)
"RTN","IBCNERTQ",65,0)
 K ^TMP("DIERR",$J)
"RTN","IBCNERTQ",66,0)
 ;
"RTN","IBCNERTQ",67,0)
 ; if buffer entry is currently being edited, set the flag and quit
"RTN","IBCNERTQ",68,0)
 I $G(^TMP("IBCNERTQ",$J,N2,"LOCK"))=1 S ^TMP("IBCNERTQ",$J,N2,"TRIGGER")=1 G ENDTRIG
"RTN","IBCNERTQ",69,0)
 ;
"RTN","IBCNERTQ",70,0)
 ; Sending to the EIV TRANSMISION QUEUE.
"RTN","IBCNERTQ",71,0)
 S TQIEN=$$IBE(N2) I 'TQIEN G ENDTRIG
"RTN","IBCNERTQ",72,0)
 ; Load and Send HL7 Message
"RTN","IBCNERTQ",73,0)
 S RESPONSE=$$PROCSEND(TQIEN)
"RTN","IBCNERTQ",74,0)
 ;
"RTN","IBCNERTQ",75,0)
ENDTRIG  ; Final Clean Up.
"RTN","IBCNERTQ",76,0)
 ;
"RTN","IBCNERTQ",77,0)
 ; Restore the dictionary 355.33 temporary error global, ^TMP("DIERR",$J)
"RTN","IBCNERTQ",78,0)
 K ^TMP("DIERR",$J)
"RTN","IBCNERTQ",79,0)
 M ^TMP("DIERR",$J)=^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",80,0)
 K ^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",81,0)
 ;
"RTN","IBCNERTQ",82,0)
 ; Remove Dictionary Entry Lock.
"RTN","IBCNERTQ",83,0)
 L -^IBA(355.33,N2)
"RTN","IBCNERTQ",84,0)
 ;
"RTN","IBCNERTQ",85,0)
 Q RESPONSE
"RTN","IBCNERTQ",86,0)
 ;
"RTN","IBCNERTQ",87,0)
IBE(IEN) ; Insurance Buffer Extract
"RTN","IBCNERTQ",88,0)
 N SETSTR,FRESHDAY,ISYMBOL,STATIEN,OVRFRESH
"RTN","IBCNERTQ",89,0)
 N PDOD,SRVICEDT,FRESHDT,PAYERSTR,PAYERID,SYMBOL
"RTN","IBCNERTQ",90,0)
 N PIEN,INSNAME,MCAREFLG,TQDT,TQIENS,TQOK,QUEUED
"RTN","IBCNERTQ",91,0)
 N TQIEN,CNT,SIDCNT,MAXCNT
"RTN","IBCNERTQ",92,0)
 ;
"RTN","IBCNERTQ",93,0)
 S CNT=0
"RTN","IBCNERTQ",94,0)
 ;
"RTN","IBCNERTQ",95,0)
 S QUEUED=0
"RTN","IBCNERTQ",96,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(1)     ;Returns buffer extract settings
"RTN","IBCNERTQ",97,0)
 I 'SETSTR Q QUEUED                  ;Quit if extract is not active
"RTN","IBCNERTQ",98,0)
 S MAXCNT=$P(SETSTR,U,4)             ;Max # TQ entries that may be created
"RTN","IBCNERTQ",99,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNERTQ",100,0)
 ;
"RTN","IBCNERTQ",101,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)          ;System freshness days
"RTN","IBCNERTQ",102,0)
 ;
"RTN","IBCNERTQ",103,0)
 ; Get symbol, if symbol'=" " OR "!" OR "#" then quit
"RTN","IBCNERTQ",104,0)
 S ISYMBOL=$$SYMBOL^IBCNBLL(IEN)                  ;Insurance buffer symbol
"RTN","IBCNERTQ",105,0)
 I (ISYMBOL'=" ")&(ISYMBOL'="!")&(ISYMBOL'="#") Q QUEUED
"RTN","IBCNERTQ",106,0)
 ;
"RTN","IBCNERTQ",107,0)
 ; Get the eIV STATUS IEN and quit for response related errors
"RTN","IBCNERTQ",108,0)
 S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNERTQ",109,0)
 I ",11,12,15,"[(","_STATIEN_",") Q QUEUED        ;Prevent update for response errors
"RTN","IBCNERTQ",110,0)
 ;
"RTN","IBCNERTQ",111,0)
 S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13)       ;Freshness OvrRd flag
"RTN","IBCNERTQ",112,0)
 S DFN=$P($G(^IBA(355.33,IEN,60)),U,1)            ;Patient DFN
"RTN","IBCNERTQ",113,0)
 Q:DFN="" QUEUED
"RTN","IBCNERTQ",114,0)
 I $P($G(^DPT(DFN,0)),U,21) Q QUEUED              ;Exclude if test patient
"RTN","IBCNERTQ",115,0)
 ;
"RTN","IBCNERTQ",116,0)
 S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1               ;Patient's date of death
"RTN","IBCNERTQ",117,0)
 S SRVICEDT=DT I PDOD S SRVICEDT=PDOD             ;Service Date
"RTN","IBCNERTQ",118,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNERTQ",119,0)
 S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ;Payer String
"RTN","IBCNERTQ",120,0)
 S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ;Payer ID
"RTN","IBCNERTQ",121,0)
 S SYMBOL=+PAYERSTR                               ;Payer Symbol
"RTN","IBCNERTQ",122,0)
 I '$$PYRACTV^IBCNEDE7(PIEN) Q QUEUED             ;Payer is not nationally active
"RTN","IBCNERTQ",123,0)
 ;
"RTN","IBCNERTQ",124,0)
 ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNERTQ",125,0)
 I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q QUEUED
"RTN","IBCNERTQ",126,0)
 ;
"RTN","IBCNERTQ",127,0)
 D CLEAR^IBCNEUT4(IEN)                            ;Remove any existing symbol
"RTN","IBCNERTQ",128,0)
 ;
"RTN","IBCNERTQ",129,0)
 ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNERTQ",130,0)
 I (PAYERID="")!('PIEN) Q QUEUED
"RTN","IBCNERTQ",131,0)
 ;
"RTN","IBCNERTQ",132,0)
 ; Update service date and freshness date based on payer's allowed
"RTN","IBCNERTQ",133,0)
 ;  date range
"RTN","IBCNERTQ",134,0)
 D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNERTQ",135,0)
 ;
"RTN","IBCNERTQ",136,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNERTQ",137,0)
 D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNERTQ",138,0)
 ;
"RTN","IBCNERTQ",139,0)
 ; Allow only one MEDICARE transmission per patient
"RTN","IBCNERTQ",140,0)
 S INSNAME=$P($G(^IBA(355.33,IEN,20)),U)
"RTN","IBCNERTQ",141,0)
 I INSNAME["MEDICARE",$G(MCAREFLG(DFN)) Q QUEUED
"RTN","IBCNERTQ",142,0)
 ;
"RTN","IBCNERTQ",143,0)
 ; If freshness overide flag is set, file to TQ and quit
"RTN","IBCNERTQ",144,0)
 I OVRFRESH=1 D  Q $G(TQIEN)
"RTN","IBCNERTQ",145,0)
 . NEW DIE,X,Y,DISYS
"RTN","IBCNERTQ",146,0)
 . S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNERTQ",147,0)
 . S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ^IBCNEDE1
"RTN","IBCNERTQ",148,0)
 ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNERTQ",149,0)
 ; not included
"RTN","IBCNERTQ",150,0)
 S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNERTQ",151,0)
 I ISYMBOL'="#" F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNERTQ",152,0)
 . F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNERTQ",153,0)
 .. I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNERTQ",154,0)
 I TQOK S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ^IBCNEDE1
"RTN","IBCNERTQ",155,0)
 Q $G(TQIEN)
"RTN","IBCNERTQ",156,0)
 ;
"RTN","IBCNERTQ",157,0)
PROCSEND(TQIEN) ; Make call to PROC^IBCNEDEP to build the HL7 message.  Then send the Message.
"RTN","IBCNERTQ",158,0)
 N BUFF,CNT,D,D0,DFN,DIC,DIE,DILOCKTM,DISYS,EXT
"RTN","IBCNERTQ",159,0)
 N FRDT,GT1,HCT,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH
"RTN","IBCNERTQ",160,0)
 N HLFS,HLHDR,HLINST,HLIP,HLN,HLP,HLPARAM,HLPROD,HLQ,HLRESLT
"RTN","IBCNERTQ",161,0)
 N HLSAN,HLTYPE,HLX,IBCNHLP,IEN,IHCNT,IN1,IRIEN,MSGID,TOT
"RTN","IBCNERTQ",162,0)
 N NRETR,NTRAN,OVRIDE,PATID,PAYR,PID,QUERY,RSTYPE,SRVDT,STA
"RTN","IBCNERTQ",163,0)
 N SUB4,SUBID,TRANSR,U,VACNTRY,VNUM,X,ZMID
"RTN","IBCNERTQ",164,0)
 ;
"RTN","IBCNERTQ",165,0)
 K ^TMP("HLS",$J)
"RTN","IBCNERTQ",166,0)
 S IEN=TQIEN
"RTN","IBCNERTQ",167,0)
 I $D(DT)=0 N DT S DT=$$DT^XLFDT
"RTN","IBCNERTQ",168,0)
 S U="^",CNT=0,TOT=0,IHCNT=0
"RTN","IBCNERTQ",169,0)
 S QUERY=$P($G(^IBCN(365.1,IEN,0)),U,11)
"RTN","IBCNERTQ",170,0)
 I QUERY="V" S VNUM=3
"RTN","IBCNERTQ",171,0)
 I $D(VNUM)=0 Q 0
"RTN","IBCNERTQ",172,0)
 ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNERTQ",173,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNERTQ",174,0)
 D INIT^IBCNEHLO
"RTN","IBCNERTQ",175,0)
 D PROC^IBCNEDEP
"RTN","IBCNERTQ",176,0)
 D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNERTQ",177,0)
 ;  If not successful
"RTN","IBCNERTQ",178,0)
 I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q 0
"RTN","IBCNERTQ",179,0)
 ;  If successful
"RTN","IBCNERTQ",180,0)
 D SCC^IBCNEDEQ
"RTN","IBCNERTQ",181,0)
 K ^TMP("HLS",$J)
"RTN","IBCNERTQ",182,0)
 ;
"RTN","IBCNERTQ",183,0)
 I $G(^TMP("IBCNEQUDTS",$J)) D
"RTN","IBCNERTQ",184,0)
 . S DA=IEN,DIE="^IBCN(365.1,",DR="3.01////^S X=$$NOW^XLFDT" D ^DIE
"RTN","IBCNERTQ",185,0)
 ;
"RTN","IBCNERTQ",186,0)
 Q 1
"RTN","IBCNERTQ",187,0)
 ;
"RTN","IBCNERTQ",188,0)
SETSTC(BUFF) ; set service type codes
"RTN","IBCNERTQ",189,0)
 N DIE,DA,DR,K,X,Y
"RTN","IBCNERTQ",190,0)
 I '+$G(BUFF) Q
"RTN","IBCNERTQ",191,0)
 S DR=""
"RTN","IBCNERTQ",192,0)
 ; Define Service Type Codes (STC) to be sent with Insurance Inquiry
"RTN","IBCNERTQ",193,0)
 S DIE="^IBA(355.33,",DA=BUFF
"RTN","IBCNERTQ",194,0)
 ; Store 11 DEFAULT STCs
"RTN","IBCNERTQ",195,0)
 F K=80.01:.01:80.11 S DR=DR_K_"////"_$P($G(^IBE(350.9,1,60)),U,K-80*100)_";"
"RTN","IBCNERTQ",196,0)
 ; Store up to 9 SITE SELECTED STCs, otherwise NULLs
"RTN","IBCNERTQ",197,0)
 F K=80.12:.01:80.2 S DR=DR_K_"////"_$P($G(^IBE(350.9,1,61)),U,K-80*100-11)_";"
"RTN","IBCNERTQ",198,0)
 S DR=$E(DR,1,$L(DR)-1)
"RTN","IBCNERTQ",199,0)
 D ^DIE
"RTN","IBCNERTQ",200,0)
 Q
"RTN","IBCNES")
0^32^B25439392^B24997316
"RTN","IBCNES",1,0)
IBCNES ;ALB/ESG - eIV elig/Benefit screen ;14-Jul-2009
"RTN","IBCNES",2,0)
 ;;2.0;INTEGRATED BILLING;**416,438**;21-MAR-94;Build 52
"RTN","IBCNES",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNES",4,0)
 ;
"RTN","IBCNES",5,0)
 Q
"RTN","IBCNES",6,0)
 ;
"RTN","IBCNES",7,0)
EB(IBVF,IBVIENS,IBVEBFLG,IBVV,IBVSUB) ; entry point for main list display
"RTN","IBCNES",8,0)
 ; see below at tag INIT for a description of the parameters
"RTN","IBCNES",9,0)
 ; IBVSUB is required at this entry point because the ListMan array uses this variable
"RTN","IBCNES",10,0)
 ;
"RTN","IBCNES",11,0)
 D EN^VALM("IBCNE ELIGIBILITY/BENEFIT INFO")
"RTN","IBCNES",12,0)
EBX ;
"RTN","IBCNES",13,0)
 Q
"RTN","IBCNES",14,0)
 ;
"RTN","IBCNES",15,0)
HDR ; -- header code - called by ListManager
"RTN","IBCNES",16,0)
 ; build the header area based on the values of IBVF and IBVIENS
"RTN","IBCNES",17,0)
 ;
"RTN","IBCNES",18,0)
 ; pt. insurance
"RTN","IBCNES",19,0)
 I IBVF=2.322 D
"RTN","IBCNES",20,0)
 . N DFN,IBCDFN,PNB,PN,LPID,INS,INSNM
"RTN","IBCNES",21,0)
 . S DFN=+$P(IBVIENS,",",2)
"RTN","IBCNES",22,0)
 . S IBCDFN=+$P(IBVIENS,",",1)
"RTN","IBCNES",23,0)
 . S PNB=$$PT^IBEFUNC(DFN)
"RTN","IBCNES",24,0)
 . S PN=$P(PNB,U,1)    ; pt name
"RTN","IBCNES",25,0)
 . S LPID=$P(PNB,U,2)  ; pt id
"RTN","IBCNES",26,0)
 . S INS=+$P($G(^DPT(DFN,.312,IBCDFN,0)),U,1),INSNM=""
"RTN","IBCNES",27,0)
 . I INS S INSNM=$P($G(^DIC(36,INS,0)),U,1)
"RTN","IBCNES",28,0)
 . S VALMHDR(1)=$$FO^IBCNEUT1(PN,30)_"  "_$$FO^IBCNEUT1(LPID,15)_"  "_$$FO^IBCNEUT1(INSNM,30)
"RTN","IBCNES",29,0)
 . Q
"RTN","IBCNES",30,0)
 ;
"RTN","IBCNES",31,0)
 ; eIV response file
"RTN","IBCNES",32,0)
 I IBVF=365.02 D
"RTN","IBCNES",33,0)
 . N RSPIEN,IBX,DFN,INS,PNB,PN,LPID,INSNM
"RTN","IBCNES",34,0)
 . S RSPIEN=+IBVIENS
"RTN","IBCNES",35,0)
 . S IBX=$G(^IBCN(365,RSPIEN,0))
"RTN","IBCNES",36,0)
 . S DFN=+$P(IBX,U,2)   ; pt ien
"RTN","IBCNES",37,0)
 . S INS=+$P(IBX,U,3)   ; payer ien
"RTN","IBCNES",38,0)
 . S INSNM=""
"RTN","IBCNES",39,0)
 . S PNB=$$PT^IBEFUNC(DFN)
"RTN","IBCNES",40,0)
 . S PN=$P(PNB,U,1)     ; pt name
"RTN","IBCNES",41,0)
 . S LPID=$P(PNB,U,2)   ; pt id
"RTN","IBCNES",42,0)
 . I INS S INSNM=$P($G(^IBE(365.12,INS,0)),U,1)   ; payer name
"RTN","IBCNES",43,0)
 . S VALMHDR(1)=$$FO^IBCNEUT1(PN,30)_"  "_$$FO^IBCNEUT1(LPID,15)_"  "_$$FO^IBCNEUT1(INSNM,30)
"RTN","IBCNES",44,0)
 . Q
"RTN","IBCNES",45,0)
 ;
"RTN","IBCNES",46,0)
 Q
"RTN","IBCNES",47,0)
 ;
"RTN","IBCNES",48,0)
INIT(IBVF,IBVIENS,IBVEBFLG,IBVV,IBVSUB) ; List Entry
"RTN","IBCNES",49,0)
 ;
"RTN","IBCNES",50,0)
 ;     IBVF = file# 2.322 or 365.02 (required)
"RTN","IBCNES",51,0)
 ;  IBVIENS = std IENS list of internal entry numbers - NOT including any EB iens (required)
"RTN","IBCNES",52,0)
 ; IBVEBFLG = flag indicating which EB records to pull
"RTN","IBCNES",53,0)
 ;            "A" - all of them
"RTN","IBCNES",54,0)
 ;            "L" - only the last one (default)
"RTN","IBCNES",55,0)
 ;            "F" - only the first one
"RTN","IBCNES",56,0)
 ;            "M" - multiple, pass IBEBFLG by reference and include the IB iens in
"RTN","IBCNES",57,0)
 ;                  an array as follows:
"RTN","IBCNES",58,0)
 ;                  IBVEBFLG="M"
"RTN","IBCNES",59,0)
 ;                  IBVEBFLG(3)=""
"RTN","IBCNES",60,0)
 ;                  IBVEBFLG(5)=""
"RTN","IBCNES",61,0)
 ;     IBVV = Video attributes flag
"RTN","IBCNES",62,0)
 ;            1 = reverse video (default)
"RTN","IBCNES",63,0)
 ;            2 = bold
"RTN","IBCNES",64,0)
 ;            3 = underline
"RTN","IBCNES",65,0)
 ;   IBVSUB = literal subscript to use in the display scratch global
"RTN","IBCNES",66,0)
 ;
"RTN","IBCNES",67,0)
 NEW IBVDA,GLO,IBVLIST,IEN,IBVEBIEN,IBVEBTOT,IBVEBCNT
"RTN","IBCNES",68,0)
 ;
"RTN","IBCNES",69,0)
 S IBVSUB=$G(IBVSUB)
"RTN","IBCNES",70,0)
 I IBVSUB="" S IBVSUB="EB ELIG/BEN"
"RTN","IBCNES",71,0)
 K ^TMP(IBVSUB,$J)
"RTN","IBCNES",72,0)
 I $D(VALMEVL) D CLEAN^VALM10,KILL^VALM10()
"RTN","IBCNES",73,0)
 ;
"RTN","IBCNES",74,0)
 D DA^DILF(IBVIENS,.IBVDA)    ; build the IBVDA array for the iens
"RTN","IBCNES",75,0)
 I '$D(IBVDA) D NODATA G INITX
"RTN","IBCNES",76,0)
 ;
"RTN","IBCNES",77,0)
 I $D(VALMEVL),'$G(IBVV) S IBVV=1    ; default reverse video for ListMan
"RTN","IBCNES",78,0)
 I '$D(VALMEVL) S IBVV=""            ; no video attributes for non-ListMan
"RTN","IBCNES",79,0)
 ;
"RTN","IBCNES",80,0)
 I IBVF=2.322 S GLO=$NA(^DPT(+$G(IBVDA(1)),.312,+$G(IBVDA),6))   ; pt. insurance
"RTN","IBCNES",81,0)
 I IBVF=365.02 S GLO=$NA(^IBCN(365,+$G(IBVDA),2))                ; response file
"RTN","IBCNES",82,0)
 I $G(GLO)="" D NODATA G INITX
"RTN","IBCNES",83,0)
 ;
"RTN","IBCNES",84,0)
 S IBVEBFLG=$G(IBVEBFLG,"L")
"RTN","IBCNES",85,0)
 K IBVLIST
"RTN","IBCNES",86,0)
 I IBVEBFLG="L" S IEN=+$O(@GLO@(" "),-1) I IEN S IBVLIST(IEN)=""            ; last EB ien on file
"RTN","IBCNES",87,0)
 I IBVEBFLG="F" S IEN=+$O(@GLO@(0)) I IEN S IBVLIST(IEN)=""                 ; first EB ien on file
"RTN","IBCNES",88,0)
 I IBVEBFLG="A" S IEN=0 F  S IEN=$O(@GLO@(IEN)) Q:'IEN  S IBVLIST(IEN)=""   ; all EB iens on file
"RTN","IBCNES",89,0)
 I IBVEBFLG="M" S IEN=0 F  S IEN=$O(IBVEBFLG(IEN)) Q:'IEN  I $D(@GLO@(IEN)) S IBVLIST(IEN)=""   ; multiple
"RTN","IBCNES",90,0)
 ;
"RTN","IBCNES",91,0)
 I '$D(IBVLIST) D NODATA G INITX
"RTN","IBCNES",92,0)
 ;
"RTN","IBCNES",93,0)
 ; count them
"RTN","IBCNES",94,0)
 S IEN=0 F IBVEBTOT=0:1 S IEN=$O(IBVLIST(IEN)) Q:'IEN
"RTN","IBCNES",95,0)
 I 'IBVEBTOT D NODATA G INITX
"RTN","IBCNES",96,0)
 ;
"RTN","IBCNES",97,0)
 S (IBVEBIEN,IBVEBCNT)=0
"RTN","IBCNES",98,0)
 F  S IBVEBIEN=$O(IBVLIST(IBVEBIEN)) Q:'IBVEBIEN  D
"RTN","IBCNES",99,0)
 . S IBVEBCNT=IBVEBCNT+1
"RTN","IBCNES",100,0)
 . N TXVIENS
"RTN","IBCNES",101,0)
 . ;
"RTN","IBCNES",102,0)
 . ; if there is more than 1 EB group, then display a header line for separation
"RTN","IBCNES",103,0)
 . I IBVEBTOT>1 D
"RTN","IBCNES",104,0)
 .. N DSP,LN,IBZ
"RTN","IBCNES",105,0)
 .. S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))
"RTN","IBCNES",106,0)
 .. S LN=+$O(@DSP@(""),-1)
"RTN","IBCNES",107,0)
 .. S IBZ="eIV Eligibility/Benefit Data Group# "_IBVEBCNT_" of "_IBVEBTOT
"RTN","IBCNES",108,0)
 .. S IBZ=$$FO^IBCNEUT1($J("",20)_IBZ,80)
"RTN","IBCNES",109,0)
 .. S LN=LN+1 D SET^IBCNES1(LN,1,IBZ,,IBVV)
"RTN","IBCNES",110,0)
 .. S LN=LN+1 D SET^IBCNES1(LN)
"RTN","IBCNES",111,0)
 .. Q
"RTN","IBCNES",112,0)
 . ;
"RTN","IBCNES",113,0)
 . ; add this EB ien to the list of iens
"RTN","IBCNES",114,0)
 . S TXVIENS=IBVEBIEN_","_IBVIENS
"RTN","IBCNES",115,0)
 . ;
"RTN","IBCNES",116,0)
 . ; call the screen sections to build the display
"RTN","IBCNES",117,0)
 . D EB^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",118,0)
 . D CMPI^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",119,0)
 . D HCSD^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",120,0)
 . D NTE^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",121,0)
 . D BRE^IBCNES1(IBVF,TXVIENS,IBVV,IBVSUB)
"RTN","IBCNES",122,0)
 . ;
"RTN","IBCNES",123,0)
 . Q
"RTN","IBCNES",124,0)
 ;
"RTN","IBCNES",125,0)
 S VALMCNT=$O(^TMP(IBVSUB,$J,"DISP"," "),-1)
"RTN","IBCNES",126,0)
 ;
"RTN","IBCNES",127,0)
INITX ;
"RTN","IBCNES",128,0)
 Q
"RTN","IBCNES",129,0)
 ;
"RTN","IBCNES",130,0)
NODATA ; display no data found
"RTN","IBCNES",131,0)
 N DSP,LN
"RTN","IBCNES",132,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES",133,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES",134,0)
 S LN=LN+1 D SET^IBCNES1(LN)
"RTN","IBCNES",135,0)
 S LN=LN+1 D SET^IBCNES1(LN,5,"No eIV Eligibility/Benefit Data Found")
"RTN","IBCNES",136,0)
 S VALMCNT=$O(^TMP(IBVSUB,$J,"DISP"," "),-1)
"RTN","IBCNES",137,0)
NODATAX ;
"RTN","IBCNES",138,0)
 Q
"RTN","IBCNES",139,0)
 ;
"RTN","IBCNES",140,0)
HELP ; -- help code
"RTN","IBCNES",141,0)
 S X="?",VALMANS="??" D DISP^XQORM1 W !!
"RTN","IBCNES",142,0)
 Q
"RTN","IBCNES",143,0)
 ;
"RTN","IBCNES",144,0)
EXIT ; -- exit code
"RTN","IBCNES",145,0)
 K ^TMP(IBVSUB,$J)
"RTN","IBCNES",146,0)
 I $D(VALMEVL) D CLEAN^VALM10,KILL^VALM10()
"RTN","IBCNES",147,0)
 Q
"RTN","IBCNES",148,0)
 ;
"RTN","IBCNES1")
0^23^B120790247^B103884237
"RTN","IBCNES1",1,0)
IBCNES1 ;ALB/ESG - eIV elig/benefit utilities ;14-Sept-2009
"RTN","IBCNES1",2,0)
 ;;2.0;INTEGRATED BILLING;**416,438**;21-MAR-94;Build 52
"RTN","IBCNES1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNES1",4,0)
 ;
"RTN","IBCNES1",5,0)
 Q
"RTN","IBCNES1",6,0)
 ;
"RTN","IBCNES1",7,0)
EB(IBVF,IBVIENS,IBVV,IBVSUB) ; Main Eligibility/Benefit Information
"RTN","IBCNES1",8,0)
 ;
"RTN","IBCNES1",9,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",10,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",11,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",12,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",13,0)
 ;
"RTN","IBCNES1",14,0)
 N EB,EBERR,DSP,LN,COL1,COL2,ZF,ZIEN
"RTN","IBCNES1",15,0)
 D GETS^DIQ(IBVF,IBVIENS,".02:.13;8*;11*","IEN","EB","EBERR")
"RTN","IBCNES1",16,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",17,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",18,0)
 ;
"RTN","IBCNES1",19,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",20,0)
 ;
"RTN","IBCNES1",21,0)
 S LN=LN+1
"RTN","IBCNES1",22,0)
 D SET(LN,1,"Eligibility/Benefit Information",,IBVV)
"RTN","IBCNES1",23,0)
 ;
"RTN","IBCNES1",24,0)
 S LN=LN+1
"RTN","IBCNES1",25,0)
 D SET(LN,COL1,"Elig/Ben Info",$P($G(^IBE(365.011,+$G(EB(IBVF,IBVIENS,.02,"I")),0)),U,2))
"RTN","IBCNES1",26,0)
 D SET(.LN,COL2,"Coverage Level",$P($G(^IBE(365.012,+$G(EB(IBVF,IBVIENS,.03,"I")),0)),U,2))
"RTN","IBCNES1",27,0)
 ;
"RTN","IBCNES1",28,0)
 ; now loop through and display all of the dates and date qualifiers
"RTN","IBCNES1",29,0)
 S ZF=2.3228
"RTN","IBCNES1",30,0)
 I IBVF=365.02 S ZF=365.28     ; subscriber dates subfile#
"RTN","IBCNES1",31,0)
 I '$D(EB(ZF)) S EB(ZF,1)=""   ; so the fields display once
"RTN","IBCNES1",32,0)
 S ZIEN="" F  S ZIEN=$O(EB(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",33,0)
 . N HLDT,DTYP,EXDT
"RTN","IBCNES1",34,0)
 . S LN=LN+1
"RTN","IBCNES1",35,0)
 . D SET(LN,COL1,"Date/Time Qual",$P($G(^IBE(365.026,+$G(EB(ZF,ZIEN,.03,"I")),0)),U,2))
"RTN","IBCNES1",36,0)
 . S HLDT=$G(EB(ZF,ZIEN,.02,"E"))
"RTN","IBCNES1",37,0)
 . S DTYP=$G(EB(ZF,ZIEN,.04,"I"))
"RTN","IBCNES1",38,0)
 . S EXDT=$S(DTYP="D8":$$DATE(HLDT),DTYP="RD8":($$DATE($P(HLDT,"-",1))_"-"_$$DATE($P(HLDT,"-",2))),1:HLDT)
"RTN","IBCNES1",39,0)
 . D SET(.LN,COL2,"D/T Period",EXDT)
"RTN","IBCNES1",40,0)
 . Q
"RTN","IBCNES1",41,0)
 ; loop through service type codes
"RTN","IBCNES1",42,0)
 S ZF=2.32292
"RTN","IBCNES1",43,0)
 I IBVF=365.02 S ZF=365.292  ; service types subfile#
"RTN","IBCNES1",44,0)
 I '$D(EB(ZF)) S EB(ZF,1)=""   ; so the fields display once
"RTN","IBCNES1",45,0)
 S ZIEN="" F  S ZIEN=$O(EB(ZF,ZIEN)) Q:ZIEN=""  S LN=LN+1 D SET(LN,COL1,"Service Type",$P($G(^IBE(365.013,+$G(EB(ZF,ZIEN,.01,"I")),0)),U,2))
"RTN","IBCNES1",46,0)
 ;
"RTN","IBCNES1",47,0)
 S LN=LN+1
"RTN","IBCNES1",48,0)
 D SET(LN,COL1,"Time Period",$P($G(^IBE(365.015,+$G(EB(IBVF,IBVIENS,.07,"I")),0)),U,2))
"RTN","IBCNES1",49,0)
 ;
"RTN","IBCNES1",50,0)
 S LN=LN+1
"RTN","IBCNES1",51,0)
 D SET(LN,COL1,"Insurance Type",$P($G(^IBE(365.014,+$G(EB(IBVF,IBVIENS,.05,"I")),0)),U,2))
"RTN","IBCNES1",52,0)
 ;
"RTN","IBCNES1",53,0)
 S LN=LN+1
"RTN","IBCNES1",54,0)
 D SET(LN,COL1,"Plan Coverage Desc",$G(EB(IBVF,IBVIENS,.06,"E")))
"RTN","IBCNES1",55,0)
 ;
"RTN","IBCNES1",56,0)
 S LN=LN+1
"RTN","IBCNES1",57,0)
 D SET(LN,COL1,"Benefit Amount",$G(EB(IBVF,IBVIENS,.08,"E")))
"RTN","IBCNES1",58,0)
 D SET(.LN,COL2,"Benefit %",$G(EB(IBVF,IBVIENS,.09,"E")))
"RTN","IBCNES1",59,0)
 ;
"RTN","IBCNES1",60,0)
 S LN=LN+1
"RTN","IBCNES1",61,0)
 D SET(LN,COL1,"Quantity Qual",$P($G(^IBE(365.016,+$G(EB(IBVF,IBVIENS,.1,"I")),0)),U,2))
"RTN","IBCNES1",62,0)
 D SET(.LN,COL2,"Quantity Amount",$G(EB(IBVF,IBVIENS,.11,"E")))
"RTN","IBCNES1",63,0)
 ;
"RTN","IBCNES1",64,0)
 S LN=LN+1
"RTN","IBCNES1",65,0)
 D SET(LN,COL1,"Auth/Certification Required",$G(EB(IBVF,IBVIENS,.12,"E")))
"RTN","IBCNES1",66,0)
 D SET(.LN,COL2,"In-Plan-Network",$G(EB(IBVF,IBVIENS,.13,"E")))
"RTN","IBCNES1",67,0)
 ;
"RTN","IBCNES1",68,0)
 S LN=LN+1
"RTN","IBCNES1",69,0)
 D SET(LN)
"RTN","IBCNES1",70,0)
 ;
"RTN","IBCNES1",71,0)
EBX ;
"RTN","IBCNES1",72,0)
 Q
"RTN","IBCNES1",73,0)
 ;
"RTN","IBCNES1",74,0)
CMPI(IBVF,IBVIENS,IBVV,IBVSUB) ; Composite Medical Procedure Information
"RTN","IBCNES1",75,0)
 ;
"RTN","IBCNES1",76,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",77,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",78,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",79,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",80,0)
 ;
"RTN","IBCNES1",81,0)
 N CMPI,CMPIERR,DSP,LN,COL1,COL2,PCTYP,PCODE,PCIEN,PCDESC,MODLST,FCZ,PM,ZF,ZIEN,POS,POSD,DX,DXD
"RTN","IBCNES1",82,0)
 D GETS^DIQ(IBVF,IBVIENS,"1.01:1.06;9*","IEN","CMPI","CMPIERR")
"RTN","IBCNES1",83,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",84,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",85,0)
 ;
"RTN","IBCNES1",86,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",87,0)
 ;
"RTN","IBCNES1",88,0)
 S LN=LN+1
"RTN","IBCNES1",89,0)
 I '$D(CMPI) G CMPIX
"RTN","IBCNES1",90,0)
 D SET(LN,1,"Composite Medical Procedure Information",,IBVV)
"RTN","IBCNES1",91,0)
 ;
"RTN","IBCNES1",92,0)
 ; get procedure code, desc, and type information
"RTN","IBCNES1",93,0)
 S PCTYP=$G(CMPI(IBVF,IBVIENS,1.01,"I"))
"RTN","IBCNES1",94,0)
 S PCODE=$G(CMPI(IBVF,IBVIENS,1.02,"E"))
"RTN","IBCNES1",95,0)
 S PCIEN=0,PCDESC=""
"RTN","IBCNES1",96,0)
 I PCTYP="CJ"!(PCTYP="HC") D     ; cpt or hcpcs procedure codes
"RTN","IBCNES1",97,0)
 . Q:PCODE=""
"RTN","IBCNES1",98,0)
 . S PCIEN=+$O(^ICPT("BA",PCODE_" ",0))
"RTN","IBCNES1",99,0)
 . Q:'PCIEN
"RTN","IBCNES1",100,0)
 . S PCDESC=$P($$CPT^IBACSV(PCIEN),U,2)
"RTN","IBCNES1",101,0)
 . S PCDESC=$$TITLE^XLFSTR(PCDESC)
"RTN","IBCNES1",102,0)
 . Q
"RTN","IBCNES1",103,0)
 ;
"RTN","IBCNES1",104,0)
 I PCTYP="ID" D         ; icd-9-cm procedure codes
"RTN","IBCNES1",105,0)
 . Q:PCODE=""
"RTN","IBCNES1",106,0)
 . S PCIEN=+$O(^ICD0("BA",PCODE_" ",0))
"RTN","IBCNES1",107,0)
 . Q:'PCIEN
"RTN","IBCNES1",108,0)
 . S PCDESC=$P($$ICD0^IBACSV(PCIEN),U,4)
"RTN","IBCNES1",109,0)
 . S PCDESC=$$TITLE^XLFSTR(PCDESC)
"RTN","IBCNES1",110,0)
 . Q
"RTN","IBCNES1",111,0)
 ;
"RTN","IBCNES1",112,0)
 S LN=LN+1
"RTN","IBCNES1",113,0)
 D SET(LN,COL1,"Prod/Serv ID Qual",$G(CMPI(IBVF,IBVIENS,1.01,"E")))
"RTN","IBCNES1",114,0)
 D SET(.LN,COL2,"Procedure Code",PCODE_" "_PCDESC)
"RTN","IBCNES1",115,0)
 ;
"RTN","IBCNES1",116,0)
 S LN=LN+1
"RTN","IBCNES1",117,0)
 S MODLST=""
"RTN","IBCNES1",118,0)
 F FCZ=1.03:.01:1.06 S PM=$G(CMPI(IBVF,IBVIENS,FCZ,"E")) I PM'="" S MODLST=$S(MODLST="":PM,1:(MODLST_", "_PM))
"RTN","IBCNES1",119,0)
 D SET(LN,COL1,"Procedure Modifier(s)",MODLST)
"RTN","IBCNES1",120,0)
 ;
"RTN","IBCNES1",121,0)
 ; now loop through and display all of the additional info (POS and DX)
"RTN","IBCNES1",122,0)
 S ZF=2.3229
"RTN","IBCNES1",123,0)
 I IBVF=365.02 S ZF=365.29   ; additional info subfile#
"RTN","IBCNES1",124,0)
 ;
"RTN","IBCNES1",125,0)
 ; if no additional info (POS and DX), then display the prompts here once
"RTN","IBCNES1",126,0)
 I '$D(CMPI(ZF)) D
"RTN","IBCNES1",127,0)
 . S LN=LN+1
"RTN","IBCNES1",128,0)
 . D SET(LN,COL1,"DX/Facility Qual","")
"RTN","IBCNES1",129,0)
 . D SET(.LN,COL2,"DX/Facility","")
"RTN","IBCNES1",130,0)
 . Q
"RTN","IBCNES1",131,0)
 ;
"RTN","IBCNES1",132,0)
 S ZIEN="" F  S ZIEN=$O(CMPI(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",133,0)
 . ;
"RTN","IBCNES1",134,0)
 . ; check to see if we have a valid POS pointer
"RTN","IBCNES1",135,0)
 . S POS=+$G(CMPI(ZF,ZIEN,.02,"I")),POSD=""
"RTN","IBCNES1",136,0)
 . I POS S POSD=$P($G(^IBE(353.1,POS,0)),U,2)
"RTN","IBCNES1",137,0)
 . I POSD'="" D
"RTN","IBCNES1",138,0)
 .. S POSD=$$TITLE^XLFSTR(POSD)
"RTN","IBCNES1",139,0)
 .. S LN=LN+1
"RTN","IBCNES1",140,0)
 .. D SET(LN,COL1,"DX/Facility Qual","POS")
"RTN","IBCNES1",141,0)
 .. D SET(.LN,COL2,"DX/Facility",$G(CMPI(ZF,ZIEN,.02,"E"))_" "_POSD)
"RTN","IBCNES1",142,0)
 .. Q
"RTN","IBCNES1",143,0)
 . ;
"RTN","IBCNES1",144,0)
 . ; now check for a DX
"RTN","IBCNES1",145,0)
 . S DX=+$G(CMPI(ZF,ZIEN,.03,"I")),DXD=""
"RTN","IBCNES1",146,0)
 . I DX S DXD=$P($$ICD9^IBACSV(DX),U,3)
"RTN","IBCNES1",147,0)
 . I DXD'="" D
"RTN","IBCNES1",148,0)
 .. S DXD=$$TITLE^XLFSTR(DXD)
"RTN","IBCNES1",149,0)
 .. S LN=LN+1
"RTN","IBCNES1",150,0)
 .. D SET(LN,COL1,"DX/Facility Qual","DX")
"RTN","IBCNES1",151,0)
 .. D SET(.LN,COL2,"DX/Facility",$G(CMPI(ZF,ZIEN,.03,"E"))_" "_DXD)
"RTN","IBCNES1",152,0)
 .. Q
"RTN","IBCNES1",153,0)
 . Q
"RTN","IBCNES1",154,0)
 ;
"RTN","IBCNES1",155,0)
 S LN=LN+1
"RTN","IBCNES1",156,0)
 D SET(LN)
"RTN","IBCNES1",157,0)
 ;
"RTN","IBCNES1",158,0)
CMPIX ;
"RTN","IBCNES1",159,0)
 Q
"RTN","IBCNES1",160,0)
 ;
"RTN","IBCNES1",161,0)
HCSD(IBVF,IBVIENS,IBVV,IBVSUB) ; Healthcare Services Delivery multiple display
"RTN","IBCNES1",162,0)
 ;
"RTN","IBCNES1",163,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",164,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",165,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",166,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",167,0)
 ;
"RTN","IBCNES1",168,0)
 N HCSD,HCSDERR,DSP,LN,ZF,HCNT,ZIEN,HCTOT,COL1,COL2
"RTN","IBCNES1",169,0)
 D GETS^DIQ(IBVF,IBVIENS,"7*","IEN","HCSD","HCSDERR")
"RTN","IBCNES1",170,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",171,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",172,0)
 ;
"RTN","IBCNES1",173,0)
 ; loop through and count the # of hcsd multiples
"RTN","IBCNES1",174,0)
 S ZF=2.3227,HCNT=0
"RTN","IBCNES1",175,0)
 I IBVF=365.02 S ZF=365.27   ; healthcare services delivery subfile#
"RTN","IBCNES1",176,0)
 S ZIEN="" F  S ZIEN=$O(HCSD(ZF,ZIEN)) Q:ZIEN=""  S HCNT=HCNT+1
"RTN","IBCNES1",177,0)
 S HCTOT=HCNT
"RTN","IBCNES1",178,0)
 ;
"RTN","IBCNES1",179,0)
 I 'HCTOT G HCSDX
"RTN","IBCNES1",180,0)
 ;
"RTN","IBCNES1",181,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",182,0)
 ;
"RTN","IBCNES1",183,0)
 ; loop again to display
"RTN","IBCNES1",184,0)
 S HCNT=0
"RTN","IBCNES1",185,0)
 S ZIEN="" F  S ZIEN=$O(HCSD(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",186,0)
 . S HCNT=HCNT+1
"RTN","IBCNES1",187,0)
 . ;
"RTN","IBCNES1",188,0)
 . S LN=LN+1
"RTN","IBCNES1",189,0)
 . I HCTOT>1 D SET(LN,1,"Health Care Service Delivery ("_HCNT_" of "_HCTOT_")",,IBVV)
"RTN","IBCNES1",190,0)
 . I HCTOT'>1 D SET(LN,1,"Health Care Service Delivery",,IBVV)
"RTN","IBCNES1",191,0)
 . ;
"RTN","IBCNES1",192,0)
 . S LN=LN+1
"RTN","IBCNES1",193,0)
 . D SET(LN,COL1,"Quantity Qualifier",$P($G(^IBE(365.016,+$G(HCSD(ZF,ZIEN,.03,"I")),0)),U,2))
"RTN","IBCNES1",194,0)
 . D SET(.LN,COL2,"Benefit Quantity",$G(HCSD(ZF,ZIEN,.02,"E")))
"RTN","IBCNES1",195,0)
 . ;
"RTN","IBCNES1",196,0)
 . S LN=LN+1
"RTN","IBCNES1",197,0)
 . D SET(LN,COL1,"Unit/Basis for Measurement",$G(HCSD(ZF,ZIEN,.05,"E")))
"RTN","IBCNES1",198,0)
 . D SET(.LN,COL2,"Sampling Frequency",$G(HCSD(ZF,ZIEN,.04,"E")))
"RTN","IBCNES1",199,0)
 . ;
"RTN","IBCNES1",200,0)
 . S LN=LN+1
"RTN","IBCNES1",201,0)
 . D SET(LN,COL1,"Period Count Qual",$P($G(^IBE(365.015,+$G(HCSD(ZF,ZIEN,.07,"I")),0)),U,2))
"RTN","IBCNES1",202,0)
 . D SET(.LN,COL2,"Period Count",$G(HCSD(ZF,ZIEN,.06,"E")))
"RTN","IBCNES1",203,0)
 . ;
"RTN","IBCNES1",204,0)
 . S LN=LN+1
"RTN","IBCNES1",205,0)
 . D SET(LN,COL1,"Delivery Freq. Code",$P($G(^IBE(365.025,+$G(HCSD(ZF,ZIEN,.08,"I")),0)),U,2))
"RTN","IBCNES1",206,0)
 . ;
"RTN","IBCNES1",207,0)
 . S LN=LN+1
"RTN","IBCNES1",208,0)
 . D SET(LN,COL1,"Delivery Pattern Time Code",$G(HCSD(ZF,ZIEN,.09,"E")))
"RTN","IBCNES1",209,0)
 . ;
"RTN","IBCNES1",210,0)
 . S LN=LN+1
"RTN","IBCNES1",211,0)
 . D SET(LN)
"RTN","IBCNES1",212,0)
 . Q
"RTN","IBCNES1",213,0)
 ;
"RTN","IBCNES1",214,0)
HCSDX ;
"RTN","IBCNES1",215,0)
 Q
"RTN","IBCNES1",216,0)
 ;
"RTN","IBCNES1",217,0)
NTE(IBVF,IBVIENS,IBVV,IBVSUB) ; Notes display
"RTN","IBCNES1",218,0)
 ;
"RTN","IBCNES1",219,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",220,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",221,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",222,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",223,0)
 ;
"RTN","IBCNES1",224,0)
 N COL,DSP,LN,NTED,NTEDERR,ZIEN
"RTN","IBCNES1",225,0)
 D GETS^DIQ(IBVF,IBVIENS,2,"IEN","NTED","NTEDERR")
"RTN","IBCNES1",226,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",227,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",228,0)
 I '$D(NTED) G NTEX
"RTN","IBCNES1",229,0)
 S COL=2
"RTN","IBCNES1",230,0)
 S LN=LN+1 D SET(LN,1,"Notes and Comments",,IBVV)
"RTN","IBCNES1",231,0)
 S ZIEN="" F  S ZIEN=$O(NTED(IBVF,IBVIENS,2,ZIEN)) Q:ZIEN=""  S LN=LN+1 D SET(LN,COL,$G(NTED(IBVF,IBVIENS,2,ZIEN)))
"RTN","IBCNES1",232,0)
 S LN=LN+1
"RTN","IBCNES1",233,0)
 D SET(LN)
"RTN","IBCNES1",234,0)
 ;
"RTN","IBCNES1",235,0)
NTEX ;
"RTN","IBCNES1",236,0)
 Q
"RTN","IBCNES1",237,0)
 ;
"RTN","IBCNES1",238,0)
BRE(IBVF,IBVIENS,IBVV,IBVSUB) ; Benefit Related Entity data extract/display
"RTN","IBCNES1",239,0)
 ;
"RTN","IBCNES1",240,0)
 ;    IBVF = file# 2.322 or 365.02
"RTN","IBCNES1",241,0)
 ; IBVIENS = std IENS list of internal entry numbers
"RTN","IBCNES1",242,0)
 ;    IBVV = video attributes flag
"RTN","IBCNES1",243,0)
 ;  IBVSUB = display scratch global subscript
"RTN","IBCNES1",244,0)
 ;
"RTN","IBCNES1",245,0)
 N BRE,BREERR,DSP,LN,ADDR,ADDR1,ADDR2,CITY,ST,ZIP,ZF,ZIEN,COL1,COL2
"RTN","IBCNES1",246,0)
 D GETS^DIQ(IBVF,IBVIENS,"3.01:5.03;6*","IEN","BRE","BREERR")
"RTN","IBCNES1",247,0)
 S DSP=$NA(^TMP(IBVSUB,$J,"DISP"))       ; scratch global display array
"RTN","IBCNES1",248,0)
 S LN=+$O(@DSP@(""),-1)                  ; last line# used in scratch global
"RTN","IBCNES1",249,0)
 ;
"RTN","IBCNES1",250,0)
 S COL1=2,COL2=40
"RTN","IBCNES1",251,0)
 ;
"RTN","IBCNES1",252,0)
 S LN=LN+1
"RTN","IBCNES1",253,0)
 I '$D(BRE) G BREX
"RTN","IBCNES1",254,0)
 D SET(LN,1,"Benefit Related Entity",,IBVV)
"RTN","IBCNES1",255,0)
 ;
"RTN","IBCNES1",256,0)
 S LN=LN+1
"RTN","IBCNES1",257,0)
 D SET(LN,COL1,"Entity ID Code",$P($G(^IBE(365.022,+$G(BRE(IBVF,IBVIENS,3.01,"I")),0)),U,2))
"RTN","IBCNES1",258,0)
 D SET(.LN,COL2,"Entity Type Qual",$G(BRE(IBVF,IBVIENS,3.02,"E")))
"RTN","IBCNES1",259,0)
 ;
"RTN","IBCNES1",260,0)
 S LN=LN+1
"RTN","IBCNES1",261,0)
 D SET(LN,COL1,"Entity ID Name",$G(BRE(IBVF,IBVIENS,3.03,"E")))
"RTN","IBCNES1",262,0)
 ;
"RTN","IBCNES1",263,0)
 S LN=LN+1
"RTN","IBCNES1",264,0)
 D SET(LN,COL1,"ID Qualifier",$P($G(^IBE(365.023,+$G(BRE(IBVF,IBVIENS,3.05,"I")),0)),U,2))
"RTN","IBCNES1",265,0)
 D SET(.LN,COL2,"Entity ID Number",$G(BRE(IBVF,IBVIENS,3.04,"E")))
"RTN","IBCNES1",266,0)
 ;
"RTN","IBCNES1",267,0)
 S ADDR1=$G(BRE(IBVF,IBVIENS,4.01,"E"))
"RTN","IBCNES1",268,0)
 S ADDR2=$G(BRE(IBVF,IBVIENS,4.02,"E"))
"RTN","IBCNES1",269,0)
 S CITY=$G(BRE(IBVF,IBVIENS,4.03,"E"))
"RTN","IBCNES1",270,0)
 S ST=+$G(BRE(IBVF,IBVIENS,4.04,"I"))
"RTN","IBCNES1",271,0)
 S ST=$S(ST:$P($G(^DIC(5,ST,0)),U,2),1:"")
"RTN","IBCNES1",272,0)
 S ZIP=$G(BRE(IBVF,IBVIENS,4.05,"E"))
"RTN","IBCNES1",273,0)
 S ADDR=ADDR1
"RTN","IBCNES1",274,0)
 I ADDR2'="" S ADDR=ADDR_" "_ADDR2
"RTN","IBCNES1",275,0)
 I CITY'="" S ADDR=ADDR_", "_CITY
"RTN","IBCNES1",276,0)
 I ST'="" S ADDR=ADDR_","_ST
"RTN","IBCNES1",277,0)
 I ZIP'="" S ADDR=ADDR_" "_ZIP
"RTN","IBCNES1",278,0)
 S LN=LN+1
"RTN","IBCNES1",279,0)
 D SET(LN,COL1,"Entity Address",ADDR)
"RTN","IBCNES1",280,0)
 ;
"RTN","IBCNES1",281,0)
 S LN=LN+1
"RTN","IBCNES1",282,0)
 D SET(LN,COL1,"Country Code",$G(BRE(IBVF,IBVIENS,4.06,"E")))
"RTN","IBCNES1",283,0)
 D SET(.LN,COL2,"Country Subdivision",$G(BRE(IBVF,IBVIENS,4.09,"E")))
"RTN","IBCNES1",284,0)
 ;
"RTN","IBCNES1",285,0)
 S LN=LN+1
"RTN","IBCNES1",286,0)
 D SET(LN,COL1,"Location Qual",$G(BRE(IBVF,IBVIENS,4.08,"E")))
"RTN","IBCNES1",287,0)
 D SET(.LN,COL2,"DOD Health Service Region Code",$G(BRE(IBVF,IBVIENS,4.07,"E")))
"RTN","IBCNES1",288,0)
 ;
"RTN","IBCNES1",289,0)
 ; now loop through and display all of the benefit related entity contact information
"RTN","IBCNES1",290,0)
 S ZF=2.3226
"RTN","IBCNES1",291,0)
 I IBVF=365.02 S ZF=365.26       ; contact information subfile#
"RTN","IBCNES1",292,0)
 I '$D(BRE(ZF)) S BRE(ZF,1)=""   ; so the fields display once
"RTN","IBCNES1",293,0)
 S ZIEN="" F  S ZIEN=$O(BRE(ZF,ZIEN)) Q:ZIEN=""  D
"RTN","IBCNES1",294,0)
 . S LN=LN+1
"RTN","IBCNES1",295,0)
 . D SET(LN,COL1,"Comm. Number Qual",$P($G(^IBE(365.021,+$G(BRE(ZF,ZIEN,.04,"I")),0)),U,2))
"RTN","IBCNES1",296,0)
 . D SET(.LN,COL2,"Entity Comm. Number",$G(BRE(ZF,ZIEN,.03,"E")))
"RTN","IBCNES1",297,0)
 . Q
"RTN","IBCNES1",298,0)
 ;
"RTN","IBCNES1",299,0)
 S LN=LN+1
"RTN","IBCNES1",300,0)
 D SET(LN)
"RTN","IBCNES1",301,0)
 ;
"RTN","IBCNES1",302,0)
 S LN=LN+1
"RTN","IBCNES1",303,0)
 D SET(LN,1,"Benefit Related Provider Information",,IBVV)
"RTN","IBCNES1",304,0)
 ;
"RTN","IBCNES1",305,0)
 S LN=LN+1
"RTN","IBCNES1",306,0)
 D SET(LN,COL1,"Provider Code",$P($G(^IBE(365.024,+$G(BRE(IBVF,IBVIENS,5.01,"I")),0)),U,2))
"RTN","IBCNES1",307,0)
 D SET(.LN,COL2,"Provider ID Qual",$G(BRE(IBVF,IBVIENS,5.03,"E")))
"RTN","IBCNES1",308,0)
 ;
"RTN","IBCNES1",309,0)
 S LN=LN+1
"RTN","IBCNES1",310,0)
 D SET(LN,COL1,"Provider ID",$G(BRE(IBVF,IBVIENS,5.02,"E")))
"RTN","IBCNES1",311,0)
 ;
"RTN","IBCNES1",312,0)
 S LN=LN+1
"RTN","IBCNES1",313,0)
 D SET(LN)
"RTN","IBCNES1",314,0)
BREX ;
"RTN","IBCNES1",315,0)
 Q
"RTN","IBCNES1",316,0)
 ;
"RTN","IBCNES1",317,0)
SET(LN,COL,LABEL,DATA,IBVV) ; set data into display scratch global
"RTN","IBCNES1",318,0)
 ;
"RTN","IBCNES1",319,0)
 ; LN must be passed by reference when COL>20 because of the special variable IBVEBCOL flag to produce a single column
"RTN","IBCNES1",320,0)
 ;
"RTN","IBCNES1",321,0)
 ; IBVV - video attributes flag
"RTN","IBCNES1",322,0)
 ;        1 = reverse video
"RTN","IBCNES1",323,0)
 ;        2 = bold
"RTN","IBCNES1",324,0)
 ;        3 = underline
"RTN","IBCNES1",325,0)
 ;
"RTN","IBCNES1",326,0)
 N STR,D1
"RTN","IBCNES1",327,0)
 S COL=$G(COL,1)
"RTN","IBCNES1",328,0)
 I $G(IBVEBCOL),COL>20 S LN=LN+1,COL=2   ; single column flag
"RTN","IBCNES1",329,0)
 I $G(LABEL)'="",COL>1 S LABEL=" "_LABEL,COL=COL-1
"RTN","IBCNES1",330,0)
 S STR=$G(@DSP@(LN,0))    ; get the current string
"RTN","IBCNES1",331,0)
 S D1=""
"RTN","IBCNES1",332,0)
 I $G(LABEL)'="" S D1=LABEL
"RTN","IBCNES1",333,0)
 I $D(DATA) S D1=D1_": "_$G(DATA)   ; build the new display
"RTN","IBCNES1",334,0)
 ;
"RTN","IBCNES1",335,0)
 S STR=$$SETSTR^VALM1(D1,STR,+COL,(81-COL))   ; insert new data
"RTN","IBCNES1",336,0)
 ;
"RTN","IBCNES1",337,0)
 S @DSP@(LN,0)=STR    ; set the new data back into the scratch global
"RTN","IBCNES1",338,0)
 ;
"RTN","IBCNES1",339,0)
 ; Add the video attributes if requested
"RTN","IBCNES1",340,0)
 I $G(IBVV) D
"RTN","IBCNES1",341,0)
 . I IBVV=1 D CNTRL^VALM10(LN,COL,$L(LABEL),IORVON,IORVOFF)  ; reverse video
"RTN","IBCNES1",342,0)
 . I IBVV=2 D CNTRL^VALM10(LN,COL,$L(LABEL),IOINHI,IOINORM)  ; bold
"RTN","IBCNES1",343,0)
 . I IBVV=3 D CNTRL^VALM10(LN,COL,$L(LABEL),IOUON,IOUOFF)    ; underline
"RTN","IBCNES1",344,0)
 . Q
"RTN","IBCNES1",345,0)
 ;
"RTN","IBCNES1",346,0)
SETX ;
"RTN","IBCNES1",347,0)
 Q
"RTN","IBCNES1",348,0)
 ;
"RTN","IBCNES1",349,0)
DATE(Z) ; convert date in Z in format CCYYMMDD to MM/DD/CCYY format for display
"RTN","IBCNES1",350,0)
 I Z?8N S Z=$E(Z,5,6)_"/"_$E(Z,7,8)_"/"_$E(Z,1,4)
"RTN","IBCNES1",351,0)
 Q Z
"RTN","IBCNES1",352,0)
 ;
"RTN","IBCNSP0")
0^10^B33972429^B33094001
"RTN","IBCNSP0",1,0)
IBCNSP0 ;ALB/AAS - INSURANCE MANAGEMENT - EXPANDED POLICY ;05-MAR-1993
"RTN","IBCNSP0",2,0)
 ;;2.0;INTEGRATED BILLING;**28,43,52,85,93,103,137,229,251,363,371,399,438**;21-MAR-94;Build 52
"RTN","IBCNSP0",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNSP0",4,0)
 ;
"RTN","IBCNSP0",5,0)
 ;
"RTN","IBCNSP0",6,0)
CONTACT ; -- Insurance Contact Information
"RTN","IBCNSP0",7,0)
 N OFFSET,START
"RTN","IBCNSP0",8,0)
 ;
"RTN","IBCNSP0",9,0)
 ; The start of this section is designed to start on the same line
"RTN","IBCNSP0",10,0)
 ; as the User Information section (see VER^IBCNSP01).
"RTN","IBCNSP0",11,0)
 ;
"RTN","IBCNSP0",12,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)-8
"RTN","IBCNSP0",13,0)
 S IB1ST("CONTACT")=START
"RTN","IBCNSP0",14,0)
 S OFFSET=42
"RTN","IBCNSP0",15,0)
 N IBTRC,IBTRCD,IBTCOD
"RTN","IBCNSP0",16,0)
 S IBTCOD=$O(^IBE(356.11,"ACODE",85,0))
"RTN","IBCNSP0",17,0)
 ;
"RTN","IBCNSP0",18,0)
 S IBTRC=0,IBTRCD=""
"RTN","IBCNSP0",19,0)
 F  S IBTRC=$O(^IBT(356.2,"D",DFN,IBTRC)) Q:'IBTRC  D
"RTN","IBCNSP0",20,0)
 .Q:$P($G(^IBT(356.2,+IBTRC,1)),"^",5)'=IBCDFN  ; must be same policy
"RTN","IBCNSP0",21,0)
 .Q:$P($G(^IBT(356.2,+IBTRC,0)),"^",4)'=IBTCOD  ; must be ins. ver. type
"RTN","IBCNSP0",22,0)
 .S IBTRCD=$G(^IBT(356.2,+IBTRC,0))
"RTN","IBCNSP0",23,0)
 ;
"RTN","IBCNSP0",24,0)
 D SET(START,OFFSET," Insurance Contact (last) ",IORVON,IORVOFF)
"RTN","IBCNSP0",25,0)
 D SET(START+1,OFFSET," Person Contacted: "_$$EXPAND^IBTRE(356.2,.06,$P(IBTRCD,"^",6)))
"RTN","IBCNSP0",26,0)
 D SET(START+2,OFFSET,"Method of Contact: "_$$EXPAND^IBTRE(356.2,.17,$P(IBTRCD,"^",17)))
"RTN","IBCNSP0",27,0)
 D SET(START+3,OFFSET,"  Contact's Phone: "_$$EXPAND^IBTRE(356.2,.07,$P(IBTRCD,"^",7)))
"RTN","IBCNSP0",28,0)
 D SET(START+4,OFFSET,"    Call Ref. No.: "_$$EXPAND^IBTRE(356.2,.09,$P(IBTRCD,"^",9)))
"RTN","IBCNSP0",29,0)
 D SET(START+5,OFFSET,"     Contact Date: "_$$EXPAND^IBTRE(356.2,.01,$P(IBTRCD,"^")))
"RTN","IBCNSP0",30,0)
 ; no blank lines here because the User Information section is on the
"RTN","IBCNSP0",31,0)
 ; left and it is bigger than this section
"RTN","IBCNSP0",32,0)
 Q
"RTN","IBCNSP0",33,0)
 ;
"RTN","IBCNSP0",34,0)
POLICY ; -- Policy Region
"RTN","IBCNSP0",35,0)
 ; -- if pointer to policy file exists get data from policy file
"RTN","IBCNSP0",36,0)
 N OFFSET,START,IBP,IBX,IBPLNID,IBPLNNM,IBPLNNA,IBPLNLA
"RTN","IBCNSP0",37,0)
 S (IBPLNID,IBPLNNM,IBPLNNA,IBPLNLA)=""
"RTN","IBCNSP0",38,0)
 S START=1,OFFSET=2
"RTN","IBCNSP0",39,0)
 D GPLAN(+IBCPOLD2)
"RTN","IBCNSP0",40,0)
 D SET(START,OFFSET," Plan Information ",IORVON,IORVOFF)
"RTN","IBCNSP0",41,0)
 D SET(START+1,OFFSET,"   Is Group Plan: "_$S($P(IBCPOLD,"^",2)=1:"YES",1:"NO"))
"RTN","IBCNSP0",42,0)
 D SET(START+2,OFFSET,"      Group Name: "_$P(IBCPOLD,"^",3))
"RTN","IBCNSP0",43,0)
 D SET(START+3,OFFSET,"    Group Number: "_$P(IBCPOLD,"^",4))
"RTN","IBCNSP0",44,0)
 D SET(START+4,OFFSET,"             BIN: "_$P(IBCPOLD2,"^",2)) ;;Daou/EEN
"RTN","IBCNSP0",45,0)
 D SET(START+5,OFFSET,"             PCN: "_$P(IBCPOLD2,"^",3)) ;;04/09/04
"RTN","IBCNSP0",46,0)
 D SET(START+6,OFFSET,"    Type of Plan: "_$E($P($G(^IBE(355.1,+$P(IBCPOLD,"^",9),0)),"^"),1,23))
"RTN","IBCNSP0",47,0)
 S IBX=7
"RTN","IBCNSP0",48,0)
 I $P(IBCPOLD,U,14)]"" D
"RTN","IBCNSP0",49,0)
 . D SET(START+IBX,OFFSET,"   Plan Category: "_$$EXPAND^IBTRE(355.3,.14,$P(IBCPOLD,"^",14))) S IBX=IBX+1
"RTN","IBCNSP0",50,0)
 I $P(IBCPOLD,U,15)]"" D
"RTN","IBCNSP0",51,0)
 . D SET(START+IBX,OFFSET," Electronic Type: "_$$EXPAND^IBTRE(355.3,.15,$P(IBCPOLD,"^",15))) S IBX=IBX+1
"RTN","IBCNSP0",52,0)
 D SET(START+IBX,OFFSET,"  Plan Filing TF: "_$P(IBCPOLD,"^",13)_$S($P(IBCPOLD,U,16):" ("_$$FTFN^IBCNSU31(IBCPOL)_")",1:"")) S IBX=IBX+1
"RTN","IBCNSP0",53,0)
 ;
"RTN","IBCNSP0",54,0)
 D SET(START+IBX,OFFSET,"      ePharmacy Plan ID: "_IBPLNID) S IBX=IBX+1
"RTN","IBCNSP0",55,0)
 D SET(START+IBX,OFFSET,"    ePharmacy Plan Name: "_IBPLNNM) S IBX=IBX+1
"RTN","IBCNSP0",56,0)
 D SET(START+IBX,OFFSET,"  ePharmacy Natl Status: "_IBPLNNA) S IBX=IBX+1
"RTN","IBCNSP0",57,0)
 D SET(START+IBX,OFFSET," ePharmacy Local Status: "_IBPLNLA) S IBX=IBX+1
"RTN","IBCNSP0",58,0)
 ;
"RTN","IBCNSP0",59,0)
 ; -- in case pointer is missing
"RTN","IBCNSP0",60,0)
 I '$G(^IBA(355.3,+$P(IBCDFND,"^",18),0)) D
"RTN","IBCNSP0",61,0)
 .D SET(START+1,OFFSET,"Insurance Number: "_$P(IBCDFND,"^",2))
"RTN","IBCNSP0",62,0)
 .D SET(START+2,OFFSET,"      Group Name: "_$P(IBCDFND,"^",15))
"RTN","IBCNSP0",63,0)
 .D SET(START+3,OFFSET,"    Group Number: "_$P(IBCDFND,"^",3))
"RTN","IBCNSP0",64,0)
 .Q
"RTN","IBCNSP0",65,0)
 Q
"RTN","IBCNSP0",66,0)
 ;
"RTN","IBCNSP0",67,0)
INS ; -- Insurance Co. Region
"RTN","IBCNSP0",68,0)
 N OFFSET,START,IBADD,IBCDFNDA,IBCDFNDB
"RTN","IBCNSP0",69,0)
 S START=1,OFFSET=45
"RTN","IBCNSP0",70,0)
 D SET(START,OFFSET," Insurance Company ",IORVON,IORVOFF)
"RTN","IBCNSP0",71,0)
 D SET(START+1,OFFSET,"   Company: "_$P($G(^DIC(36,+IBCDFND,0)),"^"))
"RTN","IBCNSP0",72,0)
 S IBCDFNDA=$G(^DIC(36,+IBCDFND,.11)),IBCDFNDB=$G(^(.13))
"RTN","IBCNSP0",73,0)
 G:IBCDFNDA="" INSQ
"RTN","IBCNSP0",74,0)
 D SET(START+2,OFFSET,"    Street: "_$P(IBCDFNDA,"^")) S IBADD=1
"RTN","IBCNSP0",75,0)
 I $P(IBCDFNDA,"^",2)'="" D SET(START+3,OFFSET,"  Street 2: "_$P(IBCDFNDA,"^",2)) S IBADD=2
"RTN","IBCNSP0",76,0)
 I $P(IBCDFNDA,"^",3)'="" D SET(START+4,OFFSET,"  Street 3: "_$P(IBCDFNDA,"^",3)) S IBADD=3
"RTN","IBCNSP0",77,0)
 D SET(START+2+IBADD,OFFSET,"City/State: "_$E($P(IBCDFNDA,"^",4),1,15)_$S($P(IBCDFNDA,"^",4)="":"",1:", ")_$P($G(^DIC(5,+$P(IBCDFNDA,"^",5),0)),"^",2)_" "_$E($P(IBCDFNDA,"^",6),1,5))
"RTN","IBCNSP0",78,0)
 D SET(START+3+IBADD,OFFSET,"Billing Ph: "_$P(IBCDFNDB,"^",2))
"RTN","IBCNSP0",79,0)
 D SET(START+4+IBADD,OFFSET,"Precert Ph: "_$$PHONE^IBCNSC01(IBCDFNDB))
"RTN","IBCNSP0",80,0)
 ;
"RTN","IBCNSP0",81,0)
INSQ Q
"RTN","IBCNSP0",82,0)
 ;
"RTN","IBCNSP0",83,0)
SPON ; -- Sponsor (Insured Person) Region
"RTN","IBCNSP0",84,0)
 N IBC3,IBZIP,START,OFFSET,IBA,DA,DR,DIC,DIQ
"RTN","IBCNSP0",85,0)
 S IBC3=$G(^DPT(DFN,.312,IBCDFN,3))
"RTN","IBCNSP0",86,0)
 S DA=+$P(IBC3,"^",2),DR=.01,DIQ(0)="E",DIC="^DIC(23,",DIQ="IBA" D EN^DIQ1
"RTN","IBCNSP0",87,0)
 S START=$O(^TMP("IBCNSVP",$J,""),-1)+1,OFFSET=4
"RTN","IBCNSP0",88,0)
 D SET(START,OFFSET," Insured Person's Information (use Subscriber Update Action) ",IORVON,IORVOFF)
"RTN","IBCNSP0",89,0)
 D SET(START+1,OFFSET,"    Insured's DOB: "_$$DAT3^IBOUTL($P(IBC3,"^")))
"RTN","IBCNSP0",90,0)
 D SET(START+2,OFFSET,"    Insured's Sex: "_$$EXTERNAL^DILFD(2.312,3.12,,$P(IBC3,U,12)))
"RTN","IBCNSP0",91,0)
 D SET(START+3,OFFSET," Insured's Branch: "_$G(IBA(23,DA,.01,"E")))
"RTN","IBCNSP0",92,0)
 D SET(START+4,OFFSET,"   Insured's Rank: "_$P(IBC3,"^",3))
"RTN","IBCNSP0",93,0)
 ;
"RTN","IBCNSP0",94,0)
 S OFFSET=43
"RTN","IBCNSP0",95,0)
 S Y=$P(IBC3,"^",10) D ZIPOUT^VAFADDR S IBZIP=Y
"RTN","IBCNSP0",96,0)
 D SET(START+1,OFFSET," Str 1: "_$P(IBC3,"^",6))
"RTN","IBCNSP0",97,0)
 D SET(START+2,OFFSET," Str 2: "_$P(IBC3,"^",7))
"RTN","IBCNSP0",98,0)
 D SET(START+3,OFFSET,"  City: "_$P(IBC3,"^",8))
"RTN","IBCNSP0",99,0)
 D SET(START+4,OFFSET,"St/Zip: "_$P($G(^DIC(5,+$P(IBC3,"^",9),0)),"^",2)_"  "_IBZIP)
"RTN","IBCNSP0",100,0)
 D SET(START+5,OFFSET,"SubDiv: "_$P(IBC3,"^",14))
"RTN","IBCNSP0",101,0)
 D SET(START+6,OFFSET," Cntry: "_$P(IBC3,"^",13))
"RTN","IBCNSP0",102,0)
 D SET(START+7,OFFSET," Phone: "_$P(IBC3,"^",11))
"RTN","IBCNSP0",103,0)
 ;
"RTN","IBCNSP0",104,0)
 ; blank lines at end of section
"RTN","IBCNSP0",105,0)
 D SET(START+6,2," ")
"RTN","IBCNSP0",106,0)
 D SET(START+7,2," ")
"RTN","IBCNSP0",107,0)
 Q
"RTN","IBCNSP0",108,0)
 ;
"RTN","IBCNSP0",109,0)
BLANK(LINE) ; -- Build blank line
"RTN","IBCNSP0",110,0)
 D SET^VALM10(.LINE,$J("",80))
"RTN","IBCNSP0",111,0)
 Q
"RTN","IBCNSP0",112,0)
 ;
"RTN","IBCNSP0",113,0)
SET(LINE,COL,TEXT,ON,OFF) ; -- set display info in array
"RTN","IBCNSP0",114,0)
 D:'$D(@VALMAR@(LINE,0)) BLANK(.LINE)
"RTN","IBCNSP0",115,0)
 D SET^VALM10(.LINE,$$SETSTR^VALM1(.TEXT,@VALMAR@(LINE,0),.COL,$L(TEXT)))
"RTN","IBCNSP0",116,0)
 D:$G(ON)]""!($G(OFF)]"") CNTRL^VALM10(.LINE,.COL,$L(TEXT),$G(ON),$G(OFF))
"RTN","IBCNSP0",117,0)
 W:'(LINE#5) "."
"RTN","IBCNSP0",118,0)
 Q
"RTN","IBCNSP0",119,0)
 ;
"RTN","IBCNSP0",120,0)
GPLAN(IBPLDA) ; get data from PLAN file (#366.03) related to the
"RTN","IBCNSP0",121,0)
 ; GROUP INSURANCE PLAN file (#355.3) and the INSURANCE COMPANY file (#36)
"RTN","IBCNSP0",122,0)
 ; that is associated with the PATIENT
"RTN","IBCNSP0",123,0)
 ; input - IBPLDA - ien of the PLAN file (#366.03)
"RTN","IBCNSP0",124,0)
 N IBPLN0,IBAIEN,IBAPIEN,IBAP0
"RTN","IBCNSP0",125,0)
 S IBPLN0=$G(^IBCNR(366.03,IBPLDA,0)) ;; Q:'$P(IBPLN0,"^",3) ;quit if payer not defined 
"RTN","IBCNSP0",126,0)
 S IBPLNID=$P(IBPLN0,"^"),IBPLNNM=$P(IBPLN0,"^",2)
"RTN","IBCNSP0",127,0)
 S IBAIEN=$O(^IBCNR(366.13,"B","E-PHARM","")) Q:'IBAIEN
"RTN","IBCNSP0",128,0)
 S IBAPIEN=$O(^IBCNR(366.03,IBPLDA,3,"B",IBAIEN,"")) Q:'IBAPIEN
"RTN","IBCNSP0",129,0)
 S IBAP0=$G(^IBCNR(366.03,IBPLDA,3,IBAPIEN,0))
"RTN","IBCNSP0",130,0)
 S IBPLNNA=$S($P(IBAP0,"^",2)=0:"NOT ACTIVE",1:"ACTIVE")
"RTN","IBCNSP0",131,0)
 S IBPLNLA=$S($P(IBAP0,"^",3)=0:"NOT ACTIVE",1:"ACTIVE")
"RTN","IBCNSP0",132,0)
 Q
"RTN","IBCNSP0",133,0)
 ;
"RTN","IBCNSP0",134,0)
 ;IBCNSP0
"RTN","IBJPI")
0^14^B22090434^B20701382
"RTN","IBJPI",1,0)
IBJPI ;DAOU/BHS - IBJP eIV SITE PARAMETERS SCREEN ;14-JUN-2002
"RTN","IBJPI",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,316,416,438**;21-MAR-94;Build 52
"RTN","IBJPI",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBJPI",4,0)
 ;
"RTN","IBJPI",5,0)
 ; eIV - Electronic Insurance Verification Interface parameters
"RTN","IBJPI",6,0)
 ;
"RTN","IBJPI",7,0)
EN ; main entry pt for IBJP IIV SITE PARAMS
"RTN","IBJPI",8,0)
 N POP,X,CTRLCOL,VALMHDR,VALMCNT,%DT
"RTN","IBJPI",9,0)
 D EN^VALM("IBJP IIV SITE PARAMETERS")
"RTN","IBJPI",10,0)
 Q
"RTN","IBJPI",11,0)
 ;
"RTN","IBJPI",12,0)
HDR ; header 
"RTN","IBJPI",13,0)
 S VALMHDR(1)="Only authorized persons may edit this data."
"RTN","IBJPI",14,0)
 Q
"RTN","IBJPI",15,0)
 ;
"RTN","IBJPI",16,0)
INIT ; init vars & list array
"RTN","IBJPI",17,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",18,0)
 ; Kills data and video control arrays with active list
"RTN","IBJPI",19,0)
 D CLEAN^VALM10
"RTN","IBJPI",20,0)
 D BLD
"RTN","IBJPI",21,0)
 Q
"RTN","IBJPI",22,0)
 ;
"RTN","IBJPI",23,0)
HELP ; help
"RTN","IBJPI",24,0)
 D FULL^VALM1
"RTN","IBJPI",25,0)
 W @IOF
"RTN","IBJPI",26,0)
 W !,"This screen displays all of the eIV Site Parameters used to manage the"
"RTN","IBJPI",27,0)
 W !,"eIV application used for electronic Insurance Verification."
"RTN","IBJPI",28,0)
 W !!,"The General Parameters section concerns overall parameters for"
"RTN","IBJPI",29,0)
 W !,"monitoring the interface and controlling eIV communication between"
"RTN","IBJPI",30,0)
 W !,"VistA and the EC located in Austin."
"RTN","IBJPI",31,0)
 W !!,"The Batch Extracts section concerns extract-specific parameters"
"RTN","IBJPI",32,0)
 W !,"including active/inactive status and selection criteria."
"RTN","IBJPI",33,0)
 W !!,"The Service Type Codes section concerns specifying up to nine"
"RTN","IBJPI",34,0)
 W !,"Site Selected Service Type Codes which will be sent with"
"RTN","IBJPI",35,0)
 W !,"insurance inquiries."
"RTN","IBJPI",36,0)
 D PAUSE^VALM1
"RTN","IBJPI",37,0)
 W @IOF
"RTN","IBJPI",38,0)
 S VALMBCK="R"
"RTN","IBJPI",39,0)
 Q
"RTN","IBJPI",40,0)
 ;
"RTN","IBJPI",41,0)
EXIT ; exit
"RTN","IBJPI",42,0)
 K ^TMP($J,"IBJPI")
"RTN","IBJPI",43,0)
 D CLEAN^VALM10
"RTN","IBJPI",44,0)
 Q
"RTN","IBJPI",45,0)
 ;
"RTN","IBJPI",46,0)
BLD ; build screen array
"RTN","IBJPI",47,0)
 N IBLN,IBCOL,IBWID,IBIIV,IBIIVB,IBIEN,CT,IBEX1,IBEX2,IBEX,IEN
"RTN","IBJPI",48,0)
 N IBST,IBDATA,DISYS,X,STATUS,AIEN,ADATA
"RTN","IBJPI",49,0)
 ;
"RTN","IBJPI",50,0)
 S (IBLN,VALMCNT)=0,IBCOL=3,IBIIV=$G(^IBE(350.9,1,51))
"RTN","IBJPI",51,0)
 ; -- Gen Params
"RTN","IBJPI",52,0)
 S IBWID=49
"RTN","IBJPI",53,0)
 S IBLN=$$SETN("General Parameters",IBLN,IBCOL,1,)
"RTN","IBJPI",54,0)
 S IBLN=$$SET("Days between electronic re-verification checks:  ",$P(IBIIV,U,1),IBLN,IBWID)
"RTN","IBJPI",55,0)
 S IBLN=$$SET("Send daily statistical report via MailMan:  ",$S($P(IBIIV,U,2):"YES",$P(IBIIV,U,2)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",56,0)
 I $P(IBIIV,U,2) S IBLN=$$SET("Time of day for daily statistical report:  ",$P(IBIIV,U,3),IBLN,IBWID)
"RTN","IBJPI",57,0)
 S IBLN=$$SET("Mail Group for eIV messages:  ",$$MGRP^IBCNEUT5,IBLN,IBWID)
"RTN","IBJPI",58,0)
 S IBLN=$$SET("HL7 Response Processing Method:  ",$S($P(IBIIV,U,13)="B":"BATCH",$P(IBIIV,U,13)="I":"IMMEDIATE",1:""),IBLN,IBWID)
"RTN","IBJPI",59,0)
 I $P(IBIIV,U,13)="B" D
"RTN","IBJPI",60,0)
 . S IBLN=$$SET("HL7 Batch Start Time:  ",$P(IBIIV,U,14),IBLN,IBWID)
"RTN","IBJPI",61,0)
 . S IBLN=$$SET("HL7 Batch Stop Time:  ",$P(IBIIV,U,19),IBLN,IBWID)
"RTN","IBJPI",62,0)
 . Q
"RTN","IBJPI",63,0)
 ;
"RTN","IBJPI",64,0)
 S IBLN=$$SET("Contact Person:  ",$S($P(IBIIV,U,16)'="":$$GET1^DIQ(200,$P(IBIIV,U,16)_",",.01,"E"),1:""),IBLN,IBWID)
"RTN","IBJPI",65,0)
 S IBLN=$$SET("Send MailMan message if communication problem:  ",$S($P(IBIIV,U,20):"YES",$P(IBIIV,U,20)=0:"NO",1:""),IBLN,IBWID)
"RTN","IBJPI",66,0)
 ;
"RTN","IBJPI",67,0)
 ; Skip lines in between sections
"RTN","IBJPI",68,0)
 S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",69,0)
 ;
"RTN","IBJPI",70,0)
 ; -- Batch Extracts
"RTN","IBJPI",71,0)
 S IBWID=43
"RTN","IBJPI",72,0)
 S IBLN=$$SETN("Batch Extracts",IBLN,IBCOL,1,)
"RTN","IBJPI",73,0)
 S IBLN=$$SET("Extract               Selection  Maximum # to","",IBLN,IBWID)
"RTN","IBJPI",74,0)
 S IBLN=$$SETN(" Name          On/Off  Criteria   Extract/Day",IBLN,IBCOL+1,,1)
"RTN","IBJPI",75,0)
 ;S IBLN=$$SETN(" Extract Name      On/Off      Selection Criteria",IBLN,IBCOL+1,,1)
"RTN","IBJPI",76,0)
 ; Loop thru extracts
"RTN","IBJPI",77,0)
 S IEN=0 F  S IEN=$O(^IBE(350.9,1,51.17,IEN)) Q:'IEN  D
"RTN","IBJPI",78,0)
 . S IBIIVB=$G(^IBE(350.9,1,51.17,IEN,0))
"RTN","IBJPI",79,0)
 . S IBEX=+$P(IBIIVB,U,1)  ; Type
"RTN","IBJPI",80,0)
 . I '$F(".1.2.","."_IBEX_".") Q
"RTN","IBJPI",81,0)
 . S IBST=$$FO^IBCNEUT1($S($P(IBIIVB,U,1)'="":$$GET1^DIQ(350.9002,$P(IBIIVB,U,1)_",1,",.01,"E"),1:""),14)
"RTN","IBJPI",82,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,U,2):"ON",1:"OFF"),8)
"RTN","IBJPI",83,0)
 . S IBEX1=$S(+$P(IBIIVB,U,3)'=0:+$P(IBIIVB,U,3),1:$P(IBIIVB,U,3))
"RTN","IBJPI",84,0)
 . S IBEX2=$S(+$P(IBIIVB,U,4)'=0:+$P(IBIIVB,U,4),1:$P(IBIIVB,U,4))
"RTN","IBJPI",85,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(IBEX=1:"n/a",IBEX=2:IBEX1,IBEX=3:IBEX1_"/"_IBEX2,1:"ERROR"),11)
"RTN","IBJPI",86,0)
 . S IBST=IBST_$$FO^IBCNEUT1($S(+$P(IBIIVB,U,5):+$P(IBIIVB,U,5),1:$P(IBIIVB,U,5)),14)
"RTN","IBJPI",87,0)
 . S IBLN=$$SET(IBST,"",IBLN,IBWID)
"RTN","IBJPI",88,0)
 . Q
"RTN","IBJPI",89,0)
 ;S IBLN=$$SET("","",IBLN,0)
"RTN","IBJPI",90,0)
 S VALMCNT=IBLN
"RTN","IBJPI",91,0)
 Q
"RTN","IBJPI",92,0)
 ;
"RTN","IBJPI",93,0)
SET(TTL,DATA,LN,WID) ;
"RTN","IBJPI",94,0)
 ; TTL = caption for field
"RTN","IBJPI",95,0)
 ; DATA = field value
"RTN","IBJPI",96,0)
 ; LN = current line #
"RTN","IBJPI",97,0)
 ; WID = right justify width
"RTN","IBJPI",98,0)
 N IBY
"RTN","IBJPI",99,0)
 ; update line ct
"RTN","IBJPI",100,0)
 S LN=LN+1
"RTN","IBJPI",101,0)
 ; offset line by 3 spaces
"RTN","IBJPI",102,0)
 S IBY="   "_$J(TTL,WID)_DATA D SET1(IBY,LN,0,$L(IBY))
"RTN","IBJPI",103,0)
 Q LN
"RTN","IBJPI",104,0)
 ;
"RTN","IBJPI",105,0)
SETN(TTL,LN,COL,RV,UN) ;
"RTN","IBJPI",106,0)
 ; TTL = caption for field
"RTN","IBJPI",107,0)
 ; LN = current line #
"RTN","IBJPI",108,0)
 ; COL = column at which to start video attribute
"RTN","IBJPI",109,0)
 ; RV = 0/1 flag for reverse video
"RTN","IBJPI",110,0)
 ; UN = 0/1 flag for underline
"RTN","IBJPI",111,0)
 N IBY
"RTN","IBJPI",112,0)
 ; update line ct
"RTN","IBJPI",113,0)
 S LN=LN+1
"RTN","IBJPI",114,0)
 ; offset line by 2 spaces
"RTN","IBJPI",115,0)
 S IBY="  "_TTL D SET1(IBY,LN,COL,$L(TTL),$G(RV),$G(UN))
"RTN","IBJPI",116,0)
 Q LN
"RTN","IBJPI",117,0)
 ;
"RTN","IBJPI",118,0)
SET1(STR,LN,COL,WD,RV,UN) ; Set up ^TMP array with screen data
"RTN","IBJPI",119,0)
 ; STR = line text
"RTN","IBJPI",120,0)
 ; LN = current line #
"RTN","IBJPI",121,0)
 ; COL = column at which to start video attribute
"RTN","IBJPI",122,0)
 ; WD = width of video attribute
"RTN","IBJPI",123,0)
 ; RV = 0/1 flag for reverse video
"RTN","IBJPI",124,0)
 ; UN = 0/1 flag for underline
"RTN","IBJPI",125,0)
 D SET^VALM10(LN,STR)
"RTN","IBJPI",126,0)
 I $G(RV)'="" D CNTRL^VALM10(LN,COL,WD,IORVON,IORVOFF)
"RTN","IBJPI",127,0)
 I $G(UN)'="" D CNTRL^VALM10(LN,COL,WD-1,IOUON,IOUOFF)
"RTN","IBJPI",128,0)
 Q
"RTN","IBJPI",129,0)
 ;
"RTN","IBJPI2")
0^31^B2442412^B5452535
"RTN","IBJPI2",1,0)
IBJPI2 ;DAOU/BHS - eIV SITE PARAMETERS SCREEN ACTIONS ;26-JUN-2002
"RTN","IBJPI2",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,316,416,438**;21-MAR-94;Build 52
"RTN","IBJPI2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBJPI2",4,0)
 ;
"RTN","IBJPI2",5,0)
 ; eIV - electronic Insurance Verification Interface
"RTN","IBJPI2",6,0)
 ;
"RTN","IBJPI2",7,0)
 ; Only call from tag
"RTN","IBJPI2",8,0)
 Q
"RTN","IBJPI2",9,0)
 ;
"RTN","IBJPI2",10,0)
MP ; Most Popular Payer processing
"RTN","IBJPI2",11,0)
 Q
"RTN","IBJPI2",12,0)
 ; Set error trap to ensure that lock is released
"RTN","IBJPI2",13,0)
 N $ES,$ET
"RTN","IBJPI2",14,0)
 S $ET="D ER^IBJPI2"
"RTN","IBJPI2",15,0)
 ; Check lock
"RTN","IBJPI2",16,0)
 L +^IBCNE("MP"):1 I '$T W !!,"The Most Popular Payers List is being edited by another user, please retry later." D PAUSE^VALM1 G MPX
"RTN","IBJPI2",17,0)
 ; Call ListMan screen
"RTN","IBJPI2",18,0)
 D EN^IBJPI3
"RTN","IBJPI2",19,0)
 L -^IBCNE("MP")  ; Unlock
"RTN","IBJPI2",20,0)
 ;
"RTN","IBJPI2",21,0)
MPX ; MP exit pt
"RTN","IBJPI2",22,0)
 D INIT^IBJPI S VALMBCK="R"
"RTN","IBJPI2",23,0)
 Q
"RTN","IBJPI2",24,0)
 ;
"RTN","IBJPI2",25,0)
IIVEDIT(IBJDR) ; -- IBJP IIV EDIT ACTIONS (GP,PW):  Edit eIV Site Parameters
"RTN","IBJPI2",26,0)
 ; IBJDR - 0 (General Parameters section)
"RTN","IBJPI2",27,0)
 ;         1 (Patients Without Insurance section) - NO LONGER A VALID PARAMETER AFTER IB*2*416
"RTN","IBJPI2",28,0)
 N DA,DR,DIE,DIC,X,Y
"RTN","IBJPI2",29,0)
 ;
"RTN","IBJPI2",30,0)
 D FULL^VALM1
"RTN","IBJPI2",31,0)
 W @IOF,!,$S(IBJDR=0:"General",1:"Unknown")_" Parameters",!
"RTN","IBJPI2",32,0)
 ; Build string of fields to edit or input template based on IBJDR
"RTN","IBJPI2",33,0)
 I IBJDR'="" S DR=$P($T(@IBJDR),";;",2,999)
"RTN","IBJPI2",34,0)
 I DR'="" S DIE="^IBE(350.9,",DA=1 D ^DIE K DA,DR,DIE,DIC,X,Y
"RTN","IBJPI2",35,0)
 ;
"RTN","IBJPI2",36,0)
 D INIT^IBJPI S VALMBCK="R"
"RTN","IBJPI2",37,0)
 Q
"RTN","IBJPI2",38,0)
 ;
"RTN","IBJPI2",39,0)
0 ;;[IBCNE GENERAL PARAMETER EDIT]
"RTN","IBJPI2",40,0)
 ;
"RTN","IBJPI2",41,0)
 ;
"RTN","IBJPI2",42,0)
ER ; Unlock most popular payer and return to log error
"RTN","IBJPI2",43,0)
 L -^IBCNE("MP")
"RTN","IBJPI2",44,0)
 D ^%ZTER
"RTN","IBJPI2",45,0)
 D UNWIND^%ZTER
"RTN","IBJPI2",46,0)
 Q
"RTN","IBJPI2",47,0)
 ;
"RTN","IBJPI5")
0^15^B37149088^n/a
"RTN","IBJPI5",1,0)
IBJPI5 ;ENS/GSS - IBJP5 eIV SITE PARAMETERS SCREEN ;30-AUG-2010
"RTN","IBJPI5",2,0)
 ;;2.0;INTEGRATED BILLING;**438**;31-AUG-10;Build 52
"RTN","IBJPI5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBJPI5",4,0)
 ;
"RTN","IBJPI5",5,0)
 ; eIV - Electronic Insurance Verification Site Selected Service Type Codes
"RTN","IBJPI5",6,0)
 ;
"RTN","IBJPI5",7,0)
 Q
"RTN","IBJPI5",8,0)
 ;
"RTN","IBJPI5",9,0)
EN ; main entry point for IBJP EIV SITE SELECTED CODES
"RTN","IBJPI5",10,0)
 N DIR,I,IBDIRS,IBFLD,IBMAXDSC,IBMAXSSC,IBSTCACT,IBSTCARY,IBSTCCK,IBSTCDF
"RTN","IBJPI5",11,0)
 N IBSTCDFC,IBSTCDFI,IBSTCDSC,IBSTCIEN,IBSTCR
"RTN","IBJPI5",12,0)
 N IBSTCSS,IBSTCSSI,IBSTCSSX,IBSTCX,IBTMP,IBTMPCT,IBVALID,X,Y
"RTN","IBJPI5",13,0)
 ;
"RTN","IBJPI5",14,0)
 D INIT,BLD
"RTN","IBJPI5",15,0)
 ;
"RTN","IBJPI5",16,0)
EXIT ; Exit
"RTN","IBJPI5",17,0)
 K ^TMP("IBJPI5",$J)
"RTN","IBJPI5",18,0)
 S VALMBCK="R"
"RTN","IBJPI5",19,0)
 Q
"RTN","IBJPI5",20,0)
 ;
"RTN","IBJPI5",21,0)
INIT ; Initialize
"RTN","IBJPI5",22,0)
 S IBMAXSSC=9   ; max # SITE SELECTD STCS
"RTN","IBJPI5",23,0)
 S IBMAXDSC=11  ; max # of DEFAULT STCs
"RTN","IBJPI5",24,0)
 ; IBSTCDF=default STC IENs which herein remain unchanged
"RTN","IBJPI5",25,0)
 S IBSTCDF=$G(^IBE(350.9,1,60)),IBSTCDFI=U_IBSTCDF_U
"RTN","IBJPI5",26,0)
 D GET
"RTN","IBJPI5",27,0)
 Q
"RTN","IBJPI5",28,0)
 ;
"RTN","IBJPI5",29,0)
GET ; Get site selected STCs from db and define variables and arrays for AS and DS options
"RTN","IBJPI5",30,0)
 K ^TMP("IBJPI5",$J),IBSTCARY
"RTN","IBJPI5",31,0)
 ; IBSTCSS=delimited string of existing Site Selected STC IENs
"RTN","IBJPI5",32,0)
 S IBSTCSS=$G(^IBE(350.9,1,61)),IBSTCSSI=U_IBSTCSS_U
"RTN","IBJPI5",33,0)
 ; IBSTCIEN = A Site Selected Service Type Code (SSSTC) IEN
"RTN","IBJPI5",34,0)
 S IBSTCIEN=0
"RTN","IBJPI5",35,0)
 ; Create ^TMP global of available STCs by external ID to be used as site selected STCs - used in LS 
"RTN","IBJPI5",36,0)
 F  S IBSTCIEN=$O(^IBE(365.013,IBSTCIEN)) Q:IBSTCIEN="B"  D
"RTN","IBJPI5",37,0)
 . S IBSTCR=^IBE(365.013,IBSTCIEN,0)
"RTN","IBJPI5",38,0)
 . ; Not a useable STC if STC is inactive, STC is already a DEFAULT STC, or STC already a Site Specific STC
"RTN","IBJPI5",39,0)
 . I $P(IBSTCR,U,3)'=""!($F(IBSTCDFI,U_IBSTCIEN_U))!$F(IBSTCSSI,U_IBSTCIEN_U) Q
"RTN","IBJPI5",40,0)
 . S ^TMP("IBJPI5",$J,$P(IBSTCR,U,1))=$P(IBSTCR,U,1)_" "_$P(IBSTCR,U,2)
"RTN","IBJPI5",41,0)
 ; IBSTCSSX = Delimited string of SS STC external codes corresponding to IBSTCSS sequence of IENs
"RTN","IBJPI5",42,0)
 ; IBDIRS   = String list of SSSTCs as options for deletion
"RTN","IBJPI5",43,0)
 ; IBTMP    = Temporary string of SSSTCs to rebuild IBSTCSSS after STC to delete selected
"RTN","IBJPI5",44,0)
 S (IBDIRS,IBSTCSSX,IBTMP)="",IBTMPCT=0
"RTN","IBJPI5",45,0)
 F I=1:1:IBMAXSSC S IBSTCIEN=$P(IBSTCSS,U,I) Q:IBSTCIEN=""  D
"RTN","IBJPI5",46,0)
 . ; Use an array to keep codes in order by external code - used in AS
"RTN","IBJPI5",47,0)
 . S IBSTCR=^IBE(365.013,IBSTCIEN,0)
"RTN","IBJPI5",48,0)
 . S IBSTCARY($P(IBSTCR,U,1))=IBSTCIEN_U_$P(IBSTCR,U,2)
"RTN","IBJPI5",49,0)
 . ; Setting up IBDIRS - used in DS
"RTN","IBJPI5",50,0)
 . S $P(IBSTCSSX,U,I)=$P(IBSTCR,U,1)
"RTN","IBJPI5",51,0)
 . S IBDIRS=IBDIRS_";"_$P(IBSTCR,U,1)_":"_$P(IBSTCR,U,2)
"RTN","IBJPI5",52,0)
 ; end of what was in AS
"RTN","IBJPI5",53,0)
 Q
"RTN","IBJPI5",54,0)
 ;
"RTN","IBJPI5",55,0)
SET ; Set service type codes to db
"RTN","IBJPI5",56,0)
 ; Store IENs of Site Selected Service Type Codes
"RTN","IBJPI5",57,0)
 S ^IBE(350.9,1,61)=IBSTCSS
"RTN","IBJPI5",58,0)
 D GET
"RTN","IBJPI5",59,0)
 Q
"RTN","IBJPI5",60,0)
 ;
"RTN","IBJPI5",61,0)
A ; List
"RTN","IBJPI5",62,0)
 N DIR,X,Y
"RTN","IBJPI5",63,0)
 D FULL^VALM1 W @IOF
"RTN","IBJPI5",64,0)
 S (IBSTCX,X)=""
"RTN","IBJPI5",65,0)
 S DIR(0)="FO",DIR("A")="Enter RETURN to continue, code mnemonic/# to add, or '^' to exit"
"RTN","IBJPI5",66,0)
 S DIR("?")="Enter RETURN to list more valid codes, enter a code, or '^' to quit."
"RTN","IBJPI5",67,0)
 F I=1:1 S IBSTCX=$O(^TMP("IBJPI5",$J,IBSTCX)) Q:IBSTCX=""  D  Q:X'=""
"RTN","IBJPI5",68,0)
 . I I#23=0 D ^DIR Q:X=U
"RTN","IBJPI5",69,0)
 . I X'="" D AV S X=U Q
"RTN","IBJPI5",70,0)
 . W !,^TMP("IBJPI5",$J,IBSTCX)
"RTN","IBJPI5",71,0)
 I IBSTCX="" D PAUSE^VALM1
"RTN","IBJPI5",72,0)
 Q
"RTN","IBJPI5",73,0)
 ;
"RTN","IBJPI5",74,0)
 ; AV tag entry point for adding code from LS function
"RTN","IBJPI5",75,0)
AV ; VALIDITY CHECKS
"RTN","IBJPI5",76,0)
 I X=U Q
"RTN","IBJPI5",77,0)
 I $P(IBSTCSS,U,IBMAXSSC)'="" D ERR("A MAXIMUM OF "_IBMAXSSC_" SITE SELECTED CODES ALLOWED") Q
"RTN","IBJPI5",78,0)
 ; Could just check ^TMP for available STCs but then error message to user would not be specific
"RTN","IBJPI5",79,0)
 ;   as to the reason the code could not be used, thus the seemingly redundant checks.
"RTN","IBJPI5",80,0)
 S X=$TR(X,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","IBJPI5",81,0)
 S IBSTCIEN="",IBSTCIEN=$O(^IBE(365.013,"B",X,IBSTCIEN))
"RTN","IBJPI5",82,0)
 I IBSTCIEN="" D ERR("NO SUCH CODE IN DATABASE") Q
"RTN","IBJPI5",83,0)
 I $G(IBSTCARY(X))'="" D ERR(X_" IS ALREADY A SITE SELECTED CODE") Q
"RTN","IBJPI5",84,0)
 S IBSTCR=^IBE(365.013,IBSTCIEN,0)
"RTN","IBJPI5",85,0)
 I $P(IBSTCR,U,3)'=""  D ERR(X_" IS NOT AN ACTIVE CODE") Q
"RTN","IBJPI5",86,0)
 S IBSTCCK=U_IBSTCIEN_U,IBSTCDFC=U_^IBE(350.9,1,60)_U
"RTN","IBJPI5",87,0)
 I $F(IBSTCDFC,IBSTCCK) D ERR(X_" IS ALREADY A SYSTEM WIDE DEFAULT CODE") Q
"RTN","IBJPI5",88,0)
 ; Code entered passed all checks thus add it
"RTN","IBJPI5",89,0)
 S IBSTCARY(X)=IBSTCIEN_U_$P(IBSTCR,U,2)
"RTN","IBJPI5",90,0)
 ; Recreate IBSTCSS string of codes in external code order
"RTN","IBJPI5",91,0)
 S (IBSTCSS,X)=""
"RTN","IBJPI5",92,0)
 F  S X=$O(IBSTCARY(X)) Q:X=""  S IBSTCSS=IBSTCSS_U_$P(IBSTCARY(X),U,1)
"RTN","IBJPI5",93,0)
 S IBSTCSS=$E(IBSTCSS,2,999)
"RTN","IBJPI5",94,0)
 D SET
"RTN","IBJPI5",95,0)
 W "..",$P(IBSTCR,U,2)," ADDED"
"RTN","IBJPI5",96,0)
 Q
"RTN","IBJPI5",97,0)
 ;
"RTN","IBJPI5",98,0)
D ; Delete a Site Selected Service Type Code
"RTN","IBJPI5",99,0)
 N DIR,X,Y
"RTN","IBJPI5",100,0)
 D FULL^VALM1
"RTN","IBJPI5",101,0)
 S DIR(0)="S^"_$E(IBDIRS,2,$L(IBDIRS)),DIR("A")="Delete Service Type Code"
"RTN","IBJPI5",102,0)
 D ^DIR
"RTN","IBJPI5",103,0)
 F I=1:1:IBMAXSSC Q:$P(IBSTCSSX,U,I)=""  D
"RTN","IBJPI5",104,0)
 . I $P(IBSTCSSX,U,I)'=X S IBTMPCT=IBTMPCT+1,$P(IBTMP,U,IBTMPCT)=$P(IBSTCSS,U,I)
"RTN","IBJPI5",105,0)
 S IBSTCSS=IBTMP
"RTN","IBJPI5",106,0)
 D SET
"RTN","IBJPI5",107,0)
 I X'="^" W "..Deleted"
"RTN","IBJPI5",108,0)
 Q
"RTN","IBJPI5",109,0)
 ;
"RTN","IBJPI5",110,0)
BLD ; Build screen and prompt for action
"RTN","IBJPI5",111,0)
 N DIR,X,Y
"RTN","IBJPI5",112,0)
 W @IOF,IORVON,"Service Type Codes",IORVOFF
"RTN","IBJPI5",113,0)
 W !!,IOUON,"Default Service Type Codes",IOUOFF
"RTN","IBJPI5",114,0)
 F IBFLD=1:1:IBMAXDSC D
"RTN","IBJPI5",115,0)
 . S IBSTCR=^IBE(365.013,$P(IBSTCDF,U,IBFLD),0)
"RTN","IBJPI5",116,0)
 . W:IBFLD#2=1 !
"RTN","IBJPI5",117,0)
 . W:IBFLD#2=0 ?40 W $J($P(IBSTCR,U,1),2)," - ",$P(IBSTCR,U,2)
"RTN","IBJPI5",118,0)
 W !!,IOUON,"Site Selected Service Type Codes",IOUOFF
"RTN","IBJPI5",119,0)
 F IBFLD=1:1:IBMAXSSC D
"RTN","IBJPI5",120,0)
 . S IBSTCIEN=$P(IBSTCSS,U,IBFLD)
"RTN","IBJPI5",121,0)
 . I IBSTCIEN="" W !,"" Q
"RTN","IBJPI5",122,0)
 . S IBSTCR=^IBE(365.013,IBSTCIEN,0)
"RTN","IBJPI5",123,0)
 . W !,$J($P(IBSTCR,U,1),2)," - ",$P(IBSTCR,U,2)
"RTN","IBJPI5",124,0)
 W !,IORVON,"          Enter ?? for more information                                         ",IORVOFF
"RTN","IBJPI5",125,0)
 W !,"AS  Add a Service Type Code       DS  Delete a Service Type Code",!,"EX  Exit"
"RTN","IBJPI5",126,0)
 S DIR("A")="Select Action: Exit//"
"RTN","IBJPI5",127,0)
 S DIR(0)="SAO^AS:Add a Service Type Code from a list of available codes;DS:Delete a Service Type Code from a list of existing codes;EX:Exit^"
"RTN","IBJPI5",128,0)
 S DIR("?")="^D HELP1^IBJPI5"
"RTN","IBJPI5",129,0)
 S DIR("??")="^D HELP2^IBJPI5"
"RTN","IBJPI5",130,0)
 D ACTN
"RTN","IBJPI5",131,0)
 I $F("^E",X) Q
"RTN","IBJPI5",132,0)
 I $F("AD",X) D @X
"RTN","IBJPI5",133,0)
 G BLD
"RTN","IBJPI5",134,0)
 ;
"RTN","IBJPI5",135,0)
ACTN ;
"RTN","IBJPI5",136,0)
 D ^DIR
"RTN","IBJPI5",137,0)
 S X=$E(X,1),X=$TR(X,"abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
"RTN","IBJPI5",138,0)
 I '$F("^ADE",X) G ACTN
"RTN","IBJPI5",139,0)
 ;
"RTN","IBJPI5",140,0)
ERR(IBERVB) ; Display error 
"RTN","IBJPI5",141,0)
 S DIR(0)="FAOU",DIR("A")=IBERVB_" - Enter <RETURN> to continue."
"RTN","IBJPI5",142,0)
 D ^DIR
"RTN","IBJPI5",143,0)
 Q
"RTN","IBJPI5",144,0)
 ;
"RTN","IBJPI5",145,0)
HELP1 ; Display actions in response to '?' entry
"RTN","IBJPI5",146,0)
 D FULL^VALM1
"RTN","IBJPI5",147,0)
 W @IOF
"RTN","IBJPI5",148,0)
 Q
"RTN","IBJPI5",149,0)
 ;
"RTN","IBJPI5",150,0)
HELP2 ; Text to display in response to '??' entry
"RTN","IBJPI5",151,0)
 N DIR
"RTN","IBJPI5",152,0)
 D FULL^VALM1
"RTN","IBJPI5",153,0)
 W @IOF
"RTN","IBJPI5",154,0)
 W !,"The DEFAULT SERVICE TYPE CODES are not editable but defined by CBO."
"RTN","IBJPI5",155,0)
 W !,"The SITE SELECTED SERVICE TYPE CODES are defined by each site and"
"RTN","IBJPI5",156,0)
 W !,"are editable by authorized personnel of that site."
"RTN","IBJPI5",157,0)
 W !,"Please do not use a DEFAULT SERVICE TYPE CODES as a SITE SELECTED"
"RTN","IBJPI5",158,0)
 W !,"SERVICE TYPE CODE. Use only ACTIVE Service Type Codes which are"
"RTN","IBJPI5",159,0)
 W !,"not DEFAULT SERVICE TYPE CODES as SITE SELECTED SERVICE TYPE CODES."
"RTN","IBJPI5",160,0)
 W !,"Actions available are 'AS' to list and add codes or 'DS' to delete"
"RTN","IBJPI5",161,0)
 W !,"codes. Enter '^' to quit."
"RTN","IBJPI5",162,0)
 Q
"RTN","IBJPM")
0^13^B10881232^B10531686
"RTN","IBJPM",1,0)
IBJPM ;ALB/MAF,ARH - IBSP MCCR PARAMETERS SCREEN ;14-DEC-1995
"RTN","IBJPM",2,0)
 ;;2.0;INTEGRATED BILLING;**39,137,184,271,316,416,438**;21-MAR-94;Build 52
"RTN","IBJPM",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBJPM",4,0)
 ;
"RTN","IBJPM",5,0)
EN ; -- main entry point for JOINT INQUIRY PARAMETERS option
"RTN","IBJPM",6,0)
 D EN^VALM("IBJP MCCR PARAMETERS")
"RTN","IBJPM",7,0)
 Q
"RTN","IBJPM",8,0)
 ;
"RTN","IBJPM",9,0)
HDR ; -- header code
"RTN","IBJPM",10,0)
 S VALMHDR(1)="Display/Edit MCCR Site Parameters."
"RTN","IBJPM",11,0)
 S VALMHDR(2)="Only authorized persons may edit this data."
"RTN","IBJPM",12,0)
 Q
"RTN","IBJPM",13,0)
 ;
"RTN","IBJPM",14,0)
INIT ; -- init variables and list array
"RTN","IBJPM",15,0)
 K ^TMP("IBJPM",$J)
"RTN","IBJPM",16,0)
 D BLD
"RTN","IBJPM",17,0)
 Q
"RTN","IBJPM",18,0)
 ;
"RTN","IBJPM",19,0)
HELP ; -- help code
"RTN","IBJPM",20,0)
 S X="?" D DISP^XQORM1 W !!
"RTN","IBJPM",21,0)
 Q
"RTN","IBJPM",22,0)
 ;
"RTN","IBJPM",23,0)
EXIT ; -- exit code
"RTN","IBJPM",24,0)
 K ^TMP("IBJPM",$J),IBFASTXT,VALMBCK
"RTN","IBJPM",25,0)
 D CLEAR^VALM1
"RTN","IBJPM",26,0)
 Q
"RTN","IBJPM",27,0)
 ;
"RTN","IBJPM",28,0)
BLD ; -- build screen array, no variables required for input
"RTN","IBJPM",29,0)
 N IBNC,IBTC,IBTW,IBSW,IBLN,IBGRPB,IBGRPE,IBLR
"RTN","IBJPM",30,0)
 S IBNC(1)=1,IBTW(1)=0,IBTC(1)=5,IBSW(1)=30,IBNC(2)=43,IBTW(2)=0,IBTC(2)=47,IBSW(2)=30
"RTN","IBJPM",31,0)
 ;
"RTN","IBJPM",32,0)
 S (VALMCNT,IBLN)=1,IBLR=1,IBLN=$$SET("","",IBLN,IBLR),IBGRPB=IBLN
"RTN","IBJPM",33,0)
 ;
"RTN","IBJPM",34,0)
 ; - IB Site Parameters
"RTN","IBJPM",35,0)
 S IBLN=$$SETN("IB Site Parameters",IBLN,IBLR,1)
"RTN","IBJPM",36,0)
 S IBLN=$$SET("","Facility Definition",IBLN,IBLR)
"RTN","IBJPM",37,0)
 S IBLN=$$SET("","Mail Groups",IBLN,IBLR)
"RTN","IBJPM",38,0)
 S IBLN=$$SET("","Patient Billing",IBLN,IBLR)
"RTN","IBJPM",39,0)
 S IBLN=$$SET("","Third Party Billing",IBLN,IBLR)
"RTN","IBJPM",40,0)
 S IBLN=$$SET("","Provider Id",IBLN,IBLR)
"RTN","IBJPM",41,0)
 S IBLN=$$SET("","EDI Transmission",IBLN,IBLR)
"RTN","IBJPM",42,0)
 ;
"RTN","IBJPM",43,0)
 S IBLR=2,IBGRPE=IBLN,IBLN=IBGRPB
"RTN","IBJPM",44,0)
 ;
"RTN","IBJPM",45,0)
 ; - Claim Tracking Parameters
"RTN","IBJPM",46,0)
 S IBLN=$$SETN("Claims Tracking Parameters",IBLN,IBLR,1)
"RTN","IBJPM",47,0)
 S IBLN=$$SET("","General Parameters",IBLN,IBLR)
"RTN","IBJPM",48,0)
 S IBLN=$$SET("","Tracking Parameters",IBLN,IBLR)
"RTN","IBJPM",49,0)
 S IBLN=$$SET("","Random Sampling",IBLN,IBLR)
"RTN","IBJPM",50,0)
 ;
"RTN","IBJPM",51,0)
 S IBLN=$S(IBLN>IBGRPE:IBLN,1:IBGRPE),IBLR=1,IBLN=$$SET("","",IBLN,IBLR),IBGRPB=IBLN
"RTN","IBJPM",52,0)
 ;
"RTN","IBJPM",53,0)
 ; - Automated Billing Parameters
"RTN","IBJPM",54,0)
 S IBLN=$$SETN("Third Party Auto Billing Parameters",IBLN,IBLR,1)
"RTN","IBJPM",55,0)
 S IBLN=$$SET("","General Parameters",IBLN,IBLR)
"RTN","IBJPM",56,0)
 S IBLN=$$SET("","Inpatient Admission",IBLN,IBLR)
"RTN","IBJPM",57,0)
 S IBLN=$$SET("","Outpatient Visit",IBLN,IBLR)
"RTN","IBJPM",58,0)
 S IBLN=$$SET("","Prescription Refill",IBLN,IBLR)
"RTN","IBJPM",59,0)
 ;
"RTN","IBJPM",60,0)
 ; DAOU/BHS - Added 13-JUN-2002
"RTN","IBJPM",61,0)
 S IBLR=2,IBLN=IBGRPB
"RTN","IBJPM",62,0)
 ;
"RTN","IBJPM",63,0)
 ; DAOU/BHS - Added 13-JUN-2002
"RTN","IBJPM",64,0)
 ; - eIV Parameters
"RTN","IBJPM",65,0)
 S IBLN=$$SETN("Insurance Verification",IBLN,IBLR,1)
"RTN","IBJPM",66,0)
 S IBLN=$$SET("","General Parameters",IBLN,IBLR)
"RTN","IBJPM",67,0)
 S IBLN=$$SET("","Batch Extracts Parameters",IBLN,IBLR)
"RTN","IBJPM",68,0)
 S IBLN=$$SET("","Service Type Codes",IBLN,IBLR)
"RTN","IBJPM",69,0)
 ;
"RTN","IBJPM",70,0)
 S (IBLN,VALMCNT)=$S(IBLN>IBGRPE:IBLN,1:IBGRPE)-1
"RTN","IBJPM",71,0)
 Q
"RTN","IBJPM",72,0)
 ;
"RTN","IBJPM",73,0)
SET(TTL,DATA,LN,LR) ;
"RTN","IBJPM",74,0)
 N IBY
"RTN","IBJPM",75,0)
 S IBY=$J(TTL,IBTW(LR))_DATA D SET1(IBY,LN,IBTC(LR),(IBTW(LR)+IBSW(LR)))
"RTN","IBJPM",76,0)
 S LN=LN+1
"RTN","IBJPM",77,0)
 Q LN
"RTN","IBJPM",78,0)
 ;
"RTN","IBJPM",79,0)
SETN(TTL,LN,LR,RV) ;
"RTN","IBJPM",80,0)
 N IBY
"RTN","IBJPM",81,0)
 S IBY=" "_TTL_" " D SET1(IBY,LN,IBNC(LR),$L(IBY),$G(RV))
"RTN","IBJPM",82,0)
 S LN=LN+1
"RTN","IBJPM",83,0)
 Q LN
"RTN","IBJPM",84,0)
 ;
"RTN","IBJPM",85,0)
SET1(STR,LN,COL,WD,RV) ; set up TMP array with screen data
"RTN","IBJPM",86,0)
 N IBX S IBX=$G(^TMP("IBJPM",$J,LN,0))
"RTN","IBJPM",87,0)
 S IBX=$$SETSTR^VALM1(STR,IBX,COL,WD)
"RTN","IBJPM",88,0)
 D SET^VALM10(LN,IBX) I $G(RV)'="" D CNTRL^VALM10(LN,COL,WD,IOINHI,IOINORM)
"RTN","IBJPM",89,0)
 Q
"RTN","IBY438PO")
0^^B16573994^n/a
"RTN","IBY438PO",1,0)
IBY438PO ;BP/YMG - Post Install for IB patch 438 ;27-Aug-2010
"RTN","IBY438PO",2,0)
 ;;2.0;INTEGRATED BILLING;**438**;21-MAR-94;Build 52
"RTN","IBY438PO",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBY438PO",4,0)
 ;
"RTN","IBY438PO",5,0)
 ; eIV Phase 3 Iteration 2 post-install
"RTN","IBY438PO",6,0)
 ;
"RTN","IBY438PO",7,0)
EN ; entry point
"RTN","IBY438PO",8,0)
 N XPDIDTOT
"RTN","IBY438PO",9,0)
 S XPDIDTOT=5
"RTN","IBY438PO",10,0)
 D CLEARDUP(1)  ; 1. Clear duplicate entries in dictionary files
"RTN","IBY438PO",11,0)
 D RMSG(2)      ; 2. Send site registration message to FSC
"RTN","IBY438PO",12,0)
 D SCHED(3)     ; 3. Schedule unlinked payers notification
"RTN","IBY438PO",13,0)
 D STC(4)       ; 4. Set-up Service Type Codes
"RTN","IBY438PO",14,0)
 D PARM(5)      ; 5. Set eIV site parameters
"RTN","IBY438PO",15,0)
 ;
"RTN","IBY438PO",16,0)
EX ; exit point
"RTN","IBY438PO",17,0)
 Q
"RTN","IBY438PO",18,0)
 ;
"RTN","IBY438PO",19,0)
CLEARDUP(IBXPD) ; clear duplicate entries in dictionary files
"RTN","IBY438PO",20,0)
 N CODE,FILE,NESDESC,NEWIEN,OLDIEN
"RTN","IBY438PO",21,0)
 N DA,DIE,DIK,DR,X,Y
"RTN","IBY438PO",22,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY438PO",23,0)
 D MES^XPDUTL("-------------")
"RTN","IBY438PO",24,0)
 D MES^XPDUTL("Cleaning dictionary files ... ")
"RTN","IBY438PO",25,0)
 F FILE=365.011:.001:365.028 D
"RTN","IBY438PO",26,0)
 .I '$D(^DIC(FILE)) Q
"RTN","IBY438PO",27,0)
 .S CODE="" F  S CODE=$O(^IBE(FILE,"B",CODE)) Q:CODE=""  D
"RTN","IBY438PO",28,0)
 ..S OLDIEN=$O(^IBE(FILE,"B",CODE,"")),NEWIEN=$O(^IBE(FILE,"B",CODE,""),-1)
"RTN","IBY438PO",29,0)
 ..I OLDIEN=NEWIEN Q  ; only one entry, no duplicates
"RTN","IBY438PO",30,0)
 ..; replace description in the old entry
"RTN","IBY438PO",31,0)
 ..S NEWDESC=$P($G(^IBE(FILE,NEWIEN,0)),U,2) I NEWDESC="" Q
"RTN","IBY438PO",32,0)
 ..S DIE=FILE,DA=OLDIEN,DR=".02///"_NEWDESC D ^DIE
"RTN","IBY438PO",33,0)
 ..; delete duplicate entry
"RTN","IBY438PO",34,0)
 ..S DA=NEWIEN,DIK="^IBE("_FILE_"," D ^DIK
"RTN","IBY438PO",35,0)
 ..Q
"RTN","IBY438PO",36,0)
 .Q
"RTN","IBY438PO",37,0)
 ; remove duplicate entry in file 353.1
"RTN","IBY438PO",38,0)
 S OLDIEN=+$O(^IBE(353.1,"B",99,""))
"RTN","IBY438PO",39,0)
 S NEWIEN=+$O(^IBE(353.1,"B",99,""),-1)
"RTN","IBY438PO",40,0)
 I NEWIEN,NEWIEN'=OLDIEN S DA=NEWIEN,DIK="^IBE(353.1," D ^DIK
"RTN","IBY438PO",41,0)
 ;
"RTN","IBY438PO",42,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY438PO",43,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY438PO",44,0)
 Q
"RTN","IBY438PO",45,0)
 ;
"RTN","IBY438PO",46,0)
RMSG(IBXPD) ; send site registration message to FSC
"RTN","IBY438PO",47,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY438PO",48,0)
 D MES^XPDUTL("-------------")
"RTN","IBY438PO",49,0)
 D MES^XPDUTL("Sending site registration message to FSC ... ")
"RTN","IBY438PO",50,0)
 I '$$PROD^XUPROD(1) D MES^XPDUTL(" N/A - not a production account") G RMSGX  ; only sent reg. message from production account
"RTN","IBY438PO",51,0)
 D ^IBCNEHLM
"RTN","IBY438PO",52,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY438PO",53,0)
RMSGX ;
"RTN","IBY438PO",54,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY438PO",55,0)
 Q
"RTN","IBY438PO",56,0)
 ;
"RTN","IBY438PO",57,0)
SCHED(IBXPD) ; schedule unlinked payers notification
"RTN","IBY438PO",58,0)
 N DIC,DLAYGO,TSTAMP,X,Y
"RTN","IBY438PO",59,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY438PO",60,0)
 D MES^XPDUTL("-------------")
"RTN","IBY438PO",61,0)
 D MES^XPDUTL("Scheduling unlinked payers notification ... ")
"RTN","IBY438PO",62,0)
 I '$$PROD^XUPROD(1) D MES^XPDUTL(" N/A - not a production account") G SCHEDX  ; only schedule in production account
"RTN","IBY438PO",63,0)
 I $$FIND1^DIC(19.2,,"B","IBCNE EIV PAYER LINK NOTIFY","B") D MES^XPDUTL(" Already scheduled") G SCHEDX  ; don't overwrite existing schedule
"RTN","IBY438PO",64,0)
 S (DLAYGO,DIC)=19.2,DIC(0)="L"
"RTN","IBY438PO",65,0)
 S X="IBCNE EIV PAYER LINK NOTIFY"
"RTN","IBY438PO",66,0)
 S TSTAMP=$$FMADD^XLFDT($$NOW^XLFDT(),1),$P(TSTAMP,".",2)="0500"
"RTN","IBY438PO",67,0)
 S DIC("DR")="2////"_TSTAMP_";6////7D"
"RTN","IBY438PO",68,0)
 D ^DIC
"RTN","IBY438PO",69,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY438PO",70,0)
SCHEDX ;
"RTN","IBY438PO",71,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY438PO",72,0)
 Q
"RTN","IBY438PO",73,0)
 ;
"RTN","IBY438PO",74,0)
STC(IBXPD) ;Set-up Service Type Codes for eIV
"RTN","IBY438PO",75,0)
 N DIE,DA,DR,X,Y
"RTN","IBY438PO",76,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY438PO",77,0)
 D MES^XPDUTL("-------------")
"RTN","IBY438PO",78,0)
 D MES^XPDUTL("Setting Default Service Type Codes ... ")
"RTN","IBY438PO",79,0)
 ; Set Default Service Type Codes
"RTN","IBY438PO",80,0)
 S DIE=350.9,DA=1
"RTN","IBY438PO",81,0)
 S DR="60.01///1;60.02///7;60.03///30;60.04///47;60.05///54;60.06///62;60.07///75;60.08///88;60.09///97;60.1///98;60.11///MH"
"RTN","IBY438PO",82,0)
 D ^DIE
"RTN","IBY438PO",83,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY438PO",84,0)
STCX ;
"RTN","IBY438PO",85,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY438PO",86,0)
 Q
"RTN","IBY438PO",87,0)
 ;
"RTN","IBY438PO",88,0)
PARM(IBXPD) ; set eIV site parameters for non-verified extract
"RTN","IBY438PO",89,0)
 N DA,DIK,DONE,IEN,TYPE
"RTN","IBY438PO",90,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY438PO",91,0)
 D MES^XPDUTL("-------------")
"RTN","IBY438PO",92,0)
 D MES^XPDUTL("Setting eIV Site Parameters ... ")
"RTN","IBY438PO",93,0)
 S (DONE,IEN)=0
"RTN","IBY438PO",94,0)
 F  S IEN=$O(^IBE(350.9,1,51.17,IEN)) Q:'IEN!DONE  I +$P($G(^IBE(350.9,1,51.17,IEN,0)),U)=3 S DONE=1
"RTN","IBY438PO",95,0)
 I IEN S DA=IEN,DA(1)=1,DIK="^IBE(350.9,1,51.17," D ^DIK
"RTN","IBY438PO",96,0)
 ;
"RTN","IBY438PO",97,0)
PARMX ;
"RTN","IBY438PO",98,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY438PO",99,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY438PO",100,0)
 Q
"SEC","^DIC",353.1,353.1,0,"AUDIT")
@
"SEC","^DIC",353.1,353.1,0,"DD")
@
"SEC","^DIC",353.1,353.1,0,"DEL")
@
"SEC","^DIC",353.1,353.1,0,"LAYGO")
@
"SEC","^DIC",353.1,353.1,0,"RD")
@
"SEC","^DIC",353.1,353.1,0,"WR")
@
"SEC","^DIC",365.013,365.013,0,"AUDIT")

"SEC","^DIC",365.013,365.013,0,"DD")
@
"SEC","^DIC",365.013,365.013,0,"DEL")
@
"SEC","^DIC",365.013,365.013,0,"LAYGO")
@
"SEC","^DIC",365.013,365.013,0,"RD")

"SEC","^DIC",365.013,365.013,0,"WR")

"SEC","^DIC",365.016,365.016,0,"AUDIT")

"SEC","^DIC",365.016,365.016,0,"DD")
@
"SEC","^DIC",365.016,365.016,0,"DEL")
@
"SEC","^DIC",365.016,365.016,0,"LAYGO")
@
"SEC","^DIC",365.016,365.016,0,"RD")

"SEC","^DIC",365.016,365.016,0,"WR")

"SEC","^DIC",365.021,365.021,0,"AUDIT")

"SEC","^DIC",365.021,365.021,0,"DD")
@
"SEC","^DIC",365.021,365.021,0,"DEL")
@
"SEC","^DIC",365.021,365.021,0,"LAYGO")
@
"SEC","^DIC",365.021,365.021,0,"RD")

"SEC","^DIC",365.021,365.021,0,"WR")

"SEC","^DIC",365.026,365.026,0,"AUDIT")

"SEC","^DIC",365.026,365.026,0,"DD")
@
"SEC","^DIC",365.026,365.026,0,"DEL")
@
"SEC","^DIC",365.026,365.026,0,"LAYGO")
@
"SEC","^DIC",365.026,365.026,0,"RD")

"SEC","^DIC",365.026,365.026,0,"WR")

"SEC","^DIC",365.027,365.027,0,"AUDIT")

"SEC","^DIC",365.027,365.027,0,"DD")
@
"SEC","^DIC",365.027,365.027,0,"DEL")
@
"SEC","^DIC",365.027,365.027,0,"LAYGO")
@
"SEC","^DIC",365.027,365.027,0,"RD")

"SEC","^DIC",365.027,365.027,0,"WR")

"UP",2,2.312,-1)
2^.312
"UP",2,2.312,0)
2.312
"UP",2,2.322,-2)
2^.312
"UP",2,2.322,-1)
2.312^6
"UP",2,2.322,0)
2.322
"UP",2,2.3229,-3)
2^.312
"UP",2,2.3229,-2)
2.312^6
"UP",2,2.3229,-1)
2.322^9
"UP",2,2.3229,0)
2.3229
"UP",2,2.32292,-3)
2^.312
"UP",2,2.32292,-2)
2.312^6
"UP",2,2.32292,-1)
2.322^11
"UP",2,2.32292,0)
2.32292
"UP",365,365.02,-1)
365^2
"UP",365,365.02,0)
365.02
"UP",365,365.06,-1)
365^6
"UP",365,365.06,0)
365.06
"UP",365,365.07,-1)
365^7
"UP",365,365.07,0)
365.07
"UP",365,365.29,-2)
365^2
"UP",365,365.29,-1)
365.02^9
"UP",365,365.29,0)
365.29
"UP",365,365.292,-2)
365^2
"UP",365,365.292,-1)
365.02^14
"UP",365,365.292,0)
365.292
"VER")
8.0^22.0
"^DD",2,2.312,3.13,0)
INSURED'S COUNTRY^F^^3;13^K:$L(X)>3!($L(X)<2) X
"^DD",2,2.312,3.13,3)
Answer must be 2-3 characters in length.
"^DD",2,2.312,3.13,21,0)
^^1^1^3100810^
"^DD",2,2.312,3.13,21,1,0)
This field contains the country code of the policyholder.
"^DD",2,2.312,3.13,23,0)
^^1^1^3100916^
"^DD",2,2.312,3.13,23,1,0)
Source: 271 HL7 message, PID.11.6.
"^DD",2,2.312,3.13,"DT")
3100916
"^DD",2,2.312,3.14,0)
INSURED'S COUNTRY SUBDIVISION^F^^3;14^K:$L(X)>3!($L(X)<1) X
"^DD",2,2.312,3.14,3)
Answer must be 1-3 characters in length.
"^DD",2,2.312,3.14,21,0)
^^1^1^3100810^
"^DD",2,2.312,3.14,21,1,0)
This field contains the country subdivision code of the policyholder.
"^DD",2,2.312,3.14,23,0)
^^1^1^3100916^
"^DD",2,2.312,3.14,23,1,0)
Source: 271 HL7 message, PID.11.8.
"^DD",2,2.312,3.14,"DT")
3100916
"^DD",2,2.322,.04,0)
*SERVICE TYPE^P365.013'^IBE(365.013,^0;4^Q
"^DD",2,2.322,.04,.1)
Service Type
"^DD",2,2.322,.04,3)
Enter the service type code from the list.
"^DD",2,2.322,.04,21,0)
^.001^1^1^3101130^^
"^DD",2,2.322,.04,21,1,0)
This field is a code identifying the classification of service.
"^DD",2,2.322,.04,23,0)
^^3^3^3101130^
"^DD",2,2.322,.04,23,1,0)
It corresponds to X.12 271 EB03 data element.
"^DD",2,2.322,.04,23,2,0)
This field is deprecated via IB*2.0*438.
"^DD",2,2.322,.04,23,3,0)
Replaced with 2.322/11 which is a multiple with #2.32292/.01.
"^DD",2,2.322,.04,"DT")
3101130
"^DD",2,2.322,4.09,0)
SUBDIVISION CODE^F^^4;9^K:$L(X)>3!($L(X)<1) X
"^DD",2,2.322,4.09,3)
Answer must be 1-3 characters in length.
"^DD",2,2.322,4.09,21,0)
^.001^1^1^3100810^^
"^DD",2,2.322,4.09,21,1,0)
Entity address, country subdivision code.
"^DD",2,2.322,4.09,23,0)
^^1^1^3100810^
"^DD",2,2.322,4.09,23,1,0)
Source: 271 HL7 message, ZTY.7.8.
"^DD",2,2.322,4.09,"DT")
3100810
"^DD",2,2.322,11,0)
SERVICE TYPES^2.32292PA^^11;0
"^DD",2,2.3229,.03,0)
DIAGNOSIS^P80'^ICD9(^0;3^Q
"^DD",2,2.3229,.03,3)
Select diagnosis code.
"^DD",2,2.3229,.03,21,0)
^^1^1^3090727^
"^DD",2,2.3229,.03,21,1,0)
Diagnosis code.
"^DD",2,2.3229,.03,23,0)
^^1^1^3090727^
"^DD",2,2.3229,.03,23,1,0)
Source: 271 HL7 message, ZII.3.1 when ZII.2.1 has value of "BF" or "BK"
"^DD",2,2.3229,.03,"DT")
3090727
"^DD",2,2.32292,0)
SERVICE TYPES SUB-FIELD^^.01^1
"^DD",2,2.32292,0,"DT")
3101130
"^DD",2,2.32292,0,"IX","B",2.32292,.01)

"^DD",2,2.32292,0,"NM","SERVICE TYPES")

"^DD",2,2.32292,0,"UP")
2.322
"^DD",2,2.32292,.01,0)
SERVICE TYPES^P365.013'^IBE(365.013,^0;1^Q
"^DD",2,2.32292,.01,1,0)
^.1
"^DD",2,2.32292,.01,1,1,0)
2.32292^B
"^DD",2,2.32292,.01,1,1,1)
S ^DPT(DA(3),.312,DA(2),6,DA(1),11,"B",$E(X,1,30),DA)=""
"^DD",2,2.32292,.01,1,1,2)
K ^DPT(DA(3),.312,DA(2),6,DA(1),11,"B",$E(X,1,30),DA)
"^DD",2,2.32292,.01,3)
Select a service type code returned from eligibility inquiry.
"^DD",2,2.32292,.01,21,0)
^^1^1^3101130^
"^DD",2,2.32292,.01,21,1,0)
This is a service type code returned from an eligibility inquiry.
"^DD",2,2.32292,.01,"DT")
3101130
"^DD",350.9,350.9,60.01,0)
DEFAULT SERVICE TYPE CODE 1^RP365.013'^IBE(365.013,^60;1^Q
"^DD",350.9,350.9,60.01,3)
Enter a default service type code.
"^DD",350.9,350.9,60.01,21,0)
^.001^1^1^3100913^^
"^DD",350.9,350.9,60.01,21,1,0)
First Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.01,"DT")
3100809
"^DD",350.9,350.9,60.02,0)
DEFAULT SERVICE TYPE CODE 2^RP365.013'^IBE(365.013,^60;2^Q
"^DD",350.9,350.9,60.02,3)
Enter a default service type code.
"^DD",350.9,350.9,60.02,21,0)
^.001^1^1^3100913^^
"^DD",350.9,350.9,60.02,21,1,0)
Second Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.02,"DT")
3100809
"^DD",350.9,350.9,60.03,0)
DEFAULT SERVICE TYPE CODE 3^RP365.013'^IBE(365.013,^60;3^Q
"^DD",350.9,350.9,60.03,3)
Enter a default service type code.
"^DD",350.9,350.9,60.03,21,0)
^.001^1^1^3100913^^
"^DD",350.9,350.9,60.03,21,1,0)
Third Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.03,"DT")
3100809
"^DD",350.9,350.9,60.04,0)
DEFAULT SERVICE TYPE CODE 4^RP365.013'^IBE(365.013,^60;4^Q
"^DD",350.9,350.9,60.04,3)
Enter a default service type code.
"^DD",350.9,350.9,60.04,21,0)
^.001^1^1^3100913^^^
"^DD",350.9,350.9,60.04,21,1,0)
Fourth Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.04,"DT")
3100809
"^DD",350.9,350.9,60.05,0)
DEFAULT SERVICE TYPE CODE 5^RP365.013'^IBE(365.013,^60;5^Q
"^DD",350.9,350.9,60.05,3)
Enter a default service type code.
"^DD",350.9,350.9,60.05,21,0)
^.001^1^1^3100913^^^
"^DD",350.9,350.9,60.05,21,1,0)
Fifth Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.05,"DT")
3100809
"^DD",350.9,350.9,60.06,0)
DEFAULT SERVICE TYPE CODE 6^RP365.013'^IBE(365.013,^60;6^Q
"^DD",350.9,350.9,60.06,3)
Enter a default service type code.
"^DD",350.9,350.9,60.06,21,0)
^.001^1^1^3100913^^
"^DD",350.9,350.9,60.06,21,1,0)
Sixth Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.06,"DT")
3100809
"^DD",350.9,350.9,60.07,0)
DEFAULT SERVICE TYPE CODE 7^RP365.013'^IBE(365.013,^60;7^Q
"^DD",350.9,350.9,60.07,3)
Enter a default service type code.
"^DD",350.9,350.9,60.07,21,0)
^.001^1^1^3100913^^
"^DD",350.9,350.9,60.07,21,1,0)
Seventh Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.07,"DT")
3100809
"^DD",350.9,350.9,60.08,0)
DEFAULT SERVICE TYPE CODE 8^RP365.013'^IBE(365.013,^60;8^Q
"^DD",350.9,350.9,60.08,3)
Enter a default service type code.
"^DD",350.9,350.9,60.08,21,0)
^.001^1^1^3100913^^
"^DD",350.9,350.9,60.08,21,1,0)
Eighth Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.08,"DT")
3100809
"^DD",350.9,350.9,60.09,0)
DEFAULT SERVICE TYPE CODE 9^RP365.013'^IBE(365.013,^60;9^Q
"^DD",350.9,350.9,60.09,3)
Enter a default service type code.
"^DD",350.9,350.9,60.09,21,0)
^.001^1^1^3100913^^^
"^DD",350.9,350.9,60.09,21,1,0)
Ninth Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.09,"DT")
3100809
"^DD",350.9,350.9,60.1,0)
DEFAULT SERVICE TYPE CODE 10^RP365.013'^IBE(365.013,^60;10^Q
"^DD",350.9,350.9,60.1,3)
Enter a default service type code.
"^DD",350.9,350.9,60.1,21,0)
^.001^1^1^3100913^^^
"^DD",350.9,350.9,60.1,21,1,0)
Tenth Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.1,"DT")
3100809
"^DD",350.9,350.9,60.11,0)
DEFAULT SERVICE TYPE CODE 11^RP365.013'^IBE(365.013,^60;11^Q
"^DD",350.9,350.9,60.11,3)
Enter a default service type code.
"^DD",350.9,350.9,60.11,21,0)
^.001^1^1^3100913^^
"^DD",350.9,350.9,60.11,21,1,0)
Eleventh Default Service Type Code sent with eIV Eligibility Inquiry.
"^DD",350.9,350.9,60.11,"DT")
3100809
"^DD",350.9,350.9,61.01,0)
SITE SELECTED SERVICE CODE 1^P365.013'^IBE(365.013,^61;1^Q
"^DD",350.9,350.9,61.01,3)
Enter a site selected service type code.
"^DD",350.9,350.9,61.01,21,0)
^.001^2^2^3100913^^^^
"^DD",350.9,350.9,61.01,21,1,0)
First Site Selected Service Type Code to send with eIV Eligibility 
"^DD",350.9,350.9,61.01,21,2,0)
Inquiry.
"^DD",350.9,350.9,61.01,"DT")
3100809
"^DD",350.9,350.9,61.02,0)
SITE SELECTED SERVICE CODE 2^P365.013'^IBE(365.013,^61;2^Q
"^DD",350.9,350.9,61.02,3)
Enter a site selected service type code.
"^DD",350.9,350.9,61.02,21,0)
^.001^2^2^3100913^^
"^DD",350.9,350.9,61.02,21,1,0)
Second Site Selected Service Type Code to send with eIV Eligibility 
"^DD",350.9,350.9,61.02,21,2,0)
Inquiry.
"^DD",350.9,350.9,61.02,"DT")
3100809
"^DD",350.9,350.9,61.03,0)
SITE SELECTED SERIVCE CODE 3^P365.013'^IBE(365.013,^61;3^Q
"^DD",350.9,350.9,61.03,3)
Enter a site selected service type code.
"^DD",350.9,350.9,61.03,21,0)
^.001^2^2^3100913^^
"^DD",350.9,350.9,61.03,21,1,0)
Third Site Selected Service Type Code to send with eIV Eligibility 
"^DD",350.9,350.9,61.03,21,2,0)
Inquiry.
"^DD",350.9,350.9,61.03,"DT")
3100809
"^DD",350.9,350.9,61.04,0)
SITE SELECTED SERVICE CODE 4^P365.013'^IBE(365.013,^61;4^Q
"^DD",350.9,350.9,61.04,3)
Enter a site selected service type code.
"^DD",350.9,350.9,61.04,21,0)
^.001^2^2^3100913^^
"^DD",350.9,350.9,61.04,21,1,0)
Fourth Site Selected Service Type Code to send with eIV Eligibility 
"^DD",350.9,350.9,61.04,21,2,0)
Inquiry.
"^DD",350.9,350.9,61.04,"DT")
3100809
"^DD",350.9,350.9,61.05,0)
SITE SELECTED SERVICE CODE 5^P365.013'^IBE(365.013,^61;5^Q
"^DD",350.9,350.9,61.05,3)
Enter a site selected service type code.
"^DD",350.9,350.9,61.05,21,0)
^.001^2^2^3100913^^
"^DD",350.9,350.9,61.05,21,1,0)
Fifth Site Selected Service Type Code to send with eIV Eligibility 
"^DD",350.9,350.9,61.05,21,2,0)
Inquiry.
"^DD",350.9,350.9,61.05,"DT")
3100809
"^DD",350.9,350.9,61.06,0)
SITE SELECTED SERVICE CODE 6^P365.013'^IBE(365.013,^61;6^Q
"^DD",350.9,350.9,61.06,3)
Enter a site selected service type code.
"^DD",350.9,350.9,61.06,21,0)
^.001^2^2^3100913^^
"^DD",350.9,350.9,61.06,21,1,0)
Sixth Site Selected Service Type Code to send with eIV Eligibility 
"^DD",350.9,350.9,61.06,21,2,0)
Inquiry.
"^DD",350.9,350.9,61.06,"DT")
3100809
"^DD",350.9,350.9,61.07,0)
SITE SELECTED SERVICE CODE 7^P365.013'^IBE(365.013,^61;7^Q
"^DD",350.9,350.9,61.07,3)
Enter a site selected service type code.
"^DD",350.9,350.9,61.07,21,0)
^.001^2^2^3100913^^
"^DD",350.9,350.9,61.07,21,1,0)
Seventh Site Selected Service Type Code to send with eIV Eligibility 
"^DD",350.9,350.9,61.07,21,2,0)
Inquiry.
"^DD",350.9,350.9,61.07,"DT")
3100809
"^DD",350.9,350.9,61.08,0)
SITE SELECTED SERVICE CODE 8^P365.013'^IBE(365.013,^61;8^Q
"^DD",350.9,350.9,61.08,3)
Enter a site selected service type code.
"^DD",350.9,350.9,61.08,21,0)
^.001^2^2^3100913^^
"^DD",350.9,350.9,61.08,21,1,0)
Eighth Site Selected Service Type Code to send with eIV Eligibility 
"^DD",350.9,350.9,61.08,21,2,0)
Inquiry.
"^DD",350.9,350.9,61.08,"DT")
3100809
"^DD",350.9,350.9,61.09,0)
SITE SELECTED SERVICE CODE 9^P365.013'^IBE(365.013,^61;9^Q
"^DD",350.9,350.9,61.09,3)
Enter a site selected service type code.
"^DD",350.9,350.9,61.09,21,0)
^.001^2^2^3100913^^^^
"^DD",350.9,350.9,61.09,21,1,0)
Ninth Site Selected Service Type Code to send with eIV Eligibility 
"^DD",350.9,350.9,61.09,21,2,0)
Inquiry.
"^DD",350.9,350.9,61.09,"DT")
3100809
"^DD",353.1,353.1,0)
FIELD^^.03^3
"^DD",353.1,353.1,0,"DDA")
N
"^DD",353.1,353.1,0,"DT")
2920429
"^DD",353.1,353.1,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",353.1,353.1,0,"IX","B",353.1,.01)

"^DD",353.1,353.1,0,"IX","C",353.1,.02)

"^DD",353.1,353.1,0,"NM","PLACE OF SERVICE")

"^DD",353.1,353.1,0,"PT",2.3229,.02)

"^DD",353.1,353.1,0,"PT",162.03,30)

"^DD",353.1,353.1,0,"PT",365.29,.02)

"^DD",353.1,353.1,0,"PT",399,168)

"^DD",353.1,353.1,0,"PT",399.0304,8)

"^DD",353.1,353.1,.01,0)
CODE^RF^^0;1^K:$L(X)>7!($L(X)<1)!'(X'?1P.E) X
"^DD",353.1,353.1,.01,1,0)
^.1
"^DD",353.1,353.1,.01,1,1,0)
353.1^B
"^DD",353.1,353.1,.01,1,1,1)
S ^IBE(353.1,"B",$E(X,1,30),DA)=""
"^DD",353.1,353.1,.01,1,1,2)
K ^IBE(353.1,"B",$E(X,1,30),DA)
"^DD",353.1,353.1,.01,3)
Answer must be 1-7 characters in length.
"^DD",353.1,353.1,.01,21,0)
^^2^2^3060928^
"^DD",353.1,353.1,.01,21,1,0)
This is the code identifing the Place of Service associated
"^DD",353.1,353.1,.01,21,2,0)
with a visit.  Printed on the CMS-1500.
"^DD",353.1,353.1,.01,"DT")
3060928
"^DD",353.1,353.1,.02,0)
NAME^RF^^0;2^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>50!($L(X)<3) X
"^DD",353.1,353.1,.02,1,0)
^.1
"^DD",353.1,353.1,.02,1,1,0)
353.1^C
"^DD",353.1,353.1,.02,1,1,1)
S ^IBE(353.1,"C",$E(X,1,30),DA)=""
"^DD",353.1,353.1,.02,1,1,2)
K ^IBE(353.1,"C",$E(X,1,30),DA)
"^DD",353.1,353.1,.02,1,1,3)
DO NOT DELETE
"^DD",353.1,353.1,.02,1,1,"DT")
2920630
"^DD",353.1,353.1,.02,3)
Answer must be 3-50 characters in length.
"^DD",353.1,353.1,.02,21,0)
^^1^1^2920429^^^^
"^DD",353.1,353.1,.02,21,1,0)
This is the full name/description of this code.
"^DD",353.1,353.1,.02,"DT")
2920630
"^DD",353.1,353.1,.03,0)
ABBREVIATION^RF^^0;3^K:$L(X)>20!($L(X)<2) X
"^DD",353.1,353.1,.03,3)
Answer must be 2-20 characters in length.
"^DD",353.1,353.1,.03,21,0)
^^2^2^2920427^
"^DD",353.1,353.1,.03,21,1,0)
This is the abbreviation of the name of this entry.  This will most often
"^DD",353.1,353.1,.03,21,2,0)
be used for printing on reports.
"^DD",353.1,353.1,.03,"DT")
2920427
"^DD",355.33,355.33,.16,0)
REAL TIME VERIFICATION^S^0:NO;1:YES;^0;16^Q
"^DD",355.33,355.33,.16,.1)
PROCESSED BY REAL TIME VERIFICATION
"^DD",355.33,355.33,.16,3)
Is the buffer entry verified by real time verification?
"^DD",355.33,355.33,.16,5,1,0)
355.33^20.01^2
"^DD",355.33,355.33,.16,5,2,0)
355.33^40.02^1
"^DD",355.33,355.33,.16,5,3,0)
355.33^40.03^1
"^DD",355.33,355.33,.16,5,4,0)
355.33^60.01^2
"^DD",355.33,355.33,.16,5,5,0)
355.33^60.04^1
"^DD",355.33,355.33,.16,5,6,0)
355.33^60.08^1
"^DD",355.33,355.33,.16,10)
SET BY THE REAL TIME VERIFICATION PROCESS
"^DD",355.33,355.33,.16,21,0)
^.001^2^2^3100902^^
"^DD",355.33,355.33,.16,21,1,0)
Flag that indicates if Real Time Verification processed and verified this
"^DD",355.33,355.33,.16,21,2,0)
insurance buffer entry.
"^DD",355.33,355.33,.16,23,0)
^^2^2^3100903^^
"^DD",355.33,355.33,.16,23,1,0)
Real Time Verification flag is set to 1 for YES if the insurance buffer
"^DD",355.33,355.33,.16,23,2,0)
entry was successfully verified by Real Time Verification.
"^DD",355.33,355.33,.16,"DT")
3100913
"^DD",355.33,355.33,20.01,0)
INSURANCE COMPANY NAME^FX^^20;1^S X=$$UP^XLFSTR(X),X=$$TRIM^XLFSTR(X) K:$L(X)>30!($L(X)<3) X
"^DD",355.33,355.33,20.01,1,0)
^.1
"^DD",355.33,355.33,20.01,1,1,0)
355.33^D
"^DD",355.33,355.33,20.01,1,1,1)
S ^IBA(355.33,"D",$E(X,1,30),DA)=""
"^DD",355.33,355.33,20.01,1,1,2)
K ^IBA(355.33,"D",$E(X,1,30),DA)
"^DD",355.33,355.33,20.01,1,1,"%D",0)
^^1^1^2980309^
"^DD",355.33,355.33,20.01,1,1,"%D",1,0)
Insurance Company Cross-reference.
"^DD",355.33,355.33,20.01,1,1,"DT")
2980309
"^DD",355.33,355.33,20.01,1,2,0)
^^TRIGGER^355.33^.16
"^DD",355.33,355.33,20.01,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X=$$TRIG^IBCNERTQ(DA) S DIH=$G(^IBA(355.33,DIV(0),0)),DIV=X S $P(^(0),U,16)=DIV,DIH=355.33,DIG=.16 D ^DICR
"^DD",355.33,355.33,20.01,1,2,2)
Q
"^DD",355.33,355.33,20.01,1,2,"%D",0)
^.101^2^2^3101115^^^^
"^DD",355.33,355.33,20.01,1,2,"%D",1,0)
Sets the  REAL TIME VERIFICATION (#.16) field to 1 when this record 
"^DD",355.33,355.33,20.01,1,2,"%D",2,0)
has been queued for real time verification.
"^DD",355.33,355.33,20.01,1,2,"CREATE VALUE")
S X=$$TRIG^IBCNERTQ(DA)
"^DD",355.33,355.33,20.01,1,2,"DELETE VALUE")
NO EFFECT
"^DD",355.33,355.33,20.01,1,2,"DT")
3100902
"^DD",355.33,355.33,20.01,1,2,"FIELD")
REAL TIME
"^DD",355.33,355.33,20.01,3)
Answer must be 3-30 characters in length.
"^DD",355.33,355.33,20.01,21,0)
^.001^2^2^3030617^^^
"^DD",355.33,355.33,20.01,21,1,0)
Enter the name of the Insurance Carrier that provides coverage for this
"^DD",355.33,355.33,20.01,21,2,0)
patient.
"^DD",355.33,355.33,20.01,"DT")
3100902
"^DD",355.33,355.33,40.02,0)
GROUP NAME^F^^40;2^K:$L(X)>20!($L(X)<2) X
"^DD",355.33,355.33,40.02,1,0)
^.1
"^DD",355.33,355.33,40.02,1,1,0)
^^TRIGGER^355.33^.16
"^DD",355.33,355.33,40.02,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X=$$TRIG^IBCNERTQ(DA) S DIH=$G(^IBA(355.33,DIV(0),0)),DIV=X S $P(^(0),U,16)=DIV,DIH=355.33,DIG=.16 D ^DICR
"^DD",355.33,355.33,40.02,1,1,2)
Q
"^DD",355.33,355.33,40.02,1,1,"%D",0)
^^2^2^3100913^
"^DD",355.33,355.33,40.02,1,1,"%D",1,0)
Sets the  REAL TIME VERIFICATION (#.16) field to 1 when this record 
"^DD",355.33,355.33,40.02,1,1,"%D",2,0)
has been queued for real time verification.
"^DD",355.33,355.33,40.02,1,1,"CREATE VALUE")
S X=$$TRIG^IBCNERTQ(DA)
"^DD",355.33,355.33,40.02,1,1,"DELETE VALUE")
NO EFFECT
"^DD",355.33,355.33,40.02,1,1,"FIELD")
REAL TIME
"^DD",355.33,355.33,40.02,3)
Enter the name of the group this policy is associated with.  Answer must be 2-20 characters in length.
"^DD",355.33,355.33,40.02,21,0)
^^1^1^2981016^^
"^DD",355.33,355.33,40.02,21,1,0)
This is the name that the insurance company uses to identify this plan.
"^DD",355.33,355.33,40.02,"DT")
3100902
"^DD",355.33,355.33,40.03,0)
GROUP NUMBER^F^^40;3^K:$L(X)>17!($L(X)<2) X
"^DD",355.33,355.33,40.03,1,0)
^.1
"^DD",355.33,355.33,40.03,1,1,0)
^^TRIGGER^355.33^.16
"^DD",355.33,355.33,40.03,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X=$$TRIG^IBCNERTQ(DA) S DIH=$G(^IBA(355.33,DIV(0),0)),DIV=X S $P(^(0),U,16)=DIV,DIH=355.33,DIG=.16 D ^DICR
"^DD",355.33,355.33,40.03,1,1,2)
Q
"^DD",355.33,355.33,40.03,1,1,"%D",0)
^^2^2^3100913^
"^DD",355.33,355.33,40.03,1,1,"%D",1,0)
Sets the  REAL TIME VERIFICATION (#.16) field to 1 when this record 
"^DD",355.33,355.33,40.03,1,1,"%D",2,0)
has been queued for real time verification.
"^DD",355.33,355.33,40.03,1,1,"CREATE VALUE")
S X=$$TRIG^IBCNERTQ(DA)
"^DD",355.33,355.33,40.03,1,1,"DELETE VALUE")
NO EFFECT
"^DD",355.33,355.33,40.03,1,1,"FIELD")
REAL TIME
"^DD",355.33,355.33,40.03,3)
Enter the number that identifies this group/plan.  Answer must be 2-17 characters in length.
"^DD",355.33,355.33,40.03,21,0)
^^2^2^2980209^
"^DD",355.33,355.33,40.03,21,1,0)
This is the number or code which the insurance company uses to identify
"^DD",355.33,355.33,40.03,21,2,0)
this plan.
"^DD",355.33,355.33,40.03,"DT")
3100902
"^DD",355.33,355.33,60.01,0)
PATIENT NAME^P2'^DPT(^60;1^Q
"^DD",355.33,355.33,60.01,1,0)
^.1
"^DD",355.33,355.33,60.01,1,1,0)
355.33^C
"^DD",355.33,355.33,60.01,1,1,1)
S ^IBA(355.33,"C",$E(X,1,30),DA)=""
"^DD",355.33,355.33,60.01,1,1,2)
K ^IBA(355.33,"C",$E(X,1,30),DA)
"^DD",355.33,355.33,60.01,1,1,"%D",0)
^^1^1^2980309^
"^DD",355.33,355.33,60.01,1,1,"%D",1,0)
Patient Cross-reference.
"^DD",355.33,355.33,60.01,1,1,"DT")
2980309
"^DD",355.33,355.33,60.01,1,2,0)
^^TRIGGER^355.33^.16
"^DD",355.33,355.33,60.01,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X=$$TRIG^IBCNERTQ(DA) S DIH=$G(^IBA(355.33,DIV(0),0)),DIV=X S $P(^(0),U,16)=DIV,DIH=355.33,DIG=.16 D ^DICR
"^DD",355.33,355.33,60.01,1,2,2)
Q
"^DD",355.33,355.33,60.01,1,2,"%D",0)
^.101^2^2^3100913^^
"^DD",355.33,355.33,60.01,1,2,"%D",1,0)
Sets the  REAL TIME VERIFICATION (#.16) field to 1 when this record 
"^DD",355.33,355.33,60.01,1,2,"%D",2,0)
has been queued for real time verification.
"^DD",355.33,355.33,60.01,1,2,"CREATE VALUE")
S X=$$TRIG^IBCNERTQ(DA)
"^DD",355.33,355.33,60.01,1,2,"DELETE VALUE")
NO EFFECT
"^DD",355.33,355.33,60.01,1,2,"DT")
3100902
"^DD",355.33,355.33,60.01,1,2,"FIELD")
REAL TIME
"^DD",355.33,355.33,60.01,3)
Enter the patient covered by this insurance.
"^DD",355.33,355.33,60.01,21,0)
^^1^1^2980209^
"^DD",355.33,355.33,60.01,21,1,0)
This is the patient covered by this insurance policy.
"^DD",355.33,355.33,60.01,"DT")
3100902
"^DD",355.33,355.33,60.04,0)
SUBSCRIBER ID^FX^^60;4^K:$L(X)>20!($L(X)<3) X
"^DD",355.33,355.33,60.04,.1)
SUBSCRIBER PRIMARY ID
"^DD",355.33,355.33,60.04,1,0)
^.1
"^DD",355.33,355.33,60.04,1,1,0)
^^TRIGGER^355.33^.16
"^DD",355.33,355.33,60.04,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X=$$TRIG^IBCNERTQ(DA) S DIH=$G(^IBA(355.33,DIV(0),0)),DIV=X S $P(^(0),U,16)=DIV,DIH=355.33,DIG=.16 D ^DICR
"^DD",355.33,355.33,60.04,1,1,2)
Q
"^DD",355.33,355.33,60.04,1,1,"%D",0)
^^2^2^3100913^
"^DD",355.33,355.33,60.04,1,1,"%D",1,0)
Sets the  REAL TIME VERIFICATION (#.16) field to 1 when this record has 
"^DD",355.33,355.33,60.04,1,1,"%D",2,0)
been queued for real time verification.
"^DD",355.33,355.33,60.04,1,1,"CREATE VALUE")
S X=$$TRIG^IBCNERTQ(DA)
"^DD",355.33,355.33,60.04,1,1,"DELETE VALUE")
NO EFFECT
"^DD",355.33,355.33,60.04,1,1,"FIELD")
REAL TIME
"^DD",355.33,355.33,60.04,3)
Answer must be 3-20 characters in length
"^DD",355.33,355.33,60.04,21,0)
^^2^2^3070716^
"^DD",355.33,355.33,60.04,21,1,0)
Enter the Subscriber's Primary ID number.  This number is assigned
"^DD",355.33,355.33,60.04,21,2,0)
by the payer and can be found on the subscriber's insurance card.
"^DD",355.33,355.33,60.04,"DT")
3100902
"^DD",355.33,355.33,60.08,0)
INSURED'S DOB^DX^^60;8^S %DT="EXP" D ^%DT S X=Y K:Y<1 X
"^DD",355.33,355.33,60.08,1,0)
^.1
"^DD",355.33,355.33,60.08,1,1,0)
^^TRIGGER^355.33^.16
"^DD",355.33,355.33,60.08,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X=$$TRIG^IBCNERTQ(DA) S DIH=$G(^IBA(355.33,DIV(0),0)),DIV=X S $P(^(0),U,16)=DIV,DIH=355.33,DIG=.16 D ^DICR
"^DD",355.33,355.33,60.08,1,1,2)
Q
"^DD",355.33,355.33,60.08,1,1,"%D",0)
^^2^2^3100913^
"^DD",355.33,355.33,60.08,1,1,"%D",1,0)
Sets the  REAL TIME VERIFICATION (#.16) field to 1 when this record has 
"^DD",355.33,355.33,60.08,1,1,"%D",2,0)
been queued for real time verification.
"^DD",355.33,355.33,60.08,1,1,"CREATE VALUE")
S X=$$TRIG^IBCNERTQ(DA)
"^DD",355.33,355.33,60.08,1,1,"DELETE VALUE")
NO EFFECT
"^DD",355.33,355.33,60.08,1,1,"FIELD")
REAL TIME
"^DD",355.33,355.33,60.08,3)
Enter the Date of Birth of the policy holder.  This is only needed if the patient is not the insured.
"^DD",355.33,355.33,60.08,21,0)
^^3^3^3100913^
"^DD",355.33,355.33,60.08,21,1,0)
This is the policy holder's (insured's) Date of Birth.  This is not
"^DD",355.33,355.33,60.08,21,2,0)
needed if the patient is not the policy holder since the patient's DOB is
"^DD",355.33,355.33,60.08,21,3,0)
stored elsewhere.
"^DD",355.33,355.33,60.08,"DT")
3100913
"^DD",355.33,355.33,62.07,0)
SUBSCRIBER ADDRESS COUNTRY^F^^62;7^K:$L(X)>3!($L(X)<2) X
"^DD",355.33,355.33,62.07,3)
Answer must be 2-3 characters in length.
"^DD",355.33,355.33,62.07,21,0)
^^1^1^3100810^
"^DD",355.33,355.33,62.07,21,1,0)
Subscriber address, country code.
"^DD",355.33,355.33,62.07,23,0)
^^1^1^3100916^
"^DD",355.33,355.33,62.07,23,1,0)
Source: 271 HL7 message, PID.11.6.
"^DD",355.33,355.33,62.07,"DT")
3100916
"^DD",355.33,355.33,62.08,0)
SUBSCRIBER ADDRESS SUBDIVISION^F^^62;8^K:$L(X)>3!($L(X)<1) X
"^DD",355.33,355.33,62.08,3)
Answer must be 1-3 characters in length.
"^DD",355.33,355.33,62.08,21,0)
^^1^1^3100810^
"^DD",355.33,355.33,62.08,21,1,0)
Subscriber address, country subdivision code.
"^DD",355.33,355.33,62.08,23,0)
^^1^1^3100916^
"^DD",355.33,355.33,62.08,23,1,0)
Source: 271 HL7 message, PID.11.8.
"^DD",355.33,355.33,62.08,"DT")
3100916
"^DD",355.33,355.33,80.01,0)
INQ SERVICE TYPE CODE 1^P365.013'^IBE(365.013,^80;1^Q
"^DD",355.33,355.33,80.01,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.01,21,0)
^.001^1^1^3100915^^^^
"^DD",355.33,355.33,80.01,21,1,0)
First Service Type Code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.01,"DT")
3100812
"^DD",355.33,355.33,80.02,0)
INQ SERVICE TYPE CODE 2^P365.013'^IBE(365.013,^80;2^Q
"^DD",355.33,355.33,80.02,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.02,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.02,21,1,0)
Second Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.02,"DT")
3100812
"^DD",355.33,355.33,80.03,0)
INQ SERVICE TYPE CODE 3^P365.013'^IBE(365.013,^80;3^Q
"^DD",355.33,355.33,80.03,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.03,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.03,21,1,0)
Third Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.03,"DT")
3100812
"^DD",355.33,355.33,80.04,0)
INQ SERVICE TYPE CODE 4^P365.013'^IBE(365.013,^80;4^Q
"^DD",355.33,355.33,80.04,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.04,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.04,21,1,0)
Fourth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.04,"DT")
3100812
"^DD",355.33,355.33,80.05,0)
INQ SERVICE TYPE CODE 5^P365.013'^IBE(365.013,^80;5^Q
"^DD",355.33,355.33,80.05,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.05,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.05,21,1,0)
Fifth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.05,"DT")
3100812
"^DD",355.33,355.33,80.06,0)
INQ SERVICE TYPE CODE 6^P365.013'^IBE(365.013,^80;6^Q
"^DD",355.33,355.33,80.06,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.06,21,0)
^.001^1^1^3100915^^^^
"^DD",355.33,355.33,80.06,21,1,0)
Sixth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.06,"DT")
3100812
"^DD",355.33,355.33,80.07,0)
INQ SERVICE TYPE CODE 7^P365.013'^IBE(365.013,^80;7^Q
"^DD",355.33,355.33,80.07,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.07,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.07,21,1,0)
Seventh Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.07,"DT")
3100812
"^DD",355.33,355.33,80.08,0)
INQ SERVICE TYPE CODE 8^P365.013'^IBE(365.013,^80;8^Q
"^DD",355.33,355.33,80.08,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.08,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.08,21,1,0)
Eighth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.08,"DT")
3100812
"^DD",355.33,355.33,80.09,0)
INQ SERVICE TYPE CODE 9^P365.013'^IBE(365.013,^80;9^Q
"^DD",355.33,355.33,80.09,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.09,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.09,21,1,0)
Ninth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.09,"DT")
3100812
"^DD",355.33,355.33,80.1,0)
INQ SERVICE TYPE CODE 10^P365.013'^IBE(365.013,^80;10^Q
"^DD",355.33,355.33,80.1,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.1,21,0)
^.001^1^1^3100915^^^^
"^DD",355.33,355.33,80.1,21,1,0)
Tenth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.1,"DT")
3100812
"^DD",355.33,355.33,80.11,0)
INQ SERVICE TYPE CODE 11^P365.013'^IBE(365.013,^80;11^Q
"^DD",355.33,355.33,80.11,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.11,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.11,21,1,0)
Eleventh Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.11,"DT")
3100812
"^DD",355.33,355.33,80.12,0)
INQ SERVICE TYPE CODE 12^P365.013'^IBE(365.013,^80;12^Q
"^DD",355.33,355.33,80.12,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.12,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.12,21,1,0)
Twelfth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.12,"DT")
3100812
"^DD",355.33,355.33,80.13,0)
INQ SERVICE TYPE CODE 13^P365.013'^IBE(365.013,^80;13^Q
"^DD",355.33,355.33,80.13,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.13,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.13,21,1,0)
Thirteenth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.13,"DT")
3100812
"^DD",355.33,355.33,80.14,0)
INQ SERVICE TYPE CODE 14^P365.013'^IBE(365.013,^80;14^Q
"^DD",355.33,355.33,80.14,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.14,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.14,21,1,0)
Fourteenth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.14,"DT")
3100812
"^DD",355.33,355.33,80.15,0)
INQ SERVICE TYPE CODE 15^P365.013'^IBE(365.013,^80;15^Q
"^DD",355.33,355.33,80.15,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.15,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.15,21,1,0)
Fifteenth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.15,"DT")
3100812
"^DD",355.33,355.33,80.16,0)
INQ SERVICE TYPE CODE 16^P365.013'^IBE(365.013,^80;16^Q
"^DD",355.33,355.33,80.16,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.16,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.16,21,1,0)
Sixteenth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.16,"DT")
3100812
"^DD",355.33,355.33,80.17,0)
INQ SERVICE TYPE CODE 17^P365.013'^IBE(365.013,^80;17^Q
"^DD",355.33,355.33,80.17,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.17,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.17,21,1,0)
Seventeenth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.17,"DT")
3100812
"^DD",355.33,355.33,80.18,0)
INQ SERVICE TYPE CODE 18^P365.013'^IBE(365.013,^80;18^Q
"^DD",355.33,355.33,80.18,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.18,21,0)
^.001^1^1^3100915^^^
"^DD",355.33,355.33,80.18,21,1,0)
Eighteenth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.18,"DT")
3100812
"^DD",355.33,355.33,80.19,0)
INQ SERVICE TYPE CODE 19^P365.013'^IBE(365.013,^80;19^Q
"^DD",355.33,355.33,80.19,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.19,21,0)
^.001^1^1^3100915^^^^
"^DD",355.33,355.33,80.19,21,1,0)
Nineteenth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.19,"DT")
3100812
"^DD",355.33,355.33,80.2,0)
INQ SERVICE TYPE CODE 20^P365.013'^IBE(365.013,^80;20^Q
"^DD",355.33,355.33,80.2,3)
Enter service type code to be sent with eIV insurance inquiry.
"^DD",355.33,355.33,80.2,21,0)
^.001^1^1^3100915^^^^
"^DD",355.33,355.33,80.2,21,1,0)
Twentieth Service Type Code to be sent with eIV Insurance Inquiry.
"^DD",355.33,355.33,80.2,"DT")
3100822
"^DD",365,365,5.06,0)
SUBSCRIBER ADDRESS COUNTRY^F^^5;6^K:$L(X)>3!($L(X)<2) X
"^DD",365,365,5.06,3)
Answer must be 2-3 characters in length.
"^DD",365,365,5.06,21,0)
^.001^1^1^3100810^^
"^DD",365,365,5.06,21,1,0)
Subscriber address, country code.
"^DD",365,365,5.06,23,0)
^^1^1^3100810^
"^DD",365,365,5.06,23,1,0)
Source: 271 HL7 message, PID.11.6.
"^DD",365,365,5.06,"DT")
3100810
"^DD",365,365,5.07,0)
SUBSCRIBER ADDRESS SUBDIVISION^F^^5;7^K:$L(X)>3!($L(X)<1) X
"^DD",365,365,5.07,3)
Answer must be 1-3 characters in length.
"^DD",365,365,5.07,21,0)
^.001^1^1^3100810^^
"^DD",365,365,5.07,21,1,0)
Subscriber address, country subdivision code.
"^DD",365,365,5.07,23,0)
^^1^1^3100810^
"^DD",365,365,5.07,23,1,0)
Source: 271 HL7 message, PID.11.8.
"^DD",365,365,5.07,"DT")
3100810
"^DD",365,365,6,0)
REJECT REASONS^365.06A^^6;0
"^DD",365,365,6,21,0)
^^1^1^3100912^^
"^DD",365,365,6,21,1,0)
This multiple contains reject reason codes.
"^DD",365,365,6,23,0)
^^1^1^3100912^^
"^DD",365,365,6,23,1,0)
Source: 271 HL7 message, ERR segment(s).
"^DD",365,365,7,0)
SUBSCRIBER DATES^365.07A^^7;0
"^DD",365,365,7,21,0)
^.001^1^1^3100912^^
"^DD",365,365,7,21,1,0)
Subscriber dates multiple. Contains subscriber level dates, as opposed to eligibility/benefit level dates.
"^DD",365,365,7,23,0)
^.001^1^1^3100912^^
"^DD",365,365,7,23,1,0)
Source: 271 HL7 message, ZTP segment.
"^DD",365,365,8.01,0)
PT. RELATIONSHIP - HIPAA^S^01:SPOUSE;18:SELF;19:CHILD;20:EMPLOYEE;29:SIGNIFICANT OTHER;32:MOTHER;33:FATHER;39:ORGAN DONOR;41:INJURED PLAINTIFF;53:LIFE PARTNER;G8:OTHER RELATIONSHIP;^8;1^Q
"^DD",365,365,8.01,3)
Enter the HIPAA code which indicates the patient's relationship to the injured party.
"^DD",365,365,8.01,21,0)
^^4^4^3101130^
"^DD",365,365,8.01,21,1,0)
This is the HIPAA relationship code that describes the relationship this 
"^DD",365,365,8.01,21,2,0)
patient has to the holder of this insurance policy. If the policy belongs 
"^DD",365,365,8.01,21,3,0)
to the patient enter '18' for SELF. If the policy belongs to the spouse 
"^DD",365,365,8.01,21,4,0)
enter '01' for SPOUSE, etc.
"^DD",365,365,8.01,"DT")
3101130
"^DD",365,365.02,.04,0)
*SERVICE TYPE^P365.013'^IBE(365.013,^0;4^Q
"^DD",365,365.02,.04,.1)
Service Type
"^DD",365,365.02,.04,3)
Enter the service type code from the list.
"^DD",365,365.02,.04,21,0)
^.001^1^1^3101130^^^^
"^DD",365,365.02,.04,21,1,0)
This field is a code identifying the classification of service.
"^DD",365,365.02,.04,23,0)
^^3^3^3101130^
"^DD",365,365.02,.04,23,1,0)
It corresponds to X.12 271 EB03 data element.
"^DD",365,365.02,.04,23,2,0)
This field is deprecated via IB*2.0*438. Replaced with 365.02/14 
"^DD",365,365.02,.04,23,3,0)
which is a multiple with #365.292/.01.
"^DD",365,365.02,.04,"DT")
3101122
"^DD",365,365.02,4.09,0)
SUBDIVISION CODE^F^^4;9^K:$L(X)>3!($L(X)<1) X
"^DD",365,365.02,4.09,3)
Answer must be 1-3 characters in length.
"^DD",365,365.02,4.09,21,0)
^.001^1^1^3100810^^
"^DD",365,365.02,4.09,21,1,0)
Entity address, country subdivision code.
"^DD",365,365.02,4.09,23,0)
^^1^1^3100810^
"^DD",365,365.02,4.09,23,1,0)
Source: 271 HL7 message, ZTY.7.8.
"^DD",365,365.02,4.09,"DT")
3100810
"^DD",365,365.02,14,0)
SERVICE TYPES^365.292PA^^14;0
"^DD",365,365.02,14,21,0)
^.001^1^1^3101130^^^
"^DD",365,365.02,14,21,1,0)
Service type codes returned from eligibility inquiry.
"^DD",365,365.06,0)
REJECT REASONS SUB-FIELD^^.06^6
"^DD",365,365.06,0,"DT")
3100912
"^DD",365,365.06,0,"IX","B",365.06,.01)

"^DD",365,365.06,0,"NM","REJECT REASONS")

"^DD",365,365.06,0,"UP")
365
"^DD",365,365.06,.01,0)
SEQUENCE^NJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1.N) X
"^DD",365,365.06,.01,1,0)
^.1
"^DD",365,365.06,.01,1,1,0)
365.06^B
"^DD",365,365.06,.01,1,1,1)
S ^IBCN(365,DA(1),6,"B",$E(X,1,30),DA)=""
"^DD",365,365.06,.01,1,1,2)
K ^IBCN(365,DA(1),6,"B",$E(X,1,30),DA)
"^DD",365,365.06,.01,3)
Type a number between 1 and 99999, 0 decimal digits.
"^DD",365,365.06,.01,21,0)
^^1^1^3100912^^
"^DD",365,365.06,.01,21,1,0)
Sequential entry number.
"^DD",365,365.06,.01,23,0)
^^1^1^3100912^^
"^DD",365,365.06,.01,23,1,0)
Sequential number of ERR segment.
"^DD",365,365.06,.01,"DT")
3100912
"^DD",365,365.06,.02,0)
ERROR LOCATION^F^^0;2^K:$L(X)>50!($L(X)<1) X
"^DD",365,365.06,.02,3)
Answer must be 1-50 characters in length.
"^DD",365,365.06,.02,21,0)
^^1^1^3100912^^^
"^DD",365,365.06,.02,21,1,0)
Error location within HL7 message.
"^DD",365,365.06,.02,23,0)
^^1^1^3100912^^
"^DD",365,365.06,.02,23,1,0)
Source: 271 HL7 message, ERR.2
"^DD",365,365.06,.02,"DT")
3100912
"^DD",365,365.06,.03,0)
REJECT REASON^P365.017'^IBE(365.017,^0;3^Q
"^DD",365,365.06,.03,3)
Enter code describing the reason for inquiry rejection.
"^DD",365,365.06,.03,21,0)
^^1^1^3100912^^
"^DD",365,365.06,.03,21,1,0)
Code describing the reason for inquiry rejection.
"^DD",365,365.06,.03,23,0)
^^1^1^3100912^^
"^DD",365,365.06,.03,23,1,0)
Source: 271 HL7 message, ERR.5.1
"^DD",365,365.06,.03,"DT")
3100912
"^DD",365,365.06,.04,0)
ACTION CODE^P365.018'^IBE(365.018,^0;4^Q
"^DD",365,365.06,.04,3)
Enter the code for action needed to correct the error.
"^DD",365,365.06,.04,21,0)
^^1^1^3100912^^
"^DD",365,365.06,.04,21,1,0)
Code describing an action needed to correct the error.
"^DD",365,365.06,.04,23,0)
^^1^1^3100912^^
"^DD",365,365.06,.04,23,1,0)
Source: 271 HL7 message, ERR.8
"^DD",365,365.06,.04,"DT")
3100912
"^DD",365,365.06,.05,0)
LOOP ID^P365.027'^IBE(365.027,^0;5^Q
"^DD",365,365.06,.05,3)
Enter the code for HIPAA loop in which the error occured.
"^DD",365,365.06,.05,21,0)
^^1^1^3100912^^
"^DD",365,365.06,.05,21,1,0)
Code describing HIPAA loop in which the error occured.
"^DD",365,365.06,.05,23,0)
^^1^1^3100912^^
"^DD",365,365.06,.05,23,1,0)
Source: 271 HL7 message, ERR.7
"^DD",365,365.06,.05,"DT")
3100912
"^DD",365,365.06,.06,0)
SOURCE^F^^0;6^K:$L(X)>1!($L(X)<1) X
"^DD",365,365.06,.06,3)
Answer must be 1 character in length.
"^DD",365,365.06,.06,21,0)
^^1^1^3100912^^
"^DD",365,365.06,.06,21,1,0)
Code describing the source of the error message (FSC, Payer, etc.)
"^DD",365,365.06,.06,23,0)
^^1^1^3100912^^
"^DD",365,365.06,.06,23,1,0)
Source: 271 HL7 message, ERR.5.2
"^DD",365,365.06,.06,"DT")
3100912
"^DD",365,365.07,0)
SUBSCRIBER DATES SUB-FIELD^^.04^4
"^DD",365,365.07,0,"DT")
3100912
"^DD",365,365.07,0,"IX","B",365.07,.01)

"^DD",365,365.07,0,"NM","SUBSCRIBER DATES")

"^DD",365,365.07,0,"UP")
365
"^DD",365,365.07,.01,0)
SEQUENCE^NJ5,0^^0;1^K:+X'=X!(X>99999)!(X<1)!(X?.E1"."1N.N) X
"^DD",365,365.07,.01,1,0)
^.1
"^DD",365,365.07,.01,1,1,0)
365.07^B
"^DD",365,365.07,.01,1,1,1)
S ^IBCN(365,DA(1),7,"B",$E(X,1,30),DA)=""
"^DD",365,365.07,.01,1,1,2)
K ^IBCN(365,DA(1),7,"B",$E(X,1,30),DA)
"^DD",365,365.07,.01,3)
Type a number between 1 and 99999, 0 decimal digits.
"^DD",365,365.07,.01,21,0)
^.001^1^1^3100912^^^^
"^DD",365,365.07,.01,21,1,0)
Sequential number of ZTP segment.
"^DD",365,365.07,.01,23,0)
^.001^1^1^3100912^^^^
"^DD",365,365.07,.01,23,1,0)
Sequential number 1..N, assigned automatically.
"^DD",365,365.07,.01,"DT")
3100912
"^DD",365,365.07,.02,0)
DATE^F^^0;2^K:$L(X)>50!($L(X)<8) X
"^DD",365,365.07,.02,3)
Answer must be 8-50 characters in length.
"^DD",365,365.07,.02,21,0)
^.001^1^1^3100912^^^
"^DD",365,365.07,.02,21,1,0)
Date or range of dates.
"^DD",365,365.07,.02,23,0)
^^1^1^3100912^^
"^DD",365,365.07,.02,23,1,0)
Source: 271 HL7 message, ZTP.3.1.1 and ZTP.3.2.1.
"^DD",365,365.07,.02,"DT")
3100912
"^DD",365,365.07,.03,0)
DATE QUALIFIER^P365.026'^IBE(365.026,^0;3^Q
"^DD",365,365.07,.03,3)
Select date qualifier.
"^DD",365,365.07,.03,21,0)
^.001^1^1^3100912^^^
"^DD",365,365.07,.03,21,1,0)
Code describing the type of date.
"^DD",365,365.07,.03,23,0)
^^1^1^3100912^^
"^DD",365,365.07,.03,23,1,0)
Source: 271 HL7 message, ZTP.2.1.
"^DD",365,365.07,.03,"DT")
3100912
"^DD",365,365.07,.04,0)
LOOP ID^P365.027'^IBE(365.027,^0;4^Q
"^DD",365,365.07,.04,3)
Enter the code for HIPAA loop this date belongs to.
"^DD",365,365.07,.04,21,0)
^^1^1^3100912^
"^DD",365,365.07,.04,21,1,0)
Code describing HIPAA loop this date belongs to.
"^DD",365,365.07,.04,23,0)
^^1^1^3100912^
"^DD",365,365.07,.04,23,1,0)
Source: 271 HL7 message, ZTP.4
"^DD",365,365.07,.04,"DT")
3100912
"^DD",365,365.29,.03,0)
DIAGNOSIS^P80'^ICD9(^0;3^Q
"^DD",365,365.29,.03,3)
Select diagnosis code.
"^DD",365,365.29,.03,21,0)
^.001^1^1^3090714^^
"^DD",365,365.29,.03,21,1,0)
Diagnosis code.
"^DD",365,365.29,.03,23,0)
^^1^1^3090730^
"^DD",365,365.29,.03,23,1,0)
Source: 271 HL7 message, ZII.3.1 when ZII.2.1 has value of "BF" or "BK"
"^DD",365,365.29,.03,"DT")
3090730
"^DD",365,365.292,0)
SERVICE TYPES SUB-FIELD^^.01^1
"^DD",365,365.292,0,"DT")
3101122
"^DD",365,365.292,0,"IX","B",365.292,.01)

"^DD",365,365.292,0,"NM","SERVICE TYPES")

"^DD",365,365.292,0,"UP")
365.02
"^DD",365,365.292,.01,0)
SERVICE TYPES^P365.013'^IBE(365.013,^0;1^Q
"^DD",365,365.292,.01,1,0)
^.1
"^DD",365,365.292,.01,1,1,0)
365.292^B
"^DD",365,365.292,.01,1,1,1)
S ^IBCN(365,DA(2),2,DA(1),14,"B",$E(X,1,30),DA)=""
"^DD",365,365.292,.01,1,1,2)
K ^IBCN(365,DA(2),2,DA(1),14,"B",$E(X,1,30),DA)
"^DD",365,365.292,.01,3)
This multiple filed contains service type codes returned from eligibility inquiry.
"^DD",365,365.292,.01,21,0)
^^1^1^3101122^
"^DD",365,365.292,.01,21,1,0)
Contains service type codes returned from eligibility inquiry.
"^DD",365,365.292,.01,"DT")
3101122
"^DD",365.013,365.013,0)
FIELD^^.03^3
"^DD",365.013,365.013,0,"DDA")
N
"^DD",365.013,365.013,0,"DT")
3020603
"^DD",365.013,365.013,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.013,365.013,0,"IX","B",365.013,.01)

"^DD",365.013,365.013,0,"NM","X12 271 SERVICE TYPE")

"^DD",365.013,365.013,0,"PT",2.322,.04)

"^DD",365.013,365.013,0,"PT",2.32292,.01)

"^DD",365.013,365.013,0,"PT",350.9,60.01)

"^DD",365.013,365.013,0,"PT",350.9,60.02)

"^DD",365.013,365.013,0,"PT",350.9,60.03)

"^DD",365.013,365.013,0,"PT",350.9,60.04)

"^DD",365.013,365.013,0,"PT",350.9,60.05)

"^DD",365.013,365.013,0,"PT",350.9,60.06)

"^DD",365.013,365.013,0,"PT",350.9,60.07)

"^DD",365.013,365.013,0,"PT",350.9,60.08)

"^DD",365.013,365.013,0,"PT",350.9,60.09)

"^DD",365.013,365.013,0,"PT",350.9,60.1)

"^DD",365.013,365.013,0,"PT",350.9,60.11)

"^DD",365.013,365.013,0,"PT",350.9,61.01)

"^DD",365.013,365.013,0,"PT",350.9,61.02)

"^DD",365.013,365.013,0,"PT",350.9,61.03)

"^DD",365.013,365.013,0,"PT",350.9,61.04)

"^DD",365.013,365.013,0,"PT",350.9,61.05)

"^DD",365.013,365.013,0,"PT",350.9,61.06)

"^DD",365.013,365.013,0,"PT",350.9,61.07)

"^DD",365.013,365.013,0,"PT",350.9,61.08)

"^DD",365.013,365.013,0,"PT",350.9,61.09)

"^DD",365.013,365.013,0,"PT",355.33,80.01)

"^DD",365.013,365.013,0,"PT",355.33,80.02)

"^DD",365.013,365.013,0,"PT",355.33,80.03)

"^DD",365.013,365.013,0,"PT",355.33,80.04)

"^DD",365.013,365.013,0,"PT",355.33,80.05)

"^DD",365.013,365.013,0,"PT",355.33,80.06)

"^DD",365.013,365.013,0,"PT",355.33,80.07)

"^DD",365.013,365.013,0,"PT",355.33,80.08)

"^DD",365.013,365.013,0,"PT",355.33,80.09)

"^DD",365.013,365.013,0,"PT",355.33,80.1)

"^DD",365.013,365.013,0,"PT",355.33,80.11)

"^DD",365.013,365.013,0,"PT",355.33,80.12)

"^DD",365.013,365.013,0,"PT",355.33,80.13)

"^DD",365.013,365.013,0,"PT",355.33,80.14)

"^DD",365.013,365.013,0,"PT",355.33,80.15)

"^DD",365.013,365.013,0,"PT",355.33,80.16)

"^DD",365.013,365.013,0,"PT",355.33,80.17)

"^DD",365.013,365.013,0,"PT",355.33,80.18)

"^DD",365.013,365.013,0,"PT",355.33,80.19)

"^DD",365.013,365.013,0,"PT",355.33,80.2)

"^DD",365.013,365.013,0,"PT",365.02,.04)

"^DD",365.013,365.013,0,"PT",365.292,.01)

"^DD",365.013,365.013,0,"VRPK")
IB
"^DD",365.013,365.013,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1) X
"^DD",365.013,365.013,.01,1,0)
^.1
"^DD",365.013,365.013,.01,1,1,0)
365.013^B
"^DD",365.013,365.013,.01,1,1,1)
S ^IBE(365.013,"B",$E(X,1,30),DA)=""
"^DD",365.013,365.013,.01,1,1,2)
K ^IBE(365.013,"B",$E(X,1,30),DA)
"^DD",365.013,365.013,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.013,365.013,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.013,365.013,.01,3)
Answer must be 1-2 characters in length
"^DD",365.013,365.013,.01,21,0)
^.001^1^1^3020612^^
"^DD",365.013,365.013,.01,21,1,0)
This is the code value sent in an X.12 271 EB03.
"^DD",365.013,365.013,.01,"DT")
3020517
"^DD",365.013,365.013,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>75!($L(X)<1) X
"^DD",365.013,365.013,.02,3)
Answer must be 1-75 characters in length
"^DD",365.013,365.013,.02,21,0)
^^1^1^3020612^
"^DD",365.013,365.013,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.013,365.013,.02,"DT")
3020517
"^DD",365.013,365.013,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.013,365.013,.03,21,0)
^^2^2^3020612^
"^DD",365.013,365.013,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.013,365.013,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.013,365.013,.03,"DT")
3020603
"^DD",365.016,365.016,0)
FIELD^^.03^3
"^DD",365.016,365.016,0,"DDA")
N
"^DD",365.016,365.016,0,"DT")
3020603
"^DD",365.016,365.016,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.016,365.016,0,"IX","B",365.016,.01)

"^DD",365.016,365.016,0,"NM","X12 271 QUANTITY QUALIFIER")

"^DD",365.016,365.016,0,"PT",2.322,.1)

"^DD",365.016,365.016,0,"PT",2.3227,.03)

"^DD",365.016,365.016,0,"PT",365.02,.1)

"^DD",365.016,365.016,0,"PT",365.27,.03)

"^DD",365.016,365.016,0,"VRPK")
IB
"^DD",365.016,365.016,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<1) X
"^DD",365.016,365.016,.01,1,0)
^.1
"^DD",365.016,365.016,.01,1,1,0)
365.016^B
"^DD",365.016,365.016,.01,1,1,1)
S ^IBE(365.016,"B",$E(X,1,30),DA)=""
"^DD",365.016,365.016,.01,1,1,2)
K ^IBE(365.016,"B",$E(X,1,30),DA)
"^DD",365.016,365.016,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.016,365.016,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.016,365.016,.01,3)
Answer must be 1-2 characters in length
"^DD",365.016,365.016,.01,21,0)
^.001^1^1^3030318^^^^
"^DD",365.016,365.016,.01,21,1,0)
This is the code value sent in an X.12 271 EB09.
"^DD",365.016,365.016,.01,"DT")
3020517
"^DD",365.016,365.016,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",365.016,365.016,.02,3)
Answer must be 1-30 characters in length
"^DD",365.016,365.016,.02,21,0)
^^1^1^3020612^
"^DD",365.016,365.016,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.016,365.016,.02,"DT")
3020517
"^DD",365.016,365.016,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.016,365.016,.03,21,0)
^^2^2^3020612^
"^DD",365.016,365.016,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.016,365.016,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.016,365.016,.03,"DT")
3020603
"^DD",365.021,365.021,0)
FIELD^^.03^3
"^DD",365.021,365.021,0,"DDA")
N
"^DD",365.021,365.021,0,"DT")
3020603
"^DD",365.021,365.021,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.021,365.021,0,"IX","B",365.021,.01)

"^DD",365.021,365.021,0,"NM","X12 271 CONTACT QUALIFIER")

"^DD",365.021,365.021,0,"PT",2.3226,.04)

"^DD",365.021,365.021,0,"PT",365.03,.02)

"^DD",365.021,365.021,0,"PT",365.03,.04)

"^DD",365.021,365.021,0,"PT",365.03,.06)

"^DD",365.021,365.021,0,"PT",365.26,.04)

"^DD",365.021,365.021,0,"VRPK")
IB
"^DD",365.021,365.021,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<2)!'(X'?1P.E) X
"^DD",365.021,365.021,.01,1,0)
^.1
"^DD",365.021,365.021,.01,1,1,0)
365.021^B
"^DD",365.021,365.021,.01,1,1,1)
S ^IBE(365.021,"B",$E(X,1,30),DA)=""
"^DD",365.021,365.021,.01,1,1,2)
K ^IBE(365.021,"B",$E(X,1,30),DA)
"^DD",365.021,365.021,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.021,365.021,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.021,365.021,.01,3)
Answer must be 2 characters in length.
"^DD",365.021,365.021,.01,21,0)
^^1^1^3020612^
"^DD",365.021,365.021,.01,21,1,0)
This is the code value sent in an X.12 message.
"^DD",365.021,365.021,.01,"DT")
3020517
"^DD",365.021,365.021,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",365.021,365.021,.02,3)
Answer must be 1-30 characters in length.
"^DD",365.021,365.021,.02,21,0)
^^1^1^3020612^
"^DD",365.021,365.021,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.021,365.021,.02,"DT")
3020517
"^DD",365.021,365.021,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.021,365.021,.03,21,0)
^^2^2^3020612^
"^DD",365.021,365.021,.03,21,1,0)
This field will be marked inactive if a code is
"^DD",365.021,365.021,.03,21,2,0)
determined to no longer be used by X.12.
"^DD",365.021,365.021,.03,"DT")
3020603
"^DD",365.026,365.026,0)
FIELD^^.03^3
"^DD",365.026,365.026,0,"DDA")
N
"^DD",365.026,365.026,0,"DT")
3090714
"^DD",365.026,365.026,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.026,365.026,0,"IX","B",365.026,.01)

"^DD",365.026,365.026,0,"NM","X12 271 DATE QUALIFIER")

"^DD",365.026,365.026,0,"PT",2.3228,.03)

"^DD",365.026,365.026,0,"PT",365.07,.03)

"^DD",365.026,365.026,0,"PT",365.28,.03)

"^DD",365.026,365.026,0,"VRPK")
IB
"^DD",365.026,365.026,.01,0)
CODE^RF^^0;1^K:$L(X)>3!($L(X)<3)!'(X'?1P.E) X
"^DD",365.026,365.026,.01,1,0)
^.1
"^DD",365.026,365.026,.01,1,1,0)
365.026^B
"^DD",365.026,365.026,.01,1,1,1)
S ^IBE(365.026,"B",$E(X,1,30),DA)=""
"^DD",365.026,365.026,.01,1,1,2)
K ^IBE(365.026,"B",$E(X,1,30),DA)
"^DD",365.026,365.026,.01,3)
Answer must be 3 characters in length.
"^DD",365.026,365.026,.01,21,0)
^^1^1^3090714^
"^DD",365.026,365.026,.01,21,1,0)
This is the code value sent in an X.12 message.
"^DD",365.026,365.026,.01,"DT")
3090714
"^DD",365.026,365.026,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",365.026,365.026,.02,3)
Answer must be 1-30 characters in length.
"^DD",365.026,365.026,.02,21,0)
^^1^1^3090714^
"^DD",365.026,365.026,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.026,365.026,.02,"DT")
3090714
"^DD",365.026,365.026,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.026,365.026,.03,3)
Set this to YES in order to deactivate the code.
"^DD",365.026,365.026,.03,21,0)
^^2^2^3090714^
"^DD",365.026,365.026,.03,21,1,0)
This field will be marked inactive if a code is determined to no longer 
"^DD",365.026,365.026,.03,21,2,0)
be used by X.12.
"^DD",365.026,365.026,.03,"DT")
3090714
"^DD",365.027,365.027,0)
FIELD^^.03^3
"^DD",365.027,365.027,0,"DDA")
N
"^DD",365.027,365.027,0,"DT")
3100806
"^DD",365.027,365.027,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.027,365.027,0,"IX","B",365.027,.01)

"^DD",365.027,365.027,0,"NM","X12 271 LOOP ID")

"^DD",365.027,365.027,0,"PT",365.06,.05)

"^DD",365.027,365.027,0,"PT",365.07,.04)

"^DD",365.027,365.027,.01,0)
CODE^RF^^0;1^K:$L(X)>5!($L(X)<1)!'(X'?1P.E) X
"^DD",365.027,365.027,.01,1,0)
^.1
"^DD",365.027,365.027,.01,1,1,0)
365.027^B
"^DD",365.027,365.027,.01,1,1,1)
S ^IBE(365.027,"B",$E(X,1,30),DA)=""
"^DD",365.027,365.027,.01,1,1,2)
K ^IBE(365.027,"B",$E(X,1,30),DA)
"^DD",365.027,365.027,.01,3)
Answer must be 1-5 characters in length.
"^DD",365.027,365.027,.01,21,0)
^^1^1^3100806^
"^DD",365.027,365.027,.01,21,1,0)
This is the code value sent in an X.12 message.
"^DD",365.027,365.027,.01,"DT")
3100806
"^DD",365.027,365.027,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>30!($L(X)<1) X
"^DD",365.027,365.027,.02,3)
Answer must be 1-30 characters in length.
"^DD",365.027,365.027,.02,21,0)
^^1^1^3100806^
"^DD",365.027,365.027,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.027,365.027,.02,"DT")
3100806
"^DD",365.027,365.027,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.027,365.027,.03,3)
Set this to YES in order to deactivate the code.
"^DD",365.027,365.027,.03,21,0)
^^2^2^3100806^
"^DD",365.027,365.027,.03,21,1,0)
This field will be marked inactive if a code is determined to no longer be
"^DD",365.027,365.027,.03,21,2,0)
used by X.12.
"^DD",365.027,365.027,.03,"DT")
3100806
"^DD",365.028,365.028,0)
FIELD^^.03^3
"^DD",365.028,365.028,0,"DDA")
N
"^DD",365.028,365.028,0,"DT")
3090909
"^DD",365.028,365.028,0,"ID",.02)
W "   ",$P(^(0),U,2)
"^DD",365.028,365.028,0,"IX","B",365.028,.01)

"^DD",365.028,365.028,0,"NM","X12 271 REFERENCE IDENTIFICATION")

"^DD",365.028,365.028,0,"PT",2.32291,.03)

"^DD",365.028,365.028,0,"PT",365.291,.03)

"^DD",365.028,365.028,0,"VRPK")
IB
"^DD",365.028,365.028,.01,0)
CODE^RF^^0;1^K:$L(X)>2!($L(X)<2)!'(X'?1P.E) X
"^DD",365.028,365.028,.01,1,0)
^.1
"^DD",365.028,365.028,.01,1,1,0)
365.028^B
"^DD",365.028,365.028,.01,1,1,1)
S ^IBE(365.028,"B",$E(X,1,30),DA)=""
"^DD",365.028,365.028,.01,1,1,2)
K ^IBE(365.028,"B",$E(X,1,30),DA)
"^DD",365.028,365.028,.01,3)
Answer must be 2 characters in length.
"^DD",365.028,365.028,.01,21,0)
^^1^1^3090909^
"^DD",365.028,365.028,.01,21,1,0)
This is the code value sent in an X.12 message.
"^DD",365.028,365.028,.01,"DT")
3090909
"^DD",365.028,365.028,.02,0)
DESCRIPTION^F^^0;2^K:$L(X)>55!($L(X)<1) X
"^DD",365.028,365.028,.02,3)
Answer must be 1-55 characters in length.
"^DD",365.028,365.028,.02,21,0)
^^1^1^3090909^
"^DD",365.028,365.028,.02,21,1,0)
This describes the code value in more detail.
"^DD",365.028,365.028,.02,"DT")
3090909
"^DD",365.028,365.028,.03,0)
INACTIVE?^S^0:NO;1:YES;^0;3^Q
"^DD",365.028,365.028,.03,3)
Set this to YES in order to deactivate the code.
"^DD",365.028,365.028,.03,21,0)
^^2^2^3090909^
"^DD",365.028,365.028,.03,21,1,0)
This field will be marked inactive if a code is determined to no longer 
"^DD",365.028,365.028,.03,21,2,0)
be used by X.12.
"^DD",365.028,365.028,.03,"DT")
3090909
"^DD",365.1,365.1,3.01,0)
MANUAL REQUEST DATE/TIME^D^^3;1^S %DT="EST" D ^%DT S X=Y K:X<1 X
"^DD",365.1,365.1,3.01,.1)
ELECTRONIC INQUIRY REQUEST DATE AND TIME
"^DD",365.1,365.1,3.01,3)
Enter the Date and Time that the Electronic Inquiry Request was queued.
"^DD",365.1,365.1,3.01,21,0)
^^2^2^3100903^
"^DD",365.1,365.1,3.01,21,1,0)
The date and time a service type inquiry was triggered from the option, 
"^DD",365.1,365.1,3.01,21,2,0)
Request Electronic Inquiry.
"^DD",365.1,365.1,3.01,23,0)
^^2^2^3100903^
"^DD",365.1,365.1,3.01,23,1,0)
This field will be set to the current date/time whenever a service type 
"^DD",365.1,365.1,3.01,23,2,0)
inquiry was triggered from the option, Request Electronic Inquiry.
"^DD",365.1,365.1,3.01,"DT")
3100913
"^DIC",353.1,353.1,0)
PLACE OF SERVICE^353.1I
"^DIC",353.1,353.1,0,"GL")
^IBE(353.1,
"^DIC",353.1,353.1,"%D",0)
^^5^5^2940214^^
"^DIC",353.1,353.1,"%D",1,0)
This is a reference file containing the Place of Service codes that may be
"^DIC",353.1,353.1,"%D",2,0)
associated with a procedure.  This is a set of codes specifically defined to
"^DIC",353.1,353.1,"%D",3,0)
be used on the CMS-1500.
"^DIC",353.1,353.1,"%D",4,0)
 
"^DIC",353.1,353.1,"%D",5,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",353.1,"B","PLACE OF SERVICE",353.1)

"^DIC",365.013,365.013,0)
X12 271 SERVICE TYPE^365.013I
"^DIC",365.013,365.013,0,"GL")
^IBE(365.013,
"^DIC",365.013,365.013,"%",0)
^1.005^^0
"^DIC",365.013,365.013,"%D",0)
^^4^4^3030418^
"^DIC",365.013,365.013,"%D",1,0)
This file contains all the corresponding X.12 271 EB03 codes (Service 
"^DIC",365.013,365.013,"%D",2,0)
Type).
"^DIC",365.013,365.013,"%D",3,0)
 
"^DIC",365.013,365.013,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.013,"B","X12 271 SERVICE TYPE",365.013)

"^DIC",365.016,365.016,0)
X12 271 QUANTITY QUALIFIER^365.016I
"^DIC",365.016,365.016,0,"GL")
^IBE(365.016,
"^DIC",365.016,365.016,"%",0)
^1.005^^0
"^DIC",365.016,365.016,"%D",0)
^^4^4^3030418^
"^DIC",365.016,365.016,"%D",1,0)
This file contains all the corresponding X.12 271 EB09 codes (Quantity 
"^DIC",365.016,365.016,"%D",2,0)
Qualifier).
"^DIC",365.016,365.016,"%D",3,0)
 
"^DIC",365.016,365.016,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.016,"B","X12 271 QUANTITY QUALIFIER",365.016)

"^DIC",365.021,365.021,0)
X12 271 CONTACT QUALIFIER^365.021
"^DIC",365.021,365.021,0,"GL")
^IBE(365.021,
"^DIC",365.021,365.021,"%",0)
^1.005^^0
"^DIC",365.021,365.021,"%D",0)
^^4^4^3030418^
"^DIC",365.021,365.021,"%D",1,0)
This file contains all the corresponding X.12 codes which
"^DIC",365.021,365.021,"%D",2,0)
identify a method for contact.
"^DIC",365.021,365.021,"%D",3,0)
 
"^DIC",365.021,365.021,"%D",4,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.021,"B","X12 271 CONTACT QUALIFIER",365.021)

"^DIC",365.026,365.026,0)
X12 271 DATE QUALIFIER^365.026
"^DIC",365.026,365.026,0,"GL")
^IBE(365.026,
"^DIC",365.026,365.026,"%",0)
^1.005^^0
"^DIC",365.026,365.026,"%D",0)
^^6^6^3090714^
"^DIC",365.026,365.026,"%D",1,0)
This file contains all the corresponding X.12 codes for date/time 
"^DIC",365.026,365.026,"%D",2,0)
qualifiers.
"^DIC",365.026,365.026,"%D",3,0)
 
"^DIC",365.026,365.026,"%D",4,0)
 
"^DIC",365.026,365.026,"%D",5,0)
Per VHA Directive 10-93-142, this file definition should not be 
"^DIC",365.026,365.026,"%D",6,0)
modified.  
"^DIC",365.026,"B","X12 271 DATE QUALIFIER",365.026)

"^DIC",365.027,365.027,0)
X12 271 LOOP ID^365.027
"^DIC",365.027,365.027,0,"GL")
^IBE(365.027,
"^DIC",365.027,365.027,"%",0)
^1.005^^
"^DIC",365.027,365.027,"%D",0)
^^8^8^3100916^
"^DIC",365.027,365.027,"%D",1,0)
This file contains all the corresponding X.12 codes for loop IDs.
"^DIC",365.027,365.027,"%D",2,0)
It is a dictionary to map X12 codes to their corresponding values. 
"^DIC",365.027,365.027,"%D",3,0)
The codes are used to parse inbound type 271 messages, among others.
"^DIC",365.027,365.027,"%D",4,0)
HIPAA loop IDs come from FSC as part of 271 response message.
"^DIC",365.027,365.027,"%D",5,0)
 
"^DIC",365.027,365.027,"%D",6,0)
 
"^DIC",365.027,365.027,"%D",7,0)
Per VHA Directive 10-93-142, this file definition should not be 
"^DIC",365.027,365.027,"%D",8,0)
modified.
"^DIC",365.027,"B","X12 271 LOOP ID",365.027)

"^DIC",365.028,365.028,0)
X12 271 REFERENCE IDENTIFICATION^365.028
"^DIC",365.028,365.028,0,"GL")
^IBE(365.028,
"^DIC",365.028,365.028,"%",0)
^1.005^^0
"^DIC",365.028,365.028,"%D",0)
^^7^7^3090909^
"^DIC",365.028,365.028,"%D",1,0)
This file contains all the corresponding X.12 codes for reference 
"^DIC",365.028,365.028,"%D",2,0)
identification codes.
"^DIC",365.028,365.028,"%D",3,0)
 
"^DIC",365.028,365.028,"%D",4,0)
 
"^DIC",365.028,365.028,"%D",5,0)
 
"^DIC",365.028,365.028,"%D",6,0)
Per VHA Directive 10-93-142, this file definition should not be 
"^DIC",365.028,365.028,"%D",7,0)
modified.
"^DIC",365.028,"B","X12 271 REFERENCE IDENTIFICATION",365.028)

"BLD",8170,6)
^417
**END**
**END**
