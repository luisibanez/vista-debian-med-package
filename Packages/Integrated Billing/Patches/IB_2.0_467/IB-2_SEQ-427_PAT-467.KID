Released IB*2*467 SEQ #427
Extracted from mail message
**KIDS**:IB*2.0*467^

**INSTALL NAME**
IB*2.0*467
"BLD",8486,0)
IB*2.0*467^INTEGRATED BILLING^0^3111223^y
"BLD",8486,4,0)
^9.64PA^355.33^2
"BLD",8486,4,355.33,0)
355.33
"BLD",8486,4,355.33,2,0)
^9.641^355.33^1
"BLD",8486,4,355.33,2,355.33,0)
INSURANCE BUFFER  (File-top level)
"BLD",8486,4,355.33,2,355.33,1,0)
^9.6411^62.01^1
"BLD",8486,4,355.33,2,355.33,1,62.01,0)
PATIENT ID
"BLD",8486,4,355.33,222)
y^y^p^^^^n^^n
"BLD",8486,4,355.33,224)

"BLD",8486,4,365.15,0)
365.15
"BLD",8486,4,365.15,222)
y^y^f^^y^^y^o^n
"BLD",8486,4,"APDD",355.33,355.33)

"BLD",8486,4,"APDD",355.33,355.33,62.01)

"BLD",8486,4,"B",355.33,355.33)

"BLD",8486,4,"B",365.15,365.15)

"BLD",8486,6)
6^
"BLD",8486,6.3)
11
"BLD",8486,"ABPKG")
n
"BLD",8486,"KRN",0)
^9.67PA^779.2^20
"BLD",8486,"KRN",.4,0)
.4
"BLD",8486,"KRN",.401,0)
.401
"BLD",8486,"KRN",.402,0)
.402
"BLD",8486,"KRN",.403,0)
.403
"BLD",8486,"KRN",.5,0)
.5
"BLD",8486,"KRN",.84,0)
.84
"BLD",8486,"KRN",3.6,0)
3.6
"BLD",8486,"KRN",3.8,0)
3.8
"BLD",8486,"KRN",9.2,0)
9.2
"BLD",8486,"KRN",9.8,0)
9.8
"BLD",8486,"KRN",9.8,"NM",0)
^9.68A^4^4
"BLD",8486,"KRN",9.8,"NM",1,0)
IBCNERTQ^^0^B45372080
"BLD",8486,"KRN",9.8,"NM",2,0)
IBCNEDE1^^0^B43189276
"BLD",8486,"KRN",9.8,"NM",3,0)
IBCNEHLQ^^0^B43557440
"BLD",8486,"KRN",9.8,"NM",4,0)
IBCNBLE1^^0^B32174406
"BLD",8486,"KRN",9.8,"NM","B","IBCNBLE1",4)

"BLD",8486,"KRN",9.8,"NM","B","IBCNEDE1",2)

"BLD",8486,"KRN",9.8,"NM","B","IBCNEHLQ",3)

"BLD",8486,"KRN",9.8,"NM","B","IBCNERTQ",1)

"BLD",8486,"KRN",19,0)
19
"BLD",8486,"KRN",19.1,0)
19.1
"BLD",8486,"KRN",101,0)
101
"BLD",8486,"KRN",409.61,0)
409.61
"BLD",8486,"KRN",771,0)
771
"BLD",8486,"KRN",779.2,0)
779.2
"BLD",8486,"KRN",870,0)
870
"BLD",8486,"KRN",8989.51,0)
8989.51
"BLD",8486,"KRN",8989.52,0)
8989.52
"BLD",8486,"KRN",8994,0)
8994
"BLD",8486,"KRN","B",.4,.4)

"BLD",8486,"KRN","B",.401,.401)

"BLD",8486,"KRN","B",.402,.402)

"BLD",8486,"KRN","B",.403,.403)

"BLD",8486,"KRN","B",.5,.5)

"BLD",8486,"KRN","B",.84,.84)

"BLD",8486,"KRN","B",3.6,3.6)

"BLD",8486,"KRN","B",3.8,3.8)

"BLD",8486,"KRN","B",9.2,9.2)

"BLD",8486,"KRN","B",9.8,9.8)

"BLD",8486,"KRN","B",19,19)

"BLD",8486,"KRN","B",19.1,19.1)

"BLD",8486,"KRN","B",101,101)

"BLD",8486,"KRN","B",409.61,409.61)

"BLD",8486,"KRN","B",771,771)

"BLD",8486,"KRN","B",779.2,779.2)

"BLD",8486,"KRN","B",870,870)

"BLD",8486,"KRN","B",8989.51,8989.51)

"BLD",8486,"KRN","B",8989.52,8989.52)

"BLD",8486,"KRN","B",8994,8994)

"BLD",8486,"QDEF")
^^^^NO^^^^NO^^YES
"BLD",8486,"QUES",0)
^9.62^^
"BLD",8486,"REQB",0)
^9.611^3^3
"BLD",8486,"REQB",1,0)
IB*2.0*438^2
"BLD",8486,"REQB",2,0)
IB*2.0*416^2
"BLD",8486,"REQB",3,0)
IB*2.0*435^2
"BLD",8486,"REQB","B","IB*2.0*416",2)

"BLD",8486,"REQB","B","IB*2.0*435",3)

"BLD",8486,"REQB","B","IB*2.0*438",1)

"DATA",365.15,1,0)
B1^33^1
"DATA",365.15,1,1,0)
^^3^3^3091007^
"DATA",365.15,1,1,1,0)
eIV could not create an inquiry for this entry.  eIV could not match the
"DATA",365.15,1,1,2,0)
insurance company name in the Insurance Buffer file (#355.33) to a valid
"DATA",365.15,1,1,3,0)
insurance company name in the Insurance Company file (#36).
"DATA",365.15,1,2,0)
^^4^4^3091007^
"DATA",365.15,1,2,1,0)
Action to take:  Correct the spelling of the insurance company name found
"DATA",365.15,1,2,2,0)
in the buffer so that it matches one found in the Insurance Company file (#36).
"DATA",365.15,1,2,3,0)
Otherwise, contact the insurance company to manually verify this insurance
"DATA",365.15,1,2,4,0)
information.
"DATA",365.15,2,0)
B2^33^1
"DATA",365.15,2,1,0)
^^5^5^3091007^
"DATA",365.15,2,1,1,0)
eIV could not create an inquiry for this entry. eIV matched the insurance
"DATA",365.15,2,1,2,0)
company name in the Insurance Buffer file (#355.33) to more than one
"DATA",365.15,2,1,3,0)
uniquely named insurance company in the Insurance Company file (#36). This
"DATA",365.15,2,1,4,0)
indicates that the Auto Match check or the Synonym check yielded multiple
"DATA",365.15,2,1,5,0)
insurance companies from the Insurance Company file.
"DATA",365.15,2,2,0)
^^7^7^3091007^
"DATA",365.15,2,2,1,0)
Action to take:  Correct the spelling of the insurance company name found
"DATA",365.15,2,2,2,0)
in the buffer so that it matches one found in the Insurance Company file
"DATA",365.15,2,2,3,0)
(#36). Otherwise, contact the insurance company to manually verify this
"DATA",365.15,2,2,4,0)
insurance information. (* Advanced users: Use the option "Enter/Edit Auto
"DATA",365.15,2,2,5,0)
Match Entries" to check the entries in the Auto Match file (#365.11). Make
"DATA",365.15,2,2,6,0)
sure there is no more than one entry in the Auto Match file, if any, which
"DATA",365.15,2,2,7,0)
corresponds to the insurance company name found in this buffer entry.)
"DATA",365.15,3,0)
B3^33^1
"DATA",365.15,3,1,0)
^^4^4^3091007^
"DATA",365.15,3,1,1,0)
eIV could not create an inquiry for this entry. eIV matched the insurance
"DATA",365.15,3,1,2,0)
company name in the Insurance Buffer file (#355.33) to more than one insurance
"DATA",365.15,3,1,3,0)
company entry with the same name in the Insurance Company file (#36).  At least
"DATA",365.15,3,1,4,0)
one of these matching entries are linked to a different payer.
"DATA",365.15,3,2,0)
^^6^6^3091007^
"DATA",365.15,3,2,1,0)
Action to take:  Run the "eIV Payer Link Report" option by Insurance
"DATA",365.15,3,2,2,0)
Company List, for all linked insurance companies, using the keyword
"DATA",365.15,3,2,3,0)
feature to narrow down the search.  This will provide a report showing
"DATA",365.15,3,2,4,0)
which payer the different insurance company records are linked to.  Next,
"DATA",365.15,3,2,5,0)
use the "Insurance Company Entry/Edit" option to correct those insurance
"DATA",365.15,3,2,6,0)
companies who are linked to the wrong payer.
"DATA",365.15,4,0)
B4^33^1
"DATA",365.15,4,1,0)
^^6^6^3091007^
"DATA",365.15,4,1,1,0)
eIV could not create an inquiry for this entry. There is no link for this
"DATA",365.15,4,1,2,0)
insurance company between the Insurance Company file (#36) and the Payer
"DATA",365.15,4,1,3,0)
file (#365.12). This may occur because the insurance staff did not attempt
"DATA",365.15,4,1,4,0)
to manually link the named insurance company to the payer list or the
"DATA",365.15,4,1,5,0)
insurance staff did not find a payer in the payer list that they wanted to
"DATA",365.15,4,1,6,0)
link this insurance company to.
"DATA",365.15,4,2,0)
^^9^9^3091007^
"DATA",365.15,4,2,1,0)
Action to take:  Either contact the insurance company to manually verify
"DATA",365.15,4,2,2,0)
this insurance information or link the insurance company to a payer.
"DATA",365.15,4,2,3,0)
Steps to link an insurance company to a payer are as follows: run the
"DATA",365.15,4,2,4,0)
"eIV Payer Link Report" option by Insurance Company List, for all
"DATA",365.15,4,2,5,0)
unlinked insurance companies.  Use the keyword feature when running the
"DATA",365.15,4,2,6,0)
report to narrow down the search.  This will provide a report showing
"DATA",365.15,4,2,7,0)
which insurance companies are not linked to a payer.  Next, use the
"DATA",365.15,4,2,8,0)
"Insurance Company Entry/Edit" option to link those insurance companies
"DATA",365.15,4,2,9,0)
to the correct payer.
"DATA",365.15,5,0)
B5^33^1
"DATA",365.15,5,1,0)
^^2^2^3091007^
"DATA",365.15,5,1,1,0)
eIV could not create an inquiry for this entry.  The payer is not
"DATA",365.15,5,1,2,0)
nationally active for eIV.
"DATA",365.15,5,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,5,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,5,2,2,0)
insurance information.
"DATA",365.15,6,0)
B6^33^1
"DATA",365.15,6,1,0)
^^2^2^3091007^
"DATA",365.15,6,1,1,0)
eIV could not create an inquiry for this entry.  The payer is not locally
"DATA",365.15,6,1,2,0)
active for eIV.
"DATA",365.15,6,2,0)
^365.17^3^3^3091007^^^^
"DATA",365.15,6,2,1,0)
Action to take:  Either use the option "Payer Edit (Activate/Inactivate)"
"DATA",365.15,6,2,2,0)
to locally activate this payer or contact the insurance company to
"DATA",365.15,6,2,3,0)
manually verify this insurance information.
"DATA",365.15,7,0)
B7^33^1
"DATA",365.15,7,1,0)
^^3^3^3091007^
"DATA",365.15,7,1,1,0)
eIV could not create an inquiry for this entry.  The payer does not accept
"DATA",365.15,7,1,2,0)
electronic insurance eligibility requests.  The eIV application data does
"DATA",365.15,7,1,3,0)
not exist in the Payer file (#365.12) for this payer.
"DATA",365.15,7,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,7,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,7,2,2,0)
insurance information.
"DATA",365.15,8,0)
A1^43^0
"DATA",365.15,8,1,0)
^365.152^2^2^3091007^^^^
"DATA",365.15,8,1,1,0)
Information received via electronic inquiry indicates patient has active
"DATA",365.15,8,1,2,0)
insurance.
"DATA",365.15,8,2,0)
^365.17^2^2^3091007^^
"DATA",365.15,8,2,1,0)
Action to take:  Review the details listed in the eIV Response Report
"DATA",365.15,8,2,2,0)
before processing this buffer entry.
"DATA",365.15,9,0)
D1^45^0
"DATA",365.15,9,1,0)
^365.152^2^2^3091007^^^^
"DATA",365.15,9,1,1,0)
Information received via electronic inquiry indicates patient does NOT
"DATA",365.15,9,1,2,0)
have active insurance.
"DATA",365.15,9,2,0)
^^2^2^3091007^
"DATA",365.15,9,2,1,0)
Action to take:  Review the details listed in the eIV Response Report
"DATA",365.15,9,2,2,0)
before processing this buffer entry.
"DATA",365.15,10,0)
Q1^63^0
"DATA",365.15,10,1,0)
^^3^3^3091007^
"DATA",365.15,10,1,1,0)
This buffer entry is currently still being processed by the eIV
"DATA",365.15,10,1,2,0)
application. Unless instructed otherwise, there is no reason you
"DATA",365.15,10,1,3,0)
should do anything with this buffer entry.
"DATA",365.15,10,2,0)
^365.17^1^1^3091007^^^^
"DATA",365.15,10,2,1,0)
Action to take: None.
"DATA",365.15,11,0)
B8^33^0
"DATA",365.15,11,1,0)
^365.152^2^2^3111118^^^^
"DATA",365.15,11,1,1,0)
The electronic response indicated an error of some kind that needs to be
"DATA",365.15,11,1,2,0)
corrected before the insurance inquiry can be re-transmitted.
"DATA",365.15,11,2,0)
^365.17^2^2^3111118^^^^
"DATA",365.15,11,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,11,2,2,0)
insurance information.
"DATA",365.15,12,0)
B9^33^1
"DATA",365.15,12,1,0)
^365.152^1^1^3091007^^^^
"DATA",365.15,12,1,1,0)
An unknown and unforeseen error has occurred with this entry.
"DATA",365.15,12,2,0)
^^2^2^3091007^
"DATA",365.15,12,2,1,0)
Action to take:  Please call the Help Desk for this issue; include a trace
"DATA",365.15,12,2,2,0)
number if available.
"DATA",365.15,13,0)
B10^33^1
"DATA",365.15,13,1,0)
^365.152^2^2^3091007^^
"DATA",365.15,13,1,1,0)
eIV could not create an inquiry for this entry.  The insurance
"DATA",365.15,13,1,2,0)
company found is listed as inactive in the Insurance Company file (#36).
"DATA",365.15,13,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,13,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,13,2,2,0)
insurance information.
"DATA",365.15,14,0)
B11^33^1
"DATA",365.15,14,1,0)
^^2^2^3091007^
"DATA",365.15,14,1,1,0)
eIV could not create an inquiry for this entry.  eIV cannot send inquiries
"DATA",365.15,14,1,2,0)
to Medicaid.
"DATA",365.15,14,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,14,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,14,2,2,0)
insurance information.
"DATA",365.15,15,0)
B12^33^0
"DATA",365.15,15,1,0)
^365.152^2^2^3091007^^
"DATA",365.15,15,1,1,0)
eIV was unable to electronically verify this insurance information due to
"DATA",365.15,15,1,2,0)
a communication failure.
"DATA",365.15,15,2,0)
^365.17^2^2^3091007^^^^
"DATA",365.15,15,2,1,0)
Action to take:  Contact the insurance company to manually verify this
"DATA",365.15,15,2,2,0)
insurance information.
"DATA",365.15,16,0)
B13^33^1
"DATA",365.15,16,1,0)
^365.152^1^1^3091007^^^^
"DATA",365.15,16,1,1,0)
The insurance company name for this buffer entry is blank.
"DATA",365.15,16,2,0)
^^2^2^3091007^
"DATA",365.15,16,2,1,0)
Action to take:  Please call the Help Desk and provide them with buffer 
"DATA",365.15,16,2,2,0)
information and trace number, if available.
"DATA",365.15,17,0)
B14^33^1
"DATA",365.15,17,1,0)
^^2^2^3091007^
"DATA",365.15,17,1,1,0)
eIV could not create an inquiry for this entry.  The payer associated with
"DATA",365.15,17,1,2,0)
this insurance company has been deactivated.
"DATA",365.15,17,2,0)
^365.17^3^3^3091007^^^^
"DATA",365.15,17,2,1,0)
Action to take:  Either edit this insurance company and link it to another
"DATA",365.15,17,2,2,0)
payer, using the "Insurance Company Entry/Edit" option; otherwise, contact
"DATA",365.15,17,2,3,0)
the insurance company to manually verify this insurance information.
"DATA",365.15,18,0)
B15^33^1
"DATA",365.15,18,1,0)
^^3^3^3111118^
"DATA",365.15,18,1,1,0)
eIV could not create an inquiry for this entry. This inquiry requires the 
"DATA",365.15,18,1,2,0)
Subscriber ID field to be populated before an inquiry can be transmitted 
"DATA",365.15,18,1,3,0)
electronically.
"DATA",365.15,18,2,0)
^^3^3^3111118^
"DATA",365.15,18,2,1,0)
Action to take: Update the inquiry with the missing Subscriber ID or 
"DATA",365.15,18,2,2,0)
contact the insurance company to manually verify this insurance 
"DATA",365.15,18,2,3,0)
information.
"DATA",365.15,21,0)
U1^35^0
"DATA",365.15,21,1,0)
^365.152^4^4^3091007^^^^
"DATA",365.15,21,1,1,0)
An ambiguous response has been received.  It could NOT be determined 
"DATA",365.15,21,1,2,0)
whether the insurance company identified the patient as an active member 
"DATA",365.15,21,1,3,0)
of the insurance plan.  Please contact the insurance company to manually 
"DATA",365.15,21,1,4,0)
verify this insurance information.
"DATA",365.15,21,2,0)
^^3^3^3091007^
"DATA",365.15,21,2,1,0)
Action to take:  Review the details listed in the eIV Response Report and
"DATA",365.15,21,2,2,0)
contact the insurance company to manually verify this insurance 
"DATA",365.15,21,2,3,0)
information.
"DATA",365.15,22,0)
U2^35^0
"DATA",365.15,22,1,0)
^365.152^2^2^3091007^^^^
"DATA",365.15,22,1,1,0)
While processing a payer response, an unknown and unforeseen error has 
"DATA",365.15,22,1,2,0)
occurred with this entry.
"DATA",365.15,22,2,0)
^^6^6^3091007^
"DATA",365.15,22,2,1,0)
Action to take:  Please call the Help Desk for this issue; include a trace
"DATA",365.15,22,2,2,0)
number if available. A user may process this buffer entry if a Help Desk 
"DATA",365.15,22,2,3,0)
call has been logged with the associated trace number. To process this
"DATA",365.15,22,2,4,0)
buffer entry, review the details listed in the eIV Response Report and
"DATA",365.15,22,2,5,0)
contact the insurance company to manually verify this insurance
"DATA",365.15,22,2,6,0)
information.
"DATA",365.15,23,0)
B16^33^1
"DATA",365.15,23,1,0)
^^3^3^3111118^
"DATA",365.15,23,1,1,0)
eIV could not create an inquiry for this entry. This dependant inquiry 
"DATA",365.15,23,1,2,0)
requires the Patient ID field to be populated before an inquiry can be 
"DATA",365.15,23,1,3,0)
transmitted electronically.
"DATA",365.15,23,2,0)
^^3^3^3111118^
"DATA",365.15,23,2,1,0)
Action to take:  Update the inquiry with the missing Patient ID or 
"DATA",365.15,23,2,2,0)
contact the insurance company to manually verify this insurance 
"DATA",365.15,23,2,3,0)
information.
"FIA",355.33)
INSURANCE BUFFER
"FIA",355.33,0)
^IBA(355.33,
"FIA",355.33,0,0)
355.33D
"FIA",355.33,0,1)
y^y^p^^^^n^^n
"FIA",355.33,0,10)

"FIA",355.33,0,11)

"FIA",355.33,0,"RLRO")

"FIA",355.33,0,"VR")
2.0^IB
"FIA",355.33,355.33)
1
"FIA",355.33,355.33,62.01)

"FIA",365.15)
IIV STATUS TABLE
"FIA",365.15,0)
^IBE(365.15,
"FIA",365.15,0,0)
365.15
"FIA",365.15,0,1)
y^y^f^^y^^y^o^n
"FIA",365.15,0,10)

"FIA",365.15,0,11)

"FIA",365.15,0,"RLRO")

"FIA",365.15,0,"VR")
2.0^IB
"FIA",365.15,365.15)
0
"FIA",365.15,365.152)
0
"FIA",365.15,365.17)
0
"MBREQ")
0
"PKG",49,-1)
1^1
"PKG",49,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",49,20,0)
^9.402P^1^1
"PKG",49,20,1,0)
2^^IBAXDR
"PKG",49,20,1,1)

"PKG",49,20,"B",2,1)

"PKG",49,22,0)
^9.49I^1^1
"PKG",49,22,1,0)
2.0^2940321^2960627
"PKG",49,22,1,"PAH",1,0)
467^3111223^123457009
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
4
"RTN","IBCNBLE1")
0^4^B32174406^B30221340
"RTN","IBCNBLE1",1,0)
IBCNBLE1 ;DAOU/ESG - Ins Buffer, Expand Entry, con't ;25-JUN-2002
"RTN","IBCNBLE1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,435,467**;21-MAR-94;Build 11
"RTN","IBCNBLE1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNBLE1",4,0)
 ;
"RTN","IBCNBLE1",5,0)
 ; Can't be called from the top
"RTN","IBCNBLE1",6,0)
 Q
"RTN","IBCNBLE1",7,0)
 ;
"RTN","IBCNBLE1",8,0)
BLD ; Continuation of Expand Entry list build procedure
"RTN","IBCNBLE1",9,0)
 ; --- Called by IBCNBLE
"RTN","IBCNBLE1",10,0)
 ;
"RTN","IBCNBLE1",11,0)
 NEW ERR,MSG,IBL,IBY,IBLINE,IBER,IBLN,EDITED,ORIGSYME,ORIGSYMI,EEUPDATE
"RTN","IBCNBLE1",12,0)
 NEW ORIGSYMS
"RTN","IBCNBLE1",13,0)
 ;
"RTN","IBCNBLE1",14,0)
 ; save the external and internal IIV status values
"RTN","IBCNBLE1",15,0)
 S ORIGSYMS=$$SYMBOL^IBCNBLL(IBBUFDA)
"RTN","IBCNBLE1",16,0)
 S ORIGSYME=$$GET1^DIQ(355.33,IBBUFDA,.12,"E")
"RTN","IBCNBLE1",17,0)
 S ORIGSYMI=$P(IB0,U,12)
"RTN","IBCNBLE1",18,0)
 ;
"RTN","IBCNBLE1",19,0)
 ; Determine if Expand Entry is allowed to update the IIV Status
"RTN","IBCNBLE1",20,0)
 S EEUPDATE=1    ; default Expand Entry update flag to true
"RTN","IBCNBLE1",21,0)
 I ORIGSYMI,'$P($G(^IBE(365.15,ORIGSYMI,0)),U,3) S EEUPDATE=0
"RTN","IBCNBLE1",22,0)
 ;
"RTN","IBCNBLE1",23,0)
 ; Do not update the IIV status if manually verified
"RTN","IBCNBLE1",24,0)
 I ORIGSYMS="*" S EEUPDATE=0
"RTN","IBCNBLE1",25,0)
 ;
"RTN","IBCNBLE1",26,0)
 ; Don't let Expand Entry update the eIV status for ePharmacy buffer entries
"RTN","IBCNBLE1",27,0)
 ; esg - 10/12/10 - IB*2*435
"RTN","IBCNBLE1",28,0)
 I +$P($G(^IBA(355.33,IBBUFDA,0)),U,17) S EEUPDATE=0
"RTN","IBCNBLE1",29,0)
 ;
"RTN","IBCNBLE1",30,0)
 ; If the current IIV Status allows updates by Expand Entry, then
"RTN","IBCNBLE1",31,0)
 ; invoke the function that trys to find a valid payer
"RTN","IBCNBLE1",32,0)
 I EEUPDATE D
"RTN","IBCNBLE1",33,0)
 . S ERR=$$INSERROR^IBCNEUT3("B",IBBUFDA,1,.MSG)
"RTN","IBCNBLE1",34,0)
 . ; If no errors, then remove the IIV Status
"RTN","IBCNBLE1",35,0)
 . I 'ERR S ERR=$$SIDERR(IBBUFDA,$P(ERR,U,2))
"RTN","IBCNBLE1",36,0)
 . I 'ERR S ERR=$$PIDERR(IBBUFDA)
"RTN","IBCNBLE1",37,0)
 . I 'ERR D CLEAR^IBCNEUT4(IBBUFDA,.EDITED)
"RTN","IBCNBLE1",38,0)
 . ; If errors found, then update with the new IIV Status
"RTN","IBCNBLE1",39,0)
 . I ERR D BUFF^IBCNEUT2(IBBUFDA,$P(ERR,U,1)) S EDITED=1
"RTN","IBCNBLE1",40,0)
 . ; refresh the IB0 variable for the possible symbol change
"RTN","IBCNBLE1",41,0)
 . S $P(IB0,U,12)=$P($G(^IBA(355.33,IBBUFDA,0)),U,12)
"RTN","IBCNBLE1",42,0)
 . Q
"RTN","IBCNBLE1",43,0)
 ;
"RTN","IBCNBLE1",44,0)
 ; Possibly display information if the OVERRIDE FRESHNESS FLAG is on
"RTN","IBCNBLE1",45,0)
 I $P(IB0,U,13) D
"RTN","IBCNBLE1",46,0)
 . S IBL="User Requested Inquiry?: ",IBY="YES"
"RTN","IBCNBLE1",47,0)
 . S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,3)
"RTN","IBCNBLE1",48,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",49,0)
 . Q
"RTN","IBCNBLE1",50,0)
 ;
"RTN","IBCNBLE1",51,0)
 ; Display the Current Status line
"RTN","IBCNBLE1",52,0)
 S IBL="Current eIV Status: "
"RTN","IBCNBLE1",53,0)
 S IBY=$$GET1^DIQ(355.33,IBBUFDA,.12,"E")
"RTN","IBCNBLE1",54,0)
 I IBY="",$$SYMBOL^IBCNBLL(IBBUFDA)'="*" S IBY="No problems identified, Awaiting electronic processing"
"RTN","IBCNBLE1",55,0)
 I $$SYMBOL^IBCNBLL(IBBUFDA)="*" S IBY="Manually verified, No eIV activity at this time"
"RTN","IBCNBLE1",56,0)
 ;
"RTN","IBCNBLE1",57,0)
 ; esg - 10/12/10 - check for epharmacy entries
"RTN","IBCNBLE1",58,0)
 I +$P($G(^IBA(355.33,IBBUFDA,0)),U,17) S IBY="N/A for e-Pharmacy buffer entries"
"RTN","IBCNBLE1",59,0)
 ;
"RTN","IBCNBLE1",60,0)
 S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,80)
"RTN","IBCNBLE1",61,0)
 D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",62,0)
 ;
"RTN","IBCNBLE1",63,0)
 ; Display any text returned by the payer function
"RTN","IBCNBLE1",64,0)
 F IBER=1:1:$G(MSG) D SET^IBCNBLE(" ") F IBLN=1:1:$P($G(MSG(IBER)),U,2) D SET^IBCNBLE("  "_$G(MSG(IBER,IBLN)))
"RTN","IBCNBLE1",65,0)
 ;
"RTN","IBCNBLE1",66,0)
 ; Display the current IIV Status generic description
"RTN","IBCNBLE1",67,0)
 D SYMTXT($P(IB0,U,12),1)
"RTN","IBCNBLE1",68,0)
 D SYMTXT($P(IB0,U,12),2)
"RTN","IBCNBLE1",69,0)
 ;
"RTN","IBCNBLE1",70,0)
 ; If the IIV Status ien changed from what it once was, then display the
"RTN","IBCNBLE1",71,0)
 ; Prior Status line
"RTN","IBCNBLE1",72,0)
 I ORIGSYMI'=$P(IB0,U,12) D
"RTN","IBCNBLE1",73,0)
 . I $P(IB0,U,12) D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",74,0)
 . S IBL="Prior Status: "
"RTN","IBCNBLE1",75,0)
 . S IBY=ORIGSYME
"RTN","IBCNBLE1",76,0)
 . I IBY="",ORIGSYMS'="*" S IBY="No problems identified, Awaiting electronic processing"
"RTN","IBCNBLE1",77,0)
 . I ORIGSYMS="*" S IBY="Manually verified, No eIV activity at this time"
"RTN","IBCNBLE1",78,0)
 . S IBLINE=$$SETL^IBCNBLE("",IBY,IBL,18,80)
"RTN","IBCNBLE1",79,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",80,0)
 . D SYMTXT(ORIGSYMI,1)
"RTN","IBCNBLE1",81,0)
 . Q
"RTN","IBCNBLE1",82,0)
 ;
"RTN","IBCNBLE1",83,0)
 ; Display any existing EC errors
"RTN","IBCNBLE1",84,0)
 D ECERR
"RTN","IBCNBLE1",85,0)
 ;D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",86,0)
 ;
"RTN","IBCNBLE1",87,0)
 ; If the IIV Status was modified then refresh the visual display
"RTN","IBCNBLE1",88,0)
 I $G(EDITED) D UPDLN^IBCNBLL(IBBUFDA,"EDITED")
"RTN","IBCNBLE1",89,0)
BLDX ;
"RTN","IBCNBLE1",90,0)
 Q
"RTN","IBCNBLE1",91,0)
 ;
"RTN","IBCNBLE1",92,0)
SYMTXT(IEN,TYPE) ; Display the text from the IIV symbol file for this entry
"RTN","IBCNBLE1",93,0)
 ; TYPE=1 - Display Description from IIV Status Table file
"RTN","IBCNBLE1",94,0)
 ; TYPE=2 - Display Corrective Action from IIV Status Table file
"RTN","IBCNBLE1",95,0)
 NEW IBJ
"RTN","IBCNBLE1",96,0)
 I '$G(IEN) G SYMX
"RTN","IBCNBLE1",97,0)
 I '$P($G(^IBE(365.15,IEN,TYPE,0)),U,4) G SYMX
"RTN","IBCNBLE1",98,0)
 D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",99,0)
 S IBJ=0
"RTN","IBCNBLE1",100,0)
 F  S IBJ=$O(^IBE(365.15,IEN,TYPE,IBJ)) Q:'IBJ  D SET^IBCNBLE("  "_$G(^IBE(365.15,IEN,TYPE,IBJ,0)))
"RTN","IBCNBLE1",101,0)
SYMX ;
"RTN","IBCNBLE1",102,0)
 Q
"RTN","IBCNBLE1",103,0)
 ;
"RTN","IBCNBLE1",104,0)
ECERR ; Display the Eligibility Communicator Error data from the
"RTN","IBCNBLE1",105,0)
 ; response file if it exists
"RTN","IBCNBLE1",106,0)
 ;
"RTN","IBCNBLE1",107,0)
 NEW RESP,RESPDATA,ERRTXT,IBY,IBLINE,ERRDATA,FUTDT,TQIEN,IBERR,IBCT
"RTN","IBCNBLE1",108,0)
 S RESP=$O(^IBCN(365,"AF",IBBUFDA,""),-1)
"RTN","IBCNBLE1",109,0)
 I 'RESP G ECERRX
"RTN","IBCNBLE1",110,0)
 S RESPDATA=$G(^IBCN(365,RESP,1))
"RTN","IBCNBLE1",111,0)
 S ERRTXT=$P($G(^IBCN(365,RESP,4)),U,1)
"RTN","IBCNBLE1",112,0)
 S TQIEN=+$P($G(^IBCN(365,RESP,0)),U,5)    ; Trans Queue file ien
"RTN","IBCNBLE1",113,0)
 S FUTDT=$P($G(^IBCN(365.1,TQIEN,0)),U,9)  ; Future date to transmit
"RTN","IBCNBLE1",114,0)
 I '$P(RESPDATA,U,14),'$P(RESPDATA,U,15),ERRTXT="",'FUTDT G ECERRX
"RTN","IBCNBLE1",115,0)
 ;
"RTN","IBCNBLE1",116,0)
 ; At this point, we know there's something to get displayed
"RTN","IBCNBLE1",117,0)
 ;
"RTN","IBCNBLE1",118,0)
 ; Display section header
"RTN","IBCNBLE1",119,0)
 D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",120,0)
 S IBY=$J("",19)_"Eligibility Communicator Error Information"
"RTN","IBCNBLE1",121,0)
 D SET^IBCNBLE(IBY,"B") S IBLINE=""
"RTN","IBCNBLE1",122,0)
 ;
"RTN","IBCNBLE1",123,0)
 ; Display Error Condition data - field# 1.14
"RTN","IBCNBLE1",124,0)
 I $P(RESPDATA,U,14) D
"RTN","IBCNBLE1",125,0)
 . S ERRDATA=$G(^IBE(365.017,$P(RESPDATA,U,14),0))
"RTN","IBCNBLE1",126,0)
 . K IBERR
"RTN","IBCNBLE1",127,0)
 . S IBERR(1)=$P(ERRDATA,U,2)_" (Error Condition '"_$P(ERRDATA,U,1)_"')"
"RTN","IBCNBLE1",128,0)
 . D TXT^IBCNEUT7("IBERR")
"RTN","IBCNBLE1",129,0)
 . F IBCT=1:1:$O(IBERR(""),-1) D SET^IBCNBLE(IBERR(IBCT))
"RTN","IBCNBLE1",130,0)
 . Q
"RTN","IBCNBLE1",131,0)
 ;
"RTN","IBCNBLE1",132,0)
 ; Display Error Action data - field# 1.15
"RTN","IBCNBLE1",133,0)
 I $P(RESPDATA,U,15) D
"RTN","IBCNBLE1",134,0)
 . S ERRDATA=$G(^IBE(365.018,$P(RESPDATA,U,15),0))
"RTN","IBCNBLE1",135,0)
 . K IBERR
"RTN","IBCNBLE1",136,0)
 . S IBERR(1)=$P(ERRDATA,U,2)_" (Error Action '"_$P(ERRDATA,U,1)_"')"
"RTN","IBCNBLE1",137,0)
 . D TXT^IBCNEUT7("IBERR")
"RTN","IBCNBLE1",138,0)
 . F IBCT=1:1:$O(IBERR(""),-1) D SET^IBCNBLE(IBERR(IBCT))
"RTN","IBCNBLE1",139,0)
 . Q
"RTN","IBCNBLE1",140,0)
 ;
"RTN","IBCNBLE1",141,0)
 ; Display Error Text data - field# 4.01
"RTN","IBCNBLE1",142,0)
 I ERRTXT'="" D SET^IBCNBLE(ERRTXT)
"RTN","IBCNBLE1",143,0)
 ;
"RTN","IBCNBLE1",144,0)
 ; Display Date of Future Transmission - field# .09 in file 365.1
"RTN","IBCNBLE1",145,0)
 I FUTDT D
"RTN","IBCNBLE1",146,0)
 . S FUTDT=$$FMTE^XLFDT(FUTDT,"5Z")
"RTN","IBCNBLE1",147,0)
 . D SET^IBCNBLE(" ")
"RTN","IBCNBLE1",148,0)
 . S IBLINE="     Date of Future Transmission:  "_FUTDT
"RTN","IBCNBLE1",149,0)
 . D SET^IBCNBLE(IBLINE) S IBLINE=""
"RTN","IBCNBLE1",150,0)
 . Q
"RTN","IBCNBLE1",151,0)
ECERRX ;
"RTN","IBCNBLE1",152,0)
 Q
"RTN","IBCNBLE1",153,0)
 ;
"RTN","IBCNBLE1",154,0)
SIDERR(BUF,PIEN) ;
"RTN","IBCNBLE1",155,0)
 ; If Subscriber ID is required and SSN cannot be substituted
"RTN","IBCNBLE1",156,0)
 ; and buffer does not have a sub id -> return error
"RTN","IBCNBLE1",157,0)
 ; BUF = buffer IEN
"RTN","IBCNBLE1",158,0)
 ; PIEN = payer IEN
"RTN","IBCNBLE1",159,0)
 ;
"RTN","IBCNBLE1",160,0)
 N ERR,SID,APPIEN,SIDSTR,SIDREQ,SIDSSN
"RTN","IBCNBLE1",161,0)
 S ERR=""
"RTN","IBCNBLE1",162,0)
 S SID=$P($G(^IBA(355.33,BUF,60)),U,4)
"RTN","IBCNBLE1",163,0)
 I SID]"" G SIDX  ; Subscriber id is populated, further checking is moot
"RTN","IBCNBLE1",164,0)
 S APPIEN=$$PYRAPP^IBCNEUT5("IIV",PIEN)
"RTN","IBCNBLE1",165,0)
 S SIDSTR=$G(^IBE(365.12,PIEN,1,APPIEN,0))
"RTN","IBCNBLE1",166,0)
 S SIDREQ=$P(SIDSTR,U,8) I 'SIDREQ G SIDX  ; if sub id is not req'd - ok
"RTN","IBCNBLE1",167,0)
 S SIDSSN=$P(SIDSTR,U,9)
"RTN","IBCNBLE1",168,0)
 I 'SIDSSN S ERR=18 ; if ssn cannot be used -> B15 status (IEN = 18)
"RTN","IBCNBLE1",169,0)
SIDX Q ERR
"RTN","IBCNBLE1",170,0)
 ;
"RTN","IBCNBLE1",171,0)
PIDERR(BUF) ;
"RTN","IBCNBLE1",172,0)
 ; If patient is a dependent and patient id is missing return error
"RTN","IBCNBLE1",173,0)
 ; BUF - buffer ien
"RTN","IBCNBLE1",174,0)
 ;
"RTN","IBCNBLE1",175,0)
 N ERR,PREL
"RTN","IBCNBLE1",176,0)
 S ERR=""
"RTN","IBCNBLE1",177,0)
 S PREL=$P($G(^IBA(355.33,BUF,60)),U,14)
"RTN","IBCNBLE1",178,0)
 I PREL'=18,PREL'="",$P($G(^IBA(355.33,BUF,62)),U)="" S ERR=23
"RTN","IBCNBLE1",179,0)
 Q ERR
"RTN","IBCNEDE1")
0^2^B43189276^B40267278
"RTN","IBCNEDE1",1,0)
IBCNEDE1 ;DAOU/DAC - eIV INSURANCE BUFFER EXTRACT ;04-JUN-2002
"RTN","IBCNEDE1",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,416,438,435,467**;21-MAR-94;Build 11
"RTN","IBCNEDE1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEDE1",4,0)
 ;
"RTN","IBCNEDE1",5,0)
 ;**Program Description**
"RTN","IBCNEDE1",6,0)
 ; This routine loops through the insurance buffer and 
"RTN","IBCNEDE1",7,0)
 ; creates eIV transaction queue entries when approriate.
"RTN","IBCNEDE1",8,0)
 ; Periodically check for stop request for background task
"RTN","IBCNEDE1",9,0)
 ;
"RTN","IBCNEDE1",10,0)
 Q   ; no direct calls allowed
"RTN","IBCNEDE1",11,0)
 ;
"RTN","IBCNEDE1",12,0)
EN ; Loop through designated cross-references for updates
"RTN","IBCNEDE1",13,0)
 ; Insurance Buffer Extract
"RTN","IBCNEDE1",14,0)
 ;
"RTN","IBCNEDE1",15,0)
 N TODAYSDT,FRESHDAY,LOOPDT,IEN,OVRFRESH,FRESHDT
"RTN","IBCNEDE1",16,0)
 N DFN,PDOD,SRVICEDT,VERIFDDT,PAYERSTR,PAYERID,SYMBOL,PAYRNAME
"RTN","IBCNEDE1",17,0)
 N PIEN,PNIEN,TQIEN,TRIEN,TRSRVCDT,TQCRTDT,TRANSNO,DISYS
"RTN","IBCNEDE1",18,0)
 N ORIGINSR,ORGRPSTR,ORGRPNUM,ORGRPNAM,ORGSUBCR
"RTN","IBCNEDE1",19,0)
 N MAXCNT,CNT,ISYMBOLM,DATA1,DATA2,ORIG,SETSTR,ISYMBOL,IBCNETOT
"RTN","IBCNEDE1",20,0)
 N SIDDATA,SID,SIDACT,BSID,FDA,PASSBUF,SIDCNT,SIDARRAY
"RTN","IBCNEDE1",21,0)
 N TQDT,TQIENS,TQOK,STATIEN,PATID,MCAREFLG,INSNAME,PREL
"RTN","IBCNEDE1",22,0)
 ;
"RTN","IBCNEDE1",23,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(1) ; Returns buffer extract settings
"RTN","IBCNEDE1",24,0)
 I 'SETSTR Q                    ; Quit if extract is not active
"RTN","IBCNEDE1",25,0)
 S MAXCNT=$P(SETSTR,U,4)        ; Max # TQ entries that may be created
"RTN","IBCNEDE1",26,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNEDE1",27,0)
 ;
"RTN","IBCNEDE1",28,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1) ; System freshness days
"RTN","IBCNEDE1",29,0)
 ;
"RTN","IBCNEDE1",30,0)
 S CNT=0       ; Initialize count of TQ entries created
"RTN","IBCNEDE1",31,0)
 S IBCNETOT=0  ; Initialize count for periodic TaskMan check
"RTN","IBCNEDE1",32,0)
 ;
"RTN","IBCNEDE1",33,0)
 S LOOPDT="" ; Date used to loop throught the IB global
"RTN","IBCNEDE1",34,0)
 F  S LOOPDT=$O(^IBA(355.33,"AEST","E",LOOPDT)) Q:LOOPDT=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",35,0)
 . S IEN=""
"RTN","IBCNEDE1",36,0)
 . F  S IEN=$O(^IBA(355.33,"AEST","E",LOOPDT,IEN)) Q:IEN=""!(CNT=MAXCNT)  D  Q:$G(ZTSTOP)
"RTN","IBCNEDE1",37,0)
 .. ; Update count for periodic check
"RTN","IBCNEDE1",38,0)
 .. S IBCNETOT=IBCNETOT+1
"RTN","IBCNEDE1",39,0)
 .. ; Check for request to stop background job, periodically
"RTN","IBCNEDE1",40,0)
 .. I $D(ZTQUEUED),IBCNETOT#100=0,$$S^%ZTLOAD() S ZTSTOP=1 Q
"RTN","IBCNEDE1",41,0)
 .. ;
"RTN","IBCNEDE1",42,0)
 .. ; Get symbol, if symbol'=" " OR "!" then quit
"RTN","IBCNEDE1",43,0)
 .. S ISYMBOL=$$SYMBOL^IBCNBLL(IEN) ; Insurance buffer symbol
"RTN","IBCNEDE1",44,0)
 .. I (ISYMBOL'=" ")&(ISYMBOL'="!") Q
"RTN","IBCNEDE1",45,0)
 .. ;
"RTN","IBCNEDE1",46,0)
 .. ; Don't extract ePharmacy buffer entries - IB*2*435
"RTN","IBCNEDE1",47,0)
 .. I +$P($G(^IBA(355.33,IEN,0)),U,17) Q
"RTN","IBCNEDE1",48,0)
 .. ;
"RTN","IBCNEDE1",49,0)
 .. ; Get the eIV STATUS IEN and quit for response related errors
"RTN","IBCNEDE1",50,0)
 .. S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNEDE1",51,0)
 .. I ",11,12,15,"[(","_STATIEN_",") Q  ; Prevent update for response errors
"RTN","IBCNEDE1",52,0)
 .. ;
"RTN","IBCNEDE1",53,0)
 .. S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13) ; Freshness OvrRd flag
"RTN","IBCNEDE1",54,0)
 .. S DFN=$P($G(^IBA(355.33,IEN,60)),U,1) ; Patient DFN
"RTN","IBCNEDE1",55,0)
 .. Q:DFN=""
"RTN","IBCNEDE1",56,0)
 .. I $P($G(^DPT(DFN,0)),U,21) Q           ; Exclude if test patient
"RTN","IBCNEDE1",57,0)
 .. ;
"RTN","IBCNEDE1",58,0)
 .. S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1     ; Patient's date of death
"RTN","IBCNEDE1",59,0)
 .. S SRVICEDT=DT I PDOD S SRVICEDT=PDOD             ; Service Date
"RTN","IBCNEDE1",60,0)
 .. S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNEDE1",61,0)
 .. S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ; Payer String
"RTN","IBCNEDE1",62,0)
 .. S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ; Payer ID
"RTN","IBCNEDE1",63,0)
 .. S SYMBOL=+PAYERSTR                               ; Payer Symbol
"RTN","IBCNEDE1",64,0)
 .. I '$$PYRACTV^IBCNEDE7(PIEN) Q          ; Payer is not nationally active
"RTN","IBCNEDE1",65,0)
 .. ;
"RTN","IBCNEDE1",66,0)
 .. ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNEDE1",67,0)
 .. I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q
"RTN","IBCNEDE1",68,0)
 .. ;
"RTN","IBCNEDE1",69,0)
 .. D CLEAR^IBCNEUT4(IEN)                ; remove any existing symbol
"RTN","IBCNEDE1",70,0)
 .. ;
"RTN","IBCNEDE1",71,0)
 .. ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNEDE1",72,0)
 .. I (PAYERID="")!('PIEN) Q
"RTN","IBCNEDE1",73,0)
 .. ;
"RTN","IBCNEDE1",74,0)
 .. ; Update service date and freshness date based on payer's allowed
"RTN","IBCNEDE1",75,0)
 .. ;  date range
"RTN","IBCNEDE1",76,0)
 .. D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNEDE1",77,0)
 .. ;
"RTN","IBCNEDE1",78,0)
 .. ; Update service dates for inquiries to be transmitted
"RTN","IBCNEDE1",79,0)
 .. D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNEDE1",80,0)
 .. ;
"RTN","IBCNEDE1",81,0)
 .. ; allow only one MEDICARE transmission per patient
"RTN","IBCNEDE1",82,0)
 .. S INSNAME=$P($G(^IBA(355.33,IEN,20)),U)
"RTN","IBCNEDE1",83,0)
 .. I INSNAME["MEDICARE",$G(MCAREFLG(DFN)) Q
"RTN","IBCNEDE1",84,0)
 .. ;
"RTN","IBCNEDE1",85,0)
 .. ; set pat. relationship to "self" if it's blank
"RTN","IBCNEDE1",86,0)
 .. D SETREL(IEN)
"RTN","IBCNEDE1",87,0)
 .. ;
"RTN","IBCNEDE1",88,0)
 .. ; make sure that service type codes are set
"RTN","IBCNEDE1",89,0)
 .. I '+$G(^IBA(355.33,IEN,80)) D SETSTC^IBCNERTQ(IEN)
"RTN","IBCNEDE1",90,0)
 .. ;
"RTN","IBCNEDE1",91,0)
 .. ; If freshness override flag is set, file to TQ and quit
"RTN","IBCNEDE1",92,0)
 .. I OVRFRESH=1 D  Q
"RTN","IBCNEDE1",93,0)
 ... NEW DIE,X,Y,DISYS
"RTN","IBCNEDE1",94,0)
 ... S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNEDE1",95,0)
 ... S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ
"RTN","IBCNEDE1",96,0)
 .. ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNEDE1",97,0)
 .. ; not included
"RTN","IBCNEDE1",98,0)
 .. S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNEDE1",99,0)
 .. F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNEDE1",100,0)
 ... F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNEDE1",101,0)
 ....    I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNEDE1",102,0)
 .. I TQOK S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ
"RTN","IBCNEDE1",103,0)
 Q
"RTN","IBCNEDE1",104,0)
TQ ; Determine how many entries to create in the TQ file and set entries
"RTN","IBCNEDE1",105,0)
 ;
"RTN","IBCNEDE1",106,0)
 K SIDARRAY
"RTN","IBCNEDE1",107,0)
 S BSID=$P($G(^IBA(355.33,IEN,60)),U,4)   ; Subscriber ID from buffer
"RTN","IBCNEDE1",108,0)
 S PATID=$P($G(^IBA(355.33,IEN,62)),U)    ; Patient ID from buffer
"RTN","IBCNEDE1",109,0)
 S PREL=$P($G(^IBA(355.33,IEN,60)),U,14)  ; Pat. relationship from buffer
"RTN","IBCNEDE1",110,0)
 S SIDDATA=$$SIDCHK^IBCNEDE5(PIEN,DFN,BSID,.SIDARRAY,FRESHDT) ;determine rules to follow
"RTN","IBCNEDE1",111,0)
 S SIDACT=$P(SIDDATA,U,1)
"RTN","IBCNEDE1",112,0)
 S SIDCNT=$P(SIDDATA,U,2)                 ;Pull cnt of SIDs - shd be 1
"RTN","IBCNEDE1",113,0)
 ;
"RTN","IBCNEDE1",114,0)
 I SIDACT=3 D BUFF^IBCNEUT2(IEN,18) Q   ; update buffer w/ bang & quit - no subscriber id
"RTN","IBCNEDE1",115,0)
 I PREL'=18 D  Q
"RTN","IBCNEDE1",116,0)
 .I PATID="" D BUFF^IBCNEUT2(IEN,23) Q  ; update buffer w/ bang & quit - no patient id
"RTN","IBCNEDE1",117,0)
 .D SET(IEN,OVRFRESH,1,"") ; set TQ entry
"RTN","IBCNEDE1",118,0)
 .Q
"RTN","IBCNEDE1",119,0)
 I CNT+SIDCNT>MAXCNT Q
"RTN","IBCNEDE1",120,0)
 S SID=""
"RTN","IBCNEDE1",121,0)
 F  S SID=$O(SIDARRAY(SID)) Q:SID=""  D:$P(SID,"_")'="" SET(IEN,OVRFRESH,1,$P(SID,"_"))    ; set TQ w/ 'Pass Buffer' flag
"RTN","IBCNEDE1",122,0)
 I SIDACT=4 D SET(IEN,OVRFRESH,1,"")       ; set TQ w/ 'Pass Buffer' flag w/ blank subscriber ID
"RTN","IBCNEDE1",123,0)
 Q
"RTN","IBCNEDE1",124,0)
 ;
"RTN","IBCNEDE1",125,0)
RET ; Record Retrieval - Insurance Buffer
"RTN","IBCNEDE1",126,0)
 ;
"RTN","IBCNEDE1",127,0)
 S ORIGINSR=$P($G(^IBA(355.33,IEN,20)),U,1) ;Original ins. co.
"RTN","IBCNEDE1",128,0)
 S ORGRPSTR=$G(^IBA(355.33,IEN,40)) ; Original group string
"RTN","IBCNEDE1",129,0)
 S ORGRPNUM=$P(ORGRPSTR,U,3) ;Original group number
"RTN","IBCNEDE1",130,0)
 S ORGRPNAM=$P(ORGRPSTR,U,2) ;Original group name
"RTN","IBCNEDE1",131,0)
 S ORGSUBCR=$P($G(^IBA(355.33,IEN,60)),U,4) ; Original subscriber
"RTN","IBCNEDE1",132,0)
 ;
"RTN","IBCNEDE1",133,0)
 Q
"RTN","IBCNEDE1",134,0)
 ;
"RTN","IBCNEDE1",135,0)
SET(BUFFIEN,OVRFRESH,PASSBUF,SID1) ; Set data and check if set already
"RTN","IBCNEDE1",136,0)
 D RET
"RTN","IBCNEDE1",137,0)
 ;
"RTN","IBCNEDE1",138,0)
 ; The hard coded '1' in the 3rd piece of DATA1 sets the Transmission
"RTN","IBCNEDE1",139,0)
 ; status of file 365.1 to "Ready to Transmit"
"RTN","IBCNEDE1",140,0)
 S DATA1=DFN_U_PIEN_U_1_U_$G(BUFFIEN)_U_SID1_U_FRESHDT_U_PASSBUF ; SETTQ parameter 1
"RTN","IBCNEDE1",141,0)
 S $P(DATA1,U,8)=PATID     ; IB*2*416
"RTN","IBCNEDE1",142,0)
 ;
"RTN","IBCNEDE1",143,0)
 ;The hardcoded '1' in the 1st piece of DATA2 is the value to tell
"RTN","IBCNEDE1",144,0)
 ; the file 365.1 that it is the buffer extract.
"RTN","IBCNEDE1",145,0)
 S DATA2=1_U_"V"_U_SRVICEDT_U_"" ; SETTQ parameter 2
"RTN","IBCNEDE1",146,0)
 ;
"RTN","IBCNEDE1",147,0)
 S ORIG=ORIGINSR_U_ORGRPNUM_U_ORGRPNAM_U_ORGSUBCR ; SETTQ parameter 3
"RTN","IBCNEDE1",148,0)
 S TQIEN=$$SETTQ^IBCNEDE7(DATA1,DATA2,ORIG,$G(OVRFRESH)) ; File TQ entry
"RTN","IBCNEDE1",149,0)
 I TQIEN'="" S CNT=CNT+1 ; If filed increment count
"RTN","IBCNEDE1",150,0)
 ;
"RTN","IBCNEDE1",151,0)
 Q
"RTN","IBCNEDE1",152,0)
 ;
"RTN","IBCNEDE1",153,0)
SETREL(IEN) ; set pat. relationship to "self"
"RTN","IBCNEDE1",154,0)
 N DA,DIE,DR,X,Y
"RTN","IBCNEDE1",155,0)
 I $P($G(^IBA(355.33,IEN,60)),U,14)="" S DIE="^IBA(355.33,",DA=IEN,DR="60.14///SELF" D ^DIE
"RTN","IBCNEDE1",156,0)
 Q
"RTN","IBCNEHLQ")
0^3^B43557440^B43538189
"RTN","IBCNEHLQ",1,0)
IBCNEHLQ ;DAOU/ALA - HL7 RQI Message ;17-JUN-2002
"RTN","IBCNEHLQ",2,0)
 ;;2.0;INTEGRATED BILLING;**184,271,300,361,416,438,467**;21-MAR-94;Build 11
"RTN","IBCNEHLQ",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNEHLQ",4,0)
 ;
"RTN","IBCNEHLQ",5,0)
 ;**Program Description**
"RTN","IBCNEHLQ",6,0)
 ;  This routine builds an eIV Verification (RQI^I01) or
"RTN","IBCNEHLQ",7,0)
 ;  Identification (RQI^I03) request
"RTN","IBCNEHLQ",8,0)
 ;
"RTN","IBCNEHLQ",9,0)
 ;**Modified by  Date        Reason
"RTN","IBCNEHLQ",10,0)
 ;  DAOU/BHS     10/04/2002  Implementing Transmit SSN logic
"RTN","IBCNEHLQ",11,0)
 ;  DAOU/DB      03/19/2004  Stripped dashes from SSN (PID, GT1)
"RTN","IBCNEHLQ",12,0)
 ;
"RTN","IBCNEHLQ",13,0)
EN ;  Entry Point
"RTN","IBCNEHLQ",14,0)
 ;  Variables
"RTN","IBCNEHLQ",15,0)
 ;    HLFS = Field Separator
"RTN","IBCNEHLQ",16,0)
 ;    DFN = Patient IEN
"RTN","IBCNEHLQ",17,0)
 ;    PAYR = Payer IEN
"RTN","IBCNEHLQ",18,0)
 ;    BUFF = Buffer IEN
"RTN","IBCNEHLQ",19,0)
 ;    FRDT = Freshness Date
"RTN","IBCNEHLQ",20,0)
 ;
"RTN","IBCNEHLQ",21,0)
PID ; Patient Identification Segment
"RTN","IBCNEHLQ",22,0)
 N VAFSTR,ICN,NM,I,PID11,EDQ
"RTN","IBCNEHLQ",23,0)
 S VAFSTR=",1,7,8,11,",DFN=+$G(DFN)
"RTN","IBCNEHLQ",24,0)
 S PID=$$EN^VAFHLPID(DFN,VAFSTR,1)
"RTN","IBCNEHLQ",25,0)
 S PID11=$P(PID,HLFS,12)
"RTN","IBCNEHLQ",26,0)
 I $P(PID11,HLECH,2)="""""" D
"RTN","IBCNEHLQ",27,0)
 . S $P(PID11,HLECH,2)=""
"RTN","IBCNEHLQ",28,0)
 . S $P(PID,HLFS,12)=PID11
"RTN","IBCNEHLQ",29,0)
 ; Encode special characters into Name and address pieces
"RTN","IBCNEHLQ",30,0)
 ; **NOTE: If $$EN^VAFHLPID should, in the future, return more than 11 pieces than the lines below may
"RTN","IBCNEHLQ",31,0)
 ;         need to be modified as they currently expect 11 pieces to be returned.
"RTN","IBCNEHLQ",32,0)
 I DFN D
"RTN","IBCNEHLQ",33,0)
 . S NM("FILE")=2,NM("IENS")=DFN,NM("FIELD")=.01
"RTN","IBCNEHLQ",34,0)
 . S NM=$$HLNAME^XLFNAME(.NM,"",$E(HLECH)),NM=$S(NM]"":NM,1:HLQ)
"RTN","IBCNEHLQ",35,0)
 . S I=$L(NM,HLFS),NM=$$ENCHL7(NM),$P(PID,HLFS,6,5+I)=NM
"RTN","IBCNEHLQ",36,0)
 . S $P(PID,HLFS,12,99)=$$ENCHL7($P(PID,HLFS,12,99))
"RTN","IBCNEHLQ",37,0)
 . S ICN=$P($G(^DPT(DFN,"MPI")),U,1)
"RTN","IBCNEHLQ",38,0)
 . S $P(PID,HLFS,4)=ICN_HLECH_HLECH_HLECH_"USVHA"_HLECH_"NI"_HLECH_"~"_DFN_HLECH_HLECH_HLECH_"USVHA"_HLECH_"PI"_HLECH_$P($$SITE^VASITE,U,3)_HLECH
"RTN","IBCNEHLQ",39,0)
 . Q
"RTN","IBCNEHLQ",40,0)
 S FRDT=$$HLDATE^HLFNC($G(FRDT))
"RTN","IBCNEHLQ",41,0)
 S $P(PID,HLFS,34)=FRDT
"RTN","IBCNEHLQ",42,0)
 Q
"RTN","IBCNEHLQ",43,0)
 ;
"RTN","IBCNEHLQ",44,0)
GT1 ;  Guarantor Segment
"RTN","IBCNEHLQ",45,0)
 N WHO,NM,IDOB,ISEX,SEX,RLIEN,PER,PLIEN,RDATA,IBSDATA,IBADDR
"RTN","IBCNEHLQ",46,0)
 ;
"RTN","IBCNEHLQ",47,0)
 S GT1=""
"RTN","IBCNEHLQ",48,0)
 I $G(QUERY)="I" Q
"RTN","IBCNEHLQ",49,0)
 ;
"RTN","IBCNEHLQ",50,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",51,0)
 I EXT=1 D
"RTN","IBCNEHLQ",52,0)
 . S WHO=$P($G(^IBA(355.33,BUFF,60)),U,5)
"RTN","IBCNEHLQ",53,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",54,0)
 . S NM=$P($G(^IBA(355.33,BUFF,60)),U,7),NM=$$NAME^IBCNEHLU(NM)
"RTN","IBCNEHLQ",55,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",56,0)
 . S NM=$$ENCHL7(NM)
"RTN","IBCNEHLQ",57,0)
 . S $P(GT1,HLFS,3)=NM_HLECH_HLECH_HLECH
"RTN","IBCNEHLQ",58,0)
 . S IDOB=$P($G(^IBA(355.33,BUFF,60)),U,8),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",59,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",60,0)
 . S $P(GT1,HLFS,2)=$$SCRUB($G(SUBID))_HLECH_HLECH_HLECH_HLECH_"HC"
"RTN","IBCNEHLQ",61,0)
 . Q
"RTN","IBCNEHLQ",62,0)
 ;
"RTN","IBCNEHLQ",63,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",64,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",65,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",66,0)
 . S WHO=$P($G(^DPT(DFN,.312,IRIEN,0)),U,6)
"RTN","IBCNEHLQ",67,0)
 . I WHO="v"!(WHO="") Q
"RTN","IBCNEHLQ",68,0)
 . S NM=$P($G(^DPT(DFN,.312,IRIEN,0)),U,17)
"RTN","IBCNEHLQ",69,0)
 . S NM=$$HLNAME^HLFNC(NM,HLECH)
"RTN","IBCNEHLQ",70,0)
 . S NM=$$ENCHL7(NM)
"RTN","IBCNEHLQ",71,0)
 . S $P(GT1,HLFS,3)=NM_HLECH_HLECH_HLECH
"RTN","IBCNEHLQ",72,0)
 . S IDOB=$P($G(^DPT(DFN,.312,IRIEN,3)),U,1),IDOB=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",73,0)
 . S $P(GT1,HLFS,8)=IDOB
"RTN","IBCNEHLQ",74,0)
 . S $P(GT1,HLFS,2)=$$SCRUB($G(SUBID))_HLECH_HLECH_HLECH_HLECH_"HC"
"RTN","IBCNEHLQ",75,0)
 . ;
"RTN","IBCNEHLQ",76,0)
 . S IBSDATA=$G(^DPT(DFN,.312,IRIEN,3))
"RTN","IBCNEHLQ",77,0)
 . S IBADDR=$$HLADDR^HLFNC($P(IBSDATA,U,6,7),$P(IBSDATA,U,8,10))
"RTN","IBCNEHLQ",78,0)
 . S $P(GT1,HLFS,5)=$$ENCHL7(IBADDR)
"RTN","IBCNEHLQ",79,0)
 . ;
"RTN","IBCNEHLQ",80,0)
 . D CHK
"RTN","IBCNEHLQ",81,0)
 . I $P(GT1,HLFS,8)=""&(IDOB'="") S $P(GT1,HLFS,8)=$$HLDATE^HLFNC(IDOB)
"RTN","IBCNEHLQ",82,0)
 . I $P(GT1,HLFS,9)=""&(ISEX'="") S $P(GT1,HLFS,9)=ISEX
"RTN","IBCNEHLQ",83,0)
 . I $P(GT1,HLFS,9)="",WHO="s" D
"RTN","IBCNEHLQ",84,0)
 .. S SEX=$P($G(^DPT(DFN,.312,IRIEN,3)),U,12) ; get policy holder sex
"RTN","IBCNEHLQ",85,0)
 .. I SEX="" S SEX=$P(^DPT(DFN,0),U,2),SEX=$S(SEX="M":"F",1:"M") ; if null, use alternative method
"RTN","IBCNEHLQ",86,0)
 .. S $P(GT1,HLFS,9)=SEX
"RTN","IBCNEHLQ",87,0)
 ;
"RTN","IBCNEHLQ",88,0)
 I GT1="" Q
"RTN","IBCNEHLQ",89,0)
 S $P(GT1,HLFS,1)=1
"RTN","IBCNEHLQ",90,0)
 S GT1="GT1"_HLFS_GT1
"RTN","IBCNEHLQ",91,0)
 Q
"RTN","IBCNEHLQ",92,0)
 ;
"RTN","IBCNEHLQ",93,0)
IN1 ;  Insurance Segment
"RTN","IBCNEHLQ",94,0)
 N EFFDT,EXPDT,PREL,ADMN,ADMDT,IENS
"RTN","IBCNEHLQ",95,0)
 S IN1=""
"RTN","IBCNEHLQ",96,0)
 ;
"RTN","IBCNEHLQ",97,0)
 ;  If the data was extracted from Buffer get specifics from Buffer file
"RTN","IBCNEHLQ",98,0)
 I EXT=1 D
"RTN","IBCNEHLQ",99,0)
 . S PREL=$P($G(^IBA(355.33,BUFF,60)),U,14)
"RTN","IBCNEHLQ",100,0)
 . S $P(IN1,HLFS,2)=$S(PREL=18:$$SCRUB($G(SUBID)),PREL="":$$SCRUB($G(SUBID)),1:$$SCRUB($G(PATID)))
"RTN","IBCNEHLQ",101,0)
 . I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",102,0)
 .. S $P(IN1,HLFS,3)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,2))_HLECH_HLECH_HLECH_"USVHA"_HLECH_"VP"_HLECH
"RTN","IBCNEHLQ",103,0)
 .. S $P(IN1,HLFS,4)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,1))
"RTN","IBCNEHLQ",104,0)
 . S $P(IN1,HLFS,8)=$$ENCHL7($P($G(^IBA(355.33,BUFF,40)),U,3))
"RTN","IBCNEHLQ",105,0)
 . S $P(IN1,HLFS,9)=$$ENCHL7($P($G(^IBA(355.33,BUFF,40)),U,2))
"RTN","IBCNEHLQ",106,0)
 . S EFFDT=$P($G(^IBA(355.33,BUFF,60)),U,2),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",107,0)
 . S EXPDT=$P($G(^IBA(355.33,BUFF,60)),U,3),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",108,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",109,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",110,0)
 . S $P(IN1,HLFS,17)=$$PATREL(PREL)
"RTN","IBCNEHLQ",111,0)
 ;
"RTN","IBCNEHLQ",112,0)
 ;  If the data was extracted from non-Buffer, check Patient file
"RTN","IBCNEHLQ",113,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",114,0)
 . I IRIEN="" Q
"RTN","IBCNEHLQ",115,0)
 . I $$SCRUB($G(SUBID))'=$$SCRUB($P($G(^DPT(DFN,.312,IRIEN,0)),U,2)) Q
"RTN","IBCNEHLQ",116,0)
 . S EFFDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,8),EFFDT=$$HLDATE^HLFNC(EFFDT)
"RTN","IBCNEHLQ",117,0)
 . S EXPDT=$P($G(^DPT(DFN,.312,IRIEN,0)),U,4),EXPDT=$$HLDATE^HLFNC(EXPDT)
"RTN","IBCNEHLQ",118,0)
 . S $P(IN1,HLFS,12)=EFFDT
"RTN","IBCNEHLQ",119,0)
 . S $P(IN1,HLFS,13)=EXPDT
"RTN","IBCNEHLQ",120,0)
 . S PREL=$P($G(^DPT(DFN,.312,IRIEN,4)),U,3)
"RTN","IBCNEHLQ",121,0)
 . S $P(IN1,HLFS,2)=$S(PREL=18:$$SCRUB($G(SUBID)),PREL="":$$SCRUB($G(SUBID)),1:$$SCRUB($G(PATID)))
"RTN","IBCNEHLQ",122,0)
 . I PAYR'=$$FIND1^DIC(365.12,"","X","~NO PAYER") D
"RTN","IBCNEHLQ",123,0)
 .. S $P(IN1,HLFS,3)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,2))_HLECH_HLECH_HLECH_"USVHA"_HLECH_"VP"_HLECH
"RTN","IBCNEHLQ",124,0)
 .. S $P(IN1,HLFS,4)=$$ENCHL7($P(^IBE(365.12,PAYR,0),U,1))
"RTN","IBCNEHLQ",125,0)
 . S $P(IN1,HLFS,17)=$$PATREL(PREL)
"RTN","IBCNEHLQ",126,0)
 . S IENS=IRIEN_","_DFN_","
"RTN","IBCNEHLQ",127,0)
 . S $P(IN1,HLFS,8)=$$ENCHL7($$GET1^DIQ(2.312,IENS,21,"E"))
"RTN","IBCNEHLQ",128,0)
 . S $P(IN1,HLFS,9)=$$ENCHL7($$GET1^DIQ(2.312,IENS,20,"E"))
"RTN","IBCNEHLQ",129,0)
 ;
"RTN","IBCNEHLQ",130,0)
 I IN1="" Q
"RTN","IBCNEHLQ",131,0)
 ;
"RTN","IBCNEHLQ",132,0)
 I $P(IN1,HLFS,17)="" S $P(IN1,HLFS,17)=18
"RTN","IBCNEHLQ",133,0)
 S $P(IN1,HLFS,1)=1
"RTN","IBCNEHLQ",134,0)
 S IN1="IN1"_HLFS_IN1
"RTN","IBCNEHLQ",135,0)
 Q
"RTN","IBCNEHLQ",136,0)
 ;
"RTN","IBCNEHLQ",137,0)
NTE ;  NTE Segment
"RTN","IBCNEHLQ",138,0)
 ; New Variables
"RTN","IBCNEHLQ",139,0)
 N IBRES,K
"RTN","IBCNEHLQ",140,0)
 ; Initialize NTE segment string
"RTN","IBCNEHLQ",141,0)
 S NTE="*"
"RTN","IBCNEHLQ",142,0)
 ; Repeating Element Separator is tilde (~)
"RTN","IBCNEHLQ",143,0)
 S IBRES=$E(HL("ECH"),2)
"RTN","IBCNEHLQ",144,0)
 ; If data extracted from Buffer 
"RTN","IBCNEHLQ",145,0)
 I EXT=1 F K=1:1:20 D STC(K,$G(^IBA(355.33,BUFF,80)),IBRES,.NTE)
"RTN","IBCNEHLQ",146,0)
 ; If data not extracted from Buffer
"RTN","IBCNEHLQ",147,0)
 I EXT'=1 D
"RTN","IBCNEHLQ",148,0)
 .F K=1:1:11 D STC(K,$G(^IBE(350.9,1,60)),IBRES,.NTE)
"RTN","IBCNEHLQ",149,0)
 .F K=12:1:20 D STC(K,$G(^IBE(350.9,1,61)),IBRES,.NTE)
"RTN","IBCNEHLQ",150,0)
 .Q
"RTN","IBCNEHLQ",151,0)
 S NTE="NTE"_HLFS_HLFS_HLFS_NTE
"RTN","IBCNEHLQ",152,0)
 Q
"RTN","IBCNEHLQ",153,0)
 ;
"RTN","IBCNEHLQ",154,0)
STC(K,NTEREC,IBRES,NTE) ; add service type code to the string
"RTN","IBCNEHLQ",155,0)
 ; K - STC number
"RTN","IBCNEHLQ",156,0)
 ; NTEREC - string of NTC IENs
"RTN","IBCNEHLQ",157,0)
 ; IBRES - repeat separator (normally "~")
"RTN","IBCNEHLQ",158,0)
 ; NTE - result string, passed by reference
"RTN","IBCNEHLQ",159,0)
 ;
"RTN","IBCNEHLQ",160,0)
 N STCIEN
"RTN","IBCNEHLQ",161,0)
 S STCIEN=$P(NTEREC,U,K) I STCIEN="" Q
"RTN","IBCNEHLQ",162,0)
 S $P(NTE,IBRES,K)=$P($G(^IBE(365.013,STCIEN,0)),U,1)
"RTN","IBCNEHLQ",163,0)
 Q
"RTN","IBCNEHLQ",164,0)
 ;
"RTN","IBCNEHLQ",165,0)
CHK ;  Check for spouse or other information in the Patient Relation File
"RTN","IBCNEHLQ",166,0)
 ;  DGREL = Relationship (1=Self, 2=Spouse, 3-34,99=Other)
"RTN","IBCNEHLQ",167,0)
 NEW IEN,QFL
"RTN","IBCNEHLQ",168,0)
 S IEN="",RLIEN="",ISEX="",QFL=0
"RTN","IBCNEHLQ",169,0)
 F  S IEN=$O(^DGPR(408.12,"B",DFN,IEN)) Q:IEN=""  D  Q:QFL
"RTN","IBCNEHLQ",170,0)
 . S DGREL=$P($G(^DGPR(408.12,IEN,0)),U,2)
"RTN","IBCNEHLQ",171,0)
 . ;
"RTN","IBCNEHLQ",172,0)
 . ;  If person is veteran, quit
"RTN","IBCNEHLQ",173,0)
 . I DGREL=1 Q
"RTN","IBCNEHLQ",174,0)
 . ;
"RTN","IBCNEHLQ",175,0)
 . ;  If person is spouse, pick that record and quit
"RTN","IBCNEHLQ",176,0)
 . I WHO="s",DGREL=2 S RLIEN=IEN,QFL=1 Q
"RTN","IBCNEHLQ",177,0)
 . ;
"RTN","IBCNEHLQ",178,0)
 . ;  Otherwise it should be an 'other' dependent
"RTN","IBCNEHLQ",179,0)
 . S RLIEN=IEN
"RTN","IBCNEHLQ",180,0)
 ;
"RTN","IBCNEHLQ",181,0)
 I RLIEN="" Q
"RTN","IBCNEHLQ",182,0)
 ;
"RTN","IBCNEHLQ",183,0)
 ;  Check for Sex, SSN, DOB in INCOME PERSON File
"RTN","IBCNEHLQ",184,0)
 S PER=$P(^DGPR(408.12,RLIEN,0),U,3)
"RTN","IBCNEHLQ",185,0)
 I PER'["DGPR(408.13" Q
"RTN","IBCNEHLQ",186,0)
 S PLIEN=$P(PER,";",1)
"RTN","IBCNEHLQ",187,0)
 I PLIEN="" Q
"RTN","IBCNEHLQ",188,0)
 S RDATA=$G(^DGPR(408.13,PLIEN,0)),ISEX=$P(RDATA,U,2),IDOB=$P(RDATA,U,3)
"RTN","IBCNEHLQ",189,0)
 I $P(RDATA,U,4)'="" N DFN S DFN=$P(RDATA,U,4),ISEX=$P(^DPT(DFN,0),U,2),IDOB=$P(^DPT(DFN,0),U,3)
"RTN","IBCNEHLQ",190,0)
 Q
"RTN","IBCNEHLQ",191,0)
 ;
"RTN","IBCNEHLQ",192,0)
ENCHL7(STR) ; Encode HL7 escape seqs in data fields
"RTN","IBCNEHLQ",193,0)
 ;
"RTN","IBCNEHLQ",194,0)
 ; Input:
"RTN","IBCNEHLQ",195,0)
 ; STR = Field data possible containing HL7 encoding chars
"RTN","IBCNEHLQ",196,0)
 ;
"RTN","IBCNEHLQ",197,0)
 ; Output Values
"RTN","IBCNEHLQ",198,0)
 ; Fn returns string w/converted escape seqs
"RTN","IBCNEHLQ",199,0)
 ;
"RTN","IBCNEHLQ",200,0)
 N CHR,NEW,RPLC,CNT,LOOP
"RTN","IBCNEHLQ",201,0)
 ;
"RTN","IBCNEHLQ",202,0)
 ; Replace "\" "&" "~" "|" with \F\ \R\ \E\ \T\ respectively
"RTN","IBCNEHLQ",203,0)
 F CHR="\","&","~","|" S CNT=$L(STR,CHR) I CNT>1 D
"RTN","IBCNEHLQ",204,0)
 . S NEW=$P(STR,CHR)
"RTN","IBCNEHLQ",205,0)
 . S RPLC="\"_$TR(CHR,"|~\&","FRET")_"\"
"RTN","IBCNEHLQ",206,0)
 . F LOOP=2:1:CNT S NEW=NEW_RPLC_$P(STR,CHR,LOOP)
"RTN","IBCNEHLQ",207,0)
 . S STR=NEW
"RTN","IBCNEHLQ",208,0)
 ;
"RTN","IBCNEHLQ",209,0)
 Q STR
"RTN","IBCNEHLQ",210,0)
 ;
"RTN","IBCNEHLQ",211,0)
SCRUB(Z) ; remove all punctuation from the string and convert lowercase to uppercase
"RTN","IBCNEHLQ",212,0)
 ; IB*2*416 - used for subscriber and patient ID fields
"RTN","IBCNEHLQ",213,0)
 S Z=$$NOPUNCT^IBCEF(Z,1)
"RTN","IBCNEHLQ",214,0)
 S Z=$$UP^XLFSTR(Z)
"RTN","IBCNEHLQ",215,0)
SCRUBX ;
"RTN","IBCNEHLQ",216,0)
 Q Z
"RTN","IBCNEHLQ",217,0)
 ;
"RTN","IBCNEHLQ",218,0)
PATREL(REL) ; convert pat.relationship to insured from VistA to X12 and return X12 value
"RTN","IBCNEHLQ",219,0)
 ; REL - VistA value
"RTN","IBCNEHLQ",220,0)
 ; 
"RTN","IBCNEHLQ",221,0)
 ; VistA values of Self (18), Spouse (01), and Child (19) remain unchanged,
"RTN","IBCNEHLQ",222,0)
 ; anything else is converted to X12 value of Other Adult (34)
"RTN","IBCNEHLQ",223,0)
 ;
"RTN","IBCNEHLQ",224,0)
 Q $S($G(REL)="":"",".01.18.19."[("."_REL_"."):REL,1:34)
"RTN","IBCNERTQ")
0^1^B45372080^B44031881
"RTN","IBCNERTQ",1,0)
IBCNERTQ ;ALB/BI - Real-time Insurance Verification ;27-AUG-2010
"RTN","IBCNERTQ",2,0)
 ;;2.0;INTEGRATED BILLING;**438,467**;21-MAR-94;Build 11
"RTN","IBCNERTQ",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNERTQ",4,0)
 Q
"RTN","IBCNERTQ",5,0)
 ;
"RTN","IBCNERTQ",6,0)
TRIG(N2) ; Called by triggers in the INSURANCE BUFFER FILE Dictionary (355.33)
"RTN","IBCNERTQ",7,0)
 ; Fields:  20.01 - INSURANCE COMPANY NAME
"RTN","IBCNERTQ",8,0)
 ;          40.02 - GROUP NAME
"RTN","IBCNERTQ",9,0)
 ;          40.03 - GROUP NUMBER
"RTN","IBCNERTQ",10,0)
 ;          60.01 - PATIENT NAME
"RTN","IBCNERTQ",11,0)
 ;          60.04 - SUBSCRIBER ID
"RTN","IBCNERTQ",12,0)
 ;          60.08 - INSURED'S DOB
"RTN","IBCNERTQ",13,0)
 ;          62.01 - PATIENT ID
"RTN","IBCNERTQ",14,0)
 ;
"RTN","IBCNERTQ",15,0)
 ; To make a request for Real Time Verification
"RTN","IBCNERTQ",16,0)
 ; The following fields must contain data.
"RTN","IBCNERTQ",17,0)
 ;          20.01 - INSURANCE COMPANY NAME
"RTN","IBCNERTQ",18,0)
 ;          60.01 - PATIENT NAME
"RTN","IBCNERTQ",19,0)
 ;          60.04 - SUBSCRIBER ID (if patient is the subscriber)
"RTN","IBCNERTQ",20,0)
 ;          60.08 - INSURED'S DOB (if patient is not the subscriber)
"RTN","IBCNERTQ",21,0)
 ;          62.01 - PATIENT ID (if patient is not the subscriber)
"RTN","IBCNERTQ",22,0)
 ;
"RTN","IBCNERTQ",23,0)
 N TQIEN,TQN0,NODE20,NODE40,NODE60,QF,N4,PTID,SUBID,MGRP,DFN,PREL
"RTN","IBCNERTQ",24,0)
 N RESPONSE S RESPONSE=0
"RTN","IBCNERTQ",25,0)
 ; Protect the FileMan variables.
"RTN","IBCNERTQ",26,0)
 N DA,DC,DH,DI,DK,DL,DM,DP,DQ,DR,INI,MR,NX,UP
"RTN","IBCNERTQ",27,0)
 ;
"RTN","IBCNERTQ",28,0)
 I N2="" Q RESPONSE
"RTN","IBCNERTQ",29,0)
 S MGRP=$$MGRP^IBCNEUT5()
"RTN","IBCNERTQ",30,0)
 S NODE20=$G(^IBA(355.33,N2,20))
"RTN","IBCNERTQ",31,0)
 S NODE40=$G(^IBA(355.33,N2,40))
"RTN","IBCNERTQ",32,0)
 S NODE60=$G(^IBA(355.33,N2,60))
"RTN","IBCNERTQ",33,0)
 S PREL=$P(NODE60,U,14)
"RTN","IBCNERTQ",34,0)
 I $P(NODE20,U,1)="" Q RESPONSE                       ;INSURANCE COMPANY NAME
"RTN","IBCNERTQ",35,0)
 I $P(NODE60,U,1)="" Q RESPONSE                       ;PATIENT NAME
"RTN","IBCNERTQ",36,0)
 I $P(NODE60,U,4)="" Q RESPONSE                       ;SUBSCRIBER ID
"RTN","IBCNERTQ",37,0)
 ; exclude dependent inquiries w/o patient id or DOB
"RTN","IBCNERTQ",38,0)
 I PREL'=18,PREL'="",($P($G(^IBA(355.33,N2,62)),U)=""!($P(NODE60,U,8)="")) Q RESPONSE
"RTN","IBCNERTQ",39,0)
 ; exclude ePharmacy buffer entries
"RTN","IBCNERTQ",40,0)
 I $G(IBNCPDPELIG) Q RESPONSE  ; variable set in ^IBNCPDP3
"RTN","IBCNERTQ",41,0)
 I $P($G(^IBA(355.33,N2,0)),U,17)'="" Q RESPONSE
"RTN","IBCNERTQ",42,0)
 ;
"RTN","IBCNERTQ",43,0)
 ; prevent HMS entries from creating inquiries
"RTN","IBCNERTQ",44,0)
 N PTR S PTR=+$P($G(^IBA(355.33,N2,0)),U,3)
"RTN","IBCNERTQ",45,0)
 I PTR,$P($G(^IBE(355.12,PTR,0)),U,2)="HMS",PREL="" Q RESPONSE
"RTN","IBCNERTQ",46,0)
 ;
"RTN","IBCNERTQ",47,0)
 ; Quit if a waiting transaction exists in file #365.1
"RTN","IBCNERTQ",48,0)
 S PTID=$P(NODE60,U,1)
"RTN","IBCNERTQ",49,0)
 S SUBID=$P(NODE60,U,4)
"RTN","IBCNERTQ",50,0)
 S QF=0,N4=""
"RTN","IBCNERTQ",51,0)
 F  S N4=$O(^IBCN(365.1,"E",PTID,N4)) Q:N4=""  Q:QF=1  D
"RTN","IBCNERTQ",52,0)
 .S TQN0=$G(^IBCN(365.1,N4,0))
"RTN","IBCNERTQ",53,0)
 .; don't send again if there's an entry in the queue with the same subsciber id, same buffer entry, and
"RTN","IBCNERTQ",54,0)
 .; transmission status other than "response received" or "cancelled" 
"RTN","IBCNERTQ",55,0)
 .I $P(TQN0,U,5)=N2,".3.7."'[("."_$P(TQN0,U,4)_"."),$P(TQN0,U,16)=SUBID S QF=1 Q
"RTN","IBCNERTQ",56,0)
 .Q
"RTN","IBCNERTQ",57,0)
 I QF=1 Q RESPONSE                                    ; DON'T SEND AGAIN.
"RTN","IBCNERTQ",58,0)
 ;
"RTN","IBCNERTQ",59,0)
 ; Quit if there is a lock on patient and policy in file #355.33
"RTN","IBCNERTQ",60,0)
 L +^IBA(355.33,N2):1 I '$T Q RESPONSE                ; RECORD LOCKED By Another Process
"RTN","IBCNERTQ",61,0)
 ;
"RTN","IBCNERTQ",62,0)
 ;Store Service Type Codes in BUFFER file #355.33 just before sending to EIV TRANSMISSION QUEUE
"RTN","IBCNERTQ",63,0)
 D SETSTC(N2)
"RTN","IBCNERTQ",64,0)
 ;
"RTN","IBCNERTQ",65,0)
 ; Save and clear the dictionary 355.33 temporary error global, ^TMP("DIERR",$J)
"RTN","IBCNERTQ",66,0)
 K ^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",67,0)
 M ^TMP("IBCNERTQ","DIERR",$J)=^TMP("DIERR",$J)
"RTN","IBCNERTQ",68,0)
 K ^TMP("DIERR",$J)
"RTN","IBCNERTQ",69,0)
 ;
"RTN","IBCNERTQ",70,0)
 ; if buffer entry is currently being edited, set the flag and quit
"RTN","IBCNERTQ",71,0)
 I $G(^TMP("IBCNERTQ",$J,N2,"LOCK"))=1 S ^TMP("IBCNERTQ",$J,N2,"TRIGGER")=1 G ENDTRIG
"RTN","IBCNERTQ",72,0)
 ;
"RTN","IBCNERTQ",73,0)
 ; Sending to the EIV TRANSMISION QUEUE.
"RTN","IBCNERTQ",74,0)
 S TQIEN=$$IBE(N2) I 'TQIEN G ENDTRIG
"RTN","IBCNERTQ",75,0)
 ; Load and Send HL7 Message
"RTN","IBCNERTQ",76,0)
 S RESPONSE=$$PROCSEND(TQIEN)
"RTN","IBCNERTQ",77,0)
 ;
"RTN","IBCNERTQ",78,0)
ENDTRIG ; Final Clean Up.
"RTN","IBCNERTQ",79,0)
 ;
"RTN","IBCNERTQ",80,0)
 ; Restore the dictionary 355.33 temporary error global, ^TMP("DIERR",$J)
"RTN","IBCNERTQ",81,0)
 K ^TMP("DIERR",$J)
"RTN","IBCNERTQ",82,0)
 M ^TMP("DIERR",$J)=^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",83,0)
 K ^TMP("IBCNERTQ","DIERR",$J)
"RTN","IBCNERTQ",84,0)
 ;
"RTN","IBCNERTQ",85,0)
 ; Remove Dictionary Entry Lock.
"RTN","IBCNERTQ",86,0)
 L -^IBA(355.33,N2)
"RTN","IBCNERTQ",87,0)
 ;
"RTN","IBCNERTQ",88,0)
 Q RESPONSE
"RTN","IBCNERTQ",89,0)
 ;
"RTN","IBCNERTQ",90,0)
IBE(IEN) ; Insurance Buffer Extract
"RTN","IBCNERTQ",91,0)
 N SETSTR,FRESHDAY,ISYMBOL,STATIEN,OVRFRESH
"RTN","IBCNERTQ",92,0)
 N PDOD,SRVICEDT,FRESHDT,PAYERSTR,PAYERID,SYMBOL
"RTN","IBCNERTQ",93,0)
 N PIEN,INSNAME,MCAREFLG,TQDT,TQIENS,TQOK,QUEUED
"RTN","IBCNERTQ",94,0)
 N TQIEN,CNT,SIDCNT,MAXCNT
"RTN","IBCNERTQ",95,0)
 ;
"RTN","IBCNERTQ",96,0)
 S CNT=0
"RTN","IBCNERTQ",97,0)
 ;
"RTN","IBCNERTQ",98,0)
 S QUEUED=0
"RTN","IBCNERTQ",99,0)
 S SETSTR=$$SETTINGS^IBCNEDE7(1)     ;Returns buffer extract settings
"RTN","IBCNERTQ",100,0)
 I 'SETSTR Q QUEUED                  ;Quit if extract is not active
"RTN","IBCNERTQ",101,0)
 S MAXCNT=$P(SETSTR,U,4)             ;Max # TQ entries that may be created
"RTN","IBCNERTQ",102,0)
 S:MAXCNT="" MAXCNT=9999999999
"RTN","IBCNERTQ",103,0)
 ;
"RTN","IBCNERTQ",104,0)
 S FRESHDAY=$P($G(^IBE(350.9,1,51)),U,1)          ;System freshness days
"RTN","IBCNERTQ",105,0)
 ;
"RTN","IBCNERTQ",106,0)
 ; Get symbol, if symbol'=" " OR "!" OR "#" then quit
"RTN","IBCNERTQ",107,0)
 S ISYMBOL=$$SYMBOL^IBCNBLL(IEN)                  ;Insurance buffer symbol
"RTN","IBCNERTQ",108,0)
 I (ISYMBOL'=" ")&(ISYMBOL'="!")&(ISYMBOL'="#") Q QUEUED
"RTN","IBCNERTQ",109,0)
 ;
"RTN","IBCNERTQ",110,0)
 ; Get the eIV STATUS IEN and quit for response related errors
"RTN","IBCNERTQ",111,0)
 S STATIEN=+$P($G(^IBA(355.33,IEN,0)),U,12)
"RTN","IBCNERTQ",112,0)
 I ",11,12,15,"[(","_STATIEN_",") Q QUEUED        ;Prevent update for response errors
"RTN","IBCNERTQ",113,0)
 ;
"RTN","IBCNERTQ",114,0)
 S OVRFRESH=$P($G(^IBA(355.33,IEN,0)),U,13)       ;Freshness OvrRd flag
"RTN","IBCNERTQ",115,0)
 S DFN=$P($G(^IBA(355.33,IEN,60)),U,1)            ;Patient DFN
"RTN","IBCNERTQ",116,0)
 Q:DFN="" QUEUED
"RTN","IBCNERTQ",117,0)
 I $P($G(^DPT(DFN,0)),U,21) Q QUEUED              ;Exclude if test patient
"RTN","IBCNERTQ",118,0)
 ;
"RTN","IBCNERTQ",119,0)
 S PDOD=$P($G(^DPT(DFN,.35)),U,1)\1               ;Patient's date of death
"RTN","IBCNERTQ",120,0)
 S SRVICEDT=DT I PDOD S SRVICEDT=PDOD             ;Service Date
"RTN","IBCNERTQ",121,0)
 S FRESHDT=$$FMADD^XLFDT(SRVICEDT,-FRESHDAY)
"RTN","IBCNERTQ",122,0)
 S PAYERSTR=$$INSERROR^IBCNEUT3("B",IEN)          ;Payer String
"RTN","IBCNERTQ",123,0)
 S PAYERID=$P(PAYERSTR,U,3),PIEN=$P(PAYERSTR,U,2) ;Payer ID
"RTN","IBCNERTQ",124,0)
 S SYMBOL=+PAYERSTR                               ;Payer Symbol
"RTN","IBCNERTQ",125,0)
 I '$$PYRACTV^IBCNEDE7(PIEN) Q QUEUED             ;Payer is not nationally active
"RTN","IBCNERTQ",126,0)
 ;
"RTN","IBCNERTQ",127,0)
 ; If payer symbol is returned set symbol in Ins. Buffer and quit
"RTN","IBCNERTQ",128,0)
 I SYMBOL D BUFF^IBCNEUT2(IEN,SYMBOL) Q QUEUED
"RTN","IBCNERTQ",129,0)
 ;
"RTN","IBCNERTQ",130,0)
 D CLEAR^IBCNEUT4(IEN)                            ;Remove any existing symbol
"RTN","IBCNERTQ",131,0)
 ;
"RTN","IBCNERTQ",132,0)
 ; If no payer ID or no payer IEN is returned quit
"RTN","IBCNERTQ",133,0)
 I (PAYERID="")!('PIEN) Q QUEUED
"RTN","IBCNERTQ",134,0)
 ;
"RTN","IBCNERTQ",135,0)
 ; Update service date and freshness date based on payer's allowed
"RTN","IBCNERTQ",136,0)
 ;  date range
"RTN","IBCNERTQ",137,0)
 D UPDDTS^IBCNEDE6(PIEN,.SRVICEDT,.FRESHDT)
"RTN","IBCNERTQ",138,0)
 ;
"RTN","IBCNERTQ",139,0)
 ; Update service dates for inquiries to be transmitted
"RTN","IBCNERTQ",140,0)
 D TQUPDSV^IBCNEUT5(DFN,PIEN,SRVICEDT)
"RTN","IBCNERTQ",141,0)
 ;
"RTN","IBCNERTQ",142,0)
 ; Allow only one MEDICARE transmission per patient
"RTN","IBCNERTQ",143,0)
 S INSNAME=$P($G(^IBA(355.33,IEN,20)),U)
"RTN","IBCNERTQ",144,0)
 I INSNAME["MEDICARE",$G(MCAREFLG(DFN)) Q QUEUED
"RTN","IBCNERTQ",145,0)
 ; make sure that entries have pat. relationship set to "self"
"RTN","IBCNERTQ",146,0)
 D SETREL^IBCNEDE1(IEN)
"RTN","IBCNERTQ",147,0)
 ;
"RTN","IBCNERTQ",148,0)
 ; If freshness overide flag is set, file to TQ and quit
"RTN","IBCNERTQ",149,0)
 I OVRFRESH=1 D  Q $G(TQIEN)
"RTN","IBCNERTQ",150,0)
 . NEW DIE,X,Y,DISYS
"RTN","IBCNERTQ",151,0)
 . S FDA(355.33,IEN_",",.13)="" D FILE^DIE("","FDA") K FDA
"RTN","IBCNERTQ",152,0)
 . S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ^IBCNEDE1
"RTN","IBCNERTQ",153,0)
 ; Check the existing TQ entries to confirm that this buffer IEN is
"RTN","IBCNERTQ",154,0)
 ; not included
"RTN","IBCNERTQ",155,0)
 S (TQDT,TQIENS)="",TQOK=1
"RTN","IBCNERTQ",156,0)
 I ISYMBOL'="#" F  S TQDT=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT)) Q:'TQDT!'TQOK  D
"RTN","IBCNERTQ",157,0)
 . F  S TQIENS=$O(^IBCN(365.1,"AD",DFN,PIEN,TQDT,TQIENS)) Q:'TQIENS!'TQOK  D
"RTN","IBCNERTQ",158,0)
 .. I $P($G(^IBCN(365.1,TQIENS,0)),U,5)=IEN S TQOK=0 Q
"RTN","IBCNERTQ",159,0)
 I TQOK S:INSNAME["MEDICARE" MCAREFLG(DFN)=1 D TQ^IBCNEDE1
"RTN","IBCNERTQ",160,0)
 Q $G(TQIEN)
"RTN","IBCNERTQ",161,0)
 ;
"RTN","IBCNERTQ",162,0)
PROCSEND(TQIEN) ; Make call to PROC^IBCNEDEP to build the HL7 message.  Then send the Message.
"RTN","IBCNERTQ",163,0)
 N BUFF,CNT,D,D0,DFN,DIC,DIE,DILOCKTM,DISYS,EXT
"RTN","IBCNERTQ",164,0)
 N FRDT,GT1,HCT,HL,HLCDOM,HLCINS,HLCS,HLCSTCP,HLDOM,HLECH
"RTN","IBCNERTQ",165,0)
 N HLFS,HLHDR,HLINST,HLIP,HLN,HLP,HLPARAM,HLPROD,HLQ,HLRESLT
"RTN","IBCNERTQ",166,0)
 N HLSAN,HLTYPE,HLX,IBCNHLP,IEN,IHCNT,IN1,IRIEN,MSGID,TOT
"RTN","IBCNERTQ",167,0)
 N NRETR,NTRAN,OVRIDE,PATID,PAYR,PID,QUERY,RSTYPE,SRVDT,STA
"RTN","IBCNERTQ",168,0)
 N SUB4,SUBID,TRANSR,U,VACNTRY,VNUM,X,ZMID
"RTN","IBCNERTQ",169,0)
 ;
"RTN","IBCNERTQ",170,0)
 K ^TMP("HLS",$J)
"RTN","IBCNERTQ",171,0)
 S IEN=TQIEN
"RTN","IBCNERTQ",172,0)
 I $D(DT)=0 N DT S DT=$$DT^XLFDT
"RTN","IBCNERTQ",173,0)
 S U="^",CNT=0,TOT=0,IHCNT=0
"RTN","IBCNERTQ",174,0)
 S QUERY=$P($G(^IBCN(365.1,IEN,0)),U,11)
"RTN","IBCNERTQ",175,0)
 I QUERY="V" S VNUM=3
"RTN","IBCNERTQ",176,0)
 I $D(VNUM)=0 Q 0
"RTN","IBCNERTQ",177,0)
 ;  Initialize HL7 variables protocol for Verifications
"RTN","IBCNERTQ",178,0)
 S IBCNHLP="IBCNE IIV RQV OUT"
"RTN","IBCNERTQ",179,0)
 D INIT^IBCNEHLO
"RTN","IBCNERTQ",180,0)
 D PROC^IBCNEDEP
"RTN","IBCNERTQ",181,0)
 D GENERATE^HLMA(IBCNHLP,"GM",1,.HLRESLT,"",.HLP)
"RTN","IBCNERTQ",182,0)
 ;  If not successful
"RTN","IBCNERTQ",183,0)
 I $P(HLRESLT,U,2)]"" D HLER^IBCNEDEQ Q 0
"RTN","IBCNERTQ",184,0)
 ;  If successful
"RTN","IBCNERTQ",185,0)
 D SCC^IBCNEDEQ
"RTN","IBCNERTQ",186,0)
 K ^TMP("HLS",$J)
"RTN","IBCNERTQ",187,0)
 ;
"RTN","IBCNERTQ",188,0)
 I $G(^TMP("IBCNEQUDTS",$J)) D
"RTN","IBCNERTQ",189,0)
 . S DA=IEN,DIE="^IBCN(365.1,",DR="3.01////^S X=$$NOW^XLFDT" D ^DIE
"RTN","IBCNERTQ",190,0)
 ;
"RTN","IBCNERTQ",191,0)
 Q 1
"RTN","IBCNERTQ",192,0)
 ;
"RTN","IBCNERTQ",193,0)
SETSTC(BUFF) ; set service type codes
"RTN","IBCNERTQ",194,0)
 N DIE,DA,DR,K,X,Y
"RTN","IBCNERTQ",195,0)
 I '+$G(BUFF) Q
"RTN","IBCNERTQ",196,0)
 S DR=""
"RTN","IBCNERTQ",197,0)
 ; Define Service Type Codes (STC) to be sent with Insurance Inquiry
"RTN","IBCNERTQ",198,0)
 S DIE="^IBA(355.33,",DA=BUFF
"RTN","IBCNERTQ",199,0)
 ; Store 11 DEFAULT STCs
"RTN","IBCNERTQ",200,0)
 F K=80.01:.01:80.11 S DR=DR_K_"////"_$P($G(^IBE(350.9,1,60)),U,K-80*100)_";"
"RTN","IBCNERTQ",201,0)
 ; Store up to 9 SITE SELECTED STCs, otherwise NULLs
"RTN","IBCNERTQ",202,0)
 F K=80.12:.01:80.2 S DR=DR_K_"////"_$P($G(^IBE(350.9,1,61)),U,K-80*100-11)_";"
"RTN","IBCNERTQ",203,0)
 S DR=$E(DR,1,$L(DR)-1)
"RTN","IBCNERTQ",204,0)
 D ^DIE
"RTN","IBCNERTQ",205,0)
 Q
"SEC","^DIC",365.15,365.15,0,"AUDIT")

"SEC","^DIC",365.15,365.15,0,"DD")
@
"SEC","^DIC",365.15,365.15,0,"DEL")
@
"SEC","^DIC",365.15,365.15,0,"LAYGO")
@
"SEC","^DIC",365.15,365.15,0,"RD")

"SEC","^DIC",365.15,365.15,0,"WR")

"VER")
8.0^22.0
"^DD",355.33,355.33,62.01,0)
PATIENT ID^F^^62;1^K:$L(X)>30!($L(X)<1) X
"^DD",355.33,355.33,62.01,.1)
PATIENT PRIMARY ID
"^DD",355.33,355.33,62.01,1,0)
^.1
"^DD",355.33,355.33,62.01,1,1,0)
^^TRIGGER^355.33^.16
"^DD",355.33,355.33,62.01,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(355.33,D0,0)):^(0),1:"") S X=$P(Y(1),U,16),X=X S DIU=X K Y S X=DIV S X=$$TRIG^IBCNERTQ(DA) S DIH=$G(^IBA(355.33,DIV(0),0)),DIV=X S $P(^(0),U,16)=DIV,DIH=355.33,DIG=.16 D ^DICR
"^DD",355.33,355.33,62.01,1,1,2)
Q
"^DD",355.33,355.33,62.01,1,1,"%D",0)
^^2^2^3111114^
"^DD",355.33,355.33,62.01,1,1,"%D",1,0)
Sets the  REAL TIME VERIFICATION (#.16) field to 1 when this record has 
"^DD",355.33,355.33,62.01,1,1,"%D",2,0)
been queued for real time verification.
"^DD",355.33,355.33,62.01,1,1,"CREATE VALUE")
S X=$$TRIG^IBCNERTQ(DA)
"^DD",355.33,355.33,62.01,1,1,"DELETE VALUE")
NO EFFECT
"^DD",355.33,355.33,62.01,1,1,"FIELD")
REAL TIME VERIFICATION
"^DD",355.33,355.33,62.01,3)
Answer must be 1-30 characters in length
"^DD",355.33,355.33,62.01,21,0)
^^3^3^3070716^
"^DD",355.33,355.33,62.01,21,1,0)
This is the patient's primary ID number for this insurance company.
"^DD",355.33,355.33,62.01,21,2,0)
Enter this field when the patient and the subscriber are different
"^DD",355.33,355.33,62.01,21,3,0)
and the patient has a unique ID number.
"^DD",355.33,355.33,62.01,"DT")
3111114
"^DD",365.15,365.15,0)
FIELD^^2^5
"^DD",365.15,365.15,0,"DDA")
N
"^DD",365.15,365.15,0,"DT")
3040607
"^DD",365.15,365.15,0,"IX","B",365.15,.01)

"^DD",365.15,365.15,0,"NM","IIV STATUS TABLE")

"^DD",365.15,365.15,0,"PT",355.33,.12)

"^DD",365.15,365.15,0,"VRPK")
IB
"^DD",365.15,365.15,.01,0)
CODE^RFO^^0;1^K:$L(X)>5!($L(X)<2) X
"^DD",365.15,365.15,.01,1,0)
^.1
"^DD",365.15,365.15,.01,1,1,0)
365.15^B
"^DD",365.15,365.15,.01,1,1,1)
S ^IBE(365.15,"B",$E(X,1,30),DA)=""
"^DD",365.15,365.15,.01,1,1,2)
K ^IBE(365.15,"B",$E(X,1,30),DA)
"^DD",365.15,365.15,.01,1,1,"%D",0)
^^1^1^3020612^
"^DD",365.15,365.15,.01,1,1,"%D",1,0)
Standard "B" cross-reference
"^DD",365.15,365.15,.01,2)
S Y(0)=Y S Y=$S($E(Y,1)="D":"Response Received, Inactive Policy",$E(Y)="B":"Problem Identified",$E(Y,1)="A":"Response Received, Active Policy",$E(Y,1)="Q":"Inquiry Sent, Awaiting Response",$E(Y,1)="U":"Response Received, Ambiguous Answer",1:"")
"^DD",365.15,365.15,.01,2.1)
S Y=$S($E(Y,1)="D":"Response Received, Inactive Policy",$E(Y)="B":"Problem Identified",$E(Y,1)="A":"Response Received, Active Policy",$E(Y,1)="Q":"Inquiry Sent, Awaiting Response",$E(Y,1)="U":"Response Received, Ambiguous Answer",1:"")
"^DD",365.15,365.15,.01,3)
Answer must be 2-5 characters in length
"^DD",365.15,365.15,.01,21,0)
^.001^5^5^3040430^^^^
"^DD",365.15,365.15,.01,21,1,0)
This is the internal representation of a given IIV status which may
"^DD",365.15,365.15,.01,21,2,0)
be found in the Insurance Buffer application.  This code takes
"^DD",365.15,365.15,.01,21,3,0)
into account that although several IIV statuses may use the same symbol 
"^DD",365.15,365.15,.01,21,4,0)
in the IIV status column in the Insurance Buffer list, each IIV status 
"^DD",365.15,365.15,.01,21,5,0)
may have a different meaning.
"^DD",365.15,365.15,.01,"DT")
3040430
"^DD",365.15,365.15,.02,0)
ASCII VALUE FOR IIV STATUS^NJ3,0^^0;2^K:+X'=X!(X>126)!(X<32)!(X?.E1"."1N.N) X
"^DD",365.15,365.15,.02,3)
Type a Number between 32 and 126, 0 Decimal Digits
"^DD",365.15,365.15,.02,21,0)
^.001^5^5^3040430^^^
"^DD",365.15,365.15,.02,21,1,0)
This field is the ASCII number representation for the character
"^DD",365.15,365.15,.02,21,2,0)
which should be displayed in the IIV status column in the insurance 
"^DD",365.15,365.15,.02,21,3,0)
buffer list for this entry.  The ASCII value is being stored instead of 
"^DD",365.15,365.15,.02,21,4,0)
the character itself because of the issues involved with storing the "?" 
"^DD",365.15,365.15,.02,21,5,0)
character as a valid symbol.
"^DD",365.15,365.15,.02,"DT")
3040227
"^DD",365.15,365.15,.03,0)
EXPAND ENTRY ACTION^S^1:EE Update is Allowed;0:EE Update is Not Allowed;^0;3^Q
"^DD",365.15,365.15,.03,3)
Can the Expand Entry action overwrite this IIV status?
"^DD",365.15,365.15,.03,21,0)
^^6^6^3050208^
"^DD",365.15,365.15,.03,21,1,0)
This field will determine whether or not the IIV status associated with
"^DD",365.15,365.15,.03,21,2,0)
a buffer entry may get overwritten by the Expand Entry action in
"^DD",365.15,365.15,.03,21,3,0)
the Insurance Buffer application.  Some IIV statuses should stay as they
"^DD",365.15,365.15,.03,21,4,0)
are and not get updated by Expand Entry and other symbols should
"^DD",365.15,365.15,.03,21,5,0)
get updated, so the user knows the current status of the buffer entry
"^DD",365.15,365.15,.03,21,6,0)
with regard to the IIV process.
"^DD",365.15,365.15,.03,"DT")
3030409
"^DD",365.15,365.15,1,0)
DESCRIPTION^365.152^^1;0
"^DD",365.15,365.15,1,21,0)
^.001^3^3^3040812^^^^
"^DD",365.15,365.15,1,21,1,0)
This is the explanation of what the IIV status means.  This
"^DD",365.15,365.15,1,21,2,0)
description will appear in the Expand Entry action of the 
"^DD",365.15,365.15,1,21,3,0)
Insurance Buffer application.
"^DD",365.15,365.15,2,0)
CORRECTIVE ACTION^365.17^^2;0
"^DD",365.15,365.15,2,21,0)
^^3^3^3040812^
"^DD",365.15,365.15,2,21,1,0)
This is the set of steps a user needs to follow in order to resolve this
"^DD",365.15,365.15,2,21,2,0)
IIV problem that is displayed on the Expand Entry screen in the Insurance 
"^DD",365.15,365.15,2,21,3,0)
Buffer.
"^DD",365.15,365.15,2,"DT")
3040607
"^DD",365.15,365.152,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",365.15,365.152,0,"DT")
3020603
"^DD",365.15,365.152,0,"NM","DESCRIPTION")

"^DD",365.15,365.152,0,"UP")
365.15
"^DD",365.15,365.152,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",365.15,365.152,.01,3)
Enter the explanation for this IIV status.
"^DD",365.15,365.152,.01,21,0)
^.001^3^3^3040812^^
"^DD",365.15,365.152,.01,21,1,0)
This is the explanation of what the IIV status means.  This description
"^DD",365.15,365.152,.01,21,2,0)
will appear in the Expand Entry action of the Insurance Buffer
"^DD",365.15,365.152,.01,21,3,0)
application.
"^DD",365.15,365.152,.01,"DT")
3040812
"^DD",365.15,365.17,0)
CORRECTIVE ACTION SUB-FIELD^^.01^1
"^DD",365.15,365.17,0,"DT")
3040607
"^DD",365.15,365.17,0,"NM","CORRECTIVE ACTION")

"^DD",365.15,365.17,0,"UP")
365.15
"^DD",365.15,365.17,.01,0)
CORRECTIVE ACTION^W^^0;1
"^DD",365.15,365.17,.01,3)
Enter the steps to follow to correct this issue in order to electronically confirm this insurance policy using IIV.
"^DD",365.15,365.17,.01,21,0)
^^3^3^3040812^
"^DD",365.15,365.17,.01,21,1,0)
This is the set of steps a user needs to follow in order to resolve this
"^DD",365.15,365.17,.01,21,2,0)
IIV problem that is displayed on the Expand Entry screen in the Insurance
"^DD",365.15,365.17,.01,21,3,0)
Buffer.
"^DD",365.15,365.17,.01,"DT")
3040812
"^DIC",365.15,365.15,0)
IIV STATUS TABLE^365.15
"^DIC",365.15,365.15,0,"GL")
^IBE(365.15,
"^DIC",365.15,365.15,"%",0)
^1.005^^0
"^DIC",365.15,365.15,"%D",0)
^^7^7^3030414^
"^DIC",365.15,365.15,"%D",1,0)
This file contains the various IIV statuses for entries in the Insurance 
"^DIC",365.15,365.15,"%D",2,0)
Buffer.  Also included are the symbols that should appear in the IIV 
"^DIC",365.15,365.15,"%D",3,0)
status column in the Insurance Buffer list, and a more detailed
"^DIC",365.15,365.15,"%D",4,0)
description of the status that is used in the Expand Entry option in the 
"^DIC",365.15,365.15,"%D",5,0)
Insurance Buffer.
"^DIC",365.15,365.15,"%D",6,0)
 
"^DIC",365.15,365.15,"%D",7,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",365.15,"B","IIV STATUS TABLE",365.15)

"BLD",8486,6)
^427
**END**
**END**
