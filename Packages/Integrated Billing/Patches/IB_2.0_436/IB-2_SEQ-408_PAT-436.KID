Released IB*2*436 SEQ #408
Extracted from mail message
**KIDS**:IB*2.0*436^

**INSTALL NAME**
IB*2.0*436
"BLD",8432,0)
IB*2.0*436^INTEGRATED BILLING^0^3101210^y
"BLD",8432,1,0)
^^1^1^3101004^
"BLD",8432,1,1,0)
HIPAA 5010 effort: enhancements 7, 9, and 11
"BLD",8432,4,0)
^9.64PA^399^2
"BLD",8432,4,355.93,0)
355.93
"BLD",8432,4,355.93,2,0)
^9.641^355.93^1
"BLD",8432,4,355.93,2,355.93,0)
IB NON/OTHER VA BILLING PROVIDER  (File-top level)
"BLD",8432,4,355.93,2,355.93,1,0)
^9.6411^.1^3
"BLD",8432,4,355.93,2,355.93,1,.01,0)
NAME
"BLD",8432,4,355.93,2,355.93,1,.02,0)
PROVIDER TYPE
"BLD",8432,4,355.93,2,355.93,1,.1,0)
STREET ADDRESS LINE 2
"BLD",8432,4,355.93,222)
y^y^p^^^^n^^n
"BLD",8432,4,355.93,224)

"BLD",8432,4,399,0)
399
"BLD",8432,4,399,2,0)
^9.641^399^1
"BLD",8432,4,399,2,399,0)
BILL/CLAIMS  (File-top level)
"BLD",8432,4,399,2,399,1,0)
^9.6411^232^1
"BLD",8432,4,399,2,399,1,232,0)
NON-VA FACILITY
"BLD",8432,4,399,222)
y^y^p^^^^n^^n
"BLD",8432,4,399,224)

"BLD",8432,4,"APDD",355.93,355.93)

"BLD",8432,4,"APDD",355.93,355.93,.01)

"BLD",8432,4,"APDD",355.93,355.93,.02)

"BLD",8432,4,"APDD",355.93,355.93,.1)

"BLD",8432,4,"APDD",399,399)

"BLD",8432,4,"APDD",399,399,232)

"BLD",8432,4,"B",355.93,355.93)

"BLD",8432,4,"B",399,399)

"BLD",8432,6.3)
31
"BLD",8432,"INI")
IB20A436
"BLD",8432,"INID")
^y^y
"BLD",8432,"INIT")
IB20P436
"BLD",8432,"KRN",0)
^9.67PA^779.2^20
"BLD",8432,"KRN",.4,0)
.4
"BLD",8432,"KRN",.401,0)
.401
"BLD",8432,"KRN",.402,0)
.402
"BLD",8432,"KRN",.402,"NM",0)
^9.68A^^
"BLD",8432,"KRN",.403,0)
.403
"BLD",8432,"KRN",.5,0)
.5
"BLD",8432,"KRN",.84,0)
.84
"BLD",8432,"KRN",3.6,0)
3.6
"BLD",8432,"KRN",3.8,0)
3.8
"BLD",8432,"KRN",9.2,0)
9.2
"BLD",8432,"KRN",9.8,0)
9.8
"BLD",8432,"KRN",9.8,"NM",0)
^9.68A^9^5
"BLD",8432,"KRN",9.8,"NM",5,0)
IBCBB11^^0^B32717107
"BLD",8432,"KRN",9.8,"NM",6,0)
IBCEP6^^0^B25055673
"BLD",8432,"KRN",9.8,"NM",7,0)
IBCEP8^^0^B118559850
"BLD",8432,"KRN",9.8,"NM",8,0)
IBCCCB^^0^B81507982
"BLD",8432,"KRN",9.8,"NM",9,0)
IBCEMU2^^0^B50579600
"BLD",8432,"KRN",9.8,"NM","B","IBCBB11",5)

"BLD",8432,"KRN",9.8,"NM","B","IBCCCB",8)

"BLD",8432,"KRN",9.8,"NM","B","IBCEMU2",9)

"BLD",8432,"KRN",9.8,"NM","B","IBCEP6",6)

"BLD",8432,"KRN",9.8,"NM","B","IBCEP8",7)

"BLD",8432,"KRN",19,0)
19
"BLD",8432,"KRN",19.1,0)
19.1
"BLD",8432,"KRN",101,0)
101
"BLD",8432,"KRN",409.61,0)
409.61
"BLD",8432,"KRN",409.61,"NM",0)
^9.68A^^
"BLD",8432,"KRN",771,0)
771
"BLD",8432,"KRN",779.2,0)
779.2
"BLD",8432,"KRN",870,0)
870
"BLD",8432,"KRN",8989.51,0)
8989.51
"BLD",8432,"KRN",8989.52,0)
8989.52
"BLD",8432,"KRN",8994,0)
8994
"BLD",8432,"KRN","B",.4,.4)

"BLD",8432,"KRN","B",.401,.401)

"BLD",8432,"KRN","B",.402,.402)

"BLD",8432,"KRN","B",.403,.403)

"BLD",8432,"KRN","B",.5,.5)

"BLD",8432,"KRN","B",.84,.84)

"BLD",8432,"KRN","B",3.6,3.6)

"BLD",8432,"KRN","B",3.8,3.8)

"BLD",8432,"KRN","B",9.2,9.2)

"BLD",8432,"KRN","B",9.8,9.8)

"BLD",8432,"KRN","B",19,19)

"BLD",8432,"KRN","B",19.1,19.1)

"BLD",8432,"KRN","B",101,101)

"BLD",8432,"KRN","B",409.61,409.61)

"BLD",8432,"KRN","B",771,771)

"BLD",8432,"KRN","B",779.2,779.2)

"BLD",8432,"KRN","B",870,870)

"BLD",8432,"KRN","B",8989.51,8989.51)

"BLD",8432,"KRN","B",8989.52,8989.52)

"BLD",8432,"KRN","B",8994,8994)

"BLD",8432,"QDEF")
^^^^NO^^^^NO^^YES
"BLD",8432,"QUES",0)
^9.62^^0
"BLD",8432,"REQB",0)
^9.611^3^3
"BLD",8432,"REQB",1,0)
IB*2.0*323^1
"BLD",8432,"REQB",2,0)
IB*2.0*349^1
"BLD",8432,"REQB",3,0)
IB*2.0*400^1
"BLD",8432,"REQB","B","IB*2.0*323",1)

"BLD",8432,"REQB","B","IB*2.0*349",2)

"BLD",8432,"REQB","B","IB*2.0*400",3)

"FIA",355.93)
IB NON/OTHER VA BILLING PROVIDER
"FIA",355.93,0)
^IBA(355.93,
"FIA",355.93,0,0)
355.93I
"FIA",355.93,0,1)
y^y^p^^^^n^^n
"FIA",355.93,0,10)

"FIA",355.93,0,11)

"FIA",355.93,0,"RLRO")

"FIA",355.93,0,"VR")
2.0^IB
"FIA",355.93,355.93)
1
"FIA",355.93,355.93,.01)

"FIA",355.93,355.93,.02)

"FIA",355.93,355.93,.1)

"FIA",399)
BILL/CLAIMS
"FIA",399,0)
^DGCR(399,
"FIA",399,0,0)
399I
"FIA",399,0,1)
y^y^p^^^^n^^n
"FIA",399,0,10)

"FIA",399,0,11)

"FIA",399,0,"RLRO")

"FIA",399,0,"VR")
2.0^IB
"FIA",399,399)
1
"FIA",399,399,232)

"INI")
IB20A436
"INIT")
IB20P436
"MBREQ")
0
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)

"PKG",200,20,"B",2,1)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321^2990406^2447
"PKG",200,22,1,"PAH",1,0)
436^3101210^1157
"PKG",200,22,1,"PAH",1,1,0)
^^1^1^3101210
"PKG",200,22,1,"PAH",1,1,1,0)
HIPAA 5010 effort: enhancements 7, 9, and 11
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
YES
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
7
"RTN","IB20A436")
0^^B428203^n/a
"RTN","IB20A436",1,0)
IB20A436 ;BP-OIFO/RBN - PRE-INSTALL FOR IB*2.0*436; 11/25/2008 ; 7/21/2010
"RTN","IB20A436",2,0)
 ;;2.0;INTEGRATED BILLING;**436**;21-MAR-94;Build 31
"RTN","IB20A436",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IB20A436",4,0)
 ;
"RTN","IB20A436",5,0)
 ; DESCRIPTION: This routine is the preinstall routine for IB*2.0*436.  It deletes
"RTN","IB20A436",6,0)
 ;              two triggers, one on filed #.01 and the other on field #.02 of
"RTN","IB20A436",7,0)
 ;              file #355.93
"RTN","IB20A436",8,0)
 ; 
"RTN","IB20A436",9,0)
 ; INPUTS     : None
"RTN","IB20A436",10,0)
 ; 
"RTN","IB20A436",11,0)
 ; OUTPUTS    : None
"RTN","IB20A436",12,0)
 ; 
"RTN","IB20A436",13,0)
 ; VARIABLES  : None
"RTN","IB20A436",14,0)
 ;              
"RTN","IB20A436",15,0)
 ; 
"RTN","IB20A436",16,0)
 ; GLOBALS      : ^IBA(355.93  - The VistA IB NON/OTHER VA BILLING PROVIDER file
"RTN","IB20A436",17,0)
 ;                       
"RTN","IB20A436",18,0)
 ; 
"RTN","IB20A436",19,0)
 ; FUNCTIONS    : None
"RTN","IB20A436",20,0)
 ; 
"RTN","IB20A436",21,0)
 ; SUBROUTINES  : None
"RTN","IB20A436",22,0)
 ; 
"RTN","IB20A436",23,0)
 ; 
"RTN","IB20A436",24,0)
 ; HISTORY      : Original version - 9 September 2010
"RTN","IB20A436",25,0)
 ; 
"RTN","IB20A436",26,0)
 ;
"RTN","IB20A436",27,0)
 ; 
"RTN","IB20A436",28,0)
EN ;
"RTN","IB20A436",29,0)
 D DELXRF
"RTN","IB20A436",30,0)
 Q
"RTN","IB20A436",31,0)
 ;
"RTN","IB20A436",32,0)
DELXRF ; Delete triggers 3 and 8 from file 355.9 fields .01 and .02 respectively.
"RTN","IB20A436",33,0)
 D DELIX^DDMOD(355.93,.01,3)
"RTN","IB20A436",34,0)
 D DELIX^DDMOD(355.93,.02,8)
"RTN","IB20A436",35,0)
 Q
"RTN","IB20A436",36,0)
 ;
"RTN","IB20P436")
0^^B74022170^n/a
"RTN","IB20P436",1,0)
IB20P436 ;ALB/PIJ - POST-INIT FOR IB*2.0*436; 11/25/2008 ; 7/21/2010
"RTN","IB20P436",2,0)
 ;;2.0;INTEGRATED BILLING;**436**;21-MAR-94;Build 31
"RTN","IB20P436",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IB20P436",4,0)
 ;
"RTN","IB20P436",5,0)
 ; DESCRIPTION: This routine is used to sychronize the names in the
"RTN","IB20P436",6,0)
 ;              file 355.93 with those in file #200 when both files
"RTN","IB20P436",7,0)
 ;              have the same NPI number. It also updates the 
"RTN","IB20P436",8,0)
 ;              TYPE OF PLAN file (#355.1).
"RTN","IB20P436",9,0)
 ; 
"RTN","IB20P436",10,0)
 ; INPUTS     : None
"RTN","IB20P436",11,0)
 ; 
"RTN","IB20P436",12,0)
 ; OUTPUTS    : 1) Outputs a report showing the results of the names
"RTN","IB20P436",13,0)
 ;              found in each file for a corresponding NPI.
"RTN","IB20P436",14,0)
 ;              2) Creates a new plan.
"RTN","IB20P436",15,0)
 ; 
"RTN","IB20P436",16,0)
 ; VARIABLES  : 
"RTN","IB20P436",17,0)
 ;              NPIIEN3  - The NPI number found in file 355.93
"RTN","IB20P436",18,0)
 ;              IEN2     - The IEN of the record corresponding
"RTN","IB20P436",19,0)
 ;                         to NPIIEN2 in file 200
"RTN","IB20P436",20,0)
 ;              IEN3     - The IEN of the record corresponding to
"RTN","IB20P436",21,0)
 ;                         NPIIEN3 in file 355.93       
"RTN","IB20P436",22,0)
 ;              NM200    - The user name as found in file 200
"RTN","IB20P436",23,0)
 ;              NM35593  - The user name as found in file #355.93
"RTN","IB20P436",24,0)
 ;              NMNEW    - The new updated name in #355.93 after the
"RTN","IB20P436",25,0)
 ;                         name field from #200 gets filed into #355.93
"RTN","IB20P436",26,0)
 ;              NPI      - The NPI of a user.
"RTN","IB20P436",27,0)
 ;              DIE,DA,
"RTN","IB20P436",28,0)
 ;              DR,DIC  - Standard FILEMAN variables used for DIC 
"RTN","IB20P436",29,0)
 ;                        and DIE calls
"RTN","IB20P436",30,0)
 ; 
"RTN","IB20P436",31,0)
 ; GLOBALS      : ^VA(200      - The VistA NEW PERSON file.
"RTN","IB20P436",32,0)
 ;                ^IBA(355.93  - The VistA IB NON/OTHER VA BILLING
"RTN","IB20P436",33,0)
 ;                               PROVIDER file
"RTN","IB20P436",34,0)
 ;                       
"RTN","IB20P436",35,0)
 ; 
"RTN","IB20P436",36,0)
 ; FUNCTIONS    : None
"RTN","IB20P436",37,0)
 ; 
"RTN","IB20P436",38,0)
 ; SUBROUTINES  : None
"RTN","IB20P436",39,0)
 ; 
"RTN","IB20P436",40,0)
 ; 
"RTN","IB20P436",41,0)
 ; HISTORY    : Original version - 18 May 2010
"RTN","IB20P436",42,0)
 ; 
"RTN","IB20P436",43,0)
 ;
"RTN","IB20P436",44,0)
 ;
"RTN","IB20P436",45,0)
 ; Save off the file 335.93 names (field # .01) for entries with NPIs
"RTN","IB20P436",46,0)
 ; This only needs to be done once.
"RTN","IB20P436",47,0)
 ;
"RTN","IB20P436",48,0)
 ; Loop through file #200 looking for NPI entries
"RTN","IB20P436",49,0)
 ;
"RTN","IB20P436",50,0)
 ; 
"RTN","IB20P436",51,0)
EN N NPIIEN3,IEN2,IEN3,DIC,NPNPRV,NAM,NPI,DIE,DA,DR,NPILIST3
"RTN","IB20P436",52,0)
 N DT,I,NM200,NM35593,NMNEW,X,Y,XNAM,XUSRSLT,XMER,%,DIFROM
"RTN","IB20P436",53,0)
 N IBFLPFLP
"RTN","IB20P436",54,0)
 ;
"RTN","IB20P436",55,0)
 S U="^"
"RTN","IB20P436",56,0)
 S IBFLPFLP=0
"RTN","IB20P436",57,0)
 S NMNEW=0
"RTN","IB20P436",58,0)
 ;
"RTN","IB20P436",59,0)
 ; The global ^XTMP will be translated, with one copy for the entire
"RTN","IB20P436",60,0)
 ; VistA production system at each site.  The structure of each top node
"RTN","IB20P436",61,0)
 ; shall follow the format:
"RTN","IB20P436",62,0)
 ;  ^XTMP(namespaced-subscript,$J,0)=purge date^create date^optional descriptive information
"RTN","IB20P436",63,0)
 ;  note: both dates will be in VA FileMan internal date format.
"RTN","IB20P436",64,0)
 ;  ^XTMP("IB_CLEAN-UP_RPT_355.93/200",$J,NPIIEN3)=IEN2_U_NM200_U_IEN3_U_NM35593_U_NMNEW
"RTN","IB20P436",65,0)
 ;  note: see VARIABLES section above for descriptions.
"RTN","IB20P436",66,0)
 ;
"RTN","IB20P436",67,0)
 S DT=$$DT^XLFDT
"RTN","IB20P436",68,0)
 K ^XTMP("IB_CLEAN-UP_RPT_355.93/200",$J)
"RTN","IB20P436",69,0)
 S ^XTMP("IB_CLEAN-UP_RPT_355.93/200",$J,0)=$$FMADD^XLFDT(DT,100)_U_DT_U_"IB_CLEAN-UP_RPT_355.93/200"
"RTN","IB20P436",70,0)
 ;
"RTN","IB20P436",71,0)
 S (NPIIEN3,IEN2,IEN3)=0
"RTN","IB20P436",72,0)
 F  S NPIIEN3=$O(^IBA(355.93,"NPI42",NPIIEN3)) Q:'NPIIEN3  D
"RTN","IB20P436",73,0)
 . S IEN3=$O(^IBA(355.93,"NPI42",NPIIEN3,""))
"RTN","IB20P436",74,0)
 . S IEN2=$$QI^XUSNPI(NPIIEN3)
"RTN","IB20P436",75,0)
 . F I=1:1:$L(IEN2,";") Q:($P($P(IEN2,";",I),U)="Individual_ID")
"RTN","IB20P436",76,0)
 . S IEN2=$P($P(IEN2,";",I),U,2)
"RTN","IB20P436",77,0)
 . ;
"RTN","IB20P436",78,0)
 . ; If we do not find a file 200 entry then get next entry
"RTN","IB20P436",79,0)
 . ; 
"RTN","IB20P436",80,0)
 . Q:'IEN2
"RTN","IB20P436",81,0)
 . S DIC=200
"RTN","IB20P436",82,0)
 . S DIC(0)="MOX"
"RTN","IB20P436",83,0)
 . S X=NPIIEN3
"RTN","IB20P436",84,0)
 . D ^DIC
"RTN","IB20P436",85,0)
 . Q:+Y'>0
"RTN","IB20P436",86,0)
 . S NM200=$P(Y,U,2)
"RTN","IB20P436",87,0)
 . S (X,Y)=""
"RTN","IB20P436",88,0)
 . S DIC=355.93
"RTN","IB20P436",89,0)
 . S DIC(0)="MOX"
"RTN","IB20P436",90,0)
 . S X=NPIIEN3
"RTN","IB20P436",91,0)
 . D ^DIC
"RTN","IB20P436",92,0)
 . Q:+Y'>0
"RTN","IB20P436",93,0)
 . S NM35593=$P(Y,U,2)
"RTN","IB20P436",94,0)
 . S (X,Y)=""
"RTN","IB20P436",95,0)
 . ;
"RTN","IB20P436",96,0)
 . ; Add the NPI and IENs to the 355.93 list
"RTN","IB20P436",97,0)
 . ;
"RTN","IB20P436",98,0)
 . L +^IBA(355.93,IEN3,0):10 Q:'$T
"RTN","IB20P436",99,0)
 . S DIE="^IBA(355.93,"
"RTN","IB20P436",100,0)
 . S DA=IEN3
"RTN","IB20P436",101,0)
 . S DR=".01////"_NM200
"RTN","IB20P436",102,0)
 . D ^DIE
"RTN","IB20P436",103,0)
 . L -^IBA(355.93,IEN3,0)
"RTN","IB20P436",104,0)
 . ;
"RTN","IB20P436",105,0)
 . S DIC=355.93
"RTN","IB20P436",106,0)
 . S DIC(0)="MOX"
"RTN","IB20P436",107,0)
 . S X=NPIIEN3
"RTN","IB20P436",108,0)
 . D ^DIC
"RTN","IB20P436",109,0)
 . Q:+Y'>0
"RTN","IB20P436",110,0)
 . S NMNEW=$P(Y,U,2)
"RTN","IB20P436",111,0)
 . S NPILIST3(NPIIEN3)=IEN2_U_NM200_U_IEN3_U_NM35593_U_NMNEW
"RTN","IB20P436",112,0)
 . S ^XTMP("IB_CLEAN-UP_RPT_355.93/200",$J,NPIIEN3)=IEN2_U_NM200_U_IEN3_U_NM35593_U_NMNEW
"RTN","IB20P436",113,0)
 D TOPENTRY
"RTN","IB20P436",114,0)
 D RIT
"RTN","IB20P436",115,0)
 D RPT
"RTN","IB20P436",116,0)
 D GET
"RTN","IB20P436",117,0)
 Q
"RTN","IB20P436",118,0)
 ;
"RTN","IB20P436",119,0)
RPT ;
"RTN","IB20P436",120,0)
 N X,Y,I,SP200,SP355OR,SPNPI,NPI
"RTN","IB20P436",121,0)
 S (IEN2,IEN3,NM200,NM35593,NMNEW,NPI,X,Y)=""
"RTN","IB20P436",122,0)
 D HDR2
"RTN","IB20P436",123,0)
 D HDR3
"RTN","IB20P436",124,0)
 F  S X=$O(NPILIST3(X)) Q:'X  D
"RTN","IB20P436",125,0)
 . S Y=NPILIST3(X)
"RTN","IB20P436",126,0)
 . S NPI=X
"RTN","IB20P436",127,0)
 . S IEN2=$P(Y,U,1)
"RTN","IB20P436",128,0)
 . S NM200=$P(Y,U,2)
"RTN","IB20P436",129,0)
 . S IEN3=$P(Y,U,3)
"RTN","IB20P436",130,0)
 . S NM35593=$P(Y,U,4)
"RTN","IB20P436",131,0)
 . S NMNEW=$P(Y,U,5)
"RTN","IB20P436",132,0)
 . ; 
"RTN","IB20P436",133,0)
 . ;
"RTN","IB20P436",134,0)
 . ; spaces for name #200
"RTN","IB20P436",135,0)
 . S SP200=$J("",(20-$L(NM200)))
"RTN","IB20P436",136,0)
 . ; spaces for name #355.93 original number
"RTN","IB20P436",137,0)
 . S SP355OR=$J("",(25-$L(NM35593)))
"RTN","IB20P436",138,0)
 . S SPNPI=$J("",(13-$L(NPI)))
"RTN","IB20P436",139,0)
 . S I=I+1
"RTN","IB20P436",140,0)
 . S NMNEW=$S(NM200=NM35593:"NO CHANGE",1:NMNEW)
"RTN","IB20P436",141,0)
 . S XUSRSLT(I)=NPI_SPNPI_NM200_SP200_NM35593_SP355OR_NMNEW
"RTN","IB20P436",142,0)
 S I=I+1
"RTN","IB20P436",143,0)
 S XUSRSLT(I)=" "
"RTN","IB20P436",144,0)
 S I=I+1
"RTN","IB20P436",145,0)
 S XUSRSLT(I)="                              **End of Report**"
"RTN","IB20P436",146,0)
 Q
"RTN","IB20P436",147,0)
 ;
"RTN","IB20P436",148,0)
HDR2 ;
"RTN","IB20P436",149,0)
 S I=1
"RTN","IB20P436",150,0)
 S XUSRSLT(I)="This report is to inform users of modifications that were made as"
"RTN","IB20P436",151,0)
 S XUSRSLT(I+1)="part of the post-install process of patch IB*2.0*436.  Due to "
"RTN","IB20P436",152,0)
 S XUSRSLT(I+2)="previous restrictions in VistA, practitioners could not exist in"
"RTN","IB20P436",153,0)
 S XUSRSLT(I+3)="the VA provider (New Person) and non-VA provider (IB/Non-VA/Other"
"RTN","IB20P436",154,0)
 S XUSRSLT(I+4)="Billing Provider) files with identical names and NPIs.  With the"
"RTN","IB20P436",155,0)
 S XUSRSLT(I+5)="release of patch IB*2.0*436 this restriction has been lifted."
"RTN","IB20P436",156,0)
 S XUSRSLT(I+6)=" "
"RTN","IB20P436",157,0)
 S XUSRSLT(I+7)="As part of the installation of this patch an automated process compared"
"RTN","IB20P436",158,0)
 S XUSRSLT(I+8)="the Provider Name values in these two files using the NPI as the"
"RTN","IB20P436",159,0)
 S XUSRSLT(I+9)="common field.  When differences were identified, the provider name"
"RTN","IB20P436",160,0)
 S XUSRSLT(I+10)="in the New Person File was copied to the provider name field of the"
"RTN","IB20P436",161,0)
 S XUSRSLT(I+11)="IB/Non-VA Other Billing Provider File."
"RTN","IB20P436",162,0)
 S XUSRSLT(I+12)=" "
"RTN","IB20P436",163,0)
 S XUSRSLT(I+13)="THIS REPORT IDENTIFIES THE CHANGES THAT WERE MADE TO YOUR SYSTEM."
"RTN","IB20P436",164,0)
 S XUSRSLT(I+14)=" "
"RTN","IB20P436",165,0)
 S XUSRSLT(I+15)="If you have been designated as the person at your facility responsible"
"RTN","IB20P436",166,0)
 S XUSRSLT(I+16)="for evaluating these changes, you should confirm that the updated"
"RTN","IB20P436",167,0)
 S XUSRSLT(I+17)="names in the non-VA provider file are correct."
"RTN","IB20P436",168,0)
 S XUSRSLT(I+18)=" "
"RTN","IB20P436",169,0)
 S XUSRSLT(I+19)=" "
"RTN","IB20P436",170,0)
 S I=I+19
"RTN","IB20P436",171,0)
 ;
"RTN","IB20P436",172,0)
 Q
"RTN","IB20P436",173,0)
 ;
"RTN","IB20P436",174,0)
HDR3 ;
"RTN","IB20P436",175,0)
 S I=I+1
"RTN","IB20P436",176,0)
 S XUSRSLT(I)="                              **Clean-up Report**"
"RTN","IB20P436",177,0)
 S I=I+1
"RTN","IB20P436",178,0)
 S XUSRSLT(I)=""
"RTN","IB20P436",179,0)
 S I=I+1
"RTN","IB20P436",180,0)
 S XUSRSLT(I)="NPI#         Name-#200           Name-#355.93             Updated Name-#355.93"
"RTN","IB20P436",181,0)
 S I=I+1
"RTN","IB20P436",182,0)
 S XUSRSLT(I)="#355.93      NEW PERSON          IB Non-VA Provider       IB Non-VA Provider"
"RTN","IB20P436",183,0)
 S I=I+1
"RTN","IB20P436",184,0)
 S XUSRSLT(I)="-------------------------------------------------------------------------------"
"RTN","IB20P436",185,0)
 Q
"RTN","IB20P436",186,0)
 ;
"RTN","IB20P436",187,0)
GET ; Get names of persons to notify
"RTN","IB20P436",188,0)
 N IEN200,XMY,XMTEXT,XMSUB,XMMG,I,X,ANSWER
"RTN","IB20P436",189,0)
 N IBKEY,IBIEN,XMDUZ,DIFROM
"RTN","IB20P436",190,0)
 ;
"RTN","IB20P436",191,0)
 S XMDUZ=DUZ,IBKEY="IB PROVIDER EDIT"
"RTN","IB20P436",192,0)
 S IBIEN="" F  S IBIEN=$O(^XUSEC(IBKEY,IBIEN)) Q:'IBIEN  S XMY(IBIEN)=""
"RTN","IB20P436",193,0)
 S XMY(.05)="" ; Include Postmaster at CBO's request.  
"RTN","IB20P436",194,0)
 ;
"RTN","IB20P436",195,0)
 S XMSUB="**CLEAN-UP REPORT** - #200 to #355.93"
"RTN","IB20P436",196,0)
 S XMTEXT="XUSRSLT("
"RTN","IB20P436",197,0)
 D ^XMD
"RTN","IB20P436",198,0)
 S:($D(XMMG)!$D(XMER))&('$D(^XTMP("IB436_POST",$J))) ^XTMP("IB436_POST",$J,0)=$$NOW^XLFDT()+10_"^"_$$NOW^XLFDT()_"^Post install IB436 errors"
"RTN","IB20P436",199,0)
 S:$D(XMMG) ^XTMP("IB436_POST",$J,"XMMG",XMDUZ)=XMMG
"RTN","IB20P436",200,0)
 S:$D(XMER) ^XTMP("IB436_POST",$J,"XMER",XMDUZ)=XMER
"RTN","IB20P436",201,0)
 Q
"RTN","IB20P436",202,0)
 ;
"RTN","IB20P436",203,0)
TOPENTRY ; Adds a new record to TYPE OF PLAN file (#355.1)
"RTN","IB20P436",204,0)
 ;FIELD     FIELD
"RTN","IB20P436",205,0)
 ;NUMBER    NAME
"RTN","IB20P436",206,0)
 ;------    -----
"RTN","IB20P436",207,0)
 ;
"RTN","IB20P436",208,0)
 ;.01       NAME (RF), [0;1]
"RTN","IB20P436",209,0)
 ;.02       ABBREVIATION (F), [0;2]
"RTN","IB20P436",210,0)
 ;.03       MAJOR CATEGORY (S), [0;3]
"RTN","IB20P436",211,0)
 ;.04       INACTIVE (S), [0;4]
"RTN","IB20P436",212,0)
 ;10        DESCRIPTION (Multiple-355.11), [10;0]
"RTN","IB20P436",213,0)
 ;           .01  DESCRIPTION (W), [0;1]
"RTN","IB20P436",214,0)
 ;
"RTN","IB20P436",215,0)
 ; Define data for new entry
"RTN","IB20P436",216,0)
 ;
"RTN","IB20P436",217,0)
 N NAME,ABRV,MAJCAT,INACT,DESC,IENS,FLAGS,FILE,FDA,FIELD,IEN
"RTN","IB20P436",218,0)
 ;
"RTN","IB20P436",219,0)
 S NAME="MEDIGAP (SUPPL - COINS, DED, PART B EXC)"
"RTN","IB20P436",220,0)
 S ABRV="MG+"
"RTN","IB20P436",221,0)
 S MAJCAT="MEDICARE SUPPLEMENTAL"
"RTN","IB20P436",222,0)
 S INACT=""
"RTN","IB20P436",223,0)
 S DESC(1)="This is a Standard MediGap plan purchased individually"
"RTN","IB20P436",224,0)
 S DESC(2)="as a supplemental policy and is designed to cover Medicare"
"RTN","IB20P436",225,0)
 S DESC(3)="deductibles and coinsurance amounts plus Part B excess charges."
"RTN","IB20P436",226,0)
 S DESC(4)="These policies are not available to any individuals not covered"
"RTN","IB20P436",227,0)
 S DESC(5)="by Medicare and would usually be purchased directly by the"
"RTN","IB20P436",228,0)
 S DESC(6)="individual and not thru an employer.  Benefits not covered"
"RTN","IB20P436",229,0)
 S DESC(7)="by Medicare are not covered by a supplemental.  Select this"
"RTN","IB20P436",230,0)
 S DESC(8)="plan type if plan covers Medicare Part B excess charges such"
"RTN","IB20P436",231,0)
 S DESC(9)="as Plan F or Plan G."
"RTN","IB20P436",232,0)
 ;
"RTN","IB20P436",233,0)
 S FLAGS="EK"
"RTN","IB20P436",234,0)
 S FDA(10,355.1,"?+1,",.01)=NAME
"RTN","IB20P436",235,0)
 S FDA(10,355.1,"?+1,",.02)=ABRV
"RTN","IB20P436",236,0)
 S FDA(10,355.1,"?+1,",.03)=MAJCAT
"RTN","IB20P436",237,0)
 S FDA(10,355.1,"?+1,",.04)=INACT
"RTN","IB20P436",238,0)
 ;
"RTN","IB20P436",239,0)
 ; Create the new entry
"RTN","IB20P436",240,0)
 ;
"RTN","IB20P436",241,0)
 D UPDATE^DIE(FLAGS,"FDA(10)","IEN","ERR1")
"RTN","IB20P436",242,0)
 ;
"RTN","IB20P436",243,0)
 S FILE=355.1
"RTN","IB20P436",244,0)
 S IENS=IEN(1)_","
"RTN","IB20P436",245,0)
 S FIELD=10
"RTN","IB20P436",246,0)
 S FLAGS="K"
"RTN","IB20P436",247,0)
 ;
"RTN","IB20P436",248,0)
 D WP^DIE(FILE,IENS,FIELD,FLAGS,"DESC","ERR2")
"RTN","IB20P436",249,0)
 Q
"RTN","IB20P436",250,0)
 ;
"RTN","IB20P436",251,0)
RIT ; Recompile input templates for billing screens
"RTN","IB20P436",252,0)
 NEW X,Y,DMAX
"RTN","IB20P436",253,0)
 S X="IBXS8P",Y=$$FIND1^DIC(.402,,"X","IB SCREEN8H","B"),DMAX=15000
"RTN","IB20P436",254,0)
 I Y D EN^DIEZ
"RTN","IB20P436",255,0)
 S X="IBXS8I",Y=$$FIND1^DIC(.402,,"X","IB SCREEN82","B"),DMAX=15000
"RTN","IB20P436",256,0)
 I Y D EN^DIEZ
"RTN","IB20P436",257,0)
RITX  ;
"RTN","IB20P436",258,0)
 Q
"RTN","IBCBB11")
0^5^B32717107^B25043010
"RTN","IBCBB11",1,0)
IBCBB11 ;ALB/AAS/OIFO-BP/PIJ - CONTINUATION OF EDIT CHECK ROUTINE ;12 Jun 2006  3:45 PM
"RTN","IBCBB11",2,0)
 ;;2.0;INTEGRATED BILLING;**51,343,363,371,395,392,401,384,400,436**;21-MAR-94;Build 31
"RTN","IBCBB11",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCBB11",4,0)
 ;
"RTN","IBCBB11",5,0)
WARN(IBDISP) ; Set warning in global
"RTN","IBCBB11",6,0)
 ; DISP = warning text to display
"RTN","IBCBB11",7,0)
 ;
"RTN","IBCBB11",8,0)
 N Z
"RTN","IBCBB11",9,0)
 S Z=+$O(^TMP($J,"BILL-WARN",""),-1)
"RTN","IBCBB11",10,0)
 I Z=0 S ^TMP($J,"BILL-WARN",1)=$J("",5)_"**Warnings**:",Z=1
"RTN","IBCBB11",11,0)
 S Z=Z+1,^TMP($J,"BILL-WARN",Z)=$J("",5)_IBDISP
"RTN","IBCBB11",12,0)
 Q
"RTN","IBCBB11",13,0)
 ;
"RTN","IBCBB11",14,0)
MULTDIV(IBIFN,IBND0) ; Check for multiple divisions on a bill ien IBIFN
"RTN","IBCBB11",15,0)
 ; IBND0 = 0-node of bill
"RTN","IBCBB11",16,0)
 ;
"RTN","IBCBB11",17,0)
 ;  Function returns 1 if more than 1 division found on bill
"RTN","IBCBB11",18,0)
 N Z,Z0,Z1,MULT
"RTN","IBCBB11",19,0)
 S MULT=0,Z1=$P(IBND0,U,22)
"RTN","IBCBB11",20,0)
 I Z1 D
"RTN","IBCBB11",21,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"RC",Z)) Q:'Z  S Z0=$P(^(Z,0),U,7) I Z0,Z0'=Z1 S MULT=1 Q
"RTN","IBCBB11",22,0)
 . S Z=0 F  S Z=$O(^DGCR(399,IBIFN,"CP",Z)) Q:'Z  S Z0=$P(^(Z,0),U,6) I Z0,Z0'=Z1 S MULT=2 Q
"RTN","IBCBB11",23,0)
 I 'Z1 S MULT=3
"RTN","IBCBB11",24,0)
 Q MULT
"RTN","IBCBB11",25,0)
 ;
"RTN","IBCBB11",26,0)
 ;; PREGNANCY DX CODES: V22**-V24**, V27**-V28**, 630**-677**
"RTN","IBCBB11",27,0)
 ;; FLU SHOTS PROCEDURE CODES: 90724, G0008, 90732, G0009
"RTN","IBCBB11",28,0)
 ;
"RTN","IBCBB11",29,0)
NPICHK ; Check for required NPIs
"RTN","IBCBB11",30,0)
 N IBNPIS,IBNONPI,IBNPIREQ,Z,IBNFI,IBTF,IIBWC
"RTN","IBCBB11",31,0)
 ;*** pij start IB*20*436 ***
"RTN","IBCBB11",32,0)
 N IBRATYPE,IBLEGAL
"RTN","IBCBB11",33,0)
 S (IBRATYPE,IBLEGAL)=""
"RTN","IBCBB11",34,0)
 S IBRATYPE=$P($G(^DGCR(399,IBIFN,0)),U,7)
"RTN","IBCBB11",35,0)
 ; Legal types for this use.
"RTN","IBCBB11",36,0)
 ;  7=NO FAULT INS.
"RTN","IBCBB11",37,0)
 ; 10=TORT FEASOR
"RTN","IBCBB11",38,0)
 ; 11=WORKERS' COMP.
"RTN","IBCBB11",39,0)
 S IBNFI=$O(^DGCR(399.3,"B","NO FAULT INS.",0)) S:'IBNFI IBNFI=7
"RTN","IBCBB11",40,0)
 S IBTF=$O(^DGCR(399.3,"B","TORT FEASOR",0)) S:'IBTF IBTF=10
"RTN","IBCBB11",41,0)
 S IBWC=$O(^DGCR(399.3,"B","WORKERS' COMP.",0)) S:'IBWC IBWC=11
"RTN","IBCBB11",42,0)
 ;
"RTN","IBCBB11",43,0)
 I IBRATYPE=IBNFI!(IBRATYPE=IBTF)!(IBRATYPE=IBWC) D
"RTN","IBCBB11",44,0)
 . ; One of the legal types - force local print
"RTN","IBCBB11",45,0)
 . S IBLEGAL=1
"RTN","IBCBB11",46,0)
 ;*** pij end ***
"RTN","IBCBB11",47,0)
 S IBNPIREQ=$$NPIREQ^IBCEP81(DT)  ; Check if NPI is required
"RTN","IBCBB11",48,0)
 ; Check providers
"RTN","IBCBB11",49,0)
 S IBNPIS=$$PROVNPI^IBCEF73A(IBIFN,.IBNONPI)
"RTN","IBCBB11",50,0)
 I $L(IBNONPI) F Z=1:1:$L(IBNONPI,U) D
"RTN","IBCBB11",51,0)
 . ;*** pij start IB*20*436 ***
"RTN","IBCBB11",52,0)
 . ;I IBNPIREQ S IBER=IBER_"IB"_(140+$P(IBNONPI,U,Z))_";" Q  ; If required, set error
"RTN","IBCBB11",53,0)
 . I IBNPIREQ,IBLEGAL="" S IBER=IBER_"IB"_(140+$P(IBNONPI,U,Z))_";" Q  ; If required, set error
"RTN","IBCBB11",54,0)
 . ; ;*** pij end ***
"RTN","IBCBB11",55,0)
 . D WARN("NPI for the "_$P("referring^operating^rendering^attending^supervising^^^^other",U,$P(IBNONPI,U,Z))_" provider has no value")  ; Else, set warning
"RTN","IBCBB11",56,0)
 ; Check organizations
"RTN","IBCBB11",57,0)
 S IBNONPI=""
"RTN","IBCBB11",58,0)
 S IBNPIS=$$ORGNPI^IBCEF73A(IBIFN,.IBNONPI)
"RTN","IBCBB11",59,0)
 I $L(IBNONPI) F Z=1:1:$L(IBNONPI,U) D
"RTN","IBCBB11",60,0)
 . ; Turn IB161, IB162 to a warning
"RTN","IBCBB11",61,0)
 . ;*** pij start IB*20*436 ***
"RTN","IBCBB11",62,0)
 . ;I IBNPIREQ,$P(IBNONPI,U,Z)=3 S IBER=IBER_"IB163;" Q
"RTN","IBCBB11",63,0)
 . I IBNPIREQ,$P(IBNONPI,U,Z)=3,IBLEGAL="" S IBER=IBER_"IB163;" Q
"RTN","IBCBB11",64,0)
 . ;*** pij end ***
"RTN","IBCBB11",65,0)
 . ; PRXM/KJH - Changed descriptions.
"RTN","IBCBB11",66,0)
 . D WARN("NPI for the "_$P("Service Facility^Non-VA Service Facility^Billing Provider",U,$P(IBNONPI,U,Z))_" has no value")  ; Else, set warning
"RTN","IBCBB11",67,0)
 Q
"RTN","IBCBB11",68,0)
 ;
"RTN","IBCBB11",69,0)
TAXCHK ; Check for required taxonomies
"RTN","IBCBB11",70,0)
 N IBTAXS,IBNOTAX,IBTAXREQ,Z
"RTN","IBCBB11",71,0)
 S IBTAXREQ=$$TAXREQ^IBCEP81(DT)  ; Check if taxonomy is required
"RTN","IBCBB11",72,0)
 ; Check providers
"RTN","IBCBB11",73,0)
 S IBTAXS=$$PROVTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCBB11",74,0)
 I $L(IBNOTAX) F Z=1:1:$L(IBNOTAX,U) D
"RTN","IBCBB11",75,0)
 . ; Only Referring, Rendering and Attending are currently sent to the payer
"RTN","IBCBB11",76,0)
 . I IBTAXREQ,"134"[$P(IBNOTAX,U,Z) S IBER=IBER_"IB"_(250+$P(IBNOTAX,U,Z))_";" Q  ; If required, set error
"RTN","IBCBB11",77,0)
 . D WARN("Taxonomy for the "_$P("referring^operating^rendering^attending^supervising^^^^other",U,$P(IBNOTAX,U,Z))_" provider has no value")  ; Else, set warning
"RTN","IBCBB11",78,0)
 ; Check organizations
"RTN","IBCBB11",79,0)
 S IBNOTAX=""
"RTN","IBCBB11",80,0)
 S IBTAXS=$$ORGTAX^IBCEF73A(IBIFN,.IBNOTAX)
"RTN","IBCBB11",81,0)
 I $L(IBNOTAX) F Z=1:1:$L(IBNOTAX,U) D
"RTN","IBCBB11",82,0)
 . ; Turn IB165, IB166 to a warning
"RTN","IBCBB11",83,0)
 . I IBTAXREQ,$P(IBNOTAX,U,Z)=3 S IBER=IBER_"IB167;" Q
"RTN","IBCBB11",84,0)
 . ; PRXM/KJH - Changed descriptions.
"RTN","IBCBB11",85,0)
 . D WARN("Taxonomy for the "_$P("Service Facility^Non-VA Service Facility^Billing Provider",U,$P(IBNOTAX,U,Z))_" has no value")  ; Else, set warning
"RTN","IBCBB11",86,0)
 Q
"RTN","IBCBB11",87,0)
 ;
"RTN","IBCBB11",88,0)
VALNDC(IBIFN,IBDFN) ; IB*2*363 - validate NDC# between PRESCRIPTION file (#52)
"RTN","IBCBB11",89,0)
 ; and IB BILL/CLAIMS PRESCRIPTION REFILL file (#362.4)
"RTN","IBCBB11",90,0)
 ; input - IBIFN = internal entry number of the billing record in the BILL/CLAIMS file (#399)
"RTN","IBCBB11",91,0)
 ;         IBDFN = internal entry number of patient record in the PATIENT file (#2)
"RTN","IBCBB11",92,0)
 N IBX,IBRXCOL
"RTN","IBCBB11",93,0)
 ; call program that determines if NDC differences exist
"RTN","IBCBB11",94,0)
 D VALNDC^IBEFUNC3(IBIFN,IBDFN,.IBRXCOL)
"RTN","IBCBB11",95,0)
 Q:'$D(IBRXCOL)
"RTN","IBCBB11",96,0)
 ; at least one RX on the IB record has an NDC discrepancy 
"RTN","IBCBB11",97,0)
 S IBX=0 F  S IBX=$O(IBRXCOL(IBX)) Q:'IBX  D WARN("NDC# on Bill does not equal the NDC# on Rx "_IBRXCOL(IBX))
"RTN","IBCBB11",98,0)
 Q
"RTN","IBCBB11",99,0)
 ;
"RTN","IBCBB11",100,0)
PRIIDCHK ; Check for required Pimarary ID (SSN/EIN)
"RTN","IBCBB11",101,0)
 ; If the provider is on the claim, he must have one
"RTN","IBCBB11",102,0)
 ; 
"RTN","IBCBB11",103,0)
 N IBI,IBZ
"RTN","IBCBB11",104,0)
 I $$TXMT^IBCEF4(IBIFN) D
"RTN","IBCBB11",105,0)
 . D F^IBCEF("N-ALL ATT/REND PROV SSN/EI","IBZ",,IBIFN)
"RTN","IBCBB11",106,0)
 . S IBI="" F  S IBI=$O(^DGCR(399,IBIFN,"PRV","B",IBI)) Q:IBI=""  D
"RTN","IBCBB11",107,0)
 .. I $P(IBZ,U,IBI)="" S IBER=IBER_$S(IBI=1:"IB151;",IBI=2:"IB152;",IBI=3!(IBI=4):"IB321;",IBI=5:"IB153;",IBI=9:"IB154;",1:"")
"RTN","IBCBB11",108,0)
 Q
"RTN","IBCBB11",109,0)
 ;
"RTN","IBCBB11",110,0)
RXNPI(IBIFN) ; check for multiple pharmacy npi's on the same bill
"RTN","IBCBB11",111,0)
 N IBORG,IBRXNPI,IBX,IBY
"RTN","IBCBB11",112,0)
 S IBORG=$$RXSITE^IBCEF73A(IBIFN,.IBORG)
"RTN","IBCBB11",113,0)
 S IBX=0 F  S IBX=$O(IBORG(IBX)) Q:'IBX  S IBY=0 F  S IBY=$O(IBORG(IBX,IBY)) Q:'IBY  S IBRXNPI(+IBORG(IBX,IBY))=""
"RTN","IBCBB11",114,0)
 S (IBX,IBY)=0 F  S IBX=$O(IBRXNPI(IBX)) Q:'IBX  S IBY=IBY+1
"RTN","IBCBB11",115,0)
 I IBY>1 D WARN("Bill has prescriptions resulting from "_IBY_" different NPI locations")
"RTN","IBCBB11",116,0)
 Q
"RTN","IBCBB11",117,0)
 ;
"RTN","IBCBB11",118,0)
ROICHK(IBIFN,IBDFN,IBINS) ; IB*2.0*384 - check prescriptions that contain the
"RTN","IBCBB11",119,0)
 ; special handling code U against the Claims Tracking ROI file (#356.25)
"RTN","IBCBB11",120,0)
 ; to see if an ROI is on file
"RTN","IBCBB11",121,0)
 ; input - IBIFN = IEN of the Bill/Claims file (#399)
"RTN","IBCBB11",122,0)
 ;         IBDFN = IEN of the patient
"RTN","IBCBB11",123,0)
 ;         IBINS = IEN of the payer insurance company (#36)
"RTN","IBCBB11",124,0)
 ; OUTPUT - 0 = no error        
"RTN","IBCBB11",125,0)
 ;          1 = a prescription is sensitive and there is no ROI on file
"RTN","IBCBB11",126,0)
 ;
"RTN","IBCBB11",127,0)
 N IBX,IBY0,IBRXIEN,IBDT,IBDRUG,ROIQ
"RTN","IBCBB11",128,0)
 S ROIQ=0
"RTN","IBCBB11",129,0)
 S IBX=0 F  S IBX=$O(^IBA(362.4,"C",IBIFN,IBX)) Q:'IBX  D
"RTN","IBCBB11",130,0)
 .S IBY0=^IBA(362.4,IBX,0),IBRXIEN=$P(IBY0,U,5) I 'IBRXIEN Q
"RTN","IBCBB11",131,0)
 .S IBDT=$P(IBY0,U,3),IBDRUG=$P(IBY0,U,4)
"RTN","IBCBB11",132,0)
 .D ZERO^IBRXUTL(IBDRUG)
"RTN","IBCBB11",133,0)
 .I ^TMP($J,"IBDRUG",IBDRUG,3)["U" D
"RTN","IBCBB11",134,0)
 .. I $$ROI^IBNCPDR4(IBDFN,IBDRUG,IBINS,IBDT) Q  ;ROI is on file
"RTN","IBCBB11",135,0)
 .. D WARN("ROI not on file for prescription "_$$RXAPI1^IBNCPUT1(IBRXIEN,.01,"E"))
"RTN","IBCBB11",136,0)
 .. S ROIQ=1
"RTN","IBCBB11",137,0)
ROICHKQ ;
"RTN","IBCBB11",138,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBCBB11",139,0)
 Q ROIQ
"RTN","IBCBB11",140,0)
 ;
"RTN","IBCCCB")
0^8^B81507982^B57002902
"RTN","IBCCCB",1,0)
IBCCCB ;ALB/ARH - COPY BILL FOR COB ; 2/13/06 10:46am
"RTN","IBCCCB",2,0)
 ;;2.0;INTEGRATED BILLING;**80,106,51,151,137,182,155,323,436**;21-MAR-94;Build 31
"RTN","IBCCCB",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCCCB",4,0)
 ;
"RTN","IBCCCB",5,0)
 ; Copy bill for COB w/out cancelling, update some flds
"RTN","IBCCCB",6,0)
 ; Primary->Secondary->Tertiary
"RTN","IBCCCB",7,0)
ASK ;
"RTN","IBCCCB",8,0)
 S IBCBCOPY=1 ; flag that copy function entered thru Copy COB option
"RTN","IBCCCB",9,0)
 ;
"RTN","IBCCCB",10,0)
 D KVAR S IBCAN=2,IBU="UNSPECIFIED"
"RTN","IBCCCB",11,0)
 ;
"RTN","IBCCCB",12,0)
 S IBX=$$PB^IBJTU2 S:+IBX=2 IBIFN=$P(IBX,U,2) I +IBX=1 S DFN=$P(IBX,U,2),IBV=1,IBAC=5 D DATE^IBCB
"RTN","IBCCCB",13,0)
 I '$G(IBIFN) G EXIT
"RTN","IBCCCB",14,0)
 ;
"RTN","IBCCCB",15,0)
 ; Restrict access to this process for REQUEST MRA bills in 2 Cases:
"RTN","IBCCCB",16,0)
 ; 1. No MRA EOB's on File for bill
"RTN","IBCCCB",17,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,13)=2,'$$CHK^IBCEMU1(IBIFN) D  G ASK
"RTN","IBCCCB",18,0)
 . W !!?4,"This bill is in a status of REQUEST MRA and it has No MRA EOB's"
"RTN","IBCCCB",19,0)
 . W !?4,"on file.  Access to this bill is restricted."
"RTN","IBCCCB",20,0)
 ;
"RTN","IBCCCB",21,0)
 ; 2. At least one MRA EOB appears on the MRA management worklist
"RTN","IBCCCB",22,0)
 I $P($G(^DGCR(399,IBIFN,0)),U,13)=2,$$MRAWL^IBCEMU2(IBIFN) D  G ASK
"RTN","IBCCCB",23,0)
 . W !!?4,"This bill is in a status of REQUEST MRA and it does appear on the"
"RTN","IBCCCB",24,0)
 . W !?4,"MRA Management Work List.  Please use the 'MRA Management Menu' options"
"RTN","IBCCCB",25,0)
 . W !?4,"for all processing related to this bill."
"RTN","IBCCCB",26,0)
 . Q
"RTN","IBCCCB",27,0)
 ;
"RTN","IBCCCB",28,0)
 ; If MRA is Activated and bill is in Entered/Not Reviewed status and current insurance Co. is WNR -->
"RTN","IBCCCB",29,0)
 ; ask if user wants to continue
"RTN","IBCCCB",30,0)
 I $$EDIACTV^IBCEF4(2),$P($G(^DGCR(399,IBIFN,0)),U,13)=1,$$MCRWNR^IBEFUNC(+$$CURR^IBCEF2(IBIFN)) D  I 'Y G ASK
"RTN","IBCCCB",31,0)
 . W !!?4,"This bill is in a status of ENTERED/NOT REVIEWED and current payer is "
"RTN","IBCCCB",32,0)
 . W !?4,"MEDICARE (WNR). No MRA has been requested for this bill."
"RTN","IBCCCB",33,0)
 . S DIR(0)="YA",DIR("B")="NO",DIR("A")="    Are you sure you want to continue to process this bill?: "
"RTN","IBCCCB",34,0)
 . D ^DIR K DIR
"RTN","IBCCCB",35,0)
 ;
"RTN","IBCCCB",36,0)
 ; Display related bills
"RTN","IBCCCB",37,0)
 D DSPRB^IBCCCB0(IBIFN)
"RTN","IBCCCB",38,0)
 ;
"RTN","IBCCCB",39,0)
CHKB ; Entrypoint-COB processing via EDI's COB Mgmt
"RTN","IBCCCB",40,0)
 ; Ask if final EOB was received for previous bill
"RTN","IBCCCB",41,0)
 I '$$FINALEOB^IBCCCB0(IBIFN) S IBSECHK=1
"RTN","IBCCCB",42,0)
 I $G(IBSECHK)=1,$$MCRONBIL^IBEFUNC(IBIFN) G EXIT
"RTN","IBCCCB",43,0)
 ;
"RTN","IBCCCB",44,0)
 ; Warn if previous bill not at least authorized
"RTN","IBCCCB",45,0)
 I '$$MCRONBIL^IBEFUNC(IBIFN) I '$$COBOK^IBCCCB0(IBIFN) G EXIT
"RTN","IBCCCB",46,0)
 ;
"RTN","IBCCCB",47,0)
CHKB1 ; Entry point for Automatic/Silent COB Processing.
"RTN","IBCCCB",48,0)
 ; No writes or reads can occur from this point forward if variable
"RTN","IBCCCB",49,0)
 ; IBSILENT=1.  Any and all error messages should be processed with
"RTN","IBCCCB",50,0)
 ; the ERROR procedure below.
"RTN","IBCCCB",51,0)
 ;
"RTN","IBCCCB",52,0)
 S IBX=$G(^DGCR(399,+IBIFN,0)),DFN=$P(IBX,U,2),IBDT=$P(IBX,U,3)\1,IBER=""
"RTN","IBCCCB",53,0)
 I IBCAN>1 D NOPTF^IBCB2 I 'IBAC1 D NOPTF1^IBCB2 G ASK1
"RTN","IBCCCB",54,0)
 ;
"RTN","IBCCCB",55,0)
 F IBI=0,"S","U1","M","MP","M1" S IB(IBI)=$G(^DGCR(399,IBIFN,IBI))
"RTN","IBCCCB",56,0)
 I IB(0)="" S IBER="Invalid Bill Number" D ERROR G ASK1
"RTN","IBCCCB",57,0)
 ;
"RTN","IBCCCB",58,0)
 ; check to see if the bill has been cancelled
"RTN","IBCCCB",59,0)
 I $P(IB("S"),U,16),$P(IB("S"),U,17) D  G ASK1
"RTN","IBCCCB",60,0)
 . N WHO
"RTN","IBCCCB",61,0)
 . S IBER="This bill was cancelled on "
"RTN","IBCCCB",62,0)
 . S IBER=IBER_$$FMTE^XLFDT($P(IB("S"),U,17),"1Z")_" by "
"RTN","IBCCCB",63,0)
 . S WHO="UNSPECIFIED"
"RTN","IBCCCB",64,0)
 . I $P(IB("S"),U,18) S WHO=$P($G(^VA(200,$P(IB("S"),U,18),0)),U,1)
"RTN","IBCCCB",65,0)
 . S IBER=IBER_WHO_"."
"RTN","IBCCCB",66,0)
 . D ERROR
"RTN","IBCCCB",67,0)
 . Q
"RTN","IBCCCB",68,0)
 ;
"RTN","IBCCCB",69,0)
 S IBCOB=$$COB^IBCEF(IBIFN),IBCOBN=$TR(IBCOB,"PSTA","12")
"RTN","IBCCCB",70,0)
 S IBMRAIO=+$$CURR^IBCEF2(IBIFN),IBMRAO=$$MCRWNR^IBEFUNC(IBMRAIO)
"RTN","IBCCCB",71,0)
 S IBNMOLD=$S(IBCOB="P":"Primary",IBCOB="S":"Secondary",IBCOB="T":"Tertiary",IBCOB="A":"Patient",1:"")_$S(IBMRAO:"-MRA Only",1:"")
"RTN","IBCCCB",72,0)
 S IBINSOLD=$G(^DIC(36,$S(IB("MP"):+IB("MP"),IBMRAO:IBMRAIO,1:0),0))
"RTN","IBCCCB",73,0)
 ;
"RTN","IBCCCB",74,0)
NEXTP ; If current bill=MEDICARE WNR and valid 'next payer', use same
"RTN","IBCCCB",75,0)
 ;  bill for new payer
"RTN","IBCCCB",76,0)
 ; If next valid 'payer' is ins co or MEDICARE WNR, create new bill
"RTN","IBCCCB",77,0)
 S IBCOBN=IBCOBN+1,IBNM=$S(IBCOBN=2:"Secondary Payer",IBCOBN=3:"Tertiary Payer",1:"")
"RTN","IBCCCB",78,0)
 ;
"RTN","IBCCCB",79,0)
 I IBNM="" S IBER=$P(IB(0),U,1)_" is a "_IBNMOLD_" bill, there is no next bill in the series." D ERROR G ASK1
"RTN","IBCCCB",80,0)
 ;
"RTN","IBCCCB",81,0)
 S IBX=+$P(IB("M1"),U,(4+IBCOBN)),IBY=$G(^DGCR(399,+IBX,0)),IBCOBIL(+IBIFN)=""
"RTN","IBCCCB",82,0)
 ;
"RTN","IBCCCB",83,0)
 I $P(IBY,U,13)=7 S IBER="The "_$P(IBNM," ",1)_" bill "_$P(IBY,U,1)_" has been cancelled." D ERROR S IBX=""
"RTN","IBCCCB",84,0)
 ;
"RTN","IBCCCB",85,0)
 I +IBX,$D(IBCOBIL(+IBX)) S IBER="Next bill in series can not be determined." D ERROR G ASK1
"RTN","IBCCCB",86,0)
 I +IBX S IBER=$P(IBNM," ",1)_" bill already defined for this series: "_$P(IBY,U,1) D ERROR S IBIFN=IBX G ASK1
"RTN","IBCCCB",87,0)
 ;
"RTN","IBCCCB",88,0)
 S IBINSN=$P(IB("M"),U,IBCOBN) I 'IBINSN S IBER="There is no "_IBNM_" for "_$P(IB(0),U,1)_"." D ERROR G ASK1
"RTN","IBCCCB",89,0)
 S IBINS=$G(^DIC(36,+IBINSN,0)) I IBINS="" S IBER="The "_IBNM_" for "_$P(IB(0),U,1)_" is not a valid Insurance Co." D ERROR G ASK1
"RTN","IBCCCB",90,0)
 ;
"RTN","IBCCCB",91,0)
 S IBMRA=0
"RTN","IBCCCB",92,0)
 I $P(IBINS,U,2)="N" S IBQ=0 D  G:IBQ NEXTP
"RTN","IBCCCB",93,0)
 . I $$MCRWNR^IBEFUNC(IBINSN) D  Q
"RTN","IBCCCB",94,0)
 .. ; Check if a valid tert ins if MCR WNR secondary
"RTN","IBCCCB",95,0)
 .. I IBCOBN'>2 D
"RTN","IBCCCB",96,0)
 ... N Z
"RTN","IBCCCB",97,0)
 ... S Z=+$P(IB("M"),U,IBCOBN+1)
"RTN","IBCCCB",98,0)
 ... I Z,$D(^DIC(36,Z,0)),$P(^(0),U,2)'="N" S IBMRA=1,IBNM=$P(IBNM," ")_"-MRA.Only"
"RTN","IBCCCB",99,0)
 .. I 'IBMRA S IBER="MEDICARE will not reimburse and no further valid insurance for bill" D ERROR S IBQ=1
"RTN","IBCCCB",100,0)
 . S IBER=$P(IB(0),U,1)_" "_IBNM_", "_$P(IBINS,U,1)_", will not Reimburse" D ERROR S IBQ=1
"RTN","IBCCCB",101,0)
 ;
"RTN","IBCCCB",102,0)
 ; If processing in silent mode, skip over the following reads
"RTN","IBCCCB",103,0)
 I $G(IBSILENT) G SKIP
"RTN","IBCCCB",104,0)
 ;
"RTN","IBCCCB",105,0)
 W !!
"RTN","IBCCCB",106,0)
 S DIR("?")="Enter Yes to "_$S('$G(IBMRAO):"create a new bill in the bill series for this care.  The new bill will be the "_$P(IBNM," ")_" bill ",1:"enter the MRA information and change the payer to the "_$P($P(IBNM,"-")," ")_" payer ")
"RTN","IBCCCB",107,0)
 S DIR("?")=DIR("?")_$S('IBMRA:"with the "_IBNM_" responsible for payment.",1:"and will request an MRA from MEDICARE.")
"RTN","IBCCCB",108,0)
 S DIR(0)="YO",DIR("A")=$S('$G(IBMRAO):"Copy "_$P(IB(0),U,1)_" for a bill to the ",1:"Change payer on bill "_$P(IB(0),U,1)_" to ")_IBNM_", "_$P(IBINS,U,1) D ^DIR K DIR I Y'=1 S IBSECHK=1 G ASK1
"RTN","IBCCCB",109,0)
 ;
"RTN","IBCCCB",110,0)
 W !
"RTN","IBCCCB",111,0)
 S IBQ=0
"RTN","IBCCCB",112,0)
 I '$G(IBMRAO) D  G:IBQ ASK1
"RTN","IBCCCB",113,0)
 . N Z
"RTN","IBCCCB",114,0)
 . S DIR("?")="Enter the amount of the payment from the payer of the "_IBNMOLD_" bill."
"RTN","IBCCCB",115,0)
 . S DIR("?")=DIR("?")_"  This will be added to the new bill as a prior payment and subtracted from the charges due for the new bill."
"RTN","IBCCCB",116,0)
 . S DIR("A")="Prior Payment from "_$P(IB(0),U,1)_" "_IBNMOLD_" Payer, "_$P(IBINSOLD,U,1)_": "
"RTN","IBCCCB",117,0)
 . S Z=$$EOBTOT^IBCEU1(IBIFN,$$COBN^IBCEF(IBIFN))
"RTN","IBCCCB",118,0)
 . S:Z DIR("B")=Z
"RTN","IBCCCB",119,0)
 . S DIR(0)="NOA^0:99999999:2"
"RTN","IBCCCB",120,0)
 . D ^DIR K DIR I Y=""!$D(DIRUT) S IBQ=1
"RTN","IBCCCB",121,0)
 . K IBCOB
"RTN","IBCCCB",122,0)
 . S IBCOB("U2",IBCOBN+2)=Y
"RTN","IBCCCB",123,0)
 . Q
"RTN","IBCCCB",124,0)
 ;
"RTN","IBCCCB",125,0)
SKIP ; Jump here if skipping over the preceeding reads
"RTN","IBCCCB",126,0)
 ;
"RTN","IBCCCB",127,0)
 ;** start IB*2*436 **
"RTN","IBCCCB",128,0)
 ;
"RTN","IBCCCB",129,0)
 ;IB2INSNO = Secondary Insurance Number - IEN 
"RTN","IBCCCB",130,0)
 ;IBGRPNO  = Group Insurance Number     - IEN 
"RTN","IBCCCB",131,0)
 ;IBTYNAME = TYPE OF PLAN name          - for example: MEDIGAP (SUPPLEMENTAL)
"RTN","IBCCCB",132,0)
 ;IBTYPLAN = TYPE OF PLAN               - IEN
"RTN","IBCCCB",133,0)
 ;IBPNCAT  = Plan category              - Part A or B
"RTN","IBCCCB",134,0)
 ;IBMDGFL  = Medigap Supplemental Flag
"RTN","IBCCCB",135,0)
 ;IBFRMTYP = Form type
"RTN","IBCCCB",136,0)
 ;
"RTN","IBCCCB",137,0)
 N IB2INSNO,IBGRPNO,IBMDGPFL,IBTYNAME,IBTYPLAN,IBINPAT,IBPNCAT,IBFRMTYP
"RTN","IBCCCB",138,0)
 S (IB2INSNO,IBGRPNO,IBTYNAME,IBTYPLAN,IBPNCAT,IBFRMTYP)=""
"RTN","IBCCCB",139,0)
 S IBMDGPFL=0
"RTN","IBCCCB",140,0)
 ;
"RTN","IBCCCB",141,0)
 ; Get secondary insurance information
"RTN","IBCCCB",142,0)
 I $D(^DGCR(399,IBIFN,"M")) D
"RTN","IBCCCB",143,0)
 . S IB2INSNO=+$P($G(^DGCR(399,IBIFN,"M")),U,2)  ; secondary insurance
"RTN","IBCCCB",144,0)
 . S IBGRPNO=+$P($G(^DGCR(399,IBIFN,"I2")),U,18) ; group plan number
"RTN","IBCCCB",145,0)
 . S IBTYPLAN=+$P($G(^IBA(355.3,IBGRPNO,0)),U,9) ; type of plan - IEN
"RTN","IBCCCB",146,0)
 . I (IBTYPLAN=0)!(IB2INSNO=0)!(IBGRPNO=0) Q
"RTN","IBCCCB",147,0)
 . S IBTYNAME=$P($G(^IBE(355.1,IBTYPLAN,0)),U,1) ; type of plan - name
"RTN","IBCCCB",148,0)
 . I IBTYNAME="MEDIGAP (SUPPLEMENTAL)" S IBMDGPFL=1 Q 
"RTN","IBCCCB",149,0)
 ;
"RTN","IBCCCB",150,0)
 S IBFRMTYP=$P($G(^DGCR(399,IBIFN,0)),U,19)  ; Form Type 2=1500, 3=UB
"RTN","IBCCCB",151,0)
 S IBPNCAT=$S(IBFRMTYP=2:"B",1:"A")    ; plan category - PART A or B
"RTN","IBCCCB",152,0)
 ;
"RTN","IBCCCB",153,0)
 ;
"RTN","IBCCCB",154,0)
 ; If payer is Medicare (WNR) update payer sequence and quit
"RTN","IBCCCB",155,0)
 I IBMRAO D  G END
"RTN","IBCCCB",156,0)
 . N IBPRTOT,IBTOTCHG,IBPTRESP
"RTN","IBCCCB",157,0)
 . S IBTOTCHG=0
"RTN","IBCCCB",158,0)
 . ;
"RTN","IBCCCB",159,0)
 . ; Get Total Charges from BILLS/CLAIMS (#399) file
"RTN","IBCCCB",160,0)
 . S IBTOTCHG=$P($G(^DGCR(399,IBIFN,"U1")),U,1)
"RTN","IBCCCB",161,0)
 . ;
"RTN","IBCCCB",162,0)
 . ; Calculate Patient Responsibility for Bill
"RTN","IBCCCB",163,0)
 . S IBPTRESP=$$PREOBTOT^IBCEU0(IBIFN)
"RTN","IBCCCB",164,0)
 . S IBINPAT=$$INPAT^IBCEF(IBIFN)     ;Inpat/Outpat Flag
"RTN","IBCCCB",165,0)
 . ;
"RTN","IBCCCB",166,0)
 . ; Process inpatients (see IB*2*436 RSD/flow chart for details)
"RTN","IBCCCB",167,0)
 . I IBINPAT D
"RTN","IBCCCB",168,0)
 . . I IBPNCAT="A" D  ; Plan type is A  (institutional claim)
"RTN","IBCCCB",169,0)
 . . . ;patient responsibility
"RTN","IBCCCB",170,0)
 . . . S IBPRTOT=IBTOTCHG-IBPTRESP
"RTN","IBCCCB",171,0)
 . . I IBPNCAT'="A" D   ; Other plan type   (Part B, professional claim)
"RTN","IBCCCB",172,0)
 . . . I 'IBMDGPFL D  ; Not MEDIGAP (SUPPLEMENTAL)
"RTN","IBCCCB",173,0)
 . . . . ;patient responsibility + Medicare unallowed amount (aka Medicare contr. adj.)
"RTN","IBCCCB",174,0)
 . . . . S IBPRTOT=IBTOTCHG-(IBPTRESP+$$MRACALC2^IBCEMU2(IBIFN))
"RTN","IBCCCB",175,0)
 . . . I IBMDGPFL D  ; MEDIGAP (SUPPLEMENTAL)
"RTN","IBCCCB",176,0)
 . . . . ;patient responsibility
"RTN","IBCCCB",177,0)
 . . . . S IBPRTOT=IBTOTCHG-IBPTRESP
"RTN","IBCCCB",178,0)
 . ;
"RTN","IBCCCB",179,0)
 . ; Process outpatients (see IB*2*436 RSD/flow chart for details)
"RTN","IBCCCB",180,0)
 . I 'IBINPAT  D  ; Outpatient processing
"RTN","IBCCCB",181,0)
 . . I IBMDGPFL D  ; MEDIGAP (SUPPLEMENTAL)
"RTN","IBCCCB",182,0)
 . . . ;patient responsibility
"RTN","IBCCCB",183,0)
 . . . S IBPRTOT=IBTOTCHG-IBPTRESP
"RTN","IBCCCB",184,0)
 . . I 'IBMDGPFL  D  ; Not MEDIGAP (SUPPLEMENTAL) 
"RTN","IBCCCB",185,0)
 . . . ;patient responsibility + Medicare unallowed amount (aka Medicare contr. adj.)
"RTN","IBCCCB",186,0)
 . . . S IBPRTOT=IBTOTCHG-(IBPTRESP+$$MRACALC2^IBCEMU2(IBIFN))
"RTN","IBCCCB",187,0)
 . ;
"RTN","IBCCCB",188,0)
 . ; ** End IB*2*436 **
"RTN","IBCCCB",189,0)
 . ;
"RTN","IBCCCB",190,0)
 . I IBPRTOT<0 S IBPRTOT=0      ; don't allow negative prior payment or offset
"RTN","IBCCCB",191,0)
 . S IBCOB("U2",IBCOBN+2)=IBPRTOT
"RTN","IBCCCB",192,0)
 . D COBCHG^IBCCC2(IBIFN,IBMRAIO,.IBCOB)
"RTN","IBCCCB",193,0)
 . D STAT^IBCEMU2(IBIFN,1.5,1)     ; mra eob status update
"RTN","IBCCCB",194,0)
 . I $G(IBSILENT) S IBERRMSG=""
"RTN","IBCCCB",195,0)
 . Q
"RTN","IBCCCB",196,0)
 ;
"RTN","IBCCCB",197,0)
 ; We should NOT get to here in silent mode .... just in case
"RTN","IBCCCB",198,0)
 I $G(IBSILENT) G END    ; currently only MCRWNR in silent mode
"RTN","IBCCCB",199,0)
 ;
"RTN","IBCCCB",200,0)
 ; Payer is not Medicare (WNR) - Perform additional steps
"RTN","IBCCCB",201,0)
 S IBCOB(0,15)=""
"RTN","IBCCCB",202,0)
 S IBCOB(0,21)=$S(IBCOBN=2:"S",IBCOBN=3:"T",1:"")
"RTN","IBCCCB",203,0)
 I IBCOB(0,21)="" G END
"RTN","IBCCCB",204,0)
 S IBCOB("M1",IBCOBN+3)=IBIFN
"RTN","IBCCCB",205,0)
 S IBIDS(.15)=IBIFN
"RTN","IBCCCB",206,0)
 D KVAR
"RTN","IBCCCB",207,0)
 G STEP2^IBCCC
"RTN","IBCCCB",208,0)
 ;
"RTN","IBCCCB",209,0)
END ;
"RTN","IBCCCB",210,0)
 Q
"RTN","IBCCCB",211,0)
 ;
"RTN","IBCCCB",212,0)
 ;
"RTN","IBCCCB",213,0)
ASK1 ; If entering thru EDI COB processing, don't ask for new bill, quit
"RTN","IBCCCB",214,0)
 I $G(IBCBASK) G EXIT
"RTN","IBCCCB",215,0)
 G ASK
"RTN","IBCCCB",216,0)
 ;
"RTN","IBCCCB",217,0)
ERROR ; Display/Save error message
"RTN","IBCCCB",218,0)
 I '$G(IBSILENT) W !,IBER,!
"RTN","IBCCCB",219,0)
 E  S IBERRMSG=IBER
"RTN","IBCCCB",220,0)
 S IBER=""
"RTN","IBCCCB",221,0)
 I $D(IBSECHK) S IBSECHK=1
"RTN","IBCCCB",222,0)
 Q
"RTN","IBCCCB",223,0)
 ;
"RTN","IBCCCB",224,0)
EXIT K IBCAN,IBCOB,IBU
"RTN","IBCCCB",225,0)
KVAR K IBX,IBY,IBI,IBIFN,DFN,IBDT,IB,IBCOBN,IBNMOLD,IBINSOLD,IBNM,IBINSN,IBINS,IBER,DIR,IBAC,IBAC1,IBV,X,Y,IBDATA,IBT,IBND0,DIRUT,IBCOBIL,IBMRA,IBMRAI,IBMRAO,IBMRAIO,IBCBCOPY
"RTN","IBCCCB",226,0)
 K ^UTILITY($J)
"RTN","IBCCCB",227,0)
 Q
"RTN","IBCCCB",228,0)
 ;
"RTN","IBCCCB",229,0)
DSPRB(IBIFN) ; display related bills
"RTN","IBCCCB",230,0)
 ;
"RTN","IBCCCB",231,0)
 D DSPRB^IBCCCB0(IBIFN) ; Code moved for size too big
"RTN","IBCCCB",232,0)
 Q
"RTN","IBCCCB",233,0)
 ;
"RTN","IBCCCB",234,0)
 ; ==============
"RTN","IBCCCB",235,0)
 ; 
"RTN","IBCCCB",236,0)
 ; Copy a bill for Reasonable Charges without cancelling it, update certain fields
"RTN","IBCCCB",237,0)
 ;
"RTN","IBCCCB",238,0)
 ; there is always both inpt inst (created first) and prof charges, always need both bills
"RTN","IBCCCB",239,0)
 ; there may be both outpt inst (created first) and prof charges, may not need both bills
"RTN","IBCCCB",240,0)
 ; if billing by episode rather than by day (current standard) then may need multiple prof bills per day
"RTN","IBCCCB",241,0)
 ; 
"RTN","IBCCCB",242,0)
 ; Inst bills are copied to create prof Bills automatically
"RTN","IBCCCB",243,0)
 ; Subsequent prof bills may be created if the user wants them
"RTN","IBCCCB",244,0)
 ;
"RTN","IBCCCB",245,0)
 ; Only the first bill in the COB series of bills should be copied for the next prof bill
"RTN","IBCCCB",246,0)
 ; The primary inst bill should be copied to get the secondary inst bill
"RTN","IBCCCB",247,0)
 ; The primary prof bill should be copied to get the secondary prof bill
"RTN","IBCCCB",248,0)
 ;
"RTN","IBCCCB",249,0)
CTCOPY(IBIFN,IBMRA) ; based on the type of bill, copy without cancelling
"RTN","IBCCCB",250,0)
 ; IBMRA = 1 if an MRA bill and copy for prof components is desired
"RTN","IBCCCB",251,0)
 ;
"RTN","IBCCCB",252,0)
 D CTCOPY^IBCCCB0(IBIFN,$G(IBMRA)) ;Moved due to routine size
"RTN","IBCCCB",253,0)
 Q
"RTN","IBCCCB",254,0)
 ;
"RTN","IBCEMU2")
0^9^B50579600^B35260966
"RTN","IBCEMU2",1,0)
IBCEMU2 ;ALB/DSM - IB MRA Utility ;01-MAY-2003
"RTN","IBCEMU2",2,0)
 ;;2.0;INTEGRATED BILLING;**155,320,349,436**;21-MAR-94;Build 31
"RTN","IBCEMU2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEMU2",4,0)
 ;
"RTN","IBCEMU2",5,0)
 Q
"RTN","IBCEMU2",6,0)
 ;
"RTN","IBCEMU2",7,0)
QMRA ; This is a background procedure that is spun off of the IB BATCH
"RTN","IBCEMU2",8,0)
 ; Print option. This process scans a queue in ^XTMP("IBMRA"_#,$J) and checks
"RTN","IBCEMU2",9,0)
 ; each Bill to see if a printable MRA exist, if so, prints them. MRA's print
"RTN","IBCEMU2",10,0)
 ; on the device associated with the 'Bill Addendum' Form Type.
"RTN","IBCEMU2",11,0)
 ; This process doesn't interact with users.
"RTN","IBCEMU2",12,0)
 ;
"RTN","IBCEMU2",13,0)
 ; IB*2*320:  MCS - Resubmit by Print produces a scratch global also
"RTN","IBCEMU2",14,0)
 ;            ^XTMP("IBCFP6",$J,.... for MRA's to print here
"RTN","IBCEMU2",15,0)
 ;
"RTN","IBCEMU2",16,0)
 ; Input:
"RTN","IBCEMU2",17,0)
 ;      IBJ   = $J of starting job
"RTN","IBCEMU2",18,0)
 ;      IBFTP = "IBMRA"_# (ien of form type) or "IBCFP6"
"RTN","IBCEMU2",19,0)
 ;
"RTN","IBCEMU2",20,0)
 N IBS1,IBS2,IBS3,IBIFN,IBQ,IBPGN
"RTN","IBCEMU2",21,0)
 S (IBS1,IBIFN,IBQ)=0
"RTN","IBCEMU2",22,0)
 F  S IBS1=$O(^XTMP(IBFTP,IBJ,IBS1)) Q:IBS1=""  D  I IBQ Q
"RTN","IBCEMU2",23,0)
 . S IBS2=0 F  S IBS2=$O(^XTMP(IBFTP,IBJ,IBS1,IBS2)) Q:IBS2=""  D  I IBQ Q
"RTN","IBCEMU2",24,0)
 . . S IBS3=0 F  S IBS3=$O(^XTMP(IBFTP,IBJ,IBS1,IBS2,IBS3)) Q:IBS3=""  D  I IBQ Q
"RTN","IBCEMU2",25,0)
 . . . S IBIFN=0 F  S IBIFN=$O(^XTMP(IBFTP,IBJ,IBS1,IBS2,IBS3,IBIFN)) Q:IBIFN=""  D  I $$STOP S IBQ=1 Q
"RTN","IBCEMU2",26,0)
 . . . . I $$MRAEXIST^IBCEMU1(IBIFN) D PROC^IBCEMRAA W @IOF ;must have IBIFN set
"RTN","IBCEMU2",27,0)
 K ^XTMP(IBFTP,IBJ) S ZTREQ="@"
"RTN","IBCEMU2",28,0)
 Q  ;QMRA
"RTN","IBCEMU2",29,0)
 ;
"RTN","IBCEMU2",30,0)
STOP() ;determine if user has requested the queued report to stop
"RTN","IBCEMU2",31,0)
 I $D(ZTQUEUED),$$S^%ZTLOAD S ZTSTOP=1 K ZTREQ I +$G(IBPGN) W !,"***TASK STOPPED BY USER***"
"RTN","IBCEMU2",32,0)
 Q +$G(ZTSTOP)
"RTN","IBCEMU2",33,0)
 ;
"RTN","IBCEMU2",34,0)
 ;
"RTN","IBCEMU2",35,0)
STAT(IBIFN,STATUS,MRAONLY) ; Update the review status in the EOB file
"RTN","IBCEMU2",36,0)
 ; This procedure updates field .16 in file 361.1 for all EOB's for
"RTN","IBCEMU2",37,0)
 ; the given bill#
"RTN","IBCEMU2",38,0)
 ; 
"RTN","IBCEMU2",39,0)
 ;   IBIFN   - Internal Bill# (required)
"RTN","IBCEMU2",40,0)
 ;   STATUS  - Internal Value of the Review Status field (required)
"RTN","IBCEMU2",41,0)
 ;   MRAONLY - Optional Flag with a default of 0 if not passed in
"RTN","IBCEMU2",42,0)
 ;             1:only update MRA EOB's for this bill
"RTN","IBCEMU2",43,0)
 ;             0:update all EOB's for this bill
"RTN","IBCEMU2",44,0)
 ;
"RTN","IBCEMU2",45,0)
 NEW RESULT,IBEOB,IBM
"RTN","IBCEMU2",46,0)
 NEW DIE,DA,DR,D,D0,DI,DIC,DICR,DIG,DIH,DISYS,DIU,DIV,DIW,DQ,DIERR,X,Y
"RTN","IBCEMU2",47,0)
 S IBIFN=+$G(IBIFN),STATUS=$G(STATUS)
"RTN","IBCEMU2",48,0)
 S MRAONLY=$G(MRAONLY,0)
"RTN","IBCEMU2",49,0)
 ;
"RTN","IBCEMU2",50,0)
 I '$D(^IBM(361.1,"B",IBIFN)) G STATX    ; no EOB's for this bill
"RTN","IBCEMU2",51,0)
 D CHK^DIE(361.1,.16,,STATUS,.RESULT)
"RTN","IBCEMU2",52,0)
 I RESULT="^" G STATX                    ; invalid status passed in
"RTN","IBCEMU2",53,0)
 ;
"RTN","IBCEMU2",54,0)
 S IBEOB=0        ; loop thru all EOB's for the bill
"RTN","IBCEMU2",55,0)
 F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D
"RTN","IBCEMU2",56,0)
 . S IBM=$G(^IBM(361.1,IBEOB,0))
"RTN","IBCEMU2",57,0)
 . I $P(IBM,U,16)=STATUS Q           ; no change
"RTN","IBCEMU2",58,0)
 . I MRAONLY,'$P(IBM,U,4) Q          ; skip because of parameter
"RTN","IBCEMU2",59,0)
 . S DIE=361.1,DA=IBEOB,DR=".16////"_STATUS D ^DIE
"RTN","IBCEMU2",60,0)
 . Q
"RTN","IBCEMU2",61,0)
 ;
"RTN","IBCEMU2",62,0)
STATX ;
"RTN","IBCEMU2",63,0)
 Q
"RTN","IBCEMU2",64,0)
 ;
"RTN","IBCEMU2",65,0)
MRAWL(IBIFN) ; Do any MRA EOB's for this bill appear on the worklist?
"RTN","IBCEMU2",66,0)
 ;
"RTN","IBCEMU2",67,0)
 ; This function returns 1 if at least one MRA EOB for the given bill
"RTN","IBCEMU2",68,0)
 ; appears on the MRA management worklist.  Otherwise, this function
"RTN","IBCEMU2",69,0)
 ; returns 0.
"RTN","IBCEMU2",70,0)
 ;
"RTN","IBCEMU2",71,0)
 NEW OK,IBEOB
"RTN","IBCEMU2",72,0)
 S OK=0,IBIFN=+$G(IBIFN)
"RTN","IBCEMU2",73,0)
 I '$D(^IBM(361.1,"B",IBIFN)) G MRAWLX     ; no EOB's for this bill
"RTN","IBCEMU2",74,0)
 S IBEOB=0        ; loop thru all EOB's for the bill
"RTN","IBCEMU2",75,0)
 F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D  Q:OK
"RTN","IBCEMU2",76,0)
 . I $$ELIG^IBCECOB1(IBEOB) S OK=1
"RTN","IBCEMU2",77,0)
 . Q
"RTN","IBCEMU2",78,0)
MRAWLX ;
"RTN","IBCEMU2",79,0)
 Q OK
"RTN","IBCEMU2",80,0)
 ;
"RTN","IBCEMU2",81,0)
TXSTS(IBIFN,IB364,REJFLG,IBZ) ; Claim transmission status information
"RTN","IBCEMU2",82,0)
 ; Input   IBIFN - required
"RTN","IBCEMU2",83,0)
 ;         IB364 - optional (defaults to most recent transmission#)
"RTN","IBCEMU2",84,0)
 ; Output  REJFLG (pass by reference) - 1/0 flag if any rejection status
"RTN","IBCEMU2",85,0)
 ;                                      messages on file
"RTN","IBCEMU2",86,0)
 ;         IBZ (pass by reference) - array of information
"RTN","IBCEMU2",87,0)
 ;
"RTN","IBCEMU2",88,0)
 NEW IEN,SMCNT,SEV,BCH,BCHD0,BCHD1
"RTN","IBCEMU2",89,0)
 S REJFLG=0 K IBZ
"RTN","IBCEMU2",90,0)
 S IBIFN=+$G(IBIFN) I 'IBIFN G TXSTSX
"RTN","IBCEMU2",91,0)
 S IB364=+$G(IB364)
"RTN","IBCEMU2",92,0)
 I 'IB364 S IB364=$$LAST364^IBCEF4(IBIFN) I 'IB364 G TXSTSX
"RTN","IBCEMU2",93,0)
 I $P($G(^IBA(364,IB364,0)),U,1)'=IBIFN G TXSTSX
"RTN","IBCEMU2",94,0)
 S IEN=0,SMCNT=0
"RTN","IBCEMU2",95,0)
 F  S IEN=$O(^IBM(361,"AERR",IB364,IEN)) Q:'IEN  D
"RTN","IBCEMU2",96,0)
 . S SMCNT=SMCNT+1
"RTN","IBCEMU2",97,0)
 . S SEV=$P($G(^IBM(361,IEN,0)),U,3)   ; status message severity
"RTN","IBCEMU2",98,0)
 . I SEV="R" S REJFLG=1
"RTN","IBCEMU2",99,0)
 . Q
"RTN","IBCEMU2",100,0)
 S BCH=+$P($G(^IBA(364,IB364,0)),U,2)  ; batch ien
"RTN","IBCEMU2",101,0)
 S BCHD0=$G(^IBA(364.1,BCH,0))
"RTN","IBCEMU2",102,0)
 S BCHD1=$G(^IBA(364.1,BCH,1))
"RTN","IBCEMU2",103,0)
 S IBZ("DATE LAST SENT")=$P(BCHD1,U,3)
"RTN","IBCEMU2",104,0)
 S IBZ("NUMBER OF STATUS MESSAGES")=SMCNT
"RTN","IBCEMU2",105,0)
 S IBZ("BATCH NUMBER")=$P(BCHD0,U,1)
"RTN","IBCEMU2",106,0)
 S IBZ("TRANSMISSION STATUS")=$P($G(^IBA(364,IB364,0)),U,3)
"RTN","IBCEMU2",107,0)
TXSTSX ;
"RTN","IBCEMU2",108,0)
 Q
"RTN","IBCEMU2",109,0)
 ;
"RTN","IBCEMU2",110,0)
MRACALC(IBEOB,IBIFN,AR,PRCASV) ; Calculates Two Amounts:
"RTN","IBCEMU2",111,0)
 ;  Unreimbursable Medicare Expense and Medicare Contract Adjustment
"RTN","IBCEMU2",112,0)
 ;  Amount for a given EOB.
"RTN","IBCEMU2",113,0)
 ;
"RTN","IBCEMU2",114,0)
 ; Input   IBIFN= ien of Claim file 399 - Required
"RTN","IBCEMU2",115,0)
 ;         IBEOB= ien of EOB file 361.1 - Required
"RTN","IBCEMU2",116,0)
 ;         AR=    Flag indicating this was called from AR function
"RTN","IBCEMU2",117,0)
 ; Input/Output  PRCASV= array with the two calculated values
"RTN","IBCEMU2",118,0)
 ;         PRCASV("MEDURE")=Unreimbursable Medicare Expense
"RTN","IBCEMU2",119,0)
 ;         PRCASV("MEDCA")=Medicare Contract Adjustment Amount
"RTN","IBCEMU2",120,0)
 ;
"RTN","IBCEMU2",121,0)
 ; For multiple EOB's, add up the calculated values across EOB's
"RTN","IBCEMU2",122,0)
 ;
"RTN","IBCEMU2",123,0)
 N I,LNLVL,EOBADJ,IBCOBN,INPAT,FRMTYP
"RTN","IBCEMU2",124,0)
 ;
"RTN","IBCEMU2",125,0)
 S FRMTYP=$$FT^IBCEF(IBIFN)       ;Form Type 2=1500; 3=UB
"RTN","IBCEMU2",126,0)
 S INPAT=$$INPAT^IBCEF(IBIFN)     ;Inpat/Outpat Flag
"RTN","IBCEMU2",127,0)
 S AR=$G(AR,0)    ;initialize AR flag
"RTN","IBCEMU2",128,0)
 F I=0,1,2 S IBEOB(I)=$G(^IBM(361.1,IBEOB,I))
"RTN","IBCEMU2",129,0)
 I $P(IBEOB(0),U,4)'=1 Q  ;make sure it's an MRA
"RTN","IBCEMU2",130,0)
 S IBCOBN=$$COBN^IBCEF(IBIFN) ;get current bill sequence
"RTN","IBCEMU2",131,0)
 ; Make sure we're on the right insurance sequence when AR flag is on
"RTN","IBCEMU2",132,0)
 I AR I $P(IBEOB(0),U,15)'=(IBCOBN-1) Q
"RTN","IBCEMU2",133,0)
 ;
"RTN","IBCEMU2",134,0)
 ; Unreimburseable Medicare Expense (same calc regardless of form type)
"RTN","IBCEMU2",135,0)
 ; For multiple EOB's, add up the amounts across EOB's
"RTN","IBCEMU2",136,0)
 S PRCASV("MEDURE")=$G(PRCASV("MEDURE"))+IBEOB(1)
"RTN","IBCEMU2",137,0)
 ;
"RTN","IBCEMU2",138,0)
 ; Handle CMS-1500 Form Type Next:
"RTN","IBCEMU2",139,0)
 I FRMTYP=2 D MEDCARE(IBEOB,.PRCASV) Q
"RTN","IBCEMU2",140,0)
 ;
"RTN","IBCEMU2",141,0)
 ; Handle UB Form Type Next:
"RTN","IBCEMU2",142,0)
 ; If Inpatient Calculate from Claim level data
"RTN","IBCEMU2",143,0)
 I INPAT D  Q  ;
"RTN","IBCEMU2",144,0)
 . K EOBADJ M EOBADJ=^IBM(361.1,IBEOB,10)
"RTN","IBCEMU2",145,0)
 . S PRCASV("MEDCA")=$G(PRCASV("MEDCA"))+$$CALCMCA(.EOBADJ)
"RTN","IBCEMU2",146,0)
 ;
"RTN","IBCEMU2",147,0)
 ; If Outpatient Calculate from Service Line level data
"RTN","IBCEMU2",148,0)
 D MEDCARE(IBEOB,.PRCASV)
"RTN","IBCEMU2",149,0)
 Q  ;MRACALC
"RTN","IBCEMU2",150,0)
 ;
"RTN","IBCEMU2",151,0)
MEDCARE(IBEOB,PRCASV) ; If Outpatient Calculate from Service Line level data
"RTN","IBCEMU2",152,0)
 N LNLVL,EOBADJ
"RTN","IBCEMU2",153,0)
 S LNLVL=0
"RTN","IBCEMU2",154,0)
 F  S LNLVL=$O(^IBM(361.1,IBEOB,15,LNLVL)) Q:'LNLVL  D  ;
"RTN","IBCEMU2",155,0)
 . K EOBADJ
"RTN","IBCEMU2",156,0)
 . M EOBADJ=^IBM(361.1,IBEOB,15,LNLVL,1)
"RTN","IBCEMU2",157,0)
 . ; Total up the Medicare Contract Adjustment across ALL Service Lines
"RTN","IBCEMU2",158,0)
 . S PRCASV("MEDCA")=$G(PRCASV("MEDCA"))+$$CALCMCA(.EOBADJ)
"RTN","IBCEMU2",159,0)
 Q  ;MEDCARE
"RTN","IBCEMU2",160,0)
 ;
"RTN","IBCEMU2",161,0)
CALCMCA(EOBADJ) ; FUNCTION - Calculate Medicare Contract Adjustment
"RTN","IBCEMU2",162,0)
 ; Sums up Amounts on ALL Reason Codes under ALL Group Codes = 'CO' and
"RTN","IBCEMU2",163,0)
 ; returns that value (which is Medicare Contract Adjustment).
"RTN","IBCEMU2",164,0)
 ;
"RTN","IBCEMU2",165,0)
 ; Input  EOBADJ = Array of Group Codes & Reason Codes from either the Claim 
"RTN","IBCEMU2",166,0)
 ;                 Level (10) or Service Line Level (15) of EOB file (#361.1)
"RTN","IBCEMU2",167,0)
 ; Output  returns Medicare Contract Adjustment
"RTN","IBCEMU2",168,0)
 ;
"RTN","IBCEMU2",169,0)
 N GRPLVL,RSNLVL,RSNAMT,MCA
"RTN","IBCEMU2",170,0)
 S (GRPLVL,MCA)=0
"RTN","IBCEMU2",171,0)
 F  S GRPLVL=$O(EOBADJ(GRPLVL)) Q:'GRPLVL  D  ;
"RTN","IBCEMU2",172,0)
 . I $P($G(EOBADJ(GRPLVL,0)),U)'="CO" Q
"RTN","IBCEMU2",173,0)
 . S RSNLVL=0
"RTN","IBCEMU2",174,0)
 . F  S RSNLVL=$O(EOBADJ(GRPLVL,1,RSNLVL)) Q:'RSNLVL  D  ;
"RTN","IBCEMU2",175,0)
 . . S RSNAMT=$P($G(EOBADJ(GRPLVL,1,RSNLVL,0)),U,2)
"RTN","IBCEMU2",176,0)
 . . S MCA=MCA+RSNAMT
"RTN","IBCEMU2",177,0)
 Q MCA  ;CALCMCA
"RTN","IBCEMU2",178,0)
 ;
"RTN","IBCEMU2",179,0)
ALLOWED(IBEOB) ; Returns Total Allowed Amount by summing up all Allowed Amounts 
"RTN","IBCEMU2",180,0)
 ; from Line Level Adjustment
"RTN","IBCEMU2",181,0)
 ; Input: IBEOB = ien of EOB file (361.1)
"RTN","IBCEMU2",182,0)
 ; 
"RTN","IBCEMU2",183,0)
 N LNLVL,LNLVLD,ALWD,TOTALWD
"RTN","IBCEMU2",184,0)
 S (LNLVL,TOTALWD)=0
"RTN","IBCEMU2",185,0)
 F  S LNLVL=$O(^IBM(361.1,IBEOB,15,LNLVL)) Q:'LNLVL  S LNLVLD=^(LNLVL,0) D
"RTN","IBCEMU2",186,0)
 . S ALWD=$P(LNLVLD,U,13),TOTALWD=TOTALWD+ALWD   ; Allowed Amount
"RTN","IBCEMU2",187,0)
 Q TOTALWD  ;ALLOWED
"RTN","IBCEMU2",188,0)
 ;
"RTN","IBCEMU2",189,0)
MRATYPE(BILL,ARDATE) ; Function - determines the MRA Receivable Type for a Third
"RTN","IBCEMU2",190,0)
 ; Party Receivable. This is accomplished by comparing DATE MRA FIRST ACTIVATED
"RTN","IBCEMU2",191,0)
 ; with AR Activation Date for the Bill.
"RTN","IBCEMU2",192,0)
 ; 
"RTN","IBCEMU2",193,0)
 ; Input     BILL= ien of a given Bill Number (Required)
"RTN","IBCEMU2",194,0)
 ;         ARDATE= Date Account Receivable was Activated - date only  (Required)
"RTN","IBCEMU2",195,0)
 ;
"RTN","IBCEMU2",196,0)
 ; Output - Possible Types:
"RTN","IBCEMU2",197,0)
 ;          1 = Pre-MRA implementation
"RTN","IBCEMU2",198,0)
 ;          2 = Post MRA Medicare Receivable
"RTN","IBCEMU2",199,0)
 ;          3 = Post MRA non-Medicare Receivable
"RTN","IBCEMU2",200,0)
 ;
"RTN","IBCEMU2",201,0)
 N MRADTACT,MRAMT
"RTN","IBCEMU2",202,0)
 I '$G(ARDATE)!'$G(BILL) Q 1
"RTN","IBCEMU2",203,0)
 ;
"RTN","IBCEMU2",204,0)
 ; get DATE MRA FIRST ACTIVATED at site
"RTN","IBCEMU2",205,0)
 S MRADTACT=$$MRADTACT()
"RTN","IBCEMU2",206,0)
 ;
"RTN","IBCEMU2",207,0)
 ; MRA not Activated at site
"RTN","IBCEMU2",208,0)
 I MRADTACT="" Q 1 ;MRATYPE
"RTN","IBCEMU2",209,0)
 ; 
"RTN","IBCEMU2",210,0)
 ; Bill from pre-MRA implementation era
"RTN","IBCEMU2",211,0)
 I ARDATE<MRADTACT Q 1 ;MRATYPE
"RTN","IBCEMU2",212,0)
 ;
"RTN","IBCEMU2",213,0)
 ; Post-MRA Medicare bill; get Medicare amounts
"RTN","IBCEMU2",214,0)
 S MRAMT=$G(^PRCA(430,BILL,13))
"RTN","IBCEMU2",215,0)
 ; check Medicare Contractual Adjustment Amount
"RTN","IBCEMU2",216,0)
 I $P(MRAMT,U,1) Q 2 ;MRATYPE
"RTN","IBCEMU2",217,0)
 ; check Medicare Unreimburseable Amout
"RTN","IBCEMU2",218,0)
 I $P(MRAMT,U,2) Q 2 ;MRATYPE
"RTN","IBCEMU2",219,0)
 ; check if bill is a Medicare one
"RTN","IBCEMU2",220,0)
 I $$MRAEXIST^IBCEMU1(BILL) Q 2 ;MRATYPE
"RTN","IBCEMU2",221,0)
 ; check if bill is a Medicare Supplemental one
"RTN","IBCEMU2",222,0)
 I $P($$CRIT^IBRFN2(BILL),U)=2 Q 2 ;MRATYPE
"RTN","IBCEMU2",223,0)
 ;
"RTN","IBCEMU2",224,0)
 ; all others are Post-MRA non-Medicare bills
"RTN","IBCEMU2",225,0)
 Q 3 ;MRATYPE
"RTN","IBCEMU2",226,0)
 ;
"RTN","IBCEMU2",227,0)
MRADTACT() ; Function - returns DATE MRA FIRST ACTIVATED at site
"RTN","IBCEMU2",228,0)
 Q $P($G(^IBE(350.9,1,8)),U,13)
"RTN","IBCEMU2",229,0)
 ;
"RTN","IBCEMU2",230,0)
 ;** start IB*2.0*436 **
"RTN","IBCEMU2",231,0)
MRACALC2(IBIFN) ; Function - This tag will add all EOB's for a given claim number. 
"RTN","IBCEMU2",232,0)
 ; Returns the sum of the Medicare Contractual Adj Amt
"RTN","IBCEMU2",233,0)
 ;
"RTN","IBCEMU2",234,0)
 ; Input:  IBIFN            - ien of Claim file 399
"RTN","IBCEMU2",235,0)
 ; Output: PRCASV("MEDCA")  - Medicare Contractual Adj Amt
"RTN","IBCEMU2",236,0)
 ;
"RTN","IBCEMU2",237,0)
 ; Variables IBEOB          = ien of EOB file 361.1
"RTN","IBCEMU2",238,0)
 ;           PRCASV("MEDCA")= Medicare Contractual Adj Amt
"RTN","IBCEMU2",239,0)
 ; Note:
"RTN","IBCEMU2",240,0)
 ;   For clarification, the following terms mean exactly the same thing.
"RTN","IBCEMU2",241,0)
 ;   "Medicare Contractual Adj Amt" = "Medicare Unpaid Amt" = "Medicare Unallowable Amt"
"RTN","IBCEMU2",242,0)
 N IBEOB,I,LNLVL,EOBADJ,IBCOBN,INPAT,FRMTYP,PRCASV
"RTN","IBCEMU2",243,0)
 ;
"RTN","IBCEMU2",244,0)
 S PRCASV("MEDCA")=0
"RTN","IBCEMU2",245,0)
 S FRMTYP=$$FT^IBCEF(IBIFN)       ;Form Type 2=1500; 3=UB
"RTN","IBCEMU2",246,0)
 S INPAT=$$INPAT^IBCEF(IBIFN)     ;Inpat/Outpat Flag
"RTN","IBCEMU2",247,0)
 ; Get EOB data
"RTN","IBCEMU2",248,0)
 S IBEOB=0
"RTN","IBCEMU2",249,0)
 F  S IBEOB=$O(^IBM(361.1,"B",IBIFN,IBEOB)) Q:'IBEOB  D
"RTN","IBCEMU2",250,0)
 . F I=0,1,2 S IBEOB(I)=$G(^IBM(361.1,IBEOB,I))
"RTN","IBCEMU2",251,0)
 . I $P(IBEOB(0),U,4)'=1 Q  ;make sure it's an MRA
"RTN","IBCEMU2",252,0)
 . S IBCOBN=$$COBN^IBCEF(IBIFN) ;get current bill sequence
"RTN","IBCEMU2",253,0)
 . ;
"RTN","IBCEMU2",254,0)
 . ; Handle CMS-1500 Form Type Next:
"RTN","IBCEMU2",255,0)
 . I FRMTYP=2 D MEDCARE(IBEOB,.PRCASV) Q
"RTN","IBCEMU2",256,0)
 . ;
"RTN","IBCEMU2",257,0)
 . ; Handle UB Form Type Next:
"RTN","IBCEMU2",258,0)
 . ; If Inpatient Calculate from Claim level data
"RTN","IBCEMU2",259,0)
 . I INPAT D  Q  ;
"RTN","IBCEMU2",260,0)
 . . K EOBADJ M EOBADJ=^IBM(361.1,IBEOB,10)
"RTN","IBCEMU2",261,0)
 . . S PRCASV("MEDCA")=$G(PRCASV("MEDCA"))+$$CALCMCA(.EOBADJ)
"RTN","IBCEMU2",262,0)
 . ; If Outpatient Calculate from Service Line level data
"RTN","IBCEMU2",263,0)
 . D MEDCARE(IBEOB,.PRCASV)
"RTN","IBCEMU2",264,0)
 Q PRCASV("MEDCA") ;MRACALC2
"RTN","IBCEMU2",265,0)
 ;** end IB*2.0*436 **
"RTN","IBCEP6")
0^6^B25055673^B19310181
"RTN","IBCEP6",1,0)
IBCEP6 ;ALB/TMP/OIFO-BP/RBN - PROVIDER ID MAINT menu and INS CO EDIT hook ;11-02-00
"RTN","IBCEP6",2,0)
 ;;2.0;INTEGRATED BILLING;**137,232,320,377,436**;21-MAR-94;Build 31
"RTN","IBCEP6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEP6",4,0)
 ;
"RTN","IBCEP6",5,0)
EN ; -- main entry point
"RTN","IBCEP6",6,0)
 N IBRESP,IBFLPFLP,IBCEP6FL
"RTN","IBCEP6",7,0)
 S IBCEP6FL=1
"RTN","IBCEP6",8,0)
 D FULL^VALM1
"RTN","IBCEP6",9,0)
 F  Q:'$$MENU(.IBRESP)  D @IBRESP
"RTN","IBCEP6",10,0)
ENQ ;
"RTN","IBCEP6",11,0)
 Q
"RTN","IBCEP6",12,0)
 ;
"RTN","IBCEP6",13,0)
EN1 ; Provider maintenance from the billing screen 8
"RTN","IBCEP6",14,0)
 N DIR,X,Y,IBEDIT
"RTN","IBCEP6",15,0)
 W !
"RTN","IBCEP6",16,0)
 I '$D(^XUSEC("IB PROVIDER EDIT",DUZ)) S DIR(0)="EA",DIR("A")="Press ENTER to continue: ",DIR("A",1)="YOU LACK THE SECURITY KEY FOR THIS ACTION" D ^DIR K DIR Q
"RTN","IBCEP6",17,0)
 D EN
"RTN","IBCEP6",18,0)
 Q
"RTN","IBCEP6",19,0)
 ;
"RTN","IBCEP6",20,0)
PO ; provider's own IDs
"RTN","IBCEP6",21,0)
 N IBPRV,IBINS
"RTN","IBCEP6",22,0)
 N IBSLEV,DIR,Y,X,IBPRMPT,IBNVAFL,IBIF
"RTN","IBCEP6",23,0)
 K IBFASTXT
"RTN","IBCEP6",24,0)
 S IBIF=""
"RTN","IBCEP6",25,0)
 S IBPRMPT="PROVIDER"
"RTN","IBCEP6",26,0)
 D FULL^VALM1
"RTN","IBCEP6",27,0)
 S IBSLEV=1
"RTN","IBCEP6",28,0)
 D EN^VALM("IBCE PRVPRV MAINT")
"RTN","IBCEP6",29,0)
POX ;
"RTN","IBCEP6",30,0)
 Q
"RTN","IBCEP6",31,0)
 ;
"RTN","IBCEP6",32,0)
PI ; provider's IDs provided by an insurance company
"RTN","IBCEP6",33,0)
 N IBPRV,IBINS
"RTN","IBCEP6",34,0)
 N IBSLEV,DIR,Y,X,IBPRMPT,IBNVAFL,IBIF
"RTN","IBCEP6",35,0)
 K IBFASTXT
"RTN","IBCEP6",36,0)
 S IBIF=""
"RTN","IBCEP6",37,0)
 S IBPRMPT="PROVIDER"
"RTN","IBCEP6",38,0)
 D FULL^VALM1
"RTN","IBCEP6",39,0)
 S IBSLEV=2
"RTN","IBCEP6",40,0)
 D EN^VALM("IBCE PRVPRV MAINT")
"RTN","IBCEP6",41,0)
PIX ;
"RTN","IBCEP6",42,0)
 Q
"RTN","IBCEP6",43,0)
 ;
"RTN","IBCEP6",44,0)
BI ; Insurance company batch ID entry
"RTN","IBCEP6",45,0)
 D EN^IBCEP9
"RTN","IBCEP6",46,0)
BIX ;
"RTN","IBCEP6",47,0)
 Q
"RTN","IBCEP6",48,0)
 ;
"RTN","IBCEP6",49,0)
II ; Insurance company IDs
"RTN","IBCEP6",50,0)
 D EN^IBCEP0
"RTN","IBCEP6",51,0)
IIX ;
"RTN","IBCEP6",52,0)
 Q
"RTN","IBCEP6",53,0)
 ;
"RTN","IBCEP6",54,0)
CP ; Care Unit maintenance - performing providers
"RTN","IBCEP6",55,0)
 N IBINS,IBALL,IB95
"RTN","IBCEP6",56,0)
 N IBSLEV,DIR,Y
"RTN","IBCEP6",57,0)
 K IBFASTXT
"RTN","IBCEP6",58,0)
 D FULL^VALM1
"RTN","IBCEP6",59,0)
 S IBSLEV=1
"RTN","IBCEP6",60,0)
 D EN^VALM("IBCE PRVCARE UNIT MAINT")
"RTN","IBCEP6",61,0)
CPX ;
"RTN","IBCEP6",62,0)
 Q
"RTN","IBCEP6",63,0)
 ;
"RTN","IBCEP6",64,0)
CB ; Care Unit maintenance - billing provider
"RTN","IBCEP6",65,0)
 N IBINS,IBALL,IB95
"RTN","IBCEP6",66,0)
 N IBSLEV,DIR,Y
"RTN","IBCEP6",67,0)
 K IBFASTXT
"RTN","IBCEP6",68,0)
 D FULL^VALM1
"RTN","IBCEP6",69,0)
 S IBSLEV=2
"RTN","IBCEP6",70,0)
 D EN^VALM("IBCE 2ND PRVID CARE UNIT MAINT")
"RTN","IBCEP6",71,0)
CBX ;
"RTN","IBCEP6",72,0)
 Q
"RTN","IBCEP6",73,0)
 ;
"RTN","IBCEP6",74,0)
NP ; non-VA individual provider information
"RTN","IBCEP6",75,0)
 N IBNVPMIF
"RTN","IBCEP6",76,0)
 S IBNVPMIF="I"
"RTN","IBCEP6",77,0)
 ;
"RTN","IBCEP6",78,0)
 ; *** Begin IB*2.0*436 - RBN
"RTN","IBCEP6",79,0)
 ;
"RTN","IBCEP6",80,0)
 D EN^DDIOL("For individual type entries: The name should be entered in")
"RTN","IBCEP6",81,0)
 D EN^DDIOL("                             LAST,FIRST MIDDLE format.")
"RTN","IBCEP6",82,0)
 D EN^DDIOL(" ")
"RTN","IBCEP6",83,0)
 ;
"RTN","IBCEP6",84,0)
 ; *** End IB*2.0*436 - RBN
"RTN","IBCEP6",85,0)
 ;
"RTN","IBCEP6",86,0)
 D EN^IBCEP8
"RTN","IBCEP6",87,0)
NPX ;
"RTN","IBCEP6",88,0)
 Q
"RTN","IBCEP6",89,0)
 ;
"RTN","IBCEP6",90,0)
NF ; non-VA facility provider information
"RTN","IBCEP6",91,0)
 N IBNVPMIF
"RTN","IBCEP6",92,0)
 S IBNVPMIF="F"
"RTN","IBCEP6",93,0)
 ;
"RTN","IBCEP6",94,0)
 ; *** Begin IB*2.0*436 - RBN
"RTN","IBCEP6",95,0)
 ;
"RTN","IBCEP6",96,0)
 D EN^DDIOL("For facility type entries: The name MUST start with an")
"RTN","IBCEP6",97,0)
 D EN^DDIOL("Alpha character and may contain numerals, spaces, commas, ")
"RTN","IBCEP6",98,0)
 D EN^DDIOL("periods, and a hyphen or dash.")
"RTN","IBCEP6",99,0)
 D EN^DDIOL(" ")
"RTN","IBCEP6",100,0)
 ;
"RTN","IBCEP6",101,0)
 ; *** End IB*2.0*436 - RBN
"RTN","IBCEP6",102,0)
 ;
"RTN","IBCEP6",103,0)
 D EN^IBCEP8
"RTN","IBCEP6",104,0)
NFX ;
"RTN","IBCEP6",105,0)
 Q
"RTN","IBCEP6",106,0)
 ;
"RTN","IBCEP6",107,0)
MENU(IBSEL) ; display main provider ID maintenance menu and receive response from user
"RTN","IBCEP6",108,0)
 ; function value returns 0 if user exits from menu or "^" out
"RTN","IBCEP6",109,0)
 ; function value returns 1 otherwise
"RTN","IBCEP6",110,0)
 ; IBSEL is the internal value of the user's selection if any (pass by reference)
"RTN","IBCEP6",111,0)
 N IBQ,DIR,X,Y,DTOUT,DUOUT,DIRUT,DIROUT,C,Z
"RTN","IBCEP6",112,0)
 N IORESET,IORVON,IORVOFF,IOUON,IOUOFF,IOINHI,IOINLOW,IOINORM
"RTN","IBCEP6",113,0)
 S IBQ=1,IBSEL=""
"RTN","IBCEP6",114,0)
 S X="IORESET;IORVON;IORVOFF;IOUON;IOUOFF;IOINHI;IOINLOW;IOINORM"
"RTN","IBCEP6",115,0)
 D ENDR^%ZISS
"RTN","IBCEP6",116,0)
 ;
"RTN","IBCEP6",117,0)
 S $P(DIR(0),U,1)="SOA"
"RTN","IBCEP6",118,0)
 S $P(Z,";",1)="PO:Provider Own IDs"
"RTN","IBCEP6",119,0)
 S $P(Z,";",2)="PI:Provider Insurance IDs"
"RTN","IBCEP6",120,0)
 S $P(Z,";",3)="BI:Batch ID Entry"
"RTN","IBCEP6",121,0)
 S $P(Z,";",4)="II:Insurance Co IDs"
"RTN","IBCEP6",122,0)
 S $P(Z,";",5)="CP:Care Units for Providers"
"RTN","IBCEP6",123,0)
 S $P(Z,";",6)="CB:Care Units for Billing Provider"
"RTN","IBCEP6",124,0)
 S $P(Z,";",7)="NP:Non-VA Provider"
"RTN","IBCEP6",125,0)
 S $P(Z,";",8)="NF:Non-VA Facility"
"RTN","IBCEP6",126,0)
 ;
"RTN","IBCEP6",127,0)
 S $P(DIR(0),U,2)=Z
"RTN","IBCEP6",128,0)
 ;
"RTN","IBCEP6",129,0)
 S DIR("L",1)="                "_IOINHI_"Provider IDs"_IOINORM
"RTN","IBCEP6",130,0)
 S DIR("L",2)="          "_$P($P(Z,";",1),":",1)_"  "_$P($P(Z,";",1),":",2)
"RTN","IBCEP6",131,0)
 S DIR("L",3)="          "_$P($P(Z,";",2),":",1)_"  "_$P($P(Z,";",2),":",2)
"RTN","IBCEP6",132,0)
 S DIR("L",4)=""
"RTN","IBCEP6",133,0)
 S DIR("L",5)="                "_IOINHI_"Insurance IDs"_IOINORM
"RTN","IBCEP6",134,0)
 S DIR("L",6)="          "_$P($P(Z,";",3),":",1)_"  "_$P($P(Z,";",3),":",2)
"RTN","IBCEP6",135,0)
 S DIR("L",7)="          "_$P($P(Z,";",4),":",1)_"  "_$P($P(Z,";",4),":",2)
"RTN","IBCEP6",136,0)
 S DIR("L",8)=""
"RTN","IBCEP6",137,0)
 S DIR("L",9)="                "_IOINHI_"Care Units"_IOINORM
"RTN","IBCEP6",138,0)
 S DIR("L",10)="          "_$P($P(Z,";",5),":",1)_"  "_$P($P(Z,";",5),":",2)
"RTN","IBCEP6",139,0)
 S DIR("L",11)="          "_$P($P(Z,";",6),":",1)_"  "_$P($P(Z,";",6),":",2)
"RTN","IBCEP6",140,0)
 S DIR("L",12)=""
"RTN","IBCEP6",141,0)
 S DIR("L",13)="                "_IOINHI_"Non-VA Items"_IOINORM
"RTN","IBCEP6",142,0)
 S DIR("L",14)="          "_$P($P(Z,";",7),":",1)_"  "_$P($P(Z,";",7),":",2)
"RTN","IBCEP6",143,0)
 S DIR("L")="          "_$P($P(Z,";",8),":",1)_"  "_$P($P(Z,";",8),":",2)
"RTN","IBCEP6",144,0)
 ;
"RTN","IBCEP6",145,0)
 S DIR("?")="^D MENH^IBCEP6"
"RTN","IBCEP6",146,0)
 S DIR("A")="    Select Provider ID Maintenance Option: "
"RTN","IBCEP6",147,0)
 ;
"RTN","IBCEP6",148,0)
 ; paint the screen and display menu first time in
"RTN","IBCEP6",149,0)
 D MENH
"RTN","IBCEP6",150,0)
 W !
"RTN","IBCEP6",151,0)
 S C=0 F  S C=$O(DIR("L",C)) Q:'C  W !,DIR("L",C)
"RTN","IBCEP6",152,0)
 W !,DIR("L"),!
"RTN","IBCEP6",153,0)
 D ^DIR K DIR W !
"RTN","IBCEP6",154,0)
 I $D(DIRUT) S IBQ=0 G MENUX
"RTN","IBCEP6",155,0)
 S IBSEL=Y
"RTN","IBCEP6",156,0)
 I IBSEL="" S IBQ=0
"RTN","IBCEP6",157,0)
MENUX ;
"RTN","IBCEP6",158,0)
 Q IBQ
"RTN","IBCEP6",159,0)
 ;
"RTN","IBCEP6",160,0)
MENH ; menu help
"RTN","IBCEP6",161,0)
 W @IOF,!?4,"Provider ID Maintenance Main Menu"
"RTN","IBCEP6",162,0)
 W !!?4,"Enter a code from the list."
"RTN","IBCEP6",163,0)
MENHX ;
"RTN","IBCEP6",164,0)
 Q
"RTN","IBCEP6",165,0)
 ;
"RTN","IBCEP8")
0^7^B118559850^B51555046
"RTN","IBCEP8",1,0)
IBCEP8 ;ALB/TMP/OIFO-BP/RBN - Functions for NON-VA PROVIDER ;11-07-00
"RTN","IBCEP8",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,232,288,320,343,374,377,391,400,436**;21-MAR-94;Build 31
"RTN","IBCEP8",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEP8",4,0)
 ;
"RTN","IBCEP8",5,0)
EN ; -- main entry point
"RTN","IBCEP8",6,0)
 N IBNPRV
"RTN","IBCEP8",7,0)
 K IBFASTXT
"RTN","IBCEP8",8,0)
 D FULL^VALM1
"RTN","IBCEP8",9,0)
 D EN^VALM("IBCE PRVNVA MAINT")
"RTN","IBCEP8",10,0)
 Q
"RTN","IBCEP8",11,0)
 ;
"RTN","IBCEP8",12,0)
HDR ; -- header code
"RTN","IBCEP8",13,0)
 K VALMHDR
"RTN","IBCEP8",14,0)
 Q
"RTN","IBCEP8",15,0)
 ;
"RTN","IBCEP8",16,0)
INIT ; Initialization
"RTN","IBCEP8",17,0)
 N DIC,DA,X,Y,DLAYGO,IBIF,DIR,DTOUT,DUOUT
"RTN","IBCEP8",18,0)
 K ^TMP("IBCE_PRVNVA_MAINT",$J)
"RTN","IBCEP8",19,0)
 ;
"RTN","IBCEP8",20,0)
 ; if coming in from main routine ^IBCEP6 this special variable IBNVPMIF is set already
"RTN","IBCEP8",21,0)
 I $G(IBNVPMIF)'="" S IBIF=IBNVPMIF G INIT1
"RTN","IBCEP8",22,0)
 ;
"RTN","IBCEP8",23,0)
 S DIR("A")="(I)NDIVIDUAL OR (F)ACILITY?: ",DIR(0)="SA^I:INDIVIDUAL;F:FACILITY" D ^DIR K DIR
"RTN","IBCEP8",24,0)
 I $D(DUOUT)!$D(DTOUT) S VALMQUIT=1 G INITQ
"RTN","IBCEP8",25,0)
 S IBIF=Y
"RTN","IBCEP8",26,0)
 ;
"RTN","IBCEP8",27,0)
INIT1 ;
"RTN","IBCEP8",28,0)
 ;
"RTN","IBCEP8",29,0)
 ; Begin IB*2.0*436 - RBN
"RTN","IBCEP8",30,0)
 ;
"RTN","IBCEP8",31,0)
 ;I IBIF="F" D
"RTN","IBCEP8",32,0)
 ;. S VALM("TITLE")="Non-VA Lab or Facility Info"
"RTN","IBCEP8",33,0)
 ;. K VALM("PROTOCOL")
"RTN","IBCEP8",34,0)
 ;. S Y=$$FIND1^DIC(101,,,"IBCE PRVNVA NONIND MAINT")
"RTN","IBCEP8",35,0)
 ;. I Y S VALM("PROTOCOL")=+Y_";ORD(101,"
"RTN","IBCEP8",36,0)
 ;
"RTN","IBCEP8",37,0)
 ; End IB*2.0*436 - RBN
"RTN","IBCEP8",38,0)
 ;
"RTN","IBCEP8",39,0)
 S DIC="^IBA(355.93,",DIC("DR")=".02///"_$S(IBIF'="F":2,1:1)
"RTN","IBCEP8",40,0)
 S DIC("S")="I $P(^(0),U,2)="_$S(IBIF'="F":2,1:1)
"RTN","IBCEP8",41,0)
 S DLAYGO=355.93,DIC(0)="AELMQ",DIC("A")="Select a NON"_$S(IBIF="I":"-",1:"/OTHER ")_"VA PROVIDER: "
"RTN","IBCEP8",42,0)
 D ^DIC K DIC,DLAYGO
"RTN","IBCEP8",43,0)
 I Y'>0 S VALMQUIT=1 G INITQ
"RTN","IBCEP8",44,0)
 ;
"RTN","IBCEP8",45,0)
 ; *** Begin IB*2.0*436 - RBN
"RTN","IBCEP8",46,0)
 ;
"RTN","IBCEP8",47,0)
 N NEWENTRY
"RTN","IBCEP8",48,0)
 S IBNPRV=+Y,NEWENTRY=$P($G(Y),U,3),IBFLPFLP=0
"RTN","IBCEP8",49,0)
 I 'NEWENTRY D
"RTN","IBCEP8",50,0)
 . N DA,X,Y,DIE,DR
"RTN","IBCEP8",51,0)
 . ;D EN^DDIOL(" ")
"RTN","IBCEP8",52,0)
 . ;D EN^DDIOL("If you do NOT want to edit the provider name or the provider type,","","!")
"RTN","IBCEP8",53,0)
 . ;D EN^DDIOL("then press return at the following NAME prompt.  Otherwise,")
"RTN","IBCEP8",54,0)
 . ;D EN^DDIOL("retype the name as you want it entered into the system.")
"RTN","IBCEP8",55,0)
 . ;D EN^DDIOL(" ")
"RTN","IBCEP8",56,0)
 . ;S DA=IBNPRV
"RTN","IBCEP8",57,0)
 . ;S DIE="^IBA(355.93,"
"RTN","IBCEP8",58,0)
 . ;S DR=".01"
"RTN","IBCEP8",59,0)
 . ;D ^DIE
"RTN","IBCEP8",60,0)
 . D SCREEN(IBNPRV)
"RTN","IBCEP8",61,0)
 . I $D(Y) S VALMQUIT=1 G INITQ
"RTN","IBCEP8",62,0)
 . I $G(IBFLPFLP) S IBIF=$S(IBIF="F":"I",1:"F")
"RTN","IBCEP8",63,0)
 ;
"RTN","IBCEP8",64,0)
 ; *** End IB*2.0*436 - rbn
"RTN","IBCEP8",65,0)
 ;
"RTN","IBCEP8",66,0)
 I IBIF="F" D
"RTN","IBCEP8",67,0)
 . S VALM("TITLE")="Non-VA Lab or Facility Info"
"RTN","IBCEP8",68,0)
 . K VALM("PROTOCOL")
"RTN","IBCEP8",69,0)
 . S Y=$$FIND1^DIC(101,,,"IBCE PRVNVA NONIND MAINT")
"RTN","IBCEP8",70,0)
 . I Y S VALM("PROTOCOL")=+Y_";ORD(101,"
"RTN","IBCEP8",71,0)
 D BLD^IBCEP8B(IBNPRV)
"RTN","IBCEP8",72,0)
INITQ Q
"RTN","IBCEP8",73,0)
 ;
"RTN","IBCEP8",74,0)
EXPND ;
"RTN","IBCEP8",75,0)
 Q
"RTN","IBCEP8",76,0)
 ;
"RTN","IBCEP8",77,0)
HELP ;
"RTN","IBCEP8",78,0)
 Q
"RTN","IBCEP8",79,0)
 ;
"RTN","IBCEP8",80,0)
EXIT ;
"RTN","IBCEP8",81,0)
 K ^TMP("IBCE_PRVNVA_MAINT",$J)
"RTN","IBCEP8",82,0)
 D CLEAN^VALM10
"RTN","IBCEP8",83,0)
 K IBFASTXT
"RTN","IBCEP8",84,0)
 Q
"RTN","IBCEP8",85,0)
 ;
"RTN","IBCEP8",86,0)
EDIT1(IBNPRV,IBNOLM) ; Edit non-VA provider/facility demographics
"RTN","IBCEP8",87,0)
 ; IBNPRV = ien of entry in file 355.93
"RTN","IBCEP8",88,0)
 ; IBNOLM = 1 if not called from list manager
"RTN","IBCEP8",89,0)
 ;
"RTN","IBCEP8",90,0)
 N DA,X,Y,DIE,DR,IBP
"RTN","IBCEP8",91,0)
 I '$G(IBNOLM) D FULL^VALM1
"RTN","IBCEP8",92,0)
 I IBNPRV D
"RTN","IBCEP8",93,0)
 . I '$G(IBNOLM) D CLEAR^VALM1
"RTN","IBCEP8",94,0)
 . S DIE="^IBA(355.93,",DA=IBNPRV,IBP=($P($G(^IBA(355.93,IBNPRV,0)),U,2)=2)
"RTN","IBCEP8",95,0)
 . ; PRXM/KJH - Added NPI and Taxonomy to the list of fields to be edited. Put a "NO^" around the Taxonomy multiple (#42) since some of the sub-field entries are 'required'.
"RTN","IBCEP8",96,0)
 . ; Begin IB*2.0*436 - RBN
"RTN","IBCEP8",97,0)
 . ;S DR=".01;"_$S(IBP:".03;.04",1:".05;.1;.06;.07;.08;.13///24;W !,""ID Qualifier: 24 - EMPLOYER'S IDENTIFICATION #"";.09Lab or Facility Primary ID;.11;.15")_";D PRENPI^IBCEP81(IBNPRV);D EN^IBCEP82(IBNPRV);S DIE(""NO^"")="""";42;K DIE(""NO^"")"
"RTN","IBCEP8",98,0)
 . S DR=$S(IBP:".03;.04",1:".05;.1;.06;.07;.08;.13///24;W !,""ID Qualifier: 24 - EMPLOYER'S IDENTIFICATION #"";.09Lab or Facility Primary ID;.11;.15")_";D PRENPI^IBCEP81(IBNPRV);D EN^IBCEP82(IBNPRV);S DIE(""NO^"")="""";42;K DIE(""NO^"")"
"RTN","IBCEP8",99,0)
 . ; End IB*2.0*436 - RBN
"RTN","IBCEP8",100,0)
 . D ^DIE
"RTN","IBCEP8",101,0)
 . Q:$G(IBNOLM)
"RTN","IBCEP8",102,0)
 . D BLD^IBCEP8B(IBNPRV)
"RTN","IBCEP8",103,0)
 I '$G(IBNOLM) K VALMBCK S VALMBCK="R"
"RTN","IBCEP8",104,0)
 Q
"RTN","IBCEP8",105,0)
 ;
"RTN","IBCEP8",106,0)
EDITID(IBNPRV,IBSLEV) ; Link from this list template to maintain provider-specific ids
"RTN","IBCEP8",107,0)
 ; This entry point is called by 4 action protocols.
"RTN","IBCEP8",108,0)
 ; IBNPRV = ien of entry in file 355.93 (can be either an individual or a facility) (required)
"RTN","IBCEP8",109,0)
 ; IBSLEV = 1 for facility/provider own ID's
"RTN","IBCEP8",110,0)
 ; IBSLEV = 2 for facility/provider ID's furnished by an insurance company
"RTN","IBCEP8",111,0)
 ;
"RTN","IBCEP8",112,0)
 Q:'$G(IBNPRV)
"RTN","IBCEP8",113,0)
 Q:'$G(IBSLEV)
"RTN","IBCEP8",114,0)
 N IBPRV,IBIF
"RTN","IBCEP8",115,0)
 D FULL^VALM1    ; set full scrolling region
"RTN","IBCEP8",116,0)
 D CLEAR^VALM1   ; clear screen
"RTN","IBCEP8",117,0)
 S IBPRV=IBNPRV
"RTN","IBCEP8",118,0)
 ;
"RTN","IBCEP8",119,0)
 K IBFASTXT
"RTN","IBCEP8",120,0)
 S IBIF=$$GET1^DIQ(355.93,IBPRV,.02,"I")    ; 1=facility/group      2=individual
"RTN","IBCEP8",121,0)
 D EN^VALM("IBCE PRVPRV MAINT")
"RTN","IBCEP8",122,0)
 ;
"RTN","IBCEP8",123,0)
 K VALMQUIT
"RTN","IBCEP8",124,0)
 S VALMBCK=$S($G(IBFASTXT)'="":"Q",1:"R")
"RTN","IBCEP8",125,0)
 Q
"RTN","IBCEP8",126,0)
 ;
"RTN","IBCEP8",127,0)
NVAFAC ; Enter/edit Non-VA facility information
"RTN","IBCEP8",128,0)
 ; This entry point is called by the menu system for option IBCE PRVNVA FAC EDIT
"RTN","IBCEP8",129,0)
 N X,Y,DA,DIC,IBNPRV,DLAYGO
"RTN","IBCEP8",130,0)
 S DIC="^IBA(355.93,",DIC("S")="I $P(^(0),U,2)=1",DIC("DR")=".02///1"
"RTN","IBCEP8",131,0)
 S DLAYGO=355.93,DIC(0)="AELMQ",DIC("A")="Select a NON/Other VA FACILITY: "
"RTN","IBCEP8",132,0)
 D ^DIC K DIC,DLAYGO
"RTN","IBCEP8",133,0)
 I Y'>0 S VALMQUIT=1 G NVAFACQ
"RTN","IBCEP8",134,0)
 S IBNPRV=+Y
"RTN","IBCEP8",135,0)
 D EDIT1(IBNPRV,1)
"RTN","IBCEP8",136,0)
 ;
"RTN","IBCEP8",137,0)
NVAFACQ Q
"RTN","IBCEP8",138,0)
 ;
"RTN","IBCEP8",139,0)
GETFAC(IB,IBFILE,IBELE,CSZLEN) ; Returns facility name, address lines or city-state-zip
"RTN","IBCEP8",140,0)
 ;        IB = ien of entry in file
"RTN","IBCEP8",141,0)
 ;    IBFILE = 0 for retrieval from file 4, 1 for retrieval from file 355.93
"RTN","IBCEP8",142,0)
 ;  If IBELE = 0, returns name
"RTN","IBCEP8",143,0)
 ;           = 1, returns address line 1
"RTN","IBCEP8",144,0)
 ;           = 2, returns address line 2
"RTN","IBCEP8",145,0)
 ;           = 12, returns address lines 1 and 2 together
"RTN","IBCEP8",146,0)
 ;           = 3, returns city, state zip
"RTN","IBCEP8",147,0)
 ;           = "3C", returns city    = "3S", state    = "3Z", zip
"RTN","IBCEP8",148,0)
 ;    CSZLEN = max length allowed for city,st,zip string - Only applies when IBELE=3
"RTN","IBCEP8",149,0)
 ;
"RTN","IBCEP8",150,0)
 N Z,IBX,IC,IS,IZ,DIFF
"RTN","IBCEP8",151,0)
 S IBX=""
"RTN","IBCEP8",152,0)
 ;
"RTN","IBCEP8",153,0)
 S Z=$S('IBFILE:$G(^DIC(4,+IB,1)),1:$G(^IBA(355.93,+IB,0)))
"RTN","IBCEP8",154,0)
 I +IBELE=0 S IBX=$S('IBFILE:$P($G(^DIC(4,+IB,0)),U),1:$P($G(^IBA(355.93,+IB,0)),U))
"RTN","IBCEP8",155,0)
 I IBELE=1!(IBELE=12) S IBX=$S('IBFILE:$P(Z,U),1:$P(Z,U,5))
"RTN","IBCEP8",156,0)
 I IBELE=2!(IBELE=12) S IBX=$S(IBELE=12:IBX_" ",1:"")_$S('IBFILE:$P(Z,U,2),1:$P(Z,U,10))
"RTN","IBCEP8",157,0)
 ;
"RTN","IBCEP8",158,0)
 I +IBELE=3 D
"RTN","IBCEP8",159,0)
 . I 'IBFILE S IC=$P(Z,U,3),IS=$$STATE^IBCEFG1($P($G(^DIC(4,+IB,0)),U,2)),IZ=$P(Z,U,4)
"RTN","IBCEP8",160,0)
 . I IBFILE S IC=$P(Z,U,6),IS=$$STATE^IBCEFG1($P(Z,U,7)),IZ=$P(Z,U,8)
"RTN","IBCEP8",161,0)
 . ;
"RTN","IBCEP8",162,0)
 . I IBELE="3C" S IBX=IC Q
"RTN","IBCEP8",163,0)
 . I IBELE="3S" S IBX=IS Q
"RTN","IBCEP8",164,0)
 . I IBELE="3Z" S IBX=IZ Q
"RTN","IBCEP8",165,0)
 . ;
"RTN","IBCEP8",166,0)
 . S IBX=$$CSZ(IC,IS,IZ,+$G(CSZLEN))    ; build the city, st zip string since IBELE=3 here
"RTN","IBCEP8",167,0)
 . Q
"RTN","IBCEP8",168,0)
 ;
"RTN","IBCEP8",169,0)
GETFACX ;
"RTN","IBCEP8",170,0)
 Q IBX
"RTN","IBCEP8",171,0)
 ;
"RTN","IBCEP8",172,0)
CSZ(IC,IS,IZ,CSZLEN) ; build city, state, zip string
"RTN","IBCEP8",173,0)
 ; IC - city
"RTN","IBCEP8",174,0)
 ; IS - state abbreviation
"RTN","IBCEP8",175,0)
 ; IZ - zip
"RTN","IBCEP8",176,0)
 ; CSZLEN - max length allowed for city, st zip string
"RTN","IBCEP8",177,0)
 ;
"RTN","IBCEP8",178,0)
 NEW IBX,DIFF
"RTN","IBCEP8",179,0)
 ;
"RTN","IBCEP8",180,0)
 ; build the full city, st zip string
"RTN","IBCEP8",181,0)
 S IBX=IC_$S(IC'="":", ",1:"")_IS_" "_IZ
"RTN","IBCEP8",182,0)
 ;
"RTN","IBCEP8",183,0)
 I '$G(CSZLEN) G CSZX          ; no max length to worry about
"RTN","IBCEP8",184,0)
 I $L(IBX)'>CSZLEN G CSZX      ; length is OK so get out
"RTN","IBCEP8",185,0)
 ;
"RTN","IBCEP8",186,0)
 ; string is too long so try to shorten the zip if it has a dash
"RTN","IBCEP8",187,0)
 I IZ["-" S IZ=$P(IZ,"-",1),IBX=IC_$S(IC'="":", ",1:"")_IS_" "_IZ I $L(IBX)'>CSZLEN G CSZX
"RTN","IBCEP8",188,0)
 ;
"RTN","IBCEP8",189,0)
 ; string is still too long so truncate the city name until it fits
"RTN","IBCEP8",190,0)
 S DIFF=$L(IBX)-CSZLEN
"RTN","IBCEP8",191,0)
 S IC=$E(IC,1,$L(IC)-DIFF)
"RTN","IBCEP8",192,0)
 S IBX=IC_$S(IC'="":", ",1:"")_IS_" "_IZ
"RTN","IBCEP8",193,0)
CSZX ;
"RTN","IBCEP8",194,0)
 Q IBX
"RTN","IBCEP8",195,0)
 ;
"RTN","IBCEP8",196,0)
ALLID(IBPRV,IBPTYP,IBZ) ; Returns array IBZ for all ids for provider IBPRV
"RTN","IBCEP8",197,0)
 ; for all provider id types or for id type in IBPTYP
"RTN","IBCEP8",198,0)
 ; IBPRV = vp ien of provider
"RTN","IBCEP8",199,0)
 ; IBPTYP = ien of provider id type to return or "" for all
"RTN","IBCEP8",200,0)
 ; IBZ = array returned with internal data:
"RTN","IBCEP8",201,0)
 ;  IBZ(file 355.9 ien)=ID type^ID#^ins co^form type^bill care type^care un^X12 code for id type
"RTN","IBCEP8",202,0)
 N Z,Z0
"RTN","IBCEP8",203,0)
 K IBZ
"RTN","IBCEP8",204,0)
 G:'$G(IBPRV) ALLIDQ
"RTN","IBCEP8",205,0)
 S IBPTYP=$G(IBPTYP)
"RTN","IBCEP8",206,0)
 S Z=0 F  S Z=$O(^IBA(355.9,"B",IBPRV,Z)) Q:'Z  S Z0=$G(^IBA(355.9,Z,0)) D
"RTN","IBCEP8",207,0)
 . I $S(IBPTYP="":1,1:($P(Z0,U,6)=IBPTYP)) S IBZ(Z)=($P(Z0,U,6)_U_$P(Z0,U,7)_U_$P(Z0,U,2)_U_$P(Z0,U,4)_U_$P(Z0,U,5)_U_$P(Z0,U,3))_U_$P($G(^IBE(355.97,+$P(Z0,U,6),0)),U,3)
"RTN","IBCEP8",208,0)
 ;
"RTN","IBCEP8",209,0)
ALLIDQ Q
"RTN","IBCEP8",210,0)
 ;
"RTN","IBCEP8",211,0)
CLIA() ; Returns ien of CLIA # provider id type
"RTN","IBCEP8",212,0)
 N Z,IBZ
"RTN","IBCEP8",213,0)
 S (IBZ,Z)=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  I $P($G(^(Z,0)),U,3)="X4",$P(^(0),U)["CLIA" S IBZ=Z Q
"RTN","IBCEP8",214,0)
 Q IBZ
"RTN","IBCEP8",215,0)
 ;
"RTN","IBCEP8",216,0)
STLIC() ; Returns ien of STLIC# provider id type
"RTN","IBCEP8",217,0)
 N Z,IBZ
"RTN","IBCEP8",218,0)
 S (IBZ,Z)=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  I $P($G(^(Z,1)),U,3) S IBZ=Z Q
"RTN","IBCEP8",219,0)
 Q IBZ
"RTN","IBCEP8",220,0)
 ;
"RTN","IBCEP8",221,0)
TAXID() ; Returns ien of Fed tax id provider id type
"RTN","IBCEP8",222,0)
 N Z,IBZ
"RTN","IBCEP8",223,0)
 S (IBZ,Z)=0 F  S Z=$O(^IBE(355.97,Z)) Q:'Z  I $P($G(^(Z,1)),U,4) S IBZ=Z Q
"RTN","IBCEP8",224,0)
 Q IBZ
"RTN","IBCEP8",225,0)
 ;
"RTN","IBCEP8",226,0)
CLIANVA(IBIFN) ; Returns CLIA # for a non-VA facility on bill ien IBIFN
"RTN","IBCEP8",227,0)
 N IBCLIA,IBZ,IBNVA,Z
"RTN","IBCEP8",228,0)
 S IBCLIA="",IBZ=$$CLIA()
"RTN","IBCEP8",229,0)
 I IBZ D
"RTN","IBCEP8",230,0)
 . S IBNVA=$P($G(^DGCR(399,IBIFN,"U2")),U,10) Q:'IBNVA
"RTN","IBCEP8",231,0)
 . S IBCLIA=$$IDFIND^IBCEP2(IBIFN,IBZ,IBNVA_";IBA(355.93,","",1)
"RTN","IBCEP8",232,0)
 Q IBCLIA
"RTN","IBCEP8",233,0)
 ;
"RTN","IBCEP8",234,0)
VALFAC(X) ; Function returns 1 if format is valid for X12 facility name
"RTN","IBCEP8",235,0)
 ; Alpha/numeric/certain punctuation valid.  Must start with an Alpha
"RTN","IBCEP8",236,0)
 N OK,VAL
"RTN","IBCEP8",237,0)
 S OK=1
"RTN","IBCEP8",238,0)
 S VAL("A")="",VAL("N")="",VAL=",.- "
"RTN","IBCEP8",239,0)
 I $E(X)'?1A!'$$VALFMT(X,.VAL) S OK=0
"RTN","IBCEP8",240,0)
 Q OK
"RTN","IBCEP8",241,0)
 ;
"RTN","IBCEP8",242,0)
VALFMT(X,VAL) ; Returns 1 if format of X is valid, 0 if not
"RTN","IBCEP8",243,0)
 ; X = data to be examined
"RTN","IBCEP8",244,0)
 ; VAL = a 'string' of valid characters AND/OR (passed by reference)
"RTN","IBCEP8",245,0)
 ;    if VAL("A") defined ==> Alpha
"RTN","IBCEP8",246,0)
 ;    if VAL("A") defined ==> Numeric valid
"RTN","IBCEP8",247,0)
 ;    if VAL("A") defined ==> Punctuation valid
"RTN","IBCEP8",248,0)
 ;   any other character included in the string is checked individually
"RTN","IBCEP8",249,0)
 N Z
"RTN","IBCEP8",250,0)
 I $D(VAL("A")) D
"RTN","IBCEP8",251,0)
 . N Z0
"RTN","IBCEP8",252,0)
 . F Z=1:1:$L(X) I $E(X,Z)?1A S Z0(Z)=""
"RTN","IBCEP8",253,0)
 . S Z0="" F  S Z0=$O(Z0(Z0),-1) Q:'Z0  S $E(X,Z0)=""
"RTN","IBCEP8",254,0)
 I $D(VAL("N")) D
"RTN","IBCEP8",255,0)
 . N Z0
"RTN","IBCEP8",256,0)
 . F Z=1:1:$L(X) I $E(X,Z)?1N S Z0(Z)=""
"RTN","IBCEP8",257,0)
 . S Z0="" F  S Z0=$O(Z0(Z0),-1) Q:'Z0  S $E(X,Z0)=""
"RTN","IBCEP8",258,0)
 I $D(VAL("P")) D
"RTN","IBCEP8",259,0)
 . N Z0
"RTN","IBCEP8",260,0)
 . F Z=1:1:$L(X) I $E(X,Z)?1P S Z0(Z)=""
"RTN","IBCEP8",261,0)
 . S Z0="" F  S Z0=$O(Z0(Z0),-1) Q:'Z0  S $E(X,Z0)=""
"RTN","IBCEP8",262,0)
 I $G(VAL)'="" S X=$TR(X,VAL,"")
"RTN","IBCEP8",263,0)
 Q (X="")
"RTN","IBCEP8",264,0)
 ;
"RTN","IBCEP8",265,0)
PS(IBXSAVE) ; Returns 1 if IBXSAVE("PSVC") indicates the svc was non-lab
"RTN","IBCEP8",266,0)
 ; 
"RTN","IBCEP8",267,0)
 Q $S($G(IBXSAVE("PSVC"))="":0,1:"13"[IBXSAVE("PSVC"))
"RTN","IBCEP8",268,0)
 ;
"RTN","IBCEP8",269,0)
 ; Pass in the Internal Entry number to File 355.93
"RTN","IBCEP8",270,0)
 ; Return the Primary ID and Qualifier (ID Type) from 355.9
"RTN","IBCEP8",271,0)
PRIMID(IEN35593) ; Return External Primary ID and ID Quailier
"RTN","IBCEP8",272,0)
 N INDXVAL,LIST,MSG,IDCODE
"RTN","IBCEP8",273,0)
 S INDXVAL=IEN35593_";IBA(355.93,"
"RTN","IBCEP8",274,0)
 N SCREEN S SCREEN="I $P(^(0),U,8)"
"RTN","IBCEP8",275,0)
 D FIND^DIC(355.9,,"@;.06EI;.07","Q",INDXVAL,,,SCREEN,,"LIST","MSG")
"RTN","IBCEP8",276,0)
 I '+$G(LIST("DILIST",0)) Q ""   ; No Primary ID
"RTN","IBCEP8",277,0)
 I +$G(LIST("DILIST",0))>1 Q "***ERROR***^***ERROR***"  ; Bad.  More than one. 
"RTN","IBCEP8",278,0)
 ; Found just one
"RTN","IBCEP8",279,0)
 S IDCODE=$$GET1^DIQ(355.97,LIST("DILIST","ID",1,.06,"I"),.03)
"RTN","IBCEP8",280,0)
 Q $G(LIST("DILIST","ID",1,.07))_U_IDCODE_" - "_$G(LIST("DILIST","ID",1,.06,"E"))
"RTN","IBCEP8",281,0)
 ;
"RTN","IBCEP8",282,0)
 ; Begin IB*2.0*436 - RBN
"RTN","IBCEP8",283,0)
 ;
"RTN","IBCEP8",284,0)
PRVFMT ;  called only by the INPUT TRANSFORM of #355.93,.01
"RTN","IBCEP8",285,0)
 ;      no other calls are allowed to this tag
"RTN","IBCEP8",286,0)
 ;
"RTN","IBCEP8",287,0)
 ; DESCRIPTION  : Sets the NAME (.01) and the ENTITY TYPE (.02) fields
"RTN","IBCEP8",288,0)
 ;                of file 355.93.  Allows the user to change the ENTITY
"RTN","IBCEP8",289,0)
 ;                TYPE and forces reentry of the provider data so
"RTN","IBCEP8",290,0)
 ;                that it matches the ENTITY TYPE.  Also formats the 
"RTN","IBCEP8",291,0)
 ;                NAME to correspond to the ENTITY TYPE. Disallows
"RTN","IBCEP8",292,0)
 ;                changing of the NAME field from ANYWHERE other than
"RTN","IBCEP8",293,0)
 ;                PROVIDER ID MAINTENANCE or IB EDIT BILLING INFO 
"RTN","IBCEP8",294,0)
 ;                (billing screens).  Adding new entries directly from
"RTN","IBCEP8",295,0)
 ;                FileMan is no longer permitted.
"RTN","IBCEP8",296,0)
 ; 
"RTN","IBCEP8",297,0)
 ; INPUTS       : Variables set by user selected option, screen actions
"RTN","IBCEP8",298,0)
 ;                and user input:
"RTN","IBCEP8",299,0)
 ;                X        - Provider name passed in by .01 field input
"RTN","IBCEP8",300,0)
 ;                           transform.
"RTN","IBCEP8",301,0)
 ;                XQY0     - IB option selected by the user.
"RTN","IBCEP8",302,0)
 ;                DA       - IEN of the record selected by the user
"RTN","IBCEP8",303,0)
 ;                IBNVPMIF - ENTITY TYPE flag passed in from ListManager
"RTN","IBCEP8",304,0)
 ;                           (F=Facility,I=Individual).
"RTN","IBCEP8",305,0)
 ;                IBSCNN   - IB variable indication of the actions/submenu:
"RTN","IBCEP8",306,0)
 ;                           #3, #4, and #7 found on bill screen #8
"RTN","IBCEP8",307,0)
 ;
"RTN","IBCEP8",308,0)
 ; OUTPUTS      : IBFLPFLP - Indicate that the user is changing the
"RTN","IBCEP8",309,0)
 ;                           ENTITY TYPE (flip flop).  Possible states:
"RTN","IBCEP8",310,0)
 ;
"RTN","IBCEP8",311,0)
 ;                   IBFLPFLP = 0 - The type was not changed.
"RTN","IBCEP8",312,0)
 ;                            = 1 - The type changed to facility type.
"RTN","IBCEP8",313,0)
 ;                            = 2 - The type changed to individual type.
"RTN","IBCEP8",314,0)
 ;
"RTN","IBCEP8",315,0)
 ; 
"RTN","IBCEP8",316,0)
 ; GLOBALS      : ^IBA(355.93  - IB NON/OTHER VA BILLING PROVIDER file
"RTN","IBCEP8",317,0)
 ; 
"RTN","IBCEP8",318,0)
 ; 
"RTN","IBCEP8",319,0)
 ;
"RTN","IBCEP8",320,0)
 N OKRTN,IBNAM,IBCEPDA,IBTYPE
"RTN","IBCEP8",321,0)
 S (IBFLPFLP,OKRTN)=0,IBNAM=X,IBCEPDA=$G(DA)
"RTN","IBCEP8",322,0)
 ;
"RTN","IBCEP8",323,0)
 ; Prevent modification of NAME (#.01) in file #355.93 from anywhere
"RTN","IBCEP8",324,0)
 ; but the PROVIDER ID MAINTENANCE or IB EDIT BILLING INFO screens.
"RTN","IBCEP8",325,0)
 ;
"RTN","IBCEP8",326,0)
 I $P($G(XQY0),U,1)="IB EDIT BILLING INFO" D PRVINIT,PRVMANT S OKRTN=1
"RTN","IBCEP8",327,0)
 I $P($G(XQY0),U,1)="IBCE PROVIDER MAINT" D PRVINIT,PRVMANT S OKRTN=1
"RTN","IBCEP8",328,0)
 I 'OKRTN K X
"RTN","IBCEP8",329,0)
 Q
"RTN","IBCEP8",330,0)
 ;==========================
"RTN","IBCEP8",331,0)
PRVINIT ; initialization
"RTN","IBCEP8",332,0)
 ;
"RTN","IBCEP8",333,0)
 ; If arriving from the billing screens (IBSCNN is 3 or 4) the
"RTN","IBCEP8",334,0)
 ; variable DA is the ien of the bill (file #399) - need to find the ien
"RTN","IBCEP8",335,0)
 ; of 355.93 of the provider that the user entered/selected
"RTN","IBCEP8",336,0)
 ;
"RTN","IBCEP8",337,0)
 ; *** Begin IB*2.0*436 -RBN ***
"RTN","IBCEP8",338,0)
 ;I $G(IBSCNN)=3!($G(IBSCNN)=4) S IBCEPDA=$O(^IBA(355.93,"B",IBNAM,"")),IBTYPE=$S(IBSCNN=3:2,1:1)
"RTN","IBCEP8",339,0)
 I $G(IBDR20),'$G(IBCEP6FL) S IBCEPDA=$O(^IBA(355.93,"B",IBNAM,"")),IBTYPE=$S(IBDR20=84:1,IBDR20=104:1,1:2)
"RTN","IBCEP8",340,0)
 ; *** End IB*2.0*436 -RBN ***
"RTN","IBCEP8",341,0)
 ;
"RTN","IBCEP8",342,0)
 ; If arriving from the Provider ID Maintenance call (billing screen or
"RTN","IBCEP8",343,0)
 ; direct call to the option) & the user entered a brand new record, the
"RTN","IBCEP8",344,0)
 ; IBNVPMIF variable is set to indicate if the user was entering a
"RTN","IBCEP8",345,0)
 ; Non-VA facility ("F") or a Non-VA Provider (ie. individual) ("I")
"RTN","IBCEP8",346,0)
 I '$G(IBCEPDA)&$D(IBNVPMIF) S IBTYPE=$S(IBNVPMIF="F":1,1:2)
"RTN","IBCEP8",347,0)
 ;
"RTN","IBCEP8",348,0)
 ; If arriving from the Provider ID Maintenance call (billing screen or
"RTN","IBCEP8",349,0)
 ; direct call to the option) & the user selected an existing record
"RTN","IBCEP8",350,0)
 I $G(IBCEPDA) S IBTYPE=$P($G(^IBA(355.93,IBCEPDA,0)),U,2)
"RTN","IBCEP8",351,0)
 Q
"RTN","IBCEP8",352,0)
 ;----------------------------
"RTN","IBCEP8",353,0)
PRVMANT ; is the user flipping the provider type (for existing records only)
"RTN","IBCEP8",354,0)
 N TXT,TXT2,%
"RTN","IBCEP8",355,0)
 ;
"RTN","IBCEP8",356,0)
 ; IBTYPE - based on the current value of provider type (#355.93,.02)
"RTN","IBCEP8",357,0)
 ;          where "1" = Facility/Group  & "2" = Individual
"RTN","IBCEP8",358,0)
 ;
"RTN","IBCEP8",359,0)
 I '$G(IBTYPE) Q    ; one of the calls that triggers this routine needs
"RTN","IBCEP8",360,0)
 ;               ; this check when creating a new record in file #355.93
"RTN","IBCEP8",361,0)
 ;
"RTN","IBCEP8",362,0)
 ; If record is not brand new (IBCEPDA exists) - give the user the
"RTN","IBCEP8",363,0)
 ; opportunity to change the provider type field (#355.93,.02)
"RTN","IBCEP8",364,0)
 I IBTYPE,$G(IBCEPDA) D
"RTN","IBCEP8",365,0)
 . ;
"RTN","IBCEP8",366,0)
 . S %=2  ; Default answer is no
"RTN","IBCEP8",367,0)
 . ;
"RTN","IBCEP8",368,0)
 . I IBTYPE=1 S TXT="Facility",TXT2="Individual/Provider"
"RTN","IBCEP8",369,0)
 . I IBTYPE=2 S TXT="Individual/Provider",TXT2="Facility"
"RTN","IBCEP8",370,0)
 . ;
"RTN","IBCEP8",371,0)
 . D EN^DDIOL("This provider name exists and is a "_TXT_".","","!")
"RTN","IBCEP8",372,0)
 . D EN^DDIOL("Do you want to change this record to be a "_TXT2)
"RTN","IBCEP8",373,0)
 . ;
"RTN","IBCEP8",374,0)
 . D YN^DICN
"RTN","IBCEP8",375,0)
 . ;
"RTN","IBCEP8",376,0)
 . I %=1 D
"RTN","IBCEP8",377,0)
 . . ;
"RTN","IBCEP8",378,0)
 . . S IBTYPE=$S(IBTYPE=1:2,1:1),IBFLPFLP=IBTYPE
"RTN","IBCEP8",379,0)
 ;
"RTN","IBCEP8",380,0)
 I IBTYPE=2 D STDNAME^XLFNAME(.IBNAM,"GP") S X=IBNAM
"RTN","IBCEP8",381,0)
 I IBTYPE=1,('$$VALFAC^IBCEP8(IBNAM)) K X
"RTN","IBCEP8",382,0)
 Q
"RTN","IBCEP8",383,0)
 ;
"RTN","IBCEP8",384,0)
 ; DESCRIPTION: This routine inputs a provider name and formats it appropriately as an 
"RTN","IBCEP8",385,0)
 ;              individual or a facility name.
"RTN","IBCEP8",386,0)
 ; 
"RTN","IBCEP8",387,0)
 ; INPUTS     : name
"RTN","IBCEP8",388,0)
 ; 
"RTN","IBCEP8",389,0)
 ; OUTPUTS    : formatted name and provider type
"RTN","IBCEP8",390,0)
 ; 
"RTN","IBCEP8",391,0)
 ; VARIABLES  :
"RTN","IBCEP8",392,0)
 ; 
"RTN","IBCEP8",393,0)
 ; GLOBALS      : 
"RTN","IBCEP8",394,0)
 ; 
"RTN","IBCEP8",395,0)
 ; FUNCTIONS    : None
"RTN","IBCEP8",396,0)
 ; 
"RTN","IBCEP8",397,0)
 ; SUBROUTINES  : 
"RTN","IBCEP8",398,0)
 ; 
"RTN","IBCEP8",399,0)
 ; HISTORY    : Original version - 21 September 2010
"RTN","IBCEP8",400,0)
 ;
"RTN","IBCEP8",401,0)
SCREEN(IBNPRV) ;
"RTN","IBCEP8",402,0)
 N IBNPRVN,IBNAME,DR,DIR,DA,DIRUT,X,DTOUT,DUOUT
"RTN","IBCEP8",403,0)
 S IBNPRVN=""
"RTN","IBCEP8",404,0)
 D EN^DDIOL(" ")
"RTN","IBCEP8",405,0)
 D EN^DDIOL("If you do NOT want to edit the provider name or the provider type,","","!")
"RTN","IBCEP8",406,0)
 D EN^DDIOL("then press return at the following NAME prompt.  Otherwise,")
"RTN","IBCEP8",407,0)
 D EN^DDIOL("retype the name as you want it entered into the system.")
"RTN","IBCEP8",408,0)
 D EN^DDIOL(" ")
"RTN","IBCEP8",409,0)
 ;
"RTN","IBCEP8",410,0)
 ; Get the current provider name
"RTN","IBCEP8",411,0)
 ;
"RTN","IBCEP8",412,0)
 S IBNAME=$P(^IBA(355.93,IBNPRV,0),U,1)
"RTN","IBCEP8",413,0)
 ;
"RTN","IBCEP8",414,0)
 ; Get the user's input
"RTN","IBCEP8",415,0)
 ;
"RTN","IBCEP8",416,0)
INPUT ;
"RTN","IBCEP8",417,0)
 S DIR(0)="FOUr^3:30"
"RTN","IBCEP8",418,0)
 S DIR("A")="NAME: "_IBNAME_"//"
"RTN","IBCEP8",419,0)
 ;
"RTN","IBCEP8",420,0)
 S DIR("?")=" "
"RTN","IBCEP8",421,0)
 S DIR("?",1)="Press <ENTER> to accept the displayed provider name"
"RTN","IBCEP8",422,0)
 S DIR("?",2)="or enter the name as you would like it displayed."
"RTN","IBCEP8",423,0)
 ;
"RTN","IBCEP8",424,0)
 S DIR("??")="IB PROV ID MAINT^"
"RTN","IBCEP8",425,0)
 ;
"RTN","IBCEP8",426,0)
 D ^DIR
"RTN","IBCEP8",427,0)
 ;
"RTN","IBCEP8",428,0)
 Q:$D(DTOUT)!$D(DUOUT)
"RTN","IBCEP8",429,0)
 I X["?" G INPUT
"RTN","IBCEP8",430,0)
 S:'$D(DIRUT) IBNPRVN=X
"RTN","IBCEP8",431,0)
 ; The user entered something else
"RTN","IBCEP8",432,0)
 ;
"RTN","IBCEP8",433,0)
 S DIE="^IBA(355.93,"
"RTN","IBCEP8",434,0)
 S DA=IBNPRV
"RTN","IBCEP8",435,0)
 S DR=".01///"_IBNPRVN
"RTN","IBCEP8",436,0)
 D ^DIE
"RTN","IBCEP8",437,0)
 Q
"RTN","IBCEP8",438,0)
 ;
"RTN","IBCEP8",439,0)
 ; End IB*2.0*436 - RBN
"RTN","IBCEP8",440,0)
 ;
"SEC","^DD",355.93,355.93,.01,9)

"SEC","^DD",355.93,355.93,.02,9)

"VER")
8.0^22.0
"^DD",355.93,355.93,.01,0)
NAME^RFX^^0;1^K:($L(X)>30)!($L(X)<3) X I $D(X) D PRVFMT^IBCEP8
"^DD",355.93,355.93,.01,1,0)
^.1
"^DD",355.93,355.93,.01,1,1,0)
355.93^B
"^DD",355.93,355.93,.01,1,1,1)
S ^IBA(355.93,"B",$E(X,1,30),DA)=""
"^DD",355.93,355.93,.01,1,1,2)
K ^IBA(355.93,"B",$E(X,1,30),DA)
"^DD",355.93,355.93,.01,1,2,0)
^^TRIGGER^355.93^.02
"^DD",355.93,355.93,.01,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=IBFLPFLP I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X=IBFLPFLP X ^DD(355.93,.01,1,2,1.4)
"^DD",355.93,355.93,.01,1,2,1.4)
S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,2)=DIV,DIH=355.93,DIG=.02 D ^DICR
"^DD",355.93,355.93,.01,1,2,2)
Q
"^DD",355.93,355.93,.01,1,2,"%D",0)
^^3^3^3100720^
"^DD",355.93,355.93,.01,1,2,"%D",1,0)
Trigger to change provider type based on user input during add/edit of the
"^DD",355.93,355.93,.01,1,2,"%D",2,0)
NAME field (#.01).  Population of this field is based on the value of the
"^DD",355.93,355.93,.01,1,2,"%D",3,0)
IBFLPFLP variable returned by the NAME field input transform.
"^DD",355.93,355.93,.01,1,2,"CREATE CONDITION")
S X=IBFLPFLP
"^DD",355.93,355.93,.01,1,2,"CREATE VALUE")
S X=IBFLPFLP
"^DD",355.93,355.93,.01,1,2,"DELETE VALUE")
NO EFFECT
"^DD",355.93,355.93,.01,1,2,"DT")
3100707
"^DD",355.93,355.93,.01,1,2,"FIELD")
PROVIDER TYPE
"^DD",355.93,355.93,.01,21,0)
^.001^26^26^3100913^^^^
"^DD",355.93,355.93,.01,21,1,0)
This is the name of either an individual NON-VA
"^DD",355.93,355.93,.01,21,2,0)
provider or a NON-VA or another VA facility
"^DD",355.93,355.93,.01,21,3,0)
that provides services to the V.A. for which
"^DD",355.93,355.93,.01,21,4,0)
the V.A. can in turn bill an insurance company
"^DD",355.93,355.93,.01,21,5,0)
for reimbursement.  
"^DD",355.93,355.93,.01,21,6,0)
 
"^DD",355.93,355.93,.01,21,7,0)
For individual type entries:
"^DD",355.93,355.93,.01,21,8,0)
The name should be entered in LAST,FIRST MIDDLE
"^DD",355.93,355.93,.01,21,9,0)
format.  Enter only data that is actually part
"^DD",355.93,355.93,.01,21,10,0)
of the provider's name. Do not include extra
"^DD",355.93,355.93,.01,21,11,0)
titles, identification, flags, local information,
"^DD",355.93,355.93,.01,21,12,0)
etc.  All individual provider names will be
"^DD",355.93,355.93,.01,21,13,0)
converted to the 'standardized' format. 
"^DD",355.93,355.93,.01,21,14,0)
'Standardized' for individuals means all
"^DD",355.93,355.93,.01,21,15,0)
punctuation except '-' and space are removed,
"^DD",355.93,355.93,.01,21,16,0)
the name is changed to all uppercase, 2 or more
"^DD",355.93,355.93,.01,21,17,0)
successive '-' or spaces are converted to a
"^DD",355.93,355.93,.01,21,18,0)
single '-' or space and any words for birth
"^DD",355.93,355.93,.01,21,19,0)
position (1ST-10TH) are changed to their Roman
"^DD",355.93,355.93,.01,21,20,0)
numeral equivalents. 
"^DD",355.93,355.93,.01,21,21,0)
 
"^DD",355.93,355.93,.01,21,22,0)
For facility type entries:
"^DD",355.93,355.93,.01,21,23,0)
The name MUST start with an Alpha character. The
"^DD",355.93,355.93,.01,21,24,0)
name may contain numerals, spaces, commas,
"^DD",355.93,355.93,.01,21,25,0)
periods, and a hyphen or dash.  No other
"^DD",355.93,355.93,.01,21,26,0)
punctuation characters are allowed in the name.
"^DD",355.93,355.93,.01,"DT")
3100917
"^DD",355.93,355.93,.02,0)
PROVIDER TYPE^SX^1:FACILITY/GROUP;2:INDIVIDUAL;^0;2^K:$L(X)>1!($L(X)<1) X
"^DD",355.93,355.93,.02,1,0)
^.1
"^DD",355.93,355.93,.02,1,1,0)
^^TRIGGER^355.93^.03
"^DD",355.93,355.93,.02,1,1,1)
Q
"^DD",355.93,355.93,.02,1,1,2)
X ^DD(355.93,.02,1,1,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=355.93,DIG=.03 D ^DICR
"^DD",355.93,355.93,.02,1,1,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59))="INDIVIDUAL"
"^DD",355.93,355.93,.02,1,1,3)
Do not delete
"^DD",355.93,355.93,.02,1,1,"%D",0)
^.101^2^2^3100722^^
"^DD",355.93,355.93,.02,1,1,"%D",1,0)
This trigger deletes the value of the CREDENTIALS field if the type is
"^DD",355.93,355.93,.02,1,1,"%D",2,0)
no longer an individual provider type.
"^DD",355.93,355.93,.02,1,1,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,1,"DELETE CONDITION")
OLD PROVIDER TYPE="INDIVIDUAL"
"^DD",355.93,355.93,.02,1,1,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,1,"DT")
3100720
"^DD",355.93,355.93,.02,1,1,"FIELD")
CRE
"^DD",355.93,355.93,.02,1,2,0)
^^TRIGGER^355.93^.04
"^DD",355.93,355.93,.02,1,2,1)
Q
"^DD",355.93,355.93,.02,1,2,2)
X ^DD(355.93,.02,1,2,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,4)=DIV,DIH=355.93,DIG=.04 D ^DICR
"^DD",355.93,355.93,.02,1,2,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59))="INDIVIDUAL"
"^DD",355.93,355.93,.02,1,2,3)
Do not delete
"^DD",355.93,355.93,.02,1,2,"%D",0)
^.101^2^2^3100722^^
"^DD",355.93,355.93,.02,1,2,"%D",1,0)
This trigger deletes the value of the SPECIALTY field if the type is
"^DD",355.93,355.93,.02,1,2,"%D",2,0)
no longer an individual provider type.
"^DD",355.93,355.93,.02,1,2,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,2,"DELETE CONDITION")
OLD PROVIDER TYPE="INDIVIDUAL"
"^DD",355.93,355.93,.02,1,2,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,2,"DT")
3100720
"^DD",355.93,355.93,.02,1,2,"FIELD")
SPE
"^DD",355.93,355.93,.02,1,3,0)
^^TRIGGER^355.93^.05
"^DD",355.93,355.93,.02,1,3,1)
Q
"^DD",355.93,355.93,.02,1,3,2)
X ^DD(355.93,.02,1,3,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,5)=DIV,DIH=355.93,DIG=.05 D ^DICR
"^DD",355.93,355.93,.02,1,3,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59))="FACILITY/GROUP"
"^DD",355.93,355.93,.02,1,3,3)
Do not delete
"^DD",355.93,355.93,.02,1,3,"%D",0)
^.101^2^2^3100722^^
"^DD",355.93,355.93,.02,1,3,"%D",1,0)
This trigger deletes the value of the STREET ADDRESS field if the type is
"^DD",355.93,355.93,.02,1,3,"%D",2,0)
no longer a facility type provider.
"^DD",355.93,355.93,.02,1,3,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,3,"DELETE CONDITION")
OLD PROVIDER TYPE="FACILITY/GROUP"
"^DD",355.93,355.93,.02,1,3,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,3,"DT")
3100720
"^DD",355.93,355.93,.02,1,3,"FIELD")
STREET ADDRESS
"^DD",355.93,355.93,.02,1,4,0)
^^TRIGGER^355.93^.06
"^DD",355.93,355.93,.02,1,4,1)
Q
"^DD",355.93,355.93,.02,1,4,2)
X ^DD(355.93,.02,1,4,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,6)=DIV,DIH=355.93,DIG=.06 D ^DICR
"^DD",355.93,355.93,.02,1,4,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59))="FACILITY/GROUP"
"^DD",355.93,355.93,.02,1,4,3)
Do not delete
"^DD",355.93,355.93,.02,1,4,"%D",0)
^.101^2^2^3100722^^
"^DD",355.93,355.93,.02,1,4,"%D",1,0)
This trigger deletes the value of the CITY field if the type is 
"^DD",355.93,355.93,.02,1,4,"%D",2,0)
no longer a facility type provider.
"^DD",355.93,355.93,.02,1,4,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,4,"DELETE CONDITION")
OLD PROVIDER TYPE="FACILITY/GROUP"
"^DD",355.93,355.93,.02,1,4,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,4,"DT")
3100720
"^DD",355.93,355.93,.02,1,4,"FIELD")
CITY
"^DD",355.93,355.93,.02,1,5,0)
^^TRIGGER^355.93^.07
"^DD",355.93,355.93,.02,1,5,1)
Q
"^DD",355.93,355.93,.02,1,5,2)
X ^DD(355.93,.02,1,5,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,7)=DIV,DIH=355.93,DIG=.07 D ^DICR
"^DD",355.93,355.93,.02,1,5,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59))="FACILITY/GROUP"
"^DD",355.93,355.93,.02,1,5,3)
Do not delete
"^DD",355.93,355.93,.02,1,5,"%D",0)
^.101^2^2^3100722^^
"^DD",355.93,355.93,.02,1,5,"%D",1,0)
This trigger deletes the value of the STATE field if the type is 
"^DD",355.93,355.93,.02,1,5,"%D",2,0)
no longer a facility type provider.
"^DD",355.93,355.93,.02,1,5,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,5,"DELETE CONDITION")
OLD PROVIDER TYPE="FACILITY/GROUP"
"^DD",355.93,355.93,.02,1,5,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,5,"DT")
3100720
"^DD",355.93,355.93,.02,1,5,"FIELD")
STATE
"^DD",355.93,355.93,.02,1,6,0)
^^TRIGGER^355.93^.08
"^DD",355.93,355.93,.02,1,6,1)
Q
"^DD",355.93,355.93,.02,1,6,2)
X ^DD(355.93,.02,1,6,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,8)=DIV,DIH=355.93,DIG=.08 D ^DICR
"^DD",355.93,355.93,.02,1,6,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59))="FACILITY/GROUP"
"^DD",355.93,355.93,.02,1,6,3)
Do not delete
"^DD",355.93,355.93,.02,1,6,"%D",0)
^^2^2^3100722^
"^DD",355.93,355.93,.02,1,6,"%D",1,0)
This trigger deletes the value of the ZIP CODE field if the type is
"^DD",355.93,355.93,.02,1,6,"%D",2,0)
no longer a facility type provider.
"^DD",355.93,355.93,.02,1,6,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,6,"DELETE CONDITION")
OLD PROVIDER TYPE="FACILITY/GROUP"
"^DD",355.93,355.93,.02,1,6,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,6,"DT")
3100720
"^DD",355.93,355.93,.02,1,6,"FIELD")
ZIP 
"^DD",355.93,355.93,.02,1,7,0)
^^TRIGGER^355.93^.09
"^DD",355.93,355.93,.02,1,7,1)
Q
"^DD",355.93,355.93,.02,1,7,2)
X ^DD(355.93,.02,1,7,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,9)=DIV,DIH=355.93,DIG=.09 D ^DICR
"^DD",355.93,355.93,.02,1,7,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59))="FACILITY/GROUP"
"^DD",355.93,355.93,.02,1,7,3)
Do not delete
"^DD",355.93,355.93,.02,1,7,"%D",0)
^.101^2^2^3100722^^
"^DD",355.93,355.93,.02,1,7,"%D",1,0)
This trigger deletes the value of the FACILITY DEFAULT ID NUMBER field if
"^DD",355.93,355.93,.02,1,7,"%D",2,0)
the type is no longer a facility type provider.
"^DD",355.93,355.93,.02,1,7,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,7,"DELETE CONDITION")
OLD PROVIDER TYPE="FACILITY/GROUP"
"^DD",355.93,355.93,.02,1,7,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,7,"DT")
3100720
"^DD",355.93,355.93,.02,1,7,"FIELD")
FACILITY DEFAULT ID NUMBER
"^DD",355.93,355.93,.02,1,8,0)
^^TRIGGER^355.93^.1
"^DD",355.93,355.93,.02,1,8,1)
Q
"^DD",355.93,355.93,.02,1,8,2)
X ^DD(355.93,.02,1,8,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,10),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,10)=DIV,DIH=355.93,DIG=.1 D ^DICR
"^DD",355.93,355.93,.02,1,8,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(1)=$C(59)_$P($G(^DD(355.93,.02,0)),U,3) S X=$P($P(Y(1),$C(59)_X_":",2),$C(59))="FACILITY/GROUP"
"^DD",355.93,355.93,.02,1,8,3)
Do not delete
"^DD",355.93,355.93,.02,1,8,"%D",0)
^^2^2^3100722^
"^DD",355.93,355.93,.02,1,8,"%D",1,0)
This trigger deletes the value of the STREET ADDRESS LINE 2 field if the
"^DD",355.93,355.93,.02,1,8,"%D",2,0)
provider type is no longer a facility type provider.
"^DD",355.93,355.93,.02,1,8,"CREATE VALUE")
NO EFFECT
"^DD",355.93,355.93,.02,1,8,"DELETE CONDITION")
OLD PROVIDER TYPE="FACILITY/GROUP"
"^DD",355.93,355.93,.02,1,8,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,8,"DT")
3100720
"^DD",355.93,355.93,.02,1,8,"FIELD")
STREET ADDRESS LINE 2
"^DD",355.93,355.93,.02,1,9,0)
^^TRIGGER^355.93^.13
"^DD",355.93,355.93,.02,1,9,1)
X ^DD(355.93,.02,1,9,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X=DIV S X="16" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,13)=DIV,DIH=355.93,DIG=.13 D ^DICR
"^DD",355.93,355.93,.02,1,9,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S Y(2)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=Y(0),X=X S X=X="1",Y(1)=$G(X) S X=$P(Y(2),U,9)]"",Y=X,X=Y(1),X=X&Y
"^DD",355.93,355.93,.02,1,9,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(355.93,DIV(0),0)),DIV=X S $P(^(0),U,13)=DIV,DIH=355.93,DIG=.13 D ^DICR
"^DD",355.93,355.93,.02,1,9,"%D",0)
^^3^3^3100722^
"^DD",355.93,355.93,.02,1,9,"%D",1,0)
This trigger sets the primary id qualifier to the default value of 16 if 
"^DD",355.93,355.93,.02,1,9,"%D",2,0)
the provider type is a facility and the FACILITY DEFAULT ID NUMBER is 
"^DD",355.93,355.93,.02,1,9,"%D",3,0)
not null.
"^DD",355.93,355.93,.02,1,9,"CREATE CONDITION")
INTERNAL(PROVIDER TYPE)="1"&(FACILITY DEFAULT ID NUMBER]"")
"^DD",355.93,355.93,.02,1,9,"CREATE VALUE")
"16"
"^DD",355.93,355.93,.02,1,9,"DELETE VALUE")
@
"^DD",355.93,355.93,.02,1,9,"DT")
3100720
"^DD",355.93,355.93,.02,1,9,"FIELD")
PRIMARY ID QUALIFIER
"^DD",355.93,355.93,.02,3)
Enter 1 or 2 to designate this entry as a facility or an individual.
"^DD",355.93,355.93,.02,5,1,0)
355.93^.01^2
"^DD",355.93,355.93,.02,21,0)
^^5^5^3100722^
"^DD",355.93,355.93,.02,21,1,0)
This field identifies the type of provider being defined.  Facility
"^DD",355.93,355.93,.02,21,2,0)
providers can be used to fill in the name and address of the non-VA
"^DD",355.93,355.93,.02,21,3,0)
facility where services were rendered (box 32 on the CMS-1500).  An
"^DD",355.93,355.93,.02,21,4,0)
individual provider can be selected as the rendering, attending,
"^DD",355.93,355.93,.02,21,5,0)
referring or operating provider on a bill.
"^DD",355.93,355.93,.02,"DT")
3100722
"^DD",355.93,355.93,.1,0)
STREET ADDRESS LINE 2^FX^^0;10^K:$L(X)>30!($L(X)<1) X I $D(X),$P($G(^IBA(355.93,DA,0)),U,2)'=1 K X
"^DD",355.93,355.93,.1,3)
Answer must be 1-30 characters in length.
"^DD",355.93,355.93,.1,5,1,0)
355.93^.02^8
"^DD",355.93,355.93,.1,21,0)
^^3^3^3030821^
"^DD",355.93,355.93,.1,21,1,0)
This is line 2 of the street address of the non-VA facility that rendered
"^DD",355.93,355.93,.1,21,2,0)
the care that is being billed by the VA.  It is only valid for FACILITY
"^DD",355.93,355.93,.1,21,3,0)
providers.
"^DD",355.93,355.93,.1,"DT")
3100721
"^DD",399,399,232,0)
NON-VA FACILITY^*P355.93X^IBA(355.93,^U2;10^S DIC("S")="I $P(^(0),U,2)=1" D ^DIC K DIC S DIC=$G(DIE),X=+Y K:Y<0 X
"^DD",399,399,232,1,0)
^.1
"^DD",399,399,232,1,1,0)
^^TRIGGER^399^234
"^DD",399,399,232,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,12),X=X S DIU=X K Y X ^DD(399,232,1,1,1.1) X ^DD(399,232,1,1,1.4)
"^DD",399,399,232,1,1,1.1)
S X=DIV S I(0,0)=$S($D(D0):D0,1:""),D0=DIV S:'$D(^IBA(355.93,+D0,0)) D0=-1 S Y(101)=$S($D(^IBA(355.93,D0,0)):^(0),1:"") S X=$P(Y(101),U,9) S D0=I(0,0)
"^DD",399,399,232,1,1,1.4)
S DIH=$S($D(^DGCR(399,DIV(0),"U2")):^("U2"),1:""),DIV=X S $P(^("U2"),U,12)=DIV,DIH=399,DIG=234 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399,232,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,12),X=X S DIU=X K Y S X="" X ^DD(399,232,1,1,2.4)
"^DD",399,399,232,1,1,2.4)
S DIH=$S($D(^DGCR(399,DIV(0),"U2")):^("U2"),1:""),DIV=X S $P(^("U2"),U,12)=DIV,DIH=399,DIG=234 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399,232,1,1,"CREATE VALUE")
NON-VA FACILITY:FACILITY DEFAULT ID NUMBER
"^DD",399,399,232,1,1,"DELETE VALUE")
@
"^DD",399,399,232,1,1,"DT")
3010102
"^DD",399,399,232,1,1,"FIELD")
NON-VA CARE ID #
"^DD",399,399,232,1,2,0)
^^TRIGGER^399^233
"^DD",399,399,232,1,2,1)
Q
"^DD",399,399,232,1,2,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X="" X ^DD(399,232,1,2,2.4)
"^DD",399,399,232,1,2,2.4)
S DIH=$S($D(^DGCR(399,DIV(0),"U2")):^("U2"),1:""),DIV=X S $P(^("U2"),U,11)=DIV,DIH=399,DIG=233 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",399,399,232,1,2,3)
Do not delete
"^DD",399,399,232,1,2,"%D",0)
^^2^2^3010110^
"^DD",399,399,232,1,2,"%D",1,0)
This cross reference deletes the NON-VA CARE TYPE field when the NON-VA
"^DD",399,399,232,1,2,"%D",2,0)
Facility value is deleted.
"^DD",399,399,232,1,2,"CREATE VALUE")
NO EFFECT
"^DD",399,399,232,1,2,"DELETE VALUE")
@
"^DD",399,399,232,1,2,"DT")
3010110
"^DD",399,399,232,1,2,"FIELD")
NON-VA CARE TYPE
"^DD",399,399,232,1,3,0)
^^TRIGGER^399^235
"^DD",399,399,232,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=$$CLIAREQ^IBCEP8A(DA) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X=DIV S X=$$CLIA^IBCEP8A(DA) X ^DD(399,232,1,3,1.4)
"^DD",399,399,232,1,3,1.4)
S DIH=$G(^DGCR(399,DIV(0),"U2")),DIV=X S $P(^("U2"),U,13)=DIV,DIH=399,DIG=235 D ^DICR
"^DD",399,399,232,1,3,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=$$CLIAREQ^IBCEP8A(DA) I X S X=DIV S Y(1)=$S($D(^DGCR(399,D0,"U2")):^("U2"),1:"") S X=$P(Y(1),U,13),X=X S DIU=X K Y S X=DIV S X=$$CLIA^IBCEP8A(DA) X ^DD(399,232,1,3,2.4)
"^DD",399,399,232,1,3,2.4)
S DIH=$G(^DGCR(399,DIV(0),"U2")),DIV=X S $P(^("U2"),U,13)=DIV,DIH=399,DIG=235 D ^DICR
"^DD",399,399,232,1,3,"%D",0)
^^3^3^3060104^
"^DD",399,399,232,1,3,"%D",1,0)
This trigger will set the LAB CLIA NUMBER field to the default
"^DD",399,399,232,1,3,"%D",2,0)
CLIA# for the facility - either VA facility or non-VA facility.
"^DD",399,399,232,1,3,"%D",3,0)
The trigger condition ensures that lab services are on the claim.
"^DD",399,399,232,1,3,"CREATE CONDITION")
S X=$$CLIAREQ^IBCEP8A(DA)
"^DD",399,399,232,1,3,"CREATE VALUE")
S X=$$CLIA^IBCEP8A(DA)
"^DD",399,399,232,1,3,"DELETE CONDITION")
S X=$$CLIAREQ^IBCEP8A(DA)
"^DD",399,399,232,1,3,"DELETE VALUE")
S X=$$CLIA^IBCEP8A(DA)
"^DD",399,399,232,1,3,"DT")
3060104
"^DD",399,399,232,1,3,"FIELD")
LAB CLIA NUMBER
"^DD",399,399,232,1,4,0)
^^TRIGGER^399^244
"^DD",399,399,232,1,4,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"U3")):^("U3"),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$P($$TAXGET^IBCEP81(X),U,2) X ^DD(399,232,1,4,1.4)
"^DD",399,399,232,1,4,1.4)
S DIH=$G(^DGCR(399,DIV(0),"U3")),DIV=X S $P(^("U3"),U,3)=DIV,DIH=399,DIG=244 D ^DICR
"^DD",399,399,232,1,4,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^DGCR(399,D0,"U3")):^("U3"),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^DGCR(399,DIV(0),"U3")),DIV=X S $P(^("U3"),U,3)=DIV,DIH=399,DIG=244 D ^DICR
"^DD",399,399,232,1,4,3)
Do not delete
"^DD",399,399,232,1,4,"%D",0)
^^2^2^3060614^
"^DD",399,399,232,1,4,"%D",1,0)
This xref updates the NON-VA FACILITY TAXONOMY field with the non-VA 
"^DD",399,399,232,1,4,"%D",2,0)
facility's default taxonomy.
"^DD",399,399,232,1,4,"CREATE VALUE")
S X=$P($$TAXGET^IBCEP81(X),U,2)
"^DD",399,399,232,1,4,"DELETE VALUE")
@
"^DD",399,399,232,1,4,"DT")
3060614
"^DD",399,399,232,1,4,"FIELD")
#244
"^DD",399,399,232,3)
Enter the non-VA/other VA facility where care was given.  
"^DD",399,399,232,12)
Must be a facility provider type entry.
"^DD",399,399,232,12.1)
S DIC("S")="I $P(^(0),U,2)=1"
"^DD",399,399,232,21,0)
^.001^2^2^3100910^^^^
"^DD",399,399,232,21,1,0)
The is the name of the non-VA or outside VA facility where the services
"^DD",399,399,232,21,2,0)
were rendered.
"^DD",399,399,232,"DT")
3100916
"BLD",8432,6)
^408
**END**
**END**
