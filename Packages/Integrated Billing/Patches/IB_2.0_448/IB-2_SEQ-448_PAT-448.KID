Released IB*2*448 SEQ #448
Extracted from mail message
**KIDS**:IB*2.0*448^

**INSTALL NAME**
IB*2.0*448
"BLD",8615,0)
IB*2.0*448^INTEGRATED BILLING^0^3110311^y
"BLD",8615,1,0)
^^4^4^3110311^
"BLD",8615,1,1,0)
THIS PATCH MAKES MODIFICATIONS TO THE FUNCTION THAT DETERMINES THE
"BLD",8615,1,2,0)
START OF CARE DATE.  THIS WILL ALLOW THE CORRECT START OF CARE DATE
"BLD",8615,1,3,0)
TO BE DISPLAYED WHEN AN OUTPATIENT EVENT TAKES PLACE ON A DATE THAT
"BLD",8615,1,4,0)
OCCURS BETWEEN THE ADMIT AND DISCHARGE DATES OF AN INPATIENT EVENT.
"BLD",8615,4,0)
^9.64PA^^
"BLD",8615,6)
1^
"BLD",8615,6.3)
2
"BLD",8615,"KRN",0)
^9.67PA^779.2^20
"BLD",8615,"KRN",.4,0)
.4
"BLD",8615,"KRN",.401,0)
.401
"BLD",8615,"KRN",.402,0)
.402
"BLD",8615,"KRN",.403,0)
.403
"BLD",8615,"KRN",.5,0)
.5
"BLD",8615,"KRN",.84,0)
.84
"BLD",8615,"KRN",3.6,0)
3.6
"BLD",8615,"KRN",3.8,0)
3.8
"BLD",8615,"KRN",9.2,0)
9.2
"BLD",8615,"KRN",9.8,0)
9.8
"BLD",8615,"KRN",9.8,"NM",0)
^9.68A^1^1
"BLD",8615,"KRN",9.8,"NM",1,0)
IBCEF21^^0^B23776552
"BLD",8615,"KRN",9.8,"NM","B","IBCEF21",1)

"BLD",8615,"KRN",19,0)
19
"BLD",8615,"KRN",19.1,0)
19.1
"BLD",8615,"KRN",101,0)
101
"BLD",8615,"KRN",409.61,0)
409.61
"BLD",8615,"KRN",771,0)
771
"BLD",8615,"KRN",779.2,0)
779.2
"BLD",8615,"KRN",870,0)
870
"BLD",8615,"KRN",8989.51,0)
8989.51
"BLD",8615,"KRN",8989.52,0)
8989.52
"BLD",8615,"KRN",8994,0)
8994
"BLD",8615,"KRN","B",.4,.4)

"BLD",8615,"KRN","B",.401,.401)

"BLD",8615,"KRN","B",.402,.402)

"BLD",8615,"KRN","B",.403,.403)

"BLD",8615,"KRN","B",.5,.5)

"BLD",8615,"KRN","B",.84,.84)

"BLD",8615,"KRN","B",3.6,3.6)

"BLD",8615,"KRN","B",3.8,3.8)

"BLD",8615,"KRN","B",9.2,9.2)

"BLD",8615,"KRN","B",9.8,9.8)

"BLD",8615,"KRN","B",19,19)

"BLD",8615,"KRN","B",19.1,19.1)

"BLD",8615,"KRN","B",101,101)

"BLD",8615,"KRN","B",409.61,409.61)

"BLD",8615,"KRN","B",771,771)

"BLD",8615,"KRN","B",779.2,779.2)

"BLD",8615,"KRN","B",870,870)

"BLD",8615,"KRN","B",8989.51,8989.51)

"BLD",8615,"KRN","B",8989.52,8989.52)

"BLD",8615,"KRN","B",8994,8994)

"BLD",8615,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",8615,"QUES",0)
^9.62^^
"BLD",8615,"REQB",0)
^9.611^1^1
"BLD",8615,"REQB",1,0)
IB*2.0*389^2
"BLD",8615,"REQB","B","IB*2.0*389",1)

"MBREQ")
0
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)

"PKG",200,20,"B",2,1)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321^2990406^2447
"PKG",200,22,1,"PAH",1,0)
448^3110311^1149
"PKG",200,22,1,"PAH",1,1,0)
^^4^4^3110311
"PKG",200,22,1,"PAH",1,1,1,0)
THIS PATCH MAKES MODIFICATIONS TO THE FUNCTION THAT DETERMINES THE
"PKG",200,22,1,"PAH",1,1,2,0)
START OF CARE DATE.  THIS WILL ALLOW THE CORRECT START OF CARE DATE
"PKG",200,22,1,"PAH",1,1,3,0)
TO BE DISPLAYED WHEN AN OUTPATIENT EVENT TAKES PLACE ON A DATE THAT
"PKG",200,22,1,"PAH",1,1,4,0)
OCCURS BETWEEN THE ADMIT AND DISCHARGE DATES OF AN INPATIENT EVENT.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
1
"RTN","IBCEF21")
0^1^B23776552^B23765234
"RTN","IBCEF21",1,0)
IBCEF21 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS CONTINUED ; 3/9/11 1:12pm
"RTN","IBCEF21",2,0)
 ;;2.0;INTEGRATED BILLING;**51,296,371,389,448**;21-MAR-94;Build 2
"RTN","IBCEF21",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEF21",4,0)
 ;
"RTN","IBCEF21",5,0)
COID(IBIFN) ; Claim office ID
"RTN","IBCEF21",6,0)
 N IBCOID,IBCOID1,IBIN
"RTN","IBCEF21",7,0)
 S IBIN=$$CURR^IBCEF2(IBIFN),IBCOID1="",IBCOID=$P($$ADDRESS^IBCNSC0(IBIN,.11,5),U,11)
"RTN","IBCEF21",8,0)
 ;
"RTN","IBCEF21",9,0)
 I IBIN D
"RTN","IBCEF21",10,0)
 . I $D(^IBA(364.2,"C",IBIFN)) S IBCOID1=$P($$ADDRESS^IBCNSC0(IBIN,.18,5),U,11) Q  ;Rx
"RTN","IBCEF21",11,0)
 . I $P($G(^DGCR(399,IBIFN,0)),U,5)<3 S IBCOID1=$P($$ADDRESS^IBCNSC0(IBIN,.12,5),U,11) Q  ;Inpt
"RTN","IBCEF21",12,0)
 . I $P($G(^DGCR(399,IBIFN,0)),U,5)'<3 S IBCOID1=$P($$ADDRESS^IBCNSC0(IBIN,.16,5),U,11) Q  ;Outpt
"RTN","IBCEF21",13,0)
 ;
"RTN","IBCEF21",14,0)
 Q $S(IBCOID1'="":IBCOID1,1:IBCOID)
"RTN","IBCEF21",15,0)
 ;
"RTN","IBCEF21",16,0)
ESGHPST(IBIFN,COB) ; return insureds employment status if the bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF21",17,0)
 ; ESGHP FLAG (2.312,2.1) ^ the employment status (2.312,2.11)
"RTN","IBCEF21",18,0)
 ;
"RTN","IBCEF21",19,0)
 N PPOL,DFN,X,Y S Y=""
"RTN","IBCEF21",20,0)
 S PPOL=$$PPOL^IBCEF2($G(IBIFN),$G(COB)),DFN=$P($G(^DGCR(399,+$G(IBIFN),0)),U,2)
"RTN","IBCEF21",21,0)
 I +PPOL,+DFN S X=$G(^DPT(DFN,.312,+PPOL,2)) S Y=+$P(X,U,10)_U_$P(X,U,11)
"RTN","IBCEF21",22,0)
 Q Y
"RTN","IBCEF21",23,0)
 ;
"RTN","IBCEF21",24,0)
ESGHPNL(IBIFN,COB) ; return employer name and location if the bill policy defined by COB is an Employer Sponsored Group Health Plan
"RTN","IBCEF21",25,0)
 ; ESGHP FLAG (2.312,2.1) ^ employer name (2.312,2.015) ^ employer city (2.312,2.05) 
"RTN","IBCEF21",26,0)
 ;                        ^ employer state abbr (2.312,2.06) ^ employer state ifn  (2.312,2.06)
"RTN","IBCEF21",27,0)
 ;
"RTN","IBCEF21",28,0)
 N PPOL,DFN,X,Y S Y=""
"RTN","IBCEF21",29,0)
 S PPOL=$$PPOL^IBCEF2($G(IBIFN),$G(COB)),DFN=$P($G(^DGCR(399,+$G(IBIFN),0)),U,2)
"RTN","IBCEF21",30,0)
 I +PPOL,+DFN S X=$G(^DPT(DFN,.312,+PPOL,2)) S Y=+$P(X,U,10)_U_$P(X,U,9)_U_$P(X,U,5)_U_$P($G(^DIC(5,+$P(X,U,6),0)),U,2)_U_$P(X,U,6)
"RTN","IBCEF21",31,0)
 Q Y
"RTN","IBCEF21",32,0)
 ;
"RTN","IBCEF21",33,0)
REMARKS(IBIFN) ; Compile array of bill remarks
"RTN","IBCEF21",34,0)
 ;IBIFN = bill ien
"RTN","IBCEF21",35,0)
 N Z,Z0,Z1,IBARRAY,IBSM
"RTN","IBCEF21",36,0)
 S Z=0
"RTN","IBCEF21",37,0)
 ;S:$P($G(^DGCR(399,IBIFN,"U1")),U,2) Z=Z+1,Z0=$P(^("U1"),U,2),IBXDATA(Z)="OFFSET AMOUNT: "_"$"_+$P(Z0,".")_"."_$E($P(Z0,".",2)_"00",1,2)
"RTN","IBCEF21",38,0)
 S:$P($G(^DGCR(399,IBIFN,"U1")),U,8)'="" Z=Z+1,IBXDATA(Z)=$P(^("U1"),U,8) ;Bill comment on bill
"RTN","IBCEF21",39,0)
 S Z0=$G(^DGCR(399,IBIFN,0)),Z1=$G(^DGCR(399.3,+$P(Z0,U,7),0))
"RTN","IBCEF21",40,0)
 D SET^IBCSC5B(IBIFN,.IBARRAY)
"RTN","IBCEF21",41,0)
 I $P($G(IBARRAY),U,2) D  ;Prosthetics
"RTN","IBCEF21",42,0)
 . S Z0=0 F  S Z0=$O(IBARRAY(Z0)) Q:Z0=""  S Z1=0 F  S Z1=$O(IBARRAY(Z0,Z1)) Q:'Z1  S Z=Z+1,IBXDATA(Z)="Prosthetic: "_$E($$PINB^IBCSC5B(+IBARRAY(Z0,Z1)),1,39)_" "_$E(Z0,4,5)_"/"_$E(Z0,6,7)_"/"_$E(Z0,1,2)
"RTN","IBCEF21",43,0)
 Q
"RTN","IBCEF21",44,0)
 ;
"RTN","IBCEF21",45,0)
CREM(IBIFN) ; Compile array of bill remarks common to every bill
"RTN","IBCEF21",46,0)
 ;IBIFN = bill ien
"RTN","IBCEF21",47,0)
 N Z
"RTN","IBCEF21",48,0)
 S Z=0
"RTN","IBCEF21",49,0)
 S:$P($G(^IBE(350.9,1,1)),U,4)'="" Z=Z+1,IBXDATA(Z)=$P(^(1),U,4) ;Site specific 'every bill' comment
"RTN","IBCEF21",50,0)
 Q
"RTN","IBCEF21",51,0)
 ;
"RTN","IBCEF21",52,0)
ADMDT(IBIFN,NOOUTCK) ; Calculate admission/start of care date/time
"RTN","IBCEF21",53,0)
 ; IBIFN = bill ien
"RTN","IBCEF21",54,0)
 ; NOOUTCK = flag that will:
"RTN","IBCEF21",55,0)
 ;          (1) no check for inpt episode overlap for outpt
"RTN","IBCEF21",56,0)
 ;          (0 or null) performs check for inpt episode overlap for outpt
"RTN","IBCEF21",57,0)
 ;                                      
"RTN","IBCEF21",58,0)
 ; Returns IBXDATA = fileman date format
"RTN","IBCEF21",59,0)
 N Z,Z0,Z1
"RTN","IBCEF21",60,0)
 S Z=$G(^DGCR(399,IBIFN,0)),Z1=$P($G(^("U")),U,20),Z0=$$INPAT^IBCEF(IBIFN,1)
"RTN","IBCEF21",61,0)
 S IBXDATA=$S(Z0&$P(Z,U,8):$P($G(^DGPT(+$P(Z,U,8),0)),U,2),1:"")
"RTN","IBCEF21",62,0)
 S:'IBXDATA IBXDATA=$P(Z,U,3)_$S(Z0&(Z1<25):"."_$E("0",$L(Z1))_Z1,1:"")
"RTN","IBCEF21",63,0)
 ; Check to see if outpt episode (date in event date) overlaps inpt
"RTN","IBCEF21",64,0)
 ;  episode - use admit date if it does
"RTN","IBCEF21",65,0)
 I 'Z0,IBXDATA,'$G(NOOUTCK) D
"RTN","IBCEF21",66,0)
 . N VAINDT,VAIN,DFN
"RTN","IBCEF21",67,0)
 . S VAINDT=IBXDATA,DFN=$P($G(^DGCR(399,IBIFN,0)),U,2)
"RTN","IBCEF21",68,0)
 . D INP^VADPT S IBXDATA=+VAIN(7) S:'IBXDATA IBXDATA=""
"RTN","IBCEF21",69,0)
 I 'IBXDATA,'Z0 S IBXDATA=$$SERVDT^IBCEF(IBIFN,,2)
"RTN","IBCEF21",70,0)
 Q
"RTN","IBCEF21",71,0)
 ;
"RTN","IBCEF21",72,0)
DISDT(IBIFN) ; Calculate discharge date
"RTN","IBCEF21",73,0)
 ; IBIFN = bill ien
"RTN","IBCEF21",74,0)
 N Z,Z0
"RTN","IBCEF21",75,0)
 S Z=$$INPAT^IBCEF(IBIFN,1),Z0=$G(^DGCR(399,IBIFN,0))
"RTN","IBCEF21",76,0)
 I Z S IBXDATA=+$G(^DGPT(+$P(Z0,U,8),70)) S:'IBXDATA IBXDATA=$P(Z0,U,16)
"RTN","IBCEF21",77,0)
 I 'Z N VAINDT,VAIN,DFN S DFN=$P($G(^DGCR(399,IBIFN,0)),U,2) D INP^VADPT I VAIN(1) S IBXDATA=+$G(^DGPM(+$P($G(^DGPM(+VAIN(1),0)),U,17),0))
"RTN","IBCEF21",78,0)
 Q
"RTN","IBCEF21",79,0)
 ;
"RTN","IBCEF21",80,0)
INSSECID(IBIFN,TYPE,SEQ) ; Extract subscriber and patient prim/sec ID's
"RTN","IBCEF21",81,0)
 ; IBIFN required
"RTN","IBCEF21",82,0)
 ; TYPE is either "PAT" or "SUB" to indicate we need to extract either
"RTN","IBCEF21",83,0)
 ;          patient or subscriber ID information.  Default="SUB".
"RTN","IBCEF21",84,0)
 ; SEQ is the insurance sequence# (1,2,3).  Default is current ins seq#.
"RTN","IBCEF21",85,0)
 ;
"RTN","IBCEF21",86,0)
 ; Output:
"RTN","IBCEF21",87,0)
 ; Function returns an 8-piece string as follows.
"RTN","IBCEF21",88,0)
 ;   [1] primary qualifier
"RTN","IBCEF21",89,0)
 ;   [2] primary ID
"RTN","IBCEF21",90,0)
 ;   [3] secondary qual(1)
"RTN","IBCEF21",91,0)
 ;   [4] secondary ID(1)
"RTN","IBCEF21",92,0)
 ;   [5] secondary qual(2)
"RTN","IBCEF21",93,0)
 ;   [6] secondary ID(2)
"RTN","IBCEF21",94,0)
 ;   [7] secondary qual(3)
"RTN","IBCEF21",95,0)
 ;   [8] secondary ID(3)
"RTN","IBCEF21",96,0)
 ;
"RTN","IBCEF21",97,0)
 NEW DATA,DFN,POL,IB0,IB5,REL
"RTN","IBCEF21",98,0)
 S DATA=""
"RTN","IBCEF21",99,0)
 S IBIFN=+$G(IBIFN) I 'IBIFN G INSSX
"RTN","IBCEF21",100,0)
 I $G(TYPE)="" S TYPE="SUB"               ; default type of ID's to get
"RTN","IBCEF21",101,0)
 I '$F(".PAT.SUB.","."_TYPE_".") G INSSX
"RTN","IBCEF21",102,0)
 I '$G(SEQ) S SEQ=$$COBN^IBCEF(IBIFN)     ; default current ins seq#
"RTN","IBCEF21",103,0)
 I '$F(".1.2.3.","."_SEQ_".") G INSSX
"RTN","IBCEF21",104,0)
 S DFN=+$P($G(^DGCR(399,IBIFN,0)),U,2) I 'DFN G INSSX
"RTN","IBCEF21",105,0)
 S POL=+$P($G(^DGCR(399,IBIFN,"M")),U,SEQ+11) I 'POL G INSSX
"RTN","IBCEF21",106,0)
 S IB0=$G(^DPT(DFN,.312,POL,0)) I IB0="" G INSSX
"RTN","IBCEF21",107,0)
 S IB5=$G(^DPT(DFN,.312,POL,5))
"RTN","IBCEF21",108,0)
 S REL=+$P(IB0,U,16)                      ; pat rel to insured
"RTN","IBCEF21",109,0)
 S $P(DATA,U,1)="MI"
"RTN","IBCEF21",110,0)
 S $P(DATA,U,2)=$P(IB0,U,2)               ; subscriber primary ID
"RTN","IBCEF21",111,0)
 S $P(DATA,U,3,8)=$P(IB5,U,2,7)           ; subscriber secondary data
"RTN","IBCEF21",112,0)
 I TYPE="PAT",REL'=1 D
"RTN","IBCEF21",113,0)
 . S $P(DATA,U,2)=$P(IB5,U,1)             ; patient primary ID
"RTN","IBCEF21",114,0)
 . S $P(DATA,U,3,8)=$P(IB5,U,8,13)        ; patient secondary data
"RTN","IBCEF21",115,0)
 . Q
"RTN","IBCEF21",116,0)
 ;
"RTN","IBCEF21",117,0)
 S DATA=$$SCRUB(DATA)     ; scrub the data
"RTN","IBCEF21",118,0)
INSSX ;
"RTN","IBCEF21",119,0)
 Q DATA
"RTN","IBCEF21",120,0)
 ;
"RTN","IBCEF21",121,0)
SCRUB(DATA) ; Scrub the 8-piece string gathered above
"RTN","IBCEF21",122,0)
 NEW PCE
"RTN","IBCEF21",123,0)
 ;
"RTN","IBCEF21",124,0)
 ; make sure you can't have an ID without a qualifier or a qualifier
"RTN","IBCEF21",125,0)
 ; without an ID.  Check all 4 pairs.
"RTN","IBCEF21",126,0)
 F PCE=1,3,5,7 D
"RTN","IBCEF21",127,0)
 . I $P(DATA,U,PCE)'="",$P(DATA,U,PCE+1)'="" Q
"RTN","IBCEF21",128,0)
 . S ($P(DATA,U,PCE),$P(DATA,U,PCE+1))=""
"RTN","IBCEF21",129,0)
 . Q
"RTN","IBCEF21",130,0)
 ;
"RTN","IBCEF21",131,0)
 ; fill in secondary gaps.  If Set1 and Set2 are blank, but Set3 exists
"RTN","IBCEF21",132,0)
 ; then move Set3 to Set1 and delete Set3.
"RTN","IBCEF21",133,0)
 I $P(DATA,U,3)="",$P(DATA,U,5)="",$P(DATA,U,7)'="" D
"RTN","IBCEF21",134,0)
 . S $P(DATA,U,3)=$P(DATA,U,7),$P(DATA,U,4)=$P(DATA,U,8)
"RTN","IBCEF21",135,0)
 . S ($P(DATA,U,7),$P(DATA,U,8))=""
"RTN","IBCEF21",136,0)
 . Q
"RTN","IBCEF21",137,0)
 ;
"RTN","IBCEF21",138,0)
 ; fill in secondary gaps more generically.
"RTN","IBCEF21",139,0)
 ; If Set(n) is blank, but Set(n+1) exists, then move it up.
"RTN","IBCEF21",140,0)
 F PCE=3,5 D
"RTN","IBCEF21",141,0)
 . I $P(DATA,U,PCE)="",$P(DATA,U,PCE+2)'="" D
"RTN","IBCEF21",142,0)
 .. S $P(DATA,U,PCE)=$P(DATA,U,PCE+2)
"RTN","IBCEF21",143,0)
 .. S $P(DATA,U,PCE+1)=$P(DATA,U,PCE+3)
"RTN","IBCEF21",144,0)
 .. S ($P(DATA,U,PCE+2),$P(DATA,U,PCE+3))=""
"RTN","IBCEF21",145,0)
 .. Q
"RTN","IBCEF21",146,0)
 . Q
"RTN","IBCEF21",147,0)
 ;
"RTN","IBCEF21",148,0)
 Q DATA
"RTN","IBCEF21",149,0)
 ;
"VER")
8.0^22.0
"BLD",8615,6)
^448
**END**
**END**
