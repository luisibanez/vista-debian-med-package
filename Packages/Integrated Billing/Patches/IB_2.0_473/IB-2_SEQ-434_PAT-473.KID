Released IB*2*473 SEQ #434
Extracted from mail message
**KIDS**:IB*2.0*473^

**INSTALL NAME**
IB*2.0*473
"BLD",8205,0)
IB*2.0*473^INTEGRATED BILLING^0^3120308^y
"BLD",8205,1,0)
^^1^1^3120223^^^^
"BLD",8205,1,1,0)
HIPAA 5010 maintenance support patch.
"BLD",8205,4,0)
^9.64PA^364.5^4
"BLD",8205,4,350.8,0)
350.8
"BLD",8205,4,350.8,222)
n^n^f^^n^^y^o^n
"BLD",8205,4,350.8,224)
I $$INC3508^IBY473PR(Y)
"BLD",8205,4,364.5,0)
364.5
"BLD",8205,4,364.5,222)
n^n^f^^n^^y^o^n
"BLD",8205,4,364.5,224)
I $$INCLUDE^IBY473PR(5,Y)
"BLD",8205,4,364.6,0)
364.6
"BLD",8205,4,364.6,222)
n^n^f^^y^^y^o^n
"BLD",8205,4,364.6,224)
I $$INCLUDE^IBY473PR(6,Y)
"BLD",8205,4,364.7,0)
364.7
"BLD",8205,4,364.7,222)
n^n^f^^y^^y^o^n
"BLD",8205,4,364.7,224)
I $$INCLUDE^IBY473PR(7,Y)
"BLD",8205,4,"B",350.8,350.8)

"BLD",8205,4,"B",364.5,364.5)

"BLD",8205,4,"B",364.6,364.6)

"BLD",8205,4,"B",364.7,364.7)

"BLD",8205,6.3)
29
"BLD",8205,"ABPKG")
n
"BLD",8205,"INI")
IBY473PR
"BLD",8205,"INID")
^y^y
"BLD",8205,"INIT")
IBY473PO
"BLD",8205,"KRN",0)
^9.67PA^779.2^20
"BLD",8205,"KRN",.4,0)
.4
"BLD",8205,"KRN",.4,"NM",0)
^9.68A^^
"BLD",8205,"KRN",.401,0)
.401
"BLD",8205,"KRN",.402,0)
.402
"BLD",8205,"KRN",.403,0)
.403
"BLD",8205,"KRN",.5,0)
.5
"BLD",8205,"KRN",.84,0)
.84
"BLD",8205,"KRN",3.6,0)
3.6
"BLD",8205,"KRN",3.8,0)
3.8
"BLD",8205,"KRN",9.2,0)
9.2
"BLD",8205,"KRN",9.8,0)
9.8
"BLD",8205,"KRN",9.8,"NM",0)
^9.68A^14^14
"BLD",8205,"KRN",9.8,"NM",1,0)
IBJTCA1^^0^B53091604
"BLD",8205,"KRN",9.8,"NM",2,0)
IBCEF11^^0^B67207596
"BLD",8205,"KRN",9.8,"NM",3,0)
IBY473PR^^0^B1657081
"BLD",8205,"KRN",9.8,"NM",4,0)
IBY473PO^^0^B10300393
"BLD",8205,"KRN",9.8,"NM",5,0)
IBJDF41^^0^B88827246
"BLD",8205,"KRN",9.8,"NM",6,0)
IBCBB2^^0^B51205466
"BLD",8205,"KRN",9.8,"NM",7,0)
IBCEFP^^0^B115077680
"BLD",8205,"KRN",9.8,"NM",8,0)
IBCU72^^0^B16150008
"BLD",8205,"KRN",9.8,"NM",9,0)
IBCEU1^^0^B90709480
"BLD",8205,"KRN",9.8,"NM",10,0)
IBNCPDP1^^0^B196557252
"BLD",8205,"KRN",9.8,"NM",11,0)
IBCSC9^^0^B7536045
"BLD",8205,"KRN",9.8,"NM",12,0)
IBCSC11^^0^B7658686
"BLD",8205,"KRN",9.8,"NM",13,0)
IBCEF81^^0^B108877759
"BLD",8205,"KRN",9.8,"NM",14,0)
IBCEF82^^0^B106453752
"BLD",8205,"KRN",9.8,"NM","B","IBCBB2",6)

"BLD",8205,"KRN",9.8,"NM","B","IBCEF11",2)

"BLD",8205,"KRN",9.8,"NM","B","IBCEF81",13)

"BLD",8205,"KRN",9.8,"NM","B","IBCEF82",14)

"BLD",8205,"KRN",9.8,"NM","B","IBCEFP",7)

"BLD",8205,"KRN",9.8,"NM","B","IBCEU1",9)

"BLD",8205,"KRN",9.8,"NM","B","IBCSC11",12)

"BLD",8205,"KRN",9.8,"NM","B","IBCSC9",11)

"BLD",8205,"KRN",9.8,"NM","B","IBCU72",8)

"BLD",8205,"KRN",9.8,"NM","B","IBJDF41",5)

"BLD",8205,"KRN",9.8,"NM","B","IBJTCA1",1)

"BLD",8205,"KRN",9.8,"NM","B","IBNCPDP1",10)

"BLD",8205,"KRN",9.8,"NM","B","IBY473PO",4)

"BLD",8205,"KRN",9.8,"NM","B","IBY473PR",3)

"BLD",8205,"KRN",19,0)
19
"BLD",8205,"KRN",19,"NM",0)
^9.68A^^
"BLD",8205,"KRN",19.1,0)
19.1
"BLD",8205,"KRN",101,0)
101
"BLD",8205,"KRN",409.61,0)
409.61
"BLD",8205,"KRN",771,0)
771
"BLD",8205,"KRN",779.2,0)
779.2
"BLD",8205,"KRN",870,0)
870
"BLD",8205,"KRN",8989.51,0)
8989.51
"BLD",8205,"KRN",8989.52,0)
8989.52
"BLD",8205,"KRN",8994,0)
8994
"BLD",8205,"KRN","B",.4,.4)

"BLD",8205,"KRN","B",.401,.401)

"BLD",8205,"KRN","B",.402,.402)

"BLD",8205,"KRN","B",.403,.403)

"BLD",8205,"KRN","B",.5,.5)

"BLD",8205,"KRN","B",.84,.84)

"BLD",8205,"KRN","B",3.6,3.6)

"BLD",8205,"KRN","B",3.8,3.8)

"BLD",8205,"KRN","B",9.2,9.2)

"BLD",8205,"KRN","B",9.8,9.8)

"BLD",8205,"KRN","B",19,19)

"BLD",8205,"KRN","B",19.1,19.1)

"BLD",8205,"KRN","B",101,101)

"BLD",8205,"KRN","B",409.61,409.61)

"BLD",8205,"KRN","B",771,771)

"BLD",8205,"KRN","B",779.2,779.2)

"BLD",8205,"KRN","B",870,870)

"BLD",8205,"KRN","B",8989.51,8989.51)

"BLD",8205,"KRN","B",8989.52,8989.52)

"BLD",8205,"KRN","B",8994,8994)

"BLD",8205,"QUES",0)
^9.62^^
"BLD",8205,"REQB",0)
^9.611^4^4
"BLD",8205,"REQB",1,0)
IB*2.0*447^1
"BLD",8205,"REQB",2,0)
IB*2.0*452^1
"BLD",8205,"REQB",3,0)
IB*2.0*451^1
"BLD",8205,"REQB",4,0)
IB*2.0*424^1
"BLD",8205,"REQB","B","IB*2.0*424",4)

"BLD",8205,"REQB","B","IB*2.0*447",1)

"BLD",8205,"REQB","B","IB*2.0*451",3)

"BLD",8205,"REQB","B","IB*2.0*452",2)

"DATA",350.8,210,0)
IB350^Purchased service amounts are invalid unless this is a NON-VA bill^IB350^1^3
"DATA",350.8,211,0)
IB351^Non-VA facility indicated, but no purchased service charge^IB351^1^3
"DATA",364.5,125,0)
N-OTH INSURANCE PRIOR PAYMENT^N^E^G^399^^^
"DATA",364.5,125,1)
N Z,Z0,Z1,IBZ D F^IBCEF("N-PRIOR PAYMENTS","IBZ") S Z=$$COBN^IBCEF(IBXIEN) S Z0=0 F Z1=1:1:3 I Z1'=Z,$D(^DGCR(399,IBXIEN,"I"_Z1)) S Z0=Z0+1,IBXDATA(Z0)=$S((Z1<Z):+$G(IBZ(Z1)),1:"")
"DATA",364.5,125,3,0)
^364.53^8^8^3120213^^^^
"DATA",364.5,125,3,1,0)
The prior payments made by each insurance company for bill entry IBXIEN.
"DATA",364.5,125,3,2,0)
Data is returned in an array IBXDATA(1-n).  This is a group element and
"DATA",364.5,125,3,3,0)
up to 2 data elements are returned in the IBXDATA(n) array.  If the primary
"DATA",364.5,125,3,4,0)
insurance is the current responsible, no prior payments are returned.  If
"DATA",364.5,125,3,5,0)
the secondary insurance is the current responsible, the primary insurance 
"DATA",364.5,125,3,6,0)
prior payments are returned. If the tertiary insurance is the current 
"DATA",364.5,125,3,7,0)
responsible, the primary and secondary insurance prior payments are 
"DATA",364.5,125,3,8,0)
returned.
"DATA",364.6,2228,0)
8^N^^195^1^^0^16^3^Remaining Liability Qualifier^^1^^
"DATA",364.6,2229,0)
8^N^^195^1^^0^17^15^Remaining Liability^^1^^
"DATA",364.7,164,0)
106^N^125^^^^N
"DATA",364.7,164,1)
N Z,Z0,IBZ M IBZ=IBXDATA K IBXDATA F Z=1,2 I $D(^DGCR(399,IBXIEN,"I"_(Z+1))),$D(IBZ(Z)) S IBXDATA(Z)=$$DOLLAR^IBCEFG1(IBZ(Z))
"DATA",364.7,164,3,0)
^364.73^4^4^3050201^^^^
"DATA",364.7,164,3,1,0)
This is a group data element so more than 1 occurrence of a value is
"DATA",364.7,164,3,2,0)
possible for the data element in the IBXDATA array.  If any other insurance
"DATA",364.7,164,3,3,0)
prior payment data is found, the data is formatted as a numeric including
"DATA",364.7,164,3,4,0)
cents, without the decimals.
"DATA",364.7,957,0)
868^N^5^^^^N
"DATA",364.7,957,1)
N S,N K IBXDATA S S=4 D COBOUT^IBCEU1(.IBXSAVE,.IBXDATA,S) S N=0 F  S N=$O(IBXDATA(N)) Q:'N  S IBXDATA(N)=$$DOLLAR^IBCEFG1(IBXDATA(N))
"DATA",364.7,957,3,0)
^364.73^4^4^3050208^^
"DATA",364.7,957,3,1,0)
This data element assumes the existence of the IBXSAVE array for each 
"DATA",364.7,957,3,2,0)
line item (LCOB) that was previously extracted.  If the line has COB data 
"DATA",364.7,957,3,3,0)
associated with it, output the amount paid for each COB sequence found for
"DATA",364.7,957,3,4,0)
the line.
"DATA",364.7,1928,0)
2228^N^5^^^^N
"DATA",364.7,1928,1)
K IBXDATA D LPTRESP^IBCEU1(IBXIEN,.IBXSAVE,.IBXDATA,16)
"DATA",364.7,1928,3,0)
^364.73^1^1^3120216^^^^
"DATA",364.7,1928,3,1,0)
This data element is the qualifier for the amount piece 17 of this record.
"DATA",364.7,1929,0)
2229^N^5^^^^N
"DATA",364.7,1929,1)
K IBXDATA D LPTRESP^IBCEU1(IBXIEN,.IBXSAVE,.IBXDATA,17)
"DATA",364.7,1929,3,0)
^364.73^1^1^3120216^^^^
"DATA",364.7,1929,3,1,0)
This data element is the remaining liability amount per line.
"FIA",350.8)
IB ERROR
"FIA",350.8,0)
^IBE(350.8,
"FIA",350.8,0,0)
350.8I
"FIA",350.8,0,1)
n^n^f^^n^^y^o^n
"FIA",350.8,0,10)

"FIA",350.8,0,11)
I $$INC3508^IBY473PR(Y)
"FIA",350.8,0,"RLRO")

"FIA",350.8,0,"VR")
2.0^IB
"FIA",350.8,350.8)
0
"FIA",364.5)
IB DATA ELEMENT DEFINITION
"FIA",364.5,0)
^IBA(364.5,
"FIA",364.5,0,0)
364.5I
"FIA",364.5,0,1)
n^n^f^^n^^y^o^n
"FIA",364.5,0,10)

"FIA",364.5,0,11)
I $$INCLUDE^IBY473PR(5,Y)
"FIA",364.5,0,"RLRO")

"FIA",364.5,0,"VR")
2.0^IB
"FIA",364.5,364.5)
0
"FIA",364.5,364.53)
0
"FIA",364.6)
IB FORM SKELETON DEFINITION
"FIA",364.6,0)
^IBA(364.6,
"FIA",364.6,0,0)
364.6IP
"FIA",364.6,0,1)
n^n^f^^y^^y^o^n
"FIA",364.6,0,10)

"FIA",364.6,0,11)
I $$INCLUDE^IBY473PR(6,Y)
"FIA",364.6,0,"RLRO")

"FIA",364.6,0,"VR")
2.0^IB
"FIA",364.6,364.6)
0
"FIA",364.7)
IB FORM FIELD CONTENT
"FIA",364.7,0)
^IBA(364.7,
"FIA",364.7,0,0)
364.7IP
"FIA",364.7,0,1)
n^n^f^^y^^y^o^n
"FIA",364.7,0,10)

"FIA",364.7,0,11)
I $$INCLUDE^IBY473PR(7,Y)
"FIA",364.7,0,"RLRO")

"FIA",364.7,0,"VR")
2.0^IB
"FIA",364.7,364.7)
0
"FIA",364.7,364.73)
0
"INI")
IBY473PR
"INIT")
IBY473PO
"IX",364.6,364.6,"ALL",0)
364.6^ALL^Allows for identification of local override fields that apply to ALL^MU^^F^IR^I^364.6^^^^^S
"IX",364.6,364.6,"ALL",1)
S ^IBA(364.7,"ALL",DA,X2(5))=""
"IX",364.6,364.6,"ALL",1.4)
I X2(4)'="L"!'X2(5)!(X2(2)'="")!(X2(3)'="")!'X2(1) S X=0
"IX",364.6,364.6,"ALL",2)
K ^IBA(364.7,"ALL",DA,X1(5))
"IX",364.6,364.6,"ALL",2.4)
I X1(4)'="L"!'X1(5)!(X1(2)'="")!(X1(3)'="")!'X1(1) S X=0
"IX",364.6,364.6,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.6,364.6,"ALL",11.1,0)
^.114IA^5^5
"IX",364.6,364.6,"ALL",11.1,1,0)
1^F^364.6^.03^^1^F
"IX",364.6,364.6,"ALL",11.1,1,1)
 
"IX",364.6,364.6,"ALL",11.1,2,0)
2^C
"IX",364.6,364.6,"ALL",11.1,2,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,5)
"IX",364.6,364.6,"ALL",11.1,3,0)
3^C
"IX",364.6,364.6,"ALL",11.1,3,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,6)
"IX",364.6,364.6,"ALL",11.1,4,0)
4^C
"IX",364.6,364.6,"ALL",11.1,4,1.5)
N Z S Z=+$O(^IBA(364.7,"B",DA,0)) I Z S X=$P($G(^IBA(364.7,Z,0)),U,2)
"IX",364.6,364.6,"ALL",11.1,5,0)
5^C
"IX",364.6,364.6,"ALL",11.1,5,1.5)
S X=+$O(^IBA(364.7,"B",DA,0))
"IX",364.6,364.6,"C",0)
364.6^C^Field name lookup^R^^F^IR^I^364.6^^^^^LS
"IX",364.6,364.6,"C",1)
S ^IBA(364.6,"C",$E(X,1,40),DA)=""
"IX",364.6,364.6,"C",2)
K ^IBA(364.6,"C",$E(X,1,40),DA)
"IX",364.6,364.6,"C",2.5)
K ^IBA(364.6,"C")
"IX",364.6,364.6,"C",11.1,0)
^.114IA^1^1
"IX",364.6,364.6,"C",11.1,1,0)
1^F^364.6^.1^40^1^F
"IX",364.6,364.6,"C",11.1,1,2)
S X=$$UP^XLFSTR(X)
"IX",364.6,364.6,"D",0)
364.6^D^XREF BY FORM,PAGE,LINE,COL TO SIMPLIFY DEVELOPMENT^MU^^R^IR^I^364.6^^^^^LS
"IX",364.6,364.6,"D",1)
S ^IBA(364.6,"D",X2(1)_","_X2(2)_","_X2(3)_","_X2(4),DA)=""
"IX",364.6,364.6,"D",1.4)
I X2(1)=""!(X2(2)="")!(X2(3)="")!(X2(4)="") S X=0
"IX",364.6,364.6,"D",2)
K ^IBA(364.6,"D",X1(1)_","_X1(2)_","_X1(3)_","_X1(4),DA)
"IX",364.6,364.6,"D",2.4)
I X1(1)=""!(X1(2)="")!(X1(3)="")!(X1(4)="") S X=0
"IX",364.6,364.6,"D",2.5)
K ^IBA(364.6,"D")
"IX",364.6,364.6,"D",11.1,0)
^.114IA^4^4
"IX",364.6,364.6,"D",11.1,1,0)
1^F^364.6^.01^^1^F
"IX",364.6,364.6,"D",11.1,2,0)
2^F^364.6^.04^^^F
"IX",364.6,364.6,"D",11.1,3,0)
3^F^364.6^.05^^^F
"IX",364.6,364.6,"D",11.1,4,0)
4^F^364.6^.08^^^F
"IX",364.7,364.7,"ALL",0)
364.7^ALL^Xref contains all local overrides defined for all insurance and type^MU^^F^IR^I^364.7^^^^^S
"IX",364.7,364.7,"ALL",1)
S ^IBA(364.7,"ALL",X2(2),DA)=""
"IX",364.7,364.7,"ALL",1.4)
I 'X2(2)!(X2(4)'="")!(X2(5)'="")!(X2(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2)
K ^IBA(364.7,"ALL",X1(2),DA)
"IX",364.7,364.7,"ALL",2.4)
I 'X1(2)!(X1(4)'="")!(X1(5)'="")!(X1(3)'="L") S X=0
"IX",364.7,364.7,"ALL",2.5)
K ^IBA(364.7,"ALL")
"IX",364.7,364.7,"ALL",11.1,0)
^.114IA^5^5
"IX",364.7,364.7,"ALL",11.1,1,0)
1^F^364.7^.01^15^^F
"IX",364.7,364.7,"ALL",11.1,1,3)
 
"IX",364.7,364.7,"ALL",11.1,2,0)
2^C^^^10^1
"IX",364.7,364.7,"ALL",11.1,2,1.5)
S X=$P($G(^IBA(364.6,+X(1),0)),U,3)
"IX",364.7,364.7,"ALL",11.1,3,0)
3^F^364.7^.02^10^^F
"IX",364.7,364.7,"ALL",11.1,3,3)
 
"IX",364.7,364.7,"ALL",11.1,4,0)
4^F^364.7^.05^20^^F
"IX",364.7,364.7,"ALL",11.1,4,3)
 
"IX",364.7,364.7,"ALL",11.1,5,0)
5^F^364.7^.06^20^^F
"IX",364.7,364.7,"ALL",11.1,5,3)
 
"MBREQ")
0
"PGL",364.6,0,3,.03)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"PGL",364.7,0,5,.05)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"PKG",200,-1)
1^1
"PKG",200,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",200,20,0)
^9.402P^1^1
"PKG",200,20,1,0)
2^^IBAXDR
"PKG",200,20,1,1)

"PKG",200,20,"B",2,1)

"PKG",200,22,0)
^9.49I^1^1
"PKG",200,22,1,0)
2.0^2940321
"PKG",200,22,1,"PAH",1,0)
473^3120308
"PKG",200,22,1,"PAH",1,1,0)
^^1^1^3120308
"PKG",200,22,1,"PAH",1,1,1,0)
HIPAA 5010 maintenance support patch.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
14
"RTN","IBCBB2")
0^6^B51205466^B50172747
"RTN","IBCBB2",1,0)
IBCBB2 ;ALB/ARH - CONTINUATION OF EDIT CHECKS ROUTINE (CMS-1500) ;04/14/92
"RTN","IBCBB2",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,210,245,232,296,320,349,371,403,432,447,473**;21-MAR-94;Build 29
"RTN","IBCBB2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCBB2",4,0)
 ;
"RTN","IBCBB2",5,0)
 ;MAP TO DGCRBB2
"RTN","IBCBB2",6,0)
 ;
"RTN","IBCBB2",7,0)
EN ;
"RTN","IBCBB2",8,0)
 N IBI,IBJ,IBN,IBY,IBDX,IBDXO,IBDXL,IBDXTYP,IBCPT,IBCPTL,IBOLAB,Z,IBXSAVE,IBLOC,IBTX,IBPS,IBSP,IBLCT,IBNVFLG,IBU3
"RTN","IBCBB2",9,0)
 I '$D(IBER) S IBER=""
"RTN","IBCBB2",10,0)
 S IBTX=$$TXMT^IBCEF4(IBIFN)
"RTN","IBCBB2",11,0)
 ;
"RTN","IBCBB2",12,0)
 ; Max 4 modifiers per CPT code allowed before warning
"RTN","IBCBB2",13,0)
 K IBXDATA
"RTN","IBCBB2",14,0)
 D F^IBCEF("N-HCFA 1500 MODIFIERS",,,IBIFN) ;Get modifiers
"RTN","IBCBB2",15,0)
 ;
"RTN","IBCBB2",16,0)
 S Z=0 F  S Z=$O(IBZPRC92(Z)) Q:'Z  I $P(IBZPRC92(Z),U)["ICPT(",$L($P(IBZPRC92(Z),U,15),",")>4 S IBI="Proc "_$$PRCD^IBCEF1($P(IBZPRC92(Z),U))_" has > 4 modifiers - only first 4 will be used" D WARN^IBCBB11(IBI)
"RTN","IBCBB2",17,0)
 ; ICD-9 diagnosis, at least 1 required
"RTN","IBCBB2",18,0)
 D SET^IBCSC4D(IBIFN,.IBDX,.IBDXO) I '$P(IBDX,U,2) S IBER=IBER_"IB071;"
"RTN","IBCBB2",19,0)
 S IBI=$O(IBDXO(0))
"RTN","IBCBB2",20,0)
 I IBI D
"RTN","IBCBB2",21,0)
 .S IBDXTYP=$E($$ICD9^IBACSV(+$P(IBDXO(IBI),U)))
"RTN","IBCBB2",22,0)
 .S:IBDXTYP="E" IBER=IBER_"IB117;"
"RTN","IBCBB2",23,0)
 .I $$INPAT^IBCEF(IBIFN,1),IBDXTYP="V" S Z="Principal Dx V-code may not be valid" D WARN^IBCBB11(Z)
"RTN","IBCBB2",24,0)
 .Q
"RTN","IBCBB2",25,0)
 ;
"RTN","IBCBB2",26,0)
 ; CPT procs must be associated with a dx, must have a defined provider
"RTN","IBCBB2",27,0)
 S (IBLOC,IBN,IBI,IBY)=0 F  S IBI=$O(^DGCR(399,IBIFN,"CP",IBI)) Q:IBI'?1N.N  S IBCPT=^(IBI,0) D  I +IBY S IBN=1
"RTN","IBCBB2",28,0)
 . I 'IBLOC,$P(IBCPT,U,15)'="",IBTX S Z="At least 1 charge has local box 24K data that will not be transmitted - " S IBLOC=1 D WARN^IBCBB11(Z) S Z="  This data will only print locally" D WARN^IBCBB11(Z)
"RTN","IBCBB2",29,0)
 . I $P(IBCPT,U)'["ICPT(" S:IBER'["IB092" IBER=IBER_"IB092;" Q
"RTN","IBCBB2",30,0)
 . S IBY=1 F IBJ=11:1:14 I +$P(IBCPT,"^",IBJ) S IBCPTL(+$P(IBCPT,"^",IBJ))="",IBY=0
"RTN","IBCBB2",31,0)
 I +IBN S IBER=IBER_"IB072;"
"RTN","IBCBB2",32,0)
 ;
"RTN","IBCBB2",33,0)
 I '$$OCC10(IBIFN,.IBDX,2) S IBER=IBER_"IB093;"
"RTN","IBCBB2",34,0)
 ; CMS-1500: dxs associated with procs must be defined dxs for the bill
"RTN","IBCBB2",35,0)
 S IBI=0 F  S IBI=$O(IBDX(IBI))  Q:'IBI  S IBDXL(IBDX(IBI))=""
"RTN","IBCBB2",36,0)
 S (IBN,IBI)=0 F  S IBI=$O(IBCPTL(IBI)) Q:'IBI  I '$D(IBDXL(IBI)) S IBN=1 Q
"RTN","IBCBB2",37,0)
 I +IBN S IBER=IBER_"IB073;"
"RTN","IBCBB2",38,0)
 ; ejk *296* Change # of diagnoses codes from 4 to 8 on CMS-1500 Claims. 
"RTN","IBCBB2",39,0)
 I IBTX S IBI=8 F  S IBI=$O(IBDXO(IBI)) Q:'IBI  S Z=+$G(IBDX(+$G(IBDXO(IBI)))) I Z,$D(IBCPTL(Z)) D WARN^IBCBB11("Too many diagnoses for claim & will be rejected - consider printing locally")
"RTN","IBCBB2",40,0)
 ;
"RTN","IBCBB2",41,0)
 I $$WNRBILL^IBEFUNC(IBIFN),$$MRATYPE^IBEFUNC(IBIFN)'="B" S IBER=IBER_"IB087;"
"RTN","IBCBB2",42,0)
 ;
"RTN","IBCBB2",43,0)
 ; IB*320 - CLIA# error/warning - error msg for MRA claims, else warning
"RTN","IBCBB2",44,0)
 I $P(IBNDU2,U,13)="",$$CLIAREQ^IBCEP8A(IBIFN) D
"RTN","IBCBB2",45,0)
 . I $$REQMRA^IBEFUNC(IBIFN) S IBER=IBER_"IB235;" Q
"RTN","IBCBB2",46,0)
 . D WARN^IBCBB11("Claim contains laboratory services. The payer may require a CLIA #.")
"RTN","IBCBB2",47,0)
 . Q
"RTN","IBCBB2",48,0)
 ;
"RTN","IBCBB2",49,0)
 ; Only one occurrence code can be present for event date for box 14
"RTN","IBCBB2",50,0)
 S Z=$$EVENT^IBCF22(IBIFN,.IBXSAVE,.IBI)
"RTN","IBCBB2",51,0)
 I IBI S IBER=IBER_"IB099;"
"RTN","IBCBB2",52,0)
 ;
"RTN","IBCBB2",53,0)
 ; esg - 6/6/07 - warning if missing non-VA care type for outside facility
"RTN","IBCBB2",54,0)
 S IBNVFLG=0
"RTN","IBCBB2",55,0)
 I $P(IBNDU2,U,10),'$P(IBNDU2,U,11) D WARN^IBCBB11("Non-VA facility indicated, but the Non-VA Care Type field is not defined") S IBNVFLG=1
"RTN","IBCBB2",56,0)
 ;
"RTN","IBCBB2",57,0)
 ; unit/charge limits
"RTN","IBCBB2",58,0)
 K IBXDATA
"RTN","IBCBB2",59,0)
 D F^IBCEF("N-HCFA 1500 SERVICES (PRINT)",,,IBIFN) ;Get charge lines
"RTN","IBCBB2",60,0)
 S (IBLCT,IBOLAB)=0,IBPS="",IBSP=$$BILLSPEC^IBCEU3(IBIFN)
"RTN","IBCBB2",61,0)
 S IBI=0 F  S IBI=$O(IBXDATA(IBI)) Q:'IBI  D  Q:IBER["IB310"!(IBER["IB311")
"RTN","IBCBB2",62,0)
 . S IBLCT=IBLCT+1
"RTN","IBCBB2",63,0)
 . I $P(IBNDU2,U,11) D
"RTN","IBCBB2",64,0)
 .. I '$P(IBXDATA(IBI),U,11) S IBPS=IBPS_$S(IBPS'="":",",1:"")_IBI Q
"RTN","IBCBB2",65,0)
 .. I $P(IBXDATA(IBI),U,14),"24"'[$P(IBNDU2,U,11) D WARN^IBCBB11("Outside lab charges exist on a non-lab NON-VA bill")
"RTN","IBCBB2",66,0)
 . ; Start IB*2.0*473 Changed the following two warnings to errors.
"RTN","IBCBB2",67,0)
 . ;I '$P(IBNDU2,U,11),$P(IBXDATA(IBI),U,11) D WARN^IBCBB11("Purchased service amounts are invalid unless this is a NON-VA bill")
"RTN","IBCBB2",68,0)
 . ;I IBNVFLG,'$P(IBXDATA(IBI),U,11) D WARN^IBCBB11("Non-VA facility indicated, but no purchased service charge on line# "_IBI)
"RTN","IBCBB2",69,0)
 . I '$P(IBNDU2,U,11),$P(IBXDATA(IBI),U,11) S IBER=IBER_"IB350;"
"RTN","IBCBB2",70,0)
 . I IBNVFLG,'$P(IBXDATA(IBI),U,11) S IBER=IBER_"IB351;"
"RTN","IBCBB2",71,0)
 . ; End IB*2.0*473
"RTN","IBCBB2",72,0)
 . I $D(IBXDATA(IBI,"A")) S IBER=IBER_"IB310;" Q
"RTN","IBCBB2",73,0)
 . I $D(IBXDATA(IBI,"ARX")),IBER'["311;" S IBER=IBER_"IB311;" Q
"RTN","IBCBB2",74,0)
 . I $P(IBXDATA(IBI),U,14) S IBOLAB=IBOLAB+1
"RTN","IBCBB2",75,0)
 . ; Place of service required
"RTN","IBCBB2",76,0)
 . I $G(IBER)'["IB314;",$P(IBXDATA(IBI),U,3)="" S IBER=IBER_"IB314;"
"RTN","IBCBB2",77,0)
 . ; Type of service required
"RTN","IBCBB2",78,0)
 . I $G(IBER)'["IB313;",$P(IBXDATA(IBI),U,4)="" S IBER=IBER_"IB313;"
"RTN","IBCBB2",79,0)
 . ; 43 and 53 are invalid types of service
"RTN","IBCBB2",80,0)
 . I $G(IBER)'["IB110;",($P(IBXDATA(IBI),U,4)=43!($P(IBXDATA(IBI),U,4)=53)) S IBER=IBER_"IB110;"
"RTN","IBCBB2",81,0)
 . ; Units for the line item must be less than 100/1000
"RTN","IBCBB2",82,0)
 . I IBER'["IB088",$P(IBXDATA(IBI),U,9)'<100 D
"RTN","IBCBB2",83,0)
 .. I $P(IBXDATA(IBI),U,4)'=7 S IBER=IBER_"IB088;" Q
"RTN","IBCBB2",84,0)
 .. I $P(IBXDATA(IBI),U,9)'<1000 S IBER=IBER_"IB088;"
"RTN","IBCBB2",85,0)
 . ; Line item total charge must be less than $10,000.00, greater than 0
"RTN","IBCBB2",86,0)
 . ; IB*2.0*432 - The IB system shall provide the ability for users to enter maximum line item dollar amounts of 9999999.99.
"RTN","IBCBB2",87,0)
 . ; I IBER'["IB090",$P(IBXDATA(IBI),U,9)'<10000 S IBER=IBER_"IB090;"
"RTN","IBCBB2",88,0)
 . I IBER'["IB090",$P(IBXDATA(IBI),U,9)'<10000000 S IBER=IBER_"IB090;"
"RTN","IBCBB2",89,0)
 . ; IB*2.0*447 BI Removed individual warning replaced by a claim level warning.
"RTN","IBCBB2",90,0)
 . ; I '($P(IBXDATA(IBI),U,9)*$P(IBXDATA(IBI),U,8)),$$COBN^IBCEF(IBIFN)'>1 S Z="Procedure "_$P(IBXDATA(IBI),U,5)_" has a 0-charge and will not be transmitted" D WARN^IBCBB11(Z)
"RTN","IBCBB2",91,0)
 I IBTX,IBLCT>50 D
"RTN","IBCBB2",92,0)
 . I '$$REQMRA^IBEFUNC(IBIFN) S IBER=IBER_"IB308;" Q
"RTN","IBCBB2",93,0)
 . I '$P(IBNDTX,U,9) S IBER=IBER_"IB325;"
"RTN","IBCBB2",94,0)
 S IBU3=$P($G(^DGCR(399,IBIFN,"U3")),U,4,7) I $TR(IBU3,U)'="" D
"RTN","IBCBB2",95,0)
 .; ib*2.0*432 add line-level check
"RTN","IBCBB2",96,0)
 .;I +IBSP'=35 D WARN^IBCBB11("Chiropractic service details only valid if provider specialty is '35'")
"RTN","IBCBB2",97,0)
 .I $$LINSPEC^IBCEU3(IBIFN)'[35 D WARN^IBCBB11("Chiropractic service details only valid if provider specialty is '35'")
"RTN","IBCBB2",98,0)
 .I $P(IBU3,U,2)="" S IBER=IBER_"IB137;"
"RTN","IBCBB2",99,0)
 .I $P(IBU3,U,4)="" S IBER=IBER_"IB138;" Q
"RTN","IBCBB2",100,0)
 .I $P(IBU3,U,3)="","AM"[$P(IBU3,U,4) S IBER=IBER_"IB139;"
"RTN","IBCBB2",101,0)
 .Q
"RTN","IBCBB2",102,0)
 ; IB*2.0*473 BI Changed the following warning to an error.
"RTN","IBCBB2",103,0)
 ;I IBPS'="" D WARN^IBCBB11("NON-VA facility indicated, but no purchased service charge on line item"_$S(IBPS[",":"s",1:"")_" #"_IBPS)
"RTN","IBCBB2",104,0)
 I IBPS'="" S IBER=IBER_"IB351;"
"RTN","IBCBB2",105,0)
 I $P(IBNDU2,U,11),$P(IBNDU2,U,11)=4,IBOLAB>1 D WARN^IBCBB11("For proper payment, you must bill each outside lab on a separate claim form")
"RTN","IBCBB2",106,0)
 K IBXDATA
"RTN","IBCBB2",107,0)
 ;
"RTN","IBCBB2",108,0)
 ;       ; Check for Physician Name
"RTN","IBCBB2",109,0)
 D F^IBCEF("N-REFERRING PROVIDER NAME",,,IBIFN)
"RTN","IBCBB2",110,0)
 I $P($G(IBXDATA),U)]"" D
"RTN","IBCBB2",111,0)
 .N IBZ,FUNCTION,IBINS
"RTN","IBCBB2",112,0)
 .S FUNCTION=1
"RTN","IBCBB2",113,0)
 .F IBINS=1:1:3 D
"RTN","IBCBB2",114,0)
 .. S Z=$$GETTYP^IBCEP2A(IBIFN,IBINS,FUNCTION)
"RTN","IBCBB2",115,0)
 .. I Z,$P(Z,U,2) D  ; Rendering/attending prov secondary id required
"RTN","IBCBB2",116,0)
 ... N IBID,IBOK,Q0
"RTN","IBCBB2",117,0)
 ... D PROVINF^IBCEF74(IBIFN,IBINS,.IBID,1,"C")  ; check all as though they were current
"RTN","IBCBB2",118,0)
 ... S IBOK=0
"RTN","IBCBB2",119,0)
 ... S Q0=0 F  S Q0=$O(IBID(1,FUNCTION,Q0)) Q:'Q0  I $P(IBID(1,FUNCTION,Q0),U,9)=+Z S IBOK=1 Q
"RTN","IBCBB2",120,0)
 ... I 'IBOK S IBER=IBER_$S(IBINS=1:"IB239;",IBINS=2:"IB240;",IBINS=3:"IB241;",1:"")
"RTN","IBCBB2",121,0)
 ;
"RTN","IBCBB2",122,0)
 Q
"RTN","IBCBB2",123,0)
 ;
"RTN","IBCBB2",124,0)
OCC10(IBIFN,IBARR,IBFT) ; Determine if occurrence code 10 exists for pregnancy dx
"RTN","IBCBB2",125,0)
 ; IBARR=array subscripted by ien of DX code if IBFT=2 (CMS-1500 form)
"RTN","IBCBB2",126,0)
 ;                         by seq # and = ien of DX code if IBFT'=2
"RTN","IBCBB2",127,0)
 ;
"RTN","IBCBB2",128,0)
 N IBN,IBI,IBXDATA,IBXSAVE,IBDX,Z
"RTN","IBCBB2",129,0)
 S IBN=1
"RTN","IBCBB2",130,0)
 ;
"RTN","IBCBB2",131,0)
 I '$D(^TMP($J,"LMD")) D
"RTN","IBCBB2",132,0)
 . D F^IBCEF("N-OCCURRENCE CODES",,,IBIFN)
"RTN","IBCBB2",133,0)
 . S ^TMP($J,"LMD")=""
"RTN","IBCBB2",134,0)
 . S Z=0 F  S Z=$O(IBXSAVE("OCC",Z)) Q:'Z  I +IBXSAVE("OCC",Z)=10 S ^TMP($J,"LMD")=1 Q
"RTN","IBCBB2",135,0)
 ;
"RTN","IBCBB2",136,0)
 I '^TMP($J,"LMD") S IBI=0 F  S IBI=$O(IBARR(IBI))  Q:'IBI  D  Q:'IBN
"RTN","IBCBB2",137,0)
 . N Z,Z1
"RTN","IBCBB2",138,0)
 . ; If a pregnancy DX exists, must be an occurrence code 10 for LMP date
"RTN","IBCBB2",139,0)
 . ; dx ranges are: V22*-V24*, V27*-V28*, 630*-677*
"RTN","IBCBB2",140,0)
 . S IBDX=$S($G(IBFT)'=2:+IBARR(IBI),1:IBI)
"RTN","IBCBB2",141,0)
 . S Z=$E($P($$ICD9^IBACSV(IBDX),U),1,3),Z1=$E(Z,2,3)
"RTN","IBCBB2",142,0)
 . I $S(Z'<630&(Z<678):1,$E(Z)="V":$S(Z1'<22&(Z1<25):1,1:Z1'<27&(Z1<28)),1:0) S IBN=0 ;Pregnancy Dx exists
"RTN","IBCBB2",143,0)
 ;
"RTN","IBCBB2",144,0)
OCC10Q K ^TMP($J,"LMD")
"RTN","IBCBB2",145,0)
 Q IBN
"RTN","IBCBB2",146,0)
 ;
"RTN","IBCEF11")
0^2^B67207596^B73456164
"RTN","IBCEF11",1,0)
IBCEF11 ;ALB/TMP - FORMATTER SPECIFIC BILL FUNCTIONS - CONT ;30-JAN-96
"RTN","IBCEF11",2,0)
 ;;2.0;INTEGRATED BILLING;**51,137,155,309,335,348,349,371,432,447,473**;21-MAR-94;Build 29
"RTN","IBCEF11",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEF11",4,0)
 ;
"RTN","IBCEF11",5,0)
BOX24D(A,IB) ; Returns the lines for boxes 19-24 of the CMS-1500 display
"RTN","IBCEF11",6,0)
 ; IB = flag is 1 if only box 24 is needed
"RTN","IBCEF11",7,0)
 Q $S('$G(IB):"36",1:"44")_"^55"
"RTN","IBCEF11",8,0)
 ;
"RTN","IBCEF11",9,0)
RCBOX() ; Returns the lines for revenue code boxes of the UB-04 display
"RTN","IBCEF11",10,0)
 Q "19^41"
"RTN","IBCEF11",11,0)
 ;
"RTN","IBCEF11",12,0)
OUTPT(IBIFN,IBPRINT) ; Returns an array of service line data from
"RTN","IBCEF11",13,0)
 ;                 CMS-1500 box 24.  Output is in IBXDATA(n)
"RTN","IBCEF11",14,0)
 ; IBPRINT = print flag  1: return print fields
"RTN","IBCEF11",15,0)
 ;                       0: return EDI fields
"RTN","IBCEF11",16,0)
 ; Uses diagnosis array ^TMP("IBXSAVE",$J,"DX",IBIFN,DIAG CODE)=SEQ #
"RTN","IBCEF11",17,0)
 ;   if it already exists. If not, it builds it from N-DIAGNOSES element
"RTN","IBCEF11",18,0)
 ;
"RTN","IBCEF11",19,0)
 ; For EDI call: Returns IBXDATA(n)=
"RTN","IBCEF11",20,0)
 ;   begin date(YYYYMMDD)^end date(YYYYMMDD)^pos^tos^
"RTN","IBCEF11",21,0)
 ;   proc code/revenue code - if no procedure (not the pointers)^
"RTN","IBCEF11",22,0)
 ;   type of code^dx pointer(s)^unit charge^units^modifiers separated by;
"RTN","IBCEF11",23,0)
 ;   ^purchased charge amount ^anesthesia minutes^emergency indicator^
"RTN","IBCEF11",24,0)
 ;   lab-type service flag.
"RTN","IBCEF11",25,0)
 ;
"RTN","IBCEF11",26,0)
 ;   Also Returns IBXDATA(IBI,"COB",COB,m) with COB data for each line
"RTN","IBCEF11",27,0)
 ;      item found in an accepted EOB for the bill and = the reference
"RTN","IBCEF11",28,0)
 ;      line in the first '^' piece followed by the '0' node data of file
"RTN","IBCEF11",29,0)
 ;      361.115 (LINE LEVEL ADJUSTMENTS)
"RTN","IBCEF11",30,0)
 ;       COB = COB sequence # of adjustment's ins co, m = seq #
"RTN","IBCEF11",31,0)
 ;         -- AND --
"RTN","IBCEF11",32,0)
 ;    IBXDATA(IBI,"COB",COB,m,z,p)=
"RTN","IBCEF11",33,0)
 ;           the data on the '0' node for each subordinate entry of file
"RTN","IBCEF11",34,0)
 ;           361.11511 (REASONS) (Only first 3 pieces for 837 output)
"RTN","IBCEF11",35,0)
 ;       z = group code, sometimes preceeded by a space   p = seq #
"RTN","IBCEF11",36,0)
 ;
"RTN","IBCEF11",37,0)
 ; For Print call: Returns begin date(DDMMYYYY)^end date(DDMMYYYY) or
"RTN","IBCEF11",38,0)
 ;   null if equal to begin date^pos^tos^bedsection name(if no procedure)
"RTN","IBCEF11",39,0)
 ;   or procedure code(not the pointer)^ ... refer to EDI call results
"RTN","IBCEF11",40,0)
 ;   Also, IBXDATA(n,"TEXT")=the text to print on first line of box 24,
"RTN","IBCEF11",41,0)
 ;   If no procedure code, returns IBXDATA(n,"A")=rev code abbrev
"RTN","IBCEF11",42,0)
 ;
"RTN","IBCEF11",43,0)
 ;  For both calls, returns IBXDATA(n,item type,item ptr)=""
"RTN","IBCEF11",44,0)
 ;      -- AND --
"RTN","IBCEF11",45,0)
 ;   IBXDATA(n,"RX")=RX#^drug name^NDC^refill #^(re)fill date^qty^days
"RTN","IBCEF11",46,0)
 ;                   ^chrge^ien of file 362.4^NDC format
"RTN","IBCEF11",47,0)
 ;           If line references a prescription
"RTN","IBCEF11",48,0)
 ;      -- AND --
"RTN","IBCEF11",49,0)
 ;   If no revenue code for a prescription, returns IBXDATA(n,"ARX")=""
"RTN","IBCEF11",50,0)
 ;      -- AND --
"RTN","IBCEF11",51,0)
 ;   IBXDATA(n,"AUX")='AUX' node of the procedure entry
"RTN","IBCEF11",52,0)
 ;
"RTN","IBCEF11",53,0)
 ; Also returns IBXDATA(n,"CPLNK") = soft link to corresponding entry in PROCEDURES multiple of file 399
"RTN","IBCEF11",54,0)
 ;
"RTN","IBCEF11",55,0)
 N IB,IBI,IBJ,IBFLD,IBDXI,IBXIEN,Z,IBXTRA,IBRX,IBRX0,IBRX1,Z0,Z1
"RTN","IBCEF11",56,0)
 ;
"RTN","IBCEF11",57,0)
 K ^TMP($J,"IBITEM")
"RTN","IBCEF11",58,0)
 S ^TMP($J,"IBITEM")=""
"RTN","IBCEF11",59,0)
 ; Build diagnosis array if not already built
"RTN","IBCEF11",60,0)
 I $O(^TMP("IBXSAVE",$J,"DX",IBIFN,""))="",$O(^IBA(362.3,"AIFN"_IBIFN,"")) D
"RTN","IBCEF11",61,0)
 .N Z,IBXDATA D F^IBCEF("N-DIAGNOSES",,,IBIFN)
"RTN","IBCEF11",62,0)
 .S Z="" F  S Z=$O(IBXDATA(Z)) K:$O(IBXDATA(0))=""&(Z="") IBXDATA Q:Z=""  S:$P(IBXDATA(Z),U,2) ^TMP("IBXSAVE",$J,"DX",IBIFN,$P(IBXDATA(Z),U,2))=Z
"RTN","IBCEF11",63,0)
 ;
"RTN","IBCEF11",64,0)
 S IB(0)=$G(^DGCR(399,IBIFN,0)),IB("U")=$G(^("U")),IB("U1")=$G(^("U1"))
"RTN","IBCEF11",65,0)
 S IBI="" F  S IBI=$O(^TMP("IBXSAVE",$J,"DX",IBIFN,IBI)) Q:IBI=""  S IBDXI(IBI)=^(IBI)
"RTN","IBCEF11",66,0)
 I '$G(IBPRINT) D RVCE^IBCF23(IBIFN,IBIFN)
"RTN","IBCEF11",67,0)
 I $G(IBPRINT) D RVCE^IBCF23(,IBIFN)
"RTN","IBCEF11",68,0)
 ; Returns IBFLD(24) = begin date^end date^pos^tos^
"RTN","IBCEF11",69,0)
 ;     proc/bedsection/revenue code^dx pointer^unit charge^
"RTN","IBCEF11",70,0)
 ;     units^modifiers^ purchased charge amount ^anesthesia minutes^
"RTN","IBCEF11",71,0)
 ;     emergency indicator ^ soft pointer to PROCEDURES multiple in file 399 AND
"RTN","IBCEF11",72,0)
 ;         IBFLD(24,n,type,item)=""
"RTN","IBCEF11",73,0)
 ;         IBFLD(24,n_"A") = revenue code abbreviation if no procedure
"RTN","IBCEF11",74,0)
 ;         IBFLD(24,n,"AUX") = 'AUX' node of line item 
"RTN","IBCEF11",75,0)
 ;         IBFLD(24,n,"RX") = soft pointer to file 362.4 from 'item' fld
"RTN","IBCEF11",76,0)
 ;                            (can be null)
"RTN","IBCEF11",77,0)
 ;
"RTN","IBCEF11",78,0)
 D SET^IBCSC5A(IBIFN,.IBRX) ;prescriptions
"RTN","IBCEF11",79,0)
 ; IBRX1(ien 362.4)=RX#^drug ien^NDC^refil #^(re)fil date^qty^days^chrge
"RTN","IBCEF11",80,0)
 I IBRX S IBRX="" F  S IBRX=$O(IBRX(IBRX)) Q:IBRX=""  S IBRX0=0 F  S IBRX0=$O(IBRX(IBRX,IBRX0)) Q:'IBRX0  D
"RTN","IBCEF11",81,0)
 . N IBRXH
"RTN","IBCEF11",82,0)
 . S IBRXH=IBRX(IBRX,IBRX0)
"RTN","IBCEF11",83,0)
 . ; **IB*2.0*432** added _U_$P(IBRXH,U,9) (Rx Date) to Output Formatter
"RTN","IBCEF11",84,0)
 . S IBRX1(+IBRXH)=IBRX_U_$P(IBRXH,U,2)_U_$P(IBRXH,U,5)_U_$P(IBRXH,U,7)_U_IBRX0_U_$P(IBRXH,U,4)_U_$P(IBRXH,U,3)_U_$P(IBRXH,U,6)_U_+IBRXH_U_$P(IBRXH,U,8)_U_$P(IBRXH,U,9)
"RTN","IBCEF11",85,0)
 K IBRX
"RTN","IBCEF11",86,0)
 ;
"RTN","IBCEF11",87,0)
 ; for EDI, remove any $0 line items from the IBFLD array before 
"RTN","IBCEF11",88,0)
 ; dropping down into the next loop (IB*2*371)
"RTN","IBCEF11",89,0)
 ; Start IB*2.0*447 BI - Code removed to allow 0 dollars to print.
"RTN","IBCEF11",90,0)
 ;I '$G(IBPRINT) D
"RTN","IBCEF11",91,0)
 ;. NEW IBZ,IBI,Z
"RTN","IBCEF11",92,0)
 ;. M IBZ=IBFLD K IBFLD
"RTN","IBCEF11",93,0)
 ;. S (IBI,Z)=0
"RTN","IBCEF11",94,0)
 ;. F  S IBI=$O(IBZ(24,IBI)) Q:IBI'=+IBI  D
"RTN","IBCEF11",95,0)
 ;.. I $P(IBZ(24,IBI),U,7)*$P(IBZ(24,IBI),U,8)'>0 Q
"RTN","IBCEF11",96,0)
 ;.. S Z=Z+1
"RTN","IBCEF11",97,0)
 ;.. M IBFLD(24,Z)=IBZ(24,IBI)
"RTN","IBCEF11",98,0)
 ;.. S IBFLD(24)=Z
"RTN","IBCEF11",99,0)
 ;.. Q
"RTN","IBCEF11",100,0)
 ;. Q
"RTN","IBCEF11",101,0)
 ; End IB*2.0*447 BI
"RTN","IBCEF11",102,0)
 ;
"RTN","IBCEF11",103,0)
 S IBI=0
"RTN","IBCEF11",104,0)
 F  S IBI=$O(IBFLD(24,IBI)) Q:IBI'=+IBI  D
"RTN","IBCEF11",105,0)
 . S IBRX1=0
"RTN","IBCEF11",106,0)
 . S IBXDATA(IBI)=$P(IBFLD(24,IBI),U)_U_$P(IBFLD(24,IBI),U,$S($P(IBFLD(24,IBI),U,2)=""&'$G(IBPRINT):1,1:2))
"RTN","IBCEF11",107,0)
 . S $P(IBXDATA(IBI),U,3,5)=$P(IBFLD(24,IBI),U,3,5)
"RTN","IBCEF11",108,0)
 . S $P(IBXDATA(IBI),U,6)=$S($D(IBFLD(24,IBI_"X")):"CJ",1:"HC")
"RTN","IBCEF11",109,0)
 . S $P(IBXDATA(IBI),U,7,13)=$P(IBFLD(24,IBI),U,6,12)
"RTN","IBCEF11",110,0)
 . S $P(IBXDATA(IBI),U,14)=+$$ISLAB(IBXDATA(IBI))
"RTN","IBCEF11",111,0)
 . ;
"RTN","IBCEF11",112,0)
 . I $D(IBFLD(24,IBI,"RX")) D  ;Rx
"RTN","IBCEF11",113,0)
 .. S IBRX1=1
"RTN","IBCEF11",114,0)
 .. I $P($G(IBFLD(24,IBI,"AUX")),U,8)'="" S $P(IBFLD(24,IBI,"AUX"),U,8)="",$P(IBFLD(24,IBI,"AUX"),U,9)=""  ;No free text allowed for rx's
"RTN","IBCEF11",115,0)
 .. I $D(IBRX1(+IBFLD(24,IBI,"RX"))) D  Q  ;Soft link exists
"RTN","IBCEF11",116,0)
 ...D ZERO^IBRXUTL(+$P(IBRX1(+IBFLD(24,IBI,"RX")),U,2))
"RTN","IBCEF11",117,0)
 ... S IBXDATA(IBI,"RX")=IBRX1(+IBFLD(24,IBI,"RX")),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(+IBFLD(24,IBI,"RX")),U,2),.01)),1,30)
"RTN","IBCEF11",118,0)
 ... K IBRX1(+IBFLD(24,IBI,"RX"))
"RTN","IBCEF11",119,0)
 ... ; No soft link - must find the first Rx with the same charge
"RTN","IBCEF11",120,0)
 .. S IBRX="" F  S IBRX=$O(IBRX1(IBRX)) Q:'IBRX  I +$P(IBRX1(IBRX),U,8)=+$P(IBXDATA(IBI),U,8) D  Q
"RTN","IBCEF11",121,0)
 ... D ZERO^IBRXUTL(+$P(IBRX1(IBRX),U,2))
"RTN","IBCEF11",122,0)
 ... S IBXDATA(IBI,"RX")=IBRX1(IBRX),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(IBRX),U,2),.01)),1,30) K IBRX1(IBRX) Q
"RTN","IBCEF11",123,0)
 ... Q
"RTN","IBCEF11",124,0)
 .. Q
"RTN","IBCEF11",125,0)
 . ;
"RTN","IBCEF11",126,0)
 . I $G(IBFLD(24,IBI,"AUX"))'="" D
"RTN","IBCEF11",127,0)
 .. I $G(IBPRINT),$P(IBFLD(24,IBI,"AUX"),U,8)'="" S IBXDATA(IBI,"TEXT")=$P(IBFLD(24,IBI,"AUX"),U,8),$P(IBFLD(24,IBI,"AUX"),U,8)=""
"RTN","IBCEF11",128,0)
 .. S IBXDATA(IBI,"AUX")=IBFLD(24,IBI,"AUX")
"RTN","IBCEF11",129,0)
 .. Q
"RTN","IBCEF11",130,0)
 . ;
"RTN","IBCEF11",131,0)
 . I $G(IBPRINT) D
"RTN","IBCEF11",132,0)
 .. ; START IB*2.0*447 BI ZERO DOLLAR CHANGES
"RTN","IBCEF11",133,0)
 .. ; I '$P(IBXDATA(IBI),U,8),'$G(IBXDATA(IBI,"RX")) D  Q
"RTN","IBCEF11",134,0)
 .. I $P(IBXDATA(IBI),U,8)="",'$G(IBXDATA(IBI,"RX")) D  Q
"RTN","IBCEF11",135,0)
 ... ; END IB*2.0*447 BI ZERO DOLLAR CHANGES
"RTN","IBCEF11",136,0)
 ... I $G(IBNOSHOW) Q    ; don't show errors/warnings
"RTN","IBCEF11",137,0)
 ... S IBXDATA(IBI,"TEXT")="Warning:** REV CODE UNITS < #PROCEDURES, THEY MUST BE ="
"RTN","IBCEF11",138,0)
 ... I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",139,0)
 ... Q
"RTN","IBCEF11",140,0)
 .. ;
"RTN","IBCEF11",141,0)
 .. I $G(IBFLD(24,IBI_"A"))'="" D  Q
"RTN","IBCEF11",142,0)
 ... S IBXDATA(IBI,"A")=IBFLD(24,IBI_"A")
"RTN","IBCEF11",143,0)
 ... I $G(IBNOSHOW) Q    ; don't show errors/warnings
"RTN","IBCEF11",144,0)
 ... S IBXDATA(IBI,"TEXT")="Warning:** REV CODE UNITS > #PROCEDURES, THEY MUST BE=: "_IBFLD(24,IBI_"A")
"RTN","IBCEF11",145,0)
 ... I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",146,0)
 ... Q
"RTN","IBCEF11",147,0)
 .. ;
"RTN","IBCEF11",148,0)
 .. S IBRX=$G(IBXDATA(IBI,"RX"))
"RTN","IBCEF11",149,0)
 .. I IBRX'="" D  ;Format Rx detail
"RTN","IBCEF11",150,0)
 ... N Z
"RTN","IBCEF11",151,0)
 ... S Z=$P(IBRX,U)
"RTN","IBCEF11",152,0)
 ... S Z=$S(Z'="":"Rx#"_Z_" ",1:"RX: ")
"RTN","IBCEF11",153,0)
 ... S IBXDATA(IBI,"TEXT")=Z_$S($P(IBRX,U,3)'="":"NDC: "_$P(IBRX,U,3),1:"NOC: "_$P(IBRX,U,2))_" Qty: "_$P(IBRX,U,6)_" Days: "_$P(IBRX,U,7)
"RTN","IBCEF11",154,0)
 ... S $P(IBXDATA(IBI,"AUX"),U,9)="N4"   ; service line comment qualifier for RX's
"RTN","IBCEF11",155,0)
 ... Q
"RTN","IBCEF11",156,0)
 .. Q
"RTN","IBCEF11",157,0)
 . S IBXDATA(IBI,"CPLNK")=$P(IBFLD(24,IBI),U,13)
"RTN","IBCEF11",158,0)
 . I '$G(IBPRINT) D COBLINE^IBCEU6(IBIFN,IBI,.IBXDATA,,.IBXTRA)
"RTN","IBCEF11",159,0)
 . Q
"RTN","IBCEF11",160,0)
 ;
"RTN","IBCEF11",161,0)
 I $G(IBPRINT) D
"RTN","IBCEF11",162,0)
 . S IBRX=0 F  S IBRX=$O(IBRX1(IBRX)) Q:'IBRX  D
"RTN","IBCEF11",163,0)
 .. S IBI=+$O(IBXDATA(""),-1)+1
"RTN","IBCEF11",164,0)
 .. S IBXDATA(IBI)=$$DATE($P(IBRX1(IBRX),U,5))
"RTN","IBCEF11",165,0)
 .. S IBXDATA(IBI,"TEXT")="**** ERROR - NO PROC LINK TO REV CODE FOR DRUG: RX#: "_$P(IBRX1(IBRX),U)_"  NDC #: "_$P(IBRX1(IBRX),U,3)
"RTN","IBCEF11",166,0)
 .. I $D(IBXDATA(IBI,"AUX")) S $P(IBXDATA(IBI,"AUX"),U,9)=""
"RTN","IBCEF11",167,0)
 .. S IBXDATA(IBI,"ARX")=""
"RTN","IBCEF11",168,0)
 .. D ZERO^IBRXUTL(+$P(IBRX1(IBRX),U,2))
"RTN","IBCEF11",169,0)
 .. S IBXDATA(IBI,"RX")=IBRX1(IBRX),$P(IBXDATA(IBI,"RX"),U,2)=$E($G(^TMP($J,"IBDRUG",+$P(IBRX1(IBRX),U,2),.01)),1,30) K IBRX1(IBRX)
"RTN","IBCEF11",170,0)
 .. Q
"RTN","IBCEF11",171,0)
 . Q
"RTN","IBCEF11",172,0)
 ;
"RTN","IBCEF11",173,0)
 I '$G(IBPRINT),$D(IBXTRA) D COMBO^IBCEU2(.IBXDATA,.IBXTRA,0) ;Handle bundled/unbundled lines
"RTN","IBCEF11",174,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBCEF11",175,0)
 Q
"RTN","IBCEF11",176,0)
 ;
"RTN","IBCEF11",177,0)
ISLAB(LDATA) ; Returns 0/1 if line item data indicates the item is a lab (1)
"RTN","IBCEF11",178,0)
 ; 'LAB' is defined here as type of service = 5
"RTN","IBCEF11",179,0)
 Q $E($P(LDATA,U,4))="5"
"RTN","IBCEF11",180,0)
 ;
"RTN","IBCEF11",181,0)
FMT(DATA,DLEN,FLEN) ; Returns a string in DATA with a max length of DLEN
"RTN","IBCEF11",182,0)
 ;  and a field length of FLEN
"RTN","IBCEF11",183,0)
 Q $E($E(DATA,1,DLEN)_$J("",FLEN),1,FLEN)
"RTN","IBCEF11",184,0)
 ;
"RTN","IBCEF11",185,0)
DATE(X,DEL) ;  Returns FM date in X as MMxDDxYYYY  where x=DEL
"RTN","IBCEF11",186,0)
 S DEL=$G(DEL)
"RTN","IBCEF11",187,0)
 S X=$$DATE^IBCF2(X,1,1)
"RTN","IBCEF11",188,0)
 I X'="" S X=$E(X,1,2)_DEL_$E(X,3,4)_DEL_$E(X,5,8)
"RTN","IBCEF11",189,0)
 Q X
"RTN","IBCEF11",190,0)
 ;
"RTN","IBCEF11",191,0)
BATCH() ; Sets up record for and stores/returns the next batch number
"RTN","IBCEF11",192,0)
 N NUM,FAC,DO,DD,DLAYGO,DIC,X,Y
"RTN","IBCEF11",193,0)
 ;Keep latest batch number for view/print edi bill extract data option
"RTN","IBCEF11",194,0)
 I $D(IBVNUM) S NUM=IBVNUM G BATCHQ
"RTN","IBCEF11",195,0)
 ;Check for batch resubmit - if yes, use same number as original batch
"RTN","IBCEF11",196,0)
 I $P($G(^TMP("IBRESUBMIT",$J)),U,3)=1 S NUM=$P(^($J),U) G BATCHQ
"RTN","IBCEF11",197,0)
 L +^IBA(364.1,0):5 I '$T Q 0
"RTN","IBCEF11",198,0)
 S FAC=+$P($$SITE^VASITE(),U,3),NUM=$O(^IBA(364.1,"B",""),-1)
"RTN","IBCEF11",199,0)
 I $D(^IBA(364.1,+NUM,0)),$P(^(0),U,2)="" F  D  Q:'NUM!($P($G(^IBA(364.1,+NUM,0)),U,2)'="")
"RTN","IBCEF11",200,0)
 . I $D(^IBA(364.1,NUM,0)) S DA=NUM,DIK="^IBA(364.1," D ^DIK
"RTN","IBCEF11",201,0)
 . S NUM=$O(^IBA(364.1,"B",""),-1)
"RTN","IBCEF11",202,0)
 F  S NUM=$S($P(NUM,FAC,2)'="":NUM+1,1:FAC_"0000001") Q:'$D(^IBA(364.1,"B",NUM))
"RTN","IBCEF11",203,0)
 K DO,DD S DIC="^IBA(364.1,",DLAYGO=364.1,DIC(0)="L",X=NUM D FILE^DICN K DD,DO I Y'>0 S NUM=0
"RTN","IBCEF11",204,0)
 L -^IBA(364.1,0)
"RTN","IBCEF11",205,0)
BATCHQ Q NUM
"RTN","IBCEF11",206,0)
 ;
"RTN","IBCEF11",207,0)
GETLDAT(IBXIEN) ; Extract data for 837 transmission LDAT record
"RTN","IBCEF11",208,0)
 ; IBXIEN - ien in file 399
"RTN","IBCEF11",209,0)
 ; Sets up IBXSAVE("LDAT",n) array:
"RTN","IBCEF11",210,0)
 ; Attachment report type ^ Attachment report transmission code ^ Attachment control number ^ 
"RTN","IBCEF11",211,0)
 ; OB Anesthesia Additional Units ^ Purchase Service Provider ID ^ Purchase Service Amount ^
"RTN","IBCEF11",212,0)
 N CPIEN,FTYPE,IBXDATA,IDS,IBIDS,NODE1,PSAMNT,PSPID,Z,PCE1,LINE
"RTN","IBCEF11",213,0)
 I '+$G(IBXIEN) Q
"RTN","IBCEF11",214,0)
 K IBXSAVE("LDAT")
"RTN","IBCEF11",215,0)
 S FTYPE=$$FT^IBCEF(IBXIEN)
"RTN","IBCEF11",216,0)
 I FTYPE=2 D OUTPT(IBXIEN,0)
"RTN","IBCEF11",217,0)
 I FTYPE=3 D HOS^IBCEF2(IBXIEN)
"RTN","IBCEF11",218,0)
 D ALLIDS^IBCEFP(IBXIEN,.IDS,1)
"RTN","IBCEF11",219,0)
 S (PSPID,PSAMNT)=""
"RTN","IBCEF11",220,0)
 ; IB*2.0*473/TAZ - Convert PROVIDER code to function call to PSID^IBCEFP
"RTN","IBCEF11",221,0)
 I $$SUB1OK^IBCEP8A(IBXIEN),(FTYPE=2) D
"RTN","IBCEF11",222,0)
 . D PSID^IBCEFP(IBXIEN,.IDS,.IBIDS)
"RTN","IBCEF11",223,0)
 . S PSPID=$G(IBIDS(0)) I PSPID="" S PSPID=$P($G(IBIDS(1)),U,1)
"RTN","IBCEF11",224,0)
 ;IB*2.0*473/TAZ - END
"RTN","IBCEF11",225,0)
 S Z=0 F  S Z=$O(IBXDATA(Z)) Q:'Z  D
"RTN","IBCEF11",226,0)
 . S CPIEN=+$G(IBXDATA(Z,"CPLNK")) ;I 'CPIEN Q
"RTN","IBCEF11",227,0)
 . I FTYPE=2,$$SUB1OK^IBCEP8A(IBXIEN) S PSAMNT=$$DOLLAR^IBCEFG1($P($G(IBXDATA(Z)),U,11))
"RTN","IBCEF11",228,0)
 . S (PCE1,NODE1)=""
"RTN","IBCEF11",229,0)
 . I CPIEN D
"RTN","IBCEF11",230,0)
 .. S NODE1=$G(^DGCR(399,IBXIEN,"CP",CPIEN,1))
"RTN","IBCEF11",231,0)
 .. S PCE1=$$GET1^DIQ(399.0304,CPIEN_","_IBXIEN_",",71)
"RTN","IBCEF11",232,0)
 . S IBXSAVE("LDAT",Z)=PCE1_U_$P(NODE1,U,3)_U_$P(NODE1,U)_U_$P(NODE1,U,5)_U_$G(PSPID)_U_$G(PSAMNT)
"RTN","IBCEF11",233,0)
 . Q
"RTN","IBCEF11",234,0)
 Q
"RTN","IBCEF81")
0^13^B108877759^B105842498
"RTN","IBCEF81",1,0)
IBCEF81 ;ALB/BI - PROVIDER ADJUSTMENTS ;11-OCT-2010
"RTN","IBCEF81",2,0)
 ;;2.0;INTEGRATED BILLING;**432,473**;21-MAR-94;Build 29
"RTN","IBCEF81",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEF81",4,0)
 ;
"RTN","IBCEF81",5,0)
 Q
"RTN","IBCEF81",6,0)
 ;
"RTN","IBCEF81",7,0)
EN(INPUT)  ; FIRST ENTRY POINT
"RTN","IBCEF81",8,0)
 N INSLEVEL,PRTYPE,OUTPUT,IBIEN,CMODE,CPRNUM,STATUS
"RTN","IBCEF81",9,0)
 S STATUS=1
"RTN","IBCEF81",10,0)
 I $D(INPUT)=0 S STATUS=0 Q STATUS
"RTN","IBCEF81",11,0)
 I (($G(IBXFORM)=2)!($G(IBXFORM)=3)) D EN^IBCEF82(.INPUT) Q STATUS    ; PERFORM LOCAL PRINT BUSINESS RULES
"RTN","IBCEF81",12,0)
 K OUTPUT M OUTPUT=INPUT
"RTN","IBCEF81",13,0)
 D CINIT1 Q:IBIEN="" STATUS
"RTN","IBCEF81",14,0)
 F INSLEVEL="P","S","T" D    ; P=PRIMARY, S=SECONDARY, T=TERTIARY
"RTN","IBCEF81",15,0)
 . D CINIT2
"RTN","IBCEF81",16,0)
 . F PRTYPE=1,2,3,5,9 D    ; 1=REFERRING, 2=OPERATING, 3=RENDERING, 5=SUPERVISING, 9=OTHER OPERATING
"RTN","IBCEF81",17,0)
 .. D START(INSLEVEL,PRTYPE,.OUTPUT)
"RTN","IBCEF81",18,0)
 K INPUT M INPUT=OUTPUT
"RTN","IBCEF81",19,0)
 Q STATUS
"RTN","IBCEF81",20,0)
START(INSLEVEL,PRTYPE,OUTPUT)  ; START PROCESSING
"RTN","IBCEF81",21,0)
 N INTERM,PROVINFO,MAXAINFO,FIRSTINF
"RTN","IBCEF81",22,0)
 S INTERM="A"
"RTN","IBCEF81",23,0)
 S INTERM=INTERM_$$TEST1  ; Does Claim Level Provider Exist, 0=NO, 1=YES
"RTN","IBCEF81",24,0)
 S INTERM=INTERM_$$TEST2  ; All procedures have a line level provider, 0=NO, 1=YES
"RTN","IBCEF81",25,0)
 S INTERM=INTERM_$$TEST3  ; One Line Level provider is most significant, 0=NO, 1=YES
"RTN","IBCEF81",26,0)
 S INTERM=INTERM_$$TEST4  ; At least one line level provider matches the claim level provider, 0=NO, 1=YES
"RTN","IBCEF81",27,0)
 S INTERM=INTERM_$$TEST5  ; There is only one procedure without a line level provider, 0=NO, 1=YES
"RTN","IBCEF81",28,0)
 D @INTERM
"RTN","IBCEF81",29,0)
 Q 
"RTN","IBCEF81",30,0)
 ;
"RTN","IBCEF81",31,0)
TEST1()  ; Does Claim Level Provider Exist, 0=NO, 1=YES
"RTN","IBCEF81",32,0)
 N PROVX,PROVY
"RTN","IBCEF81",33,0)
 I $D(CMODE(INSLEVEL))#10=0 Q 0
"RTN","IBCEF81",34,0)
 I $D(CPRNUM(INSLEVEL))#10=0 Q 0
"RTN","IBCEF81",35,0)
 S (PROVX,PROVY)=$G(INPUT("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)) Q:PROVX="" 0
"RTN","IBCEF81",36,0)
 S PROVX="^"_$P(PROVX,";",2)_$P(PROVX,";",1)_")"
"RTN","IBCEF81",37,0)
 I $D(@PROVX) D  Q 1    ;CLAIM PROVIDER EXISTS, RETURN TRUE.
"RTN","IBCEF81",38,0)
 . ; LOAD CLAIM LEVEL PROVIDER INFORMATION
"RTN","IBCEF81",39,0)
 . S PROVINFO=PROVY
"RTN","IBCEF81",40,0)
 . S PROVINFO("PROVINF",IBIEN)=IBIEN
"RTN","IBCEF81",41,0)
 . S PROVINFO("PROVINF",IBIEN,CMODE(INSLEVEL))=""
"RTN","IBCEF81",42,0)
 . S PROVINFO("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL))=INSLEVEL
"RTN","IBCEF81",43,0)
 . M PROVINFO("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)=INPUT("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)
"RTN","IBCEF81",44,0)
 Q 0
"RTN","IBCEF81",45,0)
 ;
"RTN","IBCEF81",46,0)
TEST2()  ; All procedures have a line level provider, 0=NO, 1=YES
"RTN","IBCEF81",47,0)
 N SLC,RESULT,LMODE,LPRNUM,PROVX,LINECNT
"RTN","IBCEF81",48,0)
 S SLC=0,RESULT=1,LINECNT=0
"RTN","IBCEF81",49,0)
 F  S SLC=$$LINIT1(SLC) Q:+SLC=0  D
"RTN","IBCEF81",50,0)
 . S LINECNT=LINECNT+1
"RTN","IBCEF81",51,0)
 . D LINIT2
"RTN","IBCEF81",52,0)
 . I $D(LMODE(INSLEVEL))#10=0 S RESULT=0 Q
"RTN","IBCEF81",53,0)
 . I $D(LPRNUM(INSLEVEL))#10=0 S RESULT=0 Q
"RTN","IBCEF81",54,0)
 . S PROVX=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE))
"RTN","IBCEF81",55,0)
 . I PROVX="" D  Q
"RTN","IBCEF81",56,0)
 .. S RESULT=RESULT*0
"RTN","IBCEF81",57,0)
 . S PROVX="^"_$P(PROVX,";",2)_$P(PROVX,";",1)_")"
"RTN","IBCEF81",58,0)
 . S RESULT=RESULT*($D(@PROVX)'=0)
"RTN","IBCEF81",59,0)
 I +$G(INPUT("SLC"))'=0,INPUT("SLC")>LINECNT S RESULT=0
"RTN","IBCEF81",60,0)
 Q RESULT
"RTN","IBCEF81",61,0)
 ;
"RTN","IBCEF81",62,0)
TEST3()  ; One Line Level provider is most significant, 0=NO, 1=YES
"RTN","IBCEF81",63,0)
 N SLC,RESULT,LMODE,LPRNUM,PCOUNT,PCOUNTF,PCOUNTL,PROVX,TEMPNODE
"RTN","IBCEF81",64,0)
 S SLC=0,RESULT=0
"RTN","IBCEF81",65,0)
 F  S SLC=$$LINIT1(SLC) Q:+SLC=0  D
"RTN","IBCEF81",66,0)
 . D LINIT2
"RTN","IBCEF81",67,0)
 . I $D(LMODE(INSLEVEL))#10=0 Q
"RTN","IBCEF81",68,0)
 . I $D(LPRNUM(INSLEVEL))#10=0 Q
"RTN","IBCEF81",69,0)
 . S PROVX=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE)) Q:PROVX=""
"RTN","IBCEF81",70,0)
 . I $D(FIRSTINF)=0 D
"RTN","IBCEF81",71,0)
 .. ; LOAD FIRST AVAILABLE PROVIDER INFORMATION
"RTN","IBCEF81",72,0)
 .. S FIRSTINF=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE))
"RTN","IBCEF81",73,0)
 .. S FIRSTINF("L-PROV",IBIEN)=IBIEN
"RTN","IBCEF81",74,0)
 .. S FIRSTINF("L-PROV",IBIEN,LMODE(INSLEVEL),LPRNUM(INSLEVEL))=INSLEVEL
"RTN","IBCEF81",75,0)
 .. M FIRSTINF("L-PROV",IBIEN,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE)=INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE)
"RTN","IBCEF81",76,0)
 . S PCOUNT(PROVX)=$P($G(PCOUNT(PROVX)),"^",1)+1_"^"_SLC_"^"_LMODE(INSLEVEL)_"^"_LPRNUM(INSLEVEL)_"^"_PRTYPE
"RTN","IBCEF81",77,0)
 S PROVX="" F  S PROVX=$O(PCOUNT(PROVX)) Q:PROVX=""  D
"RTN","IBCEF81",78,0)
 . S PCOUNTF($P(PCOUNT(PROVX),"^",1),PROVX)=$P(PCOUNT(PROVX),"^",2,5)
"RTN","IBCEF81",79,0)
 S PCOUNTL(1)=$O(PCOUNTF(""),-1) Q:PCOUNTL(1)="" RESULT
"RTN","IBCEF81",80,0)
 S PCOUNTL(2,1)=$O(PCOUNTF(PCOUNTL(1),""),-1) Q:PCOUNTL(2,1)="" RESULT
"RTN","IBCEF81",81,0)
 S PCOUNTL(2,2)=$O(PCOUNTF(PCOUNTL(1),PCOUNTL(2,1)),-1)
"RTN","IBCEF81",82,0)
 I PCOUNTL(2,2)="" D
"RTN","IBCEF81",83,0)
 . S RESULT=1
"RTN","IBCEF81",84,0)
 . ; LOAD MOST SIGNIFICANT LINE LEVEL PROVIDER INFORMATION
"RTN","IBCEF81",85,0)
 . S MAXAINFO=PCOUNTL(2,1)
"RTN","IBCEF81",86,0)
 . S TEMPNODE=PCOUNTF(PCOUNTL(1),PCOUNTL(2,1))
"RTN","IBCEF81",87,0)
 . S MAXAINFO("L-PROV",IBIEN)=IBIEN
"RTN","IBCEF81",88,0)
 . S MAXAINFO("L-PROV",IBIEN,$P(TEMPNODE,"^",2),$P(TEMPNODE,"^",3))=INSLEVEL
"RTN","IBCEF81",89,0)
 . M MAXAINFO("L-PROV",IBIEN,$P(TEMPNODE,"^",2),$P(TEMPNODE,"^",3),$P(TEMPNODE,"^",4))=INPUT("L-PROV",IBIEN,$P(TEMPNODE,"^",1),$P(TEMPNODE,"^",2),$P(TEMPNODE,"^",3),$P(TEMPNODE,"^",4))
"RTN","IBCEF81",90,0)
 Q RESULT
"RTN","IBCEF81",91,0)
 ;
"RTN","IBCEF81",92,0)
TEST4()  ; At least one line level provider matches the claim level provider, 0=NO, 1=YES
"RTN","IBCEF81",93,0)
 N CPROV,RESULT,LMODE,LPRNUM,LPROV,SLC
"RTN","IBCEF81",94,0)
 I $D(CMODE(INSLEVEL))#10=0 Q 0
"RTN","IBCEF81",95,0)
 I $D(CPRNUM(INSLEVEL))#10=0 Q 0
"RTN","IBCEF81",96,0)
 S CPROV=$G(INPUT("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)) Q:CPROV="" 0
"RTN","IBCEF81",97,0)
 S SLC=0,RESULT=0
"RTN","IBCEF81",98,0)
 F  S SLC=$$LINIT1(SLC) Q:+SLC=0  D
"RTN","IBCEF81",99,0)
 . D LINIT2
"RTN","IBCEF81",100,0)
 . I $D(LMODE(INSLEVEL))#10=0 Q
"RTN","IBCEF81",101,0)
 . I $D(LPRNUM(INSLEVEL))#10=0 Q
"RTN","IBCEF81",102,0)
 . S LPROV=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE))  Q:LPROV=""
"RTN","IBCEF81",103,0)
 . I LPROV=CPROV S RESULT=1
"RTN","IBCEF81",104,0)
 Q RESULT
"RTN","IBCEF81",105,0)
 ;
"RTN","IBCEF81",106,0)
TEST5()  ; There is only one procedure without a line level provider, 0=NO, 1=YES
"RTN","IBCEF81",107,0)
 N SLC,LMODE,LPRNUM,PROVCNT,RESULT
"RTN","IBCEF81",108,0)
 S SLC=0,PROVCNT=0,RESULT=0
"RTN","IBCEF81",109,0)
 F  S SLC=$$LINIT1(SLC) Q:+SLC=0  D
"RTN","IBCEF81",110,0)
 . D LINIT2
"RTN","IBCEF81",111,0)
 . I $D(LMODE(INSLEVEL))#10=0 Q
"RTN","IBCEF81",112,0)
 . I $D(LPRNUM(INSLEVEL))#10=0 Q
"RTN","IBCEF81",113,0)
 . S PROVX=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE))
"RTN","IBCEF81",114,0)
 . S:PROVX'="" PROVCNT=PROVCNT+1
"RTN","IBCEF81",115,0)
 I +$G(INPUT("SLC"))'=0,INPUT("SLC")=(PROVCNT+1) S RESULT=1
"RTN","IBCEF81",116,0)
 Q RESULT
"RTN","IBCEF81",117,0)
 ;
"RTN","IBCEF81",118,0)
A00000  ;  Case 1
"RTN","IBCEF81",119,0)
 ; TESTS: Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF81",120,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",121,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",122,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",123,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",124,0)
 ;
"RTN","IBCEF81",125,0)
 ; Move the first available line level provider to the claim level.
"RTN","IBCEF81",126,0)
 I $G(FIRSTINF)="" Q
"RTN","IBCEF81",127,0)
 M OUTPUT("PROVINF",IBIEN)=FIRSTINF("L-PROV",IBIEN)
"RTN","IBCEF81",128,0)
 ;
"RTN","IBCEF81",129,0)
 ; Remove the claim lines associated with the primary provider.
"RTN","IBCEF81",130,0)
 S PROVINFO=FIRSTINF
"RTN","IBCEF81",131,0)
 D REMOVELN
"RTN","IBCEF81",132,0)
 Q
"RTN","IBCEF81",133,0)
 ;
"RTN","IBCEF81",134,0)
A00001  ;  Case 2
"RTN","IBCEF81",135,0)
 ; TESTS: Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF81",136,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",137,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",138,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",139,0)
 ;        There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF81",140,0)
 ;
"RTN","IBCEF81",141,0)
 ; Move the first available line level provider to the claim level.
"RTN","IBCEF81",142,0)
 I $G(FIRSTINF)="" Q
"RTN","IBCEF81",143,0)
 M OUTPUT("PROVINF",IBIEN)=FIRSTINF("L-PROV",IBIEN)
"RTN","IBCEF81",144,0)
 ;
"RTN","IBCEF81",145,0)
 ; Remove the claim lines associated with the primary provider.
"RTN","IBCEF81",146,0)
 S PROVINFO=FIRSTINF
"RTN","IBCEF81",147,0)
 D REMOVELN
"RTN","IBCEF81",148,0)
 Q
"RTN","IBCEF81",149,0)
 ;
"RTN","IBCEF81",150,0)
A00010  ;  Case 3 - This case can never happen!
"RTN","IBCEF81",151,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",152,0)
 Q
"RTN","IBCEF81",153,0)
 ;
"RTN","IBCEF81",154,0)
A00011  ;  Case 4 - This case can never happen!
"RTN","IBCEF81",155,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",156,0)
 Q
"RTN","IBCEF81",157,0)
 ;
"RTN","IBCEF81",158,0)
A00100  ;  Case 5
"RTN","IBCEF81",159,0)
 ; TESTS: Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF81",160,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",161,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",162,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",163,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",164,0)
 ;
"RTN","IBCEF81",165,0)
 ; Set the claim level provider equal to the most significant line level provider.
"RTN","IBCEF81",166,0)
 I $G(MAXAINFO)="" Q
"RTN","IBCEF81",167,0)
 M OUTPUT("PROVINF",IBIEN)=MAXAINFO("L-PROV",IBIEN)
"RTN","IBCEF81",168,0)
 ;
"RTN","IBCEF81",169,0)
 ; Remove the claim lines associated with the primary provider.
"RTN","IBCEF81",170,0)
 S PROVINFO=MAXAINFO
"RTN","IBCEF81",171,0)
 D REMOVELN
"RTN","IBCEF81",172,0)
 ;
"RTN","IBCEF81",173,0)
 Q
"RTN","IBCEF81",174,0)
 ;
"RTN","IBCEF81",175,0)
A00101  ;  Case 6
"RTN","IBCEF81",176,0)
 ; TESTS: Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF81",177,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",178,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",179,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",180,0)
 ;        There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF81",181,0)
 ;
"RTN","IBCEF81",182,0)
 ; Set the claim level provider equal to the most significant line level provider.
"RTN","IBCEF81",183,0)
 I $G(MAXAINFO)="" Q
"RTN","IBCEF81",184,0)
 M OUTPUT("PROVINF",IBIEN)=MAXAINFO("L-PROV",IBIEN)
"RTN","IBCEF81",185,0)
 ;
"RTN","IBCEF81",186,0)
 ; Remove the claim lines associated with the primary provider.
"RTN","IBCEF81",187,0)
 S PROVINFO=MAXAINFO
"RTN","IBCEF81",188,0)
 D REMOVELN
"RTN","IBCEF81",189,0)
 ;
"RTN","IBCEF81",190,0)
 Q
"RTN","IBCEF81",191,0)
 ;
"RTN","IBCEF81",192,0)
A00110  ;  Case 7 - This case can never happen!
"RTN","IBCEF81",193,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",194,0)
 Q
"RTN","IBCEF81",195,0)
 ;
"RTN","IBCEF81",196,0)
A00111  ;  Case 8 - This case can never happen!
"RTN","IBCEF81",197,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",198,0)
 Q
"RTN","IBCEF81",199,0)
 ;
"RTN","IBCEF81",200,0)
A01000  ;  Case 9
"RTN","IBCEF81",201,0)
 ; TESTS: Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF81",202,0)
 ;        All procedures have a line level provider: 1=YES
"RTN","IBCEF81",203,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",204,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",205,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",206,0)
 ;
"RTN","IBCEF81",207,0)
 ; Move the first available line level provider to the claim level.
"RTN","IBCEF81",208,0)
 ; Set the claim level provider equal to the most significant line level provider.
"RTN","IBCEF81",209,0)
 I $G(FIRSTINF)="" Q
"RTN","IBCEF81",210,0)
 M OUTPUT("PROVINF",IBIEN)=FIRSTINF("L-PROV",IBIEN)
"RTN","IBCEF81",211,0)
 ;
"RTN","IBCEF81",212,0)
 ; Remove the claim lines associated with the primary provider.
"RTN","IBCEF81",213,0)
 S PROVINFO=FIRSTINF
"RTN","IBCEF81",214,0)
 D REMOVELN
"RTN","IBCEF81",215,0)
 Q
"RTN","IBCEF81",216,0)
 ;
"RTN","IBCEF81",217,0)
A01001  ; Case 10 - This case can never happen!
"RTN","IBCEF81",218,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",219,0)
 Q
"RTN","IBCEF81",220,0)
 ;
"RTN","IBCEF81",221,0)
A01010  ; Case 11 - This case can never happen!
"RTN","IBCEF81",222,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",223,0)
 Q
"RTN","IBCEF81",224,0)
 ;
"RTN","IBCEF81",225,0)
A01011  ; Case 12 - This case can never happen!
"RTN","IBCEF81",226,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",227,0)
 Q
"RTN","IBCEF81",228,0)
 ;
"RTN","IBCEF81",229,0)
A01100  ; Case 13
"RTN","IBCEF81",230,0)
 ; TESTS: Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF81",231,0)
 ;        All procedures have a line level provider: 1=YES
"RTN","IBCEF81",232,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",233,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",234,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",235,0)
 ;
"RTN","IBCEF81",236,0)
 ; Set the claim level provider equal to the most significant line level provider.
"RTN","IBCEF81",237,0)
 I $G(MAXAINFO)="" Q
"RTN","IBCEF81",238,0)
 M OUTPUT("PROVINF",IBIEN)=MAXAINFO("L-PROV",IBIEN)
"RTN","IBCEF81",239,0)
 ;
"RTN","IBCEF81",240,0)
 ; Remove the claim lines associated with the primary provider.
"RTN","IBCEF81",241,0)
 S PROVINFO=MAXAINFO
"RTN","IBCEF81",242,0)
 D REMOVELN
"RTN","IBCEF81",243,0)
 ;
"RTN","IBCEF81",244,0)
 Q
"RTN","IBCEF81",245,0)
 ;
"RTN","IBCEF81",246,0)
A01101  ; Case 14 - This case can never happen!
"RTN","IBCEF81",247,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",248,0)
 Q
"RTN","IBCEF81",249,0)
 ;
"RTN","IBCEF81",250,0)
A01110  ; Case 15 - This case can never happen!
"RTN","IBCEF81",251,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",252,0)
 Q
"RTN","IBCEF81",253,0)
 ;
"RTN","IBCEF81",254,0)
A01111  ; Case 16 - This case can never happen!
"RTN","IBCEF81",255,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",256,0)
 Q
"RTN","IBCEF81",257,0)
 ;
"RTN","IBCEF81",258,0)
A10000  ; Case 17
"RTN","IBCEF81",259,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",260,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",261,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",262,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",263,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",264,0)
 ;
"RTN","IBCEF81",265,0)
 ; ACTIONS: Transmit as is.
"RTN","IBCEF81",266,0)
 ;
"RTN","IBCEF81",267,0)
 Q
"RTN","IBCEF81",268,0)
 ;
"RTN","IBCEF81",269,0)
A10001   ; Case 18
"RTN","IBCEF81",270,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",271,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",272,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",273,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",274,0)
 ;        There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF81",275,0)
 ;
"RTN","IBCEF81",276,0)
 ; ACTIONS: Transmit as is.
"RTN","IBCEF81",277,0)
 ;
"RTN","IBCEF81",278,0)
 Q
"RTN","IBCEF81",279,0)
 ;
"RTN","IBCEF81",280,0)
A10010   ; Case 19
"RTN","IBCEF81",281,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",282,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",283,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",284,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF81",285,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",286,0)
 ;
"RTN","IBCEF81",287,0)
 ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",288,0)
 D REMOVELN
"RTN","IBCEF81",289,0)
 ;
"RTN","IBCEF81",290,0)
 Q
"RTN","IBCEF81",291,0)
 ;
"RTN","IBCEF81",292,0)
A10011   ; Case 20
"RTN","IBCEF81",293,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",294,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",295,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",296,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF81",297,0)
 ;        There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF81",298,0)
 ;
"RTN","IBCEF81",299,0)
 ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",300,0)
 D REMOVELN
"RTN","IBCEF81",301,0)
 ;
"RTN","IBCEF81",302,0)
 Q
"RTN","IBCEF81",303,0)
 ;
"RTN","IBCEF81",304,0)
A10100   ; Case 21
"RTN","IBCEF81",305,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",306,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",307,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",308,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",309,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",310,0)
 ;
"RTN","IBCEF81",311,0)
 ; ACTIONS: Transmit as is.
"RTN","IBCEF81",312,0)
 ;
"RTN","IBCEF81",313,0)
 Q
"RTN","IBCEF81",314,0)
 ;
"RTN","IBCEF81",315,0)
A10101   ; Case 22
"RTN","IBCEF81",316,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",317,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",318,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",319,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",320,0)
 ;        There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF81",321,0)
 ;
"RTN","IBCEF81",322,0)
 ; ACTIONS: Transmit as is.
"RTN","IBCEF81",323,0)
 ;
"RTN","IBCEF81",324,0)
 Q
"RTN","IBCEF81",325,0)
 ;
"RTN","IBCEF81",326,0)
A10110   ; Case 23
"RTN","IBCEF81",327,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",328,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",329,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",330,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF81",331,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",332,0)
 ;
"RTN","IBCEF81",333,0)
 ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",334,0)
 D REMOVELN
"RTN","IBCEF81",335,0)
 ;
"RTN","IBCEF81",336,0)
 Q
"RTN","IBCEF81",337,0)
 ;
"RTN","IBCEF81",338,0)
A10111   ; Case 24
"RTN","IBCEF81",339,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",340,0)
 ;        All procedures have a line level provider: 0=NO
"RTN","IBCEF81",341,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",342,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF81",343,0)
 ;        There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF81",344,0)
 ;
"RTN","IBCEF81",345,0)
 ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",346,0)
 D REMOVELN
"RTN","IBCEF81",347,0)
 ;
"RTN","IBCEF81",348,0)
 Q
"RTN","IBCEF81",349,0)
 ;
"RTN","IBCEF81",350,0)
A11000   ; Case 25
"RTN","IBCEF81",351,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",352,0)
 ;        All procedures have a line level provider: 1=YES
"RTN","IBCEF81",353,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",354,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",355,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",356,0)
 ;
"RTN","IBCEF81",357,0)
 S STATUS="0^CASE 25 ERROR"
"RTN","IBCEF81",358,0)
 ;
"RTN","IBCEF81",359,0)
 Q
"RTN","IBCEF81",360,0)
 ;
"RTN","IBCEF81",361,0)
A11001   ; Case 26 - This case can never happen!
"RTN","IBCEF81",362,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",363,0)
 Q
"RTN","IBCEF81",364,0)
 ;
"RTN","IBCEF81",365,0)
A11010   ; Case 27
"RTN","IBCEF81",366,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",367,0)
 ;        All procedures have a line level provider: 1=YES
"RTN","IBCEF81",368,0)
 ;        One Line Level provider is most significant: 0=NO
"RTN","IBCEF81",369,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF81",370,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",371,0)
 ;
"RTN","IBCEF81",372,0)
 ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",373,0)
 D REMOVELN
"RTN","IBCEF81",374,0)
 ;
"RTN","IBCEF81",375,0)
 Q
"RTN","IBCEF81",376,0)
 ;
"RTN","IBCEF81",377,0)
A11011   ; Case 28 - This case can never happen!
"RTN","IBCEF81",378,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",379,0)
 Q
"RTN","IBCEF81",380,0)
 ;
"RTN","IBCEF81",381,0)
A11100   ; Case 29
"RTN","IBCEF81",382,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",383,0)
 ;        All procedures have a line level provider: 1=YES
"RTN","IBCEF81",384,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",385,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF81",386,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",387,0)
 ;
"RTN","IBCEF81",388,0)
 S STATUS="0^CASE 29 ERROR"
"RTN","IBCEF81",389,0)
 ;
"RTN","IBCEF81",390,0)
 Q
"RTN","IBCEF81",391,0)
 ;
"RTN","IBCEF81",392,0)
A11101   ; Case 30 - This case can never happen!
"RTN","IBCEF81",393,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",394,0)
 Q
"RTN","IBCEF81",395,0)
 ;
"RTN","IBCEF81",396,0)
A11110   ; Case 31
"RTN","IBCEF81",397,0)
 ; TESTS: Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF81",398,0)
 ;        All procedures have a line level provider: 1=YES
"RTN","IBCEF81",399,0)
 ;        One Line Level provider is most significant: 1=YES
"RTN","IBCEF81",400,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF81",401,0)
 ;        There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF81",402,0)
 ;
"RTN","IBCEF81",403,0)
 ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",404,0)
 D REMOVELN
"RTN","IBCEF81",405,0)
 ;
"RTN","IBCEF81",406,0)
 Q
"RTN","IBCEF81",407,0)
 ;
"RTN","IBCEF81",408,0)
A11111   ; Case 32 - This case can never happen!
"RTN","IBCEF81",409,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF81",410,0)
 Q
"RTN","IBCEF81",411,0)
 ;
"RTN","IBCEF81",412,0)
CINIT1    ; Claim level initiation
"RTN","IBCEF81",413,0)
 S IBIEN=$O(INPUT("L-PROV",0))
"RTN","IBCEF81",414,0)
 I IBIEN="" S IBIEN=$O(INPUT("PROVINF",0))
"RTN","IBCEF81",415,0)
 I IBIEN="" S IBIEN=$O(INPUT("LAB/FAC",0))
"RTN","IBCEF81",416,0)
 Q
"RTN","IBCEF81",417,0)
 ;
"RTN","IBCEF81",418,0)
CINIT2    ; Claim level initiation
"RTN","IBCEF81",419,0)
 N MODEX,PRNUMX,PROVX
"RTN","IBCEF81",420,0)
 F MODEX="C","O" D
"RTN","IBCEF81",421,0)
 . S PRNUMX=0 F  S PRNUMX=$O(INPUT("PROVINF",IBIEN,MODEX,PRNUMX)) Q:+PRNUMX=0  D
"RTN","IBCEF81",422,0)
 .. I $G(INPUT("PROVINF",IBIEN,MODEX,PRNUMX))="" Q
"RTN","IBCEF81",423,0)
 .. I INPUT("PROVINF",IBIEN,MODEX,PRNUMX)=INSLEVEL S CMODE(INSLEVEL)=MODEX,CPRNUM(INSLEVEL)=PRNUMX
"RTN","IBCEF81",424,0)
 Q
"RTN","IBCEF81",425,0)
 ;
"RTN","IBCEF81",426,0)
LINIT1(SLC)    ; Line level initiation
"RTN","IBCEF81",427,0)
 Q $O(INPUT("L-PROV",IBIEN,SLC))
"RTN","IBCEF81",428,0)
 ;
"RTN","IBCEF81",429,0)
LINIT2    ; Line level initiation
"RTN","IBCEF81",430,0)
 N MODEX,PRNUMX,PROVX
"RTN","IBCEF81",431,0)
 F MODEX="C","O" D
"RTN","IBCEF81",432,0)
 . S PRNUMX=0 F  S PRNUMX=$O(INPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX)) Q:+PRNUMX=0  D
"RTN","IBCEF81",433,0)
 .. I INPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX)=INSLEVEL S LMODE(INSLEVEL)=MODEX,LPRNUM(INSLEVEL)=PRNUMX
"RTN","IBCEF81",434,0)
 Q
"RTN","IBCEF81",435,0)
 ;
"RTN","IBCEF81",436,0)
REMOVELN    ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF81",437,0)
 N MODEX,PRNUMX,PROVX
"RTN","IBCEF81",438,0)
 S SLC=0 F  S SLC=$O(OUTPUT("L-PROV",IBIEN,SLC)) Q:+SLC=0  D
"RTN","IBCEF81",439,0)
 . F MODEX="C","O" D
"RTN","IBCEF81",440,0)
 .. S PRNUMX=0 F  S PRNUMX=$O(OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX)) Q:+PRNUMX=0  D
"RTN","IBCEF81",441,0)
 ... Q:$G(PROVINFO)=""
"RTN","IBCEF81",442,0)
 ... I $G(OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX,PRTYPE))=PROVINFO D
"RTN","IBCEF81",443,0)
 .... K OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX,PRTYPE)
"RTN","IBCEF81",444,0)
 .... I $D(OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX))=1 K OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX)
"RTN","IBCEF81",445,0)
 .... I $D(OUTPUT("L-PROV",IBIEN,SLC,MODEX))=1 K OUTPUT("L-PROV",IBIEN,SLC,MODEX)
"RTN","IBCEF81",446,0)
 .... I $D(OUTPUT("L-PROV",IBIEN,SLC))=1 K OUTPUT("L-PROV",IBIEN,SLC)
"RTN","IBCEF81",447,0)
 Q
"RTN","IBCEF82")
0^14^B106453752^B111186112
"RTN","IBCEF82",1,0)
IBCEF82 ;ALB/BI - PROVIDER ADJUSTMENTS ;20-OCT-2010
"RTN","IBCEF82",2,0)
 ;;2.0;INTEGRATED BILLING;**432,473**;21-MAR-94;Build 29
"RTN","IBCEF82",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEF82",4,0)
 ;
"RTN","IBCEF82",5,0)
 Q
"RTN","IBCEF82",6,0)
 ;
"RTN","IBCEF82",7,0)
EN(INPUT)    ; ENTRY POINT FOR LOCAL PRINTING
"RTN","IBCEF82",8,0)
 N INSLEVEL,PRTYPE,OUTPUT,IBIEN,CMODE,CPRNUM,STATUS
"RTN","IBCEF82",9,0)
 S STATUS=1
"RTN","IBCEF82",10,0)
 I $D(INPUT)=0 S STATUS=0 Q STATUS
"RTN","IBCEF82",11,0)
 K OUTPUT M OUTPUT=INPUT
"RTN","IBCEF82",12,0)
 D CINIT1 Q:IBIEN="" STATUS
"RTN","IBCEF82",13,0)
 F INSLEVEL="P","S","T" D    ; P=PRIMARY, S=SECONDARY, T=TERTIARY
"RTN","IBCEF82",14,0)
 . D CINIT2
"RTN","IBCEF82",15,0)
 . F PRTYPE=1,2,3,5,9 D    ; 1=REFERRING, 2=OPERATING, 3=RENDERING, 5=SUPERVISING, 9=OTHER OPERATING
"RTN","IBCEF82",16,0)
 .. D START(INSLEVEL,PRTYPE,.OUTPUT)
"RTN","IBCEF82",17,0)
 K INPUT M INPUT=OUTPUT
"RTN","IBCEF82",18,0)
 Q STATUS
"RTN","IBCEF82",19,0)
START(INSLEVEL,PRTYPE,OUTPUT)     ; START PROCESSING
"RTN","IBCEF82",20,0)
 N INTERM,PROVINFO,MAXAINFO,FIRSTINF
"RTN","IBCEF82",21,0)
 S INTERM="A"
"RTN","IBCEF82",22,0)
 S INTERM=INTERM_$$TEST1    ; Does Claim Level Provider Exist, 0=NO, 1=YES
"RTN","IBCEF82",23,0)
 S INTERM=INTERM_$$TEST2    ; All procedures have a line level provider, 0=NO, 1=YES
"RTN","IBCEF82",24,0)
 S INTERM=INTERM_$$TEST3    ; One Line Level provider is most significant, 0=NO, 1=YES
"RTN","IBCEF82",25,0)
 S INTERM=INTERM_$$TEST4    ; At least one line level provider matches the claim level provider, 0=NO, 1=YES
"RTN","IBCEF82",26,0)
 S INTERM=INTERM_$$TEST5    ; There is only one procedure without a line level provider, 0=NO, 1=YES
"RTN","IBCEF82",27,0)
 D @INTERM
"RTN","IBCEF82",28,0)
 Q 
"RTN","IBCEF82",29,0)
 ;
"RTN","IBCEF82",30,0)
TEST1() ; Does Claim Level Provider Exist, 0=NO, 1=YES
"RTN","IBCEF82",31,0)
 N PROVX,PROVY
"RTN","IBCEF82",32,0)
 I $D(CMODE(INSLEVEL))#10=0 Q 0
"RTN","IBCEF82",33,0)
 I $D(CPRNUM(INSLEVEL))#10=0 Q 0
"RTN","IBCEF82",34,0)
 S (PROVX,PROVY)=$G(INPUT("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)) Q:PROVX="" 0
"RTN","IBCEF82",35,0)
 S PROVX="^"_$P(PROVX,";",2)_$P(PROVX,";",1)_")"
"RTN","IBCEF82",36,0)
 I $D(@PROVX) D  Q 1    ;CLAIM PROVIDER EXISTS, RETURN TRUE.
"RTN","IBCEF82",37,0)
 . ; LOAD CLAIM LEVEL PROVIDER INFORMATION
"RTN","IBCEF82",38,0)
 . S PROVINFO=PROVY
"RTN","IBCEF82",39,0)
 . S PROVINFO("PROVINF",IBIEN)=IBIEN
"RTN","IBCEF82",40,0)
 . S PROVINFO("PROVINF",IBIEN,CMODE(INSLEVEL))=""
"RTN","IBCEF82",41,0)
 . S PROVINFO("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL))=INSLEVEL
"RTN","IBCEF82",42,0)
 . M PROVINFO("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)=INPUT("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)
"RTN","IBCEF82",43,0)
 Q 0
"RTN","IBCEF82",44,0)
 ;
"RTN","IBCEF82",45,0)
TEST2() ; All procedures have a line level provider, 0=NO, 1=YES
"RTN","IBCEF82",46,0)
 N SLC,RESULT,LMODE,LPRNUM,PROVX,LINECNT
"RTN","IBCEF82",47,0)
 S SLC=0,RESULT=1,LINECNT=0
"RTN","IBCEF82",48,0)
 F  S SLC=$$LINIT1(SLC) Q:+SLC=0  D
"RTN","IBCEF82",49,0)
 . D LINIT2
"RTN","IBCEF82",50,0)
 . S LINECNT=LINECNT+1
"RTN","IBCEF82",51,0)
 . I $D(LMODE(INSLEVEL))#10=0 S RESULT=0 Q
"RTN","IBCEF82",52,0)
 . I $D(LPRNUM(INSLEVEL))#10=0 S RESULT=0 Q
"RTN","IBCEF82",53,0)
 . S PROVX=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE))
"RTN","IBCEF82",54,0)
 . I PROVX="" D  Q
"RTN","IBCEF82",55,0)
 .. S RESULT=RESULT*0
"RTN","IBCEF82",56,0)
 . S PROVX="^"_$P(PROVX,";",2)_$P(PROVX,";",1)_")"
"RTN","IBCEF82",57,0)
 . S RESULT=RESULT*($D(@PROVX)'=0)
"RTN","IBCEF82",58,0)
 I +$G(INPUT("SLC"))'=0,INPUT("SLC")>LINECNT S RESULT=0
"RTN","IBCEF82",59,0)
 Q RESULT
"RTN","IBCEF82",60,0)
 ;
"RTN","IBCEF82",61,0)
TEST3() ; One Line Level provider is most significant, 0=NO, 1=YES
"RTN","IBCEF82",62,0)
 N SLC,RESULT,LMODE,LPRNUM,PCOUNT,PCOUNTF,PCOUNTL,PROVX,TEMPNODE
"RTN","IBCEF82",63,0)
 S SLC=0,RESULT=0
"RTN","IBCEF82",64,0)
 F  S SLC=$$LINIT1(SLC) Q:+SLC=0  D
"RTN","IBCEF82",65,0)
 . D LINIT2
"RTN","IBCEF82",66,0)
 . I $D(LMODE(INSLEVEL))#10=0 Q
"RTN","IBCEF82",67,0)
 . I $D(LPRNUM(INSLEVEL))#10=0 Q
"RTN","IBCEF82",68,0)
 . S PROVX=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE)) Q:PROVX=""
"RTN","IBCEF82",69,0)
 . I $D(FIRSTINF)=0 D
"RTN","IBCEF82",70,0)
 .. ; LOAD FIRST AVAILABLE PROVIDER INFORMATION
"RTN","IBCEF82",71,0)
 .. S FIRSTINF=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE))
"RTN","IBCEF82",72,0)
 .. S FIRSTINF("L-PROV",IBIEN)=IBIEN
"RTN","IBCEF82",73,0)
 .. S FIRSTINF("L-PROV",IBIEN,LMODE(INSLEVEL),LPRNUM(INSLEVEL))=INSLEVEL
"RTN","IBCEF82",74,0)
 .. M FIRSTINF("L-PROV",IBIEN,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE)=INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE)
"RTN","IBCEF82",75,0)
 . S PCOUNT(PROVX)=$P($G(PCOUNT(PROVX)),"^",1)+1_"^"_SLC_"^"_LMODE(INSLEVEL)_"^"_LPRNUM(INSLEVEL)_"^"_PRTYPE
"RTN","IBCEF82",76,0)
 S PROVX="" F  S PROVX=$O(PCOUNT(PROVX)) Q:PROVX=""  D
"RTN","IBCEF82",77,0)
 . S PCOUNTF($P(PCOUNT(PROVX),"^",1),PROVX)=$P(PCOUNT(PROVX),"^",2,5)
"RTN","IBCEF82",78,0)
 S PCOUNTL(1)=$O(PCOUNTF(""),-1) Q:PCOUNTL(1)="" RESULT
"RTN","IBCEF82",79,0)
 S PCOUNTL(2,1)=$O(PCOUNTF(PCOUNTL(1),""),-1) Q:PCOUNTL(2,1)="" RESULT
"RTN","IBCEF82",80,0)
 S PCOUNTL(2,2)=$O(PCOUNTF(PCOUNTL(1),PCOUNTL(2,1)),-1)
"RTN","IBCEF82",81,0)
 I PCOUNTL(2,2)="" D
"RTN","IBCEF82",82,0)
 . S RESULT=1
"RTN","IBCEF82",83,0)
 . ; LOAD MOST SIGNIFICANT LINE LEVEL PROVIDER INFORMATION
"RTN","IBCEF82",84,0)
 . S MAXAINFO=PCOUNTL(2,1)
"RTN","IBCEF82",85,0)
 . S TEMPNODE=PCOUNTF(PCOUNTL(1),PCOUNTL(2,1))
"RTN","IBCEF82",86,0)
 . S MAXAINFO("L-PROV",IBIEN)=IBIEN
"RTN","IBCEF82",87,0)
 . S MAXAINFO("L-PROV",IBIEN,$P(TEMPNODE,"^",2),$P(TEMPNODE,"^",3))=INSLEVEL
"RTN","IBCEF82",88,0)
 . M MAXAINFO("L-PROV",IBIEN,$P(TEMPNODE,"^",2),$P(TEMPNODE,"^",3),$P(TEMPNODE,"^",4))=INPUT("L-PROV",IBIEN,$P(TEMPNODE,"^",1),$P(TEMPNODE,"^",2),$P(TEMPNODE,"^",3),$P(TEMPNODE,"^",4))
"RTN","IBCEF82",89,0)
 Q RESULT
"RTN","IBCEF82",90,0)
 ;
"RTN","IBCEF82",91,0)
TEST4() ; At least one line level provider matches the claim level provider, 0=NO, 1=YES
"RTN","IBCEF82",92,0)
 N CPROV,RESULT,LMODE,LPRNUM,LPROV,SLC
"RTN","IBCEF82",93,0)
 I $D(CMODE(INSLEVEL))#10=0 Q 0
"RTN","IBCEF82",94,0)
 I $D(CPRNUM(INSLEVEL))#10=0 Q 0
"RTN","IBCEF82",95,0)
 S CPROV=$G(INPUT("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)) Q:CPROV="" 0
"RTN","IBCEF82",96,0)
 S SLC=0,RESULT=0
"RTN","IBCEF82",97,0)
 F  S SLC=$$LINIT1(SLC) Q:+SLC=0  D
"RTN","IBCEF82",98,0)
 . D LINIT2
"RTN","IBCEF82",99,0)
 . I $D(LMODE(INSLEVEL))#10=0 Q
"RTN","IBCEF82",100,0)
 . I $D(LPRNUM(INSLEVEL))#10=0 Q
"RTN","IBCEF82",101,0)
 . S LPROV=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE))  Q:LPROV=""
"RTN","IBCEF82",102,0)
 . I LPROV=CPROV S RESULT=1
"RTN","IBCEF82",103,0)
 Q RESULT
"RTN","IBCEF82",104,0)
 ;
"RTN","IBCEF82",105,0)
TEST5() ; There is only one procedure without a line level provider, 0=NO, 1=YES
"RTN","IBCEF82",106,0)
 N SLC,LMODE,LPRNUM,PROVCNT,RESULT
"RTN","IBCEF82",107,0)
 S SLC=0,PROVCNT=0,RESULT=0
"RTN","IBCEF82",108,0)
 F  S SLC=$$LINIT1(SLC) Q:+SLC=0  D
"RTN","IBCEF82",109,0)
 . D LINIT2
"RTN","IBCEF82",110,0)
 . I $D(LMODE(INSLEVEL))#10=0 Q
"RTN","IBCEF82",111,0)
 . I $D(LPRNUM(INSLEVEL))#10=0 Q
"RTN","IBCEF82",112,0)
 . S PROVX=$G(INPUT("L-PROV",IBIEN,SLC,LMODE(INSLEVEL),LPRNUM(INSLEVEL),PRTYPE))
"RTN","IBCEF82",113,0)
 . S:PROVX'="" PROVCNT=PROVCNT+1
"RTN","IBCEF82",114,0)
 I +$G(INPUT("SLC"))'=0,INPUT("SLC")=(PROVCNT+1) S RESULT=1
"RTN","IBCEF82",115,0)
 Q RESULT
"RTN","IBCEF82",116,0)
 ;
"RTN","IBCEF82",117,0)
A00000     ;  Case 1
"RTN","IBCEF82",118,0)
 ; TESTS:                            Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF82",119,0)
 ;                         All procedures have a line level provider: 0=NO
"RTN","IBCEF82",120,0)
 ;                       One Line Level provider is most significant: 0=NO
"RTN","IBCEF82",121,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF82",122,0)
 ;         There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF82",123,0)
 ;
"RTN","IBCEF82",124,0)
 ; ACTIONS: Error Message
"RTN","IBCEF82",125,0)
 ;
"RTN","IBCEF82",126,0)
 Q
"RTN","IBCEF82",127,0)
 ;
"RTN","IBCEF82",128,0)
A00001     ;  Case 2
"RTN","IBCEF82",129,0)
 ; TESTS:                            Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF82",130,0)
 ;                         All procedures have a line level provider: 0=NO
"RTN","IBCEF82",131,0)
 ;                       One Line Level provider is most significant: 0=NO
"RTN","IBCEF82",132,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF82",133,0)
 ;         There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF82",134,0)
 ;
"RTN","IBCEF82",135,0)
 ; ACTIONS: Error Message
"RTN","IBCEF82",136,0)
 ;
"RTN","IBCEF82",137,0)
 Q
"RTN","IBCEF82",138,0)
 ;
"RTN","IBCEF82",139,0)
A00010     ;  Case 3 - This case can never happen!
"RTN","IBCEF82",140,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",141,0)
 Q
"RTN","IBCEF82",142,0)
 ;
"RTN","IBCEF82",143,0)
A00011     ;  Case 4 - This case can never happen!
"RTN","IBCEF82",144,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",145,0)
 Q
"RTN","IBCEF82",146,0)
 ;
"RTN","IBCEF82",147,0)
A00100     ;  Case 5
"RTN","IBCEF82",148,0)
 ; TESTS:                            Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF82",149,0)
 ;                         All procedures have a line level provider: 0=NO
"RTN","IBCEF82",150,0)
 ;                       One Line Level provider is most significant: 1=YES
"RTN","IBCEF82",151,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF82",152,0)
 ;         There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF82",153,0)
 ;
"RTN","IBCEF82",154,0)
 ; ACTIONS: Error Message
"RTN","IBCEF82",155,0)
 ;
"RTN","IBCEF82",156,0)
 Q
"RTN","IBCEF82",157,0)
 ;
"RTN","IBCEF82",158,0)
A00101     ;  Case 6
"RTN","IBCEF82",159,0)
 ; TESTS:                            Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF82",160,0)
 ;                         All procedures have a line level provider: 0=NO
"RTN","IBCEF82",161,0)
 ;                       One Line Level provider is most significant: 1=YES
"RTN","IBCEF82",162,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF82",163,0)
 ;         There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF82",164,0)
 ;
"RTN","IBCEF82",165,0)
 ; ACTIONS: Error Message
"RTN","IBCEF82",166,0)
 ;
"RTN","IBCEF82",167,0)
 Q
"RTN","IBCEF82",168,0)
 ;
"RTN","IBCEF82",169,0)
A00110     ;  Case 7 - This case can never happen!
"RTN","IBCEF82",170,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",171,0)
 Q
"RTN","IBCEF82",172,0)
 ;
"RTN","IBCEF82",173,0)
A00111     ;  Case 8 - This case can never happen!
"RTN","IBCEF82",174,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",175,0)
 Q
"RTN","IBCEF82",176,0)
 ;
"RTN","IBCEF82",177,0)
A01000     ;  Case 9
"RTN","IBCEF82",178,0)
 ; TESTS:                            Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF82",179,0)
 ;                         All procedures have a line level provider: 1=YES
"RTN","IBCEF82",180,0)
 ;                       One Line Level provider is most significant: 0=NO
"RTN","IBCEF82",181,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF82",182,0)
 ;         There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF82",183,0)
 ;
"RTN","IBCEF82",184,0)
 ; ACTIONS: Return the first Line Level Provider.
"RTN","IBCEF82",185,0)
 ;
"RTN","IBCEF82",186,0)
 ; Move the first line level provider to the claim level.
"RTN","IBCEF82",187,0)
 I $G(FIRSTINF)="" Q
"RTN","IBCEF82",188,0)
 M OUTPUT("PROVINF",IBIEN)=FIRSTINF("L-PROV",IBIEN)
"RTN","IBCEF82",189,0)
 ;
"RTN","IBCEF82",190,0)
 Q
"RTN","IBCEF82",191,0)
 ;
"RTN","IBCEF82",192,0)
A01001     ; Case 10 - This case can never happen!
"RTN","IBCEF82",193,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",194,0)
 Q
"RTN","IBCEF82",195,0)
 ;
"RTN","IBCEF82",196,0)
A01010     ; Case 11 - This case can never happen!
"RTN","IBCEF82",197,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",198,0)
 Q
"RTN","IBCEF82",199,0)
 ;
"RTN","IBCEF82",200,0)
A01011     ; Case 12 - This case can never happen!
"RTN","IBCEF82",201,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",202,0)
 Q
"RTN","IBCEF82",203,0)
 ;
"RTN","IBCEF82",204,0)
A01100     ; Case 13
"RTN","IBCEF82",205,0)
 ; TESTS:                            Does Claim Level Provider Exist: 0=NO
"RTN","IBCEF82",206,0)
 ;                         All procedures have a line level provider: 1=YES
"RTN","IBCEF82",207,0)
 ;                       One Line Level provider is most significant: 1=YES
"RTN","IBCEF82",208,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF82",209,0)
 ;         There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF82",210,0)
 ;
"RTN","IBCEF82",211,0)
 ; ACTIONS: Make the most significant provider the Claim Level Provider.
"RTN","IBCEF82",212,0)
 ;
"RTN","IBCEF82",213,0)
 ; Set the claim level provider equal to the most significant line level provider.
"RTN","IBCEF82",214,0)
 I $G(MAXAINFO)="" Q
"RTN","IBCEF82",215,0)
 M OUTPUT("PROVINF",IBIEN)=MAXAINFO("L-PROV",IBIEN)
"RTN","IBCEF82",216,0)
 ;
"RTN","IBCEF82",217,0)
 Q
"RTN","IBCEF82",218,0)
 ;
"RTN","IBCEF82",219,0)
A01101     ; Case 14 - This case can never happen!
"RTN","IBCEF82",220,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",221,0)
 Q
"RTN","IBCEF82",222,0)
 ;
"RTN","IBCEF82",223,0)
A01110     ; Case 15 - This case can never happen!
"RTN","IBCEF82",224,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",225,0)
 Q
"RTN","IBCEF82",226,0)
 ;
"RTN","IBCEF82",227,0)
A01111     ; Case 16 - This case can never happen!
"RTN","IBCEF82",228,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",229,0)
 Q
"RTN","IBCEF82",230,0)
 ;
"RTN","IBCEF82",231,0)
A10000    ; Case 17
"RTN","IBCEF82",232,0)
 ; TESTS:                            Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF82",233,0)
 ;                         All procedures have a line level provider: 0=NO
"RTN","IBCEF82",234,0)
 ;                       One Line Level provider is most significant: 0=NO
"RTN","IBCEF82",235,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF82",236,0)
 ;         There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF82",237,0)
 ;
"RTN","IBCEF82",238,0)
 ; ACTIONS: Take no Action, use claim level provider.
"RTN","IBCEF82",239,0)
 ;
"RTN","IBCEF82",240,0)
 Q
"RTN","IBCEF82",241,0)
 ;
"RTN","IBCEF82",242,0)
A10001    ; Case 18
"RTN","IBCEF82",243,0)
 ; TESTS:                            Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF82",244,0)
 ;                         All procedures have a line level provider: 0=NO
"RTN","IBCEF82",245,0)
 ;                       One Line Level provider is most significant: 0=NO
"RTN","IBCEF82",246,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF82",247,0)
 ;         There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF82",248,0)
 ;
"RTN","IBCEF82",249,0)
 ; ACTIONS: 1.  Move the Claim Level Provider to the Line Level.
"RTN","IBCEF82",250,0)
 ;          2.  Use the first line level provider for the claim level.
"RTN","IBCEF82",251,0)
 ;
"RTN","IBCEF82",252,0)
 ; Don't perform this action for a single line claim.
"RTN","IBCEF82",253,0)
 I $G(INPUT("SLC"))=1 Q
"RTN","IBCEF82",254,0)
 ;
"RTN","IBCEF82",255,0)
 ; Determine Line with Missing Provider.
"RTN","IBCEF82",256,0)
 N SLC
"RTN","IBCEF82",257,0)
 S SLC=0 F  S SLC=$O(^DGCR(399,IBIEN,"RC",SLC)) Q:+SLC=0  D
"RTN","IBCEF82",258,0)
 . I $D(INPUT("L-PROV",IBIEN,SLC))=0 D
"RTN","IBCEF82",259,0)
 .. ; Move claim level provider to the lines without a provider.
"RTN","IBCEF82",260,0)
 .. M OUTPUT("L-PROV",IBIEN,SLC)=PROVINFO("PROVINF",IBIEN)
"RTN","IBCEF82",261,0)
 ;
"RTN","IBCEF82",262,0)
 ; Move the first line level provider to the claim level.
"RTN","IBCEF82",263,0)
 S SLC=1
"RTN","IBCEF82",264,0)
 I $D(CMODE(INSLEVEL))'=1 Q
"RTN","IBCEF82",265,0)
 I $D(CPRNUM(INSLEVEL))'=1 Q
"RTN","IBCEF82",266,0)
 I $D(OUTPUT("L-PROV",IBIEN,SLC,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)) D
"RTN","IBCEF82",267,0)
 . K OUTPUT("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)
"RTN","IBCEF82",268,0)
 . M OUTPUT("PROVINF",IBIEN,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)=OUTPUT("L-PROV",IBIEN,SLC,CMODE(INSLEVEL),CPRNUM(INSLEVEL),PRTYPE)
"RTN","IBCEF82",269,0)
 ;
"RTN","IBCEF82",270,0)
 Q
"RTN","IBCEF82",271,0)
 ;
"RTN","IBCEF82",272,0)
A10010     ; Case 19
"RTN","IBCEF82",273,0)
 ; TESTS:                            Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF82",274,0)
 ;                         All procedures have a line level provider: 0=NO
"RTN","IBCEF82",275,0)
 ;                       One Line Level provider is most significant: 0=NO
"RTN","IBCEF82",276,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF82",277,0)
 ;         There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF82",278,0)
 ;
"RTN","IBCEF82",279,0)
 ; ACTIONS: Take no Action, use claim level provider.
"RTN","IBCEF82",280,0)
 ;
"RTN","IBCEF82",281,0)
 Q
"RTN","IBCEF82",282,0)
 ;
"RTN","IBCEF82",283,0)
A10011     ; Case 20
"RTN","IBCEF82",284,0)
 ; TESTS:                            Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF82",285,0)
 ;                         All procedures have a line level provider: 0=NO
"RTN","IBCEF82",286,0)
 ;                       One Line Level provider is most significant: 0=NO
"RTN","IBCEF82",287,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF82",288,0)
 ;         There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF82",289,0)
 ;
"RTN","IBCEF82",290,0)
 ; ACTIONS: Take no Action, use claim level provider.
"RTN","IBCEF82",291,0)
 ;
"RTN","IBCEF82",292,0)
 Q
"RTN","IBCEF82",293,0)
 ;
"RTN","IBCEF82",294,0)
A10100     ; Case 21
"RTN","IBCEF82",295,0)
 ; TESTS:                            Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF82",296,0)
 ;                         All procedures have a line level provider: 0=NO
"RTN","IBCEF82",297,0)
 ;                       One Line Level provider is most significant: 1=YES
"RTN","IBCEF82",298,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF82",299,0)
 ;         There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF82",300,0)
 ;
"RTN","IBCEF82",301,0)
 ; ACTIONS: Take no Action, use claim level provider.
"RTN","IBCEF82",302,0)
 ;
"RTN","IBCEF82",303,0)
 Q
"RTN","IBCEF82",304,0)
 ;
"RTN","IBCEF82",305,0)
A10101     ; Case 22
"RTN","IBCEF82",306,0)
 ; TESTS:                            Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF82",307,0)
 ;                         All procedures have a line level provider: 0=NO
"RTN","IBCEF82",308,0)
 ;                       One Line Level provider is most significant: 1=YES
"RTN","IBCEF82",309,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF82",310,0)
 ;         There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF82",311,0)
 ;
"RTN","IBCEF82",312,0)
 ; ACTIONS: Take no Action, use claim level provider.
"RTN","IBCEF82",313,0)
 ;
"RTN","IBCEF82",314,0)
 Q
"RTN","IBCEF82",315,0)
 ;
"RTN","IBCEF82",316,0)
A10110     ; Case 23
"RTN","IBCEF82",317,0)
 ; TESTS:                            Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF82",318,0)
 ;                         All procedures have a line level provider: 0=NO
"RTN","IBCEF82",319,0)
 ;                       One Line Level provider is most significant: 1=YES
"RTN","IBCEF82",320,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF82",321,0)
 ;         There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF82",322,0)
 ;
"RTN","IBCEF82",323,0)
 ; ACTIONS: Take no Action, use claim level provider.
"RTN","IBCEF82",324,0)
 ;
"RTN","IBCEF82",325,0)
 Q
"RTN","IBCEF82",326,0)
 ;
"RTN","IBCEF82",327,0)
A10111     ; Case 24
"RTN","IBCEF82",328,0)
 ; TESTS:                            Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF82",329,0)
 ;                         All procedures have a line level provider: 0=NO
"RTN","IBCEF82",330,0)
 ;                       One Line Level provider is most significant: 1=YES
"RTN","IBCEF82",331,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF82",332,0)
 ;         There is only one procedure without a line level provider: 1=YES
"RTN","IBCEF82",333,0)
 ;
"RTN","IBCEF82",334,0)
 ; ACTIONS: Take no Action, use claim level provider.
"RTN","IBCEF82",335,0)
 ;
"RTN","IBCEF82",336,0)
 Q
"RTN","IBCEF82",337,0)
 ;
"RTN","IBCEF82",338,0)
A11000     ; Case 25
"RTN","IBCEF82",339,0)
 ; TESTS:                            Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF82",340,0)
 ;                         All procedures have a line level provider: 1=YES
"RTN","IBCEF82",341,0)
 ;                       One Line Level provider is most significant: 0=NO
"RTN","IBCEF82",342,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF82",343,0)
 ;         There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF82",344,0)
 ;
"RTN","IBCEF82",345,0)
 ; ACTIONS: Error in Billing
"RTN","IBCEF82",346,0)
 ;
"RTN","IBCEF82",347,0)
 Q
"RTN","IBCEF82",348,0)
 ;
"RTN","IBCEF82",349,0)
A11001     ; Case 26 - This case can never happen!
"RTN","IBCEF82",350,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",351,0)
 Q
"RTN","IBCEF82",352,0)
 ;
"RTN","IBCEF82",353,0)
A11010     ; Case 27
"RTN","IBCEF82",354,0)
 ; TESTS:                            Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF82",355,0)
 ;                         All procedures have a line level provider: 1=YES
"RTN","IBCEF82",356,0)
 ;                       One Line Level provider is most significant: 0=NO
"RTN","IBCEF82",357,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF82",358,0)
 ;         There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF82",359,0)
 ;
"RTN","IBCEF82",360,0)
 ; ACTIONS: Take no Action, use claim level provider.
"RTN","IBCEF82",361,0)
 ;
"RTN","IBCEF82",362,0)
 Q
"RTN","IBCEF82",363,0)
 ;
"RTN","IBCEF82",364,0)
A11011     ; Case 28 - This case can never happen!
"RTN","IBCEF82",365,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",366,0)
 Q
"RTN","IBCEF82",367,0)
 ;
"RTN","IBCEF82",368,0)
A11100     ; Case 29
"RTN","IBCEF82",369,0)
 ; TESTS:                            Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF82",370,0)
 ;                         All procedures have a line level provider: 1=YES
"RTN","IBCEF82",371,0)
 ;                       One Line Level provider is most significant: 1=YES
"RTN","IBCEF82",372,0)
 ; At least one line level provider matches the claim level provider: 0=NO
"RTN","IBCEF82",373,0)
 ;         There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF82",374,0)
 ;
"RTN","IBCEF82",375,0)
 ; ACTIONS: Error in Billing
"RTN","IBCEF82",376,0)
 ;
"RTN","IBCEF82",377,0)
 Q
"RTN","IBCEF82",378,0)
 ;
"RTN","IBCEF82",379,0)
A11101     ; Case 30 - This case can never happen!
"RTN","IBCEF82",380,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",381,0)
 Q
"RTN","IBCEF82",382,0)
 ;
"RTN","IBCEF82",383,0)
A11110     ; Case 31
"RTN","IBCEF82",384,0)
 ; TESTS:                            Does Claim Level Provider Exist: 1=YES
"RTN","IBCEF82",385,0)
 ;                         All procedures have a line level provider: 1=YES
"RTN","IBCEF82",386,0)
 ;                       One Line Level provider is most significant: 1=YES
"RTN","IBCEF82",387,0)
 ; At least one line level provider matches the claim level provider: 1=YES
"RTN","IBCEF82",388,0)
 ;         There is only one procedure without a line level provider: 0=NO
"RTN","IBCEF82",389,0)
 ;
"RTN","IBCEF82",390,0)
 ; ACTIONS: Take no Action, use claim level provider.
"RTN","IBCEF82",391,0)
 ;
"RTN","IBCEF82",392,0)
 Q
"RTN","IBCEF82",393,0)
 ;
"RTN","IBCEF82",394,0)
A11111     ; Case 32 - This case can never happen!
"RTN","IBCEF82",395,0)
 ; ACTIONS: N/A - Transmit as is.
"RTN","IBCEF82",396,0)
 Q
"RTN","IBCEF82",397,0)
 ;
"RTN","IBCEF82",398,0)
CINIT1    ; Claim level initiation
"RTN","IBCEF82",399,0)
 S IBIEN=$O(INPUT("L-PROV",0))
"RTN","IBCEF82",400,0)
 I IBIEN="" S IBIEN=$O(INPUT("PROVINF",0))
"RTN","IBCEF82",401,0)
 I IBIEN="" S IBIEN=$O(INPUT("LAB/FAC",0))
"RTN","IBCEF82",402,0)
 Q
"RTN","IBCEF82",403,0)
 ;
"RTN","IBCEF82",404,0)
CINIT2    ; Claim level initiation
"RTN","IBCEF82",405,0)
 N MODEX,PRNUMX,PROVX
"RTN","IBCEF82",406,0)
 F MODEX="C","O" D
"RTN","IBCEF82",407,0)
 . S PRNUMX=0 F  S PRNUMX=$O(INPUT("PROVINF",IBIEN,MODEX,PRNUMX)) Q:+PRNUMX=0  D
"RTN","IBCEF82",408,0)
 .. I $G(INPUT("PROVINF",IBIEN,MODEX,PRNUMX))="" Q
"RTN","IBCEF82",409,0)
 .. I INPUT("PROVINF",IBIEN,MODEX,PRNUMX)=INSLEVEL S CMODE(INSLEVEL)=MODEX,CPRNUM(INSLEVEL)=PRNUMX
"RTN","IBCEF82",410,0)
 Q
"RTN","IBCEF82",411,0)
 ;
"RTN","IBCEF82",412,0)
LINIT1(SLC)    ; Line level initiation
"RTN","IBCEF82",413,0)
 Q $O(INPUT("L-PROV",IBIEN,SLC))
"RTN","IBCEF82",414,0)
 ;
"RTN","IBCEF82",415,0)
LINIT2    ; Line level initiation
"RTN","IBCEF82",416,0)
 N MODEX,PRNUMX,PROVX
"RTN","IBCEF82",417,0)
 F MODEX="C","O" D
"RTN","IBCEF82",418,0)
 . S PRNUMX=0 F  S PRNUMX=$O(INPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX)) Q:+PRNUMX=0  D
"RTN","IBCEF82",419,0)
 .. I INPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX)=INSLEVEL S LMODE(INSLEVEL)=MODEX,LPRNUM(INSLEVEL)=PRNUMX
"RTN","IBCEF82",420,0)
 Q
"RTN","IBCEF82",421,0)
 ;
"RTN","IBCEF82",422,0)
REMOVELN    ; Remove the claim lines associated with the claim level provider.
"RTN","IBCEF82",423,0)
 N MODEX,PRNUMX,PROVX
"RTN","IBCEF82",424,0)
 S SLC=0 F  S SLC=$O(OUTPUT("L-PROV",IBIEN,SLC)) Q:+SLC=0  D
"RTN","IBCEF82",425,0)
 . F MODEX="C","O" D
"RTN","IBCEF82",426,0)
 .. S PRNUMX=0 F  S PRNUMX=$O(OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX)) Q:+PRNUMX=0  D
"RTN","IBCEF82",427,0)
 ... Q:$G(PROVINFO)=""
"RTN","IBCEF82",428,0)
 ... I $G(OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX,PRTYPE))=PROVINFO D
"RTN","IBCEF82",429,0)
 .... K OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX,PRTYPE)
"RTN","IBCEF82",430,0)
 .... I $D(OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX))=1 K OUTPUT("L-PROV",IBIEN,SLC,MODEX,PRNUMX)
"RTN","IBCEF82",431,0)
 .... I $D(OUTPUT("L-PROV",IBIEN,SLC,MODEX))=1 K OUTPUT("L-PROV",IBIEN,SLC,MODEX)
"RTN","IBCEF82",432,0)
 .... I $D(OUTPUT("L-PROV",IBIEN,SLC))=1 K OUTPUT("L-PROV",IBIEN,SLC)
"RTN","IBCEF82",433,0)
 Q
"RTN","IBCEFP")
0^7^B115077680^B100162925
"RTN","IBCEFP",1,0)
IBCEFP ;ALB/TAZ - Provider ID functions ;28-OCT-10
"RTN","IBCEFP",2,0)
 ;;2.0;INTEGRATED BILLING;**432,447,473**;21-MAR-94;Build 29
"RTN","IBCEFP",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEFP",4,0)
 ;
"RTN","IBCEFP",5,0)
 Q
"RTN","IBCEFP",6,0)
 ;
"RTN","IBCEFP",7,0)
ALLIDS(IBIFN,IBXSAVE,IBSTRIP,SEG) ; Return all of the Provider IDS
"RTN","IBCEFP",8,0)
 I '$D(IBSTRIP) S IBSTRIP=0
"RTN","IBCEFP",9,0)
 I '$D(SEG) S SEG=""
"RTN","IBCEFP",10,0)
 N IBXIEN,ARINFO,ARID,ARQ,IBFRMTYP,ARIEN,ARINS,Z0,DAT,I,SORT1,SORT2,SORT3,COB,IBCCOB,IBCARE,IBCURR,IBXDATA,NPI,CUROTH
"RTN","IBCEFP",11,0)
 ;
"RTN","IBCEFP",12,0)
 S IBFRMTYP=$$FT^IBCEF(IBIFN),IBFRMTYP=$S(IBFRMTYP=2:2,IBFRMTYP=3:1,1:0)
"RTN","IBCEFP",13,0)
 S IBCARE=$S($$ISRX^IBCEF1(IBIFN):3,1:0) ;if an Rx refill bill
"RTN","IBCEFP",14,0)
 S:IBCARE=0 IBCARE=$$INPAT^IBCEF(IBIFN,1) S:'IBCARE IBCARE=2 ;1-inp,2-out
"RTN","IBCEFP",15,0)
 S IBCURR=$$COB^IBCEF(IBIFN) ;current bill payer sequence
"RTN","IBCEFP",16,0)
 ;don't create anything if form type not CMS-1500 or UB
"RTN","IBCEFP",17,0)
 I IBFRMTYP,'+$G(IBXSAVE("PROVINF",IBIFN)) D
"RTN","IBCEFP",18,0)
 . N IBZ,CUROTH
"RTN","IBCEFP",19,0)
 . I IBFRMTYP=2 D OUTPT^IBCEF11(IBIFN,0)
"RTN","IBCEFP",20,0)
 . I IBFRMTYP=1 D HOS^IBCEF22(IBIFN)
"RTN","IBCEFP",21,0)
 . ; START IB*2.0*447 BI
"RTN","IBCEFP",22,0)
 . I IBCURR="A" D  Q
"RTN","IBCEFP",23,0)
 .. N IBRESARR
"RTN","IBCEFP",24,0)
 .. S IBLIMIT=5
"RTN","IBCEFP",25,0)
 .. D PROVINF(IBIFN,1,.IBRESARR,1,"C",IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",26,0)
 .. M IBXSAVE=IBRESARR
"RTN","IBCEFP",27,0)
 .. S IBXSAVE("PROVINF",IBIFN)=IBIFN
"RTN","IBCEFP",28,0)
 . ; END IB*2.0*447 BI
"RTN","IBCEFP",29,0)
 . F CUROTH="C","O" D PROVIDER(IBIFN,CUROTH,.IBZ,IBFRMTYP,IBCARE,IBCURR,.IBXDATA) M IBXSAVE=IBZ
"RTN","IBCEFP",30,0)
 . S IBXSAVE("PROVINF",IBIFN)=IBIFN
"RTN","IBCEFP",31,0)
 . Q
"RTN","IBCEFP",32,0)
 ;
"RTN","IBCEFP",33,0)
 D LFIDS^IBCEF76(IBIFN,.IBXSAVE,IBSTRIP,SEG)   ; Get the Lab/Facility IDs
"RTN","IBCEFP",34,0)
 S NPI=$P($$ORGNPI^IBCEF73A(IBIFN),U,1)
"RTN","IBCEFP",35,0)
 F CUROTH="C","O" D
"RTN","IBCEFP",36,0)
 . S IBXSAVE("LAB/FAC",IBIFN,CUROTH,1,0)=$S(NPI]"":"XX",1:"")_U_NPI
"RTN","IBCEFP",37,0)
 ;
"RTN","IBCEFP",38,0)
 S IBFRMTYP=$$FT^IBCEF(IBIFN)
"RTN","IBCEFP",39,0)
 S ARIEN=$S(IBFRMTYP=2:3,1:4)
"RTN","IBCEFP",40,0)
 S IBCCOB=$$COBN^IBCEF(IBIFN)  ; Current Insurance
"RTN","IBCEFP",41,0)
 F COB=1:1:3 D
"RTN","IBCEFP",42,0)
 . S SORT1=$S(COB=IBCCOB:"C",1:"O")
"RTN","IBCEFP",43,0)
 . S SORT2=$S(SORT1="C":1,COB=1:1,COB=2&(IBCCOB=1):1,1:2)
"RTN","IBCEFP",44,0)
 . S ARINFO=$G(IBXSAVE("PROVINF",IBIFN,SORT1,SORT2,ARIEN,1))
"RTN","IBCEFP",45,0)
 . ;
"RTN","IBCEFP",46,0)
 . D BPIDS^IBCEF75(IBIFN,.IBXSAVE,SORT1,SORT2,COB,IBSTRIP,SEG)
"RTN","IBCEFP",47,0)
 ;
"RTN","IBCEFP",48,0)
 D EN^IBCEF81(.IBXSAVE)
"RTN","IBCEFP",49,0)
 ;
"RTN","IBCEFP",50,0)
 I SEG="OPR1" D
"RTN","IBCEFP",51,0)
 . I '$D(IBXSAVE("PROVINF",IBIFN,"C",1,3)) D  G ALLIDSQ
"RTN","IBCEFP",52,0)
 .. N SLC,CRED S SLC=0
"RTN","IBCEFP",53,0)
 .. F  S SLC=$O(IBXSAVE("L-PROV",IBIFN,SLC)) Q:'SLC  D  I $D(IBXSAVE("PROVINF",IBIFN,"C",1,3,"NAME")) Q
"RTN","IBCEFP",54,0)
 ... S CRED=$P($G(IBXSAVE("L-PROV",IBIFN,SLC,"C",1,3,"NAME")),U,4)
"RTN","IBCEFP",55,0)
 ... I CRED]"" S $P(IBXSAVE("PROVINF",IBIFN,"C",1,3,"NAME"),U,4)=CRED
"RTN","IBCEFP",56,0)
 ;
"RTN","IBCEFP",57,0)
 I SEG="LPUR",$$SUB1OK^IBCEP8A(IBIFN),$G(IBXSAVE("SLC")) D  G ALLIDSQ
"RTN","IBCEFP",58,0)
 . N IBCNT,OUT
"RTN","IBCEFP",59,0)
 . ;IB*2.0*473/TAZ - Moved ID lookup into seperate function.
"RTN","IBCEFP",60,0)
 . D PSID(IBIFN,.IBXSAVE,.IDS)
"RTN","IBCEFP",61,0)
 . ;IB*2.0*473/TAZ - END
"RTN","IBCEFP",62,0)
 . S $P(OUT,U,6)=IDS(0)
"RTN","IBCEFP",63,0)
 . S $P(OUT,U,7,8)=IDS(1) ; secondary id (1) ^ secondary id qualifier(1)
"RTN","IBCEFP",64,0)
 . F IBCNT=1:1:IBXSAVE("SLC") S IBXSAVE("SLPRV",IBCNT)=OUT,IBXSAVE("SLPRV",IBCNT,"SLC")=IBCNT
"RTN","IBCEFP",65,0)
 ;
"RTN","IBCEFP",66,0)
 I SEG="LOPE" D SLPRV(IBIFN,.IBXSAVE,2) G ALLIDSQ
"RTN","IBCEFP",67,0)
 I SEG="LOP1" D SLPRV(IBIFN,.IBXSAVE,9) G ALLIDSQ
"RTN","IBCEFP",68,0)
 I SEG="LREN" D SLPRV(IBIFN,.IBXSAVE,3) G ALLIDSQ
"RTN","IBCEFP",69,0)
 I SEG="LSUP" D SLPRV(IBIFN,.IBXSAVE,5) G ALLIDSQ
"RTN","IBCEFP",70,0)
 I SEG="LREF" D SLPRV(IBIFN,.IBXSAVE,1) G ALLIDSQ
"RTN","IBCEFP",71,0)
 ;
"RTN","IBCEFP",72,0)
ALLIDSQ ;
"RTN","IBCEFP",73,0)
 Q
"RTN","IBCEFP",74,0)
 ;
"RTN","IBCEFP",75,0)
PSID(IBIFN,IBXPROV,IBXIDS) ; Build array of either the Fac/Lab ID or Rendering Provider IDs
"RTN","IBCEFP",76,0)
 ;IB*2.0*473/TAZ - Created a function to standardize IDs in LDAT and LPUR
"RTN","IBCEFP",77,0)
 ; Input:
"RTN","IBCEFP",78,0)
 ;   IBXIEN - Internal Entry Number of claim
"RTN","IBCEFP",79,0)
 ;   IBXPROV - Provider Array
"RTN","IBCEFP",80,0)
 ;   IBXIDS - Array for IDs
"RTN","IBCEFP",81,0)
 ; Output:
"RTN","IBCEFP",82,0)
 ;   IBXIDS(0) - Primary ID
"RTN","IBCEFP",83,0)
 ;   IBXIDS(1) - Secondary ID
"RTN","IBCEFP",84,0)
 ;
"RTN","IBCEFP",85,0)
 N LINE,PLINE,PID,SID,SIDQ
"RTN","IBCEFP",86,0)
 K IBXIDS
"RTN","IBCEFP",87,0)
 ; Get Lab/Facility IDs
"RTN","IBCEFP",88,0)
 S (PID,SID,SIDQ)=""
"RTN","IBCEFP",89,0)
 S PID=$P($G(IBXPROV("LAB/FAC",IBIFN,"C",1,0)),U,2)
"RTN","IBCEFP",90,0)
 F LINE=1:1 Q:'$D(IBXPROV("LAB/FAC",IBIFN,"C",1,LINE))  D  I SID'="" Q
"RTN","IBCEFP",91,0)
 . S SIDQ=$P($G(IBXPROV("LAB/FAC",IBIFN,"C",1,LINE)),U) I ",0B,1G,G2,"'[(","_SIDQ_",") S SIDQ="" Q
"RTN","IBCEFP",92,0)
 . S SID=$P($G(IBXPROV("LAB/FAC",IBIFN,"C",1,LINE)),U,2)
"RTN","IBCEFP",93,0)
 I $L(PID)!$L(SID) S IBXIDS(0)=PID,IBXIDS(1)=SID_U_SIDQ G PSIDQ
"RTN","IBCEFP",94,0)
 ; Get Claim Level Rendering Provider IDs
"RTN","IBCEFP",95,0)
 S PID=$P($G(IBXPROV("PROVINF",IBIFN,"C",1,3,0)),U,4)  ; Get claim level Rendering Provider NPI
"RTN","IBCEFP",96,0)
 F LINE=1:1 Q:'$D(IBXPROV("PROVINF",IBIFN,"C",1,3,LINE))  D  I SID'="" Q
"RTN","IBCEFP",97,0)
 . S SIDQ=$P($G(IBXPROV("PROVINF",IBIFN,"C",1,3,LINE)),U,3) I ",0B,1G,G2,"'[(","_SIDQ_",") S SIDQ="" Q
"RTN","IBCEFP",98,0)
 . S SID=$P($G(IBXPROV("PROVINF",IBIFN,"C",1,3,LINE)),U,4)
"RTN","IBCEFP",99,0)
 I $L(PID)!$L(SID) S IBXIDS(0)=PID,IBXIDS(1)=SID_U_SIDQ G PSIDQ
"RTN","IBCEFP",100,0)
 ; Get Line Level Rendering Provider IDs
"RTN","IBCEFP",101,0)
 F PLINE=1:1 Q:'$D(IBXPROV("L-PROV",IBIFN,PLINE))  D  I $L(PID)!$L(SID) Q
"RTN","IBCEFP",102,0)
 . S PID=$P($G(IBXPROV("L-PROV",IBIFN,PLINE,"C",1,3,0)),U,4)
"RTN","IBCEFP",103,0)
 . F LINE=1:1 Q:'$D(IBXPROV("L-PROV",IBIFN,PLINE,"C",1,3,LINE))  D  I SID'="" Q
"RTN","IBCEFP",104,0)
 .. S SIDQ=$P($G(IBXPROV("L-PROV",IBIFN,PLINE,"C",1,3,LINE)),U,3) I ",0B,1G,G2,"'[(","_SIDQ_",") S SIDQ="" Q
"RTN","IBCEFP",105,0)
 .. S SID=$P($G(IBXPROV("L-PROV",IBIFN,PLINE,"C",1,3,LINE)),U,4)
"RTN","IBCEFP",106,0)
 I $L(PID)!$L(SID) S IBXIDS(0)=PID,IBXIDS(1)=SID_U_SIDQ
"RTN","IBCEFP",107,0)
PSIDQ ;
"RTN","IBCEFP",108,0)
 Q
"RTN","IBCEFP",109,0)
 ;
"RTN","IBCEFP",110,0)
SLPRV(IBXIEN,IBX,PRTYPE) ;Build SLPRV nodes for the line provider type record
"RTN","IBCEFP",111,0)
 N SLC,DATA,IBCNT,NAME,OUT
"RTN","IBCEFP",112,0)
 S (SLC,IBCNT)=0
"RTN","IBCEFP",113,0)
 F  S SLC=$O(IBX("L-PROV",IBXIEN,SLC)) Q:'SLC  D
"RTN","IBCEFP",114,0)
 . I '$D(IBX("L-PROV",IBXIEN,SLC,"C",1,PRTYPE)) Q
"RTN","IBCEFP",115,0)
 . S NAME=$G(IBX("L-PROV",IBXIEN,SLC,"C",1,PRTYPE,"NAME"))
"RTN","IBCEFP",116,0)
 . S OUT=$P(NAME,U,1,3)_U_$P(NAME,U,5)_U_$G(IBX("L-PROV",IBXIEN,SLC,"C",1,PRTYPE,"TAXONOMY"))_U_$P($G(IBX("L-PROV",IBXIEN,SLC,"C",1,PRTYPE,0)),U,4)
"RTN","IBCEFP",117,0)
 . F IBN=1:1 Q:'$D(IBX("L-PROV",IBXIEN,SLC,"C",1,PRTYPE,IBN))  D
"RTN","IBCEFP",118,0)
 .. S DATA=$G(IBX("L-PROV",IBXIEN,SLC,"C",1,PRTYPE,IBN))
"RTN","IBCEFP",119,0)
 .. I ",0B,1G,G2,LU,"[(","_$P(DATA,U,3)_",") S OUT=OUT_U_$P(DATA,U,4)_U_$P(DATA,U,3)
"RTN","IBCEFP",120,0)
 . S IBCNT=IBCNT+1
"RTN","IBCEFP",121,0)
 . S IBX("SLPRV",IBCNT)=OUT
"RTN","IBCEFP",122,0)
 . S IBX("SLPRV",IBCNT,"SLC")=SLC
"RTN","IBCEFP",123,0)
SLPRVQ ;
"RTN","IBCEFP",124,0)
 Q
"RTN","IBCEFP",125,0)
 ;
"RTN","IBCEFP",126,0)
 ;PROVIDER
"RTN","IBCEFP",127,0)
 ;Input:
"RTN","IBCEFP",128,0)
 ; IB399 - ien of #399
"RTN","IBCEFP",129,0)
 ; IBPROV:
"RTN","IBCEFP",130,0)
 ;   "C"- to get info for CURRENT provider
"RTN","IBCEFP",131,0)
 ;   "O"- to get info for all others (in this case the array will contain info fot two providers
"RTN","IBCEFP",132,0)
 ; IBRES - array for results (by reference)
"RTN","IBCEFP",133,0)
 ; IBFRMTYP - Form Type
"RTN","IBCEFP",134,0)
 ; IBCARE - Care Type
"RTN","IBCEFP",135,0)
 ; IBCURR - current bill payer sequence
"RTN","IBCEFP",136,0)
 ;
"RTN","IBCEFP",137,0)
 ;Output:
"RTN","IBCEFP",138,0)
 ; IBRES - array to get back info (by reference)
"RTN","IBCEFP",139,0)
 ; IBRES(IBPROV,PRNUM,PRTYPE,SEQ#)=PROV^INSUR^IDTYPE^ID^FORMTYP^CARETYP
"RTN","IBCEFP",140,0)
 ; where:
"RTN","IBCEFP",141,0)
 ; IBPROV - see input parameter
"RTN","IBCEFP",142,0)
 ; PRNUM: 1=primary insurance provider, 2= secondary, 3 -tretiary
"RTN","IBCEFP",143,0)
 ; PRTYPE: Provider type(FUNCTION) 
"RTN","IBCEFP",144,0)
 ; SEQ# : sequence number (1st is used for ID1, 2nd - for ID2, etc)
"RTN","IBCEFP",145,0)
 ; PROV : provider/VARIABLEPTR
"RTN","IBCEFP",146,0)
 ; INSUR: Insurance PTR #36 or NONE
"RTN","IBCEFP",147,0)
 ; IDTYPE: ID type
"RTN","IBCEFP",148,0)
 ; ID: ID 
"RTN","IBCEFP",149,0)
 ; FORMTYP: Form type 1=UB,2=1500
"RTN","IBCEFP",150,0)
 ; CARETYP: Care type 0=both inp/outp,1=inpatient, 2=outpatient
"RTN","IBCEFP",151,0)
PROVIDER(IB399,IBPROV,IBRES,IBFRMTYP,IBCARE,IBCURR,IBXDATA) ;
"RTN","IBCEFP",152,0)
 N IBZ,IBRESARR,IBLIMIT
"RTN","IBCEFP",153,0)
 S IBRESARR=""
"RTN","IBCEFP",154,0)
 Q:IBCURR="A"  ;PATIENT's bill IB*2.0*447 BI Changes IBPROV to IBCURR
"RTN","IBCEFP",155,0)
 I IBPROV="C" D
"RTN","IBCEFP",156,0)
 . S IBLIMIT=5
"RTN","IBCEFP",157,0)
 . D:$$ISINSUR^IBCEF71(IBCURR,IB399) PROVINF(IB399,$S(IBCURR="T":3,IBCURR="S":2,IBCURR="P":1,1:1),.IBRESARR,1,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",158,0)
 I IBPROV="O" D
"RTN","IBCEFP",159,0)
 . S IBLIMIT=3
"RTN","IBCEFP",160,0)
 . I IBCURR="P" D
"RTN","IBCEFP",161,0)
 .. D:$$ISINSUR^IBCEF71("S",IB399) PROVINF(IB399,2,.IBRESARR,1,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",162,0)
 .. D:$$ISINSUR^IBCEF71("T",IB399) PROVINF(IB399,3,.IBRESARR,2,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",163,0)
 . I IBCURR="S" D
"RTN","IBCEFP",164,0)
 .. D:$$ISINSUR^IBCEF71("P",IB399) PROVINF(IB399,1,.IBRESARR,1,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",165,0)
 .. D:$$ISINSUR^IBCEF71("T",IB399) PROVINF(IB399,3,.IBRESARR,2,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",166,0)
 . I IBCURR="T" D
"RTN","IBCEFP",167,0)
 .. D:$$ISINSUR^IBCEF71("P",IB399) PROVINF(IB399,1,.IBRESARR,1,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",168,0)
 .. D:$$ISINSUR^IBCEF71("S",IB399) PROVINF(IB399,2,.IBRESARR,2,IBPROV,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,.IBXDATA)
"RTN","IBCEFP",169,0)
 M IBRES=IBRESARR
"RTN","IBCEFP",170,0)
 Q
"RTN","IBCEFP",171,0)
 ;
"RTN","IBCEFP",172,0)
 ;-- PROVINF --
"RTN","IBCEFP",173,0)
 ;Create array with prov info
"RTN","IBCEFP",174,0)
 ;Input:
"RTN","IBCEFP",175,0)
 ; IB399 - ien #399
"RTN","IBCEFP",176,0)
 ; IBPRNUM - 1=prim ins, 2= sec, 3 -tert
"RTN","IBCEFP",177,0)
 ; IBRES - for results
"RTN","IBCEFP",178,0)
 ; IBSORT - to sort OTHER INSURANCE data 
"RTN","IBCEFP",179,0)
 ;  if PROVINF is called for "C" mode of PROVIDER subroutine then 
"RTN","IBCEFP",180,0)
 ;    IBSORT can be any (say 1)
"RTN","IBCEFP",181,0)
 ;  if PROVINF is called for "O" mode then can be more than set of data
"RTN","IBCEFP",182,0)
 ;    - need to sort array to use it (like IBXDATA(1) and IBXDATA(2))
"RTN","IBCEFP",183,0)
 ;    for mode "O" it should be 1 or 2 (see PROVIDER section)
"RTN","IBCEFP",184,0)
 ;IBINSTP -  "C" -current ins, "O"-other
"RTN","IBCEFP",185,0)
 ;IBFRMTYP - Form Type
"RTN","IBCEFP",186,0)
 ;IBCARE - Care Type
"RTN","IBCEFP",187,0)
 ;IBLIMIT - Limits on Secondary
"RTN","IBCEFP",188,0)
 ;IBCURR - Current Insurance
"RTN","IBCEFP",189,0)
 ;IBXDAYA - Revenue Code Array
"RTN","IBCEFP",190,0)
 ;Output:
"RTN","IBCEFP",191,0)
 ; IBRES(PRNUM,PRTYPE,SEQ#)=PROV^INSUR^IDTYPE^ID^FORMTYP^CARETYP
"RTN","IBCEFP",192,0)
 ; where:(see PROVIDER)
"RTN","IBCEFP",193,0)
PROVINF(IB399,IBPRNUM,IBRES,IBSORT,IBINSTP,IBFRMTYP,IBCARE,IBLIMIT,IBCURR,IBXDATA) ;
"RTN","IBCEFP",194,0)
 I $G(IB399)="" G PROVINFQ
"RTN","IBCEFP",195,0)
 I $G(IBINSTP)="" G PROVINFQ
"RTN","IBCEFP",196,0)
 I +$G(IBSORT)=0 S IBSORT=$G(IBPRNUM)
"RTN","IBCEFP",197,0)
 N IBPRTYP,IBINSCO,IBPROV,IB35591,IBN,IBEXC
"RTN","IBCEFP",198,0)
 S IBN=0
"RTN","IBCEFP",199,0)
 S IBINSCO=+$P($G(^DGCR(399,IB399,"M")),"^",IBPRNUM)
"RTN","IBCEFP",200,0)
 S IB35591=$$CH35591^IBCEF72(IBINSCO,IBFRMTYP,IBCARE)
"RTN","IBCEFP",201,0)
 S IBPRTYP=0
"RTN","IBCEFP",202,0)
 F  S IBPRTYP=$O(^DGCR(399,IB399,"PRV","B",IBPRTYP)) Q:'IBPRTYP  D
"RTN","IBCEFP",203,0)
 . N Z,IB355OV,IBPROV,IBARR
"RTN","IBCEFP",204,0)
 . S IBPROV=$$PROVPTR(IB399,IBPRTYP,0),IBEXC=""
"RTN","IBCEFP",205,0)
 . Q:+IBPROV=0
"RTN","IBCEFP",206,0)
 . S Z=$O(^DGCR(399,IB399,"PRV","B",IBPRTYP,0)) I Z S Z=$G(^DGCR(399,IB399,"PRV",Z,0))
"RTN","IBCEFP",207,0)
 . D GETPRV(IBINSCO,IBFRMTYP,IBCARE,IBPROV,.IBARR,IBPRTYP,IBINSTP,Z)
"RTN","IBCEFP",208,0)
 . M IBRES("PROVINF",IB399,IBINSTP)=IBARR
"RTN","IBCEFP",209,0)
 I $D(IBRES("PROVINF",IB399,IBINSTP,IBSORT))>1 S IBRES("PROVINF",IB399,IBINSTP,IBSORT)=$S(IBPRNUM=3:"T",IBPRNUM=2:"S",1:"P")
"RTN","IBCEFP",210,0)
 N SLC,CPLNK
"RTN","IBCEFP",211,0)
 S SLC=0
"RTN","IBCEFP",212,0)
 F  S SLC=$O(IBXDATA(SLC)) Q:'SLC   S IBXSAVE("SLC")=+SLC D
"RTN","IBCEFP",213,0)
 . S CPLNK=$G(IBXDATA(SLC,"CPLNK")) I 'CPLNK Q
"RTN","IBCEFP",214,0)
 . S IBPRTYP=0
"RTN","IBCEFP",215,0)
 . F  S IBPRTYP=$O(^DGCR(399,IB399,"CP",CPLNK,"LNPRV","B",IBPRTYP)) Q:'IBPRTYP  D
"RTN","IBCEFP",216,0)
 .. N Z,IBPROV,IBARR
"RTN","IBCEFP",217,0)
 .. S IBPROV=$$PROVPTR(IB399,IBPRTYP,CPLNK),IBEXC=""
"RTN","IBCEFP",218,0)
 .. Q:'+IBPROV
"RTN","IBCEFP",219,0)
 .. S Z=$O(^DGCR(399,IB399,"CP",CPLNK,"LNPRV","B",IBPRTYP,0)) I Z S Z=$G(^DGCR(399,IB399,"CP",CPLNK,"LNPRV",Z,0))
"RTN","IBCEFP",220,0)
 .. D GETPRV(IBINSCO,IBFRMTYP,IBCARE,IBPROV,.IBARR,IBPRTYP,IBINSTP,Z)
"RTN","IBCEFP",221,0)
 .. M IBRES("L-PROV",IB399,SLC,IBINSTP)=IBARR
"RTN","IBCEFP",222,0)
 . I $D(IBRES("L-PROV",IB399,SLC,IBINSTP,IBSORT))>1 S IBRES("L-PROV",IB399,SLC,IBINSTP,IBSORT)=$S(IBPRNUM=3:"T",IBPRNUM=2:"S",1:"P")
"RTN","IBCEFP",223,0)
 ;
"RTN","IBCEFP",224,0)
PROVINFQ ;Exit PROVINF
"RTN","IBCEFP",225,0)
 Q
"RTN","IBCEFP",226,0)
 ;
"RTN","IBCEFP",227,0)
GETPRV(IBINSCO,IBFRMTYP,IBCARE,IBPROV,IBRES,IBPRTYP,IBINSTP,IBD) ;
"RTN","IBCEFP",228,0)
 I "CO"'[$G(IBINSTP) G GETPRVQ
"RTN","IBCEFP",229,0)
 N IBRETARR,IBNPI,IBN,IBMRAND,IB355OV S IBRETARR=0,IB355OV=""
"RTN","IBCEFP",230,0)
 D PRACT^IBCEF71(IBINSCO,IBFRMTYP,IBCARE,IBPROV,.IBRETARR,IBPRTYP,$G(IBINSTP))
"RTN","IBCEFP",231,0)
 I $P(IBD,U,IBPRNUM+4)'="",$P(IBD,U,IBPRNUM+11)'="" S IB355OV=$P(IBD,U,IBPRNUM+4)_U_$P(IBD,U,IBPRNUM+11)
"RTN","IBCEFP",232,0)
 S IBN=0,IBMRAND=$$MCRONBIL^IBEFUNC(IB399)
"RTN","IBCEFP",233,0)
 ;Calculate MEDICARE (WNR) specific provider qualifier and ID for CMS-1500 secondary claims
"RTN","IBCEFP",234,0)
 I "34"[$G(IBPRTYP),$G(IBFRMTYP)=2,IBMRAND S IB355OV=$$MCR24K^IBCEU3(IB399,IBPROV)_"^12"
"RTN","IBCEFP",235,0)
 I $P(IB355OV,U,2) D
"RTN","IBCEFP",236,0)
 . I $$CHCKSEC^IBCEF73(IBFRMTYP,IBPRTYP,$G(IBINSTP),$P($G(^IBE(355.97,+$P(IB355OV,U,2),0)),U,3)) D
"RTN","IBCEFP",237,0)
 .. S IBEXC=$P(IB355OV,U,2),IBN=IBN+1,IBRES(IBSORT,IBPRTYP,IBN)="OVERRIDE^"_IBINSCO_U_$P($G(^IBE(355.97,+IBEXC,0)),U,3)_U_$P(IB355OV,U)_"^^^^^"_+IBEXC
"RTN","IBCEFP",238,0)
 I IB35591'="",IBEXC'=$P(IB35591,U,3) I $$CHCKSEC^IBCEF73(IBFRMTYP,IBPRTYP,$G(IBINSTP),$P(IB35591,"^")) D
"RTN","IBCEFP",239,0)
 . S IBN=IBN+1,IBRES(IBSORT,IBPRTYP,IBN)="DEFAULT^"_IBINSCO_"^"_IB35591_"^^",$P(IBRES(IBSORT,IBPRTYP,IBN),U,9)=$P(IB35591,U,3)
"RTN","IBCEFP",240,0)
 S IBNPI=$$NPI^IBCEFP1(IBPROV)
"RTN","IBCEFP",241,0)
 D SORT^IBCEF77(IBSORT,IBPRTYP,IB399,.IBRETARR,.IBRES,IBN,IBEXC,IBPRNUM,IBLIMIT)
"RTN","IBCEFP",242,0)
 S IBRES(IBSORT,IBPRTYP,0)="PRIMARY"_U_U_$$STRIP^IBCEF76($S(IBNPI]"":"XX",1:"")_U_IBNPI,1,U,IBSTRIP)
"RTN","IBCEFP",243,0)
 F IBN=1:1 Q:'$D(IBRES(IBSORT,IBPRTYP,IBN))  S $P(IBRES(IBSORT,IBPRTYP,IBN),U,3,4)=$$STRIP^IBCEF76($P(IBRES(IBSORT,IBPRTYP,IBN),U,3,4),1,U,IBSTRIP)
"RTN","IBCEFP",244,0)
 S IBRES(IBSORT,IBPRTYP,"NAME")=$$NAME^IBCEFP1(IBPROV,IBIFN,$P(IBD,U,3),$P(IBD,U,8))
"RTN","IBCEFP",245,0)
 S IBRES(IBSORT,IBPRTYP,"ENTITY TYPE")=$S(IBPROV'["355.93,":1,$P($G(^IBA(355.93,+IBPROV,0)),U,2)=2:1,1:2)
"RTN","IBCEFP",246,0)
 S IBRES(IBSORT,IBPRTYP,"TAXONOMY")=$$TAXON^IBCEFP1(IBPROV,$P(IBD,U,15))
"RTN","IBCEFP",247,0)
 S IBRES(IBSORT,IBPRTYP,"COBID")=$$COBID^IBCEFP1(IB399,IBPRTYP,IBMRAND,IBD)
"RTN","IBCEFP",248,0)
 S IBRES(IBSORT,IBPRTYP)=IBPROV
"RTN","IBCEFP",249,0)
GETPRVQ ;
"RTN","IBCEFP",250,0)
 Q
"RTN","IBCEFP",251,0)
 ;
"RTN","IBCEFP",252,0)
PROVPTR(IBIEN399,IBFUNC,IBCP) ; Retrieve Provider Pointer from appropriate file
"RTN","IBCEFP",253,0)
 N IBN,RSLT
"RTN","IBCEFP",254,0)
 S IBCP=+$G(IBCP)
"RTN","IBCEFP",255,0)
 I 'IBCP D
"RTN","IBCEFP",256,0)
 . S IBN=$O(^DGCR(399,IBIEN399,"PRV","B",IBFUNC,0))
"RTN","IBCEFP",257,0)
 . I +IBN=0 S RSLT=0 Q
"RTN","IBCEFP",258,0)
 . S RSLT=$P($G(^DGCR(399,IBIEN399,"PRV",+IBN,0)),U,2)
"RTN","IBCEFP",259,0)
 I IBCP D
"RTN","IBCEFP",260,0)
 . S IBN=$O(^DGCR(399,IBIEN399,"CP",IBCP,"LNPRV","B",IBFUNC,0))
"RTN","IBCEFP",261,0)
 . I +IBN=0 S RSLT=0 Q
"RTN","IBCEFP",262,0)
 . S RSLT=$P($G(^DGCR(399,IBIEN399,"CP",IBCP,"LNPRV",+IBN,0)),U,2)
"RTN","IBCEFP",263,0)
 Q RSLT
"RTN","IBCEFP",264,0)
 ;
"RTN","IBCEFP",265,0)
 ;Input:
"RTN","IBCEFP",266,0)
 ;IBXIEN - Internal Entry Number for the current bill/claim
"RTN","IBCEFP",267,0)
 ;IBXSAVE - Array for returning the data
"RTN","IBCEFP",268,0)
 ;
"RTN","IBCEFP",269,0)
 ;Output:
"RTN","IBCEFP",270,0)
 ;IBXSAVE - Data Array
"RTN","IBCEFP",271,0)
AMB(IBXIEN,IBXSAVE) ; Gather Ambulance Data for AMB Record(s) - IB*2.0*447/TAZ
"RTN","IBCEFP",272,0)
 N NODE,CODE,CNT,IBXDATA
"RTN","IBCEFP",273,0)
 K IBXSAVE("AMB")
"RTN","IBCEFP",274,0)
 F NODE="U5","U6","U7" S IBXDATA=$G(^DGCR(399,IBXIEN,NODE)) I $TR(IBXDATA,U)'="" S IBXSAVE("AMB",NODE)=IBXDATA
"RTN","IBCEFP",275,0)
 S CODE="",CNT=0
"RTN","IBCEFP",276,0)
 F  S CODE=$O(^DGCR(399,IBXIEN,"U9","B",CODE)) Q:'CODE  D
"RTN","IBCEFP",277,0)
 . S IBXDATA=$P($G(^IBE(353.5,CODE,0)),U,1) I IBXDATA="" Q
"RTN","IBCEFP",278,0)
 . S CNT=CNT+1,IBXSAVE("AMB","U9",CNT)=IBXDATA
"RTN","IBCEFP",279,0)
 Q
"RTN","IBCEFP",280,0)
 ;
"RTN","IBCEFP",281,0)
SNDS2(IBXDATA,PIECE) ;Determine if a SUB2 record is necessary.
"RTN","IBCEFP",282,0)
 ; Input: IBXDATA
"RTN","IBCEFP",283,0)
 ;       May contain data from field 232 of file 399.
"RTN","IBCEFP",284,0)
 ; Output: IBXDATA
"RTN","IBCEFP",285,0)
 ;       Returns Output for piece 2 or 3 or 1 for any other piece (like 1.5)
"RTN","IBCEFP",286,0)
 ;Any time that ONE of the following criteria is met we should send a SUB2 record
"RTN","IBCEFP",287,0)
 ; 1. Incoming IBXDATA is not null SEND - Non-VA facility in field 232 of file 399
"RTN","IBCEFP",288,0)
 ; 2. If the service facility is a VA Institution in file 4 or a non-VA facility in file 355.93 SEND
"RTN","IBCEFP",289,0)
 ; 3. Not a switchback payer $$SENDSF^IBCEF79(IBXIEN)'=0 SEND
"RTN","IBCEFP",290,0)
 ;
"RTN","IBCEFP",291,0)
 I IBXDATA="" D
"RTN","IBCEFP",292,0)
 . N Z,Z1
"RTN","IBCEFP",293,0)
 . S Z=$P($$B^IBCEF79(IBXIEN),U,3)
"RTN","IBCEFP",294,0)
 . S Z1=$$SENDSF^IBCEF79(IBXIEN)
"RTN","IBCEFP",295,0)
 . S IBXDATA=$S(Z="":0,'Z1:0,1:1)
"RTN","IBCEFP",296,0)
 I 'IBXDATA S IBXDATA=""
"RTN","IBCEFP",297,0)
 I IBXDATA'="" S IBXDATA=$S(PIECE=2:77,PIECE=3:2,1:1)
"RTN","IBCEFP",298,0)
 Q IBXDATA
"RTN","IBCEU1")
0^9^B90709480^B59089714
"RTN","IBCEU1",1,0)
IBCEU1 ;ALB/TMP - EDI UTILITIES FOR EOB PROCESSING ;10-FEB-99
"RTN","IBCEU1",2,0)
 ;;2.0;INTEGRATED BILLING;**137,155,296,349,371,432,473**;21-MAR-94;Build 29
"RTN","IBCEU1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCEU1",4,0)
 ;
"RTN","IBCEU1",5,0)
CCOB1(IBIFN,NODE,SEQ) ; Extract Claim level COB data
"RTN","IBCEU1",6,0)
 ; for a bill IBIFN
"RTN","IBCEU1",7,0)
 ; NODE = the file 361.1 node(s) to be returned, separated by commas
"RTN","IBCEU1",8,0)
 ; SEQ = the specific insurance sequence you want returned.  If not =
"RTN","IBCEU1",9,0)
 ;       1, 2, or 3, all are returned
"RTN","IBCEU1",10,0)
 ; Returns IBXDATA(COB,n,node)  where COB = COB insurance sequence,
"RTN","IBCEU1",11,0)
 ;  n is the entry number in file 361.1 and node is the node requested
"RTN","IBCEU1",12,0)
 ;   = the requested node's data
"RTN","IBCEU1",13,0)
 ;
"RTN","IBCEU1",14,0)
 N IB,IBN,IBBILL,IBS,A,B,C,IBCURR,IBMRAF,Z
"RTN","IBCEU1",15,0)
 ;
"RTN","IBCEU1",16,0)
 K IBXDATA
"RTN","IBCEU1",17,0)
 ;
"RTN","IBCEU1",18,0)
 S:$G(NODE)="" NODE=1
"RTN","IBCEU1",19,0)
 S IB=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
"RTN","IBCEU1",20,0)
 S IBCURR=$$COB^IBCEF(IBIFN)
"RTN","IBCEU1",21,0)
 S IBMRAF=$$MCRONBIL^IBEFUNC(IBIFN)
"RTN","IBCEU1",22,0)
 ;
"RTN","IBCEU1",23,0)
 S:"123"'[$G(SEQ) SEQ=""
"RTN","IBCEU1",24,0)
 ;
"RTN","IBCEU1",25,0)
 F B=1:1:3 S IBBILL=$P(IB,U,B) I IBBILL S C=0 F  S C=$O(^IBM(361.1,"B",IBBILL,C)) Q:'C  D
"RTN","IBCEU1",26,0)
 . I '$$EOBELIG(C,IBMRAF,IBCURR) Q      ; eob not eligible for secondary claim
"RTN","IBCEU1",27,0)
 . S IBS=$P($G(^IBM(361.1,C,0)),U,15)   ; insurance sequence
"RTN","IBCEU1",28,0)
 . I $S('$G(SEQ):1,1:SEQ=IBS) D
"RTN","IBCEU1",29,0)
 .. F Z=1:1:$L(NODE,",") D
"RTN","IBCEU1",30,0)
 ... S A=$P(NODE,",",Z)
"RTN","IBCEU1",31,0)
 ... Q:A=""
"RTN","IBCEU1",32,0)
 ... S IBN=$G(^IBM(361.1,C,A))
"RTN","IBCEU1",33,0)
 ... ; Start IB*2.0*473 BI Added to null patient responsibility in OI1
"RTN","IBCEU1",34,0)
 ... ; if the data is contained at the line level to be sent in LCOB.
"RTN","IBCEU1",35,0)
 ... ; Perform the following for only OI1.19 using the dictionary 364.6 IEN.
"RTN","IBCEU1",36,0)
 ... S:+$G(IBX0)=2204&($$LPREXIST(C))&(A=1) $P(IBN,U,2)=""
"RTN","IBCEU1",37,0)
 ... ; End IB*2.0*473
"RTN","IBCEU1",38,0)
 ... I $TR(IBN,U)'="" S IBXDATA(IBS,C,A)=IBN
"RTN","IBCEU1",39,0)
 ;
"RTN","IBCEU1",40,0)
 Q
"RTN","IBCEU1",41,0)
 ;
"RTN","IBCEU1",42,0)
CCAS1(IBIFN,SEQ) ; Extract all MEDICARE COB claim level adjustment data
"RTN","IBCEU1",43,0)
 ; for a bill IBIFN (subfile 361.11 in file 361.1)
"RTN","IBCEU1",44,0)
 ; SEQ = the specific insurance sequence you want returned.  If not =
"RTN","IBCEU1",45,0)
 ;       1, 2, or 3, all are returned
"RTN","IBCEU1",46,0)
 ; Returns IBXDATA(COB,n)  where COB = COB insurance sequence,
"RTN","IBCEU1",47,0)
 ;       n is the entry number in file 361.1 and
"RTN","IBCEU1",48,0)
 ;       = the 0-node of the subfile entry (361.11)
"RTN","IBCEU1",49,0)
 ;    and IBXDATA(COB,n,m) where m is a sequential # and
"RTN","IBCEU1",50,0)
 ;                         = this level's 0-node
"RTN","IBCEU1",51,0)
 N IB,IBA,IBS,IB0,IB00,IBBILL,B,C,D,E
"RTN","IBCEU1",52,0)
 ;
"RTN","IBCEU1",53,0)
 S IB=$P($G(^DGCR(399,IBIFN,"M1")),U,5,7)
"RTN","IBCEU1",54,0)
 S:"123"'[$G(SEQ) SEQ=""
"RTN","IBCEU1",55,0)
 ;
"RTN","IBCEU1",56,0)
 F B=1:1:3 S IBBILL=$P(IB,U,B) I IBBILL S C=0 F  S C=$O(^IBM(361.1,"B",IBBILL,C)) Q:'C  D
"RTN","IBCEU1",57,0)
 . I '$$EOBELIG(C) Q      ; eob not eligible for secondary claim
"RTN","IBCEU1",58,0)
 . S IBS=$P($G(^IBM(361.1,C,0)),U,15)   ; insurance sequence
"RTN","IBCEU1",59,0)
 . I $S('$G(SEQ):1,1:SEQ=IBS) D
"RTN","IBCEU1",60,0)
 .. S (IBA,D)=0 F  S D=$O(^IBM(361.1,C,10,D)) Q:'D  S IB0=$G(^(D,0)) D
"RTN","IBCEU1",61,0)
 ... S IBXDATA(IBS,D)=IB0
"RTN","IBCEU1",62,0)
 ... S (IBA,E)=0
"RTN","IBCEU1",63,0)
 ... F  S E=$O(^IBM(361.1,C,10,D,1,E)) Q:'E  S IB00=$G(^(E,0)) D
"RTN","IBCEU1",64,0)
 .... S IBA=IBA+1
"RTN","IBCEU1",65,0)
 .... I $TR(IB00,U)'="" S IBXDATA(IBS,D,IBA)=IB00
"RTN","IBCEU1",66,0)
 ;
"RTN","IBCEU1",67,0)
 Q
"RTN","IBCEU1",68,0)
 ;
"RTN","IBCEU1",69,0)
SEQ(A) ; Translate sequence # A into corresponding letter representation
"RTN","IBCEU1",70,0)
 S A=$E("PST",A)
"RTN","IBCEU1",71,0)
 I $S(A'="":"PST"'[A,1:1) S A="P"
"RTN","IBCEU1",72,0)
 Q A
"RTN","IBCEU1",73,0)
 ;
"RTN","IBCEU1",74,0)
EOBTOT(IBIFN,IBCOBN) ; Total all EOB's for a bill's COB sequence
"RTN","IBCEU1",75,0)
 ; Function returns the total of all EOB's for a specific COB seq
"RTN","IBCEU1",76,0)
 ; IBIFN = ien of bill in file 399
"RTN","IBCEU1",77,0)
 ; IBCOBN = the # of the COB sequence you want EOB/MRA total for (1-3)
"RTN","IBCEU1",78,0)
 ;
"RTN","IBCEU1",79,0)
 N Z,Z0,IBTOT
"RTN","IBCEU1",80,0)
 S IBTOT=0
"RTN","IBCEU1",81,0)
 I $O(^IBM(361.1,"ABS",IBIFN,IBCOBN,0)) D
"RTN","IBCEU1",82,0)
 . ; Set up prior payment field here from MRA/EOB(s)
"RTN","IBCEU1",83,0)
 . S (IBTOT,Z)=0
"RTN","IBCEU1",84,0)
 . F  S Z=$O(^IBM(361.1,"ABS",IBIFN,IBCOBN,Z)) Q:'Z  D
"RTN","IBCEU1",85,0)
 .. ; HD64841 IB*2*371 - total up the payer paid amounts
"RTN","IBCEU1",86,0)
 .. S IBTOT=IBTOT+$P($G(^IBM(361.1,Z,1)),U,1)
"RTN","IBCEU1",87,0)
 Q IBTOT
"RTN","IBCEU1",88,0)
 ;
"RTN","IBCEU1",89,0)
 ;
"RTN","IBCEU1",90,0)
LCOBOUT(IBXSAVE,IBXDATA,COL) ; Output the line adjustment reasons COB
"RTN","IBCEU1",91,0)
 ;  line # data for an electronic claim
"RTN","IBCEU1",92,0)
 ; IBXSAVE,IBXDATA = arrays holding formatter information for claim -
"RTN","IBCEU1",93,0)
 ;                   pass by reference
"RTN","IBCEU1",94,0)
 ; COL = the column in the 837 flat file being output for LCAS record
"RTN","IBCEU1",95,0)
 N LINE,COBSEQ,RECCT,GRPCD,SEQ,RCCT,RCPC,DATA,RCREC,SEQLINE K IBXDATA
"RTN","IBCEU1",96,0)
 S (LINE,RECCT)=0
"RTN","IBCEU1",97,0)
 S RCPC=(COL#3) S:'RCPC RCPC=3
"RTN","IBCEU1",98,0)
 S RCREC=$S(COL'<4:COL-1\3,1:0)
"RTN","IBCEU1",99,0)
 ;S RCREC=$S(COL'<4:COL+5\6-1,1:0)
"RTN","IBCEU1",100,0)
 F  S LINE=$O(IBXSAVE("LCOB",LINE)) Q:'LINE  D
"RTN","IBCEU1",101,0)
 . S COBSEQ=0
"RTN","IBCEU1",102,0)
 . F  S COBSEQ=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ)) Q:'COBSEQ  S SEQLINE=0 F  S SEQLINE=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE)) Q:'SEQLINE  S GRPCD="" F  S GRPCD=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD)) Q:GRPCD=""  D
"RTN","IBCEU1",103,0)
 .. S RECCT=RECCT+1
"RTN","IBCEU1",104,0)
 .. ;IB*2.0*432/TAZ Added payer sequence in piece 22 of LCAS record (parameter Z)
"RTN","IBCEU1",105,0)
 .. I COL="Z" S IBXDATA(RECCT)=$E("PST",COBSEQ) I RECCT>1 D ID^IBCEF2(RECCT,"LCAS")
"RTN","IBCEU1",106,0)
 .. I COL=2 S IBXDATA(RECCT)=LINE,DATA=LINE D:RECCT>1 ID^IBCEF2(RECCT,"LCAS")
"RTN","IBCEU1",107,0)
 .. I COL=3 S IBXDATA(RECCT)=$TR(GRPCD," ")
"RTN","IBCEU1",108,0)
 .. S (SEQ,RCCT)=0
"RTN","IBCEU1",109,0)
 .. F  S SEQ=$O(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)) Q:'SEQ  I $TR($G(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)),U)'="" D
"RTN","IBCEU1",110,0)
 ... S RCCT=RCCT+1
"RTN","IBCEU1",111,0)
 ... Q:COL'<4&(RCCT'=RCREC)&(RCCT'>6)
"RTN","IBCEU1",112,0)
 ... S DATA=$S(COL=2:LINE,COL=3:$TR(GRPCD," "),1:$P($G(IBXSAVE("LCOB",LINE,"COB",COBSEQ,SEQLINE,GRPCD,SEQ)),U,RCPC))
"RTN","IBCEU1",113,0)
 ... I COL'<4,RCCT=RCREC S:DATA'="" IBXDATA(RECCT)=DATA Q
"RTN","IBCEU1",114,0)
 ... I RCCT>6 S RCCT=1,RECCT=RECCT+1 D:COL=2 ID^IBCEF2(RECCT,"LCAS") I DATA'="",$S(COL'>3:1,1:RCCT=RCREC) S IBXDATA(RECCT)=DATA
"RTN","IBCEU1",115,0)
 Q
"RTN","IBCEU1",116,0)
 ;
"RTN","IBCEU1",117,0)
CCOBOUT(IBXSAVE,IBXDATA,COL) ; Output the claim adjustment reasons COB
"RTN","IBCEU1",118,0)
 ;  data for an electronic claim
"RTN","IBCEU1",119,0)
 ; IBXSAVE,IBXDATA = arrays holding formatter information for claim -
"RTN","IBCEU1",120,0)
 ;                   pass by reference
"RTN","IBCEU1",121,0)
 ; COL = the column in the 837 flat file being output for CCAS record
"RTN","IBCEU1",122,0)
 N COBSEQ,RECCT,GRPSEQ,SEQ,RCPC,RCCT,RCREC,DATA K IBXDATA
"RTN","IBCEU1",123,0)
 S RECCT=0
"RTN","IBCEU1",124,0)
 S RCPC=(COL#3) S:'RCPC RCPC=3
"RTN","IBCEU1",125,0)
 S RCREC=$S(COL'<4:COL+5\6-1,1:0)
"RTN","IBCEU1",126,0)
 S COBSEQ=0
"RTN","IBCEU1",127,0)
 F  S COBSEQ=$O(IBXSAVE("CCAS",COBSEQ)) Q:'COBSEQ  S GRPSEQ="" F  S GRPSEQ=$O(IBXSAVE("CCAS",COBSEQ,GRPSEQ)) Q:GRPSEQ=""  D
"RTN","IBCEU1",128,0)
 . S RECCT=RECCT+1
"RTN","IBCEU1",129,0)
 . I COL=2 S IBXDATA(RECCT)=COBSEQ D:RECCT>1 ID^IBCEF2(RECCT,"CCAS")
"RTN","IBCEU1",130,0)
 . I COL=3 S IBXDATA(RECCT)=$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ)),U)
"RTN","IBCEU1",131,0)
 . S (SEQ,RCCT)=0
"RTN","IBCEU1",132,0)
 . F  S SEQ=$O(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)) Q:'SEQ  I $TR($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)),U)'="" D
"RTN","IBCEU1",133,0)
 .. S RCCT=RCCT+1
"RTN","IBCEU1",134,0)
 .. Q:COL'<4&(RCCT'=RCREC)&(RCCT'>6)
"RTN","IBCEU1",135,0)
 .. S DATA=$S(COL=2:COBSEQ,COL=3:$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ)),U),1:$P($G(IBXSAVE("CCAS",COBSEQ,GRPSEQ,SEQ)),U,RCPC))
"RTN","IBCEU1",136,0)
 .. I COL'<4,RCCT=RCREC S:DATA'="" IBXDATA(RECCT)=DATA Q
"RTN","IBCEU1",137,0)
 .. I RCCT>6 S RCCT=1,RECCT=RECCT+1 D:COL=2 ID^IBCEF2(RECCT,"CCAS") I DATA'="",$S(COL'>3:1,1:RCCT=RCREC) S IBXDATA(RECCT)=DATA
"RTN","IBCEU1",138,0)
 Q
"RTN","IBCEU1",139,0)
 ;
"RTN","IBCEU1",140,0)
COBOUT(IBXSAVE,IBXDATA,CL) ; build LCOB segment data
"RTN","IBCEU1",141,0)
 ; The IBXSAVE array used here is built by INS-2, then LCOB-1.9
"RTN","IBCEU1",142,0)
 ; This is basically the 361.115, but all the piece numbers here in this
"RTN","IBCEU1",143,0)
 ; local array are one higher than the pieces in subfile 361.115.
"RTN","IBCEU1",144,0)
 N Z,M,N,P,PCCL
"RTN","IBCEU1",145,0)
 S (N,Z)=0
"RTN","IBCEU1",146,0)
 F  S Z=$O(IBXSAVE("LCOB",Z)) Q:'Z  D
"RTN","IBCEU1",147,0)
 . S M=0 F  S M=$O(IBXSAVE("LCOB",Z,"COB",M)) Q:'M  D
"RTN","IBCEU1",148,0)
 .. S P=0 F  S P=$O(IBXSAVE("LCOB",Z,"COB",M,P)) Q:'P  D
"RTN","IBCEU1",149,0)
 ... S N=N+1
"RTN","IBCEU1",150,0)
 ... I CL="Z" S IBXDATA(N)=$E("PST",M) Q
"RTN","IBCEU1",151,0)
 ... S PCCL=$P($G(IBXSAVE("LCOB",Z,"COB",M,P)),U,CL)
"RTN","IBCEU1",152,0)
 ... ;IB*2.0*432/TAZ - If the revenue code is blank for the EOB get it from the Primary Level
"RTN","IBCEU1",153,0)
 ... I PCCL="",CL=11 S PCCL=$P($G(IBXSAVE("LCOB",Z)),U)
"RTN","IBCEU1",154,0)
 ... S:PCCL'="" IBXDATA(N)=PCCL
"RTN","IBCEU1",155,0)
 Q
"RTN","IBCEU1",156,0)
 ;
"RTN","IBCEU1",157,0)
 ;IB*2.0*432/TAZ - XCOBOUT is the original code which did not capture all the LCOB records.
"RTN","IBCEU1",158,0)
XCOBOUT(IBXSAVE,IBXDATA,CL) ; build LCOB segment data
"RTN","IBCEU1",159,0)
 ; The IBXSAVE array used here is built by INS-2, then LCOB-1.9
"RTN","IBCEU1",160,0)
 ; This is basically the 361.115, but all the piece numbers here in this
"RTN","IBCEU1",161,0)
 ; local array are one higher than the pieces in subfile 361.115.
"RTN","IBCEU1",162,0)
 N Z,M,N,P,PCCL
"RTN","IBCEU1",163,0)
 S (N,Z,P)=0 F  S Z=$O(IBXSAVE("LCOB",Z)) Q:'Z  D
"RTN","IBCEU1",164,0)
 . S N=N+1
"RTN","IBCEU1",165,0)
 . S M=$O(IBXSAVE("LCOB",Z,"COB",""),-1) Q:'M
"RTN","IBCEU1",166,0)
 . S P=$O(IBXSAVE("LCOB",Z,"COB",M,""),-1) Q:'P
"RTN","IBCEU1",167,0)
 . ;IB*2.0*432/TAZ Added Payer Sequence to piece 18 of the LCOB record
"RTN","IBCEU1",168,0)
 . I CL="Z" S IBXDATA(N)=$E("PST",M) Q
"RTN","IBCEU1",169,0)
 . S PCCL=$P($G(IBXSAVE("LCOB",Z,"COB",M,P)),U,CL)
"RTN","IBCEU1",170,0)
 . S:PCCL'="" IBXDATA(N)=PCCL
"RTN","IBCEU1",171,0)
 . Q
"RTN","IBCEU1",172,0)
 Q
"RTN","IBCEU1",173,0)
 ;
"RTN","IBCEU1",174,0)
COBPYRID(IBXIEN,IBXSAVE,IBXDATA) ; cob insurance company payer id
"RTN","IBCEU1",175,0)
 N CT,N,NUM,Z
"RTN","IBCEU1",176,0)
 K IBXDATA
"RTN","IBCEU1",177,0)
 I '$D(IBXSAVE("LCOB")) G COBPYRX
"RTN","IBCEU1",178,0)
 ;
"RTN","IBCEU1",179,0)
 ;IB*2.0*432/TAZ - Replaced following code with loop to insure that all LCOB records have the Payer ID
"RTN","IBCEU1",180,0)
 ;D ALLPAYID^IBCEF2(IBXIEN,.NUM,1)
"RTN","IBCEU1",181,0)
 ;S NUM=$G(NUM(1))
"RTN","IBCEU1",182,0)
 ;S NUM=$E(NUM_$J("",5),1,5)
"RTN","IBCEU1",183,0)
 ;S (CT,N)=0
"RTN","IBCEU1",184,0)
 ;F  S N=$O(IBXSAVE("LCOB",N)) Q:'N  S CT=CT+1,IBXDATA(CT)=NUM
"RTN","IBCEU1",185,0)
 ;
"RTN","IBCEU1",186,0)
 D ALLPAYID^IBCEF2(IBXIEN,.NUM)
"RTN","IBCEU1",187,0)
 S (CT,N)=0
"RTN","IBCEU1",188,0)
 F  S N=$O(IBXSAVE("LCOB",N)) Q:'N  D
"RTN","IBCEU1",189,0)
 . S Z=0
"RTN","IBCEU1",190,0)
 . F  S Z=$O(IBXSAVE("LCOB",N,"COB",Z)) Q:'Z  D
"RTN","IBCEU1",191,0)
 .. S CT=CT+1,IBXDATA(CT)=$G(NUM(Z))
"RTN","IBCEU1",192,0)
COBPYRX ;
"RTN","IBCEU1",193,0)
 Q
"RTN","IBCEU1",194,0)
 ;
"RTN","IBCEU1",195,0)
EOBELIG(IBEOB,IBMRAF,IBCURR) ; EOB eligibility for secondary claim
"RTN","IBCEU1",196,0)
 ; Function to decide if EOB entry in file 361.1 (ien=IBEOB) is
"RTN","IBCEU1",197,0)
 ; eligible to be included for secondary claim creation process
"RTN","IBCEU1",198,0)
 ; The EOB is not eligible if the review status is not 3, or if there
"RTN","IBCEU1",199,0)
 ; is no insurance sequence indicator, or if the EOB has been DENIED
"RTN","IBCEU1",200,0)
 ; and the patient responsibility for that EOB is $0 and that EOB is
"RTN","IBCEU1",201,0)
 ; not a split EOB.  Split EOB's need to be included (IB*2*371).
"RTN","IBCEU1",202,0)
 ;
"RTN","IBCEU1",203,0)
 ; 432 - added new flag IBMRAF to indicate if we need to check only MRA's or all EOB's
"RTN","IBCEU1",204,0)
 ; IBMRAF = 1 if only need MRA EOB's
"RTN","IBCEU1",205,0)
 ;
"RTN","IBCEU1",206,0)
 NEW ELIG,IBDATA,PTRESP
"RTN","IBCEU1",207,0)
 S ELIG=0
"RTN","IBCEU1",208,0)
 ; IB*2.0*432/TAZ Get current Payer sequence if not passed in.
"RTN","IBCEU1",209,0)
 I '$G(IBCURR) S IBCURR=$$COB^IBCEF(IBIFN)
"RTN","IBCEU1",210,0)
 I '$G(IBEOB) G EOBELIGX
"RTN","IBCEU1",211,0)
 S IBDATA=$G(^IBM(361.1,IBEOB,0))
"RTN","IBCEU1",212,0)
 I $G(IBMRAF)=1,$P(IBDATA,U,4)'=1 G EOBELIGX      ; Only MRA EOB's for now if flag = 1
"RTN","IBCEU1",213,0)
 I $D(^IBM(361.1,IBEOB,"ERR")) G EOBELIGX     ; filing error
"RTN","IBCEU1",214,0)
 I $P(IBDATA,U,16)'=3 G EOBELIGX     ; review status - accepted-complete
"RTN","IBCEU1",215,0)
 I '$P(IBDATA,U,15) G EOBELIGX       ; insurance sequence must exist
"RTN","IBCEU1",216,0)
 ; IB*2.0*432/TAZ Don't send EOB data for current payer
"RTN","IBCEU1",217,0)
 I $P(IBDATA,U,15)=IBCURR G EOBELIGX ; Don't send EOB data for current payer (this is for retransmits)
"RTN","IBCEU1",218,0)
 S PTRESP=$P($G(^IBM(361.1,IBEOB,1)),U,2)     ; Pt Resp Amount for 1500s
"RTN","IBCEU1",219,0)
 I $$FT^IBCEF(+IBDATA)=3 S PTRESP=$$PTRESPI^IBCECOB1(IBEOB)  ; for UBs
"RTN","IBCEU1",220,0)
 I PTRESP'>0,$P(IBDATA,U,13)=2,'$$SPLIT^IBCEMU1(IBEOB) G EOBELIGX     ; Denied & No Pt. Resp. & not a split MRA
"RTN","IBCEU1",221,0)
 ;
"RTN","IBCEU1",222,0)
 S ELIG=1
"RTN","IBCEU1",223,0)
EOBELIGX ;
"RTN","IBCEU1",224,0)
 Q ELIG
"RTN","IBCEU1",225,0)
 ;
"RTN","IBCEU1",226,0)
EOBCNT(IBIFN) ; This function counts up the number of EOBs that are eligible
"RTN","IBCEU1",227,0)
 ; for the secondary claim creation process for a given bill#.
"RTN","IBCEU1",228,0)
 NEW CNT,IEN
"RTN","IBCEU1",229,0)
 S (CNT,IEN)=0
"RTN","IBCEU1",230,0)
 F  S IEN=$O(^IBM(361.1,"B",+$G(IBIFN),IEN)) Q:'IEN  D
"RTN","IBCEU1",231,0)
 . I $$EOBELIG(IEN) S CNT=CNT+1
"RTN","IBCEU1",232,0)
 . Q
"RTN","IBCEU1",233,0)
EOBCNTX ;
"RTN","IBCEU1",234,0)
 Q CNT
"RTN","IBCEU1",235,0)
 ;
"RTN","IBCEU1",236,0)
LPTRESP(IBIFN,IBXSAVE,IBXDATA,CL)  ; Line level patient responsibility.
"RTN","IBCEU1",237,0)
 ; Added with IB*2.0*473 BI
"RTN","IBCEU1",238,0)
 N IBPTZ,IBPTM,IBPTP,IBPTPR,IBPRDATA,IBPTCNT
"RTN","IBCEU1",239,0)
 S:'$D(CL) CL=17
"RTN","IBCEU1",240,0)
 S IBPTCNT=0
"RTN","IBCEU1",241,0)
 S IBPTZ=0 F  S IBPTZ=$O(IBXSAVE("LCOB",IBPTZ)) Q:'IBPTZ  D
"RTN","IBCEU1",242,0)
 . S IBPTM=0 F  S IBPTM=$O(IBXSAVE("LCOB",IBPTZ,"COB",IBPTM)) Q:'IBPTM  D
"RTN","IBCEU1",243,0)
 .. S IBPTP=0 F  S IBPTP=$O(IBXSAVE("LCOB",IBPTZ,"COB",IBPTM,IBPTP)) Q:'IBPTP  D
"RTN","IBCEU1",244,0)
 ... S IBPTCNT=IBPTCNT+1
"RTN","IBCEU1",245,0)
 ... I $$CHKCCOB1(IBIFN,IBPTM) S IBXDATA(IBPTCNT)="" Q
"RTN","IBCEU1",246,0)
 ... I CL=16 S IBXDATA(IBPTCNT)="EAF" Q
"RTN","IBCEU1",247,0)
 ... S IBXDATA(IBPTCNT)=0
"RTN","IBCEU1",248,0)
 ... S IBPTPR=0 F  S IBPTPR=$O(IBXSAVE("LCOB",IBPTZ,"COB",IBPTM,IBPTP,"PR",IBPTPR)) Q:'IBPTPR  D
"RTN","IBCEU1",249,0)
 .... S IBPRDATA=$G(IBXSAVE("LCOB",IBPTZ,"COB",IBPTM,IBPTP,"PR",IBPTPR))
"RTN","IBCEU1",250,0)
 .... I +IBPRDATA S IBXDATA(IBPTCNT)=IBXDATA(IBPTCNT)+$P(IBPRDATA,U,2)
"RTN","IBCEU1",251,0)
 ... S IBXDATA(IBPTCNT)=$$DOLLAR^IBCEFG1(IBXDATA(IBPTCNT))
"RTN","IBCEU1",252,0)
 Q
"RTN","IBCEU1",253,0)
 ;
"RTN","IBCEU1",254,0)
LPREXIST(EOBIEN)  ; Tests to see if Line Level Patient Responsibility Segments exists.
"RTN","IBCEU1",255,0)
 ; Added with IB*2.0*473 BI
"RTN","IBCEU1",256,0)
 N CL,CAS,PR,PRSEQ,PRZ,RESULT
"RTN","IBCEU1",257,0)
 S RESULT=0
"RTN","IBCEU1",258,0)
 Q:'$G(EOBIEN) RESULT
"RTN","IBCEU1",259,0)
 S CL=0 F  S CL=$O(^IBM(361.1,EOBIEN,15,CL)) Q:+CL=0  D
"RTN","IBCEU1",260,0)
 . S CAS=0 F  S CAS=$O(^IBM(361.1,EOBIEN,15,CL,CAS)) Q:+CAS=0  D
"RTN","IBCEU1",261,0)
 .. S PR=$O(^IBM(361.1,EOBIEN,15,CL,CAS,"B","PR",0)) Q:+PR=0
"RTN","IBCEU1",262,0)
 .. S PRSEQ=0 F  S PRSEQ=$O(^IBM(361.1,EOBIEN,15,CL,CAS,PR,1,PRSEQ)) Q:+PRSEQ=0  D
"RTN","IBCEU1",263,0)
 ... S PRZ=$G(^IBM(361.1,EOBIEN,15,CL,CAS,PR,1,PRSEQ,0)) Q:'+PRZ
"RTN","IBCEU1",264,0)
 ... S RESULT=1
"RTN","IBCEU1",265,0)
 Q RESULT
"RTN","IBCEU1",266,0)
 ;
"RTN","IBCEU1",267,0)
CHKCCOB1(IBIFN,IBS)  ; Test to see if Patient Responsibility pieces should be included
"RTN","IBCEU1",268,0)
 ; Added with IB*2.0*473 BI
"RTN","IBCEU1",269,0)
 N RESULTS,IBXDATA,EOBIEN
"RTN","IBCEU1",270,0)
 S RESULTS=1
"RTN","IBCEU1",271,0)
 ; INPUTS:  IBIFN - BILL/CLAIM INTERNAL NUMBER
"RTN","IBCEU1",272,0)
 ;          IBS   - INSURANCE SEQUENCE NUMBER
"RTN","IBCEU1",273,0)
 ; RETURNS: 0     - IF LCOB RECORDS ARE TO BE INCLUDED
"RTN","IBCEU1",274,0)
 ;          1     - IF LCOB RECORDS SHOULD NOT BE INCLUDED
"RTN","IBCEU1",275,0)
 D CCOB1(IBIFN,0,IBS)
"RTN","IBCEU1",276,0)
 S EOBIEN=$O(IBXDATA(IBS,0))
"RTN","IBCEU1",277,0)
 S RESULT='$$LPREXIST(EOBIEN)
"RTN","IBCEU1",278,0)
 Q RESULT
"RTN","IBCSC11")
0^12^B7658686^B7658686
"RTN","IBCSC11",1,0)
IBCSC11 ;ALB/MJB - MCCR SCREEN 11 (LOCAL SCREEN 11 SPECIFIC INFO) ;27 MAY 99 10:20
"RTN","IBCSC11",2,0)
 ;;2.0;INTEGRATED BILLING;**447,473**;21-MAR-94;Build 29
"RTN","IBCSC11",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBCSC11",4,0)
 ;
"RTN","IBCSC11",5,0)
 ; Copied from IBCSC9 to place LOCAL SCREEN last in the screen sequence. IB*2.0*447 BI
"RTN","IBCSC11",6,0)
 ;
"RTN","IBCSC11",7,0)
EN N IBCOB,IBSCRN,IBANY,IBXERR
"RTN","IBCSC11",8,0)
 S IBCOB=$$COBN^IBCEF(IBIFN),IBANY=1
"RTN","IBCSC11",9,0)
 S IBSCRN=$$LOCSCRN(IBIFN) ;Find screen from file 353
"RTN","IBCSC11",10,0)
 I IBSCRN="" S IBANY="No local screen has been defined for this form type"
"RTN","IBCSC11",11,0)
 I '$D(^DGCR(399,IBIFN,"I"_IBCOB)),'$P($G(^DGCR(399,IBIFN,"M")),U,11) S IBANY="Bill must have insurance co or resp institution to use this screen"
"RTN","IBCSC11",12,0)
 D ^IBCSCU S IBSR=11,IBSR1=""
"RTN","IBCSC11",13,0)
 D H^IBCSCU
"RTN","IBCSC11",14,0)
 N IBWW,Z,IBPARMS
"RTN","IBCSC11",15,0)
 ;Call formatter to extract data for screen here ... read thru the array
"RTN","IBCSC11",16,0)
 ; ^TMP("IBXDATA",$J,1,PG,LINE,COL)=DATA to 'display' the data fields
"RTN","IBCSC11",17,0)
 S IBPARMS(1)="BILL-SEARCH",IBPARMS(3)=$S($$INPAT^IBCEF(IBIFN):"I",1:"O"),IBPARMS(2)=$P($G(^DGCR(399,IBIFN,"I"_IBCOB)),U)
"RTN","IBCSC11",18,0)
 S IBWW=""
"RTN","IBCSC11",19,0)
 K ^TMP("IBXDATA",$J),^TMP("IBXEDIT",$J),IBXERR
"RTN","IBCSC11",20,0)
 D FPRE^IBCEFG7(+IBSCRN,0,.IBXERR) ;Form pre-processor
"RTN","IBCSC11",21,0)
 I $D(IBXERR) S IBANY=IBXERR
"RTN","IBCSC11",22,0)
 I IBANY D
"RTN","IBCSC11",23,0)
 .N VADM
"RTN","IBCSC11",24,0)
 .S IBANY=$$EXTRACT^IBCEFG(IBSCRN,IBIFN,1,.IBPARMS) S:'IBANY IBANY="No local data fields are needed for this bill type/insurance company"
"RTN","IBCSC11",25,0)
 I IBANY D
"RTN","IBCSC11",26,0)
 .F Z0=1:1:$O(^TMP("IBXDATA",$J,1,1,""),-1) W ! S Z1="" F  S Z1=$O(^TMP("IBXDATA",$J,1,1,Z0,Z1)) Q:'Z1  S Z2=^(Z1),Z3="" S:$E(Z2)="[" Z3=+$P(Z2,"[",2),Z2=$P(Z2,"]",2,999) W ?Z1 W:Z3 "[",IBVI,Z3,IBVO,"]" W Z2
"RTN","IBCSC11",27,0)
 .S IBV1=""
"RTN","IBCSC11",28,0)
 .I $S($G(IBV)=1:0,1:$$STATOK^IBCEU4(IBIFN,"12")) S Z="" F  S Z=$O(^TMP("IBXEDIT",$J,Z)) Q:'Z  S $E(IBV1,Z)=0
"RTN","IBCSC11",29,0)
 I 'IBANY S IBV1="1" W !!,IBANY
"RTN","IBCSC11",30,0)
 G ^IBCSCP
"RTN","IBCSC11",31,0)
 ;
"RTN","IBCSC11",32,0)
EDIT ;
"RTN","IBCSC11",33,0)
 N Z,DR,DA,DIE,FLDS,Z0,IBCUFT
"RTN","IBCSC11",34,0)
 S IBCUFT=$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCSC11",35,0)
 F Z=1:1:$L(IBDR20,",") S Z0=$P(IBDR20,",",Z) D
"RTN","IBCSC11",36,0)
 .S DR=""
"RTN","IBCSC11",37,0)
 .S IBGRP=Z0-110,Z0=0 F  S Z0=$O(^TMP("IBXEDIT",$J,IBGRP,Z0)) Q:'Z0  S DR=DR_$S($L(DR):";",1:"")_^(Z0)
"RTN","IBCSC11",38,0)
 .I $L(DR) S DIE=+$G(^IBE(353,IBCUFT,2)),DA=IBIFN D ^DIE
"RTN","IBCSC11",39,0)
 Q
"RTN","IBCSC11",40,0)
 ;
"RTN","IBCSC11",41,0)
LOCSCRN(IBIFN) ; Find the local screen from the bill form type
"RTN","IBCSC11",42,0)
 Q $P($G(^IBE(353,+$P($G(^DGCR(399,IBIFN,0)),U,19),2)),U,9)
"RTN","IBCSC11",43,0)
 ;
"RTN","IBCSC11",44,0)
Q Q
"RTN","IBCSC11",45,0)
 ;IBCSC11
"RTN","IBCSC9")
0^11^B7536045^B7536045
"RTN","IBCSC9",1,0)
IBCSC9 ;ALB/BI - MCCR SCREEN 9 (AMBULANCE INFO)  ;11 MAY 2011 10:20
"RTN","IBCSC9",2,0)
 ;;2.0;INTEGRATED BILLING;**52,51,447,473**;11-MAY-2011;Build 29
"RTN","IBCSC9",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCSC9",4,0)
 ;
"RTN","IBCSC9",5,0)
EN ; Main Entry Point
"RTN","IBCSC9",6,0)
 N IBACI,IBACIX,IB,IBT
"RTN","IBCSC9",7,0)
 D ^IBCSCU
"RTN","IBCSC9",8,0)
 S IBT=$P($G(^DGCR(399,IBIFN,0)),U,19)
"RTN","IBCSC9",9,0)
 S IBSR=9,IBSR1="",IBV1=$S(IBT=3:"11",IBV:"11",1:"00")
"RTN","IBCSC9",10,0)
 S IB("U")=$G(^DGCR(399,IBIFN,"U"))
"RTN","IBCSC9",11,0)
 S IB("U1")=$G(^DGCR(399,IBIFN,"U1"))
"RTN","IBCSC9",12,0)
 S IB("U4")=$G(^DGCR(399,IBIFN,"U4"))
"RTN","IBCSC9",13,0)
 S IB("U5")=$G(^DGCR(399,IBIFN,"U5"))
"RTN","IBCSC9",14,0)
 S IB("U6")=$G(^DGCR(399,IBIFN,"U6"))
"RTN","IBCSC9",15,0)
 S IB("U7")=$G(^DGCR(399,IBIFN,"U7"))
"RTN","IBCSC9",16,0)
 S IB("U8")=$G(^DGCR(399,IBIFN,"U8"))
"RTN","IBCSC9",17,0)
 M IB("U9")=^DGCR(399,IBIFN,"U9")
"RTN","IBCSC9",18,0)
 D H^IBCSCU
"RTN","IBCSC9",19,0)
 S Z=1,IBW=1 X IBWW W " Ambulance Transport Data"
"RTN","IBCSC9",20,0)
 W !,?41,"D/O Location: ",$P(IB("U6"),U)
"RTN","IBCSC9",21,0)
 W !,?4,"P/U Address1: ",$P(IB("U5"),U,2),?41,"D/O Address1: ",$P(IB("U6"),U,2)
"RTN","IBCSC9",22,0)
 W !,?4,"P/U Address2: ",$P(IB("U5"),U,3),?41,"D/O Address2: ",$P(IB("U6"),U,3)
"RTN","IBCSC9",23,0)
 W !,?4,"P/U City: ",$P(IB("U5"),U,4),?41,"D/O City: ",$P(IB("U6"),U,4)
"RTN","IBCSC9",24,0)
 W !,?4,"P/U State/Zip: " W:$P(IB("U5"),U,5)'="" $P($G(^DIC(5,$P(IB("U5"),U,5),0)),U,2)
"RTN","IBCSC9",25,0)
 W:$P(IB("U5"),U,6)]"" "/"_$P(IB("U5"),U,6)
"RTN","IBCSC9",26,0)
 W ?41,"D/O State/Zip: " W:$P(IB("U6"),U,5)'="" $P($G(^DIC(5,$P(IB("U6"),U,5),0)),U,2)
"RTN","IBCSC9",27,0)
 W:$P(IB("U6"),U,6)]"" "/"_$P(IB("U6"),U,6)
"RTN","IBCSC9",28,0)
 W !,?4,"Patient Weight: ",$P(IB("U7"),U,1),?41,"Transport Distance: ",$P(IB("U7"),U,3)
"RTN","IBCSC9",29,0)
 W !,?4,"Transport Reason: " I $P(IB("U7"),U,2)'="" D IBWP($$GET1^DIQ(353.4,$P(IB("U7"),U,2)_",",.02),22,55)
"RTN","IBCSC9",30,0)
 W !,?4,"R/T Purpose: " D IBWP($P(IB("U7"),U,4),17,60)
"RTN","IBCSC9",31,0)
 W !,?4,"Stretcher Purpose: " D IBWP($P(IB("U7"),U,5),23,54)
"RTN","IBCSC9",32,0)
 S Z=2,IBW=2 X IBWW W " Ambulance Certification Data"
"RTN","IBCSC9",33,0)
 W !,?4,"Condition Indicator:"
"RTN","IBCSC9",34,0)
 S IBACIX=0
"RTN","IBCSC9",35,0)
 F  S IBACIX=$O(IB("U9",IBACIX)) Q:+IBACIX=0  D
"RTN","IBCSC9",36,0)
 . S IBACI=IB("U9",IBACIX,0)
"RTN","IBCSC9",37,0)
 . W ?25,$$GET1^DIQ(353.5,IBACI_",",.01)," - ",$$GET1^DIQ(353.5,IBACI_",",.02),!
"RTN","IBCSC9",38,0)
 K IB("U9")
"RTN","IBCSC9",39,0)
 W !
"RTN","IBCSC9",40,0)
 G ^IBCSCP
"RTN","IBCSC9",41,0)
 Q
"RTN","IBCSC9",42,0)
 ;
"RTN","IBCSC9",43,0)
IBWP(IBX,IBLM,IBRM) ;
"RTN","IBCSC9",44,0)
 K ^UTILITY($J,"W")
"RTN","IBCSC9",45,0)
 N X,Y,DIWF,DIWL,DIWR S X=IBX
"RTN","IBCSC9",46,0)
 S DIWL=1,DIWR=IBRM,DIWF="" D ^DIWP
"RTN","IBCSC9",47,0)
 I $D(^UTILITY($J,"W")) S Y=0 F  S Y=$O(^UTILITY($J,"W",1,Y)) Q:'Y  W:Y>1 !,?(IBLM) W $G(^UTILITY($J,"W",1,Y,0))
"RTN","IBCSC9",48,0)
 K ^UTILITY($J,"W")
"RTN","IBCSC9",49,0)
 Q
"RTN","IBCSC9",50,0)
 ;
"RTN","IBCSC9",51,0)
SCREEN1(DA1) ;
"RTN","IBCSC9",52,0)
 N A,RESPONSE S RESPONSE=0
"RTN","IBCSC9",53,0)
 I +$P($G(^DGCR(399,DA1,"U9",0)),U,4)<5 S RESPONSE=1 Q RESPONSE
"RTN","IBCSC9",54,0)
 S A(1,"F")="!?35",A(1)="Maximum of 5 Condition Indicators allowed"
"RTN","IBCSC9",55,0)
 D EN^DDIOL(.A)
"RTN","IBCSC9",56,0)
 Q RESPONSE
"RTN","IBCSC9",57,0)
 ;IBCSC9
"RTN","IBCU72")
0^8^B16150008^B11361036
"RTN","IBCU72",1,0)
IBCU72 ;ALB/CPM - ADD/EDIT/DELETE PROCEDURE DIAGNOSES ;18-JUN-96
"RTN","IBCU72",2,0)
 ;;2.0;INTEGRATED BILLING;**62,210,473**;21-MAR-94;Build 29
"RTN","IBCU72",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCU72",4,0)
 ;
"RTN","IBCU72",5,0)
DX(IBIFN,IBPROC) ; Add/edit/delete procedure diagnoses.
"RTN","IBCU72",6,0)
 ; Input:  IBIFN  --  Pointer to the claim in file #399
"RTN","IBCU72",7,0)
 ;        IBPROC  --  Pointer to the claim procedure in file #399.0304
"RTN","IBCU72",8,0)
 ;
"RTN","IBCU72",9,0)
 I '$G(IBIFN) G DXQ
"RTN","IBCU72",10,0)
 I '$G(IBPROC) G DXQ
"RTN","IBCU72",11,0)
 ;
"RTN","IBCU72",12,0)
 N DIE,DA ; need to preserve these variables for IBCU7.
"RTN","IBCU72",13,0)
 ;
"RTN","IBCU72",14,0)
 N IBPROCD,IBDX,IBDXSCR,IBLINE,IBI,IBDEF,IBQUIT,IBPROMPT
"RTN","IBCU72",15,0)
 N J,IBREPACK S IBREPACK=0  ; Added with IB*2.0*473 BI
"RTN","IBCU72",16,0)
 S IBPROCD=$G(^DGCR(399,IBIFN,"CP",IBPROC,0))
"RTN","IBCU72",17,0)
 I 'IBPROCD G DXQ
"RTN","IBCU72",18,0)
 ;
"RTN","IBCU72",19,0)
 ; - get diagnoses and display.
"RTN","IBCU72",20,0)
 D SET^IBCSC4D(IBIFN,.IBDXSCR,.IBDX),DISP(.IBDX)
"RTN","IBCU72",21,0)
 I '$O(IBDX(0)) W "There are no diagnoses associated with this bill." G DXQ
"RTN","IBCU72",22,0)
 ;
"RTN","IBCU72",23,0)
 ; - build workable array; determine default values
"RTN","IBCU72",24,0)
 S IBI=0 F  S IBI=$O(IBDX(IBI)) Q:'IBI  S IBDX(IBI)=IBDXSCR(+IBDX(IBI))_U_$P($$ICD9^IBACSV(+IBDX(IBI)),U)
"RTN","IBCU72",25,0)
 S IBDEF="" F I=11:1:14 S X=$P(IBPROCD,U,I) I X D
"RTN","IBCU72",26,0)
 . S J=0 F  S J=$O(IBDX(J)) Q:'J  I +IBDX(J)=X S IBDEF=IBDEF_J_":"_$P(IBDX(J),U,2)_"," Q
"RTN","IBCU72",27,0)
 I IBDEF]"" S IBDEF=$E(IBDEF,1,$L(IBDEF)-1)
"RTN","IBCU72",28,0)
 ;
"RTN","IBCU72",29,0)
 ; - display instructions and default values
"RTN","IBCU72",30,0)
 W !," *** Please select procedure diagnoses by number to left of diagnosis code ***"
"RTN","IBCU72",31,0)
 I IBDEF]"" W !,"Current Values:  " F I=1:1:$L(IBDEF,",") S X=$P(IBDEF,",",I) I X]"" W "Dx ",I,": ",+X," - ",$P(X,":",2),"   "
"RTN","IBCU72",32,0)
 ;
"RTN","IBCU72",33,0)
 ; - prompt for the four associated dx prompts
"RTN","IBCU72",34,0)
 W ! S IBQUIT=0 F IBPROMPT=1:1:4 D ASKEM Q:IBQUIT
"RTN","IBCU72",35,0)
 I IBREPACK D REPACK(IBPROC,IBIFN)  ; Added with IB*2.0*473 BI
"RTN","IBCU72",36,0)
 ;
"RTN","IBCU72",37,0)
DXQ Q
"RTN","IBCU72",38,0)
 ;
"RTN","IBCU72",39,0)
 ;
"RTN","IBCU72",40,0)
 ;
"RTN","IBCU72",41,0)
DISP(X) ; Display of existing dx's for a bill.
"RTN","IBCU72",42,0)
 N IBX,IBY,IBZ,IBDATE
"RTN","IBCU72",43,0)
 S IBDATE=$$BDATE^IBACSV($G(IBIFN))
"RTN","IBCU72",44,0)
 W !!,?5,"-----------------  Existing Diagnoses for Bill  -----------------",!
"RTN","IBCU72",45,0)
 S IBX=0 F  S IBX=$O(X(IBX)) Q:'IBX  S IBZ=X(IBX),IBY=$$ICD9^IBACSV(+IBZ,IBDATE) D
"RTN","IBCU72",46,0)
 . W !?5,IBX,".",?12,$P(IBY,U),?26,$P(IBY,U,3),?60,$S($P(IBZ,U,2)<1000:"("_$P(IBZ,U,2)_")",1:"")
"RTN","IBCU72",47,0)
 W !
"RTN","IBCU72",48,0)
 Q
"RTN","IBCU72",49,0)
 ;
"RTN","IBCU72",50,0)
ASKEM ; Allow entry of the procedure diagnoses.
"RTN","IBCU72",51,0)
 N IBP
"RTN","IBCU72",52,0)
 S IBP=$P(IBDEF,",",IBPROMPT)
"RTN","IBCU72",53,0)
 W !,"Associated Diagnosis (",IBPROMPT,"): ",$S(IBP]"":+IBP_" - "_$P(IBP,":",2)_" // ",1:"")
"RTN","IBCU72",54,0)
 R X:DTIME
"RTN","IBCU72",55,0)
 I $E(X)="^" S IBQUIT=1 G ASKEMQ
"RTN","IBCU72",56,0)
 ; Changed with IB*2.0*473 BI
"RTN","IBCU72",57,0)
 ;I $E(X)="@" D:IBP]"" UPD("@",IBPROMPT+9) W:IBP]"" "   deleted." G ASKEMQ
"RTN","IBCU72",58,0)
 I $E(X)="@" D:IBP]"" UPD("@",IBPROMPT+9) W:IBP]"" "   deleted." S IBREPACK=1 G ASKEMQ
"RTN","IBCU72",59,0)
 I $E(X)="?" D HELP1 G ASKEM
"RTN","IBCU72",60,0)
 I X="" S:'$$NEXT() IBQUIT=1 G ASKEMQ
"RTN","IBCU72",61,0)
 I '$D(IBDX(X)) D HELP1 G ASKEM
"RTN","IBCU72",62,0)
 W "   ",$P(IBDX(X),"^",2)
"RTN","IBCU72",63,0)
 I +IBP'=X D UPD("/"_+IBDX(X),IBPROMPT+9)
"RTN","IBCU72",64,0)
ASKEMQ Q
"RTN","IBCU72",65,0)
 ;
"RTN","IBCU72",66,0)
UPD(IBVALUE,IBFIELD) ; Update an associated diagnosis.
"RTN","IBCU72",67,0)
 S DIE="^DGCR(399,"_IBIFN_",""CP"",",DA=IBPROC,DA(1)=IBIFN
"RTN","IBCU72",68,0)
 S DR=IBFIELD_"///"_IBVALUE D ^DIE K DA,DIE,DR
"RTN","IBCU72",69,0)
 Q
"RTN","IBCU72",70,0)
 ;
"RTN","IBCU72",71,0)
REPACK(IBPROC,IBIFN)  ; Move associated codes up to avoid gaps
"RTN","IBCU72",72,0)
 ;  Added with IB*2.0*473 BI
"RTN","IBCU72",73,0)
 N IBADIAG,DA,DIE,DR,IBFIELD,IBX
"RTN","IBCU72",74,0)
 N IBWIEN S IBWIEN=IBPROC_","_IBIFN_","
"RTN","IBCU72",75,0)
 S IBADIAG(1)=$$GET1^DIQ(399.0304,IBWIEN,10,"I")
"RTN","IBCU72",76,0)
 S IBADIAG(2)=$$GET1^DIQ(399.0304,IBWIEN,11,"I")
"RTN","IBCU72",77,0)
 S IBADIAG(3)=$$GET1^DIQ(399.0304,IBWIEN,12,"I")
"RTN","IBCU72",78,0)
 S IBADIAG(4)=$$GET1^DIQ(399.0304,IBWIEN,13,"I")
"RTN","IBCU72",79,0)
 S DIE="^DGCR(399,"_IBIFN_",""CP"",",DA=IBPROC,DA(1)=IBIFN
"RTN","IBCU72",80,0)
 S DR="10///@;11///@;12///@;13///@" D ^DIE
"RTN","IBCU72",81,0)
 S IBFIELD=9 F IBX=1:1:4 I IBADIAG(IBX)'="" S IBFIELD=IBFIELD+1,DR=IBFIELD_"///"_IBADIAG(IBX) D ^DIE
"RTN","IBCU72",82,0)
 Q
"RTN","IBCU72",83,0)
 ;
"RTN","IBCU72",84,0)
HELP1 ; Help for entering associated diagnoses.
"RTN","IBCU72",85,0)
 N X
"RTN","IBCU72",86,0)
 W !!,"Please enter one of the following billing diagnoses by number at left of code:"
"RTN","IBCU72",87,0)
 S X=0 F  S X=$O(IBDX(X)) Q:'X  W:X#4=1 ! W ?((X-1)#4*18),X,".",$J($P(IBDX(X),"^",2),9)
"RTN","IBCU72",88,0)
 W !!,"You may also enter '^' to exit, '@' to delete a procedure diagnosis, or"
"RTN","IBCU72",89,0)
 W !,"<CR> to accept a current value or skip a prompt.",!
"RTN","IBCU72",90,0)
 Q
"RTN","IBCU72",91,0)
 ;
"RTN","IBCU72",92,0)
NEXT() ; Advance to the next prompt?
"RTN","IBCU72",93,0)
 N I,X S X=0
"RTN","IBCU72",94,0)
 I IBPROMPT=4 G NEXTQ
"RTN","IBCU72",95,0)
 I IBP]"" S X=1 G NEXTQ
"RTN","IBCU72",96,0)
 F I=(IBPROMPT+1):1:4 I $P(IBDEF,",",I)]"" S X=1 Q
"RTN","IBCU72",97,0)
NEXTQ Q X
"RTN","IBJDF41")
0^5^B88827246^B92006724
"RTN","IBJDF41",1,0)
IBJDF41 ;ALB/RB - FIRST PARTY FOLLOW-UP REPORT (COMPILE) ;15-APR-00
"RTN","IBJDF41",2,0)
 ;;2.0;INTEGRATED BILLING;**123,159,204,356,451,473**;21-MAR-94;Build 29
"RTN","IBJDF41",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBJDF41",4,0)
 ;
"RTN","IBJDF41",5,0)
ST ; - Tasked entry point.
"RTN","IBJDF41",6,0)
 K IB,IBCAT,^TMP("IBJDF4",$J)
"RTN","IBJDF41",7,0)
 S IBQ=0
"RTN","IBJDF41",8,0)
 ;
"RTN","IBJDF41",9,0)
 ; - Set selected categories for report.
"RTN","IBJDF41",10,0)
 I IBSEL[1 S IBCAT(2)=1
"RTN","IBJDF41",11,0)
 I IBSEL[2 S IBCAT(1)=2
"RTN","IBJDF41",12,0)
 I IBSEL[3 S IBCAT(18)=3 F X=22,23 S IBCAT(X)=4
"RTN","IBJDF41",13,0)
 I IBSEL[4 F X=33:1:39 S IBCAT(X)=5
"RTN","IBJDF41",14,0)
 ;
"RTN","IBJDF41",15,0)
 ; - Print the header line for the Excel spreadsheet
"RTN","IBJDF41",16,0)
 I $G(IBEXCEL) D PHDL
"RTN","IBJDF41",17,0)
 ;
"RTN","IBJDF41",18,0)
 ; - Find data required for report.
"RTN","IBJDF41",19,0)
 F IB=16,19,40 D  G:IBQ ENQ
"RTN","IBJDF41",20,0)
 . I IBSTA="A",IB'=16 Q  ;      Active AR's only.
"RTN","IBJDF41",21,0)
 . I IBSTA="S",IB=16 Q   ;      Suspended AR's only.
"RTN","IBJDF41",22,0)
 . I IB'=40 D 
"RTN","IBJDF41",23,0)
 . . S IBCAT=""
"RTN","IBJDF41",24,0)
 . . F  S IBCAT=$O(IBCAT(IBCAT)) Q:IBCAT=""  D
"RTN","IBJDF41",25,0)
 . . . D INIT^IBJDF43
"RTN","IBJDF41",26,0)
 . S IBA=0
"RTN","IBJDF41",27,0)
 . F  S IBA=$O(^PRCA(430,"AC",IB,IBA)) Q:'IBA  D  Q:IBQ
"RTN","IBJDF41",28,0)
 . . D PROC
"RTN","IBJDF41",29,0)
 ;
"RTN","IBJDF41",30,0)
 I 'IBQ,'$G(IBEXCEL) D EN^IBJDF42 ; Print the report.
"RTN","IBJDF41",31,0)
 ;
"RTN","IBJDF41",32,0)
ENQ K ^TMP("IBJDF4",$J)
"RTN","IBJDF41",33,0)
 I $D(ZTQUEUED) S ZTREQ="@" G ENQ1
"RTN","IBJDF41",34,0)
 ;
"RTN","IBJDF41",35,0)
 D ^%ZISC
"RTN","IBJDF41",36,0)
ENQ1 K IB,IB0,IBA,IBA1,IBADM,IBAGE,IBAR,IBAR1,IBBA,IBBN,IBBU,IBC,IBCAT,IBCAT1
"RTN","IBJDF41",37,0)
 K IBELIG,IBEXCEL,IBFLG,IBAI,IBAIQ,IBIDX,IBIO,IBINT,IBN,IBPA,IBPD,IBPAT
"RTN","IBJDF41",38,0)
 K IBPT,IBQ,IBRFD,IBRFT,IBSRC,IBRP,IBVA,COM,COM1,DAT,DFN,X,X1,X2,Y,Z
"RTN","IBJDF41",39,0)
 Q
"RTN","IBJDF41",40,0)
 ;
"RTN","IBJDF41",41,0)
PROC ; - Process data for report(s).
"RTN","IBJDF41",42,0)
 I IBA#100=0 D  Q:IBQ
"RTN","IBJDF41",43,0)
 . S IBQ=$$STOP^IBOUTL("First Party Follow-Up Report")
"RTN","IBJDF41",44,0)
 S IBAR=$G(^PRCA(430,IBA,0)) I 'IBAR Q
"RTN","IBJDF41",45,0)
 S IBCAT=+$P(IBAR,U,2) I '$D(IBCAT(IBCAT)) Q   ;Get valid AR category.
"RTN","IBJDF41",46,0)
 I '$$CLMACT^IBJD(IBA,IBCAT) Q  ;               Invalid IB claim/action.
"RTN","IBJDF41",47,0)
 S IBPT=$$PAT(IBA) I IBPT="" Q  ;               Get patient info.
"RTN","IBJDF41",48,0)
 S DFN=$P(IBPT,U,2)
"RTN","IBJDF41",49,0)
 S IBAGE=$$FMDIFF^XLFDT(DT,+$P(IBAR,U,10))
"RTN","IBJDF41",50,0)
 I IBSMN,IBAGE<IBSMN!(IBAGE>IBSMX) Q  ;         AR outside age range.
"RTN","IBJDF41",51,0)
 S IBVA=$$VA^IBJD1(DFN),IBBN=$P(IBAR,U),IBPD=$P($$PYMT^IBJD1(IBA),U)
"RTN","IBJDF41",52,0)
 S IBPAT=$P(IBPT,U)_"@@"_DFN
"RTN","IBJDF41",53,0)
 ;
"RTN","IBJDF41",54,0)
 ; - Check the AR balance amounts, if necessary.
"RTN","IBJDF41",55,0)
 S (IBADM,IBBA,IBINT,IBPA)=0,IBN=$G(^PRCA(430,IBA,7))
"RTN","IBJDF41",56,0)
 F X=1:1:5 D
"RTN","IBJDF41",57,0)
 . S IBBA=IBBA+$P(IBN,U,X)
"RTN","IBJDF41",58,0)
 . S:X=1 IBPA=+IBN S:X=2 IBINT=$P(IBN,U,2) S:X=3 IBADM=$P(IBN,U,3)
"RTN","IBJDF41",59,0)
 ;
"RTN","IBJDF41",60,0)
 I '$G(IBEXCEL) D EN^IBJDF43 I IBRPT="S" Q  ;   Get summary stats.
"RTN","IBJDF41",61,0)
 ;
"RTN","IBJDF41",62,0)
 I IBSAM,IBBA<IBSAM Q
"RTN","IBJDF41",63,0)
 ;
"RTN","IBJDF41",64,0)
 ; - Check if AR was referred to R-Regional Counsel, D-DMC, or T-TOP
"RTN","IBJDF41",65,0)
 ;   and exclude, if necessary.
"RTN","IBJDF41",66,0)
 S IB0=$S(IB=40:19,1:IB),IBIDX=0,IBRFT=""
"RTN","IBJDF41",67,0)
 S IBAIQ=0,IBAI=$G(^TMP("IBJDF4",$J,IBPAT,0,"A"))
"RTN","IBJDF41",68,0)
 S IBRFD=$P($G(^PRCA(430,IBA,6)),U,4)
"RTN","IBJDF41",69,0)
 I IBRPT="D",IBRFD D  I IBAIQ Q                   ; Referred to RC
"RTN","IBJDF41",70,0)
 . S IBRFT="R" I IBAI'["R" S IBAI=IBAI_"R"
"RTN","IBJDF41",71,0)
 . I 'IBSRC S IBAIQ=1 Q
"RTN","IBJDF41",72,0)
 . D SREF("R",IBRFD,IB0,,.IBIDX)
"RTN","IBJDF41",73,0)
 S IBRFD=+$G(^PRCA(430,IBA,12))
"RTN","IBJDF41",74,0)
 I IBRPT="D",IBRFD D                              ; Referred to DMC
"RTN","IBJDF41",75,0)
 . S IBRFT=IBRFT_"D" I IBAI'["D" S IBAI=IBAI_"D"
"RTN","IBJDF41",76,0)
 . D SREF("D",IBRFD,IB0,,.IBIDX)
"RTN","IBJDF41",77,0)
 S IBRFD=+$G(^PRCA(430,IBA,14))
"RTN","IBJDF41",78,0)
 I IBRPT="D",IBRFD D                              ; Referred to TOP
"RTN","IBJDF41",79,0)
 . S IBRFT=IBRFT_"T" I IBAI'["T" S IBAI=IBAI_"T"
"RTN","IBJDF41",80,0)
 . D SREF("T",IBRFD,IB0,,.IBIDX)
"RTN","IBJDF41",81,0)
 ;
"RTN","IBJDF41",82,0)
 ; - Check if AR is on P-Repayment plan or F-Defaulted repayment plan.
"RTN","IBJDF41",83,0)
 ;   and exclude if repayment plan is active.
"RTN","IBJDF41",84,0)
 S IBRP=$$RP(IBA)
"RTN","IBJDF41",85,0)
 I IBRP D
"RTN","IBJDF41",86,0)
 . I IBRP=2 S IBRFT=IBRFT_"F"  I IBAI'["F" S IBAI=IBAI_"F"
"RTN","IBJDF41",87,0)
 . I IBRP=1 S IBRFT=IBRFT_"P" I IBAI'["P"&(IBAI'["F") S IBAI=IBAI_"P"
"RTN","IBJDF41",88,0)
 . D SREF("P",$P(IBRP,"^",2),IB0,$S(+IBRP=2:1,1:0),.IBIDX)
"RTN","IBJDF41",89,0)
 ;
"RTN","IBJDF41",90,0)
 I IBIDX S IBFLG=1
"RTN","IBJDF41",91,0)
 ;
"RTN","IBJDF41",92,0)
 ; - Check if VA Employee
"RTN","IBJDF41",93,0)
 I $P(IBVA,"^")["*",IBAI'["V" S IBAI=IBAI_"V"
"RTN","IBJDF41",94,0)
 ;
"RTN","IBJDF41",95,0)
 I IBAI'="" S ^TMP("IBJDF4",$J,IBPAT,0,"A")=IBAI
"RTN","IBJDF41",96,0)
 ;
"RTN","IBJDF41",97,0)
 ; IB*2.0*451 - Check for EEOB on associated 3rd party bills and attach EOB indicator '%' if applicable
"RTN","IBJDF41",98,0)
 S IBBN=$$IBEEOBCK(IBBN,DFN)_IBBN  ; Pass AR BILL#, Pat ID
"RTN","IBJDF41",99,0)
 ;
"RTN","IBJDF41",100,0)
 ; - Set up indexes for detail report.
"RTN","IBJDF41",101,0)
 I $G(IBEXCEL) D  Q
"RTN","IBJDF41",102,0)
 . S IBEXCEL1=$P($G(^PRCA(430.2,IBCAT,0)),U,2)_U_$P(IBPT,U,3)_U_$P(IBVA,U)_U_$P(IBPT,U,4)_U_$$DT^IBJD($P(IBPT,U,6),1)_U_$$ELIG^IBJDF42(+$P(IBPT,U,5))_U
"RTN","IBJDF41",103,0)
 . S IBEXCEL1=IBEXCEL1_$$GET1^DIQ(2,DFN,.381)_U_$$MTRX(DFN)_U_IBBN_U_$S(IB=16:"A",1:"S")_U_IBRFT_U_$$DT^IBJD($P(IBAR,U,10),1)_U_$$DT^IBJD(IBPD,1)_U_IBBA_U_IBPA_U_IBINT_U_IBADM_U
"RTN","IBJDF41",104,0)
 . I IBSH D COM
"RTN","IBJDF41",105,0)
 . S IBD=0 I DAT!IBPD S IBD=$$FMDIFF^XLFDT(DT,$S('DAT:IBPD,1:$G(DAT)))
"RTN","IBJDF41",106,0)
 . S IBEXCEL1=IBEXCEL1_U_IBD W !,IBEXCEL1 K IBD,IBEXCEL1
"RTN","IBJDF41",107,0)
 ;
"RTN","IBJDF41",108,0)
 I '($D(^TMP("IBJDF4",$J,IBPAT))#10) D
"RTN","IBJDF41",109,0)
 . S ^TMP("IBJDF4",$J,IBPAT)=$P(IBPT,U,3,5)_U_$$MTRX(DFN)_U_$P(IBPT,U,6)_"^"_$P(IBVA,"^",2)_"^"_$$ACCBAL($P(IBPT,U,7))
"RTN","IBJDF41",110,0)
 S ^TMP("IBJDF4",$J,IBPAT,IB0,IBCAT,IBBN)=IBPD_U_IBBA_U_IBPA_U_IBINT_U_IBADM_U_IBIDX
"RTN","IBJDF41",111,0)
 ;
"RTN","IBJDF41",112,0)
 I IBSH D COM
"RTN","IBJDF41",113,0)
 Q
"RTN","IBJDF41",114,0)
 ;
"RTN","IBJDF41",115,0)
ACCBAL(DFN) ; Calculates the Account Balance for the Bill
"RTN","IBJDF41",116,0)
 ; Input: DFN - Patient/Debtor internal number
"RTN","IBJDF41",117,0)
 ; Output: BAL - Patient/Debtor Account Balance
"RTN","IBJDF41",118,0)
 ;
"RTN","IBJDF41",119,0)
 N B0,B7,BAL,BILL,I
"RTN","IBJDF41",120,0)
 S (BAL,BILL)=0
"RTN","IBJDF41",121,0)
 F  S BILL=$O(^PRCA(430,"C",DFN,BILL)) Q:BILL=""  D
"RTN","IBJDF41",122,0)
 . S B0=$G(^PRCA(430,BILL,0)) I $P(B0,"^",8)'=16 Q
"RTN","IBJDF41",123,0)
 . S B7=$G(^PRCA(430,BILL,7))
"RTN","IBJDF41",124,0)
 . F I=1:1:5 S BAL=BAL+$P(B7,"^",I)
"RTN","IBJDF41",125,0)
 Q BAL
"RTN","IBJDF41",126,0)
 ;
"RTN","IBJDF41",127,0)
PHDL ; - Print the header line for the Excel spreadsheet
"RTN","IBJDF41",128,0)
 N X
"RTN","IBJDF41",129,0)
 S X="Cat^Patient^VA Empl.?^SSN^Dt Death^Prim.Elig.^Med.Elig.?^"
"RTN","IBJDF41",130,0)
 S X=X_"Means Tst Sts^Means Tst Dt^RX Copay Exemp.Sts^RX Copay Exemp.Dt^"
"RTN","IBJDF41",131,0)
 S X=X_"Bill #^Act/Susp^Refer. to^Dt Bill prep.^Last Pymt Dt^"
"RTN","IBJDF41",132,0)
 S X=X_"Curr.Bal.^Princ.Bal.^Int.^Admin.^Last Comm.Dt^Days Lst Comm."
"RTN","IBJDF41",133,0)
 W !,X
"RTN","IBJDF41",134,0)
 Q
"RTN","IBJDF41",135,0)
 ;
"RTN","IBJDF41",136,0)
PAT(X) ; - Find the AR patient and decide to include the AR.
"RTN","IBJDF41",137,0)
 ;    Input: X=AR pointer to file #430 and pre-set variables IBS*
"RTN","IBJDF41",138,0)
 ;   Output: Y=Sort key (name or last 4) ^ Patient pointer to file #2 
"RTN","IBJDF41",139,0)
 ;             ^ Name ^ SSN ^ Eligibilities ^ Date of death (if any)
"RTN","IBJDF41",140,0)
 ;             ^ Debtor pointer to file #340
"RTN","IBJDF41",141,0)
 N PAT,KEY,DBTR,DFN,DEATH,NAME,SSN,VAEL,VADM,X1,X2
"RTN","IBJDF41",142,0)
 S PAT="" G:'$G(X) PATQ
"RTN","IBJDF41",143,0)
 S DBTR=+$P($G(^PRCA(430,X,0)),U,9)
"RTN","IBJDF41",144,0)
 S X1=$P($G(^RCD(340,DBTR,0)),U) G:X1'["DPT" PATQ
"RTN","IBJDF41",145,0)
 S DFN=+X1 G:'DFN PATQ D DEM^VADPT
"RTN","IBJDF41",146,0)
 S NAME=VADM(1),SSN=$P(VADM(2),"^"),DEATH=VADM(6)\1
"RTN","IBJDF41",147,0)
 S KEY=$S(IBSN="N":NAME,1:$E(SSN,6,9))
"RTN","IBJDF41",148,0)
 I KEY=""!(IBSNF'="@"&('DFN)) G PATQ
"RTN","IBJDF41",149,0)
 I $D(IBSNA) G:IBSNA="ALL"&('DFN) PATQ G:IBSNA="NULL"&(DFN) PATQ
"RTN","IBJDF41",150,0)
 I $G(IBSNA)="ALL" G PATC
"RTN","IBJDF41",151,0)
 I IBSNF="@",IBSNL="zzzzz" G PATC
"RTN","IBJDF41",152,0)
 I IBSNF'=KEY,IBSNF]KEY G PATQ
"RTN","IBJDF41",153,0)
 I IBSNL'=KEY,KEY]IBSNL G PATQ
"RTN","IBJDF41",154,0)
 ;
"RTN","IBJDF41",155,0)
PATC ; - Set patient eligibilities.
"RTN","IBJDF41",156,0)
 D ELIG^VADPT S X2=+$G(VAEL(1))_";"
"RTN","IBJDF41",157,0)
 I +X2 S X1=0 F  S X1=$O(VAEL(1,X1)) Q:'X1  S X2=X2_X1_";"
"RTN","IBJDF41",158,0)
 ;
"RTN","IBJDF41",159,0)
 S PAT=KEY_U_DFN_U_$E(NAME,1,26)_U_SSN_U_X2_U_DEATH
"RTN","IBJDF41",160,0)
 S PAT=PAT_U_DBTR
"RTN","IBJDF41",161,0)
PATQ Q PAT
"RTN","IBJDF41",162,0)
 ;
"RTN","IBJDF41",163,0)
RP(X) ; - Check if claim/receivable is under a repayment plan.
"RTN","IBJDF41",164,0)
 ;    Input: X=Bill pointer to file #399/#430
"RTN","IBJDF41",165,0)
 ;   Output: 0-Not on repay plan, 1-On repay plan, 2-On defaulted plan
"RTN","IBJDF41",166,0)
 N Z
"RTN","IBJDF41",167,0)
 S Z=$$REPDATA^RCBECHGA(X,1) I Z="" Q 0
"RTN","IBJDF41",168,0)
 I '$P(Z,"^",7) Q ("1^"_$P(Z,"^"))
"RTN","IBJDF41",169,0)
 Q ("2^"_$P(Z,"^"))
"RTN","IBJDF41",170,0)
 ;
"RTN","IBJDF41",171,0)
MTRX(X) ; - Return patient's means test and/or RX copay status and most recent
"RTN","IBJDF41",172,0)
 ;   test dates for both.
"RTN","IBJDF41",173,0)
 ;    Input: X=Patient pointer to file #2 and opt. variable IBEXCEL
"RTN","IBJDF41",174,0)
 ;   Output: Y=Means test status ^ Date ^ RX copay status ^ Date 
"RTN","IBJDF41",175,0)
 N MTST,RXST,Y
"RTN","IBJDF41",176,0)
 S Y="^^^",MTST=$$LST^DGMTU(X),RXST=$$RXST^IBARXEU(X)
"RTN","IBJDF41",177,0)
 I '$G(IBEXCEL) D
"RTN","IBJDF41",178,0)
 . S $P(Y,"^",1,2)=$P(MTST,"^",3)_"^"_$$DAT1^IBOUTL($P(MTST,"^",2))
"RTN","IBJDF41",179,0)
 . S $P(Y,"^",3)=$S('RXST:"NON-EXEMPT",+RXST=1:"EXEMPT",1:"")
"RTN","IBJDF41",180,0)
 . I $P(Y,"^",3)'="" S $P(Y,"^",4)=$$DAT1^IBOUTL($P(RXST,"^",5))
"RTN","IBJDF41",181,0)
 I $G(IBEXCEL) D
"RTN","IBJDF41",182,0)
 . S $P(Y,"^",1,2)=$P(MTST,"^",4)_"^"_$$DT^IBJD($P(MTST,"^",2),1)
"RTN","IBJDF41",183,0)
 . S $P(Y,"^",3)=$S('RXST:"M",+RXST=1:"E",1:"")
"RTN","IBJDF41",184,0)
 . I $P(Y,"^",3)'="" S $P(Y,"^",4)=$$DT^IBJD($P(RXST,"^",5),1)
"RTN","IBJDF41",185,0)
 Q Y
"RTN","IBJDF41",186,0)
 ;
"RTN","IBJDF41",187,0)
SREF(RFT,DAT,STS,DEF,IDX) ; Set the "referred to" information on the 
"RTN","IBJDF41",188,0)
 ;                         temporary global ^TMP
"RTN","IBJDF41",189,0)
 ;Input: RFT: "R": RC, "D": DMC, "T": TOP, "P": REPAYMENT PLAN
"RTN","IBJDF41",190,0)
 ;       DAT: Date it was referred/established
"RTN","IBJDF41",191,0)
 ;       STS: Receivable status (16-Active,19-Suspended)
"RTN","IBJDF41",192,0)
 ;       DEF: Repayment Plan in Default? (1 - YES, 0 - NO)
"RTN","IBJDF41",193,0)
 ;       IDX: Subscript to be set in the Temporary global ^TMP
"RTN","IBJDF41",194,0)
 ;Output: IDX: Subscript set in the Temporary global ^TMP
"RTN","IBJDF41",195,0)
 ;
"RTN","IBJDF41",196,0)
 N SREF,IDX1
"RTN","IBJDF41",197,0)
 S DEF=+$G(DEF),IDX=+$G(IDX)
"RTN","IBJDF41",198,0)
 I RFT="R" S SREF="REFERRED TO RC"
"RTN","IBJDF41",199,0)
 I RFT="D" S SREF="REFERRED TO DMC"
"RTN","IBJDF41",200,0)
 I RFT="T" S SREF="REFERRED TO TOP"
"RTN","IBJDF41",201,0)
 I RFT="P" D
"RTN","IBJDF41",202,0)
 . S SREF="REPAYMENT PLAN ESTABLISHED"
"RTN","IBJDF41",203,0)
 . I $G(DEF) S SREF=SREF_" (CURRENTLY IN DEFAULT)"
"RTN","IBJDF41",204,0)
 ;
"RTN","IBJDF41",205,0)
 I 'IDX S IDX=$O(^TMP("IBJDF4",$J,IBPAT,0,"C",STS,""),-1)+1
"RTN","IBJDF41",206,0)
 S IDX1=$O(^TMP("IBJDF4",$J,IBPAT,0,"C",STS,IDX,""),-1)+1
"RTN","IBJDF41",207,0)
 S ^TMP("IBJDF4",$J,IBPAT,0,"C",STS,IDX,IDX1)=DAT
"RTN","IBJDF41",208,0)
 S ^TMP("IBJDF4",$J,IBPAT,0,"C",STS,IDX,IDX1,1)=SREF
"RTN","IBJDF41",209,0)
 Q
"RTN","IBJDF41",210,0)
 ;
"RTN","IBJDF41",211,0)
COM ; - Get bill comments.
"RTN","IBJDF41",212,0)
 I 'IBIDX,'$G(IBEXCEL) D
"RTN","IBJDF41",213,0)
 . S IBFLG=0,IBIDX=$O(^TMP("IBJDF4",$J,IBPAT,0,"C",IB0,""),-1)+1
"RTN","IBJDF41",214,0)
 ;
"RTN","IBJDF41",215,0)
 S DAT=0,IBA1=$S(IBSH1="M":999999999,1:0)
"RTN","IBJDF41",216,0)
 F  S IBA1=$S(IBSH1="M":$O(^PRCA(433,"C",IBA,IBA1),-1),1:$O(^PRCA(433,"C",IBA,IBA1))) Q:'IBA1  D  I IBSH1="M",DAT Q
"RTN","IBJDF41",217,0)
 . S IBC=$G(^PRCA(433,IBA1,1)) Q:'IBC
"RTN","IBJDF41",218,0)
 . I $G(IBSH2),$$FMDIFF^XLFDT(DT,+IBC)>IBSH2 Q  ; Comment age not minimum.
"RTN","IBJDF41",219,0)
 . I $P(IBC,U,2)'=35,$P(IBC,U,2)'=45 Q  ;   Not decrease/comment transact.
"RTN","IBJDF41",220,0)
 . S DAT=$S(IBC:+IBC\1,1:+$P(IBC,U,9)\1)
"RTN","IBJDF41",221,0)
 . I $G(IBEXCEL),IBSH1="M" S IBEXCEL1=IBEXCEL1_$$DT^IBJD(DAT,1) Q
"RTN","IBJDF41",222,0)
 . ;
"RTN","IBJDF41",223,0)
 . ; - Append brief and transaction comments.
"RTN","IBJDF41",224,0)
 . K COM,COM1 S COM(0)=DAT,X1=0
"RTN","IBJDF41",225,0)
 . S COM1(1)=$P($G(^PRCA(433,IBA1,5)),U,2)
"RTN","IBJDF41",226,0)
 . S COM1(2)=$E($P($G(^PRCA(433,IBA1,8)),U,6),1,70)
"RTN","IBJDF41",227,0)
 . S COM(1)=COM1(1)_$S(COM1(1)]""&(COM1(2)]""):"|",1:"")_COM1(2)
"RTN","IBJDF41",228,0)
 . I COM(1)]"" S COM(1)="**"_COM(1)_"**",X1=1
"RTN","IBJDF41",229,0)
 . ;
"RTN","IBJDF41",230,0)
 . ; - Get main comments.
"RTN","IBJDF41",231,0)
 . S X2=0
"RTN","IBJDF41",232,0)
 . F  S X2=$O(^PRCA(433,IBA1,7,X2)) Q:'X2  D
"RTN","IBJDF41",233,0)
 . . S COM($S(X1:X2+1,1:X2))=^PRCA(433,IBA1,7,X2,0)
"RTN","IBJDF41",234,0)
 . ;
"RTN","IBJDF41",235,0)
 . I $G(IBEXCEL) Q
"RTN","IBJDF41",236,0)
 . ;
"RTN","IBJDF41",237,0)
 . S IBFLG=1,^TMP("IBJDF4",$J,IBPAT,0,"C",IB0,IBIDX,IBA1)=$G(COM(0)),X1=0
"RTN","IBJDF41",238,0)
 . F  S X1=$O(COM(X1)) Q:X1=""  D
"RTN","IBJDF41",239,0)
 . . S ^TMP("IBJDF4",$J,IBPAT,0,"C",IB0,IBIDX,IBA1,X1)=COM(X1)
"RTN","IBJDF41",240,0)
 ;
"RTN","IBJDF41",241,0)
 I '$G(IBEXCEL),IBFLG D
"RTN","IBJDF41",242,0)
 . S $P(^TMP("IBJDF4",$J,IBPAT,IB0,IBCAT,IBBN),"^",6)=IBIDX
"RTN","IBJDF41",243,0)
 Q
"RTN","IBJDF41",244,0)
 ; IB*2.0*451 -  Use Event Date to find an associated 3rd Party bill with an associated EEOB
"RTN","IBJDF41",245,0)
IBEEOBCK(IBBN,DFN) ; Passed AR Bill, Patient ID
"RTN","IBJDF41",246,0)
 ; Function will quit as soon as a 3rd party bill is located that has an associated EEOB
"RTN","IBJDF41",247,0)
 ;
"RTN","IBJDF41",248,0)
 ; Find 3rd Party Bills with an Event Date
"RTN","IBJDF41",249,0)
 N IBREF,IBEEOB,IBDT
"RTN","IBJDF41",250,0)
 S IBEEOB=""
"RTN","IBJDF41",251,0)
 ; Loop through Xref of ARbill (#430) to Action file (#350)
"RTN","IBJDF41",252,0)
 I +$G(IBBN) S IBREF=0 F  S IBREF=$O(^IB("ABIL",IBBN,IBREF)) Q:'IBREF  D  Q:IBEEOB="%"
"RTN","IBJDF41",253,0)
 . S IBDT=$P($G(^IB(IBREF,0)),"^",17) ;Get event Date
"RTN","IBJDF41",254,0)
 . I IBDT S IBEEOB=$$TPEVDT(DFN,IBDT)
"RTN","IBJDF41",255,0)
 . I IBDT S IBEEOB=$$TPOPV(DFN,IBDT)
"RTN","IBJDF41",256,0)
 ;
"RTN","IBJDF41",257,0)
 Q IBEEOB
"RTN","IBJDF41",258,0)
 ;
"RTN","IBJDF41",259,0)
 ; IB*2.0*451 - Traverse all THIRD PARTY bills for a patient with a specific Event Date (399,.03)
"RTN","IBJDF41",260,0)
TPEVDT(DFN,EVDT) ;
"RTN","IBJDF41",261,0)
 ; Function will quit as soon as a 3rd party bill is located that has an associated EEOB
"RTN","IBJDF41",262,0)
 ; IB*2.0*473 - Use the 399,"APDT" (by patient) index instead of the 399,"D" index for efficiency
"RTN","IBJDF41",263,0)
 I '$G(DFN)!'$G(EVDT) Q ""
"RTN","IBJDF41",264,0)
 N IBIFN,IBEEOB
"RTN","IBJDF41",265,0)
 S IBEEOB="",IBIFN=""
"RTN","IBJDF41",266,0)
 F  S IBIFN=$O(^DGCR(399,"APDT",DFN,IBIFN),-1) Q:'IBIFN  D  Q:IBEEOB="%"
"RTN","IBJDF41",267,0)
 . I $D(^DGCR(399,"APDT",DFN,IBIFN,9999999-EVDT)) S IBEEOB=$$EEOBCK(IBIFN)
"RTN","IBJDF41",268,0)
 Q IBEEOB
"RTN","IBJDF41",269,0)
 ; 
"RTN","IBJDF41",270,0)
 ; IB*2.0*451 - Traverse all THIRD PARTY bills for a patient with any Opt Visit Dates same as Event Date (399,43)
"RTN","IBJDF41",271,0)
TPOPV(DFN,EVDT) ;
"RTN","IBJDF41",272,0)
 ; Function will quit as soon as a 3rd party bill is located that has an associated EEOB
"RTN","IBJDF41",273,0)
 N IBIFN,IBEEOB
"RTN","IBJDF41",274,0)
 S IBEEOB=""
"RTN","IBJDF41",275,0)
 I +$G(DFN),+$G(EVDT) S IBIFN=0 F  S IBIFN=$O(^DGCR(399,"AOPV",DFN,EVDT,IBIFN)) Q:'IBIFN  D  Q:IBEEOB="%"
"RTN","IBJDF41",276,0)
 . ; attach EOB indicator '%' to bill # when applicable
"RTN","IBJDF41",277,0)
 . S IBEEOB=$$EEOBCK(IBIFN)
"RTN","IBJDF41",278,0)
 Q IBEEOB
"RTN","IBJDF41",279,0)
 ;
"RTN","IBJDF41",280,0)
 ; IB*2.0*451 - Check for EEOB indicator
"RTN","IBJDF41",281,0)
EEOBCK(IBBILL)  ;
"RTN","IBJDF41",282,0)
 ; Check for 1st and 3rd party payment activity on bill
"RTN","IBJDF41",283,0)
 ; IBBILL is the IEN for the bill # in files #399/#430 and must be valid,
"RTN","IBJDF41",284,0)
 ; check the EOB type and exclude it if it is an MRA. Otherwise,
"RTN","IBJDF41",285,0)
 ; returns the EEOB indicator '%' if payment activity was found.
"RTN","IBJDF41",286,0)
 ; Access to file #361.1 covered by IA #4051.
"RTN","IBJDF41",287,0)
 ; Access to file #399 covered by IA #3820.
"RTN","IBJDF41",288,0)
 N IBOUT,IBVAL,Z
"RTN","IBJDF41",289,0)
 I $G(IBBILL)=0 Q ""
"RTN","IBJDF41",290,0)
 I '$O(^IBM(361.1,"B",IBBILL,0)) Q ""  ; no entry here
"RTN","IBJDF41",291,0)
 I $P($G(^DGCR(399,IBBILL,0)),"^",13)=1 Q ""  ;avoid 'ENTERED/NOT REVIEWED' status
"RTN","IBJDF41",292,0)
 ; handle both single and multiple bill entries in file #361.1
"RTN","IBJDF41",293,0)
 S Z=0 F  S Z=$O(^IBM(361.1,"B",IBBILL,Z)) Q:'Z  D  Q:$G(IBOUT)="%"
"RTN","IBJDF41",294,0)
 . S IBVAL=$G(^IBM(361.1,Z,0))
"RTN","IBJDF41",295,0)
 . S IBOUT=$S($P(IBVAL,"^",4)=1:"",$P(IBVAL,"^",4)=0:"%",1:"")
"RTN","IBJDF41",296,0)
 Q IBOUT  ; EOB indicator for either 1st or 3rd party payment on bill
"RTN","IBJTCA1")
0^1^B53091604^B52613599
"RTN","IBJTCA1",1,0)
IBJTCA1 ;ALB/ARH - TPI CLAIMS INFO BUILD ;10/31/07  14:17
"RTN","IBJTCA1",2,0)
 ;;2.0;INTEGRATED BILLING;**39,80,106,137,223,276,363,384,432,452,473**;21-MAR-94;Build 29
"RTN","IBJTCA1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBJTCA1",4,0)
 ;
"RTN","IBJTCA1",5,0)
BLD ; build array for Third Party Joint Inquiry Claims Info screen, IBIFN must be defined
"RTN","IBJTCA1",6,0)
 ;
"RTN","IBJTCA1",7,0)
 N X,IBY,IBZ,IBZ0,IBI,IBT,IBD,IBLN,IBLR,IBD0,IBDI1,IBDM,IBDM1,IBDU,IBDS,IBDU2,IBID0,IBID13,IBNC,IBTC,IBTW,IBSW,IBGRPB,IBGRPE,IBWNR,IBDTX,IBBX19,IBPRVO,IBNABP,IBLVL,IBCNT,IBPRVTYP
"RTN","IBJTCA1",8,0)
 N IBXSAVE  ; IB*2.0*473 bi
"RTN","IBJTCA1",9,0)
 S VALMCNT=0,X="",IBD0=$G(^DGCR(399,+$G(IBIFN),0)) I IBD0="" S VALMQUIT="" G BLDQ
"RTN","IBJTCA1",10,0)
 F IBI="M","M1","U","S","U2","TX" S @("IBD"_IBI)=$G(^DGCR(399,+IBIFN,IBI))
"RTN","IBJTCA1",11,0)
 S IBDI1=$P(IBD0,U,21),IBDI1=$S(IBDI1="S":"I2",IBDI1="T":"I3",1:"I1") S IBDI1=$G(^DGCR(399,+IBIFN,IBDI1))
"RTN","IBJTCA1",12,0)
 S IBID0=$G(^DIC(36,+IBDI1,0)),IBID13=$G(^DIC(36,+IBDI1,.13))
"RTN","IBJTCA1",13,0)
 ;
"RTN","IBJTCA1",14,0)
 ;
"RTN","IBJTCA1",15,0)
 S (IBLN,VALMCNT)=1
"RTN","IBJTCA1",16,0)
 ;IB*2.0*432/TAZ - Added IBTW(6) and IBSW(6)
"RTN","IBJTCA1",17,0)
 S (IBNC(1),IBTC(1),IBTC(4),IBTC(6))=2,IBTC(5)=78,(IBNC(2),IBTC(2))=42,IBNC(3)=35,IBTW(1)=15,IBTW(2)=16,IBTW(4)=12,IBTW(5)=1,IBTW(6)=20,IBSW(1)=23,IBSW(2)=21,IBSW(4)=60,IBSW(5)=1,IBSW(6)=49
"RTN","IBJTCA1",18,0)
 ;
"RTN","IBJTCA1",19,0)
 S IBGRPB=IBLN,IBLR=1
"RTN","IBJTCA1",20,0)
 ;
"RTN","IBJTCA1",21,0)
 S IBT="Insurance Demographics" S IBLN=$$SETN(IBT,IBLN,IBLR,1)
"RTN","IBJTCA1",22,0)
 S IBWNR=$$WNRBILL^IBEFUNC(IBIFN)
"RTN","IBJTCA1",23,0)
 S IBNABP=$$NABP^IBNCPDPU(IBIFN)
"RTN","IBJTCA1",24,0)
 S IBT=$S(IBWNR:" *",1:"  ")_"Bill Payer: ",IBD=$P(IBID0,U,1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",25,0)
 S IBT="Claim Address: " D  S IBD=$P(IBDM,U,5) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",26,0)
 . I $P(IBID0,U,1)'=$P(IBDM,U,4) S IBD=$P(IBDM,U,4) S IBLN=$$SET(IBT,IBD,IBLN,IBLR) S IBT=""
"RTN","IBJTCA1",27,0)
 I $P(IBDM,U,6)'="" S IBT="",IBD=$P(IBDM,U,6) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",28,0)
 I $P(IBDM1,U,1)'="" S IBT="",IBD=$P(IBDM1,U,1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",29,0)
 S IBT="",IBD=$P(IBDM,U,7),IBD=IBD_$S(IBD'="":", ",1:"")_$P($G(^DIC(5,+$P(IBDM,U,8),0)),U,2)_" "_$P(IBDM,U,9),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",30,0)
 S IBT="Claim Phone: ",IBD=$P($$BADD^IBJTU3(+IBIFN),U,2) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",31,0)
 ;
"RTN","IBJTCA1",32,0)
 S IBGRPE=IBLN,IBLN=IBGRPB,IBLR=2
"RTN","IBJTCA1",33,0)
 ;
"RTN","IBJTCA1",34,0)
 S IBT="Subscriber Demographics" S IBLN=$$SETN(IBT,IBLN,IBLR,1)
"RTN","IBJTCA1",35,0)
 S IBT="Group Number: ",IBD=$P(IBDI1,U,3) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",36,0)
 S IBT="Group Name: ",IBD=$P(IBDI1,U,15) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",37,0)
 S IBT="Subscriber ID: ",IBD=$P(IBDI1,U,2) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",38,0)
 S IBT="Employer: ",IBD=$$EMPL(+DFN) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",39,0)
 S IBT="Insured's Name: ",IBD=$P(IBDI1,U,17) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",40,0)
 S IBT="Relationship: ",IBD=$$EXSET^IBJU1($P(IBDI1,U,16),2.312,16) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",41,0)
 ;
"RTN","IBJTCA1",42,0)
 S (IBLN,VALMCNT)=$S(IBLN>IBGRPE:IBLN,1:IBGRPE)
"RTN","IBJTCA1",43,0)
 S (IBNC(1),IBTC(1))=2,(IBNC(2),IBTC(2))=42,IBNC(3)=29,IBTW(1)=12,IBTW(2)=16,IBSW(1)=26,IBSW(2)=22
"RTN","IBJTCA1",44,0)
 S (IBT,IBD)="" S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",45,0)
 ;
"RTN","IBJTCA1",46,0)
 I $$FT^IBCEF(IBIFN)=2 D
"RTN","IBJTCA1",47,0)
 . N IBXDATA,IBXSAVE K ^TMP("IBXSAVE",$J)
"RTN","IBJTCA1",48,0)
 . D F^IBCEF("N-HCFA 1500 BOX 19",,,IBIFN)
"RTN","IBJTCA1",49,0)
 . I IBXDATA'="" S IBBX19(1)=$E(IBXDATA,1,40) S:$E(IBXDATA,41,$L(IBXDATA))'="" IBBX19(2)=$E(IBXDATA,41,$L(IBXDATA))
"RTN","IBJTCA1",50,0)
 ;
"RTN","IBJTCA1",51,0)
 S IBGRPB=IBLN,IBLR=1
"RTN","IBJTCA1",52,0)
 S IBT="Claim Information" S IBLN=$$SETN(IBT,IBLN,3,1)
"RTN","IBJTCA1",53,0)
 S IBT="Bill Type: ",IBD=$$EXSET^IBJU1($P(IBD0,U,5),399,.05) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",54,0)
 S IBT="Time Frame: ",IBD=$$EXSET^IBJU1($P(IBD0,U,6),399,.06) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",55,0)
 S IBT="Rate Type: ",IBD=$P($G(^DGCR(399.3,+$P(IBD0,U,7),0)),U,1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",56,0)
 S IBT="AR Status: ",IBD=$P($$ARSTATA^IBJTU4(IBIFN),U,1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",57,0)
 S IBT=" Sequence: ",IBD=$P($$EXSET^IBJU1($P(IBD0,U,21),399,.21)," ",1) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",58,0)
 S IBT="Purch Svc: ",IBD=$S($P(IBDU2,U,11)="":"NO",1:$$EXPAND^IBTRE(399,233,$P(IBDU2,U,11))),IBLN=$$SET(IBT,IBD,IBLN,4)
"RTN","IBJTCA1",59,0)
 I $P(IBDM1,"^",8) S IBT="  ECME No: ",IBD=$P($P(IBDM1,"^",8),";",1),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",60,0)
 I $L($P(IBDM1,"^",9)) S IBT="ECME Ap No: ",IBD=$P(IBDM1,"^",9),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",61,0)
 I IBNABP'="" S IBT=$S(($L($TR(IBNABP," ",""))=7):"  NCPDP No: ",1:"       NPI: "),IBD=IBNABP,IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",62,0)
 I IBWNR S IBT="MRA Status: ",IBD=$S($P(IBDTX,U,5):$P(IBDTX,U,5),1:"NOT RECEIVED"),IBLN=$$SET(IBT,$S(IBD:$$EXPAND^IBTRE(399,24,IBD),1:IBD),IBLN,IBLR)
"RTN","IBJTCA1",63,0)
 I $G(IBBX19(1))'="" D
"RTN","IBJTCA1",64,0)
 . S IBT="   Box 19: ",IBD=IBBX19(1),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",65,0)
 . I $G(IBBX19(2))'="" S IBT=$J("",11),IBD=IBBX19(2),IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",66,0)
 ;
"RTN","IBJTCA1",67,0)
 S IBLR=6,IBPRVO=""
"RTN","IBJTCA1",68,0)
 S IBT="Providers: ",IBD="NONE"
"RTN","IBJTCA1",69,0)
 ;IB*2.0*432/TAZ - Changed how providers are displayed to take line-level providers into account.
"RTN","IBJTCA1",70,0)
 ;D F^IBCEF("N-ALL PROVIDERS","IBZ",,IBIFN)
"RTN","IBJTCA1",71,0)
 D F^IBCEF("N-ALL PROVIDERS 1","IBZ",,IBIFN)
"RTN","IBJTCA1",72,0)
 S IBZ0=0
"RTN","IBJTCA1",73,0)
 S IBLVL=0
"RTN","IBJTCA1",74,0)
 ;F  S Z=$O(IBZ(Z)) Q:'Z  D
"RTN","IBJTCA1",75,0)
 ;. I $G(IBZ(Z)),$G(IBZ(Z,1))'="" S IBLN=$$SET(IBT,"(OLD PROV DATA) "_IBZ(Z,1),IBLN,IBLR),IBZ0=1 Q
"RTN","IBJTCA1",76,0)
 ;. I $P($G(IBZ(Z,1)),U)'="" S IBD=$E($$EXPAND^IBTRE(399.0222,.01,Z)_":"_$J("",15),1,15)_$P(IBZ(Z,1),U)_$S($P(IBZ(Z,1),U,4)'="":" ("_$P(IBZ(Z,1),U,4)_")",1:"") S IBLN=$$SET(IBT,IBD,IBLN,IBLR) S IBT=$J("",11),IBZ0=1
"RTN","IBJTCA1",77,0)
 ;I 'IBZ0 S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",78,0)
 S IBLVL=0
"RTN","IBJTCA1",79,0)
 F  S IBLVL=$O(IBZ(IBLVL)) Q:'IBLVL  D
"RTN","IBJTCA1",80,0)
 . S IBT=IBT_$S(IBLVL=1:"Claim: ",1:"Line: ")
"RTN","IBJTCA1",81,0)
 . S IBPRVTYP="",IBCNT=0
"RTN","IBJTCA1",82,0)
 . F  S IBCNT=$O(IBZ(IBLVL,IBCNT)) Q:'IBCNT  D
"RTN","IBJTCA1",83,0)
 .. I IBLVL=1 S IBD=$J("",5)
"RTN","IBJTCA1",84,0)
 .. I IBLVL=2 S IBD=$E("("_IBCNT_")"_$J("",5),1,5)
"RTN","IBJTCA1",85,0)
 .. F  S IBPRVTYP=$O(IBZ(IBLVL,IBCNT,IBPRVTYP)) Q:'IBPRVTYP  D
"RTN","IBJTCA1",86,0)
 ... S IBD=IBD_$E($$EXPAND^IBTRE(399.0222,.01,IBPRVTYP)_":"_$J("",15),1,15)
"RTN","IBJTCA1",87,0)
 ... S IBD=IBD_$P(IBZ(IBLVL,IBCNT,IBPRVTYP),U)
"RTN","IBJTCA1",88,0)
 ... I $L($P(IBZ(IBLVL,IBCNT,IBPRVTYP),U,4)) S IBD=IBD_" ("_$P(IBZ(IBLVL,IBCNT,IBPRVTYP),U,4)_")"
"RTN","IBJTCA1",89,0)
 ... S IBLN=$$SET(IBT,IBD,IBLN,IBLR),IBT="",IBD=$J("",5)
"RTN","IBJTCA1",90,0)
 ;
"RTN","IBJTCA1",91,0)
 S IBGRPE=IBLN,IBLN=IBGRPB+1,IBLR=2
"RTN","IBJTCA1",92,0)
 ;
"RTN","IBJTCA1",93,0)
 S IBT="Charge Type: ",IBD=$$EXSET^IBJU1($P(IBD0,U,27),399,.27) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",94,0)
 S IBT="Service Dates: ",IBD=$$DATE^IBJU1($P(IBDU,U,1))_" - "_$$DATE^IBJU1($P(IBDU,U,2)) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",95,0)
 S IBT="Orig Claim: ",IBD=$$BILL^RCJIBFN2(+IBIFN) S IBLN=$$SET(IBT,$J($P(IBD,U,1),9,2),IBLN,IBLR)
"RTN","IBJTCA1",96,0)
 S IBT="Balance Due: ",IBD=$J($P(IBD,U,3),9,2) S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",97,0)
 I +$P(IBDM,U,2) S IBX=$S($P(IBD0,U,21)="P":2,1:1) D  S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",98,0)
 . S IBT=$S(IBX=2:"Secondary",1:"Primary")_": ",IBD=$P($G(^DIC(36,+$P(IBDM,U,IBX),0)),U,1)
"RTN","IBJTCA1",99,0)
 . S IBX=$P(IBDU2,U,(IBX+3)) I +IBX S IBX="("_$J(IBX,0,2)_")" S IBD=$E(IBD,1,(IBSW(IBLR)-$L(IBX)-2))_"  "_IBX
"RTN","IBJTCA1",100,0)
 I +$P(IBDM,U,3) S IBX=$S($P(IBD0,U,21)="T":2,1:3) D  S IBLN=$$SET(IBT,IBD,IBLN,IBLR)
"RTN","IBJTCA1",101,0)
 . S IBT=$S(IBX=2:"Secondary",1:"Tertiary")_": ",IBD=$P($G(^DIC(36,+$P(IBDM,U,IBX),0)),U,1)
"RTN","IBJTCA1",102,0)
 . S IBX=$P(IBDU2,U,(IBX+3)) I +IBX S IBX="("_$J(IBX,0,2)_")" S IBD=$E(IBD,1,(IBSW(IBLR)-$L(IBX)-2))_"  "_IBX
"RTN","IBJTCA1",103,0)
 S IBLN=$$SET("","",IBLN,5)
"RTN","IBJTCA1",104,0)
 I IBWNR S IBT="MRA Rec Date: " D  S IBLN=$$SET(IBT,IBD,IBLN,2)
"RTN","IBJTCA1",105,0)
 . N Z
"RTN","IBJTCA1",106,0)
 . ; find last MRA for receipt date
"RTN","IBJTCA1",107,0)
 . S (IBD,Z)="" F  S Z=$O(^IBM(361.1,"B",IBIFN,Z),-1) Q:'Z  I $P($G(^IBM(361.1,Z,0)),U,4)=1 S IBD=$$DATE^IBJU1($P($P(^IBM(361.1,Z,0),U,6),".")) Q
"RTN","IBJTCA1",108,0)
 F Z=IBLN:1:IBGRPE S IBLN=$$SET("","",IBLN,5)
"RTN","IBJTCA1",109,0)
 ;
"RTN","IBJTCA1",110,0)
 S (IBLN,VALMCNT)=$S(IBLN>IBGRPE:IBLN,1:IBGRPE)
"RTN","IBJTCA1",111,0)
 ;
"RTN","IBJTCA1",112,0)
 S IBGRPB=IBLN,IBLR=1
"RTN","IBJTCA1",113,0)
 D CONT^IBJTCA2
"RTN","IBJTCA1",114,0)
 ;
"RTN","IBJTCA1",115,0)
COPAY I $O(^IBA(362.4,"C",IBIFN,0)) D
"RTN","IBJTCA1",116,0)
 . S (IBT,IBD)="" S IBLN=$$SET(IBT,IBD,IBLN,IBLR)   ; blank line
"RTN","IBJTCA1",117,0)
 . S IBT="Related Prescription Copay Information" S IBLN=$$SETN(IBT,IBLN,1,1)
"RTN","IBJTCA1",118,0)
 . N IBZ,IBX,IBC,IBCAP
"RTN","IBJTCA1",119,0)
 . S IBZ=0 F  S IBZ=$O(^IBA(362.4,"C",IBIFN,IBZ)) Q:'IBZ  D
"RTN","IBJTCA1",120,0)
 .. K ^TMP("IBTPJI",$J)
"RTN","IBJTCA1",121,0)
 .. S IBC=$G(^IBA(362.4,IBZ,0))
"RTN","IBJTCA1",122,0)
 .. D:$P(IBC,"^",5) RX^PSO52API($P(IBD0,"^",2),"IBTPJI",$P(IBC,"^",5),"","I^")
"RTN","IBJTCA1",123,0)
 .. ; original fill
"RTN","IBJTCA1",124,0)
 .. I $P(IBC,"^",10)=0 D
"RTN","IBJTCA1",125,0)
 ... S IBX=+$G(^TMP($J,"IBTPJI",$P(IBD0,"^",2),+$P(IBC,"^",5),106)),IBCAP=+$G(^(106.6))
"RTN","IBJTCA1",126,0)
 .. ; refills
"RTN","IBJTCA1",127,0)
 .. E  D
"RTN","IBJTCA1",128,0)
 ... S IBX=+$G(^TMP($J,"IBTPJI",$P(IBD0,"^",2),+$P(IBC,"^",5),"IB",+$P(IBC,"^",10),9)),IBCAP=+$G(^(9.1))
"RTN","IBJTCA1",129,0)
 .. I '$G(IBX),$G(IBCAP) S IBT="  <copay exceeded cap>",IBLN=$$SET(IBT,"",IBLN,4) Q
"RTN","IBJTCA1",130,0)
 .. I '$G(IBX) S IBT="  <none found>",IBLN=$$SET(IBT,"",IBLN,4) Q
"RTN","IBJTCA1",131,0)
 .. S IBX=$G(^IB(IBX,0))
"RTN","IBJTCA1",132,0)
 .. S IBT="Rx: "_$P(IBC,"^")_"  Chg: $"_$FN($P(IBX,"^",7),",",2)_"   Status: "_$$TITLE^XLFSTR($$EXTERNAL^DILFD(350,.05,"",$P(IBX,"^",5)))_"   Bill: "_$P(IBX,"^",11)
"RTN","IBJTCA1",133,0)
 .. S IBLN=$$SET(IBT,"",IBLN,4)
"RTN","IBJTCA1",134,0)
 K ^TMP("IBTPJI",$J)
"RTN","IBJTCA1",135,0)
 ;
"RTN","IBJTCA1",136,0)
 S (IBLN,VALMCNT)=IBLN-1
"RTN","IBJTCA1",137,0)
 ;
"RTN","IBJTCA1",138,0)
BLDQ Q
"RTN","IBJTCA1",139,0)
 ;
"RTN","IBJTCA1",140,0)
EMPL(DFN) ; returns employer name
"RTN","IBJTCA1",141,0)
 Q $P($G(^DPT(+DFN,.311)),U,1)
"RTN","IBJTCA1",142,0)
 ;
"RTN","IBJTCA1",143,0)
SET(TTL,DATA,LN,LR) ;
"RTN","IBJTCA1",144,0)
 N IBY
"RTN","IBJTCA1",145,0)
 S IBY=$J(TTL,IBTW(LR))_DATA D SET1(IBY,LN,IBTC(LR),(IBTW(LR)+IBSW(LR)))
"RTN","IBJTCA1",146,0)
 S LN=LN+1
"RTN","IBJTCA1",147,0)
 Q LN
"RTN","IBJTCA1",148,0)
 ;
"RTN","IBJTCA1",149,0)
SETN(TTL,LN,LR,RV) ;
"RTN","IBJTCA1",150,0)
 N IBY
"RTN","IBJTCA1",151,0)
 S IBY=" "_TTL_" " D SET1(IBY,LN,IBNC(LR),$L(IBY),$G(RV))
"RTN","IBJTCA1",152,0)
 S LN=LN+1
"RTN","IBJTCA1",153,0)
 Q LN
"RTN","IBJTCA1",154,0)
 ;
"RTN","IBJTCA1",155,0)
SET1(STR,LN,COL,WD,RV) ; set up TMP array with screen data
"RTN","IBJTCA1",156,0)
 N IBX S IBX=$G(^TMP("IBJTCA",$J,LN,0))
"RTN","IBJTCA1",157,0)
 S IBX=$$SETSTR^VALM1(STR,IBX,COL,WD)
"RTN","IBJTCA1",158,0)
 D SET^VALM10(LN,IBX) I $G(RV)'="" D CNTRL^VALM10(LN,COL,WD,IORVON,IORVOFF)
"RTN","IBJTCA1",159,0)
 Q
"RTN","IBNCPDP1")
0^10^B196557252^B197349742
"RTN","IBNCPDP1",1,0)
IBNCPDP1 ;OAK/ELZ - IB BILLING DETERMINATION PROCESSING FOR NEW RX REQUESTS ;5/22/08
"RTN","IBNCPDP1",2,0)
 ;;2.0;INTEGRATED BILLING;**223,276,339,363,383,405,384,411,434,437,435,455,452,473**;21-MAR-94;Build 29
"RTN","IBNCPDP1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBNCPDP1",4,0)
 ;
"RTN","IBNCPDP1",5,0)
 ; Reference to CL^SDCO21 supported by IA# 406
"RTN","IBNCPDP1",6,0)
 ; Reference to IN5^VADPT supported by IA# 10061
"RTN","IBNCPDP1",7,0)
 ; Reference to $$MWC^PSOBPSU2 supported by IA# 4970
"RTN","IBNCPDP1",8,0)
 ;
"RTN","IBNCPDP1",9,0)
RX(DFN,IBD) ; pharmacy package call, passing in IBD by ref
"RTN","IBNCPDP1",10,0)
 ; this is called by PSO for all prescriptions issued, return is
"RTN","IBNCPDP1",11,0)
 ; a response to bill ECME or not with array for billing data elements
"RTN","IBNCPDP1",12,0)
 ;
"RTN","IBNCPDP1",13,0)
 ;warning: back-billing flag:
"RTN","IBNCPDP1",14,0)
 ;if passed IBSCRES(IBRXN,IBFIL)=1
"RTN","IBNCPDP1",15,0)
 ; - then the SC Determination is just done by the IB clerk (billable)
"RTN","IBNCPDP1",16,0)
 ; - set by routine IBNCPBB
"RTN","IBNCPDP1",17,0)
 ;
"RTN","IBNCPDP1",18,0)
 ; IBD("PLAN") - is specified only if RX API is called for billing determination for 2ndary claim.
"RTN","IBNCPDP1",19,0)
 ;
"RTN","IBNCPDP1",20,0)
 ;clean up the list of non-answered SC/Env.indicators questions and INS
"RTN","IBNCPDP1",21,0)
 K IBD("SC/EI NO ANSW"),IBD("INS")
"RTN","IBNCPDP1",22,0)
 ;
"RTN","IBNCPDP1",23,0)
 N IBTRKR,IBARR,IBADT,IBRXN,IBFIL,IBTRKRN,IBRMARK,IBANY,IBX,IBT,IBINS,IBSAVE,IBPRDATA,IBDISPFEE,IBADMINFEE
"RTN","IBNCPDP1",24,0)
 N IBFEE,IBBI,IBIT,IBPRICE,IBRS,IBRT,IBTRN,IBCHG,IBRES,IBNEEDS,IBELIG,IBDEA,IBPTYP
"RTN","IBNCPDP1",25,0)
 ;
"RTN","IBNCPDP1",26,0)
 ; eligibility verification request flag - esg 9/9/10 IB*2*435
"RTN","IBNCPDP1",27,0)
 S IBELIG=($G(IBD("RX ACTION"))="ELIG")
"RTN","IBNCPDP1",28,0)
 ;
"RTN","IBNCPDP1",29,0)
 I '$G(DFN) S IBRES="0^No DFN" G RXQ
"RTN","IBNCPDP1",30,0)
 ;
"RTN","IBNCPDP1",31,0)
 S IBRES="0^Error"
"RTN","IBNCPDP1",32,0)
 S IBADT=+$G(IBD("DOS"),DT)      ; date of service (default to today)
"RTN","IBNCPDP1",33,0)
 ;
"RTN","IBNCPDP1",34,0)
 ; -- gather all active pharmacy insurance policies for patient on date of service
"RTN","IBNCPDP1",35,0)
 D RXINS^IBNCPDPU(DFN,IBADT,.IBINS)
"RTN","IBNCPDP1",36,0)
 ;
"RTN","IBNCPDP1",37,0)
 ; -- determine rate type
"RTN","IBNCPDP1",38,0)
 S IBRT=$$RT^IBNCPDPU(DFN,IBADT,.IBINS,.IBPTYP)
"RTN","IBNCPDP1",39,0)
 ;
"RTN","IBNCPDP1",40,0)
 ; If the rate type was selected by the user for manual primary or secondary claims processing, then update IBRT
"RTN","IBNCPDP1",41,0)
 I $G(IBD("RTYPE")),$G(IBD("PLAN")) D
"RTN","IBNCPDP1",42,0)
 . S $P(IBRT,U,1)=+IBD("RTYPE")                              ; overwrite the rate type ien [1]
"RTN","IBNCPDP1",43,0)
 . S $P(IBRT,U,2)=$$COSTTYP^IBNCPUT3(+IBD("RTYPE"),IBADT)    ; overwrite the basis of cost determination [2]
"RTN","IBNCPDP1",44,0)
 . I $P(IBRT,U,3)="" S $P(IBRT,U,3)=IBPTYP                   ; overwrite eligibility if null [3]
"RTN","IBNCPDP1",45,0)
 . Q
"RTN","IBNCPDP1",46,0)
 ;
"RTN","IBNCPDP1",47,0)
 ; -- Process an eligibility verification request
"RTN","IBNCPDP1",48,0)
 I IBELIG D  G RXQ
"RTN","IBNCPDP1",49,0)
 . S IBRES=1
"RTN","IBNCPDP1",50,0)
 . D SETINSUR(IBADT,IBRT,IBELIG,.IBINS,.IBD,.IBRES)
"RTN","IBNCPDP1",51,0)
 . Q
"RTN","IBNCPDP1",52,0)
 ;
"RTN","IBNCPDP1",53,0)
 ; additional data integrity checks
"RTN","IBNCPDP1",54,0)
 S IBRXN=+$G(IBD("IEN")) I 'IBRXN S IBRES="0^No Rx IEN" G RXQ
"RTN","IBNCPDP1",55,0)
 S IBFIL=+$G(IBD("FILL NUMBER"),-1) I IBFIL<0 S IBRES="0^No fill number" G RXQ
"RTN","IBNCPDP1",56,0)
 S IBD("QTY")=+$G(IBD("QTY")) I 'IBD("QTY") S IBRES="0^No Quantity" G RXQ
"RTN","IBNCPDP1",57,0)
 ;
"RTN","IBNCPDP1",58,0)
 ; -- Gather claims tracking information if it exists
"RTN","IBNCPDP1",59,0)
 S IBTRKR=$G(^IBE(350.9,1,6))
"RTN","IBNCPDP1",60,0)
 ; date can't be before parameters
"RTN","IBNCPDP1",61,0)
 S $P(IBTRKR,U)=$S('$P(IBTRKR,U,4):0,+IBTRKR&(IBADT<+IBTRKR):0,1:IBADT)
"RTN","IBNCPDP1",62,0)
 ; already in claims tracking
"RTN","IBNCPDP1",63,0)
 S IBTRKRN=+$O(^IBT(356,"ARXFL",IBRXN,IBFIL,0))
"RTN","IBNCPDP1",64,0)
 ;
"RTN","IBNCPDP1",65,0)
 ; -- Check for TRICARE Inpatient - esg 8/5/10 IB*2*434
"RTN","IBNCPDP1",66,0)
 I $P(IBRT,U,3)="T",$$INP(DFN,IBRXN,IBFIL) D  G RXQ
"RTN","IBNCPDP1",67,0)
 . S IBRMARK="TRICARE INPATIENT/DISCHARGE"            ; reason not billable
"RTN","IBNCPDP1",68,0)
 . D CT                                               ; update/add claims tracking entry
"RTN","IBNCPDP1",69,0)
 . S IBRES=0_U_IBRMARK                                ; not ECME billable
"RTN","IBNCPDP1",70,0)
 . Q
"RTN","IBNCPDP1",71,0)
 ;
"RTN","IBNCPDP1",72,0)
 ; -- Check for CHAMPVA Inpatient - esg 4/28/11 IB*2*452
"RTN","IBNCPDP1",73,0)
 I $P(IBRT,U,3)="C",$$INP(DFN,IBRXN,IBFIL) D  G RXQ
"RTN","IBNCPDP1",74,0)
 . S IBRMARK="CHAMPVA INPATIENT/DISCHARGE"            ; reason not billable
"RTN","IBNCPDP1",75,0)
 . D CT                                               ; update/add claims tracking entry
"RTN","IBNCPDP1",76,0)
 . S IBRES=0_U_IBRMARK                                ; not ECME billable
"RTN","IBNCPDP1",77,0)
 . Q
"RTN","IBNCPDP1",78,0)
 ;
"RTN","IBNCPDP1",79,0)
 ;for secondary billing - skip claim tracking functionality
"RTN","IBNCPDP1",80,0)
 G:$G(IBD("RXCOB"))>1 GETINS
"RTN","IBNCPDP1",81,0)
 ;
"RTN","IBNCPDP1",82,0)
 ; -- claims tracking info
"RTN","IBNCPDP1",83,0)
 I IBTRKRN,$$PAPERBIL^IBNCPNB(IBTRKRN) S IBRES="0^Existing IB Bill in CT",IBD("NO ECME INSURANCE")=1 G RXQ
"RTN","IBNCPDP1",84,0)
 ; already billed as TRICARE
"RTN","IBNCPDP1",85,0)
 I $D(^IBA(351.5,"B",IBRXN_";"_IBFIL)) S IBRES="0^Already billed under prior TRICARE process",IBD("NO ECME INSURANCE")=1 G RXQ
"RTN","IBNCPDP1",86,0)
 ;
"RTN","IBNCPDP1",87,0)
 ; -- no pharmacy coverage, update ct if applicable, quit
"RTN","IBNCPDP1",88,0)
 I '$$PTCOV^IBCNSU3(DFN,IBADT,"PHARMACY",.IBANY) S IBRMARK=$S($G(IBANY):"SERVICE NOT COVERED",1:"NOT INSURED") D:$P(IBTRKR,U,4)=2 CT S IBRES="0^"_IBRMARK,IBD("NO ECME INSURANCE")=1 G RXQ
"RTN","IBNCPDP1",89,0)
 ;
"RTN","IBNCPDP1",90,0)
 ;  -- check for DEA SPECIAL HDLG
"RTN","IBNCPDP1",91,0)
 S IBDEA=$$DEA^IBNCPDP($G(IBD("DEA")),.IBRMARK) I 'IBDEA S IBRES=IBDEA D CT G RXQ
"RTN","IBNCPDP1",92,0)
 ;
"RTN","IBNCPDP1",93,0)
 ;retrieve indicators from file #52 and overwrite the indicators in IBD array
"RTN","IBNCPDP1",94,0)
 D GETINDIC^IBNCPUT2(+IBD("IEN"),.IBD)
"RTN","IBNCPDP1",95,0)
 ; -- process patient exemptions if any (if not already resolved)
"RTN","IBNCPDP1",96,0)
 I $G(IBD("SC/EI OVR"))'=1 D CL^SDCO21(DFN,IBADT,"",.IBARR)
"RTN","IBNCPDP1",97,0)
 ; check out exemptions
"RTN","IBNCPDP1",98,0)
 S IBNEEDS=0 ;flag will be set to 1 if at least one of the questions wasn't answered
"RTN","IBNCPDP1",99,0)
 I $G(IBD("SC/EI OVR"))'=1 I $D(IBARR)>9 F IBX=2:1 S IBT=$P($T(EXEMPT+IBX),";;",2) Q:IBT=""  D:$D(IBARR(+IBT))
"RTN","IBNCPDP1",100,0)
 . I $G(IBD($P(IBT,U,2)))=0 Q
"RTN","IBNCPDP1",101,0)
 . I $G(IBD($P(IBT,U,2))) S IBRMARK=$P(IBT,U,3) Q
"RTN","IBNCPDP1",102,0)
 . I '$G(IBSCRES(IBRXN,IBFIL)) S IBNEEDS=1 D
"RTN","IBNCPDP1",103,0)
 . . S IBD("SC/EI NO ANSW")=$S($G(IBD("SC/EI NO ANSW"))="":$P(IBT,U,2),1:$G(IBD("SC/EI NO ANSW"))_","_$P(IBT,U,2))
"RTN","IBNCPDP1",104,0)
 I '$D(IBRMARK),IBNEEDS=1 S IBRMARK="NEEDS SC DETERMINATION"
"RTN","IBNCPDP1",105,0)
 I $D(IBRMARK) D CT S IBRES="0^"_IBRMARK G RXQ
"RTN","IBNCPDP1",106,0)
 ; Clean-up the NEEDS SC DETERMINATION record if resolved
"RTN","IBNCPDP1",107,0)
 ; And check if it is non-billable in CT
"RTN","IBNCPDP1",108,0)
 I IBTRKRN D
"RTN","IBNCPDP1",109,0)
 . N IBNBR,IBNBRT
"RTN","IBNCPDP1",110,0)
 . S IBNBR=$P($G(^IBT(356,+IBTRKRN,0)),U,19) Q:'IBNBR
"RTN","IBNCPDP1",111,0)
 . S IBNBRT=$P($G(^IBE(356.8,IBNBR,0)),U) Q:IBNBRT=""
"RTN","IBNCPDP1",112,0)
 . ; if refill was deleted (not RX) and now the refill is re-entered
"RTN","IBNCPDP1",113,0)
 . ;use $$RXSTATUS^IBNCPRR instead of $G(^PSRX(IBRXN,"STA"))
"RTN","IBNCPDP1",114,0)
 . I IBNBRT="PRESCRIPTION DELETED",$$RXSTATUS^IBNCPRR(DFN,IBRXN)'=13 D  Q
"RTN","IBNCPDP1",115,0)
 . . N DIE,DA,DR
"RTN","IBNCPDP1",116,0)
 . . ; clean up REASON NOT BILLABLE and ADDITIONAL COMMENT
"RTN","IBNCPDP1",117,0)
 . . S DIE="^IBT(356,",DA=+IBTRKRN,DR=".19////@;1.08////@" D ^DIE
"RTN","IBNCPDP1",118,0)
 . ; Clean up NBR if released
"RTN","IBNCPDP1",119,0)
 . I IBNBRT="PRESCRIPTION NOT RELEASED" D:$G(IBD("RELEASE DATE"))  Q
"RTN","IBNCPDP1",120,0)
 . . N DIE,DA,DR
"RTN","IBNCPDP1",121,0)
 . . S DIE="^IBT(356,",DA=+IBTRKRN,DR=".19////@" D ^DIE
"RTN","IBNCPDP1",122,0)
 . ; Clean up 'Needs SC determ'
"RTN","IBNCPDP1",123,0)
 . I IBNBRT="NEEDS SC DETERMINATION" D  Q
"RTN","IBNCPDP1",124,0)
 . . N DIE,DA,DR
"RTN","IBNCPDP1",125,0)
 . . S DIE="^IBT(356,",DA=+IBTRKRN,DR=".19////@" D ^DIE
"RTN","IBNCPDP1",126,0)
 . S IBRMARK=IBNBRT
"RTN","IBNCPDP1",127,0)
 I $D(IBRMARK) S IBRES="0^Non-Billable in CT: "_IBRMARK G RXQ
"RTN","IBNCPDP1",128,0)
 ;
"RTN","IBNCPDP1",129,0)
GETINS ; -- setup insurance data for patient
"RTN","IBNCPDP1",130,0)
 ;
"RTN","IBNCPDP1",131,0)
 D SETINSUR(IBADT,IBRT,IBELIG,.IBINS,.IBD,.IBRES)       ; build IBD("INS") insurance array
"RTN","IBNCPDP1",132,0)
 I $G(IBD("NO ECME INSURANCE")) G RXQ
"RTN","IBNCPDP1",133,0)
 ;
"RTN","IBNCPDP1",134,0)
 ;for secondary billing - skip ROI functionality
"RTN","IBNCPDP1",135,0)
 G:$G(IBD("RXCOB"))>1 RATEPRIC
"RTN","IBNCPDP1",136,0)
 ;
"RTN","IBNCPDP1",137,0)
 ; -- check drug for sensitive dx special handling code and ROI on file
"RTN","IBNCPDP1",138,0)
 I IBD("DEA")["U",$D(IBD("INS",1,3)) D  G:$D(IBRMARK) RXQ
"RTN","IBNCPDP1",139,0)
 . I '$$ROI^IBNCPDR4(DFN,$G(IBD("DRUG")),+$P($G(IBD("INS",1,3)),U,5),IBADT) D  Q
"RTN","IBNCPDP1",140,0)
 .. S IBRMARK="REFUSES TO SIGN RELEASE (ROI)"
"RTN","IBNCPDP1",141,0)
 .. D CT
"RTN","IBNCPDP1",142,0)
 .. S IBRES="0^NOT BILLABLE, NO ROI - NO ACTIVE ROI ON FILE"
"RTN","IBNCPDP1",143,0)
 . D ROICLN^IBNCPDR4(IBTRKRN,IBRXN,IBFIL) K:$G(IBRMARK)="REFUSES TO SIGN RELEASE (ROI)" IBRMARK
"RTN","IBNCPDP1",144,0)
 ;
"RTN","IBNCPDP1",145,0)
RATEPRIC ;
"RTN","IBNCPDP1",146,0)
 ; determine rates/prices to use
"RTN","IBNCPDP1",147,0)
 I 'IBRT D CT S IBRES="0^Cannot determine Rate type" G RXQ
"RTN","IBNCPDP1",148,0)
 S IBBI=$$EVNTITM^IBCRU3(+IBRT,3,"PRESCRIPTION FILL",IBADT,.IBRS)
"RTN","IBNCPDP1",149,0)
 I 'IBBI,$P(IBBI,";")'="VA COST" D CT S IBRES="0^Cannot find Billable Item" G RXQ
"RTN","IBNCPDP1",150,0)
 ;
"RTN","IBNCPDP1",151,0)
 ; Check for missing NDC
"RTN","IBNCPDP1",152,0)
 I $G(IBD("NDC"))="" D CT S IBRES="0^Missing NDC" G RXQ
"RTN","IBNCPDP1",153,0)
 ;
"RTN","IBNCPDP1",154,0)
 ;1;BEDSECTION;1^
"RTN","IBNCPDP1",155,0)
 ;IBRS(1,18,5)=
"RTN","IBNCPDP1",156,0)
 S IBRS=+$O(IBRS($P(IBBI,";"),0))
"RTN","IBNCPDP1",157,0)
 S IBIT=$$ITPTR^IBCRU2($P(IBBI,";"),$S($P(IBRT,U,2)="A":$$NDC^IBNCPNB($G(IBD("NDC"))),1:"PRESCRIPTION"))
"RTN","IBNCPDP1",158,0)
 I 'IBIT,$P(IBRT,U,2)'="C" D CT S IBRES="0^Cannot find Item Pointer" G RXQ
"RTN","IBNCPDP1",159,0)
 ;8
"RTN","IBNCPDP1",160,0)
 S IBPRICE=+$$BICOST^IBCRCI(+IBRT,3,IBADT,"PRESCRIPTION FILL",+IBIT,,,$S($P(IBRT,U,2)="A":IBD("QTY"),1:1))
"RTN","IBNCPDP1",161,0)
 ;36^2991001
"RTN","IBNCPDP1",162,0)
 ;
"RTN","IBNCPDP1",163,0)
 ; return the true value of drug cost for 3rd party bill if it is zero
"RTN","IBNCPDP1",164,0)
 I IBD("COST")=0,$P($G(^DGCR(399.3,+$P(IBRT,U,1),0)),U,5) S IBD("COST")=$$RXPCT(.IBD,.BWHERE)
"RTN","IBNCPDP1",165,0)
 ;
"RTN","IBNCPDP1",166,0)
 ; get fees if any, ignore return, don't care about price, just need fees
"RTN","IBNCPDP1",167,0)
 S IBCHG=$$RATECHG^IBCRCC(+IBRS,$S($P(IBRT,U,2)'="C":1,1:IBD("QTY")*IBD("COST")),IBADT,.IBFEE)
"RTN","IBNCPDP1",168,0)
 I $P(IBRT,U,2)="C" S IBPRICE=+IBCHG
"RTN","IBNCPDP1",169,0)
 ;
"RTN","IBNCPDP1",170,0)
 S IBDISPFEE=+$P($G(IBFEE),U,1)     ; dispensing fee
"RTN","IBNCPDP1",171,0)
 S IBADMINFEE=+$P($G(IBFEE),U,2)    ; administrative fee
"RTN","IBNCPDP1",172,0)
 ;
"RTN","IBNCPDP1",173,0)
 I 'IBPRICE D CT S IBRES="0^Cannot find price for Item" G RXQ
"RTN","IBNCPDP1",174,0)
 ;
"RTN","IBNCPDP1",175,0)
 ; build pricing data string
"RTN","IBNCPDP1",176,0)
 S IBPRDATA=""
"RTN","IBNCPDP1",177,0)
 S $P(IBPRDATA,U,1)=IBDISPFEE                     ; dispensing fee
"RTN","IBNCPDP1",178,0)
 S $P(IBPRDATA,U,2)=$S($P(IBRT,U,2)="A":"01",$P(IBRT,U,2)="C":"05",1:"07")   ; basis of cost determination
"RTN","IBNCPDP1",179,0)
 S $P(IBPRDATA,U,3)=$S($P(IBRT,U,2)="C":IBD("QTY")*IBD("COST")+IBDISPFEE,$P(IBRT,U,2)="A":IBPRICE-IBDISPFEE-IBADMINFEE,1:IBPRICE)   ; basis of cost amount
"RTN","IBNCPDP1",180,0)
 S $P(IBPRDATA,U,4)=IBPRICE                       ; gross amount due
"RTN","IBNCPDP1",181,0)
 S $P(IBPRDATA,U,5)=IBADMINFEE                    ; administrative fee
"RTN","IBNCPDP1",182,0)
 S $P(IBPRDATA,U,6)=IBD("QTY")*IBD("COST")        ; ingredient cost
"RTN","IBNCPDP1",183,0)
 S $P(IBPRDATA,U,7)=IBPRICE-IBADMINFEE            ; usual & customary charge (U&C)
"RTN","IBNCPDP1",184,0)
 ;
"RTN","IBNCPDP1",185,0)
 ; store the pricing data string on each node 2 that may exist
"RTN","IBNCPDP1",186,0)
 S IBX=0 F  S IBX=$O(IBD("INS",IBX)) Q:'IBX  S IBD("INS",IBX,2)=IBPRDATA
"RTN","IBNCPDP1",187,0)
 ;
"RTN","IBNCPDP1",188,0)
 ;Check for non-covered drugs
"RTN","IBNCPDP1",189,0)
 S IBRES=$$CHCK^IBNCDNC(.IBD) I IBRES]"" S IBRMARK=$P(IBRES,U,2) D CT G RXQ
"RTN","IBNCPDP1",190,0)
 ;
"RTN","IBNCPDP1",191,0)
 S IBRES=$S($D(IBRMARK):"0^"_IBRMARK,1:1)
"RTN","IBNCPDP1",192,0)
 I IBRES,'$G(IBD("RELEASE DATE")) S IBRMARK="PRESCRIPTION NOT RELEASED"
"RTN","IBNCPDP1",193,0)
 ;
"RTN","IBNCPDP1",194,0)
 D CT
"RTN","IBNCPDP1",195,0)
 ;
"RTN","IBNCPDP1",196,0)
RXQ ; final processing
"RTN","IBNCPDP1",197,0)
 ; set the 3rd piece of IBRES (default Vet)
"RTN","IBNCPDP1",198,0)
 S $P(IBRES,U,3)=$S($L($P($G(IBRT),U,3)):$P(IBRT,U,3),1:"V")
"RTN","IBNCPDP1",199,0)
 ;
"RTN","IBNCPDP1",200,0)
 ; possibly add entries to files 366.14 and 366.15 (not for eligibility verification requests)
"RTN","IBNCPDP1",201,0)
 I 'IBELIG D
"RTN","IBNCPDP1",202,0)
 . I IBRES D START^IBNCPDP6(IBRXN_";"_IBFIL,$P(IBRES,U,3),+IBRT)
"RTN","IBNCPDP1",203,0)
 . D LOG^IBNCPDP2("BILLABLE STATUS CHECK",IBRES)
"RTN","IBNCPDP1",204,0)
 . Q
"RTN","IBNCPDP1",205,0)
 ;
"RTN","IBNCPDP1",206,0)
 Q IBRES
"RTN","IBNCPDP1",207,0)
 ;
"RTN","IBNCPDP1",208,0)
 ;
"RTN","IBNCPDP1",209,0)
CT ; files in claims tracking
"RTN","IBNCPDP1",210,0)
 Q:$G(IBD("RXCOB"))>1  ;Claim Tracking is updated only for the primary payer (payer sequence =1)
"RTN","IBNCPDP1",211,0)
 ;If null then the payer sequence = Primary is assumed
"RTN","IBNCPDP1",212,0)
 I IBTRKR D CT^IBNCPDPU(DFN,IBRXN,IBFIL,IBADT,$G(IBRMARK))
"RTN","IBNCPDP1",213,0)
 Q
"RTN","IBNCPDP1",214,0)
 ;
"RTN","IBNCPDP1",215,0)
SETINSUR(IBADT,IBRT,IBELIG,IBINS,IBD,IBRES) ; build insurance data array
"RTN","IBNCPDP1",216,0)
 ; Input variables:
"RTN","IBNCPDP1",217,0)
 ;    IBADT - date of service/identify insurance as of this date
"RTN","IBNCPDP1",218,0)
 ;     IBRT - rate type variable - [1] rate type ien, [2] type (A/C/T), [3] eligibility (V/T/C)
"RTN","IBNCPDP1",219,0)
 ;   IBELIG - eligibility request flag (1/0)
"RTN","IBNCPDP1",220,0)
 ;    IBINS - insurance array as returned by RXINS^IBNCPDPU
"RTN","IBNCPDP1",221,0)
 ;      IBD - input/output - array entries passed in and certain array entries returned
"RTN","IBNCPDP1",222,0)
 ; Output variable:
"RTN","IBNCPDP1",223,0)
 ;    IBRES - only returned if insurance errors
"RTN","IBNCPDP1",224,0)
 ;
"RTN","IBNCPDP1",225,0)
 ; Note: if more than one insurance with the same COB then the latest insurance occurrence overrides the first one(s)
"RTN","IBNCPDP1",226,0)
 ; Example:
"RTN","IBNCPDP1",227,0)
 ; IBINS("S",1,1)=""
"RTN","IBNCPDP1",228,0)
 ; IBINS("S",1,3)="" <<--- this will be primary
"RTN","IBNCPDP1",229,0)
 ;
"RTN","IBNCPDP1",230,0)
 K IBD("INS"),IBD("NO ECME INSURANCE")
"RTN","IBNCPDP1",231,0)
 ;
"RTN","IBNCPDP1",232,0)
 N IBCNT,IBERMSG,IBRXPOL,IBT,IBX
"RTN","IBNCPDP1",233,0)
 ; IBERMSG - error message array
"RTN","IBNCPDP1",234,0)
 ; IBRXPOL - array of Rx policies found
"RTN","IBNCPDP1",235,0)
 ;
"RTN","IBNCPDP1",236,0)
 S IBX=0 F  S IBX=$O(IBINS("S",IBX)) Q:'IBX  D
"RTN","IBNCPDP1",237,0)
 . S IBT=0 F  S IBT=$O(IBINS("S",IBX,IBT)) Q:'IBT  D
"RTN","IBNCPDP1",238,0)
 .. N IBDAT,IBPL,IBINSN,IBPIEN,IBY,IBZ,IBCHNM,IBREL,IBPLNTYP
"RTN","IBNCPDP1",239,0)
 .. S IBZ=$G(IBINS(IBT,0)) Q:IBZ=""
"RTN","IBNCPDP1",240,0)
 .. S IBPL=$P(IBZ,U,18) ; plan
"RTN","IBNCPDP1",241,0)
 .. Q:'IBPL
"RTN","IBNCPDP1",242,0)
 .. Q:'$$PLCOV^IBCNSU3(IBPL,IBADT,3)           ; not a pharmacy plan
"RTN","IBNCPDP1",243,0)
 .. I $G(IBD("PLAN")) Q:IBPL'=$G(IBD("PLAN"))  ; skip other plans if we call RX API for a specific plan (IBD("PLAN"))
"RTN","IBNCPDP1",244,0)
 .. ;
"RTN","IBNCPDP1",245,0)
 .. ; at this point we have found an Rx policy.  We'll count these up later by IBX.
"RTN","IBNCPDP1",246,0)
 .. S IBRXPOL(IBX,IBT)=""
"RTN","IBNCPDP1",247,0)
 .. ;
"RTN","IBNCPDP1",248,0)
 .. S IBPLNTYP=$P($G(^IBE(355.1,+$P($G(IBINS(IBT,355.3)),U,9),0)),U,1)   ; type of plan name, insurance plan type
"RTN","IBNCPDP1",249,0)
 .. I '$G(IBD("PLAN")) I '$D(IBD("INS",IBX)),$P(IBRT,U,3)="V",(IBPLNTYP["TRICARE"!(IBPLNTYP="CHAMPVA")) S IBERMSG(IBX)=IBPLNTYP_" coverage for a Veteran" Q
"RTN","IBNCPDP1",250,0)
 .. ;
"RTN","IBNCPDP1",251,0)
 .. S IBPIEN=+$G(^IBA(355.3,+IBPL,6))
"RTN","IBNCPDP1",252,0)
 .. I 'IBPIEN S IBERMSG(IBX)="Plan not linked to the Payer" Q  ; Not linked
"RTN","IBNCPDP1",253,0)
 .. ;
"RTN","IBNCPDP1",254,0)
 .. K IBY D STCHK^IBCNRU1(IBPIEN,.IBY,IBELIG)
"RTN","IBNCPDP1",255,0)
 .. I $E($G(IBY(1)))'="A" S IBERMSG(IBX)=$$ERMSG^IBNCPNB($G(IBY(6))) Q  ; not active
"RTN","IBNCPDP1",256,0)
 .. ;
"RTN","IBNCPDP1",257,0)
 .. ; at this point we have a valid policy for this IBX
"RTN","IBNCPDP1",258,0)
 .. S IBERMSG(IBX)=""          ; no error message
"RTN","IBNCPDP1",259,0)
 .. S IBINSN=$P($G(^DIC(36,+$G(^IBA(355.3,+IBPL,0)),0)),U) ; ins name
"RTN","IBNCPDP1",260,0)
 .. S IBCHNM=$$NAME^IBCEFG1($P(IBZ,U,17))   ; standardize subscriber/cardholder name
"RTN","IBNCPDP1",261,0)
 .. S IBREL=+$P($G(IBINS(IBT,4)),U,5)       ; pointer to pharmacy relationship code file
"RTN","IBNCPDP1",262,0)
 .. ; use the #4.05 field if it exists, otherwise use the old pt relationship field #16
"RTN","IBNCPDP1",263,0)
 .. S IBREL=$S(IBREL:$$EXTERNAL^DILFD(2.312,4.05,,IBREL),1:$P(IBZ,U,16))
"RTN","IBNCPDP1",264,0)
 .. ;
"RTN","IBNCPDP1",265,0)
 .. S IBDAT=""
"RTN","IBNCPDP1",266,0)
 .. S $P(IBDAT,U,1)=IBPL       ; Plan IEN
"RTN","IBNCPDP1",267,0)
 .. S $P(IBDAT,U,2)=$G(IBY(2)) ; BIN
"RTN","IBNCPDP1",268,0)
 .. S $P(IBDAT,U,3)=$G(IBY(3)) ; PCN
"RTN","IBNCPDP1",269,0)
 .. S $P(IBDAT,U,4)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",1),0)),U) ; Payer Sheet B1 name
"RTN","IBNCPDP1",270,0)
 .. S $P(IBDAT,U,5)=$P($G(IBINS(IBT,355.3)),U,4) ; Group ID
"RTN","IBNCPDP1",271,0)
 .. S $P(IBDAT,U,6)=$P(IBZ,U,2)     ; Cardholder ID
"RTN","IBNCPDP1",272,0)
 .. S $P(IBDAT,U,7)=IBREL           ; Patient Relationship Code
"RTN","IBNCPDP1",273,0)
 .. S $P(IBDAT,U,8)=$P(IBCHNM,U,2)  ; Cardholder First Name
"RTN","IBNCPDP1",274,0)
 .. S $P(IBDAT,U,9)=$P(IBCHNM,U,1)  ; Cardholder Last Name
"RTN","IBNCPDP1",275,0)
 .. S $P(IBDAT,U,10)=$P($G(^DIC(36,+IBZ,.11)),U,5) ; State
"RTN","IBNCPDP1",276,0)
 .. S $P(IBDAT,U,11)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",2),0)),U) ; Payer Sheet B2 name
"RTN","IBNCPDP1",277,0)
 .. S $P(IBDAT,U,12)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",3),0)),U) ; Payer Sheet B3 name
"RTN","IBNCPDP1",278,0)
 .. S $P(IBDAT,U,13)=$G(IBY(4)) ; Software/Vendor Cert ID
"RTN","IBNCPDP1",279,0)
 .. S $P(IBDAT,U,14)=IBINSN ; Ins Name
"RTN","IBNCPDP1",280,0)
 .. S $P(IBDAT,U,15)=$P($G(^BPSF(9002313.92,+$P($G(IBY(5)),",",4),0)),U) ; Payer Sheet E1 name
"RTN","IBNCPDP1",281,0)
 .. S $P(IBDAT,U,16)=+$P($G(IBY(5)),",",1)     ; Payer Sheet B1 ien
"RTN","IBNCPDP1",282,0)
 .. S $P(IBDAT,U,17)=+$P($G(IBY(5)),",",2)     ; Payer Sheet B2 ien
"RTN","IBNCPDP1",283,0)
 .. S $P(IBDAT,U,18)=+$P($G(IBY(5)),",",3)     ; Payer Sheet B3 ien
"RTN","IBNCPDP1",284,0)
 .. S $P(IBDAT,U,19)=+$P($G(IBY(5)),",",4)     ; Payer Sheet E1 ien
"RTN","IBNCPDP1",285,0)
 .. S $P(IBDAT,U,20)=$P($G(IBINS(IBT,4)),U,6)  ; Pharmacy Person Code
"RTN","IBNCPDP1",286,0)
 .. S IBD("INS",IBX,1)=IBDAT
"RTN","IBNCPDP1",287,0)
 .. ;
"RTN","IBNCPDP1",288,0)
 .. S IBDAT=""
"RTN","IBNCPDP1",289,0)
 .. S $P(IBDAT,U,1)=$P($G(IBINS(IBT,355.3)),U,3) ;group name
"RTN","IBNCPDP1",290,0)
 .. S $P(IBDAT,U,2)=$$PHONE^IBNCPDP6(+IBZ) ;ins co ph 3
"RTN","IBNCPDP1",291,0)
 .. S $P(IBDAT,U,3)=$$GET1^DIQ(366.03,IBPIEN_",",.01) ;plan ID
"RTN","IBNCPDP1",292,0)
 .. S $P(IBDAT,U,4)=$S(IBPLNTYP="TRICARE":"T",IBPLNTYP="CHAMPVA":"C",1:"V") ; plan type
"RTN","IBNCPDP1",293,0)
 .. S $P(IBDAT,U,5)=+$G(^IBA(355.3,+IBPL,0)) ; insurance co ien
"RTN","IBNCPDP1",294,0)
 .. S $P(IBDAT,U,6)=$P(IBZ,U,20) ;(#.2) COB field of the (#.3121) insurance Type multiple of the Patient file (#2)
"RTN","IBNCPDP1",295,0)
 .. S $P(IBDAT,U,7)=IBT  ; 2.312 subfile ien
"RTN","IBNCPDP1",296,0)
 .. S $P(IBDAT,U,8)=$$GET1^DIQ(366.03,IBPIEN_",",10.1) ; maximum ncpdp transactions
"RTN","IBNCPDP1",297,0)
 .. S IBD("INS",IBX,3)=IBDAT
"RTN","IBNCPDP1",298,0)
 .. Q
"RTN","IBNCPDP1",299,0)
 . Q
"RTN","IBNCPDP1",300,0)
 ;
"RTN","IBNCPDP1",301,0)
 ; Count the number of pharmacy insurance policies by IBX found up above
"RTN","IBNCPDP1",302,0)
 S IBX=0 F IBCNT=0:1 S IBX=$O(IBRXPOL(IBX)) Q:'IBX
"RTN","IBNCPDP1",303,0)
 ;
"RTN","IBNCPDP1",304,0)
 ; Determine the value of the IBX variable here.  This is basically the COB sequence# to be used.
"RTN","IBNCPDP1",305,0)
 ; If there is only 1 pharmacy policy or no pharmacy policies, then set IBX in this manner
"RTN","IBNCPDP1",306,0)
 I IBCNT'>1 D
"RTN","IBNCPDP1",307,0)
 . I $D(IBD("INS")) S IBX=+$O(IBD("INS",0))     ; use the only one in this array
"RTN","IBNCPDP1",308,0)
 . I '$D(IBD("INS")) S IBX=+$O(IBERMSG(0))      ; the only one here (or 0)
"RTN","IBNCPDP1",309,0)
 . Q
"RTN","IBNCPDP1",310,0)
 ;
"RTN","IBNCPDP1",311,0)
 ; If there are multiple pharmacy policies on file, then the COB field in the pt. policy must be used correctly
"RTN","IBNCPDP1",312,0)
 ;   and primary insurance must be at #1
"RTN","IBNCPDP1",313,0)
 I IBCNT>1 S IBX=1
"RTN","IBNCPDP1",314,0)
 ;
"RTN","IBNCPDP1",315,0)
 ; In all cases, if this variable is set, then use it
"RTN","IBNCPDP1",316,0)
 I $G(IBD("RXCOB"))>1 S IBX=$G(IBD("RXCOB"))
"RTN","IBNCPDP1",317,0)
 ;
"RTN","IBNCPDP1",318,0)
 ; Check insurance at IBX
"RTN","IBNCPDP1",319,0)
 I '$D(IBD("INS",IBX)),$G(IBERMSG(IBX))'="" S IBRES="0^Not ECME billable: "_IBERMSG(IBX),IBD("NO ECME INSURANCE")=1 G SETINX
"RTN","IBNCPDP1",320,0)
 I '$D(IBD("INS",IBX)) S IBRES="0^No Insurance ECME billable",IBD("NO ECME INSURANCE")=1
"RTN","IBNCPDP1",321,0)
SETINX ;
"RTN","IBNCPDP1",322,0)
 Q
"RTN","IBNCPDP1",323,0)
 ;
"RTN","IBNCPDP1",324,0)
INP(DFN,IBRXN,IBFIL) ; Is this an inpatient, NON-BILLABLE Rx as of the Issue Date?    esg 8/5/10 - IB*2*434
"RTN","IBNCPDP1",325,0)
 N INP,VAHOW,VAROOT,IBRXINP,VAIP,IBRXISUE,IBMW
"RTN","IBNCPDP1",326,0)
 S INP=0
"RTN","IBNCPDP1",327,0)
 ;
"RTN","IBNCPDP1",328,0)
 S VAROOT="IBRXINP"
"RTN","IBNCPDP1",329,0)
 S IBRXISUE=$$FILE^IBRXUTL(IBRXN,1)\1   ; Rx Issue Date (Field# 1)
"RTN","IBNCPDP1",330,0)
 I 'IBRXISUE S IBRXISUE=DT
"RTN","IBNCPDP1",331,0)
 S VAIP("D")=IBRXISUE        ; if pt was an inpatient at any time during this day
"RTN","IBNCPDP1",332,0)
 D IN5^VADPT                 ; DBIA 10061 - inpatient episode API
"RTN","IBNCPDP1",333,0)
 I '$G(IBRXINP(1)) G INPX    ; not an inpatient on this day
"RTN","IBNCPDP1",334,0)
 ;
"RTN","IBNCPDP1",335,0)
 ; check Rx issue date = discharge date. This is billable so get out (esg 9/13/10)
"RTN","IBNCPDP1",336,0)
 I IBRXISUE=(+$G(IBRXINP(17,1))\1) G INPX
"RTN","IBNCPDP1",337,0)
 ;
"RTN","IBNCPDP1",338,0)
 ; if Rx/fill is MAIL, then this is billable so get out (esg 9/13/10)
"RTN","IBNCPDP1",339,0)
 I IBFIL S IBMW=$$SUBFILE^IBRXUTL(IBRXN,IBFIL,52,2)    ; 52.1,2 MAIL/WINDOW field
"RTN","IBNCPDP1",340,0)
 I 'IBFIL S IBMW=$$FILE^IBRXUTL(IBRXN,11)              ; 52,11 MAIL/WINDOW field
"RTN","IBNCPDP1",341,0)
 I IBMW="M" G INPX
"RTN","IBNCPDP1",342,0)
 ;
"RTN","IBNCPDP1",343,0)
 ; inpatient and non-billable
"RTN","IBNCPDP1",344,0)
 S INP=1
"RTN","IBNCPDP1",345,0)
INPX ;
"RTN","IBNCPDP1",346,0)
 Q INP
"RTN","IBNCPDP1",347,0)
 ;
"RTN","IBNCPDP1",348,0)
RXPCT(IBD,BWHERE) ; Penny drug cost calculation
"RTN","IBNCPDP1",349,0)
 ; Input-IBD array, BWHERE
"RTN","IBNCPDP1",350,0)
 ; Output-return quotient of drug true value with 4 decimal places, or 0
"RTN","IBNCPDP1",351,0)
 N IBDIEN,IBDRX,IBNDC,IBFRM,IBDRFL,IBUNIT,IBSYN,IBQUO,IBDQUO,IBPSUF,IBPORD,IBPDISP,IBDRUG
"RTN","IBNCPDP1",352,0)
 S IBDIEN=IBD("IEN"),IBNDC=IBD("NDC"),IBDRX=IBD("DRUG"),IBDRFL=IBD("FILL NUMBER")
"RTN","IBNCPDP1",353,0)
 S IBFRM=$G(BWHERE),IBQUO=0
"RTN","IBNCPDP1",354,0)
 G:'IBDRX RXPCTQ
"RTN","IBNCPDP1",355,0)
 ; default unit price from (50-13/15)
"RTN","IBNCPDP1",356,0)
 D GETS^DIQ(50,IBDRX,".01;13;15","I","IBUNIT")
"RTN","IBNCPDP1",357,0)
 S IBPORD=$G(IBUNIT(50,IBDRX_",",13,"I"))
"RTN","IBNCPDP1",358,0)
 S IBPDISP=$G(IBUNIT(50,IBDRX_",",15,"I"))
"RTN","IBNCPDP1",359,0)
 S (IBDQUO,IBQUO)=$S(IBPORD&IBPDISP:(IBPORD/IBPDISP),1:0)
"RTN","IBNCPDP1",360,0)
 ;
"RTN","IBNCPDP1",361,0)
 ; unit price from (50.1-402/403) if NDC exists in the SYNONYM subfile
"RTN","IBNCPDP1",362,0)
 D DATA^IBRXUTL(IBDRX)
"RTN","IBNCPDP1",363,0)
 S IBSYN=0 F  S IBSYN=$O(^TMP($J,"IBDRUG",IBDRX,"SYN",IBSYN)) Q:'IBSYN  D
"RTN","IBNCPDP1",364,0)
 . I IBNDC'="",$G(^TMP($J,"IBDRUG",IBDRX,"SYN",IBSYN,2))=IBNDC D
"RTN","IBNCPDP1",365,0)
 .. S IBPSUF=IBSYN_","_IBDRX_","
"RTN","IBNCPDP1",366,0)
 .. D GETS^DIQ(50.1,IBPSUF,".01;402;403","I","IBUNIT")
"RTN","IBNCPDP1",367,0)
 .. S IBPORD=$G(IBUNIT(50.1,IBPSUF,402,"I"))
"RTN","IBNCPDP1",368,0)
 .. S IBPDISP=$G(IBUNIT(50.1,IBPSUF,403,"I"))
"RTN","IBNCPDP1",369,0)
 .. S IBQUO=$S(IBPORD&IBPDISP:(IBPORD/IBPDISP),1:0)
"RTN","IBNCPDP1",370,0)
 ;
"RTN","IBNCPDP1",371,0)
 ; API #4970 - use the default unit price for CMOP
"RTN","IBNCPDP1",372,0)
 I $$MWC^PSOBPSU2(IBDIEN,IBDRFL)="C" D
"RTN","IBNCPDP1",373,0)
 . Q:(IBFRM="PE")!(IBFRM="PP")
"RTN","IBNCPDP1",374,0)
 . S IBQUO=IBDQUO
"RTN","IBNCPDP1",375,0)
 ; set the lowest value 0.0001 with 4 decimal if less than 0.00005
"RTN","IBNCPDP1",376,0)
 I IBQUO S IBQUO=$J(IBQUO,1,4),IBQUO=$S(IBQUO>0:IBQUO,1:"0.0001")
"RTN","IBNCPDP1",377,0)
 K ^TMP($J,"IBDRUG")
"RTN","IBNCPDP1",378,0)
RXPCTQ ;
"RTN","IBNCPDP1",379,0)
 Q IBQUO
"RTN","IBNCPDP1",380,0)
 ;
"RTN","IBNCPDP1",381,0)
EXEMPT ; exemption reasons
"RTN","IBNCPDP1",382,0)
 ; variable from SD call ^ variable from PSO ^ reason not billable
"RTN","IBNCPDP1",383,0)
 ;;1^AO^AGENT ORANGE
"RTN","IBNCPDP1",384,0)
 ;;2^IR^IONIZING RADIATION
"RTN","IBNCPDP1",385,0)
 ;;3^SC^SC TREATMENT
"RTN","IBNCPDP1",386,0)
 ;;4^SWA^SOUTHWEST ASIA
"RTN","IBNCPDP1",387,0)
 ;;5^MST^MILITARY SEXUAL TRAUMA
"RTN","IBNCPDP1",388,0)
 ;;6^HNC^HEAD/NECK CANCER
"RTN","IBNCPDP1",389,0)
 ;;7^CV^COMBAT VETERAN
"RTN","IBNCPDP1",390,0)
 ;;8^SHAD^PROJECT 112/SHAD
"RTN","IBNCPDP1",391,0)
 ;;
"RTN","IBNCPDP1",392,0)
 ;
"RTN","IBY473PO")
0^4^B10300393^n/a
"RTN","IBY473PO",1,0)
IBY473PO ;ALB/ESG - Post Install for IB patch 473 ;2-FEB-2012
"RTN","IBY473PO",2,0)
 ;;2.0;INTEGRATED BILLING;**473**;21-MAR-94;Build 29
"RTN","IBY473PO",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBY473PO",4,0)
 ;
"RTN","IBY473PO",5,0)
EN ; entry point
"RTN","IBY473PO",6,0)
 N XPDIDTOT
"RTN","IBY473PO",7,0)
 S XPDIDTOT=2
"RTN","IBY473PO",8,0)
 D CVA(1)           ; update CHAMPVA Rx rate schedules
"RTN","IBY473PO",9,0)
 D TRI(2)           ; update TRICARE Rx rate schedules
"RTN","IBY473PO",10,0)
 ;
"RTN","IBY473PO",11,0)
EX ; exit point
"RTN","IBY473PO",12,0)
 Q
"RTN","IBY473PO",13,0)
 ;
"RTN","IBY473PO",14,0)
CVA(IBXPD) ; update CHAMPVA Rx rate schedule data
"RTN","IBY473PO",15,0)
 N IBMSG,IBRXBS,ERO,ERB,RSNAME
"RTN","IBY473PO",16,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY473PO",17,0)
 D MES^XPDUTL("-------------")
"RTN","IBY473PO",18,0)
 D MES^XPDUTL("Update CHAMPVA Rx Rate Schedules ... ")
"RTN","IBY473PO",19,0)
 ;
"RTN","IBY473PO",20,0)
 ; attempt to get the PRESCRIPTION billable service ien to file 399.1
"RTN","IBY473PO",21,0)
 K IBMSG
"RTN","IBY473PO",22,0)
 S IBRXBS=+$$FIND1^DIC(399.1,,"BO","PRESCRIPTION",,"I $P(^(0),U,13)","IBMSG")
"RTN","IBY473PO",23,0)
 I IBRXBS'>0!$D(IBMSG("DIERR")) D  G CVAX   ; report error message and get out
"RTN","IBY473PO",24,0)
 . D MES^XPDUTL("ERROR: Unable to determine the Prescription Billable Service.")
"RTN","IBY473PO",25,0)
 . D MES^XPDUTL("       IBRXBS = "_IBRXBS)
"RTN","IBY473PO",26,0)
 . S (ERO,ERB)="IBMSG(""DIERR"""
"RTN","IBY473PO",27,0)
 . S ERO=ERO_")"
"RTN","IBY473PO",28,0)
 . F  S ERO=$Q(@ERO) Q:ERO'[ERB  D MES^XPDUTL("       "_ERO_" = "_$G(@ERO))
"RTN","IBY473PO",29,0)
 . D MES^XPDUTL(" ")
"RTN","IBY473PO",30,0)
 . Q
"RTN","IBY473PO",31,0)
 ;
"RTN","IBY473PO",32,0)
 ; update both of the CHAMPVA pharmacy rate schedules
"RTN","IBY473PO",33,0)
 F RSNAME="CVA-RX","CVA RI-RX" D
"RTN","IBY473PO",34,0)
 . N IEN,DIE,DA,DR,X,Y
"RTN","IBY473PO",35,0)
 . S IEN=+$O(^IBE(363,"B",RSNAME,""),-1)
"RTN","IBY473PO",36,0)
 . I 'IEN D MES^XPDUTL("ERROR: Rate Schedule "_RSNAME_" not found.") Q
"RTN","IBY473PO",37,0)
 . ;
"RTN","IBY473PO",38,0)
 . ; check to see if the changes have already been performed
"RTN","IBY473PO",39,0)
 . I $P($G(^IBE(363,IEN,0)),U,4)=IBRXBS,$P($G(^IBE(363,IEN,1)),U,1)=5 D  Q
"RTN","IBY473PO",40,0)
 .. D MES^XPDUTL("Rate Schedule "_RSNAME_" has already been updated...no further action.")
"RTN","IBY473PO",41,0)
 .. Q
"RTN","IBY473PO",42,0)
 . ;
"RTN","IBY473PO",43,0)
 . ; perform the updates
"RTN","IBY473PO",44,0)
 . S DIE=363,DA=IEN,DR=".04////"_IBRXBS_";1.01////5"
"RTN","IBY473PO",45,0)
 . D ^DIE
"RTN","IBY473PO",46,0)
 . D MES^XPDUTL("Rate Schedule "_RSNAME_" has been updated successfully.")
"RTN","IBY473PO",47,0)
 . Q
"RTN","IBY473PO",48,0)
 ;
"RTN","IBY473PO",49,0)
CVAX ;
"RTN","IBY473PO",50,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY473PO",51,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY473PO",52,0)
 Q
"RTN","IBY473PO",53,0)
 ;
"RTN","IBY473PO",54,0)
TRI(IBXPD) ; update TRICARE Rx rate schedule data with new dispensing fees
"RTN","IBY473PO",55,0)
 N IBRATY,IBEFFDT,IBADFE,IBDISP,IBADJUST
"RTN","IBY473PO",56,0)
 D BMES^XPDUTL(" STEP "_IBXPD_" of "_XPDIDTOT)
"RTN","IBY473PO",57,0)
 D MES^XPDUTL("-------------")
"RTN","IBY473PO",58,0)
 D MES^XPDUTL("Update TRICARE Rx Rate Schedules ... ")
"RTN","IBY473PO",59,0)
 ;
"RTN","IBY473PO",60,0)
 F IBRATY="TRICARE","TRICARE REIMB. INS." D
"RTN","IBY473PO",61,0)
 . I '$O(^DGCR(399.3,"B",IBRATY,0)) D MES^XPDUTL("ERROR: Rate Type "_IBRATY_" not found.") Q
"RTN","IBY473PO",62,0)
 . S IBEFFDT="01/23/2012"    ; new effective date
"RTN","IBY473PO",63,0)
 . S IBADFE=""               ; admin fee (not used)
"RTN","IBY473PO",64,0)
 . S IBDISP=10.27            ; dispensing fee amount
"RTN","IBY473PO",65,0)
 . S IBADJUST="S X=X+10.27"  ; adjustment code
"RTN","IBY473PO",66,0)
 . D ENT^IB3PSOU(IBRATY,IBEFFDT,IBADFE,IBDISP,IBADJUST)
"RTN","IBY473PO",67,0)
 . D MES^XPDUTL("Pharmacy Rate Schedules for "_IBRATY_" successfully updated.")
"RTN","IBY473PO",68,0)
 . Q
"RTN","IBY473PO",69,0)
 ;
"RTN","IBY473PO",70,0)
TRIX ;
"RTN","IBY473PO",71,0)
 D MES^XPDUTL(" Done.")
"RTN","IBY473PO",72,0)
 D UPDATE^XPDID(IBXPD)
"RTN","IBY473PO",73,0)
 Q
"RTN","IBY473PO",74,0)
 ;
"RTN","IBY473PR")
0^3^B1657081^n/a
"RTN","IBY473PR",1,0)
IBY473PR ;ALB/BI - Pre-Installation for IB patch 473 ;2-Feb-2012
"RTN","IBY473PR",2,0)
 ;;2.0;INTEGRATED BILLING;**473**;2-FEB-12;Build 29
"RTN","IBY473PR",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBY473PR",4,0)
 ;
"RTN","IBY473PR",5,0)
 Q
"RTN","IBY473PR",6,0)
 ;
"RTN","IBY473PR",7,0)
INCLUDE(FILE,Y) ; function to determine if O.F. entry should be included in the build
"RTN","IBY473PR",8,0)
 ; FILE=5,6,7 indicating file 364.x
"RTN","IBY473PR",9,0)
 ; Y=ien to file
"RTN","IBY473PR",10,0)
 NEW OK,LN,TAG,DATA
"RTN","IBY473PR",11,0)
 S OK=0
"RTN","IBY473PR",12,0)
 F LN=2:1 S TAG="ENT"_FILE_"+"_LN,DATA=$P($T(@TAG),";;",2) Q:DATA=""  I $F(DATA,U_Y_U) S OK=1 Q
"RTN","IBY473PR",13,0)
 Q OK
"RTN","IBY473PR",14,0)
 ;-----------------------------------------------------------------------
"RTN","IBY473PR",15,0)
 ; 364.5 entries modified:
"RTN","IBY473PR",16,0)
 ; 125 - OI1.8 (Other Payer Paid Amt)
"RTN","IBY473PR",17,0)
 ;
"RTN","IBY473PR",18,0)
ENT5 ; O.F. entries in file 364.5 to be included
"RTN","IBY473PR",19,0)
 ;
"RTN","IBY473PR",20,0)
 ;;^125^
"RTN","IBY473PR",21,0)
 ;
"RTN","IBY473PR",22,0)
 ;-----------------------------------------------------------------------
"RTN","IBY473PR",23,0)
 ; 364.6 entries modified:
"RTN","IBY473PR",24,0)
 ; 2228 - Remaining Liability Qualifier
"RTN","IBY473PR",25,0)
 ; 2229 - Remaining Liability
"RTN","IBY473PR",26,0)
 ;
"RTN","IBY473PR",27,0)
ENT6 ; O.F. entries in file 364.6 to be included
"RTN","IBY473PR",28,0)
 ;
"RTN","IBY473PR",29,0)
 ;;^2228^2229^
"RTN","IBY473PR",30,0)
 ;
"RTN","IBY473PR",31,0)
 ;-----------------------------------------------------------------------
"RTN","IBY473PR",32,0)
 ; 364.7 entries modified:
"RTN","IBY473PR",33,0)
 ; 164 - OI1.8
"RTN","IBY473PR",34,0)
 ; 957 - LCOB.4
"RTN","IBY473PR",35,0)
 ; 1928 - LCOB.16 (Remaining Liability Qualifier)
"RTN","IBY473PR",36,0)
 ; 1929 - LCOB.17 (Remaining Liability)
"RTN","IBY473PR",37,0)
 ;
"RTN","IBY473PR",38,0)
ENT7 ; O.F. entries in file 364.7 to be included
"RTN","IBY473PR",39,0)
 ;
"RTN","IBY473PR",40,0)
 ;;^164^957^1928^1929^
"RTN","IBY473PR",41,0)
 ;
"RTN","IBY473PR",42,0)
INC3508(Y) ; function to determine if entry in IB ERROR file (350.8) should be included in the build
"RTN","IBY473PR",43,0)
 ; Y - ien to file
"RTN","IBY473PR",44,0)
 N DATA,ENTRY,LN,OK,TAG
"RTN","IBY473PR",45,0)
 S OK=0,ENTRY=U_$P($G(^IBE(350.8,Y,0)),U,3)_U
"RTN","IBY473PR",46,0)
 F LN=2:1 S TAG="ENT3508+"_LN,DATA=$P($T(@TAG),";;",2) Q:DATA=""  I $F(DATA,ENTRY) S OK=1 Q
"RTN","IBY473PR",47,0)
 Q OK
"RTN","IBY473PR",48,0)
 ;
"RTN","IBY473PR",49,0)
ENT3508 ; entries in file 350.8 to be included
"RTN","IBY473PR",50,0)
 ;
"RTN","IBY473PR",51,0)
 ;;^IB350^IB351^
"RTN","IBY473PR",52,0)
 ;;
"RTN","IBY473PR",53,0)
 Q
"VER")
8.0^22.0
"^DD",350.8,350.8,0)
FIELD^^10^7
"^DD",350.8,350.8,0,"DDA")
N
"^DD",350.8,350.8,0,"DT")
2930322
"^DD",350.8,350.8,0,"ID",.03)
W "   ",$P(^(0),U,3)
"^DD",350.8,350.8,0,"IX","AC",350.8,.03)

"^DD",350.8,350.8,0,"IX","B",350.8,.01)

"^DD",350.8,350.8,0,"IX","C",350.8,.03)

"^DD",350.8,350.8,0,"NM","IB ERROR")
 
"^DD",350.8,350.8,0,"PT",399,36)

"^DD",350.8,350.8,0,"VRPK")
IB
"^DD",350.8,350.8,.01,0)
NAME^RF^^0;1^K:$L(X)>30!(X?.N)!($L(X)<3)!'(X'?1P.E) X
"^DD",350.8,350.8,.01,1,0)
^.1
"^DD",350.8,350.8,.01,1,1,0)
350.8^B
"^DD",350.8,350.8,.01,1,1,1)
S ^IBE(350.8,"B",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.01,1,1,2)
K ^IBE(350.8,"B",$E(X,1,30),DA)
"^DD",350.8,350.8,.01,3)
NAME MUST BE 3-30 CHARACTERS, NOT NUMERIC OR STARTING WITH PUNCTUATION
"^DD",350.8,350.8,.01,21,0)
^^2^2^2910305^^
"^DD",350.8,350.8,.01,21,1,0)
This is a free text name of the entry.  It should be namespaced with
"^DD",350.8,350.8,.01,21,2,0)
the namespace of the package reporting the error.
"^DD",350.8,350.8,.02,0)
ERROR MESSAGE^F^^0;2^K:$L(X)>80!($L(X)<3) X
"^DD",350.8,350.8,.02,3)
Answer must be 3-80 characters in length.
"^DD",350.8,350.8,.02,21,0)
^^3^3^2940209^^^^
"^DD",350.8,350.8,.02,21,1,0)
This is the text of the message as it will be displayed to a user or
"^DD",350.8,350.8,.02,21,2,0)
posted in a bulletin.  It should be as meaningful as possible to the
"^DD",350.8,350.8,.02,21,3,0)
person seeing the message.
"^DD",350.8,350.8,.03,0)
ERROR CODE^F^^0;3^K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>9!($L(X)<1) X
"^DD",350.8,350.8,.03,1,0)
^.1
"^DD",350.8,350.8,.03,1,1,0)
350.8^AC
"^DD",350.8,350.8,.03,1,1,1)
S ^IBE(350.8,"AC",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.03,1,1,2)
K ^IBE(350.8,"AC",$E(X,1,30),DA)
"^DD",350.8,350.8,.03,1,2,0)
350.8^C
"^DD",350.8,350.8,.03,1,2,1)
S ^IBE(350.8,"C",$E(X,1,30),DA)=""
"^DD",350.8,350.8,.03,1,2,2)
K ^IBE(350.8,"C",$E(X,1,30),DA)
"^DD",350.8,350.8,.03,3)
Answer must be 1-9 characters in length.
"^DD",350.8,350.8,.03,21,0)
^^9^9^2920219^^^^
"^DD",350.8,350.8,.03,21,1,0)
This is the error code that will be passed to or determined by
"^DD",350.8,350.8,.03,21,2,0)
Integrated Billing.  The format for the Error Code should be
"^DD",350.8,350.8,.03,21,3,0)
nnxxx, where nn is the reporting package namespace and xxx are numeric
"^DD",350.8,350.8,.03,21,4,0)
values.
"^DD",350.8,350.8,.03,21,5,0)
 
"^DD",350.8,350.8,.03,21,6,0)
This is the error code that will be passed as the second piece of
"^DD",350.8,350.8,.03,21,7,0)
the variable Y to IB when +Y=-1.  More than one error code can be
"^DD",350.8,350.8,.03,21,8,0)
placed in the second ^ piece of Y delimited by semi-colons.  Applications
"^DD",350.8,350.8,.03,21,9,0)
may call ^IBAERR to display the error message(s).
"^DD",350.8,350.8,.03,"DT")
2920219
"^DD",350.8,350.8,.04,0)
PACKAGE REPORTING ERROR^S^1:INTEGRATED BILLING;2:ACCOUNTS RECEIVABLE;3:PHARMACY;^0;4^Q
"^DD",350.8,350.8,.04,21,0)
^^2^2^2920415^^^
"^DD",350.8,350.8,.04,21,1,0)
This is the package that requested this entry in this file and will
"^DD",350.8,350.8,.04,21,2,0)
report it to IB as an error if the conditions are detected.
"^DD",350.8,350.8,.05,0)
ERROR ACTION^S^1:DISPLAY MESSAGE;2:SEND BULLETIN;3:EDIT FILE;^0;5^Q
"^DD",350.8,350.8,.05,21,0)
^^6^6^2910227^
"^DD",350.8,350.8,.05,21,1,0)
This is the type of action that should be taken when this error is
"^DD",350.8,350.8,.05,21,2,0)
reported to IB.  If action other than displaying a message is indicated
"^DD",350.8,350.8,.05,21,3,0)
then the MUMPS code in the ERROR ACTION field will be executed.
"^DD",350.8,350.8,.05,21,4,0)
 
"^DD",350.8,350.8,.05,21,5,0)
Currently only display actions are implemented.  Please contact the 
"^DD",350.8,350.8,.05,21,6,0)
developing ISC if other action types are desired.
"^DD",350.8,350.8,.06,0)
CORRESPONDING ALERT^P354.5'^IBE(354.5,^0;6^Q
"^DD",350.8,350.8,.06,21,0)
^^1^1^2940209^
"^DD",350.8,350.8,.06,21,1,0)
This is the type of alert that should be sent when this error occurs.
"^DD",350.8,350.8,.06,"DT")
2930322
"^DD",350.8,350.8,10,0)
EXECUTABLE LOGIC^K^^10;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",350.8,350.8,10,3)
This is Standard MUMPS code.
"^DD",350.8,350.8,10,21,0)
^^2^2^2910227^
"^DD",350.8,350.8,10,21,1,0)
This is the MUMPS code that will be executed if an error is reported
"^DD",350.8,350.8,10,21,2,0)
with an ERROR ACTION of other than to display a message.
"^DD",364.5,364.5,0)
FIELD^^3^11
"^DD",364.5,364.5,0,"DDA")
N
"^DD",364.5,364.5,0,"DT")
2960311
"^DD",364.5,364.5,0,"ID",.05)
S %I=Y,Y=$S('$D(^(0)):"",$D(^DIC(+$P(^(0),U,5),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(1,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.5,364.5,0,"IX","B",364.5,.01)

"^DD",364.5,364.5,0,"NM","IB DATA ELEMENT DEFINITION")

"^DD",364.5,364.5,0,"PT",364.7,.03)

"^DD",364.5,364.5,0,"VRPK")
IB
"^DD",364.5,364.5,.01,0)
NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",364.5,364.5,.01,1,0)
^.1
"^DD",364.5,364.5,.01,1,1,0)
364.5^B
"^DD",364.5,364.5,.01,1,1,1)
S ^IBA(364.5,"B",$E(X,1,30),DA)=""
"^DD",364.5,364.5,.01,1,1,2)
K ^IBA(364.5,"B",$E(X,1,30),DA)
"^DD",364.5,364.5,.01,3)
Answer must be 3-30 characters in length.
"^DD",364.5,364.5,.01,21,0)
^^1^1^2951205^
"^DD",364.5,364.5,.01,21,1,0)
The name to be used to uniquely identify this data element.
"^DD",364.5,364.5,.01,"DT")
2951219
"^DD",364.5,364.5,.02,0)
SECURITY LEVEL^RS^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.5,364.5,.02,21,0)
^^2^2^2960215^^^^
"^DD",364.5,364.5,.02,21,1,0)
If this field is set to N (NATIONAL,NO EDIT), this is a secured data
"^DD",364.5,364.5,.02,21,2,0)
element and will not be allowed to be edited or deleted.
"^DD",364.5,364.5,.02,"DT")
2960215
"^DD",364.5,364.5,.03,0)
TYPE OF ELEMENT^RS^F:NON-MULTIPLE FILEMAN FIELD;E:EXTRACTED VIA CODE;C:CONSTANT VALUE;^0;3^Q
"^DD",364.5,364.5,.03,1,0)
^.1
"^DD",364.5,364.5,.03,1,1,0)
^^TRIGGER^364.5^.04
"^DD",364.5,364.5,.03,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X="FC",Y(1)=X S X=Y(0),X=X S Y=X,X=Y(1),X=X S X=X[Y I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X=DIV S X="I" X ^DD(364.5,.03,1,1,1.4)
"^DD",364.5,364.5,.03,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.5,DIG=.04 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,1,2)
Q
"^DD",364.5,364.5,.03,1,1,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,1,"%D",0)
^^1^1^2960215^
"^DD",364.5,364.5,.03,1,1,"%D",1,0)
If TYPE OF ELEMENT is 'F' or 'C' then ELEMENT CATEGORY must be 'I'. 
"^DD",364.5,364.5,.03,1,1,"CREATE CONDITION")
"FC"[INTERNAL(TYPE OF ELEMENT)
"^DD",364.5,364.5,.03,1,1,"CREATE VALUE")
S X="I"
"^DD",364.5,364.5,.03,1,1,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,1,"DT")
2960215
"^DD",364.5,364.5,.03,1,1,"FIELD")
ELEMENT CATEGORY
"^DD",364.5,364.5,.03,1,2,0)
^^TRIGGER^364.5^.06
"^DD",364.5,364.5,.03,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="F" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,2,1.4)
"^DD",364.5,364.5,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,2,2)
Q
"^DD",364.5,364.5,.03,1,2,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,2,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,2,"%D",1,0)
This triggers the FILEMAN FIELD REFERENCE field to null if the element type
"^DD",364.5,364.5,.03,1,2,"%D",2,0)
is not FILEMAN field type of element.
"^DD",364.5,364.5,.03,1,2,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="F"
"^DD",364.5,364.5,.03,1,2,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,2,"DT")
2960215
"^DD",364.5,364.5,.03,1,2,"FIELD")
FILEMAN FIELD REFERENCE
"^DD",364.5,364.5,.03,1,3,0)
^^TRIGGER^364.5^.08
"^DD",364.5,364.5,.03,1,3,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="C" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,3,1.4)
"^DD",364.5,364.5,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.5,DIG=.08 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,3,2)
Q
"^DD",364.5,364.5,.03,1,3,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,3,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,3,"%D",1,0)
This triggers the CONSTANT VALUE field to null if the element type is not
"^DD",364.5,364.5,.03,1,3,"%D",2,0)
CONSTANT type of element.
"^DD",364.5,364.5,.03,1,3,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="C"
"^DD",364.5,364.5,.03,1,3,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,3,"DT")
2960215
"^DD",364.5,364.5,.03,1,3,"FIELD")
CONSTANT VALUE
"^DD",364.5,364.5,.03,1,4,0)
^^TRIGGER^364.5^1
"^DD",364.5,364.5,.03,1,4,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X'="E" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,1)):^(1),1:"") S X=$E(Y(1),1,245),X=X S DIU=X K Y S X="" X ^DD(364.5,.03,1,4,1.4)
"^DD",364.5,364.5,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),1)):^(1),1:""),DIV=X S DE=0-$L(DIH),DIU=$E(DIH,1,245),Y=$E(DIH,246,999),^(1)=$J("",$S(DE>0:DE,1:0))_DIV_$S(Y?." ":"",1:$J("",245-$L(DIV))_Y),DIH=364.5,DIG=1 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.03,1,4,2)
Q
"^DD",364.5,364.5,.03,1,4,3)
DO NOT DELETE
"^DD",364.5,364.5,.03,1,4,"%D",0)
^^2^2^2960215^
"^DD",364.5,364.5,.03,1,4,"%D",1,0)
This triggers the EXTRACT CODE field to null if the element type is not an
"^DD",364.5,364.5,.03,1,4,"%D",2,0)
EXTRACTED VIA CODE type of element.
"^DD",364.5,364.5,.03,1,4,"CREATE CONDITION")
INTERNAL(TYPE OF ELEMENT)'="E"
"^DD",364.5,364.5,.03,1,4,"CREATE VALUE")
@
"^DD",364.5,364.5,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.03,1,4,"DT")
2960215
"^DD",364.5,364.5,.03,1,4,"FIELD")
EXTRACT CODE
"^DD",364.5,364.5,.03,21,0)
^^3^3^2951207^^
"^DD",364.5,364.5,.03,21,1,0)
The type of data element being defined as needed by one or more forms.  This
"^DD",364.5,364.5,.03,21,2,0)
field determines the type of retrieval needed to get the actual data element's
"^DD",364.5,364.5,.03,21,3,0)
value for a given bill.
"^DD",364.5,364.5,.03,"DT")
2960215
"^DD",364.5,364.5,.04,0)
ELEMENT CATEGORY^RSX^I:INDIVIDUAL ELEMENT;G:GROUP ELEMENT;^0;4^I $P($G(^IBA(364.5,DA,0)),U,3)="F",$G(X)="G" K X
"^DD",364.5,364.5,.04,1,0)
^.1
"^DD",364.5,364.5,.04,1,1,0)
^^TRIGGER^364.5^.06
"^DD",364.5,364.5,.04,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0),X=X S X=X="G" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.5,.04,1,1,1.4)
"^DD",364.5,364.5,.04,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.5,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.04,1,1,2)
Q
"^DD",364.5,364.5,.04,1,1,"CREATE CONDITION")
INTERNAL(ELEMENT CATEGORY)="G"
"^DD",364.5,364.5,.04,1,1,"CREATE VALUE")
""
"^DD",364.5,364.5,.04,1,1,"DELETE VALUE")
NO EFFECT
"^DD",364.5,364.5,.04,1,1,"FIELD")
FILEMAN FIELD REFERENCE
"^DD",364.5,364.5,.04,3)
This indicates an INDIVIDUAL or GROUP of elements will be returned.  Group is not valid for Fileman type elements.
"^DD",364.5,364.5,.04,5,1,0)
364.5^.03^1
"^DD",364.5,364.5,.04,21,0)
^^3^3^2951205^
"^DD",364.5,364.5,.04,21,1,0)
This defines whether the data element to be extracted is a single piece of data
"^DD",364.5,364.5,.04,21,2,0)
or is a string of related data.  Fileman field references must be designated as
"^DD",364.5,364.5,.04,21,3,0)
individual elements.
"^DD",364.5,364.5,.04,"DT")
2960215
"^DD",364.5,364.5,.05,0)
BASE FILE^P1'^DIC(^0;5^Q
"^DD",364.5,364.5,.05,3)
Enter the Fileman file to be used as a 'base' to extract the data from.
"^DD",364.5,364.5,.05,21,0)
^^2^2^2960311^
"^DD",364.5,364.5,.05,21,1,0)
This is the number of the Fileman file to be used as a 'base' to extract
"^DD",364.5,364.5,.05,21,2,0)
data for this field.
"^DD",364.5,364.5,.05,"DT")
2960311
"^DD",364.5,364.5,.06,0)
FILEMAN FIELD REFERENCE^FX^^0;6^K:$L(X)>65!($L(X)<1) X I $D(X),$P($G(^IBA(364.5,DA,0)),U,4)="G" K X
"^DD",364.5,364.5,.06,1,0)
^.1
"^DD",364.5,364.5,.06,1,1,0)
^^TRIGGER^364.5^.07
"^DD",364.5,364.5,.06,1,1,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)="" I X S X=DIV S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(364.5,.06,1,1,1.4)
"^DD",364.5,364.5,.06,1,1,1.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.06,1,1,2)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.5,D0,0)):^(0),1:"") S X=$P(Y(1),U,7),X=X S DIU=X K Y S X="" X ^DD(364.5,.06,1,1,2.4)
"^DD",364.5,364.5,.06,1,1,2.4)
S DIH=$S($D(^IBA(364.5,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,7)=DIV,DIH=364.5,DIG=.07 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.5,364.5,.06,1,1,"CREATE CONDITION")
FILEMAN FIELD REFERENCE=""
"^DD",364.5,364.5,.06,1,1,"CREATE VALUE")
@
"^DD",364.5,364.5,.06,1,1,"DELETE VALUE")
@
"^DD",364.5,364.5,.06,1,1,"FIELD")
#.07
"^DD",364.5,364.5,.06,3)
Must be a valid Fileman reference and ELEMENT CATEGORY must not be GROUP.
"^DD",364.5,364.5,.06,5,1,0)
364.5^.03^2
"^DD",364.5,364.5,.06,5,2,0)
364.5^.04^1
"^DD",364.5,364.5,.06,21,0)
^^6^6^2951221^^^
"^DD",364.5,364.5,.06,21,1,0)
The valid Fileman field reference or simple Fileman navigation to be used
"^DD",364.5,364.5,.06,21,2,0)
to extract using the $$GET^DIQ utility. Note this will not return true
"^DD",364.5,364.5,.06,21,3,0)
multiple entries.  Word-processing type fields are able to be retrieved,
"^DD",364.5,364.5,.06,21,4,0)
however.  No syntax check is made on this field so the user must be careful
"^DD",364.5,364.5,.06,21,5,0)
to type a valid Fileman expression.  This must be designated as an
"^DD",364.5,364.5,.06,21,6,0)
INDIVIDUAL element, not a group element.
"^DD",364.5,364.5,.06,"DT")
2951221
"^DD",364.5,364.5,.07,0)
FILEMAN RETURN FORMAT^S^I:INTERNAL;E:EXTERNAL;^0;7^Q
"^DD",364.5,364.5,.07,5,1,0)
364.5^.06^1
"^DD",364.5,364.5,.07,21,0)
^^5^5^2951205^
"^DD",364.5,364.5,.07,21,1,0)
This is the format for the retrieved data for Fileman-type data elements.  It
"^DD",364.5,364.5,.07,21,2,0)
is recommended to use Internal format whenever possible to keep the data
"^DD",364.5,364.5,.07,21,3,0)
element definitions in this file as generic as possible to avoid duplication.  
"^DD",364.5,364.5,.07,21,4,0)
The format capabilities of the forms generator should be used to interpret and
"^DD",364.5,364.5,.07,21,5,0)
reformat the data element when needed.
"^DD",364.5,364.5,.07,"DT")
2951205
"^DD",364.5,364.5,.08,0)
CONSTANT VALUE^F^^0;8^K:$L(X)>80!($L(X)<1) X
"^DD",364.5,364.5,.08,3)
Answer must be 1-80 characters in length.
"^DD",364.5,364.5,.08,5,1,0)
364.5^.03^3
"^DD",364.5,364.5,.08,21,0)
^^1^1^2951205^
"^DD",364.5,364.5,.08,21,1,0)
The specific value that this data element should return for this data element.
"^DD",364.5,364.5,.08,"DT")
2951205
"^DD",364.5,364.5,1,0)
EXTRACT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.5,364.5,1,3)
This is Standard MUMPS code.
"^DD",364.5,364.5,1,5,1,0)
364.5^.03^4
"^DD",364.5,364.5,1,9)
@
"^DD",364.5,364.5,1,21,0)
^^7^7^2951207^^^
"^DD",364.5,364.5,1,21,1,0)
The code to be executed by the forms generator to return the value(s) of the
"^DD",364.5,364.5,1,21,2,0)
data element.  If no ARRAY ROOT field is completed for this data element, the
"^DD",364.5,364.5,1,21,3,0)
code should set the variable IBXDATA or the array IBXDATA(1) through IBXDATA(n)
"^DD",364.5,364.5,1,21,4,0)
where n=the total # of iterations of the data element retrieved.  If the ARRAY 
"^DD",364.5,364.5,1,21,5,0)
ROOT field has been completed for this data element, this code should set the
"^DD",364.5,364.5,1,21,6,0)
variable referenced there.  IBXIEN is assumed to be the internal entry number
"^DD",364.5,364.5,1,21,7,0)
of the  file (referenced by the variable IBXFILE) entry.
"^DD",364.5,364.5,1,"DT")
2951205
"^DD",364.5,364.5,2,0)
ARRAY ROOT^F^^2;E1,50^K:$L(X)>50!($L(X)<1) X
"^DD",364.5,364.5,2,3)
Answer must be a valid array root name.
"^DD",364.5,364.5,2,21,0)
^^3^3^2960117^^
"^DD",364.5,364.5,2,21,1,0)
 The local or global base root where multiple-valued output or word processing
"^DD",364.5,364.5,2,21,2,0)
data is to be stored for this data element.  IBXDATA is the default if there
"^DD",364.5,364.5,2,21,3,0)
is no data in this field.  Example of a global array: ^TMP($J)
"^DD",364.5,364.5,2,"DT")
2960117
"^DD",364.5,364.5,3,0)
DESCRIPTION^364.53^^3;0
"^DD",364.5,364.53,0)
DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.5,364.53,0,"DT")
2951205
"^DD",364.5,364.53,0,"NM","DESCRIPTION")

"^DD",364.5,364.53,0,"UP")
364.5
"^DD",364.5,364.53,.01,0)
DESCRIPTION^W^^0;1^Q
"^DD",364.5,364.53,.01,3)
Enter a description of the data element being defined.
"^DD",364.5,364.53,.01,21,0)
^^1^1^2951205^
"^DD",364.5,364.53,.01,21,1,0)
This is a free text description of the data that this data element represents.
"^DD",364.5,364.53,.01,"DT")
2951205
"^DD",364.6,364.6,0)
FIELD^^.13^13
"^DD",364.6,364.6,0,"DDA")
N
"^DD",364.6,364.6,0,"DT")
3071126
"^DD",364.6,364.6,0,"ID",.04)
W "   ",$P(^(0),U,4)
"^DD",364.6,364.6,0,"ID",.05)
W "   ",$P(^(0),U,5)
"^DD",364.6,364.6,0,"ID",.08)
W "   ",$P(^(0),U,8)
"^DD",364.6,364.6,0,"ID",.1)
W "   ",$P(^(0),U,10)
"^DD",364.6,364.6,0,"IX","APAR",364.6,.01)

"^DD",364.6,364.6,0,"IX","APAR1",364.6,.03)

"^DD",364.6,364.6,0,"IX","ASEQ",364.6,.01)

"^DD",364.6,364.6,0,"IX","ASEQ1",364.6,.04)

"^DD",364.6,364.6,0,"IX","ASEQ2",364.6,.05)

"^DD",364.6,364.6,0,"IX","ASEQ3",364.6,.08)

"^DD",364.6,364.6,0,"IX","B",364.6,.01)

"^DD",364.6,364.6,0,"NM","IB FORM SKELETON DEFINITION")
 
"^DD",364.6,364.6,0,"PT",364.6,.03)

"^DD",364.6,364.6,0,"PT",364.7,.01)

"^DD",364.6,364.6,0,"VRPK")
IB
"^DD",364.6,364.6,.01,0)
BILL FORM^RP353'X^IBE(353,^0;1^I $$DUP^IBCEFG0($G(DA),X,1) K X
"^DD",364.6,364.6,.01,1,0)
^.1
"^DD",364.6,364.6,.01,1,1,0)
364.6^B
"^DD",364.6,364.6,.01,1,1,1)
S ^IBA(364.6,"B",$E(X,1,30),DA)=""
"^DD",364.6,364.6,.01,1,1,2)
K ^IBA(364.6,"B",$E(X,1,30),DA)
"^DD",364.6,364.6,.01,1,2,0)
364.6^ASEQ^MUMPS
"^DD",364.6,364.6,.01,1,2,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)=""
"^DD",364.6,364.6,.01,1,2,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=$P(Z0,U,4),Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",+X,Z1,Z2,Z3,DA)
"^DD",364.6,364.6,.01,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,2,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.01,1,2,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.01,1,2,"DT")
2960116
"^DD",364.6,364.6,.01,1,3,0)
364.6^APAR^MUMPS
"^DD",364.6,364.6,.01,1,3,1)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X S ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)=""
"^DD",364.6,364.6,.01,1,3,2)
N Z0 S Z0=$P($G(^IBA(364.6,DA,0)),U,3) I Z0,Z0'=X K ^IBA(364.6,"APAR",$E(X,1,30),Z0,DA)
"^DD",364.6,364.6,.01,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,3,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.01,1,3,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.01,1,3,"DT")
2960117
"^DD",364.6,364.6,.01,1,4,0)
^^TRIGGER^364.6^.03
"^DD",364.6,364.6,.01,1,4,1)
X ^DD(364.6,.01,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X=DIV S X=$S('$D(D0):"",D0<0:"",1:D0) X ^DD(364.6,.01,1,4,1.4)
"^DD",364.6,364.6,.01,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,69.2) S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,1.4)
S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2)
X ^DD(364.6,.01,1,4,2.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y S X="" S DIH=$G(^IBA(364.6,DIV(0),0)),DIV=X S $P(^(0),U,3)=DIV,DIH=364.6,DIG=.03 D ^DICR
"^DD",364.6,364.6,.01,1,4,2.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.01,1,4,79.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.01,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.01,1,4,69.2)
S I(0,0)=$G(D0),D0=Y(0) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3),Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"")
"^DD",364.6,364.6,.01,1,4,79.2)
S I(0,0)=$G(D0),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'D0!'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$P($G(^DD(353,2.02,0)),U,3)
"^DD",364.6,364.6,.01,1,4,"%D",0)
^^1^1^3000613^
"^DD",364.6,364.6,.01,1,4,"%D",1,0)
This trigger is needed for the local screen 9 logic to work correctly.
"^DD",364.6,364.6,.01,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"CREATE VALUE")
NUMBER
"^DD",364.6,364.6,.01,1,4,"DELETE CONDITION")
BILL FORM:FORMAT TYPE="BILLING SCREEN"
"^DD",364.6,364.6,.01,1,4,"DELETE VALUE")
@
"^DD",364.6,364.6,.01,1,4,"DT")
3000613
"^DD",364.6,364.6,.01,1,4,"FIELD")
ASSOCIATED FORM DEFINITION
"^DD",364.6,364.6,.01,3)
Enter a BILLING FORM that the data element will appear on.
"^DD",364.6,364.6,.01,21,0)
^^2^2^2960318^^^^
"^DD",364.6,364.6,.01,21,1,0)
Identifies a billing 'form' or 'screen' where the data element is used.
"^DD",364.6,364.6,.01,21,2,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.01,"DT")
3000613
"^DD",364.6,364.6,.02,0)
SECURITY LEVEL^SX^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^I X="N",$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.02,3)
Enter an N if no editing is allowed, L if editing is OK because this entry is associated with a locally defined form.
"^DD",364.6,364.6,.02,5,1,0)
364.6^.03^7
"^DD",364.6,364.6,.02,21,0)
^.001^4^4^3001030^^
"^DD",364.6,364.6,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  If
"^DD",364.6,364.6,.02,21,2,0)
the security level of the entry is NATIONAL (N), no local editing is
"^DD",364.6,364.6,.02,21,3,0)
allowed.  If the security level of the entry is LOCAL (L), it may be
"^DD",364.6,364.6,.02,21,4,0)
edited.
"^DD",364.6,364.6,.02,"DT")
2960117
"^DD",364.6,364.6,.03,0)
ASSOCIATED FORM DEFINITION^P364.6'^IBA(364.6,^0;3^Q
"^DD",364.6,364.6,.03,1,0)
^.1
"^DD",364.6,364.6,.03,1,1,0)
364.6^APAR1^MUMPS
"^DD",364.6,364.6,.03,1,1,1)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X S ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.03,1,1,2)
N Z0 S Z0=+$G(^IBA(364.6,DA,0)) I Z0,Z0'=X K ^IBA(364.6,"APAR",Z0,$E(X,1,30),DA)
"^DD",364.6,364.6,.03,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,1,1,"%D",1,0)
Xref by bill form and associated form field definition.
"^DD",364.6,364.6,.03,1,1,"DT")
2960117
"^DD",364.6,364.6,.03,1,2,0)
^^TRIGGER^364.6^.04
"^DD",364.6,364.6,.03,1,2,1)
X ^DD(364.6,.03,1,2,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,4),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,2,1.4)
"^DD",364.6,364.6,.03,1,2,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,2,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,4)=DIV,DIH=364.6,DIG=.04 D ^DICR
"^DD",364.6,364.6,.03,1,2,2)
Q
"^DD",364.6,364.6,.03,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,2,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,2,"%D",0)
^.101^2^2^3000424^^
"^DD",364.6,364.6,.03,1,2,"%D",1,0)
If an associated form that is not a screen form, page is taken from the
"^DD",364.6,364.6,.03,1,2,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,2,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,2,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,2,"DT")
3000405
"^DD",364.6,364.6,.03,1,2,"FIELD")
PAGE OR SEQUENCE
"^DD",364.6,364.6,.03,1,3,0)
^^TRIGGER^364.6^.05
"^DD",364.6,364.6,.03,1,3,1)
X ^DD(364.6,.03,1,3,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,3,1.4)
"^DD",364.6,364.6,.03,1,3,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,3,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,3,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=364.6,DIG=.05 D ^DICR
"^DD",364.6,364.6,.03,1,3,2)
Q
"^DD",364.6,364.6,.03,1,3,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,3,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,3,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,3,"%D",1,0)
If an associated form that is not a screen form, line is taken from the
"^DD",364.6,364.6,.03,1,3,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,3,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,3,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,3,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,3,"DT")
3000405
"^DD",364.6,364.6,.03,1,3,"FIELD")
FIRST LINE NUMBER
"^DD",364.6,364.6,.03,1,4,0)
^^TRIGGER^364.6^.08
"^DD",364.6,364.6,.03,1,4,1)
X ^DD(364.6,.03,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,8),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,4,1.4)
"^DD",364.6,364.6,.03,1,4,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,4,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,4,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,8)=DIV,DIH=364.6,DIG=.08 D ^DICR
"^DD",364.6,364.6,.03,1,4,2)
Q
"^DD",364.6,364.6,.03,1,4,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,4,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,4,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,4,"%D",1,0)
If an associated form that is not a screen form, column is taken from the
"^DD",364.6,364.6,.03,1,4,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,4,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,4,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,4,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,4,"DT")
3000405
"^DD",364.6,364.6,.03,1,4,"FIELD")
STARTING COLUMN
"^DD",364.6,364.6,.03,1,5,0)
^^TRIGGER^364.6^.09
"^DD",364.6,364.6,.03,1,5,1)
X ^DD(364.6,.03,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,9),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,5,1.4)
"^DD",364.6,364.6,.03,1,5,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,5,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,5,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,9)=DIV,DIH=364.6,DIG=.09 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,5,2)
Q
"^DD",364.6,364.6,.03,1,5,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,5,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,5,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,5,"%D",1,0)
If an associated form that is not a screen form, length is taken from the
"^DD",364.6,364.6,.03,1,5,"%D",2,0)
associated with field definition.
"^DD",364.6,364.6,.03,1,5,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,5,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,5,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,5,"DT")
3000405
"^DD",364.6,364.6,.03,1,5,"FIELD")
LENGTH
"^DD",364.6,364.6,.03,1,6,0)
^^TRIGGER^364.6^.06
"^DD",364.6,364.6,.03,1,6,1)
X ^DD(364.6,.03,1,6,1.3) I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,6),X=X S DIU=X K Y S X="" X ^DD(364.6,.03,1,6,1.4)
"^DD",364.6,364.6,.03,1,6,1.3)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X X ^DD(364.6,.03,1,6,69.2) S Y(101)=$S($D(^IBE(353,D0,2)):^(2),1:"") S X=$P($P(Y(102),$C(59)_$P(Y(101),U,2)_":",2),$C(59),1)'="BILLING SCREEN" S D0=I(0,0)
"^DD",364.6,364.6,.03,1,6,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,6)=DIV,DIH=364.6,DIG=.06 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,6,2)
Q
"^DD",364.6,364.6,.03,1,6,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,6,69.2)
S I(0,0)=$S($D(D0):D0,1:""),Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:""),D0=$P(Y(1),U,1) S:'$D(^IBE(353,+D0,0)) D0=-1 S Y(102)=$C(59)_$S($D(^DD(353,2.02,0)):$P(^(0),U,3),1:"")
"^DD",364.6,364.6,.03,1,6,"%D",0)
^^2^2^3000405^
"^DD",364.6,364.6,.03,1,6,"%D",1,0)
If associated form that is not a screen form, the max number lines is taken
"^DD",364.6,364.6,.03,1,6,"%D",2,0)
from the associated with field definition.
"^DD",364.6,364.6,.03,1,6,"CREATE CONDITION")
BILL FORM:FORMAT TYPE'="BILLING SCREEN"
"^DD",364.6,364.6,.03,1,6,"CREATE VALUE")
@
"^DD",364.6,364.6,.03,1,6,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,6,"DT")
3000405
"^DD",364.6,364.6,.03,1,6,"FIELD")
MAX NUMBER LINES
"^DD",364.6,364.6,.03,1,7,0)
^^TRIGGER^364.6^.02
"^DD",364.6,364.6,.03,1,7,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y S X=DIV S X="L" X ^DD(364.6,.03,1,7,1.4)
"^DD",364.6,364.6,.03,1,7,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,2)=DIV,DIH=364.6,DIG=.02 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.03,1,7,2)
Q
"^DD",364.6,364.6,.03,1,7,3)
DO NOT DELETE
"^DD",364.6,364.6,.03,1,7,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.03,1,7,"%D",1,0)
Only local entries can be associated.
"^DD",364.6,364.6,.03,1,7,"CREATE VALUE")
"L"
"^DD",364.6,364.6,.03,1,7,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.03,1,7,"DT")
2960117
"^DD",364.6,364.6,.03,1,7,"FIELD")
SECURITY LEVEL
"^DD",364.6,364.6,.03,3)
Enter the form definition record this definition will override.
"^DD",364.6,364.6,.03,5,1,0)
364.6^.01^4
"^DD",364.6,364.6,.03,21,0)
^^1^1^2960117^^
"^DD",364.6,364.6,.03,21,1,0)
The form definition record this definition will override.
"^DD",364.6,364.6,.03,"DT")
3000414
"^DD",364.6,364.6,.04,0)
PAGE OR SEQUENCE^FX^^0;4^K:$L(X)>20!($L(X)<1) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,2) K X
"^DD",364.6,364.6,.04,1,0)
^.1^^-1
"^DD",364.6,364.6,.04,1,1,0)
364.6^ASEQ1^MUMPS
"^DD",364.6,364.6,.04,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 S ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)=""
"^DD",364.6,364.6,.04,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,5),Z3=$P(Z0,U,8) I Z1,Z2,Z3 K ^IBA(364.6,"ASEQ",Z1,$E(X,1,30),Z2,Z3,DA)
"^DD",364.6,364.6,.04,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.04,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.04,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.04,1,1,"DT")
2960117
"^DD",364.6,364.6,.04,3)
This data must be 1-20 char long, can't be an assoc form, and must be a unique form/page/line/column.
"^DD",364.6,364.6,.04,5,1,0)
364.6^.03^2
"^DD",364.6,364.6,.04,21,0)
^^4^4^2960318^^^^
"^DD",364.6,364.6,.04,21,1,0)
This field is used to specify the page, section, transaction segment, etc.
"^DD",364.6,364.6,.04,21,2,0)
that the data element is to be associated with.  This field will be used as
"^DD",364.6,364.6,.04,21,3,0)
the second-level sort field when extracting data fields for this form.
"^DD",364.6,364.6,.04,21,4,0)
The combination of form/page/line/column must be unique.
"^DD",364.6,364.6,.04,"DT")
3000428
"^DD",364.6,364.6,.05,0)
FIRST LINE NUMBER^NJ4,0X^^0;5^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,3) K X
"^DD",364.6,364.6,.05,.1)
LINE
"^DD",364.6,364.6,.05,1,0)
^.1
"^DD",364.6,364.6,.05,1,1,0)
364.6^ASEQ2^MUMPS
"^DD",364.6,364.6,.05,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)=""
"^DD",364.6,364.6,.05,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,8) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,$E(X,1,30),Z3,DA)
"^DD",364.6,364.6,.05,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.05,1,1,"%D",0)
^^1^1^2960117^^^^
"^DD",364.6,364.6,.05,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.05,1,1,"DT")
2960117
"^DD",364.6,364.6,.05,3)
Type a # 0-9999, 0 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.05,5,1,0)
364.6^.03^3
"^DD",364.6,364.6,.05,21,0)
^^5^5^2960318^^^
"^DD",364.6,364.6,.05,21,1,0)
If this is a printed form, this is the first line number that this data
"^DD",364.6,364.6,.05,21,2,0)
element will appear on.  For transmitted forms, this is assumed to always
"^DD",364.6,364.6,.05,21,3,0)
be a 1.  This will be used as the third-level sort field when extracting
"^DD",364.6,364.6,.05,21,4,0)
data fields for this form.  The combination of form/page/line/column must
"^DD",364.6,364.6,.05,21,5,0)
be unique.
"^DD",364.6,364.6,.05,"DT")
3000428
"^DD",364.6,364.6,.06,0)
MAX NUMBER LINES^NJ3,0X^^0;6^K:+X'=X!(X>999)!(X<0)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3) K X
"^DD",364.6,364.6,.06,3)
Type a Number between 0 and 999, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.06,5,1,0)
364.6^.03^6
"^DD",364.6,364.6,.06,21,0)
^^2^2^2951205^
"^DD",364.6,364.6,.06,21,1,0)
If a printed form, this is the highest numbered line number that this data
"^DD",364.6,364.6,.06,21,2,0)
element is allowed to print on.
"^DD",364.6,364.6,.06,"DT")
2960117
"^DD",364.6,364.6,.07,0)
LOCAL OVERRIDE ALLOWED^S^0:NO;1:YES;^0;7^Q
"^DD",364.6,364.6,.07,3)
Enter 0 (NO) to prevent local override, 1 to allow local override.
"^DD",364.6,364.6,.07,21,0)
^.001^2^2^3020822^^
"^DD",364.6,364.6,.07,21,1,0)
This controls whether or not the output forms generator will allow for a
"^DD",364.6,364.6,.07,21,2,0)
redefinition of this record via a local override.
"^DD",364.6,364.6,.07,"DT")
2960311
"^DD",364.6,364.6,.08,0)
STARTING COLUMN OR PIECE^NJ3,1X^^0;8^K:+X'=X!(X>999)!(X<0)!($S(X[".":X'?.E1"."1.2N,1:0)) X I $D(X),$S($P($G(^IBE(353,+$G(^IBA(364.6,+DA,0)),2)),U,2)="S":0,1:$P($G(^IBA(364.6,DA,0)),U,3))!$$DUP^IBCEFG0(DA,X,4) K X
"^DD",364.6,364.6,.08,.1)
COLUMN
"^DD",364.6,364.6,.08,1,0)
^.1
"^DD",364.6,364.6,.08,1,1,0)
364.6^ASEQ3^MUMPS
"^DD",364.6,364.6,.08,1,1,1)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 S ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)=""
"^DD",364.6,364.6,.08,1,1,2)
N Z0,Z1,Z2,Z3 S Z0=$G(^IBA(364.6,DA,0)),Z1=+Z0,Z2=$P(Z0,U,4),Z3=$P(Z0,U,5) I Z1,Z2'="",Z3 K ^IBA(364.6,"ASEQ",Z1,Z2,Z3,$E(X,1,30),DA)
"^DD",364.6,364.6,.08,1,1,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,1,"%D",0)
^^1^1^2960117^
"^DD",364.6,364.6,.08,1,1,"%D",1,0)
This xref contains the sequence to use to extract or print the form fields.
"^DD",364.6,364.6,.08,1,1,"DT")
2960117
"^DD",364.6,364.6,.08,1,2,0)
^^TRIGGER^364.6^.11
"^DD",364.6,364.6,.08,1,2,1)
K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(0)=X S X=Y(0)["." I X S X=DIV S Y(1)=$S($D(^IBA(364.6,D0,0)):^(0),1:"") S X=$P(Y(1),U,11),X=X S DIU=X K Y S X=DIV S X=1 X ^DD(364.6,.08,1,2,1.4)
"^DD",364.6,364.6,.08,1,2,1.4)
S DIH=$S($D(^IBA(364.6,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,11)=DIV,DIH=364.6,DIG=.11 D ^DICR:$O(^DD(DIH,DIG,1,0))>0
"^DD",364.6,364.6,.08,1,2,2)
Q
"^DD",364.6,364.6,.08,1,2,3)
DO NOT DELETE
"^DD",364.6,364.6,.08,1,2,"%D",0)
^^2^2^2960126^^^
"^DD",364.6,364.6,.08,1,2,"%D",1,0)
If the starting column or piece is not a whole number, this must be a
"^DD",364.6,364.6,.08,1,2,"%D",2,0)
calculate only field - no output.
"^DD",364.6,364.6,.08,1,2,"CREATE CONDITION")
STARTING COLUMN OR PIECE["."
"^DD",364.6,364.6,.08,1,2,"CREATE VALUE")
S X=1
"^DD",364.6,364.6,.08,1,2,"DELETE VALUE")
NO EFFECT
"^DD",364.6,364.6,.08,1,2,"DT")
2960126
"^DD",364.6,364.6,.08,1,2,"FIELD")
#.11
"^DD",364.6,364.6,.08,3)
Type a # 0-9999, 1-2 Decimals, can't be assoc form, need unique form/pg/line/col.
"^DD",364.6,364.6,.08,5,1,0)
364.6^.03^4
"^DD",364.6,364.6,.08,21,0)
^^5^5^2960318^^^^
"^DD",364.6,364.6,.08,21,1,0)
This is the column on the form, position in the data string (for non-printed
"^DD",364.6,364.6,.08,21,2,0)
forms) -  starting at position 1, or delimited piece that this data element
"^DD",364.6,364.6,.08,21,3,0)
is to be printed or stored in.  This will be used as the fourth-level sort
"^DD",364.6,364.6,.08,21,4,0)
field when extracting data fields for this form.  The combination of
"^DD",364.6,364.6,.08,21,5,0)
form/page/line/column must be unique.
"^DD",364.6,364.6,.08,"DT")
3000428
"^DD",364.6,364.6,.09,0)
LENGTH^NJ3,0X^^0;9^K:+X'=X!(X>250)!(X<1)!(X?.E1"."1N.N) X I $D(X),$P($G(^IBA(364.6,DA,0)),U,3),$P($G(^IBE(353,+^IBA(364.6,DA,0),2)),U,2)'="S" K X
"^DD",364.6,364.6,.09,3)
Type a Number between 1 and 250, 0 Decimal Digits (can't be an associated form).
"^DD",364.6,364.6,.09,5,1,0)
364.6^.03^5
"^DD",364.6,364.6,.09,21,0)
^^3^3^2951205^
"^DD",364.6,364.6,.09,21,1,0)
The length desired for the data element.  If present, this field will be used
"^DD",364.6,364.6,.09,21,2,0)
to truncate or pad the data element to this length after the element has been
"^DD",364.6,364.6,.09,21,3,0)
passed through the routine identified in the FORMAT ROUTINE field.
"^DD",364.6,364.6,.09,"DT")
3000111
"^DD",364.6,364.6,.1,0)
SHORT DESCRIPTION^F^^0;10^K:$L(X)>40!($L(X)<1) X
"^DD",364.6,364.6,.1,1,0)
^.1^^0
"^DD",364.6,364.6,.1,3)
Answer must be 1-40 characters in length
"^DD",364.6,364.6,.1,21,0)
^^2^2^3071126^
"^DD",364.6,364.6,.1,21,1,0)
This is a short description of the field that is used as an identifier to
"^DD",364.6,364.6,.1,21,2,0)
make lookups on this file meaningful.
"^DD",364.6,364.6,.1,"DT")
3080310
"^DD",364.6,364.6,.11,0)
CALCULATE ONLY OR OUTPUT^S^1:CALCULATE ONLY;0:OUTPUT;^0;11^Q
"^DD",364.6,364.6,.11,3)
Enter 1 if this field is used for calculation purposes and is not meant to be output
"^DD",364.6,364.6,.11,5,1,0)
364.6^.08^2
"^DD",364.6,364.6,.11,21,0)
^^4^4^2960715^^^^
"^DD",364.6,364.6,.11,21,1,0)
This field is set to 1 if there is a need to do a special extract or
"^DD",364.6,364.6,.11,21,2,0)
calculation at some point in the processing, but no output is desired
"^DD",364.6,364.6,.11,21,3,0)
from the field's code execution.  Used to set up arrays for group elements
"^DD",364.6,364.6,.11,21,4,0)
then the individual elements are output separately.
"^DD",364.6,364.6,.11,"DT")
2960715
"^DD",364.6,364.6,.12,0)
TRANSMIT IGNORES IF NULL^S^0:FALSE;1:TRUE;^0;12^Q
"^DD",364.6,364.6,.12,3)
Enter 1 (TRUE) if there should be no entry made in the output global if the data value of the element is null.
"^DD",364.6,364.6,.12,21,0)
^.001^5^5^3001030^^^
"^DD",364.6,364.6,.12,21,1,0)
This field can be used to suppress output of a field if its value is null.
"^DD",364.6,364.6,.12,21,2,0)
If not suppressed, an entry is made in the output global used by the
"^DD",364.6,364.6,.12,21,3,0)
formatter, regardless of the contents of the data for this field.
"^DD",364.6,364.6,.12,21,4,0)
Supressing the value results in no output to the formatter's output
"^DD",364.6,364.6,.12,21,5,0)
global if the value of the data for this field is determined to be null.
"^DD",364.6,364.6,.12,"DT")
2991006
"^DD",364.6,364.6,.13,0)
DATA REQUIRED FOR FIELD^S^1:YES;0:NO;^0;13^Q
"^DD",364.6,364.6,.13,3)
Enter yes if there should always be data in this field.
"^DD",364.6,364.6,.13,21,0)
^^2^2^3000216^
"^DD",364.6,364.6,.13,21,1,0)
This field is a flag that will stop the output of a record if this field
"^DD",364.6,364.6,.13,21,2,0)
indicates data is required and the data extracted is null.
"^DD",364.6,364.6,.13,"DT")
3000216
"^DD",364.7,364.7,0)
FIELD^^3^12
"^DD",364.7,364.7,0,"DDA")
N
"^DD",364.7,364.7,0,"DT")
2960710
"^DD",364.7,364.7,0,"ID",.03)
S %I=Y,Y=$S('$D(^(0)):"",$D(^IBA(364.5,+$P(^(0),U,3),0))#2:$P(^(0),U,1),1:""),C=$P(^DD(364.5,.01,0),U,2) D Y^DIQ:Y]"" W "   ",Y,@("$E("_DIC_"%I,0),0)") S Y=%I K %I
"^DD",364.7,364.7,0,"IX","AINS",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINS1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP",364.7,.01)

"^DD",364.7,364.7,0,"IX","AINTYP1",364.7,.05)

"^DD",364.7,364.7,0,"IX","AINTYP2",364.7,.06)

"^DD",364.7,364.7,0,"IX","ATYPE",364.7,.01)

"^DD",364.7,364.7,0,"IX","ATYPE1",364.7,.06)

"^DD",364.7,364.7,0,"IX","B",364.7,.01)

"^DD",364.7,364.7,0,"IX","C",364.7,.03)

"^DD",364.7,364.7,0,"NM","IB FORM FIELD CONTENT")
 
"^DD",364.7,364.7,0,"VRPK")
IB
"^DD",364.7,364.7,.01,0)
FORM FIELD REFERENCE^RP364.6'^IBA(364.6,^0;1^Q
"^DD",364.7,364.7,.01,1,0)
^.1
"^DD",364.7,364.7,.01,1,1,0)
364.7^B
"^DD",364.7,364.7,.01,1,1,1)
S ^IBA(364.7,"B",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.01,1,1,2)
K ^IBA(364.7,"B",$E(X,1,30),DA)
"^DD",364.7,364.7,.01,1,2,0)
364.7^ATYPE^MUMPS
"^DD",364.7,364.7,.01,1,2,1)
N Z1,Z0 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3),'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,2,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,6) I Z1'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"ATYPE",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,2,"%D",0)
^^1^1^2980104^^^^
"^DD",364.7,364.7,.01,1,2,"%D",1,0)
Xref by form and bill type
"^DD",364.7,364.7,.01,1,2,"DT")
2960117
"^DD",364.7,364.7,.01,1,3,0)
364.7^AINTYP^MUMPS
"^DD",364.7,364.7,.01,1,3,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) S ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)=""
"^DD",364.7,364.7,.01,1,3,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5),Z2=$P(Z0,U,6) I Z1,Z2'="",$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINTYP",$P(^IBA(364.6,+X,0),U,3),Z1,Z2,DA)
"^DD",364.7,364.7,.01,1,3,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,3,"%D",0)
^^1^1^2971231^^^
"^DD",364.7,364.7,.01,1,3,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.01,1,3,"DT")
2960117
"^DD",364.7,364.7,.01,1,4,0)
364.7^AINS^MUMPS
"^DD",364.7,364.7,.01,1,4,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3),$P(Z0,U,6)="" S ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)=""
"^DD",364.7,364.7,.01,1,4,2)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P(Z0,U,5) I Z1,$P($G(^IBA(364.6,+X,0)),U,3) K ^IBA(364.7,"AINS",$P(^IBA(364.6,+X,0),U,3),Z1,DA)
"^DD",364.7,364.7,.01,1,4,3)
DO NOT DELETE
"^DD",364.7,364.7,.01,1,4,"%D",0)
^^1^1^2971231^^
"^DD",364.7,364.7,.01,1,4,"%D",1,0)
Xref by form field and insurance company
"^DD",364.7,364.7,.01,1,4,"DT")
2960118
"^DD",364.7,364.7,.01,3)
Enter the billing form that this field is associated with
"^DD",364.7,364.7,.01,21,0)
^^2^2^2951207^^^^
"^DD",364.7,364.7,.01,21,1,0)
This is a pointer to the billing form field that this field is associated
"^DD",364.7,364.7,.01,21,2,0)
with.
"^DD",364.7,364.7,.01,"DT")
3000428
"^DD",364.7,364.7,.02,0)
SECURITY LEVEL^S^N:NATIONAL,NO EDIT;L:LOCAL;^0;2^Q
"^DD",364.7,364.7,.02,3)
Enter N for nationally released fields (no edit) or L for locally added fields.
"^DD",364.7,364.7,.02,21,0)
^^3^3^2951219^^^
"^DD",364.7,364.7,.02,21,1,0)
This field determines whether or not editing of the entry is allowed.  For
"^DD",364.7,364.7,.02,21,2,0)
NATIONAL (N) field, no local editing is allowed.  If LOCAL (L) field is
"^DD",364.7,364.7,.02,21,3,0)
created, editing is allowed.
"^DD",364.7,364.7,.02,"DT")
3000428
"^DD",364.7,364.7,.03,0)
DATA ELEMENT^P364.5'^IBA(364.5,^0;3^Q
"^DD",364.7,364.7,.03,1,0)
^.1
"^DD",364.7,364.7,.03,1,1,0)
364.7^C
"^DD",364.7,364.7,.03,1,1,1)
S ^IBA(364.7,"C",$E(X,1,30),DA)=""
"^DD",364.7,364.7,.03,1,1,2)
K ^IBA(364.7,"C",$E(X,1,30),DA)
"^DD",364.7,364.7,.03,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.03,1,1,"%D",0)
^^1^1^2960702^
"^DD",364.7,364.7,.03,1,1,"%D",1,0)
Xref by DATA ELEMENT NAME
"^DD",364.7,364.7,.03,1,1,"DT")
2960702
"^DD",364.7,364.7,.03,3)
Enter the data element that will define this form field.  If used on a screen, it must be a fileman type.
"^DD",364.7,364.7,.03,21,0)
^^1^1^2960627^^^^
"^DD",364.7,364.7,.03,21,1,0)
This identifies the data element that be extracted for this entry.
"^DD",364.7,364.7,.03,23,0)
^^4^4^2960627^^^^
"^DD",364.7,364.7,.03,23,1,0)
This is the data element that will be allowed to be displayed/edited on a
"^DD",364.7,364.7,.03,23,2,0)
screen, extracted for a transmit, or printed on a printed form.  If used on
"^DD",364.7,364.7,.03,23,3,0)
a screen, the data element must be a fileman type and a local field (>10000
"^DD",364.7,364.7,.03,23,4,0)
for ifn and on a node >10000) to be editable.
"^DD",364.7,364.7,.03,"DT")
2960702
"^DD",364.7,364.7,.04,0)
SCREEN PROMPT^FX^^0;4^K:$L(X)>70!($L(X)<1) X I $D(X),$P($G(^IBE(353,+$G(^IBA(364.6,+$G(^IBA(364.7,DA,0)),0)),2)),U,2)'="S" K X
"^DD",364.7,364.7,.04,.1)
 
"^DD",364.7,364.7,.04,1,0)
^.1^^0
"^DD",364.7,364.7,.04,3)
Answer must be 1-70 characters in length.
"^DD",364.7,364.7,.04,21,0)
3^^2^2^2960321^^^^
"^DD",364.7,364.7,.04,21,1,0)
This is used only by screen-type forms to place a prompt on the screen
"^DD",364.7,364.7,.04,21,2,0)
for a particular field.
"^DD",364.7,364.7,.04,23,0)
^^3^3^2960321^^^^
"^DD",364.7,364.7,.04,23,1,0)
This is the prompt that will preceed the data element defined for this
"^DD",364.7,364.7,.04,23,2,0)
entry.  If no data element, this prompt will display.  This field is only
"^DD",364.7,364.7,.04,23,3,0)
used for screen-type forms.
"^DD",364.7,364.7,.04,"DT")
2960321
"^DD",364.7,364.7,.05,0)
INSURANCE COMPANY^P36'^DIC(36,^0;5^Q
"^DD",364.7,364.7,.05,1,0)
^.1
"^DD",364.7,364.7,.05,1,1,0)
364.7^AINS1^MUMPS
"^DD",364.7,364.7,.05,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,$P(Z0,U,6)="" S ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.05,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K ^IBA(364.7,"AINS",Z1,$E(X,1,30),DA) I Z2'="",$D(^IBA(364.7,"AINTYP",Z1,X,Z2,DA)) S ^IBA(364.7,"ATYPE",Z1,Z2,DA)=""
"^DD",364.7,364.7,.05,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,1,"%D",0)
^^1^1^2960118^
"^DD",364.7,364.7,.05,1,1,"%D",1,0)
Xref by form field and insurance company.
"^DD",364.7,364.7,.05,1,1,"DT")
2960118
"^DD",364.7,364.7,.05,1,2,0)
364.7^AINTYP1^MUMPS
"^DD",364.7,364.7,.05,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) I Z1,Z2'="" S ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)="" K ^IBA(364.7,"ATYPE",Z1,Z2,DA),^IBA(364.7,"AINS",Z1,X,DA)
"^DD",364.7,364.7,.05,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,6) K:Z1&(Z2'="") ^IBA(364.7,"AINTYP",Z1,$E(X,1,30),Z2,DA)
"^DD",364.7,364.7,.05,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.05,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.05,1,2,"%D",1,0)
Xref by insurance company and bill type
"^DD",364.7,364.7,.05,1,2,"DT")
2960117
"^DD",364.7,364.7,.05,3)
Enter the name of the insurance company that this field is associated with.
"^DD",364.7,364.7,.05,21,0)
^^2^2^2951207^
"^DD",364.7,364.7,.05,21,1,0)
This is the insurance company who has a need for other than the standard
"^DD",364.7,364.7,.05,21,2,0)
data in this field.
"^DD",364.7,364.7,.05,"DT")
3000428
"^DD",364.7,364.7,.06,0)
BILL TYPE^S^I:INPATIENT;O:OUTPATIENT;^0;6^Q
"^DD",364.7,364.7,.06,1,0)
^.1
"^DD",364.7,364.7,.06,1,1,0)
364.7^ATYPE1^MUMPS
"^DD",364.7,364.7,.06,1,1,1)
N Z0,Z1 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3) I Z1,'$P(Z0,U,5) S ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,1,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1 K ^IBA(364.7,"ATYPE",Z1,$E(X,1,30),DA) I Z2,$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) S ^IBA(364.7,"AINS",Z1,Z2,DA)=""
"^DD",364.7,364.7,.06,1,1,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,1,"%D",0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,1,1,"%D",1,0)
Xref by form and bill type.
"^DD",364.7,364.7,.06,1,1,"DT")
2960117
"^DD",364.7,364.7,.06,1,2,0)
364.7^AINTYP2^MUMPS
"^DD",364.7,364.7,.06,1,2,1)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) I Z1,Z2 K:'$D(^IBA(364.7,"AINTYP",Z1,Z2,X,DA)) ^IBA(364.7,"AINS",Z1,Z2,DA) S ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)=""
"^DD",364.7,364.7,.06,1,2,2)
N Z0,Z1,Z2 S Z0=$G(^IBA(364.7,DA,0)),Z1=+$P($G(^IBA(364.6,+Z0,0)),U,3),Z2=$P(Z0,U,5) K:Z1&Z2 ^IBA(364.7,"AINTYP",Z1,Z2,$E(X,1,30),DA)
"^DD",364.7,364.7,.06,1,2,3)
DO NOT DELETE
"^DD",364.7,364.7,.06,1,2,"%D",0)
^^1^1^2960117^^^^
"^DD",364.7,364.7,.06,1,2,"%D",1,0)
Xref by form, insurance company and bill type
"^DD",364.7,364.7,.06,1,2,"DT")
2960117
"^DD",364.7,364.7,.06,3)
Enter the type of the bill.
"^DD",364.7,364.7,.06,21,0)
^^1^1^2960117^^
"^DD",364.7,364.7,.06,21,1,0)
This is the type of bill that requires this field.
"^DD",364.7,364.7,.06,"DT")
3000428
"^DD",364.7,364.7,.07,0)
PAD CHARACTER^S^ZL:ZERO PAD ON LEFT;ZR:ZERO PAD ON RIGHT;SL:SPACE PAD ON LEFT;SR:SPACE PAD ON RIGHT;N:NO PAD REQUIRED;^0;7^Q
"^DD",364.7,364.7,.07,3)
Enter the code that corresponds to the format and pad character to use for the data output in this field.
"^DD",364.7,364.7,.07,21,0)
^^3^3^2960126^^
"^DD",364.7,364.7,.07,21,1,0)
If present, this defines the character to be used to pad the DATA
"^DD",364.7,364.7,.07,21,2,0)
ELEMENT to its desired length and the orientation of the padding characters
"^DD",364.7,364.7,.07,21,3,0)
to the left or right of the data.  The default is space pad to the right.
"^DD",364.7,364.7,.07,"DT")
2960126
"^DD",364.7,364.7,.08,0)
REQUIRED^S^0:NO;1:YES;^0;8^Q
"^DD",364.7,364.7,.08,3)
Enter 1 (YES) if this data element is on a local screen 9 form and the data is required for the bill to be authorized.
"^DD",364.7,364.7,.08,21,0)
^.001^4^4^3001030^^
"^DD",364.7,364.7,.08,21,1,0)
This field controls the required/not required status of a data element
"^DD",364.7,364.7,.08,21,2,0)
on a local screen 9 form.  If this field is 1 (YES), this data element
"^DD",364.7,364.7,.08,21,3,0)
is always required to have data (not null) in order for a bill to be
"^DD",364.7,364.7,.08,21,4,0)
authorized.
"^DD",364.7,364.7,.08,"DT")
2951207
"^DD",364.7,364.7,.09,0)
EDIT STATUS^S^E:EDITABLE;D:DISPLAY ONLY;^0;9^Q
"^DD",364.7,364.7,.09,3)
Enter 'E' to enable editing for this field, 'D' for a display only field.
"^DD",364.7,364.7,.09,21,0)
^^2^2^2960320^
"^DD",364.7,364.7,.09,21,1,0)
This field is used to control whether or not a data element on a screen is
"^DD",364.7,364.7,.09,21,2,0)
editable or for display-only purposes.
"^DD",364.7,364.7,.09,"DT")
2960320
"^DD",364.7,364.7,.1,0)
EDIT GROUP NUMBER^NJ2,0^^0;10^K:+X'=X!(X>99)!(X<1)!(X?.E1"."1N.N) X
"^DD",364.7,364.7,.1,3)
 Enter the edit group # that this field will be included in.  Valid #'s are 1-99.
"^DD",364.7,364.7,.1,21,0)
^^6^6^2960321^^
"^DD",364.7,364.7,.1,21,1,0)
This field contains the # of the edit group that the screen data element
"^DD",364.7,364.7,.1,21,2,0)
will be included with.  When this group # is selected on an edit screen,
"^DD",364.7,364.7,.1,21,3,0)
all data elements assigned to this group # on this screen will be presented
"^DD",364.7,364.7,.1,21,4,0)
for editing.  If no # is entered here, this field will not be available for
"^DD",364.7,364.7,.1,21,5,0)
editing.  This field will only apply to screen-type forms' editable data
"^DD",364.7,364.7,.1,21,6,0)
element descriptions.
"^DD",364.7,364.7,.1,"DT")
2960321
"^DD",364.7,364.7,1,0)
FORMAT CODE^K^^1;E1,245^K:$L(X)>245 X D:$D(X) ^DIM
"^DD",364.7,364.7,1,3)
This is Standard MUMPS code.
"^DD",364.7,364.7,1,9)
@
"^DD",364.7,364.7,1,21,0)
^^8^8^2951207^
"^DD",364.7,364.7,1,21,1,0)
This is the code that will be xecuted to format the 'raw' data element
"^DD",364.7,364.7,1,21,2,0)
value that is returned from the execution of the DATA ELEMENT's definition.
"^DD",364.7,364.7,1,21,3,0)
This code can assume the variable/array IBXDATA is available as input and
"^DD",364.7,364.7,1,21,4,0)
should set this variable/array as its output.  Standard calls for data
"^DD",364.7,364.7,1,21,5,0)
formatting have been provided.  The variables IBXPG, IBXLN, IBXCOL are the
"^DD",364.7,364.7,1,21,6,0)
only IBX* variables that should be changed in this routine.  These represent
"^DD",364.7,364.7,1,21,7,0)
the page, line, column as the first 3 levels of subscript for the output
"^DD",364.7,364.7,1,21,8,0)
array.
"^DD",364.7,364.7,1,"DT")
2951207
"^DD",364.7,364.7,3,0)
FORMAT CODE DESCRIPTION^364.73^^3;0
"^DD",364.7,364.7,3,21,0)
^.001^1^1^3010102^^
"^DD",364.7,364.7,3,21,1,0)
This field describes the function of the format code entered.
"^DD",364.7,364.7,3,"DT")
2960710
"^DD",364.7,364.73,0)
FORMAT CODE DESCRIPTION SUB-FIELD^^.01^1
"^DD",364.7,364.73,0,"DT")
2960710
"^DD",364.7,364.73,0,"NM","FORMAT CODE DESCRIPTION")
 
"^DD",364.7,364.73,0,"UP")
364.7
"^DD",364.7,364.73,.01,0)
FORMAT CODE DESCRIPTION^W^^0;1^Q
"^DD",364.7,364.73,.01,3)
Enter a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,21,0)
^.001^1^1^3010102^^^^
"^DD",364.7,364.73,.01,21,1,0)
This is a description of the processing logic of the format code.
"^DD",364.7,364.73,.01,"DT")
2960710
"^DIC",350.8,350.8,0)
IB ERROR
"^DIC",350.8,350.8,0,"GL")
^IBE(350.8,
"^DIC",350.8,350.8,"%D",0)
^^11^11^2940214^^^^
"^DIC",350.8,350.8,"%D",1,0)
This file contains errors for billing functions.  It may be used by
"^DIC",350.8,350.8,"%D",2,0)
applications, IB or AR.  The normal format for a routine to return
"^DIC",350.8,350.8,"%D",3,0)
an error is to return the variable:
"^DIC",350.8,350.8,"%D",4,0)
  Y=1^... a successful event occured
"^DIC",350.8,350.8,"%D",5,0)
  Y=-1^error code[;error code;error code...]^additional text
"^DIC",350.8,350.8,"%D",6,0)
The error messages can be displayed by calling routine ^IBAERR.  If
"^DIC",350.8,350.8,"%D",7,0)
the error occurs in a tasked job ($D(ZTQUEUED)'=0) the routine will
"^DIC",350.8,350.8,"%D",8,0)
put the error message in a bulletin and post it to the group defined
"^DIC",350.8,350.8,"%D",9,0)
in the IB SITE PARAMETER FILE.
"^DIC",350.8,350.8,"%D",10,0)
 
"^DIC",350.8,350.8,"%D",11,0)
Per VHA Directive 10-93-142, this file definition should not be modified.
"^DIC",350.8,"B","IB ERROR",350.8)

"^DIC",364.5,364.5,0)
IB DATA ELEMENT DEFINITION^364.5
"^DIC",364.5,364.5,0,"GL")
^IBA(364.5,
"^DIC",364.5,364.5,"%D",0)
^^8^8^2970606^^^^
"^DIC",364.5,364.5,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.5,364.5,"%D",2,0)
 
"^DIC",364.5,364.5,"%D",3,0)
This file contains the definition of all data elements that are needed for
"^DIC",364.5,364.5,"%D",4,0)
various forms throughout the MCCR DHCP system.  It contains the 'blueprint'
"^DIC",364.5,364.5,"%D",5,0)
for how to extract the data for each data element entry.
"^DIC",364.5,364.5,"%D",6,0)
 
"^DIC",364.5,364.5,"%D",7,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.5,364.5,"%D",8,0)
NATIONAL should not be deleted or edited.
"^DIC",364.5,"B","IB DATA ELEMENT DEFINITION",364.5)

"^DIC",364.6,364.6,0)
IB FORM SKELETON DEFINITION^364.6P
"^DIC",364.6,364.6,0,"GL")
^IBA(364.6,
"^DIC",364.6,364.6,"%D",0)
^^10^10^2970606^^^^
"^DIC",364.6,364.6,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.6,364.6,"%D",2,0)
 
"^DIC",364.6,364.6,"%D",3,0)
This file contains records that define the skeleton makeup of forms for
"^DIC",364.6,364.6,"%D",4,0)
the IB system.  This definition includes the absolute position of every
"^DIC",364.6,364.6,"%D",5,0)
field that can be output on the form, the length each field must be limited
"^DIC",364.6,364.6,"%D",6,0)
to, and some descriptive information.   This includes printed forms,
"^DIC",364.6,364.6,"%D",7,0)
transmittable output files, and special local billing screens.
"^DIC",364.6,364.6,"%D",8,0)
 
"^DIC",364.6,364.6,"%D",9,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.6,364.6,"%D",10,0)
NATIONAL should not be deleted or edited.
"^DIC",364.6,"B","IB FORM SKELETON DEFINITION",364.6)

"^DIC",364.7,364.7,0)
IB FORM FIELD CONTENT^364.7P
"^DIC",364.7,364.7,0,"GL")
^IBA(364.7,
"^DIC",364.7,364.7,"%D",0)
^1.001^9^9^3030331^^^^
"^DIC",364.7,364.7,"%D",1,0)
DO NOT delete entries or edit data in this file with VA File Manager.
"^DIC",364.7,364.7,"%D",2,0)
 
"^DIC",364.7,364.7,"%D",3,0)
This is the file that contains the specific fields to be used to produce
"^DIC",364.7,364.7,"%D",4,0)
the associated form or screen.  If there is no insurance company or bill
"^DIC",364.7,364.7,"%D",5,0)
type specified for an entry, this is assumed to be the default definition
"^DIC",364.7,364.7,"%D",6,0)
of the field.
"^DIC",364.7,364.7,"%D",7,0)
 
"^DIC",364.7,364.7,"%D",8,0)
Entries in this file that are designated as having a SECURITY LEVEL of
"^DIC",364.7,364.7,"%D",9,0)
NATIONAL should not be deleted or edited.
"^DIC",364.7,"B","IB FORM FIELD CONTENT",364.7)

"BLD",8205,6)
^434
**END**
**END**
