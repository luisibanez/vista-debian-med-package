Released IB*2*457 SEQ #450
Extracted from mail message
**KIDS**:IB*2.0*457^

**INSTALL NAME**
IB*2.0*457
"BLD",8602,0)
IB*2.0*457^INTEGRATED BILLING^0^3120515^y
"BLD",8602,4,0)
^9.64PA^355.351^3
"BLD",8602,4,350.9,0)
350.9
"BLD",8602,4,350.9,2,0)
^9.641^350.9006^2
"BLD",8602,4,350.9,2,350.9,0)
IB SITE PARAMETERS  (File-top level)
"BLD",8602,4,350.9,2,350.9,1,0)
^9.6411^13.07^7
"BLD",8602,4,350.9,2,350.9,1,13.01,0)
HMS DIRECTORY
"BLD",8602,4,350.9,2,350.9,1,13.02,0)
EII ACTIVE
"BLD",8602,4,350.9,2,350.9,1,13.03,0)
RESULT FILE NAME
"BLD",8602,4,350.9,2,350.9,1,13.04,0)
DAY OF MONTH RESULT FILE DUE
"BLD",8602,4,350.9,2,350.9,1,13.05,0)
DAYS BEFORE LATE MESSAGE SENT
"BLD",8602,4,350.9,2,350.9,1,13.06,0)
MAX EXT FILE QUE CONFIRM TIME
"BLD",8602,4,350.9,2,350.9,1,13.07,0)
MAX NUM OF RECORDS PER MESSAGE
"BLD",8602,4,350.9,2,350.9006,0)
EXTRACT FILES  (sub-file)
"BLD",8602,4,350.9,2,350.9006,1,0)
^9.6411^^
"BLD",8602,4,350.9,222)
y^n^p^^^^n^^n
"BLD",8602,4,350.9,224)

"BLD",8602,4,355.35,0)
355.35
"BLD",8602,4,355.35,222)
y^y^f^^^^n
"BLD",8602,4,355.351,0)
355.351
"BLD",8602,4,355.351,222)
y^y^f^^^^n
"BLD",8602,4,"APDD",350.9,350.9)

"BLD",8602,4,"APDD",350.9,350.9,13.01)

"BLD",8602,4,"APDD",350.9,350.9,13.02)

"BLD",8602,4,"APDD",350.9,350.9,13.03)

"BLD",8602,4,"APDD",350.9,350.9,13.04)

"BLD",8602,4,"APDD",350.9,350.9,13.05)

"BLD",8602,4,"APDD",350.9,350.9,13.06)

"BLD",8602,4,"APDD",350.9,350.9,13.07)

"BLD",8602,4,"APDD",350.9,350.9006)

"BLD",8602,4,"B",350.9,350.9)

"BLD",8602,4,"B",355.35,355.35)

"BLD",8602,4,"B",355.351,355.351)

"BLD",8602,6.3)
30
"BLD",8602,"ABPKG")
n
"BLD",8602,"INIT")
POST^IB20P457
"BLD",8602,"KRN",0)
^9.67PA^779.2^20
"BLD",8602,"KRN",.4,0)
.4
"BLD",8602,"KRN",.4,"NM",0)
^9.68A^^
"BLD",8602,"KRN",.401,0)
.401
"BLD",8602,"KRN",.402,0)
.402
"BLD",8602,"KRN",.402,"NM",0)
^9.68A^1^1
"BLD",8602,"KRN",.402,"NM",1,0)
IBCNF EDIT CONFIGURATION    FILE #350.9^350.9^0
"BLD",8602,"KRN",.402,"NM","B","IBCNF EDIT CONFIGURATION    FILE #350.9",1)

"BLD",8602,"KRN",.403,0)
.403
"BLD",8602,"KRN",.5,0)
.5
"BLD",8602,"KRN",.84,0)
.84
"BLD",8602,"KRN",3.6,0)
3.6
"BLD",8602,"KRN",3.8,0)
3.8
"BLD",8602,"KRN",3.8,"NM",0)
^9.68A^6^6
"BLD",8602,"KRN",3.8,"NM",1,0)
IBN^^0
"BLD",8602,"KRN",3.8,"NM",2,0)
IBK^^0
"BLD",8602,"KRN",3.8,"NM",3,0)
IBX^^0
"BLD",8602,"KRN",3.8,"NM",4,0)
IBH^^0
"BLD",8602,"KRN",3.8,"NM",5,0)
IBCNF EII IRM^^0
"BLD",8602,"KRN",3.8,"NM",6,0)
IBCNF EII XML READY^^0
"BLD",8602,"KRN",3.8,"NM","B","IBCNF EII IRM",5)

"BLD",8602,"KRN",3.8,"NM","B","IBCNF EII XML READY",6)

"BLD",8602,"KRN",3.8,"NM","B","IBH",4)

"BLD",8602,"KRN",3.8,"NM","B","IBK",2)

"BLD",8602,"KRN",3.8,"NM","B","IBN",1)

"BLD",8602,"KRN",3.8,"NM","B","IBX",3)

"BLD",8602,"KRN",9.2,0)
9.2
"BLD",8602,"KRN",9.8,0)
9.8
"BLD",8602,"KRN",9.8,"NM",0)
^9.68A^6^6
"BLD",8602,"KRN",9.8,"NM",1,0)
IBAMTC^^0^B26047773
"BLD",8602,"KRN",9.8,"NM",2,0)
IBCNFCON^^0^B917921
"BLD",8602,"KRN",9.8,"NM",3,0)
IBCNFRD^^0^B53860378
"BLD",8602,"KRN",9.8,"NM",4,0)
IBCNFRD2^^0^B155001370
"BLD",8602,"KRN",9.8,"NM",5,0)
IBCNFSND^^0^B150963134
"BLD",8602,"KRN",9.8,"NM",6,0)
IB20P457^^0^B18868248
"BLD",8602,"KRN",9.8,"NM","B","IB20P457",6)

"BLD",8602,"KRN",9.8,"NM","B","IBAMTC",1)

"BLD",8602,"KRN",9.8,"NM","B","IBCNFCON",2)

"BLD",8602,"KRN",9.8,"NM","B","IBCNFRD",3)

"BLD",8602,"KRN",9.8,"NM","B","IBCNFRD2",4)

"BLD",8602,"KRN",9.8,"NM","B","IBCNFSND",5)

"BLD",8602,"KRN",19,0)
19
"BLD",8602,"KRN",19,"NM",0)
^9.68A^3^3
"BLD",8602,"KRN",19,"NM",1,0)
IB SITE MGR MENU^^2
"BLD",8602,"KRN",19,"NM",2,0)
IBCNF EDIT CONFIGURATION^^0
"BLD",8602,"KRN",19,"NM",3,0)
IBCNF EII GET SERVER^^0
"BLD",8602,"KRN",19,"NM","B","IB SITE MGR MENU",1)

"BLD",8602,"KRN",19,"NM","B","IBCNF EDIT CONFIGURATION",2)

"BLD",8602,"KRN",19,"NM","B","IBCNF EII GET SERVER",3)

"BLD",8602,"KRN",19.1,0)
19.1
"BLD",8602,"KRN",19.1,"NM",0)
^9.68A^1^1
"BLD",8602,"KRN",19.1,"NM",1,0)
IBCNF EDIT^^0
"BLD",8602,"KRN",19.1,"NM","B","IBCNF EDIT",1)

"BLD",8602,"KRN",101,0)
101
"BLD",8602,"KRN",409.61,0)
409.61
"BLD",8602,"KRN",771,0)
771
"BLD",8602,"KRN",779.2,0)
779.2
"BLD",8602,"KRN",870,0)
870
"BLD",8602,"KRN",8989.51,0)
8989.51
"BLD",8602,"KRN",8989.52,0)
8989.52
"BLD",8602,"KRN",8994,0)
8994
"BLD",8602,"KRN","B",.4,.4)

"BLD",8602,"KRN","B",.401,.401)

"BLD",8602,"KRN","B",.402,.402)

"BLD",8602,"KRN","B",.403,.403)

"BLD",8602,"KRN","B",.5,.5)

"BLD",8602,"KRN","B",.84,.84)

"BLD",8602,"KRN","B",3.6,3.6)

"BLD",8602,"KRN","B",3.8,3.8)

"BLD",8602,"KRN","B",9.2,9.2)

"BLD",8602,"KRN","B",9.8,9.8)

"BLD",8602,"KRN","B",19,19)

"BLD",8602,"KRN","B",19.1,19.1)

"BLD",8602,"KRN","B",101,101)

"BLD",8602,"KRN","B",409.61,409.61)

"BLD",8602,"KRN","B",771,771)

"BLD",8602,"KRN","B",779.2,779.2)

"BLD",8602,"KRN","B",870,870)

"BLD",8602,"KRN","B",8989.51,8989.51)

"BLD",8602,"KRN","B",8989.52,8989.52)

"BLD",8602,"KRN","B",8994,8994)

"BLD",8602,"QDEF")
^^^^^^^^YES
"BLD",8602,"QUES",0)
^9.62^^
"BLD",8602,"REQB",0)
^9.611^1^1
"BLD",8602,"REQB",1,0)
IB*2.0*312^2
"BLD",8602,"REQB","B","IB*2.0*312",1)

"FIA",350.9)
IB SITE PARAMETERS
"FIA",350.9,0)
^IBE(350.9,
"FIA",350.9,0,0)
350.9I
"FIA",350.9,0,1)
y^n^p^^^^n^^n
"FIA",350.9,0,10)

"FIA",350.9,0,11)

"FIA",350.9,0,"RLRO")

"FIA",350.9,0,"VR")
2.0^IB
"FIA",350.9,350.9)
1
"FIA",350.9,350.9,13.01)

"FIA",350.9,350.9,13.02)

"FIA",350.9,350.9,13.03)

"FIA",350.9,350.9,13.04)

"FIA",350.9,350.9,13.05)

"FIA",350.9,350.9,13.06)

"FIA",350.9,350.9,13.07)

"FIA",350.9,350.9,13.08)

"FIA",350.9,350.9006)
0
"FIA",355.35)
HMS EXTRACT FILE STATUS
"FIA",355.35,0)
^IBA(355.35,
"FIA",355.35,0,0)
355.35S
"FIA",355.35,0,1)
y^y^f^^^^n
"FIA",355.35,0,10)

"FIA",355.35,0,11)

"FIA",355.35,0,"RLRO")

"FIA",355.35,0,"VR")
2.0^IB
"FIA",355.35,355.35)
0
"FIA",355.35,355.3503)
0
"FIA",355.35,355.3505)
0
"FIA",355.35,355.35051)
0
"FIA",355.351)
HMS RESULT FILE STATUS
"FIA",355.351,0)
^IBA(355.351,
"FIA",355.351,0,0)
355.351
"FIA",355.351,0,1)
y^y^f^^^^n
"FIA",355.351,0,10)

"FIA",355.351,0,11)

"FIA",355.351,0,"RLRO")

"FIA",355.351,0,"VR")
2.0^IB
"FIA",355.351,355.351)
0
"FIA",355.351,355.35103)
0
"FIA",355.351,355.3511)
0
"FIA",355.351,355.35111)
0
"INIT")
POST^IB20P457
"KRN",.402,1786,-1)
0^1
"KRN",.402,1786,0)
IBCNF EDIT CONFIGURATION^3111021.1403^@^350.9^^@^3120514
"KRN",.402,1786,"DIAB",1,1,350.9006,0)
ALL
"KRN",.402,1786,"DR",1,350.9)
13.01;13.02;13.03;13.04;13.05;13.06;13.07;13.08;
"KRN",.402,1786,"DR",2,350.9006)
.01:.06
"KRN",3.8,288,-1)
0^1
"KRN",3.8,288,0)
IBN^PU^n^^^^
"KRN",3.8,288,2,0)
^3.801^3^3^3111202^^
"KRN",3.8,288,2,1,0)
This mail group contains the server process email to receive messages 
"KRN",3.8,288,2,2,0)
from the IBN DMI queue.  Messages are sent to this group for confirmation 
"KRN",3.8,288,2,3,0)
of outbound messages as well as inbound messages.
"KRN",3.8,288,3)

"KRN",3.8,288,5,0)
^3.811P^^0
"KRN",3.8,290,-1)
0^4
"KRN",3.8,290,0)
IBH^PU^n^^^^
"KRN",3.8,290,2,0)
^^3^3^3111115^
"KRN",3.8,290,2,1,0)
This mail group contains the server process email to receive messages 
"KRN",3.8,290,2,2,0)
from the IBH DMI queue.  Messages are sent to this group for confirmation 
"KRN",3.8,290,2,3,0)
of outbound messages as well as inbound messages.
"KRN",3.8,290,3)

"KRN",3.8,290,5,0)
^3.811P^^0
"KRN",3.8,291,-1)
0^3
"KRN",3.8,291,0)
IBX^PU^n^^^^
"KRN",3.8,291,2,0)
^3.801^3^3^3120228^^^^
"KRN",3.8,291,2,1,0)
This mail group contains the server process email to receive messages 
"KRN",3.8,291,2,2,0)
from the IBX DMI queue.  Messages are sent to this group for confirmation 
"KRN",3.8,291,2,3,0)
of outbound messages as well as inbound messages.
"KRN",3.8,291,3)

"KRN",3.8,291,5,0)
^3.811P^^0
"KRN",3.8,292,-1)
0^2
"KRN",3.8,292,0)
IBK^PU^n^^^^
"KRN",3.8,292,2,0)
^^3^3^3111115^
"KRN",3.8,292,2,1,0)
This mail group contains the server process email to receive messages 
"KRN",3.8,292,2,2,0)
from the IBK DMI queue.  Messages are sent to this group for confirmation 
"KRN",3.8,292,2,3,0)
of outbound messages as well as inbound messages.
"KRN",3.8,292,3)

"KRN",3.8,292,5,0)
^3.811P^^0
"KRN",3.8,293,-1)
0^5
"KRN",3.8,293,0)
IBCNF EII IRM^PU^n^^^^
"KRN",3.8,293,2,0)
^3.801^1^1^3111115^^^^
"KRN",3.8,293,2,1,0)
If extracted files are not found within the due time, or if after sending the extract files to AITC and confirmation messages are not received within the due time, an Email is sent to this mail group.
"KRN",3.8,293,3)

"KRN",3.8,294,-1)
0^6
"KRN",3.8,294,0)
IBCNF EII XML READY^PU^^^^^
"KRN",3.8,294,2,0)
^3.801^2^2^3111209^^^^
"KRN",3.8,294,2,1,0)
Messages are sent to this group for notification of HMS XML file 
"KRN",3.8,294,2,2,0)
availability.
"KRN",3.8,294,3)

"KRN",19,2318,-1)
2^1
"KRN",19,2318,0)
IB SITE MGR MENU^System Manager's Integrated Billing Menu^^M^1258^^^^^^^49^^1
"KRN",19,2318,10,0)
^19.01IP^20^20
"KRN",19,2318,10,20,0)
11344
"KRN",19,2318,10,20,"^")
IBCNF EDIT CONFIGURATION
"KRN",19,2318,"U")
SYSTEM MANAGER'S INTEGRATED BI
"KRN",19,11339,-1)
0^3
"KRN",19,11339,0)
IBCNF EII GET SERVER^IBCNF EII GET SERVER^^S^^^^^^^y^INTEGRATED BILLING^^^^^
"KRN",19,11339,15)

"KRN",19,11339,20)

"KRN",19,11339,25)
GAITCMSG^IBCNFRD
"KRN",19,11339,26)

"KRN",19,11339,220)
^R^^Y^Y^R
"KRN",19,11339,"U")
IBCNF EII GET SERVER
"KRN",19,11344,-1)
0^2
"KRN",19,11344,0)
IBCNF EDIT CONFIGURATION^eII Edit Configuration^^R^^IBCNF EDIT^^^^^^INTEGRATED BILLING
"KRN",19,11344,25)
EDIT^IBCNFCON
"KRN",19,11344,"U")
EII EDIT CONFIGURATION
"KRN",19.1,551,-1)
0^1
"KRN",19.1,551,0)
IBCNF EDIT
"KRN",19.1,551,1,0)
^^1^1^3111122^
"KRN",19.1,551,1,1,0)
This security key is assigned to eII Edit Configuration option. Only users with this security key can access this option. 
"MBREQ")
0
"ORD",3,19.1)
19.1;3;;;KEY^XPDTA1;KEYF1^XPDIA1;KEYE1^XPDIA1;KEYF2^XPDIA1;;KEYDEL^XPDIA1
"ORD",3,19.1,0)
SECURITY KEY
"ORD",7,.402)
.402;7;;;EDEOUT^DIFROMSO(.402,DA,"",XPDA);FPRE^DIFROMSI(.402,"",XPDA);EPRE^DIFROMSI(.402,DA,$E("N",$G(XPDNEW)),XPDA,"",OLDA);;EPOST^DIFROMSI(.402,DA,"",XPDA);DEL^DIFROMSK(.402,"",%)
"ORD",7,.402,0)
INPUT TEMPLATE
"ORD",11,3.8)
3.8;11;;;MAILG^XPDTA1;MAILGF1^XPDIA1;MAILGE1^XPDIA1;MAILGF2^XPDIA1;;MAILGDEL^XPDIA1(%)
"ORD",11,3.8,0)
MAIL GROUP
"ORD",18,19)
19;18;;;OPT^XPDTA;OPTF1^XPDIA;OPTE1^XPDIA;OPTF2^XPDIA;;OPTDEL^XPDIA
"ORD",18,19,0)
OPTION
"PKG",49,-1)
1^1
"PKG",49,0)
INTEGRATED BILLING^IB^INTEGRATED BILLING
"PKG",49,20,0)
^9.402P^1^1
"PKG",49,20,1,0)
2^^IBAXDR
"PKG",49,20,1,1)

"PKG",49,20,"B",2,1)

"PKG",49,22,0)
^9.49I^1^1
"PKG",49,22,1,0)
2.0^2940321^2960627
"PKG",49,22,1,"PAH",1,0)
457^3120515
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
YES
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
6
"RTN","IB20P457")
0^6^B18868248^n/a
"RTN","IB20P457",1,0)
IB20P457 ;WOIFO/KJS/PO - POST-INIT FOR IB*2.0*457;11-1-2011
"RTN","IB20P457",2,0)
 ;;2.0;INTEGRATED BILLING;**457**;21-MAR-94;Build 30
"RTN","IB20P457",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IB20P457",4,0)
 ;
"RTN","IB20P457",5,0)
 ; This routine contains the post-initialization code for
"RTN","IB20P457",6,0)
 ; Integrated Billing package v2.0. Patch 457
"RTN","IB20P457",7,0)
 ;
"RTN","IB20P457",8,0)
 Q
"RTN","IB20P457",9,0)
 ;
"RTN","IB20P457",10,0)
POST ;
"RTN","IB20P457",11,0)
 ;
"RTN","IB20P457",12,0)
 D DOMSET
"RTN","IB20P457",13,0)
 D PARMSET
"RTN","IB20P457",14,0)
 D MAILGRP
"RTN","IB20P457",15,0)
 Q
"RTN","IB20P457",16,0)
 ;
"RTN","IB20P457",17,0)
DOMSET ; set up the domain file
"RTN","IB20P457",18,0)
 N IBDOMARR,DA,DDER,IBDOMAIN,DIC,X,Y,DDER
"RTN","IB20P457",19,0)
 S IBDOMARR("Q-IBH.VA.GOV")=""
"RTN","IB20P457",20,0)
 S IBDOMARR("Q-IBK.VA.GOV")=""
"RTN","IB20P457",21,0)
 S IBDOMARR("Q-IBN.VA.GOV")=""
"RTN","IB20P457",22,0)
 S IBDOMARR("Q-IBX.VA.GOV")=""
"RTN","IB20P457",23,0)
 S IBDOMAIN=""
"RTN","IB20P457",24,0)
 F  S IBDOMAIN=$O(IBDOMARR(IBDOMAIN)) Q:IBDOMAIN=""  D
"RTN","IB20P457",25,0)
 . Q:$O(^DIC(4.2,"B",IBDOMAIN,0))         ;quit if domain already exist.
"RTN","IB20P457",26,0)
 . D MES^XPDUTL("Creating "_IBDOMAIN_" domain... ")
"RTN","IB20P457",27,0)
 . S DIC="^DIC(4.2,",DIC(0)="L",X=IBDOMAIN,DIC("DR")="1///S;2///FOC-AUSTIN.VA.GOV;1.7///YES" D FILE^DICN K DIC,X
"RTN","IB20P457",28,0)
 Q
"RTN","IB20P457",29,0)
 ;
"RTN","IB20P457",30,0)
PARMSET ;
"RTN","IB20P457",31,0)
 ;setup 350.9
"RTN","IB20P457",32,0)
 Q:$D(^IBE(350.9,1,13))  ;already setup
"RTN","IB20P457",33,0)
 N SITE,EXTFILE,DMIQ,EXTTYP,PARMS,IENS1,IENS2,IBD0,IBD1,DIK,DA
"RTN","IB20P457",34,0)
 S SITE=$P($$SITE^VASITE(),U,3)
"RTN","IB20P457",35,0)
 S PARMS(350.9,"1,",13.01)="USER$:[HMS]"
"RTN","IB20P457",36,0)
 S PARMS(350.9,"1,",13.02)=0
"RTN","IB20P457",37,0)
 S PARMS(350.9,"1,",13.03)="VA"_SITE_".TXT"
"RTN","IB20P457",38,0)
 S PARMS(350.9,"1,",13.04)=31
"RTN","IB20P457",39,0)
 S PARMS(350.9,"1,",13.05)=2
"RTN","IB20P457",40,0)
 S PARMS(350.9,"1,",13.06)=24
"RTN","IB20P457",41,0)
 S PARMS(350.9,"1,",13.07)=100
"RTN","IB20P457",42,0)
 D UPDATE^DIE("","PARMS","IENS1")
"RTN","IB20P457",43,0)
 ;
"RTN","IB20P457",44,0)
 ; delete the Extract File sub-file, if any, before creating the 
"RTN","IB20P457",45,0)
 S IBD0=1    ; this is hard coded is only one ien
"RTN","IB20P457",46,0)
 S IBD1=0
"RTN","IB20P457",47,0)
 F  S IBD1=$O(^IBE(350.9,IBD0,13.08,IBD1)) Q:'IBD1  D
"RTN","IB20P457",48,0)
 . S DA(1)=IBD0
"RTN","IB20P457",49,0)
 . S DA=IBD1
"RTN","IB20P457",50,0)
 . S DIK="^IBE(350.9,"_DA(1)_",13.08,"
"RTN","IB20P457",51,0)
 . D ^DIK
"RTN","IB20P457",52,0)
 ;
"RTN","IB20P457",53,0)
 F I=1:1:4 S IENS2(I)=I
"RTN","IB20P457",54,0)
 S PARMS(350.9006,"+1,1,",.01)="NOINSUR"
"RTN","IB20P457",55,0)
 S PARMS(350.9006,"+1,1,",.02)=1
"RTN","IB20P457",56,0)
 S PARMS(350.9006,"+1,1,",.03)="VEHMN"_SITE_".TXT"
"RTN","IB20P457",57,0)
 S PARMS(350.9006,"+1,1,",.04)="XXX@Q-IBN.VA.GOV"
"RTN","IB20P457",58,0)
 S PARMS(350.9006,"+1,1,",.05)=1
"RTN","IB20P457",59,0)
 S PARMS(350.9006,"+1,1,",.06)=2
"RTN","IB20P457",60,0)
 S PARMS(350.9006,"+2,1,",.01)="ENHNOIN"
"RTN","IB20P457",61,0)
 S PARMS(350.9006,"+2,1,",.02)=1
"RTN","IB20P457",62,0)
 S PARMS(350.9006,"+2,1,",.03)="VEHMH"_SITE_".TXT"
"RTN","IB20P457",63,0)
 S PARMS(350.9006,"+2,1,",.04)="XXX@Q-IBH.VA.GOV"
"RTN","IB20P457",64,0)
 S PARMS(350.9006,"+2,1,",.05)=1
"RTN","IB20P457",65,0)
 S PARMS(350.9006,"+2,1,",.06)=2
"RTN","IB20P457",66,0)
 S PARMS(350.9006,"+3,1,",.01)="NORXINS"
"RTN","IB20P457",67,0)
 S PARMS(350.9006,"+3,1,",.02)=1
"RTN","IB20P457",68,0)
 S PARMS(350.9006,"+3,1,",.03)="VEHMX"_SITE_".TXT"
"RTN","IB20P457",69,0)
 S PARMS(350.9006,"+3,1,",.04)="XXX@Q-IBX.VA.GOV"
"RTN","IB20P457",70,0)
 S PARMS(350.9006,"+3,1,",.05)=1
"RTN","IB20P457",71,0)
 S PARMS(350.9006,"+3,1,",.06)=2
"RTN","IB20P457",72,0)
 S PARMS(350.9006,"+4,1,",.01)="NONVERINS"
"RTN","IB20P457",73,0)
 S PARMS(350.9006,"+4,1,",.02)=1
"RTN","IB20P457",74,0)
 S PARMS(350.9006,"+4,1,",.03)="VEHMK"_SITE_".TXT"
"RTN","IB20P457",75,0)
 S PARMS(350.9006,"+4,1,",.04)="XXX@Q-IBK.VA.GOV"
"RTN","IB20P457",76,0)
 S PARMS(350.9006,"+4,1,",.05)=0
"RTN","IB20P457",77,0)
 S PARMS(350.9006,"+4,1,",.06)=2
"RTN","IB20P457",78,0)
 D UPDATE^DIE("","PARMS","IENS2")
"RTN","IB20P457",79,0)
 Q
"RTN","IB20P457",80,0)
 ;
"RTN","IB20P457",81,0)
MAILGRP ;
"RTN","IB20P457",82,0)
 N EC,MG,MGDESC,MGNAM,X,MGTYP,MGORG,MGSE,MGSIL,XMTEXT,MGMEM,XMY
"RTN","IB20P457",83,0)
 ;Call the MailMan API to Create Mail Groups.
"RTN","IB20P457",84,0)
 ;Code for the mail groups MUST remain for later rounds.
"RTN","IB20P457",85,0)
 S MG("IBH")=""
"RTN","IB20P457",86,0)
 S MG("IBK")=""
"RTN","IB20P457",87,0)
 S MG("IBN")=""
"RTN","IB20P457",88,0)
 S MG("IBX")=""
"RTN","IB20P457",89,0)
 S MGNAM="",MGORG=DUZ
"RTN","IB20P457",90,0)
 S (MGTYP,MGSE)=0,MGSIL=1,MGMEM=""
"RTN","IB20P457",91,0)
 ;
"RTN","IB20P457",92,0)
 ;need to add the server option this way as it doesn't have a DUZ
"RTN","IB20P457",93,0)
 S MGMEM="S.IBCNF EII GET SERVER"
"RTN","IB20P457",94,0)
 D ADDMBRS^XMXAPIG(MGORG,.MG,MGMEM)
"RTN","IB20P457",95,0)
 ;
"RTN","IB20P457",96,0)
 ;setup IRM mail group
"RTN","IB20P457",97,0)
 S MGNAM="IBCNF EII IRM"
"RTN","IB20P457",98,0)
 S MGMEM(DUZ)="" ; put person running this patch in group initially
"RTN","IB20P457",99,0)
 S X=$$MG^XMBGRP(MGNAM,MGTYP,MGORG,MGSE,.MGMEM,.MGDESC,MGSIL)
"RTN","IB20P457",100,0)
 I X D
"RTN","IB20P457",101,0)
 . D BMES^XPDUTL(">>> "_MGNAM_" mail group added successfully!")
"RTN","IB20P457",102,0)
 . D BMES^XPDUTL(">>> You have been added as a member of this mail group.")
"RTN","IB20P457",103,0)
 . D MES^XPDUTL("    Please add members or remove yourself as appropriate.")
"RTN","IB20P457",104,0)
 ;
"RTN","IB20P457",105,0)
 ;setup XML mail group
"RTN","IB20P457",106,0)
 S MGNAM="IBCNF EII XML READY"
"RTN","IB20P457",107,0)
 S MGMEM(DUZ)="" ; put person running this patch in group initially
"RTN","IB20P457",108,0)
 S X=$$MG^XMBGRP(MGNAM,MGTYP,MGORG,MGSE,.MGMEM,.MGDESC,MGSIL)
"RTN","IB20P457",109,0)
 I X D
"RTN","IB20P457",110,0)
 . D BMES^XPDUTL(">>> "_MGNAM_" mail group added successfully!")
"RTN","IB20P457",111,0)
 . D BMES^XPDUTL(">>> You have been added as a member of this mail group.")
"RTN","IB20P457",112,0)
 . D MES^XPDUTL("    Please add members or remove yourself as appropriate.")
"RTN","IB20P457",113,0)
 ;
"RTN","IB20P457",114,0)
 Q
"RTN","IBAMTC")
0^1^B26047773^B25558065
"RTN","IBAMTC",1,0)
IBAMTC ;ALB/CPM-MEANS TEST NIGHTLY COMPILATION JOB ;09-OCT-91
"RTN","IBAMTC",2,0)
V ;;2.0;INTEGRATED BILLING;**34,52,70,93,100,118,115,132,150,153,137,176,215,275,321,312,457**;21-MAR-94;Build 30
"RTN","IBAMTC",3,0)
 ;;Per VHA Directive 10-93-142, this routine should not be modified.
"RTN","IBAMTC",4,0)
 ;
"RTN","IBAMTC",5,0)
INIT ; Entry point - initialize variables and parameters
"RTN","IBAMTC",6,0)
 ;
"RTN","IBAMTC",7,0)
 ;***
"RTN","IBAMTC",8,0)
 ;S XRTL=$ZU(0),XRTN="IBAMTC-1" D T0^%ZOSV ;start rt clock
"RTN","IBAMTC",9,0)
 ;
"RTN","IBAMTC",10,0)
 D UPDT^IBARXEPS($$FMADD^XLFDT(DT,-30),DT,1)
"RTN","IBAMTC",11,0)
 ;
"RTN","IBAMTC",12,0)
 D NIGHTLY^IBTRKR ; claims tracking nightly update
"RTN","IBAMTC",13,0)
 ;
"RTN","IBAMTC",14,0)
 D ^IBCD ; automated biller
"RTN","IBAMTC",15,0)
 ;
"RTN","IBAMTC",16,0)
 D RELPR^IBAMTV3 ; auto-release patient charges on hold at least 60 days
"RTN","IBAMTC",17,0)
 ;
"RTN","IBAMTC",18,0)
 D EN^IBOHRL ; auto-release patient charges on hold longer than 90 days
"RTN","IBAMTC",19,0)
 ;
"RTN","IBAMTC",20,0)
 K IBDT D BJ^IBJDE  ; Automated DM extract monthly background job.
"RTN","IBAMTC",21,0)
 ;
"RTN","IBAMTC",22,0)
 ; - transfer pricing background job
"RTN","IBAMTC",23,0)
 I '+$$SWSTAT^IBBAPI() D ^IBATEI1                           ;IB*2.0*312
"RTN","IBAMTC",24,0)
 ;
"RTN","IBAMTC",25,0)
 D NIGHT^IBARXMA ; transmit copay cap info
"RTN","IBAMTC",26,0)
 ;
"RTN","IBAMTC",27,0)
 D NOW^%DTC S IBAFY=$$FY^IBOUTL(X),DT=X,U="^"
"RTN","IBAMTC",28,0)
 S (IBERRN,IBWHER,IBJOB,IBY,Y)=1,IBCNT=0 K ^TMP($J,"IBAMTC")
"RTN","IBAMTC",29,0)
 D SITE^IBAUTL I Y<1 S IBY=Y D ERR G CLEAN
"RTN","IBAMTC",30,0)
 D SERV^IBAUTL2 I IBY<1 D ERR G CLEAN
"RTN","IBAMTC",31,0)
 ;
"RTN","IBAMTC",32,0)
 ; Compile Means Test copay and per diem charges for all inpatients
"RTN","IBAMTC",33,0)
 ; Check PFSS Switch                                        ;IB*2.0*312
"RTN","IBAMTC",34,0)
 I '+$$SWSTAT^IBBAPI() S (IBWARD,DFN)="" F  S IBWARD=$O(^DPT("CN",IBWARD)) Q:IBWARD=""  F  S DFN=$O(^DPT("CN",IBWARD,DFN)) Q:'DFN  W !,DFN S IBA=^(DFN),IBY=1 D PROC
"RTN","IBAMTC",35,0)
 ;
"RTN","IBAMTC",36,0)
 ;send inpatients' CV (CombatVet) expiration e-mail alert
"RTN","IBAMTC",37,0)
 D CVEXMAIL^IBACV(DT)
"RTN","IBAMTC",38,0)
 ;
"RTN","IBAMTC",39,0)
 ;check & start LTC Monthly Job LTC if necessary
"RTN","IBAMTC",40,0)
 ; This code may need to be expanded, IF we don't          ;IB*2.0*312 
"RTN","IBAMTC",41,0)
 ; implement on the 1st of the month, for a clean cut over ;IB*2.0*312
"RTN","IBAMTC",42,0)
 I '+$$SWSTAT^IBBAPI() D NJ^IBAECN1                        ;IB*2.0*312
"RTN","IBAMTC",43,0)
 ;
"RTN","IBAMTC",44,0)
 D EN^IBCE ; Transmit electronic bills
"RTN","IBAMTC",45,0)
 ; Clean up expired Means Test billing clocks
"RTN","IBAMTC",46,0)
CLEAN S %H=+$H-1 D YMD^%DTC S IBDT=X,(IBN,DFN)=0,IBWHER=23
"RTN","IBAMTC",47,0)
 F  S DFN=$O(^IBE(351,"ACT",DFN)) Q:'DFN  D
"RTN","IBAMTC",48,0)
 . F  S IBN=$O(^IBE(351,"ACT",DFN,IBN)) Q:'IBN  D
"RTN","IBAMTC",49,0)
 ..  S IBY=1,X1=IBDT,(X2,IBCLDT)=+$P($G(^IBE(351,+IBN,0)),"^",3) D ^%DTC
"RTN","IBAMTC",50,0)
 ..  I X>364 S IBCLDA=IBN D CLOCKCL^IBAUTL3,ERR:IBY<1
"RTN","IBAMTC",51,0)
 ;
"RTN","IBAMTC",52,0)
 ; Close out incomplete events where the patient has been discharged,
"RTN","IBAMTC",53,0)
 ; pass the related charges if they appear correct, and send a bulletin
"RTN","IBAMTC",54,0)
 ; - also, send bulletins on old incomplete charges where there is no
"RTN","IBAMTC",55,0)
 ; incomplete event
"RTN","IBAMTC",56,0)
 D MAIN^IBAMTC2
"RTN","IBAMTC",57,0)
 ;
"RTN","IBAMTC",58,0)
 ;D ^IBAMTC1
"RTN","IBAMTC",59,0)
 ;
"RTN","IBAMTC",60,0)
 ; Send bulletin reporting job completion
"RTN","IBAMTC",61,0)
 I '+$$SWSTAT^IBBAPI() D BULL^IBAMTC1                     ;IB*2.0*312
"RTN","IBAMTC",62,0)
 ;
"RTN","IBAMTC",63,0)
 ; -- purge alerts
"RTN","IBAMTC",64,0)
 D PURGE^IBAERR3
"RTN","IBAMTC",65,0)
 ;
"RTN","IBAMTC",66,0)
 ; Monitor special inpatient billing cases
"RTN","IBAMTC",67,0)
 D BGJ^IBAMTI
"RTN","IBAMTC",68,0)
 ;
"RTN","IBAMTC",69,0)
 ; Print Pharmacy Copay Exemption Income Test Reminder Letters
"RTN","IBAMTC",70,0)
 D EN^IBARXEL
"RTN","IBAMTC",71,0)
 ;
"RTN","IBAMTC",72,0)
 ; Send HMS extract files to AITC DMI queues
"RTN","IBAMTC",73,0)
 D SENDEII^IBCNFSND
"RTN","IBAMTC",74,0)
 ;
"RTN","IBAMTC",75,0)
 ; Kill variables and quit.
"RTN","IBAMTC",76,0)
 D KILL1
"RTN","IBAMTC",77,0)
 ;
"RTN","IBAMTC",78,0)
 I $D(ZTQUEUED),$G(ZTSK) D KILL^%ZTLOAD
"RTN","IBAMTC",79,0)
 ;***
"RTN","IBAMTC",80,0)
 ;I $D(XRT0) S:'$D(XRTN) XRTN="IBAMTC" D T1^%ZOSV ;stop rt clock
"RTN","IBAMTC",81,0)
 ;
"RTN","IBAMTC",82,0)
 Q
"RTN","IBAMTC",83,0)
 ;
"RTN","IBAMTC",84,0)
 ;
"RTN","IBAMTC",85,0)
PROC ; Process all currently admitted patients.
"RTN","IBAMTC",86,0)
 ;
"RTN","IBAMTC",87,0)
 D IFCVEXP^IBACV(DFN,DT,IBA) ;if CV has expired (see CVEXMAIL^IBACV)
"RTN","IBAMTC",88,0)
 ;--
"RTN","IBAMTC",89,0)
 ;1) checks effective date for LTC legislation.
"RTN","IBAMTC",90,0)
 ;2) determine current treating specialty (TS) for the 
"RTN","IBAMTC",91,0)
 ;"original" admission.
"RTN","IBAMTC",92,0)
 ;if TS is LTC: 
"RTN","IBAMTC",93,0)
 ;  - creates new LTC #350 parent event entry if necessary.
"RTN","IBAMTC",94,0)
 ;NOTE: It doesn't stop MT billing for LTC. CALC^IBAUTL4 does it.
"RTN","IBAMTC",95,0)
 I $$ISLTCADM^IBAECN1(DFN,IBA)
"RTN","IBAMTC",96,0)
 ;--
"RTN","IBAMTC",97,0)
 D ORIG  ; find "original" admission date
"RTN","IBAMTC",98,0)
 Q:$$BILST^DGMTUB(DFN)<IBADMDT  ; pat. was last billable before admission
"RTN","IBAMTC",99,0)
 Q:IBADMDT\1=DT  ; patient was admitted today - process tomorrow
"RTN","IBAMTC",100,0)
 Q:+$$MVT^DGPMOBS(IBA)  ; admitted for Observation & Examination
"RTN","IBAMTC",101,0)
 Q:$O(^IBE(351.2,"AC",IBA,0))  ; skip special inpatient admissions
"RTN","IBAMTC",102,0)
 ;
"RTN","IBAMTC",103,0)
 ; - if vet is SC, create a Special Inpatient Billing Case
"RTN","IBAMTC",104,0)
 ;   in file #351.2 (use code 3 for SC, as it is changed to 4 in IBAMTI)
"RTN","IBAMTC",105,0)
 D ELIG^VADPT I VAEL(3) D ADM^IBAMTI(DFN,IBA,3) Q
"RTN","IBAMTC",106,0)
 ;
"RTN","IBAMTC",107,0)
 ; - gather event information
"RTN","IBAMTC",108,0)
 D EVFIND^IBAUTL3 I 'IBEVDA D BSEC Q:'IBBS  ; wasn't billable yesterday
"RTN","IBAMTC",109,0)
 S X=IBADMDT D H^%DTC S IBBDT=%H D:'IBEVDA LAST^IBAUTL5
"RTN","IBAMTC",110,0)
 I IBEVDA,IBEVCAL S X1=IBEVCAL,X2=1 D C^%DTC S IBBDT=%H
"RTN","IBAMTC",111,0)
 S IBEDT=+$H-1
"RTN","IBAMTC",112,0)
 ; - gather clock information
"RTN","IBAMTC",113,0)
 S IBWHER=24 D CLOCK^IBAUTL3 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",114,0)
 I IBCLDA S X=IBCLDT D H^%DTC S IBCLCT=IBBDT-%H
"RTN","IBAMTC",115,0)
 ; - build charges for inpatient days
"RTN","IBAMTC",116,0)
 D ^IBAUTL4 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",117,0)
 ; - pass per diem if over 30 days old, or both per diem and the copay
"RTN","IBAMTC",118,0)
 ; - if 4 days from patient's statement date; update event, clock
"RTN","IBAMTC",119,0)
 S IBWHER=22
"RTN","IBAMTC",120,0)
 I $G(IBCHPDA),$P($G(^IB(+IBCHPDA,0)),"^",6)>30!($$STD^IBAUTL5(DFN)) S IBNOS=IBCHPDA D FILER^IBAUTL5 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",121,0)
 I $G(IBCHCDA),$$STD^IBAUTL5(DFN) S IBNOS=IBCHCDA D FILER^IBAUTL5 I IBY<1 D ERR G PROCQ
"RTN","IBAMTC",122,0)
 I IBEVDA,$D(IBDT) S IBEVCLD=IBDT D EVUPD^IBAUTL3
"RTN","IBAMTC",123,0)
 I IBCLDA D CLUPD^IBAUTL3
"RTN","IBAMTC",124,0)
PROCQ D KILL Q
"RTN","IBAMTC",125,0)
 ;
"RTN","IBAMTC",126,0)
BSEC ; Determine patient's bedsection for the previous day.
"RTN","IBAMTC",127,0)
 S X1=DT,X2=-1 D C^%DTC
"RTN","IBAMTC",128,0)
 S VAIP("D")=X_.2359 D IN5^VADPT S IBBS=$$SECT^IBAUTL5(+VAIP(8)) Q
"RTN","IBAMTC",129,0)
 ;
"RTN","IBAMTC",130,0)
ERR ; Error processing.  Input:  IBY, IBWHER, IBCNT
"RTN","IBAMTC",131,0)
 S IBDUZ=DUZ,IBCNT=IBCNT+1 D ^IBAERR1 K IBDUZ Q
"RTN","IBAMTC",132,0)
 ;S ^TMP($J,"IBAMTC","E",IBERRN)=$P(IBY,"^",2)_"^"_$S($D(DFN):DFN,1:"")_"^"_IBWHER,IBERRN=IBERRN+1 Q
"RTN","IBAMTC",133,0)
 ;
"RTN","IBAMTC",134,0)
ORIG ; Find first admission date, considering ASIH movements
"RTN","IBAMTC",135,0)
 ;  Input:  IBA    Output:  IBADMDT
"RTN","IBAMTC",136,0)
 N X,Y,Z S Z=IBA
"RTN","IBAMTC",137,0)
 F  S X=$G(^DGPM(Z,0)),Y=$P(X,"^",21) Q:Y=""  S Z=+$P($G(^DGPM(Y,0)),"^",14)
"RTN","IBAMTC",138,0)
 S IBADMDT=+X Q
"RTN","IBAMTC",139,0)
 ;
"RTN","IBAMTC",140,0)
KILL1 ; Kill all IB variables.
"RTN","IBAMTC",141,0)
 K VAERR,VAEL,VAIP,IBA,IBADMDT,IBAFY,IBATYP,IBBDT,IBBS,IBCHARG,IBCHG,IBCNT,IBCUR,IBDESC,IBDISDT,IBDT,IBDUZ,IBFAC,IBI,IBIL,IBJOB,IBLC,IBMAX
"RTN","IBAMTC",142,0)
 K IBN,IBNOS,IBSAVBS,IBSEQNO,IBSERV,IBSITE,IBSL,IBTRAN,IBX,IBY,IBWHER,IBWARD,IBEDT,IBCHCTY,IBCHPDE,IBERRN,IBASIH,IBRTED
"RTN","IBAMTC",143,0)
KILL ; Kill all IB variables needed to build charges.
"RTN","IBAMTC",144,0)
 K IBCLCT,IBCLDA,IBCLDT,IBCLDAY,IBCLDOL,IBCHPDA,IBCHCDA,IBCHG,IBCHFR,IBCHTO,IBCHTOTL,IBBS,IBNH
"RTN","IBAMTC",145,0)
 K IBEVDA,IBEVDT,IBEVCLD,IBEVCAL,IBEVNEW,IBEVOLD,IBMED,IBTOTL,IBDESC,IBIL,IBTRAN,IBATYP,IBDATE
"RTN","IBAMTC",146,0)
 Q
"RTN","IBCNFCON")
0^2^B917921^n/a
"RTN","IBCNFCON",1,0)
IBCNFCON ;WOIFO/PO - Electronic Insurance Identification ;25-MAY-2011
"RTN","IBCNFCON",2,0)
 ;;2.0;INTEGRATED BILLING;**457**;21-MAR-94;Build 30
"RTN","IBCNFCON",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNFCON",4,0)
 ;;
"RTN","IBCNFCON",5,0)
 ;
"RTN","IBCNFCON",6,0)
 ; Electronic Insurance Indentification  Configuration
"RTN","IBCNFCON",7,0)
 ;
"RTN","IBCNFCON",8,0)
 Q
"RTN","IBCNFCON",9,0)
 ;
"RTN","IBCNFCON",10,0)
EDIT ; edit eII software parameters
"RTN","IBCNFCON",11,0)
 ; this routine is called from IBCNF EDIT CONFIGURATION ooption.
"RTN","IBCNFCON",12,0)
 ;
"RTN","IBCNFCON",13,0)
 N DA,DR,DIE
"RTN","IBCNFCON",14,0)
 L +^IBE(350.9,1,0):0 I '$T W !,"The configuration file is being edited by another user!" Q
"RTN","IBCNFCON",15,0)
 ;
"RTN","IBCNFCON",16,0)
 S DA=1,DR="[IBCNF EDIT CONFIGURATION]",DIE="^IBE(350.9," D ^DIE
"RTN","IBCNFCON",17,0)
 L -^IBE(350.9,1,0)
"RTN","IBCNFCON",18,0)
 Q
"RTN","IBCNFCON",19,0)
 ;
"RTN","IBCNFRD")
0^3^B53860378^n/a
"RTN","IBCNFRD",1,0)
IBCNFRD ;WOIFO/PO/KJS - Electronic Insurance Identification ;25-MAY-2011
"RTN","IBCNFRD",2,0)
 ;;2.0;INTEGRATED BILLING;**457**;21-MAR-94;Build 30
"RTN","IBCNFRD",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNFRD",4,0)
 ;;
"RTN","IBCNFRD",5,0)
 ;
"RTN","IBCNFRD",6,0)
 ; Electronic Insurance Indentification  Sending and Receiving AITC messages
"RTN","IBCNFRD",7,0)
 ;
"RTN","IBCNFRD",8,0)
 Q
"RTN","IBCNFRD",9,0)
 ;
"RTN","IBCNFRD",10,0)
GAITCMSG ; Get AITC Messages
"RTN","IBCNFRD",11,0)
 ;This routine is called when AITC sends the Result file message and/or Confirmation messages to
"RTN","IBCNFRD",12,0)
 ;IBCNF EII GET SERVER option a server type option that is the member of G.IBN mail group.
"RTN","IBCNFRD",13,0)
 N IBCNFPAR,I
"RTN","IBCNFRD",14,0)
 F I=1:1 L +^XTMP("IBCNFRD"):5 I $T Q  ;Only want one job at a time processing data
"RTN","IBCNFRD",15,0)
 ;
"RTN","IBCNFRD",16,0)
 ;Get the IB configuration Parameters.
"RTN","IBCNFRD",17,0)
 D GETPARAM(.IBCNFPAR)
"RTN","IBCNFRD",18,0)
 ;
"RTN","IBCNFRD",19,0)
 ;If eII Active field is not active quit 
"RTN","IBCNFRD",20,0)
 I 'IBCNFPAR(13.02) G EXIT
"RTN","IBCNFRD",21,0)
 ;
"RTN","IBCNFRD",22,0)
 ; Read the Message
"RTN","IBCNFRD",23,0)
 N IBXMZ,XMER,XMRG,XPOS,XMA,IBFIRST,IBMSG,IBAUSTIN,IBCONFIRM,IBREC,IBLAST,MSGID,IBCNT,REC,RECSAV,SEQ,LEN,RECP
"RTN","IBCNFRD",24,0)
 ;Set the zero node of ^XTMP as rquired by SAC standards.
"RTN","IBCNFRD",25,0)
 S:'$O(^XTMP("IBCNFRD",0)) ^XTMP("IBCNFRD",0)=$$FMADD^XLFDT(DT,30)_U_DT_U_" From IBCNF EII GET SERVER option, a member of G.IBN mail group."
"RTN","IBCNFRD",26,0)
 S IBXMZ=$G(XMZ)
"RTN","IBCNFRD",27,0)
 K ^XTMP("IBCNFRD",IBXMZ)
"RTN","IBCNFRD",28,0)
 ;
"RTN","IBCNFRD",29,0)
 S REC="",RECSAV="",XMA=0,IBLAST=0
"RTN","IBCNFRD",30,0)
 F  D  Q:XMER<0
"RTN","IBCNFRD",31,0)
 . D REC^XMS3 ; Receive a line
"RTN","IBCNFRD",32,0)
 . Q:XMER<0  ; Check for end of message
"RTN","IBCNFRD",33,0)
 .;keep accummulating record until a tilde is found
"RTN","IBCNFRD",34,0)
 . S LEN=$L(XMRG,"~")
"RTN","IBCNFRD",35,0)
 . F SEQ=1:1:LEN D
"RTN","IBCNFRD",36,0)
 .. S RECP=$P(XMRG,"~",SEQ)
"RTN","IBCNFRD",37,0)
 .. ;END OF MESSAGE INDICATOR
"RTN","IBCNFRD",38,0)
 .. Q:RECP="NNNN  "
"RTN","IBCNFRD",39,0)
 .. S REC=REC_RECP
"RTN","IBCNFRD",40,0)
 ..;last piece can't end with a tilde, so isn't ready for saving
"RTN","IBCNFRD",41,0)
 .. Q:SEQ=LEN
"RTN","IBCNFRD",42,0)
 .. S REC=REC_"~"
"RTN","IBCNFRD",43,0)
 ..;now save the reconstituted record
"RTN","IBCNFRD",44,0)
 .. S XMA=XMA+1
"RTN","IBCNFRD",45,0)
 ..;strip off the 13 char DMI header from the first record
"RTN","IBCNFRD",46,0)
 .. I XMA=1,REC'?1"Ref:".E S REC=$E(REC,14,$L(REC))
"RTN","IBCNFRD",47,0)
 .. I REC["### END OF FILE ### END OF FILE ###" S IBLAST=1 Q
"RTN","IBCNFRD",48,0)
 .. S ^XTMP("IBCNFRD",IBXMZ,XMA)=REC,REC=""
"RTN","IBCNFRD",49,0)
 ;
"RTN","IBCNFRD",50,0)
 ; update the LOG
"RTN","IBCNFRD",51,0)
 S IBNOW=$$NOW^XLFDT()
"RTN","IBCNFRD",52,0)
 S J=0
"RTN","IBCNFRD",53,0)
 K FDA,IENS
"RTN","IBCNFRD",54,0)
 S J=J+1
"RTN","IBCNFRD",55,0)
 S FDA(355.35103,"+"_J_",1,",.01)=IBXMZ
"RTN","IBCNFRD",56,0)
 S FDA(355.35103,"+"_J_",1,",.02)=IBNOW
"RTN","IBCNFRD",57,0)
 D UPDATE^DIE("","FDA"),MSG^DIALOG()
"RTN","IBCNFRD",58,0)
 ;
"RTN","IBCNFRD",59,0)
 ;SET VAPORIZE DATE TO TODAY+180
"RTN","IBCNFRD",60,0)
 S XMVAPOR=$$HTFM^XLFDT(+$H+180_","_$P($H,",",2))
"RTN","IBCNFRD",61,0)
 D VAPOR^XMXEDIT(IBXMZ,XMVAPOR,.XMINSTR,.XMMSG)
"RTN","IBCNFRD",62,0)
 ;
"RTN","IBCNFRD",63,0)
 I REC="NNNN  " G EXIT
"RTN","IBCNFRD",64,0)
 I REC'="" D
"RTN","IBCNFRD",65,0)
 . S XMA=XMA+1
"RTN","IBCNFRD",66,0)
 .;strip off the 13 char DMI header from the first record
"RTN","IBCNFRD",67,0)
 . I XMA=1,REC'?1"Ref:".E S REC=$E(REC,14,$L(REC))
"RTN","IBCNFRD",68,0)
 . I REC["### END OF FILE ### END OF FILE ###" S IBLAST=1 Q
"RTN","IBCNFRD",69,0)
 . S ^XTMP("IBCNFRD",IBXMZ,XMA)=REC
"RTN","IBCNFRD",70,0)
 ;
"RTN","IBCNFRD",71,0)
 S IBFIRST=$G(^XTMP("IBCNFRD",IBXMZ,1))
"RTN","IBCNFRD",72,0)
 ;
"RTN","IBCNFRD",73,0)
 ; If Confirmation message is received from AITC
"RTN","IBCNFRD",74,0)
 I IBFIRST?1"Ref:".E D CONFIRM(IBXMZ,IBFIRST) G EXIT
"RTN","IBCNFRD",75,0)
 ;
"RTN","IBCNFRD",76,0)
 ;Wait for last message indicator before processing messages into file
"RTN","IBCNFRD",77,0)
 ;
"RTN","IBCNFRD",78,0)
 I 'IBLAST G EXIT
"RTN","IBCNFRD",79,0)
 ; If message is a Result File 
"RTN","IBCNFRD",80,0)
 N TMPFILE
"RTN","IBCNFRD",81,0)
 S TMPFILE="TEMP.TXT"
"RTN","IBCNFRD",82,0)
 ; Unwrap the Result file
"RTN","IBCNFRD",83,0)
 D OPEN^%ZISH("RESFILE",IBCNFPAR(13.01),TMPFILE,"W")
"RTN","IBCNFRD",84,0)
 ;may need to notify IRM if can't create file
"RTN","IBCNFRD",85,0)
 I POP G EXIT
"RTN","IBCNFRD",86,0)
 S MSGID=0,IBCNT=0
"RTN","IBCNFRD",87,0)
 U IO
"RTN","IBCNFRD",88,0)
 F  S MSGID=$O(^XTMP("IBCNFRD",MSGID)) Q:'MSGID  D
"RTN","IBCNFRD",89,0)
 . S IBREC=0
"RTN","IBCNFRD",90,0)
 . F  S IBREC=$O(^XTMP("IBCNFRD",MSGID,IBREC)) Q:'IBREC  D
"RTN","IBCNFRD",91,0)
 .. S REC=^XTMP("IBCNFRD",MSGID,IBREC)
"RTN","IBCNFRD",92,0)
 .. ; Catch any leftover Confirmation messages in case anything went wrong on the initial processing
"RTN","IBCNFRD",93,0)
 .. I REC?1"Ref:".E D CONFIRM(MSGID,REC) Q
"RTN","IBCNFRD",94,0)
 .. S IBCNT=IBCNT+1
"RTN","IBCNFRD",95,0)
 .. W:IBCNT'=1 !
"RTN","IBCNFRD",96,0)
 .. W REC
"RTN","IBCNFRD",97,0)
 ;
"RTN","IBCNFRD",98,0)
 D CLOSE^%ZISH("RESFILE")
"RTN","IBCNFRD",99,0)
 ;Rename from temp file to actual file, must use the ;0 or the rename fails if a file exists with that name
"RTN","IBCNFRD",100,0)
 S SUCCESS=$$MV^%ZISH(IBCNFPAR(13.01),TMPFILE,IBCNFPAR(13.01),IBCNFPAR(13.03)_$S($$OS^%ZOSV="VMS":";0",1:""))
"RTN","IBCNFRD",101,0)
 ; Send Email to IBCNF EII IRM that Result file is ready
"RTN","IBCNFRD",102,0)
 N XMSUB,IBRESMSG,XMY,XMTEXT,IBNOW
"RTN","IBCNFRD",103,0)
 S XMSUB="HMS result file "_IBCNFPAR(13.01)_IBCNFPAR(13.03)_" is ready"
"RTN","IBCNFRD",104,0)
 S IBRESMSG(1)="HMS result file "_IBCNFPAR(13.01)_IBCNFPAR(13.03)_" has been created."
"RTN","IBCNFRD",105,0)
 S IBRESMSG(2)="It is ready to be uploaded to the insurance buffer file."
"RTN","IBCNFRD",106,0)
 S XMTEXT="IBRESMSG("
"RTN","IBCNFRD",107,0)
 S XMY("G.IBCNF EII IRM")=""
"RTN","IBCNFRD",108,0)
 D ^XMD
"RTN","IBCNFRD",109,0)
 ;
"RTN","IBCNFRD",110,0)
 D BLDXML^IBCNFRD2
"RTN","IBCNFRD",111,0)
 ; Update HMS Result File Status
"RTN","IBCNFRD",112,0)
 N DA,DIE
"RTN","IBCNFRD",113,0)
 S IBNOW=$$NOW^XLFDT()
"RTN","IBCNFRD",114,0)
 S DIE="^IBA(355.351,",DA=1,DR=".01///^S X=IBCNFPAR(13.03);.02///^S X=IBNOW" D ^DIE
"RTN","IBCNFRD",115,0)
 ;
"RTN","IBCNFRD",116,0)
 N IBD0
"RTN","IBCNFRD",117,0)
 S IBD0=$O(^IBA(355.351,0))
"RTN","IBCNFRD",118,0)
 I $O(^IBA(355.351,IBD0,1,0)) D
"RTN","IBCNFRD",119,0)
 . N DA,DIK
"RTN","IBCNFRD",120,0)
 . D CACTLOG(IBD0)        ; save the top-level fields of HMS result file status in the activity log sub-file.
"RTN","IBCNFRD",121,0)
 . ; kill the messages sub-file. 
"RTN","IBCNFRD",122,0)
 . S DA(1)=IBD0,DA=0
"RTN","IBCNFRD",123,0)
 . S DIK="^IBA(355.351,"_DA(1)_",1,"
"RTN","IBCNFRD",124,0)
 . F  S DA=$O(^IBA(355.351,IBD0,1,DA)) Q:'DA  D ^DIK
"RTN","IBCNFRD",125,0)
 ;
"RTN","IBCNFRD",126,0)
 ;Clean out held messages text now that it has been processed
"RTN","IBCNFRD",127,0)
 K ^XTMP("IBCNFRD")
"RTN","IBCNFRD",128,0)
 ;
"RTN","IBCNFRD",129,0)
EXIT ;COMMON EXIT POINT
"RTN","IBCNFRD",130,0)
 L -^XTMP("IBCNFRD")
"RTN","IBCNFRD",131,0)
 Q
"RTN","IBCNFRD",132,0)
 ;
"RTN","IBCNFRD",133,0)
CONFIRM(MSGID,REC) ;PROCESS CONFIRMATION MESSAGE
"RTN","IBCNFRD",134,0)
 ; Update the HMS Extract File Status
"RTN","IBCNFRD",135,0)
 N IBD0,IBD1,DA,DIE,DR,IBMSG,IBAUSTIN,IBCONFRM
"RTN","IBCNFRD",136,0)
 S IBMSG=+$P(REC,"message #",2)
"RTN","IBCNFRD",137,0)
 S IBAUSTIN=+$P(REC,"Austin ID #",2)
"RTN","IBCNFRD",138,0)
 S IBCONFRM=+$P(REC,"confirmation number ",2)
"RTN","IBCNFRD",139,0)
 S IBD0=$O(^IBA(355.35,"C",IBMSG,0))
"RTN","IBCNFRD",140,0)
 ;NO message found
"RTN","IBCNFRD",141,0)
 I 'IBD0 G CONFEND
"RTN","IBCNFRD",142,0)
 S IBD1=$O(^IBA(355.35,"C",IBMSG,IBD0,0))
"RTN","IBCNFRD",143,0)
 ;NO message found
"RTN","IBCNFRD",144,0)
 I 'IBD1 G CONFEND
"RTN","IBCNFRD",145,0)
 S DA=IBD1,DA(1)=IBD0
"RTN","IBCNFRD",146,0)
 S DIE="^IBA(355.35,"_DA(1)_",1,"
"RTN","IBCNFRD",147,0)
 S DR=".03///^S X=IBAUSTIN;.04///^S X=IBCONFRM" D ^DIE
"RTN","IBCNFRD",148,0)
 ;
"RTN","IBCNFRD",149,0)
CONFEND ;
"RTN","IBCNFRD",150,0)
 ;
"RTN","IBCNFRD",151,0)
 K ^XTMP("IBCNFRD",MSGID)
"RTN","IBCNFRD",152,0)
 Q
"RTN","IBCNFRD",153,0)
 ;
"RTN","IBCNFRD",154,0)
CACTLOG(IBD0) ; create the activity log of HMS extract file status 
"RTN","IBCNFRD",155,0)
 N IBCDT,IBD1,IBNODE,FDA,J,K,IENS,REALJ
"RTN","IBCNFRD",156,0)
 ;
"RTN","IBCNFRD",157,0)
 ; create the the activity log subfile.
"RTN","IBCNFRD",158,0)
 S IBCDT=$P(^IBA(355.351,IBD0,0),U,2)
"RTN","IBCNFRD",159,0)
 S J=0
"RTN","IBCNFRD",160,0)
 K FDA,IENS
"RTN","IBCNFRD",161,0)
 S J=J+1
"RTN","IBCNFRD",162,0)
 S FDA(355.3511,"+"_J_",1,",.01)=IBCDT
"RTN","IBCNFRD",163,0)
 D UPDATE^DIE("","FDA","IENS"),MSG^DIALOG()
"RTN","IBCNFRD",164,0)
 S REALJ=IENS(J)
"RTN","IBCNFRD",165,0)
 K FDA,IENS
"RTN","IBCNFRD",166,0)
 S IBD1=0,K=J
"RTN","IBCNFRD",167,0)
 F  S IBD1=$O(^IBA(355.351,IBD0,1,IBD1)) Q:'IBD1  D
"RTN","IBCNFRD",168,0)
 . S IBNODE=^IBA(355.351,IBD0,1,IBD1,0)
"RTN","IBCNFRD",169,0)
 . S K=K+1
"RTN","IBCNFRD",170,0)
 . S FDA(355.35111,"+"_K_","_REALJ_",1,",.01)=$P(IBNODE,U)
"RTN","IBCNFRD",171,0)
 . S FDA(355.35111,"+"_K_","_REALJ_",1,",.02)=$P(IBNODE,U,2)
"RTN","IBCNFRD",172,0)
 I $D(FDA) D UPDATE^DIE("","FDA","IENS"),MSG^DIALOG()
"RTN","IBCNFRD",173,0)
 Q
"RTN","IBCNFRD",174,0)
 ;
"RTN","IBCNFRD",175,0)
GETPARAM(IBCNFPAR) ;
"RTN","IBCNFRD",176,0)
 ; Get eII parameters from IB Site Parameters file  into IBCNFPAR array
"RTN","IBCNFRD",177,0)
 ;
"RTN","IBCNFRD",178,0)
 N IBACT,IBTYPE,IBFILE,IBQUEADD,IBDUEMSG,IBLTMSG,IBSUB2,IBSUB3,IBSUBIEN,IBARRAY
"RTN","IBCNFRD",179,0)
 ;
"RTN","IBCNFRD",180,0)
 D GETS^DIQ(350.9,"1,","13.01:13.07;13.08*","I","IBARRAY")
"RTN","IBCNFRD",181,0)
 S IBCNFPAR(13.01)=IBARRAY(350.9,"1,",13.01,"I")  ; (#13.01) HMS DIRECTORY [1F]
"RTN","IBCNFRD",182,0)
 S IBCNFPAR(13.02)=IBARRAY(350.9,"1,",13.02,"I")  ; (#13.02) EII ACTIVE [2S]
"RTN","IBCNFRD",183,0)
 S IBCNFPAR(13.03)=IBARRAY(350.9,"1,",13.03,"I")  ; (#13.03) RESULT FILE NAME [3F]
"RTN","IBCNFRD",184,0)
 S IBCNFPAR(13.04)=IBARRAY(350.9,"1,",13.04,"I")  ; (#13.04) DAY OF MONTH RESULT FILE DUE [4N]
"RTN","IBCNFRD",185,0)
 S IBCNFPAR(13.05)=IBARRAY(350.9,"1,",13.05,"I")  ; (#13.05) DAYS BEFORE LATE MESSAGE SENT [5N]
"RTN","IBCNFRD",186,0)
 S IBCNFPAR(13.06)=IBARRAY(350.9,"1,",13.06,"I")  ; (#13.06) MAX EXT FILE QUE CONFIRM TIME [6N
"RTN","IBCNFRD",187,0)
 S IBCNFPAR(13.07)=IBARRAY(350.9,"1,",13.07,"I")  ; (#13.07) MAX NUM OF RECORDS PER MESSAGE [7N] 
"RTN","IBCNFRD",188,0)
 ;
"RTN","IBCNFRD",189,0)
 ; get the EXTRACT FILES sub-file values for active extract files.
"RTN","IBCNFRD",190,0)
 S IBSUB2=""
"RTN","IBCNFRD",191,0)
 F  D  Q:IBSUB2=""
"RTN","IBCNFRD",192,0)
 . S IBSUB2=$O(IBARRAY(350.9006,IBSUB2)) Q:IBSUB2="" 
"RTN","IBCNFRD",193,0)
 . S IBSUBIEN=$P(IBSUB2,",",1)
"RTN","IBCNFRD",194,0)
 . S IBSUB3=""
"RTN","IBCNFRD",195,0)
 .F  D  Q:IBSUB3=""
"RTN","IBCNFRD",196,0)
 .. S IBSUB3=$O(IBARRAY(350.9006,IBSUB2,IBSUB3)) Q:IBSUB3=""
"RTN","IBCNFRD",197,0)
 .. S IBACT=$G(IBARRAY(350.9006,IBSUB2,.02,"I"))     ; (#.02) EXTRACT FILE ACTIVE [2S] 
"RTN","IBCNFRD",198,0)
 .. I IBACT=1 D
"RTN","IBCNFRD",199,0)
 ... S IBTYPE=$G(IBARRAY(350.9006,IBSUB2,.01,"I"))   ; (#.01) EXTRACT FILE TYPE [1F] 
"RTN","IBCNFRD",200,0)
 ... S IBFILE=$G(IBARRAY(350.9006,IBSUB2,.03,"I"))   ; (#.03) FILE NAME [3F]
"RTN","IBCNFRD",201,0)
 ... S IBQUEADD=$G(IBARRAY(350.9006,IBSUB2,.04,"I")) ; (#.04) AITC DMI QUEUE NAME [4F]
"RTN","IBCNFRD",202,0)
 ... S IBDUEMSG=$G(IBARRAY(350.9006,IBSUB2,.05,"I")) ; (#.05) DAY OF MONTH EXTRACT FILE DUE [5N]
"RTN","IBCNFRD",203,0)
 ... S IBLTMSG=$G(IBARRAY(350.9006,IBSUB2,.06,"I"))  ; (#.06) DAYS BEFORE LATE MESSAGE SENT [6N]
"RTN","IBCNFRD",204,0)
 ... S IBCNFPAR(13.08,IBSUBIEN)=IBTYPE_U_IBACT_U_IBFILE_U_IBQUEADD_U_IBDUEMSG_U_IBLTMSG
"RTN","IBCNFRD",205,0)
 Q
"RTN","IBCNFRD",206,0)
 ;
"RTN","IBCNFRD2")
0^4^B155001370^n/a
"RTN","IBCNFRD2",1,0)
IBCNFRD2 ;WOIFO/KJS - Electronic Insurance Identification ;25-MAY-2011
"RTN","IBCNFRD2",2,0)
 ;;2.0;INTEGRATED BILLING;**457**;21-MAR-94;Build 30
"RTN","IBCNFRD2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNFRD2",4,0)
 ;;
"RTN","IBCNFRD2",5,0)
 ;
"RTN","IBCNFRD2",6,0)
 ; Electronic Insurance Indentification  Sending and Receiving AITC messages
"RTN","IBCNFRD2",7,0)
 ;
"RTN","IBCNFRD2",8,0)
 Q
"RTN","IBCNFRD2",9,0)
 ;
"RTN","IBCNFRD2",10,0)
BLDXML ;
"RTN","IBCNFRD2",11,0)
 ;now create the XML file
"RTN","IBCNFRD2",12,0)
 N XMLFILE,XMLHEAD,XMLCOL,SEQ,REC,HMSDIR,XMLX,DQUOTE,SQUOTE,AMP,GT,LT,SITE
"RTN","IBCNFRD2",13,0)
 D INITXML
"RTN","IBCNFRD2",14,0)
 D OPEN^%ZISH("XMLFILE",HMSDIR,XMLFILE,"W")
"RTN","IBCNFRD2",15,0)
 Q:POP
"RTN","IBCNFRD2",16,0)
 U IO
"RTN","IBCNFRD2",17,0)
 D XMLSTART
"RTN","IBCNFRD2",18,0)
 S SEQ=0
"RTN","IBCNFRD2",19,0)
 F  S SEQ=$O(XMLCOL(SEQ)) Q:SEQ=""  D XMLCOL($P(XMLCOL(SEQ),U,2))
"RTN","IBCNFRD2",20,0)
 W !,"<Row>"
"RTN","IBCNFRD2",21,0)
 F  S SEQ=$O(XMLCOL(SEQ)) Q:SEQ=""  D XMLCELL($P(XMLCOL(SEQ),U,5),"String",$P(XMLCOL(SEQ),U,6))
"RTN","IBCNFRD2",22,0)
 W !,"</Row>"
"RTN","IBCNFRD2",23,0)
 S MSGID=0,IBCNT=0
"RTN","IBCNFRD2",24,0)
 F  S MSGID=$O(^XTMP("IBCNFRD",MSGID)) Q:'MSGID  D
"RTN","IBCNFRD2",25,0)
 . S IBREC=0
"RTN","IBCNFRD2",26,0)
 . F  S IBREC=$O(^XTMP("IBCNFRD",MSGID,IBREC)) Q:'IBREC  D
"RTN","IBCNFRD2",27,0)
 .. S IBCNT=IBCNT+1
"RTN","IBCNFRD2",28,0)
 .. W !,"<Row>"
"RTN","IBCNFRD2",29,0)
 .. S REC=^XTMP("IBCNFRD",MSGID,IBREC)
"RTN","IBCNFRD2",30,0)
 .. S SEQ=0
"RTN","IBCNFRD2",31,0)
 .. F  S SEQ=$O(XMLCOL(SEQ)) Q:SEQ=""  D
"RTN","IBCNFRD2",32,0)
 ... N DATA,POS,SUB,DSUB
"RTN","IBCNFRD2",33,0)
 ... S POS=$P(XMLCOL(SEQ),U)
"RTN","IBCNFRD2",34,0)
 ... S DATA=$P(REC,U,+POS)
"RTN","IBCNFRD2",35,0)
 ... I POS["@" S SUB=$P(POS,"@",2) S DSUB=SUB_"(.DATA)" D @DSUB
"RTN","IBCNFRD2",36,0)
 ... D XMLCELL(DATA,$P(XMLCOL(SEQ),U,3),$P(XMLCOL(SEQ),U,4))
"RTN","IBCNFRD2",37,0)
 .. W !,"</Row>"
"RTN","IBCNFRD2",38,0)
 D XMLEND
"RTN","IBCNFRD2",39,0)
 D CLOSE^%ZISH("XMLFILE")
"RTN","IBCNFRD2",40,0)
 ;
"RTN","IBCNFRD2",41,0)
 ; Send Email to IBCNF EII XML READY that Result file is ready
"RTN","IBCNFRD2",42,0)
 N XMSUB,IBXMLMSG,XMY,XMTEXT,IBNOW,XMZ,XMDUZ,XMMG,XMSTRIP,XMROU,DIFROM,XMYBLOB,XMERR
"RTN","IBCNFRD2",43,0)
 S XMSUB="HMS result XML file "_HMSDIR_XMLFILE_" is ready"
"RTN","IBCNFRD2",44,0)
 S IBXMLMSG(1)="HMS result XML file "_HMSDIR_XMLFILE_" is ready to be retrieved"
"RTN","IBCNFRD2",45,0)
 S XMTEXT="IBXMLMSG("
"RTN","IBCNFRD2",46,0)
 S XMY("G.IBCNF EII XML READY")=""
"RTN","IBCNFRD2",47,0)
 D ^XMD
"RTN","IBCNFRD2",48,0)
 Q
"RTN","IBCNFRD2",49,0)
 ;
"RTN","IBCNFRD2",50,0)
POLDET(DATA) ;policy determination
"RTN","IBCNFRD2",51,0)
 S DATA=$S(DATA="00/00/0000":"POLICY NOT FOUND",DATA="12/31/9999":"ACTIVE",1:"INACTIVE")
"RTN","IBCNFRD2",52,0)
 Q
"RTN","IBCNFRD2",53,0)
 ;
"RTN","IBCNFRD2",54,0)
XMLCOL(WIDTH) ;
"RTN","IBCNFRD2",55,0)
 W !,"<Column ss:StyleID=""s8"" ss:Width=""",WIDTH,"""/>"
"RTN","IBCNFRD2",56,0)
 Q
"RTN","IBCNFRD2",57,0)
 ;
"RTN","IBCNFRD2",58,0)
XMLCELL(DATA,TYPE,STYLE) ;
"RTN","IBCNFRD2",59,0)
 I TYPE="DateTime" D
"RTN","IBCNFRD2",60,0)
 .;check for valid date and if it is valid format it in excel format
"RTN","IBCNFRD2",61,0)
 .;otherwise, set the cell to a string type and use the original format
"RTN","IBCNFRD2",62,0)
 .N %DT,X,Y,YR,MN,DA
"RTN","IBCNFRD2",63,0)
 .S X=DATA
"RTN","IBCNFRD2",64,0)
 .D ^%DT
"RTN","IBCNFRD2",65,0)
 .I Y=-1 S TYPE="String" Q
"RTN","IBCNFRD2",66,0)
 .S YR=$P(DATA,"/",3),MN=$P(DATA,"/"),DA=$P(DATA,"/",2)
"RTN","IBCNFRD2",67,0)
 .;excel dates are invalid before 1/1/1900
"RTN","IBCNFRD2",68,0)
 .I YR<1900 S TYPE="String" Q
"RTN","IBCNFRD2",69,0)
 .S DATA=YR_"-"_MN_"-"_DA
"RTN","IBCNFRD2",70,0)
 ;
"RTN","IBCNFRD2",71,0)
 W !,"<Cell ss:StyleID=""",STYLE,"""><Data ss:Type=""",TYPE,""">",$$XML(DATA),"</Data></Cell>"
"RTN","IBCNFRD2",72,0)
 Q
"RTN","IBCNFRD2",73,0)
 ;
"RTN","IBCNFRD2",74,0)
XML(DATA) ;
"RTN","IBCNFRD2",75,0)
 N DATA2
"RTN","IBCNFRD2",76,0)
 ;excel 2007 doesn't like escaped xml chars even though documentation says otherwise
"RTN","IBCNFRD2",77,0)
 ;but CDATA syntax does work
"RTN","IBCNFRD2",78,0)
 ;
"RTN","IBCNFRD2",79,0)
 S DATA2="<![CDATA["_DATA_"]]>"
"RTN","IBCNFRD2",80,0)
 Q DATA2
"RTN","IBCNFRD2",81,0)
 ;
"RTN","IBCNFRD2",82,0)
XMLSTART ;
"RTN","IBCNFRD2",83,0)
 W "<?xml version=""1.0""?>"
"RTN","IBCNFRD2",84,0)
 W !,"<?mso-application progid=""Excel.Sheet""?>"
"RTN","IBCNFRD2",85,0)
 W !,"<Workbook xmlns=""urn:schemas-microsoft-com:office:spreadsheet"""
"RTN","IBCNFRD2",86,0)
 W !,"xmlns:o=""urn:schemas-microsoft-com:office:office"""
"RTN","IBCNFRD2",87,0)
 W !,"xmlns:x=""urn:schemas-microsoft-com:office:excel"""
"RTN","IBCNFRD2",88,0)
 W !,"xmlns:ss=""urn:schemas-microsoft-com:office:spreadsheet"""
"RTN","IBCNFRD2",89,0)
 W !,"xmlns:html=""http://www.w3.org/TR/REC-html40"">"
"RTN","IBCNFRD2",90,0)
 W !,"<Styles>"
"RTN","IBCNFRD2",91,0)
 W !,"<Style ss:ID=""Default"" ss:Name=""Normal"">"
"RTN","IBCNFRD2",92,0)
 W !,"<Alignment ss:Vertical=""Bottom""/>"
"RTN","IBCNFRD2",93,0)
 W !,"<Borders/>"
"RTN","IBCNFRD2",94,0)
 W !,"<Font ss:FontName=""Arial"" x:Family=""Swiss"" ss:Color=""#000000""/>"
"RTN","IBCNFRD2",95,0)
 W !,"<Interior/>"
"RTN","IBCNFRD2",96,0)
 W !,"<NumberFormat/>"
"RTN","IBCNFRD2",97,0)
 W !,"<Protection/>"
"RTN","IBCNFRD2",98,0)
 W !,"</Style>"
"RTN","IBCNFRD2",99,0)
 W !,"<Style ss:ID=""s1"">"
"RTN","IBCNFRD2",100,0)
 W !,"<NumberFormat ss:Format=""Short Date""/>"
"RTN","IBCNFRD2",101,0)
 W !,"</Style>"
"RTN","IBCNFRD2",102,0)
 W !,"<Style ss:ID=""s2"">"
"RTN","IBCNFRD2",103,0)
 W !,"<NumberFormat/>"
"RTN","IBCNFRD2",104,0)
 W !,"</Style>"
"RTN","IBCNFRD2",105,0)
 W !,"<Style ss:ID=""s3"">"
"RTN","IBCNFRD2",106,0)
 W !,"<Alignment ss:Vertical=""Bottom"" ss:WrapText=""0""/>"
"RTN","IBCNFRD2",107,0)
 W !,"<Borders>"
"RTN","IBCNFRD2",108,0)
 W !,"<Border ss:Position=""Bottom"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",109,0)
 W !,"<Border ss:Position=""Left"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",110,0)
 W !,"<Border ss:Position=""Right"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",111,0)
 W !,"<Border ss:Position=""Top"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",112,0)
 W !,"</Borders>"
"RTN","IBCNFRD2",113,0)
 W !,"<Font ss:FontName=""Arial"" x:Family=""Swiss"" ss:Size=""8""/>"
"RTN","IBCNFRD2",114,0)
 W !,"<NumberFormat ss:Format=""Short Date""/>"
"RTN","IBCNFRD2",115,0)
 W !,"</Style>"
"RTN","IBCNFRD2",116,0)
 W !,"<Style ss:ID=""s4"">"
"RTN","IBCNFRD2",117,0)
 W !,"<Alignment ss:Vertical=""Bottom"" ss:WrapText=""0""/>"
"RTN","IBCNFRD2",118,0)
 W !,"<Borders>"
"RTN","IBCNFRD2",119,0)
 W !,"<Border ss:Position=""Bottom"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",120,0)
 W !,"<Border ss:Position=""Left"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",121,0)
 W !,"<Border ss:Position=""Right"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",122,0)
 W !,"<Border ss:Position=""Top"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",123,0)
 W !,"</Borders>"
"RTN","IBCNFRD2",124,0)
 W !,"<Font ss:FontName=""Arial"" x:Family=""Swiss"" ss:Size=""8""/>"
"RTN","IBCNFRD2",125,0)
 W !,"<NumberFormat ss:Format=""@""/>"
"RTN","IBCNFRD2",126,0)
 W !,"</Style>"
"RTN","IBCNFRD2",127,0)
 W !,"<Style ss:ID=""s5"">"
"RTN","IBCNFRD2",128,0)
 W !,"<Alignment ss:Vertical=""Bottom"" ss:WrapText=""0""/>"
"RTN","IBCNFRD2",129,0)
 W !,"</Style>"
"RTN","IBCNFRD2",130,0)
 W !,"<Style ss:ID=""s6"">"
"RTN","IBCNFRD2",131,0)
 W !,"<Alignment ss:Vertical=""Bottom"" ss:WrapText=""0""/>"
"RTN","IBCNFRD2",132,0)
 W !,"<Borders>"
"RTN","IBCNFRD2",133,0)
 W !,"<Border ss:Position=""Bottom"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",134,0)
 W !,"<Border ss:Position=""Left"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",135,0)
 W !,"<Border ss:Position=""Right"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",136,0)
 W !,"<Border ss:Position=""Top"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",137,0)
 W !,"</Borders>"
"RTN","IBCNFRD2",138,0)
 W !,"<Font ss:FontName=""Arial"" x:Family=""Swiss"" ss:Size=""8"" ss:Color=""#FFFFFF"" ss:Bold=""1""/>"
"RTN","IBCNFRD2",139,0)
 W !,"<Interior ss:Color=""#000000"" ss:Pattern=""Solid""/>"
"RTN","IBCNFRD2",140,0)
 W !,"</Style>"
"RTN","IBCNFRD2",141,0)
 W !,"<Style ss:ID=""s7"">"
"RTN","IBCNFRD2",142,0)
 W !,"<Alignment ss:Vertical=""Bottom"" ss:WrapText=""0""/>"
"RTN","IBCNFRD2",143,0)
 W !,"<Borders>"
"RTN","IBCNFRD2",144,0)
 W !,"<Border ss:Position=""Bottom"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",145,0)
 W !,"<Border ss:Position=""Left"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",146,0)
 W !,"<Border ss:Position=""Right"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",147,0)
 W !,"<Border ss:Position=""Top"" ss:LineStyle=""Continuous"" ss:Weight=""1""/>"
"RTN","IBCNFRD2",148,0)
 W !,"</Borders>"
"RTN","IBCNFRD2",149,0)
 W !,"<Font ss:FontName=""Arial"" x:Family=""Swiss"" ss:Size=""8"" ss:Color=""#FFFF00"" ss:Bold=""1""/>"
"RTN","IBCNFRD2",150,0)
 W !,"<Interior ss:Color=""#000000"" ss:Pattern=""Solid""/>"
"RTN","IBCNFRD2",151,0)
 W !,"</Style>"
"RTN","IBCNFRD2",152,0)
 W !,"<Style ss:ID=""s8"">"
"RTN","IBCNFRD2",153,0)
 W !,"<Font ss:FontName=""Arial"" x:Family=""Swiss"" ss:Size=""8"" ss:Color=""#000000""/>"
"RTN","IBCNFRD2",154,0)
 W !,"</Style>"
"RTN","IBCNFRD2",155,0)
 W !,"</Styles>"
"RTN","IBCNFRD2",156,0)
 W !,"<Worksheet ss:Name=""",$P(XMLFILE,"."),""">"
"RTN","IBCNFRD2",157,0)
 W !,"<Table x:FullColumns=""1"" x:FullRows=""1"" ss:DefaultRowHeight=""11.25"">"
"RTN","IBCNFRD2",158,0)
 Q
"RTN","IBCNFRD2",159,0)
 ;
"RTN","IBCNFRD2",160,0)
XMLEND ;
"RTN","IBCNFRD2",161,0)
 W !,"</Table>"
"RTN","IBCNFRD2",162,0)
 W !,"<WorksheetOptions xmlns=""urn:schemas-microsoft-com:office:excel"">"
"RTN","IBCNFRD2",163,0)
 W !,"<PageSetup>"
"RTN","IBCNFRD2",164,0)
 W !,"<Header x:Data=""&amp;L&amp;D&amp;R&amp;&quot;Arial,Bold&quot;&amp;8HMS Insurance Identification Results""/>"
"RTN","IBCNFRD2",165,0)
 W !,"<Footer x:Data=""&amp;F&amp;RPage &amp;P""/>"
"RTN","IBCNFRD2",166,0)
 W !,"</PageSetup>"
"RTN","IBCNFRD2",167,0)
 W !,"<FreezePanes/>"
"RTN","IBCNFRD2",168,0)
 W !,"<FrozenNoSplit/>"
"RTN","IBCNFRD2",169,0)
 W !,"<SplitHorizontal>1</SplitHorizontal>"
"RTN","IBCNFRD2",170,0)
 W !,"<TopRowBottomPane>1</TopRowBottomPane>"
"RTN","IBCNFRD2",171,0)
 W !,"</WorksheetOptions>"
"RTN","IBCNFRD2",172,0)
 W !,"</Worksheet>"
"RTN","IBCNFRD2",173,0)
 W !,"</Workbook>"
"RTN","IBCNFRD2",174,0)
 Q
"RTN","IBCNFRD2",175,0)
 ;
"RTN","IBCNFRD2",176,0)
INITXML ;
"RTN","IBCNFRD2",177,0)
 ;XMLCOL(N)=P^W^T^SC^H^SH
"RTN","IBCNFRD2",178,0)
 ;N=column number in spreadsheet
"RTN","IBCNFRD2",179,0)
 ;P=piece number from result file record
"RTN","IBCNFRD2",180,0)
 ;W=width of column
"RTN","IBCNFRD2",181,0)
 ;T=cell type
"RTN","IBCNFRD2",182,0)
 ;SC=cell style
"RTN","IBCNFRD2",183,0)
 ;H=HEADER
"RTN","IBCNFRD2",184,0)
 ;SH=header style
"RTN","IBCNFRD2",185,0)
 ;
"RTN","IBCNFRD2",186,0)
 N COL
"RTN","IBCNFRD2",187,0)
 S COL=0
"RTN","IBCNFRD2",188,0)
 S COL=COL+1,XMLCOL(COL)="1^57^String^s4^Autonumber^s6"
"RTN","IBCNFRD2",189,0)
 S COL=COL+1,XMLCOL(COL)="2^96^String^s4^Patient Name^s6"
"RTN","IBCNFRD2",190,0)
 S COL=COL+1,XMLCOL(COL)="3^51.75^String^s4^Patient SSN^s6"
"RTN","IBCNFRD2",191,0)
 S COL=COL+1,XMLCOL(COL)="4^52.5^DateTime^s3^Patient DOB^s6"
"RTN","IBCNFRD2",192,0)
 S COL=COL+1,XMLCOL(COL)="5^52.5^String^s4^Patient Age^s6"
"RTN","IBCNFRD2",193,0)
 S COL=COL+1,XMLCOL(COL)="70^87^String^s4^Pt. Rel. to Insured ID^s6"
"RTN","IBCNFRD2",194,0)
 S COL=COL+1,XMLCOL(COL)="71^69^String^s4^Pat. ID^s6"
"RTN","IBCNFRD2",195,0)
 S COL=COL+1,XMLCOL(COL)="6^186.75^String^s4^Carrier Name^s6"
"RTN","IBCNFRD2",196,0)
 S COL=COL+1,XMLCOL(COL)="7^63^String^s4^Carrier Phone^s6"
"RTN","IBCNFRD2",197,0)
 S COL=COL+1,XMLCOL(COL)="8^60.75^DateTime^s3^Effective Date^s6"
"RTN","IBCNFRD2",198,0)
 S COL=COL+1,XMLCOL(COL)="9^75^String^s4^Insurance Active^s6"
"RTN","IBCNFRD2",199,0)
 S COL=COL+1,XMLCOL(COL)="10^45.75^DateTime^s3^Thru Date^s6"
"RTN","IBCNFRD2",200,0)
 S COL=COL+1,XMLCOL(COL)="11^80.25^String^s4^Group ID^s6"
"RTN","IBCNFRD2",201,0)
 S COL=COL+1,XMLCOL(COL)="12^108^String^s4^Group Name^s6"
"RTN","IBCNFRD2",202,0)
 S COL=COL+1,XMLCOL(COL)="13^105^String^s4^Carrier Address 1^s6"
"RTN","IBCNFRD2",203,0)
 S COL=COL+1,XMLCOL(COL)="14^99.75^String^s4^Carrier Address 2^s6"
"RTN","IBCNFRD2",204,0)
 S COL=COL+1,XMLCOL(COL)="15^75^String^s4^Carrier City^s6"
"RTN","IBCNFRD2",205,0)
 S COL=COL+1,XMLCOL(COL)="16^57.75^String^s4^Carrier State^s6"
"RTN","IBCNFRD2",206,0)
 S COL=COL+1,XMLCOL(COL)="17^49.5^String^s4^Carrier Zip^s6"
"RTN","IBCNFRD2",207,0)
 S COL=COL+1,XMLCOL(COL)="18^105^String^s4^Out Patient Address 1^s6"
"RTN","IBCNFRD2",208,0)
 S COL=COL+1,XMLCOL(COL)="19^99.75^String^s4^Out Patient Address 2^s6"
"RTN","IBCNFRD2",209,0)
 S COL=COL+1,XMLCOL(COL)="20^75^String^s4^Out Patient City^s6"
"RTN","IBCNFRD2",210,0)
 S COL=COL+1,XMLCOL(COL)="21^74.25^String^s4^Out Patient State^s6"
"RTN","IBCNFRD2",211,0)
 S COL=COL+1,XMLCOL(COL)="22^65.25^String^s4^Out Patient Zip^s6"
"RTN","IBCNFRD2",212,0)
 S COL=COL+1,XMLCOL(COL)="23^113.25^String^s4^Policy Holder Name^s6"
"RTN","IBCNFRD2",213,0)
 S COL=COL+1,XMLCOL(COL)="24^48.75^DateTime^s3^Policy DOB^s6"
"RTN","IBCNFRD2",214,0)
 S COL=COL+1,XMLCOL(COL)="25^69^String^s4^Policy Holder ID^s6"
"RTN","IBCNFRD2",215,0)
 S COL=COL+1,XMLCOL(COL)="26^50.25^String^s4^Filing Limit^s6"
"RTN","IBCNFRD2",216,0)
 S COL=COL+1,XMLCOL(COL)="65^96^String^s4^Coverage Type^s6"
"RTN","IBCNFRD2",217,0)
 S COL=COL+1,XMLCOL(COL)="38^43.5^String^s4^Medicare^s6"
"RTN","IBCNFRD2",218,0)
 S COL=COL+1,XMLCOL(COL)="39^30^String^s4^Part A^s6"
"RTN","IBCNFRD2",219,0)
 S COL=COL+1,XMLCOL(COL)="40^29.25^String^s4^Part B^s6"
"RTN","IBCNFRD2",220,0)
 S COL=COL+1,XMLCOL(COL)="41^53.25^String^s4^MC Primary^s6"
"RTN","IBCNFRD2",221,0)
 S COL=COL+1,XMLCOL(COL)="42^77.25^DateTime^s3^MC Effective Date^s6"
"RTN","IBCNFRD2",222,0)
 S COL=COL+1,XMLCOL(COL)="43^64.5^String^s4^MC Secondary^s6"
"RTN","IBCNFRD2",223,0)
 S COL=COL+1,XMLCOL(COL)="44^66.75^String^s4^Medicare Supp^s6"
"RTN","IBCNFRD2",224,0)
 S COL=COL+1,XMLCOL(COL)="45^38.25^String^s4^MC Plan^s6"
"RTN","IBCNFRD2",225,0)
 S COL=COL+1,XMLCOL(COL)="46^61.5^String^s4^MC Carve Out^s6"
"RTN","IBCNFRD2",226,0)
 S COL=COL+1,XMLCOL(COL)="47^39.75^String^s4^MC HMO^s6"
"RTN","IBCNFRD2",227,0)
 S COL=COL+1,XMLCOL(COL)="48^57.75^String^s4^RX Coverage^s6"
"RTN","IBCNFRD2",228,0)
 S COL=COL+1,XMLCOL(COL)="50^151.5^String^s4^RX Name^s6"
"RTN","IBCNFRD2",229,0)
 S COL=COL+1,XMLCOL(COL)="51^120.75^String^s4^RX Address^s6"
"RTN","IBCNFRD2",230,0)
 S COL=COL+1,XMLCOL(COL)="52^61.5^String^s4^RX City^s6"
"RTN","IBCNFRD2",231,0)
 S COL=COL+1,XMLCOL(COL)="53^39^String^s4^RX State^s6"
"RTN","IBCNFRD2",232,0)
 S COL=COL+1,XMLCOL(COL)="54^30.75^String^s4^RX Zip^s6"
"RTN","IBCNFRD2",233,0)
 S COL=COL+1,XMLCOL(COL)="55^72.75^String^s4^Pre Certification^s6"
"RTN","IBCNFRD2",234,0)
 S COL=COL+1,XMLCOL(COL)="56^69^String^s4^Pre Cert Phone^s6"
"RTN","IBCNFRD2",235,0)
 S COL=COL+1,XMLCOL(COL)="57^83.25^String^s4^Pre Cert Contact^s6"
"RTN","IBCNFRD2",236,0)
 S COL=COL+1,XMLCOL(COL)="58^45.75^String^s4^Bill Phone^s6"
"RTN","IBCNFRD2",237,0)
 S COL=COL+1,XMLCOL(COL)="59^73.5^DateTime^s3^Verification Date^s6"
"RTN","IBCNFRD2",238,0)
 S COL=COL+1,XMLCOL(COL)="60^83.25^String^s4^Verified By^s6"
"RTN","IBCNFRD2",239,0)
 S COL=COL+1,XMLCOL(COL)="61^96.75^String^s4^Verification Complete^s6"
"RTN","IBCNFRD2",240,0)
 S COL=COL+1,XMLCOL(COL)="62^40.5^String^s4^File ID^s6"
"RTN","IBCNFRD2",241,0)
 S COL=COL+1,XMLCOL(COL)="67^53.25^String^s4^Bin Number^s6"
"RTN","IBCNFRD2",242,0)
 S COL=COL+1,XMLCOL(COL)="68^57^String^s4^PCN Number^s6"
"RTN","IBCNFRD2",243,0)
 S COL=COL+1,XMLCOL(COL)="69^50.25^String^s4^RX Phone^s6"
"RTN","IBCNFRD2",244,0)
 S COL=COL+1,XMLCOL(COL)="10@POLDET^91.5^String^s4^Policy Determination^s6"
"RTN","IBCNFRD2",245,0)
 S COL=COL+1,XMLCOL(COL)="73^51.75^String^s4^Terminator^s6"
"RTN","IBCNFRD2",246,0)
 S SITE=$P($$SITE^VASITE(),U,3)
"RTN","IBCNFRD2",247,0)
 S XMLFILE="VAXML"_SITE_".XML"
"RTN","IBCNFRD2",248,0)
 S HMSDIR=IBCNFPAR(13.01)
"RTN","IBCNFRD2",249,0)
 S DQUOTE="""",SQUOTE="'",AMP="&",LT="<",GT=">"
"RTN","IBCNFRD2",250,0)
 S XMLX(DQUOTE)="&quot;"
"RTN","IBCNFRD2",251,0)
 S XMLX(SQUOTE)="&pos;"
"RTN","IBCNFRD2",252,0)
 S XMLX(AMP)="&amp;"
"RTN","IBCNFRD2",253,0)
 S XMLX(LT)="&lt;"
"RTN","IBCNFRD2",254,0)
 S XMLX(GT)="&gt;"
"RTN","IBCNFRD2",255,0)
 Q
"RTN","IBCNFRD2",256,0)
 ;
"RTN","IBCNFRD2",257,0)
TEST ;
"RTN","IBCNFRD2",258,0)
 ;
"RTN","IBCNFRD2",259,0)
 D OPEN^%ZISH("TXTFILE","USER$:[SMITHK.HMS]","VA123T3.TXT","R")
"RTN","IBCNFRD2",260,0)
 Q:POP
"RTN","IBCNFRD2",261,0)
 N XMSUB,IBCSVMSG,XMY,XMTEXT,IBNOW,XMZ,XMDUZ,XMMG,XMSTRIP,XMROU,DIFROM,XMYBLOB,XMERR,CR,LF,MCNT,I,SEGS,RCNT
"RTN","IBCNFRD2",262,0)
 S CR=$C(13),LF=$C(10)
"RTN","IBCNFRD2",263,0)
 S SEQ=0,MCNT=0,RCNT=0
"RTN","IBCNFRD2",264,0)
 F  D  Q:EOF
"RTN","IBCNFRD2",265,0)
 .U IO
"RTN","IBCNFRD2",266,0)
 .R REC:2
"RTN","IBCNFRD2",267,0)
 .S EOF=$$STATUS^%ZISH
"RTN","IBCNFRD2",268,0)
 .Q:EOF
"RTN","IBCNFRD2",269,0)
 .S RCNT=RCNT+1
"RTN","IBCNFRD2",270,0)
 .S SEQ=SEQ+1
"RTN","IBCNFRD2",271,0)
 .I SEQ=1 S MCNT=MCNT+1,IBCSVMSG(SEQ)="2IBN"_$E("0000",1,4-$L(MCNT))_MCNT_" ABW."
"RTN","IBCNFRD2",272,0)
 .S SEGS=$L(REC)\100 S:$L(REC)#100 SEGS=SEGS+1
"RTN","IBCNFRD2",273,0)
 .F I=1:1:SEGS S SEQ=SEQ+1,IBCSVMSG(SEQ)=$E(REC,(I-1)*100+1,I*100)
"RTN","IBCNFRD2",274,0)
 .I RCNT=100 D
"RTN","IBCNFRD2",275,0)
 ..S SEQ=SEQ+1
"RTN","IBCNFRD2",276,0)
 ..S IBCSVMSG(SEQ)="NNNN  "
"RTN","IBCNFRD2",277,0)
 ..D TSEND
"RTN","IBCNFRD2",278,0)
 ..K IBCSVMSG
"RTN","IBCNFRD2",279,0)
 ..S SEQ=0,RCNT=0
"RTN","IBCNFRD2",280,0)
 S SEQ=SEQ+1,IBCSVMSG(SEQ)="                                                                                              "
"RTN","IBCNFRD2",281,0)
 S SEQ=SEQ+1,IBCSVMSG(SEQ)="                                                                                              "
"RTN","IBCNFRD2",282,0)
 S SEQ=SEQ+1,IBCSVMSG(SEQ)="                                                                                              "
"RTN","IBCNFRD2",283,0)
 S SEQ=SEQ+1,IBCSVMSG(SEQ)="                                                                       "
"RTN","IBCNFRD2",284,0)
 S SEQ=SEQ+1,IBCSVMSG(SEQ)="### END OF FILE ### END OF FILE ###                                                          "
"RTN","IBCNFRD2",285,0)
 S SEQ=SEQ+1,IBCSVMSG(SEQ)="NNNN  "
"RTN","IBCNFRD2",286,0)
 D TSEND
"RTN","IBCNFRD2",287,0)
 D CLOSE^%ZISH("TXTFILE")
"RTN","IBCNFRD2",288,0)
 Q
"RTN","IBCNFRD2",289,0)
 ;
"RTN","IBCNFRD2",290,0)
TSEND ;
"RTN","IBCNFRD2",291,0)
 N XMSUB,XMY,XMTEXT,XMZ,XMDUZ,XMMG,XMSTRIP,XMROU,DIFROM,XMYBLOB,XMERR
"RTN","IBCNFRD2",292,0)
 S XMSUB="HMS result file"
"RTN","IBCNFRD2",293,0)
 S XMTEXT="IBCSVMSG("
"RTN","IBCNFRD2",294,0)
 S XMY("G.IBN")=""
"RTN","IBCNFRD2",295,0)
 D ^XMD
"RTN","IBCNFRD2",296,0)
 U 0 W !,XMZ
"RTN","IBCNFRD2",297,0)
 Q
"RTN","IBCNFSND")
0^5^B150963134^n/a
"RTN","IBCNFSND",1,0)
IBCNFSND ;WOIFO/PO - Electronic Insurance Identification ;12/23/2011
"RTN","IBCNFSND",2,0)
 ;;2.0;INTEGRATED BILLING;**457**;21-MAR-94;Build 30
"RTN","IBCNFSND",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","IBCNFSND",4,0)
 ;;
"RTN","IBCNFSND",5,0)
 ;
"RTN","IBCNFSND",6,0)
 ; Sending Extract files and checking status of file transfers.
"RTN","IBCNFSND",7,0)
 ;
"RTN","IBCNFSND",8,0)
 Q
"RTN","IBCNFSND",9,0)
 ;
"RTN","IBCNFSND",10,0)
SENDEII ; send HMS extract files and check status of files transfers. 
"RTN","IBCNFSND",11,0)
 ; this subroutine is called from IBAMTC routine which is an scheduled job running once a day. 
"RTN","IBCNFSND",12,0)
 ;
"RTN","IBCNFSND",13,0)
 N IBNOTREC,IBNOEXT,IBCNFPAR,IBCRDT,IBD0,IBD1,IBEXTNOD,IBFARR,IBFILE,IBFLIST,IBFROM,IBFSPEC,IBMSGNUM,IBNOEXT
"RTN","IBCNFSND",14,0)
 N IBNUMMSG,IBNUMREC,IBPSTDUE,IBSUB1,IBTEXT,IBTO,IBXMSUB,IBXMY,IBNORES,IBMAXREC,IBAKEEP,IBXMZ
"RTN","IBCNFSND",15,0)
 N X,Y,DA,DIC,DIK,D0,D1,D2,DG,DI,DIW,DICR,DIE,DLAYGO,DQ,DR,XMDUN,XMZ,IBFILEX,FNDFILE,FNDFILES
"RTN","IBCNFSND",16,0)
 ; get the IB configuration parameters and list of active extract files.
"RTN","IBCNFSND",17,0)
 D GETPARAM^IBCNFRD(.IBCNFPAR)
"RTN","IBCNFSND",18,0)
 ;
"RTN","IBCNFSND",19,0)
 I 'IBCNFPAR(13.02) QUIT                 ; if eII active field is not 1 quit. 
"RTN","IBCNFSND",20,0)
 ;
"RTN","IBCNFSND",21,0)
 S IBMAXREC=255                          ; message's maximum record line legth
"RTN","IBCNFSND",22,0)
 S IBAKEEP=6*30                          ; number of days to keep the activity logs before get purged.
"RTN","IBCNFSND",23,0)
 S IBTEXT="^TMP(""IBCNFCND_IBTEXT"",$J)" ; @IBTEXT@(1:nnn) array to store the extract file content.
"RTN","IBCNFSND",24,0)
 K @IBTEXT
"RTN","IBCNFSND",25,0)
 ;
"RTN","IBCNFSND",26,0)
 ; for each active extracted HMS file name.
"RTN","IBCNFSND",27,0)
 S IBSUB1=0
"RTN","IBCNFSND",28,0)
 F  S IBSUB1=$O(IBCNFPAR(13.08,IBSUB1)) Q:'IBSUB1  D
"RTN","IBCNFSND",29,0)
 . S IBEXTNOD=IBCNFPAR(13.08,IBSUB1)
"RTN","IBCNFSND",30,0)
 . S IBFILE=$P(IBEXTNOD,U,3)    ; extract file name
"RTN","IBCNFSND",31,0)
 . ;
"RTN","IBCNFSND",32,0)
 . K DIC S DIC="^IBA(355.35,",DIC(0)="QZL",X=$P(IBEXTNOD,U,1) D ^DIC
"RTN","IBCNFSND",33,0)
 . S IBD0=+Y
"RTN","IBCNFSND",34,0)
 . S IBCRDT=$P(Y(0),U,2)   ;creation date time.
"RTN","IBCNFSND",35,0)
 . I 'IBCRDT S IBCRDT=$$NOW^XLFDT()   ; first time this type is created.
"RTN","IBCNFSND",36,0)
 . ;
"RTN","IBCNFSND",37,0)
 . ; Check message sub-file for all acknowledgements
"RTN","IBCNFSND",38,0)
 . ; want to do this first, so we can get the old ones cleared out
"RTN","IBCNFSND",39,0)
 . ; and put in activity log
"RTN","IBCNFSND",40,0)
 . ; 
"RTN","IBCNFSND",41,0)
 . I $O(^IBA(355.35,IBD0,1,0))  D 
"RTN","IBCNFSND",42,0)
 . . ; if confirmation messages are received for the extract file
"RTN","IBCNFSND",43,0)
 . . I $$CHKEXT(IBD0,IBFILE,$P(IBEXTNOD,U,4),.IBNOTREC) D 
"RTN","IBCNFSND",44,0)
 . . . D CACTLOG(IBD0)        ; save the top-level fields of HMS extract file status in the activity log sub-file.
"RTN","IBCNFSND",45,0)
 . . . ; kill the messages sub-file. 
"RTN","IBCNFSND",46,0)
 . . . S DA(1)=IBD0,DA=0
"RTN","IBCNFSND",47,0)
 . . . S DIK="^IBA(355.35,"_DA(1)_",1,"
"RTN","IBCNFSND",48,0)
 . . . F  S DA=$O(^IBA(355.35,IBD0,1,DA)) Q:'DA  D ^DIK
"RTN","IBCNFSND",49,0)
 . ;
"RTN","IBCNFSND",50,0)
 . ; check, if the extract file exits.
"RTN","IBCNFSND",51,0)
 . K IBFSPEC,IBFLIST,FNDFILES
"RTN","IBCNFSND",52,0)
 . S IBFSPEC(IBFILE)=""
"RTN","IBCNFSND",53,0)
 . ;process all the versions of files
"RTN","IBCNFSND",54,0)
 . F  K IBFLIST S FNDFILE=$$LIST^%ZISH(IBCNFPAR(13.01),"IBFSPEC","IBFLIST") Q:'FNDFILE  D
"RTN","IBCNFSND",55,0)
 . . S FNDFILES(IBFILE)=""
"RTN","IBCNFSND",56,0)
 . . ;Get the full name of the first file found (includes version number for VMS based systems)
"RTN","IBCNFSND",57,0)
 . . S IBFILEX=$O(IBFLIST(""))
"RTN","IBCNFSND",58,0)
 . . ;
"RTN","IBCNFSND",59,0)
 . . ; set the file creation date/time.
"RTN","IBCNFSND",60,0)
 . . S DIE="^IBA(355.35,",DA=IBD0,DR=".02///^S X=$$NOW^XLFDT()" D ^DIE
"RTN","IBCNFSND",61,0)
 . . ;
"RTN","IBCNFSND",62,0)
 . . ; open the eII file and read the content into @IBTEXT@ global and cut the 
"RTN","IBCNFSND",63,0)
 . . ; records to 255 (IBMAXREC) character chunks if more than 255 (IBMAXREC) characters.
"RTN","IBCNFSND",64,0)
 . . D FILERD(IBCNFPAR(13.01),IBFILEX,IBTEXT)
"RTN","IBCNFSND",65,0)
 . . ;
"RTN","IBCNFSND",66,0)
 . . ; build the file message(s)with the maximum number of lines per message.
"RTN","IBCNFSND",67,0)
 . . ; and send the file message(s) to related AITC queue.
"RTN","IBCNFSND",68,0)
 . . S IBNUMREC=$O(@IBTEXT@(""),-1)                  ; number of records
"RTN","IBCNFSND",69,0)
 . . S IBNUMMSG=IBNUMREC\IBCNFPAR(13.07)             ; number of message to be sent 
"RTN","IBCNFSND",70,0)
 . . S:IBNUMREC#IBCNFPAR(13.07) IBNUMMSG=IBNUMMSG+1  ; add one message if number records is not multiple of max number of records
"RTN","IBCNFSND",71,0)
 . . S:IBNUMMSG<1 IBNUMMSG=1                         ; make sure at least one message is sent if the extract file is empty
"RTN","IBCNFSND",72,0)
 . . F IBMSGNUM=1:1:IBNUMMSG D
"RTN","IBCNFSND",73,0)
 . . . S IBFROM=((IBMSGNUM-1)*IBCNFPAR(13.07)+1)
"RTN","IBCNFSND",74,0)
 . . . S IBTO=IBMSGNUM*IBCNFPAR(13.07)
"RTN","IBCNFSND",75,0)
 . . . S:IBTO>IBNUMREC IBTO=IBNUMREC
"RTN","IBCNFSND",76,0)
 . . . S IBXMSUB="HMS eII Extracted file "_IBFILE_" MSG("_IBMSGNUM_"/"_IBNUMMSG_")"
"RTN","IBCNFSND",77,0)
 . . . S IBXMY($P(IBEXTNOD,U,4))=""                 ; send it to associated ATIC queue address e.g. XXX@Q-IBN.VA.GOV
"RTN","IBCNFSND",78,0)
 . . . S IBXMZ=$$MSGSEND(.IBXMY,IBXMSUB,IBTEXT,IBFROM,IBTO,IBMAXREC)
"RTN","IBCNFSND",79,0)
 . . . ;
"RTN","IBCNFSND",80,0)
 . . . ; set the purge date for the message in message(#3.9) file
"RTN","IBCNFSND",81,0)
 . . . D VAPOR^XMXEDIT(IBXMZ,$$HTFM^XLFDT(+$H+IBAKEEP_","_$P($H,",",2)))
"RTN","IBCNFSND",82,0)
 . . . ;
"RTN","IBCNFSND",83,0)
 . . . ; record the creation date/time and the time the message(s) were sent in HMS Extract File Status                                                      
"RTN","IBCNFSND",84,0)
 . . . K DIC S DA(1)=IBD0,DIC(0)="MLF",DLAYGO=355.35
"RTN","IBCNFSND",85,0)
 . . . S DIC="^IBA(355.35,"_DA(1)_",1,"
"RTN","IBCNFSND",86,0)
 . . . S DIC("DR")=".02///^S X=$$NOW^XLFDT()"
"RTN","IBCNFSND",87,0)
 . . . S X=IBXMZ
"RTN","IBCNFSND",88,0)
 . . . D FILE^DICN
"RTN","IBCNFSND",89,0)
 . . ; delete the file using its full name
"RTN","IBCNFSND",90,0)
 . . S IBFARR(IBFILEX)=""
"RTN","IBCNFSND",91,0)
 . . S Y=$$DEL^%ZISH(IBCNFPAR(13.01),$NA(IBFARR))
"RTN","IBCNFSND",92,0)
 . ;   
"RTN","IBCNFSND",93,0)
 . I '$D(FNDFILES(IBFILE)) D   ;else if extracted file does not exist, save the file name to be reported.
"RTN","IBCNFSND",94,0)
 . . S IBPSTDUE=$$FILEDUE^IBCNFSND($P(IBEXTNOD,U,5),$P(IBEXTNOD,U,6),IBCRDT)
"RTN","IBCNFSND",95,0)
 . . S:IBPSTDUE IBNOEXT(IBFILE)=""
"RTN","IBCNFSND",96,0)
 ;
"RTN","IBCNFSND",97,0)
 ; send an email to IBCNF EII IRM mail group with list of files and messages that their 
"RTN","IBCNFSND",98,0)
 ; confirmation messages are not received within the given time. then re-send the message to ATIC.
"RTN","IBCNFSND",99,0)
 I $D(IBNOTREC)>0 D
"RTN","IBCNFSND",100,0)
 . D MSGNOTRC^IBCNFSND(.IBNOTREC)
"RTN","IBCNFSND",101,0)
 . D RESNDMSG(.IBNOTREC,IBAKEEP)
"RTN","IBCNFSND",102,0)
 ;
"RTN","IBCNFSND",103,0)
 ; if extract files are not created withing the give time send an email to IBCNF EII IRM mail group.
"RTN","IBCNFSND",104,0)
 I $D(IBNOEXT)>0 D MSGNOEXT^IBCNFSND(.IBNOEXT)
"RTN","IBCNFSND",105,0)
 ;
"RTN","IBCNFSND",106,0)
 ; if a Result File is not received within the due time  
"RTN","IBCNFSND",107,0)
 ;               Send an email to IBCNF EII IRM mail group
"RTN","IBCNFSND",108,0)
 S IBCRDT=+$P($G(^IBA(355.351,1,0)),U,2)
"RTN","IBCNFSND",109,0)
 S IBPSTDUE=$$FILEDUE^IBCNFSND(IBCNFPAR(13.04),IBCNFPAR(13.05),IBCRDT)
"RTN","IBCNFSND",110,0)
 I IBPSTDUE>0 D MSGNORES^IBCNFSND(IBCNFPAR(13.03))
"RTN","IBCNFSND",111,0)
 ;
"RTN","IBCNFSND",112,0)
 ; purge the entries older than  6 months in Activity Log sub-file of  
"RTN","IBCNFSND",113,0)
 ; HMS Extract File Status and HMS Result File Status 
"RTN","IBCNFSND",114,0)
 D PURGELOG(IBAKEEP) ; purge the activity logs of HMS extract file status and HMS result file status 
"RTN","IBCNFSND",115,0)
 ;
"RTN","IBCNFSND",116,0)
 K @IBTEXT
"RTN","IBCNFSND",117,0)
 ;
"RTN","IBCNFSND",118,0)
 Q
"RTN","IBCNFSND",119,0)
 ;
"RTN","IBCNFSND",120,0)
FILEDUE(IBDUEDAY,IBLTDAY,IBCRDT,IBNOW) ;  check if  file is due
"RTN","IBCNFSND",121,0)
 ;  input: IBDEUDAY - day of the month the file is due
"RTN","IBCNFSND",122,0)
 ;         IBLTDAY  - number of days after day of month to declare file is late
"RTN","IBCNFSND",123,0)
 ;         IBCRDT   - date/time last file was processed
"RTN","IBCNFSND",124,0)
 ; output: 1 - if file is due
"RTN","IBCNFSND",125,0)
 ;         0 - if file is not due 
"RTN","IBCNFSND",126,0)
 ;
"RTN","IBCNFSND",127,0)
 N IBLDM,IBDUEDT,IBLATEDT,LATE,PREVDUE,IBFDOM,IBPFDOM,PLATEDT
"RTN","IBCNFSND",128,0)
 S IBNOW=$G(IBNOW,$$NOW^XLFDT())
"RTN","IBCNFSND",129,0)
 S LATE=0
"RTN","IBCNFSND",130,0)
 ; if day of month file due day is 0 retrun 0, since this is as needed file.
"RTN","IBCNFSND",131,0)
 I 'IBDUEDAY Q LATE                             ; do not check assume not past  due. 
"RTN","IBCNFSND",132,0)
 S IBNOW=IBNOW\1                       ; current date
"RTN","IBCNFSND",133,0)
 S IBCRDT=IBCRDT\1
"RTN","IBCNFSND",134,0)
 ;
"RTN","IBCNFSND",135,0)
 ; calculate the due date and passed due late date.
"RTN","IBCNFSND",136,0)
 S IBLDM=$E($$SCH^XLFDT("1M(L@1A)",IBNOW)\1,6,7)  ; last day of month
"RTN","IBCNFSND",137,0)
 I IBDUEDAY>IBLDM S IBDUEDAY=IBLDM           ; if due day greater than last day of currnt month set it to last date of current month.
"RTN","IBCNFSND",138,0)
 S IBDUEDT=$E(IBNOW,1,5)_$S($L(IBDUEDAY)>1:IBDUEDAY,1:"0"_IBDUEDAY)
"RTN","IBCNFSND",139,0)
 S IBLATEDT=$$FMADD^XLFDT(IBDUEDT,IBLTDAY)   ; calculate late date
"RTN","IBCNFSND",140,0)
 ;FIRST OF THIS MONTH
"RTN","IBCNFSND",141,0)
 S IBFDOM=$E(IBNOW,1,5)_"01"
"RTN","IBCNFSND",142,0)
 ;MINUS ONE GETS LAST DAY OF PREVIOUS MONTH
"RTN","IBCNFSND",143,0)
 S IBLDMP=$$HTFM^XLFDT($$FMTH^XLFDT(IBFDOM,1)-1,1)
"RTN","IBCNFSND",144,0)
 ; SETUP FIRST DAY OF PREV MONTH TO CALCULATE DUE DATE OF PREV MONTH
"RTN","IBCNFSND",145,0)
 S IBPFDOM=$E(IBLDMP,1,5)_"01"
"RTN","IBCNFSND",146,0)
 ;NOW CALCULATE DUE DATE OF PREV MONTH
"RTN","IBCNFSND",147,0)
 S PREVDUE=$E(IBPFDOM,1,5)_$S($L(IBDUEDAY)>1:IBDUEDAY,1:"0"_IBDUEDAY)
"RTN","IBCNFSND",148,0)
 I PREVDUE>IBLDMP S PREVDUE=IBLDMP
"RTN","IBCNFSND",149,0)
 S PLATEDT=$$FMADD^XLFDT(PREVDUE,IBLTDAY)   ; calculate late date
"RTN","IBCNFSND",150,0)
 ;
"RTN","IBCNFSND",151,0)
 ; if current time greater than late date/time and creation time is less than due date/time,  the file due
"RTN","IBCNFSND",152,0)
 I IBNOW>IBLATEDT,IBCRDT<IBDUEDT S LATE=1
"RTN","IBCNFSND",153,0)
 I IBCRDT<PREVDUE,IBNOW>PLATEDT S LATE=1
"RTN","IBCNFSND",154,0)
 Q LATE                                                     ; file is not due.
"RTN","IBCNFSND",155,0)
 ;
"RTN","IBCNFSND",156,0)
MSGNORES(IBFILE) ; Notify G.IBCNF EII IRM mail group that the result file is not received
"RTN","IBCNFSND",157,0)
 ;  input: IBNORES - result file name 
"RTN","IBCNFSND",158,0)
 ; output: none
"RTN","IBCNFSND",159,0)
 ;
"RTN","IBCNFSND",160,0)
 N XMSUB,IBMSG,XMY,XMTEXT,IBNOW,IBX
"RTN","IBCNFSND",161,0)
 S XMSUB="Expected Result file has not been received."
"RTN","IBCNFSND",162,0)
 S IBNOW=$$NOW^XLFDT()
"RTN","IBCNFSND",163,0)
 S IBMSG(1)="Expected Result file "_IBFILE_" has not been received yet"
"RTN","IBCNFSND",164,0)
 S XMTEXT="IBMSG("
"RTN","IBCNFSND",165,0)
 S XMY("G.IBCNF EII IRM")=""
"RTN","IBCNFSND",166,0)
 D ^XMD
"RTN","IBCNFSND",167,0)
 Q
"RTN","IBCNFSND",168,0)
 ;
"RTN","IBCNFSND",169,0)
MSGNOEXT(IBNOEXT) ; Notify G.IBCNF EII IRM mail group that the extract file is not created
"RTN","IBCNFSND",170,0)
 ;  input: IBNOEXT(<file name>)="" list of the extract file names. 
"RTN","IBCNFSND",171,0)
 ; output: none
"RTN","IBCNFSND",172,0)
 ;
"RTN","IBCNFSND",173,0)
 N XMSUB,IBMSG,XMY,XMTEXT,IBNOW,IBX,IBFILE
"RTN","IBCNFSND",174,0)
 S XMSUB="Expected Extract files have not been created."
"RTN","IBCNFSND",175,0)
 S IBNOW=$$NOW^XLFDT()
"RTN","IBCNFSND",176,0)
 S IBMSG(1)="The following Extract file(s) have not been created yet:"
"RTN","IBCNFSND",177,0)
 S IBFILE=""
"RTN","IBCNFSND",178,0)
 S IBX=1
"RTN","IBCNFSND",179,0)
 F  S IBFILE=$O(IBNOEXT(IBFILE)) Q:IBFILE=""  D
"RTN","IBCNFSND",180,0)
 . S IBX=IBX+1
"RTN","IBCNFSND",181,0)
 . S IBMSG(IBX)="    "_IBFILE
"RTN","IBCNFSND",182,0)
 S XMTEXT="IBMSG("
"RTN","IBCNFSND",183,0)
 S XMY("G.IBCNF EII IRM")=""
"RTN","IBCNFSND",184,0)
 D ^XMD
"RTN","IBCNFSND",185,0)
 Q
"RTN","IBCNFSND",186,0)
 ;
"RTN","IBCNFSND",187,0)
MSGNOTRC(IBNOTREC) ; Notify G.IBCNF EII IRM mail group the confirmation messages are not received for extract files
"RTN","IBCNFSND",188,0)
 ;  input: IBNOTREC - array where
"RTN","IBCNFSND",189,0)
 ;             IBNOTREC((<file index>)= <file name> ^
"RTN","IBCNFSND",190,0)
 ;             IBNOTREC(<file index>, <message index>) = <message #> ^ 
"RTN","IBCNFSND",191,0)
 ; output: none
"RTN","IBCNFSND",192,0)
 ;
"RTN","IBCNFSND",193,0)
 N XMSUB,IBRESMSG,XMY,XMTEXT,IBNOW,I,IBX,J
"RTN","IBCNFSND",194,0)
 S XMSUB="Confirmation messages have not been received!!!"
"RTN","IBCNFSND",195,0)
 S IBNOW=$$NOW^XLFDT()
"RTN","IBCNFSND",196,0)
 S IBRESMSG(1)="Confirmation message(s) have not been received for the following file(s):"
"RTN","IBCNFSND",197,0)
 S IBX=1
"RTN","IBCNFSND",198,0)
 S I=0
"RTN","IBCNFSND",199,0)
 F  S I=$O(IBNOTREC(I)) Q:'I  D
"RTN","IBCNFSND",200,0)
 . S IBX=IBX+1
"RTN","IBCNFSND",201,0)
 . S IBRESMSG(IBX)="File Name: "_$P(IBNOTREC(I),U)
"RTN","IBCNFSND",202,0)
 . S J=0
"RTN","IBCNFSND",203,0)
 . F  S J=$O(IBNOTREC(I,J)) Q:'J  D
"RTN","IBCNFSND",204,0)
 . . S IBX=IBX+1
"RTN","IBCNFSND",205,0)
 . . S IBRESMSG(IBX)="    Msg #: "_$P(IBNOTREC(I,J),U)
"RTN","IBCNFSND",206,0)
 S XMTEXT="IBRESMSG("
"RTN","IBCNFSND",207,0)
 S XMY("G.IBCNF EII IRM")=""
"RTN","IBCNFSND",208,0)
 D ^XMD
"RTN","IBCNFSND",209,0)
 Q
"RTN","IBCNFSND",210,0)
 ;
"RTN","IBCNFSND",211,0)
CHKEXT(IBD0,IBFILE,IBAITC,IBNOTREC) ; For given extract file type check if all messages are confirmed.
"RTN","IBCNFSND",212,0)
 ;  input: IBD0   - ien of HMS extract file status (#355.35) 
"RTN","IBCNFSND",213,0)
 ;         IBFILE - file name
"RTN","IBCNFSND",214,0)
 ;         IBAITC = AITC DMI queue email address.
"RTN","IBCNFSND",215,0)
 ;
"RTN","IBCNFSND",216,0)
 ; output: IBNOTREC array where
"RTN","IBCNFSND",217,0)
 ;             IBNOTREC((<file index>)= file name^AITC DMI queue email address
"RTN","IBCNFSND",218,0)
 ;             IBNOTREC(<file index>, <message index>) = message # ^ send date time
"RTN","IBCNFSND",219,0)
 ;
"RTN","IBCNFSND",220,0)
 N IBD1,IBCONFRM,IBNOW,IBDIFF
"RTN","IBCNFSND",221,0)
 S IBNOW=$$NOW^XLFDT()
"RTN","IBCNFSND",222,0)
 S IBCONFRM=1
"RTN","IBCNFSND",223,0)
 S IBD1=0
"RTN","IBCNFSND",224,0)
 F  S IBD1=$O(^IBA(355.35,IBD0,1,IBD1)) Q:'IBD1  D
"RTN","IBCNFSND",225,0)
 . I $P($G(^IBA(355.35,IBD0,1,IBD1,0)),U,4)="" D     ;if AITC confirmation number is empty
"RTN","IBCNFSND",226,0)
 . . S IBCONFRM=0
"RTN","IBCNFSND",227,0)
 . . S IBDIFF=$$HDIFF^XLFDT($$FMTH^XLFDT(IBNOW),$$FMTH^XLFDT($P($G(^IBA(355.35,IBD0,1,IBD1,0)),U,2)),2)
"RTN","IBCNFSND",228,0)
 . . I IBDIFF>(IBCNFPAR(13.06)*3600) D     ; if no confirmation received within due time 
"RTN","IBCNFSND",229,0)
 . . . S IBNOTREC(IBD0,IBD1)=$P($G(^IBA(355.35,IBD0,1,IBD1,0)),U)_U_$P($G(^IBA(355.35,IBD0,1,IBD1,0)),U,2)
"RTN","IBCNFSND",230,0)
 . . . S IBNOTREC(IBD0)=IBFILE_U_IBAITC  ; keep track of file name to be sent to IRM mail group
"RTN","IBCNFSND",231,0)
 Q IBCONFRM
"RTN","IBCNFSND",232,0)
 ;
"RTN","IBCNFSND",233,0)
FILERD(DIR,FILE,IBTEXT) ; Read the extract file into @IBTEXT@ array
"RTN","IBCNFSND",234,0)
 ;  input: DIR      - HMS directory name 
"RTN","IBCNFSND",235,0)
 ;         FILE     - extract file name
"RTN","IBCNFSND",236,0)
 ; output: IBTEXT   - array name where file is read into as @IBTEXT@(<1...n>)
"RTN","IBCNFSND",237,0)
 ;
"RTN","IBCNFSND",238,0)
 ;
"RTN","IBCNFSND",239,0)
 N IBI,IBREC,I
"RTN","IBCNFSND",240,0)
 K @IBTEXT
"RTN","IBCNFSND",241,0)
 ; read the  file
"RTN","IBCNFSND",242,0)
 D OPEN^%ZISH("IBFILEX",DIR,FILE,"R")
"RTN","IBCNFSND",243,0)
 Q:POP
"RTN","IBCNFSND",244,0)
 U IO
"RTN","IBCNFSND",245,0)
 S IBI=0
"RTN","IBCNFSND",246,0)
 F  Q:$$STATUS^%ZISH  D
"RTN","IBCNFSND",247,0)
 . R IBREC:5
"RTN","IBCNFSND",248,0)
 . Q:$$STATUS^%ZISH
"RTN","IBCNFSND",249,0)
 . S IBI=IBI+1
"RTN","IBCNFSND",250,0)
 . S @IBTEXT@(IBI)=IBREC
"RTN","IBCNFSND",251,0)
 D CLOSE^%ZISH("IBFILEX")
"RTN","IBCNFSND",252,0)
 Q
"RTN","IBCNFSND",253,0)
 ;
"RTN","IBCNFSND",254,0)
MSGSEND(XMY,XMSUB,IBTEXT,IBFROM,IBTO,IBMAXREC) ; send the extract file text to AITC DMI Queue
"RTN","IBCNFSND",255,0)
 ;  input: XMY     - array of recipients names
"RTN","IBCNFSND",256,0)
 ;         XMSUB   - message subject  
"RTN","IBCNFSND",257,0)
 ;         IBTEXT  - array name where content of message is read from @IBTEXT@(IBFROM:IBTO)
"RTN","IBCNFSND",258,0)
 ;         IBFROM  - start of the message text in @IBTEXT@() array
"RTN","IBCNFSND",259,0)
 ;         IBTO    - end of the message text in @IBTEXT@() array 
"RTN","IBCNFSND",260,0)
 ;         IBMAXREC - maximum line length that can be put into each messge line.  
"RTN","IBCNFSND",261,0)
 ; output: returns the created message id
"RTN","IBCNFSND",262,0)
 ;
"RTN","IBCNFSND",263,0)
 N XMDUZ,XMTEXT,TEMPTEXT,I,IBI,J,IBREC
"RTN","IBCNFSND",264,0)
 S TEMPTEXT="TMP(""IBCNFSND_TEMP"",$J)"
"RTN","IBCNFSND",265,0)
 K @TEMPTEXT
"RTN","IBCNFSND",266,0)
 S IBI=0
"RTN","IBCNFSND",267,0)
 F J=IBFROM:1:IBTO D
"RTN","IBCNFSND",268,0)
 . S IBREC=@IBTEXT@(J)
"RTN","IBCNFSND",269,0)
 . F I=1:IBMAXREC:$L(IBREC) D
"RTN","IBCNFSND",270,0)
 . . S IBI=IBI+1
"RTN","IBCNFSND",271,0)
 . . S @TEMPTEXT@(IBI)=$E(IBREC,I,IBMAXREC+I-1)
"RTN","IBCNFSND",272,0)
 ;
"RTN","IBCNFSND",273,0)
 S @TEMPTEXT@(IBI+1)="NNNN"    ; insert the end of message marker as required by AITC.
"RTN","IBCNFSND",274,0)
 S XMTEXT=$E(TEMPTEXT,1,$L(TEMPTEXT)-1)_","    ;set XMTEXT in form of say "TMP(""IBCNFSND_TEMP"",$J,"
"RTN","IBCNFSND",275,0)
 S XMDUZ=.5    ;post master (.5 user id)
"RTN","IBCNFSND",276,0)
 ; send the message
"RTN","IBCNFSND",277,0)
 D ^XMD
"RTN","IBCNFSND",278,0)
 K @TEMPTEXT
"RTN","IBCNFSND",279,0)
 Q $G(XMZ)
"RTN","IBCNFSND",280,0)
 ;
"RTN","IBCNFSND",281,0)
CACTLOG(IBD0) ; create the activity log of HMS extract file status
"RTN","IBCNFSND",282,0)
 ;  input: IBD0 - ien of HMS extract file status (#355.35)
"RTN","IBCNFSND",283,0)
 ; output: none
"RTN","IBCNFSND",284,0)
 ; 
"RTN","IBCNFSND",285,0)
 N IBCDT,IBD1,IBNODE,DA,DIC,X,Y
"RTN","IBCNFSND",286,0)
 ; create the the activity log subfile.
"RTN","IBCNFSND",287,0)
 S IBCDT=$P(^IBA(355.35,IBD0,0),U,2)
"RTN","IBCNFSND",288,0)
 S DA(1)=IBD0,DIC(0)="MLF",DLAYGO=355.35
"RTN","IBCNFSND",289,0)
 S DIC="^IBA(355.35,"_DA(1)_",2,"
"RTN","IBCNFSND",290,0)
 S X=IBCDT D FILE^DICN
"RTN","IBCNFSND",291,0)
 ; create messages subfile of activity log subfile
"RTN","IBCNFSND",292,0)
 K DA,DIC,X
"RTN","IBCNFSND",293,0)
 S DA(2)=IBD0
"RTN","IBCNFSND",294,0)
 S DA(1)=+Y
"RTN","IBCNFSND",295,0)
 S IBD1=0
"RTN","IBCNFSND",296,0)
 F  S IBD1=$O(^IBA(355.35,IBD0,1,IBD1)) Q:'IBD1  D
"RTN","IBCNFSND",297,0)
 . S IBNODE=^IBA(355.35,IBD0,1,IBD1,0)
"RTN","IBCNFSND",298,0)
 . S DIC(0)="MLF"
"RTN","IBCNFSND",299,0)
 . S DIC="^IBA(355.35,"_DA(2)_",2,"_DA(1)_",1,"
"RTN","IBCNFSND",300,0)
 . S DIC("DR")=".02///^S X=$P(IBNODE,U,2);.03///^S X=$P(IBNODE,U,3);.04///^S X=$P(IBNODE,U,4)"
"RTN","IBCNFSND",301,0)
 . S X=$P(IBNODE,U)
"RTN","IBCNFSND",302,0)
 . D FILE^DICN
"RTN","IBCNFSND",303,0)
 Q
"RTN","IBCNFSND",304,0)
 ;
"RTN","IBCNFSND",305,0)
PURGELOG(IBAKEEP) ; purge the activity logs of HMS extract file status and HMS result file status 
"RTN","IBCNFSND",306,0)
 ;  input: IBAKEEP - number of days to keep the activity logs
"RTN","IBCNFSND",307,0)
 ; output: none
"RTN","IBCNFSND",308,0)
 ;
"RTN","IBCNFSND",309,0)
 N IBCRDT,IBNOW,IBSTART,IBD0,DA,DIK
"RTN","IBCNFSND",310,0)
 S IBNOW=$$NOW^XLFDT()
"RTN","IBCNFSND",311,0)
 S IBSTART=$$HTFM^XLFDT($$HADD^XLFDT($$FMTH^XLFDT(IBNOW),-IBAKEEP))
"RTN","IBCNFSND",312,0)
 ;
"RTN","IBCNFSND",313,0)
 ;  purge the HMS extract file status activity log.
"RTN","IBCNFSND",314,0)
 S IBD0=0
"RTN","IBCNFSND",315,0)
 F  S IBD0=$O(^IBA(355.35,IBD0)) Q:'IBD0  D 
"RTN","IBCNFSND",316,0)
 . S IBCRDT=""
"RTN","IBCNFSND",317,0)
 . F  S IBCRDT=$O(^IBA(355.35,IBD0,2,"B",IBCRDT)) Q:'IBCRDT  Q:IBCRDT>IBSTART  D
"RTN","IBCNFSND",318,0)
 . . ;W !, IBCRDT
"RTN","IBCNFSND",319,0)
 . . S DA(1)=IBD0
"RTN","IBCNFSND",320,0)
 . . S DA=$O(^IBA(355.35,IBD0,2,"B",IBCRDT,""))
"RTN","IBCNFSND",321,0)
 . . S DIK="^IBA(355.35,"_DA(1)_",2,"
"RTN","IBCNFSND",322,0)
 . . D ^DIK
"RTN","IBCNFSND",323,0)
 ;
"RTN","IBCNFSND",324,0)
 ;  purge the HMS result file status activity log.
"RTN","IBCNFSND",325,0)
 S IBD0=0
"RTN","IBCNFSND",326,0)
 F  S IBD0=$O(^IBA(355.351,IBD0)) Q:'IBD0  D 
"RTN","IBCNFSND",327,0)
 . S IBCRDT=""
"RTN","IBCNFSND",328,0)
 . F  S IBCRDT=$O(^IBA(355.351,IBD0,2,"B",IBCRDT)) Q:'IBCRDT  Q:IBCRDT>IBSTART  D
"RTN","IBCNFSND",329,0)
 . . S DA(1)=IBD0
"RTN","IBCNFSND",330,0)
 . . S DA=$O(^IBA(355.351,IBD0,2,"B",IBCRDT,""))
"RTN","IBCNFSND",331,0)
 . . S DIK="^IBA(355.351,"_DA(1)_",2,"
"RTN","IBCNFSND",332,0)
 . . D ^DIK
"RTN","IBCNFSND",333,0)
 Q
"RTN","IBCNFSND",334,0)
 ;
"RTN","IBCNFSND",335,0)
RESNDMSG(IBNOTREC,IBAKEEP) ; Resend the messages for which the confirmation messages are not received for extract files
"RTN","IBCNFSND",336,0)
 ;  input: IBNOTREC - array where
"RTN","IBCNFSND",337,0)
 ;             IBNOTREC((<file index>)= file name^AITC DMI queue email address
"RTN","IBCNFSND",338,0)
 ;             IBNOTREC(<file index>, <message index>) = message # ^ send date time
"RTN","IBCNFSND",339,0)
 ;         IBAKEEP = number of days before purge the new message 
"RTN","IBCNFSND",340,0)
 ; output: none
"RTN","IBCNFSND",341,0)
 ;
"RTN","IBCNFSND",342,0)
 N XMSUB,IBRESMSG,XMY,XMTEXT,IBNOW,IBD0,IBD1,XMZ,IBRESEND,IBAITC,XMDUZ,XMPOS
"RTN","IBCNFSND",343,0)
 S IBNOW=$$NOW^XLFDT()
"RTN","IBCNFSND",344,0)
 S IBD0=0
"RTN","IBCNFSND",345,0)
 ; for each extract file type get the list of unconfirmed messages.
"RTN","IBCNFSND",346,0)
 F  S IBD0=$O(IBNOTREC(IBD0)) Q:'IBD0  D
"RTN","IBCNFSND",347,0)
 . S IBAITC=$P(IBNOTREC(IBD0),U,2)    ; AITC DMI Queue email address.
"RTN","IBCNFSND",348,0)
 . S IBD1=0
"RTN","IBCNFSND",349,0)
 . F  S IBD1=$O(IBNOTREC(IBD0,IBD1)) Q:'IBD1  D
"RTN","IBCNFSND",350,0)
 . . S IBXMZ=$P(IBNOTREC(IBD0,IBD1),U)
"RTN","IBCNFSND",351,0)
 . . ; for this unconfirmed message, set AUSTIN ID and AITC Confirmation number to 0. 
"RTN","IBCNFSND",352,0)
 . . S DA=IBD1,DA(1)=IBD0
"RTN","IBCNFSND",353,0)
 . . S DIE="^IBA(355.35,"_DA(1)_",1,"
"RTN","IBCNFSND",354,0)
 . . S DR=".03///^S X=0;.04///^S X=0" D ^DIE
"RTN","IBCNFSND",355,0)
 . . ;
"RTN","IBCNFSND",356,0)
 . . ; get and resend the message, with the " - Re-Send:<old message id>"
"RTN","IBCNFSND",357,0)
 . . ; appended to the subject of the new message.
"RTN","IBCNFSND",358,0)
 . . D GMSGTXT(IBXMZ,.IBRESMSG)
"RTN","IBCNFSND",359,0)
 . . S IBRESEND=" - Re-Send:"
"RTN","IBCNFSND",360,0)
 . . S XMSUB=$$SUBGET^XMGAPI0(IBXMZ)
"RTN","IBCNFSND",361,0)
 . . S XMSUB=$S(XMSUB[IBRESEND:$P(XMSUB,IBRESEND,1),1:XMSUB)_IBRESEND_IBXMZ
"RTN","IBCNFSND",362,0)
 . . S XMY(IBAITC)=""                    ; AITC DMI queue address
"RTN","IBCNFSND",363,0)
 . . S XMTEXT="IBRESMSG("
"RTN","IBCNFSND",364,0)
 . . D ^XMD
"RTN","IBCNFSND",365,0)
 . . ;
"RTN","IBCNFSND",366,0)
 . . ; set the purge date for the message in message(#3.9) file
"RTN","IBCNFSND",367,0)
 . . D VAPOR^XMXEDIT(XMZ,$$HTFM^XLFDT(+$H+IBAKEEP_","_$P($H,",",2)))
"RTN","IBCNFSND",368,0)
 . . ;
"RTN","IBCNFSND",369,0)
 . . ; record the time, the message is re-sent in HMS Extract File Status                                                      
"RTN","IBCNFSND",370,0)
 . . K DIC S DA(1)=IBD0,DIC(0)="MLF",DLAYGO=355.35
"RTN","IBCNFSND",371,0)
 . . S DIC="^IBA(355.35,"_DA(1)_",1,"
"RTN","IBCNFSND",372,0)
 . . S DIC("DR")=".02///^S X=$$NOW^XLFDT()"
"RTN","IBCNFSND",373,0)
 . . S X=XMZ
"RTN","IBCNFSND",374,0)
 . . D FILE^DICN
"RTN","IBCNFSND",375,0)
 Q
"RTN","IBCNFSND",376,0)
 ;
"RTN","IBCNFSND",377,0)
GMSGTXT(XMZ,IBRESMSG) ; get message's txt 
"RTN","IBCNFSND",378,0)
 ;  input: XMZ - message id.
"RTN","IBCNFSND",379,0)
 ; output: IBRESMSG - array containing the message's txt
"RTN","IBCNFSND",380,0)
 ;
"RTN","IBCNFSND",381,0)
 N IBXMZ,XMER,XMA,XMRG
"RTN","IBCNFSND",382,0)
 K IBRESMSG
"RTN","IBCNFSND",383,0)
 S IBXMZ=$G(XMZ)
"RTN","IBCNFSND",384,0)
 S XMA=0
"RTN","IBCNFSND",385,0)
 F  D  Q:XMER<0
"RTN","IBCNFSND",386,0)
 . D REC^XMS3 ; receive a line
"RTN","IBCNFSND",387,0)
 . Q:XMER<0  ;  check for end of message
"RTN","IBCNFSND",388,0)
 . S XMA=XMA+1
"RTN","IBCNFSND",389,0)
 . S IBRESMSG(XMA)=XMRG
"RTN","IBCNFSND",390,0)
 Q
"RTN","IBCNFSND",391,0)
 ;
"SEC","^DIC",355.35,355.35,0,"AUDIT")
@
"SEC","^DIC",355.35,355.35,0,"DD")
@
"SEC","^DIC",355.35,355.35,0,"DEL")
@
"SEC","^DIC",355.35,355.35,0,"LAYGO")
@
"SEC","^DIC",355.35,355.35,0,"RD")
@
"SEC","^DIC",355.35,355.35,0,"WR")
@
"SEC","^DIC",355.351,355.351,0,"AUDIT")
@
"SEC","^DIC",355.351,355.351,0,"DD")
@
"SEC","^DIC",355.351,355.351,0,"DEL")
@
"SEC","^DIC",355.351,355.351,0,"LAYGO")
@
"SEC","^DIC",355.351,355.351,0,"RD")
@
"SEC","^DIC",355.351,355.351,0,"WR")
@
"UP",350.9,350.9006,-1)
350.9^13.08
"UP",350.9,350.9006,0)
350.9006
"VER")
8.0^22.0
"^DD",350.9,350.9,13.01,0)
HMS DIRECTORY^F^^13;1^K:$L(X)>30!($L(X)<5) X
"^DD",350.9,350.9,13.01,3)
Enter the name of the directory where Extract/Result files are stored.
"^DD",350.9,350.9,13.01,21,0)
^.001^2^2^3120110^^^^
"^DD",350.9,350.9,13.01,21,1,0)
Name of the directory where Extract/Result files are stored
"^DD",350.9,350.9,13.01,21,2,0)
as needed by HMS Data Extractor.
"^DD",350.9,350.9,13.01,"DT")
3111004
"^DD",350.9,350.9,13.02,0)
EII ACTIVE^S^1:YES;0:NO;^13;2^Q
"^DD",350.9,350.9,13.02,.1)
Is eII Active?
"^DD",350.9,350.9,13.02,3)
Enable/activate eII Software?
"^DD",350.9,350.9,13.02,21,0)
^^1^1^3120110^
"^DD",350.9,350.9,13.02,21,1,0)
This is a flag to indicate whether the eII software is enabled/active.
"^DD",350.9,350.9,13.02,"DT")
3111004
"^DD",350.9,350.9,13.03,0)
RESULT FILE NAME^F^^13;3^K:$L(X)>30!($L(X)<5) X
"^DD",350.9,350.9,13.03,3)
Enter the name of the Result file as it is configured in HMS Data Extractor software.
"^DD",350.9,350.9,13.03,21,0)
^^1^1^3111123^
"^DD",350.9,350.9,13.03,21,1,0)
Name of the Result file as it is configured in HMS Data Extractor software.
"^DD",350.9,350.9,13.03,"DT")
3111004
"^DD",350.9,350.9,13.04,0)
DAY OF MONTH RESULT FILE DUE^NJ2,0^^13;4^K:+X'=X!(X>31)!(X<0)!(X?.E1"."1N.N) X
"^DD",350.9,350.9,13.04,3)
Enter the day of month, 0 to 31 when the Result file expected from HMS.  A value of 0 means do not check the due date.
"^DD",350.9,350.9,13.04,21,0)
^.001^4^4^3120111^^
"^DD",350.9,350.9,13.04,21,1,0)
Day of the month when Result file is due be received from HMS through AITC.
"^DD",350.9,350.9,13.04,21,2,0)
if "0" entered or empty, due check would not be calculated.
"^DD",350.9,350.9,13.04,21,3,0)
For a day , say  31 that does not exist for a given month,  eII software will assume last day of that month. 
"^DD",350.9,350.9,13.04,21,4,0)
This includes last day of  February whether it is a leap year or not.
"^DD",350.9,350.9,13.04,"DT")
3111004
"^DD",350.9,350.9,13.05,0)
DAYS BEFORE LATE MESSAGE SENT^NJ2,0^^13;5^K:+X'=X!(X>30)!(X<0)!(X?.E1"."1N.N) X
"^DD",350.9,350.9,13.05,3)
Enter number of days after the Result File Due day, before the Result File arrival from HMS is considered overdue.
"^DD",350.9,350.9,13.05,21,0)
^.001^3^3^3120110^^^
"^DD",350.9,350.9,13.05,21,1,0)
Number of days after the Result File Due day of the month, before
"^DD",350.9,350.9,13.05,21,2,0)
the Result file arrival from HMS is considered overdue. If the Result file is not 
"^DD",350.9,350.9,13.05,21,3,0)
received by this time a late message is sent to IRM mail group.
"^DD",350.9,350.9,13.05,"DT")
3111123
"^DD",350.9,350.9,13.06,0)
MAX EXT FILE QUE CONFIRM TIME^NJ2,0^^13;6^K:+X'=X!(X>99)!(X<0)!(X?.E1"."1N.N) X
"^DD",350.9,350.9,13.06,3)
Enter maximum number of hours (usually 24 hours) to wait for confirmation message(s) to be received after an Extract file message is sent to AITC.
"^DD",350.9,350.9,13.06,21,0)
^.001^4^4^3120110^^^^
"^DD",350.9,350.9,13.06,21,1,0)
Maximum number of hours (usually 24 hours) to wait for confirmation 
"^DD",350.9,350.9,13.06,21,2,0)
message(s) to be received after an Extract file message is sent to
"^DD",350.9,350.9,13.06,21,3,0)
AITC.  When this time is exceeded, a no confirmation message is sent to
"^DD",350.9,350.9,13.06,21,4,0)
the IBCNF EII IRM mail group.
"^DD",350.9,350.9,13.06,"DT")
3120110
"^DD",350.9,350.9,13.07,0)
MAX NUM OF RECORDS PER MESSAGE^NJ4,0^^13;7^K:+X'=X!(X>9999)!(X<0)!(X?.E1"."1N.N) X
"^DD",350.9,350.9,13.07,3)
Enter maximum number of records per message that can be sent to AITC DMI Queues, when the Extract file message(s) are built.
"^DD",350.9,350.9,13.07,21,0)
^.001^1^1^3120110^^^^
"^DD",350.9,350.9,13.07,21,1,0)
Extract file records are sent via one or more Mailman messages to ATIC DMI Queues.  This field is the maximum number (usually 100) of records  per message.
"^DD",350.9,350.9,13.07,"DT")
3120110
"^DD",350.9,350.9,13.08,0)
EXTRACT FILES^350.9006S^^13.08;0
"^DD",350.9,350.9,13.08,21,0)
^.001^1^1^3120119^^^^
"^DD",350.9,350.9,13.08,21,1,0)
This sub-file contains configuration information for each extracted file type.
"^DD",350.9,350.9006,0)
EXTRACT FILES SUB-FIELD^^.06^6
"^DD",350.9,350.9006,0,"DT")
3120119
"^DD",350.9,350.9006,0,"IX","B",350.9006,.01)

"^DD",350.9,350.9006,0,"NM","EXTRACT FILES")

"^DD",350.9,350.9006,0,"UP")
350.9
"^DD",350.9,350.9006,.01,0)
EXTRACT FILE TYPE^MS^NOINSUR:NOINSUR;ENHNOIN:ENHNOIN;NORXINS:NORXINS;NONVERINS:NONVERINS;^0;1^Q
"^DD",350.9,350.9006,.01,1,0)
^.1
"^DD",350.9,350.9006,.01,1,1,0)
350.9006^B
"^DD",350.9,350.9006,.01,1,1,1)
S ^IBE(350.9,DA(1),13.08,"B",$E(X,1,30),DA)=""
"^DD",350.9,350.9006,.01,1,1,2)
K ^IBE(350.9,DA(1),13.08,"B",$E(X,1,30),DA)
"^DD",350.9,350.9006,.01,3)
Enter the extract file type.
"^DD",350.9,350.9006,.01,21,0)
^.001^19^19^3120124^^^^
"^DD",350.9,350.9006,.01,21,1,0)
Type of Extract file.  
"^DD",350.9,350.9006,.01,21,2,0)
Depending on your site requirements, you may want to define one or more
"^DD",350.9,350.9006,.01,21,3,0)
of the following Extract types:
"^DD",350.9,350.9006,.01,21,4,0)
 
"^DD",350.9,350.9006,.01,21,5,0)
NOINSUR - (HMS No Insurance Data Extract) Pulls patients with no 
"^DD",350.9,350.9006,.01,21,6,0)
insurance info on file.
"^DD",350.9,350.9006,.01,21,7,0)
  
"^DD",350.9,350.9006,.01,21,8,0)
ENHNOIN - (HMS Enhanced No Insurance Data Extract) Pulls patients with 
"^DD",350.9,350.9006,.01,21,9,0)
only Medicare insurance on file and no commercial insurance.
"^DD",350.9,350.9006,.01,21,10,0)
 
"^DD",350.9,350.9006,.01,21,11,0)
NORXINS - (HMS No Prescription Insurance Extract) Pulls patients with 
"^DD",350.9,350.9006,.01,21,12,0)
active insurance that is not "Prescription Only" and identifies 
"^DD",350.9,350.9006,.01,21,13,0)
Prescription Only insurance in the monthly insurance matching process.
"^DD",350.9,350.9006,.01,21,14,0)
 
"^DD",350.9,350.9006,.01,21,15,0)
NONVERINS - (HMS Non-Verified Insurance Data Extract) Pulls patients 
"^DD",350.9,350.9006,.01,21,16,0)
treated within a user-specified date range WITH insurance information and 
"^DD",350.9,350.9006,.01,21,17,0)
where the insurance information has NOT been re-verified in the last six 
"^DD",350.9,350.9006,.01,21,18,0)
months (or other specified period). This file is also known as the
"^DD",350.9,350.9006,.01,21,19,0)
reverification file.
"^DD",350.9,350.9006,.01,"DT")
3120119
"^DD",350.9,350.9006,.02,0)
EXTRACT FILE ACTIVE^S^1:YES;0:NO;^0;2^Q
"^DD",350.9,350.9006,.02,3)
Enable/activate extract file processing?
"^DD",350.9,350.9006,.02,21,0)
^.001^1^1^3120110^^
"^DD",350.9,350.9006,.02,21,1,0)
This is a flag to indicate whether the processing for this file type is enabled/active.
"^DD",350.9,350.9006,.02,"DT")
3111208
"^DD",350.9,350.9006,.03,0)
FILE NAME^F^^0;3^K:$L(X)>30!($L(X)<3) X
"^DD",350.9,350.9006,.03,3)
Enter the name of the Extract file.
"^DD",350.9,350.9006,.03,21,0)
^^2^2^3111208^
"^DD",350.9,350.9006,.03,21,1,0)
Name of the extract file created by HMS Data Extract Utility associated 
"^DD",350.9,350.9006,.03,21,2,0)
with the extract file type.
"^DD",350.9,350.9006,.03,"DT")
3111208
"^DD",350.9,350.9006,.04,0)
AITC DMI QUEUE EMAIL ADDRESS^F^^0;4^K:$L(X)>30!($L(X)<3) X
"^DD",350.9,350.9006,.04,3)
Enter the Email address of the DMI Queue where the extract file message(s) associated with extract file type will be sent.
"^DD",350.9,350.9006,.04,21,0)
^.001^2^2^3120110^^^^
"^DD",350.9,350.9006,.04,21,1,0)
Email address of the DMI Queue where the extract file message(s) associated with
"^DD",350.9,350.9006,.04,21,2,0)
this extract file type will be sent.
"^DD",350.9,350.9006,.04,"DT")
3120110
"^DD",350.9,350.9006,.05,0)
DAY OF MONTH EXTRACT FILE DUE^NJ2,0^^0;5^K:+X'=X!(X>31)!(X<0)!(X?.E1"."1N.N) X
"^DD",350.9,350.9006,.05,3)
Enter the day of month, 0 to 31 when the extract file associated with this extract file type is expected from HMS.  A value of 0 means do not check the due date. 
"^DD",350.9,350.9006,.05,21,0)
^.001^5^5^3120124^^^^
"^DD",350.9,350.9006,.05,21,1,0)
Day of month, 0 to 31 when the extract file associated
"^DD",350.9,350.9006,.05,21,2,0)
with this extract file type is expected from HMS data extractor software, installed at the local site.  A value of 0 means
"^DD",350.9,350.9006,.05,21,3,0)
do not check the due date.
"^DD",350.9,350.9006,.05,21,4,0)
For a day say  31 that does not exist for a given month,  eII software will assume last day of that month. 
"^DD",350.9,350.9006,.05,21,5,0)
This includes last day of February whether it is a leap year or not.
"^DD",350.9,350.9006,.05,"DT")
3111004
"^DD",350.9,350.9006,.06,0)
DAYS BEFORE LATE MESSAGE SENT^NJ1,0^^0;6^K:+X'=X!(X>5)!(X<0)!(X?.E1"."1N.N) X
"^DD",350.9,350.9006,.06,3)
Type a number between 0 and 5, 0 decimal digits.
"^DD",350.9,350.9006,.06,21,0)
^.001^4^4^3120119^^
"^DD",350.9,350.9006,.06,21,1,0)
Number of days after the Extract File Due day of the month, before the
"^DD",350.9,350.9006,.06,21,2,0)
Extract file creation by the HMS Data Extract is considered overdue. If
"^DD",350.9,350.9006,.06,21,3,0)
the Extract File is not created by this time a late message is sent
"^DD",350.9,350.9006,.06,21,4,0)
to IBCNF EII IRM mail group. 
"^DD",350.9,350.9006,.06,"DT")
3120119
"^DD",355.35,355.35,0)
FIELD^^1^4
"^DD",355.35,355.35,0,"DDA")
N
"^DD",355.35,355.35,0,"DT")
3120119
"^DD",355.35,355.35,0,"IX","B",355.35,.01)

"^DD",355.35,355.35,0,"IX","C",355.3503,.01)

"^DD",355.35,355.35,0,"NM","HMS EXTRACT FILE STATUS")

"^DD",355.35,355.35,.01,0)
EXTRACT FILE TYPE^S^NOINSUR:NOINSUR;ENHNOIN:ENHNOIN;NORXINS:NORXINS;NONVERINS:NONVERINS;^0;1^Q
"^DD",355.35,355.35,.01,1,0)
^.1
"^DD",355.35,355.35,.01,1,1,0)
355.35^B
"^DD",355.35,355.35,.01,1,1,1)
S ^IBA(355.35,"B",$E(X,1,30),DA)=""
"^DD",355.35,355.35,.01,1,1,2)
K ^IBA(355.35,"B",$E(X,1,30),DA)
"^DD",355.35,355.35,.01,3)
Enter the extract file type.
"^DD",355.35,355.35,.01,21,0)
^.001^17^17^3120124^^^^
"^DD",355.35,355.35,.01,21,1,0)
Type of Extract file.  Depending on your site requirements, you may want to
"^DD",355.35,355.35,.01,21,2,0)
define one or more of the following Extract types: 
"^DD",355.35,355.35,.01,21,3,0)
 
"^DD",355.35,355.35,.01,21,4,0)
NOINSUR - (HMS No Insurance Data Extract) Pulls patients with no insurance info
"^DD",355.35,355.35,.01,21,5,0)
on file.  
"^DD",355.35,355.35,.01,21,6,0)
  
"^DD",355.35,355.35,.01,21,7,0)
ENHNOIN - (HMS Enhanced No Insurance Data Extract) Pulls patients with only
"^DD",355.35,355.35,.01,21,8,0)
Medicare insurance on file and no commercial insurance.  
"^DD",355.35,355.35,.01,21,9,0)
 
"^DD",355.35,355.35,.01,21,10,0)
NORXINS - (HMS No Prescription Insurance Extract) Pulls patients with active
"^DD",355.35,355.35,.01,21,11,0)
insurance that is not "Prescription Only" and identifies Prescription Only
"^DD",355.35,355.35,.01,21,12,0)
insurance in the monthly insurance matching process.  
"^DD",355.35,355.35,.01,21,13,0)
 
"^DD",355.35,355.35,.01,21,14,0)
NONVERINS - (HMS Non-Verified Insurance Data Extract) Pulls patients treated
"^DD",355.35,355.35,.01,21,15,0)
within a user-specified date range WITH insurance information and where the
"^DD",355.35,355.35,.01,21,16,0)
insurance information has NOT been re-verified in the last six months (or other
"^DD",355.35,355.35,.01,21,17,0)
specified period). This file is also known as the reverification file.  
"^DD",355.35,355.35,.01,"DT")
3120119
"^DD",355.35,355.35,.02,0)
PROCESS DATE/TIME^D^^0;2^S %DT="ESTX" D ^%DT S X=Y K:Y<1 X
"^DD",355.35,355.35,.02,3)
Enter the date/time the extract file was processed.
"^DD",355.35,355.35,.02,21,0)
^.001^4^4^3120124^^^^
"^DD",355.35,355.35,.02,21,1,0)
This is the date/time the eII software first noticed the existence of the
"^DD",355.35,355.35,.02,21,2,0)
extract file for the given file type. After noticing this, the eII software
"^DD",355.35,355.35,.02,21,3,0)
reads the file, wraps it into message(s), and sends it to the associated
"^DD",355.35,355.35,.02,21,4,0)
DMI Queue address.
"^DD",355.35,355.35,.02,"DT")
3120117
"^DD",355.35,355.35,.03,0)
MESSAGES^355.3503P^^1;0
"^DD",355.35,355.35,.03,21,0)
^^2^2^3111202^
"^DD",355.35,355.35,.03,21,1,0)
This sub-file keeps track of the Message(s) sent to AITC 
"^DD",355.35,355.35,.03,21,2,0)
for this Extract file type. 
"^DD",355.35,355.35,1,0)
ACTIVITY LOG^355.3505D^^2;0
"^DD",355.35,355.35,1,21,0)
^.001^3^3^3111202^^^^
"^DD",355.35,355.35,1,21,1,0)
The Activity Log keeps track of the top level fields past history.  It is
"^DD",355.35,355.35,1,21,2,0)
mainly used for trouble shooting. Only 6 months (180 days) worth of data
"^DD",355.35,355.35,1,21,3,0)
is kept in this sub-file in order to keep the file small.
"^DD",355.35,355.3503,0)
MESSAGES SUB-FIELD^^.04^4
"^DD",355.35,355.3503,0,"DT")
3120118
"^DD",355.35,355.3503,0,"IX","B",355.3503,.01)

"^DD",355.35,355.3503,0,"NM","MESSAGES")

"^DD",355.35,355.3503,0,"UP")
355.35
"^DD",355.35,355.3503,.01,0)
MESSAGE ID^MP3.9^XMB(3.9,^0;1^Q
"^DD",355.35,355.3503,.01,1,0)
^.1
"^DD",355.35,355.3503,.01,1,1,0)
355.3503^B
"^DD",355.35,355.3503,.01,1,1,1)
S ^IBA(355.35,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",355.35,355.3503,.01,1,1,2)
K ^IBA(355.35,DA(1),1,"B",$E(X,1,30),DA)
"^DD",355.35,355.3503,.01,1,2,0)
355.35^C
"^DD",355.35,355.3503,.01,1,2,1)
S ^IBA(355.35,"C",$E(X,1,30),DA(1),DA)=""
"^DD",355.35,355.3503,.01,1,2,2)
K ^IBA(355.35,"C",$E(X,1,30),DA(1),DA)
"^DD",355.35,355.3503,.01,1,2,"DT")
3111025
"^DD",355.35,355.3503,.01,3)
Enter message ID.
"^DD",355.35,355.3503,.01,21,0)
^.001^1^1^3120124^^^^
"^DD",355.35,355.3503,.01,21,1,0)
Message ID of the email message that is sent to AITC Queue.
"^DD",355.35,355.3503,.01,"DT")
3120118
"^DD",355.35,355.3503,.02,0)
SEND DATE/TIME^D^^0;2^S %DT="EST" D ^%DT S X=Y K:Y<1 X
"^DD",355.35,355.3503,.02,3)
Enter the date/time that the email message is sent to AITC Queue.
"^DD",355.35,355.3503,.02,21,0)
^.001^1^1^3120106^^
"^DD",355.35,355.3503,.02,21,1,0)
Date/Time that the email message is sent to AITC Queue.
"^DD",355.35,355.3503,.02,"DT")
3111004
"^DD",355.35,355.3503,.03,0)
AUSTIN ID^NJ15,0^^0;3^K:+X'=X!(X>999999999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",355.35,355.3503,.03,3)
Type a number between 0 and 999999999999999, 0 decimal digits.
"^DD",355.35,355.3503,.03,21,0)
^^1^1^3111123^
"^DD",355.35,355.3503,.03,21,1,0)
The Austin ID that is sent back by AITC as part of the confirmation message.
"^DD",355.35,355.3503,.03,"DT")
3111004
"^DD",355.35,355.3503,.04,0)
AITC CONFIRMATION NUMBER^NJ15,0^^0;4^K:+X'=X!(X>999999999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",355.35,355.3503,.04,3)
Type a number between 0 and 999999999999999, 0 decimal digits.
"^DD",355.35,355.3503,.04,21,0)
^.001^1^1^3120106^^
"^DD",355.35,355.3503,.04,21,1,0)
The confirmation number sent back by AITC as part of the confirmation message.
"^DD",355.35,355.3503,.04,"DT")
3111004
"^DD",355.35,355.3505,0)
ACTIVITY LOG SUB-FIELD^^1^2
"^DD",355.35,355.3505,0,"DT")
3120118
"^DD",355.35,355.3505,0,"IX","B",355.3505,.01)

"^DD",355.35,355.3505,0,"NM","ACTIVITY LOG")

"^DD",355.35,355.3505,0,"UP")
355.35
"^DD",355.35,355.3505,.01,0)
PROCESS DATE/TIME^MD^^0;1^S %DT="EST" D ^%DT S X=Y K:Y<1 X
"^DD",355.35,355.3505,.01,1,0)
^.1
"^DD",355.35,355.3505,.01,1,1,0)
355.3505^B
"^DD",355.35,355.3505,.01,1,1,1)
S ^IBA(355.35,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",355.35,355.3505,.01,1,1,2)
K ^IBA(355.35,DA(1),2,"B",$E(X,1,30),DA)
"^DD",355.35,355.3505,.01,3)
Enter the date/time the extract file was processed.
"^DD",355.35,355.3505,.01,21,0)
^.001^4^4^3120124^^^^
"^DD",355.35,355.3505,.01,21,1,0)
This is the date/time the eII software first noticed the existence of the
"^DD",355.35,355.3505,.01,21,2,0)
extract file for the given file type. After noticing this, the eII software
"^DD",355.35,355.3505,.01,21,3,0)
reads the file, wraps it into message(s), and sends it to the associated
"^DD",355.35,355.3505,.01,21,4,0)
DMI Queue address.
"^DD",355.35,355.3505,.01,"DT")
3120117
"^DD",355.35,355.3505,1,0)
MESSAGES^355.35051P^^1;0
"^DD",355.35,355.3505,1,21,0)
^.001^2^2^3120106^^^
"^DD",355.35,355.3505,1,21,1,0)
This sub-file keeps track of the Message(s)
"^DD",355.35,355.3505,1,21,2,0)
sent to AITC for this Extract file type. 
"^DD",355.35,355.3505,1,"DT")
3111027
"^DD",355.35,355.35051,0)
MESSAGES SUB-FIELD^^.04^4
"^DD",355.35,355.35051,0,"DT")
3120118
"^DD",355.35,355.35051,0,"IX","B",355.35051,.01)

"^DD",355.35,355.35051,0,"NM","MESSAGES")

"^DD",355.35,355.35051,0,"UP")
355.3505
"^DD",355.35,355.35051,.01,0)
MESSAGE ID^MP3.9^XMB(3.9,^0;1^Q
"^DD",355.35,355.35051,.01,1,0)
^.1
"^DD",355.35,355.35051,.01,1,1,0)
355.35051^B
"^DD",355.35,355.35051,.01,1,1,1)
S ^IBA(355.35,DA(2),2,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",355.35,355.35051,.01,1,1,2)
K ^IBA(355.35,DA(2),2,DA(1),1,"B",$E(X,1,30),DA)
"^DD",355.35,355.35051,.01,3)
Enter a message ID.
"^DD",355.35,355.35051,.01,21,0)
^.001^2^2^3120124^^^^
"^DD",355.35,355.35051,.01,21,1,0)
Message ID of the email message that was sent to 
"^DD",355.35,355.35051,.01,21,2,0)
AITC Queue. 
"^DD",355.35,355.35051,.01,"DT")
3120118
"^DD",355.35,355.35051,.02,0)
SEND DATE/TIME^D^^0;2^S %DT="ESTR" D ^%DT S X=Y K:Y<1 X
"^DD",355.35,355.35051,.02,3)
Enter the date/time that the email message was sent to AITC Queue.
"^DD",355.35,355.35051,.02,21,0)
^.001^2^2^3120106^^^
"^DD",355.35,355.35051,.02,21,1,0)
Date/Time that the email message was sent to
"^DD",355.35,355.35051,.02,21,2,0)
AITC Queue.
"^DD",355.35,355.35051,.02,"DT")
3111027
"^DD",355.35,355.35051,.03,0)
AUSTIN ID^NJ15,0^^0;3^K:+X'=X!(X>999999999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",355.35,355.35051,.03,3)
Type a number between 0 and 999999999999999, 0 decimal digits.
"^DD",355.35,355.35051,.03,21,0)
^^2^2^3111123^
"^DD",355.35,355.35051,.03,21,1,0)
The Austin ID that was sent back by AITC as part
"^DD",355.35,355.35051,.03,21,2,0)
of the confirmation message. 
"^DD",355.35,355.35051,.03,"DT")
3111027
"^DD",355.35,355.35051,.04,0)
AITC CONFIRMATION NUMBER^NJ15,0^^0;4^K:+X'=X!(X>999999999999999)!(X<0)!(X?.E1"."1N.N) X
"^DD",355.35,355.35051,.04,3)
Type a number between 0 and 999999999999999, 0 decimal digits.
"^DD",355.35,355.35051,.04,21,0)
^.001^2^2^3120106^^^
"^DD",355.35,355.35051,.04,21,1,0)
The confirmation number sent back by AITC as
"^DD",355.35,355.35051,.04,21,2,0)
part of the confirmation message. 
"^DD",355.35,355.35051,.04,"DT")
3111027
"^DD",355.351,355.351,0)
FIELD^^1^5
"^DD",355.351,355.351,0,"DT")
3120118
"^DD",355.351,355.351,0,"IX","B",355.351,.01)

"^DD",355.351,355.351,0,"NM","HMS RESULT FILE STATUS")

"^DD",355.351,355.351,.01,0)
FILE NAME^RF^^0;1^K:$L(X)>30!($L(X)<3)!'(X'?1P.E) X
"^DD",355.351,355.351,.01,1,0)
^.1
"^DD",355.351,355.351,.01,1,1,0)
355.351^B
"^DD",355.351,355.351,.01,1,1,1)
S ^IBA(355.351,"B",$E(X,1,30),DA)=""
"^DD",355.351,355.351,.01,1,1,2)
K ^IBA(355.351,"B",$E(X,1,30),DA)
"^DD",355.351,355.351,.01,3)
Answer must be 3-30 characters in length.
"^DD",355.351,355.351,.01,21,0)
^.001^1^1^3120105^^
"^DD",355.351,355.351,.01,21,1,0)
Name of the result file received from HMS through AITC mail message.
"^DD",355.351,355.351,.01,"DT")
3111003
"^DD",355.351,355.351,.02,0)
CREATION DATE/TIME^D^^0;2^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",355.351,355.351,.02,3)
Enter the date time that the result file was created.
"^DD",355.351,355.351,.02,21,0)
^.001^2^2^3120106^^^^
"^DD",355.351,355.351,.02,21,1,0)
This is the date time that the result file was created
"^DD",355.351,355.351,.02,21,2,0)
from the message received from AITC.
"^DD",355.351,355.351,.02,"DT")
3111003
"^DD",355.351,355.351,.03,0)
MESSAGES^355.35103P^^1;0
"^DD",355.351,355.351,.03,21,0)
^.001^1^1^3120109^^^
"^DD",355.351,355.351,.03,21,1,0)
List of the messages received from AITC DMI Queue that the result file is built from.
"^DD",355.351,355.351,1,0)
ACTIVITY LOG^355.3511D^^2;0
"^DD",355.351,355.351,1,21,0)
^.001^3^3^3120109^^^^
"^DD",355.351,355.351,1,21,1,0)
The Activity Log keeps track of the top level fields' past history.  
"^DD",355.351,355.351,1,21,2,0)
It is mainly used for trouble shooting. Only 6 months (180 days)
"^DD",355.351,355.351,1,21,3,0)
worth of data is kept in this sub-file in order to keep the file small.  
"^DD",355.351,355.35103,0)
MESSAGES SUB-FIELD^^.02^2
"^DD",355.351,355.35103,0,"DT")
3120118
"^DD",355.351,355.35103,0,"IX","B",355.35103,.01)

"^DD",355.351,355.35103,0,"NM","MESSAGES")

"^DD",355.351,355.35103,0,"UP")
355.351
"^DD",355.351,355.35103,.01,0)
MESSAGE ID^P3.9^XMB(3.9,^0;1^Q
"^DD",355.351,355.35103,.01,1,0)
^.1
"^DD",355.351,355.35103,.01,1,1,0)
355.35103^B
"^DD",355.351,355.35103,.01,1,1,1)
S ^IBA(355.351,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",355.351,355.35103,.01,1,1,2)
K ^IBA(355.351,DA(1),1,"B",$E(X,1,30),DA)
"^DD",355.351,355.35103,.01,3)
Enter the message ID.
"^DD",355.351,355.35103,.01,21,0)
^.001^1^1^3120118^^^^
"^DD",355.351,355.35103,.01,21,1,0)
Message ID of the email message that was received from AITC DMI Queue.
"^DD",355.351,355.35103,.01,"DT")
3120118
"^DD",355.351,355.35103,.02,0)
RECEIVED DATE/TIME^D^^0;2^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",355.351,355.35103,.02,3)
Enter the date/time that the email message was received from AITC DMI Queue.
"^DD",355.351,355.35103,.02,21,0)
^.001^1^1^3120109^^^^
"^DD",355.351,355.35103,.02,21,1,0)
Date/Time that the email message was received from AITC DMI Queue.
"^DD",355.351,355.35103,.02,"DT")
3120106
"^DD",355.351,355.3511,0)
ACTIVITY LOG SUB-FIELD^^1^2
"^DD",355.351,355.3511,0,"DT")
3120118
"^DD",355.351,355.3511,0,"IX","B",355.3511,.01)

"^DD",355.351,355.3511,0,"NM","ACTIVITY LOG")

"^DD",355.351,355.3511,0,"UP")
355.351
"^DD",355.351,355.3511,.01,0)
CREATION DATE/TIME^MD^^0;1^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",355.351,355.3511,.01,1,0)
^.1
"^DD",355.351,355.3511,.01,1,1,0)
355.3511^B
"^DD",355.351,355.3511,.01,1,1,1)
S ^IBA(355.351,DA(1),2,"B",$E(X,1,30),DA)=""
"^DD",355.351,355.3511,.01,1,1,2)
K ^IBA(355.351,DA(1),2,"B",$E(X,1,30),DA)
"^DD",355.351,355.3511,.01,3)
Enter the date time that the result file was created.
"^DD",355.351,355.3511,.01,21,0)
^.001^2^2^3120106^^^^
"^DD",355.351,355.3511,.01,21,1,0)
This is the date time that the result file was created from the message
"^DD",355.351,355.3511,.01,21,2,0)
received from AITC.  
"^DD",355.351,355.3511,.01,"DT")
3120105
"^DD",355.351,355.3511,1,0)
MESSAGES^355.35111P^^1;0
"^DD",355.351,355.3511,1,21,0)
^.001^2^2^3120106^^
"^DD",355.351,355.3511,1,21,1,0)
List of the messages received from AITC DMI Queue that the result file is
"^DD",355.351,355.3511,1,21,2,0)
built from.
"^DD",355.351,355.35111,0)
MESSAGES SUB-FIELD^^.02^2
"^DD",355.351,355.35111,0,"DT")
3120118
"^DD",355.351,355.35111,0,"IX","B",355.35111,.01)

"^DD",355.351,355.35111,0,"NM","MESSAGES")

"^DD",355.351,355.35111,0,"UP")
355.3511
"^DD",355.351,355.35111,.01,0)
MESSAGE ID^MP3.9^XMB(3.9,^0;1^Q
"^DD",355.351,355.35111,.01,1,0)
^.1
"^DD",355.351,355.35111,.01,1,1,0)
355.35111^B
"^DD",355.351,355.35111,.01,1,1,1)
S ^IBA(355.351,DA(2),2,DA(1),1,"B",$E(X,1,30),DA)=""
"^DD",355.351,355.35111,.01,1,1,2)
K ^IBA(355.351,DA(2),2,DA(1),1,"B",$E(X,1,30),DA)
"^DD",355.351,355.35111,.01,3)
Enter the message ID.
"^DD",355.351,355.35111,.01,21,0)
^.001^1^1^3120118^^^
"^DD",355.351,355.35111,.01,21,1,0)
Message ID of the email message that was received from AITC DMI Queue.
"^DD",355.351,355.35111,.01,"DT")
3120118
"^DD",355.351,355.35111,.02,0)
RECEIVED DATE/TIME^D^^0;2^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",355.351,355.35111,.02,3)
Enter the date time that the result file was received.
"^DD",355.351,355.35111,.02,21,0)
^.001^2^2^3120109^^^^
"^DD",355.351,355.35111,.02,21,1,0)
This is the date time that the result file was received from the message
"^DD",355.351,355.35111,.02,21,2,0)
received from AITC.  
"^DD",355.351,355.35111,.02,"DT")
3120106
"^DIC",355.35,355.35,0)
HMS EXTRACT FILE STATUS^355.35
"^DIC",355.35,355.35,0,"GL")
^IBA(355.35,
"^DIC",355.35,355.35,"%D",0)
^1.001^5^5^3120106^^^^
"^DIC",355.35,355.35,"%D",1,0)
This file keeps track of when an eII file is extracted (Creation time), 
"^DIC",355.35,355.35,"%D",2,0)
Date/time that the extracted file message was sent, with message ID and Austin ID 
"^DIC",355.35,355.35,"%D",3,0)
and AITC Confirmation Number.
"^DIC",355.35,355.35,"%D",4,0)
In addition, the Activity Log sub-file keeps track of the history of these 
"^DIC",355.35,355.35,"%D",5,0)
file transfers.
"^DIC",355.35,"B","HMS EXTRACT FILE STATUS",355.35)

"^DIC",355.351,355.351,0)
HMS RESULT FILE STATUS^355.351
"^DIC",355.351,355.351,0,"GL")
^IBA(355.351,
"^DIC",355.351,355.351,"%",0)
^1.005^^
"^DIC",355.351,355.351,"%D",0)
^1.001^3^3^3120106^^
"^DIC",355.351,355.351,"%D",1,0)
This file keeps track of date/time that HMS result file messages are
"^DIC",355.351,355.351,"%D",2,0)
received from HMS. In addition the Activity Log sub-file keeps track of the
"^DIC",355.351,355.351,"%D",3,0)
history of the message transfers.  
"^DIC",355.351,"B","HMS RESULT FILE STATUS",355.351)

"BLD",8602,6)
^450
**END**
**END**
