Released RA*5*114 SEQ #103
Extracted from mail message
**KIDS**:RA*5.0*114^

**INSTALL NAME**
RA*5.0*114
"BLD",8541,0)
RA*5.0*114^RADIOLOGY/NUCLEAR MEDICINE^0^3130315^y
"BLD",8541,1,0)
^^3^3^3130315^
"BLD",8541,1,1,0)
Patch one hundred fourteen for the VistA Radiology/Nuclear Medicine 5.0 
"BLD",8541,1,2,0)
application. Please review FORUM's Patch Module description and 
"BLD",8541,1,3,0)
installation instructions for RA*5.0*114 before installing this patch.
"BLD",8541,4,0)
^9.64PA^^
"BLD",8541,6.3)
1
"BLD",8541,"KRN",0)
^9.67PA^779.2^20
"BLD",8541,"KRN",.4,0)
.4
"BLD",8541,"KRN",.401,0)
.401
"BLD",8541,"KRN",.402,0)
.402
"BLD",8541,"KRN",.403,0)
.403
"BLD",8541,"KRN",.5,0)
.5
"BLD",8541,"KRN",.84,0)
.84
"BLD",8541,"KRN",3.6,0)
3.6
"BLD",8541,"KRN",3.8,0)
3.8
"BLD",8541,"KRN",9.2,0)
9.2
"BLD",8541,"KRN",9.8,0)
9.8
"BLD",8541,"KRN",9.8,"NM",0)
^9.68A^3^3
"BLD",8541,"KRN",9.8,"NM",1,0)
RAHLRU1^^0^B70894221
"BLD",8541,"KRN",9.8,"NM",2,0)
RAHLTCPX^^0^B94012646
"BLD",8541,"KRN",9.8,"NM",3,0)
RARPTUT^^0^B110702869
"BLD",8541,"KRN",9.8,"NM","B","RAHLRU1",1)

"BLD",8541,"KRN",9.8,"NM","B","RAHLTCPX",2)

"BLD",8541,"KRN",9.8,"NM","B","RARPTUT",3)

"BLD",8541,"KRN",19,0)
19
"BLD",8541,"KRN",19.1,0)
19.1
"BLD",8541,"KRN",101,0)
101
"BLD",8541,"KRN",409.61,0)
409.61
"BLD",8541,"KRN",771,0)
771
"BLD",8541,"KRN",779.2,0)
779.2
"BLD",8541,"KRN",870,0)
870
"BLD",8541,"KRN",8989.51,0)
8989.51
"BLD",8541,"KRN",8989.52,0)
8989.52
"BLD",8541,"KRN",8994,0)
8994
"BLD",8541,"KRN","B",.4,.4)

"BLD",8541,"KRN","B",.401,.401)

"BLD",8541,"KRN","B",.402,.402)

"BLD",8541,"KRN","B",.403,.403)

"BLD",8541,"KRN","B",.5,.5)

"BLD",8541,"KRN","B",.84,.84)

"BLD",8541,"KRN","B",3.6,3.6)

"BLD",8541,"KRN","B",3.8,3.8)

"BLD",8541,"KRN","B",9.2,9.2)

"BLD",8541,"KRN","B",9.8,9.8)

"BLD",8541,"KRN","B",19,19)

"BLD",8541,"KRN","B",19.1,19.1)

"BLD",8541,"KRN","B",101,101)

"BLD",8541,"KRN","B",409.61,409.61)

"BLD",8541,"KRN","B",771,771)

"BLD",8541,"KRN","B",779.2,779.2)

"BLD",8541,"KRN","B",870,870)

"BLD",8541,"KRN","B",8989.51,8989.51)

"BLD",8541,"KRN","B",8989.52,8989.52)

"BLD",8541,"KRN","B",8994,8994)

"BLD",8541,"QUES",0)
^9.62^^
"BLD",8541,"REQB",0)
^9.611^2^2
"BLD",8541,"REQB",1,0)
RA*5.0*47^1
"BLD",8541,"REQB",2,0)
RA*5.0*106^1
"BLD",8541,"REQB","B","RA*5.0*106",2)

"BLD",8541,"REQB","B","RA*5.0*47",1)

"MBREQ")
0
"PKG",18,-1)
1^1
"PKG",18,0)
RADIOLOGY/NUCLEAR MEDICINE^RA^REGISTERS PATIENTS,RECORDS EXAMS,PROFILES,AMIS REPORTS
"PKG",18,20,0)
^9.402P^^
"PKG",18,22,0)
^9.49I^1^1
"PKG",18,22,1,0)
5.0^3051109^2980407^50
"PKG",18,22,1,"PAH",1,0)
114^3130315
"PKG",18,22,1,"PAH",1,1,0)
^^3^3^3130315
"PKG",18,22,1,"PAH",1,1,1,0)
Patch one hundred fourteen for the VistA Radiology/Nuclear Medicine 5.0 
"PKG",18,22,1,"PAH",1,1,2,0)
application. Please review FORUM's Patch Module description and 
"PKG",18,22,1,"PAH",1,1,3,0)
installation instructions for RA*5.0*114 before installing this patch.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
3
"RTN","RAHLRU1")
0^1^B70894221^B76146976
"RTN","RAHLRU1",1,0)
RAHLRU1 ;HISC/PB,GJC - utilities for HL7 messaging ;1/28/00  11:03
"RTN","RAHLRU1",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**47,114**;Mar 16, 1998;Build 1
"RTN","RAHLRU1",3,0)
 ;
"RTN","RAHLRU1",4,0)
 ;IA 5023: builds the PID ($$PID^MAGDHLS) & PV1 ($$PV1^MAGDHLS) segments
"RTN","RAHLRU1",5,0)
 ;Integration Agreements
"RTN","RAHLRU1",6,0)
 ;----------------------
"RTN","RAHLRU1",7,0)
 ;$$GET1^DIQ(2056); $$HLDATE^HLFNC(10106); M11^HLFNC(10106)
"RTN","RAHLRU1",8,0)
 ;GENERATE^HLMA(2164); $$PID^MAGDHLS(5023); $$PV1^MAGDHLS(5023)
"RTN","RAHLRU1",9,0)
 ;$$DT^XLFDT(10103); $$LOW^XLFSTR(10104)
"RTN","RAHLRU1",10,0)
 ;
"RTN","RAHLRU1",11,0)
 ;IA: 10060 global of file ^VA(200
"RTN","RAHLRU1",12,0)
 ;
"RTN","RAHLRU1",13,0)
PID(RADFN) ;compile the PID segment
"RTN","RAHLRU1",14,0)
 ;$$PID^MAGDHLS(XDFN,XYMSG)
"RTN","RAHLRU1",15,0)
 ; input: XDFN internal entry number of the patient on global ^DPT/^RADPT
"RTN","RAHLRU1",16,0)
 ; XYMSG name of array to which to add message elts
"RTN","RAHLRU1",17,0)
 ; output: @XYMSG input array plus new subtree containing PV1 elts
"RTN","RAHLRU1",18,0)
 ; function return 0 (success) always
"RTN","RAHLRU1",19,0)
 ;
"RTN","RAHLRU1",20,0)
 K RA0X S X=$$PID^MAGDHLS(RADFN,"RA0X")
"RTN","RAHLRU1",21,0)
 D MAG(.RA0X,.RAPID)
"RTN","RAHLRU1",22,0)
 D BLSEG("PID",.RAPID) K RA0X
"RTN","RAHLRU1",23,0)
 Q
"RTN","RAHLRU1",24,0)
 ;
"RTN","RAHLRU1",25,0)
PV1(RADFN) ;compile the PV1 segment determine if the patient is
"RTN","RAHLRU1",26,0)
 ;an inpatient or outpatient by looking at the exam record
"RTN","RAHLRU1",27,0)
 ;$$PV1^MAGDHLS(XDFN,XEVN,XEVNDT,XYMSG)
"RTN","RAHLRU1",28,0)
 ; input: XDFN internal entry number of the patient on global ^DPT/^RADPT
"RTN","RAHLRU1",29,0)
 ; XEVN event type of this message
"RTN","RAHLRU1",30,0)
 ; XEVNDT event date/time (FileMan format)
"RTN","RAHLRU1",31,0)
 ; XYMSG name of array to which to add message elts
"RTN","RAHLRU1",32,0)
 ; output: @XYMSG input array plus new subtree containing PV1 elts
"RTN","RAHLRU1",33,0)
 ; function return 0 (success) always
"RTN","RAHLRU1",34,0)
 K RA0X S X=$$PV1^MAGDHLS(RADFN,"O01",RAZDTE,"RA0X")
"RTN","RAHLRU1",35,0)
 D MAG(.RA0X,.RAPV1)
"RTN","RAHLRU1",36,0)
 K:RAPV1(3)="O"&($G(RAPV1(20))=0) RAPV1(20)
"RTN","RAHLRU1",37,0)
 ;
"RTN","RAHLRU1",38,0)
 ;After call to MAG API add PV1-15: Ambulatory Status of the patient
"RTN","RAHLRU1",39,0)
 ;MODE OF TRANSPORT - file: 75.1, field: 19, node: 0, piece: 19
"RTN","RAHLRU1",40,0)
 ;'a' FOR AMBULATORY; 'p' FOR PORTABLE;
"RTN","RAHLRU1",41,0)
 ;'s' FOR STRETCHER; 'w' FOR WHEEL CHAIR; 
"RTN","RAHLRU1",42,0)
 ;
"RTN","RAHLRU1",43,0)
 ;'a' translates to 'A0', 's' & 'w' translate to 'A2'
"RTN","RAHLRU1",44,0)
 ;
"RTN","RAHLRU1",45,0)
 ;PREGNANT - first check field (70.03,32) if NULL check field (75.1,13)
"RTN","RAHLRU1",46,0)
 ; file: 70.03, field: 32, node: 0, piece: 32
"RTN","RAHLRU1",47,0)
 ; 'y' FOR 'Patient answered yes'
"RTN","RAHLRU1",48,0)
 ; 'n' FOR 'Patient answered no'
"RTN","RAHLRU1",49,0)
 ; 'u' FOR 'Patient is unable to answer or is unsure'
"RTN","RAHLRU1",50,0)
 ; file: 75.1, field: 13, node: 0, piece: 13
"RTN","RAHLRU1",51,0)
 ; 'y' FOR YES; 'n' FOR NO; 'u' FOR UNKNOWN;
"RTN","RAHLRU1",52,0)
 ;
"RTN","RAHLRU1",53,0)
 ;'y' in either field translates to 'B6'
"RTN","RAHLRU1",54,0)
 ;
"RTN","RAHLRU1",55,0)
 ;PV1(15) might repeat; $E(HLECH,2) is the repeat character
"RTN","RAHLRU1",56,0)
 ;PV1(15) represented by RAPV1(16)
"RTN","RAHLRU1",57,0)
 S RAZPREG=$P($G(RAZXAM),U,32) I RAZPREG="" S RAZPREG=$P($G(RAZORD),U,13)
"RTN","RAHLRU1",58,0)
 S RAZMODE=$P($G(RAZORD),U,19)
"RTN","RAHLRU1",59,0)
 S RAPV1(16)=$S(RAZMODE="a":"A0",RAZMODE="s":"A2",RAZMODE="w":"A2",1:"")
"RTN","RAHLRU1",60,0)
 I RAPV1(16)]"",RAZPREG="y" D
"RTN","RAHLRU1",61,0)
 .S RAPV1(16)=RAPV1(16)_$E(HLECH,2)_"B6"
"RTN","RAHLRU1",62,0)
 .Q
"RTN","RAHLRU1",63,0)
 E  I RAPV1(16)="",RAZPREG="y" S RAPV1(16)="B6"
"RTN","RAHLRU1",64,0)
 ;
"RTN","RAHLRU1",65,0)
 D BLSEG("PV1",.RAPV1) K RA0X
"RTN","RAHLRU1",66,0)
 Q
"RTN","RAHLRU1",67,0)
 ;
"RTN","RAHLRU1",68,0)
REPEAT(X,N) ;return a string of HL7 encoding characters; ideal when a field
"RTN","RAHLRU1",69,0)
 ;is comprised of many components
"RTN","RAHLRU1",70,0)
 ;input: X=character repeated; for example, the component delimiter
"RTN","RAHLRU1",71,0)
 ;       N=string length of the character
"RTN","RAHLRU1",72,0)
 ;rturn: S=string in question
"RTN","RAHLRU1",73,0)
 N S S $P(S,X,(N+1))=""
"RTN","RAHLRU1",74,0)
 Q S
"RTN","RAHLRU1",75,0)
 ;
"RTN","RAHLRU1",76,0)
MAG(XX,RAD) ;Build the HL7 segment from the array passed back from the
"RTN","RAHLRU1",77,0)
 ;Imaging IA (#5023). HLCS, HLSCS, & HLREP defined in INIT^RAHLR
"RTN","RAHLRU1",78,0)
 N I,I1,I2,I3,II
"RTN","RAHLRU1",79,0)
 ;I  = HL7 Field #
"RTN","RAHLRU1",80,0)
 ;I1 = Repetition sequence  1,2,3...
"RTN","RAHLRU1",81,0)
 ;I2 = Component
"RTN","RAHLRU1",82,0)
 ;I3 = Subcomponent
"RTN","RAHLRU1",83,0)
 ;HLCS  = Component separator
"RTN","RAHLRU1",84,0)
 ;HLSCS = SubComponent separator.
"RTN","RAHLRU1",85,0)
 ;HLREP = Repetition separator
"RTN","RAHLRU1",86,0)
 S I=0 F  S I=$O(XX(1,I)) Q:'I  S I1=0 K II D
"RTN","RAHLRU1",87,0)
 .F  S I1=$O(XX(1,I,I1)) Q:'$L(I1)  S I2=0 D  S $P(RAD(I+1),HLREP,I1)=$G(II(I1))
"RTN","RAHLRU1",88,0)
 ..F  S I2=$O(XX(1,I,I1,I2)) Q:'$L(I2)  S I3=0 D  S $P(II(I1),HLCS,I2)=$G(II(I1,I2))
"RTN","RAHLRU1",89,0)
 ...F  S I3=$O(XX(1,I,I1,I2,I3)) Q:'I3  S $P(II(I1,I2),HLSCS,I3)=$G(XX(1,I,I1,I2,I3))
"RTN","RAHLRU1",90,0)
 S I=0 F  S I=$O(RAD(I)) Q:'$L(I)  K:'$L(RAD(I)) RAD(I)
"RTN","RAHLRU1",91,0)
 Q
"RTN","RAHLRU1",92,0)
 ;
"RTN","RAHLRU1",93,0)
RTNSUB(A) ;return the current first level subscript for the A array
"RTN","RAHLRU1",94,0)
 ; default is :  HLA array
"RTN","RAHLRU1",95,0)
 ; If array (HLA) is undefined, or only HLA("HLS") defined, return 0
"RTN","RAHLRU1",96,0)
 S:'$L($G(A)) A="HLA(""HLS"","
"RTN","RAHLRU1",97,0)
 S A=A_"$C(32))"
"RTN","RAHLRU1",98,0)
 Q +$O(@A,-1)
"RTN","RAHLRU1",99,0)
 ;
"RTN","RAHLRU1",100,0)
BLSEG(SEG,X,ADR) ;
"RTN","RAHLRU1",101,0)
 ;input: SEG="PV1" or "ORC", etc...
"RTN","RAHLRU1",102,0)
 ;       X=is the HL7 segment specific array subscripted by field #
"RTN","RAHLRU1",103,0)
 ;        Ex: PV1(2) is the PATIENT CLASS
"RTN","RAHLRU1",104,0)
 ;     ADR=ADDRESS where to put output if not defined set to HLA("HLS"
"RTN","RAHLRU1",105,0)
 ;        but may be:   ^TMP("HL7", is the same as root file in Fileman
"RTN","RAHLRU1",106,0)
 N DATA,I,J,JJ,REMAIN,Y,YY,YYSUB,XOLD,SS,A1,A2
"RTN","RAHLRU1",107,0)
 S:'$L($G(ADR)) ADR="HLA(""HLS"","
"RTN","RAHLRU1",108,0)
 S:ADR'["(" ADR=ADR_"("
"RTN","RAHLRU1",109,0)
 S A1=ADR_"Y)"     ; Y = 1st subscript (ie HLA("HLS",Y))
"RTN","RAHLRU1",110,0)
 S A2=ADR_"Y,YY)"  ;YY = 2nd subscript if split (ie HLA("HLS",Y,YY))
"RTN","RAHLRU1",111,0)
 ; if YY > 0, it means the segment has been split
"RTN","RAHLRU1",112,0)
 S Y=$$RTNSUB(ADR)+1,YY=0,JJ=0,SS=$E(HLECH,2)
"RTN","RAHLRU1",113,0)
 S @A1=SEG_HLFS,I=0   ;start with SEG, ie, OBR|
"RTN","RAHLRU1",114,0)
 F  S I=$O(X(I)) Q:'I  D  ;loop thru incoming array, ie, RAOBR(n)
"RTN","RAHLRU1",115,0)
 .I $O(X(I,0)) D  Q       ;two subscripts/repeating field
"RTN","RAHLRU1",116,0)
 ..; This loop is for a second level subscript of the incoming array,
"RTN","RAHLRU1",117,0)
 ..; for example, Assistant Interpreter(s) -> RAOBR(34,1)="FIRST^STAFF",
"RTN","RAHLRU1",118,0)
 ..; RAOBR(34,2)="SECOND^STAFF", RAOBR(34,3)="THIRD^STAFF" etc
"RTN","RAHLRU1",119,0)
 ..S J=0 F  S J=$O(X(I,J)) Q:'J  D
"RTN","RAHLRU1",120,0)
 ...I YY D  Q  ;if already split do this loop
"RTN","RAHLRU1",121,0)
 ....S XOLD=$P($G(@A2),HLFS,I-YYSUB),$P(XOLD,SS,J-JJ)=X(I,J)
"RTN","RAHLRU1",122,0)
 ....S $P(@A2,HLFS,I-YYSUB)=XOLD  ;add segment to output array
"RTN","RAHLRU1",123,0)
 ....D BLSEG2(.YY,.JJ,1)          ;check if over 245, if so, split again
"RTN","RAHLRU1",124,0)
 ...;No split yet
"RTN","RAHLRU1",125,0)
 ...S XOLD=$P($G(@A1),HLFS,I),$P(XOLD,SS,J)=X(I,J)
"RTN","RAHLRU1",126,0)
 ...S $P(@A1,HLFS,I)=XOLD ;add segment to output array
"RTN","RAHLRU1",127,0)
 ...D BLSEG1             ;check if over 245, if so, split for first time
"RTN","RAHLRU1",128,0)
 ..Q
"RTN","RAHLRU1",129,0)
 ..;---------------------------------------------
"RTN","RAHLRU1",130,0)
 .E  D  ;single subscript only, non repeating field
"RTN","RAHLRU1",131,0)
 ..S JJ=0
"RTN","RAHLRU1",132,0)
 ..I YY D  Q  ;if already split do this loop
"RTN","RAHLRU1",133,0)
 ...S $P(@A2,HLFS,I-YYSUB)=X(I)  ;add segment to output array
"RTN","RAHLRU1",134,0)
 ...D BLSEG2(.YY)               ;check if over 245, if so, split again
"RTN","RAHLRU1",135,0)
 ...Q
"RTN","RAHLRU1",136,0)
 ..;No split yet
"RTN","RAHLRU1",137,0)
 ..S $P(@A1,HLFS,I)=X(I)  ;add segment to output array
"RTN","RAHLRU1",138,0)
 ..D BLSEG1               ;check if over 245, if so, split for first time
"RTN","RAHLRU1",139,0)
 .Q
"RTN","RAHLRU1",140,0)
 Q
"RTN","RAHLRU1",141,0)
BLSEG1 ;Split for first time
"RTN","RAHLRU1",142,0)
 Q:$L(@A1)<246  ;over 245 chars, split the string first time
"RTN","RAHLRU1",143,0)
 S REMAIN=$E(@A1,246,$L(@A1))
"RTN","RAHLRU1",144,0)
 S YY=1,@A2=$E(@A1,$L(SEG_HLFS)+1,245)  ;YY/subscript = 1 for first split
"RTN","RAHLRU1",145,0)
 S YYSUB=$L(@A2,HLFS)        ;YYSUB=number of "|" pieces
"RTN","RAHLRU1",146,0)
 S @A1=SEG_HLFS              ;top level is segment only, ie "OBR|"
"RTN","RAHLRU1",147,0)
 S YY=2,@A2=REMAIN,JJ=1      ;YY/subscript = 2 for second half of split
"RTN","RAHLRU1",148,0)
 Q
"RTN","RAHLRU1",149,0)
BLSEG2(YY,JJ,K) ;Split any subsequent times
"RTN","RAHLRU1",150,0)
 Q:$L(@A2)<246  ;over 245 chars, split the string again...
"RTN","RAHLRU1",151,0)
 S REMAIN=$E(@A2,246,$L(@A2))
"RTN","RAHLRU1",152,0)
 S @A2=$E(@A2,1,245)
"RTN","RAHLRU1",153,0)
 S YYSUB=YYSUB+$L(@A2,HLFS)-1 ;YYSUB=# of "|" pieces counter
"RTN","RAHLRU1",154,0)
 S YY=YY+1                    ;YY/subscript incremented with each split
"RTN","RAHLRU1",155,0)
 S:$G(K) JJ=J-$L(REMAIN,SS)   ;K,JJ for repeating field/double subscript
"RTN","RAHLRU1",156,0)
 S @A2=REMAIN
"RTN","RAHLRU1",157,0)
 Q
"RTN","RAHLRU1",158,0)
 ;
"RTN","RAHLRU1",159,0)
PARSEG(ARR,PAR) ;Parse segment from ARR array to PAR array
"RTN","RAHLRU1",160,0)
 ;data passed in ARR(1) and ARR(1,n) if overflow. 
"RTN","RAHLRU1",161,0)
 Q:'$D(HLFS)
"RTN","RAHLRU1",162,0)
 N SS,I,II,D,FLDN,FLDN1,JJ,D1 S II=0,J=0,D=""
"RTN","RAHLRU1",163,0)
 S SS=$E($G(HLECH),2) Q:'$L(SS)
"RTN","RAHLRU1",164,0)
 S DATA=$G(ARR(1))
"RTN","RAHLRU1",165,0)
 I $L(DATA) D
"RTN","RAHLRU1",166,0)
 .D PARPROC(DATA) S I=0
"RTN","RAHLRU1",167,0)
 .F  S I=$O(ARR(1,I)) Q:'I  D PARPROC(ARR(1,I))
"RTN","RAHLRU1",168,0)
 .Q
"RTN","RAHLRU1",169,0)
 Q
"RTN","RAHLRU1",170,0)
 ;
"RTN","RAHLRU1",171,0)
PARPROC(DATA) ;process data...
"RTN","RAHLRU1",172,0)
 S FLDN=$L(DATA,HLFS) ;number of fields on this node
"RTN","RAHLRU1",173,0)
 F II=1:1:FLDN D
"RTN","RAHLRU1",174,0)
 .S D=$S(II=1:D,1:"")_$P(DATA,HLFS,II)
"RTN","RAHLRU1",175,0)
 .D GETPP(.D)
"RTN","RAHLRU1",176,0)
 S J=J+FLDN-1
"RTN","RAHLRU1",177,0)
 Q
"RTN","RAHLRU1",178,0)
 ;
"RTN","RAHLRU1",179,0)
GETPP(D) ;get repeated fields...
"RTN","RAHLRU1",180,0)
 Q:'$L(D)
"RTN","RAHLRU1",181,0)
 I D'[SS S PAR(J+II)=D K D1 Q
"RTN","RAHLRU1",182,0)
 S FLDN1=$L(D,SS) F JJ=1:1:FLDN1 D
"RTN","RAHLRU1",183,0)
 .S D1=$P(D,SS,JJ) S:$L(D1) PAR(J+II,JJ)=D1
"RTN","RAHLRU1",184,0)
 Q
"RTN","RAHLRU1",185,0)
 ;
"RTN","RAHLRU1",186,0)
VFIER(X1,X2,X3) ; validation of OBR-32 , OBR-33  or OBR-35
"RTN","RAHLRU1",187,0)
 ; X1 = value to be Validated/Returned (IEN)
"RTN","RAHLRU1",188,0)
 ; Note: X1 is passed in as: ID Number (IEN)^Family Name^Given Name
"RTN","RAHLRU1",189,0)
 ;       (in this example "^" is the subcomponent separator) 
"RTN","RAHLRU1",190,0)
 ; X2 = Status ('C'orrected, 'F'inal, or 'R'esults filed, not verified)
"RTN","RAHLRU1",191,0)
 ; X3 = text 'OBR-32' or 'OBR-33' or 'OBR-33x' or 'OBR 35'
"RTN","RAHLRU1",192,0)
 ; Return value:    1 = Validation OK
"RTN","RAHLRU1",193,0)
 ;                  0^Error message to be returned to sender
"RTN","RAHLRU1",194,0)
 N C,DIERR,RARRAY,RAERROR,RALBL
"RTN","RAHLRU1",195,0)
 S RALBL=$S(X3="OBR-32":"staff","OBR-33":"resident",1:"transcriptionist")
"RTN","RAHLRU1",196,0)
 ;Note +X1 (we want only the IEN) 
"RTN","RAHLRU1",197,0)
 D FIND^DIC(200,"",.01,"A",+X1,"","","","","RARRAY","RAERROR")
"RTN","RAHLRU1",198,0)
 ;if $D(RAERROR("DIERR")) the input value is invalid (control character)
"RTN","RAHLRU1",199,0)
 I $D(RAERROR("DIERR"))#2 Q "0^Invalid "_RALBL_" name"
"RTN","RAHLRU1",200,0)
 ;how many hits? = 0 lookup failed...
"RTN","RAHLRU1",201,0)
 I $P($G(RARRAY("DILIST",0)),U)=0  Q "0^Lookup failed; no "_RALBL_" name found"
"RTN","RAHLRU1",202,0)
 ;how many hits? = 1 just right...
"RTN","RAHLRU1",203,0)
 Q 1
"RTN","RAHLRU1",204,0)
 ;
"RTN","RAHLRU1",205,0)
INDT(X1) ;check if MD has inactivation date.
"RTN","RAHLRU1",206,0)
 N RAINDT
"RTN","RAHLRU1",207,0)
 S RAINDT=$$GET1^DIQ(200,+X1,73,"I") I $G(RAINDT),RAINDT'>$$DT^XLFDT S RAERR="Physician is INACTIVE" Q "1^"_RAERR
"RTN","RAHLRU1",208,0)
 Q 0
"RTN","RAHLRU1",209,0)
 ;
"RTN","RAHLRU1",210,0)
SR(X1) ;'S'taff  or 'R'esident and inactive DATE
"RTN","RAHLRU1",211,0)
 ;input: ID Number (aka IEN)
"RTN","RAHLRU1",212,0)
 ;return: RASTRE: classification (staff, resident, clerk)
"RTN","RAHLRU1",213,0)
 ;              : -1 w/error code if error
"RTN","RAHLRU1",214,0)
 I +X1=0 S RASTRE="-1^"_"Missing or invalid IEN" Q
"RTN","RAHLRU1",215,0)
 N DIERR,RARRAY,RAERROR,X,Y S X1=+X1_","
"RTN","RAHLRU1",216,0)
 D GETS^DIQ(200,X1,"72*:73","I","RARRAY","RAERROR")
"RTN","RAHLRU1",217,0)
 ;if error return error message...
"RTN","RAHLRU1",218,0)
 I $D(RAERROR("DIERR"))#2 S RASTRE="-1^"_"The entry does not exist" Q
"RTN","RAHLRU1",219,0)
 ;we know the function finds a record.
"RTN","RAHLRU1",220,0)
 ;first check: has the individual been inactivated?
"RTN","RAHLRU1",221,0)
 S Y=$G(^RARRAY(200,X1,73,"I")) I Y Q:Y'>DT "-1^user inactivated"
"RTN","RAHLRU1",222,0)
 ;what's the classification of the user?
"RTN","RAHLRU1",223,0)
 S X="",RASTRE=U
"RTN","RAHLRU1",224,0)
 F  S X=$O(RARRAY(200.072,X)) Q:X=""  S RASTRE=RASTRE_$G(RARRAY(200.072,X,.01,"I"))_U
"RTN","RAHLRU1",225,0)
 Q
"RTN","RAHLRU1",226,0)
 ;
"RTN","RAHLRU1",227,0)
SPECSRC(RAOIFN) ;Specimen Source OBR-15
"RTN","RAHLRU1",228,0)
 ;Input: the IEN of the order record from the RAD/NUC MED ORDERS (#75.1)
"RTN","RAHLRU1",229,0)
 ;return: Specimen Source string (PROCEDURE MODIFIERS (left & right only))
"RTN","RAHLRU1",230,0)
 N RASPSRC S RASS=0
"RTN","RAHLRU1",231,0)
 F  S RASS=$O(^RAO(75.1,RAOIFN,"M",RASS)) Q:'RASS  D
"RTN","RAHLRU1",232,0)
 .S RAZPMOD=+$G(^RAO(75.1,RAOIFN,"M",RASS,0)) ;RAZPMOD=ptr to file 71.2
"RTN","RAHLRU1",233,0)
 .;convert the procedure modifier to lower case
"RTN","RAHLRU1",234,0)
 .S RASPSRC(0)=$$LOW^XLFSTR($P($G(^RAMIS(71.2,RAZPMOD,0)),U))
"RTN","RAHLRU1",235,0)
 .S:RASPSRC(0)="left"!(RASPSRC(0)="right") RASPSRC=$G(RASPSRC)_RASPSRC(0)_" "
"RTN","RAHLRU1",236,0)
 .Q
"RTN","RAHLRU1",237,0)
 I $L($G(RASPSRC)) S RASPSRC=$E(RASPSRC,1,($L(RASPSRC)-1))
"RTN","RAHLRU1",238,0)
 K RASS,RAZPMOD
"RTN","RAHLRU1",239,0)
 Q $G(RASPSRC)
"RTN","RAHLRU1",240,0)
 ;
"RTN","RAHLRU1",241,0)
SETUP ; Setup basic examination information
"RTN","RAHLRU1",242,0)
 S:RASET RACN0=$G(^RADPT(RADFN,"DT",RADTI,"P",RACNI,0))
"RTN","RAHLRU1",243,0)
 S RADTE0=9999999.9999-RADTI,RADTECN=$E(RADTE0,4,7)_$E(RADTE0,2,3)_"-"_+RACN0,RARPT0=^RARPT(RARPT,0)
"RTN","RAHLRU1",244,0)
 S RAPROC=+$P(RACN0,U,2),RAPROCIT=+$P($G(^RAMIS(71,RAPROC,0)),U,12),RAPROCIT=$P(^RA(79.2,RAPROCIT,0),U,1)
"RTN","RAHLRU1",245,0)
 S RAPRCNDE=$G(^RAMIS(71,+RAPROC,0)),RACPT=+$P(RAPRCNDE,U,9)
"RTN","RAHLRU1",246,0)
 S RACPTNDE=$$NAMCODE^RACPTMSC(RACPT,DT)
"RTN","RAHLRU1",247,0)
 S Y=$$HLDATE^HLFNC(RADTE0) S RADTE0=$S(Y:Y,1:HLQ),Y=$$M11^HLFNC(RADFN)
"RTN","RAHLRU1",248,0)
 Q
"RTN","RAHLRU1",249,0)
 ;
"RTN","RAHLRU1",250,0)
USESSAN() ; Return the value of the parameter used as the switch
"RTN","RAHLRU1",251,0)
 ; to turn on use of the Site Specific Accession Numbers
"RTN","RAHLRU1",252,0)
 N RADIVIEN S RADIVIEN="" S RADIVIEN=$O(^RA(79,0)) I RADIVIEN="" Q 0
"RTN","RAHLRU1",253,0)
 I $P($G(^RA(79,RADIVIEN,.1)),"^",31)="Y" Q 1
"RTN","RAHLRU1",254,0)
 Q 0
"RTN","RAHLRU1",255,0)
 ;
"RTN","RAHLRU1",256,0)
SSANVAL(RADFN,RADTI,RACNI) ; Return the value of the Site Specific Acc Number
"RTN","RAHLRU1",257,0)
 Q $P($G(^RADPT(RADFN,"DT",RADTI,"P",RACNI,0)),"^",31)
"RTN","RAHLRU1",258,0)
 ;
"RTN","RAHLRU1",259,0)
DATEPRT(RADTE) ; Return the printable format of the internal date value
"RTN","RAHLRU1",260,0)
 Q $E(RADTE,4,5)_"/"_$E(RADTE,6,7)_"/"_$E(RADTE,2,3)
"RTN","RAHLTCPX")
0^2^B94012646^B93748547
"RTN","RAHLTCPX",1,0)
RAHLTCPX ;HIRMFO/RTK,RVD,GJC - Rad/Nuc Med HL7 TCP/IP Bridge;02/11/08 ; 22 Feb 2013  12:30 PM
"RTN","RAHLTCPX",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**47,114**;Mar 16, 1998;Build 1
"RTN","RAHLTCPX",3,0)
 ;
"RTN","RAHLTCPX",4,0)
 ; this is a modified copy of RAHLTCPB for HL7 v2.4
"RTN","RAHLTCPX",5,0)
 ;
"RTN","RAHLTCPX",6,0)
 ;Integration Agreements
"RTN","RAHLTCPX",7,0)
 ;----------------------
"RTN","RAHLTCPX",8,0)
 ;GENACK^HLMA1(2165); DT^XLFDT(10103) ^DPT("SSN" (10035)
"RTN","RAHLTCPX",9,0)
 ;
"RTN","RAHLTCPX",10,0)
EN1 ; Main entry point; Build the ^TMP("RARPT-REC" global
"RTN","RAHLTCPX",11,0)
 ;
"RTN","RAHLTCPX",12,0)
 N ARR,HLCS,HLDTM,HLFS,HLSCS,MSA1,PAR,RAI,RAX,RAY,RAXX,RAEXIT,RARCNT
"RTN","RAHLTCPX",13,0)
 N RASEG,RASUB,RAHLTCPB,RANODE,RAVERF,RAESIG,RAERR,RANOSEND
"RTN","RAHLTCPX",14,0)
 N RARRR,RACNPPP,RACKYES,RAPRSET,RAT35,RASTRE,RARE33
"RTN","RAHLTCPX",15,0)
 D INIT,PROCESS,XIT
"RTN","RAHLTCPX",16,0)
 Q
"RTN","RAHLTCPX",17,0)
 ;
"RTN","RAHLTCPX",18,0)
INIT ; -- initialize
"RTN","RAHLTCPX",19,0)
 ;
"RTN","RAHLTCPX",20,0)
 S RASUB=HL("MID"),RAHLTCPB=1,RACNPPP=0,RARRR="",RACKYES=0 K RAERR
"RTN","RAHLTCPX",21,0)
 K ^TMP("RARPT-REC",$J,RASUB) ; kill storage area for new HL7 message id
"RTN","RAHLTCPX",22,0)
 S ^TMP("RARPT-REC",$J,RASUB,"RADATE")=$$DT^XLFDT()
"RTN","RAHLTCPX",23,0)
 S ^TMP("RARPT-REC",$J,RASUB,"VENDOR")=$G(HL("SAN"))
"RTN","RAHLTCPX",24,0)
 S:$D(HL("ESIG")) ^TMP("RARPT-REC",$J,RASUB,"RAESIG")=HL("ESIG") ;Save off E-Sig information (if it exists)
"RTN","RAHLTCPX",25,0)
 S:'$$GETSFLAG^RAHLRU($G(HL("SAN")),$G(HL("MTN")),$G(HL("ETN")),$G(HL("VER"))) RANOSEND=$G(HL("SAN"))
"RTN","RAHLTCPX",26,0)
 ;
"RTN","RAHLTCPX",27,0)
 S HLDTM=HL("DTM")
"RTN","RAHLTCPX",28,0)
 S HLFS=HL("FS")
"RTN","RAHLTCPX",29,0)
 S HLCS=$E(HL("ECH"))
"RTN","RAHLTCPX",30,0)
 S HLSCS=$E(HL("ECH"),4)
"RTN","RAHLTCPX",31,0)
 S HLREP=$E(HL("ECH"),2)
"RTN","RAHLTCPX",32,0)
 S HLECH=HL("ECH")
"RTN","RAHLTCPX",33,0)
 Q
"RTN","RAHLTCPX",34,0)
 ;
"RTN","RAHLTCPX",35,0)
PROCESS ; -- pull message text
"RTN","RAHLTCPX",36,0)
 ;
"RTN","RAHLTCPX",37,0)
 F  X HLNEXT Q:HLQUIT'>0!$G(RAEXIT)  D
"RTN","RAHLTCPX",38,0)
 .I '$L(HLNODE),$L($G(HLNODE(1))) S HLNODE=HLNODE(1) K HLNODE(1) F J=2:1 Q:'$D(HLNODE(J))  S HLNODE(J-1)=HLNODE(J) K HLNODE(J)
"RTN","RAHLTCPX",39,0)
 .Q:$P(HLNODE,HLFS)=""
"RTN","RAHLTCPX",40,0)
 .Q:"^MSH^PID^PV1^OBR^OBX^ORC^"'[(U_$P(HLNODE,HLFS)_U)
"RTN","RAHLTCPX",41,0)
 .K ARR,PAR M ARR(1)=HLNODE D PARSEG^RAHLRU1(.ARR,.PAR)
"RTN","RAHLTCPX",42,0)
 .D @($P(HLNODE,HLFS))
"RTN","RAHLTCPX",43,0)
 Q:$G(RAEXIT)
"RTN","RAHLTCPX",44,0)
 I '$D(RASEG("PID")) S RAERR="Missing PID Segment" Q
"RTN","RAHLTCPX",45,0)
 I '$D(RASEG("OBR")) S RAERR="Missing OBR Segment" Q
"RTN","RAHLTCPX",46,0)
 I '$D(RASEG("OBX")) S RAERR="Missing OBX Segment" Q
"RTN","RAHLTCPX",47,0)
 Q
"RTN","RAHLTCPX",48,0)
 ;
"RTN","RAHLTCPX",49,0)
MSH ;
"RTN","RAHLTCPX",50,0)
 Q
"RTN","RAHLTCPX",51,0)
PID ; Pick data off the 'PID' segment.
"RTN","RAHLTCPX",52,0)
 ;Req: PID-2(Station number concatenated with dash and DFN ex: 587-1234),
"RTN","RAHLTCPX",53,0)
 ;     PID-3(SSN), PID-4(National ICN), PID-5(Patient Name), PID-19(SSN)
"RTN","RAHLTCPX",54,0)
 ;Opt: PID-7(Date of Birth), PID-8(Sex), PID-10(Race), PID-11(Address),
"RTN","RAHLTCPX",55,0)
 ;     PID-13(Phone-Home), PID-14(Phone-Bus), PID-22(Ethnic Group)
"RTN","RAHLTCPX",56,0)
 ;
"RTN","RAHLTCPX",57,0)
 ;As a result of PID-2, PID-3, PID-4 discussions/emails with Imaging and
"RTN","RAHLTCPX",58,0)
 ; Identity Management (IDM), the above description is what will be sent
"RTN","RAHLTCPX",59,0)
 ; in fields PID-2 thru PID-4.  For parsing incoming ORU messages from
"RTN","RAHLTCPX",60,0)
 ; voice recognition systems, this code will first look for the SSN in
"RTN","RAHLTCPX",61,0)
 ; PID-3.  If that is null or not a valid SSN, the code will next look
"RTN","RAHLTCPX",62,0)
 ; for the Station Number-DFN in PID-2.  If that is null or does not
"RTN","RAHLTCPX",63,0)
 ; contain a valid DFN, the message will be rejected with an "Invalid
"RTN","RAHLTCPX",64,0)
 ; Patient Identifier" reject message.
"RTN","RAHLTCPX",65,0)
 ;
"RTN","RAHLTCPX",66,0)
 ; get SSN from PID-3/PAR(4) if unsuccessful get DFN from PID-2/PAR(3)
"RTN","RAHLTCPX",67,0)
 S RADFN="" S RASSNVAL=$P($G(PAR(4)),U,1) I RASSNVAL'="" S RADFN=$O(^DPT("SSN",RASSNVAL,""))
"RTN","RAHLTCPX",68,0)
 I RADFN="" S RADFN=$P($P($G(PAR(3)),U,1),"-",2)  ;strip station number and get DFN
"RTN","RAHLTCPX",69,0)
 I $G(RADFN)="" S RAERR="Invalid patient identifier",RAEXIT=1 Q
"RTN","RAHLTCPX",70,0)
 I $G(RADFN)'="" S ^TMP("RARPT-REC",$J,RASUB,"RADFN")=RADFN
"RTN","RAHLTCPX",71,0)
 ;
"RTN","RAHLTCPX",72,0)
 ; get SSN from PID-19/PAR(20)
"RTN","RAHLTCPX",73,0)
 I $G(PAR(20)) S RASSN=PAR(20),^TMP("RARPT-REC",$J,RASUB,"RASSN")=RASSN
"RTN","RAHLTCPX",74,0)
 S RASEG("PID")=""
"RTN","RAHLTCPX",75,0)
 ;.I $P(PAR(5),U,5)="NI" D  Q   ;check for valid ICN
"RTN","RAHLTCPX",76,0)
 ;..S RAICNVAL=$P($P(PAR(5),U,1),"V",1),RADFN=$$GETDFN^MPIF001(RAICNVAL)
"RTN","RAHLTCPX",77,0)
 ;..I $G(RADFN)<0 S RAERR="Invalid patient ICN",RAEXIT=1,RADFN="" Q
"RTN","RAHLTCPX",78,0)
 Q
"RTN","RAHLTCPX",79,0)
PV1 ;Ignored at this time.
"RTN","RAHLTCPX",80,0)
 Q
"RTN","RAHLTCPX",81,0)
ORC ; Pick data off the 'ORC' segment
"RTN","RAHLTCPX",82,0)
 ;Opt: ORC -1   
"RTN","RAHLTCPX",83,0)
 ;     = CN The combined result code provides a mechanism to transmit
"RTN","RAHLTCPX",84,0)
 ;       results that are associated with two or more orders. 
"RTN","RAHLTCPX",85,0)
 ;       This situation occurs commonly in reports when the radiologist
"RTN","RAHLTCPX",86,0)
 ;       dictates a single report for two or more exams.
"RTN","RAHLTCPX",87,0)
 ;   = RE Observations to follow is used to transmit patient-specific information with an order.
"RTN","RAHLTCPX",88,0)
 ;        An order detail segment (e.g., OBR) can be followed by one or more observation RASEGments (OBX).
"RTN","RAHLTCPX",89,0)
 ;        Any observation that can be transmitted in an ORU message can be transmitted with this mechanism.
"RTN","RAHLTCPX",90,0)
 ;        When results are transmitted with an order, the results should immediately follow the order or orders that they support.
"RTN","RAHLTCPX",91,0)
 S RARRR="",RASEG("ORC")=PAR(2)
"RTN","RAHLTCPX",92,0)
 S:PAR(2)="CN" RACNPPP=RACNPPP+1,RARRR="RARPT-REC-"_RACNPPP
"RTN","RAHLTCPX",93,0)
 Q
"RTN","RAHLTCPX",94,0)
OBR ; Pick data off the 'OBR' segment.
"RTN","RAHLTCPX",95,0)
 ;Req: OBR-1(set ID), OBR-2(Placer Order #), OBR-3(Filler Order #), OBR-4(Uni. Service ID)
"RTN","RAHLTCPX",96,0)
 ;     OBR-7(Observ. Date/time), OBR-16(Ord. Provider), OBR-18(Placer Fld 1)
"RTN","RAHLTCPX",97,0)
 ;     OBR-19(Placer Fld 2), OBR-20(Filler Fld 1), OBR-21(Filler Fld 2)
"RTN","RAHLTCPX",98,0)
 ;     OBR-22(Rslts Rpt/Stat Chng D/T), OBR-25(Rslts Status)
"RTN","RAHLTCPX",99,0)
 ;Opt: OBR-15(Specimen Source), OBR-17(Ord. Callback Phone #), OBR-29(Parent)
"RTN","RAHLTCPX",100,0)
 ;     OBR-32(Prin. Rslt Interpreter), OBR-33(Asst. Rslt Interpreter), OBR-35(Transcriptionist) 
"RTN","RAHLTCPX",101,0)
 S RASEG("OBR")=""
"RTN","RAHLTCPX",102,0)
 I $L(RARRR) K ^TMP(RARRR,$J)  M ^TMP(RARRR,$J)=^TMP("RARPT-REC",$J) ;Merge if OBR without Report
"RTN","RAHLTCPX",103,0)
 S:'$L(RARRR) RARRR="RARPT-REC"
"RTN","RAHLTCPX",104,0)
 N RAX,RAX1,RAX2,RAI,RARR,RAVERF,RARSDNT,RATRANSC,ARR
"RTN","RAHLTCPX",105,0)
 ;OBR-3/PAR(4) for v2.4: site specific accession # (SSS-DDDDDD-CCCCC)
"RTN","RAHLTCPX",106,0)
 ;Note: if SSAN parameter switch is off format is old # (DDDDDD-CCCCC)
"RTN","RAHLTCPX",107,0)
 D:$L(PAR(4))
"RTN","RAHLTCPX",108,0)
 .S RALONGCN=$P(PAR(4),HLCS),^TMP(RARRR,$J,RASUB,"RALONGCN")=RALONGCN
"RTN","RAHLTCPX",109,0)
 .I RALONGCN="" Q
"RTN","RAHLTCPX",110,0)
 .I $L(RALONGCN,"-")=2 D  ;if old format get data from "ADC" x-ref
"RTN","RAHLTCPX",111,0)
 ..S RADTI=$O(^RADPT("ADC",RALONGCN,RADFN,"")) Q:RADTI=""
"RTN","RAHLTCPX",112,0)
 ..S RACNI=$O(^RADPT("ADC",RALONGCN,RADFN,RADTI,"")) Q:RACNI=""
"RTN","RAHLTCPX",113,0)
 .I $L(RALONGCN,"-")=3 D  ;if new format get data from "ADC1" x-ref
"RTN","RAHLTCPX",114,0)
 ..S RADTI=$O(^RADPT("ADC1",RALONGCN,RADFN,"")) Q:RADTI=""
"RTN","RAHLTCPX",115,0)
 ..S RACNI=$O(^RADPT("ADC1",RALONGCN,RADFN,RADTI,"")) Q:RACNI=""
"RTN","RAHLTCPX",116,0)
 .Q:RADTI=""
"RTN","RAHLTCPX",117,0)
 .Q:RACNI=""
"RTN","RAHLTCPX",118,0)
 .S ^TMP(RARRR,$J,RASUB,"RADTI")=RADTI
"RTN","RAHLTCPX",119,0)
 .S ^TMP(RARRR,$J,RASUB,"RACNI")=RACNI
"RTN","RAHLTCPX",120,0)
 I $G(RADTI)'>0 S RAERR="Invalid exam registration timestamp" D XIT Q
"RTN","RAHLTCPX",121,0)
 I $G(RACNI)'>0 S RAERR="Invalid exam record IEN" D XIT Q
"RTN","RAHLTCPX",122,0)
 ;OBR-25/PAR(26) STATUS: 'C'orrected, 'F'inal, or 'R'esults filed, not verified & 'VAQ' NTP releases the study back to the VA
"RTN","RAHLTCPX",123,0)
 I '$L(PAR(26)) S RAERR="Missing Report Status",RAEXIT=1 Q 
"RTN","RAHLTCPX",124,0)
 I "^C^F^R^VAQ^"'[("^"_PAR(26)_"^") S RAERR="Invalid Report Status: "_PAR(26),RAEXIT=1 Q
"RTN","RAHLTCPX",125,0)
 S ^TMP(RARRR,$J,RASUB,"RASTAT")=PAR(26)
"RTN","RAHLTCPX",126,0)
 G:$P(RARRR,"-",3) 112
"RTN","RAHLTCPX",127,0)
 ;OBR-32 PAR(33) Principal Result Interpreter
"RTN","RAHLTCPX",128,0)
 S RAVERF=+$G(PAR(33)),RAST32=$$VFIER^RAHLRU1(.RAVERF,PAR(26),"OBR-32") I 'RAST32 S RAERR=$P(RAST32,"^",2),RAEXIT=1 Q
"RTN","RAHLTCPX",129,0)
 I '$D(^XUSEC("RA VERIFY",RAVERF)) S RAERR="PHYSICIAN has no RA VERIFY key",RAEXIT=1 Q
"RTN","RAHLTCPX",130,0)
 D SR^RAHLRU1(RAVERF)
"RTN","RAHLTCPX",131,0)
 I +RASTRE=-1 S RAERR=$P(RASTRE,U,2),RAEXIT=1 Q
"RTN","RAHLTCPX",132,0)
 I RASTRE'["^S^" S RAERR="PHYSICIAN must have a STAFF classification" S RAEXIT=1 Q
"RTN","RAHLTCPX",133,0)
 S ^TMP(RARRR,$J,RASUB,"RAVERF")=RAVERF
"RTN","RAHLTCPX",134,0)
 S ^TMP(RARRR,$J,RASUB,"RASTAFF",1)=RAVERF,^("RAWHOCHANGE")=RAVERF ;ID #^family^given
"RTN","RAHLTCPX",135,0)
 ;OBR-33 First Interpreter of Resident type will be the Primary Interpreting staff
"RTN","RAHLTCPX",136,0)
 D:$L($G(PAR(34)))
"RTN","RAHLTCPX",137,0)
 .;build an array of good assistants (active & the proper classification)
"RTN","RAHLTCPX",138,0)
 .S RARR=0 F I=1:1:10 S RARE33=$P(PAR(34),HLREP,I) D:$L(RARE33)
"RTN","RAHLTCPX",139,0)
 ..D SR^RAHLRU1(+RARE33) Q:+RASTRE=-1
"RTN","RAHLTCPX",140,0)
 ..I RASTRE'["^S^",RASTRE'["^R^" Q  ;must be a staff or res.
"RTN","RAHLTCPX",141,0)
 ..;find the first resident...
"RTN","RAHLTCPX",142,0)
 ..I RASTRE["^R^",('($D(RARSDNT)#2)) S (RARSDNT,^TMP(RARRR,$J,RASUB,"RARESIDENT"))=+RARE33 Q
"RTN","RAHLTCPX",143,0)
 ..I RASTRE["^R^" S ^TMP(RARRR,$J,RASUB,"RARESIDENT",I)=+RARE33 Q  ; To be stored in 70.03 field 70
"RTN","RAHLTCPX",144,0)
 ..I RASTRE["^S^" S ^TMP(RARRR,$J,RASUB,"RASTAFF",I)=+RARE33  ;To be stored in 70.03 field 60
"RTN","RAHLTCPX",145,0)
 ..Q
"RTN","RAHLTCPX",146,0)
 .Q
"RTN","RAHLTCPX",147,0)
 ;"OBR-35"  Transcriptionist
"RTN","RAHLTCPX",148,0)
 S RATRANSC=$G(PAR(36)),RATRANSC=$P(RATRANSC,HLCS,4)
"RTN","RAHLTCPX",149,0)
 I RATRANSC'="" S RAT35=$$VFIER^RAHLRU1(.RATRANSC,PAR(26),"OBR-35") I 'RAT35 S RAERR=$P(RAT35,"^",2),RAEXIT=1 Q
"RTN","RAHLTCPX",150,0)
 S ^TMP(RARRR,$J,RASUB,"RATRANSCRIPT")=$S(RATRANSC]"":RATRANSC,$D(RARSDNT):RARSDNT,1:RAVERF)
"RTN","RAHLTCPX",151,0)
 D ESIG^RAHLO3
"RTN","RAHLTCPX",152,0)
 ;If last OBR set provider info to all OBRs
"RTN","RAHLTCPX",153,0)
 K RAXX F I=1:1:RACNPPP S RAXX=RARRR_"-"_I D:$D(^TMP(RAXX,$J,RASUB))
"RTN","RAHLTCPX",154,0)
 .N RAXXX M RAXXX=^TMP(RAXX,$J,RASUB),^TMP(RAXX,$J,RASUB)=^TMP(RARRR,$J,RASUB),^TMP(RAXX,$J,RASUB)=RAXXX
"RTN","RAHLTCPX",155,0)
 ;
"RTN","RAHLTCPX",156,0)
112 ;
"RTN","RAHLTCPX",157,0)
 I $D(RADTI),$D(RACNI),$D(RAPRSET(RADTI,RACNI)) K RAPRSET(RADTI,RACNI),^TMP(RARRR,$J) S RACNPPP=RACNPPP-1 Q:$P(RARRR,"-",3)  M ^TMP(RARRR,$J)=^TMP("RARPT-REC-"_(RACNPPP+1),$J) K ^TMP("RARPT-REC-"_(RACNPPP+1),$J) Q
"RTN","RAHLTCPX",158,0)
 I $D(RADTI),'$D(RAPRSET(RADTI)) D  ;Get array of printset for date...
"RTN","RAHLTCPX",159,0)
 .N RAPRTSET,RACN,RASUB,CNT
"RTN","RAHLTCPX",160,0)
 .K RAXX D EN2^RAUTL20(.RAXX) M:$D(RAXX) RAPRSET(RADTI)=RAXX K RAPRSET(RADTI,RACNI)
"RTN","RAHLTCPX",161,0)
 Q
"RTN","RAHLTCPX",162,0)
 ;
"RTN","RAHLTCPX",163,0)
OBX ; Pick data off the 'OBX' segments
"RTN","RAHLTCPX",164,0)
 ;Req: OBX-2(Value Type), OBX-3(Observ. ID), OBX-5(Observ. Value) 
"RTN","RAHLTCPX",165,0)
 ;     OBX-11(Observ. Rslt. Status)
"RTN","RAHLTCPX",166,0)
 ;
"RTN","RAHLTCPX",167,0)
 ; OBX-2=CE:Coded Element, T:Text
"RTN","RAHLTCPX",168,0)
 ; OBX-3=Identifier ^ Text ^ Name of Coding System ('^' is the
"RTN","RAHLTCPX",169,0)
 ;   component separator)
"RTN","RAHLTCPX",170,0)
 ;     P^PROCEDURE^L, I^IMPRESSION^L, D^DIAGNOSTIC CODE^L, M:MODIFIERS^L,
"RTN","RAHLTCPX",171,0)
 ;     TCM^TECH COMMENT^L, C4^CPT MODIFIERS^L, R^REPORT^L
"RTN","RAHLTCPX",172,0)
 ; OBX-5=data within classification (OBX-3) by Value Type (OBX-2)
"RTN","RAHLTCPX",173,0)
 ; OBX-11=F:Final Results; C:Correction, replace final results; 
"RTN","RAHLTCPX",174,0)
 ;        R:Rslts entered-not v'fied
"RTN","RAHLTCPX",175,0)
 ;
"RTN","RAHLTCPX",176,0)
 N RAX S RAOBX3=3 ;RAOBX3 is the # of required components for OBX-3
"RTN","RAHLTCPX",177,0)
 S RASEG("OBX")="" I $G(PAR(4))']"" S RAERR="Missing Observation Identifier",RAEXIT=1 Q
"RTN","RAHLTCPX",178,0)
 I $L(PAR(4),HLCS)'=RAOBX3 S RAERR="Observation Identifier format error",RAEXIT=1 Q
"RTN","RAHLTCPX",179,0)
 ;verify OBX-3 by component (three components)
"RTN","RAHLTCPX",180,0)
 ;Ex. RAOBR3(1)="P", RAOBR3(2)="PROCEDURE", RAOBR3(3)="L" always "L"
"RTN","RAHLTCPX",181,0)
 F RAI=1:1:RAOBX3 S RAOBX3(RAI)=$P(PAR(4),HLCS,RAI)
"RTN","RAHLTCPX",182,0)
 ;
"RTN","RAHLTCPX",183,0)
 I RAOBX3(3)'="L" S RAERR="Observation Identifier Coding System name in error",RAEXIT=1 Q
"RTN","RAHLTCPX",184,0)
 S RASTR=""_HLCS_"",RASTR(0)=$P(PAR(4),HLCS,1,2)
"RTN","RAHLTCPX",185,0)
 ;RASTR(0)=identifer and text for this specific HL7 message
"RTN","RAHLTCPX",186,0)
 ;build the identifier and text string for all possible values...
"RTN","RAHLTCPX",187,0)
 F RAI=1:1 S RAX=$T(OBX3+RAI) Q:RAX=""  S RASTR=RASTR_$P(RAX,";",3)_HLCS_$P(RAX,";",4)_HLCS
"RTN","RAHLTCPX",188,0)
 I RASTR'[(HLCS_RASTR(0)_HLCS) S RAERR="Observation Identifier/Text mismatch" Q
"RTN","RAHLTCPX",189,0)
 ;verify the Observation Value OBX-5
"RTN","RAHLTCPX",190,0)
 S RAX=$G(PAR(6)),RANODE=$S(RAOBX3(1)="D":"RADX",RAOBX3(1)="I":"RAIMP",1:"RATXT")
"RTN","RAHLTCPX",191,0)
 S RARCNT(RAOBX3(1))=$G(RARCNT(RAOBX3(1)))+1
"RTN","RAHLTCPX",192,0)
 I RAX["\S\"!(RAX["\R\")!(RAX["\E\")!(RAX["\T\") S RAX=$$DEESC(RAX)
"RTN","RAHLTCPX",193,0)
 ; For DX Codes we are expecting only the # (ie, 1,2,5 etc not the text)
"RTN","RAHLTCPX",194,0)
 ; If VR (PSCRIBE) sends text with DX Code, strip off text in next line
"RTN","RAHLTCPX",195,0)
 ; Text only will be rejected
"RTN","RAHLTCPX",196,0)
 I RAOBX3(1)="D" S RAX=+RAX
"RTN","RAHLTCPX",197,0)
 S ^TMP("RARPT-REC",$J,RASUB,RANODE,RARCNT(RAOBX3(1)))=RAX
"RTN","RAHLTCPX",198,0)
 F RAI=1:1:RACNPPP S RARRR="RARPT-REC-"_RAI S ^TMP(RARRR,$J,RASUB,RANODE,RARCNT(RAOBX3(1)))=RAX
"RTN","RAHLTCPX",199,0)
 K RAOBX3,RASTR
"RTN","RAHLTCPX",200,0)
 Q
"RTN","RAHLTCPX",201,0)
XIT ;
"RTN","RAHLTCPX",202,0)
 D ERR I RAERRCHK=1 G XIT1
"RTN","RAHLTCPX",203,0)
 I $D(^TMP("RARPT-REC",$J)) S:'RACNPPP RACKYES=1 D EN1^RAHLO D ERR I RAERRCHK=1 G XIT1
"RTN","RAHLTCPX",204,0)
 F RAI=1:1:RACNPPP S RARRR="RARPT-REC-"_RAI D:$D(^TMP(RARRR,$J)) 
"RTN","RAHLTCPX",205,0)
 .K ^TMP("RARPT-REC",$J) M ^TMP("RARPT-REC",$J)=^TMP(RARRR,$J) K ^TMP(RARRR,$J)
"RTN","RAHLTCPX",206,0)
 .S RACKYES=(RAI=RACNPPP) N I D EN1^RAHLO D ERR I RAERRCHK=1 G XIT1
"RTN","RAHLTCPX",207,0)
XIT1 K ^TMP("RARPT-REC",$J) ; kill storage area for current HL7 message id
"RTN","RAHLTCPX",208,0)
 F RAI=1:1:RACNPPP S RARRR="RARPT-REC-"_RAI K ^TMP(RARRR,$J)
"RTN","RAHLTCPX",209,0)
 Q
"RTN","RAHLTCPX",210,0)
ERR ;
"RTN","RAHLTCPX",211,0)
 S RAERRCHK=0
"RTN","RAHLTCPX",212,0)
 I $D(RAERR) D
"RTN","RAHLTCPX",213,0)
 .S RAEXIT=1,RACKYES=1,RAERRCHK=1
"RTN","RAHLTCPX",214,0)
 .D ENX^RAHLEXF(HLDTM,RASUB)
"RTN","RAHLTCPX",215,0)
 .D GENACK
"RTN","RAHLTCPX",216,0)
 .Q
"RTN","RAHLTCPX",217,0)
 Q
"RTN","RAHLTCPX",218,0)
 ;
"RTN","RAHLTCPX",219,0)
DEESC(RASTR) ;Replace escape sequences with their field separator and escape character
"RTN","RAHLTCPX",220,0)
 ;equivalents. (RAHLTCPX)
"RTN","RAHLTCPX",221,0)
 ;
"RTN","RAHLTCPX",222,0)
 ;input : RASTR=the string of characters being checked for esc sequences
"RTN","RAHLTCPX",223,0)
 ;output: returns a string with field separator and escape characters in
"RTN","RAHLTCPX",224,0)
 ;         place of escape sequences
"RTN","RAHLTCPX",225,0)
 ;
"RTN","RAHLTCPX",226,0)
 ;RAFSESC/HLFS = field separator
"RTN","RAHLTCPX",227,0)
 ;RACSESC/$E(HLECH,1) = component separator
"RTN","RAHLTCPX",228,0)
 ;RARSESC/$E(HLECH,2) = repetition separator
"RTN","RAHLTCPX",229,0)
 ;RAESESC/$E(HLECH,3) = escape character
"RTN","RAHLTCPX",230,0)
 ;RASCESC/$E(HLECH,4) = subcomponent separator
"RTN","RAHLTCPX",231,0)
 ;
"RTN","RAHLTCPX",232,0)
 N RAFSESC,RACSESC,RARSESC,RAESESC,RASCESC
"RTN","RAHLTCPX",233,0)
 S RAFSESC="\F\",RACSESC="\S\",RARSESC="\R\",RAESESC="\E\",RASCESC="\T\"
"RTN","RAHLTCPX",234,0)
 N RAYES ;escape characters present? if yes, set YES to one
"RTN","RAHLTCPX",235,0)
 F  D  Q:'RAYES
"RTN","RAHLTCPX",236,0)
 .S RAYES=0
"RTN","RAHLTCPX",237,0)
 .I RASTR[RAFSESC S RASTR=$P(RASTR,RAFSESC)_HLFS_$P(RASTR,RAFSESC,2,99999),RAYES=1
"RTN","RAHLTCPX",238,0)
 .I RASTR[RACSESC S RASTR=$P(RASTR,RACSESC)_$E(HLECH,1)_$P(RASTR,RACSESC,2,99999),RAYES=1
"RTN","RAHLTCPX",239,0)
 .I RASTR[RARSESC S RASTR=$P(RASTR,RARSESC)_$E(HLECH,2)_$P(RASTR,RARSESC,2,99999),RAYES=1
"RTN","RAHLTCPX",240,0)
 .I RASTR[RAESESC S RASTR=$P(RASTR,RAESESC)_$E(HLECH,3)_$P(RASTR,RAESESC,2,99999),RAYES=1
"RTN","RAHLTCPX",241,0)
 .I RASTR[RASCESC S RASTR=$P(RASTR,RASCESC)_$E(HLECH,4)_$P(RASTR,RASCESC,2,99999),RAYES=1
"RTN","RAHLTCPX",242,0)
 .Q
"RTN","RAHLTCPX",243,0)
 Q RASTR
"RTN","RAHLTCPX",244,0)
 ;
"RTN","RAHLTCPX",245,0)
GENACK ; Compile the 'ACK' segment, generate the 'ACK' message.
"RTN","RAHLTCPX",246,0)
 Q:'$G(RACKYES)
"RTN","RAHLTCPX",247,0)
 N HLFORMAT,HLARYTYP,RESULT
"RTN","RAHLTCPX",248,0)
 S MSA1="AA"
"RTN","RAHLTCPX",249,0)
 Q:$E($G(HL("SAN")),1,3)'="RA-"  ; Don't allow non RA namespaced interfaces
"RTN","RAHLTCPX",250,0)
 I $D(RAERR) S MSA1=$S(HL("SAN")="RA-PSCRIBE-TCP"!$G(RATELE):"AE",1:"AR")
"RTN","RAHLTCPX",251,0)
 ; Added next line to support MedSpeak interface.  Must re-initialize
"RTN","RAHLTCPX",252,0)
 ; FS and EC's before sending ACK.
"RTN","RAHLTCPX",253,0)
 ;D:HL("SAN")="RA-CLIENT-TCP" INIT^HLFNC2("RA VOICE TCP SERVER RPT",.HL)
"RTN","RAHLTCPX",254,0)
 S HLA("HLA",1)="MSA"_HL("FS")_MSA1_HL("FS")_HL("MID")_$S($D(RAERR):HL("FS")_RAERR,1:"")
"RTN","RAHLTCPX",255,0)
 S HLEID=HL("EID"),HLEIDS=HL("EIDS"),HLARYTYP="LM",HLFORMAT=1
"RTN","RAHLTCPX",256,0)
 K HLRESLT D GENACK^HLMA1(HLEID,HLMTIENS,HLEIDS,HLARYTYP,HLFORMAT,.RESULT)
"RTN","RAHLTCPX",257,0)
 I $G(RESULT)="" Q  ; RTK 3/26/2008 - UNDEFINED 'RESULT' ERROR
"RTN","RAHLTCPX",258,0)
 I +$P(RESULT,U,2) D ASTATUS^RAHLACK(RESULT,RASUB,HL("SAN")) ;ERROR in gen ACK...
"RTN","RAHLTCPX",259,0)
 Q
"RTN","RAHLTCPX",260,0)
 ;
"RTN","RAHLTCPX",261,0)
OBX3 ;set the values for OBX-3.1 & OBX-3.2
"RTN","RAHLTCPX",262,0)
 ;;P;PROCEDURE
"RTN","RAHLTCPX",263,0)
 ;;I;IMPRESSION
"RTN","RAHLTCPX",264,0)
 ;;D;DIAGNOSTIC CODE
"RTN","RAHLTCPX",265,0)
 ;;M;MODIFIERS
"RTN","RAHLTCPX",266,0)
 ;;TCM;TECH COMMENT
"RTN","RAHLTCPX",267,0)
 ;;C4;CPT MODIFIERS
"RTN","RAHLTCPX",268,0)
 ;;R;REPORT
"RTN","RARPTUT")
0^3^B110702869^B110205349
"RTN","RARPTUT",1,0)
RARPTUT ;HISC/GJC - rad/nuc med report utilities ;04/15/10  07:51
"RTN","RARPTUT",2,0)
 ;;5.0;Radiology/Nuclear Medicine;**106,114**;Mar 16, 1998;Build 1
"RTN","RARPTUT",3,0)
 ;
"RTN","RARPTUT",4,0)
 ;Integration Agreements
"RTN","RARPTUT",5,0)
 ;----------------------
"RTN","RARPTUT",6,0)
 ;$$FIND^DIC  - 2051 (supported)
"RTN","RARPTUT",7,0)
 ;FILE^DIE    - 2053 (supported)
"RTN","RARPTUT",8,0)
 ;UPDATE^DIE  - 2053 (supported)
"RTN","RARPTUT",9,0)
 ;WP^DIE      - 2053 (supported)
"RTN","RARPTUT",10,0)
 ;$$IENS^DILF - 2054 (supported)
"RTN","RARPTUT",11,0)
 ;CLEAN^DILF  - 2054 (supported)
"RTN","RARPTUT",12,0)
 ;$$GET1^DIQ  - 2056 (supported)
"RTN","RARPTUT",13,0)
 ;
"RTN","RARPTUT",14,0)
 ;Events that cause reports to be deleted or to revert back to a
"RTN","RARPTUT",15,0)
 ;stub form need to make the appropriate case available to be read.
"RTN","RARPTUT",16,0)
 ;
"RTN","RARPTUT",17,0)
REL(RARPT,RAERR) ;NTP II - mark a report as 'X' (Deleted) or null
"RTN","RARPTUT",18,0)
 ;(mimics 'images collected'). Called when an inbound report has a RESULT
"RTN","RARPTUT",19,0)
 ;STATUS (OBR-25) value of 'VAQ'.
"RTN","RARPTUT",20,0)
 ;
"RTN","RARPTUT",21,0)
 ;Input : RARPT = the IEN of the rad/nuc med report record
"RTN","RARPTUT",22,0)
 ;Output: RAERR = 0 if successful
"RTN","RARPTUT",23,0)
 ;                <0 error code^Message text^Error location^Type
"RTN","RARPTUT",24,0)
 ;
"RTN","RARPTUT",25,0)
 ;    A positive value of RAERR will not trigger a negative acknowledgment
"RTN","RARPTUT",26,0)
 ;    to be broadcast.
"RTN","RARPTUT",27,0)
 ;
"RTN","RARPTUT",28,0)
 S U="^",RAERR=0
"RTN","RARPTUT",29,0)
 N C,RAPARAMS,RATIMOUT,X,Y S RATIMOUT=300
"RTN","RARPTUT",30,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",31,0)
 ;lock the report record in question. if unsuccessful quit w/error
"RTN","RARPTUT",32,0)
 S RAERR=$$LOCKFM^RALOCK(74,RARPT_",",,RATIMOUT) ;(+1)
"RTN","RARPTUT",33,0)
 S RAERR=$$LOCKERR^RAERR(RAERR,"Rad/Nuc Med Reports file")
"RTN","RARPTUT",34,0)
 ;RAERR = -15^The Rad/Nuc Med Reports file is locked by other user/task. Please try later.
"RTN","RARPTUT",35,0)
 ;        ^LOCKERR+1~RAERR^W
"RTN","RARPTUT",36,0)
 I RAERR D  QUIT
"RTN","RARPTUT",37,0)
 .N RATXT S RATXT(1)=$P(RAERR,U,2),RATXT(2)="IEN: "_$G(RARPT,-1)
"RTN","RARPTUT",38,0)
 .S RATXT(3)="Calling Routine: "_$P(RAERR,U,3)
"RTN","RARPTUT",39,0)
 .D MM(74,.RATXT)
"RTN","RARPTUT",40,0)
 .Q
"RTN","RARPTUT",41,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",42,0)
 ;
"RTN","RARPTUT",43,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",44,0)
CHKSTS ;In order to 'mark as deleted', NTP reports those reports must have a
"RTN","RARPTUT",45,0)
 ;REPORT STATUS of 'R' (RELEASED/NOT VERIFIED). If the report status is
"RTN","RARPTUT",46,0)
 ;not set to 'R' log the error, unlock the report & quit.
"RTN","RARPTUT",47,0)
 ;RAERR="-19^Invalid value of field #5 in file #74, IENS='2317'.^^E"                 
"RTN","RARPTUT",48,0)
 S RARPT(0)=$G(^RARPT(RARPT,0))
"RTN","RARPTUT",49,0)
 I $P(RARPT(0),U,5)'="R" D  Q
"RTN","RARPTUT",50,0)
 .S RAERR=$$ERROR^RAERR(-19,,74,RARPT,5)
"RTN","RARPTUT",51,0)
 .D UNLOCKFM^RALOCK(74,RARPT_",") ;(-1)
"RTN","RARPTUT",52,0)
 .N RATXT S RATXT(1)=$P($G(RAERR),U,2)
"RTN","RARPTUT",53,0)
 .S RATXT(2)=$P($G(RAERR),U,3) D MM(74,.RATXT)
"RTN","RARPTUT",54,0)
 .Q
"RTN","RARPTUT",55,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",56,0)
 ;
"RTN","RARPTUT",57,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",58,0)
IMG ;Can't 'mark as deleted' a report being held if images have been
"RTN","RARPTUT",59,0)
 ;attached to that report record. Held reports w/images get moved to
"RTN","RARPTUT",60,0)
 ;a null report status.
"RTN","RARPTUT",61,0)
 ;  RAIMAGES=1 if images are attached
"RTN","RARPTUT",62,0)
 ;  else RAIMAGES=0
"RTN","RARPTUT",63,0)
 N RAIMAGES S RAIMAGES=$S($O(^RARPT(RARPT,2005,0))>0:1,1:0)
"RTN","RARPTUT",64,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",65,0)
 ;
"RTN","RARPTUT",66,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",67,0)
REGEX ;lock at the REGISTERED EXAM (#70.02) record associated with this report
"RTN","RARPTUT",68,0)
 ;piece 2: Patient DFN, piece 3: EXAM DATE/TIME, piece 4: CASE NUMBER
"RTN","RARPTUT",69,0)
 ;>>> Note: RAIEN70 is the IEN string at the 70.02 level. <<<
"RTN","RARPTUT",70,0)
 N RACN,RACNI,RADFN,RADTI,RAIEN70,RAX
"RTN","RARPTUT",71,0)
 S (DA(1),RADFN)=$P(RARPT(0),U,2),(DA,RADTI)=9999999.9999-$P(RARPT(0),U,3)
"RTN","RARPTUT",72,0)
 S RACN=+$P(RARPT(0),U,4),RACNI=$O(^RADPT(RADFN,"DT",RADTI,"P","B",RACN,0))
"RTN","RARPTUT",73,0)
 S RAIEN70=$$IENS^DILF(.DA) K DA
"RTN","RARPTUT",74,0)
 S RAERR=$$LOCKFM^RALOCK(70.02,RAIEN70,,RATIMOUT) ;(+2)
"RTN","RARPTUT",75,0)
 S RAERR=$$LOCKERR^RAERR(RAERR,"Registered Exams Sub-File #70.02")
"RTN","RARPTUT",76,0)
 ;I the case at the REGISTERED EXAMS level is locked
"RTN","RARPTUT",77,0)
 I RAERR D  QUIT
"RTN","RARPTUT",78,0)
 .D UNLOCKFM^RALOCK(74,RARPT_",") ;(-1)
"RTN","RARPTUT",79,0)
 .N RATXT S RATXT(1)=$P($G(RAERR),U,2),RATXT(2)="IEN(s): "_$G(RAIEN70,-1)
"RTN","RARPTUT",80,0)
 .S RATXT(3)="Calling Routine: "_$P($G(RAERR),U,3)
"RTN","RARPTUT",81,0)
 .D MM(74,.RATXT)
"RTN","RARPTUT",82,0)
 .Q
"RTN","RARPTUT",83,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",84,0)
 ;
"RTN","RARPTUT",85,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",86,0)
RPTXT ;delete the REPORT TEXT (70.03; #17) field value for a exam liked to
"RTN","RARPTUT",87,0)
 ;a report that does not have attached images.
"RTN","RARPTUT",88,0)
 ;>>> Note: RAIENS70 is the IEN string at the 70.03 level. <<<
"RTN","RARPTUT",89,0)
 I RAIMAGES=0 D
"RTN","RARPTUT",90,0)
 .;make sure you consider printsets
"RTN","RARPTUT",91,0)
 .S RADA=0 N RAIENS70
"RTN","RARPTUT",92,0)
 .F  S RADA=$O(^RADPT(RADFN,"DT",RADTI,"P",RADA)) Q:'RADA  D
"RTN","RARPTUT",93,0)
 ..S RA7003=$G(^RADPT(RADFN,"DT",RADTI,"P",RADA,0)) Q:$P(RA7003,U,17)'=RARPT
"RTN","RARPTUT",94,0)
 ..S DA=RADA,DA(1)=RADTI,DA(2)=RADFN
"RTN","RARPTUT",95,0)
 ..S RAIENS70=$$IENS^DILF(.DA) K DA
"RTN","RARPTUT",96,0)
 ..S RAFDA(70.03,RAIENS70,17)="@"
"RTN","RARPTUT",97,0)
 ..Q
"RTN","RARPTUT",98,0)
 .I ($D(RAFDA(70.03))\10) D
"RTN","RARPTUT",99,0)
 ..D FILE^DIE("","RAFDA") K RA7003,RADA,RAFDA
"RTN","RARPTUT",100,0)
 ..I $D(DIERR)#2 D
"RTN","RARPTUT",101,0)
 ...;RAERR="-9^FileMan DBS call error(s); File #70.03; 
"RTN","RARPTUT",102,0)
 ...;IENS: "1,6917999.9999,76,"^DBS+14~RAERR^E"
"RTN","RARPTUT",103,0)
 ...S RAERR=$$DBS^RAERR("",-9,70.03,RAIENS70)
"RTN","RARPTUT",104,0)
 ...D UNLOCKFM^RALOCK(70.02,RAIEN70) ;(-2)
"RTN","RARPTUT",105,0)
 ...D UNLOCKFM^RALOCK(74,RARPT_",") ;(-1)
"RTN","RARPTUT",106,0)
 ...N RATXT S RATXT(1)=$P($G(RAERR),U,2)
"RTN","RARPTUT",107,0)
 ...S RATXT(2)="Calling Routine: "_$P($G(RAERR),U,3)
"RTN","RARPTUT",108,0)
 ...S RATXT(3)="Calling subroutine: RPTXT"
"RTN","RARPTUT",109,0)
 ...D MM(70.02,.RATXT)
"RTN","RARPTUT",110,0)
 ...Q
"RTN","RARPTUT",111,0)
 ..D CLEAN^DILF
"RTN","RARPTUT",112,0)
 ..Q
"RTN","RARPTUT",113,0)
 .Q
"RTN","RARPTUT",114,0)
 Q:RAERR
"RTN","RARPTUT",115,0)
 ;
"RTN","RARPTUT",116,0)
PIS ;delete the PRIMARY INTERPRETING STAFF (70.03; #15) field value
"RTN","RARPTUT",117,0)
 ;for a exam liked to a report regardless of whether that report has
"RTN","RARPTUT",118,0)
 ;attached images.
"RTN","RARPTUT",119,0)
 ;>>> Note: RAIENS70 is the IEN string at the 70.03 level. <<<
"RTN","RARPTUT",120,0)
 D
"RTN","RARPTUT",121,0)
 .;make sure you consider printsets
"RTN","RARPTUT",122,0)
 .S RADA=0 N RAIENS70
"RTN","RARPTUT",123,0)
 .F  S RADA=$O(^RADPT(RADFN,"DT",RADTI,"P",RADA)) Q:'RADA  D
"RTN","RARPTUT",124,0)
 ..S RA7003=$G(^RADPT(RADFN,"DT",RADTI,"P",RADA,0))
"RTN","RARPTUT",125,0)
 ..S DA=RADA,DA(1)=RADTI,DA(2)=RADFN
"RTN","RARPTUT",126,0)
 ..S RAIENS70=$$IENS^DILF(.DA) K DA
"RTN","RARPTUT",127,0)
 ..S RAFDA(70.03,RAIENS70,15)="@"
"RTN","RARPTUT",128,0)
 ..Q
"RTN","RARPTUT",129,0)
 .I ($D(RAFDA(70.03))\10) D
"RTN","RARPTUT",130,0)
 ..D FILE^DIE("","RAFDA") K RA7003,RADA,RAFDA
"RTN","RARPTUT",131,0)
 ..I $D(DIERR)#2 D
"RTN","RARPTUT",132,0)
 ...;RAERR="-9^FileMan DBS call error(s); File #70.03; 
"RTN","RARPTUT",133,0)
 ...;IENS: "1,6917999.9999,76,"^DBS+14~RAERR^E"
"RTN","RARPTUT",134,0)
 ...S RAERR=$$DBS^RAERR("",-9,70.03,RAIENS70)
"RTN","RARPTUT",135,0)
 ...D UNLOCKFM^RALOCK(70.02,RAIEN70) ;(-2)
"RTN","RARPTUT",136,0)
 ...D UNLOCKFM^RALOCK(74,RARPT_",") ;(-1)
"RTN","RARPTUT",137,0)
 ...N RATXT S RATXT(1)=$P($G(RAERR),U,2)
"RTN","RARPTUT",138,0)
 ...S RATXT(2)="Calling Routine: "_$P($G(RAERR),U,3)
"RTN","RARPTUT",139,0)
 ...S RATXT(3)="Calling subroutine: PIS"
"RTN","RARPTUT",140,0)
 ...D MM(70.02,.RATXT)
"RTN","RARPTUT",141,0)
 ...Q
"RTN","RARPTUT",142,0)
 ..D CLEAN^DILF
"RTN","RARPTUT",143,0)
 ..Q
"RTN","RARPTUT",144,0)
 .Q
"RTN","RARPTUT",145,0)
 Q:RAERR
"RTN","RARPTUT",146,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",147,0)
 ;
"RTN","RARPTUT",148,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",149,0)
BATCH ;if the report does not have associated images check the REPORT BATCHES
"RTN","RARPTUT",150,0)
 ;(#74.2) file for references to the report in question. If there are
"RTN","RARPTUT",151,0)
 ;references to this report those references (pointers) must be deleted.
"RTN","RARPTUT",152,0)
 ;If there is an error within the RA742 function do not quit. The code
"RTN","RARPTUT",153,0)
 ;within RA742 will trigger the correct emails. Continue on and update
"RTN","RARPTUT",154,0)
 ;the REPORT STATUS field.
"RTN","RARPTUT",155,0)
 I RAIMAGES=0 D RA742(RARPT)
"RTN","RARPTUT",156,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",157,0)
 ;
"RTN","RARPTUT",158,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",159,0)
RSTATUS ;1) set the REPORT STATUS for reports absent of images to 'X'
"RTN","RARPTUT",160,0)
 ;          (Deleted)
"RTN","RARPTUT",161,0)
 ;       2) set the REPORT STATUS for reports w/images present to null
"RTN","RARPTUT",162,0)
 ;          (mimics 'images collected')
"RTN","RARPTUT",163,0)
 K RAFDA S RAFDA(74,RARPT_",",5)=$S(RAIMAGES=1:"@",1:"X")
"RTN","RARPTUT",164,0)
 D FILE^DIE("","RAFDA") K RAFDA
"RTN","RARPTUT",165,0)
 I $D(DIERR)#2 D
"RTN","RARPTUT",166,0)
 .;RAERR="-9^FileMan DBS call error(s); File #74; 
"RTN","RARPTUT",167,0)
 .;IENS: "2370,"^DBS+14~RAERR^E"
"RTN","RARPTUT",168,0)
 .S RAERR=$$DBS^RAERR("",-9,74,RARPT_",")
"RTN","RARPTUT",169,0)
 .D UNLOCKFM^RALOCK(70.02,RAIEN70) ;(-2)
"RTN","RARPTUT",170,0)
 .D UNLOCKFM^RALOCK(74,RARPT_",") ;(-1)
"RTN","RARPTUT",171,0)
 .N RATXT S RATXT(1)=$P($G(RAERR),U,2)
"RTN","RARPTUT",172,0)
 .S RATXT(2)="Calling Routine: "_$P($G(RAERR),U,3)
"RTN","RARPTUT",173,0)
 .D MM(74,.RATXT)
"RTN","RARPTUT",174,0)
 .Q
"RTN","RARPTUT",175,0)
 Q:RAERR
"RTN","RARPTUT",176,0)
 ;
"RTN","RARPTUT",177,0)
IMPRPTXT ;Delete the IMPRESSION TEXT (#300) and REPORT TEXT (#200)
"RTN","RARPTUT",178,0)
 ;for a report record, w/images, being released back to the local
"RTN","RARPTUT",179,0)
 ;facility for interpretation.
"RTN","RARPTUT",180,0)
 I RAIMAGES=1 D WP^DIE(74,RARPT_",",300,,"@"),WP^DIE(74,RARPT_",",200,,"@")
"RTN","RARPTUT",181,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",182,0)
 ;
"RTN","RARPTUT",183,0)
ACTIVLOG ;update the activity log. If an error occurs here inform the mail group
"RTN","RARPTUT",184,0)
 ;and fall through to the code that unlocks the exam and report records.
"RTN","RARPTUT",185,0)
 ;
"RTN","RARPTUT",186,0)
 ;>>> Note: RAIEN is the record number for the newly created activity log sub-file
"RTN","RARPTUT",187,0)
 ;record. <<<
"RTN","RARPTUT",188,0)
 ;
"RTN","RARPTUT",189,0)
 S RAIEN=$$ACTLOG()
"RTN","RARPTUT",190,0)
 ;
"RTN","RARPTUT",191,0)
 ;if no error, and there are not images associated with this report build
"RTN","RARPTUT",192,0)
 ;the RAFDA array for Dx Codes, sec. staff & sec. resident & file the data
"RTN","RARPTUT",193,0)
 ;in the proper lower level sub-files.
"RTN","RARPTUT",194,0)
 I RAIEN>0,(RAIMAGES=0) S RAERR=$$ACTLOGX(RAIEN)
"RTN","RARPTUT",195,0)
 ;
"RTN","RARPTUT",196,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",197,0)
 ;unlock the records
"RTN","RARPTUT",198,0)
 D UNLOCKFM^RALOCK(70.02,RAIEN70) ;(-2)
"RTN","RARPTUT",199,0)
 D UNLOCKFM^RALOCK(74,RARPT_",") ;(-1)
"RTN","RARPTUT",200,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",201,0)
 ;
"RTN","RARPTUT",202,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",203,0)
MAIL ;Whether the event was a success of failure update the users in the RAD 
"RTN","RARPTUT",204,0)
 ;HL7 MESSAGES mail group about the change in REPORT STATUS.
"RTN","RARPTUT",205,0)
 S RARPTSTS=$$GET1^DIQ(74,RARPT_",",5)
"RTN","RARPTUT",206,0)
 S:RAERR RAX="NTP failed to release a study back to the local facility."
"RTN","RARPTUT",207,0)
 S:'RAERR RAX="NTP succeeded in releasing a study back to the local facility."
"RTN","RARPTUT",208,0)
 S RATXT(1)=RAX,RATXT(2)=""
"RTN","RARPTUT",209,0)
 S RATXT(3)="NTP released Rad/Nuc Med Report: "_$P(RARPT(0),U)_"."
"RTN","RARPTUT",210,0)
 S RATXT(4)="The REPORT STATUS of this report is: "_$S(RARPTSTS'="":RARPTSTS,1:"N/A")
"RTN","RARPTUT",211,0)
 D MM(74,.RATXT) K RARPTSTS,RATXT,RAX
"RTN","RARPTUT",212,0)
 ;------------------------------------------------------------------------
"RTN","RARPTUT",213,0)
 ;
"RTN","RARPTUT",214,0)
 D CLEAN^DILF K RAIEN QUIT  ;end of main body...
"RTN","RARPTUT",215,0)
 ;
"RTN","RARPTUT",216,0)
 ;>>> subroutines follow <<<
"RTN","RARPTUT",217,0)
 ;
"RTN","RARPTUT",218,0)
RA742(RARPT) ;delete a report (without images) from the REPORT BATCHES (#74.2)
"RTN","RARPTUT",219,0)
 ;REPORTS sub-file 
"RTN","RARPTUT",220,0)
 ;Input: RARPT = IEN of the RAD/NUC MED REPORT record
"RTN","RARPTUT",221,0)
 ;;>>> Note: RAIEN742 is the IEN string at the 74.2 level. <<<
"RTN","RARPTUT",222,0)
 I ($D(^RABTCH(74.2,"D",RARPT))\10) D
"RTN","RARPTUT",223,0)
 .K DA,RA,RAFDA,RAIEN742,RAX N RAY1,RAY2 S RAY1=0,RA=74.2
"RTN","RARPTUT",224,0)
 .F  S RAY1=$O(^RABTCH(74.2,"D",RARPT,RAY1)) Q:RAY1'>0  D
"RTN","RARPTUT",225,0)
 ..S RAY2=0 F  S RAY2=$O(^RABTCH(74.2,"D",RARPT,RAY1,RAY2)) Q:RAY2'>0  D
"RTN","RARPTUT",226,0)
 ...S DA=RAY2,DA(1)=RAY1 S RAIEN742=$$IENS^DILF(.DA) K DA
"RTN","RARPTUT",227,0)
 ...S RAERR=$$LOCKFM^RALOCK(74.21,RAIEN742,,RATIMOUT) ;(+3)
"RTN","RARPTUT",228,0)
 ...S RAERR=$$LOCKERR^RAERR(RAERR,"Report Batches File #74.2")
"RTN","RARPTUT",229,0)
 ...;
"RTN","RARPTUT",230,0)
 ...;RAERR = -15^The Rad/Nuc Med Reports file is locked by other user/task. Please try later.
"RTN","RARPTUT",231,0)
 ...;        ^LOCKERR+1~RAERR^W
"RTN","RARPTUT",232,0)
 ...I RAERR D  QUIT
"RTN","RARPTUT",233,0)
 ....N RATXT S RATXT(1)=$P($G(RAERR),U,2),RATXT(2)="IEN: "_$G(RARPT,-1)
"RTN","RARPTUT",234,0)
 ....S RATXT(3)="Calling Routine: "_$P($G(RAERR),U,3)
"RTN","RARPTUT",235,0)
 ....D MM(RA,.RATXT)
"RTN","RARPTUT",236,0)
 ....Q
"RTN","RARPTUT",237,0)
 ...;
"RTN","RARPTUT",238,0)
 ...S RAFDA(74.21,RAIEN742,.01)="@"
"RTN","RARPTUT",239,0)
 ...D FILE^DIE("","RAFDA") K RAFDA
"RTN","RARPTUT",240,0)
 ...;
"RTN","RARPTUT",241,0)
 ...I $D(DIERR)#2 D
"RTN","RARPTUT",242,0)
 ....;RAERR="-9^FileMan DBS call error(s); File #74.21; 
"RTN","RARPTUT",243,0)
 ....;IENS: "1,113,"^DBS+14~RAERR^E"
"RTN","RARPTUT",244,0)
 ....S RAERR=$$DBS^RAERR("",-9,74.21,RAIEN742)
"RTN","RARPTUT",245,0)
 ....N RATXT S RATXT(1)=$P($G(RAERR),U,2)
"RTN","RARPTUT",246,0)
 ....S RATXT(2)="Calling Routine: "_$P($G(RAERR),U,3)
"RTN","RARPTUT",247,0)
 ....D MM(RA,.RATXT)
"RTN","RARPTUT",248,0)
 ....Q
"RTN","RARPTUT",249,0)
 ...D UNLOCKFM^RALOCK(74.21,RAIEN742) ;(-3)
"RTN","RARPTUT",250,0)
 ...D CLEAN^DILF K RA,RAIEN742,RAX
"RTN","RARPTUT",251,0)
 ...Q
"RTN","RARPTUT",252,0)
 ..Q
"RTN","RARPTUT",253,0)
 .Q
"RTN","RARPTUT",254,0)
 Q
"RTN","RARPTUT",255,0)
 ;
"RTN","RARPTUT",256,0)
ACTLOG() ;update the Activity Log (#74.01) whenever a report is
"RTN","RARPTUT",257,0)
 ;has a REPORT STATUS value of DELETED. Remember that printsets
"RTN","RARPTUT",258,0)
 ;share primary/secondary staff, resident & Dx Codes across all
"RTN","RARPTUT",259,0)
 ;studies.
"RTN","RARPTUT",260,0)
 ;
"RTN","RARPTUT",261,0)
 ;Given: RADFN, RADTI, RACNI, RARPT & RAIMAGE (indicates if DELETED)
"RTN","RARPTUT",262,0)
 ;Note: the report record remains locked.
"RTN","RARPTUT",263,0)
 ;>>> Note: RAIENS74 is the IEN string at the 74.01 level. <<<
"RTN","RARPTUT",264,0)
 ;>>> RAIEN "finds" the next available IEN in the Activity Log sub-file <<<
"RTN","RARPTUT",265,0)
 N RAERR,RAFDA,RAIEN,RAIENS74,RAUSER,RAY3
"RTN","RARPTUT",266,0)
 S RAIEN=$O(^RARPT(RARPT,"L",$C(32)),-1),RAIEN=RAIEN+1
"RTN","RARPTUT",267,0)
 S RAUSER=$$FIND1^DIC(200,,"X","RADIOLOGY,OUTSIDE SERVICE")
"RTN","RARPTUT",268,0)
 S RAY3=$$GETEXM(),RAIENS74="+"_RAIEN_","_RARPT_","
"RTN","RARPTUT",269,0)
 S RAFDA(74.01,RAIENS74,.01)=$$NOW^XLFDT() ;to the second
"RTN","RARPTUT",270,0)
 S RAFDA(74.01,RAIENS74,2)="Q" ;QUIT released back to local VAMC
"RTN","RARPTUT",271,0)
 S RAFDA(74.01,RAIENS74,3)=$S(RAUSER>0:RAUSER,1:.5) ;a tipoff on a NTP action
"RTN","RARPTUT",272,0)
 S RAFDA(74.01,RAIENS74,4)="R" ;must be "R" (Released/not Verified)
"RTN","RARPTUT",273,0)
 ;
"RTN","RARPTUT",274,0)
 ;if there are no images linked to this report file primary & secondary
"RTN","RARPTUT",275,0)
 ;Dx Code, resident, & staff into the Activity Log
"RTN","RARPTUT",276,0)
 I RAIMAGES=0 D
"RTN","RARPTUT",277,0)
 .S:$P(RAY3,U,2) RAFDA(74.01,RAIENS74,5)=$P(RAY3,U,2) ;dx
"RTN","RARPTUT",278,0)
 .S:$P(RAY3,U,3) RAFDA(74.01,RAIENS74,7)=$P(RAY3,U,3) ;stf
"RTN","RARPTUT",279,0)
 .S:$P(RAY3,U) RAFDA(74.01,RAIENS74,9)=$P(RAY3,U) ;res
"RTN","RARPTUT",280,0)
 .Q
"RTN","RARPTUT",281,0)
 ;
"RTN","RARPTUT",282,0)
 D UPDATE^DIE("","RAFDA","RAIEN")
"RTN","RARPTUT",283,0)
 ;if successful RAIEN(RAIEN) is the new record # for 74.01 sub-file
"RTN","RARPTUT",284,0)
 I $D(DIERR)#2 D
"RTN","RARPTUT",285,0)
 .S RAERR=$$DBS^RAERR("",-9,74.01,RAIENS74)
"RTN","RARPTUT",286,0)
 .N RATXT S RATXT(1)=$P($G(RAERR),U,2)
"RTN","RARPTUT",287,0)
 .S RATXT(2)="Calling Routine: "_$P($G(RAERR),U,3)
"RTN","RARPTUT",288,0)
 .D MM(RA,.RATXT)
"RTN","RARPTUT",289,0)
 .Q
"RTN","RARPTUT",290,0)
 Q $S(($D(RAERR)#2)<0:RAERR,1:RAIEN(RAIEN))
"RTN","RARPTUT",291,0)
 ;
"RTN","RARPTUT",292,0)
ACTLOGX(RAIEN) ;update the lower level sub-files...
"RTN","RARPTUT",293,0)
 ;given: RARPT
"RTN","RARPTUT",294,0)
 ;Input: RAIEN is the new record number created @ the 74.01 level
"RTN","RARPTUT",295,0)
 ;>>> Note: RAIENS74 is the IEN string at the 74.01 level. <<< 
"RTN","RARPTUT",296,0)
 N RA,RAERR,RAFDA,RAIENS74
"RTN","RARPTUT",297,0)
 S RAIENS74=","_RAIEN_","_RARPT_",",RA=74.01
"RTN","RARPTUT",298,0)
 ;build the RAFDA array for Dx Codes, sec. staff & sec. resident
"RTN","RARPTUT",299,0)
 D SECDX,SECSTF,SECRES
"RTN","RARPTUT",300,0)
 ;if there's data to be filed, file it. Note: the input transforms
"RTN","RARPTUT",301,0)
 ;are "clean" so I stuff the internal value (equivalent of a four slash) 
"RTN","RARPTUT",302,0)
 D:($D(RAFDA)\10) UPDATE^DIE("","RAFDA",,)
"RTN","RARPTUT",303,0)
 I $D(DIERR)#2 D
"RTN","RARPTUT",304,0)
 .S RAERR=$$DBS^RAERR("",-9,74.01,RAIENS74)
"RTN","RARPTUT",305,0)
 .N RATXT S RATXT(1)=$P($G(RAERR),U,2)
"RTN","RARPTUT",306,0)
 .S RATXT(2)="Calling Routine: "_$P($G(RAERR),U,3)
"RTN","RARPTUT",307,0)
 .D MM(RA,.RATXT)
"RTN","RARPTUT",308,0)
 .Q
"RTN","RARPTUT",309,0)
 Q $S(($D(RAERR)#2)<0:RAERR,1:0)
"RTN","RARPTUT",310,0)
 ;
"RTN","RARPTUT",311,0)
MM(RAY,RAX) ;call MailMan; let the members of the mail group know
"RTN","RARPTUT",312,0)
 ;if a problem exists.
"RTN","RARPTUT",313,0)
 ;Input: RAY = file #
"RTN","RARPTUT",314,0)
 ;       RAX = information passed to RAD HL7 MESSAGES members 
"RTN","RARPTUT",315,0)
 ;I $$GOTLOCAL^XMXAPIG("RAD HL7 MESSAGES") D
"RTN","RARPTUT",316,0)
 N DIERR,DUZ,RARY,X,XMDUN,XMDUZ,XMMG,XMZ S DUZ=.5,XMDUZ="POSTMASTER"
"RTN","RARPTUT",317,0)
 S XMSUB="NTP releases a case back to the local facility: #"_RAY
"RTN","RARPTUT",318,0)
 S XMTEXT="RAX(",XMY("G.RAD HL7 MESSAGES")="",XMY("POSTMASTER")=""
"RTN","RARPTUT",319,0)
 D ^XMD
"RTN","RARPTUT",320,0)
 Q
"RTN","RARPTUT",321,0)
 ;
"RTN","RARPTUT",322,0)
GETEXM() ;return primary Resident, primary Dx Code & primary Staff data (if any) #70.03
"RTN","RARPTUT",323,0)
 ;given: RADFN, RADTI & RACNI
"RTN","RARPTUT",324,0)
 ;return: primary Resident (piece 12)^Dx Code (piece 13)^primary Staff (piece 15)
"RTN","RARPTUT",325,0)
 N X S X=$G(^RADPT(RADFN,"DT",RADTI,"P",RACNI,0))
"RTN","RARPTUT",326,0)
 Q ($P(X,U,12)_U_$P(X,U,13)_U_$P(X,U,15))
"RTN","RARPTUT",327,0)
 ;
"RTN","RARPTUT",328,0)
SECRES ;return secondary Resident data (if any) #70.09 place in #74.19
"RTN","RARPTUT",329,0)
 ;given: RADFN, RADTI & RACNI & RAIENS74 (global scope; defined in ACTLOGX)
"RTN","RARPTUT",330,0)
 N RAIEN,RAX,RAY,RAZ S RAX=500,RAY=0
"RTN","RARPTUT",331,0)
 F  S RAY=$O(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"SRR",RAY)) Q:'RAY  D
"RTN","RARPTUT",332,0)
 .S RAZ=$G(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"SRR",RAY,0))
"RTN","RARPTUT",333,0)
 .S RAIEN="+"_RAX,RAFDA(74.19,RAIEN_RAIENS74,.01)=$P(RAZ,U)
"RTN","RARPTUT",334,0)
 .S RAX=RAX+1
"RTN","RARPTUT",335,0)
 .Q
"RTN","RARPTUT",336,0)
 Q
"RTN","RARPTUT",337,0)
 ;
"RTN","RARPTUT",338,0)
SECDX ;return secondary Dx Code data (if any) #70.14 place in #74.16
"RTN","RARPTUT",339,0)
 ;given: RADFN, RADTI & RACNI & RAIENS74 (global scope; defined in ACTLOGX)
"RTN","RARPTUT",340,0)
 N RAIEN,RAX,RAY,RAZ S RAX=100,RAY=0
"RTN","RARPTUT",341,0)
 F  S RAY=$O(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"DX",RAY)) Q:'RAY  D
"RTN","RARPTUT",342,0)
 .S RAZ=$G(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"DX",RAY,0))
"RTN","RARPTUT",343,0)
 .S RAIEN="+"_RAX,RAFDA(74.16,RAIEN_RAIENS74,.01)=$P(RAZ,U)
"RTN","RARPTUT",344,0)
 .S RAX=RAX+1
"RTN","RARPTUT",345,0)
 .Q
"RTN","RARPTUT",346,0)
 Q
"RTN","RARPTUT",347,0)
 ;
"RTN","RARPTUT",348,0)
SECSTF ;return secondary Staff data (if any) #70.11 place in #74.18
"RTN","RARPTUT",349,0)
 ;given: RADFN, RADTI & RACNI & RAIENS74 (global scope; defined in ACTLOGX)
"RTN","RARPTUT",350,0)
 N RAIEN,RAX,RAY,RAZ S RAX=300,RAY=0
"RTN","RARPTUT",351,0)
 F  S RAY=$O(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"SSR",RAY)) Q:'RAY  D
"RTN","RARPTUT",352,0)
 .S RAZ=$G(^RADPT(RADFN,"DT",RADTI,"P",RACNI,"SSR",RAY,0))
"RTN","RARPTUT",353,0)
 .S RAIEN="+"_RAX,RAFDA(74.18,RAIEN_RAIENS74,.01)=$P(RAZ,U)
"RTN","RARPTUT",354,0)
 .S RAX=RAX+1
"RTN","RARPTUT",355,0)
 .Q
"RTN","RARPTUT",356,0)
 Q
"RTN","RARPTUT",357,0)
 ;
"RTN","RARPTUT",358,0)
EN ;entry point called (from RAHLO) to trigger the logic that updates the
"RTN","RARPTUT",359,0)
 ;REPORT STATUS field of a report w/o images to 'deleted'. If the report
"RTN","RARPTUT",360,0)
 ;does associate with images the report is to be treated as an imaging
"RTN","RARPTUT",361,0)
 ;stub report.
"RTN","RARPTUT",362,0)
 ;
"RTN","RARPTUT",363,0)
 Q:RARPT'>0
"RTN","RARPTUT",364,0)
 D REL^RARPTUT(RARPT,.RAERR)
"RTN","RARPTUT",365,0)
 Q:$G(RAERR)'=0
"RTN","RARPTUT",366,0)
 ;
"RTN","RARPTUT",367,0)
 ;RAERR will be defined so if RAERR=0 proceed to update the
"RTN","RARPTUT",368,0)
 ;status of the exam. If RAERR'=0 do not update the status of
"RTN","RARPTUT",369,0)
 ;the exam.
"RTN","RARPTUT",370,0)
 ;
"RTN","RARPTUT",371,0)
 ;Update the exam status. RAMDV (set in RAHLO) is a string that
"RTN","RARPTUT",372,0)
 ;identifies division specific attributes. 11/NORPT^RASTREQ
"RTN","RARPTUT",373,0)
 ;determine whether a report exists (an imaging stub is not
"RTN","RARPTUT",374,0)
 ;a report).
"RTN","RARPTUT",375,0)
 ;
"RTN","RARPTUT",376,0)
 ;Note: exam records are locked within UP1^RAUTL1
"RTN","RARPTUT",377,0)
 I $D(RAMDV)#2,(RAMDV'="") D UP1^RAUTL1
"RTN","RARPTUT",378,0)
 ;
"RTN","RARPTUT",379,0)
 ;Note - the fact of the matter is this: upon returning to
"RTN","RARPTUT",380,0)
 ;RAHLTCPB (which is done after the next 'Q'uit), GENACK is
"RTN","RARPTUT",381,0)
 ;called only if an error has occurred. Because of this I
"RTN","RARPTUT",382,0)
 ;call GENACK^RAHLTCPB below because there is no error.
"RTN","RARPTUT",383,0)
 K:$G(RAERR)=0 RAERR
"RTN","RARPTUT",384,0)
 D GENACK^RAHLTCPB ; generate 'ACK' message
"RTN","RARPTUT",385,0)
 Q
"RTN","RARPTUT",386,0)
 ;
"VER")
8.0^22.0
"BLD",8541,6)
^103
**END**
**END**
