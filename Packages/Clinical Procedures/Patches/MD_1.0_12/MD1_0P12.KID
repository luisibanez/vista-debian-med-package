KIDS Distribution saved on Nov 01, 2011@11:24:44
TRANSPORT MD*1*12 01Nov2011
**KIDS**:MD*1.0*12^

**INSTALL NAME**
MD*1.0*12
"BLD",5595,0)
MD*1.0*12^CLINICAL PROCEDURES^0^3111101^y
"BLD",5595,1,0)
^^2^2^3111004^^
"BLD",5595,1,1,0)
 
"BLD",5595,1,2,0)
MD*1.0*12 - Clinical Flowsheets HL7 Redesign
"BLD",5595,4,0)
^9.64PA^704.005^1
"BLD",5595,4,704.005,0)
704.005
"BLD",5595,4,704.005,222)
y^y^f^^^^n^^n
"BLD",5595,4,704.005,224)

"BLD",5595,4,"B",704.005,704.005)

"BLD",5595,6.3)
318
"BLD",5595,"ABPKG")
n
"BLD",5595,"INI")
MDPRE12
"BLD",5595,"INID")
^^n
"BLD",5595,"INIT")

"BLD",5595,"KRN",0)
^9.67PA^779.2^20
"BLD",5595,"KRN",.4,0)
.4
"BLD",5595,"KRN",.4,"NM",0)
^9.68A^^0
"BLD",5595,"KRN",.401,0)
.401
"BLD",5595,"KRN",.401,"NM",0)
^9.68A^^0
"BLD",5595,"KRN",.402,0)
.402
"BLD",5595,"KRN",.403,0)
.403
"BLD",5595,"KRN",.403,"NM",0)
^9.68A^^0
"BLD",5595,"KRN",.5,0)
.5
"BLD",5595,"KRN",.84,0)
.84
"BLD",5595,"KRN",.84,"NM",0)
^9.68A^^0
"BLD",5595,"KRN",3.6,0)
3.6
"BLD",5595,"KRN",3.8,0)
3.8
"BLD",5595,"KRN",3.8,"NM",0)
^9.68A^^0
"BLD",5595,"KRN",9.2,0)
9.2
"BLD",5595,"KRN",9.8,0)
9.8
"BLD",5595,"KRN",9.8,"NM",0)
^9.68A^23^12
"BLD",5595,"KRN",9.8,"NM",5,0)
MDCA01^^0^B207065
"BLD",5595,"KRN",9.8,"NM",6,0)
MDCA02^^0^B207137
"BLD",5595,"KRN",9.8,"NM",7,0)
MDCA03^^0^B207209
"BLD",5595,"KRN",9.8,"NM",8,0)
MDCA08^^0^B207569
"BLD",5595,"KRN",9.8,"NM",9,0)
MDCA11^^0^B207135
"BLD",5595,"KRN",9.8,"NM",10,0)
MDCA12^^0^B207207
"BLD",5595,"KRN",9.8,"NM",11,0)
MDCA13^^0^B207279
"BLD",5595,"KRN",9.8,"NM",12,0)
MDCADT^^0^B16434281
"BLD",5595,"KRN",9.8,"NM",13,0)
MDCEVN^^0^B5482617
"BLD",5595,"KRN",9.8,"NM",20,0)
MDCPVDEF^^0^B62382929
"BLD",5595,"KRN",9.8,"NM",22,0)
MDCUTL^^0^B28631093
"BLD",5595,"KRN",9.8,"NM",23,0)
MDCPMESQ^^0^B5560920
"BLD",5595,"KRN",9.8,"NM","B","MDCA01",5)

"BLD",5595,"KRN",9.8,"NM","B","MDCA02",6)

"BLD",5595,"KRN",9.8,"NM","B","MDCA03",7)

"BLD",5595,"KRN",9.8,"NM","B","MDCA08",8)

"BLD",5595,"KRN",9.8,"NM","B","MDCA11",9)

"BLD",5595,"KRN",9.8,"NM","B","MDCA12",10)

"BLD",5595,"KRN",9.8,"NM","B","MDCA13",11)

"BLD",5595,"KRN",9.8,"NM","B","MDCADT",12)

"BLD",5595,"KRN",9.8,"NM","B","MDCEVN",13)

"BLD",5595,"KRN",9.8,"NM","B","MDCPMESQ",23)

"BLD",5595,"KRN",9.8,"NM","B","MDCPVDEF",20)

"BLD",5595,"KRN",9.8,"NM","B","MDCUTL",22)

"BLD",5595,"KRN",19,0)
19
"BLD",5595,"KRN",19,"NM",0)
^9.68A^^0
"BLD",5595,"KRN",19.1,0)
19.1
"BLD",5595,"KRN",19.1,"NM",0)
^9.68A^^0
"BLD",5595,"KRN",101,0)
101
"BLD",5595,"KRN",101,"NM",0)
^9.68A^29^2
"BLD",5595,"KRN",101,"NM",28,0)
MDC CPAN VS^^0
"BLD",5595,"KRN",101,"NM",29,0)
MDC ADT_A01 OUTBOUND^^0
"BLD",5595,"KRN",101,"NM","B","MDC ADT_A01 OUTBOUND",29)

"BLD",5595,"KRN",101,"NM","B","MDC CPAN VS",28)

"BLD",5595,"KRN",409.61,0)
409.61
"BLD",5595,"KRN",409.61,"NM",0)
^9.68A^^
"BLD",5595,"KRN",771,0)
771
"BLD",5595,"KRN",771,"NM",0)
^9.68A^^0
"BLD",5595,"KRN",779.2,0)
779.2
"BLD",5595,"KRN",870,0)
870
"BLD",5595,"KRN",870,"NM",0)
^9.68A^^0
"BLD",5595,"KRN",8989.51,0)
8989.51
"BLD",5595,"KRN",8989.51,"NM",0)
^9.68A^^0
"BLD",5595,"KRN",8989.52,0)
8989.52
"BLD",5595,"KRN",8989.52,"NM",0)
^9.68A^^
"BLD",5595,"KRN",8994,0)
8994
"BLD",5595,"KRN",8994,"NM",0)
^9.68A^^0
"BLD",5595,"KRN","B",.4,.4)

"BLD",5595,"KRN","B",.401,.401)

"BLD",5595,"KRN","B",.402,.402)

"BLD",5595,"KRN","B",.403,.403)

"BLD",5595,"KRN","B",.5,.5)

"BLD",5595,"KRN","B",.84,.84)

"BLD",5595,"KRN","B",3.6,3.6)

"BLD",5595,"KRN","B",3.8,3.8)

"BLD",5595,"KRN","B",9.2,9.2)

"BLD",5595,"KRN","B",9.8,9.8)

"BLD",5595,"KRN","B",19,19)

"BLD",5595,"KRN","B",19.1,19.1)

"BLD",5595,"KRN","B",101,101)

"BLD",5595,"KRN","B",409.61,409.61)

"BLD",5595,"KRN","B",771,771)

"BLD",5595,"KRN","B",779.2,779.2)

"BLD",5595,"KRN","B",870,870)

"BLD",5595,"KRN","B",8989.51,8989.51)

"BLD",5595,"KRN","B",8989.52,8989.52)

"BLD",5595,"KRN","B",8994,8994)

"BLD",5595,"PRET")

"BLD",5595,"QUES",0)
^9.62^^0
"BLD",5595,"REQB",0)
^9.611^1^1
"BLD",5595,"REQB",1,0)
MD*1.0*16^2
"BLD",5595,"REQB","B","MD*1.0*16",1)

"FIA",704.005)
CP_MOVEMENT_AUDIT
"FIA",704.005,0)
^MDC(704.005,
"FIA",704.005,0,0)
704.005P
"FIA",704.005,0,1)
y^y^f^^^^n^^n
"FIA",704.005,0,10)

"FIA",704.005,0,11)

"FIA",704.005,0,"RLRO")

"FIA",704.005,0,"VR")
1.0^MD
"FIA",704.005,704.005)
0
"INI")
MDPRE12
"IX",704.005,704.005,"APIMS",0)
704.005^APIMS^Index by PIMS event ID^R^^R^IR^I^704.005^^^^^S
"IX",704.005,704.005,"APIMS",.1,0)
^^3^3^3090327^
"IX",704.005,704.005,"APIMS",.1,1,0)
This index will maintain a relationship with PIMS patient movement data.  
"IX",704.005,704.005,"APIMS",.1,2,0)
Even when patient movement data may no longer exist within the PIMS, this 
"IX",704.005,704.005,"APIMS",.1,3,0)
index maintains these relationships as needed by the CP Flowsheets.
"IX",704.005,704.005,"APIMS",1)
S ^MDC(704.005,"APIMS",$E(X(1),1,30),$E(X(2),1,30),$E(X(3),1,30),DA)=""
"IX",704.005,704.005,"APIMS",2)
K ^MDC(704.005,"APIMS",$E(X(1),1,30),$E(X(2),1,30),$E(X(3),1,30),DA)
"IX",704.005,704.005,"APIMS",2.5)
K ^MDC(704.005,"APIMS")
"IX",704.005,704.005,"APIMS",11.1,0)
^.114IA^3^3
"IX",704.005,704.005,"APIMS",11.1,1,0)
1^F^704.005^.08^30^1^F
"IX",704.005,704.005,"APIMS",11.1,2,0)
2^F^704.005^.01^30^2^F
"IX",704.005,704.005,"APIMS",11.1,3,0)
3^F^704.005^.04^30^3^F
"IX",704.005,704.005,"LAST",0)
704.005^LAST^Index by Patient, Message and Event type, and Date.^R^^R^IR^I^704.005^^^^^LS
"IX",704.005,704.005,"LAST",.1,0)
^^9^9^3070806^
"IX",704.005,704.005,"LAST",.1,1,0)
This index will allow us to search for the most recent message type and 
"IX",704.005,704.005,"LAST",.1,2,0)
event type for a patient.  The intended use case is that, in some 
"IX",704.005,704.005,"LAST",.1,3,0)
instances, cancellations of transfers or discharges may be sent several 
"IX",704.005,704.005,"LAST",.1,4,0)
months after the event to which they refer in order to make the G & L 
"IX",704.005,704.005,"LAST",.1,5,0)
sheets balance correctly.  We will NOT wish to propagate these events to 
"IX",704.005,704.005,"LAST",.1,6,0)
the devices.  So, if we receive a movement cancel request (an A11, A12, 
"IX",704.005,704.005,"LAST",.1,7,0)
or A13), we will check to see what the most recent movement was.  If it 
"IX",704.005,704.005,"LAST",.1,8,0)
doesn't match what was in the most recent A01, A02, or A03, then we'll 
"IX",704.005,704.005,"LAST",.1,9,0)
just drop the message.
"IX",704.005,704.005,"LAST",1)
S ^MDC(704.005,"LAST",$E(X(1),1,30),$E(X(2),1,3),$E(X(3),1,3),$E(X(4),1,15),DA)=""
"IX",704.005,704.005,"LAST",2)
K ^MDC(704.005,"LAST",$E(X(1),1,30),$E(X(2),1,3),$E(X(3),1,3),$E(X(4),1,15),DA)
"IX",704.005,704.005,"LAST",2.5)
K ^MDC(704.005,"LAST")
"IX",704.005,704.005,"LAST",11.1,0)
^.114IA^4^4
"IX",704.005,704.005,"LAST",11.1,1,0)
1^F^704.005^.01^30^1^F
"IX",704.005,704.005,"LAST",11.1,1,3)

"IX",704.005,704.005,"LAST",11.1,2,0)
2^F^704.005^.06^3^2^F
"IX",704.005,704.005,"LAST",11.1,2,3)

"IX",704.005,704.005,"LAST",11.1,3,0)
3^F^704.005^.07^3^3^F
"IX",704.005,704.005,"LAST",11.1,3,3)

"IX",704.005,704.005,"LAST",11.1,4,0)
4^F^704.005^.02^15^4^B
"IX",704.005,704.005,"LAST",11.1,4,3)

"KRN",101,6213,-1)
0^28
"KRN",101,6213,0)
MDC CPAN VS^Outbound for CLIO ADT A01 from MDC^^E^^^^^^^^
"KRN",101,6213,1,0)
^101.06^1^1^3090331^^
"KRN",101,6213,1,1,0)
Outbound for CLIO ADT A01 from MDC
"KRN",101,6213,99)
62382,24780
"KRN",101,6213,770)
MDC CPAN^^ADT^A01^^^^AL^NE^2.4^
"KRN",101,6213,775,0)
^101.0775PA^4^1
"KRN",101,6213,775,4,0)
6222
"KRN",101,6213,775,4,"^")
MDC ADT_A01 OUTBOUND
"KRN",101,6222,-1)
0^29
"KRN",101,6222,0)
MDC ADT_A01 OUTBOUND^Outbound ADT A01 Routing Protocol^^S^^^^^^^^
"KRN",101,6222,1,0)
^101.06^2^2^3090511^^^^
"KRN",101,6222,1,1,0)
This is the outbound routing protocol for all ADT A01 messages sent by 
"KRN",101,6222,1,2,0)
the CP/CliO system.
"KRN",101,6222,99)
62382,24780
"KRN",101,6222,770)
^MDC ADT OUTBOUND^^A01^^^^^^^ADT
"KRN",101,6222,771)

"KRN",101,6222,773)
0^0
"KRN",101,6222,774)
D GENDESTS^MDCPVDEF
"MBREQ")
0
"ORD",15,101)
101;15;;;PRO^XPDTA;PROF1^XPDIA;PROE1^XPDIA;PROF2^XPDIA;;PRODEL^XPDIA
"ORD",15,101,0)
PROTOCOL
"PKG",365,-1)
1^1
"PKG",365,0)
CLINICAL PROCEDURES^MD^Clinical Procedures
"PKG",365,20,0)
^9.402P^^
"PKG",365,22,0)
^9.49I^1^1
"PKG",365,22,1,0)
1.0^3090522^2980529^363
"PKG",365,22,1,"PAH",1,0)
12^3111101^4657
"PKG",365,22,1,"PAH",1,1,0)
^^2^2^3111101
"PKG",365,22,1,"PAH",1,1,1,0)
 
"PKG",365,22,1,"PAH",1,1,2,0)
MD*1.0*12 - Clinical Flowsheets HL7 Redesign
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
13
"RTN","MDCA01")
0^5^B207065
"RTN","MDCA01",1,0)
MDCA01 ;HINES OIFO/DP/BJ/TJ - HL7 Build Admit/Visit Message (A01);15-AUG-2007
"RTN","MDCA01",2,0)
 ;;1.0;CLINICAL PROCEDURES;**16,12**;Apr 01, 2004;Build 318
"RTN","MDCA01",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDCA01",4,0)
 ;
"RTN","MDCA01",5,0)
VALID ;;VDEF HL7 MESSAGE BUILDER
"RTN","MDCA01",6,0)
 Q
"RTN","MDCA01",7,0)
 ;
"RTN","MDCA01",8,0)
EN(KEY,VFLAG,OUT,MSHP) ;
"RTN","MDCA01",9,0)
 ;
"RTN","MDCA01",10,0)
 ; Inputs:
"RTN","MDCA01",11,0)
 ;         KEY - IEN of file to create message from
"RTN","MDCA01",12,0)
 ;         VFLAG - "V" for VistA HL7 destination
"RTN","MDCA01",13,0)
 ;         OUT - target array, passed by reference
"RTN","MDCA01",14,0)
 ;         MSHP - Piece 4 contains message subtype
"RTN","MDCA01",15,0)
 ;
"RTN","MDCA01",16,0)
 ; Output: Two part string with parts separated by "^"
"RTN","MDCA01",17,0)
 ;         Part 1: "LM" - output in local array passed in "OUT" parameter
"RTN","MDCA01",18,0)
 ;                 "GM" - output in ^TMP("HLS",$J)
"RTN","MDCA01",19,0)
 ;         Part 2: No longer used        ;
"RTN","MDCA01",20,0)
 ;
"RTN","MDCA01",21,0)
 ;
"RTN","MDCA01",22,0)
 Q $$BLDMSG^MDCADT(KEY,VFLAG,.OUT,MSHP,"A01")
"RTN","MDCA01",23,0)
 ;
"RTN","MDCA02")
0^6^B207137
"RTN","MDCA02",1,0)
MDCA02 ;HINES OIFO/DP/BJ/TJ - HL7 Build Transfer a Patient (A02) Message;21-JUN-2007
"RTN","MDCA02",2,0)
 ;;1.0;CLINICAL PROCEDURES;**16,12**;Apr 01, 2004;Build 318
"RTN","MDCA02",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDCA02",4,0)
 ;
"RTN","MDCA02",5,0)
VALID ;;VDEF HL7 MESSAGE BUILDER
"RTN","MDCA02",6,0)
 Q
"RTN","MDCA02",7,0)
 ;
"RTN","MDCA02",8,0)
EN(KEY,VFLAG,OUT,MSHP) ;
"RTN","MDCA02",9,0)
 ;
"RTN","MDCA02",10,0)
 ; Inputs:
"RTN","MDCA02",11,0)
 ;         KEY - IEN of file to create message from
"RTN","MDCA02",12,0)
 ;         VFLAG - "V" for VistA HL7 destination
"RTN","MDCA02",13,0)
 ;         OUT - target array, passed by reference
"RTN","MDCA02",14,0)
 ;         MSHP - Piece 4 contains message subtype
"RTN","MDCA02",15,0)
 ;
"RTN","MDCA02",16,0)
 ; Output: Two part string with parts separated by "^"
"RTN","MDCA02",17,0)
 ;         Part 1: "LM" - output in local array passed in "OUT" parameter
"RTN","MDCA02",18,0)
 ;                 "GM" - output in ^TMP("HLS",$J)
"RTN","MDCA02",19,0)
 ;         Part 2: No longer used        ;
"RTN","MDCA02",20,0)
 ;
"RTN","MDCA02",21,0)
 ;
"RTN","MDCA02",22,0)
 Q $$BLDMSG^MDCADT(KEY,VFLAG,.OUT,MSHP,"A02")
"RTN","MDCA02",23,0)
 ;
"RTN","MDCA03")
0^7^B207209
"RTN","MDCA03",1,0)
MDCA03 ;HINES OIFO/DP/BJ/TJ - HL7 Build Discharge/End Visit (A03) Message;21-JUN-2007
"RTN","MDCA03",2,0)
 ;;1.0;CLINICAL PROCEDURES;**16,12**;Apr 01, 2004;Build 318
"RTN","MDCA03",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDCA03",4,0)
 ;
"RTN","MDCA03",5,0)
VALID ;;VDEF HL7 MESSAGE BUILDER
"RTN","MDCA03",6,0)
 Q
"RTN","MDCA03",7,0)
 ;
"RTN","MDCA03",8,0)
EN(KEY,VFLAG,OUT,MSHP) ;
"RTN","MDCA03",9,0)
 ;
"RTN","MDCA03",10,0)
 ; Inputs:
"RTN","MDCA03",11,0)
 ;         KEY - IEN of file to create message from
"RTN","MDCA03",12,0)
 ;         VFLAG - "V" for VistA HL7 destination
"RTN","MDCA03",13,0)
 ;         OUT - target array, passed by reference
"RTN","MDCA03",14,0)
 ;         MSHP - Piece 4 contains message subtype
"RTN","MDCA03",15,0)
 ;
"RTN","MDCA03",16,0)
 ; Output: Two part string with parts separated by "^"
"RTN","MDCA03",17,0)
 ;         Part 1: "LM" - output in local array passed in "OUT" parameter
"RTN","MDCA03",18,0)
 ;                 "GM" - output in ^TMP("HLS",$J)
"RTN","MDCA03",19,0)
 ;         Part 2: No longer used        ;
"RTN","MDCA03",20,0)
 ;
"RTN","MDCA03",21,0)
 ;
"RTN","MDCA03",22,0)
 Q $$BLDMSG^MDCADT(KEY,VFLAG,.OUT,MSHP,"A03")
"RTN","MDCA03",23,0)
 ;
"RTN","MDCA08")
0^8^B207569
"RTN","MDCA08",1,0)
MDCA08 ;HINES OIFO/DP/BJ/TJ - HL7 Build Update Patient Info (A08) Message;21-JUN-2007
"RTN","MDCA08",2,0)
 ;;1.0;CLINICAL PROCEDURES;**16,12**;Apr 01, 2004;Build 318
"RTN","MDCA08",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDCA08",4,0)
 ;
"RTN","MDCA08",5,0)
VALID ;;VDEF HL7 MESSAGE BUILDER
"RTN","MDCA08",6,0)
 Q
"RTN","MDCA08",7,0)
 ;
"RTN","MDCA08",8,0)
EN(KEY,VFLAG,OUT,MSHP) ;
"RTN","MDCA08",9,0)
 ;
"RTN","MDCA08",10,0)
 ; Inputs:
"RTN","MDCA08",11,0)
 ;         KEY - IEN of file to create message from
"RTN","MDCA08",12,0)
 ;         VFLAG - "V" for VistA HL7 destination
"RTN","MDCA08",13,0)
 ;         OUT - target array, passed by reference
"RTN","MDCA08",14,0)
 ;         MSHP - Piece 4 contains message subtype
"RTN","MDCA08",15,0)
 ;
"RTN","MDCA08",16,0)
 ; Output: Two part string with parts separated by "^"
"RTN","MDCA08",17,0)
 ;         Part 1: "LM" - output in local array passed in "OUT" parameter
"RTN","MDCA08",18,0)
 ;                 "GM" - output in ^TMP("HLS",$J)
"RTN","MDCA08",19,0)
 ;         Part 2: No longer used        ;
"RTN","MDCA08",20,0)
 ;
"RTN","MDCA08",21,0)
 ;
"RTN","MDCA08",22,0)
 Q $$BLDMSG^MDCADT(KEY,VFLAG,.OUT,MSHP,"A08")
"RTN","MDCA08",23,0)
 ;
"RTN","MDCA11")
0^9^B207135
"RTN","MDCA11",1,0)
MDCA11 ;HINES OIFO/DP/BJ/TJ - HL7 Build Cancel Admit/Visit Notice (A11) Message;21-JUN-2007
"RTN","MDCA11",2,0)
 ;;1.0;CLINICAL PROCEDURES;**16,12**;Apr 01, 2004;Build 318
"RTN","MDCA11",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDCA11",4,0)
 ;
"RTN","MDCA11",5,0)
VALID ;;VDEF HL7 MESSAGE BUILDER
"RTN","MDCA11",6,0)
 Q
"RTN","MDCA11",7,0)
 ;
"RTN","MDCA11",8,0)
EN(KEY,VFLAG,OUT,MSHP) ;
"RTN","MDCA11",9,0)
 ;
"RTN","MDCA11",10,0)
 ; Inputs:
"RTN","MDCA11",11,0)
 ;         KEY - IEN of file to create message from
"RTN","MDCA11",12,0)
 ;         VFLAG - "V" for VistA HL7 destination
"RTN","MDCA11",13,0)
 ;         OUT - target array, passed by reference
"RTN","MDCA11",14,0)
 ;         MSHP - Piece 4 contains message subtype
"RTN","MDCA11",15,0)
 ;
"RTN","MDCA11",16,0)
 ; Output: Two part string with parts separated by "^"
"RTN","MDCA11",17,0)
 ;         Part 1: "LM" - output in local array passed in "OUT" parameter
"RTN","MDCA11",18,0)
 ;                 "GM" - output in ^TMP("HLS",$J)
"RTN","MDCA11",19,0)
 ;         Part 2: No longer used        ;
"RTN","MDCA11",20,0)
 ;
"RTN","MDCA11",21,0)
 ;
"RTN","MDCA11",22,0)
 Q $$BLDMSG^MDCADT(KEY,VFLAG,.OUT,MSHP,"A11")
"RTN","MDCA11",23,0)
 ;
"RTN","MDCA12")
0^10^B207207
"RTN","MDCA12",1,0)
MDCA12 ;HINES OIFO/DP/BJ/TJ - HL7 Build Cancel Transfer (A12) Message;21-JUN-2007
"RTN","MDCA12",2,0)
 ;;1.0;CLINICAL PROCEDURES;**16,12**;Apr 01, 2004;Build 318
"RTN","MDCA12",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDCA12",4,0)
 ;
"RTN","MDCA12",5,0)
VALID ;;VDEF HL7 MESSAGE BUILDER
"RTN","MDCA12",6,0)
 Q
"RTN","MDCA12",7,0)
 ;
"RTN","MDCA12",8,0)
EN(KEY,VFLAG,OUT,MSHP) ;
"RTN","MDCA12",9,0)
 ;
"RTN","MDCA12",10,0)
 ; Inputs:
"RTN","MDCA12",11,0)
 ;         KEY - IEN of file to create message from
"RTN","MDCA12",12,0)
 ;         VFLAG - "V" for VistA HL7 destination
"RTN","MDCA12",13,0)
 ;         OUT - target array, passed by reference
"RTN","MDCA12",14,0)
 ;         MSHP - Piece 4 contains message subtype
"RTN","MDCA12",15,0)
 ;
"RTN","MDCA12",16,0)
 ; Output: Two part string with parts separated by "^"
"RTN","MDCA12",17,0)
 ;         Part 1: "LM" - output in local array passed in "OUT" parameter
"RTN","MDCA12",18,0)
 ;                 "GM" - output in ^TMP("HLS",$J)
"RTN","MDCA12",19,0)
 ;         Part 2: No longer used        ;
"RTN","MDCA12",20,0)
 ;
"RTN","MDCA12",21,0)
 ;
"RTN","MDCA12",22,0)
 Q $$BLDMSG^MDCADT(KEY,VFLAG,.OUT,MSHP,"A12")
"RTN","MDCA12",23,0)
 ;
"RTN","MDCA13")
0^11^B207279
"RTN","MDCA13",1,0)
MDCA13 ;HINES OIFO/DP/BJ/TJ - HL7 Build Cancel Discharge/Visit End (A13) Message;21-JUN-2007
"RTN","MDCA13",2,0)
 ;;1.0;CLINICAL PROCEDURES;**16,12**;Apr 01, 2004;Build 318
"RTN","MDCA13",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDCA13",4,0)
 ;
"RTN","MDCA13",5,0)
VALID ;;VDEF HL7 MESSAGE BUILDER
"RTN","MDCA13",6,0)
 Q
"RTN","MDCA13",7,0)
 ;
"RTN","MDCA13",8,0)
EN(KEY,VFLAG,OUT,MSHP) ;
"RTN","MDCA13",9,0)
 ;
"RTN","MDCA13",10,0)
 ; Inputs:
"RTN","MDCA13",11,0)
 ;         KEY - IEN of file to create message from
"RTN","MDCA13",12,0)
 ;         VFLAG - "V" for VistA HL7 destination
"RTN","MDCA13",13,0)
 ;         OUT - target array, passed by reference
"RTN","MDCA13",14,0)
 ;         MSHP - Piece 4 contains message subtype
"RTN","MDCA13",15,0)
 ;
"RTN","MDCA13",16,0)
 ; Output: Two part string with parts separated by "^"
"RTN","MDCA13",17,0)
 ;         Part 1: "LM" - output in local array passed in "OUT" parameter
"RTN","MDCA13",18,0)
 ;                 "GM" - output in ^TMP("HLS",$J)
"RTN","MDCA13",19,0)
 ;         Part 2: No longer used        ;
"RTN","MDCA13",20,0)
 ;
"RTN","MDCA13",21,0)
 ;
"RTN","MDCA13",22,0)
 Q $$BLDMSG^MDCADT(KEY,VFLAG,.OUT,MSHP,"A13")
"RTN","MDCA13",23,0)
 ;
"RTN","MDCADT")
0^12^B16434281
"RTN","MDCADT",1,0)
MDCADT ;HINES OIFO/DP/BJ/TJ - HL7 Build ADT Axx Messages;10 Aug 2007
"RTN","MDCADT",2,0)
 ;;1.0;CLINICAL PROCEDURES;**16,12**;Apr 01, 2004;Build 318
"RTN","MDCADT",3,0)
 ; Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDCADT",4,0)
 ;
"RTN","MDCADT",5,0)
 ; This routine uses the following Integration Agreements (IAs):
"RTN","MDCADT",6,0)
 ;  # 2050       - $$EZBLD^DIALOG()      FileMan         (supported)
"RTN","MDCADT",7,0)
 ;  # 2887       - $$GETAPP^HLCS2 call   HL7             (supported)
"RTN","MDCADT",8,0)
 ;  #10106       - $$HLDATE^HLFNC        HL7             (supported)
"RTN","MDCADT",9,0)
 ;  #10070       - ^XMD call             MailMan         (supported)
"RTN","MDCADT",10,0)
 ;  #10035       - access ^DPT(          Registration    (supported)
"RTN","MDCADT",11,0)
 ;
"RTN","MDCADT",12,0)
VALID ;HL7 MESSAGE BUILDER
"RTN","MDCADT",13,0)
 ; Creates HL7 V2.4 "Axx Type" message
"RTN","MDCADT",14,0)
 ; stolen from GMVVDEF1
"RTN","MDCADT",15,0)
 ; segments returned will fall into 1 of four categories
"RTN","MDCADT",16,0)
 ;    Case 1 = simple unsubscripted variable       e.g. SEG="IN1^Blue Cross.....^^"
"RTN","MDCADT",17,0)
 ;    Case 2 = single segment, 2 or more nodes     e.g. SEG="PD1^Smith,John...^^"
"RTN","MDCADT",18,0)
 ;                                                      SEG(1)="3505 94ST^....^^"
"RTN","MDCADT",19,0)
 ;    Case 3 = Multiple segments, 1 node each      e.g. SEG(1,0)="NK1^Smith,Mary^2...^^"
"RTN","MDCADT",20,0)
 ;                                                      SEG(2,0)="NK1^Smith,Joey^3...^^"
"RTN","MDCADT",21,0)
 ;    Case 4 = Multiple segments, 1 or more nodes  e.g. SEG(1,0)="ZCL^ data ...^^"
"RTN","MDCADT",22,0)
 ;                                                      SEG(1,0,1)="^ more data ...^^"
"RTN","MDCADT",23,0)
 ;                                                      SEG(1,0,2)="^ end of data ...^^"
"RTN","MDCADT",24,0)
 ;                                                      SEG(2,0)="ZCL^ all of segment ^^"
"RTN","MDCADT",25,0)
 ;                                                      SEG(3,0)="ZCL^ another segment  ^^"
"RTN","MDCADT",26,0)
 ;                                                      SEG(3,0,1)=" etc., etc.  ^^"
"RTN","MDCADT",27,0)
 ;  I $D(SEG)=1          Case 1
"RTN","MDCADT",28,0)
 ;  I $D(SEG)=11         Case 2
"RTN","MDCADT",29,0)
 ;  I $D(SEG)=10         Case 3 or 4
"RTN","MDCADT",30,0)
 Q
"RTN","MDCADT",31,0)
 ;
"RTN","MDCADT",32,0)
BLDMSG(KEY,VFLAG,OUT,MSHP,MDCEVN) ;
"RTN","MDCADT",33,0)
 ;
"RTN","MDCADT",34,0)
 ; Inputs:
"RTN","MDCADT",35,0)
 ;         KEY           - IEN of file to create message from
"RTN","MDCADT",36,0)
 ;         VFLAG         - "V" for VistA HL7 destination (default)
"RTN","MDCADT",37,0)
 ;         OUT           - target ARRAY, passed by reference
"RTN","MDCADT",38,0)
 ;         MSHP          - "ADT"
"RTN","MDCADT",39,0)
 ;         MDCEVN        - message type, e.g. A04
"RTN","MDCADT",40,0)
 ;
"RTN","MDCADT",41,0)
 ; Output: Two part string with parts separated by "^"
"RTN","MDCADT",42,0)
 ;         Part 1: "LM" - output in local array passed in "OUT" parameter
"RTN","MDCADT",43,0)
 ;                 "GM" - output in ^TMP("HLS",$J)
"RTN","MDCADT",44,0)
 ;         Part 2: No longer used        ;
"RTN","MDCADT",45,0)
 ;
"RTN","MDCADT",46,0)
 N MDCMAIL,IENSSAVE,TARGET
"RTN","MDCADT",47,0)
 N MDCS,EV,MDCERAY,MDCERR,MDCSEG,MDCIEN
"RTN","MDCADT",48,0)
 ;
"RTN","MDCADT",49,0)
 S IENSSAVE=$G(IENS)
"RTN","MDCADT",50,0)
 S MDCIEN=KEY,MDCS=0
"RTN","MDCADT",51,0)
 K ^TMP("HLS",$J),OUT
"RTN","MDCADT",52,0)
 ;S ARRAY="^TMP("_"""HLS"""_",$J,MDCS)",TARGET="GM^"  ; array is a global
"RTN","MDCADT",53,0)
 S ARRAY="OUT("_"""HLS"""_",MDCS)",TARGET="LM^"  ;  array is a local variable
"RTN","MDCADT",54,0)
 ;
"RTN","MDCADT",55,0)
 ;  Get DATA
"RTN","MDCADT",56,0)
 M MDCDATA=^MDC(704.005,KEY)
"RTN","MDCADT",57,0)
 ;
"RTN","MDCADT",58,0)
 ;  Validate Patient Movement Data
"RTN","MDCADT",59,0)
 ;
"RTN","MDCADT",60,0)
 I '$D(MDCDATA) D  Q TARGET
"RTN","MDCADT",61,0)
 . S MDCERAY(1)=KEY
"RTN","MDCADT",62,0)
 . S MDCERR=$$EZBLD^DIALOG(7040020.002,.MDCERAY)
"RTN","MDCADT",63,0)
 . D ERR(MDCERR)
"RTN","MDCADT",64,0)
 ;
"RTN","MDCADT",65,0)
 ;  Get and Validate Patient IEN
"RTN","MDCADT",66,0)
 S DFN=+$P($G(MDCDATA(0)),U)
"RTN","MDCADT",67,0)
 I '$D(^DPT(DFN,0))!(DFN=0) D  Q TARGET
"RTN","MDCADT",68,0)
 . S MDCERAY(1)=DFN
"RTN","MDCADT",69,0)
 . S MDCERR=$$EZBLD^DIALOG(7040020.003,.MDCERAY)
"RTN","MDCADT",70,0)
 . D ERR(MDCERR)
"RTN","MDCADT",71,0)
 ;
"RTN","MDCADT",72,0)
 ; Build segments
"RTN","MDCADT",73,0)
 ;
"RTN","MDCADT",74,0)
EVN ; EVN - Event Type with EVN.7.1 - required
"RTN","MDCADT",75,0)
 D EN^MDCEVN(MDCEVN,.MDCIEN,.MDCSEG,.MDCERR) I $D(MDCERR) D ERR(MDCERR) Q TARGET
"RTN","MDCADT",76,0)
 I '$D(MDCSEG) D  Q TARGET                   ; missing segment
"RTN","MDCADT",77,0)
 . S MDCPARM(1)="EVN",MDCPARM(2)=+$G(MDCIEN),MDCPARM(3)=405
"RTN","MDCADT",78,0)
 . S MDCERR=$$EZBLD^DIALOG(7040020.004,.MDCPARM)
"RTN","MDCADT",79,0)
 . D ERR(MDCERR)
"RTN","MDCADT",80,0)
 D SAVE
"RTN","MDCADT",81,0)
 ;
"RTN","MDCADT",82,0)
PID ; PID - Patient Identification - required
"RTN","MDCADT",83,0)
 D EN^MDCPID(DFN,.MDCSEG,.MDCERR) I $D(MDCERR) D ERR(MDCERR) Q TARGET
"RTN","MDCADT",84,0)
 I '$D(MDCSEG) D  Q TARGET                      ; missing segment
"RTN","MDCADT",85,0)
 . S MDCPARM(1)="PID",MDCPARM(2)=DFN,MDCPARM(3)=2
"RTN","MDCADT",86,0)
 . S MDCERR=$$EZBLD^DIALOG(7040020.004,.MDCPARM)
"RTN","MDCADT",87,0)
 . D ERR(MDCERR)
"RTN","MDCADT",88,0)
 D SAVE
"RTN","MDCADT",89,0)
 ;
"RTN","MDCADT",90,0)
PV1 ; PV1 - Patient Visit - required or empty
"RTN","MDCADT",91,0)
 D EN^MDCPV1(.MDCDATA,.MDCSEG,.MDCERR) I $D(MDCERR) D ERR(MDCERR) Q TARGET
"RTN","MDCADT",92,0)
 I '$D(MDCSEG) D  Q TARGET                      ; missing segment
"RTN","MDCADT",93,0)
 . S MDCPARM(1)="PV1",MDCPARM(MDCIEN)=DFN,MDCPARM(3)=405
"RTN","MDCADT",94,0)
 . S MDCERR=$$EZBLD^DIALOG(7040020.004,.MDCPARM)
"RTN","MDCADT",95,0)
 . D ERR(MDCERR)
"RTN","MDCADT",96,0)
 D SAVE
"RTN","MDCADT",97,0)
 ;
"RTN","MDCADT",98,0)
 ; Done building segments, clean up and exit
"RTN","MDCADT",99,0)
 K PARAM,MDCSITE,MDCDATA
"RTN","MDCADT",100,0)
 Q TARGET
"RTN","MDCADT",101,0)
 ;
"RTN","MDCADT",102,0)
SAVE ;
"RTN","MDCADT",103,0)
 I $D(MDCSEG)#10 D  ; single segment, one node
"RTN","MDCADT",104,0)
 . S MDCS=MDCS+1
"RTN","MDCADT",105,0)
 . M @ARRAY=MDCSEG
"RTN","MDCADT",106,0)
 I $D(MDCSEG)=10 D       ; maybe multiple segments, multiple nodes
"RTN","MDCADT",107,0)
 . N I
"RTN","MDCADT",108,0)
 . S I=""
"RTN","MDCADT",109,0)
 . F  D  Q:I=""
"RTN","MDCADT",110,0)
 .. S I=$O(MDCSEG(I)) Q:I=""
"RTN","MDCADT",111,0)
 .. S MDCS=MDCS+1
"RTN","MDCADT",112,0)
 .. M @ARRAY=MDCSEG(I,0)
"RTN","MDCADT",113,0)
 K MDCSEG
"RTN","MDCADT",114,0)
 ; Move local array to global if it's getting too big
"RTN","MDCADT",115,0)
 I $P(TARGET,U)="LM",$S<16000 D
"RTN","MDCADT",116,0)
 . K ^TMP("HLS",$J) M ^TMP("HLS",$J)=OUT("HLS") K OUT("HLS")
"RTN","MDCADT",117,0)
 . S $P(TARGET,U)="GM",ARRAY="^TMP("_"""HLS"""_",$J,MDCS)"
"RTN","MDCADT",118,0)
 Q
"RTN","MDCADT",119,0)
 ;
"RTN","MDCADT",120,0)
 ;  Error Processing
"RTN","MDCADT",121,0)
ERR(MDCERR) ;
"RTN","MDCADT",122,0)
 ;    Input:     MDCERR - Error message.
"RTN","MDCADT",123,0)
 N IENS,ZTSTOP
"RTN","MDCADT",124,0)
 S IENS=$G(IENSSAVE,MDCIEN)
"RTN","MDCADT",125,0)
 D MAILERR
"RTN","MDCADT",126,0)
 S ZTSTOP=1
"RTN","MDCADT",127,0)
 K MDCPARM,OUT
"RTN","MDCADT",128,0)
 Q
"RTN","MDCADT",129,0)
 ;
"RTN","MDCADT",130,0)
 ;  Mail Message
"RTN","MDCADT",131,0)
MAILERR ; mail error notification to g.developers
"RTN","MDCADT",132,0)
 N RECEIVER,XMDUZ,XMY,XMSUB,XMTEXT,HL7DATE,%
"RTN","MDCADT",133,0)
 D NOW^%DTC
"RTN","MDCADT",134,0)
 S HL7DATE=$$HLDATE^HLFNC(%,"TS")
"RTN","MDCADT",135,0)
 S RECEIVER=$$GETAPP^HLCS2(HL("SAN"))
"RTN","MDCADT",136,0)
 S RECEIVER="g."_$P(RECEIVER,U)
"RTN","MDCADT",137,0)
 S XMDUZ=.5
"RTN","MDCADT",138,0)
 S XMY(RECEIVER)=""
"RTN","MDCADT",139,0)
 S XMSUB=" CP Flowsheets HL7 Error Message; file# 704.005 IEN ="_KEY_" (ADT Event #"_MDCEVN_")"
"RTN","MDCADT",140,0)
 S XMTEXT="MDCMAIL("
"RTN","MDCADT",141,0)
 S MDCMAIL(1)=MDCERR
"RTN","MDCADT",142,0)
 D ^XMD
"RTN","MDCADT",143,0)
 Q
"RTN","MDCEVN")
0^13^B5482617
"RTN","MDCEVN",1,0)
MDCEVN ;HINES OIFO/DP/BJ/TJ - Wrapper to create HL7 EVN segment;30 May 2006
"RTN","MDCEVN",2,0)
 ;;1.0;CLINICAL PROCEDURES;**16,12**;Apr 01, 2004;Build 318
"RTN","MDCEVN",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDCEVN",4,0)
 ;
"RTN","MDCEVN",5,0)
 ; This routine uses the following IAs:
"RTN","MDCEVN",6,0)
 ;  # 2050       - $$EZBLD^DIALOG()              FileMan         (supported)
"RTN","MDCEVN",7,0)
 ;  #  417       - ^DG(40.8; node  0, piece  7   Registration    (controlled, subscribed)
"RTN","MDCEVN",8,0)
 ;  # 3016       - $$EVN^VAFHLEVN call           Registration    (controlled, subscribed)
"RTN","MDCEVN",9,0)
 ;  #10112       - $$SITE^VASITE() call          Registration    (supported)
"RTN","MDCEVN",10,0)
 ;  # 2171       - $$STA^XUAF4() call            Kernel          (supported)
"RTN","MDCEVN",11,0)
 ;
"RTN","MDCEVN",12,0)
VALID ;;HL7 MESSAGE BUILDER
"RTN","MDCEVN",13,0)
 ;
"RTN","MDCEVN",14,0)
 Q
"RTN","MDCEVN",15,0)
 ;
"RTN","MDCEVN",16,0)
EN(IBEVENT,REC,EVNSEG,ERR) ;
"RTN","MDCEVN",17,0)
 ;               REC    = ^IBBAA(375,n array
"RTN","MDCEVN",18,0)
 ;               EVNSEG = Output EVN segment
"RTN","MDCEVN",19,0)
 ;               ERR    = Error message
"RTN","MDCEVN",20,0)
 ;
"RTN","MDCEVN",21,0)
 N FS,PATLOC,FIL408D0,FIL4D0,FIL44D0,ERRAY,STATNO
"RTN","MDCEVN",22,0)
 S FS=HL("FS")
"RTN","MDCEVN",23,0)
 K ERR
"RTN","MDCEVN",24,0)
 S EVNSEG=$$EVN^VAFHLEVN(IBEVENT,"","")            ; using OTS
"RTN","MDCEVN",25,0)
 ;
"RTN","MDCEVN",26,0)
 Q:'$D(EVNSEG)
"RTN","MDCEVN",27,0)
 I $P(EVNSEG,FS,2)'=IBEVENT D  Q
"RTN","MDCEVN",28,0)
 .S ERRAY(1)="Event Type Code EVN.1",ERRAY(2)="EVN",ERRAY(3)=REC
"RTN","MDCEVN",29,0)
 .S ERR=$$EZBLD^DIALOG(7040020.004,.ERRAY)
"RTN","MDCEVN",30,0)
 .Q
"RTN","MDCEVN",31,0)
 I +$P(EVNSEG,FS,3)'>0 D  Q
"RTN","MDCEVN",32,0)
 .S ERRAY(1)="Recorded Date/Time EVN.2.1",ERRAY(2)="EVN",ERRAY(3)=REC
"RTN","MDCEVN",33,0)
 .S ERR=$$EZBLD^DIALOG(7040020.004,.ERRAY)
"RTN","MDCEVN",34,0)
 .Q
"RTN","MDCEVN",35,0)
 ; Event Facility EVN.7.1  -  START WITH 375,13
"RTN","MDCEVN",36,0)
 S FIL408D0=+$P($G(REC(13)),U,1)
"RTN","MDCEVN",37,0)
 I FIL408D0>0 S FIL4D0=+$P($G(^DG(40.8,FIL408D0,0)),U,7)     ; Medical Center Division
"RTN","MDCEVN",38,0)
 I +$G(FIL4D0)>0 S STATNO=$$STA^XUAF4(FIL4D0)                ; Institution File
"RTN","MDCEVN",39,0)
 I $G(STATNO)]"" S $P(EVNSEG,FS,8)=STATNO Q
"RTN","MDCEVN",40,0)
 ;
"RTN","MDCEVN",41,0)
 ; no hit, try 375,1.03 pointer to Hospital Location File #44
"RTN","MDCEVN",42,0)
 S FIL44D0=+$P($G(REC("PV1")),U,3)
"RTN","MDCEVN",43,0)
 NEW DIERR
"RTN","MDCEVN",44,0)
 I FIL44D0>0 N DIERR S FIL408D0=$$GET1^DIQ(44,FIL44D0_",",3.5,"I")  ; Hospital Location File
"RTN","MDCEVN",45,0)
 I FIL408D0>0 S FIL4D0=+$P($G(^DG(40.8,0,FIL408D0,0)),U,7)   ; Medical Center Division
"RTN","MDCEVN",46,0)
 I +$G(FIL4D0)>0 S STATNO=$$STA^XUAF4(FIL4D0)                ; Institution File
"RTN","MDCEVN",47,0)
 I $G(STATNO)]"" S $P(EVNSEG,FS,8)=STATNO Q
"RTN","MDCEVN",48,0)
 ;
"RTN","MDCEVN",49,0)
 ; no hit, try $$SITE^VASITE()
"RTN","MDCEVN",50,0)
 N IBBVSITE
"RTN","MDCEVN",51,0)
 S IBBVSITE=+$$SITE^VASITE()
"RTN","MDCEVN",52,0)
 I IBBVSITE>0 S $P(EVNSEG,FS,8)=IBBVSITE Q
"RTN","MDCEVN",53,0)
 ;
"RTN","MDCEVN",54,0)
 ; still no hit, error
"RTN","MDCEVN",55,0)
 S ERRAY(1)="Event Facility EVN.7.1",ERRAY(2)="EVN",ERRAY(3)=REC
"RTN","MDCEVN",56,0)
 S ERR=$$EZBLD^DIALOG(7040020.004,.ERRAY)
"RTN","MDCEVN",57,0)
 Q
"RTN","MDCEVN",58,0)
 ;
"RTN","MDCPMESQ")
0^23^B5560920
"RTN","MDCPMESQ",1,0)
MDCPMESQ ;HINES OIFO/TJ - CP Outbound message queue routine.;30 Jul 2007 ;10/5/11  15:39
"RTN","MDCPMESQ",2,0)
 ;;1.0;CLINICAL PROCEDURES;**12**;Apr 01, 2004;Build 318
"RTN","MDCPMESQ",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDCPMESQ",4,0)
 ;
"RTN","MDCPMESQ",5,0)
 ; This routine uses the following IAs:
"RTN","MDCPMESQ",6,0)
 ;  #10061       - IN5^VADPT                        Registration                   (supported)
"RTN","MDCPMESQ",7,0)
 ;  # 2817       - access "AD" x-ref per ^DG(40.8,  Registration     (controlled subscription)
"RTN","MDCPMESQ",8,0)
 ;  # 1373       - access ^ORD(101                  Kernel           (controlled subscription)
"RTN","MDCPMESQ",9,0)
 ;  #10039       - access ^DIC(42                   Registration                   (supported)
"RTN","MDCPMESQ",10,0)
 ;  # 1181       - access DGPM* event variables     Registration     (controlled subscription)
"RTN","MDCPMESQ",11,0)
 ;  #10063       - ^%ZTLOAD TaskMan calls/variables Kernel                         (supported)
"RTN","MDCPMESQ",12,0)
 ;  #2164        - GENERATE^HLMA                    HL7                            (supported)
"RTN","MDCPMESQ",13,0)
 ;  #2161        - INIT^HLMA and HL7 env. variables HL7                            (supported)
"RTN","MDCPMESQ",14,0)
 ;
"RTN","MDCPMESQ",15,0)
 ; only call via line tags.
"RTN","MDCPMESQ",16,0)
 Q
"RTN","MDCPMESQ",17,0)
QUE(MDCIEN,MDCEVN,MDCCOMM) ;
"RTN","MDCPMESQ",18,0)
 ; XUTMDEVQ is a little faster and easier here since we're not actually trying to keep the task ID from TaskMan.
"RTN","MDCPMESQ",19,0)
 N MDX S MDX("ZTDTH")=$H
"RTN","MDCPMESQ",20,0)
 S MDCCOMM="HL7-TASK-QUEUE "_$S($$NODEV^XUTMDEVQ("SEND^MDCPMESQ","MD CP Flowsheets HL7","MDCIEN;MDCEVN")<0:"FAILURE",1:"SUCCESS")
"RTN","MDCPMESQ",21,0)
 Q MDCCOMM["SUCCESS"
"RTN","MDCPMESQ",22,0)
 ;
"RTN","MDCPMESQ",23,0)
SEND    ;
"RTN","MDCPMESQ",24,0)
 ; ASSUME MDCIEN AND MDCEVN ARE AS BUILT ABOVE
"RTN","MDCPMESQ",25,0)
 K HLA,HLEVN,RESULTS,SEND,VFLAG,MSHP
"RTN","MDCPMESQ",26,0)
 N HL,HLES,HLECH,HLQ,HLFS,HLCS,MDCPROTO,MDCFDA
"RTN","MDCPMESQ",27,0)
 S MDCPROTO=$P($T(@MDCEVN),";",3)
"RTN","MDCPMESQ",28,0)
 ;
"RTN","MDCPMESQ",29,0)
 ; Step 1 - set up HL7 environment/var. for message
"RTN","MDCPMESQ",30,0)
 D INIT^HLFNC2(MDCPROTO,.HL)
"RTN","MDCPMESQ",31,0)
 I $G(HL) D  Q 0  ; error occurred
"RTN","MDCPMESQ",32,0)
 . ; Save error text back to record, so we can trace the error.
"RTN","MDCPMESQ",33,0)
 . K MDCFDA
"RTN","MDCPMESQ",34,0)
 . S MDCFDA(704.005,MDCIEN_",",.1)=$P(HL,2)
"RTN","MDCPMESQ",35,0)
 . D UPDATE^DIE("","MDCFDA")
"RTN","MDCPMESQ",36,0)
 S HLFS=$G(HL("FS")) I HLFS="" S HLFS="|"
"RTN","MDCPMESQ",37,0)
 S HLCM=$E(HL("ECH"),1),HLRP=$E(HL("ECH"),2)
"RTN","MDCPMESQ",38,0)
 S HLES=$E(HL("ECH"),3),HLSC=$E(HL("ECH"),4)
"RTN","MDCPMESQ",39,0)
 S HL7RC=HLES_HLFS_HLCM_HLRP_HLSC,HLECH=HL("ECH"),HLQ=HL("Q")
"RTN","MDCPMESQ",40,0)
 S HLMAXLEN=245
"RTN","MDCPMESQ",41,0)
 S VFLAG="V",OUT="",MSHP="ADT"
"RTN","MDCPMESQ",42,0)
 ;
"RTN","MDCPMESQ",43,0)
 ; Step 2 - Call to MDCADT to set up HLA array
"RTN","MDCPMESQ",44,0)
 D BLDMSG^MDCADT(MDCIEN,VFLAG,.HLA,MSHP,MDCEVN)
"RTN","MDCPMESQ",45,0)
 ;
"RTN","MDCPMESQ",46,0)
 ; Step 3 - Call HL7 to Transmit each message to all TCP links.
"RTN","MDCPMESQ",47,0)
 D GENERATE^HLMA(MDCPROTO,"LM",1,.MDCCOMM,"",.MDCOPTNS)
"RTN","MDCPMESQ",48,0)
 I +$P(MDCCOMM,U,2) D  Q 0
"RTN","MDCPMESQ",49,0)
 . K MDCFDA
"RTN","MDCPMESQ",50,0)
 . S MDCFDA(704.005,MDCIEN_",",.1)="HL7 GENERATION ERROR: "_$P(MDCCOMM,U,2)_" - "_$P(MDCCOMM,U,3)
"RTN","MDCPMESQ",51,0)
 . D UPDATE^DIE("","MDCFDA")
"RTN","MDCPMESQ",52,0)
 Q 1
"RTN","MDCPMESQ",53,0)
 ;
"RTN","MDCPMESQ",54,0)
PROTOCOL ;
"RTN","MDCPMESQ",55,0)
A01 ;;MDC CPAN VS; Admission
"RTN","MDCPMESQ",56,0)
A02 ;;MDC CPTP VS; Transfer
"RTN","MDCPMESQ",57,0)
A03 ;;MDC CPDE VS; Discharge
"RTN","MDCPMESQ",58,0)
A08 ;;MDC CPUPI VS; Retransmit PII
"RTN","MDCPMESQ",59,0)
A11 ;;MDC CPCAN VS; Cancel Admission
"RTN","MDCPMESQ",60,0)
A12 ;;MDC CPCT VS; Cancel Transfer
"RTN","MDCPMESQ",61,0)
A13 ;;MDC CPCDE VS; Cancel Discharge
"RTN","MDCPVDEF")
0^20^B62382929
"RTN","MDCPVDEF",1,0)
MDCPVDEF ;HINES OIFO/BJ/TJ - CP Outbound message record maintenance routine.;30 Jul 2007
"RTN","MDCPVDEF",2,0)
 ;;1.0;CLINICAL PROCEDURES;**16,12**;Apr 01, 2004;Build 318
"RTN","MDCPVDEF",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDCPVDEF",4,0)
 ;
"RTN","MDCPVDEF",5,0)
 ; This routine uses the following IAs:
"RTN","MDCPVDEF",6,0)
 ;  #10061       - IN5^VADPT                        Registration                   (supported)
"RTN","MDCPVDEF",7,0)
 ;  # 2817       - access "AD" x-ref per ^DG(40.8,  Registration     (controlled subscription)
"RTN","MDCPVDEF",8,0)
 ;  # 1373       - access ^ORD(101                  Kernel           (controlled subscription)
"RTN","MDCPVDEF",9,0)
 ;  #10039       - access ^DIC(42                   Registration                   (supported)
"RTN","MDCPVDEF",10,0)
 ;  # 1181       - access DGPM* event variables     Registration     (controlled subscription)
"RTN","MDCPVDEF",11,0)
 ;
"RTN","MDCPVDEF",12,0)
 ; only call via line tags.
"RTN","MDCPVDEF",13,0)
 Q
"RTN","MDCPVDEF",14,0)
 ;
"RTN","MDCPVDEF",15,0)
EN ;
"RTN","MDCPVDEF",16,0)
 ; Parses outbound message from PIMS to send to 3rd party devices via ADT/A?? message.
"RTN","MDCPVDEF",17,0)
 ;
"RTN","MDCPVDEF",18,0)
 ; Parameters -
"RTN","MDCPVDEF",19,0)
 ;   Covert (Preset local variables) -
"RTN","MDCPVDEF",20,0)
 ;     DFN - The internal entry number of the patient in file 2.
"RTN","MDCPVDEF",21,0)
 ;     DGPMDA - The movement internal entry number of the entry in the PATIENT_MOVEMENT
"RTN","MDCPVDEF",22,0)
 ;       file.
"RTN","MDCPVDEF",23,0)
 ;     DGPMA - Zero node of entry DGPMDA after the movement has been changed in the
"RTN","MDCPVDEF",24,0)
 ;       PATIENT MOVEMENT file.
"RTN","MDCPVDEF",25,0)
 ;     DGPMP - Zero node of entry DGPMDA before the movement has been changed in the
"RTN","MDCPVDEF",26,0)
 ;       PATIENT MOVEMENT file.
"RTN","MDCPVDEF",27,0)
 ;
"RTN","MDCPVDEF",28,0)
 ; Returns -
"RTN","MDCPVDEF",29,0)
 ;   None
"RTN","MDCPVDEF",30,0)
 ;
"RTN","MDCPVDEF",31,0)
 Q:'$D(DGPMA)&'$D(DGPMP)
"RTN","MDCPVDEF",32,0)
 N MDNODE,MDDIV,MDWARD,MDBED,MDEVNT,MDTYPE,MDDFN,MDMVMT,MDQUIT,MDDA,MDEDIT,VAIP
"RTN","MDCPVDEF",33,0)
 S MDNODE=$S(DGPMA]"":DGPMA,1:DGPMP)
"RTN","MDCPVDEF",34,0)
 S MDEDIT=(DGPMA]"")&(DGPMP]"")
"RTN","MDCPVDEF",35,0)
 S MDMVMT=DGPMDA
"RTN","MDCPVDEF",36,0)
 S MDDFN=$P(MDNODE,U,3)
"RTN","MDCPVDEF",37,0)
 S MDTYPE=+$P(MDNODE,U,2) Q:(MDTYPE'=MDTYPE\1)!(MDTYPE>3)!(MDTYPE<1)
"RTN","MDCPVDEF",38,0)
 S MDWARD=$P(MDNODE,U,6) I MDWARD=""  D LASTLOC(MDDFN,"WARD")
"RTN","MDCPVDEF",39,0)
 S MDBED=$P(MDNODE,U,7) I MDBED=""  D:MDTYPE'=1 LASTLOC(MDDFN,"BED")
"RTN","MDCPVDEF",40,0)
 I ($G(MDWARD)="")!($G(MDBED)="") Q  ;Q NOT inpatient activity 
"RTN","MDCPVDEF",41,0)
 ;
"RTN","MDCPVDEF",42,0)
 ; It appears that DIV might be empty if this is a single division facility.  So, we have to
"RTN","MDCPVDEF",43,0)
 ;   get a division of our own.
"RTN","MDCPVDEF",44,0)
 ;
"RTN","MDCPVDEF",45,0)
 S MDDIV=$P(^DIC(42,MDWARD,0),U,11)
"RTN","MDCPVDEF",46,0)
 I MDDIV="" S MDDIV=DUZ(2),MDDIV=$O(^DG(40.8,"AD",MDDIV,0))
"RTN","MDCPVDEF",47,0)
 ; Future inclusion: MD*1*23
"RTN","MDCPVDEF",48,0)
 ;I $G(^MDC(704.005,"APIMS",MDMVMT,MDDFN,MDWARD),0)&MDEDIT D RESEND^MDCPHL7C(MDDFN,MDDIV,MDWARD,MDBED,MDEDIT) Q  ; We've already seen this movement - Future A08
"RTN","MDCPVDEF",49,0)
 ;
"RTN","MDCPVDEF",50,0)
 ;   Movement         |  DGPMP      |   DGPMA
"RTN","MDCPVDEF",51,0)
 ;   ---------------------------------------------
"RTN","MDCPVDEF",52,0)
 ;   Admit            | Absent      |  Present
"RTN","MDCPVDEF",53,0)
 ;   Cancel Admit     | Present     |  Absent
"RTN","MDCPVDEF",54,0)
 ;   Transfer         | Absent      |  Present
"RTN","MDCPVDEF",55,0)
 ;   Cancel Xfer      | Present     |  Absent
"RTN","MDCPVDEF",56,0)
 ;   Discharge        | Absent      |  Present
"RTN","MDCPVDEF",57,0)
 ;   Cancel Discharge | Present     |  Absent
"RTN","MDCPVDEF",58,0)
 ;   Update           | Present old |  Present new
"RTN","MDCPVDEF",59,0)
 ;
"RTN","MDCPVDEF",60,0)
 S MDEVNT=$S(DGPMA]"":"A0",1:"A1")
"RTN","MDCPVDEF",61,0)
 S MDEVNT=MDEVNT_MDTYPE
"RTN","MDCPVDEF",62,0)
 W !,"Executing HL7 ADT Messaging (MD CP Flowsheets)",!
"RTN","MDCPVDEF",63,0)
 I '$$SENDMSG(MDDIV,MDWARD,"ADT",MDEVNT) W !,"No CP Flowsheets subscriber(s) for the movement location.",! Q
"RTN","MDCPVDEF",64,0)
 D ADD(MDDFN,MDDIV,MDWARD,$G(MDBED),"ADT",MDEVNT,MDMVMT)
"RTN","MDCPVDEF",65,0)
 Q
"RTN","MDCPVDEF",66,0)
 ;
"RTN","MDCPVDEF",67,0)
ADD(MDCPDFN,MDCPDIV,MDCPWARD,MDCPBED,MDCPMSG,MDCPEVNT,MDCPMVMT) ;
"RTN","MDCPVDEF",68,0)
 ;
"RTN","MDCPVDEF",69,0)
 ; Adds information to CP_PATIENT_MOVEMENT file (704.005), and generates HL7 message.
"RTN","MDCPVDEF",70,0)
 ;
"RTN","MDCPVDEF",71,0)
 ; Parameters -
"RTN","MDCPVDEF",72,0)
 ;   Covert (Preset local variables) -
"RTN","MDCPVDEF",73,0)
 ;   None
"RTN","MDCPVDEF",74,0)
 ;
"RTN","MDCPVDEF",75,0)
 ;   Overt -
"RTN","MDCPVDEF",76,0)
 ;   MDCPDFN - The IFN of the patient in the PATIENT file.
"RTN","MDCPVDEF",77,0)
 ;   MDCPDIV - A pointer to the division of the ward for which the message was sent
"RTN","MDCPVDEF",78,0)
 ;   MDCPWARD - A pointer to the ward for which the movement was sent
"RTN","MDCPVDEF",79,0)
 ;   MDCPBED - A pointer to the bed for which the movement was sent
"RTN","MDCPVDEF",80,0)
 ;   MDCPMSG - The HL7 message type (at this point, this should ALWAYS be ADT).
"RTN","MDCPVDEF",81,0)
 ;   MDCPEVNT - The HL7 event type for the message (A01, A02, A03, etc.)
"RTN","MDCPVDEF",82,0)
 ;   MDCPMVMT - PATIENT MOVEMENT IEN (Stored as PIMS_EVENT_ID, not a pointer)
"RTN","MDCPVDEF",83,0)
 ;
"RTN","MDCPVDEF",84,0)
 ; Returns -
"RTN","MDCPVDEF",85,0)
 ;   None
"RTN","MDCPVDEF",86,0)
 ;
"RTN","MDCPVDEF",87,0)
 ; The first thing we want to do is see if this is a cancellation.  If it is, we need
"RTN","MDCPVDEF",88,0)
 ; to look back at the most recent previous movement in our system.  If the most recent
"RTN","MDCPVDEF",89,0)
 ; previous movement does NOT refer to the same division, ward, and bed, then we ignore
"RTN","MDCPVDEF",90,0)
 ; the event.
"RTN","MDCPVDEF",91,0)
 ;
"RTN","MDCPVDEF",92,0)
 ; $ESTACK, UNWIND^%ZTER, and ^%ZTER appear courtesy of IA 1621 (Supported)
"RTN","MDCPVDEF",93,0)
 ;
"RTN","MDCPVDEF",94,0)
 N MDCPDTTM
"RTN","MDCPVDEF",95,0)
 D NOW^%DTC S MDCPDTTM=%
"RTN","MDCPVDEF",96,0)
 N MDCPFLG S MDCPFLG=0
"RTN","MDCPVDEF",97,0)
 I MDCPEVNT?1"A1"1N D
"RTN","MDCPVDEF",98,0)
 .; The concept here is that, if this is a cancel movement, we need to take a look at
"RTN","MDCPVDEF",99,0)
 .; the most recent movement and cancellation of that movement type.  If there was another
"RTN","MDCPVDEF",100,0)
 .; cancel between the last movement and this cancel, we don't want to resend the message.
"RTN","MDCPVDEF",101,0)
 .N MDCPPREV,MDCPOLD,MDCPPOLD
"RTN","MDCPVDEF",102,0)
 .S MDCPOLD=$S(MDCPEVNT="A11":"A01",MDCPEVNT="A12":"A02",MDCPEVNT="A13":"A03",1:"")
"RTN","MDCPVDEF",103,0)
 .S MDCPPREV=$O(^MDC(704.005,"LAST",MDCPDFN,MDCPMSG,MDCPOLD,""),-1)
"RTN","MDCPVDEF",104,0)
 .S MDCPPOLD=$O(^MDC(704.005,"LAST",MDCPDFN,MDCPMSG,MDCPEVNT,""),-1)
"RTN","MDCPVDEF",105,0)
 .S MDCPFLG=$S(MDCPPREV="":"0",+MDCPPOLD'<+MDCPPREV:"1",1:"0")
"RTN","MDCPVDEF",106,0)
 ;
"RTN","MDCPVDEF",107,0)
 Q:MDCPFLG
"RTN","MDCPVDEF",108,0)
 N MDCFDA,MDCPIEN,MDCPPAIR
"RTN","MDCPVDEF",109,0)
 S MDCFDA(704.005,"+1,",.01)=MDCPDFN
"RTN","MDCPVDEF",110,0)
 S MDCFDA(704.005,"+1,",.02)=MDCPDTTM
"RTN","MDCPVDEF",111,0)
 S MDCFDA(704.005,"+1,",.03)=$G(MDCPDIV)
"RTN","MDCPVDEF",112,0)
 S MDCFDA(704.005,"+1,",.04)=$G(MDCPWARD)
"RTN","MDCPVDEF",113,0)
 S MDCFDA(704.005,"+1,",.05)=$G(MDCPBED)
"RTN","MDCPVDEF",114,0)
 S MDCFDA(704.005,"+1,",.06)=MDCPMSG
"RTN","MDCPVDEF",115,0)
 S MDCFDA(704.005,"+1,",.07)=MDCPEVNT
"RTN","MDCPVDEF",116,0)
 S MDCFDA(704.005,"+1,",.08)=$G(MDCPMVMT)
"RTN","MDCPVDEF",117,0)
 D UPDATE^DIE("","MDCFDA","MDCPIEN") Q:$G(MDCPIEN(1))<1
"RTN","MDCPVDEF",118,0)
 ;
"RTN","MDCPVDEF",119,0)
 I MDCPEVNT?1"A1"1N D
"RTN","MDCPVDEF",120,0)
 .S MDCPOLD=$S(MDCPEVNT="A11":"A01",MDCPEVNT="A12":"A02",MDCPEVNT="A13":"A03",1:"")
"RTN","MDCPVDEF",121,0)
 .N MDIFN,MDCPPREV
"RTN","MDCPVDEF",122,0)
 .S MDCPPREV=$O(^MDC(704.005,"LAST",MDCPDFN,MDCPMSG,MDCPOLD,""),-1)
"RTN","MDCPVDEF",123,0)
 .I MDCPPREV]"" D
"RTN","MDCPVDEF",124,0)
 ..S MDIFN=$O(^MDC(704.005,"LAST",MDCPDFN,MDCPMSG,MDCPOLD,MDCPPREV,""))
"RTN","MDCPVDEF",125,0)
 ..D DEL(MDIFN)
"RTN","MDCPVDEF",126,0)
 ;
"RTN","MDCPVDEF",127,0)
 N RETRN
"RTN","MDCPVDEF",128,0)
 K MDCFDA
"RTN","MDCPVDEF",129,0)
 S MDCFDA(704.005,MDCPIEN(1)_",",.09)=$$QUE^MDCPMESQ(MDCPIEN(1),MDCPEVNT,.RETRN) ; Queue message
"RTN","MDCPVDEF",130,0)
 S MDCFDA(704.005,MDCPIEN(1)_",",.1)=$G(RETRN,"No return message.")
"RTN","MDCPVDEF",131,0)
 D UPDATE^DIE("","MDCFDA")
"RTN","MDCPVDEF",132,0)
 Q
"RTN","MDCPVDEF",133,0)
 ;
"RTN","MDCPVDEF",134,0)
DEL(MDCPIFN) ;
"RTN","MDCPVDEF",135,0)
 ;
"RTN","MDCPVDEF",136,0)
 ; Removes entry from CP_PATIENT_MOVEMENT file (704.005).
"RTN","MDCPVDEF",137,0)
 ;
"RTN","MDCPVDEF",138,0)
 ; Parameters -
"RTN","MDCPVDEF",139,0)
 ;   Covert (Preset local variables) -
"RTN","MDCPVDEF",140,0)
 ;   None
"RTN","MDCPVDEF",141,0)
 ;
"RTN","MDCPVDEF",142,0)
 ;   Overt -
"RTN","MDCPVDEF",143,0)
 ;   MDCPIFN - IFN of entry in 704.005 to delete.
"RTN","MDCPVDEF",144,0)
 ;
"RTN","MDCPVDEF",145,0)
 ; Returns -
"RTN","MDCPVDEF",146,0)
 ;   None
"RTN","MDCPVDEF",147,0)
 ;
"RTN","MDCPVDEF",148,0)
 N MDCFDA
"RTN","MDCPVDEF",149,0)
 S MDCFDA(704.005,MDCPIFN_",",.01)="@"
"RTN","MDCPVDEF",150,0)
 D FILE^DIE("K","MDCFDA")
"RTN","MDCPVDEF",151,0)
 Q
"RTN","MDCPVDEF",152,0)
 ;
"RTN","MDCPVDEF",153,0)
GENDESTS ;
"RTN","MDCPVDEF",154,0)
 ; Filters outbound messages.  See HL*1.6*56/66 Site Manager and Developer Manual
"RTN","MDCPVDEF",155,0)
 ;   p. 11-7 to 11-11 (inc).
"RTN","MDCPVDEF",156,0)
 ;
"RTN","MDCPVDEF",157,0)
 ; IA's -
"RTN","MDCPVDEF",158,0)
 ;   1373 (provisional: subscription requested 3 Aug 2007)
"RTN","MDCPVDEF",159,0)
 ;
"RTN","MDCPVDEF",160,0)
 ; Parameters -
"RTN","MDCPVDEF",161,0)
 ;   Covert (Preset local variables) -
"RTN","MDCPVDEF",162,0)
 ;     HLNEXT - Executable code to retrieve the next line of an outbound HL7 message.
"RTN","MDCPVDEF",163,0)
 ;     HL("ECH") - Encoding characters for this HL7 message.
"RTN","MDCPVDEF",164,0)
 ;     HL("FS") - The Field Separator for this HL7 message.
"RTN","MDCPVDEF",165,0)
 ;     NAMEVAL - Local array passed from VDEF to HL7.  Must not be newed or killed.
"RTN","MDCPVDEF",166,0)
 ;
"RTN","MDCPVDEF",167,0)
 ;
"RTN","MDCPVDEF",168,0)
 ; Returns -
"RTN","MDCPVDEF",169,0)
 ;   None overt.  HLL("LINKS",n) will be read by HLO upon return.
"RTN","MDCPVDEF",170,0)
 ;
"RTN","MDCPVDEF",171,0)
 N MDCPV1,MDHLFS,MDHLECH,MDDIV,MDDIVI,MDWARD,MDWARDI,MDBED,MDCPSUB,MDCPROT,I,IEN
"RTN","MDCPVDEF",172,0)
 S IEN=MDCIEN
"RTN","MDCPVDEF",173,0)
 S MDHLFS=HL("FS")
"RTN","MDCPVDEF",174,0)
 S MDHLECH=$E(HL("ECH"),1,1)
"RTN","MDCPVDEF",175,0)
 F  X HLNEXT D  Q:HLQUIT'>0
"RTN","MDCPVDEF",176,0)
 .S:$P($G(HLNODE),MDHLFS)="PV1" MDCPV1=HLNODE
"RTN","MDCPVDEF",177,0)
 ; Division is PV1(3)(1), Room is PV1(3)(2), Bed is PV1(3)(3)
"RTN","MDCPVDEF",178,0)
 S MDDIV=$P(MDCPV1,MDHLFS,4)
"RTN","MDCPVDEF",179,0)
 S MDWARD=$P(MDDIV,MDHLECH,2)
"RTN","MDCPVDEF",180,0)
 S MDBED=$P(MDDIV,MDHLECH,3)
"RTN","MDCPVDEF",181,0)
 S MDDIVI=$P(^MDC(704.005,IEN,0),U,3)
"RTN","MDCPVDEF",182,0)
 S MDWARDI=$P(^MDC(704.005,IEN,0),U,4)
"RTN","MDCPVDEF",183,0)
 D ARRYDEST(MDDIVI,MDWARDI,$G(HL("MTN")),$G(HL("ETN")))
"RTN","MDCPVDEF",184,0)
 ;
"RTN","MDCPVDEF",185,0)
 Q
"RTN","MDCPVDEF",186,0)
 ;
"RTN","MDCPVDEF",187,0)
GETSUBS ;
"RTN","MDCPVDEF",188,0)
 ; Get subscriber protocols
"RTN","MDCPVDEF",189,0)
 ;
"RTN","MDCPVDEF",190,0)
 ; IA's -
"RTN","MDCPVDEF",191,0)
 ;   1373 (provisional, see above)
"RTN","MDCPVDEF",192,0)
 ;
"RTN","MDCPVDEF",193,0)
 ; Parameters -
"RTN","MDCPVDEF",194,0)
 ;   None
"RTN","MDCPVDEF",195,0)
 ;
"RTN","MDCPVDEF",196,0)
 ; Returns -
"RTN","MDCPVDEF",197,0)
 ;   Overt - None
"RTN","MDCPVDEF",198,0)
 ;
"RTN","MDCPVDEF",199,0)
 N Y S Y=0
"RTN","MDCPVDEF",200,0)
 F  S Y=$O(^ORD(101,Y)) Q:'Y  S:$P(^ORD(101,Y,0),U,4)="S"&($P(^(0),U,1)?1"MD".E) @MDROOT@(Y)=""
"RTN","MDCPVDEF",201,0)
 Q
"RTN","MDCPVDEF",202,0)
 ;
"RTN","MDCPVDEF",203,0)
GENDEST2(IEN) ; Filters outbound messages.  Unlike GENDESTS, this is set to filter
"RTN","MDCPVDEF",204,0)
 ;  assuming that we have not yet queued the outbound message.
"RTN","MDCPVDEF",205,0)
 ;
"RTN","MDCPVDEF",206,0)
 ;
"RTN","MDCPVDEF",207,0)
 ; Parameters
"RTN","MDCPVDEF",208,0)
 ;   IEN: The IEN of the entry in the CLIO_HL7_LOG file that will be used to generate
"RTN","MDCPVDEF",209,0)
 ;        this message.
"RTN","MDCPVDEF",210,0)
 ;
"RTN","MDCPVDEF",211,0)
 ; Returns -
"RTN","MDCPVDEF",212,0)
 ;   None overt.  HLL("LINKS",n) will be read by HLO upon return.
"RTN","MDCPVDEF",213,0)
 ;
"RTN","MDCPVDEF",214,0)
 N MDCPDIV,MDCPMSGT,MDCPEVNT
"RTN","MDCPVDEF",215,0)
 N MDCPMSG
"RTN","MDCPVDEF",216,0)
 D GETS^DIQ(704.005,IEN_",","*","I","MDCPMSG")
"RTN","MDCPVDEF",217,0)
 S MDCPDIV=$G(MDCPMSG("704.005",IEN_",",".03","I"))
"RTN","MDCPVDEF",218,0)
 S MDCPMSGT=$G(MDCPMSG("704.005",IEN_",",".06","I"))
"RTN","MDCPVDEF",219,0)
 S MDCPEVNT=$G(MDCPMSG("704.005",IEN_",",".07","I"))
"RTN","MDCPVDEF",220,0)
 S MDCPWARD=$G(MDCPMSG("704.005",IEN_",",".04","I"))
"RTN","MDCPVDEF",221,0)
 D ARRYDEST(MDCPDIV,MDCPWARD,MDCPMSGT,MDCPEVNT)
"RTN","MDCPVDEF",222,0)
 Q
"RTN","MDCPVDEF",223,0)
 ;
"RTN","MDCPVDEF",224,0)
ARRYDEST(DIVISION,WARD,MSGTYPE,EVNTTYPE) ;
"RTN","MDCPVDEF",225,0)
 ;
"RTN","MDCPVDEF",226,0)
 ; DIVISION: IEN of division in file 40.8.
"RTN","MDCPVDEF",227,0)
 ; WARD: IEN of ward in file 42.
"RTN","MDCPVDEF",228,0)
 ;
"RTN","MDCPVDEF",229,0)
 N MDCPSUB,I,MDCPROT,MDCPWARD
"RTN","MDCPVDEF",230,0)
 S MDCPSUB=0,I=0
"RTN","MDCPVDEF",231,0)
 F  S MDCPSUB=$O(^MDC(704.006,"LOCDEV",DIVISION,MDCPSUB)) Q:'MDCPSUB  D
"RTN","MDCPVDEF",232,0)
 .Q:MSGTYPE'=$P(^MDC(704.006,MDCPSUB,0),U,4)
"RTN","MDCPVDEF",233,0)
 .Q:EVNTTYPE'=$P(^MDC(704.006,MDCPSUB,0),U,5)
"RTN","MDCPVDEF",234,0)
 .S MDCPWARD=$P(^MDC(704.006,MDCPSUB,0),U,3)
"RTN","MDCPVDEF",235,0)
 .Q:(MDCPWARD'="")&(MDCPWARD'=WARD)
"RTN","MDCPVDEF",236,0)
 .S MDCPROT=$P(^MDC(704.006,MDCPSUB,0),U)
"RTN","MDCPVDEF",237,0)
 .S I=I+1
"RTN","MDCPVDEF",238,0)
 .S HLL("LINKS",I)=$P(^ORD(101,MDCPROT,0),U)_U_$$EXTERNAL^DILFD(101,770.7,"",$P(^ORD(101,MDCPROT,770),U,7))
"RTN","MDCPVDEF",239,0)
 Q
"RTN","MDCPVDEF",240,0)
 ;
"RTN","MDCPVDEF",241,0)
SENDMSG(DIVISION,WARD,MSGTYPE,EVNTTYPE) ;
"RTN","MDCPVDEF",242,0)
 ;
"RTN","MDCPVDEF",243,0)
 ; Determines whether or not we should continue to build or save this message.  On a basis
"RTN","MDCPVDEF",244,0)
 ;   of division, ward, message type, and event type, will return 1 or 0 based on whether or
"RTN","MDCPVDEF",245,0)
 ;   not there is an entry in 704.006 to send the message to a specific device.
"RTN","MDCPVDEF",246,0)
 ;
"RTN","MDCPVDEF",247,0)
 ; Parameters
"RTN","MDCPVDEF",248,0)
 ;   DIVISION - Division (internal)
"RTN","MDCPVDEF",249,0)
 ;   WARD - Ward (internal)
"RTN","MDCPVDEF",250,0)
 ;   MSGTYPE - HL7 message type  eg. "ADT"
"RTN","MDCPVDEF",251,0)
 ;   EVNTTYPE - HL7 event type   eg. "A01"
"RTN","MDCPVDEF",252,0)
 ;
"RTN","MDCPVDEF",253,0)
 ; Returns
"RTN","MDCPVDEF",254,0)
 ;   1 if message should be sent
"RTN","MDCPVDEF",255,0)
 ;   0 if not
"RTN","MDCPVDEF",256,0)
 ;
"RTN","MDCPVDEF",257,0)
 N USE
"RTN","MDCPVDEF",258,0)
 I $G(WARD)'="" D
"RTN","MDCPVDEF",259,0)
 .S USE=$O(^MDC(704.006,"AMSGDIVWARD",MSGTYPE,EVNTTYPE,$G(DIVISION),$G(WARD),0))
"RTN","MDCPVDEF",260,0)
 I $G(WARD)="" D
"RTN","MDCPVDEF",261,0)
 .N WD S WD=0 S USE=0
"RTN","MDCPVDEF",262,0)
 .F  S WD=$O(^MDC(704.006,"AMSGDIV",MSGTYPE,EVNTTYPE,$G(DIVISION),WD)) Q:+WD=0  D
"RTN","MDCPVDEF",263,0)
 ..I $P(^MDC(704.006,WD,0),U,3)="" S USE=1 Q
"RTN","MDCPVDEF",264,0)
 Q:+$G(USE) 1
"RTN","MDCPVDEF",265,0)
 Q 0
"RTN","MDCPVDEF",266,0)
 ;
"RTN","MDCPVDEF",267,0)
LASTLOC(MDCPDFN,MDCPLOC) ;
"RTN","MDCPVDEF",268,0)
 ;
"RTN","MDCPVDEF",269,0)
 ; Retrieve inpatient's location via LAST known LOCation per CP  - if neccessary ....
"RTN","MDCPVDEF",270,0)
 ;
"RTN","MDCPVDEF",271,0)
 ; Parameters
"RTN","MDCPVDEF",272,0)
 ;   MDCPDFN - Patient's IEN
"RTN","MDCPVDEF",273,0)
 ;   MDCPLOC - "WARD" or "BED" (seeking ward or bed data)
"RTN","MDCPVDEF",274,0)
 ;
"RTN","MDCPVDEF",275,0)
 ; Returns
"RTN","MDCPVDEF",276,0)
 ;   1 if found location patient
"RTN","MDCPVDEF",277,0)
 ;   0 if NOT found location of patient or NOT INPATIENT
"RTN","MDCPVDEF",278,0)
 ;  
"RTN","MDCPVDEF",279,0)
 N LASTLOC S LASTLOC=""
"RTN","MDCPVDEF",280,0)
A02 ;Look into transfers (A02)
"RTN","MDCPVDEF",281,0)
 G:'$D(^MDC(704.005,"LAST",MDCPDFN,"ADT","A02")) A01
"RTN","MDCPVDEF",282,0)
 N MDCDAT S MDCDAT=$O(^MDC(704.005,"LAST",MDCPDFN,"ADT","A02",""),-1)
"RTN","MDCPVDEF",283,0)
 S LASTLOC=$O(^MDC(704.005,"LAST",MDCPDFN,"ADT","A02",MDCDAT,LASTLOC))
"RTN","MDCPVDEF",284,0)
 I LASTLOC]"" D  Q
"RTN","MDCPVDEF",285,0)
  .I MDCPLOC="WARD" S MDWARD=$P(^MDC(704.005,LASTLOC,0),U,4)
"RTN","MDCPVDEF",286,0)
  .I MDCPLOC="BED" S MDBED=$P(^MDC(704.005,LASTLOC,0),U,5)
"RTN","MDCPVDEF",287,0)
A01 ;Look into admissions (A01)
"RTN","MDCPVDEF",288,0)
 ;
"RTN","MDCPVDEF",289,0)
 G:'$D(^MDC(704.005,"LAST",MDCPDFN,"ADT","A01")) VADATA
"RTN","MDCPVDEF",290,0)
 N MDCDAT S MDCDAT=$O(^MDC(704.005,"LAST",MDCPDFN,"ADT","A01",""),-1)
"RTN","MDCPVDEF",291,0)
 S LASTLOC=$O(^MDC(704.005,"LAST",MDCPDFN,"ADT","A01",MDCDAT,LASTLOC))
"RTN","MDCPVDEF",292,0)
 I LASTLOC]"" D  Q
"RTN","MDCPVDEF",293,0)
  .I MDCPLOC="WARD" S MDWARD=$P(^MDC(704.005,LASTLOC,0),U,4)
"RTN","MDCPVDEF",294,0)
  .I MDCPLOC="BED" S MDBED=$P(^MDC(704.005,LASTLOC,0),U,5)
"RTN","MDCPVDEF",295,0)
VADATA ;Look into VADPT 
"RTN","MDCPVDEF",296,0)
 N DFN S DFN=MDCPDFN
"RTN","MDCPVDEF",297,0)
 S:MDTYPE=3 VAIP("D")=$P(MDNODE,".")
"RTN","MDCPVDEF",298,0)
 D IN5^VADPT
"RTN","MDCPVDEF",299,0)
 I MDCPLOC="WARD" S MDWARD=$P(VAIP(5),U)
"RTN","MDCPVDEF",300,0)
 I MDCPLOC="BED" S MDBED=$P(VAIP(6),U)
"RTN","MDCPVDEF",301,0)
 Q
"RTN","MDCUTL")
0^22^B28631093
"RTN","MDCUTL",1,0)
MDCUTL ;HINES OIFO/DP/BJ/TJ - HL7 Message Utilities;07 June 2007
"RTN","MDCUTL",2,0)
 ;;1.0;CLINICAL PROCEDURES;**16,12**;Apr 01, 2004;Build 318
"RTN","MDCUTL",3,0)
 ;Per VHA Directive 2004-038, this routine should not be modified.
"RTN","MDCUTL",4,0)
 ;
"RTN","MDCUTL",5,0)
 ;1.0;Create HL7 A04 Message;;Mar 10, 2005 ; Patch IB*2.0*286
"RTN","MDCUTL",6,0)
 ;
"RTN","MDCUTL",7,0)
 ; This routine uses the following Integration Agreements (IAs):
"RTN","MDCUTL",8,0)
 ;  # 2050       - $$EZBLD^DIALOG()             FILEMAN                        (supported)
"RTN","MDCUTL",9,0)
 ;
"RTN","MDCUTL",10,0)
 Q
"RTN","MDCUTL",11,0)
 ;
"RTN","MDCUTL",12,0)
MOREDLMS ;; maintain HL7 delimiters based on prev. HL7 INIT for the protocol
"RTN","MDCUTL",13,0)
 S HLMAXLEN=245
"RTN","MDCUTL",14,0)
 S HLFS=$G(HL("FS")) I HLFS="" S HLFS="^"
"RTN","MDCUTL",15,0)
 S HLCM=$E(HL("ECH"),1),HLRP=$E(HL("ECH"),2)
"RTN","MDCUTL",16,0)
 S HLES=$E(HL("ECH"),3),HLSC=$E(HL("ECH"),4)
"RTN","MDCUTL",17,0)
 S HL7RC=HLES_HLFS_HLCM_HLRP_HLSC,HLECH=HL("ECH"),HLQ=HL("Q")
"RTN","MDCUTL",18,0)
 Q
"RTN","MDCUTL",19,0)
 ;
"RTN","MDCUTL",20,0)
EMPTY(SEG,ERR,HLQFLAG,STFIELD,ENDFIELD) ;
"RTN","MDCUTL",21,0)
 ;
"RTN","MDCUTL",22,0)
 ;This function will check an HL7 segment delimited by the HL7 field
"RTN","MDCUTL",23,0)
 ;separator for a specified field range and determine if the segment
"RTN","MDCUTL",24,0)
 ;within the specified field range contains data or is empty. If
"RTN","MDCUTL",25,0)
 ;no specified starting field range, then starting field defaults to the
"RTN","MDCUTL",26,0)
 ;first field in the segment. If no specified ending field range, then
"RTN","MDCUTL",27,0)
 ;ending field defaults to the last field in the segment as determined
"RTN","MDCUTL",28,0)
 ;by $L(SEG,HLFS).
"RTN","MDCUTL",29,0)
 ;
"RTN","MDCUTL",30,0)
 ;
"RTN","MDCUTL",31,0)
 ;INPUT:
"RTN","MDCUTL",32,0)
 ;       SEG      -- (Required) HL7 segment to be evaluated.
"RTN","MDCUTL",33,0)
 ;       ERR      -- (Required) Passed by reference and is only defined
"RTN","MDCUTL",34,0)
 ;                   within this function if an error occurs.
"RTN","MDCUTL",35,0)
 ;       HLQFLAG  -- (Optional) Flag to indicate if HL7 Null Variable
"RTN","MDCUTL",36,0)
 ;                   HLQ is considered for evaluation.
"RTN","MDCUTL",37,0)
 ;                   If sent, then '1' indicates consideration and '0'
"RTN","MDCUTL",38,0)
 ;                   indicates no consideration.
"RTN","MDCUTL",39,0)
 ;                   If not sent, then default is not to consider HLQ
"RTN","MDCUTL",40,0)
 ;                   for evaluation.
"RTN","MDCUTL",41,0)
 ;       STFIELD  -- (Optional) Segment field to start evaluation from
"RTN","MDCUTL",42,0)
 ;                   as determined by field separator HLFS.
"RTN","MDCUTL",43,0)
 ;                   If not sent, then default equals '1'.
"RTN","MDCUTL",44,0)
 ;       ENDFIELD -- (Optional) Segment field to end evaluation to as
"RTN","MDCUTL",45,0)
 ;                   determined by field separator HLFS.
"RTN","MDCUTL",46,0)
 ;                   If not sent, then default equals '$L(SEG,HLFS)'.
"RTN","MDCUTL",47,0)
 ;
"RTN","MDCUTL",48,0)
 ;OUTPUT:
"RTN","MDCUTL",49,0)
 ;       1         -- Segment field range contains data or
"RTN","MDCUTL",50,0)
 ;       0         -- Segment field range doesn't contain data or
"RTN","MDCUTL",51,0)
 ;       ""        -- Error has occurred. In this case, error returned
"RTN","MDCUTL",52,0)
 ;                    in variable ERR.
"RTN","MDCUTL",53,0)
 ;      ERR        -- Error message text. Is only defined if and error
"RTN","MDCUTL",54,0)
 ;                    has occurred within this function.
"RTN","MDCUTL",55,0)
 ;
"RTN","MDCUTL",56,0)
 Q:$G(SEG)="" 0
"RTN","MDCUTL",57,0)
 N COMP
"RTN","MDCUTL",58,0)
 S HLQFLAG=$S($G(HLQFLAG)'="":HLQFLAG,1:0)
"RTN","MDCUTL",59,0)
 I (HLQFLAG'=1),(HLQFLAG'=0) D EMPTYERR("HLQFLAG") Q ""
"RTN","MDCUTL",60,0)
 S STFIELD=$S($G(STFIELD)'="":STFIELD,1:1)
"RTN","MDCUTL",61,0)
 I (STFIELD'?1N.N)!(STFIELD<1)!(STFIELD>$L(SEG,HLFS)) D EMPTYERR("STFIELD") Q ""
"RTN","MDCUTL",62,0)
 S ENDFIELD=$S($G(ENDFIELD)'="":ENDFIELD,1:$L(SEG,HLFS))
"RTN","MDCUTL",63,0)
 I (ENDFIELD'?1N.N)!(ENDFIELD<1)!(ENDFIELD>$L(SEG,HLFS)) D EMPTYERR("ENDFIELD") Q ""
"RTN","MDCUTL",64,0)
 S COMP=$P(SEG,HLFS,STFIELD,ENDFIELD)
"RTN","MDCUTL",65,0)
 Q:COMP="" 0
"RTN","MDCUTL",66,0)
 I HLQFLAG,$TR(COMP,HLQ_HL7RC)="" Q 0
"RTN","MDCUTL",67,0)
 I 'HLQFLAG,$TR(COMP,HL7RC)="" Q 0
"RTN","MDCUTL",68,0)
 Q 1
"RTN","MDCUTL",69,0)
 ;
"RTN","MDCUTL",70,0)
EMPTYERR(NAME) ;Error message module
"RTN","MDCUTL",71,0)
 ;
"RTN","MDCUTL",72,0)
 N IBBVPARM
"RTN","MDCUTL",73,0)
 ;
"RTN","MDCUTL",74,0)
 ;Setup error message parameter for call to Dialog File
"RTN","MDCUTL",75,0)
 ;for dialog 3750007.
"RTN","MDCUTL",76,0)
 ;Dialog 3750007 => Message could not be built.  Error occurred in |1|.
"RTN","MDCUTL",77,0)
 ;
"RTN","MDCUTL",78,0)
 S IBBVPARM(1)="$$EMPTY^IBBVUTL - unacceptable "_NAME_" parameter value of "_@NAME
"RTN","MDCUTL",79,0)
 ;
"RTN","MDCUTL",80,0)
 ;Return error message text in variable ERR.
"RTN","MDCUTL",81,0)
 ;
"RTN","MDCUTL",82,0)
 S ERR=$$EZBLD^DIALOG(3750007,.IBBVPARM)
"RTN","MDCUTL",83,0)
 Q
"RTN","MDCUTL",84,0)
ESC(FIELD) ;
"RTN","MDCUTL",85,0)
 ;
"RTN","MDCUTL",86,0)
 NEW DEL,HLES,IDEL,REP
"RTN","MDCUTL",87,0)
 ;
"RTN","MDCUTL",88,0)
 S HLES=$E(HL("ECH"),3)
"RTN","MDCUTL",89,0)
 S DEL(1)=HLES,REP(1)="E" ; escape character must be first in list
"RTN","MDCUTL",90,0)
 S DEL(2)=$E(HL("ECH"),2),REP(2)="R"
"RTN","MDCUTL",91,0)
 S DEL(3)=$E(HL("ECH")),REP(3)="S"
"RTN","MDCUTL",92,0)
 S DEL(4)=$E(HL("FS")),REP(4)="F"
"RTN","MDCUTL",93,0)
 S DEL(5)=$E(HL("ECH"),4),REP(5)="T"
"RTN","MDCUTL",94,0)
 ;
"RTN","MDCUTL",95,0)
 F IDEL=1:1:5 D
"RTN","MDCUTL",96,0)
 . Q:FIELD'[DEL(IDEL)
"RTN","MDCUTL",97,0)
 . S FIELD=$$REP(FIELD,DEL(IDEL),HLES_REP(IDEL)_HLES)
"RTN","MDCUTL",98,0)
 . Q
"RTN","MDCUTL",99,0)
 Q FIELD
"RTN","MDCUTL",100,0)
 ;
"RTN","MDCUTL",101,0)
REP(STR,REM,REP) ; remove all occurrences of REM from STR and replace with REP
"RTN","MDCUTL",102,0)
 ;
"RTN","MDCUTL",103,0)
 Q:STR'[REM STR
"RTN","MDCUTL",104,0)
 Q $P(STR,REM,1)_REP_$$REP($P(STR,REM,2,$L(STR,REM)),REM,REP)
"RTN","MDCUTL",105,0)
 ;
"RTN","MDCUTL",106,0)
 ;
"RTN","MDCUTL",107,0)
REMQQ(STR) ; removes two double quotes surrounded by HL7 delimiters from STR
"RTN","MDCUTL",108,0)
 ;
"RTN","MDCUTL",109,0)
 NEW POS,DELIMS,BEFORE,AFTER
"RTN","MDCUTL",110,0)
 S DELIMS=HL("ECH")_HL("FS")
"RTN","MDCUTL",111,0)
 ;
"RTN","MDCUTL",112,0)
 S POS=$F(STR,HLQ)
"RTN","MDCUTL",113,0)
 Q:POS=0 STR
"RTN","MDCUTL",114,0)
 S BEFORE=$E(STR,POS-3)
"RTN","MDCUTL",115,0)
 S AFTER=$E(STR,POS)
"RTN","MDCUTL",116,0)
 ;
"RTN","MDCUTL",117,0)
 Q:DELIMS'[BEFORE!(DELIMS'[AFTER) $E(STR,1,POS-1)_$$REMQQ($E(STR,POS,$L(STR)))
"RTN","MDCUTL",118,0)
 ;
"RTN","MDCUTL",119,0)
 Q $E(STR,1,POS-3)_$$REMQQ($E(STR,POS,$L(STR)))
"RTN","MDCUTL",120,0)
 ;
"RTN","MDCUTL",121,0)
 ;
"RTN","MDCUTL",122,0)
MAKESEG(RAWARAY,SEGARAY,SEGNUM,SEGID) ;Make segment using obtained fields
"RTN","MDCUTL",123,0)
 ;
"RTN","MDCUTL",124,0)
 ; - This subroutine takes a one dimensional array of fields and turns it into an
"RTN","MDCUTL",125,0)
 ;    an HL7 segment (segment string).  The subscript of each element in the field array
"RTN","MDCUTL",126,0)
 ;    corresponds to the number of a field in a HL7 specification, such as might be found
"RTN","MDCUTL",127,0)
 ;    in the Message Work Bench (MWB) tool.  Each string within the array is assumed to
"RTN","MDCUTL",128,0)
 ;    be already formatted in regard to such matters as components and sub-components.
"RTN","MDCUTL",129,0)
 ;    If the length of the HL7 string exceeds 245 characters, it must be broken up into
"RTN","MDCUTL",130,0)
 ;    chunks, none of which may exceed 245 characters.  The chunks are returned in an array.
"RTN","MDCUTL",131,0)
 ;    Fields are not split across chunks.
"RTN","MDCUTL",132,0)
 ;
"RTN","MDCUTL",133,0)
 ;Input:
"RTN","MDCUTL",134,0)
 ;   RAWARAY  = 1 dimensional array of fields, each subscript corresponding to an HL7
"RTN","MDCUTL",135,0)
 ;               specification field number (!pass by reference!)
"RTN","MDCUTL",136,0)
 ;   SEGARAY  = array of chunks where the constructed segment goes (!pass by reference!)
"RTN","MDCUTL",137,0)
 ;   SEGNUM   = if greater than zero, number denoting Xth repetition of the SEGID segment.
"RTN","MDCUTL",138,0)
 ;              if less than 1, the first (or only) chunk has no subscript
"RTN","MDCUTL",139,0)
 ;   SEGID    = Segment ID string (defaults to "")
"RTN","MDCUTL",140,0)
 ;   HLMAXLEN = Maximum length of each segment chunk (defaults to 245) (assumed variable)
"RTN","MDCUTL",141,0)
 ;   HL7 encoding characters (HLFS, HLENC, HLQ)
"RTN","MDCUTL",142,0)
 ;
"RTN","MDCUTL",143,0)
 ;Output: SEGARAY(SEGNUM)   = SEGID segment (first SMAXL characters)
"RTN","MDCUTL",144,0)
 ;        SEGARAY(SEGNUM,x) = Remaining portion(S) of SEGID segment in
"RTN","MDCUTL",145,0)
 ;                             SMAXL character chunks (if needed)
"RTN","MDCUTL",146,0)
 ;                             beginning with a field separator
"RTN","MDCUTL",147,0)
 ;
"RTN","MDCUTL",148,0)
 ;Notes: SEGARAY(SEGNUM) is initialized (KILLed) on input
"RTN","MDCUTL",149,0)
 ;     : Fields will not be split across chunks in SEGARAY()
"RTN","MDCUTL",150,0)
 ;
"RTN","MDCUTL",151,0)
 N SEQ,SPILL,SPILLON,SPOT,LASTSEQ,SPTR,SMAXL,PTSS
"RTN","MDCUTL",152,0)
 ; - first assume segment array number not present (less than 1)
"RTN","MDCUTL",153,0)
 S SPTR="SEGARAY",PTSS="SEGARAY(SPILL)"
"RTN","MDCUTL",154,0)
 ; - if array number present, arrange to use it as subscript
"RTN","MDCUTL",155,0)
 I +$G(SEGNUM)>0 S SPTR="SEGARAY(SEGNUM)",PTSS="SEGARAY(SEGNUM,SPILL)"  ;SEGNUM=$TR(SEGNUM,"_",",")
"RTN","MDCUTL",156,0)
 ; - initialize segment (output) array
"RTN","MDCUTL",157,0)
 K @SPTR
"RTN","MDCUTL",158,0)
 S @SPTR=$G(SEGID)
"RTN","MDCUTL",159,0)
 ; - if not some value, make max the system max
"RTN","MDCUTL",160,0)
 S SMAXL=+$G(HLMAXLEN) S:'SMAXL SMAXL=245
"RTN","MDCUTL",161,0)
 ; - initialize some "pointers"
"RTN","MDCUTL",162,0)
 S (SPILL,SPILLON)=0
"RTN","MDCUTL",163,0)
 S LASTSEQ=+$O(RAWARAY(""),-1)
"RTN","MDCUTL",164,0)
 ; - scan through field array, creating segment array as we go
"RTN","MDCUTL",165,0)
 F SEQ=1:1:LASTSEQ D
"RTN","MDCUTL",166,0)
 .; - Make sure maximum length won't be exceeded
"RTN","MDCUTL",167,0)
 .I ($L(@SPTR)+$L($G(RAWARAY(SEQ)))+1)>SMAXL D
"RTN","MDCUTL",168,0)
 ..; - Max length exceeded - start putting data on next node
"RTN","MDCUTL",169,0)
 ..S SPILL=SPILL+1
"RTN","MDCUTL",170,0)
 ..S SPILLON=SEQ-1
"RTN","MDCUTL",171,0)
 ..S SPTR=PTSS
"RTN","MDCUTL",172,0)
 .; - Add to string
"RTN","MDCUTL",173,0)
 .S SPOT=(SEQ+1)-SPILLON
"RTN","MDCUTL",174,0)
 .S $P(@SPTR,HLFS,SPOT)=$G(RAWARAY(SEQ))
"RTN","MDCUTL",175,0)
 ; - Done
"RTN","MDCUTL",176,0)
 Q
"RTN","MDCUTL",177,0)
 ;
"RTN","MDCUTL",178,0)
RETRANS ; Retransmit ADT from file 704.005
"RTN","MDCUTL",179,0)
 ; Get the entry from file 704.005
"RTN","MDCUTL",180,0)
 N STYPE,RETRN,DYNAMIC,EVNTDRVR,REQIEN,DYNAMIC,DIC
"RTN","MDCUTL",181,0)
 S DIC=704.005,DIC(0)="AEQM" D ^DIC Q:+Y<1  S MDIENS=+Y_","
"RTN","MDCUTL",182,0)
 S MDCPEVNT=$$GET1^DIQ(704.005,MDIENS,.07,"E")
"RTN","MDCUTL",183,0)
 S MDCPMSG=$$GET1^DIQ(704.005,MDIENS,.06,"E")
"RTN","MDCUTL",184,0)
 S STYPE=$S(MDCPEVNT="A01":"CPAN",MDCPEVNT="A02":"CPTP",MDCPEVNT="A03":"CPDE",MDCPEVNT="A08":"CPUI",MDCPEVNT="A11":"CPCAN",MDCPEVNT="A12":"CPCT",MDCPEVNT="A13":"CPCDE",1:"")
"RTN","MDCUTL",185,0)
 S MDCPPAIR="SUBTYPE="_STYPE_"^IEN="_+MDIENS
"RTN","MDCUTL",186,0)
 K MDCFDA
"RTN","MDCUTL",187,0)
 F X="MDCPMSG","MDCPEVNT","MDCPPAIR" D
"RTN","MDCUTL",188,0)
 .W !,X,"=",$G(@X,"<NIL>")
"RTN","MDCUTL",189,0)
 S MDCFDA(704.005,MDIENS,.09)=$$QUE^MDCPMESQ(MDIENS,MDCPEVNT,.RETRN)
"RTN","MDCUTL",190,0)
 S:MDCFDA(704.005,MDIENS,.09)=0 MDCFDA(704.005,MDIENS,.1)=$G(RETRN,"No return message.")
"RTN","MDCUTL",191,0)
 D UPDATE^DIE("","MDCFDA")
"RTN","MDCUTL",192,0)
 Q
"RTN","MDCUTL",193,0)
 ;
"RTN","MDPRE12")
0^^B12272159
"RTN","MDPRE12",1,0)
MDPRE12 ;HINES OIFO/TJ - Pre Installation Tasks;02 Mar 2008
"RTN","MDPRE12",2,0)
 ;;1.0;CLINICAL PROCEDURES;**12**;Apr 01, 2004;Build 318
"RTN","MDPRE12",3,0)
 ;Per VHA Directive 2004-038, this MDCRTN should not be modified.
"RTN","MDPRE12",4,0)
 ;
"RTN","MDPRE12",5,0)
 ; This routine uses the following IAs:
"RTN","MDPRE12",6,0)
 ;
"RTN","MDPRE12",7,0)
 ;  # 2263       - XPAR calls                   TOOLKIT                        (supported)
"RTN","MDPRE12",8,0)
 ;  # 4447       - POSTKID^VDEFVU               VDEF             (controlled subscription)
"RTN","MDPRE12",9,0)
 ;  #10141       - MES^XPDUTL                   Kernel                         (supported)
"RTN","MDPRE12",10,0)
 ;
"RTN","MDPRE12",11,0)
EN ; Deactivate CP Flowsheets-VDEF
"RTN","MDPRE12",12,0)
 ;
"RTN","MDPRE12",13,0)
 N MDX,MDTASK,MDTMP
"RTN","MDPRE12",14,0)
 D GETLST^XPAR(.MDTMP,"SYS","MD PARAMETERS","Q")
"RTN","MDPRE12",15,0)
 F MDX=0:0 S MDX=$O(MDTMP(MDX)) Q:'MDX  D:MDTMP(MDX)?1"TASK_".E
"RTN","MDPRE12",16,0)
 .S MDTASK($P(MDTMP(MDX),"^",1))=$P(MDTMP(MDX),"^",2)
"RTN","MDPRE12",17,0)
 .D EN^XPAR("SYS","MD PARAMETERS",$P(MDTMP(MDX),"^",1),"@")
"RTN","MDPRE12",18,0)
 ;
"RTN","MDPRE12",19,0)
 ; Now rebuild the one that we want to keep
"RTN","MDPRE12",20,0)
 ;
"RTN","MDPRE12",21,0)
 S MDTASK("TASK_HL7_CLEANUP")=$G(MDTASK("TASK_HL7_CLEANUP"),"0;;;0")
"RTN","MDPRE12",22,0)
 ;
"RTN","MDPRE12",23,0)
 S $P(MDTASK("TASK_HL7_CLEANUP"),";",2)="HL7 Cleanup"
"RTN","MDPRE12",24,0)
 S $P(MDTASK("TASK_HL7_CLEANUP"),";",3)="HL7 MDCPURG"
"RTN","MDPRE12",25,0)
 ;
"RTN","MDPRE12",26,0)
 ; Save them back to XPAR
"RTN","MDPRE12",27,0)
 ;
"RTN","MDPRE12",28,0)
 D MES^XPDUTL(" MD*1.0*12 Pre Init begin")
"RTN","MDPRE12",29,0)
 F MDX="TASK_HL7_CLEANUP" D
"RTN","MDPRE12",30,0)
 .D EN^XPAR("SYS","MD PARAMETERS",MDX,MDTASK(MDX))
"RTN","MDPRE12",31,0)
 .D MES^XPDUTL(" Task '"_MDX_"' updated...")
"RTN","MDPRE12",32,0)
 ;
"RTN","MDPRE12",33,0)
 ;
"RTN","MDPRE12",34,0)
 ;
"RTN","MDPRE12",35,0)
 ; IA 4447.
"RTN","MDPRE12",36,0)
 ;
"RTN","MDPRE12",37,0)
 ; Event subtypes:
"RTN","MDPRE12",38,0)
 ;   CPAN - CLIO Admit/Visit Notification (A01)
"RTN","MDPRE12",39,0)
 ;   CPCAN - CLIO Cancel Admit Notice (A11)
"RTN","MDPRE12",40,0)
 ;   CPCDE - CLIO Cancel Discharge (A13)
"RTN","MDPRE12",41,0)
 ;   CPCT - CLIO Cancel Transfer (A12)
"RTN","MDPRE12",42,0)
 ;   CPDE - CLIO Discharge/End Visit (A03)
"RTN","MDPRE12",43,0)
 ;   CPTP - CLIO Transfer a Patient (A02)
"RTN","MDPRE12",44,0)
 ;   CPUPI - CLIO Update Patient Info (A08)
"RTN","MDPRE12",45,0)
 ;
"RTN","MDPRE12",46,0)
 ; Message/Event types - Protocols - Extraction Program
"RTN","MDPRE12",47,0)
 ;   ADT/A01 - MDC CPAN VS   - MDCA01
"RTN","MDPRE12",48,0)
 ;   ADT/A02 - MDC CPTP VS   - MDCA02
"RTN","MDPRE12",49,0)
 ;   ADT/A03 - MDC CPDE VS   - MDCA03
"RTN","MDPRE12",50,0)
 ;   ADT/A08 - MDC CPUPI VS  - MDCA08
"RTN","MDPRE12",51,0)
 ;   ADT/A11 - MDC CPCAN VS  - MDCA11
"RTN","MDPRE12",52,0)
 ;   ADT/A12 - MDC CPCT VS   - MDCA12
"RTN","MDPRE12",53,0)
 ;   ADT/A13 - MDC CPCDE VS  - MDCA13
"RTN","MDPRE12",54,0)
 ;
"RTN","MDPRE12",55,0)
 D POSTKID^VDEFVU("ADT","A01","CPAN","MDC CPAN VS","CLINICAL PROCEDURES","MDCA01","CLIO Admit/Visit Notification (A01)","CLIO Admit/Visit Notification (A01)")
"RTN","MDPRE12",56,0)
 D POSTKID^VDEFVU("ADT","A02","CPTP","MDC CPTP VS","CLINICAL PROCEDURES","MDCA02","CLIO Transfer a Patient (A02)","CLIO Transfer a Patient (A02)")
"RTN","MDPRE12",57,0)
 D POSTKID^VDEFVU("ADT","A03","CPDE","MDC CPDE VS","CLINICAL PROCEDURES","MDCA03","CLIO Discharge/End Visit (A03)","CLIO Discharge/End Visit (A03)")
"RTN","MDPRE12",58,0)
 D POSTKID^VDEFVU("ADT","A08","CPUPI","MDC CPUPI VS","CLINICAL PROCEDURES","MDCA08","CLIO Update Patient Info (A08)","CLIO Update Patient Info (A08)")
"RTN","MDPRE12",59,0)
 D POSTKID^VDEFVU("ADT","A11","CPCAN","MDC CPCAN VS","CLINICAL PROCEDURES","MDCA11","CLIO Cancel Admit Notice (A11)","CLIO Cancel Admit Notice (A11)")
"RTN","MDPRE12",60,0)
 D POSTKID^VDEFVU("ADT","A12","CPCT","MDC CPCT VS","CLINICAL PROCEDURES","MDCA12","CLIO Cancel Transfer (A12)","CLIO Cancel Transfer (A12)")
"RTN","MDPRE12",61,0)
 D POSTKID^VDEFVU("ADT","A13","CPCDE","MDC CPCDE VS","CLINICAL PROCEDURES","MDCA13","CLIO Cancel Discharge (A13)","CLIO Cancel Discharge (A13)")
"RTN","MDPRE12",62,0)
 D MES^XPDUTL(" CP Flowsheets - VDEF entries have been deactivated")
"RTN","MDPRE12",63,0)
 D MES^XPDUTL(" MD*1.0*12 Pre Init complete")
"RTN","MDPRE12",64,0)
 Q
"RTN","MDPRE12",65,0)
 ;
"SEC","^DIC",704.005,704.005,0,"AUDIT")
@
"SEC","^DIC",704.005,704.005,0,"DD")
@
"SEC","^DIC",704.005,704.005,0,"DEL")
@
"SEC","^DIC",704.005,704.005,0,"LAYGO")
@
"SEC","^DIC",704.005,704.005,0,"RD")
@
"SEC","^DIC",704.005,704.005,0,"WR")
@
"VER")
8.0^22.0
"^DD",704.005,704.005,0)
FIELD^^.1^10
"^DD",704.005,704.005,0,"DDA")
N
"^DD",704.005,704.005,0,"DT")
3110923
"^DD",704.005,704.005,0,"IX","B",704.005,.01)

"^DD",704.005,704.005,0,"NM","CP_MOVEMENT_AUDIT")

"^DD",704.005,704.005,0,"VRPK")
MD
"^DD",704.005,704.005,.01,0)
PATIENT^RP2'^DPT(^0;1^Q
"^DD",704.005,704.005,.01,1,0)
^.1
"^DD",704.005,704.005,.01,1,1,0)
704.005^B
"^DD",704.005,704.005,.01,1,1,1)
S ^MDC(704.005,"B",$E(X,1,30),DA)=""
"^DD",704.005,704.005,.01,1,1,2)
K ^MDC(704.005,"B",$E(X,1,30),DA)
"^DD",704.005,704.005,.01,1,1,"%D",0)
^.101^2^2^3091007^^
"^DD",704.005,704.005,.01,1,1,"%D",1,0)
This will make it easy to find and sort the PATIENT(s) involved per 
"^DD",704.005,704.005,.01,1,1,"%D",2,0)
patient movement data within this file.
"^DD",704.005,704.005,.01,3)
Answer with a PATIENT identifier.
"^DD",704.005,704.005,.01,21,0)
^^2^2^3090317^
"^DD",704.005,704.005,.01,21,1,0)
This field is the identifier of the patient involved in the patient 
"^DD",704.005,704.005,.01,21,2,0)
movement event.
"^DD",704.005,704.005,.01,"DT")
3090317
"^DD",704.005,704.005,.02,0)
DATE_TIME_OF_EVENT^D^^0;2^S %DT="ESTXR" D ^%DT S X=Y K:Y<1 X
"^DD",704.005,704.005,.02,3)
(No range limit on date)
"^DD",704.005,704.005,.02,21,0)
^^1^1^3090317^
"^DD",704.005,704.005,.02,21,1,0)
This field stores the date/time of the patient movement event.
"^DD",704.005,704.005,.02,"DT")
3090317
"^DD",704.005,704.005,.03,0)
DIVISION^P40.8'^DG(40.8,^0;3^Q
"^DD",704.005,704.005,.03,3)
Answer with a MEDICAL CENTER DIVISION identifier.
"^DD",704.005,704.005,.03,21,0)
^^1^1^3090327^
"^DD",704.005,704.005,.03,21,1,0)
This field identifies the DIVISION per the patient movement event.
"^DD",704.005,704.005,.03,"DT")
3090327
"^DD",704.005,704.005,.04,0)
WARD^P42'^DIC(42,^0;4^Q
"^DD",704.005,704.005,.04,3)
Answer with a WARD LOCATION identifier.
"^DD",704.005,704.005,.04,21,0)
^^1^1^3090327^
"^DD",704.005,704.005,.04,21,1,0)
This field identifies the WARD per the patient movement event.
"^DD",704.005,704.005,.04,"DT")
3090327
"^DD",704.005,704.005,.05,0)
BED^P405.4'^DG(405.4,^0;5^Q
"^DD",704.005,704.005,.05,3)
Answer with a ROOM-BED identifier.
"^DD",704.005,704.005,.05,21,0)
^^1^1^3090327^
"^DD",704.005,704.005,.05,21,1,0)
This field identifies the room-BED per the patient movement event.
"^DD",704.005,704.005,.05,"DT")
3090327
"^DD",704.005,704.005,.06,0)
MESSAGE_TYPE^F^^0;6^K:$L(X)>3!($L(X)<3) X
"^DD",704.005,704.005,.06,3)
Answer must be 3 characters in length
"^DD",704.005,704.005,.06,21,0)
^^2^2^3090327^
"^DD",704.005,704.005,.06,21,1,0)
This indicates the HL7 MESSAGE TYPE.  The value here can be 'ADT' to 
"^DD",704.005,704.005,.06,21,2,0)
indicate an admission/discharge/transfer type message.
"^DD",704.005,704.005,.06,"DT")
3090327
"^DD",704.005,704.005,.07,0)
EVENT_TYPE^F^^0;7^K:$L(X)>3!($L(X)<3) X
"^DD",704.005,704.005,.07,3)
Answer must be 3 characters in length
"^DD",704.005,704.005,.07,21,0)
^^2^2^3090327^
"^DD",704.005,704.005,.07,21,1,0)
This indicates the HL7 message EVENT TYPE.  The value here can be 'A01' to
"^DD",704.005,704.005,.07,21,2,0)
indicate an Admit/visit notification EVENT TYPE.
"^DD",704.005,704.005,.07,"DT")
3090327
"^DD",704.005,704.005,.08,0)
PIMS_EVENT_ID^F^^0;8^K:$L(X)>20!($L(X)<1) X
"^DD",704.005,704.005,.08,3)
Answer must be 1-20 characters in length.
"^DD",704.005,704.005,.08,21,0)
^^6^6^3090330^
"^DD",704.005,704.005,.08,21,1,0)
This is a copy of the internal entry number (ien) of the PATIENT MOVEMENT 
"^DD",704.005,704.005,.08,21,2,0)
file (#405) entry which correlates to this CP_MOVEMENT_AUDIT file entry.
"^DD",704.005,704.005,.08,21,3,0)
 
"^DD",704.005,704.005,.08,21,4,0)
If a movement is deleted, the corresponding entry from the patient 
"^DD",704.005,704.005,.08,21,5,0)
movement file is deleted as well.  This prevents this field from being an 
"^DD",704.005,704.005,.08,21,6,0)
actual pointer.  This IEN is used only for troubleshooting purposes.
"^DD",704.005,704.005,.08,"DT")
3090330
"^DD",704.005,704.005,.09,0)
ACCEPTED_BY_QUEUE^S^0:NO;1:YES;^0;9^Q
"^DD",704.005,704.005,.09,3)
Has the message been placed in the HL7 outbound queue?
"^DD",704.005,704.005,.09,21,0)
^^1^1^3110923^
"^DD",704.005,704.005,.09,21,1,0)
This indicates whether the HL7 message has been queued.
"^DD",704.005,704.005,.09,"DT")
3110923
"^DD",704.005,704.005,.1,0)
QUEUE_ERROR_MSG^F^^.1;1^K:$L(X)>250!($L(X)<1) X
"^DD",704.005,704.005,.1,3)
Answer must be 1-250 characters in length.
"^DD",704.005,704.005,.1,21,0)
^^2^2^3111005^^
"^DD",704.005,704.005,.1,21,1,0)
This field stores the error message, if an error message is returned by 
"^DD",704.005,704.005,.1,21,2,0)
the message queueing process.
"^DD",704.005,704.005,.1,"DT")
3111005
"^DIC",704.005,704.005,0)
CP_MOVEMENT_AUDIT^704.005
"^DIC",704.005,704.005,0,"GL")
^MDC(704.005,
"^DIC",704.005,704.005,"%",0)
^1.005^^0
"^DIC",704.005,704.005,"%D",0)
^^10^10^3110923^
"^DIC",704.005,704.005,"%D",1,0)
This file will hold a subset of patient movement data.  This must be done 
"^DIC",704.005,704.005,"%D",2,0)
rather than using a direct reference to the PATIENT MOVEMENT file 
"^DIC",704.005,704.005,"%D",3,0)
(#405) because, in the instance of cancellations, the internal entry 
"^DIC",704.005,704.005,"%D",4,0)
number (ien) of a patient movement disappears before there is the 
"^DIC",704.005,704.005,"%D",5,0)
chance to work with it.  This file will coalesce all of a movement's
"^DIC",704.005,704.005,"%D",6,0)
data to send to 3rd party users.  That data is sent to 3rd party users
"^DIC",704.005,704.005,"%D",7,0)
via Health Level Seven (HL7) messaging.  To ensure that message is 
"^DIC",704.005,704.005,"%D",8,0)
available to 3rd party users, the ACCEPTED BY QUEUE field (#.09) is set 
"^DIC",704.005,704.005,"%D",9,0)
to '1' to confirm the message is in the HL7 outbound queue; that CP 
"^DIC",704.005,704.005,"%D",10,0)
MOVEMENT AUDIT file entry will then need to be purged.
"^DIC",704.005,"B","CP_MOVEMENT_AUDIT",704.005)

**END**
**END**
