#---------------------------------------------------------------------------
# Copyright 2011-2012 The Open Source Electronic Health Record Agent
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#---------------------------------------------------------------------------
include("@VISTA_SOURCE_DIR@/CMake/CommonFunctions.cmake")
message(STATUS "Checking MUnit Patches...")
set(vendor_args "")
SetVendorArgsConfig(vendor_args "@VENDOR_NAME@" "@VISTA_CACHE_NAMESPACE@"
                     "@VISTA_CACHE_INSTANCE@" "@VISTA_CACHE_USERNAME@"
                     "@VISTA_CACHE_PASSWORD@")
set(MUNIT_PATCH_DIR "@VISTA_SOURCE_DIR@/Testing/Setup/Patches/MUnit")
set(PATCH_INSTALL_SCRIPT "@VISTA_SOURCE_DIR@/Scripts/PatchSequenceApply.py")
set(LOG_DIR "@UNITTEST_LOG_DIR@")
list(APPEND vendor_args -p "${MUNIT_PATCH_DIR}" -l "${LOG_DIR}" -i -n "all")
execute_process(COMMAND "@PYTHON_EXECUTABLE@" "@VISTA_SOURCE_DIR@/Scripts/PatchSequenceApply.py" ${vendor_args}
                RESULT_VARIABLE retCode
                OUTPUT_VARIABLE output)
if(retCode)
  message(ERROR "Installing Patches Errors: ${output}")
endif()
message(STATUS "Collecting Unit Testing Routines...")
file(GLOB UNIT_TEST_FILES "@VISTA_SOURCE_DIR@/Packages/@package_name@/Testing/MUnit/*.m" )
execute_process(COMMAND "@PYTHON_EXECUTABLE@" "@VISTA_SOURCE_DIR@/Scripts/PackRO.py" ${UNIT_TEST_FILES} WORKING_DIRECTORY "@VISTA_SOURCE_DIR@" OUTPUT_FILE "@RoutineImportFile@")
message(STATUS "Importing Unit Testing Routines...")
execute_process(COMMAND "@PYTHON_EXECUTABLE@" "@SCRIPT_OUTPUT_DIR@/@package_file_name@RoutineImport.py")
execute_process(COMMAND "@PYTHON_EXECUTABLE@" "@SCRIPT_OUTPUT_DIR@/@package_file_name@.py"
RESULT_VARIABLE return ERROR_VARIABLE ERROR)

if(NOT return EQUAL 0)
  file(READ @logfile@ contents)
  message(FATAL_ERROR "Error running Expect:\nReturn Value = ${return}\n${contents}\n${ERROR}")
endif()
file(STRINGS "@logfile@" OUTPUT)
ReportUnitTestResult(@package_file_name@ "@VISTA_SOURCE_DIR@" "${OUTPUT}")
foreach(routine ${UNIT_TEST_FILES})
  get_filename_component(routine ${routine} NAME_WE)
  if(EXISTS "@VISTA_SOURCE_DIR@/Packages/@package_name@/Testing/MUnit/Data/${routine}.log")
    file(STRINGS "@VISTA_SOURCE_DIR@/Packages/@package_name@/Testing/MUnit/Data/${routine}.log" baseline)
    string(REPLACE ";" "" OUTPUT ${OUTPUT})
    string(REPLACE "[C" "" OUTPUT ${OUTPUT})
    string(REPLACE "[?1h=" "" OUTPUT ${OUTPUT})
    string(REPLACE "[?1l>" "" OUTPUT ${OUTPUT})
    string(REPLACE "${baseline}" "" newresult ${OUTPUT})
    if(${newresult} STREQUAL ${OUTPUT})
      message(FATAL_ERROR "Test Report doesn't match the baseline file in: @VISTA_SOURCE_DIR@/Packages/@package_name@/Testing/MUnit/Data/${routine}.log")
    endif()
  endif()
endforeach()
