KIDS Distribution saved on Sep 04, 2012@16:48:50
XT*7.3*107 T4 (FROM 1/5/2012)
**KIDS**:XT*7.3*107^

**INSTALL NAME**
XT*7.3*107
"BLD",1012,0)
XT*7.3*107^TOOLKIT^0^3120904^y^^
"BLD",1012,1,0)
^^3^3^3080606^^
"BLD",1012,1,1,0)
XT*7.3*107
"BLD",1012,1,2,0)
 
"BLD",1012,1,3,0)
See the patch module for details.
"BLD",1012,4,0)
^9.64PA^^
"BLD",1012,6.3)
14
"BLD",1012,"KRN",0)
^9.67PA^779.2^20
"BLD",1012,"KRN",.4,0)
.4
"BLD",1012,"KRN",.401,0)
.401
"BLD",1012,"KRN",.402,0)
.402
"BLD",1012,"KRN",.403,0)
.403
"BLD",1012,"KRN",.5,0)
.5
"BLD",1012,"KRN",.84,0)
.84
"BLD",1012,"KRN",3.6,0)
3.6
"BLD",1012,"KRN",3.8,0)
3.8
"BLD",1012,"KRN",9.2,0)
9.2
"BLD",1012,"KRN",9.8,0)
9.8
"BLD",1012,"KRN",9.8,"NM",0)
^9.68A^9^9
"BLD",1012,"KRN",9.8,"NM",1,0)
XTDEBUG^^0^B95877949
"BLD",1012,"KRN",9.8,"NM",2,0)
XTDEBUG1^^0^B163320636
"BLD",1012,"KRN",9.8,"NM",3,0)
XTDEBUG2^^0^B142107187
"BLD",1012,"KRN",9.8,"NM",4,0)
XTDEBUG3^^0^B107405976
"BLD",1012,"KRN",9.8,"NM",5,0)
XTDEBUG4^^0^B58225395
"BLD",1012,"KRN",9.8,"NM",6,0)
XTDEBUG5^^0^B34260042
"BLD",1012,"KRN",9.8,"NM",7,0)
XTDEBUG6^^0^B8391987
"BLD",1012,"KRN",9.8,"NM",8,0)
XTDEBUG7^^0^B90741354
"BLD",1012,"KRN",9.8,"NM",9,0)
XTDEBUG8^^0^B7068042
"BLD",1012,"KRN",9.8,"NM","B","XTDEBUG",1)

"BLD",1012,"KRN",9.8,"NM","B","XTDEBUG1",2)

"BLD",1012,"KRN",9.8,"NM","B","XTDEBUG2",3)

"BLD",1012,"KRN",9.8,"NM","B","XTDEBUG3",4)

"BLD",1012,"KRN",9.8,"NM","B","XTDEBUG4",5)

"BLD",1012,"KRN",9.8,"NM","B","XTDEBUG5",6)

"BLD",1012,"KRN",9.8,"NM","B","XTDEBUG6",7)

"BLD",1012,"KRN",9.8,"NM","B","XTDEBUG7",8)

"BLD",1012,"KRN",9.8,"NM","B","XTDEBUG8",9)

"BLD",1012,"KRN",19,0)
19
"BLD",1012,"KRN",19.1,0)
19.1
"BLD",1012,"KRN",101,0)
101
"BLD",1012,"KRN",409.61,0)
409.61
"BLD",1012,"KRN",771,0)
771
"BLD",1012,"KRN",779.2,0)
779.2
"BLD",1012,"KRN",870,0)
870
"BLD",1012,"KRN",8989.51,0)
8989.51
"BLD",1012,"KRN",8989.52,0)
8989.52
"BLD",1012,"KRN",8994,0)
8994
"BLD",1012,"KRN",8994,"NM",0)
^9.68A^9^9
"BLD",1012,"KRN",8994,"NM",1,0)
XTDEBUG ADD BREAKPOINT^^0
"BLD",1012,"KRN",8994,"NM",2,0)
XTDEBUG ADD WATCH^^0
"BLD",1012,"KRN",8994,"NM",3,0)
XTDEBUG DELETE BREAK^^0
"BLD",1012,"KRN",8994,"NM",4,0)
XTDEBUG DELETE WATCH^^0
"BLD",1012,"KRN",8994,"NM",5,0)
XTDEBUG DO LINE^^0
"BLD",1012,"KRN",8994,"NM",6,0)
XTDEBUG NEXT^^0
"BLD",1012,"KRN",8994,"NM",7,0)
XTDEBUG START^^0
"BLD",1012,"KRN",8994,"NM",8,0)
XTDEBUG SYMBOL TABLE^^0
"BLD",1012,"KRN",8994,"NM",9,0)
XTDEBUG READ INPUT^^0
"BLD",1012,"KRN",8994,"NM","B","XTDEBUG ADD BREAKPOINT",1)

"BLD",1012,"KRN",8994,"NM","B","XTDEBUG ADD WATCH",2)

"BLD",1012,"KRN",8994,"NM","B","XTDEBUG DELETE BREAK",3)

"BLD",1012,"KRN",8994,"NM","B","XTDEBUG DELETE WATCH",4)

"BLD",1012,"KRN",8994,"NM","B","XTDEBUG DO LINE",5)

"BLD",1012,"KRN",8994,"NM","B","XTDEBUG NEXT",6)

"BLD",1012,"KRN",8994,"NM","B","XTDEBUG READ INPUT",9)

"BLD",1012,"KRN",8994,"NM","B","XTDEBUG START",7)

"BLD",1012,"KRN",8994,"NM","B","XTDEBUG SYMBOL TABLE",8)

"BLD",1012,"KRN","B",.4,.4)

"BLD",1012,"KRN","B",.401,.401)

"BLD",1012,"KRN","B",.402,.402)

"BLD",1012,"KRN","B",.403,.403)

"BLD",1012,"KRN","B",.5,.5)

"BLD",1012,"KRN","B",.84,.84)

"BLD",1012,"KRN","B",3.6,3.6)

"BLD",1012,"KRN","B",3.8,3.8)

"BLD",1012,"KRN","B",9.2,9.2)

"BLD",1012,"KRN","B",9.8,9.8)

"BLD",1012,"KRN","B",19,19)

"BLD",1012,"KRN","B",19.1,19.1)

"BLD",1012,"KRN","B",101,101)

"BLD",1012,"KRN","B",409.61,409.61)

"BLD",1012,"KRN","B",771,771)

"BLD",1012,"KRN","B",779.2,779.2)

"BLD",1012,"KRN","B",870,870)

"BLD",1012,"KRN","B",8989.51,8989.51)

"BLD",1012,"KRN","B",8989.52,8989.52)

"BLD",1012,"KRN","B",8994,8994)

"BLD",1012,"QDEF")
^^^^NO^^^^NO^^NO
"BLD",1012,"QUES",0)
^9.62^^
"BLD",1012,"REQB",0)
^9.611^^
"KRN",8994,169,-1)
0^5
"KRN",8994,169,0)
XTDEBUG DO LINE^DOLINE^XTDEBUG^4^^^^1
"KRN",8994,170,-1)
0^6
"KRN",8994,170,0)
XTDEBUG NEXT^NEXT^XTDEBUG^4^^^^1
"KRN",8994,171,-1)
0^7
"KRN",8994,171,0)
XTDEBUG START^START^XTDEBUG^4^^^^1
"KRN",8994,172,-1)
0^8
"KRN",8994,172,0)
XTDEBUG SYMBOL TABLE^GETVALS^XTDEBUG^4^^^^1
"KRN",8994,173,-1)
0^1
"KRN",8994,173,0)
XTDEBUG ADD BREAKPOINT^SETBREAK^XTDEBUG^4^^^^1
"KRN",8994,174,-1)
0^2
"KRN",8994,174,0)
XTDEBUG ADD WATCH^SETWATCH^XTDEBUG^4^^^^1
"KRN",8994,175,-1)
0^3
"KRN",8994,175,0)
XTDEBUG DELETE BREAK^CLRBREAK^XTDEBUG5^4^^^^1
"KRN",8994,176,-1)
0^4
"KRN",8994,176,0)
XTDEBUG DELETE WATCH^CLRWATCH^XTDEBUG5^4^^^^1
"KRN",8994,178,-1)
0^9
"KRN",8994,178,0)
XTDEBUG READ INPUT^READDATA^XTDEBUG^4^R^^^1
"KRN",8994,178,2,0)
^8994.02A^2^2
"KRN",8994,178,2,1,0)
XTDEBVAL^1^255^1^1
"KRN",8994,178,2,2,0)
TIMEDOUT^1^1^1^2
"KRN",8994,178,2,"B","TIMEDOUT",2)

"KRN",8994,178,2,"B","XTDEBVAL",1)

"KRN",8994,178,2,"PARAMSEQ",1,1)

"KRN",8994,178,2,"PARAMSEQ",2,2)

"MBREQ")
0
"ORD",16,8994)
8994;16;1;;;;;;;RPCDEL^XPDIA1
"ORD",16,8994,0)
REMOTE PROCEDURE
"PKG",6,-1)
1^1
"PKG",6,0)
TOOLKIT^XT^PROGRAMMERS OPTIONS, MULTI. TERM LOOKUP^
"PKG",6,20,0)
^9.402P^^0
"PKG",6,22,0)
^9.49I^1^1
"PKG",6,22,1,0)
7.3^3040428^2970513^2
"PKG",6,22,1,"PAH",1,0)
107^3120904
"PKG",6,22,1,"PAH",1,1,0)
^^3^3^3120904
"PKG",6,22,1,"PAH",1,1,1,0)
XT*7.3*107
"PKG",6,22,1,"PAH",1,1,2,0)
 
"PKG",6,22,1,"PAH",1,1,3,0)
See the patch module for details.
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
9
"RTN","XTDEBUG")
0^1^B95877949
"RTN","XTDEBUG",1,0)
XTDEBUG ;JLI-M DEBUGGER ;06/13/08  16:29
"RTN","XTDEBUG",2,0)
 ;;7.3;TOOLKIT;**107**;Apr 25, 1995;Build 14
"RTN","XTDEBUG",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified
"RTN","XTDEBUG",4,0)
 D EN^XTMUNIT("ZZUTXTD1") W !,DUZ
"RTN","XTDEBUG",5,0)
 Q
"RTN","XTDEBUG",6,0)
 ;
"RTN","XTDEBUG",7,0)
 ; 040909 PM -- over the past few days I have realized that the functions for entry and
"RTN","XTDEBUG",8,0)
 ;              return from a tag (e.g., DO, $$, and perhaps GO) have to be independent
"RTN","XTDEBUG",9,0)
 ;              of the current routine name and current line references.  In some cases
"RTN","XTDEBUG",10,0)
 ;              there will be no current routine name and line reference appropriate, e.g.,
"RTN","XTDEBUG",11,0)
 ;              in the case of execute statements, or in the case of code involved with
"RTN","XTDEBUG",12,0)
 ;              do's with no argument.
"RTN","XTDEBUG",13,0)
 ;
"RTN","XTDEBUG",14,0)
 ;              Instead the code should use the "CMND" reference for the current level
"RTN","XTDEBUG",15,0)
 ;              to continue processing, and ENTRY references to determine the type of
"RTN","XTDEBUG",16,0)
 ;              processing to return to.
"RTN","XTDEBUG",17,0)
 ;
"RTN","XTDEBUG",18,0)
 ; 050723 --    In STEP mode the current version is not stopping at the beginning of each
"RTN","XTDEBUG",19,0)
 ;              line, on return from a DO, etc.
"RTN","XTDEBUG",20,0)
 ;
"RTN","XTDEBUG",21,0)
START(XTDEBRES,XTDEBCMD) ; .RPC entry point
"RTN","XTDEBUG",22,0)
 S XTDEBCM1=XTDEBCMD
"RTN","XTDEBUG",23,0)
 ; this tag is called only on initial call, all subsequent calls
"RTN","XTDEBUG",24,0)
 ; should be for the tag NEXT to continue the debugging process
"RTN","XTDEBUG",25,0)
 ;
"RTN","XTDEBUG",26,0)
 ; XTDEBRES - a closed global reference is returned as the result
"RTN","XTDEBUG",27,0)
 ;            which can be used to access all of the data being returned
"RTN","XTDEBUG",28,0)
 ; XTDEBCMD - a string which contains the information about the TAG
"RTN","XTDEBUG",29,0)
 ;            to be used as the entry for debugging.  This is in the
"RTN","XTDEBUG",30,0)
 ;            form that it would appear following a DO or =$$ reference
"RTN","XTDEBUG",31,0)
 ;            as appropriate for the tag.
"RTN","XTDEBUG",32,0)
 ;            e.g.,   "EN^TESTROU(.XVAR,YVAL,""INPUT STRING"")"
"RTN","XTDEBUG",33,0)
 ;
"RTN","XTDEBUG",34,0)
 N XTDEBPAR,XTDEBLNM,XTDEBCOD,XTDEBARG,XTDEBLOC,XTDEBCUR,XTDEBROU
"RTN","XTDEBUG",35,0)
 N XTDEBTAG
"RTN","XTDEBUG",36,0)
 ; ZEXCEPT: XTDEBLGR   - this is a global variable
"RTN","XTDEBUG",37,0)
 S XTDEBLGR=$$LGR^%ZOSV ; capture last global reference
"RTN","XTDEBUG",38,0)
 S XTDEBLOC=$$GETGLOB() K @XTDEBLOC ; clear all entries, etc.
"RTN","XTDEBUG",39,0)
 S XTDEBRES=$$RESULTS() K @XTDEBRES
"RTN","XTDEBUG",40,0)
 M @XTDEBLOC@("XTDEBDUZ")=DUZ
"RTN","XTDEBUG",41,0)
 D STRTVALS ; save off copy of initial values
"RTN","XTDEBUG",42,0)
 D DEBUG^XTMLOG("START TO VALUES")
"RTN","XTDEBUG",43,0)
 ; following line now handled by STRTVALS
"RTN","XTDEBUG",44,0)
 ;D VALUES ; get initial values before entry for comparisons
"RTN","XTDEBUG",45,0)
 ; 040911 -- modify to use GETCMND for args, etc.
"RTN","XTDEBUG",46,0)
 ; I "^D^G^X^DO^GO^XECUTE^"'[("^"_$P(XTDEBCMD," ")_"^") S XTDEBCMD="D "_XTDEBCMD
"RTN","XTDEBUG",47,0)
 S @XTDEBLOC@("EXITTYPE")="START"
"RTN","XTDEBUG",48,0)
 ; to command line add W ! to flush output Q to insure we quit properly
"RTN","XTDEBUG",49,0)
 I $E(XTDEBCMD,$L(XTDEBCMD))'="Q" S XTDEBCMD=XTDEBCMD_" Q"
"RTN","XTDEBUG",50,0)
 ;    set lastlvl = 0
"RTN","XTDEBUG",51,0)
 S @XTDEBLOC@("LASTLVL")=0,@XTDEBLOC@("LVL",0,"CODE")=XTDEBCMD,^("ROUTINE")="@",^("LINE")="",^("TYPE")="XECUTE",^("CMND")=XTDEBCMD
"RTN","XTDEBUG",52,0)
 D DEBUG^XTMLOG("NEW XTDEBCMD","XTDEBCMD")
"RTN","XTDEBUG",53,0)
 I XTDEBCMD[U D
"RTN","XTDEBUG",54,0)
 . D DEBUG^XTMLOG("IN NEW CODE")
"RTN","XTDEBUG",55,0)
 . S XTDEBROU=$P(XTDEBCMD,U,2),XTDEBROU=$P(XTDEBROU," "),XTDEBROU=$P(XTDEBROU,"(")
"RTN","XTDEBUG",56,0)
 . D DEBUG^XTMLOG("XTDEBROU","XTDEBROU")
"RTN","XTDEBUG",57,0)
 . Q:XTDEBROU=""  S XTDEBTAG=$P(XTDEBCMD,U)
"RTN","XTDEBUG",58,0)
 . I XTDEBTAG["$$" S XTDEBTAG=$P(XTDEBTAG,"$$",2)
"RTN","XTDEBUG",59,0)
 . S XTDEBTAG=$P(XTDEBTAG," ",$L(XTDEBTAG," ")) S XTDEBTAG=$$LINENUM(XTDEBROU,XTDEBTAG)
"RTN","XTDEBUG",60,0)
 . D DEBUG^XTMLOG("XTDEBROU","XTDEBROU,XTDEBTAG")
"RTN","XTDEBUG",61,0)
 . S @XTDEBLOC@("LVL",0,"ROUTINE")=XTDEBROU,^("LINE")=XTDEBTAG
"RTN","XTDEBUG",62,0)
 . Q
"RTN","XTDEBUG",63,0)
 D DEBUG^XTMLOG("START","XTDEBCMD")
"RTN","XTDEBUG",64,0)
 S @XTDEBLOC@("LVL",0,"ENTRY")="DOLINE"
"RTN","XTDEBUG",65,0)
 D REASON("START",1) ;S @XTDEBRES@(" REASON")="SECTION=REASON",@XTDEBRES@(" REASON",0)="START:  " ;  _(XTDEBLNM+1)_"   : "_$$GETLINE(XTDEBROU,"+"_(XTDEBLNM+1))
"RTN","XTDEBUG",66,0)
 Q
"RTN","XTDEBUG",67,0)
 ;
"RTN","XTDEBUG",68,0)
NEXT(XTDEBRES,XTDEBTYP) ; .RPC- rpc to be used for each subsequent entry after initial entry
"RTN","XTDEBUG",69,0)
NEXT1 ;
"RTN","XTDEBUG",70,0)
 N XTDEBLOC,XTDEBROU,XTDEBRTN,XTDEBCOD,XTDEBLNM,XTDEBENT,XTDEBLVL
"RTN","XTDEBUG",71,0)
 N XTDEBCUR,XTDEBTR1,XTDEBXXX,XTDEBCMD,XTDEBEN1
"RTN","XTDEBUG",72,0)
 S XTDEBENT=1,XTDEBEN1=1
"RTN","XTDEBUG",73,0)
 D DEBUG^XTMLOG("RE-ENTRY AT NEXT")
"RTN","XTDEBUG",74,0)
 S XTDEBLOC=$$GETGLOB(),XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG",75,0)
 N DUZ M DUZ=@XTDEBLOC@("XTDEBDUZ") ; protect original value of DUZ
"RTN","XTDEBUG",76,0)
 I $D(@XTDEBLOC@("SV")) F XTDEBRTN=1:1:26 S XTDEBCOD=$C(64+XTDEBRTN) K @XTDEBCOD M:$D(@XTDEBLOC@("SV",XTDEBCOD)) @(XTDEBCOD)=@XTDEBLOC@("SV",XTDEBCOD)
"RTN","XTDEBUG",77,0)
 K XTDEBRTN
"RTN","XTDEBUG",78,0)
 I '$D(U) S U="^"
"RTN","XTDEBUG",79,0)
 S @XTDEBLOC@("EXITTYPE")=XTDEBTYP
"RTN","XTDEBUG",80,0)
 ;
"RTN","XTDEBUG",81,0)
NEXTENT ;
"RTN","XTDEBUG",82,0)
 S XTDEBLOC=$$GETGLOB(),XTDEBRES=$$RESULTS()
"RTN","XTDEBUG",83,0)
 S XTDEBLVL=+$G(@XTDEBLOC@("LASTLVL"))
"RTN","XTDEBUG",84,0)
 D INFO^XTMLOG("ENTERED NEXTENT","XTDEBLVL")
"RTN","XTDEBUG",85,0)
 K @XTDEBLOC@("LVL",XTDEBLVL,"VALUESDONE") ;I '$D(XTDEBENT) D VALUES I $$CHKQUIT() Q
"RTN","XTDEBUG",86,0)
 D DEBUG^XTMLOG("NEXTENT1","XTDEBLVL,"_$NA(@XTDEBLOC@("LVL",XTDEBLVL,"ENTRY"))_","_$NA(@XTDEBLOC@("LVL",XTDEBLVL,"CMND")))
"RTN","XTDEBUG",87,0)
 ; following is true only if finished processing (level 0 is original input line)
"RTN","XTDEBUG",88,0)
 I XTDEBLVL=0,($G(@XTDEBLOC@("LVL",XTDEBLVL,"CMND"))="")!($G(^("CMND"))="Q"),$G(^("ENTRY"))="" D REASON^XTDEBUG("DONE",0) Q  ;S @XTDEBRES@(" REASON")="SECTION=REASON",^(" REASON",0)="PROCESSING IS DONE!" Q
"RTN","XTDEBUG",89,0)
 I XTDEBLVL<0 D REASON^XTDEBUG("DONE",0) Q
"RTN","XTDEBUG",90,0)
 D DEBUG^XTMLOG("NEXTENT1A","XTDEBLVL,"_$NA(@XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")))
"RTN","XTDEBUG",91,0)
 I $G(@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE"))="@",$G(^("CMND"))="",'$D(^("XTDEBARG","ARGS")) S @XTDEBRES@(" REASON")="SECTION=REASON",^(" REASON",0)="PROCESSING IS DONE!" Q
"RTN","XTDEBUG",92,0)
 I $G(@XTDEBLOC@("LVL",XTDEBLVL))=0,$G(^("CMND"))="",'$D(^("XTDEBARG","ARGS")) S @XTDEBRES@(" REASON")="SECTION=REASON",^(" REASON",0)="PROCESSING IS DONE!" Q
"RTN","XTDEBUG",93,0)
 D DEBUG^XTMLOG("NEXTENT1B","XTDEBLVL,"_$NA(@XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")))
"RTN","XTDEBUG",94,0)
 ;I XTDEBLVL>0 S XTDEBXXX=$G(@XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")) I XTDEBXXX'="" G @XTDEBXXX
"RTN","XTDEBUG",95,0)
 S XTDEBXXX=$G(@XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")) I XTDEBXXX'="" G @XTDEBXXX
"RTN","XTDEBUG",96,0)
 ; move to next line of current routine
"RTN","XTDEBUG",97,0)
 K @XTDEBLOC@("LVL",XTDEBLVL,"CMND PERIODS")
"RTN","XTDEBUG",98,0)
 S XTDEBROU=$G(@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE")),XTDEBLNM=$G(@XTDEBLOC@("LVL",XTDEBLVL,"LINE"))+1
"RTN","XTDEBUG",99,0)
 D DEBUG^XTMLOG("NEXTENT1C","XTDEBROU,XTDEBLNM")
"RTN","XTDEBUG",100,0)
 ;    look for breakpoint, if current line is one and we haven't just re-entered, set up results and leave
"RTN","XTDEBUG",101,0)
 ;    test needed only for coming in without going through START
"RTN","XTDEBUG",102,0)
 D DEBUG^XTMLOG("NEXTENT1D","XTDEBLVL,"_$NA(@XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")))
"RTN","XTDEBUG",103,0)
 K XTDEBENT,XTDEBEN1
"RTN","XTDEBUG",104,0)
 D DEBUG^XTMLOG("NEXTENT")
"RTN","XTDEBUG",105,0)
 S XTDEBCOD=$$GETLINE(XTDEBROU,"+"_XTDEBLNM)
"RTN","XTDEBUG",106,0)
 D DEBUG^XTMLOG("NEXTENT","XTDEBCOD")
"RTN","XTDEBUG",107,0)
 S XTDEBCMD=$P(XTDEBCOD," ",2,99)
"RTN","XTDEBUG",108,0)
 D DEBUG^XTMLOG("NEXTENT 2","XTDEBCOD,XTDEBROU,XTDEBLNM")
"RTN","XTDEBUG",109,0)
 I XTDEBLNM'>0,XTDEBCOD="" D REASON("DONE") Q
"RTN","XTDEBUG",110,0)
 S XTDEBLVL=@XTDEBLOC@("LASTLVL"),@XTDEBLOC@("LVL",XTDEBLVL,"CODE")=XTDEBCOD,^("ROUTINE")=XTDEBROU,^("LINE")=XTDEBLNM,^("CMND")=XTDEBCMD
"RTN","XTDEBUG",111,0)
 I $E(XTDEBCMD,1,2)=";;" Q
"RTN","XTDEBUG",112,0)
 G DOLINE ;
"RTN","XTDEBUG",113,0)
 ;
"RTN","XTDEBUG",114,0)
CHKQUIT(XTDEBNUM) ;
"RTN","XTDEBUG",115,0)
 N XTDEBLOC,XTDEBLVL,XTDEBLIN,XTDEBUGI
"RTN","XTDEBUG",116,0)
 S:$G(XTDEBNUM)="" XTDEBNUM=1
"RTN","XTDEBUG",117,0)
 S XTDEBLOC=$$GETGLOB(),XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG",118,0)
 D DEBUG^XTMLOG("CHKQUIT0")
"RTN","XTDEBUG",119,0)
 D VALUES
"RTN","XTDEBUG",120,0)
 D DEBUG^XTMLOG("CHKQUIT1")
"RTN","XTDEBUG",121,0)
 S @XTDEBLOC@("LASTCMND")=$G(@XTDEBLOC@("CURRCMND"))
"RTN","XTDEBUG",122,0)
 S XTDEBLIN="" F XTDEBUGI=1:1 Q:'$D(@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG","ARGS",XTDEBUGI))  D
"RTN","XTDEBUG",123,0)
 . N XTDEBVAL S XTDEBVAL=$S($D(@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG","ARGS",XTDEBUGI,"ORIGINAL")):^("ORIGINAL"),1:@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG","ARGS",XTDEBUGI))
"RTN","XTDEBUG",124,0)
 . S XTDEBLIN=XTDEBLIN_$S(XTDEBUGI>1:",",1:"")_XTDEBVAL_$S($G(^(XTDEBUGI,"POSTCOND"))'="":":"_^("POSTCOND"),1:"")
"RTN","XTDEBUG",125,0)
 . Q
"RTN","XTDEBUG",126,0)
 I $G(@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG","CMND"))'="" S XTDEBLIN=^("CMND")_$S($D(^("CMND","PRECOND")):":"_^("PRECOND"),1:"")_" "_XTDEBLIN
"RTN","XTDEBUG",127,0)
 S @XTDEBLOC@("CURRCMND")=XTDEBLIN
"RTN","XTDEBUG",128,0)
 I $$CHKBREAK($G(@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE")),$G(@XTDEBLOC@("LVL",XTDEBLVL,"LINE"))) D REASON("BREAK",XTDEBNUM) Q 1
"RTN","XTDEBUG",129,0)
 I $G(@XTDEBLOC@("EXITTYPE"))="STEP",'$D(@XTDEBLOC@("LVL",XTDEBLVL,"PRE-PROCESS")) D REASON("STEP",XTDEBNUM) Q 1
"RTN","XTDEBUG",130,0)
 I $G(@XTDEBLOC@("EXITTYPE"))="START" D REASON("START",XTDEBNUM) Q 1
"RTN","XTDEBUG",131,0)
 I $$CHKWATCH() D REASON("WATCH",XTDEBNUM) Q 1
"RTN","XTDEBUG",132,0)
 Q 0
"RTN","XTDEBUG",133,0)
 ;
"RTN","XTDEBUG",134,0)
READDATA(XTDEBRES,XTDEBVAL,XTDEBTO,XTDEBTYP) ; entry point for return from a READ command
"RTN","XTDEBUG",135,0)
 N XTDEBLOC,XTDEBLVL,XTDEBVAR
"RTN","XTDEBUG",136,0)
 ; ZEXCEPT: XTDEBTST  -- global - used as data holder for $TEST variable
"RTN","XTDEBUG",137,0)
 D DEBUG^XTMLOG("RE-ENTERED AT READDATA")
"RTN","XTDEBUG",138,0)
 S XTDEBRES=$$RESULTS()
"RTN","XTDEBUG",139,0)
 S XTDEBLOC=$$GETGLOB()
"RTN","XTDEBUG",140,0)
 S XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG",141,0)
 S XTDEBVAR=@XTDEBLOC@("LVL",XTDEBLVL,"READVAR")
"RTN","XTDEBUG",142,0)
 I XTDEBTO S XTDEBTST=0
"RTN","XTDEBUG",143,0)
 X "S @XTDEBVAR=XTDEBVAL"
"RTN","XTDEBUG",144,0)
 D DEBUG^XTMLOG("XTDEBVAL","XTDEBVAL,XTDEBVAR")
"RTN","XTDEBUG",145,0)
 D NEXT(.XTDEBRES,XTDEBTYP)
"RTN","XTDEBUG",146,0)
 Q
"RTN","XTDEBUG",147,0)
 ;
"RTN","XTDEBUG",148,0)
GETGLOB() ; simply returns the base global location for storage
"RTN","XTDEBUG",149,0)
 Q $NA(^TMP("XTDEBUG",$J))
"RTN","XTDEBUG",150,0)
 ;
"RTN","XTDEBUG",151,0)
RESULTS() ; intrinsic function to return closed global reference to results
"RTN","XTDEBUG",152,0)
 Q $NA(@$$GETGLOB()@("RES"))
"RTN","XTDEBUG",153,0)
 ;
"RTN","XTDEBUG",154,0)
ROUGLOB() ;
"RTN","XTDEBUG",155,0)
 Q $NA(@$$GETGLOB()@("ROU"))
"RTN","XTDEBUG",156,0)
 ;
"RTN","XTDEBUG",157,0)
CHANGGLO() ;
"RTN","XTDEBUG",158,0)
 Q $NA(^TMP($J,"RESULTS"))
"RTN","XTDEBUG",159,0)
 ;
"RTN","XTDEBUG",160,0)
 ;
"RTN","XTDEBUG",161,0)
 ;  XTDEBUG1 ---
"RTN","XTDEBUG",162,0)
 ;
"RTN","XTDEBUG",163,0)
STRTCMND ;
"RTN","XTDEBUG",164,0)
 G STRTCMND^XTDEBUG1
"RTN","XTDEBUG",165,0)
 ;
"RTN","XTDEBUG",166,0)
COMMANDS ;
"RTN","XTDEBUG",167,0)
 G COMMANDS^XTDEBUG1
"RTN","XTDEBUG",168,0)
 ;
"RTN","XTDEBUG",169,0)
EXITCMND ;
"RTN","XTDEBUG",170,0)
 G EXITCMND^XTDEBUG1
"RTN","XTDEBUG",171,0)
 ;
"RTN","XTDEBUG",172,0)
DOLINE ;
"RTN","XTDEBUG",173,0)
 G DOLINE^XTDEBUG1
"RTN","XTDEBUG",174,0)
 ;
"RTN","XTDEBUG",175,0)
DOLINE1 ;
"RTN","XTDEBUG",176,0)
 G DOLINE1^XTDEBUG1
"RTN","XTDEBUG",177,0)
 ;
"RTN","XTDEBUG",178,0)
 ;  XTDEBUG2 ----
"RTN","XTDEBUG",179,0)
 ;
"RTN","XTDEBUG",180,0)
STRTFOR ;
"RTN","XTDEBUG",181,0)
 G STRTFOR^XTDEBUG2
"RTN","XTDEBUG",182,0)
 ;
"RTN","XTDEBUG",183,0)
FORCMND ;
"RTN","XTDEBUG",184,0)
 G FORCMND^XTDEBUG2
"RTN","XTDEBUG",185,0)
 ;
"RTN","XTDEBUG",186,0)
NEXTFOR ;
"RTN","XTDEBUG",187,0)
 G NEXTFOR^XTDEBUG2
"RTN","XTDEBUG",188,0)
 ;
"RTN","XTDEBUG",189,0)
ENDFOR ;
"RTN","XTDEBUG",190,0)
 G ENDFOR^XTDEBUG2
"RTN","XTDEBUG",191,0)
 ;
"RTN","XTDEBUG",192,0)
SETDOLT ;
"RTN","XTDEBUG",193,0)
 D SETDOLT^XTDEBUG2
"RTN","XTDEBUG",194,0)
 Q
"RTN","XTDEBUG",195,0)
 ;
"RTN","XTDEBUG",196,0)
SETLGR ;
"RTN","XTDEBUG",197,0)
 D SETLGR^XTDEBUG2
"RTN","XTDEBUG",198,0)
 Q
"RTN","XTDEBUG",199,0)
 ;
"RTN","XTDEBUG",200,0)
RESETLGR ;
"RTN","XTDEBUG",201,0)
 D RESETLGR^XTDEBUG2
"RTN","XTDEBUG",202,0)
 Q
"RTN","XTDEBUG",203,0)
 ;
"RTN","XTDEBUG",204,0)
CHKARGS(XTDEBINP,XTDEBCNT) ;
"RTN","XTDEBUG",205,0)
 Q $$CHKARGS^XTDEBUG2(.XTDEBINP,.XTDEBCNT)
"RTN","XTDEBUG",206,0)
 ;
"RTN","XTDEBUG",207,0)
PREPROCS ;
"RTN","XTDEBUG",208,0)
 G PREPROCS^XTDEBUG2
"RTN","XTDEBUG",209,0)
 ;
"RTN","XTDEBUG",210,0)
DOLRTEXT(ARG,ROUTINE) ;
"RTN","XTDEBUG",211,0)
 Q $$DOLRTEXT^XTDEBUG2(ARG,ROUTINE)
"RTN","XTDEBUG",212,0)
 ;
"RTN","XTDEBUG",213,0)
QUERYNUM(VALUE) ;
"RTN","XTDEBUG",214,0)
 Q $$QUERYNUM^XTDEBUG2(VALUE)
"RTN","XTDEBUG",215,0)
 ;
"RTN","XTDEBUG",216,0)
 ;  XTDEBUG3 ---
"RTN","XTDEBUG",217,0)
 ;
"RTN","XTDEBUG",218,0)
GETVALS(RESULTS) ;
"RTN","XTDEBUG",219,0)
 D GETVALS^XTDEBUG3(.RESULTS)
"RTN","XTDEBUG",220,0)
 Q
"RTN","XTDEBUG",221,0)
 ;
"RTN","XTDEBUG",222,0)
VALUES ;
"RTN","XTDEBUG",223,0)
 D VALUES^XTDEBUG3
"RTN","XTDEBUG",224,0)
 Q
"RTN","XTDEBUG",225,0)
 ;
"RTN","XTDEBUG",226,0)
CHKCHANG(XTDEBRES,XTDEB1,XTDEB2) ;
"RTN","XTDEBUG",227,0)
 D CHKCHANG^XTDEBUG3(.XTDEBRES,$G(XTDEB1),$G(XTDEB2))
"RTN","XTDEBUG",228,0)
 Q
"RTN","XTDEBUG",229,0)
 ;
"RTN","XTDEBUG",230,0)
 ;  XTDEBUG4 ---
"RTN","XTDEBUG",231,0)
 ;
"RTN","XTDEBUG",232,0)
OPENTAG(XTDEBAL1,XTDEBAL2) ;
"RTN","XTDEBUG",233,0)
 D OPENTAG^XTDEBUG4($G(XTDEBAL1),$G(XTDEBAL2))
"RTN","XTDEBUG",234,0)
 Q
"RTN","XTDEBUG",235,0)
 ;
"RTN","XTDEBUG",236,0)
LEAVETAG ;
"RTN","XTDEBUG",237,0)
 G LEAVETAG^XTDEBUG4
"RTN","XTDEBUG",238,0)
 ;
"RTN","XTDEBUG",239,0)
NEWVARS(XTDEBVAR) ;
"RTN","XTDEBUG",240,0)
 D NEWVARS^XTDEBUG4(.XTDEBVAR)
"RTN","XTDEBUG",241,0)
 Q
"RTN","XTDEBUG",242,0)
 ;
"RTN","XTDEBUG",243,0)
ADDLEVEL ;
"RTN","XTDEBUG",244,0)
 G ADDLEVEL^XTDEBUG4
"RTN","XTDEBUG",245,0)
 ;
"RTN","XTDEBUG",246,0)
POPLEVEL ;
"RTN","XTDEBUG",247,0)
 G POPLEVEL^XTDEBUG4
"RTN","XTDEBUG",248,0)
 ;
"RTN","XTDEBUG",249,0)
 ;  XTDEBUG5 ---
"RTN","XTDEBUG",250,0)
 ;
"RTN","XTDEBUG",251,0)
RETVALS(XTDEBRES,XTDEBLOC) ;
"RTN","XTDEBUG",252,0)
 D RETVALS^XTDEBUG5(.XTDEBRES,XTDEBLOC)
"RTN","XTDEBUG",253,0)
 Q
"RTN","XTDEBUG",254,0)
 ;
"RTN","XTDEBUG",255,0)
SETWATCH(XTDEBRES,XTDEBWAT) ;
"RTN","XTDEBUG",256,0)
 D SETWATCH^XTDEBUG5(.XTDEBRES,$G(XTDEBWAT))
"RTN","XTDEBUG",257,0)
 Q
"RTN","XTDEBUG",258,0)
 ;
"RTN","XTDEBUG",259,0)
CLRWATCH(XTDEBRES,XTDEBWAT) ;
"RTN","XTDEBUG",260,0)
 D CLRWATCH^XTDEBUG5(.XTDEBRES,$G(XTDEBWAT))
"RTN","XTDEBUG",261,0)
 Q
"RTN","XTDEBUG",262,0)
 ;
"RTN","XTDEBUG",263,0)
GETWATCH() ;
"RTN","XTDEBUG",264,0)
 Q $$GETWATCH^XTDEBUG5()
"RTN","XTDEBUG",265,0)
 ;
"RTN","XTDEBUG",266,0)
CHKWATCH() ;
"RTN","XTDEBUG",267,0)
 Q $$CHKWATCH^XTDEBUG5()
"RTN","XTDEBUG",268,0)
 ;
"RTN","XTDEBUG",269,0)
BREAKFRM(XTDEBINP) ; takes data in form TAG+N^ROUTINE and returns it as +LIN^ROUTINE, where LIN is from start of routine
"RTN","XTDEBUG",270,0)
 Q $$BREAKFRM^XTDEBUG5($G(XTDEBINP))
"RTN","XTDEBUG",271,0)
 ;
"RTN","XTDEBUG",272,0)
SETBREAK(XTDEBRES,XTDEBBRK) ; Usage D SETBREAK(.RESULTS,BRKARRAY)
"RTN","XTDEBUG",273,0)
 D SETBREAK^XTDEBUG5(.XTDEBRES,$G(XTDEBBRK))
"RTN","XTDEBUG",274,0)
 Q
"RTN","XTDEBUG",275,0)
 ;
"RTN","XTDEBUG",276,0)
CLRBREAK(XTDEBRES,XTDEBBRK) ; Usage D CLRBREAK(.RESULTS,BRKARRAY)
"RTN","XTDEBUG",277,0)
 D CLRBREAK^XTDEBUG5(.XTDEBRES,$G(XTDEBBRK))
"RTN","XTDEBUG",278,0)
 Q
"RTN","XTDEBUG",279,0)
 ;
"RTN","XTDEBUG",280,0)
CHKBREAK(XTDEBROU,XTDEBLIN) ; Usage VALUE=$$CHKBREAK(ROUNAME,LINEID) returns 1 if a breakpoint is set on the line
"RTN","XTDEBUG",281,0)
 Q $$CHKBREAK^XTDEBUG5($G(XTDEBROU),$G(XTDEBLIN))
"RTN","XTDEBUG",282,0)
 ;
"RTN","XTDEBUG",283,0)
 ;  XTDEBUG6 ---
"RTN","XTDEBUG",284,0)
 ;
"RTN","XTDEBUG",285,0)
GETBREAK() ;
"RTN","XTDEBUG",286,0)
 N XTDEBLOC S XTDEBLOC=$$GETGLOBS()
"RTN","XTDEBUG",287,0)
 Q $NA(@XTDEBLOC@("BREAK"))
"RTN","XTDEBUG",288,0)
 ;
"RTN","XTDEBUG",289,0)
GETGLOBS() ;
"RTN","XTDEBUG",290,0)
 Q $$GETGLOBS^XTDEBUG5()
"RTN","XTDEBUG",291,0)
 ;
"RTN","XTDEBUG",292,0)
GETCMND(XTDEBRES,XTDEBCMD) ;
"RTN","XTDEBUG",293,0)
 Q $$GETCMND^XTDEBUG6(.XTDEBRES,$G(XTDEBCMD))
"RTN","XTDEBUG",294,0)
 ;
"RTN","XTDEBUG",295,0)
GETSTR(XTDEBSTR,XTDEBINP,XTDEBTRM) ;
"RTN","XTDEBUG",296,0)
 Q $$GETSTR^XTDEBUG6(.XTDEBSTR,$G(XTDEBINP),$G(XTDEBTRM))
"RTN","XTDEBUG",297,0)
 ;
"RTN","XTDEBUG",298,0)
 ;  XTDEBUG7 ---
"RTN","XTDEBUG",299,0)
 ;
"RTN","XTDEBUG",300,0)
REASON(XTDEBTYP,XTDEBNUM) ;
"RTN","XTDEBUG",301,0)
 D REASON^XTDEBUG7($G(XTDEBTYP),$G(XTDEBNUM))
"RTN","XTDEBUG",302,0)
 Q
"RTN","XTDEBUG",303,0)
 ;
"RTN","XTDEBUG",304,0)
OPENDO ;(XTDEBCMD,XTDEBVAR) ;
"RTN","XTDEBUG",305,0)
 G OPENDO^XTDEBUG7
"RTN","XTDEBUG",306,0)
 ;
"RTN","XTDEBUG",307,0)
TAGPARTS(XTDEBRES,XTDEBINP) ;
"RTN","XTDEBUG",308,0)
 D TAGPARTS^XTDEBUG7(.XTDEBRES,$G(XTDEBINP))
"RTN","XTDEBUG",309,0)
 Q
"RTN","XTDEBUG",310,0)
 ;
"RTN","XTDEBUG",311,0)
SETROU(XTDEBROU) ;
"RTN","XTDEBUG",312,0)
 Q $$SETROU^XTDEBUG7($G(XTDEBROU))
"RTN","XTDEBUG",313,0)
 ;
"RTN","XTDEBUG",314,0)
GETLINE(XTDEBROU,XTDEBLIN) ;
"RTN","XTDEBUG",315,0)
 Q $$GETLINE^XTDEBUG7($G(XTDEBROU),$G(XTDEBLIN))
"RTN","XTDEBUG",316,0)
 ;
"RTN","XTDEBUG",317,0)
ROULOC(XTDEBROU) ;
"RTN","XTDEBUG",318,0)
 Q $$ROULOC^XTDEBUG7($G(XTDEBROU))
"RTN","XTDEBUG",319,0)
 ;
"RTN","XTDEBUG",320,0)
LINENUM(XTDEBROU,XTDEBLIN) ; get line number relative to top of routine
"RTN","XTDEBUG",321,0)
 Q $$LINENUM^XTDEBUG7($G(XTDEBROU),$G(XTDEBLIN))
"RTN","XTDEBUG",322,0)
 ;
"RTN","XTDEBUG",323,0)
TAGNUM(XTDEBROU,XTDEBLIN) ; get line number relative to closest TAG, e.g., TAG+3
"RTN","XTDEBUG",324,0)
 Q $$TAGNUM^XTDEBUG7($G(XTDEBROU),$G(XTDEBLIN))
"RTN","XTDEBUG",325,0)
 ;
"RTN","XTDEBUG",326,0)
SETVARS(XTDEBRES,XTDEBVAR) ;
"RTN","XTDEBUG",327,0)
 D SETVARS^XTDEBUG7(.XTDEBRES,.XTDEBVAR)
"RTN","XTDEBUG",328,0)
 Q
"RTN","XTDEBUG",329,0)
 ;
"RTN","XTDEBUG",330,0)
STKFROM(XTDEBLOC,XTDEBLVL) ;
"RTN","XTDEBUG",331,0)
 Q $$STKFROM^XTDEBUG7(XTDEBLOC,XTDEBLVL)
"RTN","XTDEBUG",332,0)
 ;
"RTN","XTDEBUG",333,0)
 ;   XTDEBUG8 ----
"RTN","XTDEBUG",334,0)
 ;
"RTN","XTDEBUG",335,0)
DONOARG ;
"RTN","XTDEBUG",336,0)
 G DONOARG^XTDEBUG8
"RTN","XTDEBUG",337,0)
 ;
"RTN","XTDEBUG",338,0)
GETPERIO(XTDEBLIN) ;
"RTN","XTDEBUG",339,0)
 Q $$GETPERIO^XTDEBUG8(.XTDEBLIN)
"RTN","XTDEBUG",340,0)
 ;
"RTN","XTDEBUG",341,0)
STRTVALS ;
"RTN","XTDEBUG",342,0)
 G STRTVALS^XTDEBUG3
"RTN","XTDEBUG",343,0)
 ;
"RTN","XTDEBUG",344,0)
STARTLOC() ; returns location to save variables at start
"RTN","XTDEBUG",345,0)
 Q $NA(@$$GETGLOB()@("START"))
"RTN","XTDEBUG1")
0^2^B163320636
"RTN","XTDEBUG1",1,0)
XTDEBUG1 ;JLI/OAK_OIFO- ;06/08/08  15:20
"RTN","XTDEBUG1",2,0)
 ;;7.3;TOOLKIT;**107**;Apr 25, 1995;Build 14
"RTN","XTDEBUG1",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified
"RTN","XTDEBUG1",4,0)
 D EN^XTMUNIT("ZZUTXTD1")
"RTN","XTDEBUG1",5,0)
 Q
"RTN","XTDEBUG1",6,0)
 ;
"RTN","XTDEBUG1",7,0)
STRTCMND ;
"RTN","XTDEBUG1",8,0)
 N XTDEBFOR,XTDEBLOC,XTDEBPC1,XTDEBLVL,XTDEBARG,XTDEBCOD,XTDEBLIN
"RTN","XTDEBUG1",9,0)
 N XTDEBTR1 ;XTDEBTRU
"RTN","XTDEBUG1",10,0)
 S XTDEBLOC=$$GETGLOB()
"RTN","XTDEBUG1",11,0)
 S XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG1",12,0)
 S XTDEBLIN=@XTDEBLOC@("LVL",XTDEBLVL,"CMND")
"RTN","XTDEBUG1",13,0)
 M XTDEBARG=@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG")
"RTN","XTDEBUG1",14,0)
 D INFO^XTMLOG("ENTERED STARTCMND","XTDEBLIN")
"RTN","XTDEBUG1",15,0)
 D DEBUG^XTMLOG("STRTCMND","XTDEBLIN,XTDEBARG",1)
"RTN","XTDEBUG1",16,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")="COMMANDS^XTDEBUG"
"RTN","XTDEBUG1",17,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ARGS","CURR")=""
"RTN","XTDEBUG1",18,0)
 D INFO^XTMLOG("FALLTHROUGH TO COMMANDS")
"RTN","XTDEBUG1",19,0)
 G COMMANDS
"RTN","XTDEBUG1",20,0)
 ;ABCDE GHIJKLMNOP RSTUVWXYZ   F Q
"RTN","XTDEBUG1",21,0)
COMMANDS ;
"RTN","XTDEBUG1",22,0)
 N XTDEBLOC,XTDEBCNT,XTDEBCON,XTDEBFUN,XTDEBLIN,XTDEBLVL,XTDEBQUW
"RTN","XTDEBUG1",23,0)
 N XTDEBNUM,XTDEBRES,XTDEBUGX,XTDEBXXX,XTDEBARG,XTDEBQUI,XTDEBDAT
"RTN","XTDEBUG1",24,0)
 N XTDEBINP,XTDEBL2A,XTDEBTR1
"RTN","XTDEBUG1",25,0)
 ; ZEXCEPT: XTDEBRTN  - is used to hold return values from $$ or Q code
"RTN","XTDEBUG1",26,0)
 ; ZEXCEPT: XTDEBTRU  - is used to hold equivalent of $T (true or false on last conditional)
"RTN","XTDEBUG1",27,0)
 D INFO^XTMLOG("ENTER COMMANDS")
"RTN","XTDEBUG1",28,0)
 S XTDEBLOC=$$GETGLOB()
"RTN","XTDEBUG1",29,0)
 S XTDEBLVL=$G(@XTDEBLOC@("LASTLVL")) D:XTDEBLVL="" INFO^XTMLOG("EXIT COMMANDS 1A") Q:XTDEBLVL=""  D:XTDEBLVL<0 INFO^XTMLOG("EXIT COMMANDS 1B") Q:XTDEBLVL<0
"RTN","XTDEBUG1",30,0)
 S XTDEBLIN=$G(@XTDEBLOC@("LVL",XTDEBLVL,"CMND"))
"RTN","XTDEBUG1",31,0)
 ;
"RTN","XTDEBUG1",32,0)
 D DEBUG^XTMLOG("IN COMMANDS","XTDEBLIN,XTDEBLVL,"_$NA(@XTDEBLOC@("REASONDONE")))
"RTN","XTDEBUG1",33,0)
 D DEBUG^XTMLOG("COMMANDS","XTDEBLIN,XTDEBLVL,"_$NA(@XTDEBLOC@("REASONDONE"))_","_$NA(@XTDEBLOC@("LVL",XTDEBLVL,"ARGS","CURR")))
"RTN","XTDEBUG1",34,0)
 I $G(@XTDEBLOC@("REASONDONE"))="" D  D DEBUG^XTMLOG("COMMANDS1B","XTDEBDAT") I XTDEBDAT S @XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")="COMMANDS^XTDEBUG" D INFO^XTMLOG("EXIT COMMANDS 2") Q
"RTN","XTDEBUG1",35,0)
 . N XTDEBNUM,XTDEBVAL S XTDEBDAT=0
"RTN","XTDEBUG1",36,0)
 . S XTDEBNUM=$G(@XTDEBLOC@("LVL",XTDEBLVL,"ARGS","CURR"))+1
"RTN","XTDEBUG1",37,0)
 . S XTDEBVAL=$D(@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG","ARGS",XTDEBNUM))
"RTN","XTDEBUG1",38,0)
 . D DEBUG^XTMLOG("COMMANDS1A","XTDEBNUM,XTDEBVAL")
"RTN","XTDEBUG1",39,0)
 . I 'XTDEBVAL,XTDEBNUM>1 Q
"RTN","XTDEBUG1",40,0)
 . S XTDEBDAT=$$CHKQUIT^XTDEBUG() ; JLI 051026  ALSO MOVED TO CHEKDONE
"RTN","XTDEBUG1",41,0)
 . Q
"RTN","XTDEBUG1",42,0)
 K @XTDEBLOC@("LVL",XTDEBLVL,"VALUESDONE")
"RTN","XTDEBUG1",43,0)
 K @XTDEBLOC@("REASONDONE")
"RTN","XTDEBUG1",44,0)
 ;W !,"COMMANDSA- XTDEBLVL=",XTDEBLVL,"  XTDEBNUM=",$G(@XTDEBLOC@("LVL",XTDEBLVL,"ARGS","CURR"))
"RTN","XTDEBUG1",45,0)
 S XTDEBNUM=$G(@XTDEBLOC@("LVL",XTDEBLVL,"ARGS","CURR"))+1
"RTN","XTDEBUG1",46,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ARGS","CURR")=XTDEBNUM
"RTN","XTDEBUG1",47,0)
 ;W !,"COMMANDS- XTDEBLVL=",XTDEBLVL,"  XTDEBNUM=",XTDEBNUM
"RTN","XTDEBUG1",48,0)
 M XTDEBARG=@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG")
"RTN","XTDEBUG1",49,0)
 D DEBUG^XTMLOG("IN COMMANDS",$NA(@XTDEBLOC@("LVL")))
"RTN","XTDEBUG1",50,0)
 ;W ! ZW XTDEBARG W !
"RTN","XTDEBUG1",51,0)
 ;  070225  Pre-processing for $$ and $S
"RTN","XTDEBUG1",52,0)
 S XTDEBINP=$G(XTDEBARG("ARGS",XTDEBNUM)),XTDEBL2A=""
"RTN","XTDEBUG1",53,0)
 I XTDEBINP'="",XTDEBINP'["XTDEBV(",((XTDEBINP["$$")!(XTDEBINP["$S")) S XTDEBL2A=$$CHKARGS^XTDEBUG(.XTDEBINP) I XTDEBL2A'="" D  D INFO^XTMLOG("COMMANDS GO TO PREPROCS") G PREPROCS^XTDEBUG
"RTN","XTDEBUG1",54,0)
 . S XTDEBARG("ARGS",XTDEBNUM,"ORIGINAL")=XTDEBARG("ARGS",XTDEBNUM)
"RTN","XTDEBUG1",55,0)
 . S XTDEBARG("ARGS",XTDEBNUM)=XTDEBINP
"RTN","XTDEBUG1",56,0)
 . M @XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG")=XTDEBARG
"RTN","XTDEBUG1",57,0)
 . S @XTDEBLOC@("LVL",XTDEBLVL,"PRE-PROCESS1")=XTDEBINP
"RTN","XTDEBUG1",58,0)
 . S @XTDEBLOC@("LVL",XTDEBLVL,"PRE-PROCESS")=XTDEBL2A
"RTN","XTDEBUG1",59,0)
 . Q
"RTN","XTDEBUG1",60,0)
 ; 070225 - end of pre-processing insert
"RTN","XTDEBUG1",61,0)
 S XTDEBINP=$G(XTDEBARG("ARGS",XTDEBNUM))
"RTN","XTDEBUG1",62,0)
 ; 080420 - $T WITHOUT A ROUTINE, NEEDS TO HAVE THE ROUTINE ADDED
"RTN","XTDEBUG1",63,0)
 I XTDEBINP'="",((XTDEBINP["$T(")!(XTDEBINP["$TEXT(")) S XTDEBINP=$$DOLRTEXT^XTDEBUG(XTDEBINP,@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE")),XTDEBARG("ARGS",XTDEBNUM)=XTDEBINP
"RTN","XTDEBUG1",64,0)
 ;
"RTN","XTDEBUG1",65,0)
 D DEBUG^XTMLOG("COMMANDS1","XTDEBLIN")
"RTN","XTDEBUG1",66,0)
 D DEBUG^XTMLOG("COMMANDS1","XTDEBARG",1)
"RTN","XTDEBUG1",67,0)
 D DEBUG^XTMLOG("IN COMMANDS LEVEL=","XTDEBLVL")
"RTN","XTDEBUG1",68,0)
 D DEBUG^XTMLOG("LINE=","XTDEBLIN")
"RTN","XTDEBUG1",69,0)
 I XTDEBNUM>1,('$D(XTDEBARG("ARGS",XTDEBNUM))) D DEBUG^XTMLOG("COMMANDS1EXIT","XTDEBNUM") G EXITCMND
"RTN","XTDEBUG1",70,0)
 D INFO^XTMLOG("FALLTHROUGH TO PRECOND")
"RTN","XTDEBUG1",71,0)
 ;
"RTN","XTDEBUG1",72,0)
PRECOND ;
"RTN","XTDEBUG1",73,0)
 D INFO^XTMLOG("ENTER PRECOND")
"RTN","XTDEBUG1",74,0)
 S XTDEBCON=1 I $D(XTDEBARG("PRECOND")) S XTDEBUGX="S XTDEBCON="_XTDEBARG("PRECOND") D EXECUTE(XTDEBUGX) I 'XTDEBCON K XTDEBARG
"RTN","XTDEBUG1",75,0)
 ;
"RTN","XTDEBUG1",76,0)
 D DEBUG^XTMLOG("COMMANDS1Z","XTDEBCON,"_$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG1",77,0)
 ;
"RTN","XTDEBUG1",78,0)
 I $G(XTDEBARG("CMND"))="" S XTDEBARG("CMND")="Q"
"RTN","XTDEBUG1",79,0)
 I XTDEBCON,XTDEBARG("CMND")="F" D INFO^XTMLOG("PRECOND GO TO STRTFOR") G STRTFOR^XTDEBUG
"RTN","XTDEBUG1",80,0)
 D DEBUG^XTMLOG("COMMANDSZ3","XTDEBARG(""CMND"")")
"RTN","XTDEBUG1",81,0)
 D INFO^XTMLOG("FALLTHROUGH TO QUIT")
"RTN","XTDEBUG1",82,0)
 ;
"RTN","XTDEBUG1",83,0)
QUIT ;
"RTN","XTDEBUG1",84,0)
 I XTDEBCON,XTDEBARG("CMND")="Q" D  G:$G(@XTDEBLOC@("LVL",XTDEBLVL-1,"IN FOR")) NEXTFOR^XTDEBUG G LEAVETAG^XTDEBUG
"RTN","XTDEBUG1",85,0)
 . I $G(@XTDEBLOC@("LVL",XTDEBLVL-1,"IN FOR")) S ^("FOR QUIT")=1
"RTN","XTDEBUG1",86,0)
 . S XTDEBQUI=1 K XTDEBRTN
"RTN","XTDEBUG1",87,0)
 . ; TODO: IN NEXT LINE NEED TO IDENTIFY THINGS LIKE $$HTFM($H) AND ADD ROUTINE TO IT.
"RTN","XTDEBUG1",88,0)
 . ;W !,"COMMANDS+48 VALUE=",$G(VALUE),"   VALUE1=",$G(VALUE1)
"RTN","XTDEBUG1",89,0)
 . D INFO^XTMLOG("IN QUIT","XTDEBARG(""ARGS"",1)")
"RTN","XTDEBUG1",90,0)
 . I $G(XTDEBARG("ARGS",1))'="" S XTDEBXXX="S XTDEBRTN="_XTDEBARG("ARGS",1) D EXECUTE(XTDEBXXX)
"RTN","XTDEBUG1",91,0)
 . S @XTDEBLOC@("LVL",XTDEBLVL,"CMND")=""
"RTN","XTDEBUG1",92,0)
 . K @XTDEBLOC@("LVL",XTDEBLVL,"ENTRY") ; FORCE A NEW LINE
"RTN","XTDEBUG1",93,0)
 . D DEBUG^XTMLOG("SAW A QUIT")
"RTN","XTDEBUG1",94,0)
 . Q
"RTN","XTDEBUG1",95,0)
 ;
"RTN","XTDEBUG1",96,0)
DO ;
"RTN","XTDEBUG1",97,0)
 I XTDEBCON,XTDEBARG("CMND")="D" D  I XTDEBCON G OPENDO^XTDEBUG ;(XTDEBARG("ARGS",XTDEBNUM))
"RTN","XTDEBUG1",98,0)
 . I $D(XTDEBARG("ARGS",XTDEBNUM,"POSTCOND")) S XTDEBUGX="S XTDEBCON="_XTDEBARG("ARGS",XTDEBNUM,"POSTCOND") D EXECUTE(XTDEBUGX) I 'XTDEBCON Q
"RTN","XTDEBUG1",99,0)
 . ; handle argumentless DO as DO to next line, but indicate number of periods to move over
"RTN","XTDEBUG1",100,0)
 . I $G(XTDEBARG("ARGS",XTDEBNUM))="" D
"RTN","XTDEBUG1",101,0)
 . . S @XTDEBLOC@("LVL",XTDEBLVL+1,"PERIODS")=$G(@XTDEBLOC@("LVL",XTDEBLVL,"PERIODS"))+1
"RTN","XTDEBUG1",102,0)
 . . N XTDEBHER
"RTN","XTDEBUG1",103,0)
 . . S XTDEBHER="+"_(@XTDEBLOC@("LVL",XTDEBLVL,"LINE")+1)_"^"_@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE")
"RTN","XTDEBUG1",104,0)
 . . S XTDEBARG("ARGS",XTDEBNUM)=XTDEBHER
"RTN","XTDEBUG1",105,0)
 . . Q
"RTN","XTDEBUG1",106,0)
 . S @XTDEBLOC@("LVL",XTDEBLVL,"OPENDO")=XTDEBARG("ARGS",XTDEBNUM),^("ENTRY")="DOLINE1^XTDEBUG"
"RTN","XTDEBUG1",107,0)
 . D DEBUG^XTMLOG("SET FOR OPENDO",$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG1",108,0)
 . Q
"RTN","XTDEBUG1",109,0)
 ;
"RTN","XTDEBUG1",110,0)
GOTO ;
"RTN","XTDEBUG1",111,0)
 I XTDEBCON,XTDEBARG("CMND")="G" D  I XTDEBCON G GOTOCMD
"RTN","XTDEBUG1",112,0)
 . I $D(XTDEBARG("ARGS",XTDEBNUM,"POSTCOND")) S XTDEBUGX="S XTDEBCON="_XTDEBARG("ARGS",XTDEBNUM,"POSTCOND") D EXECUTE(XTDEBUGX) I 'XTDEBCON Q
"RTN","XTDEBUG1",113,0)
 . Q
"RTN","XTDEBUG1",114,0)
 ;
"RTN","XTDEBUG1",115,0)
IF ;
"RTN","XTDEBUG1",116,0)
 I XTDEBCON,$E(XTDEBARG("CMND"))="I" D
"RTN","XTDEBUG1",117,0)
 . S XTDEBTRU=0,XTDEBTR1=XTDEBARG("ARGS",XTDEBNUM) S XTDEBXXX="I "_XTDEBTR1_" S XTDEBTRU=1" D EXECUTE(XTDEBXXX) S @XTDEBLOC@("LVL",XTDEBLVL,"CMND")=$S(XTDEBTRU:XTDEBLIN,1:"")
"RTN","XTDEBUG1",118,0)
 . D DEBUG^XTMLOG("IF...","XTDEBTRU,XTDEBXXX,"_$NA(@XTDEBLOC@("LVL",XTDEBLVL,"CMND")))
"RTN","XTDEBUG1",119,0)
 . Q
"RTN","XTDEBUG1",120,0)
 ;
"RTN","XTDEBUG1",121,0)
ELSE ;
"RTN","XTDEBUG1",122,0)
 I XTDEBCON,$E(XTDEBARG("CMND"))="E" D
"RTN","XTDEBUG1",123,0)
 . D DEBUG^XTMLOG("ELSE...",$NA(@XTDEBLOC@("LVL",XTDEBLVL,"TRUE")))
"RTN","XTDEBUG1",124,0)
 . I XTDEBTRU S @XTDEBLOC@("LVL",XTDEBLVL,"CMND")=""
"RTN","XTDEBUG1",125,0)
 . Q
"RTN","XTDEBUG1",126,0)
 ;
"RTN","XTDEBUG1",127,0)
KILL ;
"RTN","XTDEBUG1",128,0)
 ; check for exclusive or global kill - will kill session, so terminate
"RTN","XTDEBUG1",129,0)
 I XTDEBCON,XTDEBARG("CMND")="K",(XTDEBARG("ARGS",XTDEBNUM)="")!($E(XTDEBARG("ARGS",XTDEBNUM))="(") D REASON^XTDEBUG("EXCLKILL") Q
"RTN","XTDEBUG1",130,0)
 ;
"RTN","XTDEBUG1",131,0)
 I XTDEBCON,XTDEBARG("CMND")="K" S XTDEBXXX="K "_XTDEBARG("ARGS",XTDEBNUM) D EXECUTE(XTDEBXXX) D DEBUG^XTMLOG("COMMANDS_KILL","XTDEBXXX")
"RTN","XTDEBUG1",132,0)
 ; TODO: if args contain intrinsic functions, resolve it to the value
"RTN","XTDEBUG1",133,0)
 I XTDEBCON,$D(XTDEBARG("ARGS",XTDEBNUM)),XTDEBARG("ARGS",XTDEBNUM)["$$" D
"RTN","XTDEBUG1",134,0)
 . ; TODO: if part of $SELECT, then resolve it to the value to be returned
"RTN","XTDEBUG1",135,0)
 . Q
"RTN","XTDEBUG1",136,0)
 ;
"RTN","XTDEBUG1",137,0)
NEW ;
"RTN","XTDEBUG1",138,0)
 I XTDEBCON,XTDEBARG("CMND")="N" D NEWVARS^XTDEBUG(.XTDEBARG)
"RTN","XTDEBUG1",139,0)
 ;
"RTN","XTDEBUG1",140,0)
WRITE ;
"RTN","XTDEBUG1",141,0)
 I XTDEBCON,XTDEBARG("CMND")="W" G WRITECMD
"RTN","XTDEBUG1",142,0)
 ; S  (CHJKLMO
"RTN","XTDEBUG1",143,0)
SETDOLR ;
"RTN","XTDEBUG1",144,0)
 I XTDEBCON,$E(XTDEBARG("CMND"))="S",XTDEBARG("ARGS",XTDEBNUM)["=$$" D  I XTDEBCON G OPENDO^XTDEBUG
"RTN","XTDEBUG1",145,0)
 . I $D(XTDEBARG("ARGS",XTDEBNUM,"POSTCOND")) S XTDEBUGX="S XTDEBCON="_XTDEBARG("ARGS",XTDEBNUM,"POSTCOND") D EXECUTE(XTDEBUGX) I 'XTDEBCON Q
"RTN","XTDEBUG1",146,0)
 . S @XTDEBLOC@("LVL",XTDEBLVL,"OPENDO")=$P(XTDEBARG("ARGS",XTDEBNUM),"=$$",2)
"RTN","XTDEBUG1",147,0)
 . S @XTDEBLOC@("LVL",XTDEBLVL,"XTDEBVAR")=$P(XTDEBARG("ARGS",XTDEBNUM),"=$$")
"RTN","XTDEBUG1",148,0)
 . D DEBUG^XTMLOG("GOING TO OPENDO",$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG1",149,0)
 . Q
"RTN","XTDEBUG1",150,0)
 ;
"RTN","XTDEBUG1",151,0)
SET ;
"RTN","XTDEBUG1",152,0)
 I XTDEBCON,$E(XTDEBARG("CMND"))="S",XTDEBARG("ARGS",XTDEBNUM)'["=$$" D
"RTN","XTDEBUG1",153,0)
 . I $D(XTDEBARG("ARGS",XTDEBNUM,"POSTCOND")) S XTDEBUGX="S XTDEBCON="_XTDEBARG("ARGS",XTDEBNUM,"POSTCOND") D EXECUTE(XTDEBUGX) I 'XTDEBCON Q
"RTN","XTDEBUG1",154,0)
 . S XTDEBUGX=XTDEBARG("CMND")_" "_XTDEBARG("ARGS",XTDEBNUM)
"RTN","XTDEBUG1",155,0)
 . D DEBUG^XTMLOG("COMMANDS1SET","XTDEBUGX,"_$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG1",156,0)
 . D DEBUG^XTMLOG("EXECUTE FOR SET","XTDEBUGX,XTDEBARG",1)
"RTN","XTDEBUG1",157,0)
 . D EXECUTE(XTDEBUGX) D DEBUG^XTMLOG("EXECUTE FOR SET DONE")
"RTN","XTDEBUG1",158,0)
 . Q
"RTN","XTDEBUG1",159,0)
 ;
"RTN","XTDEBUG1",160,0)
MERGE ;
"RTN","XTDEBUG1",161,0)
 I XTDEBCON,$E(XTDEBARG("CMND"))="M",XTDEBARG("ARGS",XTDEBNUM)'["=$$" D
"RTN","XTDEBUG1",162,0)
 . I $D(XTDEBARG("ARGS",XTDEBNUM,"POSTCOND")) S XTDEBUGX="S XTDEBCON="_XTDEBARG("ARGS",XTDEBNUM,"POSTCOND") D EXECUTE(XTDEBUGX) I 'XTDEBCON Q
"RTN","XTDEBUG1",163,0)
 . S XTDEBUGX=XTDEBARG("CMND")_" "_XTDEBARG("ARGS",XTDEBNUM)
"RTN","XTDEBUG1",164,0)
 . D DEBUG^XTMLOG("COMMANDS1MERGE","XTDEBUGX,"_$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG1",165,0)
 . D DEBUG^XTMLOG("EXECUTE FOR SET","XTDEBUGX,XTDEBARG",1)
"RTN","XTDEBUG1",166,0)
 . D EXECUTE(XTDEBUGX)
"RTN","XTDEBUG1",167,0)
 . Q
"RTN","XTDEBUG1",168,0)
 ;
"RTN","XTDEBUG1",169,0)
COMMENT ;
"RTN","XTDEBUG1",170,0)
 I XTDEBCON,XTDEBARG("CMND")=";" D  ; comment
"RTN","XTDEBUG1",171,0)
 . S @XTDEBLOC@("LVL",XTDEBLVL,"CMND")=""
"RTN","XTDEBUG1",172,0)
 . K @XTDEBLOC@("LVL",XTDEBLVL,"ENTRY") ; FORCE A NEW LINE
"RTN","XTDEBUG1",173,0)
 . Q
"RTN","XTDEBUG1",174,0)
 ;
"RTN","XTDEBUG1",175,0)
READ ;
"RTN","XTDEBUG1",176,0)
 I XTDEBCON,XTDEBARG("CMND")="R" G READCMD^XTDEBUG2 ; READ command
"RTN","XTDEBUG1",177,0)
 ;
"RTN","XTDEBUG1",178,0)
 ;I XTDEBARG("CMND")'="" X XTDEBCOD
"RTN","XTDEBUG1",179,0)
 ;S XTDEBLNM=XTDEBLNM+1,@XTDEBLOC@("CURRLINE")=XTDEBLNM
"RTN","XTDEBUG1",180,0)
 ;
"RTN","XTDEBUG1",181,0)
FINISH ;
"RTN","XTDEBUG1",182,0)
 I '$D(XTDEBARG("CMND")) M XTDEBARG=@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG")
"RTN","XTDEBUG1",183,0)
 I 'XTDEBCON,XTDEBARG("CMND")="F" G EXITCMND ; FOR GOES TO END OF LINE
"RTN","XTDEBUG1",184,0)
 I $G(XTDEBQUI) G EXITCMND ; QUIT OFF OF LINE, AT LEAST
"RTN","XTDEBUG1",185,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ARGS","CURR")=XTDEBNUM D DEBUG^XTMLOG("COMMANDS2","XTDEBNUM")
"RTN","XTDEBUG1",186,0)
 D DEBUG^XTMLOG("COMMANDS2","XTDEBNUM")
"RTN","XTDEBUG1",187,0)
 G COMMANDS
"RTN","XTDEBUG1",188,0)
 ;
"RTN","XTDEBUG1",189,0)
EXITCMND ;
"RTN","XTDEBUG1",190,0)
 N XTDEBLOC,XTDEBLVL
"RTN","XTDEBUG1",191,0)
 S XTDEBLOC=$$GETGLOB(),XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG1",192,0)
 D DEBUG^XTMLOG("EXITCMND","XTDEBLVL,"_$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG1",193,0)
 I $G(@XTDEBLOC@("LVL",XTDEBLVL,"CMND"))="",'$D(@XTDEBLOC@("LVL",XTDEBLVL-1,"IN FOR")) K @XTDEBLOC@("LVL",XTDEBLVL,"ENTRY") D INFO^XTMLOG("KILLED ENTRY")
"RTN","XTDEBUG1",194,0)
 E  S @XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")="DOLINE1^XTDEBUG" D INFO^XTMLOG("SET ENTRY TO DOLINE1")
"RTN","XTDEBUG1",195,0)
 D INFO^XTMLOG("EXITCMND TO NEXTENT")
"RTN","XTDEBUG1",196,0)
 G NEXTENT^XTDEBUG
"RTN","XTDEBUG1",197,0)
 ;
"RTN","XTDEBUG1",198,0)
DOLINE ; (XTDEBLIN,XTDEBTYP) ;
"RTN","XTDEBUG1",199,0)
 N XTDEBLOC,XTDEBLVL,XTDEBLIN
"RTN","XTDEBUG1",200,0)
 S XTDEBLOC=$$GETGLOB()
"RTN","XTDEBUG1",201,0)
 D DEBUG^XTMLOG("Entered DOLINE")
"RTN","XTDEBUG1",202,0)
 S XTDEBLVL=$G(@XTDEBLOC@("LASTLVL")) ;+1 I XTDEBLVL'>0 S XTDEBLVL=XTDEBLVL+1,
"RTN","XTDEBUG1",203,0)
 S XTDEBLIN=$G(@XTDEBLOC@("LVL",XTDEBLVL,"CMND"))
"RTN","XTDEBUG1",204,0)
 I XTDEBLIN="",$G(@XTDEBLOC@("LVL",XTDEBLVL-1,"IN FOR")) G NEXTFOR^XTDEBUG
"RTN","XTDEBUG1",205,0)
 I XTDEBLIN="" Q
"RTN","XTDEBUG1",206,0)
 ;S ^TMP("XTDEBUG1",$J,XTDEBLVL,"XTDEBLIN")=XTDEBLIN
"RTN","XTDEBUG1",207,0)
 ;S @XTDEBLOC@("LASTLVL")=XTDEBLVL
"RTN","XTDEBUG1",208,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")="DOLINE1^XTDEBUG"
"RTN","XTDEBUG1",209,0)
 ;S @XTDEBLOC@("LVL",XTDEBLVL,"LINE")=XTDEBLIN
"RTN","XTDEBUG1",210,0)
 D DEBUG^XTMLOG("Leaving DOLINE")
"RTN","XTDEBUG1",211,0)
 G DOLINE1
"RTN","XTDEBUG1",212,0)
 ;
"RTN","XTDEBUG1",213,0)
DOLINE1 ;
"RTN","XTDEBUG1",214,0)
 N XTDEBLOC,XTDEBLVL,XTDEBLIN,XTDEBARG,XTDEBPER
"RTN","XTDEBUG1",215,0)
 D DEBUG^XTMLOG("Entering DOLINE1")
"RTN","XTDEBUG1",216,0)
 S XTDEBLOC=$$GETGLOB()
"RTN","XTDEBUG1",217,0)
 S XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG1",218,0)
 S XTDEBLIN=$G(@XTDEBLOC@("LVL",XTDEBLVL,"CMND"))
"RTN","XTDEBUG1",219,0)
 ;
"RTN","XTDEBUG1",220,0)
 I '$D(@XTDEBLOC@("LVL",XTDEBLVL,"CMND PERIODS")) S @XTDEBLOC@("LVL",XTDEBLVL,"CMND PERIODS")=$$GETPERIO^XTDEBUG(.XTDEBLIN)
"RTN","XTDEBUG1",221,0)
 S XTDEBPER=@XTDEBLOC@("LVL",XTDEBLVL,"CMND PERIODS")
"RTN","XTDEBUG1",222,0)
 D DEBUG^XTMLOG("XTDEBPER","XTDEBPER,"_$NA(@XTDEBLOC@("LVL",XTDEBLVL,"PERIODS")))
"RTN","XTDEBUG1",223,0)
 I $G(@XTDEBLOC@("LVL",XTDEBLVL,"PERIODS"))>0,$G(@XTDEBLOC@("LVL",XTDEBLVL,"PERIODS"))>XTDEBPER D  G POPLEVEL^XTDEBUG
"RTN","XTDEBUG1",224,0)
 . D DEBUG^XTMLOG("TOO FEW PERIODS, EXIT ARGLESS DO")
"RTN","XTDEBUG1",225,0)
 . Q
"RTN","XTDEBUG1",226,0)
 I XTDEBPER>0,XTDEBPER>$G(@XTDEBLOC@("LVL",XTDEBLVL,"PERIODS")) D  G NEXTENT^XTDEBUG ; SKIP OVER
"RTN","XTDEBUG1",227,0)
 . S @XTDEBLOC@("LVL",XTDEBLVL,"CMND")=""
"RTN","XTDEBUG1",228,0)
 . K @XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")
"RTN","XTDEBUG1",229,0)
 . D DEBUG^XTMLOG("SKIPPING EXCESS PERIODS")
"RTN","XTDEBUG1",230,0)
 . Q
"RTN","XTDEBUG1",231,0)
 ;
"RTN","XTDEBUG1",232,0)
 D DEBUG^XTMLOG("DOLINE1","XTDEBLIN,XTDEBLVL")
"RTN","XTDEBUG1",233,0)
 I XTDEBLIN'="" D  G STRTCMND ; S @XTDEBLOC@("LASTLVL")=XTDEBLVL-1 K @XTDEBLOC@("LVL",XTDEBLVL) G NEXTENT^XTDEBUG ; GO GET NEXT LINE
"RTN","XTDEBUG1",234,0)
 . S @XTDEBLOC@("LVL",XTDEBLVL,"CMND")=$$GETCMND^XTDEBUG(.XTDEBARG,XTDEBLIN)
"RTN","XTDEBUG1",235,0)
 . K @XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG")
"RTN","XTDEBUG1",236,0)
 . M @XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG")=XTDEBARG
"RTN","XTDEBUG1",237,0)
 . D DEBUG^XTMLOG("DOLINE1 TO STRTCMND")
"RTN","XTDEBUG1",238,0)
 . Q
"RTN","XTDEBUG1",239,0)
 I $G(@XTDEBLOC@("LVL",XTDEBLVL-1,"IN FOR")) G NEXTFOR^XTDEBUG
"RTN","XTDEBUG1",240,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")=""
"RTN","XTDEBUG1",241,0)
 D DEBUG^XTMLOG("DOLINE1 TO NEXTENT")
"RTN","XTDEBUG1",242,0)
 G NEXTENT^XTDEBUG
"RTN","XTDEBUG1",243,0)
 ;
"RTN","XTDEBUG1",244,0)
GOTOCMD ;
"RTN","XTDEBUG1",245,0)
 ; ZEXCEPT: XTDEBLOC,XTDEBLVL,XTDEBARG,XTDEBNUM  - NEWed and defined in COMMANDS
"RTN","XTDEBUG1",246,0)
 N XTDEBROU,XTDEBLIN,XTDEBCMD,XTDEBMRK,XTDEBCNT,XTDEBI
"RTN","XTDEBUG1",247,0)
 D DEBUG^XTMLOG("IN GOTOCMD")
"RTN","XTDEBUG1",248,0)
 S XTDEBROU=$P(XTDEBARG("ARGS",XTDEBNUM),U,2) I XTDEBROU="" S XTDEBROU=@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE")
"RTN","XTDEBUG1",249,0)
 S XTDEBLIN=$P(XTDEBARG("ARGS",XTDEBNUM),U) I XTDEBLIN="" S XTDEBLIN="+1"
"RTN","XTDEBUG1",250,0)
 S XTDEBCMD=$$GETLINE^XTDEBUG(XTDEBROU,XTDEBLIN)
"RTN","XTDEBUG1",251,0)
 S XTDEBMRK=$$STKFROM^XTDEBUG(XTDEBLOC,XTDEBLVL)
"RTN","XTDEBUG1",252,0)
 S XTDEBCNT=0 F XTDEBI=0:0 S XTDEBI=$O(@XTDEBLOC@("STK",XTDEBLVL,XTDEBI)) Q:XTDEBI'>0  S XTDEBCNT=XTDEBI
"RTN","XTDEBUG1",253,0)
 S XTDEBCNT=XTDEBCNT+1
"RTN","XTDEBUG1",254,0)
 S @XTDEBLOC@("STK",XTDEBLVL,XTDEBCNT)="G:  "_XTDEBLIN_U_XTDEBROU_XTDEBMRK
"RTN","XTDEBUG1",255,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE")=XTDEBROU
"RTN","XTDEBUG1",256,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"LINE")=$$LINENUM^XTDEBUG(XTDEBROU,XTDEBLIN)-1
"RTN","XTDEBUG1",257,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"CODE")=""
"RTN","XTDEBUG1",258,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"CMND")=""
"RTN","XTDEBUG1",259,0)
 S XTDEBCMD=$P(XTDEBCMD," ",2,999)
"RTN","XTDEBUG1",260,0)
 S XTDEBCNT=$$GETPERIO^XTDEBUG(.XTDEBCMD)
"RTN","XTDEBUG1",261,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"PERIODS")=XTDEBCNT
"RTN","XTDEBUG1",262,0)
 D DEBUG^XTMLOG("IN GOTOCMD",$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG1",263,0)
 G NEXTENT^XTDEBUG
"RTN","XTDEBUG1",264,0)
 ;
"RTN","XTDEBUG1",265,0)
WRITECMD ;
"RTN","XTDEBUG1",266,0)
 ; ZEXCEPT: XTDEBARG,XTDEBNUM,XTDEBQUW - VARIABLES NEWED IN COMMANDS
"RTN","XTDEBUG1",267,0)
 ; ZEXCEPT: XTMUNIT - IF DEFINED, IS NEWED AND DEFINED IN EN^XTMUNIT
"RTN","XTDEBUG1",268,0)
 D WRITCMND
"RTN","XTDEBUG1",269,0)
 I $G(XTDEBQUW)=1 K XTDEBQUW I '$D(XTMUNIT) D  Q
"RTN","XTDEBUG1",270,0)
 . N XXX S XXX=XTDEBARG("ARGS",XTDEBNUM)
"RTN","XTDEBUG1",271,0)
 . F  Q:$E(XXX,1)'="!"  S XXX=$E(XXX,2,$L(XXX)) D REASON^XTDEBUG("WRITE",XTDEBNUM)
"RTN","XTDEBUG1",272,0)
 . Q
"RTN","XTDEBUG1",273,0)
 G FINISH
"RTN","XTDEBUG1",274,0)
 ;
"RTN","XTDEBUG1",275,0)
WRITCMND ;
"RTN","XTDEBUG1",276,0)
 N XTDEBXXY,XTDEBRES,XTDEBXXX
"RTN","XTDEBUG1",277,0)
 ; ZEXCEPT: XTDEBARG,XTDEBLOC,XTDEBNUM,XTDEBQUW - VARIABLES NEWED IN COMMANDS
"RTN","XTDEBUG1",278,0)
 D DEBUG^XTMLOG("ENTERED WRITECMD","XTDEBARG") ; 070820
"RTN","XTDEBUG1",279,0)
 I (IO'=IO(0))!('$$BROKER^XWBLIB()) D
"RTN","XTDEBUG1",280,0)
 . I XTDEBARG("ARGS",XTDEBNUM)["!" D  K @XTDEBLOC@("CONSOLE-OUT") I 1
"RTN","XTDEBUG1",281,0)
 . . N XXX S XXX=XTDEBARG("ARGS",XTDEBNUM)
"RTN","XTDEBUG1",282,0)
 . . F  Q:$E(XXX,1)'="!"  S XXX=$E(XXX,2,$L(XXX)) W !
"RTN","XTDEBUG1",283,0)
 . . Q
"RTN","XTDEBUG1",284,0)
 . E  D
"RTN","XTDEBUG1",285,0)
 . . N VALUE S VALUE=XTDEBARG("ARGS",XTDEBNUM)
"RTN","XTDEBUG1",286,0)
 . . I $E(VALUE,1)="?" S VALUE=$$QUERYNUM^XTDEBUG(VALUE)
"RTN","XTDEBUG1",287,0)
 . . S @("XTDEBXXX="_VALUE) W XTDEBXXX
"RTN","XTDEBUG1",288,0)
 . . S @XTDEBLOC@("CONSOLE-OUT")=$G(@XTDEBLOC@("CONSOLE-OUT"))_$S($E(VALUE)="""":$E(VALUE,2,$L(VALUE)-1),1:@VALUE)
"RTN","XTDEBUG1",289,0)
 . . Q
"RTN","XTDEBUG1",290,0)
 . Q
"RTN","XTDEBUG1",291,0)
 I $$BROKER^XWBLIB()&(IO=IO(0)) D
"RTN","XTDEBUG1",292,0)
 . S ^("CONSOLE-OUT")=$G(@XTDEBLOC@("CONSOLE-OUT"))
"RTN","XTDEBUG1",293,0)
 . S XTDEBRES=$$RESULTS^XTDEBUG()
"RTN","XTDEBUG1",294,0)
 . N XTDEBVAL S XTDEBVAL=XTDEBARG("ARGS",XTDEBNUM)
"RTN","XTDEBUG1",295,0)
 . I XTDEBARG("ARGS",XTDEBNUM)["!" S XTDEBQUW=1 Q  ;S XTDEBCNT=$G(@XTDEBRES@("CONSOLE-OUT"))+1 Q
"RTN","XTDEBUG1",296,0)
 . I $E(XTDEBARG("ARGS",XTDEBNUM),1)="?" S XTDEBVAL=$$QUERYNUM^XTDEBUG(XTDEBARG("ARGS",XTDEBNUM)),XTDEBARG("ARGS",XTDEBNUM)=XTDEBVAL
"RTN","XTDEBUG1",297,0)
 . I $E(XTDEBVAL)=$C(34),$E(XTDEBVAL,$L(XTDEBVAL))=$C(34) S XTDEBVAL=$E(XTDEBVAL,2,$L(XTDEBVAL)-1)
"RTN","XTDEBUG1",298,0)
 . ; E  I XTDEBVAL'="" S XTDEBXXY="S XTDEBVAL=$G("_XTDEBARG("ARGS",XTDEBNUM)_")" X XTDEBXXY
"RTN","XTDEBUG1",299,0)
 . E  I XTDEBVAL'="" S XTDEBXXY="S XTDEBVAL="_XTDEBARG("ARGS",XTDEBNUM) D EXECUTE(XTDEBXXY)
"RTN","XTDEBUG1",300,0)
 . S ^("CONSOLE-OUT")=@XTDEBLOC@("CONSOLE-OUT")_XTDEBVAL
"RTN","XTDEBUG1",301,0)
 . D DEBUG^XTMLOG("NEW CONSOLE-OUT",$NA(@XTDEBLOC@("CONSOLE-OUT")))
"RTN","XTDEBUG1",302,0)
 . Q
"RTN","XTDEBUG1",303,0)
 Q
"RTN","XTDEBUG1",304,0)
 ;
"RTN","XTDEBUG1",305,0)
GETGLOB() ;
"RTN","XTDEBUG1",306,0)
 Q $$GETGLOB^XTDEBUG()
"RTN","XTDEBUG1",307,0)
 ;
"RTN","XTDEBUG1",308,0)
EXECUTE(XTDEBUGX) ;
"RTN","XTDEBUG1",309,0)
 D RESETLGR^XTDEBUG X XTDEBUGX D SETDOLT^XTDEBUG,SETLGR^XTDEBUG
"RTN","XTDEBUG1",310,0)
 Q
"RTN","XTDEBUG2")
0^3^B142107187
"RTN","XTDEBUG2",1,0)
XTDEBUG2 ;JLI/OAK_OIFO- ;10/23/09  15:46
"RTN","XTDEBUG2",2,0)
 ;;7.3;TOOLKIT;**107**;Apr 25, 1995;Build 14
"RTN","XTDEBUG2",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified
"RTN","XTDEBUG2",4,0)
 D EN^XTMUNIT("ZZUTXTD1")
"RTN","XTDEBUG2",5,0)
 Q
"RTN","XTDEBUG2",6,0)
 ;
"RTN","XTDEBUG2",7,0)
STRTFOR ;(XTDEBARG,XTDEBLIN) ;
"RTN","XTDEBUG2",8,0)
 N XTDEBFOR,XTDEBLOC,XTDEBUGI,XTDEBPC1,XTDEBLVL,XTDEBARG,XTDEBLIN,XTDEBVAR
"RTN","XTDEBUG2",9,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG()
"RTN","XTDEBUG2",10,0)
 S XTDEBLVL=$G(@XTDEBLOC@("LASTLVL"))
"RTN","XTDEBUG2",11,0)
 M @XTDEBLOC@("LVL",XTDEBLVL+1,"XTDEBARG")=@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG")
"RTN","XTDEBUG2",12,0)
 S @XTDEBLOC@("LVL",XTDEBLVL+1,"CMND")=@XTDEBLOC@("LVL",XTDEBLVL,"CMND")
"RTN","XTDEBUG2",13,0)
 S @XTDEBLOC@("LVL",XTDEBLVL+1,"ROUTINE")=@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE")
"RTN","XTDEBUG2",14,0)
 S @XTDEBLOC@("LVL",XTDEBLVL+1,"LINE")=@XTDEBLOC@("LVL",XTDEBLVL,"LINE")
"RTN","XTDEBUG2",15,0)
 M XTDEBARG=@XTDEBLOC@("LVL",XTDEBLVL+1,"XTDEBARG") S XTDEBLIN=@XTDEBLOC@("LVL",XTDEBLVL+1,"CMND")
"RTN","XTDEBUG2",16,0)
 D DEBUG^XTMLOG("STRTFOR","XTDEBLVL,XTDEBLIN,XTDEBARG,"_$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG2",17,0)
 ; setup for return to the calling line - remove, and set to get next line
"RTN","XTDEBUG2",18,0)
 K @XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG","ARGS")
"RTN","XTDEBUG2",19,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"CMND")="",^("ENTRY")=""
"RTN","XTDEBUG2",20,0)
 S XTDEBLVL=XTDEBLVL+1
"RTN","XTDEBUG2",21,0)
 S @XTDEBLOC@("LASTLVL")=XTDEBLVL ; increment
"RTN","XTDEBUG2",22,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")="NEXTFOR"
"RTN","XTDEBUG2",23,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"IN FOR")=1
"RTN","XTDEBUG2",24,0)
 S XTDEBFOR=$G(@XTDEBLOC@("FORLVL"))+1
"RTN","XTDEBUG2",25,0)
 S @XTDEBLOC@("FORLVL")=XTDEBFOR
"RTN","XTDEBUG2",26,0)
 ;S @XTDEBLOC@("FOR",XTDEBFOR,"CMND")=XTDEBLIN
"RTN","XTDEBUG2",27,0)
 M XTDEBARG=@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG")
"RTN","XTDEBUG2",28,0)
 S XTDEBVAR=$P(XTDEBARG("ARGS",1),"=")
"RTN","XTDEBUG2",29,0)
 I XTDEBVAR'="" D  ; set up each specified variable or range
"RTN","XTDEBUG2",30,0)
 . F XTDEBUGI=2:1 Q:'$D(XTDEBARG("ARGS",XTDEBUGI))  S:XTDEBUGI>1 XTDEBARG("ARGS",XTDEBUGI)=XTDEBVAR_"="_XTDEBARG("ARGS",XTDEBUGI)
"RTN","XTDEBUG2",31,0)
 . M @XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG")=XTDEBARG
"RTN","XTDEBUG2",32,0)
 . Q
"RTN","XTDEBUG2",33,0)
 ;F XTDEBUGI=1:1 S XTDEBPC1=$P(XTDEBARG("ARGS",1),",",XTDEBUGI) Q:XTDEBPC1=""  S @XTDEBLOC@("FOR",XTDEBFOR,"ARGS",XTDEBUGI)=XTDEBPC1
"RTN","XTDEBUG2",34,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ARGS","CURR")=0
"RTN","XTDEBUG2",35,0)
 ;
"RTN","XTDEBUG2",36,0)
 G FORCMND
"RTN","XTDEBUG2",37,0)
 ;
"RTN","XTDEBUG2",38,0)
FORCMND ;
"RTN","XTDEBUG2",39,0)
 N XTDEBFOR,XTDEBARG,XTDEBLOC,XTDEBLVL,XTDEBCMD,XTDEBCUR
"RTN","XTDEBUG2",40,0)
 N XTDEBMAX,XTDEBINC,XTDEBSTR,XTDEBUGI,XTDEBUGX,XTDEBVAR
"RTN","XTDEBUG2",41,0)
 N XTDEBDON,XTDEBCON,XTDEBLEV,XTDEBARX
"RTN","XTDEBUG2",42,0)
 D INFO^XTMLOG("ENTERED FORCMND")
"RTN","XTDEBUG2",43,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG()
"RTN","XTDEBUG2",44,0)
 S XTDEBFOR=+$G(@XTDEBLOC@("FORLVL"))
"RTN","XTDEBUG2",45,0)
 S XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG2",46,0)
 S XTDEBLEV=$NA(@XTDEBLOC@("LVL",XTDEBLVL))
"RTN","XTDEBUG2",47,0)
 S XTDEBCUR=@XTDEBLEV@("ARGS","CURR")+1,@XTDEBLEV@("ARGS","CURR")=XTDEBCUR
"RTN","XTDEBUG2",48,0)
 ;
"RTN","XTDEBUG2",49,0)
 I '$D(@XTDEBLEV@("XTDEBARG","ARGS",XTDEBCUR)) G ENDFOR ; exit from FOR LOOP
"RTN","XTDEBUG2",50,0)
 ;
"RTN","XTDEBUG2",51,0)
 S XTDEBDON=0
"RTN","XTDEBUG2",52,0)
 S XTDEBARG=@XTDEBLEV@("XTDEBARG","ARGS",XTDEBCUR)
"RTN","XTDEBUG2",53,0)
 I $D(@XTDEBLEV@("XTDEBARG","ARGS",XTDEBCUR,"POSTCOND")) S XTDEBARG=XTDEBARG_":"_^("POSTCOND")
"RTN","XTDEBUG2",54,0)
 S XTDEBCMD=$G(@XTDEBLEV@("XTDEBARG","CMND"))
"RTN","XTDEBUG2",55,0)
 ; exit from LOOP
"RTN","XTDEBUG2",56,0)
 D DEBUG^XTMLOG("FORCMND2","XTDEBCMD,XTDEBCUR,XTDEBARG,"_$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG2",57,0)
 S XTDEBFOR=$NA(@XTDEBLEV@("FOR"))
"RTN","XTDEBUG2",58,0)
 I $D(@XTDEBFOR@("START")) S XTDEBARG=""
"RTN","XTDEBUG2",59,0)
 I '$D(@XTDEBFOR@("START")) S @XTDEBFOR@("VAR")=$P(XTDEBARG,"="),XTDEBARG=$P(XTDEBARG,"=",2)
"RTN","XTDEBUG2",60,0)
 S XTDEBARX=0 F  Q:XTDEBARG=""  S XTDEBARX=XTDEBARX+1,@XTDEBFOR@("START",XTDEBARX)=$P(XTDEBARG,","),XTDEBARG=$P(XTDEBARG,",",2,999)
"RTN","XTDEBUG2",61,0)
NEXTSTRT ;
"RTN","XTDEBUG2",62,0)
 ; following line uses naked global reference
"RTN","XTDEBUG2",63,0)
 S XTDEBARX=$O(@XTDEBFOR@("START",0)) I XTDEBARX>0 S XTDEBARG=^(XTDEBARX) K ^(XTDEBARX) ; warning this line uses a naked global reference
"RTN","XTDEBUG2",64,0)
 S @XTDEBFOR@("START")=$P(XTDEBARG,":")
"RTN","XTDEBUG2",65,0)
 S @XTDEBFOR@("INCREMENT")=$P(XTDEBARG,":",2)
"RTN","XTDEBUG2",66,0)
 S @XTDEBFOR@("MAX")=$P(XTDEBARG,":",3)
"RTN","XTDEBUG2",67,0)
 S @XTDEBFOR@("NEW")=1
"RTN","XTDEBUG2",68,0)
 S @XTDEBFOR@("CMND")=@XTDEBLEV@("CMND")
"RTN","XTDEBUG2",69,0)
 S @XTDEBLOC@("LASTLVL")=XTDEBLVL+1 ; MARK AS ONE LEVEL HIGHER
"RTN","XTDEBUG2",70,0)
 D DEBUG^XTMLOG("FORCMND3",$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG2",71,0)
 G NEXTFOR
"RTN","XTDEBUG2",72,0)
 ;
"RTN","XTDEBUG2",73,0)
NEXTFOR ;
"RTN","XTDEBUG2",74,0)
 N XTDEBARG,XTDEBCMD,XTDEBFOR,XTDEBLOC,XTDEBLVL,XTDEBLEV,XTDEBINC
"RTN","XTDEBUG2",75,0)
 N XTDEBSTR,XTDEBUGX,XTDEBSTR,XTDEBMAX,XTDEBVAR
"RTN","XTDEBUG2",76,0)
 ; ZEXCEPT: XTDEBTRU - GLOBAL VARIABLE FOR $T
"RTN","XTDEBUG2",77,0)
 D INFO^XTMLOG("ENTERED NEXTFOR")
"RTN","XTDEBUG2",78,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG()
"RTN","XTDEBUG2",79,0)
 S XTDEBLVL=@XTDEBLOC@("LASTLVL")-1
"RTN","XTDEBUG2",80,0)
 K @XTDEBLOC@("LVL",XTDEBLVL+1)
"RTN","XTDEBUG2",81,0)
 S @XTDEBLOC@("LASTLVL")=XTDEBLVL
"RTN","XTDEBUG2",82,0)
 S XTDEBLEV=$NA(@XTDEBLOC@("LVL",XTDEBLVL))
"RTN","XTDEBUG2",83,0)
 S XTDEBFOR=$NA(@XTDEBLEV@("FOR"))
"RTN","XTDEBUG2",84,0)
 I $D(@XTDEBLEV@("FOR QUIT")) D INFO^XTMLOG("LEAVING NEXTFOR DUE TO FOR QUIT") G ENDFOR
"RTN","XTDEBUG2",85,0)
 S XTDEBVAR=@XTDEBFOR@("VAR"),XTDEBSTR=@XTDEBFOR@("START"),XTDEBINC=@XTDEBFOR@("INCREMENT"),XTDEBMAX=@XTDEBFOR@("MAX")
"RTN","XTDEBUG2",86,0)
 D DEBUG^XTMLOG("NEXTFOR1","XTDEBVAR,XTDEBSTR,XTDEBINC,XTDEBMAX,"_XTDEBFOR,1)
"RTN","XTDEBUG2",87,0)
 I XTDEBINC'="",XTDEBINC?1A.AN S XTDEBINC=@(XTDEBINC)
"RTN","XTDEBUG2",88,0)
 I XTDEBVAR'="",@XTDEBFOR@("NEW")'=1,XTDEBINC="" D INFO^XTMLOG("NEXTFOR TO FORCMND") G FORCMND ; only one value
"RTN","XTDEBUG2",89,0)
 I XTDEBVAR'="",@XTDEBFOR@("NEW")'=1 S XTDEBUGX="S @(XTDEBVAR)=@XTDEBFOR@(""VAL"")+"_$S(XTDEBINC?1A.AN:"@(XTDEBINC)",1:"XTDEBINC") D DEBUG^XTMLOG("V1","XTDEBUGX") X XTDEBUGX S @XTDEBFOR@("VAL")=@XTDEBVAR
"RTN","XTDEBUG2",90,0)
 I XTDEBVAR'="",@XTDEBFOR@("NEW")=1 S XTDEBUGX="S @(XTDEBVAR)="_$S(XTDEBSTR?1A.AN:"@(XTDEBSTR)",1:XTDEBSTR) D DEBUG^XTMLOG("V2","XTDEBUGX") X XTDEBUGX S @XTDEBFOR@("NEW")=0,@XTDEBFOR@("VAL")=@XTDEBVAR
"RTN","XTDEBUG2",91,0)
 I XTDEBVAR'="" D DEBUG^XTMLOG("NEXTFOR2 - XTDEBVAR",XTDEBVAR)
"RTN","XTDEBUG2",92,0)
 ; I XTDEBVAR'="",XTDEBMAX'="" I @XTDEBVAR>XTDEBMAX G FORCMND
"RTN","XTDEBUG2",93,0)
 I XTDEBVAR'="",XTDEBMAX'="" S XTDEBUGX="I "_@(XTDEBVAR)_$S(XTDEBINC<0:"<",1:">")_$S(XTDEBMAX?1A.AN:"@(XTDEBMAX)",1:"XTDEBMAX") D DEBUG^XTMLOG("V3","XTDEBUGX") X XTDEBUGX I $T S XTDEBTRU=1 G FORCMND
"RTN","XTDEBUG2",94,0)
 S @XTDEBLOC@("LVL",XTDEBLVL+1,"CMND")=@XTDEBFOR@("CMND")
"RTN","XTDEBUG2",95,0)
 S @XTDEBLOC@("LVL",XTDEBLVL+1,"ROUTINE")=@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE")
"RTN","XTDEBUG2",96,0)
 S @XTDEBLOC@("LVL",XTDEBLVL+1,"LINE")=@XTDEBLOC@("LVL",XTDEBLVL,"LINE")
"RTN","XTDEBUG2",97,0)
 S XTDEBLVL=XTDEBLVL+1,@XTDEBLOC@("LASTLVL")=XTDEBLVL
"RTN","XTDEBUG2",98,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")="NEXTFOR^XTDEBUG"
"RTN","XTDEBUG2",99,0)
 S XTDEBCMD=$$GETCMND^XTDEBUG(.XTDEBARG,@XTDEBFOR@("CMND"))
"RTN","XTDEBUG2",100,0)
 M @XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG")=XTDEBARG
"RTN","XTDEBUG2",101,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"CMND")=XTDEBCMD
"RTN","XTDEBUG2",102,0)
 D INFO^XTMLOG("NEXTFOR TO COMMANDS")
"RTN","XTDEBUG2",103,0)
 G COMMANDS^XTDEBUG1
"RTN","XTDEBUG2",104,0)
 ;
"RTN","XTDEBUG2",105,0)
ENDFOR ;
"RTN","XTDEBUG2",106,0)
 N XTDEBLOC,XTDEBFOR,XTDEBLVL
"RTN","XTDEBUG2",107,0)
 D INFO^XTMLOG("ENTERED ENDFOR")
"RTN","XTDEBUG2",108,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG()
"RTN","XTDEBUG2",109,0)
 S XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG2",110,0)
 S XTDEBFOR=$NA(@XTDEBLOC@("LVL",XTDEBLVL,"FOR"))
"RTN","XTDEBUG2",111,0)
 D DEBUG^XTMLOG("IN ENDFOR","XTDEBLVL,"_$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG2",112,0)
 I $O(@XTDEBFOR@("START",0))>0 G NEXTSTRT
"RTN","XTDEBUG2",113,0)
 S XTDEBLVL=XTDEBLVL-1
"RTN","XTDEBUG2",114,0)
 K @XTDEBLOC@("LVL",XTDEBLVL+1)
"RTN","XTDEBUG2",115,0)
 S @XTDEBLOC@("LASTLVL")=XTDEBLVL
"RTN","XTDEBUG2",116,0)
 I $G(@XTDEBLOC@("LVL",XTDEBLVL-1,"IN FOR")) D INFO^XTMLOG("ENDFOR TO NEXTFOR") G NEXTFOR
"RTN","XTDEBUG2",117,0)
 D DEBUG^XTMLOG("ENDFOR TO NEXTENT")
"RTN","XTDEBUG2",118,0)
 G NEXTENT^XTDEBUG
"RTN","XTDEBUG2",119,0)
 ; FOLLOWING IS OVERFLOW FROM XTDEBUG1
"RTN","XTDEBUG2",120,0)
QUERYNUM(VALUE) ;
"RTN","XTDEBUG2",121,0)
 N LENGTH,X,XTDEBLOC
"RTN","XTDEBUG2",122,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG()
"RTN","XTDEBUG2",123,0)
 S LENGTH=+$E(VALUE,2,99)-$L($G(@XTDEBLOC@("CONSOLE-OUT")))
"RTN","XTDEBUG2",124,0)
 I LENGTH<1 S VALUE="" I 1
"RTN","XTDEBUG2",125,0)
 E  S X="",$P(X," ",LENGTH)="",VALUE=""""_X_""""
"RTN","XTDEBUG2",126,0)
 Q VALUE
"RTN","XTDEBUG2",127,0)
 ;
"RTN","XTDEBUG2",128,0)
READCMD ;
"RTN","XTDEBUG2",129,0)
 N XTDEBXXX,XTDEBARG,XTDEBLOC,XTDEBLVL,XTDEBNUM
"RTN","XTDEBUG2",130,0)
 ; ZEXCEPT: DTIME - SYSTEM VARIABLE
"RTN","XTDEBUG2",131,0)
 ; ZEXCEPT: XTMUNIT - IF PRESENT IS NEWED AND DEFINED IN EN^XTMUNIT
"RTN","XTDEBUG2",132,0)
 ; ZEXCEPT: XTDEBARG,XTDEBLOC,XTDEBLVL
"RTN","XTDEBUG2",133,0)
 D DEBUG^XTMLOG("ENTERED READCMD","XTDEBARG",1) ; 070820
"RTN","XTDEBUG2",134,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG(),XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG2",135,0)
 M XTDEBARG=@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG")
"RTN","XTDEBUG2",136,0)
 S XTDEBNUM=$G(@XTDEBLOC@("LVL",XTDEBLVL,"ARGS","CURR"))+1
"RTN","XTDEBUG2",137,0)
 I (XTDEBARG("ARGS",XTDEBNUM)="!")!(XTDEBARG("ARGS",XTDEBNUM)["""") D DEBUG^XTMLOG("READ GOING TO WRITE") G WRITECMD^XTDEBUG1
"RTN","XTDEBUG2",138,0)
 D DEBUG^XTMLOG("READ 1")
"RTN","XTDEBUG2",139,0)
 I $$BROKER^XWBLIB()&(IO=IO(0)) D  I '$D(XTMUNIT) D DEBUG^XTMLOG("READ GOING TO REASON") D REASON^XTDEBUG("READ",XTDEBNUM) Q
"RTN","XTDEBUG2",140,0)
 . N XTDEBVAL,XTDEBTIM,XTDEBCHR
"RTN","XTDEBUG2",141,0)
 . S XTDEBVAL=XTDEBARG("ARGS",XTDEBNUM)
"RTN","XTDEBUG2",142,0)
 . I $E(XTDEBVAL)="*" S @XTDEBLOC@("LVL",XTDEBLVL,"READ-STAR")=1,^("READ-NUMCHARS")=1,XTDEBVAL=$E(XTDEBVAL,2,$L(XTDEBVAL))
"RTN","XTDEBUG2",143,0)
 . ;S XTDEBTIM=$P(XTDEBVAL,":",2),XTDEBVAL=$P(XTDEBVAL,":") S:XTDEBTIM="" XTDEBTIM=DTIME S @XTDEBLOC@("LVL",XTDEBLVL,"READ-TIMEOUT")=$S(XTDEBTIM=+XTDEBTIM:XTDEBTIM,1:@XTDEBTIM)
"RTN","XTDEBUG2",144,0)
 . S XTDEBTIM=$G(XTDEBARG("ARGS",XTDEBNUM,"POSTCOND")) S:XTDEBTIM="" XTDEBTIM=DTIME S @XTDEBLOC@("LVL",XTDEBLVL,"READ-TIMEOUT")=$S(XTDEBTIM=+XTDEBTIM:XTDEBTIM,1:@XTDEBTIM)
"RTN","XTDEBUG2",145,0)
 . S XTDEBCHR=$P(XTDEBVAL,"#",2),XTDEBVAL=$P(XTDEBVAL,"#") I XTDEBCHR'="" S @XTDEBLOC@("LVL",XTDEBLVL,"READ-NUMCHARS")=$S(XTDEBCHR=+XTDEBCHR:XTDEBCHR,1:@XTDEBCHR)
"RTN","XTDEBUG2",146,0)
 . S @XTDEBLOC@("LVL",XTDEBLVL,"READVAR")=XTDEBVAL
"RTN","XTDEBUG2",147,0)
 . D DEBUG^XTMLOG("READ XTDEBVAL","XTDEBVAL")
"RTN","XTDEBUG2",148,0)
 . Q
"RTN","XTDEBUG2",149,0)
 I (IO'=IO(0))!('$$BROKER^XWBLIB()) D
"RTN","XTDEBUG2",150,0)
 . S XTDEBXXX="R "_XTDEBARG("ARGS",XTDEBNUM) X XTDEBXXX
"RTN","XTDEBUG2",151,0)
 . Q
"RTN","XTDEBUG2",152,0)
 G FINISH^XTDEBUG1
"RTN","XTDEBUG2",153,0)
 ;
"RTN","XTDEBUG2",154,0)
 ;  TODO: Finish the following to unify determination of data display
"RTN","XTDEBUG2",155,0)
CHEKDONE() ; returns an indicator of whether to display data to monitor (1=Yes,0=No)
"RTN","XTDEBUG2",156,0)
 Q 0
"RTN","XTDEBUG2",157,0)
 N XTDEBLOC,XTDEBLVL,XTDEBNUM,XTDEBPAS
"RTN","XTDEBUG2",158,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG(),XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG2",159,0)
 I $G(@XTDEBLOC@("EXITTYPE"))="STEP",'$D(@XTDEBLOC@("REASONDONE")) S XTDEBPAS=1 D  I XTDEBPAS D REASON^XTDEBUG("CMND") S @XTDEBLOC@("REASONDONE")=1 Q 1
"RTN","XTDEBUG2",160,0)
 . S XTDEBNUM=$G(@XTDEBLOC@("LVL",XTDEBLVL,"ARGS","CURR"))+1
"RTN","XTDEBUG2",161,0)
 . I '$D(@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG","ARGS",XTDEBNUM)) S XTDEBPAS=0
"RTN","XTDEBUG2",162,0)
 . D DEBUG^XTMLOG("CHEKDONE","XTDEBPAS")
"RTN","XTDEBUG2",163,0)
 . Q
"RTN","XTDEBUG2",164,0)
 ; TODO: COMPLETE AND VALIDATE FOLLOWING LINE
"RTN","XTDEBUG2",165,0)
 I $G(@XTDEBLOC@("NEWLINE"))=1,$G(@XTDEBLOC@("EXITTYPE"))="LINE",'$D(@XTDEBLOC@("REASONDONE"))
"RTN","XTDEBUG2",166,0)
 ; TODO: ADD AT BREAKPOINT
"RTN","XTDEBUG2",167,0)
 ; TODO: ADD CHANGE IN WATCHED VARIABLE
"RTN","XTDEBUG2",168,0)
 Q 0
"RTN","XTDEBUG2",169,0)
 ;
"RTN","XTDEBUG2",170,0)
CHKARGS(XTDEBINP,XTDEBCNT) ; XTDEBINP passed by reference, returns CODE TO BE EXECUTED before the revised input line is executed
"RTN","XTDEBUG2",171,0)
 N XTDEBCNT,XTDEBLIN,XTDEBV,XTDEBXXX,XTDEBUGI,XTDEBUJ,XTDEBLOC
"RTN","XTDEBUG2",172,0)
 N XTDEBLVL,XTDEBUGJ
"RTN","XTDEBUG2",173,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG(),XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG2",174,0)
 S XTDEBXXX=$$CHKARGS1(.XTDEBINP,.XTDEBCNT)
"RTN","XTDEBUG2",175,0)
 S XTDEBLIN="" I XTDEBCNT>0 F XTDEBUGI=1:1:XTDEBCNT S XTDEBUGJ=XTDEBCNT-XTDEBUGI+1 S XTDEBLIN=XTDEBLIN_$S(XTDEBUGI>1:" ",1:"")_"S XTDEBV("_XTDEBUGJ_")="_$G(XTDEBLIN(XTDEBUGJ))
"RTN","XTDEBUG2",176,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"XTDEBINP")=XTDEBINP
"RTN","XTDEBUG2",177,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"XTDEBLIN")=XTDEBLIN
"RTN","XTDEBUG2",178,0)
 Q XTDEBLIN
"RTN","XTDEBUG2",179,0)
 ;
"RTN","XTDEBUG2",180,0)
CHKARGS1(XTDEBINP,XTDEBCNT) ;
"RTN","XTDEBUG2",181,0)
 N XTDEBSRT,XTDEBEND,I,XTDEBCHR,XTDEBPAR,XTDEBQUO,XTDEBCN1
"RTN","XTDEBUG2",182,0)
 N XTDEBL1,XTDEBP1
"RTN","XTDEBUG2",183,0)
 S XTDEBLIN=""
"RTN","XTDEBUG2",184,0)
 I $G(XTDEBCNT)="" S XTDEBCNT=0
"RTN","XTDEBUG2",185,0)
 F I=1:1 Q:$E(XTDEBINP,I)=""  I (($E(XTDEBINP,I,I+1)="$$")!($E(XTDEBINP,I,I+1)="$S")) D
"RTN","XTDEBUG2",186,0)
 . ;I $E(XTDEBINP,I-1)="=" Q  ; LEAVE THOSE WHICH ARE SIMPLY =$$ OR =$S
"RTN","XTDEBUG2",187,0)
 . S XTDEBSRT=I
"RTN","XTDEBUG2",188,0)
 . I $E(XTDEBINP,I,I+1)="$S" D  I 1
"RTN","XTDEBUG2",189,0)
 . . S XTDEBQUO=0
"RTN","XTDEBUG2",190,0)
 . . F I=I+1:1 Q:$E(XTDEBINP,I)=""  Q:$E(XTDEBINP,I)="("
"RTN","XTDEBUG2",191,0)
 . . Q
"RTN","XTDEBUG2",192,0)
 . ; JLI 091015 modified next line to add % as a valid character
"RTN","XTDEBUG2",193,0)
 . ;E  S I=I+1 F  S I=I+1 S XTDEBCHR=$E(XTDEBINP,I) Q:XTDEBCHR=""  I XTDEBCHR'?1A,XTDEBCHR'?1N,XTDEBCHR'?1"^" Q
"RTN","XTDEBUG2",194,0)
 . E  S I=I+1,LEN=0 F  S I=I+1,LEN=LEN+1 S XTDEBCHR=$E(XTDEBINP,I) Q:XTDEBCHR=""  S:XTDEBCHR="^" LEN=0 I '((XTDEBCHR?1"%")&(LEN=1)),XTDEBCHR'?1A,XTDEBCHR'?1N,XTDEBCHR'?1"^" Q
"RTN","XTDEBUG2",195,0)
 . ;E  D
"RTN","XTDEBUG2",196,0)
 . ;. N UPARROW S UPARROW=0
"RTN","XTDEBUG2",197,0)
 . ;. S I=I+1,LEN=0 F  S I=I+1,LEN=LEN+1 S XTDEBCHR=$E(XTDEBINP,I) Q:XTDEBCHR=""  S:XTDEBCHR="^" UPARROW=1,I=I+1 Q:UPARROW  I '((XTDEBCHR?1"%")&(LEN=1)),XTDEBCHR'?1A,XTDEBCHR?1N Q
"RTN","XTDEBUG2",198,0)
 . ;. ; 091023 following line modified to correct handling of LEN (not incremented before)
"RTN","XTDEBUG2",199,0)
 . ;. ; I UPARROW S LEN=0 F  S I=I+1 S XTDEBCHR=$E(XTDEBINP,I) Q:XTDEBCHR=""  I '((XTDEBCHR?1"%")&(LEN=1)),XTDEBCHR'?1A,'((XTDEBCHR?1N)&(LEN>1)),XTDEBCHR'?1"^" Q
"RTN","XTDEBUG2",200,0)
 . ;. I UPARROW S LEN=0 F  S I=I+1,LEN=LEN+1 S XTDEBCHR=$E(XTDEBINP,I) Q:XTDEBCHR=""  I '((XTDEBCHR?1"%")&(LEN=1)),XTDEBCHR'?1A,'((XTDEBCHR?1N)&(LEN>1)),XTDEBCHR'?1"^" Q
"RTN","XTDEBUG2",201,0)
 . ;. Q
"RTN","XTDEBUG2",202,0)
 . S XTDEBP1=0 I $E(XTDEBINP,I)="(" S XTDEBP1=I S XTDEBQUO=0 S XTDEBPAR=1 F I=I+1:1 S XTDEBCHR=$E(XTDEBINP,I) Q:XTDEBCHR=""  D  I XTDEBPAR=0 Q
"RTN","XTDEBUG2",203,0)
 . . S:XTDEBCHR="""" XTDEBQUO=$S(XTDEBQUO=0:1,1:0) I XTDEBQUO=0 S:XTDEBCHR="(" XTDEBPAR=XTDEBPAR+1 S:XTDEBCHR=")" XTDEBPAR=XTDEBPAR-1
"RTN","XTDEBUG2",204,0)
 . . Q
"RTN","XTDEBUG2",205,0)
 . S XTDEBEND=I-$S(XTDEBP1=0:1,1:0)
"RTN","XTDEBUG2",206,0)
 . I XTDEBLIN'="" S XTDEBLIN=" "_XTDEBLIN
"RTN","XTDEBUG2",207,0)
 . S XTDEBCNT=XTDEBCNT+1
"RTN","XTDEBUG2",208,0)
 . ;S XTDEBLIN="S XTDEBV("_XTDEBCNT_")="_$E(XTDEBINP,XTDEBSRT,XTDEBEND)_XTDEBLIN
"RTN","XTDEBUG2",209,0)
 . S XTDEBLIN(XTDEBCNT)=$E(XTDEBINP,XTDEBSRT,XTDEBEND)
"RTN","XTDEBUG2",210,0)
 . S XTDEBINP=$E(XTDEBINP,1,XTDEBSRT-1)_"XTDEBV("_XTDEBCNT_")"_$E(XTDEBINP,XTDEBEND+1,$L(XTDEBINP))
"RTN","XTDEBUG2",211,0)
 . S XTDEBLIN=$E(XTDEBLIN(XTDEBCNT),3,$L(XTDEBLIN(XTDEBCNT)))
"RTN","XTDEBUG2",212,0)
 . S XTDEBCN1=XTDEBCNT
"RTN","XTDEBUG2",213,0)
 . D
"RTN","XTDEBUG2",214,0)
 . . N XTDEBCN1,XTDEBP1
"RTN","XTDEBUG2",215,0)
 . . S XTDEBP1=XTDEBLIN
"RTN","XTDEBUG2",216,0)
 . . S XTDEBL1=$$CHKARGS1(.XTDEBP1,.XTDEBCNT)
"RTN","XTDEBUG2",217,0)
 . . S XTDEBLIN=XTDEBP1
"RTN","XTDEBUG2",218,0)
 . . Q
"RTN","XTDEBUG2",219,0)
 . I XTDEBL1'="" S XTDEBLIN(XTDEBCN1)=$E(XTDEBLIN(XTDEBCN1),1,2)_XTDEBLIN
"RTN","XTDEBUG2",220,0)
 . S I=XTDEBSRT-1
"RTN","XTDEBUG2",221,0)
 . Q
"RTN","XTDEBUG2",222,0)
 Q XTDEBLIN
"RTN","XTDEBUG2",223,0)
 ;
"RTN","XTDEBUG2",224,0)
PREPROCS ;
"RTN","XTDEBUG2",225,0)
 N XTDEBLOC,XTDEBLVL,XTDEBLEV,XTDEBNUM,XTDEBRES,XTDEBAR1
"RTN","XTDEBUG2",226,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG()
"RTN","XTDEBUG2",227,0)
 S XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG2",228,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ARGS","CURR")=@XTDEBLOC@("LVL",XTDEBLVL,"ARGS","CURR")-1
"RTN","XTDEBUG2",229,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")="COMMANDS^XTDEBUG"
"RTN","XTDEBUG2",230,0)
 S XTDEBLEV=$NA(@XTDEBLOC@("LVL",XTDEBLVL))
"RTN","XTDEBUG2",231,0)
 S XTDEBNUM=@XTDEBLEV@("ARGS","CURR")
"RTN","XTDEBUG2",232,0)
 ;S @XTDEBLEV@("ARGS","CURR")=XTDEBNUM-1
"RTN","XTDEBUG2",233,0)
 S @XTDEBLEV@("NEWED","XTDEBV")="" ; NEW THE XTDEBV VARIABLE
"RTN","XTDEBUG2",234,0)
 ;
"RTN","XTDEBUG2",235,0)
 S XTDEBLVL=XTDEBLVL+1
"RTN","XTDEBUG2",236,0)
 S @XTDEBLOC@("LASTLVL")=XTDEBLVL
"RTN","XTDEBUG2",237,0)
 S XTDEBLEV=$NA(@XTDEBLOC@("LVL",XTDEBLVL))
"RTN","XTDEBUG2",238,0)
 S @XTDEBLEV@("INTERNAL")=1
"RTN","XTDEBUG2",239,0)
 S @XTDEBLEV@("CMND")=$$GETCMND^XTDEBUG(.XTDEBAR1,@XTDEBLOC@("LVL",XTDEBLVL-1,"PRE-PROCESS")_" Q")
"RTN","XTDEBUG2",240,0)
 M @XTDEBLEV@("XTDEBARG")=XTDEBAR1
"RTN","XTDEBUG2",241,0)
 K @XTDEBLOC@("LVL",XTDEBLVL-1,"PRE-PROCESS")
"RTN","XTDEBUG2",242,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"PRE-PROCESS")=""
"RTN","XTDEBUG2",243,0)
 S @XTDEBLEV@("ROUTINE")=$G(@XTDEBLOC@("LVL",XTDEBLVL-1,"ROUTINE"))
"RTN","XTDEBUG2",244,0)
 S @XTDEBLEV@("LINE")=""
"RTN","XTDEBUG2",245,0)
 ;W ! ZW @XTDEBLOC W !
"RTN","XTDEBUG2",246,0)
 ;ZW @XTDEBLOC@("LVL")
"RTN","XTDEBUG2",247,0)
 G STRTCMND^XTDEBUG
"RTN","XTDEBUG2",248,0)
 ;W !,"STRTCMND",! ZW @XTDEBLOC@("LVL")
"RTN","XTDEBUG2",249,0)
 ;D NEXT^XTDEBUG(.XTDEBRES,"RUN")
"RTN","XTDEBUG2",250,0)
 ;W !,"NEXT",! ZW @XTDEBLOC@("LVL")
"RTN","XTDEBUG2",251,0)
 ;W ! ZW XTDEBV
"RTN","XTDEBUG2",252,0)
 ;W !,"X=",$G(X)
"RTN","XTDEBUG2",253,0)
 Q
"RTN","XTDEBUG2",254,0)
 ;
"RTN","XTDEBUG2",255,0)
SETDOLT ; save current value of $T
"RTN","XTDEBUG2",256,0)
 ; ZEXCEPT: XTDEBTRU - GLOBAL VARIABLE HOLDING VALUE OF $T
"RTN","XTDEBUG2",257,0)
 S XTDEBTRU=$T
"RTN","XTDEBUG2",258,0)
 Q
"RTN","XTDEBUG2",259,0)
 ;
"RTN","XTDEBUG2",260,0)
DOLRTEXT(ARG,ROUTINE) ; check $T code for no routine specified
"RTN","XTDEBUG2",261,0)
 N TERM,TOKEN,VAR,A
"RTN","XTDEBUG2",262,0)
 D INFO^XTMLOG("ENTRY","ARG,ROUTINE")
"RTN","XTDEBUG2",263,0)
 F  Q:ARG'["$TEXT"  S ARG=$P(ARG,"$TEXT(")_"$T("_$P(ARG,"$TEXT(",2,99)
"RTN","XTDEBUG2",264,0)
 ; GET ARGUMENT FOR $T, but permit subscripts as well
"RTN","XTDEBUG2",265,0)
 S A(1)=$P(ARG,"$T("),A(2)=$P(ARG,"$T(",2,99),A(3)=$$NEXTTOKN^XTMRPAR2(A(2),.TOKEN,.TERM,")")
"RTN","XTDEBUG2",266,0)
 D INFO^XTMLOG("VALUES","A",1)
"RTN","XTDEBUG2",267,0)
 I TOKEN'["@",TOKEN["^",A(3)'["$T(" D INFO^XTMLOG("NORMAL","A",1) Q ARG
"RTN","XTDEBUG2",268,0)
 ; check for $T(@variable)
"RTN","XTDEBUG2",269,0)
 ;I $E(TOKEN,1)="@" S VAR=$E(TOKEN,2,$L(TOKEN)) I @VAR'["^" S VAR=VAR_"^"_ROUTINE Q A(1)_"$T(@"_VAR_")"_A(3)
"RTN","XTDEBUG2",270,0)
 I TOKEN'["@",TOKEN'["^" S TOKEN=TOKEN_"^"_ROUTINE
"RTN","XTDEBUG2",271,0)
 I TOKEN["@" S VAR=$E(TOKEN,2,$L(TOKEN)) D
"RTN","XTDEBUG2",272,0)
 . I @VAR["^" S TOKEN=@VAR Q
"RTN","XTDEBUG2",273,0)
 . S TOKEN=@VAR_"^"_ROUTINE
"RTN","XTDEBUG2",274,0)
 . Q
"RTN","XTDEBUG2",275,0)
 D INFO^XTMLOG("AGGREGATING","TOKEN,A",1)
"RTN","XTDEBUG2",276,0)
 S ARG=A(1)_"$T("_TOKEN_")"_$S(A(3)["$T(":$$DOLRTEXT(A(3),ROUTINE),1:A(3))
"RTN","XTDEBUG2",277,0)
 D INFO^XTMLOG("LEAVING","ARG")
"RTN","XTDEBUG2",278,0)
 Q ARG
"RTN","XTDEBUG2",279,0)
 ;
"RTN","XTDEBUG2",280,0)
SETLGR ; save current value of last global reference, if not XTDEBUG-related
"RTN","XTDEBUG2",281,0)
 ; ZEXCEPT: XTDEBLGR - GLOBAL VARIABLE
"RTN","XTDEBUG2",282,0)
 N JUNK
"RTN","XTDEBUG2",283,0)
 S JUNK=$$LGR^%ZOSV
"RTN","XTDEBUG2",284,0)
 I JUNK'["^TMP(""XTDEBUG""" S XTDEBLGR=JUNK
"RTN","XTDEBUG2",285,0)
 Q
"RTN","XTDEBUG2",286,0)
 ;
"RTN","XTDEBUG2",287,0)
RESETLGR ; reset last global reference to previous non XTDEBUG-related
"RTN","XTDEBUG2",288,0)
 N JUNK
"RTN","XTDEBUG2",289,0)
 ; ZEXCEPT: XTDEBLGR - GLOBAL VARIABLE
"RTN","XTDEBUG2",290,0)
 I '$D(XTDEBLGR) S XTDEBLGR=$$LGR^%ZOSV
"RTN","XTDEBUG2",291,0)
 I XTDEBLGR'["""""" S JUNK=$D(@XTDEBLGR) Q
"RTN","XTDEBUG2",292,0)
 S JUNK=$O(@XTDEBLGR)
"RTN","XTDEBUG2",293,0)
 Q
"RTN","XTDEBUG3")
0^4^B107405976
"RTN","XTDEBUG3",1,0)
XTDEBUG3 ;FO-OAK/JLI- ;06/08/08  15:18
"RTN","XTDEBUG3",2,0)
 ;;7.3;TOOLKIT;**107**;Apr 25, 1995;Build 14
"RTN","XTDEBUG3",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified
"RTN","XTDEBUG3",4,0)
 D EN^XTMUNIT("ZZUTXTD1")
"RTN","XTDEBUG3",5,0)
 Q
"RTN","XTDEBUG3",6,0)
 ;
"RTN","XTDEBUG3",7,0)
GETVALS(RESULTS) ; stand alone TAG to get symbol table
"RTN","XTDEBUG3",8,0)
 D INFO^XTMLOG("ENTER GETVALS")
"RTN","XTDEBUG3",9,0)
 N XTDEBLOC,XTDEBRES,XTDEBLVL
"RTN","XTDEBUG3",10,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG()
"RTN","XTDEBUG3",11,0)
 S XTDEBRES=$NA(@XTDEBLOC@("RES"))
"RTN","XTDEBUG3",12,0)
 S RESULTS=XTDEBRES
"RTN","XTDEBUG3",13,0)
 S XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG3",14,0)
 D VALUES
"RTN","XTDEBUG3",15,0)
 D INFO^XTMLOG("EXIT GETVALS")
"RTN","XTDEBUG3",16,0)
 Q
"RTN","XTDEBUG3",17,0)
 ;
"RTN","XTDEBUG3",18,0)
STRTVALS ; get the initial symbol table on starting
"RTN","XTDEBUG3",19,0)
 N XTDEBSTR,XTDEBLOC
"RTN","XTDEBUG3",20,0)
 D INFO^XTMLOG("ENTER STRTVALS")
"RTN","XTDEBUG3",21,0)
 D VALUES
"RTN","XTDEBUG3",22,0)
 S XTDEBSTR=$$STARTLOC^XTDEBUG() K @XTDEBSTR
"RTN","XTDEBUG3",23,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG()
"RTN","XTDEBUG3",24,0)
 M @XTDEBSTR@("VALUES")=@XTDEBLOC@("VALUES")
"RTN","XTDEBUG3",25,0)
 D INFO^XTMLOG("EXIT STRTVALS")
"RTN","XTDEBUG3",26,0)
 Q
"RTN","XTDEBUG3",27,0)
 ;
"RTN","XTDEBUG3",28,0)
CLEAN ; clean up symbol table to original state before starting
"RTN","XTDEBUG3",29,0)
 ; ZEXCEPT: XTDEBCMD,XTDEBCUR,XTDEBLGR,XTDEBLOC,XTDEBPRE
"RTN","XTDEBUG3",30,0)
 ; ZEXCEPT: XTDEBRES,XTDEBUGR,XTDEBUGV,XTDEBLVL
"RTN","XTDEBUG3",31,0)
 D INFO^XTMLOG("ENTER CLEAN")
"RTN","XTDEBUG3",32,0)
 D CLEAN1
"RTN","XTDEBUG3",33,0)
 ; clean out global storage
"RTN","XTDEBUG3",34,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG() K @XTDEBLOC
"RTN","XTDEBUG3",35,0)
 ;
"RTN","XTDEBUG3",36,0)
 K @XTDEBRES
"RTN","XTDEBUG3",37,0)
 K XTDEBCMD,XTDEBCUR,XTDEBLGR,XTDEBLOC,XTDEBLVL,XTDEBPRE
"RTN","XTDEBUG3",38,0)
 K XTDEBUGR,XTDEBUGV,XTDEBRES
"RTN","XTDEBUG3",39,0)
 D INFO^XTMLOG("EXIT CLEAN")
"RTN","XTDEBUG3",40,0)
 Q
"RTN","XTDEBUG3",41,0)
 ;
"RTN","XTDEBUG3",42,0)
CLEAN1 ;
"RTN","XTDEBUG3",43,0)
 N XTDEBSTR,XTDEBVA1,XTDEBVA2,XTDEBCUR,XTDEBLOC
"RTN","XTDEBUG3",44,0)
 D INFO^XTMLOG("ENTER CLEAN1")
"RTN","XTDEBUG3",45,0)
 S XTDEBSTR=$$STARTLOC^XTDEBUG(),XTDEBSTR=$NA(@XTDEBSTR@("VALUES"))
"RTN","XTDEBUG3",46,0)
 S XTDEBCUR=$$GETGLOB^XTDEBUG(),XTDEBCUR=$NA(@XTDEBCUR@("VALUES"))
"RTN","XTDEBUG3",47,0)
 S XTDEBVA1="",XTDEBVA2="" S XTDEBVA1=$O(@XTDEBSTR@(XTDEBVA1)),XTDEBVA2=$O(@XTDEBCUR@(XTDEBVA2))
"RTN","XTDEBUG3",48,0)
 F  Q:(XTDEBVA1="")&(XTDEBVA2="")  D
"RTN","XTDEBUG3",49,0)
 . I XTDEBVA2'="",(XTDEBVA1]XTDEBVA2)!(XTDEBVA1="") K @XTDEBVA2 S XTDEBVA2=$O(@XTDEBCUR@(XTDEBVA2)) Q
"RTN","XTDEBUG3",50,0)
 . I XTDEBVA1'="",(XTDEBVA2]XTDEBVA1)!(XTDEBVA2="") K @XTDEBVA1 M @XTDEBVA1=@XTDEBSTR@(XTDEBVA1) S XTDEBVA1=$O(@XTDEBSTR@(XTDEBVA1)) Q
"RTN","XTDEBUG3",51,0)
 . K @XTDEBVA1 M @XTDEBVA1=@XTDEBSTR@(XTDEBVA1) S XTDEBVA1=$O(@XTDEBSTR@(XTDEBVA1)),XTDEBVA2=$O(@XTDEBCUR@(XTDEBVA2))
"RTN","XTDEBUG3",52,0)
 . Q
"RTN","XTDEBUG3",53,0)
 D INFO^XTMLOG("EXIT CLEAN1")
"RTN","XTDEBUG3",54,0)
 Q
"RTN","XTDEBUG3",55,0)
 ;
"RTN","XTDEBUG3",56,0)
 ; get the local symbol table (excluding variables related to XTDEBUG)
"RTN","XTDEBUG3",57,0)
 ; into the results nodes for return
"RTN","XTDEBUG3",58,0)
VALUES ;
"RTN","XTDEBUG3",59,0)
 N XTDEBUGR,XTDEBUGV,XTDEBUGX,XTDEBUGI,XTDEBLOC,XTDEBRES,XTDEBLVL
"RTN","XTDEBUG3",60,0)
 N XTDEBUGC,XTDEBUGY,XTDEBPER,XTDEBUGV,XTDEBPRE,XTDEBCOD,XTDEBCNG
"RTN","XTDEBUG3",61,0)
 N XTDEBPEX,XTDEBPEY,XTDEBPED,XTDEBPEE,XTDEBRCR
"RTN","XTDEBUG3",62,0)
 ; handling of the following which are NOT newed in DOLRO^%ZOSV or ^%RCR
"RTN","XTDEBUG3",63,0)
 ; ZEXCEPT: X,Y,%,%X,%Y,%D,%E,%RCR
"RTN","XTDEBUG3",64,0)
 D INFO^XTMLOG("ENTER VALUES")
"RTN","XTDEBUG3",65,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG(),XTDEBLVL=+$G(@XTDEBLOC@("LASTLVL")) I $G(@XTDEBLOC@("LVL",XTDEBLVL,"VALUESDONE")) D DEBUG^XTMLOG("VALUES-EXITING DUE TO DONE")
"RTN","XTDEBUG3",66,0)
 S XTDEBRES=$$RESULTS^XTDEBUG()
"RTN","XTDEBUG3",67,0)
 S XTDEBUGR=$NA(@XTDEBRES@("VALUES")) K @XTDEBUGR S ^("VALUES")="SECTION=VALUES",^("VALUES",0)="VALUES"
"RTN","XTDEBUG3",68,0)
 S XTDEBPRE=$NA(@XTDEBLOC@("PRE")) K @XTDEBPRE ; previous set of variables
"RTN","XTDEBUG3",69,0)
 S XTDEBUGV=$NA(@XTDEBLOC@("VALUES")) M @XTDEBPRE=@XTDEBUGV K @XTDEBUGV ; move any current values to previous
"RTN","XTDEBUG3",70,0)
 ; save off X,Y,% values, since need to be used to get local variable values
"RTN","XTDEBUG3",71,0)
 ; added %X, %Y
"RTN","XTDEBUG3",72,0)
 M:$D(X) XTDEBUGX=X M:$D(Y) XTDEBUGY=Y M:$D(%) XTDEBPER=% M:$D(%X) XTDEBPEX=%X M:$D(%Y) XTDEBPEY=%Y
"RTN","XTDEBUG3",73,0)
 M:$D(%D) XTDEBPED=%D M:$D(%E) XTDEBPEE=%E M:$D(%RCR) XTDEBRCR=%RCR
"RTN","XTDEBUG3",74,0)
 K X,Y,%,%X,%Y,%D,%E,%RCR
"RTN","XTDEBUG3",75,0)
 ; get local values into a global location
"RTN","XTDEBUG3",76,0)
 S X=$E(XTDEBUGV,1,$L(XTDEBUGV)-1)_",",%="" D DOLRO^%ZOSV
"RTN","XTDEBUG3",77,0)
 S XTDEBUGC=1
"RTN","XTDEBUG3",78,0)
 ; restore X values in proper place (held in XTDEBUGX while generating value list)
"RTN","XTDEBUG3",79,0)
 K @XTDEBUGV@("X") M @XTDEBUGV@("X")=@XTDEBUGV@("XTDEBUGX") K @XTDEBUGV@("XTDEBUGX")
"RTN","XTDEBUG3",80,0)
 K @XTDEBUGV@("Y") M @XTDEBUGV@("Y")=@XTDEBUGV@("XTDEBUGY") K @XTDEBUGV@("XTDEBUGY")
"RTN","XTDEBUG3",81,0)
 K @XTDEBUGV@("%") M @XTDEBUGV@("%")=@XTDEBUGV@("XTDEBPER") K @XTDEBUGV@("XTDEBPER")
"RTN","XTDEBUG3",82,0)
 K @XTDEBUGV@("%X") M @XTDEBUGV@("%X")=@XTDEBUGV@("XTDEBPEX") K @XTDEBUGV@("XTDEBPEX")
"RTN","XTDEBUG3",83,0)
 K @XTDEBUGV@("%Y") M @XTDEBUGV@("%Y")=@XTDEBUGV@("XTDEBPEY") K @XTDEBUGV@("XTDEBPEY")
"RTN","XTDEBUG3",84,0)
 K @XTDEBUGV@("%D") M @XTDEBUGV@("%D")=@XTDEBUGV@("XTDEBPED") K @XTDEBUGV@("XTDEBPED")
"RTN","XTDEBUG3",85,0)
 K @XTDEBUGV@("%E") M @XTDEBUGV@("%E")=@XTDEBUGV@("XTDEBPEE") K @XTDEBUGV@("XTDEBPEE")
"RTN","XTDEBUG3",86,0)
 K @XTDEBUGV@("%RCR") M @XTDEBUGV@("%RCR")=@XTDEBUGV@("XTDEBRCR") K @XTDEBUGV@("XTDEBRCR")
"RTN","XTDEBUG3",87,0)
 K X,Y,% M:$D(XTDEBUGX) X=XTDEBUGX M:$D(XTDEBUGY) Y=XTDEBUGY M:$D(XTDEBPER) %=XTDEBPER
"RTN","XTDEBUG3",88,0)
 K %X,%Y M:$D(XTDEBPEX) %X=XTDEBPEX M:$D(XTDEBPEY) %Y=XTDEBPEY
"RTN","XTDEBUG3",89,0)
 K %D,%E,%RCR M:$D(XTDEBPED) %D=XTDEBPED M:$D(XTDEBPEE) %E=XTDEBPEE M:$D(XTDEBRCR) %RCR=XTDEBRCR
"RTN","XTDEBUG3",90,0)
 ; move variables from that format to our results location one line variable name,
"RTN","XTDEBUG3",91,0)
 ; next line variable value
"RTN","XTDEBUG3",92,0)
 S XTDEBUGI="" F  S XTDEBUGI=$O(@XTDEBUGV@(XTDEBUGI)) Q:XTDEBUGI=""  D
"RTN","XTDEBUG3",93,0)
 . ; ignore values which this program creates
"RTN","XTDEBUG3",94,0)
 . I XTDEBUGI["XTDEB" Q
"RTN","XTDEBUG3",95,0)
 . ; if the local variable has a value (and it doesn't include XTDEB for our work) output it
"RTN","XTDEBUG3",96,0)
 . I ($D(@XTDEBUGV@(XTDEBUGI))#2),@XTDEBUGV@(XTDEBUGI)'["^TMP(""XTDEBUG""," S XTDEBUGC=XTDEBUGC+1,@XTDEBUGR@(XTDEBUGC)=XTDEBUGI,XTDEBUGC=XTDEBUGC+1,@XTDEBUGR@(XTDEBUGC)=@XTDEBUGV@(XTDEBUGI)
"RTN","XTDEBUG3",97,0)
 . ; if the local variable has subscripts, then handle them
"RTN","XTDEBUG3",98,0)
 . I $D(@XTDEBUGV@(XTDEBUGI))>1 D DOSUBS(.XTDEBUGC,XTDEBUGV,XTDEBUGI,XTDEBUGR)
"RTN","XTDEBUG3",99,0)
 . Q
"RTN","XTDEBUG3",100,0)
 ; check for changes and identify any watched variables
"RTN","XTDEBUG3",101,0)
 D CHKCHANG(.XTDEBCNG,XTDEBPRE,XTDEBUGV) S XTDEBCOD=$$GETWATCH^XTDEBUG()
"RTN","XTDEBUG3",102,0)
 K @XTDEBRES@("ZZSTACK") S ^("ZZSTACK")="SECTION=STACK",^("ZZSTACK",0)="" M @XTDEBRES@("ZZSTACK")=@XTDEBLOC@("STK")
"RTN","XTDEBUG3",103,0)
 ; some single letter variables (at least) are over written between RPC calls, save them off and restore on re-entry
"RTN","XTDEBUG3",104,0)
 K @XTDEBLOC@("SV") S XTDEBCOD=" " F  S XTDEBCOD=$O(@XTDEBLOC@("VALUES",XTDEBCOD)) Q:XTDEBCOD=""  I $L(XTDEBCOD)=1 M @XTDEBLOC@("SV",XTDEBCOD)=@XTDEBLOC@("VALUES",XTDEBCOD)
"RTN","XTDEBUG3",105,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"VALUESDONE")=1
"RTN","XTDEBUG3",106,0)
 D INFO^XTMLOG("EXIT VALUES")
"RTN","XTDEBUG3",107,0)
 Q
"RTN","XTDEBUG3",108,0)
 ;
"RTN","XTDEBUG3",109,0)
CHKCHANG(XTDEBRES,XTDEB1,XTDEB2) ;
"RTN","XTDEBUG3",110,0)
 N XTDEBUGP,XTDEBUGC,XTDEBUG1,XTDEBUG2,XTDEBUGA,XTDEBUCN,XTDEBPRE,XTDEBCUR
"RTN","XTDEBUG3",111,0)
 D INFO^XTMLOG("ENTER CHKCHANG")
"RTN","XTDEBUG3",112,0)
 S XTDEBRES=$$CHANGGLO^XTDEBUG() K @XTDEBRES
"RTN","XTDEBUG3",113,0)
 S XTDEBUCN=0,XTDEBPRE=XTDEB1,XTDEBCUR=XTDEB2
"RTN","XTDEBUG3",114,0)
 D INFO^XTMLOG("FALLTHROUGH CHKCHANG TO CHKLOOP")
"RTN","XTDEBUG3",115,0)
 ;
"RTN","XTDEBUG3",116,0)
CHKLOOP ;
"RTN","XTDEBUG3",117,0)
 N XTDEBUGP,XTDEBUGC
"RTN","XTDEBUG3",118,0)
 D INFO^XTMLOG("ENTER CHKLOOP")
"RTN","XTDEBUG3",119,0)
 S XTDEBUGP="",XTDEBUGC="" F  S XTDEBUG1=$O(@XTDEBPRE@(XTDEBUGP)),XTDEBUG2=$O(@XTDEBCUR@(XTDEBUGC)) Q:(XTDEBUG1="")&(XTDEBUG2="")  D  S XTDEBUCN=XTDEBUCN-1
"RTN","XTDEBUG3",120,0)
 . S XTDEBUCN=XTDEBUCN+1
"RTN","XTDEBUG3",121,0)
 . I XTDEBUG1=XTDEBUG2 D  Q
"RTN","XTDEBUG3",122,0)
 . . S XTDEBUGA(XTDEBUCN)=XTDEBUG1
"RTN","XTDEBUG3",123,0)
 . . ; move both variables up to the new level
"RTN","XTDEBUG3",124,0)
 . . S XTDEBUGP=XTDEBUG1,XTDEBUGC=XTDEBUG2
"RTN","XTDEBUG3",125,0)
 . . ; ignore values which this program creates
"RTN","XTDEBUG3",126,0)
 . . I XTDEBUGP["XTDEB" Q
"RTN","XTDEBUG3",127,0)
 . . I $D(@XTDEBPRE@(XTDEBUGP))=1,$D(@XTDEBCUR@(XTDEBUGC))=1,@XTDEBPRE@(XTDEBUGP)=@XTDEBCUR@(XTDEBUGC) Q
"RTN","XTDEBUG3",128,0)
 . . I $G(@XTDEBPRE@(XTDEBUGP))'=$G(@XTDEBCUR@(XTDEBUGC)) D
"RTN","XTDEBUG3",129,0)
 . . . I $D(@XTDEBPRE@(XTDEBUGP))#2 S @XTDEBRES@($$VARNAME(),0)=@XTDEBPRE@(XTDEBUGP)
"RTN","XTDEBUG3",130,0)
 . . . I $D(@XTDEBCUR@(XTDEBUGC))#2 S @XTDEBRES@($$VARNAME(),1)=@XTDEBCUR@(XTDEBUGC)
"RTN","XTDEBUG3",131,0)
 . . . Q
"RTN","XTDEBUG3",132,0)
 . . N XTDEB1,XTDEB2 S XTDEB1=XTDEBPRE,XTDEB2=XTDEBCUR N XTDEBPRE,XTDEBCUR S XTDEBPRE=$NA(@XTDEB1@(XTDEBUGP)),XTDEBCUR=$NA(@XTDEB2@(XTDEBUGC)) D INFO^XTMLOG("EXIT CHKLOOP2") D CHKLOOP D INFO^XTMLOG("RETURN CHKLOOP2")
"RTN","XTDEBUG3",133,0)
 . . Q
"RTN","XTDEBUG3",134,0)
 . I (XTDEBUG2="")!((XTDEBUG2]XTDEBUG1)&(XTDEBUG1'="")) D  Q
"RTN","XTDEBUG3",135,0)
 . . S XTDEBUGP=XTDEBUG1,XTDEBUGA(XTDEBUCN)=XTDEBUGP I XTDEBUGP["XTDEB" Q
"RTN","XTDEBUG3",136,0)
 . . I $D(@XTDEBPRE@(XTDEBUG1))#2 S @XTDEBRES@($$VARNAME(),0)=@XTDEBPRE@(XTDEBUG1)
"RTN","XTDEBUG3",137,0)
 . . I $D(@XTDEBPRE@(XTDEBUG1))>1 D CHKSUBS1(.XTDEBRES,XTDEBPRE,XTDEBUGP,0)
"RTN","XTDEBUG3",138,0)
 . . Q
"RTN","XTDEBUG3",139,0)
 . S XTDEBUGC=XTDEBUG2,XTDEBUGA(XTDEBUCN)=XTDEBUGC I XTDEBUGC["XTDEB" Q
"RTN","XTDEBUG3",140,0)
 . I $D(@XTDEBCUR@(XTDEBUGC))#2 S @XTDEBRES@($$VARNAME(),1)=@XTDEBCUR@(XTDEBUGC)
"RTN","XTDEBUG3",141,0)
 . I $D(@XTDEBCUR@(XTDEBUGC))>1 D CHKSUBS1(.XTDEBRES,XTDEBCUR,XTDEBUGC,1)
"RTN","XTDEBUG3",142,0)
 . Q
"RTN","XTDEBUG3",143,0)
 D INFO^XTMLOG("EXIT CHKLOOP")
"RTN","XTDEBUG3",144,0)
 Q
"RTN","XTDEBUG3",145,0)
 ;
"RTN","XTDEBUG3",146,0)
CHKSUBS1(XTDEBRES,XTDEBGLO,XTDEBARG,XTDEBNDX) ;
"RTN","XTDEBUG3",147,0)
 N XTDEBUGJ,XTDEBURT,XTDEBUGK,XTDEBUGM,XTDEBUGQ,XTDEBUGY
"RTN","XTDEBUG3",148,0)
 ; ZEXCEPT: XTDEBUGA,XTDEBUCN  -- global variables defined and newed in CHKCHANG
"RTN","XTDEBUG3",149,0)
 D INFO^XTMLOG("ENTER CHKSUBS1")
"RTN","XTDEBUG3",150,0)
 S XTDEBURT=$NA(@XTDEBGLO@(XTDEBARG))
"RTN","XTDEBUG3",151,0)
 D INFO^XTMLOG("FALLTHROUGH TO CHKLOOP1")
"RTN","XTDEBUG3",152,0)
 ;
"RTN","XTDEBUG3",153,0)
CHKLOOP1 ;
"RTN","XTDEBUG3",154,0)
 D INFO^XTMLOG("ENTER CHKLOOP1")
"RTN","XTDEBUG3",155,0)
 S XTDEBUGJ=""
"RTN","XTDEBUG3",156,0)
 F  S XTDEBUGJ=$O(@XTDEBURT@(XTDEBUGJ)) Q:XTDEBUGJ=""  D  S XTDEBUCN=XTDEBUCN-1
"RTN","XTDEBUG3",157,0)
 . ; these values are visible across recursive calls so get full set of subscripts
"RTN","XTDEBUG3",158,0)
 . S XTDEBUCN=XTDEBUCN+1,XTDEBUGA(XTDEBUCN)=XTDEBUGJ
"RTN","XTDEBUG3",159,0)
 . ; create the proper appearance for this variable as the variable name, subscripts, etc.
"RTN","XTDEBUG3",160,0)
 . S XTDEBUGK=$$VARNAME()
"RTN","XTDEBUG3",161,0)
 . ; create the correct global structure that has data for this node
"RTN","XTDEBUG3",162,0)
 . S XTDEBUGM=$NA(@XTDEBGLO@(XTDEBUGA(1))),XTDEBUGY=$NA(@XTDEBRES@(XTDEBUGA(1)))
"RTN","XTDEBUG3",163,0)
 . F XTDEBUGQ=2:1:XTDEBUCN S XTDEBUGM=$NA(@XTDEBUGM@(XTDEBUGA(XTDEBUGQ))) S XTDEBUGY=$NA(@XTDEBUGY@(XTDEBUGA(XTDEBUGQ)))
"RTN","XTDEBUG3",164,0)
 . ; if the current node has a value, then output it while ignoring values with XTDEB in them.
"RTN","XTDEBUG3",165,0)
 . I ($D(@XTDEBURT@(XTDEBUGJ))#2),@XTDEBURT@(XTDEBUGJ)'["^TMP(""XTDEBUG""," S @XTDEBRES@(XTDEBUGK,XTDEBNDX)=@XTDEBURT@(XTDEBUGJ)
"RTN","XTDEBUG3",166,0)
 . ; if there are more subscripts, then get them as well - recursively
"RTN","XTDEBUG3",167,0)
 . N XTDEBURY S XTDEBURY=XTDEBURT N XTDEBURT S XTDEBURT=$NA(@XTDEBURY@(XTDEBUGJ)) I $D(@XTDEBURT)>1 N XTDEBUGJ D CHKLOOP1
"RTN","XTDEBUG3",168,0)
 . Q
"RTN","XTDEBUG3",169,0)
 D INFO^XTMLOG("EXIT CHKLOOP1")
"RTN","XTDEBUG3",170,0)
 Q
"RTN","XTDEBUG3",171,0)
 ;
"RTN","XTDEBUG3",172,0)
VARNAME() ;
"RTN","XTDEBUG3",173,0)
 N XTDEBUGL,XTDEBUGQ,XTDEBUGK
"RTN","XTDEBUG3",174,0)
 ; ZEXCEPT: XTDEBUGA,XTDEBUCN  -- global variables defined and newed in CHKCHANG
"RTN","XTDEBUG3",175,0)
 D INFO^XTMLOG("ENTER VARNAME")
"RTN","XTDEBUG3",176,0)
 S XTDEBUGL="" D
"RTN","XTDEBUG3",177,0)
 . F XTDEBUGQ=2:1:XTDEBUCN S:XTDEBUGQ>2 XTDEBUGL=XTDEBUGL_"," S XTDEBUGL=XTDEBUGL_$S(+XTDEBUGA(XTDEBUGQ)'=XTDEBUGA(XTDEBUGQ):""""_XTDEBUGA(XTDEBUGQ)_"""",1:XTDEBUGA(XTDEBUGQ))
"RTN","XTDEBUG3",178,0)
 . S XTDEBUGK=XTDEBUGA(1)_$S(XTDEBUGL'="":"("_XTDEBUGL_")",1:"")
"RTN","XTDEBUG3",179,0)
 . Q
"RTN","XTDEBUG3",180,0)
 D INFO^XTMLOG("EXIT VARNAME")
"RTN","XTDEBUG3",181,0)
 Q XTDEBUGK
"RTN","XTDEBUG3",182,0)
 ;
"RTN","XTDEBUG3",183,0)
DOSUBS(XTDEBUGC,XTDEBUGV,XTDEBUGI,XTDEBUGR) ;
"RTN","XTDEBUG3",184,0)
 N XTDEBUGJ,XTDEBUCN,XTDEBURT,XTDEBUGL,XTDEBUGA,XTDEGUGQ,XTDEBUGK,XTDEBUGQ,XTDEBUGM,XTDEBUGY
"RTN","XTDEBUG3",185,0)
 D INFO^XTMLOG("ENTER DOSUBS","XTDEBUGC,XTDEBUGV,XTDEBUGI,XTDEBUGR")
"RTN","XTDEBUG3",186,0)
 S XTDEBUCN=0,XTDEBURT=$NA(@XTDEBUGV@(XTDEBUGI))
"RTN","XTDEBUG3",187,0)
 D INFO^XTMLOG("FALLTHROUGH TO SUBSCRPT")
"RTN","XTDEBUG3",188,0)
 ;
"RTN","XTDEBUG3",189,0)
SUBSCRPT ;
"RTN","XTDEBUG3",190,0)
 D INFO^XTMLOG("ENTER SUBSCRPT","XTDEBURT")
"RTN","XTDEBUG3",191,0)
 S XTDEBUGJ=""
"RTN","XTDEBUG3",192,0)
 F  S XTDEBUGJ=$O(@XTDEBURT@(XTDEBUGJ)) Q:XTDEBUGJ=""  D  S XTDEBUCN=XTDEBUCN-1
"RTN","XTDEBUG3",193,0)
 . ; these values are visible across recursive calls so get full set of subscripts
"RTN","XTDEBUG3",194,0)
 . S XTDEBUCN=XTDEBUCN+1,XTDEBUGA(XTDEBUCN)=XTDEBUGJ
"RTN","XTDEBUG3",195,0)
 . ; create the proper appearance for this variable as the variable name, subscripts, etc.
"RTN","XTDEBUG3",196,0)
 . S XTDEBUGL="" D
"RTN","XTDEBUG3",197,0)
 . . F XTDEBUGQ=1:1:XTDEBUCN S:XTDEBUGQ>1 XTDEBUGL=XTDEBUGL_"," S XTDEBUGL=XTDEBUGL_$S(+XTDEBUGA(XTDEBUGQ)'=XTDEBUGA(XTDEBUGQ):""""_XTDEBUGA(XTDEBUGQ)_"""",1:XTDEBUGA(XTDEBUGQ))
"RTN","XTDEBUG3",198,0)
 . . S XTDEBUGK=XTDEBUGI_"("_XTDEBUGL_")"
"RTN","XTDEBUG3",199,0)
 . . Q
"RTN","XTDEBUG3",200,0)
 . ; create the correct global structure that has data for this node
"RTN","XTDEBUG3",201,0)
 . S XTDEBUGM=$NA(@XTDEBUGV@(XTDEBUGI)) F XTDEBUGQ=1:1:XTDEBUCN S XTDEBUGM=$NA(@XTDEBUGM@(XTDEBUGA(XTDEBUGQ)))
"RTN","XTDEBUG3",202,0)
 . ; if the current node has a value, then output it while ignoring values with XTDEB in them.
"RTN","XTDEBUG3",203,0)
 . I ($D(@XTDEBURT@(XTDEBUGJ))#2),@XTDEBURT@(XTDEBUGJ)'["^TMP(""XTDEBUG""," S XTDEBUGC=XTDEBUGC+1,@XTDEBUGR@(XTDEBUGC)=XTDEBUGK,XTDEBUGC=XTDEBUGC+1,@XTDEBUGR@(XTDEBUGC)=@XTDEBUGM
"RTN","XTDEBUG3",204,0)
 . ; if there are more subscripts, then get them as well - recursively
"RTN","XTDEBUG3",205,0)
 . N XTDEBURY S XTDEBURY=XTDEBURT N XTDEBURT S XTDEBURT=$NA(@XTDEBURY@(XTDEBUGJ)) I $D(@XTDEBURT)>1 N XTDEBUGJ D SUBSCRPT
"RTN","XTDEBUG3",206,0)
 . Q
"RTN","XTDEBUG3",207,0)
 D INFO^XTMLOG("EXIT SUBSCRPT")
"RTN","XTDEBUG3",208,0)
 Q
"RTN","XTDEBUG4")
0^5^B58225395
"RTN","XTDEBUG4",1,0)
XTDEBUG4 ;JLI/OAK_OIFO- ;10/23/09  16:06
"RTN","XTDEBUG4",2,0)
 ;;7.3;TOOLKIT;**107**;Apr 25, 1995;Build 14
"RTN","XTDEBUG4",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified
"RTN","XTDEBUG4",4,0)
 D EN^XTMUNIT("ZZUTXTD1") W DUZ
"RTN","XTDEBUG4",5,0)
 Q
"RTN","XTDEBUG4",6,0)
 ; OPENTAG -  handles call to tag and setting up values for variables for the code following the tag
"RTN","XTDEBUG4",7,0)
 ;     XTDEBAL1 - is the comma separated list of arguments as they appear in the code doing the calling
"RTN","XTDEBUG4",8,0)
 ;                so variable names are correct, and so call by reference can be determined
"RTN","XTDEBUG4",9,0)
 ;     XTDEBAL2 - is the comma separated list of arguments as they appear in the called TAG
"RTN","XTDEBUG4",10,0)
OPENTAG(XTDEBAL1,XTDEBAL2) ;
"RTN","XTDEBUG4",11,0)
 N XTDEBBYR,XTDEBFUN,XTDEBSTR,XTDEBARG,XTDEBPAR,XTDEBQUO,XTDEBDON,XTDEBGL2
"RTN","XTDEBUG4",12,0)
 N XTDEBAR2,XTDEBARX,XTDEBCHR,XTDEBCHR,XTDEBGLO,XTDEBGL1,XTDEBLOC,XTDEBLVL
"RTN","XTDEBUG4",13,0)
 N XTDEBARE,XTDEBNUM
"RTN","XTDEBUG4",14,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG()
"RTN","XTDEBUG4",15,0)
 S XTDEBLVL=+$G(@XTDEBLOC@("LASTLVL"))
"RTN","XTDEBUG4",16,0)
 D DEBUG^XTMLOG("OPENTAG1","XTDEBAL1,XTDEBAL2,"_$NA(@XTDEBLOC@("LVL",XTDEBLVL)),1)
"RTN","XTDEBUG4",17,0)
 D ADDLEVEL ; mark depth of call
"RTN","XTDEBUG4",18,0)
 S XTDEBLVL=+$G(@XTDEBLOC@("LASTLVL"))
"RTN","XTDEBUG4",19,0)
 S XTDEBGL1=$NA(@XTDEBLOC@("LVL",XTDEBLVL,"XARGS")),XTDEBGL2=$NA(@XTDEBLOC@("LVL",XTDEBLVL,"YARGS")),XTDEBGLO=$NA(@XTDEBLOC@("LVL",XTDEBLVL,"CALL")) K @XTDEBGLO,@XTDEBGL1,@XTDEBGL2
"RTN","XTDEBUG4",20,0)
 S XTDEBAL1=$G(XTDEBAL1),XTDEBAL2=$G(XTDEBAL2)
"RTN","XTDEBUG4",21,0)
 S XTDEBNUM=0
"RTN","XTDEBUG4",22,0)
LOOP ;
"RTN","XTDEBUG4",23,0)
 D DEBUG^XTMLOG("IN LOOP","XTDEBAL1,XTDEBAL2")
"RTN","XTDEBUG4",24,0)
 I XTDEBAL2="" D DEBUG^XTMLOG("OPENTAG2",$NA(@XTDEBLOC@("LVL",XTDEBLVL)),1) G SETNTRNL ;Q  ; done, don't worry if XTDEBAL1 isn't null as well - would give an immediate error
"RTN","XTDEBUG4",25,0)
 S (XTDEBBYR,XTDEBFUN,XTDEBSTR)=0 I XTDEBAL1'="" D
"RTN","XTDEBUG4",26,0)
 . I $E(XTDEBAL1)="." S XTDEBBYR=1,XTDEBAL1=$E(XTDEBAL1,2,$L(XTDEBAL1)) ; passed by reference
"RTN","XTDEBUG4",27,0)
 . I $E(XTDEBAL1)="$" S XTDEBFUN=1 ; involves a function
"RTN","XTDEBUG4",28,0)
 . I $E(XTDEBAL1)="""" S XTDEBSTR=1 ; total string value
"RTN","XTDEBUG4",29,0)
 . Q
"RTN","XTDEBUG4",30,0)
 D DEBUG^XTMLOG("IN LOOP","XTDEBBYR,XTDEBFUN,XTDEBSTR")
"RTN","XTDEBUG4",31,0)
 S XTDEBPAR=0,XTDEBQUO=0,XTDEBDON=0
"RTN","XTDEBUG4",32,0)
 S XTDEBARG="" F  Q:XTDEBAL1=""  S XTDEBCHR=$E(XTDEBAL1),XTDEBAL1=$E(XTDEBAL1,2,$L(XTDEBAL1)) D  Q:XTDEBDON
"RTN","XTDEBUG4",33,0)
 . S:XTDEBCHR="(" XTDEBPAR=XTDEBPAR+1
"RTN","XTDEBUG4",34,0)
 . S:XTDEBCHR="""" XTDEBQUO=XTDEBQUO+$S(XTDEBQUO=0:1,1:-1)
"RTN","XTDEBUG4",35,0)
 . S:XTDEBCHR=")" XTDEBPAR=XTDEBPAR-1
"RTN","XTDEBUG4",36,0)
 . I XTDEBCHR=",",XTDEBPAR=0,XTDEBQUO=0 S XTDEBDON=1 Q
"RTN","XTDEBUG4",37,0)
 . S XTDEBARG=XTDEBARG_XTDEBCHR
"RTN","XTDEBUG4",38,0)
 . Q
"RTN","XTDEBUG4",39,0)
 S XTDEBNUM=XTDEBNUM+1
"RTN","XTDEBUG4",40,0)
 ;
"RTN","XTDEBUG4",41,0)
 D DEBUG^XTMLOG("IN LOOP1A","XTDEBARG")
"RTN","XTDEBUG4",42,0)
 S XTDEBAR2=$P(XTDEBAL2,","),XTDEBAL2=$P(XTDEBAL2,",",2,99)
"RTN","XTDEBUG4",43,0)
 ; external variable name, null otherwise
"RTN","XTDEBUG4",44,0)
 S XTDEBARE=$S(XTDEBARG'?1A.AN:"",1:XTDEBARG)
"RTN","XTDEBUG4",45,0)
 S @XTDEBGL1@(XTDEBNUM,"EXTNAME")=XTDEBARE
"RTN","XTDEBUG4",46,0)
 S @XTDEBGL1@(XTDEBNUM,"EXTINPUT")=XTDEBARG
"RTN","XTDEBUG4",47,0)
 I XTDEBARE'="" M @XTDEBGL1@(XTDEBNUM,"EXTNAME","VALS")=@XTDEBARE
"RTN","XTDEBUG4",48,0)
 I XTDEBARE="",XTDEBARG'="" S XTDEBARX="S @XTDEBGL1@(XTDEBNUM,""XTDEBARG"")="_XTDEBARG X XTDEBARX
"RTN","XTDEBUG4",49,0)
 S @XTDEBGL1@(XTDEBNUM,"TYPE")=XTDEBBYR
"RTN","XTDEBUG4",50,0)
 S @XTDEBGL1@(XTDEBNUM,"INTNAME")=XTDEBAR2
"RTN","XTDEBUG4",51,0)
 G LOOP ; handles both single variables and functions
"RTN","XTDEBUG4",52,0)
 ;
"RTN","XTDEBUG4",53,0)
SETNTRNL ; set internal values after all are ready, in case of dependencies among calling arguments
"RTN","XTDEBUG4",54,0)
 N XTDEBLOC,XTDEBLVL,XTDEBGL1,XTDEBNUM,XTDEBAR2,XTDEBARE,XTDEBARG
"RTN","XTDEBUG4",55,0)
 N XTDEBARX,XTDEBBYR,XTDEBNUM
"RTN","XTDEBUG4",56,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG()
"RTN","XTDEBUG4",57,0)
 S XTDEBLVL=+$G(@XTDEBLOC@("LASTLVL"))
"RTN","XTDEBUG4",58,0)
 S XTDEBGL1=$NA(@XTDEBLOC@("LVL",XTDEBLVL,"XARGS"))
"RTN","XTDEBUG4",59,0)
 F XTDEBNUM=0:0 S XTDEBNUM=$O(@XTDEBGL1@(XTDEBNUM)) Q:XTDEBNUM'>0  D
"RTN","XTDEBUG4",60,0)
 . S XTDEBARE=$G(@XTDEBGL1@(XTDEBNUM,"EXTNAME")),XTDEBAR2=$G(@XTDEBGL1@(XTDEBNUM,"INTNAME"))
"RTN","XTDEBUG4",61,0)
 . S XTDEBBYR=@XTDEBGL1@(XTDEBNUM,"TYPE")
"RTN","XTDEBUG4",62,0)
 . M @XTDEBGL1@(XTDEBNUM,"INTNAME","VALS")=@XTDEBAR2
"RTN","XTDEBUG4",63,0)
 . D DEBUG^XTMLOG("NEW OPEN","XTDEBNUM,"_$NA(@XTDEBGL1@(XTDEBNUM)),1)
"RTN","XTDEBUG4",64,0)
 . K:XTDEBARE'="" @XTDEBARE K @XTDEBAR2
"RTN","XTDEBUG4",65,0)
 . I XTDEBBYR M @XTDEBAR2=@XTDEBGL1@(XTDEBNUM,"EXTNAME","VALS")
"RTN","XTDEBUG4",66,0)
 . I 'XTDEBBYR,XTDEBARE'="",$D(@XTDEBGL1@(XTDEBNUM,"EXTNAME","VALS"))#2 S @XTDEBAR2=$G(@XTDEBGL1@(XTDEBNUM,"EXTNAME","VALS"))
"RTN","XTDEBUG4",67,0)
 . I XTDEBARE="",XTDEBAR2'="" S XTDEBARX=$G(@XTDEBGL1@(XTDEBNUM,"XTDEBARG")) I XTDEBARX'="" D
"RTN","XTDEBUG4",68,0)
 . . I $E(XTDEBARX)="$" S XTDEBARX="S "_XTDEBAR2_"="_XTDEBARX D DEBUG^XTMLOG("IN LOOP1","XTDEBARX") I XTDEBARG'="" X XTDEBARX
"RTN","XTDEBUG4",69,0)
 . . I $E(XTDEBARX)'="$" S @XTDEBAR2=XTDEBARX
"RTN","XTDEBUG4",70,0)
 . . Q
"RTN","XTDEBUG4",71,0)
 . Q
"RTN","XTDEBUG4",72,0)
 Q
"RTN","XTDEBUG4",73,0)
 ;
"RTN","XTDEBUG4",74,0)
 D DEBUG^XTMLOG("IN LOOP1A","XTDEBARG")
"RTN","XTDEBUG4",75,0)
 S XTDEBAR2=$P(XTDEBAL2,","),XTDEBAL2=$P(XTDEBAL2,",",2,99)
"RTN","XTDEBUG4",76,0)
 ; save off any variables related to our arguments name, restore on leave tag
"RTN","XTDEBUG4",77,0)
 S @XTDEBGL1@(XTDEBAR2)=$S(XTDEBBYR:XTDEBARG,1:"")
"RTN","XTDEBUG4",78,0)
 I XTDEBARG'="" X "M "_$NA(@XTDEBGLO@(XTDEBARG))_"=XTDEBARG"
"RTN","XTDEBUG4",79,0)
 X "M "_$NA(@XTDEBGL2@(XTDEBAR2))_"=XTDEBAR2"
"RTN","XTDEBUG4",80,0)
 ;D DEBUG^XTMLOG("REF1","XTDEBAR2,XTDEBAR8",1)
"RTN","XTDEBUG4",81,0)
 ;I XTDEBAR8'=+XTDEBAR8,$E(XTDEBAR8)'="""" M @XTDEBGLO@(XTDEBAR2)=XTDEBAR8
"RTN","XTDEBUG4",82,0)
 ;D DEBUG^XTMLOG("LOOP1B",$NA(@XTDEBGLO@(XTDEBARG))_","_$NA(@XTDEBGL1@(XTDEBAR2))_","_$NA(@XTDEBGL2@(XTDEBAR2)),1)
"RTN","XTDEBUG4",83,0)
 I XTDEBARG'=XTDEBAR2 K @XTDEBAR2 I XTDEBAR2=XTDEBARG,$D(@XTDEBGLO@(XTDEBAR2))#2 S XTDEBARG=@XTDEBGLO@(XTDEBAR2) D DEBUG^XTMLOG("CHEK1","XTDEBARG",1)
"RTN","XTDEBUG4",84,0)
 I XTDEBBYR D DEBUG^XTMLOG("XTDEBBYR") S XTDEBARX="M "_XTDEBAR2_"=@"_$NA(@XTDEBGLO@(XTDEBARG)) X XTDEBARX D DEBUG^XTMLOG("IN LOOPAX",$NA(@XTDEBLOC@("LVL"))_",XTDEBAR2,XTDEBARG,XTDEBARX,DIC,A",1) G LOOP
"RTN","XTDEBUG4",85,0)
 D DEBUG^XTMLOG("IN LOOPA",$NA(@XTDEBLOC@("LVL"))_",XTDEBAR2,XTDEBARG",1)
"RTN","XTDEBUG4",86,0)
 M @XTDEBGL2@(XTDEBARG)=XTDEBARG
"RTN","XTDEBUG4",87,0)
 S XTDEBARX="S "_XTDEBAR2_"="_XTDEBARG
"RTN","XTDEBUG4",88,0)
 D DEBUG^XTMLOG("IN LOOP1","XTDEBARX")
"RTN","XTDEBUG4",89,0)
 I XTDEBARG'="" X XTDEBARX
"RTN","XTDEBUG4",90,0)
 G LOOP ; handles both single variables and functions
"RTN","XTDEBUG4",91,0)
 ;
"RTN","XTDEBUG4",92,0)
LEAVETAG ;
"RTN","XTDEBUG4",93,0)
 G POPLEVEL
"RTN","XTDEBUG4",94,0)
 ;
"RTN","XTDEBUG4",95,0)
NEWVARS(XTDEBVAR) ;
"RTN","XTDEBUG4",96,0)
 ; TODO: HANDLE UNARGUMENTED NEW (SHOULDN'T HAPPEN)
"RTN","XTDEBUG4",97,0)
 ; TODO: HANDLE EXCLUSIVE NEW
"RTN","XTDEBUG4",98,0)
 N XTDEBGLO,XTDEBUGI,XTDEBVA1,XTDEBLVL,XTDEBUGJ,XTDEBVA2
"RTN","XTDEBUG4",99,0)
 S XTDEBGLO=$$GETGLOB^XTDEBUG(),XTDEBLVL=@XTDEBGLO@("LASTLVL"),XTDEBGLO=$NA(@XTDEBGLO@("LVL",XTDEBLVL,"NEWED")) ;K @XTDEBGLO
"RTN","XTDEBUG4",100,0)
 S XTDEBVAR=$G(XTDEBVAR)
"RTN","XTDEBUG4",101,0)
 ; save off any variables related to our arguments name, for restore on leave level, then kill
"RTN","XTDEBUG4",102,0)
 ;   if a variable is newed twice in the same level, don't need to save off current value, the initial save will be restored
"RTN","XTDEBUG4",103,0)
 ;F XTDEBUGI=1:1 S XTDEBVA1=$G(XTDEBVAR("ARGS",XTDEBUGI)) Q:XTDEBVA1=""  M:'$D(@XTDEBGLO@(XTDEBVA1)) @XTDEBGLO@(XTDEBVA1)=@XTDEBVA1 K @XTDEBVA1
"RTN","XTDEBUG4",104,0)
 ; modified to handle a single set of comma separated arguments
"RTN","XTDEBUG4",105,0)
 F XTDEBUGI=1:1 S XTDEBVA1=$G(XTDEBVAR("ARGS",XTDEBUGI)) Q:XTDEBVA1=""  D
"RTN","XTDEBUG4",106,0)
 . ; 091023 following line commented and set no merge or kill done on $ variables
"RTN","XTDEBUG4",107,0)
 . ;F XTDEBUGJ=1:1 S XTDEBVA2=$P(XTDEBVA1,",",XTDEBUGJ) Q:XTDEBVA2=""  M:'$D(@XTDEBGLO@(XTDEBVA2)) @XTDEBGLO@(XTDEBVA2)=@XTDEBVA2 K @XTDEBVA2
"RTN","XTDEBUG4",108,0)
 . F XTDEBUGJ=1:1 S XTDEBVA2=$P(XTDEBVA1,",",XTDEBUGJ) Q:XTDEBVA2=""  I $E(XTDEBVA2)'="$" M:'$D(@XTDEBGLO@(XTDEBVA2)) @XTDEBGLO@(XTDEBVA2)=@XTDEBVA2 K @XTDEBVA2
"RTN","XTDEBUG4",109,0)
 . Q
"RTN","XTDEBUG4",110,0)
 Q
"RTN","XTDEBUG4",111,0)
 ;
"RTN","XTDEBUG4",112,0)
ADDLEVEL ;
"RTN","XTDEBUG4",113,0)
 N XTDEBLOC
"RTN","XTDEBUG4",114,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG(),@XTDEBLOC@("LASTLVL")=@XTDEBLOC@("LASTLVL")+1 ; increment
"RTN","XTDEBUG4",115,0)
 Q
"RTN","XTDEBUG4",116,0)
 ;
"RTN","XTDEBUG4",117,0)
POPLEVEL ;
"RTN","XTDEBUG4",118,0)
 N XTDEBLOC,XTDEBVAR,XTDEBTYP,XTDEBGLO,XTDEBLVL
"RTN","XTDEBUG4",119,0)
 N XTDEBEXT,XTDEBGL1,XTDEBINT,XTDEBNUM,XTDEBUGI
"RTN","XTDEBUG4",120,0)
 ; ZEXCEPT: XTDEBRTN  -- return value from intrinsic functions generated in NEXTENT
"RTN","XTDEBUG4",121,0)
 ; clean and restore NEWed variables if necessary
"RTN","XTDEBUG4",122,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG(),XTDEBLVL=@XTDEBLOC@("LASTLVL"),XTDEBGLO=$NA(@XTDEBLOC@("LVL",XTDEBLVL,"NEWED"))
"RTN","XTDEBUG4",123,0)
 S XTDEBGL1=$NA(@XTDEBLOC@("LVL",XTDEBLVL,"XARGS"))
"RTN","XTDEBUG4",124,0)
 D DEBUG^XTMLOG("POPLEVEL1",$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG4",125,0)
 S XTDEBVAR=""
"RTN","XTDEBUG4",126,0)
 F  S XTDEBVAR=$O(@XTDEBGLO@(XTDEBVAR)) Q:XTDEBVAR=""  K @XTDEBVAR M @XTDEBVAR=@XTDEBGLO@(XTDEBVAR) K @XTDEBGLO@(XTDEBVAR)
"RTN","XTDEBUG4",127,0)
 ; new section added 080506
"RTN","XTDEBUG4",128,0)
 ;   first save any variables before killing off internal,
"RTN","XTDEBUG4",129,0)
 F XTDEBNUM=0:0 S XTDEBNUM=$O(@XTDEBGL1@(XTDEBNUM)) Q:XTDEBNUM'>0  D
"RTN","XTDEBUG4",130,0)
 . S XTDEBINT=@XTDEBGL1@(XTDEBNUM,"INTNAME")
"RTN","XTDEBUG4",131,0)
 . M @XTDEBGL1@(XTDEBNUM,"INTNAME","FINAL")=@XTDEBINT
"RTN","XTDEBUG4",132,0)
 . Q
"RTN","XTDEBUG4",133,0)
 ;   now kill off internal variable names
"RTN","XTDEBUG4",134,0)
 F XTDEBNUM=0:0 S XTDEBNUM=$O(@XTDEBGL1@(XTDEBNUM)) Q:XTDEBNUM'>0  D
"RTN","XTDEBUG4",135,0)
 . S XTDEBINT=@XTDEBGL1@(XTDEBNUM,"INTNAME")
"RTN","XTDEBUG4",136,0)
 . K @XTDEBINT
"RTN","XTDEBUG4",137,0)
 . Q
"RTN","XTDEBUG4",138,0)
 ;  and restore variables to external names
"RTN","XTDEBUG4",139,0)
 F XTDEBNUM=0:0 S XTDEBNUM=$O(@XTDEBGL1@(XTDEBNUM)) Q:XTDEBNUM'>0  D
"RTN","XTDEBUG4",140,0)
 . S XTDEBINT=@XTDEBGL1@(XTDEBNUM,"INTNAME"),XTDEBEXT=$G(@XTDEBGL1@(XTDEBNUM,"EXTNAME"))
"RTN","XTDEBUG4",141,0)
 . I '@XTDEBGL1@(XTDEBNUM,"TYPE") D  Q
"RTN","XTDEBUG4",142,0)
 . . M @XTDEBINT=@XTDEBGL1@(XTDEBNUM,"INTNAME","VALS")
"RTN","XTDEBUG4",143,0)
 . . I XTDEBEXT'="" M @XTDEBEXT=@XTDEBGL1@(XTDEBNUM,"EXTNAME","VALS")
"RTN","XTDEBUG4",144,0)
 . . Q
"RTN","XTDEBUG4",145,0)
 . I XTDEBINT'=XTDEBEXT M @XTDEBINT=@XTDEBGL1@(XTDEBNUM,"INTNAME","VALS")
"RTN","XTDEBUG4",146,0)
 . M @XTDEBEXT=@XTDEBGL1@(XTDEBNUM,"INTNAME","FINAL")
"RTN","XTDEBUG4",147,0)
 . Q
"RTN","XTDEBUG4",148,0)
 ; DEBUG DEBUG
"RTN","XTDEBUG4",149,0)
 F XTDEBNUM=0:0 S XTDEBNUM=$O(@XTDEBGL1@(XTDEBNUM)) Q:XTDEBNUM'>0  D
"RTN","XTDEBUG4",150,0)
 . I '$D(@XTDEBGL1@(XTDEBNUM,"EXTNAME","VALS")) Q
"RTN","XTDEBUG4",151,0)
 . S XTDEBEXT=$G(@XTDEBGL1@(XTDEBNUM,"EXTNAME"))
"RTN","XTDEBUG4",152,0)
 . Q
"RTN","XTDEBUG4",153,0)
 K @XTDEBGLO,@XTDEBGL1
"RTN","XTDEBUG4",154,0)
 K @XTDEBLOC@("STK",XTDEBLVL)
"RTN","XTDEBUG4",155,0)
 I $D(XTDEBRTN) D
"RTN","XTDEBUG4",156,0)
 . D DEBUG^XTMLOG("","XTDEBRTN")
"RTN","XTDEBUG4",157,0)
 . S XTDEBVAR=$G(@XTDEBLOC@("LVL",XTDEBLVL-1,"XTDEBVAR")) I XTDEBVAR'="" S @(XTDEBVAR)=XTDEBRTN
"RTN","XTDEBUG4",158,0)
 . Q
"RTN","XTDEBUG4",159,0)
 K @XTDEBLOC@("LVL",XTDEBLVL) ; <=======  Kill previous level data since we are leaving it
"RTN","XTDEBUG4",160,0)
 S XTDEBLVL=XTDEBLVL-1
"RTN","XTDEBUG4",161,0)
 S @XTDEBLOC@("LASTLVL")=XTDEBLVL ; decrement
"RTN","XTDEBUG4",162,0)
 I $D(@XTDEBLOC@("LVL",XTDEBLVL,"PRE-PROCESS")),$G(@XTDEBLOC@("LVL",XTDEBLVL,"CMND"))="" G POPLEVEL ; skip over pre-process level
"RTN","XTDEBUG4",163,0)
 D DEBUG^XTMLOG("POPLEVEL2",$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG4",164,0)
 I XTDEBLVL=0,$G(@XTDEBLOC@("LVL",0,"CMND"))="" S XTDEBUGI=$$CHKWATCH^XTDEBUG() D REASON^XTDEBUG("DONE",1) Q
"RTN","XTDEBUG4",165,0)
 G NEXTENT^XTDEBUG
"RTN","XTDEBUG4",166,0)
 G NEXTENT^XTDEBUG
"RTN","XTDEBUG5")
0^6^B34260042
"RTN","XTDEBUG5",1,0)
XTDEBUG5 ;JLI/OAK_OIFO- ;07/31/08  16:21
"RTN","XTDEBUG5",2,0)
 ;;7.3;TOOLKIT;**107**;Apr 25, 1995;Build 14
"RTN","XTDEBUG5",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified
"RTN","XTDEBUG5",4,0)
 D EN^XTMUNIT("ZZUTXTD1")
"RTN","XTDEBUG5",5,0)
 Q
"RTN","XTDEBUG5",6,0)
 ;
"RTN","XTDEBUG5",7,0)
SETWATCH(XTDEBRES,XTDEBWAT) ;
"RTN","XTDEBUG5",8,0)
 N XTDEBLOC,XTDEBCND
"RTN","XTDEBUG5",9,0)
 S XTDEBLOC=$$GETGLOBS(),XTDEBLOC=$NA(@XTDEBLOC@("WATCH"))
"RTN","XTDEBUG5",10,0)
 S XTDEBCND=$P($G(XTDEBWAT),";",2,999),XTDEBWAT=$P($G(XTDEBWAT),";")
"RTN","XTDEBUG5",11,0)
 I XTDEBWAT'="" S @XTDEBLOC@(XTDEBWAT)="" I XTDEBCND'="" S @XTDEBLOC@(XTDEBWAT,"COND")=XTDEBCND
"RTN","XTDEBUG5",12,0)
 D RETVALS(.XTDEBRES,XTDEBLOC)
"RTN","XTDEBUG5",13,0)
 Q
"RTN","XTDEBUG5",14,0)
 ;
"RTN","XTDEBUG5",15,0)
RETVALS(XTDEBRES,XTDEBLOC) ;
"RTN","XTDEBUG5",16,0)
 N XTDEBTMP,XTDEBCNT,XTDEBVAR
"RTN","XTDEBUG5",17,0)
 S XTDEBTMP=$NA(^TMP($J,"TEMP")) K @XTDEBTMP
"RTN","XTDEBUG5",18,0)
 S XTDEBRES=XTDEBTMP,XTDEBCNT=0
"RTN","XTDEBUG5",19,0)
 S XTDEBVAR="" F  S XTDEBVAR=$O(@XTDEBLOC@(XTDEBVAR)) Q:XTDEBVAR=""  D
"RTN","XTDEBUG5",20,0)
 . S XTDEBCNT=XTDEBCNT+1
"RTN","XTDEBUG5",21,0)
 . S @XTDEBTMP@(XTDEBCNT)=XTDEBVAR_";"_$G(@XTDEBLOC@(XTDEBVAR,"COND"))
"RTN","XTDEBUG5",22,0)
 . Q
"RTN","XTDEBUG5",23,0)
 Q
"RTN","XTDEBUG5",24,0)
 ;
"RTN","XTDEBUG5",25,0)
CLRWATCH(XTDEBRES,XTDEBWAT) ;
"RTN","XTDEBUG5",26,0)
 N XTDEBLOC,XTDEBTMP,XTDEBCNT,XTDEBVAR
"RTN","XTDEBUG5",27,0)
 S XTDEBLOC=$$GETGLOBS() S XTDEBLOC=$NA(@XTDEBLOC@("WATCH"))
"RTN","XTDEBUG5",28,0)
 S XTDEBVAR=XTDEBWAT
"RTN","XTDEBUG5",29,0)
 F  S XTDEBWAT=$P(XTDEBVAR,";") Q:XTDEBWAT=""  S XTDEBVAR=$P(XTDEBVAR,";",2,99) D
"RTN","XTDEBUG5",30,0)
 . K @XTDEBLOC@(XTDEBWAT)
"RTN","XTDEBUG5",31,0)
 . Q
"RTN","XTDEBUG5",32,0)
 D RETVALS(.XTDEBRES,XTDEBLOC)
"RTN","XTDEBUG5",33,0)
 Q
"RTN","XTDEBUG5",34,0)
 ;
"RTN","XTDEBUG5",35,0)
CHKWATCH() ;
"RTN","XTDEBUG5",36,0)
 N XTDEBRES
"RTN","XTDEBUG5",37,0)
 S XTDEBRES=$$RESULTS^XTDEBUG(),XTDEBRES=$NA(@XTDEBRES@("WATCH"))
"RTN","XTDEBUG5",38,0)
 D DEBUG^XTMLOG("IN CHKWATCH $D(@XTDEBRES)>0 = "_($D(@XTDEBRES)>0))
"RTN","XTDEBUG5",39,0)
 Q $D(@XTDEBRES)>0
"RTN","XTDEBUG5",40,0)
 ;
"RTN","XTDEBUG5",41,0)
GETWATCH() ;
"RTN","XTDEBUG5",42,0)
 N XTDEBGLO,XTDEBRES,XTDEBGLO,XTDEBX1,XTDEBX0,XTDEBVAR,XTDEBCNT
"RTN","XTDEBUG5",43,0)
 N XTDEBCNG,XTDEBLIN,XTDEBYES,XTDEBCND
"RTN","XTDEBUG5",44,0)
 S XTDEBGLO=$$GETGLOBS(),XTDEBCNG=$$CHANGGLO^XTDEBUG(),XTDEBRES=$$RESULTS^XTDEBUG(),XTDEBRES=$NA(@XTDEBRES@("WATCH")) K @XTDEBRES
"RTN","XTDEBUG5",45,0)
 ; CHKCHANG already called as a part of VALUES if WATCH global set
"RTN","XTDEBUG5",46,0)
 D DEBUG^XTMLOG("IN GETWATCH")
"RTN","XTDEBUG5",47,0)
 N XTDEBCNT S XTDEBCNT=0
"RTN","XTDEBUG5",48,0)
 I $D(@XTDEBGLO@("WATCH")) D
"RTN","XTDEBUG5",49,0)
 . D DEBUG^XTMLOG("GETWATCH1")
"RTN","XTDEBUG5",50,0)
 . N XTDEBVAR S XTDEBVAR=""
"RTN","XTDEBUG5",51,0)
 . F  S XTDEBVAR=$O(@XTDEBGLO@("WATCH",XTDEBVAR)) Q:XTDEBVAR=""  D
"RTN","XTDEBUG5",52,0)
 . . S XTDEBCND="" I $D(@XTDEBGLO@("WATCH",XTDEBVAR,"COND")) S XTDEBCND=^("COND")
"RTN","XTDEBUG5",53,0)
 . . I XTDEBVAR["*" D
"RTN","XTDEBUG5",54,0)
 . . . N VARA,VARB S (VARA,VARB)=$E(XTDEBVAR,1,$L(XTDEBVAR)-1)
"RTN","XTDEBUG5",55,0)
 . . . D DEBUG^XTMLOG("GETWATCH2","XTDEBVAR")
"RTN","XTDEBUG5",56,0)
 . . . S VARA=$S($L(VARA)>1:$E(VARA,1,$L(VARA)-1),1:"")_$CHAR($ASCII($E(VARA,$L(VARA)))-1)_"zzzzzzzzz"
"RTN","XTDEBUG5",57,0)
 . . . F  S VARA=$O(@XTDEBCNG@(VARA)) Q:VARA'[VARB  D
"RTN","XTDEBUG5",58,0)
 . . . . S XTDEBX0=$S($D(@XTDEBCNG@(VARA,0)):^(0),1:"<UNDEFINED>")
"RTN","XTDEBUG5",59,0)
 . . . . S XTDEBX1=$S($D(@XTDEBCNG@(VARA,1)):^(1),1:"<UNDEFINED>")
"RTN","XTDEBUG5",60,0)
 . . . . I XTDEBCND'="" S XTDEBLIN="S XTDEBYES=0 I "_XTDEBCND_" S XTDEBYES=1" X XTDEBLIN I 'XTDEBYES Q
"RTN","XTDEBUG5",61,0)
 . . . . S XTDEBCNT=XTDEBCNT+1,@XTDEBRES@(XTDEBCNT)=VARA_" = "_XTDEBX0_"^"_XTDEBX1
"RTN","XTDEBUG5",62,0)
 . . . . S @XTDEBRES@(XTDEBCNT,0)=""
"RTN","XTDEBUG5",63,0)
 . . . . Q
"RTN","XTDEBUG5",64,0)
 . . . Q
"RTN","XTDEBUG5",65,0)
 . . I XTDEBVAR'["*" D
"RTN","XTDEBUG5",66,0)
 . . . I $D(@XTDEBCNG@(XTDEBVAR,0))!$D(@XTDEBCNG@(XTDEBVAR,1)) D
"RTN","XTDEBUG5",67,0)
 . . . . D DEBUG^XTMLOG("GETWATCH3","XTDEBVAR")
"RTN","XTDEBUG5",68,0)
 . . . . S XTDEBX0=$S($D(@XTDEBCNG@(XTDEBVAR,0)):^(0),1:"<UNDEFINED>")
"RTN","XTDEBUG5",69,0)
 . . . . S XTDEBX1=$S($D(@XTDEBCNG@(XTDEBVAR,1)):^(1),1:"<UNDEFINED>")
"RTN","XTDEBUG5",70,0)
 . . . . I XTDEBCND'="" S XTDEBLIN="S XTDEBYES=0 I "_XTDEBCND_" S XTDEBYES=1" X XTDEBLIN I 'XTDEBYES Q
"RTN","XTDEBUG5",71,0)
 . . . . S XTDEBCNT=XTDEBCNT+1,@XTDEBRES@(XTDEBCNT)=XTDEBVAR_" = "_XTDEBX0_"^"_XTDEBX1
"RTN","XTDEBUG5",72,0)
 . . . . S @XTDEBRES@(XTDEBCNT,0)=""
"RTN","XTDEBUG5",73,0)
 . . . . Q
"RTN","XTDEBUG5",74,0)
 . . . N VARA,VARB S (VARA,VARB)=XTDEBVAR_"("
"RTN","XTDEBUG5",75,0)
 . . . F  S VARA=$O(@XTDEBCNG@(VARA)) Q:VARA'[VARB  D
"RTN","XTDEBUG5",76,0)
 . . . . D DEBUG^XTMLOG("GETWATCH4","VARA")
"RTN","XTDEBUG5",77,0)
 . . . . S XTDEBX0=$S($D(@XTDEBCNG@(VARA,0)):^(0),1:"<UNDEFINED>")
"RTN","XTDEBUG5",78,0)
 . . . . S XTDEBX1=$S($D(@XTDEBCNG@(VARA,1)):^(1),1:"<UNDEFINED>")
"RTN","XTDEBUG5",79,0)
 . . . . I XTDEBCND'="" S XTDEBLIN="S XTDEBYES=0 I "_XTDEBCND_" S XTDEBYES=1" X XTDEBLIN I 'XTDEBYES Q
"RTN","XTDEBUG5",80,0)
 . . . . S XTDEBCNT=XTDEBCNT+1,@XTDEBRES@(XTDEBCNT)=VARA_" = "_XTDEBX0_"^"_XTDEBX1
"RTN","XTDEBUG5",81,0)
 . . . . S @XTDEBRES@(XTDEBCNT,0)=""
"RTN","XTDEBUG5",82,0)
 . . . . Q
"RTN","XTDEBUG5",83,0)
 . . . Q
"RTN","XTDEBUG5",84,0)
 . . Q
"RTN","XTDEBUG5",85,0)
 . Q
"RTN","XTDEBUG5",86,0)
 I XTDEBCNT>0 S @XTDEBRES="SECTION=WATCH",@XTDEBRES@(0)="WATCH DATA" D DEBUG^XTMLOG("GETWATCH FINISHED")
"RTN","XTDEBUG5",87,0)
 D DEBUG^XTMLOG("GETWATCH RESULT $D(@XTDEBRES)>0 = "_($D(@XTDEBRES)>0))
"RTN","XTDEBUG5",88,0)
 Q $D(@XTDEBRES)>0
"RTN","XTDEBUG5",89,0)
 ;
"RTN","XTDEBUG5",90,0)
GETGLOBS() ;
"RTN","XTDEBUG5",91,0)
 Q $NA(^TMP("XTDEBUG-S",$J))
"RTN","XTDEBUG5",92,0)
 ;
"RTN","XTDEBUG5",93,0)
BREAKFRM(XTDEBINP) ; takes data in form TAG+N^ROUTINE and returns it as +LIN^ROUTINE, where LIN is from start of routine
"RTN","XTDEBUG5",94,0)
 N XTDEBPAR,LINNUM,VALUE
"RTN","XTDEBUG5",95,0)
 D TAGPARTS^XTDEBUG(.XTDEBPAR,XTDEBINP)
"RTN","XTDEBUG5",96,0)
 S LINNUM=$$LINENUM^XTDEBUG(XTDEBPAR("ROUTINE"),XTDEBPAR("LINE"))
"RTN","XTDEBUG5",97,0)
 S VALUE="+"_LINNUM_"^"_XTDEBPAR("ROUTINE")
"RTN","XTDEBUG5",98,0)
 Q VALUE
"RTN","XTDEBUG5",99,0)
 ;
"RTN","XTDEBUG5",100,0)
SETBREAK(XTDEBRES,XTDEBBRK) ; Usage D SETBREAK(.RESULTS,BRKVALUE)
"RTN","XTDEBUG5",101,0)
 N XTDEBLO1,XTDEBLO2,XTDEBCND
"RTN","XTDEBUG5",102,0)
 S XTDEBCND=$P($G(XTDEBBRK),";",2,999),XTDEBBRK=$P($G(XTDEBBRK),";")
"RTN","XTDEBUG5",103,0)
 S XTDEBLO1=$$GETGLOBS(),XTDEBLO1=$NA(@XTDEBLO1@("BREAK"))
"RTN","XTDEBUG5",104,0)
 S XTDEBLO2=$$GETGLOBS(),XTDEBLO2=$NA(@XTDEBLO2@("BREAK-INPUT"))
"RTN","XTDEBUG5",105,0)
 S @XTDEBLO1@($$BREAKFRM(XTDEBBRK))="" I XTDEBCND'="" S @XTDEBLO1@($$BREAKFRM(XTDEBBRK),"COND")=XTDEBCND
"RTN","XTDEBUG5",106,0)
 S @XTDEBLO2@(XTDEBBRK)="" I XTDEBCND'="" S @XTDEBLO2@(XTDEBBRK,"COND")=XTDEBCND
"RTN","XTDEBUG5",107,0)
 D RETVALS(.XTDEBRES,XTDEBLO2)
"RTN","XTDEBUG5",108,0)
 Q
"RTN","XTDEBUG5",109,0)
 ;
"RTN","XTDEBUG5",110,0)
CLRBREAK(XTDEBRES,XTDEBBRK) ; Usage D CLRBREAK(.RESULTS,BRKVALUE)
"RTN","XTDEBUG5",111,0)
 N XTDEBLO1,XTDEBLO2,XTDEBVAL
"RTN","XTDEBUG5",112,0)
 S XTDEBLO1=$$GETGLOBS(),XTDEBLO1=$NA(@XTDEBLO1@("BREAK"))
"RTN","XTDEBUG5",113,0)
 S XTDEBLO2=$$GETGLOBS(),XTDEBLO2=$NA(@XTDEBLO2@("BREAK-INPUT"))
"RTN","XTDEBUG5",114,0)
 S XTDEBVAL=XTDEBBRK
"RTN","XTDEBUG5",115,0)
 F  S XTDEBBRK=$P(XTDEBVAL,";") Q:XTDEBBRK=""  S XTDEBVAL=$P(XTDEBVAL,";",2,99) D
"RTN","XTDEBUG5",116,0)
 . K @XTDEBLO1@($$BREAKFRM(XTDEBBRK))
"RTN","XTDEBUG5",117,0)
 . K @XTDEBLO2@(XTDEBBRK)
"RTN","XTDEBUG5",118,0)
 . Q
"RTN","XTDEBUG5",119,0)
 D RETVALS(.XTDEBRES,XTDEBLO2)
"RTN","XTDEBUG5",120,0)
 Q
"RTN","XTDEBUG5",121,0)
 ;
"RTN","XTDEBUG5",122,0)
CHKBREAK(XTDEBROU,XTDEBLIN) ; Usage VALUE=$$CHKBREAK(ROUNAME,LINEID) returns 1 if a breakpoint is set on the line
"RTN","XTDEBUG5",123,0)
 N XTDEBGLO,LINNUM,VALUE,XTDEBCND,XTDEBLOC,COUNT,XTDEBYES
"RTN","XTDEBUG5",124,0)
 S XTDEBGLO=$$GETGLOBS(),XTDEBGLO=$NA(@XTDEBGLO@("BREAK"))
"RTN","XTDEBUG5",125,0)
 S XTDEBLOC="+"_XTDEBLIN_"^"_XTDEBROU
"RTN","XTDEBUG5",126,0)
 S VALUE=0 I $D(@XTDEBGLO@(XTDEBLOC)) D
"RTN","XTDEBUG5",127,0)
 . S VALUE=1
"RTN","XTDEBUG5",128,0)
 . ; count each pass through location - have to clear on new entry
"RTN","XTDEBUG5",129,0)
 . S COUNT=$G(@XTDEBGLO@(XTDEBLOC,"COUNT"))+1
"RTN","XTDEBUG5",130,0)
 . S @XTDEBGLO@(XTDEBLOC,"COUNT")=COUNT
"RTN","XTDEBUG5",131,0)
 . S XTDEBCND=$G(@XTDEBGLO@("+"_XTDEBLIN_"^"_XTDEBROU,"COND"))
"RTN","XTDEBUG5",132,0)
 . I XTDEBCND'="" S XTDEBLIN="S XTDEBYES=0 I "_XTDEBCND_" S XTDEBYES=1" X XTDEBLIN S VALUE=XTDEBYES
"RTN","XTDEBUG5",133,0)
 . Q
"RTN","XTDEBUG5",134,0)
 Q VALUE
"RTN","XTDEBUG6")
0^7^B8391987
"RTN","XTDEBUG6",1,0)
XTDEBUG6 ;JLI/OAK_OIFO- ;06/07/08  17:21
"RTN","XTDEBUG6",2,0)
 ;;7.3;TOOLKIT;**107**;Apr 25, 1995;Build 14
"RTN","XTDEBUG6",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified
"RTN","XTDEBUG6",4,0)
 D EN^XTMUNIT("ZZUTXTD1")
"RTN","XTDEBUG6",5,0)
 Q
"RTN","XTDEBUG6",6,0)
 ;
"RTN","XTDEBUG6",7,0)
GETCMND(XTDEBRES,XTDEBCMD) ;
"RTN","XTDEBUG6",8,0)
 N XTDEBLIN,XTDEBVAL,XTDEBTYP,XTDEBARG,XTDEBCNT,XTDEBPOS,I,XTDEBLI1
"RTN","XTDEBUG6",9,0)
 K XTDEBRES
"RTN","XTDEBUG6",10,0)
 D DEBUG^XTMLOG("GETCMND","XTDEBRES,XTDEBCMD")
"RTN","XTDEBUG6",11,0)
 S XTDEBCNT=0
"RTN","XTDEBUG6",12,0)
 I $E(XTDEBCMD)=";" S XTDEBRES("CMND")=";",XTDEBRES("ARGS",1)=$E(XTDEBCMD,2,$L(XTDEBCMD)) Q ""
"RTN","XTDEBUG6",13,0)
 S XTDEBCMD=$$GETSTR(.XTDEBTYP,XTDEBCMD," :")
"RTN","XTDEBUG6",14,0)
 ; get one letter version of commands
"RTN","XTDEBUG6",15,0)
 S XTDEBRES("CMND")=$E(XTDEBTYP)
"RTN","XTDEBUG6",16,0)
 I XTDEBRES("CMND")=";" S XTDEBCNT=XTDEBCNT+1,XTDEBRES("ARGS",XTDEBCNT)=XTDEBCMD
"RTN","XTDEBUG6",17,0)
 I XTDEBTYP("TERM")=":" S XTDEBCMD=$$GETSTR(.XTDEBTYP,XTDEBCMD," ") S XTDEBRES("PRECOND")=XTDEBTYP
"RTN","XTDEBUG6",18,0)
 I XTDEBTYP("TERM")'=" " Q ""
"RTN","XTDEBUG6",19,0)
 S XTDEBPOS=" ,:" I (XTDEBRES("CMND")="N")!(XTDEBRES("CMND")="K")!(XTDEBRES("CMND")="F") S XTDEBPOS=" "
"RTN","XTDEBUG6",20,0)
 F  S XTDEBCMD=$$GETSTR(.XTDEBARG,XTDEBCMD,XTDEBPOS) D  Q:XTDEBARG("TERM")=" "  Q:XTDEBARG("TERM")=""
"RTN","XTDEBUG6",21,0)
 . S XTDEBCNT=XTDEBCNT+1,XTDEBRES("ARGS",XTDEBCNT)=XTDEBARG
"RTN","XTDEBUG6",22,0)
 . I XTDEBARG("TERM")=":" S XTDEBCMD=$$GETSTR(.XTDEBARG,XTDEBCMD," ,"),XTDEBRES("ARGS",XTDEBCNT,"POSTCOND")=XTDEBARG Q:XTDEBARG("TERM")=" "
"RTN","XTDEBUG6",23,0)
 . Q
"RTN","XTDEBUG6",24,0)
 S XTDEBLI1=""
"RTN","XTDEBUG6",25,0)
 ; 070719 - code added to yield one command at a time
"RTN","XTDEBUG6",26,0)
 F I=2:1 Q:'$D(XTDEBRES("ARGS",I))  D
"RTN","XTDEBUG6",27,0)
 . S:I=2 XTDEBLI1=XTDEBRES("CMND")_$S($D(XTDEBRES("PRECOND")):":"_XTDEBRES("PRECOND"),1:"")_" "
"RTN","XTDEBUG6",28,0)
 . S:I>2 XTDEBLI1=XTDEBLI1_"," S XTDEBLI1=XTDEBLI1_XTDEBRES("ARGS",I)_$S($D(XTDEBRES("ARGS",I,"POSTCOND")):":"_XTDEBRES("ARGS",I,"POSTCOND"),1:"")
"RTN","XTDEBUG6",29,0)
 . K XTDEBRES("ARGS",I)
"RTN","XTDEBUG6",30,0)
 . Q
"RTN","XTDEBUG6",31,0)
 I XTDEBLI1'="" S XTDEBCMD=XTDEBLI1_" "_XTDEBCMD
"RTN","XTDEBUG6",32,0)
 ; 070719 - end of insertion
"RTN","XTDEBUG6",33,0)
 S XTDEBLIN=XTDEBCMD
"RTN","XTDEBUG6",34,0)
 ; following line added in case an extra space is present between commands
"RTN","XTDEBUG6",35,0)
 F  Q:XTDEBLIN=""  Q:$E(XTDEBLIN)'=" "  S XTDEBLIN=$E(XTDEBLIN,2,$L(XTDEBLIN))
"RTN","XTDEBUG6",36,0)
 Q $G(XTDEBLIN)
"RTN","XTDEBUG6",37,0)
 ;
"RTN","XTDEBUG6",38,0)
GETSTR(XTDEBSTR,XTDEBINP,XTDEBTRM) ;
"RTN","XTDEBUG6",39,0)
 N XTDEBOUT,XTDEBDON,XTDEBPRN,XTDEBQUO,XTDEBCHR
"RTN","XTDEBUG6",40,0)
 K XTDEBSTR
"RTN","XTDEBUG6",41,0)
 S XTDEBOUT=XTDEBINP
"RTN","XTDEBUG6",42,0)
 S XTDEBSTR="",XTDEBDON=0,XTDEBQUO=0,XTDEBPRN=0
"RTN","XTDEBUG6",43,0)
 F  S XTDEBCHR=$E(XTDEBOUT),XTDEBOUT=$E(XTDEBOUT,2,500) Q:XTDEBCHR=""  D  Q:XTDEBDON
"RTN","XTDEBUG6",44,0)
 . I XTDEBTRM[XTDEBCHR,XTDEBPRN=0,XTDEBQUO=0 S XTDEBDON=1 Q
"RTN","XTDEBUG6",45,0)
 . I XTDEBCHR="""" S XTDEBQUO='XTDEBQUO
"RTN","XTDEBUG6",46,0)
 . I XTDEBCHR="(",'XTDEBQUO S XTDEBPRN=XTDEBPRN+1
"RTN","XTDEBUG6",47,0)
 . I XTDEBCHR=")",'XTDEBQUO S XTDEBPRN=XTDEBPRN-1
"RTN","XTDEBUG6",48,0)
 . S XTDEBSTR=XTDEBSTR_XTDEBCHR
"RTN","XTDEBUG6",49,0)
 . Q
"RTN","XTDEBUG6",50,0)
 S XTDEBSTR("TERM")=XTDEBCHR
"RTN","XTDEBUG6",51,0)
 Q XTDEBOUT
"RTN","XTDEBUG7")
0^8^B90741354
"RTN","XTDEBUG7",1,0)
XTDEBUG7 ;JLI/OAK_OIFO- ;06/07/08  17:20
"RTN","XTDEBUG7",2,0)
 ;;7.3;TOOLKIT;**107**;Apr 25, 1995;Build 14
"RTN","XTDEBUG7",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified
"RTN","XTDEBUG7",4,0)
 D EN^XTMUNIT("ZZUTXTD1")
"RTN","XTDEBUG7",5,0)
 Q
"RTN","XTDEBUG7",6,0)
 ;
"RTN","XTDEBUG7",7,0)
REASON(XTDEBTYP,XTDEBNUM) ;
"RTN","XTDEBUG7",8,0)
 N XTDEBLOC,XTDEBCUR,XTDEBROU,XTDEBLNM,XTDEBRES,XTDEBLVL
"RTN","XTDEBUG7",9,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG(),XTDEBRES=$$RESULTS^XTDEBUG()
"RTN","XTDEBUG7",10,0)
 S XTDEBLVL=$G(@XTDEBLOC@("LASTLVL"))
"RTN","XTDEBUG7",11,0)
 S @XTDEBLOC@("REASONDONE")=XTDEBTYP
"RTN","XTDEBUG7",12,0)
 M @XTDEBLOC@("XTDEBDUZ")=DUZ ; save off current DUZ array
"RTN","XTDEBUG7",13,0)
 D DEBUG^XTMLOG("REASON","XTDEBTYP")
"RTN","XTDEBUG7",14,0)
 K @XTDEBRES@(" REASON")
"RTN","XTDEBUG7",15,0)
 I $D(@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG","CMND")) D
"RTN","XTDEBUG7",16,0)
 . ; following code was in NXT version
"RTN","XTDEBUG7",17,0)
 . N XTDEBLIN,XTDEBUGI
"RTN","XTDEBUG7",18,0)
 . S XTDEBLIN="" F XTDEBUGI=XTDEBNUM+1:1 Q:'$D(@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG","ARGS",XTDEBUGI))  S XTDEBLIN=XTDEBLIN_$S(XTDEBLIN'="":",",1:"")_^(XTDEBUGI)_$S($D(^(XTDEBUGI,"POSTCOND")):":"_^("POSTCOND"),1:"")
"RTN","XTDEBUG7",19,0)
 . S XTDEBLIN=@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG","CMND")_$S($D(^("PRECOND")):":"_^("PRECOND"),1:"")_" "_XTDEBLIN ;$G(^("ARGS",+XTDEBNUM))
"RTN","XTDEBUG7",20,0)
 . I $G(@XTDEBLOC@("LASTCMND"))'="" S @XTDEBRES@(" REASON",1)="   LAST COMMAND: "_@XTDEBLOC@("LASTCMND") ; INSERTED  JLI 051026
"RTN","XTDEBUG7",21,0)
 . I $G(@XTDEBLOC@("CURRCMND"))'="" S @XTDEBRES@(" REASON",2)="   NEXT COMMAND: "_@XTDEBLOC@("CURRCMND") ; JLI 070719
"RTN","XTDEBUG7",22,0)
 . S @XTDEBLOC@("LASTCMND")=$S($G(@XTDEBLOC@("CURRCMND"))'="":^("CURRCMND"),1:XTDEBLIN) ; ADDED JLI 051026
"RTN","XTDEBUG7",23,0)
 . D DEBUG^XTMLOG("REASON_LASTCMND","XTDEBLIN")
"RTN","XTDEBUG7",24,0)
 . Q
"RTN","XTDEBUG7",25,0)
 S XTDEBLNM=$G(@XTDEBLOC@("LVL",XTDEBLVL,"LINE")),XTDEBROU=$G(@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE"))
"RTN","XTDEBUG7",26,0)
 S @XTDEBRES@(" REASON")="SECTION=REASON"
"RTN","XTDEBUG7",27,0)
 S @XTDEBRES@(" REASON",9)="SECTION=LOCATION"
"RTN","XTDEBUG7",28,0)
 S @XTDEBRES@(" REASON",10)="ROUTINE: "_XTDEBROU
"RTN","XTDEBUG7",29,0)
 S @XTDEBRES@(" REASON",11)="LINE: "_XTDEBLNM
"RTN","XTDEBUG7",30,0)
 S XTDEBCUR="" I XTDEBLNM'="",XTDEBROU'="" S XTDEBCUR=$$TAGNUM(XTDEBROU,XTDEBLNM)_"^"_XTDEBROU
"RTN","XTDEBUG7",31,0)
 I (XTDEBTYP="DONE") K @XTDEBRES@(" REASON") D  S @XTDEBRES@(" REASON",0)="DONE -- PROCESSING FINISHED"
"RTN","XTDEBUG7",32,0)
 . S @XTDEBRES@(" REASON")="SECTION=REASON"
"RTN","XTDEBUG7",33,0)
 . I $G(@XTDEBLOC@("CONSOLE-OUT"))'="" D SETWRITE
"RTN","XTDEBUG7",34,0)
 . Q
"RTN","XTDEBUG7",35,0)
 I (XTDEBTYP="EXCLKILL") K @XTDEBRES@(" REASON") D  S @XTDEBRES@(" REASON",0)="TERMINATED -- EXECUTION OF NEXT COMMAND [EXCLUSIVE OR GLOBAL KILL] WILL DESTROY CONNECTION"
"RTN","XTDEBUG7",36,0)
 . S @XTDEBRES@(" REASON")="SECTION=REASON"
"RTN","XTDEBUG7",37,0)
 . I $G(@XTDEBLOC@("CONSOLE-OUT"))'="" D SETWRITE
"RTN","XTDEBUG7",38,0)
 . N I F I=2:1 Q:'$D(@XTDEBLOC@("LVL",I))  K @XTDEBLOC@("LVL",I)
"RTN","XTDEBUG7",39,0)
 . S @XTDEBLOC@("LVL",1,"CMND")=""
"RTN","XTDEBUG7",40,0)
 . Q
"RTN","XTDEBUG7",41,0)
 I (XTDEBTYP="STEP") S @XTDEBRES@(" REASON",0)="STEP MODE: "_XTDEBCUR_"    "_$$GETLINE(XTDEBROU,"+"_XTDEBLNM)
"RTN","XTDEBUG7",42,0)
 I (XTDEBTYP="WATCH") S @XTDEBRES@(" REASON",0)="WATCH ON VARIABLES: "_XTDEBCUR_" AT +"_XTDEBLNM_"^"_XTDEBROU_"    "_$$GETLINE(XTDEBROU,"+"_XTDEBLNM)
"RTN","XTDEBUG7",43,0)
 I (XTDEBTYP="BREAK") S @XTDEBRES@(" REASON",0)="BREAKPOINT: "_XTDEBCUR_"    "_$$GETLINE(XTDEBROU,"+"_XTDEBLNM)
"RTN","XTDEBUG7",44,0)
 I (XTDEBTYP="START") S @XTDEBRES@(" REASON",0)="START:  "_@XTDEBLOC@("LVL",0,"CMND")
"RTN","XTDEBUG7",45,0)
 I (XTDEBTYP="READ") D
"RTN","XTDEBUG7",46,0)
 . S @XTDEBRES@(" REASON",0)="READ:  "_$G(XTDEBCUR)
"RTN","XTDEBUG7",47,0)
 . D SETREAD
"RTN","XTDEBUG7",48,0)
 . Q
"RTN","XTDEBUG7",49,0)
 I (XTDEBTYP="WRITE") D
"RTN","XTDEBUG7",50,0)
 . S @XTDEBRES@(" REASON",0)="WRITE:  "_$G(XTDEBCUR)_"  LINE: "_$G(@XTDEBLOC@("CONSOLE-OUT"))
"RTN","XTDEBUG7",51,0)
 . D SETWRITE
"RTN","XTDEBUG7",52,0)
 . Q
"RTN","XTDEBUG7",53,0)
 I '$D(@XTDEBRES@(" REASON",0)) S @XTDEBRES@(" REASON",0)="UNIDENTIFIED TYPE -- "_$G(XTDEBTYP)
"RTN","XTDEBUG7",54,0)
 D DEBUG^XTMLOG("LEAVING REASON: ",$NA(@XTDEBRES@(" REASON")),1)
"RTN","XTDEBUG7",55,0)
 Q
"RTN","XTDEBUG7",56,0)
 ;
"RTN","XTDEBUG7",57,0)
SETWRITE ;
"RTN","XTDEBUG7",58,0)
 ; ZEXCEPT: XTDEBLOC,XTDEBRES  -- FROM REASON
"RTN","XTDEBUG7",59,0)
 S @XTDEBRES@(" REASON",3)="SECTION=WRITE"
"RTN","XTDEBUG7",60,0)
 S @XTDEBRES@(" REASON",4)="LINE: "_$G(@XTDEBLOC@("CONSOLE-OUT")) K @XTDEBLOC@("CONSOLE-OUT")
"RTN","XTDEBUG7",61,0)
 D DEBUG^XTMLOG("REASON WRITING: ",$NA(@XTDEBRES@(" REASON",4)))
"RTN","XTDEBUG7",62,0)
 Q
"RTN","XTDEBUG7",63,0)
 ;
"RTN","XTDEBUG7",64,0)
SETREAD ;
"RTN","XTDEBUG7",65,0)
 N XTDEBLVL
"RTN","XTDEBUG7",66,0)
 ; ZEXCEPT: XTDEBLOC,XTDEBRES  -- FROM REASON
"RTN","XTDEBUG7",67,0)
 S XTDEBLVL=@XTDEBLOC@("LASTLVL"),XTDEBLVL=$NA(@XTDEBLOC@("LVL",XTDEBLVL))
"RTN","XTDEBUG7",68,0)
 S @XTDEBRES@(" REASON",3)="SECTION=READ"
"RTN","XTDEBUG7",69,0)
 S @XTDEBRES@(" REASON",4)="LINE: "_$G(@XTDEBLOC@("CONSOLE-OUT")) K @XTDEBLOC@("CONSOLE-OUT")
"RTN","XTDEBUG7",70,0)
 S @XTDEBRES@(" REASON",5)="NUM CHARS: "_$G(@XTDEBLVL@("READ-NUMCHARS")) K @XTDEBLVL@("READ-NUMCHARS")
"RTN","XTDEBUG7",71,0)
 S @XTDEBRES@(" REASON",6)="TIMEOUT: "_$G(@XTDEBLVL@("READ-TIMEOUT")) K @XTDEBLVL@("READ-TIMEOUT")
"RTN","XTDEBUG7",72,0)
 S @XTDEBRES@(" REASON",7)="STAR-READ: "_$G(@XTDEBLVL@("READ-STAR")) K @XTDEBLVL@("READ-STAR")
"RTN","XTDEBUG7",73,0)
 S @XTDEBRES@(" REASON",8)="TYPE-AHEAD: "_$S($P($G(^VA(200,DUZ,200)),U,9)="Y":1,1:0)
"RTN","XTDEBUG7",74,0)
 D DEBUG^XTMLOG("REASON READ",$NA(@XTDEBRES@(" REASON")),1)
"RTN","XTDEBUG7",75,0)
 Q
"RTN","XTDEBUG7",76,0)
 ;
"RTN","XTDEBUG7",77,0)
OPENDO ;(XTDEBCMD,XTDEBVAR) ;
"RTN","XTDEBUG7",78,0)
 N XTDEBPAR,XTDEBLNM,XTDEBLOC,XTDEBARG,XTDEBCOD,XTDEBMRK
"RTN","XTDEBUG7",79,0)
 N XTDEBLVJ,XTDEBTAG,XTDEBUGJ
"RTN","XTDEBUG7",80,0)
 ; following line with 3 added variables from laptop version
"RTN","XTDEBUG7",81,0)
 ; N XTDEBROU,XTDEBLVL,XTDEBCMD,XTDEBVAR,XTDEBLVN,XTDEBTAG,XTDEBLVJ,XTDEBUGJ
"RTN","XTDEBUG7",82,0)
 N XTDEBROU,XTDEBLVL,XTDEBCMD,XTDEBVAR,XTDEBLVN
"RTN","XTDEBUG7",83,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG()
"RTN","XTDEBUG7",84,0)
 S XTDEBLVL=+$G(@XTDEBLOC@("LASTLVL"))
"RTN","XTDEBUG7",85,0)
 D DEBUG^XTMLOG("OPENDO1",$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG7",86,0)
 S XTDEBCMD=$G(@XTDEBLOC@("LVL",XTDEBLVL,"OPENDO")) K ^("OPENDO")
"RTN","XTDEBUG7",87,0)
 S XTDEBPAR=$P(XTDEBCMD,"(",2,99),XTDEBMRK=$P($P(XTDEBCMD,"("),"^",2) I XTDEBMRK="" S XTDEBCMD=$P(XTDEBCMD,"(")_"^"_@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE")_"("_XTDEBPAR
"RTN","XTDEBUG7",88,0)
 I $D(@XTDEBLOC@("LVL",XTDEBLVL,"XTDEBVAR")) S XTDEBVAR=^("XTDEBVAR")
"RTN","XTDEBUG7",89,0)
 ; following lines from laptop version (commented out here)
"RTN","XTDEBUG7",90,0)
 S XTDEBTAG="" F XTDEBUGJ=0:1 S XTDEBLVJ=XTDEBLVL-XTDEBUGJ Q:XTDEBLVJ'>0  D  I XTDEBTAG'="" Q
"RTN","XTDEBUG7",91,0)
 . I $$TAGNUM($G(@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE")),$G(@XTDEBLOC@("LVL",XTDEBLVJ,"LINE")))'="" S XTDEBTAG=$$TAGNUM($G(@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE")),$G(@XTDEBLOC@("LVL",XTDEBLVJ,"LINE")))
"RTN","XTDEBUG7",92,0)
 . Q
"RTN","XTDEBUG7",93,0)
 S XTDEBMRK=" > " I $D(@XTDEBLOC@("LVL",XTDEBLVL-1,"ROUTINE")) S XTDEBMRK=XTDEBTAG_"^"_$G(@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE"))_" > "
"RTN","XTDEBUG7",94,0)
 S XTDEBMRK="                              "_XTDEBMRK,XTDEBMRK=$E(XTDEBMRK,$L(XTDEBMRK)-25,$L(XTDEBMRK))
"RTN","XTDEBUG7",95,0)
 ; end of lines from laptop version
"RTN","XTDEBUG7",96,0)
 ; followin line replaced above lines from laptop version
"RTN","XTDEBUG7",97,0)
 ;S XTDEBMRK=$$STKFROM(XTDEBLOC,XTDEBLVL-1)
"RTN","XTDEBUG7",98,0)
 ; end of replacement for laptop version
"RTN","XTDEBUG7",99,0)
 D TAGPARTS(.XTDEBPAR,XTDEBCMD)
"RTN","XTDEBUG7",100,0)
 S XTDEBLNM=$$LINENUM(XTDEBPAR("ROUTINE"),XTDEBPAR("LINE"))
"RTN","XTDEBUG7",101,0)
 S XTDEBROU=$$ROUGLOB^XTDEBUG()
"RTN","XTDEBUG7",102,0)
 D DEBUG^XTMLOG("OPENDO","XTDEBCMD")
"RTN","XTDEBUG7",103,0)
 D DEBUG^XTMLOG("OPENDO","XTDEBPAR",1)
"RTN","XTDEBUG7",104,0)
 I $D(XTDEBPAR("ROUTINE")) D  ;
"RTN","XTDEBUG7",105,0)
 . S XTDEBCOD=@XTDEBROU@($$ROULOC^XTDEBUG(XTDEBPAR("ROUTINE")),XTDEBLNM,0) I 1
"RTN","XTDEBUG7",106,0)
 . S XTDEBCMD=$$GETSTR^XTDEBUG(.XTDEBARG,XTDEBCOD," "),XTDEBARG=$P(XTDEBARG,"(",2,999) S:$L(XTDEBARG)>0 XTDEBARG=$E(XTDEBARG,1,$L(XTDEBARG)-1)
"RTN","XTDEBUG7",107,0)
 . D DEBUG^XTMLOG("","XTDEBARG,XTDEBPAR(""ARGS"")",1)
"RTN","XTDEBUG7",108,0)
 . D OPENTAG^XTDEBUG(XTDEBPAR("ARGS"),XTDEBARG)
"RTN","XTDEBUG7",109,0)
 . S XTDEBLVN=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG7",110,0)
 . S XTDEBLVL=$NA(@XTDEBLOC@("LVL",XTDEBLVN)),@XTDEBLVL@("CODE")=XTDEBCOD
"RTN","XTDEBUG7",111,0)
 . S @XTDEBLVL@("ROUTINE")=XTDEBPAR("ROUTINE"),@XTDEBLVL@("LINE")=XTDEBLNM,@XTDEBLVL@("CMNDNUM")=0,@XTDEBLVL@("CMND")=XTDEBCMD
"RTN","XTDEBUG7",112,0)
 . S @XTDEBLOC@("STK",XTDEBLVN)=XTDEBMRK_$$TAGNUM(XTDEBPAR("ROUTINE"),XTDEBLNM)_"^"_XTDEBPAR("ROUTINE")
"RTN","XTDEBUG7",113,0)
 . I $D(XTDEBVAR) S @XTDEBLOC@("VAR",XTDEBLVL)=XTDEBVAR ; variable name to be assigned return value
"RTN","XTDEBUG7",114,0)
 . Q
"RTN","XTDEBUG7",115,0)
 D DEBUG^XTMLOG("OPENDO2",$NA(@XTDEBLOC@("LVL")),1)
"RTN","XTDEBUG7",116,0)
 G DOLINE^XTDEBUG
"RTN","XTDEBUG7",117,0)
 ;
"RTN","XTDEBUG7",118,0)
TAGPARTS(XTDEBRES,XTDEBINP) ;
"RTN","XTDEBUG7",119,0)
 K XTDEBRES N XTDEBTST,XTDEBGLO,XTDEBLVL,XTDEBLIN,XTDEBINV
"RTN","XTDEBUG7",120,0)
 S XTDEBTST=$P(XTDEBINP,"(") I XTDEBTST'["^" S XTDEBGLO=$$GETGLOB^XTDEBUG(),XTDEBLVL=@XTDEBGLO@("LASTLVL"),XTDEBINP=XTDEBTST_"^"_@XTDEBGLO@("LVL",XTDEBLVL,"ROUTINE")_$S($P(XTDEBINP,"(",2)'="":"("_$P(XTDEBINP,"(",2,200),1:"")
"RTN","XTDEBUG7",121,0)
 S XTDEBLIN=$P(XTDEBINP,"^") I XTDEBLIN="" S XTDEBLIN="+1"
"RTN","XTDEBUG7",122,0)
 S XTDEBRES("LINE")=XTDEBLIN
"RTN","XTDEBUG7",123,0)
 S XTDEBRES("ROUTINE")=$P($P(XTDEBINP,"^",2),"(") I XTDEBRES("ROUTINE")="" S XTDEBLVL=@XTDEBGLO@("LASTLVL"),XTDEBRES("ROUTINE")=@XTDEBGLO@("LVL",XTDEBLVL,"ROUTINE")
"RTN","XTDEBUG7",124,0)
 S XTDEBINP=$P(XTDEBINP,"(",2,99)
"RTN","XTDEBUG7",125,0)
 I XTDEBINP'="" S XTDEBINP=$E(XTDEBINP,1,$L(XTDEBINP)-1)
"RTN","XTDEBUG7",126,0)
 F  S XTDEBINV=$P(XTDEBINP,"XTDEBV(",2) Q:XTDEBINV=""  S XTDEBINV="XTDEBV("_(+XTDEBINV)_")" S XTDEBINP=$P(XTDEBINP,XTDEBINV)_@XTDEBINV_$P(XTDEBINP,XTDEBINV,2,99)
"RTN","XTDEBUG7",127,0)
 S XTDEBRES("ARGS")=XTDEBINP
"RTN","XTDEBUG7",128,0)
 Q
"RTN","XTDEBUG7",129,0)
 ;
"RTN","XTDEBUG7",130,0)
SETROU(XTDEBROU) ;
"RTN","XTDEBUG7",131,0)
 N XTDEBRO1,I,XTDEBLOC
"RTN","XTDEBUG7",132,0)
 I XTDEBROU="@" Q -1
"RTN","XTDEBUG7",133,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG(),XTDEBLOC=$NA(@XTDEBLOC@("ROU"))
"RTN","XTDEBUG7",134,0)
 ;   load the routine into memory and into a global location
"RTN","XTDEBUG7",135,0)
 S XTDEBRO1=$O(@XTDEBLOC@("B",XTDEBROU,0))
"RTN","XTDEBUG7",136,0)
 I XTDEBRO1'>0 S XTDEBRO1=1 F I=0:0 S I=$O(@XTDEBLOC@(I)) Q:I'>0  S XTDEBRO1=I+1
"RTN","XTDEBUG7",137,0)
 K @XTDEBLOC@(XTDEBRO1) D  ; decided to rebuild routines each time in case modified between calls
"RTN","XTDEBUG7",138,0)
 . N DIF,XCNP,X
"RTN","XTDEBUG7",139,0)
 . S DIF=$NA(@XTDEBLOC@(XTDEBRO1))
"RTN","XTDEBUG7",140,0)
 . S DIF=$E(DIF,1,$L(DIF)-1)_","
"RTN","XTDEBUG7",141,0)
 . S XCNP=0,X=XTDEBROU
"RTN","XTDEBUG7",142,0)
 . X ^%ZOSF("LOAD")
"RTN","XTDEBUG7",143,0)
 . ; make it so we can find the routine
"RTN","XTDEBUG7",144,0)
 . S @XTDEBLOC@("B",XTDEBROU,XTDEBRO1)=""
"RTN","XTDEBUG7",145,0)
 . ; and so we can find TAGS within the routine
"RTN","XTDEBUG7",146,0)
 . F I=0:0 S I=$O(@XTDEBLOC@(XTDEBRO1,I)) Q:I'>0  S X=^(I,0) I $E(X,1)'=" ",$E(X,1)'=$C(9) S X=$P($P($P(X," "),"("),$C(9)),@XTDEBLOC@(XTDEBRO1,"TAG",X,I)=""
"RTN","XTDEBUG7",147,0)
 . Q
"RTN","XTDEBUG7",148,0)
 Q XTDEBRO1
"RTN","XTDEBUG7",149,0)
 ;
"RTN","XTDEBUG7",150,0)
GETLINE(XTDEBROU,XTDEBLIN) ;
"RTN","XTDEBUG7",151,0)
 N LINNUM,INDEX,LINE,XTDEBLOC
"RTN","XTDEBUG7",152,0)
 D DEBUG^XTMLOG("GETLINE")
"RTN","XTDEBUG7",153,0)
 S INDEX=$$ROULOC(XTDEBROU)
"RTN","XTDEBUG7",154,0)
 S LINNUM=0 I INDEX>0 S LINNUM=$$LINENUM(XTDEBROU,XTDEBLIN)
"RTN","XTDEBUG7",155,0)
 I LINNUM>0 S XTDEBLOC=$$ROUGLOB^XTDEBUG(),LINE=$G(@XTDEBLOC@(INDEX,LINNUM,0))
"RTN","XTDEBUG7",156,0)
 E  S LINE=""
"RTN","XTDEBUG7",157,0)
 Q LINE
"RTN","XTDEBUG7",158,0)
 ;
"RTN","XTDEBUG7",159,0)
ROULOC(XTDEBROU) ;
"RTN","XTDEBUG7",160,0)
 N XTDEBLOC,XTDEBNUM
"RTN","XTDEBUG7",161,0)
 D DEBUG^XTMLOG("IN ROULOC 1")
"RTN","XTDEBUG7",162,0)
 I XTDEBROU="" Q 0 ; TODO: handle no entry
"RTN","XTDEBUG7",163,0)
 I XTDEBROU="@" Q 0 ; TODO:
"RTN","XTDEBUG7",164,0)
 D DEBUG^XTMLOG("IN ROULOC 2")
"RTN","XTDEBUG7",165,0)
 S XTDEBLOC=$$ROUGLOB^XTDEBUG()
"RTN","XTDEBUG7",166,0)
 S XTDEBNUM=$O(@XTDEBLOC@("B",XTDEBROU,0))
"RTN","XTDEBUG7",167,0)
 I XTDEBNUM'>0 S XTDEBNUM=$$SETROU(XTDEBROU)
"RTN","XTDEBUG7",168,0)
 Q XTDEBNUM
"RTN","XTDEBUG7",169,0)
 ;
"RTN","XTDEBUG7",170,0)
STKFROM(XTDEBLOC,XTDEBLVL) ; returns from part of stack
"RTN","XTDEBUG7",171,0)
 N XTDEBMRK,XTDEBROU,XTDEBLIN
"RTN","XTDEBUG7",172,0)
 S XTDEBMRK=" < " I $D(@XTDEBLOC@("LVL",XTDEBLVL-1,"ROUTINE")) S XTDEBMRK=" < "_$$TAGNUM($G(@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE")),$G(@XTDEBLOC@("LVL",XTDEBLVL,"LINE")))_"^"_$G(@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE"))
"RTN","XTDEBUG7",173,0)
 I XTDEBMRK'=" < " S XTDEBROU=$G(^("ROUTINE")),XTDEBLIN=$G(^("LINE"))
"RTN","XTDEBUG7",174,0)
 I XTDEBMRK'=" < " D DEBUG^XTMLOG("STKFROM","XTDEBLVL,XTDEBMRK,XTDEBROU,XTDEBLIN")
"RTN","XTDEBUG7",175,0)
 Q XTDEBMRK
"RTN","XTDEBUG7",176,0)
 ;
"RTN","XTDEBUG7",177,0)
LINENUM(XTDEBROU,XTDEBLIN) ; get line number relative to top of routine
"RTN","XTDEBUG7",178,0)
 N XTDEBLOC,XTDEBNAM,LINNUM,OFFSET,XTDEBNUM
"RTN","XTDEBUG7",179,0)
 D DEBUG^XTMLOG("LINENUM")
"RTN","XTDEBUG7",180,0)
 S XTDEBNUM=$$ROULOC(XTDEBROU)
"RTN","XTDEBUG7",181,0)
 I XTDEBNUM'>0 Q 0
"RTN","XTDEBUG7",182,0)
 S XTDEBLOC=$$ROUGLOB^XTDEBUG()
"RTN","XTDEBUG7",183,0)
 S XTDEBNAM=$P(XTDEBLIN,"+"),LINNUM=$P(XTDEBLIN,"+",2),OFFSET=0
"RTN","XTDEBUG7",184,0)
 I XTDEBNAM'="" S OFFSET=$O(@XTDEBLOC@(XTDEBNUM,"TAG",XTDEBNAM,0)) I OFFSET<1 Q 0
"RTN","XTDEBUG7",185,0)
 S LINNUM=OFFSET+LINNUM
"RTN","XTDEBUG7",186,0)
 Q LINNUM
"RTN","XTDEBUG7",187,0)
 ;
"RTN","XTDEBUG7",188,0)
TAGNUM(XTDEBROU,XTDEBLIN) ; get line number relative to closest TAG, e.g., TAG+3
"RTN","XTDEBUG7",189,0)
 N XTDEBLAS,XTDEBNAM,XTDEBTAG,XTDEBLOC,XTDEBLIE,XTDEBNUM
"RTN","XTDEBUG7",190,0)
 S XTDEBLOC=$$ROUGLOB^XTDEBUG()
"RTN","XTDEBUG7",191,0)
 I XTDEBLIN="" Q ""
"RTN","XTDEBUG7",192,0)
 D DEBUG^XTMLOG("TAGNUM","XTDEBROU,XTDEBLIN")
"RTN","XTDEBUG7",193,0)
 S XTDEBNUM=$$ROULOC(XTDEBROU)
"RTN","XTDEBUG7",194,0)
 I XTDEBNUM'>0 Q 0 ; TODO handle no entry
"RTN","XTDEBUG7",195,0)
 S XTDEBLAS=0
"RTN","XTDEBUG7",196,0)
 S XTDEBTAG="",XTDEBNAM="" F  S XTDEBNAM=$O(@XTDEBLOC@(XTDEBNUM,"TAG",XTDEBNAM)) Q:XTDEBNAM=""  S XTDEBLIE=$O(^(XTDEBNAM,0)) I XTDEBLIE'>XTDEBLIN,XTDEBLIE>XTDEBLAS S XTDEBLAS=XTDEBLIE,XTDEBTAG=XTDEBNAM
"RTN","XTDEBUG7",197,0)
 S XTDEBLAS=XTDEBLIN-XTDEBLAS
"RTN","XTDEBUG7",198,0)
 Q XTDEBTAG_$S(XTDEBLAS>0:"+"_XTDEBLAS,1:"")
"RTN","XTDEBUG7",199,0)
 ;
"RTN","XTDEBUG7",200,0)
SETVARS(XTDEBRES,XTDEBVAR) ;
"RTN","XTDEBUG7",201,0)
 N XTDEBVAL S XTDEBVAL=""
"RTN","XTDEBUG7",202,0)
 F  S XTDEBVAL=$O(XTDEBVAR(XTDEBVAL)) Q:XTDEBVAL=""  S @(XTDEBVAL)=XTDEBVAR(XTDEBVAL)
"RTN","XTDEBUG7",203,0)
 Q
"RTN","XTDEBUG8")
0^9^B7068042
"RTN","XTDEBUG8",1,0)
XTDEBUG8 ;JLI/FO_OAK - ;06/07/08  17:10
"RTN","XTDEBUG8",2,0)
 ;;7.3;TOOLKIT;**107**;Apr 25, 1995;Build 14
"RTN","XTDEBUG8",3,0)
 ;;Per VHA Directive 2004-038, this routine should not be modified
"RTN","XTDEBUG8",4,0)
 Q
"RTN","XTDEBUG8",5,0)
 ;
"RTN","XTDEBUG8",6,0)
SETNOARG ;
"RTN","XTDEBUG8",7,0)
 N XTDEBLOC,XTDEBLVL,XTDEBARG
"RTN","XTDEBUG8",8,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG()
"RTN","XTDEBUG8",9,0)
 S XTDEBLVL=@XTDEBLOC@("LASTLVL")+1
"RTN","XTDEBUG8",10,0)
 S XTDEBARG=+$G(@XTDEBLOC@("LVL",XTDEBLVL,"NOARG"))
"RTN","XTDEBUG8",11,0)
 D DEBUG^XTMLOG("SETNOARG","XTDEBARG")
"RTN","XTDEBUG8",12,0)
 S @XTDEBLOC@("LASTLVL")=XTDEBLVL
"RTN","XTDEBUG8",13,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"NOARG")=XTDEBARG+1
"RTN","XTDEBUG8",14,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE")=@XTDEBLOC@("LVL",XTDEBLVL-1,"ROUTINE")
"RTN","XTDEBUG8",15,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"LINE")=@XTDEBLOC@("LVL",XTDEBLVL-1,"LINE")
"RTN","XTDEBUG8",16,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"ENTRY")="DONOARG^XTDEBUG8"
"RTN","XTDEBUG8",17,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"TYPE")="DO"
"RTN","XTDEBUG8",18,0)
 G DONOARG
"RTN","XTDEBUG8",19,0)
 ;
"RTN","XTDEBUG8",20,0)
DONOARG ;
"RTN","XTDEBUG8",21,0)
 N XTDEBCHR,XTDEBCNT,XTDEBCMD,XTDEBLIN,XTDEBLOC,XTDEBLVL
"RTN","XTDEBUG8",22,0)
 N XTDEBUGI
"RTN","XTDEBUG8",23,0)
 ; ZEXCEPT: XTDEBARG  -- DEFINED PRIOR TO ENTRY
"RTN","XTDEBUG8",24,0)
 S XTDEBLOC=$$GETGLOB^XTDEBUG()
"RTN","XTDEBUG8",25,0)
 S XTDEBLVL=@XTDEBLOC@("LASTLVL")
"RTN","XTDEBUG8",26,0)
 S XTDEBLIN=@XTDEBLOC@("LVL",XTDEBLVL,"LINE")+1
"RTN","XTDEBUG8",27,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"LINE")=XTDEBLIN
"RTN","XTDEBUG8",28,0)
 S XTDEBCMD=$$GETLINE^XTDEBUG(@XTDEBLOC@("LVL",XTDEBLVL,"ROUTINE"),"+"_@XTDEBLOC@("LVL",XTDEBLVL,"LINE"))
"RTN","XTDEBUG8",29,0)
 D DEBUG^XTMLOG("DONOARG","XTDEBCMD")
"RTN","XTDEBUG8",30,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"CODE")=XTDEBCMD
"RTN","XTDEBUG8",31,0)
 S XTDEBCNT=0
"RTN","XTDEBUG8",32,0)
 ; determine number of '.' chars starting line (ignore spaces)
"RTN","XTDEBUG8",33,0)
 F XTDEBUGI=1:1 S XTDEBCHR=$E(XTDEBCMD,XTDEBUGI) Q:(XTDEBCHR'=" ")&(XTDEBCHR'=".")  I XTDEBCHR="." S XTDEBCNT=XTDEBCNT+1
"RTN","XTDEBUG8",34,0)
 ; set active command line to rest of line
"RTN","XTDEBUG8",35,0)
 S XTDEBLIN=$E(XTDEBCMD,XTDEBUGI,$L(XTDEBCMD))
"RTN","XTDEBUG8",36,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"CMND")=XTDEBLIN
"RTN","XTDEBUG8",37,0)
 ; higher level of 'no arg DO' skip this line
"RTN","XTDEBUG8",38,0)
 I XTDEBCNT>@XTDEBLOC@("LVL",XTDEBLVL,"NOARG") G DONOARG
"RTN","XTDEBUG8",39,0)
 ; no or lower level of 'no arg DO' - done with this process
"RTN","XTDEBUG8",40,0)
 I XTDEBCNT<@XTDEBLOC@("LVL",XTDEBLVL,"NOARG") G POPLEVEL^XTDEBUG
"RTN","XTDEBUG8",41,0)
 ; process line of code
"RTN","XTDEBUG8",42,0)
 S @XTDEBLOC@("LVL",XTDEBLVL,"CMND")=$$GETCMND^XTDEBUG(.XTDEBARG,XTDEBLIN)
"RTN","XTDEBUG8",43,0)
 K @XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG")
"RTN","XTDEBUG8",44,0)
 M @XTDEBLOC@("LVL",XTDEBLVL,"XTDEBARG")=XTDEBARG
"RTN","XTDEBUG8",45,0)
 D DEBUG^XTMLOG("DONOARG1",$NA(@XTDEBLOC@("LVL",XTDEBLVL,"CMND")))
"RTN","XTDEBUG8",46,0)
 G STRTCMND^XTDEBUG
"RTN","XTDEBUG8",47,0)
 ;
"RTN","XTDEBUG8",48,0)
GETPERIO(XTDEBLIN) ; XTDEBLIN passed by reference
"RTN","XTDEBUG8",49,0)
 N XTDEBCNT S XTDEBCNT=0
"RTN","XTDEBUG8",50,0)
 F  Q:XTDEBLIN=""  Q:" ."_$C(9)'[$E(XTDEBLIN)  S:$E(XTDEBLIN)="." XTDEBCNT=XTDEBCNT+1 S XTDEBLIN=$E(XTDEBLIN,2,$L(XTDEBLIN))
"RTN","XTDEBUG8",51,0)
 Q XTDEBCNT
"VER")
8.0^22.0
**END**
**END**
