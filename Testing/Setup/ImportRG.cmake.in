#---------------------------------------------------------------------------
# Copyright 2011 The Open Source Electronic Health Record Agent
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#---------------------------------------------------------------------------
macro(CheckResult Result Message)
  if(NOT "${Result}" EQUAL 0)
    message(FATAL_ERROR  "ERROR: ${Message}")
  endif()
endmacro()

# stop all active mumps processes for current user, linux only
# this is equivalent of command "pgrep -u $(whoami) mumps | xargs mupip stop"
macro(stop_mumps_process)
  execute_process(COMMAND whoami
                  OUTPUT_VARIABLE user
                  OUTPUT_STRIP_TRAILING_WHITESPACE)
  execute_process(COMMAND pgrep -u ${user} -d ";" mumps
                  OUTPUT_VARIABLE output
                  RESULT_VARIABLE retCode
                  OUTPUT_STRIP_TRAILING_WHITESPACE)
  if(output)
    foreach(pid ${output})
      execute_process(COMMAND "@GTM_DIST@/mupip" stop ${pid})
    endforeach()
  endif()
endmacro()

set(TEST_VISTA_SETUP "@TEST_VISTA_SETUP@")
set(TEST_VISTA_FRESH_CUSTOM_REFRESH "@TEST_VISTA_FRESH_CUSTOM_REFRESH@")
if(TEST_VISTA_FRESH_CUSTOM_REFRESH)
  message(STATUS "Running custom command to refresh the Database")
  execute_process(COMMAND @TEST_VISTA_FRESH_CUSTOM_COMMAND@ RESULT_VARIABLE return)
  CheckResult(return "Custom refreshed Failed")
else()
  if(EXISTS "@CCONTROL_EXECUTABLE@")
    message(STATUS "Stopping cache instance @VISTA_CACHE_INSTANCE@")
    execute_process( COMMAND "@CCONTROL_EXECUTABLE@" stop @VISTA_CACHE_INSTANCE@ quietly)
    message(STATUS "Replacing @TEST_VISTA_FRESH_CACHE_DAT_VISTA@")
    file(COPY @TEST_VISTA_FRESH_CACHE_DAT_EMPTY@ DESTINATION @TEST_VISTA_FRESH_CACHE_DIR_VISTA@)
    message(STATUS "Starting cache instance @VISTA_CACHE_INSTANCE@")
    execute_process(COMMAND "@CCONTROL_EXECUTABLE@" start @VISTA_CACHE_INSTANCE@)
  else()
    message(STATUS "Stop all running mumps process")
    stop_mumps_process()
    message(STATUS "Removing GT.M database located @TEST_VISTA_FRESH_GTM_GLOBALS_DAT@")
    file(REMOVE @TEST_VISTA_FRESH_GTM_GLOBALS_DAT@ )
    message(STATUS "Removing Routine files from @TEST_VISTA_FRESH_GTM_ROUTINE_DIR@")
    file(REMOVE_RECURSE @TEST_VISTA_FRESH_GTM_ROUTINE_DIR@/)
    file(MAKE_DIRECTORY @TEST_VISTA_FRESH_GTM_ROUTINE_DIR@)
    get_filename_component(TEST_VISTA_FRESH_GTM_GLOBALS_DIR @TEST_VISTA_FRESH_GTM_GLOBALS_DAT@ PATH)
    message(STATUS "Creating a new database.dat in ${TEST_VISTA_FRESH_GTM_GLOBALS_DIR}")
    execute_process(COMMAND "@GTM_DIST@/mupip" create  WORKING_DIRECTORY ${TEST_VISTA_FRESH_GTM_GLOBALS_DIR}/ RESULT_VARIABLE return )
    CheckResult(return "mupip create Failed")
    execute_process(COMMAND "@GTM_DIST@/dse" change -f -key_max=1023 -rec=4096 WORKING_DIRECTORY ${TEST_VISTA_FRESH_GTM_GLOBALS_DIR}/  RESULT_VARIABLE return )
    CheckResult(return "Database Configuration Failed")
  endif()
endif()
message(STATUS "Preparing M Components...")
execute_process(COMMAND "@PYTHON_EXECUTABLE@" "@VISTA_SOURCE_DIR@/Scripts/PrepareMComponentsForImport.py" "-o" "@VISTA_BINARY_DIR@" "@TEST_VISTA_FRESH_M_DIR@" "@VISTA_SOURCE_DIR@/Scripts" WORKING_DIRECTORY "@VISTA_SOURCE_DIR@" RESULT_VARIABLE return)
CheckResult(return "M Preparation Failed")
file(MAKE_DIRECTORY "@VISTA_BINARY_DIR@/Testing/Log")
message(STATUS "Importing VistA Routines...")
execute_process(COMMAND "@PYTHON_EXECUTABLE@" "@CMAKE_CURRENT_BINARY_DIR@/VistARoutineImport.py" RESULT_VARIABLE return)
CheckResult(return "VistA Routine Import Failed")

if(TEST_VISTA_SETUP AND NOT EXISTS "@CCONTROL_EXECUTABLE@")
  file(GLOB ImportRoutines "@CMAKE_CURRENT_SOURCE_DIR@/*.ro")
  foreach(RoutineImportFile ${ImportRoutines})
    get_filename_component(routineName "${RoutineImportFile}" NAME_WE)
    message(STATUS "Updating the ${routineName} routine ")
    execute_process(COMMAND "@PYTHON_EXECUTABLE@" "@CMAKE_CURRENT_BINARY_DIR@/${routineName}Import.py" RESULT_VARIABLE return )
    CheckResult(return "Import of ${routineName} Failed")
  endforeach()
endif()

message(STATUS "Importing globals...")
if(TEST_VISTA_SETUP AND NOT EXISTS "@CCONTROL_EXECUTABLE@")
  file(STRINGS "@VISTA_BINARY_DIR@/globals.lst" allGlobalFiles)
  set(importLogFile "@VISTA_BINARY_DIR@/Testing/Log/GlobalImport0.log")
  file(REMOVE ${importLogFile})
  foreach(globalFile ${allGlobalFiles})
    file(APPEND ${importLogFile} "${globalFile}\n")
    execute_process(COMMAND "@GTM_DIST@/mupip" "load" "-format=zwr" "\"${globalFile}\"" RESULT_VARIABLE return ERROR_VARIABLE errVar )
    file(APPEND ${importLogFile} ${errVar})
    CheckResult(return "Global Import Failed")
  endforeach()
endif()
execute_process(COMMAND "@PYTHON_EXECUTABLE@" "@CMAKE_CURRENT_BINARY_DIR@/GlobalImport.py" RESULT_VARIABLE return )
CheckResult(return "Global Import Failed")
if(EXISTS "@CCONTROL_EXECUTABLE@")
  message(STATUS "Initializing VistA...")
  execute_process(COMMAND "@PYTHON_EXECUTABLE@" "@CMAKE_CURRENT_BINARY_DIR@/Initialize.py" )
endif()


if(TEST_VISTA_SETUP)
  message(STATUS "Running PostImportSetup script...")
  execute_process(COMMAND "@PYTHON_EXECUTABLE@" "@CMAKE_CURRENT_BINARY_DIR@/PostImportSetupScript.py" RESULT_VARIABLE return )
  CheckResult(return "Post Import Setup Failed")
  message(STATUS "Running ImportPats script...")
  execute_process(COMMAND "@PYTHON_EXECUTABLE@" "@CMAKE_CURRENT_BINARY_DIR@/importPats.py" RESULT_VARIABLE return )
  CheckResult(return "ImportPats Failed")
  message(STATUS "Running ClinicSetup script...")
  execute_process(COMMAND "@PYTHON_EXECUTABLE@" "@CMAKE_CURRENT_BINARY_DIR@/ClinicSetup.py" RESULT_VARIABLE return )
  CheckResult(return "ClinicSetup Failed")
endif()
